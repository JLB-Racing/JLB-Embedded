
JLBRacing2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00029470  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a00  08029670  08029670  00039670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a070  0802a070  00040100  2**0
                  CONTENTS
  4 .ARM          00000008  0802a070  0802a070  0003a070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a078  0802a078  00040100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0802a078  0802a078  0003a078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  0802a088  0802a088  0003a088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0802a098  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005d74  20000100  0802a198  00040100  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005e74  0802a198  00045e74  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00040100  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040136  2**0
                  CONTENTS, READONLY
 13 .debug_info   0006bbf7  00000000  00000000  00040179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008ba6  00000000  00000000  000abd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004d08  00000000  00000000  000b4918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00003b7b  00000000  00000000  000b9620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00039aa7  00000000  00000000  000bd19b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00048cf2  00000000  00000000  000f6c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00180aca  00000000  00000000  0013f934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00016cb4  00000000  00000000  002c0400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  002d70b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000100 	.word	0x20000100
 800021c:	00000000 	.word	0x00000000
 8000220:	08029658 	.word	0x08029658

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000104 	.word	0x20000104
 800023c:	08029658 	.word	0x08029658

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr

08000264 <__aeabi_drsub>:
 8000264:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000268:	e002      	b.n	8000270 <__adddf3>
 800026a:	bf00      	nop

0800026c <__aeabi_dsub>:
 800026c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000270 <__adddf3>:
 8000270:	b530      	push	{r4, r5, lr}
 8000272:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000276:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800027a:	ea94 0f05 	teq	r4, r5
 800027e:	bf08      	it	eq
 8000280:	ea90 0f02 	teqeq	r0, r2
 8000284:	bf1f      	itttt	ne
 8000286:	ea54 0c00 	orrsne.w	ip, r4, r0
 800028a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000292:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000296:	f000 80e2 	beq.w	800045e <__adddf3+0x1ee>
 800029a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002a2:	bfb8      	it	lt
 80002a4:	426d      	neglt	r5, r5
 80002a6:	dd0c      	ble.n	80002c2 <__adddf3+0x52>
 80002a8:	442c      	add	r4, r5
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	ea82 0000 	eor.w	r0, r2, r0
 80002b6:	ea83 0101 	eor.w	r1, r3, r1
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	2d36      	cmp	r5, #54	; 0x36
 80002c4:	bf88      	it	hi
 80002c6:	bd30      	pophi	{r4, r5, pc}
 80002c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x70>
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x84>
 80002ee:	4252      	negs	r2, r2
 80002f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f4:	ea94 0f05 	teq	r4, r5
 80002f8:	f000 80a7 	beq.w	800044a <__adddf3+0x1da>
 80002fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000300:	f1d5 0e20 	rsbs	lr, r5, #32
 8000304:	db0d      	blt.n	8000322 <__adddf3+0xb2>
 8000306:	fa02 fc0e 	lsl.w	ip, r2, lr
 800030a:	fa22 f205 	lsr.w	r2, r2, r5
 800030e:	1880      	adds	r0, r0, r2
 8000310:	f141 0100 	adc.w	r1, r1, #0
 8000314:	fa03 f20e 	lsl.w	r2, r3, lr
 8000318:	1880      	adds	r0, r0, r2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	4159      	adcs	r1, r3
 8000320:	e00e      	b.n	8000340 <__adddf3+0xd0>
 8000322:	f1a5 0520 	sub.w	r5, r5, #32
 8000326:	f10e 0e20 	add.w	lr, lr, #32
 800032a:	2a01      	cmp	r2, #1
 800032c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000330:	bf28      	it	cs
 8000332:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	18c0      	adds	r0, r0, r3
 800033c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000344:	d507      	bpl.n	8000356 <__adddf3+0xe6>
 8000346:	f04f 0e00 	mov.w	lr, #0
 800034a:	f1dc 0c00 	rsbs	ip, ip, #0
 800034e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000352:	eb6e 0101 	sbc.w	r1, lr, r1
 8000356:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800035a:	d31b      	bcc.n	8000394 <__adddf3+0x124>
 800035c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000360:	d30c      	bcc.n	800037c <__adddf3+0x10c>
 8000362:	0849      	lsrs	r1, r1, #1
 8000364:	ea5f 0030 	movs.w	r0, r0, rrx
 8000368:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800036c:	f104 0401 	add.w	r4, r4, #1
 8000370:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000374:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000378:	f080 809a 	bcs.w	80004b0 <__adddf3+0x240>
 800037c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000380:	bf08      	it	eq
 8000382:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000386:	f150 0000 	adcs.w	r0, r0, #0
 800038a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038e:	ea41 0105 	orr.w	r1, r1, r5
 8000392:	bd30      	pop	{r4, r5, pc}
 8000394:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000398:	4140      	adcs	r0, r0
 800039a:	eb41 0101 	adc.w	r1, r1, r1
 800039e:	3c01      	subs	r4, #1
 80003a0:	bf28      	it	cs
 80003a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003a6:	d2e9      	bcs.n	800037c <__adddf3+0x10c>
 80003a8:	f091 0f00 	teq	r1, #0
 80003ac:	bf04      	itt	eq
 80003ae:	4601      	moveq	r1, r0
 80003b0:	2000      	moveq	r0, #0
 80003b2:	fab1 f381 	clz	r3, r1
 80003b6:	bf08      	it	eq
 80003b8:	3320      	addeq	r3, #32
 80003ba:	f1a3 030b 	sub.w	r3, r3, #11
 80003be:	f1b3 0220 	subs.w	r2, r3, #32
 80003c2:	da0c      	bge.n	80003de <__adddf3+0x16e>
 80003c4:	320c      	adds	r2, #12
 80003c6:	dd08      	ble.n	80003da <__adddf3+0x16a>
 80003c8:	f102 0c14 	add.w	ip, r2, #20
 80003cc:	f1c2 020c 	rsb	r2, r2, #12
 80003d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d4:	fa21 f102 	lsr.w	r1, r1, r2
 80003d8:	e00c      	b.n	80003f4 <__adddf3+0x184>
 80003da:	f102 0214 	add.w	r2, r2, #20
 80003de:	bfd8      	it	le
 80003e0:	f1c2 0c20 	rsble	ip, r2, #32
 80003e4:	fa01 f102 	lsl.w	r1, r1, r2
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	bfdc      	itt	le
 80003ee:	ea41 010c 	orrle.w	r1, r1, ip
 80003f2:	4090      	lslle	r0, r2
 80003f4:	1ae4      	subs	r4, r4, r3
 80003f6:	bfa2      	ittt	ge
 80003f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003fc:	4329      	orrge	r1, r5
 80003fe:	bd30      	popge	{r4, r5, pc}
 8000400:	ea6f 0404 	mvn.w	r4, r4
 8000404:	3c1f      	subs	r4, #31
 8000406:	da1c      	bge.n	8000442 <__adddf3+0x1d2>
 8000408:	340c      	adds	r4, #12
 800040a:	dc0e      	bgt.n	800042a <__adddf3+0x1ba>
 800040c:	f104 0414 	add.w	r4, r4, #20
 8000410:	f1c4 0220 	rsb	r2, r4, #32
 8000414:	fa20 f004 	lsr.w	r0, r0, r4
 8000418:	fa01 f302 	lsl.w	r3, r1, r2
 800041c:	ea40 0003 	orr.w	r0, r0, r3
 8000420:	fa21 f304 	lsr.w	r3, r1, r4
 8000424:	ea45 0103 	orr.w	r1, r5, r3
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f1c4 040c 	rsb	r4, r4, #12
 800042e:	f1c4 0220 	rsb	r2, r4, #32
 8000432:	fa20 f002 	lsr.w	r0, r0, r2
 8000436:	fa01 f304 	lsl.w	r3, r1, r4
 800043a:	ea40 0003 	orr.w	r0, r0, r3
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	fa21 f004 	lsr.w	r0, r1, r4
 8000446:	4629      	mov	r1, r5
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	f094 0f00 	teq	r4, #0
 800044e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000452:	bf06      	itte	eq
 8000454:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000458:	3401      	addeq	r4, #1
 800045a:	3d01      	subne	r5, #1
 800045c:	e74e      	b.n	80002fc <__adddf3+0x8c>
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf18      	it	ne
 8000464:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000468:	d029      	beq.n	80004be <__adddf3+0x24e>
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	d005      	beq.n	8000482 <__adddf3+0x212>
 8000476:	ea54 0c00 	orrs.w	ip, r4, r0
 800047a:	bf04      	itt	eq
 800047c:	4619      	moveq	r1, r3
 800047e:	4610      	moveq	r0, r2
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea91 0f03 	teq	r1, r3
 8000486:	bf1e      	ittt	ne
 8000488:	2100      	movne	r1, #0
 800048a:	2000      	movne	r0, #0
 800048c:	bd30      	popne	{r4, r5, pc}
 800048e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000492:	d105      	bne.n	80004a0 <__adddf3+0x230>
 8000494:	0040      	lsls	r0, r0, #1
 8000496:	4149      	adcs	r1, r1
 8000498:	bf28      	it	cs
 800049a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a4:	bf3c      	itt	cc
 80004a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004aa:	bd30      	popcc	{r4, r5, pc}
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b8:	f04f 0000 	mov.w	r0, #0
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf1a      	itte	ne
 80004c4:	4619      	movne	r1, r3
 80004c6:	4610      	movne	r0, r2
 80004c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004cc:	bf1c      	itt	ne
 80004ce:	460b      	movne	r3, r1
 80004d0:	4602      	movne	r2, r0
 80004d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d6:	bf06      	itte	eq
 80004d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004dc:	ea91 0f03 	teqeq	r1, r3
 80004e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	bf00      	nop

080004e8 <__aeabi_ui2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f04f 0500 	mov.w	r5, #0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e750      	b.n	80003a8 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_i2d>:
 8000508:	f090 0f00 	teq	r0, #0
 800050c:	bf04      	itt	eq
 800050e:	2100      	moveq	r1, #0
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000518:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000520:	bf48      	it	mi
 8000522:	4240      	negmi	r0, r0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e73e      	b.n	80003a8 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_f2d>:
 800052c:	0042      	lsls	r2, r0, #1
 800052e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000532:	ea4f 0131 	mov.w	r1, r1, rrx
 8000536:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800053a:	bf1f      	itttt	ne
 800053c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000540:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000544:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000548:	4770      	bxne	lr
 800054a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800054e:	bf08      	it	eq
 8000550:	4770      	bxeq	lr
 8000552:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000556:	bf04      	itt	eq
 8000558:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800056c:	e71c      	b.n	80003a8 <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_ul2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f04f 0500 	mov.w	r5, #0
 800057e:	e00a      	b.n	8000596 <__aeabi_l2d+0x16>

08000580 <__aeabi_l2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800058e:	d502      	bpl.n	8000596 <__aeabi_l2d+0x16>
 8000590:	4240      	negs	r0, r0
 8000592:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000596:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a2:	f43f aed8 	beq.w	8000356 <__adddf3+0xe6>
 80005a6:	f04f 0203 	mov.w	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b6:	bf18      	it	ne
 80005b8:	3203      	addne	r2, #3
 80005ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005be:	f1c2 0320 	rsb	r3, r2, #32
 80005c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ce:	ea40 000e 	orr.w	r0, r0, lr
 80005d2:	fa21 f102 	lsr.w	r1, r1, r2
 80005d6:	4414      	add	r4, r2
 80005d8:	e6bd      	b.n	8000356 <__adddf3+0xe6>
 80005da:	bf00      	nop

080005dc <__aeabi_dmul>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ea:	bf1d      	ittte	ne
 80005ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f0:	ea94 0f0c 	teqne	r4, ip
 80005f4:	ea95 0f0c 	teqne	r5, ip
 80005f8:	f000 f8de 	bleq	80007b8 <__aeabi_dmul+0x1dc>
 80005fc:	442c      	add	r4, r5
 80005fe:	ea81 0603 	eor.w	r6, r1, r3
 8000602:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000606:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800060e:	bf18      	it	ne
 8000610:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800061c:	d038      	beq.n	8000690 <__aeabi_dmul+0xb4>
 800061e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000622:	f04f 0500 	mov.w	r5, #0
 8000626:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800062e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000632:	f04f 0600 	mov.w	r6, #0
 8000636:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063a:	f09c 0f00 	teq	ip, #0
 800063e:	bf18      	it	ne
 8000640:	f04e 0e01 	orrne.w	lr, lr, #1
 8000644:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000648:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800064c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000650:	d204      	bcs.n	800065c <__aeabi_dmul+0x80>
 8000652:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000656:	416d      	adcs	r5, r5
 8000658:	eb46 0606 	adc.w	r6, r6, r6
 800065c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000660:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000664:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000668:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800066c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000670:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000674:	bf88      	it	hi
 8000676:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067a:	d81e      	bhi.n	80006ba <__aeabi_dmul+0xde>
 800067c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000680:	bf08      	it	eq
 8000682:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000686:	f150 0000 	adcs.w	r0, r0, #0
 800068a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000694:	ea46 0101 	orr.w	r1, r6, r1
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	ea81 0103 	eor.w	r1, r1, r3
 80006a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a4:	bfc2      	ittt	gt
 80006a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ae:	bd70      	popgt	{r4, r5, r6, pc}
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f04f 0e00 	mov.w	lr, #0
 80006b8:	3c01      	subs	r4, #1
 80006ba:	f300 80ab 	bgt.w	8000814 <__aeabi_dmul+0x238>
 80006be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c2:	bfde      	ittt	le
 80006c4:	2000      	movle	r0, #0
 80006c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ca:	bd70      	pople	{r4, r5, r6, pc}
 80006cc:	f1c4 0400 	rsb	r4, r4, #0
 80006d0:	3c20      	subs	r4, #32
 80006d2:	da35      	bge.n	8000740 <__aeabi_dmul+0x164>
 80006d4:	340c      	adds	r4, #12
 80006d6:	dc1b      	bgt.n	8000710 <__aeabi_dmul+0x134>
 80006d8:	f104 0414 	add.w	r4, r4, #20
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f305 	lsl.w	r3, r0, r5
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000700:	eb42 0106 	adc.w	r1, r2, r6
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 040c 	rsb	r4, r4, #12
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f304 	lsl.w	r3, r0, r4
 800071c:	fa20 f005 	lsr.w	r0, r0, r5
 8000720:	fa01 f204 	lsl.w	r2, r1, r4
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	f141 0100 	adc.w	r1, r1, #0
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f205 	lsl.w	r2, r0, r5
 8000748:	ea4e 0e02 	orr.w	lr, lr, r2
 800074c:	fa20 f304 	lsr.w	r3, r0, r4
 8000750:	fa01 f205 	lsl.w	r2, r1, r5
 8000754:	ea43 0302 	orr.w	r3, r3, r2
 8000758:	fa21 f004 	lsr.w	r0, r1, r4
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	fa21 f204 	lsr.w	r2, r1, r4
 8000764:	ea20 0002 	bic.w	r0, r0, r2
 8000768:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f094 0f00 	teq	r4, #0
 800077c:	d10f      	bne.n	800079e <__aeabi_dmul+0x1c2>
 800077e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	eb41 0101 	adc.w	r1, r1, r1
 8000788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3c01      	subeq	r4, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1a6>
 8000792:	ea41 0106 	orr.w	r1, r1, r6
 8000796:	f095 0f00 	teq	r5, #0
 800079a:	bf18      	it	ne
 800079c:	4770      	bxne	lr
 800079e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	eb43 0303 	adc.w	r3, r3, r3
 80007a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ac:	bf08      	it	eq
 80007ae:	3d01      	subeq	r5, #1
 80007b0:	d0f7      	beq.n	80007a2 <__aeabi_dmul+0x1c6>
 80007b2:	ea43 0306 	orr.w	r3, r3, r6
 80007b6:	4770      	bx	lr
 80007b8:	ea94 0f0c 	teq	r4, ip
 80007bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c0:	bf18      	it	ne
 80007c2:	ea95 0f0c 	teqne	r5, ip
 80007c6:	d00c      	beq.n	80007e2 <__aeabi_dmul+0x206>
 80007c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007cc:	bf18      	it	ne
 80007ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d2:	d1d1      	bne.n	8000778 <__aeabi_dmul+0x19c>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e6:	bf06      	itte	eq
 80007e8:	4610      	moveq	r0, r2
 80007ea:	4619      	moveq	r1, r3
 80007ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f0:	d019      	beq.n	8000826 <__aeabi_dmul+0x24a>
 80007f2:	ea94 0f0c 	teq	r4, ip
 80007f6:	d102      	bne.n	80007fe <__aeabi_dmul+0x222>
 80007f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007fc:	d113      	bne.n	8000826 <__aeabi_dmul+0x24a>
 80007fe:	ea95 0f0c 	teq	r5, ip
 8000802:	d105      	bne.n	8000810 <__aeabi_dmul+0x234>
 8000804:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000808:	bf1c      	itt	ne
 800080a:	4610      	movne	r0, r2
 800080c:	4619      	movne	r1, r3
 800080e:	d10a      	bne.n	8000826 <__aeabi_dmul+0x24a>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800082e:	bd70      	pop	{r4, r5, r6, pc}

08000830 <__aeabi_ddiv>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800083e:	bf1d      	ittte	ne
 8000840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000844:	ea94 0f0c 	teqne	r4, ip
 8000848:	ea95 0f0c 	teqne	r5, ip
 800084c:	f000 f8a7 	bleq	800099e <__aeabi_ddiv+0x16e>
 8000850:	eba4 0405 	sub.w	r4, r4, r5
 8000854:	ea81 0e03 	eor.w	lr, r1, r3
 8000858:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800085c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000860:	f000 8088 	beq.w	8000974 <__aeabi_ddiv+0x144>
 8000864:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000868:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800086c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000870:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000874:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000878:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800087c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000880:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000884:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000888:	429d      	cmp	r5, r3
 800088a:	bf08      	it	eq
 800088c:	4296      	cmpeq	r6, r2
 800088e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000892:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000896:	d202      	bcs.n	800089e <__aeabi_ddiv+0x6e>
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	1ab6      	subs	r6, r6, r2
 80008a0:	eb65 0503 	sbc.w	r5, r5, r3
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800090c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000910:	d018      	beq.n	8000944 <__aeabi_ddiv+0x114>
 8000912:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000916:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800091e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000922:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000926:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800092e:	d1c0      	bne.n	80008b2 <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	d10b      	bne.n	800094e <__aeabi_ddiv+0x11e>
 8000936:	ea41 0100 	orr.w	r1, r1, r0
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000942:	e7b6      	b.n	80008b2 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	bf04      	itt	eq
 800094a:	4301      	orreq	r1, r0
 800094c:	2000      	moveq	r0, #0
 800094e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000952:	bf88      	it	hi
 8000954:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000958:	f63f aeaf 	bhi.w	80006ba <__aeabi_dmul+0xde>
 800095c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000960:	bf04      	itt	eq
 8000962:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000966:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096a:	f150 0000 	adcs.w	r0, r0, #0
 800096e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000978:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800097c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000980:	bfc2      	ittt	gt
 8000982:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000986:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098a:	bd70      	popgt	{r4, r5, r6, pc}
 800098c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000990:	f04f 0e00 	mov.w	lr, #0
 8000994:	3c01      	subs	r4, #1
 8000996:	e690      	b.n	80006ba <__aeabi_dmul+0xde>
 8000998:	ea45 0e06 	orr.w	lr, r5, r6
 800099c:	e68d      	b.n	80006ba <__aeabi_dmul+0xde>
 800099e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a2:	ea94 0f0c 	teq	r4, ip
 80009a6:	bf08      	it	eq
 80009a8:	ea95 0f0c 	teqeq	r5, ip
 80009ac:	f43f af3b 	beq.w	8000826 <__aeabi_dmul+0x24a>
 80009b0:	ea94 0f0c 	teq	r4, ip
 80009b4:	d10a      	bne.n	80009cc <__aeabi_ddiv+0x19c>
 80009b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ba:	f47f af34 	bne.w	8000826 <__aeabi_dmul+0x24a>
 80009be:	ea95 0f0c 	teq	r5, ip
 80009c2:	f47f af25 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e72c      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009cc:	ea95 0f0c 	teq	r5, ip
 80009d0:	d106      	bne.n	80009e0 <__aeabi_ddiv+0x1b0>
 80009d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009d6:	f43f aefd 	beq.w	80007d4 <__aeabi_dmul+0x1f8>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e722      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e4:	bf18      	it	ne
 80009e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ea:	f47f aec5 	bne.w	8000778 <__aeabi_dmul+0x19c>
 80009ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f2:	f47f af0d 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fa:	f47f aeeb 	bne.w	80007d4 <__aeabi_dmul+0x1f8>
 80009fe:	e712      	b.n	8000826 <__aeabi_dmul+0x24a>

08000a00 <__gedf2>:
 8000a00:	f04f 3cff 	mov.w	ip, #4294967295
 8000a04:	e006      	b.n	8000a14 <__cmpdf2+0x4>
 8000a06:	bf00      	nop

08000a08 <__ledf2>:
 8000a08:	f04f 0c01 	mov.w	ip, #1
 8000a0c:	e002      	b.n	8000a14 <__cmpdf2+0x4>
 8000a0e:	bf00      	nop

08000a10 <__cmpdf2>:
 8000a10:	f04f 0c01 	mov.w	ip, #1
 8000a14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2a:	d01b      	beq.n	8000a64 <__cmpdf2+0x54>
 8000a2c:	b001      	add	sp, #4
 8000a2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a32:	bf0c      	ite	eq
 8000a34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a38:	ea91 0f03 	teqne	r1, r3
 8000a3c:	bf02      	ittt	eq
 8000a3e:	ea90 0f02 	teqeq	r0, r2
 8000a42:	2000      	moveq	r0, #0
 8000a44:	4770      	bxeq	lr
 8000a46:	f110 0f00 	cmn.w	r0, #0
 8000a4a:	ea91 0f03 	teq	r1, r3
 8000a4e:	bf58      	it	pl
 8000a50:	4299      	cmppl	r1, r3
 8000a52:	bf08      	it	eq
 8000a54:	4290      	cmpeq	r0, r2
 8000a56:	bf2c      	ite	cs
 8000a58:	17d8      	asrcs	r0, r3, #31
 8000a5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a5e:	f040 0001 	orr.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d102      	bne.n	8000a74 <__cmpdf2+0x64>
 8000a6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a72:	d107      	bne.n	8000a84 <__cmpdf2+0x74>
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d1d6      	bne.n	8000a2c <__cmpdf2+0x1c>
 8000a7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a82:	d0d3      	beq.n	8000a2c <__cmpdf2+0x1c>
 8000a84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdrcmple>:
 8000a8c:	4684      	mov	ip, r0
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4662      	mov	r2, ip
 8000a92:	468c      	mov	ip, r1
 8000a94:	4619      	mov	r1, r3
 8000a96:	4663      	mov	r3, ip
 8000a98:	e000      	b.n	8000a9c <__aeabi_cdcmpeq>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdcmpeq>:
 8000a9c:	b501      	push	{r0, lr}
 8000a9e:	f7ff ffb7 	bl	8000a10 <__cmpdf2>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	bf48      	it	mi
 8000aa6:	f110 0f00 	cmnmi.w	r0, #0
 8000aaa:	bd01      	pop	{r0, pc}

08000aac <__aeabi_dcmpeq>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff fff4 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2001      	moveq	r0, #1
 8000ab8:	2000      	movne	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmplt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffea 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmple>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffe0 	bl	8000a9c <__aeabi_cdcmpeq>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpge>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffce 	bl	8000a8c <__aeabi_cdrcmple>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpgt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffc4 	bl	8000a8c <__aeabi_cdrcmple>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpun>:
 8000b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x10>
 8000b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1e:	d10a      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x20>
 8000b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0001 	mov.w	r0, #1
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_uldivmod>:
 8000c6c:	b953      	cbnz	r3, 8000c84 <__aeabi_uldivmod+0x18>
 8000c6e:	b94a      	cbnz	r2, 8000c84 <__aeabi_uldivmod+0x18>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	bf08      	it	eq
 8000c74:	2800      	cmpeq	r0, #0
 8000c76:	bf1c      	itt	ne
 8000c78:	f04f 31ff 	movne.w	r1, #4294967295
 8000c7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c80:	f000 bacc 	b.w	800121c <__aeabi_idiv0>
 8000c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8c:	f000 f950 	bl	8000f30 <__udivmoddi4>
 8000c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c98:	b004      	add	sp, #16
 8000c9a:	4770      	bx	lr

08000c9c <__mulsc3>:
 8000c9c:	ee60 6a01 	vmul.f32	s13, s0, s2
 8000ca0:	ee60 5aa1 	vmul.f32	s11, s1, s3
 8000ca4:	ee20 5a21 	vmul.f32	s10, s0, s3
 8000ca8:	ee61 4a20 	vmul.f32	s9, s2, s1
 8000cac:	ee76 7ae5 	vsub.f32	s15, s13, s11
 8000cb0:	ee35 7a24 	vadd.f32	s14, s10, s9
 8000cb4:	eef4 7a67 	vcmp.f32	s15, s15
 8000cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cbc:	eeb4 7a47 	vcmp.f32	s14, s14
 8000cc0:	bf6c      	ite	vs
 8000cc2:	2301      	movvs	r3, #1
 8000cc4:	2300      	movvc	r3, #0
 8000cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	bf78      	it	vc
 8000cd0:	2300      	movvc	r3, #0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f000 80c8 	beq.w	8000e68 <__mulsc3+0x1cc>
 8000cd8:	eeb0 6ac0 	vabs.f32	s12, s0
 8000cdc:	ed9f 4a90 	vldr	s8, [pc, #576]	; 8000f20 <__mulsc3+0x284>
 8000ce0:	eef0 3ae0 	vabs.f32	s7, s1
 8000ce4:	eeb4 6a44 	vcmp.f32	s12, s8
 8000ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cec:	bfcc      	ite	gt
 8000cee:	2201      	movgt	r2, #1
 8000cf0:	2200      	movle	r2, #0
 8000cf2:	f340 80be 	ble.w	8000e72 <__mulsc3+0x1d6>
 8000cf6:	ee06 2a10 	vmov	s12, r2
 8000cfa:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8000f20 <__mulsc3+0x284>
 8000cfe:	ee10 2a10 	vmov	r2, s0
 8000d02:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8000d06:	eef4 3a44 	vcmp.f32	s7, s8
 8000d0a:	2a00      	cmp	r2, #0
 8000d0c:	eeb0 6ac6 	vabs.f32	s12, s12
 8000d10:	bfb8      	it	lt
 8000d12:	eeb1 6a46 	vneglt.f32	s12, s12
 8000d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d1a:	eeb4 1a41 	vcmp.f32	s2, s2
 8000d1e:	eeb0 0a46 	vmov.f32	s0, s12
 8000d22:	bfcc      	ite	gt
 8000d24:	2201      	movgt	r2, #1
 8000d26:	2200      	movle	r2, #0
 8000d28:	ee06 2a10 	vmov	s12, r2
 8000d2c:	ee10 2a90 	vmov	r2, s1
 8000d30:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8000d34:	2a00      	cmp	r2, #0
 8000d36:	eeb0 6ac6 	vabs.f32	s12, s12
 8000d3a:	bfb8      	it	lt
 8000d3c:	eeb1 6a46 	vneglt.f32	s12, s12
 8000d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d44:	eef0 0a46 	vmov.f32	s1, s12
 8000d48:	f180 80b7 	bvs.w	8000eba <__mulsc3+0x21e>
 8000d4c:	eef4 1a61 	vcmp.f32	s3, s3
 8000d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d54:	f180 80bb 	bvs.w	8000ece <__mulsc3+0x232>
 8000d58:	eeb0 6ac1 	vabs.f32	s12, s2
 8000d5c:	ed9f 4a70 	vldr	s8, [pc, #448]	; 8000f20 <__mulsc3+0x284>
 8000d60:	eeb4 6a44 	vcmp.f32	s12, s8
 8000d64:	eeb0 6ae1 	vabs.f32	s12, s3
 8000d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d6c:	bfcc      	ite	gt
 8000d6e:	2201      	movgt	r2, #1
 8000d70:	2200      	movle	r2, #0
 8000d72:	dc3c      	bgt.n	8000dee <__mulsc3+0x152>
 8000d74:	eeb4 6a44 	vcmp.f32	s12, s8
 8000d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d7c:	dc37      	bgt.n	8000dee <__mulsc3+0x152>
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d164      	bne.n	8000e4c <__mulsc3+0x1b0>
 8000d82:	eef0 6ae6 	vabs.f32	s13, s13
 8000d86:	eef4 6a44 	vcmp.f32	s13, s8
 8000d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d8e:	dc0d      	bgt.n	8000dac <__mulsc3+0x110>
 8000d90:	eef0 5ae5 	vabs.f32	s11, s11
 8000d94:	eef4 5a44 	vcmp.f32	s11, s8
 8000d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d9c:	dc06      	bgt.n	8000dac <__mulsc3+0x110>
 8000d9e:	eeb0 5ac5 	vabs.f32	s10, s10
 8000da2:	eeb4 5a44 	vcmp.f32	s10, s8
 8000da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000daa:	dd6a      	ble.n	8000e82 <__mulsc3+0x1e6>
 8000dac:	eeb4 0a40 	vcmp.f32	s0, s0
 8000db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db4:	f180 80a9 	bvs.w	8000f0a <__mulsc3+0x26e>
 8000db8:	eef4 0a60 	vcmp.f32	s1, s1
 8000dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc0:	f180 8099 	bvs.w	8000ef6 <__mulsc3+0x25a>
 8000dc4:	eeb4 1a41 	vcmp.f32	s2, s2
 8000dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dcc:	f180 8089 	bvs.w	8000ee2 <__mulsc3+0x246>
 8000dd0:	eef4 1a61 	vcmp.f32	s3, s3
 8000dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd8:	d738      	bvc.n	8000e4c <__mulsc3+0x1b0>
 8000dda:	ee11 3a90 	vmov	r3, s3
 8000dde:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8000f24 <__mulsc3+0x288>
 8000de2:	eddf 7a51 	vldr	s15, [pc, #324]	; 8000f28 <__mulsc3+0x28c>
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	fe67 1a27 	vselge.f32	s3, s14, s15
 8000dec:	e02e      	b.n	8000e4c <__mulsc3+0x1b0>
 8000dee:	ee07 2a90 	vmov	s15, r2
 8000df2:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8000f20 <__mulsc3+0x284>
 8000df6:	ee11 3a10 	vmov	r3, s2
 8000dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dfe:	eeb4 6a47 	vcmp.f32	s12, s14
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	eef0 7ae7 	vabs.f32	s15, s15
 8000e08:	bfb8      	it	lt
 8000e0a:	eef1 7a67 	vneglt.f32	s15, s15
 8000e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e12:	eeb4 0a40 	vcmp.f32	s0, s0
 8000e16:	eeb0 1a67 	vmov.f32	s2, s15
 8000e1a:	bfcc      	ite	gt
 8000e1c:	2301      	movgt	r3, #1
 8000e1e:	2300      	movle	r3, #0
 8000e20:	ee07 3a90 	vmov	s15, r3
 8000e24:	ee11 3a90 	vmov	r3, s3
 8000e28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	eef0 7ae7 	vabs.f32	s15, s15
 8000e32:	bfb8      	it	lt
 8000e34:	eef1 7a67 	vneglt.f32	s15, s15
 8000e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e3c:	eef0 1a67 	vmov.f32	s3, s15
 8000e40:	d631      	bvs.n	8000ea6 <__mulsc3+0x20a>
 8000e42:	eef4 0a60 	vcmp.f32	s1, s1
 8000e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e4a:	d622      	bvs.n	8000e92 <__mulsc3+0x1f6>
 8000e4c:	ee61 7ae0 	vnmul.f32	s15, s3, s1
 8000e50:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000f2c <__mulsc3+0x290>
 8000e54:	ee60 0a81 	vmul.f32	s1, s1, s2
 8000e58:	eee0 7a01 	vfma.f32	s15, s0, s2
 8000e5c:	eee0 0a21 	vfma.f32	s1, s0, s3
 8000e60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e64:	ee20 7a87 	vmul.f32	s14, s1, s14
 8000e68:	eeb0 0a67 	vmov.f32	s0, s15
 8000e6c:	eef0 0a47 	vmov.f32	s1, s14
 8000e70:	4770      	bx	lr
 8000e72:	eef4 3a44 	vcmp.f32	s7, s8
 8000e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7a:	f73f af3c 	bgt.w	8000cf6 <__mulsc3+0x5a>
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e76a      	b.n	8000d58 <__mulsc3+0xbc>
 8000e82:	eef0 4ae4 	vabs.f32	s9, s9
 8000e86:	eef4 4a44 	vcmp.f32	s9, s8
 8000e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e8e:	ddeb      	ble.n	8000e68 <__mulsc3+0x1cc>
 8000e90:	e78c      	b.n	8000dac <__mulsc3+0x110>
 8000e92:	ee10 3a90 	vmov	r3, s1
 8000e96:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000f24 <__mulsc3+0x288>
 8000e9a:	eddf 7a23 	vldr	s15, [pc, #140]	; 8000f28 <__mulsc3+0x28c>
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	fe67 0a27 	vselge.f32	s1, s14, s15
 8000ea4:	e7d2      	b.n	8000e4c <__mulsc3+0x1b0>
 8000ea6:	ee10 3a10 	vmov	r3, s0
 8000eaa:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000f24 <__mulsc3+0x288>
 8000eae:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8000f28 <__mulsc3+0x28c>
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	fe27 0a27 	vselge.f32	s0, s14, s15
 8000eb8:	e7c3      	b.n	8000e42 <__mulsc3+0x1a6>
 8000eba:	ee11 2a10 	vmov	r2, s2
 8000ebe:	ed9f 4a19 	vldr	s8, [pc, #100]	; 8000f24 <__mulsc3+0x288>
 8000ec2:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8000f28 <__mulsc3+0x28c>
 8000ec6:	2a00      	cmp	r2, #0
 8000ec8:	fe24 1a06 	vselge.f32	s2, s8, s12
 8000ecc:	e73e      	b.n	8000d4c <__mulsc3+0xb0>
 8000ece:	ee11 2a90 	vmov	r2, s3
 8000ed2:	ed9f 4a14 	vldr	s8, [pc, #80]	; 8000f24 <__mulsc3+0x288>
 8000ed6:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8000f28 <__mulsc3+0x28c>
 8000eda:	2a00      	cmp	r2, #0
 8000edc:	fe64 1a06 	vselge.f32	s3, s8, s12
 8000ee0:	e73a      	b.n	8000d58 <__mulsc3+0xbc>
 8000ee2:	ee11 3a10 	vmov	r3, s2
 8000ee6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000f24 <__mulsc3+0x288>
 8000eea:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8000f28 <__mulsc3+0x28c>
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	fe27 1a27 	vselge.f32	s2, s14, s15
 8000ef4:	e76c      	b.n	8000dd0 <__mulsc3+0x134>
 8000ef6:	ee10 3a90 	vmov	r3, s1
 8000efa:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000f24 <__mulsc3+0x288>
 8000efe:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8000f28 <__mulsc3+0x28c>
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	fe67 0a27 	vselge.f32	s1, s14, s15
 8000f08:	e75c      	b.n	8000dc4 <__mulsc3+0x128>
 8000f0a:	ee10 3a10 	vmov	r3, s0
 8000f0e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000f24 <__mulsc3+0x288>
 8000f12:	eddf 7a05 	vldr	s15, [pc, #20]	; 8000f28 <__mulsc3+0x28c>
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	fe27 0a27 	vselge.f32	s0, s14, s15
 8000f1c:	e74c      	b.n	8000db8 <__mulsc3+0x11c>
 8000f1e:	bf00      	nop
 8000f20:	7f7fffff 	.word	0x7f7fffff
 8000f24:	00000000 	.word	0x00000000
 8000f28:	80000000 	.word	0x80000000
 8000f2c:	7f800000 	.word	0x7f800000

08000f30 <__udivmoddi4>:
 8000f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f34:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000f36:	460d      	mov	r5, r1
 8000f38:	4604      	mov	r4, r0
 8000f3a:	460f      	mov	r7, r1
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d146      	bne.n	8000fce <__udivmoddi4+0x9e>
 8000f40:	428a      	cmp	r2, r1
 8000f42:	4694      	mov	ip, r2
 8000f44:	d95e      	bls.n	8001004 <__udivmoddi4+0xd4>
 8000f46:	fab2 f382 	clz	r3, r2
 8000f4a:	b143      	cbz	r3, 8000f5e <__udivmoddi4+0x2e>
 8000f4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f50:	f1c3 0220 	rsb	r2, r3, #32
 8000f54:	409f      	lsls	r7, r3
 8000f56:	409c      	lsls	r4, r3
 8000f58:	fa20 f202 	lsr.w	r2, r0, r2
 8000f5c:	4317      	orrs	r7, r2
 8000f5e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000f62:	fa1f f58c 	uxth.w	r5, ip
 8000f66:	0c22      	lsrs	r2, r4, #16
 8000f68:	fbb7 f1fe 	udiv	r1, r7, lr
 8000f6c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000f70:	fb01 f005 	mul.w	r0, r1, r5
 8000f74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000f78:	4290      	cmp	r0, r2
 8000f7a:	d908      	bls.n	8000f8e <__udivmoddi4+0x5e>
 8000f7c:	eb1c 0202 	adds.w	r2, ip, r2
 8000f80:	f101 37ff 	add.w	r7, r1, #4294967295
 8000f84:	d202      	bcs.n	8000f8c <__udivmoddi4+0x5c>
 8000f86:	4290      	cmp	r0, r2
 8000f88:	f200 8134 	bhi.w	80011f4 <__udivmoddi4+0x2c4>
 8000f8c:	4639      	mov	r1, r7
 8000f8e:	1a12      	subs	r2, r2, r0
 8000f90:	b2a4      	uxth	r4, r4
 8000f92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000f96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000f9a:	fb00 f505 	mul.w	r5, r0, r5
 8000f9e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000fa2:	42a5      	cmp	r5, r4
 8000fa4:	d908      	bls.n	8000fb8 <__udivmoddi4+0x88>
 8000fa6:	eb1c 0404 	adds.w	r4, ip, r4
 8000faa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fae:	d202      	bcs.n	8000fb6 <__udivmoddi4+0x86>
 8000fb0:	42a5      	cmp	r5, r4
 8000fb2:	f200 8119 	bhi.w	80011e8 <__udivmoddi4+0x2b8>
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000fbc:	1b64      	subs	r4, r4, r5
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	b11e      	cbz	r6, 8000fca <__udivmoddi4+0x9a>
 8000fc2:	40dc      	lsrs	r4, r3
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fce:	428b      	cmp	r3, r1
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0xb4>
 8000fd2:	2e00      	cmp	r6, #0
 8000fd4:	f000 80fc 	beq.w	80011d0 <__udivmoddi4+0x2a0>
 8000fd8:	2100      	movs	r1, #0
 8000fda:	e9c6 0500 	strd	r0, r5, [r6]
 8000fde:	4608      	mov	r0, r1
 8000fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fe4:	fab3 f183 	clz	r1, r3
 8000fe8:	2900      	cmp	r1, #0
 8000fea:	d14c      	bne.n	8001086 <__udivmoddi4+0x156>
 8000fec:	42ab      	cmp	r3, r5
 8000fee:	f0c0 80f2 	bcc.w	80011d6 <__udivmoddi4+0x2a6>
 8000ff2:	4282      	cmp	r2, r0
 8000ff4:	f240 80ef 	bls.w	80011d6 <__udivmoddi4+0x2a6>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	2e00      	cmp	r6, #0
 8000ffc:	d0e5      	beq.n	8000fca <__udivmoddi4+0x9a>
 8000ffe:	e9c6 4700 	strd	r4, r7, [r6]
 8001002:	e7e2      	b.n	8000fca <__udivmoddi4+0x9a>
 8001004:	b902      	cbnz	r2, 8001008 <__udivmoddi4+0xd8>
 8001006:	deff      	udf	#255	; 0xff
 8001008:	fab2 f382 	clz	r3, r2
 800100c:	2b00      	cmp	r3, #0
 800100e:	f040 809f 	bne.w	8001150 <__udivmoddi4+0x220>
 8001012:	1a8a      	subs	r2, r1, r2
 8001014:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001018:	fa1f f78c 	uxth.w	r7, ip
 800101c:	2101      	movs	r1, #1
 800101e:	fbb2 f5fe 	udiv	r5, r2, lr
 8001022:	fb0e 2015 	mls	r0, lr, r5, r2
 8001026:	0c22      	lsrs	r2, r4, #16
 8001028:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800102c:	fb07 f005 	mul.w	r0, r7, r5
 8001030:	4290      	cmp	r0, r2
 8001032:	d90f      	bls.n	8001054 <__udivmoddi4+0x124>
 8001034:	eb1c 0202 	adds.w	r2, ip, r2
 8001038:	f105 38ff 	add.w	r8, r5, #4294967295
 800103c:	bf2c      	ite	cs
 800103e:	f04f 0901 	movcs.w	r9, #1
 8001042:	f04f 0900 	movcc.w	r9, #0
 8001046:	4290      	cmp	r0, r2
 8001048:	d903      	bls.n	8001052 <__udivmoddi4+0x122>
 800104a:	f1b9 0f00 	cmp.w	r9, #0
 800104e:	f000 80ce 	beq.w	80011ee <__udivmoddi4+0x2be>
 8001052:	4645      	mov	r5, r8
 8001054:	1a12      	subs	r2, r2, r0
 8001056:	b2a4      	uxth	r4, r4
 8001058:	fbb2 f0fe 	udiv	r0, r2, lr
 800105c:	fb0e 2210 	mls	r2, lr, r0, r2
 8001060:	fb00 f707 	mul.w	r7, r0, r7
 8001064:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001068:	42a7      	cmp	r7, r4
 800106a:	d908      	bls.n	800107e <__udivmoddi4+0x14e>
 800106c:	eb1c 0404 	adds.w	r4, ip, r4
 8001070:	f100 32ff 	add.w	r2, r0, #4294967295
 8001074:	d202      	bcs.n	800107c <__udivmoddi4+0x14c>
 8001076:	42a7      	cmp	r7, r4
 8001078:	f200 80b3 	bhi.w	80011e2 <__udivmoddi4+0x2b2>
 800107c:	4610      	mov	r0, r2
 800107e:	1be4      	subs	r4, r4, r7
 8001080:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001084:	e79c      	b.n	8000fc0 <__udivmoddi4+0x90>
 8001086:	f1c1 0420 	rsb	r4, r1, #32
 800108a:	408b      	lsls	r3, r1
 800108c:	fa05 fc01 	lsl.w	ip, r5, r1
 8001090:	fa22 f704 	lsr.w	r7, r2, r4
 8001094:	40e5      	lsrs	r5, r4
 8001096:	408a      	lsls	r2, r1
 8001098:	431f      	orrs	r7, r3
 800109a:	fa20 f304 	lsr.w	r3, r0, r4
 800109e:	4088      	lsls	r0, r1
 80010a0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80010a4:	ea43 030c 	orr.w	r3, r3, ip
 80010a8:	fa1f fc87 	uxth.w	ip, r7
 80010ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80010b0:	fbb5 fef8 	udiv	lr, r5, r8
 80010b4:	fb08 551e 	mls	r5, r8, lr, r5
 80010b8:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80010bc:	fb0e f90c 	mul.w	r9, lr, ip
 80010c0:	45a9      	cmp	r9, r5
 80010c2:	d90e      	bls.n	80010e2 <__udivmoddi4+0x1b2>
 80010c4:	197d      	adds	r5, r7, r5
 80010c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80010ca:	bf2c      	ite	cs
 80010cc:	f04f 0b01 	movcs.w	fp, #1
 80010d0:	f04f 0b00 	movcc.w	fp, #0
 80010d4:	45a9      	cmp	r9, r5
 80010d6:	d903      	bls.n	80010e0 <__udivmoddi4+0x1b0>
 80010d8:	f1bb 0f00 	cmp.w	fp, #0
 80010dc:	f000 808d 	beq.w	80011fa <__udivmoddi4+0x2ca>
 80010e0:	46d6      	mov	lr, sl
 80010e2:	eba5 0509 	sub.w	r5, r5, r9
 80010e6:	fa1f f983 	uxth.w	r9, r3
 80010ea:	fbb5 f3f8 	udiv	r3, r5, r8
 80010ee:	fb08 5513 	mls	r5, r8, r3, r5
 80010f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80010f6:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80010fa:	45ac      	cmp	ip, r5
 80010fc:	d906      	bls.n	800110c <__udivmoddi4+0x1dc>
 80010fe:	197d      	adds	r5, r7, r5
 8001100:	f103 38ff 	add.w	r8, r3, #4294967295
 8001104:	d201      	bcs.n	800110a <__udivmoddi4+0x1da>
 8001106:	45ac      	cmp	ip, r5
 8001108:	d87e      	bhi.n	8001208 <__udivmoddi4+0x2d8>
 800110a:	4643      	mov	r3, r8
 800110c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8001110:	eba5 050c 	sub.w	r5, r5, ip
 8001114:	fba3 9802 	umull	r9, r8, r3, r2
 8001118:	4545      	cmp	r5, r8
 800111a:	46ce      	mov	lr, r9
 800111c:	46c4      	mov	ip, r8
 800111e:	d302      	bcc.n	8001126 <__udivmoddi4+0x1f6>
 8001120:	d106      	bne.n	8001130 <__udivmoddi4+0x200>
 8001122:	4548      	cmp	r0, r9
 8001124:	d204      	bcs.n	8001130 <__udivmoddi4+0x200>
 8001126:	3b01      	subs	r3, #1
 8001128:	ebb9 0e02 	subs.w	lr, r9, r2
 800112c:	eb68 0c07 	sbc.w	ip, r8, r7
 8001130:	2e00      	cmp	r6, #0
 8001132:	d06f      	beq.n	8001214 <__udivmoddi4+0x2e4>
 8001134:	ebb0 020e 	subs.w	r2, r0, lr
 8001138:	eb65 050c 	sbc.w	r5, r5, ip
 800113c:	40ca      	lsrs	r2, r1
 800113e:	fa05 f404 	lsl.w	r4, r5, r4
 8001142:	40cd      	lsrs	r5, r1
 8001144:	4618      	mov	r0, r3
 8001146:	4314      	orrs	r4, r2
 8001148:	2100      	movs	r1, #0
 800114a:	e9c6 4500 	strd	r4, r5, [r6]
 800114e:	e73c      	b.n	8000fca <__udivmoddi4+0x9a>
 8001150:	fa02 fc03 	lsl.w	ip, r2, r3
 8001154:	f1c3 0220 	rsb	r2, r3, #32
 8001158:	4099      	lsls	r1, r3
 800115a:	409c      	lsls	r4, r3
 800115c:	40d5      	lsrs	r5, r2
 800115e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001162:	fa20 f202 	lsr.w	r2, r0, r2
 8001166:	fa1f f78c 	uxth.w	r7, ip
 800116a:	fbb5 f0fe 	udiv	r0, r5, lr
 800116e:	430a      	orrs	r2, r1
 8001170:	fb0e 5510 	mls	r5, lr, r0, r5
 8001174:	0c11      	lsrs	r1, r2, #16
 8001176:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800117a:	fb00 f507 	mul.w	r5, r0, r7
 800117e:	428d      	cmp	r5, r1
 8001180:	d90e      	bls.n	80011a0 <__udivmoddi4+0x270>
 8001182:	eb1c 0101 	adds.w	r1, ip, r1
 8001186:	f100 38ff 	add.w	r8, r0, #4294967295
 800118a:	bf2c      	ite	cs
 800118c:	f04f 0901 	movcs.w	r9, #1
 8001190:	f04f 0900 	movcc.w	r9, #0
 8001194:	428d      	cmp	r5, r1
 8001196:	d902      	bls.n	800119e <__udivmoddi4+0x26e>
 8001198:	f1b9 0f00 	cmp.w	r9, #0
 800119c:	d031      	beq.n	8001202 <__udivmoddi4+0x2d2>
 800119e:	4640      	mov	r0, r8
 80011a0:	1b49      	subs	r1, r1, r5
 80011a2:	b292      	uxth	r2, r2
 80011a4:	fbb1 f5fe 	udiv	r5, r1, lr
 80011a8:	fb0e 1115 	mls	r1, lr, r5, r1
 80011ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80011b0:	fb05 f107 	mul.w	r1, r5, r7
 80011b4:	4291      	cmp	r1, r2
 80011b6:	d907      	bls.n	80011c8 <__udivmoddi4+0x298>
 80011b8:	eb1c 0202 	adds.w	r2, ip, r2
 80011bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80011c0:	d201      	bcs.n	80011c6 <__udivmoddi4+0x296>
 80011c2:	4291      	cmp	r1, r2
 80011c4:	d823      	bhi.n	800120e <__udivmoddi4+0x2de>
 80011c6:	4645      	mov	r5, r8
 80011c8:	1a52      	subs	r2, r2, r1
 80011ca:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80011ce:	e726      	b.n	800101e <__udivmoddi4+0xee>
 80011d0:	4631      	mov	r1, r6
 80011d2:	4630      	mov	r0, r6
 80011d4:	e6f9      	b.n	8000fca <__udivmoddi4+0x9a>
 80011d6:	1a84      	subs	r4, r0, r2
 80011d8:	eb65 0203 	sbc.w	r2, r5, r3
 80011dc:	2001      	movs	r0, #1
 80011de:	4617      	mov	r7, r2
 80011e0:	e70b      	b.n	8000ffa <__udivmoddi4+0xca>
 80011e2:	4464      	add	r4, ip
 80011e4:	3802      	subs	r0, #2
 80011e6:	e74a      	b.n	800107e <__udivmoddi4+0x14e>
 80011e8:	4464      	add	r4, ip
 80011ea:	3802      	subs	r0, #2
 80011ec:	e6e4      	b.n	8000fb8 <__udivmoddi4+0x88>
 80011ee:	3d02      	subs	r5, #2
 80011f0:	4462      	add	r2, ip
 80011f2:	e72f      	b.n	8001054 <__udivmoddi4+0x124>
 80011f4:	3902      	subs	r1, #2
 80011f6:	4462      	add	r2, ip
 80011f8:	e6c9      	b.n	8000f8e <__udivmoddi4+0x5e>
 80011fa:	f1ae 0e02 	sub.w	lr, lr, #2
 80011fe:	443d      	add	r5, r7
 8001200:	e76f      	b.n	80010e2 <__udivmoddi4+0x1b2>
 8001202:	3802      	subs	r0, #2
 8001204:	4461      	add	r1, ip
 8001206:	e7cb      	b.n	80011a0 <__udivmoddi4+0x270>
 8001208:	3b02      	subs	r3, #2
 800120a:	443d      	add	r5, r7
 800120c:	e77e      	b.n	800110c <__udivmoddi4+0x1dc>
 800120e:	3d02      	subs	r5, #2
 8001210:	4462      	add	r2, ip
 8001212:	e7d9      	b.n	80011c8 <__udivmoddi4+0x298>
 8001214:	4618      	mov	r0, r3
 8001216:	4631      	mov	r1, r6
 8001218:	e6d7      	b.n	8000fca <__udivmoddi4+0x9a>
 800121a:	bf00      	nop

0800121c <__aeabi_idiv0>:
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop

08001220 <Pack_measurements_1_jlb>:
}

#else

uint32_t Pack_measurements_1_jlb(measurements_1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001220:	b480      	push	{r7}
 8001222:	b087      	sub	sp, #28
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_1_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 800122e:	2300      	movs	r3, #0
 8001230:	75fb      	strb	r3, [r7, #23]
 8001232:	e007      	b.n	8001244 <Pack_measurements_1_jlb+0x24>
 8001234:	7dfb      	ldrb	r3, [r7, #23]
 8001236:	1c5a      	adds	r2, r3, #1
 8001238:	75fa      	strb	r2, [r7, #23]
 800123a:	461a      	mov	r2, r3
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	4413      	add	r3, r2
 8001240:	2200      	movs	r2, #0
 8001242:	701a      	strb	r2, [r3, #0]
 8001244:	7dfb      	ldrb	r3, [r7, #23]
 8001246:	2b07      	cmp	r3, #7
 8001248:	d9f4      	bls.n	8001234 <Pack_measurements_1_jlb+0x14>

  _d[0] |= (uint8_t) ( (_m->line_sensor_1 & (0x03U)) | ((_m->line_sensor_2 & (0x03U)) << 2U) | ((_m->line_sensor_3 & (0x03U)) << 4U) | ((_m->line_sensor_4 & (0x03U)) << 6U) );
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	781a      	ldrb	r2, [r3, #0]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	f003 0303 	and.w	r3, r3, #3
 8001256:	b2d9      	uxtb	r1, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	785b      	ldrb	r3, [r3, #1]
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	b2db      	uxtb	r3, r3
 8001260:	f003 030c 	and.w	r3, r3, #12
 8001264:	b2db      	uxtb	r3, r3
 8001266:	430b      	orrs	r3, r1
 8001268:	b2d9      	uxtb	r1, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	789b      	ldrb	r3, [r3, #2]
 800126e:	011b      	lsls	r3, r3, #4
 8001270:	b2db      	uxtb	r3, r3
 8001272:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001276:	b2db      	uxtb	r3, r3
 8001278:	430b      	orrs	r3, r1
 800127a:	b2d9      	uxtb	r1, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	78db      	ldrb	r3, [r3, #3]
 8001280:	019b      	lsls	r3, r3, #6
 8001282:	b2db      	uxtb	r3, r3
 8001284:	430b      	orrs	r3, r1
 8001286:	b2db      	uxtb	r3, r3
 8001288:	4313      	orrs	r3, r2
 800128a:	b2da      	uxtb	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( (_m->line_sensor_5 & (0x03U)) | ((_m->line_sensor_6 & (0x03U)) << 2U) | ((_m->line_sensor_7 & (0x03U)) << 4U) | ((_m->line_sensor_8 & (0x03U)) << 6U) );
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	3301      	adds	r3, #1
 8001294:	7819      	ldrb	r1, [r3, #0]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	791b      	ldrb	r3, [r3, #4]
 800129a:	f003 0303 	and.w	r3, r3, #3
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	795b      	ldrb	r3, [r3, #5]
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	f003 030c 	and.w	r3, r3, #12
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	4313      	orrs	r3, r2
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	799b      	ldrb	r3, [r3, #6]
 80012b6:	011b      	lsls	r3, r3, #4
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	4313      	orrs	r3, r2
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	79db      	ldrb	r3, [r3, #7]
 80012c8:	019b      	lsls	r3, r3, #6
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	4313      	orrs	r3, r2
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	3301      	adds	r3, #1
 80012d4:	430a      	orrs	r2, r1
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->line_sensor_9 & (0x03U)) | ((_m->line_sensor_10 & (0x03U)) << 2U) | ((_m->line_sensor_11 & (0x03U)) << 4U) | ((_m->line_sensor_12 & (0x03U)) << 6U) );
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	3302      	adds	r3, #2
 80012de:	7819      	ldrb	r1, [r3, #0]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	7a1b      	ldrb	r3, [r3, #8]
 80012e4:	f003 0303 	and.w	r3, r3, #3
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	7a5b      	ldrb	r3, [r3, #9]
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	7a9b      	ldrb	r3, [r3, #10]
 8001300:	011b      	lsls	r3, r3, #4
 8001302:	b2db      	uxtb	r3, r3
 8001304:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001308:	b2db      	uxtb	r3, r3
 800130a:	4313      	orrs	r3, r2
 800130c:	b2da      	uxtb	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	7adb      	ldrb	r3, [r3, #11]
 8001312:	019b      	lsls	r3, r3, #6
 8001314:	b2db      	uxtb	r3, r3
 8001316:	4313      	orrs	r3, r2
 8001318:	b2da      	uxtb	r2, r3
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	3302      	adds	r3, #2
 800131e:	430a      	orrs	r2, r1
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( (_m->line_sensor_13 & (0x03U)) | ((_m->line_sensor_14 & (0x03U)) << 2U) | ((_m->line_sensor_15 & (0x03U)) << 4U) | ((_m->line_sensor_16 & (0x03U)) << 6U) );
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	3303      	adds	r3, #3
 8001328:	7819      	ldrb	r1, [r3, #0]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	7b1b      	ldrb	r3, [r3, #12]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	b2da      	uxtb	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	7b5b      	ldrb	r3, [r3, #13]
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	b2db      	uxtb	r3, r3
 800133c:	f003 030c 	and.w	r3, r3, #12
 8001340:	b2db      	uxtb	r3, r3
 8001342:	4313      	orrs	r3, r2
 8001344:	b2da      	uxtb	r2, r3
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	7b9b      	ldrb	r3, [r3, #14]
 800134a:	011b      	lsls	r3, r3, #4
 800134c:	b2db      	uxtb	r3, r3
 800134e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001352:	b2db      	uxtb	r3, r3
 8001354:	4313      	orrs	r3, r2
 8001356:	b2da      	uxtb	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	7bdb      	ldrb	r3, [r3, #15]
 800135c:	019b      	lsls	r3, r3, #6
 800135e:	b2db      	uxtb	r3, r3
 8001360:	4313      	orrs	r3, r2
 8001362:	b2da      	uxtb	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	3303      	adds	r3, #3
 8001368:	430a      	orrs	r2, r1
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->line_sensor_17 & (0x03U)) | ((_m->line_sensor_18 & (0x03U)) << 2U) | ((_m->line_sensor_19 & (0x03U)) << 4U) | ((_m->line_sensor_20 & (0x03U)) << 6U) );
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	3304      	adds	r3, #4
 8001372:	7819      	ldrb	r1, [r3, #0]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	7c1b      	ldrb	r3, [r3, #16]
 8001378:	f003 0303 	and.w	r3, r3, #3
 800137c:	b2da      	uxtb	r2, r3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	7c5b      	ldrb	r3, [r3, #17]
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	b2db      	uxtb	r3, r3
 8001386:	f003 030c 	and.w	r3, r3, #12
 800138a:	b2db      	uxtb	r3, r3
 800138c:	4313      	orrs	r3, r2
 800138e:	b2da      	uxtb	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	7c9b      	ldrb	r3, [r3, #18]
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	b2db      	uxtb	r3, r3
 8001398:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800139c:	b2db      	uxtb	r3, r3
 800139e:	4313      	orrs	r3, r2
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	7cdb      	ldrb	r3, [r3, #19]
 80013a6:	019b      	lsls	r3, r3, #6
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	4313      	orrs	r3, r2
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	3304      	adds	r3, #4
 80013b2:	430a      	orrs	r2, r1
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( (_m->line_sensor_21 & (0x03U)) | ((_m->line_sensor_22 & (0x03U)) << 2U) | ((_m->line_sensor_23 & (0x03U)) << 4U) | ((_m->line_sensor_24 & (0x03U)) << 6U) );
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	3305      	adds	r3, #5
 80013bc:	7819      	ldrb	r1, [r3, #0]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	7d1b      	ldrb	r3, [r3, #20]
 80013c2:	f003 0303 	and.w	r3, r3, #3
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	7d5b      	ldrb	r3, [r3, #21]
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	f003 030c 	and.w	r3, r3, #12
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	4313      	orrs	r3, r2
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	7d9b      	ldrb	r3, [r3, #22]
 80013de:	011b      	lsls	r3, r3, #4
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	4313      	orrs	r3, r2
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	7ddb      	ldrb	r3, [r3, #23]
 80013f0:	019b      	lsls	r3, r3, #6
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	4313      	orrs	r3, r2
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	3305      	adds	r3, #5
 80013fc:	430a      	orrs	r2, r1
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->line_sensor_25 & (0x03U)) | ((_m->line_sensor_26 & (0x03U)) << 2U) | ((_m->line_sensor_27 & (0x03U)) << 4U) | ((_m->line_sensor_28 & (0x03U)) << 6U) );
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	3306      	adds	r3, #6
 8001406:	7819      	ldrb	r1, [r3, #0]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	7e1b      	ldrb	r3, [r3, #24]
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	b2da      	uxtb	r2, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	7e5b      	ldrb	r3, [r3, #25]
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	b2db      	uxtb	r3, r3
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	b2db      	uxtb	r3, r3
 8001420:	4313      	orrs	r3, r2
 8001422:	b2da      	uxtb	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	7e9b      	ldrb	r3, [r3, #26]
 8001428:	011b      	lsls	r3, r3, #4
 800142a:	b2db      	uxtb	r3, r3
 800142c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001430:	b2db      	uxtb	r3, r3
 8001432:	4313      	orrs	r3, r2
 8001434:	b2da      	uxtb	r2, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	7edb      	ldrb	r3, [r3, #27]
 800143a:	019b      	lsls	r3, r3, #6
 800143c:	b2db      	uxtb	r3, r3
 800143e:	4313      	orrs	r3, r2
 8001440:	b2da      	uxtb	r2, r3
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	3306      	adds	r3, #6
 8001446:	430a      	orrs	r2, r1
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( (_m->line_sensor_29 & (0x03U)) | ((_m->line_sensor_30 & (0x03U)) << 2U) | ((_m->line_sensor_31 & (0x03U)) << 4U) | ((_m->line_sensor_32 & (0x03U)) << 6U) );
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	3307      	adds	r3, #7
 8001450:	7819      	ldrb	r1, [r3, #0]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	7f1b      	ldrb	r3, [r3, #28]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	b2da      	uxtb	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	7f5b      	ldrb	r3, [r3, #29]
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	b2db      	uxtb	r3, r3
 8001464:	f003 030c 	and.w	r3, r3, #12
 8001468:	b2db      	uxtb	r3, r3
 800146a:	4313      	orrs	r3, r2
 800146c:	b2da      	uxtb	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	7f9b      	ldrb	r3, [r3, #30]
 8001472:	011b      	lsls	r3, r3, #4
 8001474:	b2db      	uxtb	r3, r3
 8001476:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800147a:	b2db      	uxtb	r3, r3
 800147c:	4313      	orrs	r3, r2
 800147e:	b2da      	uxtb	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	7fdb      	ldrb	r3, [r3, #31]
 8001484:	019b      	lsls	r3, r3, #6
 8001486:	b2db      	uxtb	r3, r3
 8001488:	4313      	orrs	r3, r2
 800148a:	b2da      	uxtb	r2, r3
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	3307      	adds	r3, #7
 8001490:	430a      	orrs	r2, r1
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_1_DLC;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2208      	movs	r2, #8
 800149a:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_1_IDE;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
  return measurements_1_CANID;
 80014a2:	2301      	movs	r3, #1
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	371c      	adds	r7, #28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <Pack_measurements_2_jlb>:
}

#else

uint32_t Pack_measurements_2_jlb(measurements_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b087      	sub	sp, #28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
 80014bc:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_2_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 80014be:	2300      	movs	r3, #0
 80014c0:	75fb      	strb	r3, [r7, #23]
 80014c2:	e007      	b.n	80014d4 <Pack_measurements_2_jlb+0x24>
 80014c4:	7dfb      	ldrb	r3, [r7, #23]
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	75fa      	strb	r2, [r7, #23]
 80014ca:	461a      	mov	r2, r3
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	4413      	add	r3, r2
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
 80014d4:	7dfb      	ldrb	r3, [r7, #23]
 80014d6:	2b07      	cmp	r3, #7
 80014d8:	d9f4      	bls.n	80014c4 <Pack_measurements_2_jlb+0x14>

  _d[0] |= (uint8_t) ( (_m->line_sensor_1 & (0x03U)) | ((_m->line_sensor_2 & (0x03U)) << 2U) | ((_m->line_sensor_3 & (0x03U)) << 4U) | ((_m->line_sensor_4 & (0x03U)) << 6U) );
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	781a      	ldrb	r2, [r3, #0]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	f003 0303 	and.w	r3, r3, #3
 80014e6:	b2d9      	uxtb	r1, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	785b      	ldrb	r3, [r3, #1]
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	f003 030c 	and.w	r3, r3, #12
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	430b      	orrs	r3, r1
 80014f8:	b2d9      	uxtb	r1, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	789b      	ldrb	r3, [r3, #2]
 80014fe:	011b      	lsls	r3, r3, #4
 8001500:	b2db      	uxtb	r3, r3
 8001502:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001506:	b2db      	uxtb	r3, r3
 8001508:	430b      	orrs	r3, r1
 800150a:	b2d9      	uxtb	r1, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	78db      	ldrb	r3, [r3, #3]
 8001510:	019b      	lsls	r3, r3, #6
 8001512:	b2db      	uxtb	r3, r3
 8001514:	430b      	orrs	r3, r1
 8001516:	b2db      	uxtb	r3, r3
 8001518:	4313      	orrs	r3, r2
 800151a:	b2da      	uxtb	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( (_m->line_sensor_5 & (0x03U)) | ((_m->line_sensor_6 & (0x03U)) << 2U) | ((_m->line_sensor_7 & (0x03U)) << 4U) | ((_m->line_sensor_8 & (0x03U)) << 6U) );
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	3301      	adds	r3, #1
 8001524:	7819      	ldrb	r1, [r3, #0]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	791b      	ldrb	r3, [r3, #4]
 800152a:	f003 0303 	and.w	r3, r3, #3
 800152e:	b2da      	uxtb	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	795b      	ldrb	r3, [r3, #5]
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	b2db      	uxtb	r3, r3
 8001538:	f003 030c 	and.w	r3, r3, #12
 800153c:	b2db      	uxtb	r3, r3
 800153e:	4313      	orrs	r3, r2
 8001540:	b2da      	uxtb	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	799b      	ldrb	r3, [r3, #6]
 8001546:	011b      	lsls	r3, r3, #4
 8001548:	b2db      	uxtb	r3, r3
 800154a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800154e:	b2db      	uxtb	r3, r3
 8001550:	4313      	orrs	r3, r2
 8001552:	b2da      	uxtb	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	79db      	ldrb	r3, [r3, #7]
 8001558:	019b      	lsls	r3, r3, #6
 800155a:	b2db      	uxtb	r3, r3
 800155c:	4313      	orrs	r3, r2
 800155e:	b2da      	uxtb	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	3301      	adds	r3, #1
 8001564:	430a      	orrs	r2, r1
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->line_sensor_9 & (0x03U)) | ((_m->line_sensor_10 & (0x03U)) << 2U) | ((_m->line_sensor_11 & (0x03U)) << 4U) | ((_m->line_sensor_12 & (0x03U)) << 6U) );
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	3302      	adds	r3, #2
 800156e:	7819      	ldrb	r1, [r3, #0]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	7a1b      	ldrb	r3, [r3, #8]
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	b2da      	uxtb	r2, r3
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	7a5b      	ldrb	r3, [r3, #9]
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	b2db      	uxtb	r3, r3
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	b2db      	uxtb	r3, r3
 8001588:	4313      	orrs	r3, r2
 800158a:	b2da      	uxtb	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	7a9b      	ldrb	r3, [r3, #10]
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	b2db      	uxtb	r3, r3
 8001594:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001598:	b2db      	uxtb	r3, r3
 800159a:	4313      	orrs	r3, r2
 800159c:	b2da      	uxtb	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	7adb      	ldrb	r3, [r3, #11]
 80015a2:	019b      	lsls	r3, r3, #6
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	4313      	orrs	r3, r2
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3302      	adds	r3, #2
 80015ae:	430a      	orrs	r2, r1
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( (_m->line_sensor_13 & (0x03U)) | ((_m->line_sensor_14 & (0x03U)) << 2U) | ((_m->line_sensor_15 & (0x03U)) << 4U) | ((_m->line_sensor_16 & (0x03U)) << 6U) );
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	3303      	adds	r3, #3
 80015b8:	7819      	ldrb	r1, [r3, #0]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	7b1b      	ldrb	r3, [r3, #12]
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	7b5b      	ldrb	r3, [r3, #13]
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	f003 030c 	and.w	r3, r3, #12
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	4313      	orrs	r3, r2
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	7b9b      	ldrb	r3, [r3, #14]
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	7bdb      	ldrb	r3, [r3, #15]
 80015ec:	019b      	lsls	r3, r3, #6
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	4313      	orrs	r3, r2
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	3303      	adds	r3, #3
 80015f8:	430a      	orrs	r2, r1
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->line_sensor_17 & (0x03U)) | ((_m->line_sensor_18 & (0x03U)) << 2U) | ((_m->line_sensor_19 & (0x03U)) << 4U) | ((_m->line_sensor_20 & (0x03U)) << 6U) );
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	3304      	adds	r3, #4
 8001602:	7819      	ldrb	r1, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	7c1b      	ldrb	r3, [r3, #16]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	b2da      	uxtb	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	7c5b      	ldrb	r3, [r3, #17]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	b2db      	uxtb	r3, r3
 8001616:	f003 030c 	and.w	r3, r3, #12
 800161a:	b2db      	uxtb	r3, r3
 800161c:	4313      	orrs	r3, r2
 800161e:	b2da      	uxtb	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	7c9b      	ldrb	r3, [r3, #18]
 8001624:	011b      	lsls	r3, r3, #4
 8001626:	b2db      	uxtb	r3, r3
 8001628:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800162c:	b2db      	uxtb	r3, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	b2da      	uxtb	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	7cdb      	ldrb	r3, [r3, #19]
 8001636:	019b      	lsls	r3, r3, #6
 8001638:	b2db      	uxtb	r3, r3
 800163a:	4313      	orrs	r3, r2
 800163c:	b2da      	uxtb	r2, r3
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	3304      	adds	r3, #4
 8001642:	430a      	orrs	r2, r1
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( (_m->line_sensor_21 & (0x03U)) | ((_m->line_sensor_22 & (0x03U)) << 2U) | ((_m->line_sensor_23 & (0x03U)) << 4U) | ((_m->line_sensor_24 & (0x03U)) << 6U) );
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	3305      	adds	r3, #5
 800164c:	7819      	ldrb	r1, [r3, #0]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	7d1b      	ldrb	r3, [r3, #20]
 8001652:	f003 0303 	and.w	r3, r3, #3
 8001656:	b2da      	uxtb	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	7d5b      	ldrb	r3, [r3, #21]
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	b2db      	uxtb	r3, r3
 8001660:	f003 030c 	and.w	r3, r3, #12
 8001664:	b2db      	uxtb	r3, r3
 8001666:	4313      	orrs	r3, r2
 8001668:	b2da      	uxtb	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	7d9b      	ldrb	r3, [r3, #22]
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	b2db      	uxtb	r3, r3
 8001672:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001676:	b2db      	uxtb	r3, r3
 8001678:	4313      	orrs	r3, r2
 800167a:	b2da      	uxtb	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	7ddb      	ldrb	r3, [r3, #23]
 8001680:	019b      	lsls	r3, r3, #6
 8001682:	b2db      	uxtb	r3, r3
 8001684:	4313      	orrs	r3, r2
 8001686:	b2da      	uxtb	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	3305      	adds	r3, #5
 800168c:	430a      	orrs	r2, r1
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->line_sensor_25 & (0x03U)) | ((_m->line_sensor_26 & (0x03U)) << 2U) | ((_m->line_sensor_27 & (0x03U)) << 4U) | ((_m->line_sensor_28 & (0x03U)) << 6U) );
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	3306      	adds	r3, #6
 8001696:	7819      	ldrb	r1, [r3, #0]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	7e1b      	ldrb	r3, [r3, #24]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	7e5b      	ldrb	r3, [r3, #25]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	f003 030c 	and.w	r3, r3, #12
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	7e9b      	ldrb	r3, [r3, #26]
 80016b8:	011b      	lsls	r3, r3, #4
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	7edb      	ldrb	r3, [r3, #27]
 80016ca:	019b      	lsls	r3, r3, #6
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	4313      	orrs	r3, r2
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	3306      	adds	r3, #6
 80016d6:	430a      	orrs	r2, r1
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( (_m->line_sensor_29 & (0x03U)) | ((_m->line_sensor_30 & (0x03U)) << 2U) | ((_m->line_sensor_31 & (0x03U)) << 4U) | ((_m->line_sensor_32 & (0x03U)) << 6U) );
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	3307      	adds	r3, #7
 80016e0:	7819      	ldrb	r1, [r3, #0]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	7f1b      	ldrb	r3, [r3, #28]
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	7f5b      	ldrb	r3, [r3, #29]
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	f003 030c 	and.w	r3, r3, #12
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	4313      	orrs	r3, r2
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	7f9b      	ldrb	r3, [r3, #30]
 8001702:	011b      	lsls	r3, r3, #4
 8001704:	b2db      	uxtb	r3, r3
 8001706:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800170a:	b2db      	uxtb	r3, r3
 800170c:	4313      	orrs	r3, r2
 800170e:	b2da      	uxtb	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	7fdb      	ldrb	r3, [r3, #31]
 8001714:	019b      	lsls	r3, r3, #6
 8001716:	b2db      	uxtb	r3, r3
 8001718:	4313      	orrs	r3, r2
 800171a:	b2da      	uxtb	r2, r3
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	3307      	adds	r3, #7
 8001720:	430a      	orrs	r2, r1
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_2_DLC;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2208      	movs	r2, #8
 800172a:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_2_IDE;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
  return measurements_2_CANID;
 8001732:	2302      	movs	r3, #2
}
 8001734:	4618      	mov	r0, r3
 8001736:	371c      	adds	r7, #28
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <Pack_measurements_3_jlb>:
}

#else

uint32_t Pack_measurements_3_jlb(measurements_3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_3_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 800174e:	2300      	movs	r3, #0
 8001750:	75fb      	strb	r3, [r7, #23]
 8001752:	e007      	b.n	8001764 <Pack_measurements_3_jlb+0x24>
 8001754:	7dfb      	ldrb	r3, [r7, #23]
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	75fa      	strb	r2, [r7, #23]
 800175a:	461a      	mov	r2, r3
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	4413      	add	r3, r2
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
 8001764:	7dfb      	ldrb	r3, [r7, #23]
 8001766:	2b07      	cmp	r3, #7
 8001768:	d9f4      	bls.n	8001754 <Pack_measurements_3_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->angular_velocity_x_ro = (uint16_t) JLB_angular_velocity_x_ro_toS(_m->angular_velocity_x_phys);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001770:	a34f      	add	r3, pc, #316	; (adr r3, 80018b0 <Pack_measurements_3_jlb+0x170>)
 8001772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001776:	f7fe fd7b 	bl	8000270 <__adddf3>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	a34d      	add	r3, pc, #308	; (adr r3, 80018b8 <Pack_measurements_3_jlb+0x178>)
 8001784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001788:	f7ff f852 	bl	8000830 <__aeabi_ddiv>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f7ff f9fa 	bl	8000b8c <__aeabi_d2uiz>
 8001798:	4603      	mov	r3, r0
 800179a:	b29a      	uxth	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	801a      	strh	r2, [r3, #0]
  _m->angular_velocity_y_ro = (uint16_t) JLB_angular_velocity_y_ro_toS(_m->angular_velocity_y_phys);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80017a6:	a342      	add	r3, pc, #264	; (adr r3, 80018b0 <Pack_measurements_3_jlb+0x170>)
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	f7fe fd60 	bl	8000270 <__adddf3>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	a33f      	add	r3, pc, #252	; (adr r3, 80018b8 <Pack_measurements_3_jlb+0x178>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	f7ff f837 	bl	8000830 <__aeabi_ddiv>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	f7ff f9df 	bl	8000b8c <__aeabi_d2uiz>
 80017ce:	4603      	mov	r3, r0
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	821a      	strh	r2, [r3, #16]
  _m->angular_velocity_z_ro = (uint16_t) JLB_angular_velocity_z_ro_toS(_m->angular_velocity_z_phys);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80017dc:	a334      	add	r3, pc, #208	; (adr r3, 80018b0 <Pack_measurements_3_jlb+0x170>)
 80017de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e2:	f7fe fd45 	bl	8000270 <__adddf3>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	a332      	add	r3, pc, #200	; (adr r3, 80018b8 <Pack_measurements_3_jlb+0x178>)
 80017f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f4:	f7ff f81c 	bl	8000830 <__aeabi_ddiv>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	f7ff f9c4 	bl	8000b8c <__aeabi_d2uiz>
 8001804:	4603      	mov	r3, r0
 8001806:	b29a      	uxth	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	841a      	strh	r2, [r3, #32]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->angular_velocity_x_ro & (0xFFU)) );
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	781a      	ldrb	r2, [r3, #0]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	4313      	orrs	r3, r2
 8001818:	b2da      	uxtb	r2, r3
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->angular_velocity_x_ro >> 8U) & (0xFFU)) );
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	3301      	adds	r3, #1
 8001822:	7819      	ldrb	r1, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	0a1b      	lsrs	r3, r3, #8
 800182a:	b29b      	uxth	r3, r3
 800182c:	b2da      	uxtb	r2, r3
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	3301      	adds	r3, #1
 8001832:	430a      	orrs	r2, r1
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->angular_velocity_y_ro & (0xFFU)) );
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	3302      	adds	r3, #2
 800183c:	7819      	ldrb	r1, [r3, #0]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8a1b      	ldrh	r3, [r3, #16]
 8001842:	b2da      	uxtb	r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	3302      	adds	r3, #2
 8001848:	430a      	orrs	r2, r1
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->angular_velocity_y_ro >> 8U) & (0xFFU)) );
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	3303      	adds	r3, #3
 8001852:	7819      	ldrb	r1, [r3, #0]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8a1b      	ldrh	r3, [r3, #16]
 8001858:	0a1b      	lsrs	r3, r3, #8
 800185a:	b29b      	uxth	r3, r3
 800185c:	b2da      	uxtb	r2, r3
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	3303      	adds	r3, #3
 8001862:	430a      	orrs	r2, r1
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->angular_velocity_z_ro & (0xFFU)) );
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	3304      	adds	r3, #4
 800186c:	7819      	ldrb	r1, [r3, #0]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	8c1b      	ldrh	r3, [r3, #32]
 8001872:	b2da      	uxtb	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	3304      	adds	r3, #4
 8001878:	430a      	orrs	r2, r1
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->angular_velocity_z_ro >> 8U) & (0xFFU)) );
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	3305      	adds	r3, #5
 8001882:	7819      	ldrb	r1, [r3, #0]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	8c1b      	ldrh	r3, [r3, #32]
 8001888:	0a1b      	lsrs	r3, r3, #8
 800188a:	b29b      	uxth	r3, r3
 800188c:	b2da      	uxtb	r2, r3
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	3305      	adds	r3, #5
 8001892:	430a      	orrs	r2, r1
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_3_DLC;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2208      	movs	r2, #8
 800189c:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_3_IDE;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
  return measurements_3_CANID;
 80018a4:	2303      	movs	r3, #3
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	b4395810 	.word	0xb4395810
 80018b4:	401a36c8 	.word	0x401a36c8
 80018b8:	eb1c432d 	.word	0xeb1c432d
 80018bc:	3f2a36e2 	.word	0x3f2a36e2

080018c0 <Pack_measurements_4_jlb>:
}

#else

uint32_t Pack_measurements_4_jlb(measurements_4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
 80018cc:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_4_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 80018ce:	2300      	movs	r3, #0
 80018d0:	75fb      	strb	r3, [r7, #23]
 80018d2:	e007      	b.n	80018e4 <Pack_measurements_4_jlb+0x24>
 80018d4:	7dfb      	ldrb	r3, [r7, #23]
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	75fa      	strb	r2, [r7, #23]
 80018da:	461a      	mov	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	4413      	add	r3, r2
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]
 80018e4:	7dfb      	ldrb	r3, [r7, #23]
 80018e6:	2b07      	cmp	r3, #7
 80018e8:	d9f4      	bls.n	80018d4 <Pack_measurements_4_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->linear_acceleration_x_ro = (uint16_t) JLB_linear_acceleration_x_ro_toS(_m->linear_acceleration_x_phys);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80018f0:	a34f      	add	r3, pc, #316	; (adr r3, 8001a30 <Pack_measurements_4_jlb+0x170>)
 80018f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f6:	f7fe fcbb 	bl	8000270 <__adddf3>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	a34d      	add	r3, pc, #308	; (adr r3, 8001a38 <Pack_measurements_4_jlb+0x178>)
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	f7fe ff92 	bl	8000830 <__aeabi_ddiv>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	f7ff f93a 	bl	8000b8c <__aeabi_d2uiz>
 8001918:	4603      	mov	r3, r0
 800191a:	b29a      	uxth	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	801a      	strh	r2, [r3, #0]
  _m->linear_acceleration_y_ro = (uint16_t) JLB_linear_acceleration_y_ro_toS(_m->linear_acceleration_y_phys);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001926:	a342      	add	r3, pc, #264	; (adr r3, 8001a30 <Pack_measurements_4_jlb+0x170>)
 8001928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192c:	f7fe fca0 	bl	8000270 <__adddf3>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4610      	mov	r0, r2
 8001936:	4619      	mov	r1, r3
 8001938:	a33f      	add	r3, pc, #252	; (adr r3, 8001a38 <Pack_measurements_4_jlb+0x178>)
 800193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193e:	f7fe ff77 	bl	8000830 <__aeabi_ddiv>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4610      	mov	r0, r2
 8001948:	4619      	mov	r1, r3
 800194a:	f7ff f91f 	bl	8000b8c <__aeabi_d2uiz>
 800194e:	4603      	mov	r3, r0
 8001950:	b29a      	uxth	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	821a      	strh	r2, [r3, #16]
  _m->linear_acceleration_z_ro = (uint16_t) JLB_linear_acceleration_z_ro_toS(_m->linear_acceleration_z_phys);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800195c:	a334      	add	r3, pc, #208	; (adr r3, 8001a30 <Pack_measurements_4_jlb+0x170>)
 800195e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001962:	f7fe fc85 	bl	8000270 <__adddf3>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	a332      	add	r3, pc, #200	; (adr r3, 8001a38 <Pack_measurements_4_jlb+0x178>)
 8001970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001974:	f7fe ff5c 	bl	8000830 <__aeabi_ddiv>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4610      	mov	r0, r2
 800197e:	4619      	mov	r1, r3
 8001980:	f7ff f904 	bl	8000b8c <__aeabi_d2uiz>
 8001984:	4603      	mov	r3, r0
 8001986:	b29a      	uxth	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	841a      	strh	r2, [r3, #32]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->linear_acceleration_x_ro & (0xFFU)) );
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	781a      	ldrb	r2, [r3, #0]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	4313      	orrs	r3, r2
 8001998:	b2da      	uxtb	r2, r3
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->linear_acceleration_x_ro >> 8U) & (0xFFU)) );
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	3301      	adds	r3, #1
 80019a2:	7819      	ldrb	r1, [r3, #0]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	3301      	adds	r3, #1
 80019b2:	430a      	orrs	r2, r1
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->linear_acceleration_y_ro & (0xFFU)) );
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	3302      	adds	r3, #2
 80019bc:	7819      	ldrb	r1, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8a1b      	ldrh	r3, [r3, #16]
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	3302      	adds	r3, #2
 80019c8:	430a      	orrs	r2, r1
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->linear_acceleration_y_ro >> 8U) & (0xFFU)) );
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	3303      	adds	r3, #3
 80019d2:	7819      	ldrb	r1, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8a1b      	ldrh	r3, [r3, #16]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	b29b      	uxth	r3, r3
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	3303      	adds	r3, #3
 80019e2:	430a      	orrs	r2, r1
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->linear_acceleration_z_ro & (0xFFU)) );
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	3304      	adds	r3, #4
 80019ec:	7819      	ldrb	r1, [r3, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8c1b      	ldrh	r3, [r3, #32]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	3304      	adds	r3, #4
 80019f8:	430a      	orrs	r2, r1
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->linear_acceleration_z_ro >> 8U) & (0xFFU)) );
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	3305      	adds	r3, #5
 8001a02:	7819      	ldrb	r1, [r3, #0]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8c1b      	ldrh	r3, [r3, #32]
 8001a08:	0a1b      	lsrs	r3, r3, #8
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	3305      	adds	r3, #5
 8001a12:	430a      	orrs	r2, r1
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_4_DLC;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2208      	movs	r2, #8
 8001a1c:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_4_IDE;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
  return measurements_4_CANID;
 8001a24:	2304      	movs	r3, #4
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	70a3d70a 	.word	0x70a3d70a
 8001a34:	4030623d 	.word	0x4030623d
 8001a38:	d2f1a9fc 	.word	0xd2f1a9fc
 8001a3c:	3f40624d 	.word	0x3f40624d

08001a40 <Pack_measurements_5_jlb>:
}

#else

uint32_t Pack_measurements_5_jlb(measurements_5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
 8001a4c:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_5_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8001a4e:	2300      	movs	r3, #0
 8001a50:	75fb      	strb	r3, [r7, #23]
 8001a52:	e007      	b.n	8001a64 <Pack_measurements_5_jlb+0x24>
 8001a54:	7dfb      	ldrb	r3, [r7, #23]
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	75fa      	strb	r2, [r7, #23]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	4413      	add	r3, r2
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
 8001a64:	7dfb      	ldrb	r3, [r7, #23]
 8001a66:	2b07      	cmp	r3, #7
 8001a68:	d9f4      	bls.n	8001a54 <Pack_measurements_5_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->wheel_rpm_ro = (uint16_t) JLB_wheel_rpm_ro_toS(_m->wheel_rpm_phys);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a70:	a35b      	add	r3, pc, #364	; (adr r3, 8001be0 <Pack_measurements_5_jlb+0x1a0>)
 8001a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a76:	f7fe fbfb 	bl	8000270 <__adddf3>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	a359      	add	r3, pc, #356	; (adr r3, 8001be8 <Pack_measurements_5_jlb+0x1a8>)
 8001a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a88:	f7fe fed2 	bl	8000830 <__aeabi_ddiv>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	f7ff f87a 	bl	8000b8c <__aeabi_d2uiz>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	801a      	strh	r2, [r3, #0]
  _m->object_range_ro = (uint16_t) JLB_object_range_ro_toS(_m->object_range_phys);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001aa6:	a352      	add	r3, pc, #328	; (adr r3, 8001bf0 <Pack_measurements_5_jlb+0x1b0>)
 8001aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aac:	f7fe fec0 	bl	8000830 <__aeabi_ddiv>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f7ff f868 	bl	8000b8c <__aeabi_d2uiz>
 8001abc:	4603      	mov	r3, r0
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	821a      	strh	r2, [r3, #16]
  _m->motor_current_ro = (uint16_t) JLB_motor_current_ro_toS(_m->motor_current_phys);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001aca:	a34b      	add	r3, pc, #300	; (adr r3, 8001bf8 <Pack_measurements_5_jlb+0x1b8>)
 8001acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad0:	f7fe feae 	bl	8000830 <__aeabi_ddiv>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	f7ff f856 	bl	8000b8c <__aeabi_d2uiz>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	841a      	strh	r2, [r3, #32]
  _m->duty_cycle_ro = (uint16_t) JLB_duty_cycle_ro_toS(_m->duty_cycle_phys);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001aee:	a344      	add	r3, pc, #272	; (adr r3, 8001c00 <Pack_measurements_5_jlb+0x1c0>)
 8001af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af4:	f7fe fe9c 	bl	8000830 <__aeabi_ddiv>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	f7ff f844 	bl	8000b8c <__aeabi_d2uiz>
 8001b04:	4603      	mov	r3, r0
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	861a      	strh	r2, [r3, #48]	; 0x30
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->wheel_rpm_ro & (0xFFU)) );
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	781a      	ldrb	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	4313      	orrs	r3, r2
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->wheel_rpm_ro >> 8U) & (0xFFU)) );
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	3301      	adds	r3, #1
 8001b22:	7819      	ldrb	r1, [r3, #0]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	3301      	adds	r3, #1
 8001b32:	430a      	orrs	r2, r1
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->object_range_ro & (0xFFU)) );
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	3302      	adds	r3, #2
 8001b3c:	7819      	ldrb	r1, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8a1b      	ldrh	r3, [r3, #16]
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	3302      	adds	r3, #2
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->object_range_ro >> 8U) & (0xFFU)) );
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	3303      	adds	r3, #3
 8001b52:	7819      	ldrb	r1, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8a1b      	ldrh	r3, [r3, #16]
 8001b58:	0a1b      	lsrs	r3, r3, #8
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	3303      	adds	r3, #3
 8001b62:	430a      	orrs	r2, r1
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->motor_current_ro & (0xFFU)) );
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	7819      	ldrb	r1, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8c1b      	ldrh	r3, [r3, #32]
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	3304      	adds	r3, #4
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->motor_current_ro >> 8U) & (0xFFU)) );
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	3305      	adds	r3, #5
 8001b82:	7819      	ldrb	r1, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8c1b      	ldrh	r3, [r3, #32]
 8001b88:	0a1b      	lsrs	r3, r3, #8
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	3305      	adds	r3, #5
 8001b92:	430a      	orrs	r2, r1
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->duty_cycle_ro & (0xFFU)) );
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	3306      	adds	r3, #6
 8001b9c:	7819      	ldrb	r1, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	3306      	adds	r3, #6
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( ((_m->duty_cycle_ro >> 8U) & (0xFFU)) );
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	3307      	adds	r3, #7
 8001bb2:	7819      	ldrb	r1, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001bb8:	0a1b      	lsrs	r3, r3, #8
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	3307      	adds	r3, #7
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_5_DLC;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2208      	movs	r2, #8
 8001bcc:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_5_IDE;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
  return measurements_5_CANID;
 8001bd4:	2305      	movs	r3, #5
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	00000000 	.word	0x00000000
 8001be4:	40a99980 	.word	0x40a99980
 8001be8:	9999999a 	.word	0x9999999a
 8001bec:	3fb99999 	.word	0x3fb99999
 8001bf0:	eb1c432d 	.word	0xeb1c432d
 8001bf4:	3f1a36e2 	.word	0x3f1a36e2
 8001bf8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001bfc:	3f50624d 	.word	0x3f50624d
 8001c00:	d7c6fbd2 	.word	0xd7c6fbd2
 8001c04:	3ef2599e 	.word	0x3ef2599e

08001c08 <Pack_odometry_1_jlb>:
}

#else

uint32_t Pack_odometry_1_jlb(odometry_1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(odometry_1_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8001c16:	2300      	movs	r3, #0
 8001c18:	75fb      	strb	r3, [r7, #23]
 8001c1a:	e007      	b.n	8001c2c <Pack_odometry_1_jlb+0x24>
 8001c1c:	7dfb      	ldrb	r3, [r7, #23]
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	75fa      	strb	r2, [r7, #23]
 8001c22:	461a      	mov	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	4413      	add	r3, r2
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
 8001c2c:	7dfb      	ldrb	r3, [r7, #23]
 8001c2e:	2b07      	cmp	r3, #7
 8001c30:	d9f4      	bls.n	8001c1c <Pack_odometry_1_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->orientation_ro = (uint16_t) JLB_orientation_ro_toS(_m->orientation_phys);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001c38:	a34f      	add	r3, pc, #316	; (adr r3, 8001d78 <Pack_odometry_1_jlb+0x170>)
 8001c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3e:	f7fe fb17 	bl	8000270 <__adddf3>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4610      	mov	r0, r2
 8001c48:	4619      	mov	r1, r3
 8001c4a:	a34d      	add	r3, pc, #308	; (adr r3, 8001d80 <Pack_odometry_1_jlb+0x178>)
 8001c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c50:	f7fe fdee 	bl	8000830 <__aeabi_ddiv>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4610      	mov	r0, r2
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f7fe ff96 	bl	8000b8c <__aeabi_d2uiz>
 8001c60:	4603      	mov	r3, r0
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	801a      	strh	r2, [r3, #0]
  _m->position_x_ro = (uint16_t) JLB_position_x_ro_toS(_m->position_x_phys);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001c6e:	a346      	add	r3, pc, #280	; (adr r3, 8001d88 <Pack_odometry_1_jlb+0x180>)
 8001c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c74:	f7fe fafc 	bl	8000270 <__adddf3>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	4619      	mov	r1, r3
 8001c80:	a343      	add	r3, pc, #268	; (adr r3, 8001d90 <Pack_odometry_1_jlb+0x188>)
 8001c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c86:	f7fe fdd3 	bl	8000830 <__aeabi_ddiv>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	f7fe ff7b 	bl	8000b8c <__aeabi_d2uiz>
 8001c96:	4603      	mov	r3, r0
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	821a      	strh	r2, [r3, #16]
  _m->position_y_ro = (uint16_t) JLB_position_y_ro_toS(_m->position_y_phys);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001ca4:	a338      	add	r3, pc, #224	; (adr r3, 8001d88 <Pack_odometry_1_jlb+0x180>)
 8001ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001caa:	f7fe fae1 	bl	8000270 <__adddf3>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	a336      	add	r3, pc, #216	; (adr r3, 8001d90 <Pack_odometry_1_jlb+0x188>)
 8001cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbc:	f7fe fdb8 	bl	8000830 <__aeabi_ddiv>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f7fe ff60 	bl	8000b8c <__aeabi_d2uiz>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	841a      	strh	r2, [r3, #32]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->orientation_ro & (0xFFU)) );
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	781a      	ldrb	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->orientation_ro >> 8U) & (0xFFU)) );
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	7819      	ldrb	r1, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->position_x_ro & (0xFFU)) );
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	3302      	adds	r3, #2
 8001d04:	7819      	ldrb	r1, [r3, #0]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8a1b      	ldrh	r3, [r3, #16]
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	3302      	adds	r3, #2
 8001d10:	430a      	orrs	r2, r1
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->position_x_ro >> 8U) & (0xFFU)) );
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	3303      	adds	r3, #3
 8001d1a:	7819      	ldrb	r1, [r3, #0]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8a1b      	ldrh	r3, [r3, #16]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	3303      	adds	r3, #3
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->position_y_ro & (0xFFU)) );
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	3304      	adds	r3, #4
 8001d34:	7819      	ldrb	r1, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8c1b      	ldrh	r3, [r3, #32]
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	3304      	adds	r3, #4
 8001d40:	430a      	orrs	r2, r1
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->position_y_ro >> 8U) & (0xFFU)) );
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	3305      	adds	r3, #5
 8001d4a:	7819      	ldrb	r1, [r3, #0]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8c1b      	ldrh	r3, [r3, #32]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	3305      	adds	r3, #5
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) odometry_1_DLC;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2208      	movs	r2, #8
 8001d64:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) odometry_1_IDE;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
  return odometry_1_CANID;
 8001d6c:	2311      	movs	r3, #17
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	b4395810 	.word	0xb4395810
 8001d7c:	401a36c8 	.word	0x401a36c8
 8001d80:	eb1c432d 	.word	0xeb1c432d
 8001d84:	3f2a36e2 	.word	0x3f2a36e2
 8001d88:	70a3d70a 	.word	0x70a3d70a
 8001d8c:	4030623d 	.word	0x4030623d
 8001d90:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d94:	3f40624d 	.word	0x3f40624d

08001d98 <Pack_odometry_2_jlb>:
}

#else

uint32_t Pack_odometry_2_jlb(odometry_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(odometry_2_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8001da6:	2300      	movs	r3, #0
 8001da8:	75fb      	strb	r3, [r7, #23]
 8001daa:	e007      	b.n	8001dbc <Pack_odometry_2_jlb+0x24>
 8001dac:	7dfb      	ldrb	r3, [r7, #23]
 8001dae:	1c5a      	adds	r2, r3, #1
 8001db0:	75fa      	strb	r2, [r7, #23]
 8001db2:	461a      	mov	r2, r3
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	4413      	add	r3, r2
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]
 8001dbc:	7dfb      	ldrb	r3, [r7, #23]
 8001dbe:	2b07      	cmp	r3, #7
 8001dc0:	d9f4      	bls.n	8001dac <Pack_odometry_2_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->angular_velocity_z_ro = (uint16_t) JLB_angular_velocity_z_ro_toS(_m->angular_velocity_z_phys);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001dc8:	a335      	add	r3, pc, #212	; (adr r3, 8001ea0 <Pack_odometry_2_jlb+0x108>)
 8001dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dce:	f7fe fa4f 	bl	8000270 <__adddf3>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	4619      	mov	r1, r3
 8001dda:	a333      	add	r3, pc, #204	; (adr r3, 8001ea8 <Pack_odometry_2_jlb+0x110>)
 8001ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de0:	f7fe fd26 	bl	8000830 <__aeabi_ddiv>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4610      	mov	r0, r2
 8001dea:	4619      	mov	r1, r3
 8001dec:	f7fe fece 	bl	8000b8c <__aeabi_d2uiz>
 8001df0:	4603      	mov	r3, r0
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	801a      	strh	r2, [r3, #0]
  _m->linear_velocity_x_ro = (uint16_t) JLB_linear_velocity_x_ro_toS(_m->linear_velocity_x_phys);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001dfe:	a32c      	add	r3, pc, #176	; (adr r3, 8001eb0 <Pack_odometry_2_jlb+0x118>)
 8001e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e04:	f7fe fa34 	bl	8000270 <__adddf3>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	a329      	add	r3, pc, #164	; (adr r3, 8001eb8 <Pack_odometry_2_jlb+0x120>)
 8001e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e16:	f7fe fd0b 	bl	8000830 <__aeabi_ddiv>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4610      	mov	r0, r2
 8001e20:	4619      	mov	r1, r3
 8001e22:	f7fe feb3 	bl	8000b8c <__aeabi_d2uiz>
 8001e26:	4603      	mov	r3, r0
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	821a      	strh	r2, [r3, #16]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->angular_velocity_z_ro & (0xFFU)) );
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	781a      	ldrb	r2, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->angular_velocity_z_ro >> 8U) & (0xFFU)) );
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	3301      	adds	r3, #1
 8001e44:	7819      	ldrb	r1, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	0a1b      	lsrs	r3, r3, #8
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	3301      	adds	r3, #1
 8001e54:	430a      	orrs	r2, r1
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->linear_velocity_x_ro & (0xFFU)) );
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	3302      	adds	r3, #2
 8001e5e:	7819      	ldrb	r1, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8a1b      	ldrh	r3, [r3, #16]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	3302      	adds	r3, #2
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->linear_velocity_x_ro >> 8U) & (0xFFU)) );
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	3303      	adds	r3, #3
 8001e74:	7819      	ldrb	r1, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8a1b      	ldrh	r3, [r3, #16]
 8001e7a:	0a1b      	lsrs	r3, r3, #8
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	3303      	adds	r3, #3
 8001e84:	430a      	orrs	r2, r1
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) odometry_2_DLC;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2208      	movs	r2, #8
 8001e8e:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) odometry_2_IDE;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
  return odometry_2_CANID;
 8001e96:	2312      	movs	r3, #18
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	b4395810 	.word	0xb4395810
 8001ea4:	401a36c8 	.word	0x401a36c8
 8001ea8:	eb1c432d 	.word	0xeb1c432d
 8001eac:	3f2a36e2 	.word	0x3f2a36e2
 8001eb0:	70a3d70a 	.word	0x70a3d70a
 8001eb4:	4030623d 	.word	0x4030623d
 8001eb8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001ebc:	3f40624d 	.word	0x3f40624d

08001ec0 <Pack_logic_1_jlb>:
}

#else

uint32_t Pack_logic_1_jlb(logic_1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(logic_1_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8001ece:	2300      	movs	r3, #0
 8001ed0:	75fb      	strb	r3, [r7, #23]
 8001ed2:	e007      	b.n	8001ee4 <Pack_logic_1_jlb+0x24>
 8001ed4:	7dfb      	ldrb	r3, [r7, #23]
 8001ed6:	1c5a      	adds	r2, r3, #1
 8001ed8:	75fa      	strb	r2, [r7, #23]
 8001eda:	461a      	mov	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	4413      	add	r3, r2
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
 8001ee4:	7dfb      	ldrb	r3, [r7, #23]
 8001ee6:	2b07      	cmp	r3, #7
 8001ee8:	d9f4      	bls.n	8001ed4 <Pack_logic_1_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->target_angle_ro = (uint16_t) JLB_target_angle_ro_toS(_m->target_angle_phys);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ef0:	a369      	add	r3, pc, #420	; (adr r3, 8002098 <Pack_logic_1_jlb+0x1d8>)
 8001ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef6:	f7fe f9bb 	bl	8000270 <__adddf3>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4610      	mov	r0, r2
 8001f00:	4619      	mov	r1, r3
 8001f02:	a367      	add	r3, pc, #412	; (adr r3, 80020a0 <Pack_logic_1_jlb+0x1e0>)
 8001f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f08:	f7fe fc92 	bl	8000830 <__aeabi_ddiv>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4610      	mov	r0, r2
 8001f12:	4619      	mov	r1, r3
 8001f14:	f7fe fe3a 	bl	8000b8c <__aeabi_d2uiz>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	801a      	strh	r2, [r3, #0]
  _m->target_speed_ro = (uint16_t) JLB_target_speed_ro_toS(_m->target_speed_phys);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001f26:	a360      	add	r3, pc, #384	; (adr r3, 80020a8 <Pack_logic_1_jlb+0x1e8>)
 8001f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2c:	f7fe f9a0 	bl	8000270 <__adddf3>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4610      	mov	r0, r2
 8001f36:	4619      	mov	r1, r3
 8001f38:	a35d      	add	r3, pc, #372	; (adr r3, 80020b0 <Pack_logic_1_jlb+0x1f0>)
 8001f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3e:	f7fe fc77 	bl	8000830 <__aeabi_ddiv>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4610      	mov	r0, r2
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f7fe fe1f 	bl	8000b8c <__aeabi_d2uiz>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	821a      	strh	r2, [r3, #16]
  _m->cross_track_error_ro = (uint16_t) JLB_cross_track_error_ro_toS(_m->cross_track_error_phys);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001f5c:	a34e      	add	r3, pc, #312	; (adr r3, 8002098 <Pack_logic_1_jlb+0x1d8>)
 8001f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f62:	f7fe f985 	bl	8000270 <__adddf3>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	a34c      	add	r3, pc, #304	; (adr r3, 80020a0 <Pack_logic_1_jlb+0x1e0>)
 8001f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f74:	f7fe fc5c 	bl	8000830 <__aeabi_ddiv>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f7fe fe04 	bl	8000b8c <__aeabi_d2uiz>
 8001f84:	4603      	mov	r3, r0
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	841a      	strh	r2, [r3, #32]
  _m->heading_error_ro = (uint16_t) JLB_heading_error_ro_toS(_m->heading_error_phys);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001f92:	a349      	add	r3, pc, #292	; (adr r3, 80020b8 <Pack_logic_1_jlb+0x1f8>)
 8001f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f98:	f7fe f96a 	bl	8000270 <__adddf3>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	a346      	add	r3, pc, #280	; (adr r3, 80020c0 <Pack_logic_1_jlb+0x200>)
 8001fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001faa:	f7fe fc41 	bl	8000830 <__aeabi_ddiv>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f7fe fde9 	bl	8000b8c <__aeabi_d2uiz>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	861a      	strh	r2, [r3, #48]	; 0x30
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->target_angle_ro & (0xFFU)) );
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	781a      	ldrb	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->target_angle_ro >> 8U) & (0xFFU)) );
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	7819      	ldrb	r1, [r3, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->target_speed_ro & (0xFFU)) );
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	3302      	adds	r3, #2
 8001ff2:	7819      	ldrb	r1, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8a1b      	ldrh	r3, [r3, #16]
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	3302      	adds	r3, #2
 8001ffe:	430a      	orrs	r2, r1
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->target_speed_ro >> 8U) & (0xFFU)) );
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	3303      	adds	r3, #3
 8002008:	7819      	ldrb	r1, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8a1b      	ldrh	r3, [r3, #16]
 800200e:	0a1b      	lsrs	r3, r3, #8
 8002010:	b29b      	uxth	r3, r3
 8002012:	b2da      	uxtb	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	3303      	adds	r3, #3
 8002018:	430a      	orrs	r2, r1
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->cross_track_error_ro & (0xFFU)) );
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	3304      	adds	r3, #4
 8002022:	7819      	ldrb	r1, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8c1b      	ldrh	r3, [r3, #32]
 8002028:	b2da      	uxtb	r2, r3
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	3304      	adds	r3, #4
 800202e:	430a      	orrs	r2, r1
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->cross_track_error_ro >> 8U) & (0xFFU)) );
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	3305      	adds	r3, #5
 8002038:	7819      	ldrb	r1, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8c1b      	ldrh	r3, [r3, #32]
 800203e:	0a1b      	lsrs	r3, r3, #8
 8002040:	b29b      	uxth	r3, r3
 8002042:	b2da      	uxtb	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	3305      	adds	r3, #5
 8002048:	430a      	orrs	r2, r1
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->heading_error_ro & (0xFFU)) );
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	3306      	adds	r3, #6
 8002052:	7819      	ldrb	r1, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002058:	b2da      	uxtb	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	3306      	adds	r3, #6
 800205e:	430a      	orrs	r2, r1
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( ((_m->heading_error_ro >> 8U) & (0xFFU)) );
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	3307      	adds	r3, #7
 8002068:	7819      	ldrb	r1, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800206e:	0a1b      	lsrs	r3, r3, #8
 8002070:	b29b      	uxth	r3, r3
 8002072:	b2da      	uxtb	r2, r3
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	3307      	adds	r3, #7
 8002078:	430a      	orrs	r2, r1
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) logic_1_DLC;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2208      	movs	r2, #8
 8002082:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) logic_1_IDE;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
  return logic_1_CANID;
 800208a:	2321      	movs	r3, #33	; 0x21
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	f3af 8000 	nop.w
 8002098:	b4395810 	.word	0xb4395810
 800209c:	400a36c8 	.word	0x400a36c8
 80020a0:	eb1c432d 	.word	0xeb1c432d
 80020a4:	3f1a36e2 	.word	0x3f1a36e2
 80020a8:	70a3d70a 	.word	0x70a3d70a
 80020ac:	4030623d 	.word	0x4030623d
 80020b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80020b4:	3f40624d 	.word	0x3f40624d
 80020b8:	b4395810 	.word	0xb4395810
 80020bc:	3ffa36c8 	.word	0x3ffa36c8
 80020c0:	eb1c432d 	.word	0xeb1c432d
 80020c4:	3f0a36e2 	.word	0x3f0a36e2

080020c8 <Pack_logic_2_jlb>:
}

#else

uint32_t Pack_logic_2_jlb(logic_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
 80020d4:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(logic_2_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 80020d6:	2300      	movs	r3, #0
 80020d8:	75fb      	strb	r3, [r7, #23]
 80020da:	e007      	b.n	80020ec <Pack_logic_2_jlb+0x24>
 80020dc:	7dfb      	ldrb	r3, [r7, #23]
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	75fa      	strb	r2, [r7, #23]
 80020e2:	461a      	mov	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4413      	add	r3, r2
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]
 80020ec:	7dfb      	ldrb	r3, [r7, #23]
 80020ee:	2b07      	cmp	r3, #7
 80020f0:	d9f4      	bls.n	80020dc <Pack_logic_2_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->distance_traveled_ro = (uint16_t) JLB_distance_traveled_ro_toS(_m->distance_traveled_phys);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80020f8:	a335      	add	r3, pc, #212	; (adr r3, 80021d0 <Pack_logic_2_jlb+0x108>)
 80020fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fe:	f7fe fb97 	bl	8000830 <__aeabi_ddiv>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4610      	mov	r0, r2
 8002108:	4619      	mov	r1, r3
 800210a:	f7fe fd3f 	bl	8000b8c <__aeabi_d2uiz>
 800210e:	4603      	mov	r3, r0
 8002110:	b29a      	uxth	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	80da      	strh	r2, [r3, #6]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->direction & (0xFFU)) );
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	781a      	ldrb	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	4313      	orrs	r3, r2
 8002120:	b2da      	uxtb	r2, r3
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( (_m->mission & (0xFFU)) );
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	3301      	adds	r3, #1
 800212a:	7819      	ldrb	r1, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	785a      	ldrb	r2, [r3, #1]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	3301      	adds	r3, #1
 8002134:	430a      	orrs	r2, r1
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->fast_state & (0xFFU)) );
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	3302      	adds	r3, #2
 800213e:	7819      	ldrb	r1, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	789a      	ldrb	r2, [r3, #2]
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	3302      	adds	r3, #2
 8002148:	430a      	orrs	r2, r1
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( (_m->labyrinth_state & (0xFFU)) );
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	3303      	adds	r3, #3
 8002152:	7819      	ldrb	r1, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	78da      	ldrb	r2, [r3, #3]
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	3303      	adds	r3, #3
 800215c:	430a      	orrs	r2, r1
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->next_node & (0xFFU)) );
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	3304      	adds	r3, #4
 8002166:	7819      	ldrb	r1, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	791a      	ldrb	r2, [r3, #4]
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	3304      	adds	r3, #4
 8002170:	430a      	orrs	r2, r1
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( (_m->previous_node & (0xFFU)) );
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	3305      	adds	r3, #5
 800217a:	7819      	ldrb	r1, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	795a      	ldrb	r2, [r3, #5]
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	3305      	adds	r3, #5
 8002184:	430a      	orrs	r2, r1
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->distance_traveled_ro & (0xFFU)) );
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	3306      	adds	r3, #6
 800218e:	7819      	ldrb	r1, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	88db      	ldrh	r3, [r3, #6]
 8002194:	b2da      	uxtb	r2, r3
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	3306      	adds	r3, #6
 800219a:	430a      	orrs	r2, r1
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( ((_m->distance_traveled_ro >> 8U) & (0xFFU)) );
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	3307      	adds	r3, #7
 80021a4:	7819      	ldrb	r1, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	88db      	ldrh	r3, [r3, #6]
 80021aa:	0a1b      	lsrs	r3, r3, #8
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	3307      	adds	r3, #7
 80021b4:	430a      	orrs	r2, r1
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) logic_2_DLC;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2208      	movs	r2, #8
 80021be:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) logic_2_IDE;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
  return logic_2_CANID;
 80021c6:	2322      	movs	r3, #34	; 0x22
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	47ae147b 	.word	0x47ae147b
 80021d4:	3f847ae1 	.word	0x3f847ae1

080021d8 <Pack_logic_3_jlb>:
}

#else

uint32_t Pack_logic_3_jlb(logic_3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
 80021e4:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(logic_3_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 80021e6:	2300      	movs	r3, #0
 80021e8:	75fb      	strb	r3, [r7, #23]
 80021ea:	e007      	b.n	80021fc <Pack_logic_3_jlb+0x24>
 80021ec:	7dfb      	ldrb	r3, [r7, #23]
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	75fa      	strb	r2, [r7, #23]
 80021f2:	461a      	mov	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	4413      	add	r3, r2
 80021f8:	2200      	movs	r2, #0
 80021fa:	701a      	strb	r2, [r3, #0]
 80021fc:	7dfb      	ldrb	r3, [r7, #23]
 80021fe:	2b07      	cmp	r3, #7
 8002200:	d9f4      	bls.n	80021ec <Pack_logic_3_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->ang_error_norm_ro = (uint8_t) JLB_ang_error_norm_ro_toS(_m->ang_error_norm_phys);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002208:	a35d      	add	r3, pc, #372	; (adr r3, 8002380 <Pack_logic_3_jlb+0x1a8>)
 800220a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220e:	f7fe fb0f 	bl	8000830 <__aeabi_ddiv>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4610      	mov	r0, r2
 8002218:	4619      	mov	r1, r3
 800221a:	f7fe fcb7 	bl	8000b8c <__aeabi_d2uiz>
 800221e:	4603      	mov	r3, r0
 8002220:	b2da      	uxtb	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	701a      	strb	r2, [r3, #0]
  _m->dist_error_norm_ro = (uint8_t) JLB_dist_error_norm_ro_toS(_m->dist_error_norm_phys);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800222c:	a354      	add	r3, pc, #336	; (adr r3, 8002380 <Pack_logic_3_jlb+0x1a8>)
 800222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002232:	f7fe fafd 	bl	8000830 <__aeabi_ddiv>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	4610      	mov	r0, r2
 800223c:	4619      	mov	r1, r3
 800223e:	f7fe fca5 	bl	8000b8c <__aeabi_d2uiz>
 8002242:	4603      	mov	r3, r0
 8002244:	b2da      	uxtb	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	741a      	strb	r2, [r3, #16]
  _m->line_position_front_ro = (uint16_t) JLB_line_position_front_ro_toS(_m->line_position_front_phys);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002250:	a34d      	add	r3, pc, #308	; (adr r3, 8002388 <Pack_logic_3_jlb+0x1b0>)
 8002252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002256:	f7fe f80b 	bl	8000270 <__adddf3>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	a34b      	add	r3, pc, #300	; (adr r3, 8002390 <Pack_logic_3_jlb+0x1b8>)
 8002264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002268:	f7fe fae2 	bl	8000830 <__aeabi_ddiv>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4610      	mov	r0, r2
 8002272:	4619      	mov	r1, r3
 8002274:	f7fe fc8a 	bl	8000b8c <__aeabi_d2uiz>
 8002278:	4603      	mov	r3, r0
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	841a      	strh	r2, [r3, #32]
  _m->line_position_rear_ro = (uint16_t) JLB_line_position_rear_ro_toS(_m->line_position_rear_phys);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002286:	a340      	add	r3, pc, #256	; (adr r3, 8002388 <Pack_logic_3_jlb+0x1b0>)
 8002288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228c:	f7fd fff0 	bl	8000270 <__adddf3>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4610      	mov	r0, r2
 8002296:	4619      	mov	r1, r3
 8002298:	a33d      	add	r3, pc, #244	; (adr r3, 8002390 <Pack_logic_3_jlb+0x1b8>)
 800229a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229e:	f7fe fac7 	bl	8000830 <__aeabi_ddiv>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4610      	mov	r0, r2
 80022a8:	4619      	mov	r1, r3
 80022aa:	f7fe fc6f 	bl	8000b8c <__aeabi_d2uiz>
 80022ae:	4603      	mov	r3, r0
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	861a      	strh	r2, [r3, #48]	; 0x30
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->ang_error_norm_ro & (0xFFU)) );
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	781a      	ldrb	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	4313      	orrs	r3, r2
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( (_m->dist_error_norm_ro & (0xFFU)) );
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	3301      	adds	r3, #1
 80022ca:	7819      	ldrb	r1, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	7c1a      	ldrb	r2, [r3, #16]
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	3301      	adds	r3, #1
 80022d4:	430a      	orrs	r2, r1
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->line_position_front_ro & (0xFFU)) );
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	3302      	adds	r3, #2
 80022de:	7819      	ldrb	r1, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8c1b      	ldrh	r3, [r3, #32]
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	3302      	adds	r3, #2
 80022ea:	430a      	orrs	r2, r1
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->line_position_front_ro >> 8U) & (0xFFU)) );
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	3303      	adds	r3, #3
 80022f4:	7819      	ldrb	r1, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8c1b      	ldrh	r3, [r3, #32]
 80022fa:	0a1b      	lsrs	r3, r3, #8
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	3303      	adds	r3, #3
 8002304:	430a      	orrs	r2, r1
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->line_position_rear_ro & (0xFFU)) );
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	3304      	adds	r3, #4
 800230e:	7819      	ldrb	r1, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002314:	b2da      	uxtb	r2, r3
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	3304      	adds	r3, #4
 800231a:	430a      	orrs	r2, r1
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->line_position_rear_ro >> 8U) & (0xFFU)) );
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	3305      	adds	r3, #5
 8002324:	7819      	ldrb	r1, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800232a:	0a1b      	lsrs	r3, r3, #8
 800232c:	b29b      	uxth	r3, r3
 800232e:	b2da      	uxtb	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	3305      	adds	r3, #5
 8002334:	430a      	orrs	r2, r1
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->at_cross_section & (0x01U)) | ((_m->under_gate & (0x01U)) << 1U) );
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	3306      	adds	r3, #6
 800233e:	7819      	ldrb	r1, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	b2da      	uxtb	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	b2db      	uxtb	r3, r3
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	b2db      	uxtb	r3, r3
 800235c:	4313      	orrs	r3, r2
 800235e:	b2da      	uxtb	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	3306      	adds	r3, #6
 8002364:	430a      	orrs	r2, r1
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) logic_3_DLC;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2208      	movs	r2, #8
 800236e:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) logic_3_IDE;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
  return logic_3_CANID;
 8002376:	2323      	movs	r3, #35	; 0x23
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	d2f1a9fc 	.word	0xd2f1a9fc
 8002384:	3f70624d 	.word	0x3f70624d
 8002388:	70a3d70a 	.word	0x70a3d70a
 800238c:	4030623d 	.word	0x4030623d
 8002390:	d2f1a9fc 	.word	0xd2f1a9fc
 8002394:	3f40624d 	.word	0x3f40624d

08002398 <HAL_ADC_ConvCpltCallback>:
uint32_t adc_values_raw[8];
analog_signals_s adc_values = {0u};
uint8_t channel_idx = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
	adc_values.motor_batt_voltage_raw = adc_values_raw[0];
 80023a0:	4b16      	ldr	r3, [pc, #88]	; (80023fc <HAL_ADC_ConvCpltCallback+0x64>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	4b16      	ldr	r3, [pc, #88]	; (8002400 <HAL_ADC_ConvCpltCallback+0x68>)
 80023a8:	801a      	strh	r2, [r3, #0]
	adc_values.motor_curr_raw = adc_values_raw[1];
 80023aa:	4b14      	ldr	r3, [pc, #80]	; (80023fc <HAL_ADC_ConvCpltCallback+0x64>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	4b13      	ldr	r3, [pc, #76]	; (8002400 <HAL_ADC_ConvCpltCallback+0x68>)
 80023b2:	805a      	strh	r2, [r3, #2]
	adc_values.vbus_raw = adc_values_raw[2];
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <HAL_ADC_ConvCpltCallback+0x64>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	4b11      	ldr	r3, [pc, #68]	; (8002400 <HAL_ADC_ConvCpltCallback+0x68>)
 80023bc:	809a      	strh	r2, [r3, #4]
	adc_values.distance_short2_raw = adc_values_raw[5];
 80023be:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <HAL_ADC_ConvCpltCallback+0x64>)
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <HAL_ADC_ConvCpltCallback+0x68>)
 80023c6:	80da      	strh	r2, [r3, #6]
	adc_values.distance_short1_raw = adc_values_raw[3];
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <HAL_ADC_ConvCpltCallback+0x64>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <HAL_ADC_ConvCpltCallback+0x68>)
 80023d0:	811a      	strh	r2, [r3, #8]
	adc_values.distance_long1_raw = adc_values_raw[4];
 80023d2:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <HAL_ADC_ConvCpltCallback+0x64>)
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	4b09      	ldr	r3, [pc, #36]	; (8002400 <HAL_ADC_ConvCpltCallback+0x68>)
 80023da:	815a      	strh	r2, [r3, #10]
	adc_values.lv_batt_voltage_raw = adc_values_raw[6];
 80023dc:	4b07      	ldr	r3, [pc, #28]	; (80023fc <HAL_ADC_ConvCpltCallback+0x64>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	4b07      	ldr	r3, [pc, #28]	; (8002400 <HAL_ADC_ConvCpltCallback+0x68>)
 80023e4:	819a      	strh	r2, [r3, #12]
	adc_values.distance_long2_raw = adc_values_raw[7];
 80023e6:	4b05      	ldr	r3, [pc, #20]	; (80023fc <HAL_ADC_ConvCpltCallback+0x64>)
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	4b04      	ldr	r3, [pc, #16]	; (8002400 <HAL_ADC_ConvCpltCallback+0x68>)
 80023ee:	81da      	strh	r2, [r3, #14]

	//vTaskResume(static_cast<TaskHandle_t>(mainTaskHandle));
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	2000011c 	.word	0x2000011c
 8002400:	2000013c 	.word	0x2000013c

08002404 <_Z18DistanceSensorTaskv>:
extern analog_signals_s adc_values;
DistanceSensorData_s distance_sensor = {0u};


void DistanceSensorTask()
{
 8002404:	b5b0      	push	{r4, r5, r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
	uint8_t i,j;
	distance_sensor.voltage_long[0] = ((float)(adc_values.distance_long1_raw)) / 4096.0f * 3.3f;
 800240a:	4b91      	ldr	r3, [pc, #580]	; (8002650 <_Z18DistanceSensorTaskv+0x24c>)
 800240c:	895b      	ldrh	r3, [r3, #10]
 800240e:	ee07 3a90 	vmov	s15, r3
 8002412:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002416:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8002654 <_Z18DistanceSensorTaskv+0x250>
 800241a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800241e:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8002658 <_Z18DistanceSensorTaskv+0x254>
 8002422:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002426:	4b8d      	ldr	r3, [pc, #564]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 8002428:	edc3 7a00 	vstr	s15, [r3]
	distance_sensor.voltage_long[1] = ((float)(adc_values.distance_long2_raw)) / 4096.0f * 3.3f;
 800242c:	4b88      	ldr	r3, [pc, #544]	; (8002650 <_Z18DistanceSensorTaskv+0x24c>)
 800242e:	89db      	ldrh	r3, [r3, #14]
 8002430:	ee07 3a90 	vmov	s15, r3
 8002434:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002438:	eddf 6a86 	vldr	s13, [pc, #536]	; 8002654 <_Z18DistanceSensorTaskv+0x250>
 800243c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002440:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8002658 <_Z18DistanceSensorTaskv+0x254>
 8002444:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002448:	4b84      	ldr	r3, [pc, #528]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 800244a:	edc3 7a01 	vstr	s15, [r3, #4]
	distance_sensor.voltage_short[0] = ((float)(adc_values.distance_short1_raw)) / 4096.0f * 3.3f;
 800244e:	4b80      	ldr	r3, [pc, #512]	; (8002650 <_Z18DistanceSensorTaskv+0x24c>)
 8002450:	891b      	ldrh	r3, [r3, #8]
 8002452:	ee07 3a90 	vmov	s15, r3
 8002456:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800245a:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8002654 <_Z18DistanceSensorTaskv+0x250>
 800245e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002462:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8002658 <_Z18DistanceSensorTaskv+0x254>
 8002466:	ee67 7a87 	vmul.f32	s15, s15, s14
 800246a:	4b7c      	ldr	r3, [pc, #496]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 800246c:	edc3 7a02 	vstr	s15, [r3, #8]
	distance_sensor.voltage_short[1] = ((float)(adc_values.distance_short2_raw)) / 4096.0f * 3.3f;
 8002470:	4b77      	ldr	r3, [pc, #476]	; (8002650 <_Z18DistanceSensorTaskv+0x24c>)
 8002472:	88db      	ldrh	r3, [r3, #6]
 8002474:	ee07 3a90 	vmov	s15, r3
 8002478:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800247c:	eddf 6a75 	vldr	s13, [pc, #468]	; 8002654 <_Z18DistanceSensorTaskv+0x250>
 8002480:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002484:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8002658 <_Z18DistanceSensorTaskv+0x254>
 8002488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800248c:	4b73      	ldr	r3, [pc, #460]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 800248e:	edc3 7a03 	vstr	s15, [r3, #12]

	for(i = 0; i < 1; ++i)
 8002492:	2300      	movs	r3, #0
 8002494:	71fb      	strb	r3, [r7, #7]
 8002496:	e0a1      	b.n	80025dc <_Z18DistanceSensorTaskv+0x1d8>
	{
		float x = distance_sensor.voltage_long[i];
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	4a70      	ldr	r2, [pc, #448]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	603b      	str	r3, [r7, #0]
		distance_sensor.distance_long[i] = 0.0f;
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	4a6d      	ldr	r2, [pc, #436]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 80024a8:	3304      	adds	r3, #4
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
		for(j = 0; j < 6; ++j)
 80024b4:	2300      	movs	r3, #0
 80024b6:	71bb      	strb	r3, [r7, #6]
 80024b8:	e03a      	b.n	8002530 <_Z18DistanceSensorTaskv+0x12c>
		{
			distance_sensor.distance_long[i] += pow(x,5-j) * long_poly_coeff[j];
 80024ba:	79bb      	ldrb	r3, [r7, #6]
 80024bc:	f1c3 0305 	rsb	r3, r3, #5
 80024c0:	4618      	mov	r0, r3
 80024c2:	ed97 0a00 	vldr	s0, [r7]
 80024c6:	f000 f8d1 	bl	800266c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80024ca:	ec55 4b10 	vmov	r4, r5, d0
 80024ce:	79bb      	ldrb	r3, [r7, #6]
 80024d0:	4a63      	ldr	r2, [pc, #396]	; (8002660 <_Z18DistanceSensorTaskv+0x25c>)
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe f827 	bl	800052c <__aeabi_f2d>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4620      	mov	r0, r4
 80024e4:	4629      	mov	r1, r5
 80024e6:	f7fe f879 	bl	80005dc <__aeabi_dmul>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4614      	mov	r4, r2
 80024f0:	461d      	mov	r5, r3
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	4a59      	ldr	r2, [pc, #356]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 80024f6:	3304      	adds	r3, #4
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe f814 	bl	800052c <__aeabi_f2d>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4620      	mov	r0, r4
 800250a:	4629      	mov	r1, r5
 800250c:	f7fd feb0 	bl	8000270 <__adddf3>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	79fc      	ldrb	r4, [r7, #7]
 8002516:	4610      	mov	r0, r2
 8002518:	4619      	mov	r1, r3
 800251a:	f7fe fb57 	bl	8000bcc <__aeabi_d2f>
 800251e:	4602      	mov	r2, r0
 8002520:	494e      	ldr	r1, [pc, #312]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 8002522:	1d23      	adds	r3, r4, #4
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	601a      	str	r2, [r3, #0]
		for(j = 0; j < 6; ++j)
 800252a:	79bb      	ldrb	r3, [r7, #6]
 800252c:	3301      	adds	r3, #1
 800252e:	71bb      	strb	r3, [r7, #6]
 8002530:	79bb      	ldrb	r3, [r7, #6]
 8002532:	2b05      	cmp	r3, #5
 8002534:	d9c1      	bls.n	80024ba <_Z18DistanceSensorTaskv+0xb6>
		}

		distance_sensor.distance_short[i] = 0.0f;
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	4a48      	ldr	r2, [pc, #288]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 800253a:	3306      	adds	r3, #6
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
		x = distance_sensor.voltage_short[i];
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	4a44      	ldr	r2, [pc, #272]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 800254a:	3302      	adds	r3, #2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	603b      	str	r3, [r7, #0]
		for(j = 0; j < 6; ++j)
 8002554:	2300      	movs	r3, #0
 8002556:	71bb      	strb	r3, [r7, #6]
 8002558:	e03a      	b.n	80025d0 <_Z18DistanceSensorTaskv+0x1cc>
		{
			distance_sensor.distance_short[i] += pow(x,5-j) * short_poly_coeff[j];
 800255a:	79bb      	ldrb	r3, [r7, #6]
 800255c:	f1c3 0305 	rsb	r3, r3, #5
 8002560:	4618      	mov	r0, r3
 8002562:	ed97 0a00 	vldr	s0, [r7]
 8002566:	f000 f881 	bl	800266c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800256a:	ec55 4b10 	vmov	r4, r5, d0
 800256e:	79bb      	ldrb	r3, [r7, #6]
 8002570:	4a3c      	ldr	r2, [pc, #240]	; (8002664 <_Z18DistanceSensorTaskv+0x260>)
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7fd ffd7 	bl	800052c <__aeabi_f2d>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4620      	mov	r0, r4
 8002584:	4629      	mov	r1, r5
 8002586:	f7fe f829 	bl	80005dc <__aeabi_dmul>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4614      	mov	r4, r2
 8002590:	461d      	mov	r5, r3
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	4a31      	ldr	r2, [pc, #196]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 8002596:	3306      	adds	r3, #6
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fd ffc4 	bl	800052c <__aeabi_f2d>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4620      	mov	r0, r4
 80025aa:	4629      	mov	r1, r5
 80025ac:	f7fd fe60 	bl	8000270 <__adddf3>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	79fc      	ldrb	r4, [r7, #7]
 80025b6:	4610      	mov	r0, r2
 80025b8:	4619      	mov	r1, r3
 80025ba:	f7fe fb07 	bl	8000bcc <__aeabi_d2f>
 80025be:	4602      	mov	r2, r0
 80025c0:	4926      	ldr	r1, [pc, #152]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 80025c2:	1da3      	adds	r3, r4, #6
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	601a      	str	r2, [r3, #0]
		for(j = 0; j < 6; ++j)
 80025ca:	79bb      	ldrb	r3, [r7, #6]
 80025cc:	3301      	adds	r3, #1
 80025ce:	71bb      	strb	r3, [r7, #6]
 80025d0:	79bb      	ldrb	r3, [r7, #6]
 80025d2:	2b05      	cmp	r3, #5
 80025d4:	d9c1      	bls.n	800255a <_Z18DistanceSensorTaskv+0x156>
	for(i = 0; i < 1; ++i)
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	3301      	adds	r3, #1
 80025da:	71fb      	strb	r3, [r7, #7]
 80025dc:	79fb      	ldrb	r3, [r7, #7]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f43f af5a 	beq.w	8002498 <_Z18DistanceSensorTaskv+0x94>
		}
	}

	if((distance_sensor.distance_short[0] >= 20.0f) || (distance_sensor.distance_short[1] >= 20.0f))
 80025e4:	4b1d      	ldr	r3, [pc, #116]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 80025e6:	edd3 7a06 	vldr	s15, [r3, #24]
 80025ea:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80025ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f6:	da09      	bge.n	800260c <_Z18DistanceSensorTaskv+0x208>
 80025f8:	4b18      	ldr	r3, [pc, #96]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 80025fa:	edd3 7a07 	vldr	s15, [r3, #28]
 80025fe:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002602:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260a:	db04      	blt.n	8002616 <_Z18DistanceSensorTaskv+0x212>
	{
		//distance_sensor.distance = (distance_sensor.distance_long[0] + distance_sensor.distance_long[1]) / 2.0f;
		distance_sensor.distance = distance_sensor.distance_long[0];
 800260c:	4b13      	ldr	r3, [pc, #76]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	4a12      	ldr	r2, [pc, #72]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 8002612:	6213      	str	r3, [r2, #32]
 8002614:	e003      	b.n	800261e <_Z18DistanceSensorTaskv+0x21a>
	}
	else
	{
		//distance_sensor.distance = (distance_sensor.distance_short[0] + distance_sensor.distance_short[1]) / 2.0f;
		distance_sensor.distance = distance_sensor.distance_short[0];
 8002616:	4b11      	ldr	r3, [pc, #68]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	4a10      	ldr	r2, [pc, #64]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 800261c:	6213      	str	r3, [r2, #32]
	}

	distance_sensor.distance -= 7.0f;
 800261e:	4b0f      	ldr	r3, [pc, #60]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 8002620:	edd3 7a08 	vldr	s15, [r3, #32]
 8002624:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8002628:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 800262e:	edc3 7a08 	vstr	s15, [r3, #32]
	distance_sensor.distance /= 100.0f;
 8002632:	4b0a      	ldr	r3, [pc, #40]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 8002634:	ed93 7a08 	vldr	s14, [r3, #32]
 8002638:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8002668 <_Z18DistanceSensorTaskv+0x264>
 800263c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 8002642:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bdb0      	pop	{r4, r5, r7, pc}
 800264e:	bf00      	nop
 8002650:	2000013c 	.word	0x2000013c
 8002654:	45800000 	.word	0x45800000
 8002658:	40533333 	.word	0x40533333
 800265c:	2000014c 	.word	0x2000014c
 8002660:	20000018 	.word	0x20000018
 8002664:	20000000 	.word	0x20000000
 8002668:	42c80000 	.word	0x42c80000

0800266c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 800266c:	b5b0      	push	{r4, r5, r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	ed87 0a01 	vstr	s0, [r7, #4]
 8002676:	6038      	str	r0, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7fd ff57 	bl	800052c <__aeabi_f2d>
 800267e:	4604      	mov	r4, r0
 8002680:	460d      	mov	r5, r1
 8002682:	6838      	ldr	r0, [r7, #0]
 8002684:	f7fd ff40 	bl	8000508 <__aeabi_i2d>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	ec43 2b11 	vmov	d1, r2, r3
 8002690:	ec45 4b10 	vmov	d0, r4, r5
 8002694:	f023 fa08 	bl	8025aa8 <pow>
 8002698:	eeb0 7a40 	vmov.f32	s14, s0
 800269c:	eef0 7a60 	vmov.f32	s15, s1
    }
 80026a0:	eeb0 0a47 	vmov.f32	s0, s14
 80026a4:	eef0 0a67 	vmov.f32	s1, s15
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080026b0 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef>:

encoder_instance enc_instance_mot;
extern TIM_HandleTypeDef htim3;

void update_encoder(encoder_instance *encoder_value, TIM_HandleTypeDef *htim)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
	uint32_t temp_counter = __HAL_TIM_GET_COUNTER(htim);
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	60fb      	str	r3, [r7, #12]
	static uint8_t first_time = 0;
	if (!first_time)
 80026c2:	4b38      	ldr	r3, [pc, #224]	; (80027a4 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xf4>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d106      	bne.n	80026d8 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x28>
	{
		encoder_value->velocity = 0;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	801a      	strh	r2, [r3, #0]
		first_time = 1;
 80026d0:	4b34      	ldr	r3, [pc, #208]	; (80027a4 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xf4>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
 80026d6:	e05c      	b.n	8002792 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
	}
	else
	{
		if (temp_counter == encoder_value->last_counter_value)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d103      	bne.n	80026ea <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x3a>
		{
			encoder_value->velocity = 0;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	801a      	strh	r2, [r3, #0]
 80026e8:	e053      	b.n	8002792 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
		}
		else if (temp_counter > encoder_value->last_counter_value)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d927      	bls.n	8002744 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x94>
		{
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	2b10      	cmp	r3, #16
 8002700:	bf0c      	ite	eq
 8002702:	2301      	moveq	r3, #1
 8002704:	2300      	movne	r3, #0
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	d010      	beq.n	800272e <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x7e>
			{
				encoder_value->velocity = -encoder_value->last_counter_value - (__HAL_TIM_GET_AUTORELOAD(htim) - temp_counter);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	b29a      	uxth	r2, r3
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002716:	b29b      	uxth	r3, r3
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	b29a      	uxth	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	b29b      	uxth	r3, r3
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	b29b      	uxth	r3, r3
 8002726:	b21a      	sxth	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	801a      	strh	r2, [r3, #0]
 800272c:	e031      	b.n	8002792 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
			}
			else
			{
				encoder_value->velocity = temp_counter - encoder_value->last_counter_value;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	b29a      	uxth	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	b29b      	uxth	r3, r3
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	b29b      	uxth	r3, r3
 800273c:	b21a      	sxth	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	801a      	strh	r2, [r3, #0]
 8002742:	e026      	b.n	8002792 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
			}
		}
		else
		{
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0310 	and.w	r3, r3, #16
 800274e:	2b10      	cmp	r3, #16
 8002750:	bf0c      	ite	eq
 8002752:	2301      	moveq	r3, #1
 8002754:	2300      	movne	r3, #0
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00a      	beq.n	8002772 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xc2>
			{
				encoder_value->velocity = temp_counter - encoder_value->last_counter_value;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	b29a      	uxth	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	b29b      	uxth	r3, r3
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	b29b      	uxth	r3, r3
 800276a:	b21a      	sxth	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	801a      	strh	r2, [r3, #0]
 8002770:	e00f      	b.n	8002792 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
			}
			else
			{
				encoder_value->velocity = temp_counter + (__HAL_TIM_GET_AUTORELOAD(htim) - encoder_value->last_counter_value);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	b29a      	uxth	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	b29b      	uxth	r3, r3
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	b29b      	uxth	r3, r3
 8002788:	4413      	add	r3, r2
 800278a:	b29b      	uxth	r3, r3
 800278c:	b21a      	sxth	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	//encoder_value->rpm = ((float) (encoder_value->velocity) / ENCODER_TASK_TIMESTEP) / 2 * 1000.0f * AB_ROT_PER_PULSE * GEAR_RATIO * 60;
	encoder_value->last_counter_value = temp_counter;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	605a      	str	r2, [r3, #4]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	2000017c 	.word	0x2000017c

080027a8 <_Z12Encoder_TaskPv>:

void Encoder_Task(void * argument)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
	// measure velocity, position
	int16_t velocity_values[5] = {0};
 80027b0:	f107 030c 	add.w	r3, r7, #12
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	811a      	strh	r2, [r3, #8]
	uint8_t index = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	75fb      	strb	r3, [r7, #23]
	uint8_t i;

	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 80027c0:	f021 fdf0 	bl	80243a4 <xTaskGetTickCount>
 80027c4:	4603      	mov	r3, r0
 80027c6:	60bb      	str	r3, [r7, #8]
	for(;;)
	{
		update_encoder(&enc_instance_mot, &htim3);
 80027c8:	491e      	ldr	r1, [pc, #120]	; (8002844 <_Z12Encoder_TaskPv+0x9c>)
 80027ca:	481f      	ldr	r0, [pc, #124]	; (8002848 <_Z12Encoder_TaskPv+0xa0>)
 80027cc:	f7ff ff70 	bl	80026b0 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef>
		velocity_values[index++] = enc_instance_mot.velocity;
 80027d0:	4b1d      	ldr	r3, [pc, #116]	; (8002848 <_Z12Encoder_TaskPv+0xa0>)
 80027d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80027d6:	7dfb      	ldrb	r3, [r7, #23]
 80027d8:	1c59      	adds	r1, r3, #1
 80027da:	75f9      	strb	r1, [r7, #23]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	3318      	adds	r3, #24
 80027e0:	443b      	add	r3, r7
 80027e2:	f823 2c0c 	strh.w	r2, [r3, #-12]

		if(index == 5)
 80027e6:	7dfb      	ldrb	r3, [r7, #23]
 80027e8:	2b05      	cmp	r3, #5
 80027ea:	d101      	bne.n	80027f0 <_Z12Encoder_TaskPv+0x48>
		{
			index = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	75fb      	strb	r3, [r7, #23]
		}

		enc_instance_mot.rpm = 0.0f;
 80027f0:	4b15      	ldr	r3, [pc, #84]	; (8002848 <_Z12Encoder_TaskPv+0xa0>)
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	609a      	str	r2, [r3, #8]
		for(i = 0 ; i < 5; ++i)
 80027f8:	2300      	movs	r3, #0
 80027fa:	75bb      	strb	r3, [r7, #22]
 80027fc:	e018      	b.n	8002830 <_Z12Encoder_TaskPv+0x88>
		{
			enc_instance_mot.rpm += ((float)(velocity_values[i])) / 5.0f;
 80027fe:	4b12      	ldr	r3, [pc, #72]	; (8002848 <_Z12Encoder_TaskPv+0xa0>)
 8002800:	ed93 7a02 	vldr	s14, [r3, #8]
 8002804:	7dbb      	ldrb	r3, [r7, #22]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	3318      	adds	r3, #24
 800280a:	443b      	add	r3, r7
 800280c:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8002810:	ee07 3a90 	vmov	s15, r3
 8002814:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002818:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 800281c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002824:	4b08      	ldr	r3, [pc, #32]	; (8002848 <_Z12Encoder_TaskPv+0xa0>)
 8002826:	edc3 7a02 	vstr	s15, [r3, #8]
		for(i = 0 ; i < 5; ++i)
 800282a:	7dbb      	ldrb	r3, [r7, #22]
 800282c:	3301      	adds	r3, #1
 800282e:	75bb      	strb	r3, [r7, #22]
 8002830:	7dbb      	ldrb	r3, [r7, #22]
 8002832:	2b04      	cmp	r3, #4
 8002834:	d9e3      	bls.n	80027fe <_Z12Encoder_TaskPv+0x56>
		}

		vTaskDelayUntil(&xLastWakeTime, 1u);
 8002836:	f107 0308 	add.w	r3, r7, #8
 800283a:	2101      	movs	r1, #1
 800283c:	4618      	mov	r0, r3
 800283e:	f021 fc3d 	bl	80240bc <vTaskDelayUntil>
		update_encoder(&enc_instance_mot, &htim3);
 8002842:	e7c1      	b.n	80027c8 <_Z12Encoder_TaskPv+0x20>
 8002844:	20000b64 	.word	0x20000b64
 8002848:	20000170 	.word	0x20000170

0800284c <_Z12CalculateRPMv>:
	}
}

float CalculateRPM()
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
	uint8_t i;
	static uint8_t index = 0u;;
	static float rpm_averaging_array[5];
	float averaged_rpm = 0.0f;
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	603b      	str	r3, [r7, #0]
	rpm_averaging_array[index++] = enc_instance_mot.rpm;
 8002858:	4b20      	ldr	r3, [pc, #128]	; (80028dc <_Z12CalculateRPMv+0x90>)
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	4b20      	ldr	r3, [pc, #128]	; (80028e0 <_Z12CalculateRPMv+0x94>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	1c59      	adds	r1, r3, #1
 8002862:	b2c8      	uxtb	r0, r1
 8002864:	491e      	ldr	r1, [pc, #120]	; (80028e0 <_Z12CalculateRPMv+0x94>)
 8002866:	7008      	strb	r0, [r1, #0]
 8002868:	491e      	ldr	r1, [pc, #120]	; (80028e4 <_Z12CalculateRPMv+0x98>)
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	601a      	str	r2, [r3, #0]

	if(index == 5)
 8002870:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <_Z12CalculateRPMv+0x94>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b05      	cmp	r3, #5
 8002876:	d102      	bne.n	800287e <_Z12CalculateRPMv+0x32>
	{
		index = 0;
 8002878:	4b19      	ldr	r3, [pc, #100]	; (80028e0 <_Z12CalculateRPMv+0x94>)
 800287a:	2200      	movs	r2, #0
 800287c:	701a      	strb	r2, [r3, #0]
	}

	averaged_rpm = 0.0f;
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	603b      	str	r3, [r7, #0]
	for(i = 0 ; i < 5; ++i)
 8002884:	2300      	movs	r3, #0
 8002886:	71fb      	strb	r3, [r7, #7]
 8002888:	e012      	b.n	80028b0 <_Z12CalculateRPMv+0x64>
	{
		averaged_rpm += rpm_averaging_array[i] / 5.0f;
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	4a15      	ldr	r2, [pc, #84]	; (80028e4 <_Z12CalculateRPMv+0x98>)
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	ed93 7a00 	vldr	s14, [r3]
 8002896:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800289a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800289e:	ed97 7a00 	vldr	s14, [r7]
 80028a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028a6:	edc7 7a00 	vstr	s15, [r7]
	for(i = 0 ; i < 5; ++i)
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	3301      	adds	r3, #1
 80028ae:	71fb      	strb	r3, [r7, #7]
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d9e9      	bls.n	800288a <_Z12CalculateRPMv+0x3e>
	}

	averaged_rpm *= -1.36f;
 80028b6:	edd7 7a00 	vldr	s15, [r7]
 80028ba:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80028e8 <_Z12CalculateRPMv+0x9c>
 80028be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028c2:	edc7 7a00 	vstr	s15, [r7]

	return averaged_rpm;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	ee07 3a90 	vmov	s15, r3
}
 80028cc:	eeb0 0a67 	vmov.f32	s0, s15
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20000170 	.word	0x20000170
 80028e0:	2000017d 	.word	0x2000017d
 80028e4:	20000180 	.word	0x20000180
 80028e8:	bfae147b 	.word	0xbfae147b

080028ec <_Z15readByteFromIMUh>:
extern I2C_HandleTypeDef hi2c1;
uint8_t IMU_initialized = 0u;
IMU_signals_s imu;

uint8_t readByteFromIMU(uint8_t address)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af02      	add	r7, sp, #8
 80028f2:	4603      	mov	r3, r0
 80028f4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret = 0u;
 80028f6:	2300      	movs	r3, #0
 80028f8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 80028fa:	1dfa      	adds	r2, r7, #7
 80028fc:	2364      	movs	r3, #100	; 0x64
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	2301      	movs	r3, #1
 8002902:	21d6      	movs	r1, #214	; 0xd6
 8002904:	4808      	ldr	r0, [pc, #32]	; (8002928 <_Z15readByteFromIMUh+0x3c>)
 8002906:	f018 fcc3 	bl	801b290 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &ret, 1, 100);
 800290a:	f107 020f 	add.w	r2, r7, #15
 800290e:	2364      	movs	r3, #100	; 0x64
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	2301      	movs	r3, #1
 8002914:	21d7      	movs	r1, #215	; 0xd7
 8002916:	4804      	ldr	r0, [pc, #16]	; (8002928 <_Z15readByteFromIMUh+0x3c>)
 8002918:	f018 fdae 	bl	801b478 <HAL_I2C_Master_Receive>
	return ret;
 800291c:	7bfb      	ldrb	r3, [r7, #15]
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	200007b4 	.word	0x200007b4

0800292c <_Z8IMU_Taskv>:
uint8_t test_data[6] = {0u};

void IMU_Task()
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af02      	add	r7, sp, #8
	if(IMU_initialized == 0u)
 8002932:	4b6f      	ldr	r3, [pc, #444]	; (8002af0 <_Z8IMU_Taskv+0x1c4>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d13f      	bne.n	80029ba <_Z8IMU_Taskv+0x8e>
	{
		uint8_t whoami = 0u;
 800293a:	2300      	movs	r3, #0
 800293c:	72bb      	strb	r3, [r7, #10]
		uint8_t whoami_reg = WHO_AM_I_ADDR;
 800293e:	230f      	movs	r3, #15
 8002940:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &whoami_reg, 1, 100);
 8002942:	f107 0209 	add.w	r2, r7, #9
 8002946:	2364      	movs	r3, #100	; 0x64
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	2301      	movs	r3, #1
 800294c:	21d6      	movs	r1, #214	; 0xd6
 800294e:	4869      	ldr	r0, [pc, #420]	; (8002af4 <_Z8IMU_Taskv+0x1c8>)
 8002950:	f018 fc9e 	bl	801b290 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &whoami, 1, 100);
 8002954:	f107 020a 	add.w	r2, r7, #10
 8002958:	2364      	movs	r3, #100	; 0x64
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	2301      	movs	r3, #1
 800295e:	21d7      	movs	r1, #215	; 0xd7
 8002960:	4864      	ldr	r0, [pc, #400]	; (8002af4 <_Z8IMU_Taskv+0x1c8>)
 8002962:	f018 fd89 	bl	801b478 <HAL_I2C_Master_Receive>
		if(whoami != 0x6A)
 8002966:	7abb      	ldrb	r3, [r7, #10]
 8002968:	2b6a      	cmp	r3, #106	; 0x6a
 800296a:	f040 80bd 	bne.w	8002ae8 <_Z8IMU_Taskv+0x1bc>
		{
			return;
		}

		uint8_t pData[2] = {CTRL1_XL_ADDR, 0x60};
 800296e:	f246 0310 	movw	r3, #24592	; 0x6010
 8002972:	80bb      	strh	r3, [r7, #4]
		//HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);

		pData[0] = CTRL2_G_ADDR;
 8002974:	2311      	movs	r3, #17
 8002976:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);
 8002978:	1d3a      	adds	r2, r7, #4
 800297a:	2364      	movs	r3, #100	; 0x64
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	2302      	movs	r3, #2
 8002980:	21d6      	movs	r1, #214	; 0xd6
 8002982:	485c      	ldr	r0, [pc, #368]	; (8002af4 <_Z8IMU_Taskv+0x1c8>)
 8002984:	f018 fc84 	bl	801b290 <HAL_I2C_Master_Transmit>

		uint8_t ctrl3c = readByteFromIMU(0x12);
 8002988:	2012      	movs	r0, #18
 800298a:	f7ff ffaf 	bl	80028ec <_Z15readByteFromIMUh>
 800298e:	4603      	mov	r3, r0
 8002990:	72fb      	strb	r3, [r7, #11]
		ctrl3c = ctrl3c & (~0x04);
 8002992:	7afb      	ldrb	r3, [r7, #11]
 8002994:	f023 0304 	bic.w	r3, r3, #4
 8002998:	72fb      	strb	r3, [r7, #11]
		pData[0] = 0x12;
 800299a:	2312      	movs	r3, #18
 800299c:	713b      	strb	r3, [r7, #4]
		pData[1] = ctrl3c;
 800299e:	7afb      	ldrb	r3, [r7, #11]
 80029a0:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);
 80029a2:	1d3a      	adds	r2, r7, #4
 80029a4:	2364      	movs	r3, #100	; 0x64
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	2302      	movs	r3, #2
 80029aa:	21d6      	movs	r1, #214	; 0xd6
 80029ac:	4851      	ldr	r0, [pc, #324]	; (8002af4 <_Z8IMU_Taskv+0x1c8>)
 80029ae:	f018 fc6f 	bl	801b290 <HAL_I2C_Master_Transmit>

		IMU_initialized = 1u;
 80029b2:	4b4f      	ldr	r3, [pc, #316]	; (8002af0 <_Z8IMU_Taskv+0x1c4>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	701a      	strb	r2, [r3, #0]
 80029b8:	e097      	b.n	8002aea <_Z8IMU_Taskv+0x1be>
	}
	else
	{
		uint8_t status = 0u;
 80029ba:	2300      	movs	r3, #0
 80029bc:	70fb      	strb	r3, [r7, #3]
		uint8_t status_reg = STATUS_REG;
 80029be:	231e      	movs	r3, #30
 80029c0:	70bb      	strb	r3, [r7, #2]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &status_reg, 1, 100);
 80029c2:	1cba      	adds	r2, r7, #2
 80029c4:	2364      	movs	r3, #100	; 0x64
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	2301      	movs	r3, #1
 80029ca:	21d6      	movs	r1, #214	; 0xd6
 80029cc:	4849      	ldr	r0, [pc, #292]	; (8002af4 <_Z8IMU_Taskv+0x1c8>)
 80029ce:	f018 fc5f 	bl	801b290 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &status, 1, 100);
 80029d2:	1cfa      	adds	r2, r7, #3
 80029d4:	2364      	movs	r3, #100	; 0x64
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	2301      	movs	r3, #1
 80029da:	21d7      	movs	r1, #215	; 0xd7
 80029dc:	4845      	ldr	r0, [pc, #276]	; (8002af4 <_Z8IMU_Taskv+0x1c8>)
 80029de:	f018 fd4b 	bl	801b478 <HAL_I2C_Master_Receive>

		//Accelerometer new data available
		if((status & 0x01) == 1u)
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d053      	beq.n	8002a94 <_Z8IMU_Taskv+0x168>
		{
			uint8_t tmp_low, tmp_high;
			tmp_low = readByteFromIMU(OUTX_L_XL);
 80029ec:	2028      	movs	r0, #40	; 0x28
 80029ee:	f7ff ff7d 	bl	80028ec <_Z15readByteFromIMUh>
 80029f2:	4603      	mov	r3, r0
 80029f4:	73fb      	strb	r3, [r7, #15]
			tmp_high = readByteFromIMU(OUTX_H_XL);
 80029f6:	2029      	movs	r0, #41	; 0x29
 80029f8:	f7ff ff78 	bl	80028ec <_Z15readByteFromIMUh>
 80029fc:	4603      	mov	r3, r0
 80029fe:	73bb      	strb	r3, [r7, #14]
			imu.acc_x = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY;
 8002a00:	7bbb      	ldrb	r3, [r7, #14]
 8002a02:	021b      	lsls	r3, r3, #8
 8002a04:	b21a      	sxth	r2, r3
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	b21b      	sxth	r3, r3
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	b21b      	sxth	r3, r3
 8002a0e:	ee07 3a90 	vmov	s15, r3
 8002a12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a16:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002af8 <_Z8IMU_Taskv+0x1cc>
 8002a1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a1e:	4b37      	ldr	r3, [pc, #220]	; (8002afc <_Z8IMU_Taskv+0x1d0>)
 8002a20:	edc3 7a00 	vstr	s15, [r3]

			tmp_low = readByteFromIMU(OUTY_L_XL);
 8002a24:	202a      	movs	r0, #42	; 0x2a
 8002a26:	f7ff ff61 	bl	80028ec <_Z15readByteFromIMUh>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	73fb      	strb	r3, [r7, #15]
			tmp_high = readByteFromIMU(OUTY_L_XL);
 8002a2e:	202a      	movs	r0, #42	; 0x2a
 8002a30:	f7ff ff5c 	bl	80028ec <_Z15readByteFromIMUh>
 8002a34:	4603      	mov	r3, r0
 8002a36:	73bb      	strb	r3, [r7, #14]
			imu.acc_y = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY;
 8002a38:	7bbb      	ldrb	r3, [r7, #14]
 8002a3a:	021b      	lsls	r3, r3, #8
 8002a3c:	b21a      	sxth	r2, r3
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
 8002a40:	b21b      	sxth	r3, r3
 8002a42:	4313      	orrs	r3, r2
 8002a44:	b21b      	sxth	r3, r3
 8002a46:	ee07 3a90 	vmov	s15, r3
 8002a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a4e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002af8 <_Z8IMU_Taskv+0x1cc>
 8002a52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a56:	4b29      	ldr	r3, [pc, #164]	; (8002afc <_Z8IMU_Taskv+0x1d0>)
 8002a58:	edc3 7a01 	vstr	s15, [r3, #4]

			tmp_low = readByteFromIMU(OUTZ_L_XL);
 8002a5c:	202c      	movs	r0, #44	; 0x2c
 8002a5e:	f7ff ff45 	bl	80028ec <_Z15readByteFromIMUh>
 8002a62:	4603      	mov	r3, r0
 8002a64:	73fb      	strb	r3, [r7, #15]
			tmp_high = readByteFromIMU(OUTZ_L_XL);
 8002a66:	202c      	movs	r0, #44	; 0x2c
 8002a68:	f7ff ff40 	bl	80028ec <_Z15readByteFromIMUh>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	73bb      	strb	r3, [r7, #14]
			imu.acc_z = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY;
 8002a70:	7bbb      	ldrb	r3, [r7, #14]
 8002a72:	021b      	lsls	r3, r3, #8
 8002a74:	b21a      	sxth	r2, r3
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
 8002a78:	b21b      	sxth	r3, r3
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	b21b      	sxth	r3, r3
 8002a7e:	ee07 3a90 	vmov	s15, r3
 8002a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a86:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002af8 <_Z8IMU_Taskv+0x1cc>
 8002a8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a8e:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <_Z8IMU_Taskv+0x1d0>)
 8002a90:	edc3 7a02 	vstr	s15, [r3, #8]

		}
		//Gyroscope new data available
		if((status & 0x02) == 2u)
 8002a94:	78fb      	ldrb	r3, [r7, #3]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d025      	beq.n	8002aea <_Z8IMU_Taskv+0x1be>
		{
			uint8_t tmp_low, tmp_high;

			tmp_low = readByteFromIMU(OUTZ_L_G);
 8002a9e:	2026      	movs	r0, #38	; 0x26
 8002aa0:	f7ff ff24 	bl	80028ec <_Z15readByteFromIMUh>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	737b      	strb	r3, [r7, #13]
			tmp_high = readByteFromIMU(OUTZ_H_G);
 8002aa8:	2027      	movs	r0, #39	; 0x27
 8002aaa:	f7ff ff1f 	bl	80028ec <_Z15readByteFromIMUh>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	733b      	strb	r3, [r7, #12]
			imu.yaw = ((int16_t)((tmp_high << 8u)| tmp_low)) * G_SENSITIVITY / 1000.0f * 0.017453f;
 8002ab2:	7b3b      	ldrb	r3, [r7, #12]
 8002ab4:	021b      	lsls	r3, r3, #8
 8002ab6:	b21a      	sxth	r2, r3
 8002ab8:	7b7b      	ldrb	r3, [r7, #13]
 8002aba:	b21b      	sxth	r3, r3
 8002abc:	4313      	orrs	r3, r2
 8002abe:	b21b      	sxth	r3, r3
 8002ac0:	ee07 3a90 	vmov	s15, r3
 8002ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002b00 <_Z8IMU_Taskv+0x1d4>
 8002acc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ad0:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002b04 <_Z8IMU_Taskv+0x1d8>
 8002ad4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ad8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002b08 <_Z8IMU_Taskv+0x1dc>
 8002adc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ae0:	4b06      	ldr	r3, [pc, #24]	; (8002afc <_Z8IMU_Taskv+0x1d0>)
 8002ae2:	edc3 7a03 	vstr	s15, [r3, #12]
 8002ae6:	e000      	b.n	8002aea <_Z8IMU_Taskv+0x1be>
			return;
 8002ae8:	bf00      	nop
			//tmp_high = readByteFromIMU(OUTY_H_G);
			//imu.pitch = ((int16_t)((tmp_high << 8u)| tmp_low)) * G_SENSITIVITY;

		}
	}
}
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20000194 	.word	0x20000194
 8002af4:	200007b4 	.word	0x200007b4
 8002af8:	3d79db23 	.word	0x3d79db23
 8002afc:	20000198 	.word	0x20000198
 8002b00:	407423e2 	.word	0x407423e2
 8002b04:	447a0000 	.word	0x447a0000
 8002b08:	3c8ef998 	.word	0x3c8ef998

08002b0c <_ZSt21is_constant_evaluatedv>:
#define __cpp_lib_is_constant_evaluated 201811L

  /// Returns true only when called during constant evaluation.
  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	2300      	movs	r3, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 fc8b 	bl	8003458 <_ZNSaIfED1Ev>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4618      	mov	r0, r3
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fc6e 	bl	8003438 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <_ZNSt6vectorIfSaIfEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff ffeb 	bl	8002b4c <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h>:
uint16_t infra_adc_values_test[32];
uint8_t infra_adc_data[32*2];

/* Turns on every #num and #num + 4 Infraled on every led driving IC.*/
void TurnOnInfraLEDs(GPIO_TypeDef* LE_port[2], uint16_t LE_pin[2],GPIO_TypeDef* OE_port[2], uint16_t OE_pin[2], uint8_t num)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	603b      	str	r3, [r7, #0]
	uint8_t i;
	uint8_t data = 0x11 << num;
 8002b8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b92:	2211      	movs	r2, #17
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	75bb      	strb	r3, [r7, #22]

	for(i = 0; i < 4; ++i)
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	75fb      	strb	r3, [r7, #23]
 8002ba0:	e00a      	b.n	8002bb8 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0x38>
	{
		HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8002ba2:	f107 0116 	add.w	r1, r7, #22
 8002ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8002baa:	2201      	movs	r2, #1
 8002bac:	4821      	ldr	r0, [pc, #132]	; (8002c34 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0xb4>)
 8002bae:	f01b f944 	bl	801de3a <HAL_SPI_Transmit>
	for(i = 0; i < 4; ++i)
 8002bb2:	7dfb      	ldrb	r3, [r7, #23]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	75fb      	strb	r3, [r7, #23]
 8002bb8:	7dfb      	ldrb	r3, [r7, #23]
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d9f1      	bls.n	8002ba2 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0x22>
	}
	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_SET);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	4619      	mov	r1, r3
 8002bca:	f018 fa9f 	bl	801b10c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_SET);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	6818      	ldr	r0, [r3, #0]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	3302      	adds	r3, #2
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	4619      	mov	r1, r3
 8002bde:	f018 fa95 	bl	801b10c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_RESET);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	2200      	movs	r2, #0
 8002bec:	4619      	mov	r1, r3
 8002bee:	f018 fa8d 	bl	801b10c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_RESET);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	3302      	adds	r3, #2
 8002bfc:	881b      	ldrh	r3, [r3, #0]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	4619      	mov	r1, r3
 8002c02:	f018 fa83 	bl	801b10c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_RESET);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	4619      	mov	r1, r3
 8002c12:	f018 fa7b 	bl	801b10c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_RESET);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	3302      	adds	r3, #2
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	2200      	movs	r2, #0
 8002c24:	4619      	mov	r1, r3
 8002c26:	f018 fa71 	bl	801b10c <HAL_GPIO_WritePin>

}
 8002c2a:	bf00      	nop
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20000a50 	.word	0x20000a50

08002c38 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm>:

void TurnOnLEDs(GPIO_TypeDef *LE_port[2], uint16_t LE_pin[2], GPIO_TypeDef *OE_port[2], uint16_t OE_pin[2], uint32_t front, uint32_t rear)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
 8002c44:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_SET);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6818      	ldr	r0, [r3, #0]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	4619      	mov	r1, r3
 8002c52:	f018 fa5b 	bl	801b10c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_SET);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	3302      	adds	r3, #2
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	2201      	movs	r2, #1
 8002c64:	4619      	mov	r1, r3
 8002c66:	f018 fa51 	bl	801b10c <HAL_GPIO_WritePin>
	uint8_t i;
	for (i = 0; i < 4; ++i)
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	75fb      	strb	r3, [r7, #23]
 8002c6e:	e011      	b.n	8002c94 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x5c>
	{
		uint8_t data_front = (front >> (8u*i)) & 0xFF;
 8002c70:	7dfb      	ldrb	r3, [r7, #23]
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	6a3a      	ldr	r2, [r7, #32]
 8002c76:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	75bb      	strb	r3, [r7, #22]
		HAL_SPI_Transmit(&hspi2, &data_front, 1, HAL_MAX_DELAY);
 8002c7e:	f107 0116 	add.w	r1, r7, #22
 8002c82:	f04f 33ff 	mov.w	r3, #4294967295
 8002c86:	2201      	movs	r2, #1
 8002c88:	482d      	ldr	r0, [pc, #180]	; (8002d40 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x108>)
 8002c8a:	f01b f8d6 	bl	801de3a <HAL_SPI_Transmit>
	for (i = 0; i < 4; ++i)
 8002c8e:	7dfb      	ldrb	r3, [r7, #23]
 8002c90:	3301      	adds	r3, #1
 8002c92:	75fb      	strb	r3, [r7, #23]
 8002c94:	7dfb      	ldrb	r3, [r7, #23]
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	d9ea      	bls.n	8002c70 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x38>
	}
	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_SET);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	f018 fa31 	bl	801b10c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_RESET);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	f018 fa29 	bl	801b10c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_RESET);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	f018 fa21 	bl	801b10c <HAL_GPIO_WritePin>
	for (i = 0; i < 4; ++i)
 8002cca:	2300      	movs	r3, #0
 8002ccc:	75fb      	strb	r3, [r7, #23]
 8002cce:	e011      	b.n	8002cf4 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0xbc>
	{
		uint8_t data_rear = (rear >> (8u*i)) & 0xFF;
 8002cd0:	7dfb      	ldrb	r3, [r7, #23]
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	757b      	strb	r3, [r7, #21]
		HAL_SPI_Transmit(&hspi2, &data_rear, 1, HAL_MAX_DELAY);
 8002cde:	f107 0115 	add.w	r1, r7, #21
 8002ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	4815      	ldr	r0, [pc, #84]	; (8002d40 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x108>)
 8002cea:	f01b f8a6 	bl	801de3a <HAL_SPI_Transmit>
	for (i = 0; i < 4; ++i)
 8002cee:	7dfb      	ldrb	r3, [r7, #23]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	75fb      	strb	r3, [r7, #23]
 8002cf4:	7dfb      	ldrb	r3, [r7, #23]
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	d9ea      	bls.n	8002cd0 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x98>
	}

	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_SET);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	6818      	ldr	r0, [r3, #0]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	3302      	adds	r3, #2
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	2201      	movs	r2, #1
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f018 f9ff 	bl	801b10c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_RESET);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	3304      	adds	r3, #4
 8002d12:	6818      	ldr	r0, [r3, #0]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	3302      	adds	r3, #2
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	f018 f9f5 	bl	801b10c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_RESET);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3304      	adds	r3, #4
 8002d26:	6818      	ldr	r0, [r3, #0]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	3302      	adds	r3, #2
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	4619      	mov	r1, r3
 8002d32:	f018 f9eb 	bl	801b10c <HAL_GPIO_WritePin>
}
 8002d36:	bf00      	nop
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000a50 	.word	0x20000a50

08002d44 <_Z16TurnOffInfraLEDsPP12GPIO_TypeDefPt>:


void TurnOffInfraLEDs(GPIO_TypeDef* OE_port[2], uint16_t OE_pin[2])
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_SET);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6818      	ldr	r0, [r3, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	2201      	movs	r2, #1
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f018 f9d7 	bl	801b10c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_SET);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3304      	adds	r3, #4
 8002d62:	6818      	ldr	r0, [r3, #0]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	3302      	adds	r3, #2
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	f018 f9cd 	bl	801b10c <HAL_GPIO_WritePin>
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh>:

/* Reads out from all of the 4 adc ICs on one line sensor card 2 adc values each defined by num and writes it to res */
void ReadADCValues(GPIO_TypeDef* ports[4], uint16_t pins[4], uint8_t adc_ic_index, uint8_t *res)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	603b      	str	r3, [r7, #0]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t tmp[2] = {0, 0};
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	82bb      	strh	r3, [r7, #20]
	HAL_GPIO_WritePin(ports[adc_ic_index], pins[adc_ic_index], GPIO_PIN_RESET);
 8002d90:	79fb      	ldrb	r3, [r7, #7]
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	4413      	add	r3, r2
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	4413      	add	r3, r2
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	2200      	movs	r2, #0
 8002da6:	4619      	mov	r1, r3
 8002da8:	f018 f9b0 	bl	801b10c <HAL_GPIO_WritePin>
	for(i = 0; i < 8; ++i)
 8002dac:	2300      	movs	r3, #0
 8002dae:	75fb      	strb	r3, [r7, #23]
 8002db0:	e019      	b.n	8002de6 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x6a>
	{
		tmp[0] = i << 3u;
 8002db2:	7dfb      	ldrb	r3, [r7, #23]
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	753b      	strb	r3, [r7, #20]
		HAL_SPI_Transmit(&hspi1, tmp, 2, HAL_MAX_DELAY);
 8002dba:	f107 0114 	add.w	r1, r7, #20
 8002dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	4812      	ldr	r0, [pc, #72]	; (8002e10 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x94>)
 8002dc6:	f01b f838 	bl	801de3a <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &res[i*2], 2, HAL_MAX_DELAY);
 8002dca:	7dfb      	ldrb	r3, [r7, #23]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	461a      	mov	r2, r3
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	1899      	adds	r1, r3, r2
 8002dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd8:	2202      	movs	r2, #2
 8002dda:	480d      	ldr	r0, [pc, #52]	; (8002e10 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x94>)
 8002ddc:	f01b f99b 	bl	801e116 <HAL_SPI_Receive>
	for(i = 0; i < 8; ++i)
 8002de0:	7dfb      	ldrb	r3, [r7, #23]
 8002de2:	3301      	adds	r3, #1
 8002de4:	75fb      	strb	r3, [r7, #23]
 8002de6:	7dfb      	ldrb	r3, [r7, #23]
 8002de8:	2b07      	cmp	r3, #7
 8002dea:	d9e2      	bls.n	8002db2 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x36>
	}
	HAL_GPIO_WritePin(ports[adc_ic_index], pins[adc_ic_index], GPIO_PIN_SET);
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	4413      	add	r3, r2
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	2201      	movs	r2, #1
 8002e02:	4619      	mov	r1, r3
 8002e04:	f018 f982 	bl	801b10c <HAL_GPIO_WritePin>

}
 8002e08:	bf00      	nop
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	200009ec 	.word	0x200009ec

08002e14 <_Z14LineSensorTaskv>:
void LineSensorTask(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b096      	sub	sp, #88	; 0x58
 8002e18:	af02      	add	r7, sp, #8


#else
	uint8_t j;
	int8_t i;
	for(i = 0; i < 4; ++i)
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002e20:	e0c1      	b.n	8002fa6 <_Z14LineSensorTaskv+0x192>
	{
		TurnOnInfraLEDs(infra_le_ports, infra_le_pins, infra_oe_ports, infra_le_pins, i);
 8002e22:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	4b92      	ldr	r3, [pc, #584]	; (8003074 <_Z14LineSensorTaskv+0x260>)
 8002e2a:	4a93      	ldr	r2, [pc, #588]	; (8003078 <_Z14LineSensorTaskv+0x264>)
 8002e2c:	4991      	ldr	r1, [pc, #580]	; (8003074 <_Z14LineSensorTaskv+0x260>)
 8002e2e:	4893      	ldr	r0, [pc, #588]	; (800307c <_Z14LineSensorTaskv+0x268>)
 8002e30:	f7ff fea6 	bl	8002b80 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h>

		uint32_t delay_start = __HAL_TIM_GetCounter(&htim6);
 8002e34:	4b92      	ldr	r3, [pc, #584]	; (8003080 <_Z14LineSensorTaskv+0x26c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	62bb      	str	r3, [r7, #40]	; 0x28
		while((__HAL_TIM_GetCounter(&htim6) - delay_start) < INFRA_WAIT_TIME);
 8002e3c:	bf00      	nop
 8002e3e:	4b90      	ldr	r3, [pc, #576]	; (8003080 <_Z14LineSensorTaskv+0x26c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b95      	cmp	r3, #149	; 0x95
 8002e4a:	bf94      	ite	ls
 8002e4c:	2301      	movls	r3, #1
 8002e4e:	2300      	movhi	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f3      	bne.n	8002e3e <_Z14LineSensorTaskv+0x2a>

		for(j = 0; j < 4; ++j)
 8002e56:	2300      	movs	r3, #0
 8002e58:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002e5c:	e094      	b.n	8002f88 <_Z14LineSensorTaskv+0x174>
		{
			uint8_t adc_front_values[16];
			uint8_t adc_rear_values[16];
			ReadADCValues(front_adc_cs_ports, front_adc_cs_pins, j, adc_front_values);
 8002e5e:	f107 0318 	add.w	r3, r7, #24
 8002e62:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002e66:	4987      	ldr	r1, [pc, #540]	; (8003084 <_Z14LineSensorTaskv+0x270>)
 8002e68:	4887      	ldr	r0, [pc, #540]	; (8003088 <_Z14LineSensorTaskv+0x274>)
 8002e6a:	f7ff ff87 	bl	8002d7c <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh>
			ReadADCValues(rear_adc_cs_ports, rear_adc_cs_pins, j, adc_rear_values);
 8002e6e:	f107 0308 	add.w	r3, r7, #8
 8002e72:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002e76:	4985      	ldr	r1, [pc, #532]	; (800308c <_Z14LineSensorTaskv+0x278>)
 8002e78:	4885      	ldr	r0, [pc, #532]	; (8003090 <_Z14LineSensorTaskv+0x27c>)
 8002e7a:	f7ff ff7f 	bl	8002d7c <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh>

			// i = id of LED, j = id of ic, adc_ic_values contains the 8 adc values from one ic
			ls_data.adc_values_f[j*8 + i] = (uint16_t)(adc_front_values[i*2] << 8u) | (adc_front_values[i*2+1]);
 8002e7e:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	3350      	adds	r3, #80	; 0x50
 8002e86:	443b      	add	r3, r7
 8002e88:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	021b      	lsls	r3, r3, #8
 8002e90:	b299      	uxth	r1, r3
 8002e92:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	3301      	adds	r3, #1
 8002e9a:	3350      	adds	r3, #80	; 0x50
 8002e9c:	443b      	add	r3, r7
 8002e9e:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002ea8:	00d8      	lsls	r0, r3, #3
 8002eaa:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002eae:	4403      	add	r3, r0
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	b291      	uxth	r1, r2
 8002eb4:	4a77      	ldr	r2, [pc, #476]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8002eb6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			ls_data.adc_values_f[j*8 + i + 4] = (uint16_t)(adc_front_values[(i*2) + 8] << 8u) | (adc_front_values[(i*2) + 8 + 1]);
 8002eba:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	3350      	adds	r3, #80	; 0x50
 8002ec4:	443b      	add	r3, r7
 8002ec6:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	021b      	lsls	r3, r3, #8
 8002ece:	b299      	uxth	r1, r3
 8002ed0:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	3301      	adds	r3, #1
 8002eda:	3350      	adds	r3, #80	; 0x50
 8002edc:	443b      	add	r3, r7
 8002ede:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002ee8:	00d8      	lsls	r0, r3, #3
 8002eea:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002eee:	4403      	add	r3, r0
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	b291      	uxth	r1, r2
 8002ef6:	4a67      	ldr	r2, [pc, #412]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8002ef8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			ls_data.adc_values_r[j*8 + i] = (uint16_t)(adc_rear_values[i*2] << 8u) | (adc_rear_values[i*2+1]);
 8002efc:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	3350      	adds	r3, #80	; 0x50
 8002f04:	443b      	add	r3, r7
 8002f06:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	021b      	lsls	r3, r3, #8
 8002f0e:	b299      	uxth	r1, r3
 8002f10:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	3301      	adds	r3, #1
 8002f18:	3350      	adds	r3, #80	; 0x50
 8002f1a:	443b      	add	r3, r7
 8002f1c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002f26:	00d8      	lsls	r0, r3, #3
 8002f28:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002f2c:	4403      	add	r3, r0
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	b291      	uxth	r1, r2
 8002f32:	4a58      	ldr	r2, [pc, #352]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8002f34:	3320      	adds	r3, #32
 8002f36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			ls_data.adc_values_r[j*8 + i + 4] = (uint16_t)(adc_rear_values[(i*2) + 8] << 8u) | (adc_rear_values[(i*2) + 8 + 1]);
 8002f3a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002f3e:	3304      	adds	r3, #4
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	3350      	adds	r3, #80	; 0x50
 8002f44:	443b      	add	r3, r7
 8002f46:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	021b      	lsls	r3, r3, #8
 8002f4e:	b299      	uxth	r1, r3
 8002f50:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002f54:	3304      	adds	r3, #4
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	3301      	adds	r3, #1
 8002f5a:	3350      	adds	r3, #80	; 0x50
 8002f5c:	443b      	add	r3, r7
 8002f5e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002f68:	00d8      	lsls	r0, r3, #3
 8002f6a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002f6e:	4403      	add	r3, r0
 8002f70:	3304      	adds	r3, #4
 8002f72:	430a      	orrs	r2, r1
 8002f74:	b291      	uxth	r1, r2
 8002f76:	4a47      	ldr	r2, [pc, #284]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8002f78:	3320      	adds	r3, #32
 8002f7a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(j = 0; j < 4; ++j)
 8002f7e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002f82:	3301      	adds	r3, #1
 8002f84:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002f88:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	f67f af66 	bls.w	8002e5e <_Z14LineSensorTaskv+0x4a>
		}

		TurnOffInfraLEDs(infra_oe_ports, infra_le_pins);
 8002f92:	4938      	ldr	r1, [pc, #224]	; (8003074 <_Z14LineSensorTaskv+0x260>)
 8002f94:	4838      	ldr	r0, [pc, #224]	; (8003078 <_Z14LineSensorTaskv+0x264>)
 8002f96:	f7ff fed5 	bl	8002d44 <_Z16TurnOffInfraLEDsPP12GPIO_TypeDefPt>
	for(i = 0; i < 4; ++i)
 8002f9a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002fa6:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	f77f af39 	ble.w	8002e22 <_Z14LineSensorTaskv+0xe>
	}

	float denominator_f = 0.0f;
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	64bb      	str	r3, [r7, #72]	; 0x48
	float denominator_r = 0.0f;
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t led_front = 0u;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t led_rear = 0u;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t front_max_index = 0u;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t rear_max_index = 0u;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	for(i = 1; i < 31; ++i)
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002fd6:	e035      	b.n	8003044 <_Z14LineSensorTaskv+0x230>
	{
		if(ls_data.adc_values_f[i] > ls_data.adc_values_f[front_max_index])
 8002fd8:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002fdc:	4a2d      	ldr	r2, [pc, #180]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8002fde:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002fe2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002fe6:	492b      	ldr	r1, [pc, #172]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8002fe8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d903      	bls.n	8002ff8 <_Z14LineSensorTaskv+0x1e4>
		{
			front_max_index = i;
 8002ff0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002ff4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
		if(ls_data.adc_values_r[i] > ls_data.adc_values_r[rear_max_index])
 8002ff8:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002ffc:	4a25      	ldr	r2, [pc, #148]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8002ffe:	3320      	adds	r3, #32
 8003000:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003004:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003008:	4922      	ldr	r1, [pc, #136]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 800300a:	3320      	adds	r3, #32
 800300c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003010:	429a      	cmp	r2, r3
 8003012:	d903      	bls.n	800301c <_Z14LineSensorTaskv+0x208>
		{
			rear_max_index = i;
 8003014:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003018:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		}
		ls_data.front_detection[i] = true;
 800301c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8003020:	4a1c      	ldr	r2, [pc, #112]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8003022:	4413      	add	r3, r2
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		ls_data.rear_detection[i] = true;
 800302a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800302e:	4a19      	ldr	r2, [pc, #100]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8003030:	4413      	add	r3, r2
 8003032:	2201      	movs	r2, #1
 8003034:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	for(i = 1; i < 31; ++i)
 8003038:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800303c:	3301      	adds	r3, #1
 800303e:	b2db      	uxtb	r3, r3
 8003040:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8003044:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8003048:	2b1e      	cmp	r3, #30
 800304a:	ddc5      	ble.n	8002fd8 <_Z14LineSensorTaskv+0x1c4>
	}

	ls_data.front_detection[0] = true;
 800304c:	4b11      	ldr	r3, [pc, #68]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	ls_data.front_detection[31] = true;
 8003054:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8003056:	2201      	movs	r2, #1
 8003058:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	ls_data.rear_detection[0] = true;
 800305c:	4b0d      	ldr	r3, [pc, #52]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 800305e:	2201      	movs	r2, #1
 8003060:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	ls_data.rear_detection[31] = true;
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8003066:	2201      	movs	r2, #1
 8003068:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
	for(i = 1; i < 31; ++i)
 800306c:	2301      	movs	r3, #1
 800306e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8003072:	e090      	b.n	8003196 <_Z14LineSensorTaskv+0x382>
 8003074:	20000068 	.word	0x20000068
 8003078:	2000006c 	.word	0x2000006c
 800307c:	20000060 	.word	0x20000060
 8003080:	20000bfc 	.word	0x20000bfc
 8003084:	20000040 	.word	0x20000040
 8003088:	20000030 	.word	0x20000030
 800308c:	20000058 	.word	0x20000058
 8003090:	20000048 	.word	0x20000048
 8003094:	200001b0 	.word	0x200001b0
	{
		ls_data.position_front += (float)((i - 16.0f/* - front_max_index*/) * ls_data.adc_values_f[i]);
 8003098:	4bb7      	ldr	r3, [pc, #732]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 800309a:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 800309e:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80030a2:	ee07 3a90 	vmov	s15, r3
 80030a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030aa:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80030ae:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80030b2:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80030b6:	4ab0      	ldr	r2, [pc, #704]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 80030b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030bc:	ee07 3a90 	vmov	s15, r3
 80030c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030cc:	4baa      	ldr	r3, [pc, #680]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 80030ce:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
		ls_data.position_rear += (float)((i - 16.0f/* - rear_max_index*/) * ls_data.adc_values_r[i]);
 80030d2:	4ba9      	ldr	r3, [pc, #676]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 80030d4:	ed93 7a31 	vldr	s14, [r3, #196]	; 0xc4
 80030d8:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80030dc:	ee07 3a90 	vmov	s15, r3
 80030e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030e4:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80030e8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80030ec:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80030f0:	4aa1      	ldr	r2, [pc, #644]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 80030f2:	3320      	adds	r3, #32
 80030f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030f8:	ee07 3a90 	vmov	s15, r3
 80030fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003108:	4b9b      	ldr	r3, [pc, #620]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 800310a:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4
		denominator_f += (float)(ls_data.adc_values_f[i]);
 800310e:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8003112:	4a99      	ldr	r2, [pc, #612]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 8003114:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003118:	ee07 3a90 	vmov	s15, r3
 800311c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003120:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003128:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		denominator_r += (float)(ls_data.adc_values_r[i]);
 800312c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8003130:	4a91      	ldr	r2, [pc, #580]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 8003132:	3320      	adds	r3, #32
 8003134:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003138:	ee07 3a90 	vmov	s15, r3
 800313c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003140:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003148:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		if(ls_data.adc_values_f[i] > 2000)
 800314c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8003150:	4a89      	ldr	r2, [pc, #548]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 8003152:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003156:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800315a:	d906      	bls.n	800316a <_Z14LineSensorTaskv+0x356>
		{
			ls_data.front_detection[i] = false;
 800315c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8003160:	4a85      	ldr	r2, [pc, #532]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 8003162:	4413      	add	r3, r2
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

		}

		if(ls_data.adc_values_r[i] > 2000)
 800316a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800316e:	4a82      	ldr	r2, [pc, #520]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 8003170:	3320      	adds	r3, #32
 8003172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003176:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800317a:	d906      	bls.n	800318a <_Z14LineSensorTaskv+0x376>
		{
			ls_data.rear_detection[i] = false;
 800317c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8003180:	4a7d      	ldr	r2, [pc, #500]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 8003182:	4413      	add	r3, r2
 8003184:	2200      	movs	r2, #0
 8003186:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	for(i = 1; i < 31; ++i)
 800318a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800318e:	3301      	adds	r3, #1
 8003190:	b2db      	uxtb	r3, r3
 8003192:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8003196:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800319a:	2b1e      	cmp	r3, #30
 800319c:	f77f af7c 	ble.w	8003098 <_Z14LineSensorTaskv+0x284>
		}
	}

	for(i = 2; i < SENSOR_COUNT - 2; ++i)
 80031a0:	2302      	movs	r3, #2
 80031a2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80031a6:	e037      	b.n	8003218 <_Z14LineSensorTaskv+0x404>
	{
		if((ls_data.front_detection[i - 1] == true) && (ls_data.front_detection[i + 1] == true))
 80031a8:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80031ac:	3b01      	subs	r3, #1
 80031ae:	4a72      	ldr	r2, [pc, #456]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 80031b0:	4413      	add	r3, r2
 80031b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d10f      	bne.n	80031da <_Z14LineSensorTaskv+0x3c6>
 80031ba:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80031be:	3301      	adds	r3, #1
 80031c0:	4a6d      	ldr	r2, [pc, #436]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 80031c2:	4413      	add	r3, r2
 80031c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d106      	bne.n	80031da <_Z14LineSensorTaskv+0x3c6>
		{
			ls_data.front_detection[i] = true;
 80031cc:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80031d0:	4a69      	ldr	r2, [pc, #420]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 80031d2:	4413      	add	r3, r2
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		}

		if((ls_data.rear_detection[i - 1] == true) && (ls_data.rear_detection[i + 1] == true))
 80031da:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80031de:	3b01      	subs	r3, #1
 80031e0:	4a65      	ldr	r2, [pc, #404]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 80031e2:	4413      	add	r3, r2
 80031e4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d10f      	bne.n	800320c <_Z14LineSensorTaskv+0x3f8>
 80031ec:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80031f0:	3301      	adds	r3, #1
 80031f2:	4a61      	ldr	r2, [pc, #388]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 80031f4:	4413      	add	r3, r2
 80031f6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d106      	bne.n	800320c <_Z14LineSensorTaskv+0x3f8>
		{
			ls_data.rear_detection[i] = true;
 80031fe:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8003202:	4a5d      	ldr	r2, [pc, #372]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 8003204:	4413      	add	r3, r2
 8003206:	2201      	movs	r2, #1
 8003208:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	for(i = 2; i < SENSOR_COUNT - 2; ++i)
 800320c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003210:	3301      	adds	r3, #1
 8003212:	b2db      	uxtb	r3, r3
 8003214:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8003218:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800321c:	2b1d      	cmp	r3, #29
 800321e:	ddc3      	ble.n	80031a8 <_Z14LineSensorTaskv+0x394>
		}
	}

	for(i = 1; i < 31; ++i)
 8003220:	2301      	movs	r3, #1
 8003222:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8003226:	e027      	b.n	8003278 <_Z14LineSensorTaskv+0x464>
	{
		if(ls_data.front_detection[i] == false)
 8003228:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800322c:	4a52      	ldr	r2, [pc, #328]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 800322e:	4413      	add	r3, r2
 8003230:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003234:	2b00      	cmp	r3, #0
 8003236:	d108      	bne.n	800324a <_Z14LineSensorTaskv+0x436>
		{
			led_front |= 0x80000000 >> (i);
 8003238:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800323c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003240:	fa22 f303 	lsr.w	r3, r2, r3
 8003244:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003246:	4313      	orrs	r3, r2
 8003248:	643b      	str	r3, [r7, #64]	; 0x40
		}
		if(ls_data.rear_detection[i] == false)
 800324a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800324e:	4a4a      	ldr	r2, [pc, #296]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 8003250:	4413      	add	r3, r2
 8003252:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d108      	bne.n	800326c <_Z14LineSensorTaskv+0x458>
		{
			led_rear |= 0x80000000 >> (i);
 800325a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800325e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003262:	fa22 f303 	lsr.w	r3, r2, r3
 8003266:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003268:	4313      	orrs	r3, r2
 800326a:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i = 1; i < 31; ++i)
 800326c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003270:	3301      	adds	r3, #1
 8003272:	b2db      	uxtb	r3, r3
 8003274:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8003278:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800327c:	2b1e      	cmp	r3, #30
 800327e:	ddd3      	ble.n	8003228 <_Z14LineSensorTaskv+0x414>
		}
	}
	uint8_t cluster_start_front = SENSOR_COUNT + 1;
 8003280:	2321      	movs	r3, #33	; 0x21
 8003282:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	uint8_t cluster_end_front = SENSOR_COUNT + 1;
 8003286:	2321      	movs	r3, #33	; 0x21
 8003288:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	uint8_t cluster_start_rear = SENSOR_COUNT + 1;
 800328c:	2321      	movs	r3, #33	; 0x21
 800328e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t cluster_end_rear = SENSOR_COUNT + 1;
 8003292:	2321      	movs	r3, #33	; 0x21
 8003294:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t current_idx;
	ls_data.front.clear();
 8003298:	4838      	ldr	r0, [pc, #224]	; (800337c <_Z14LineSensorTaskv+0x568>)
 800329a:	f000 f91c 	bl	80034d6 <_ZNSt6vectorIfSaIfEE5clearEv>
	ls_data.rear.clear();
 800329e:	4838      	ldr	r0, [pc, #224]	; (8003380 <_Z14LineSensorTaskv+0x56c>)
 80032a0:	f000 f919 	bl	80034d6 <_ZNSt6vectorIfSaIfEE5clearEv>
	for (current_idx = 0; current_idx < SENSOR_COUNT; current_idx++)
 80032a4:	2300      	movs	r3, #0
 80032a6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80032aa:	e0a8      	b.n	80033fe <_Z14LineSensorTaskv+0x5ea>
	{
		if (!ls_data.front_detection[current_idx])
 80032ac:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80032b0:	4a31      	ldr	r2, [pc, #196]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 80032b2:	4413      	add	r3, r2
 80032b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80032b8:	f083 0301 	eor.w	r3, r3, #1
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00c      	beq.n	80032dc <_Z14LineSensorTaskv+0x4c8>
		{
			if (cluster_start_front == SENSOR_COUNT + 1)
 80032c2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80032c6:	2b21      	cmp	r3, #33	; 0x21
 80032c8:	d103      	bne.n	80032d2 <_Z14LineSensorTaskv+0x4be>
			{
				cluster_start_front = current_idx;
 80032ca:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80032ce:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
			}
			cluster_end_front = current_idx;
 80032d2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80032d6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 80032da:	e035      	b.n	8003348 <_Z14LineSensorTaskv+0x534>
		}
		else
		{
			if (cluster_start_front != SENSOR_COUNT + 1)
 80032dc:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80032e0:	2b21      	cmp	r3, #33	; 0x21
 80032e2:	d031      	beq.n	8003348 <_Z14LineSensorTaskv+0x534>
			{
				// calculate the center of mass of the cluster
				float cluster_center = (cluster_start_front + 1 + cluster_end_front + 1) / 2.0f;
 80032e4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80032ee:	4413      	add	r3, r2
 80032f0:	3301      	adds	r3, #1
 80032f2:	ee07 3a90 	vmov	s15, r3
 80032f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032fa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80032fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003302:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
				// calculate the position of the line relative to the center of the sensor
				float line_position = cluster_center - 16.5f;
 8003306:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800330a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003384 <_Z14LineSensorTaskv+0x570>
 800330e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003312:	edc7 7a01 	vstr	s15, [r7, #4]
				line_position = -1.0f * line_position * SENSOR_WIDTH / (SENSOR_COUNT - 1);
 8003316:	edd7 7a01 	vldr	s15, [r7, #4]
 800331a:	eef1 7a67 	vneg.f32	s15, s15
 800331e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003388 <_Z14LineSensorTaskv+0x574>
 8003322:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003326:	eef3 6a0f 	vmov.f32	s13, #63	; 0x41f80000  31.0
 800332a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800332e:	edc7 7a01 	vstr	s15, [r7, #4]
					denominator += ls_data.adc_values_f[i];
				}
				line_position = -1.0f * (((line_position / denominator) - 16.5f) * SENSOR_WIDTH / (SENSOR_COUNT - 1));
				*/
				// add the line position to the vector
				ls_data.front.push_back(line_position);
 8003332:	1d3b      	adds	r3, r7, #4
 8003334:	4619      	mov	r1, r3
 8003336:	4811      	ldr	r0, [pc, #68]	; (800337c <_Z14LineSensorTaskv+0x568>)
 8003338:	f000 f8db 	bl	80034f2 <_ZNSt6vectorIfSaIfEE9push_backERKf>
				// reset the cluster start and end
				cluster_start_front = SENSOR_COUNT + 1;
 800333c:	2321      	movs	r3, #33	; 0x21
 800333e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				cluster_end_front = SENSOR_COUNT + 1;
 8003342:	2321      	movs	r3, #33	; 0x21
 8003344:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
			}
		}

		if (!ls_data.rear_detection[current_idx])
 8003348:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800334c:	4a0a      	ldr	r2, [pc, #40]	; (8003378 <_Z14LineSensorTaskv+0x564>)
 800334e:	4413      	add	r3, r2
 8003350:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003354:	f083 0301 	eor.w	r3, r3, #1
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d016      	beq.n	800338c <_Z14LineSensorTaskv+0x578>
		{
			if (cluster_start_rear == SENSOR_COUNT + 1)
 800335e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003362:	2b21      	cmp	r3, #33	; 0x21
 8003364:	d103      	bne.n	800336e <_Z14LineSensorTaskv+0x55a>
			{
				cluster_start_rear = current_idx;
 8003366:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800336a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
			cluster_end_rear = current_idx;
 800336e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003372:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003376:	e03d      	b.n	80033f4 <_Z14LineSensorTaskv+0x5e0>
 8003378:	200001b0 	.word	0x200001b0
 800337c:	20000278 	.word	0x20000278
 8003380:	20000284 	.word	0x20000284
 8003384:	41840000 	.word	0x41840000
 8003388:	3e4ccccd 	.word	0x3e4ccccd
		}
		else
		{
			if (cluster_start_rear != SENSOR_COUNT + 1)
 800338c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003390:	2b21      	cmp	r3, #33	; 0x21
 8003392:	d02f      	beq.n	80033f4 <_Z14LineSensorTaskv+0x5e0>
			{
				// calculate the center of mass of the cluster
				float cluster_center = (cluster_start_rear + 1 + cluster_end_rear + 1) / 2.0f;
 8003394:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800339e:	4413      	add	r3, r2
 80033a0:	3301      	adds	r3, #1
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033aa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80033ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033b2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				// calculate the position of the line relative to the center of the sensor
				float line_position = cluster_center - 16.5f;
 80033b6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80033ba:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 8003384 <_Z14LineSensorTaskv+0x570>
 80033be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033c2:	edc7 7a00 	vstr	s15, [r7]
				line_position = line_position * SENSOR_WIDTH / (SENSOR_COUNT - 1);
 80033c6:	edd7 7a00 	vldr	s15, [r7]
 80033ca:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 8003388 <_Z14LineSensorTaskv+0x574>
 80033ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033d2:	eef3 6a0f 	vmov.f32	s13, #63	; 0x41f80000  31.0
 80033d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033da:	edc7 7a00 	vstr	s15, [r7]
					line_position += ls_data.adc_values_r[i] * i;
					denominator += ls_data.adc_values_r[i];
				}
				line_position = ((line_position / denominator) - 16.5f) * SENSOR_WIDTH / (SENSOR_COUNT - 1);
				*/
				ls_data.rear.push_back(line_position);
 80033de:	463b      	mov	r3, r7
 80033e0:	4619      	mov	r1, r3
 80033e2:	4810      	ldr	r0, [pc, #64]	; (8003424 <_Z14LineSensorTaskv+0x610>)
 80033e4:	f000 f885 	bl	80034f2 <_ZNSt6vectorIfSaIfEE9push_backERKf>
				// reset the cluster start and end
				cluster_start_rear = SENSOR_COUNT + 1;
 80033e8:	2321      	movs	r3, #33	; 0x21
 80033ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				cluster_end_rear = SENSOR_COUNT + 1;
 80033ee:	2321      	movs	r3, #33	; 0x21
 80033f0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	for (current_idx = 0; current_idx < SENSOR_COUNT; current_idx++)
 80033f4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80033f8:	3301      	adds	r3, #1
 80033fa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80033fe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003402:	2b1f      	cmp	r3, #31
 8003404:	f67f af52 	bls.w	80032ac <_Z14LineSensorTaskv+0x498>
			}
		}
	}


	TurnOnLEDs(led_le_ports, led_le_pins, led_oe_ports, led_oe_pins, led_front, led_rear);
 8003408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800340a:	9301      	str	r3, [sp, #4]
 800340c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	4b05      	ldr	r3, [pc, #20]	; (8003428 <_Z14LineSensorTaskv+0x614>)
 8003412:	4a06      	ldr	r2, [pc, #24]	; (800342c <_Z14LineSensorTaskv+0x618>)
 8003414:	4906      	ldr	r1, [pc, #24]	; (8003430 <_Z14LineSensorTaskv+0x61c>)
 8003416:	4807      	ldr	r0, [pc, #28]	; (8003434 <_Z14LineSensorTaskv+0x620>)
 8003418:	f7ff fc0e 	bl	8002c38 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm>
	//ls_data.position_front = -1.0f * ls_data.position_front * 2.5f / 100.0f / denominator_f;
	//ls_data.position_rear = ls_data.position_rear * 2.5f / 100.0f / denominator_r;


#endif
}
 800341c:	bf00      	nop
 800341e:	3750      	adds	r7, #80	; 0x50
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	20000284 	.word	0x20000284
 8003428:	20000088 	.word	0x20000088
 800342c:	20000080 	.word	0x20000080
 8003430:	2000007c 	.word	0x2000007c
 8003434:	20000074 	.word	0x20000074

08003438 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f87b 	bl	800353c <_ZNSaIfEC1Ev>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4618      	mov	r0, r3
 800344a:	f000 f883 	bl	8003554 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4618      	mov	r0, r3
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <_ZNSaIfED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4618      	mov	r0, r3
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800346e:	b580      	push	{r7, lr}
 8003470:	b082      	sub	sp, #8
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8003486:	461a      	mov	r2, r3
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f877 	bl	800357c <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      }
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff fb4f 	bl	8002b34 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4618      	mov	r0, r3
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <_ZNSt6vectorIfSaIfEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80034a0:	b5b0      	push	{r4, r5, r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681c      	ldr	r4, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 f875 	bl	80035a2 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80034b8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80034ba:	461a      	mov	r2, r3
 80034bc:	4629      	mov	r1, r5
 80034be:	4620      	mov	r0, r4
 80034c0:	f000 f87a 	bl	80035b8 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff ffd1 	bl	800346e <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bdb0      	pop	{r4, r5, r7, pc}

080034d6 <_ZNSt6vectorIfSaIfEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b082      	sub	sp, #8
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4619      	mov	r1, r3
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f875 	bl	80035d4 <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <_ZNSt6vectorIfSaIfEE9push_backERKf>:
      push_back(const value_type& __x)
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	429a      	cmp	r2, r3
 8003506:	d00c      	beq.n	8003522 <_ZNSt6vectorIfSaIfEE9push_backERKf+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	4619      	mov	r1, r3
 8003512:	f000 f895 	bl	8003640 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	1d1a      	adds	r2, r3, #4
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	605a      	str	r2, [r3, #4]
      }
 8003520:	e008      	b.n	8003534 <_ZNSt6vectorIfSaIfEE9push_backERKf+0x42>
	  _M_realloc_insert(end(), __x);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f89e 	bl	8003664 <_ZNSt6vectorIfSaIfEE3endEv>
 8003528:	4603      	mov	r3, r0
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	4619      	mov	r1, r3
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f8aa 	bl	8003688 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>
      }
 8003534:	bf00      	nop
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <_ZNSaIfEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f91b 	bl	8003780 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4618      	mov	r0, r3
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	605a      	str	r2, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	609a      	str	r2, [r3, #8]
	{ }
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4618      	mov	r0, r3
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
	if (__p)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d005      	beq.n	800359a <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	68b9      	ldr	r1, [r7, #8]
 8003594:	4618      	mov	r0, r3
 8003596:	f000 f8fe 	bl	8003796 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 800359a:	bf00      	nop
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4618      	mov	r0, r3
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80035c4:	68b9      	ldr	r1, [r7, #8]
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f904 	bl	80037d4 <_ZSt8_DestroyIPfEvT_S1_>
    }
 80035cc:	bf00      	nop
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 80035d4:	b590      	push	{r4, r7, lr}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	109b      	asrs	r3, r3, #2
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00e      	beq.n	800360e <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff ffd3 	bl	80035a2 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80035fc:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80035fe:	461a      	mov	r2, r3
 8003600:	4621      	mov	r1, r4
 8003602:	6838      	ldr	r0, [r7, #0]
 8003604:	f7ff ffd8 	bl	80035b8 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 800360e:	bf00      	nop
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	bd90      	pop	{r4, r7, pc}

08003616 <_ZSt12construct_atIfJRKfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    }

#if __cplusplus >= 202002L
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
 8003616:	b590      	push	{r4, r7, lr}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	6039      	str	r1, [r7, #0]
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8003620:	6838      	ldr	r0, [r7, #0]
 8003622:	f000 f8ed 	bl	8003800 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8003626:	4603      	mov	r3, r0
 8003628:	681c      	ldr	r4, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4619      	mov	r1, r3
 800362e:	2004      	movs	r0, #4
 8003630:	f7ff fa74 	bl	8002b1c <_ZnwjPv>
 8003634:	4603      	mov	r3, r0
 8003636:	601c      	str	r4, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	bd90      	pop	{r4, r7, pc}

08003640 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f8d7 	bl	8003800 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8003652:	4603      	mov	r3, r0
 8003654:	4619      	mov	r1, r3
 8003656:	68b8      	ldr	r0, [r7, #8]
 8003658:	f7ff ffdd 	bl	8003616 <_ZSt12construct_atIfJRKfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800365c:	bf00      	nop
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <_ZNSt6vectorIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	1d1a      	adds	r2, r3, #4
 8003670:	f107 030c 	add.w	r3, r7, #12
 8003674:	4611      	mov	r1, r2
 8003676:	4618      	mov	r0, r3
 8003678:	f000 f8cd 	bl	8003816 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8003688:	b5b0      	push	{r4, r5, r7, lr}
 800368a:	b08c      	sub	sp, #48	; 0x30
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8003694:	4a39      	ldr	r2, [pc, #228]	; (800377c <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0xf4>)
 8003696:	2101      	movs	r1, #1
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 f8cc 	bl	8003836 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 800369e:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 f909 	bl	80038c4 <_ZNSt6vectorIfSaIfEE5beginEv>
 80036b2:	4603      	mov	r3, r0
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	f107 0214 	add.w	r2, r7, #20
 80036ba:	f107 0308 	add.w	r3, r7, #8
 80036be:	4611      	mov	r1, r2
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 f90f 	bl	80038e4 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80036c6:	4603      	mov	r3, r0
 80036c8:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 f91d 	bl	800390e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 80036d4:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80036da:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80036e0:	69fa      	ldr	r2, [r7, #28]
 80036e2:	18d5      	adds	r5, r2, r3
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f88b 	bl	8003800 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 80036ea:	4603      	mov	r3, r0
 80036ec:	461a      	mov	r2, r3
 80036ee:	4629      	mov	r1, r5
 80036f0:	4620      	mov	r0, r4
 80036f2:	f7ff ffa5 	bl	8003640 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80036f6:	2300      	movs	r3, #0
 80036f8:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80036fa:	f107 0308 	add.w	r3, r7, #8
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 f92d 	bl	800395e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8003704:	4603      	mov	r3, r0
 8003706:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff ff49 	bl	80035a2 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003710:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003712:	69fa      	ldr	r2, [r7, #28]
 8003714:	4621      	mov	r1, r4
 8003716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003718:	f000 f90d 	bl	8003936 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 800371c:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	3304      	adds	r3, #4
 8003722:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003724:	f107 0308 	add.w	r3, r7, #8
 8003728:	4618      	mov	r0, r3
 800372a:	f000 f918 	bl	800395e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800372e:	4603      	mov	r3, r0
 8003730:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff ff34 	bl	80035a2 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800373a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003740:	4620      	mov	r0, r4
 8003742:	f000 f8f8 	bl	8003936 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 8003746:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8003748:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8003754:	461a      	mov	r2, r3
 8003756:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003758:	f7ff ff10 	bl	800357c <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	69fa      	ldr	r2, [r7, #28]
 8003760:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	69fa      	ldr	r2, [r7, #28]
 800376e:	441a      	add	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	609a      	str	r2, [r3, #8]
    }
 8003774:	bf00      	nop
 8003776:	3730      	adds	r7, #48	; 0x30
 8003778:	46bd      	mov	sp, r7
 800377a:	bdb0      	pop	{r4, r5, r7, pc}
 800377c:	08029678 	.word	0x08029678

08003780 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4618      	mov	r0, r3
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003796:	b580      	push	{r7, lr}
 8003798:	b088      	sub	sp, #32
 800379a:	af00      	add	r7, sp, #0
 800379c:	60f8      	str	r0, [r7, #12]
 800379e:	60b9      	str	r1, [r7, #8]
 80037a0:	607a      	str	r2, [r7, #4]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	61fb      	str	r3, [r7, #28]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	61bb      	str	r3, [r7, #24]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	617b      	str	r3, [r7, #20]
      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 80037ae:	f7ff f9ad 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d003      	beq.n	80037c0 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj+0x2a>
	  {
	    ::operator delete(__p);
 80037b8:	69b8      	ldr	r0, [r7, #24]
 80037ba:	f022 f867 	bl	802588c <_ZdlPv>
	    return;
 80037be:	e005      	b.n	80037cc <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj+0x36>
	  }
#endif
	__allocator_base<_Tp>::deallocate(__p, __n);
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	69b9      	ldr	r1, [r7, #24]
 80037c4:	69f8      	ldr	r0, [r7, #28]
 80037c6:	f000 f96a 	bl	8003a9e <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
      { __a.deallocate(__p, __n); }
 80037ca:	bf00      	nop
 80037cc:	bf00      	nop
 80037ce:	3720      	adds	r7, #32
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <_ZSt8_DestroyIPfEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
 80037de:	f7ff f995 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d004      	beq.n	80037f2 <_ZSt8_DestroyIPfEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80037e8:	6839      	ldr	r1, [r7, #0]
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f8c2 	bl	8003974 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_>
 80037f0:	e003      	b.n	80037fa <_ZSt8_DestroyIPfEvT_S1_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80037f2:	6839      	ldr	r1, [r7, #0]
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f8d6 	bl	80039a6 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4618      	mov	r0, r3
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
 800381e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4618      	mov	r0, r3
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8003836:	b590      	push	{r4, r7, lr}
 8003838:	b087      	sub	sp, #28
 800383a:	af00      	add	r7, sp, #0
 800383c:	60f8      	str	r0, [r7, #12]
 800383e:	60b9      	str	r1, [r7, #8]
 8003840:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 f8ba 	bl	80039bc <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8003848:	4604      	mov	r4, r0
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 f8c7 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003850:	4603      	mov	r3, r0
 8003852:	1ae2      	subs	r2, r4, r3
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	429a      	cmp	r2, r3
 8003858:	bf34      	ite	cc
 800385a:	2301      	movcc	r3, #1
 800385c:	2300      	movcs	r3, #0
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f022 f8e7 	bl	8025a38 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 f8b7 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003870:	4604      	mov	r4, r0
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 f8b3 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003878:	4603      	mov	r3, r0
 800387a:	613b      	str	r3, [r7, #16]
 800387c:	f107 0208 	add.w	r2, r7, #8
 8003880:	f107 0310 	add.w	r3, r7, #16
 8003884:	4611      	mov	r1, r2
 8003886:	4618      	mov	r0, r3
 8003888:	f000 f8b9 	bl	80039fe <_ZSt3maxIjERKT_S2_S2_>
 800388c:	4603      	mov	r3, r0
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4423      	add	r3, r4
 8003892:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 f8a2 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800389a:	4602      	mov	r2, r0
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	4293      	cmp	r3, r2
 80038a0:	d306      	bcc.n	80038b0 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x7a>
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 f88a 	bl	80039bc <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 80038a8:	4602      	mov	r2, r0
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d904      	bls.n	80038ba <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x84>
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 f883 	bl	80039bc <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 80038b6:	4603      	mov	r3, r0
 80038b8:	e000      	b.n	80038bc <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x86>
 80038ba:	697b      	ldr	r3, [r7, #20]
      }
 80038bc:	4618      	mov	r0, r3
 80038be:	371c      	adds	r7, #28
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd90      	pop	{r4, r7, pc}

080038c4 <_ZNSt6vectorIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	f107 030c 	add.w	r3, r7, #12
 80038d2:	4611      	mov	r1, r2
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff ff9e 	bl	8003816 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80038e4:	b590      	push	{r4, r7, lr}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f835 	bl	800395e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 80038f4:	4603      	mov	r3, r0
 80038f6:	681c      	ldr	r4, [r3, #0]
 80038f8:	6838      	ldr	r0, [r7, #0]
 80038fa:	f000 f830 	bl	800395e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 80038fe:	4603      	mov	r3, r0
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	1ae3      	subs	r3, r4, r3
 8003904:	109b      	asrs	r3, r3, #2
 8003906:	4618      	mov	r0, r3
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	bd90      	pop	{r4, r7, pc}

0800390e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800390e:	b580      	push	{r7, lr}
 8003910:	b082      	sub	sp, #8
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d006      	beq.n	800392c <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6839      	ldr	r1, [r7, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f000 f87f 	bl	8003a26 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8003928:	4603      	mov	r3, r0
 800392a:	e000      	b.n	800392e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 800392c:	2300      	movs	r3, #0
      }
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8003936:	b590      	push	{r4, r7, lr}
 8003938:	b087      	sub	sp, #28
 800393a:	af02      	add	r7, sp, #8
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	607a      	str	r2, [r7, #4]
 8003942:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8003944:	f88d 4000 	strb.w	r4, [sp]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 f889 	bl	8003a66 <_ZNSt6vectorIfSaIfEE14_S_do_relocateEPfS2_S2_RS0_St17integral_constantIbLb1EE>
 8003954:	4603      	mov	r3, r0
      }
 8003956:	4618      	mov	r0, r3
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	bd90      	pop	{r4, r7, pc}

0800395e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4618      	mov	r0, r3
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800397e:	e009      	b.n	8003994 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 f89b 	bl	8003abc <_ZSt11__addressofIfEPT_RS0_>
 8003986:	4603      	mov	r3, r0
 8003988:	4618      	mov	r0, r3
 800398a:	f000 f8a2 	bl	8003ad2 <_ZSt8_DestroyIfEvPT_>
	  for (; __first != __last; ++__first)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	3304      	adds	r3, #4
 8003992:	607b      	str	r3, [r7, #4]
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d1f1      	bne.n	8003980 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_+0xc>
	}
 800399c:	bf00      	nop
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	6039      	str	r1, [r7, #0]
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <_ZNKSt6vectorIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 f8b4 	bl	8003b34 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80039cc:	4603      	mov	r3, r0
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 f896 	bl	8003b00 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>
 80039d4:	4603      	mov	r3, r0
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <_ZNKSt6vectorIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	109b      	asrs	r3, r3, #2
 80039f2:	4618      	mov	r0, r3
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d201      	bcs.n	8003a18 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	e000      	b.n	8003a1a <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8003a18:	687b      	ldr	r3, [r7, #4]
    }
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b084      	sub	sp, #16
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	6039      	str	r1, [r7, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8003a38:	f7ff f868 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d006      	beq.n	8003a50 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4618      	mov	r0, r3
 8003a48:	f021 ff24 	bl	8025894 <_Znwj>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	e006      	b.n	8003a5e <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8003a50:	2200      	movs	r2, #0
 8003a52:	68b9      	ldr	r1, [r7, #8]
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f8b5 	bl	8003bc4 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	bf00      	nop
      { return __a.allocate(__n); }
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <_ZNSt6vectorIfSaIfEE14_S_do_relocateEPfS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b084      	sub	sp, #16
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	60f8      	str	r0, [r7, #12]
 8003a6e:	60b9      	str	r1, [r7, #8]
 8003a70:	607a      	str	r2, [r7, #4]
 8003a72:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	68b9      	ldr	r1, [r7, #8]
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 f865 	bl	8003b4a <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 8003a80:	4603      	mov	r3, r0
      }
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <_ZSt10destroy_atIfEvPT_>:
    destroy_at(_Tp* __location)
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
    }
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b084      	sub	sp, #16
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	60f8      	str	r0, [r7, #12]
 8003aa6:	60b9      	str	r1, [r7, #8]
 8003aa8:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4619      	mov	r1, r3
 8003ab0:	68b8      	ldr	r0, [r7, #8]
 8003ab2:	f021 feed 	bl	8025890 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <_ZSt11__addressofIfEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <_ZSt8_DestroyIfEvPT_>:
    _Destroy(_Tp* __pointer)
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7ff ffd5 	bl	8003a8a <_ZSt10destroy_atIfEvPT_>
    }
 8003ae0:	bf00      	nop
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8003af0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8003af4:	4618      	mov	r0, r3
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8003b08:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8003b0c:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7ff ffea 	bl	8003ae8 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 8003b14:	4603      	mov	r3, r0
 8003b16:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8003b18:	f107 0208 	add.w	r2, r7, #8
 8003b1c:	f107 030c 	add.w	r3, r7, #12
 8003b20:	4611      	mov	r1, r2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 f82e 	bl	8003b84 <_ZSt3minIjERKT_S2_S2_>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	681b      	ldr	r3, [r3, #0]
      }
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8003b4a:	b5b0      	push	{r4, r5, r7, lr}
 8003b4c:	b084      	sub	sp, #16
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	607a      	str	r2, [r7, #4]
 8003b56:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 f85d 	bl	8003c18 <_ZSt12__niter_baseIPfET_S1_>
 8003b5e:	4604      	mov	r4, r0
 8003b60:	68b8      	ldr	r0, [r7, #8]
 8003b62:	f000 f859 	bl	8003c18 <_ZSt12__niter_baseIPfET_S1_>
 8003b66:	4605      	mov	r5, r0
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f855 	bl	8003c18 <_ZSt12__niter_baseIPfET_S1_>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	4629      	mov	r1, r5
 8003b74:	4620      	mov	r0, r4
 8003b76:	f000 f85a 	bl	8003c2e <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8003b7a:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bdb0      	pop	{r4, r5, r7, pc}

08003b84 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d201      	bcs.n	8003b9e <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	e000      	b.n	8003ba0 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8003b9e:	687b      	ldr	r3, [r7, #4]
    }
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003bb4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8003bb8:	4618      	mov	r0, r3
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f7ff ffeb 	bl	8003bac <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	bf8c      	ite	hi
 8003bde:	2301      	movhi	r3, #1
 8003be0:	2300      	movls	r3, #0
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	bf14      	ite	ne
 8003be8:	2301      	movne	r3, #1
 8003bea:	2300      	moveq	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d007      	beq.n	8003c02 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf8:	d301      	bcc.n	8003bfe <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8003bfa:	f021 ff1a 	bl	8025a32 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8003bfe:	f021 ff15 	bl	8025a2c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4618      	mov	r0, r3
 8003c08:	f021 fe44 	bl	8025894 <_Znwj>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	bf00      	nop
      }
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <_ZSt12__niter_baseIPfET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4618      	mov	r0, r3
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b086      	sub	sp, #24
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	607a      	str	r2, [r7, #4]
 8003c3a:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	109b      	asrs	r3, r3, #2
 8003c44:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	dd06      	ble.n	8003c5a <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	461a      	mov	r2, r3
 8003c52:	68f9      	ldr	r1, [r7, #12]
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f024 ff37 	bl	8028ac8 <memmove>
      return __result + __count;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	4413      	add	r3, r2
    }
 8003c62:	4618      	mov	r0, r3
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <_ZN16LineSensorData_sD1Ev>:
	float position_front;
	float position_rear;

	std::vector<float> front;
	std::vector<float> rear;
}LineSensorData_s;
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b082      	sub	sp, #8
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	33d4      	adds	r3, #212	; 0xd4
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff fc12 	bl	80034a0 <_ZNSt6vectorIfSaIfEED1Ev>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	33c8      	adds	r3, #200	; 0xc8
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff fc0d 	bl	80034a0 <_ZNSt6vectorIfSaIfEED1Ev>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <_Z41__static_initialization_and_destruction_0ii>:
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d116      	bne.n	8003cce <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d111      	bne.n	8003cce <_Z41__static_initialization_and_destruction_0ii+0x3e>
LineSensorData_s ls_data = {0u};
 8003caa:	4b10      	ldr	r3, [pc, #64]	; (8003cec <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003cac:	33c8      	adds	r3, #200	; 0xc8
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	605a      	str	r2, [r3, #4]
 8003cb4:	609a      	str	r2, [r3, #8]
 8003cb6:	480e      	ldr	r0, [pc, #56]	; (8003cf0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003cb8:	f7fe ff55 	bl	8002b66 <_ZNSt6vectorIfSaIfEEC1Ev>
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003cbe:	33d4      	adds	r3, #212	; 0xd4
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	605a      	str	r2, [r3, #4]
 8003cc6:	609a      	str	r2, [r3, #8]
 8003cc8:	480a      	ldr	r0, [pc, #40]	; (8003cf4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003cca:	f7fe ff4c 	bl	8002b66 <_ZNSt6vectorIfSaIfEEC1Ev>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d107      	bne.n	8003ce4 <_Z41__static_initialization_and_destruction_0ii+0x54>
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d102      	bne.n	8003ce4 <_Z41__static_initialization_and_destruction_0ii+0x54>
 8003cde:	4803      	ldr	r0, [pc, #12]	; (8003cec <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003ce0:	f7ff ffc3 	bl	8003c6a <_ZN16LineSensorData_sD1Ev>
}
 8003ce4:	bf00      	nop
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	200001b0 	.word	0x200001b0
 8003cf0:	20000278 	.word	0x20000278
 8003cf4:	20000284 	.word	0x20000284

08003cf8 <_GLOBAL__sub_I_ls_data>:
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003d00:	2001      	movs	r0, #1
 8003d02:	f7ff ffc5 	bl	8003c90 <_Z41__static_initialization_and_destruction_0ii>
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <_GLOBAL__sub_D_ls_data>:
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003d10:	2000      	movs	r0, #0
 8003d12:	f7ff ffbd 	bl	8003c90 <_Z41__static_initialization_and_destruction_0ii>
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003d22:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d26:	eef0 7ae7 	vabs.f32	s15, s15
 8003d2a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <_ZSt5isnanf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003d42:	ed97 7a01 	vldr	s14, [r7, #4]
 8003d46:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d4a:	eeb4 7a67 	vcmp.f32	s14, s15
 8003d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d52:	bf6c      	ite	vs
 8003d54:	2301      	movvs	r3, #1
 8003d56:	2300      	movvc	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	bf14      	ite	ne
 8003d5e:	2301      	movne	r3, #1
 8003d60:	2300      	moveq	r3, #0
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	4618      	mov	r0, r3
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <_ZN3PIDC1Efffffffff>:
#include <algorithm>

class PID
{
public:
    PID(float kp, float ki, float kd, float tau, float T, float minOutput, float maxOutput, float deadband, float derivativeFilterAlpha)
 8003d70:	b480      	push	{r7}
 8003d72:	b08b      	sub	sp, #44	; 0x2c
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6278      	str	r0, [r7, #36]	; 0x24
 8003d78:	ed87 0a08 	vstr	s0, [r7, #32]
 8003d7c:	edc7 0a07 	vstr	s1, [r7, #28]
 8003d80:	ed87 1a06 	vstr	s2, [r7, #24]
 8003d84:	edc7 1a05 	vstr	s3, [r7, #20]
 8003d88:	ed87 2a04 	vstr	s4, [r7, #16]
 8003d8c:	edc7 2a03 	vstr	s5, [r7, #12]
 8003d90:	ed87 3a02 	vstr	s6, [r7, #8]
 8003d94:	edc7 3a01 	vstr	s7, [r7, #4]
 8003d98:	ed87 4a00 	vstr	s8, [r7]
        : kp_(kp), ki_(ki), kd_(kd), tau_(tau), T_(T), minOutput_(minOutput), maxOutput_(maxOutput), deadband_(deadband), derivativeFilterAlpha_(derivativeFilterAlpha)
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	6a3a      	ldr	r2, [r7, #32]
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	605a      	str	r2, [r3, #4]
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	609a      	str	r2, [r3, #8]
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	60da      	str	r2, [r3, #12]
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	611a      	str	r2, [r3, #16]
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	615a      	str	r2, [r3, #20]
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	619a      	str	r2, [r3, #24]
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	61da      	str	r2, [r3, #28]
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	621a      	str	r2, [r3, #32]
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	625a      	str	r2, [r3, #36]	; 0x24
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	629a      	str	r2, [r3, #40]	; 0x28
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	4618      	mov	r0, r3
 8003dee:	372c      	adds	r7, #44	; 0x2c
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <_ZN3PIDD1Ev>:

    ~PID() {}
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4618      	mov	r0, r3
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
	...

08003e10 <_ZN3PID6updateEfff>:
    	kp_                    = kp;
		ki_                    = ki;
		kd_                    = kd;
    }

    float update(float setpoint, float processVariable, float dt)
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08e      	sub	sp, #56	; 0x38
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e1c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003e20:	ed87 1a00 	vstr	s2, [r7]
    {
        // Small value to avoid division by zero
        const float epsilon = std::numeric_limits<float>::epsilon();
 8003e24:	f04f 5350 	mov.w	r3, #872415232	; 0x34000000
 8003e28:	633b      	str	r3, [r7, #48]	; 0x30

        // Check if the time step is very close to zero, return zero output to avoid numerical issues
        if (std::abs(dt) < epsilon) { return 0.0f; }
 8003e2a:	ed97 0a00 	vldr	s0, [r7]
 8003e2e:	f7ff ff73 	bl	8003d18 <_ZSt3absf>
 8003e32:	eef0 7a40 	vmov.f32	s15, s0
 8003e36:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 80040c8 <_ZN3PID6updateEfff+0x2b8>
 8003e3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e42:	bf4c      	ite	mi
 8003e44:	2301      	movmi	r3, #1
 8003e46:	2300      	movpl	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <_ZN3PID6updateEfff+0x44>
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	e132      	b.n	80040ba <_ZN3PID6updateEfff+0x2aa>

        // Calculate the current error between the setpoint and the process variable
        float error = setpoint - processVariable;
 8003e54:	ed97 7a02 	vldr	s14, [r7, #8]
 8003e58:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e60:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        // Check if a zero-crossing has occurred (change in sign of error)
        bool zeroCrossed = (prevError_ * error) < 0.0f;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003e6a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e7a:	bf4c      	ite	mi
 8003e7c:	2301      	movmi	r3, #1
 8003e7e:	2300      	movpl	r3, #0
 8003e80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        // Update the integral term if no zero-crossing has occurred
        if (!zeroCrossed)
 8003e84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e88:	f083 0301 	eor.w	r3, r3, #1
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d062      	beq.n	8003f58 <_ZN3PID6updateEfff+0x148>
        {
            // Calculate the integral term without considering saturation
            float unsaturatedIntegral = integral_;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e96:	637b      	str	r3, [r7, #52]	; 0x34

            // Integrate positive error if within bounds
            if (error > 0.0f && unsaturatedIntegral < maxOutput_) { unsaturatedIntegral += (error * dt); }
 8003e98:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003e9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ea4:	dd16      	ble.n	8003ed4 <_ZN3PID6updateEfff+0xc4>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	edd3 7a06 	vldr	s15, [r3, #24]
 8003eac:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003eb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb8:	d50c      	bpl.n	8003ed4 <_ZN3PID6updateEfff+0xc4>
 8003eba:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003ebe:	edd7 7a00 	vldr	s15, [r7]
 8003ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ec6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003eca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ece:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8003ed2:	e01c      	b.n	8003f0e <_ZN3PID6updateEfff+0xfe>
            // Integrate negative error if within bounds
            else if (error < 0.0f && unsaturatedIntegral > minOutput_) { unsaturatedIntegral += (error * dt); }
 8003ed4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003ed8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ee0:	d515      	bpl.n	8003f0e <_ZN3PID6updateEfff+0xfe>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	edd3 7a05 	vldr	s15, [r3, #20]
 8003ee8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003eec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef4:	dd0b      	ble.n	8003f0e <_ZN3PID6updateEfff+0xfe>
 8003ef6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003efa:	edd7 7a00 	vldr	s15, [r7]
 8003efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f02:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003f06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f0a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

            // Handle NaN case: Reset unsaturated integral term to zero
            if (std::isnan(unsaturatedIntegral)) { unsaturatedIntegral = 0.0f; }
 8003f0e:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003f12:	f7ff ff11 	bl	8003d38 <_ZSt5isnanf>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <_ZN3PID6updateEfff+0x112>
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	637b      	str	r3, [r7, #52]	; 0x34

            // Calculate the adjustment needed due to saturation
            float deltaIntegral = unsaturatedIntegral - integral_;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003f28:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003f2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f30:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

            // Back-calculation: Adjust the integral term based on the impact of saturation
            integral_ += (error * dt) - deltaIntegral;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003f3a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003f3e:	edd7 7a00 	vldr	s15, [r7]
 8003f42:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003f46:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003f4a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        {
            // Zero-crossing deadband: Do not update the integral term
        }

        // Anti-windup: Limit the integral term to the specified range
        integral_ = std::clamp(integral_, minOutput_, maxOutput_);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f103 0114 	add.w	r1, r3, #20
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	3318      	adds	r3, #24
 8003f68:	461a      	mov	r2, r3
 8003f6a:	f000 f9a7 	bl	80042bc <_ZSt5clampIfERKT_S2_S2_S2_>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	629a      	str	r2, [r3, #40]	; 0x28

        // Deadband: Scale the integral term based on the proximity to the deadband
        float deadbandFactor = 1.0f - std::min(1.0f, std::abs(error) / (deadband_ + epsilon));
 8003f76:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003f7a:	61bb      	str	r3, [r7, #24]
 8003f7c:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8003f80:	f7ff feca 	bl	8003d18 <_ZSt3absf>
 8003f84:	eef0 6a40 	vmov.f32	s13, s0
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	edd3 7a07 	vldr	s15, [r3, #28]
 8003f8e:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80040c8 <_ZN3PID6updateEfff+0x2b8>
 8003f92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f9a:	edc7 7a07 	vstr	s15, [r7, #28]
 8003f9e:	f107 021c 	add.w	r2, r7, #28
 8003fa2:	f107 0318 	add.w	r3, r7, #24
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 f9ae 	bl	800430a <_ZSt3minIfERKT_S2_S2_>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	edd3 7a00 	vldr	s15, [r3]
 8003fb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fbc:	edc7 7a08 	vstr	s15, [r7, #32]
        integral_ *= deadbandFactor;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003fc6:	edd7 7a08 	vldr	s15, [r7, #32]
 8003fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

        // Calculate the derivative term with low-pass filtering
        derivative_ = (1.0f - derivativeFilterAlpha_) * derivative_ + derivativeFilterAlpha_ * (error - prevError_) / dt;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	edd3 7a08 	vldr	s15, [r3, #32]
 8003fda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003fe8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	edd3 6a08 	vldr	s13, [r3, #32]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003ff8:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
 8003ffc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004000:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8004004:	edd7 6a00 	vldr	s13, [r7]
 8004008:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800400c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

        // Calculate the PID controller output using proportional, integral, and derivative terms
        float output = kp_ * (1 + dt / (tau_ + T_ + epsilon)) * error + ki_ * (dt / (T_ + epsilon)) * integral_ - kd_ * derivative_;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	ed93 7a00 	vldr	s14, [r3]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	edd3 6a03 	vldr	s13, [r3, #12]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	edd3 7a04 	vldr	s15, [r3, #16]
 8004028:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800402c:	eddf 6a26 	vldr	s13, [pc, #152]	; 80040c8 <_ZN3PID6updateEfff+0x2b8>
 8004030:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8004034:	ed97 6a00 	vldr	s12, [r7]
 8004038:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800403c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004040:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004044:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004048:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800404c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	edd3 6a01 	vldr	s13, [r3, #4]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	edd3 7a04 	vldr	s15, [r3, #16]
 800405c:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 80040c8 <_ZN3PID6updateEfff+0x2b8>
 8004060:	ee37 6a86 	vadd.f32	s12, s15, s12
 8004064:	edd7 5a00 	vldr	s11, [r7]
 8004068:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800406c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004076:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800407a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	edd3 6a02 	vldr	s13, [r3, #8]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800408a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800408e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004092:	edc7 7a05 	vstr	s15, [r7, #20]

        // Output clamping: Limit the output within the specified range
        output = std::clamp(output, minOutput_, maxOutput_);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f103 0114 	add.w	r1, r3, #20
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f103 0218 	add.w	r2, r3, #24
 80040a2:	f107 0314 	add.w	r3, r7, #20
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 f908 	bl	80042bc <_ZSt5clampIfERKT_S2_S2_S2_>
 80040ac:	4603      	mov	r3, r0
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	617b      	str	r3, [r7, #20]

        // Update the previous error for the next iteration
        prevError_ = error;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040b6:	625a      	str	r2, [r3, #36]	; 0x24

        // Return the calculated PID controller output
        return output;
 80040b8:	697b      	ldr	r3, [r7, #20]
    }
 80040ba:	ee07 3a90 	vmov	s15, r3
 80040be:	eeb0 0a67 	vmov.f32	s0, s15
 80040c2:	3738      	adds	r7, #56	; 0x38
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	34000000 	.word	0x34000000

080040cc <_Z16MotorControlTaskv>:
PID motorcontrol_pid{SPEED_CONTROLER_KP,SPEED_CONTROLLER_KI, SPEED_CONTROLLER_KD, SPEED_CONTROLLER_TAU, SPEED_CONTROLLER_T, SPEED_CONTROLLER_MIN, SPEED_CONTROLLER_MAX, SPEED_CONTROLLER_DEADBAND,SPEED_CONTROLLER_DERIVATIVE_FILTER_ALPHA};
uint32_t tick_counter = 0u;
uint32_t tick_counter_prev = 0u;

void MotorControlTask()
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
	if((usWidth_throttle > 1800) && (usWidth_throttle < 2800))
 80040d2:	4b67      	ldr	r3, [pc, #412]	; (8004270 <_Z16MotorControlTaskv+0x1a4>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80040da:	d90a      	bls.n	80040f2 <_Z16MotorControlTaskv+0x26>
 80040dc:	4b64      	ldr	r3, [pc, #400]	; (8004270 <_Z16MotorControlTaskv+0x1a4>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 80040e4:	d205      	bcs.n	80040f2 <_Z16MotorControlTaskv+0x26>
	{
		HAL_GPIO_WritePin(DRIVE_ENABLE_GPIO_Port, DRIVE_ENABLE_Pin, GPIO_PIN_SET);
 80040e6:	2201      	movs	r2, #1
 80040e8:	2108      	movs	r1, #8
 80040ea:	4862      	ldr	r0, [pc, #392]	; (8004274 <_Z16MotorControlTaskv+0x1a8>)
 80040ec:	f017 f80e 	bl	801b10c <HAL_GPIO_WritePin>
 80040f0:	e010      	b.n	8004114 <_Z16MotorControlTaskv+0x48>
	}
	else
	{
		HAL_GPIO_WritePin(DRIVE_ENABLE_GPIO_Port, DRIVE_ENABLE_Pin, GPIO_PIN_RESET);
 80040f2:	2200      	movs	r2, #0
 80040f4:	2108      	movs	r1, #8
 80040f6:	485f      	ldr	r0, [pc, #380]	; (8004274 <_Z16MotorControlTaskv+0x1a8>)
 80040f8:	f017 f808 	bl	801b10c <HAL_GPIO_WritePin>
		motorcontrol.target_velocity = 0.0f;
 80040fc:	4b5e      	ldr	r3, [pc, #376]	; (8004278 <_Z16MotorControlTaskv+0x1ac>)
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	60da      	str	r2, [r3, #12]
		pi_integral_error = 0.0f;
 8004104:	4b5d      	ldr	r3, [pc, #372]	; (800427c <_Z16MotorControlTaskv+0x1b0>)
 8004106:	f04f 0200 	mov.w	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
		motorcontrol.duty_cycle = 0.5f;
 800410c:	4b5a      	ldr	r3, [pc, #360]	; (8004278 <_Z16MotorControlTaskv+0x1ac>)
 800410e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8004112:	611a      	str	r2, [r3, #16]
	}
	motorcontrol.battery_voltage = ((float)(adc_values.motor_batt_voltage_raw)) / 4096.0f * 3.3f * ANALOG_TO_MOTOR_BATT;
 8004114:	4b5a      	ldr	r3, [pc, #360]	; (8004280 <_Z16MotorControlTaskv+0x1b4>)
 8004116:	881b      	ldrh	r3, [r3, #0]
 8004118:	ee07 3a90 	vmov	s15, r3
 800411c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004120:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004284 <_Z16MotorControlTaskv+0x1b8>
 8004124:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004128:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8004288 <_Z16MotorControlTaskv+0x1bc>
 800412c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004130:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004134:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004138:	4b4f      	ldr	r3, [pc, #316]	; (8004278 <_Z16MotorControlTaskv+0x1ac>)
 800413a:	edc3 7a00 	vstr	s15, [r3]
	motorcontrol.motor_current = (((float)((adc_values.motor_curr_raw)) / 4096.0f) * 3.3f - MOTOR_CURR_NULL) / MOTOR_CURR_SENSITIVITY;
 800413e:	4b50      	ldr	r3, [pc, #320]	; (8004280 <_Z16MotorControlTaskv+0x1b4>)
 8004140:	885b      	ldrh	r3, [r3, #2]
 8004142:	ee07 3a90 	vmov	s15, r3
 8004146:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800414a:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004284 <_Z16MotorControlTaskv+0x1b8>
 800414e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004152:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8004288 <_Z16MotorControlTaskv+0x1bc>
 8004156:	ee67 7a87 	vmul.f32	s15, s15, s14
 800415a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800428c <_Z16MotorControlTaskv+0x1c0>
 800415e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004162:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8004290 <_Z16MotorControlTaskv+0x1c4>
 8004166:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800416a:	4b43      	ldr	r3, [pc, #268]	; (8004278 <_Z16MotorControlTaskv+0x1ac>)
 800416c:	edc3 7a01 	vstr	s15, [r3, #4]


	tick_counter_prev = tick_counter;
 8004170:	4b48      	ldr	r3, [pc, #288]	; (8004294 <_Z16MotorControlTaskv+0x1c8>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a48      	ldr	r2, [pc, #288]	; (8004298 <_Z16MotorControlTaskv+0x1cc>)
 8004176:	6013      	str	r3, [r2, #0]
	tick_counter = HAL_GetTick();
 8004178:	f014 fd6c 	bl	8018c54 <HAL_GetTick>
 800417c:	4603      	mov	r3, r0
 800417e:	4a45      	ldr	r2, [pc, #276]	; (8004294 <_Z16MotorControlTaskv+0x1c8>)
 8004180:	6013      	str	r3, [r2, #0]
    float dt = (((float)tick_counter) - ((float)(tick_counter_prev))) / 1000.0f;
 8004182:	4b44      	ldr	r3, [pc, #272]	; (8004294 <_Z16MotorControlTaskv+0x1c8>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	ee07 3a90 	vmov	s15, r3
 800418a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800418e:	4b42      	ldr	r3, [pc, #264]	; (8004298 <_Z16MotorControlTaskv+0x1cc>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	ee07 3a90 	vmov	s15, r3
 8004196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800419a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800419e:	eddf 6a3f 	vldr	s13, [pc, #252]	; 800429c <_Z16MotorControlTaskv+0x1d0>
 80041a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041a6:	edc7 7a01 	vstr	s15, [r7, #4]
	motorcontrol.duty_cycle = motorcontrol_pid.update(motorcontrol.target_velocity, motorcontrol.actual_velocity, dt);
 80041aa:	4b33      	ldr	r3, [pc, #204]	; (8004278 <_Z16MotorControlTaskv+0x1ac>)
 80041ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80041b0:	4b31      	ldr	r3, [pc, #196]	; (8004278 <_Z16MotorControlTaskv+0x1ac>)
 80041b2:	ed93 7a02 	vldr	s14, [r3, #8]
 80041b6:	ed97 1a01 	vldr	s2, [r7, #4]
 80041ba:	eef0 0a47 	vmov.f32	s1, s14
 80041be:	eeb0 0a67 	vmov.f32	s0, s15
 80041c2:	4837      	ldr	r0, [pc, #220]	; (80042a0 <_Z16MotorControlTaskv+0x1d4>)
 80041c4:	f7ff fe24 	bl	8003e10 <_ZN3PID6updateEfff>
 80041c8:	eef0 7a40 	vmov.f32	s15, s0
 80041cc:	4b2a      	ldr	r3, [pc, #168]	; (8004278 <_Z16MotorControlTaskv+0x1ac>)
 80041ce:	edc3 7a04 	vstr	s15, [r3, #16]
	motorcontrol.duty_cycle += 0.5f;
 80041d2:	4b29      	ldr	r3, [pc, #164]	; (8004278 <_Z16MotorControlTaskv+0x1ac>)
 80041d4:	edd3 7a04 	vldr	s15, [r3, #16]
 80041d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80041dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041e0:	4b25      	ldr	r3, [pc, #148]	; (8004278 <_Z16MotorControlTaskv+0x1ac>)
 80041e2:	edc3 7a04 	vstr	s15, [r3, #16]
	motorcontrol.duty_cycle = (motorcontrol.duty_cycle > 0.95f) ? 0.95f : motorcontrol.duty_cycle;
 80041e6:	4b24      	ldr	r3, [pc, #144]	; (8004278 <_Z16MotorControlTaskv+0x1ac>)
 80041e8:	edd3 7a04 	vldr	s15, [r3, #16]
 80041ec:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80042a4 <_Z16MotorControlTaskv+0x1d8>
 80041f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041f8:	dd01      	ble.n	80041fe <_Z16MotorControlTaskv+0x132>
 80041fa:	4b2b      	ldr	r3, [pc, #172]	; (80042a8 <_Z16MotorControlTaskv+0x1dc>)
 80041fc:	e001      	b.n	8004202 <_Z16MotorControlTaskv+0x136>
 80041fe:	4b1e      	ldr	r3, [pc, #120]	; (8004278 <_Z16MotorControlTaskv+0x1ac>)
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	4a1d      	ldr	r2, [pc, #116]	; (8004278 <_Z16MotorControlTaskv+0x1ac>)
 8004204:	6113      	str	r3, [r2, #16]
	motorcontrol.duty_cycle = (motorcontrol.duty_cycle < 0.05f) ? 0.05f : motorcontrol.duty_cycle;
 8004206:	4b1c      	ldr	r3, [pc, #112]	; (8004278 <_Z16MotorControlTaskv+0x1ac>)
 8004208:	edd3 7a04 	vldr	s15, [r3, #16]
 800420c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80042ac <_Z16MotorControlTaskv+0x1e0>
 8004210:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004218:	d501      	bpl.n	800421e <_Z16MotorControlTaskv+0x152>
 800421a:	4b25      	ldr	r3, [pc, #148]	; (80042b0 <_Z16MotorControlTaskv+0x1e4>)
 800421c:	e001      	b.n	8004222 <_Z16MotorControlTaskv+0x156>
 800421e:	4b16      	ldr	r3, [pc, #88]	; (8004278 <_Z16MotorControlTaskv+0x1ac>)
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	4a15      	ldr	r2, [pc, #84]	; (8004278 <_Z16MotorControlTaskv+0x1ac>)
 8004224:	6113      	str	r3, [r2, #16]
	{
		motorcontrol.duty_cycle = 0.5f;

	}
*/
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, motorcontrol.duty_cycle * PWM_COUNTER_PREIOD);
 8004226:	4b14      	ldr	r3, [pc, #80]	; (8004278 <_Z16MotorControlTaskv+0x1ac>)
 8004228:	edd3 7a04 	vldr	s15, [r3, #16]
 800422c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80042b4 <_Z16MotorControlTaskv+0x1e8>
 8004230:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004234:	4b20      	ldr	r3, [pc, #128]	; (80042b8 <_Z16MotorControlTaskv+0x1ec>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800423c:	ee17 2a90 	vmov	r2, s15
 8004240:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM_COUNTER_PREIOD - (motorcontrol.duty_cycle * PWM_COUNTER_PREIOD));
 8004242:	4b0d      	ldr	r3, [pc, #52]	; (8004278 <_Z16MotorControlTaskv+0x1ac>)
 8004244:	edd3 7a04 	vldr	s15, [r3, #16]
 8004248:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80042b4 <_Z16MotorControlTaskv+0x1e8>
 800424c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004250:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80042b4 <_Z16MotorControlTaskv+0x1e8>
 8004254:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004258:	4b17      	ldr	r3, [pc, #92]	; (80042b8 <_Z16MotorControlTaskv+0x1ec>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004260:	ee17 2a90 	vmov	r2, s15
 8004264:	635a      	str	r2, [r3, #52]	; 0x34

}
 8004266:	bf00      	nop
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	200002f8 	.word	0x200002f8
 8004274:	42021400 	.word	0x42021400
 8004278:	20000290 	.word	0x20000290
 800427c:	200002a4 	.word	0x200002a4
 8004280:	2000013c 	.word	0x2000013c
 8004284:	45800000 	.word	0x45800000
 8004288:	40533333 	.word	0x40533333
 800428c:	3fcb851f 	.word	0x3fcb851f
 8004290:	3c0ce704 	.word	0x3c0ce704
 8004294:	200002d8 	.word	0x200002d8
 8004298:	200002dc 	.word	0x200002dc
 800429c:	447a0000 	.word	0x447a0000
 80042a0:	200002a8 	.word	0x200002a8
 80042a4:	3f733333 	.word	0x3f733333
 80042a8:	3f733333 	.word	0x3f733333
 80042ac:	3d4ccccd 	.word	0x3d4ccccd
 80042b0:	3d4ccccd 	.word	0x3d4ccccd
 80042b4:	44e54000 	.word	0x44e54000
 80042b8:	20000bb0 	.word	0x20000bb0

080042bc <_ZSt5clampIfERKT_S2_S2_S2_>:
   *  @param  __hi   An upper limit of arbitrary type.
   *  @return max(__val, __lo) if __val < __hi or min(__val, __hi) otherwise.
   */
  template<typename _Tp>
    constexpr const _Tp&
    clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
    {
      __glibcxx_assert(!(__hi < __lo));
      return (__val < __lo) ? __lo : (__hi < __val) ? __hi : __val;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	ed93 7a00 	vldr	s14, [r3]
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	edd3 7a00 	vldr	s15, [r3]
 80042d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042dc:	d501      	bpl.n	80042e2 <_ZSt5clampIfERKT_S2_S2_S2_+0x26>
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	e00d      	b.n	80042fe <_ZSt5clampIfERKT_S2_S2_S2_+0x42>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	ed93 7a00 	vldr	s14, [r3]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	edd3 7a00 	vldr	s15, [r3]
 80042ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f6:	d501      	bpl.n	80042fc <_ZSt5clampIfERKT_S2_S2_S2_+0x40>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	e000      	b.n	80042fe <_ZSt5clampIfERKT_S2_S2_S2_+0x42>
 80042fc:	68fb      	ldr	r3, [r7, #12]
    }
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
 8004312:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	ed93 7a00 	vldr	s14, [r3]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	edd3 7a00 	vldr	s15, [r3]
 8004320:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004328:	d501      	bpl.n	800432e <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	e000      	b.n	8004330 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 800432e:	687b      	ldr	r3, [r7, #4]
    }
 8004330:	4618      	mov	r0, r3
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <_Z41__static_initialization_and_destruction_0ii>:
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d119      	bne.n	8004380 <_Z41__static_initialization_and_destruction_0ii+0x44>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004352:	4293      	cmp	r3, r2
 8004354:	d114      	bne.n	8004380 <_Z41__static_initialization_and_destruction_0ii+0x44>
PID motorcontrol_pid{SPEED_CONTROLER_KP,SPEED_CONTROLLER_KI, SPEED_CONTROLLER_KD, SPEED_CONTROLLER_TAU, SPEED_CONTROLLER_T, SPEED_CONTROLLER_MIN, SPEED_CONTROLLER_MAX, SPEED_CONTROLLER_DEADBAND,SPEED_CONTROLLER_DERIVATIVE_FILTER_ALPHA};
 8004356:	ed9f 4a12 	vldr	s8, [pc, #72]	; 80043a0 <_Z41__static_initialization_and_destruction_0ii+0x64>
 800435a:	eddf 3a11 	vldr	s7, [pc, #68]	; 80043a0 <_Z41__static_initialization_and_destruction_0ii+0x64>
 800435e:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 8004362:	eefe 2a00 	vmov.f32	s5, #224	; 0xbf000000 -0.5
 8004366:	ed9f 2a0f 	vldr	s4, [pc, #60]	; 80043a4 <_Z41__static_initialization_and_destruction_0ii+0x68>
 800436a:	eddf 1a0f 	vldr	s3, [pc, #60]	; 80043a8 <_Z41__static_initialization_and_destruction_0ii+0x6c>
 800436e:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 80043a0 <_Z41__static_initialization_and_destruction_0ii+0x64>
 8004372:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80043ac <_Z41__static_initialization_and_destruction_0ii+0x70>
 8004376:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80043b0 <_Z41__static_initialization_and_destruction_0ii+0x74>
 800437a:	480e      	ldr	r0, [pc, #56]	; (80043b4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800437c:	f7ff fcf8 	bl	8003d70 <_ZN3PIDC1Efffffffff>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d107      	bne.n	8004396 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800438c:	4293      	cmp	r3, r2
 800438e:	d102      	bne.n	8004396 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8004390:	4808      	ldr	r0, [pc, #32]	; (80043b4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004392:	f7ff fd31 	bl	8003df8 <_ZN3PIDD1Ev>
}
 8004396:	bf00      	nop
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	00000000 	.word	0x00000000
 80043a4:	3ba3d70a 	.word	0x3ba3d70a
 80043a8:	3d4ccccd 	.word	0x3d4ccccd
 80043ac:	3fe8f5c3 	.word	0x3fe8f5c3
 80043b0:	3e4ccccd 	.word	0x3e4ccccd
 80043b4:	200002a8 	.word	0x200002a8

080043b8 <_GLOBAL__sub_I_motorcontrol>:
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80043c0:	2001      	movs	r0, #1
 80043c2:	f7ff ffbb 	bl	800433c <_Z41__static_initialization_and_destruction_0ii>
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <_GLOBAL__sub_D_motorcontrol>:
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80043d0:	2000      	movs	r0, #0
 80043d2:	f7ff ffb3 	bl	800433c <_Z41__static_initialization_and_destruction_0ii>
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <_Z10Radio_Initv>:
bool flood_active = false;
uint8_t flood_counter = 0;
char pirate_from, pirate_to, pirate_next;
int pirate_percentage = 0;
void Radio_Init()
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT (&huart4, radio_rxBuffer, 12);
 80043dc:	220c      	movs	r2, #12
 80043de:	4903      	ldr	r1, [pc, #12]	; (80043ec <_Z10Radio_Initv+0x14>)
 80043e0:	4803      	ldr	r0, [pc, #12]	; (80043f0 <_Z10Radio_Initv+0x18>)
 80043e2:	f01c fc7b 	bl	8020cdc <HAL_UART_Receive_IT>

}
 80043e6:	bf00      	nop
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	200002e0 	.word	0x200002e0
 80043f0:	2000089c 	.word	0x2000089c

080043f4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af02      	add	r7, sp, #8
 80043fa:	6078      	str	r0, [r7, #4]
	uint8_t i, length;
    // Check to see where is the termination character to determine what type of message is received
    for(i = 0; i < 12; ++i)
 80043fc:	2300      	movs	r3, #0
 80043fe:	73fb      	strb	r3, [r7, #15]
 8004400:	e009      	b.n	8004416 <HAL_UART_RxCpltCallback+0x22>
    {
    	if(radio_rxBuffer[i] == '\r')
 8004402:	7bfb      	ldrb	r3, [r7, #15]
 8004404:	4a20      	ldr	r2, [pc, #128]	; (8004488 <HAL_UART_RxCpltCallback+0x94>)
 8004406:	5cd3      	ldrb	r3, [r2, r3]
 8004408:	2b0d      	cmp	r3, #13
 800440a:	d101      	bne.n	8004410 <HAL_UART_RxCpltCallback+0x1c>
    	{
    		length = i;
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < 12; ++i)
 8004410:	7bfb      	ldrb	r3, [r7, #15]
 8004412:	3301      	adds	r3, #1
 8004414:	73fb      	strb	r3, [r7, #15]
 8004416:	7bfb      	ldrb	r3, [r7, #15]
 8004418:	2b0b      	cmp	r3, #11
 800441a:	d9f2      	bls.n	8004402 <HAL_UART_RxCpltCallback+0xe>
    	}
    }
    // Labirinth countdown message received
    if(length == 1)
 800441c:	7bbb      	ldrb	r3, [r7, #14]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d103      	bne.n	800442a <HAL_UART_RxCpltCallback+0x36>
    {
    	countdown_value = radio_rxBuffer[0];
 8004422:	4b19      	ldr	r3, [pc, #100]	; (8004488 <HAL_UART_RxCpltCallback+0x94>)
 8004424:	781a      	ldrb	r2, [r3, #0]
 8004426:	4b19      	ldr	r3, [pc, #100]	; (800448c <HAL_UART_RxCpltCallback+0x98>)
 8004428:	701a      	strb	r2, [r3, #0]
    }
    if(length == 6)
 800442a:	7bbb      	ldrb	r3, [r7, #14]
 800442c:	2b06      	cmp	r3, #6
 800442e:	d115      	bne.n	800445c <HAL_UART_RxCpltCallback+0x68>
    {
    	//FLOOD message received
    	if(!strcmp("FLOOD!\r", reinterpret_cast<const char*>(radio_rxBuffer)))
 8004430:	4915      	ldr	r1, [pc, #84]	; (8004488 <HAL_UART_RxCpltCallback+0x94>)
 8004432:	4817      	ldr	r0, [pc, #92]	; (8004490 <HAL_UART_RxCpltCallback+0x9c>)
 8004434:	f7fb ff04 	bl	8000240 <strcmp>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d103      	bne.n	8004446 <HAL_UART_RxCpltCallback+0x52>
    	{
    		flood_active = true;
 800443e:	4b15      	ldr	r3, [pc, #84]	; (8004494 <HAL_UART_RxCpltCallback+0xa0>)
 8004440:	2201      	movs	r2, #1
 8004442:	701a      	strb	r2, [r3, #0]
 8004444:	e010      	b.n	8004468 <HAL_UART_RxCpltCallback+0x74>
    	}
    	else
    	{
    		sscanf(reinterpret_cast<const char*>(radio_rxBuffer), "%c%c%c%03d", &pirate_from, &pirate_to, &pirate_next, &pirate_percentage);
 8004446:	4b14      	ldr	r3, [pc, #80]	; (8004498 <HAL_UART_RxCpltCallback+0xa4>)
 8004448:	9301      	str	r3, [sp, #4]
 800444a:	4b14      	ldr	r3, [pc, #80]	; (800449c <HAL_UART_RxCpltCallback+0xa8>)
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	4b14      	ldr	r3, [pc, #80]	; (80044a0 <HAL_UART_RxCpltCallback+0xac>)
 8004450:	4a14      	ldr	r2, [pc, #80]	; (80044a4 <HAL_UART_RxCpltCallback+0xb0>)
 8004452:	4915      	ldr	r1, [pc, #84]	; (80044a8 <HAL_UART_RxCpltCallback+0xb4>)
 8004454:	480c      	ldr	r0, [pc, #48]	; (8004488 <HAL_UART_RxCpltCallback+0x94>)
 8004456:	f024 fb09 	bl	8028a6c <siscanf>
 800445a:	e005      	b.n	8004468 <HAL_UART_RxCpltCallback+0x74>
    	}
    }

    else
    {
    	flood_counter++;
 800445c:	4b13      	ldr	r3, [pc, #76]	; (80044ac <HAL_UART_RxCpltCallback+0xb8>)
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	3301      	adds	r3, #1
 8004462:	b2da      	uxtb	r2, r3
 8004464:	4b11      	ldr	r3, [pc, #68]	; (80044ac <HAL_UART_RxCpltCallback+0xb8>)
 8004466:	701a      	strb	r2, [r3, #0]
    }

    if(flood_counter > 10)
 8004468:	4b10      	ldr	r3, [pc, #64]	; (80044ac <HAL_UART_RxCpltCallback+0xb8>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	2b0a      	cmp	r3, #10
 800446e:	d902      	bls.n	8004476 <HAL_UART_RxCpltCallback+0x82>
    {
    	flood_active = false;
 8004470:	4b08      	ldr	r3, [pc, #32]	; (8004494 <HAL_UART_RxCpltCallback+0xa0>)
 8004472:	2200      	movs	r2, #0
 8004474:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart4, radio_rxBuffer, 12);
 8004476:	220c      	movs	r2, #12
 8004478:	4903      	ldr	r1, [pc, #12]	; (8004488 <HAL_UART_RxCpltCallback+0x94>)
 800447a:	480d      	ldr	r0, [pc, #52]	; (80044b0 <HAL_UART_RxCpltCallback+0xbc>)
 800447c:	f01c fc2e 	bl	8020cdc <HAL_UART_Receive_IT>

}
 8004480:	bf00      	nop
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	200002e0 	.word	0x200002e0
 800448c:	2000008c 	.word	0x2000008c
 8004490:	08029694 	.word	0x08029694
 8004494:	200002ec 	.word	0x200002ec
 8004498:	200002f4 	.word	0x200002f4
 800449c:	200002f0 	.word	0x200002f0
 80044a0:	200002ef 	.word	0x200002ef
 80044a4:	200002ee 	.word	0x200002ee
 80044a8:	0802969c 	.word	0x0802969c
 80044ac:	200002ed 	.word	0x200002ed
 80044b0:	2000089c 	.word	0x2000089c

080044b4 <_Z16SetSteeringAnglef>:
uint8_t Is_First_Captured = 0;


/* Angle in +90 to -90 degree */
void SetSteeringAngle(float angle)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	ed87 0a01 	vstr	s0, [r7, #4]
	if((usWidth_throttle > 1800) && (usWidth_throttle < 2800))
 80044be:	4b16      	ldr	r3, [pc, #88]	; (8004518 <_Z16SetSteeringAnglef+0x64>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80044c6:	d91c      	bls.n	8004502 <_Z16SetSteeringAnglef+0x4e>
 80044c8:	4b13      	ldr	r3, [pc, #76]	; (8004518 <_Z16SetSteeringAnglef+0x64>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 80044d0:	d217      	bcs.n	8004502 <_Z16SetSteeringAnglef+0x4e>
	{
		uint16_t compare = SERVO_NULL + (angle/ 22.5f * SERVO_RANGE);
 80044d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80044d6:	eddf 6a11 	vldr	s13, [pc, #68]	; 800451c <_Z16SetSteeringAnglef+0x68>
 80044da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044de:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004520 <_Z16SetSteeringAnglef+0x6c>
 80044e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044e6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004524 <_Z16SetSteeringAnglef+0x70>
 80044ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044f2:	ee17 3a90 	vmov	r3, s15
 80044f6:	81fb      	strh	r3, [r7, #14]
	    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, compare);	}
 80044f8:	4b0b      	ldr	r3, [pc, #44]	; (8004528 <_Z16SetSteeringAnglef+0x74>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	89fa      	ldrh	r2, [r7, #14]
 80044fe:	635a      	str	r2, [r3, #52]	; 0x34
 8004500:	e004      	b.n	800450c <_Z16SetSteeringAnglef+0x58>
	else
	{
	    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8004502:	4b09      	ldr	r3, [pc, #36]	; (8004528 <_Z16SetSteeringAnglef+0x74>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2200      	movs	r2, #0
 8004508:	635a      	str	r2, [r3, #52]	; 0x34
	}

}
 800450a:	bf00      	nop
 800450c:	bf00      	nop
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	200002f8 	.word	0x200002f8
 800451c:	41b40000 	.word	0x41b40000
 8004520:	43c80000 	.word	0x43c80000
 8004524:	44960000 	.word	0x44960000
 8004528:	20000c48 	.word	0x20000c48

0800452c <HAL_TIM_IC_CaptureCallback>:



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
	// RISING
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	7f1b      	ldrb	r3, [r3, #28]
 8004538:	2b04      	cmp	r3, #4
 800453a:	d104      	bne.n	8004546 <HAL_TIM_IC_CaptureCallback+0x1a>
	{
		__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2200      	movs	r2, #0
 8004542:	625a      	str	r2, [r3, #36]	; 0x24
		float refClock = TIMCLOCK/(PRESCALAR);
		float mFactor = 1000000/refClock;

		usWidth_throttle = falling_value*mFactor;
	}
}
 8004544:	e024      	b.n	8004590 <HAL_TIM_IC_CaptureCallback+0x64>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	7f1b      	ldrb	r3, [r3, #28]
 800454a:	2b08      	cmp	r3, #8
 800454c:	d120      	bne.n	8004590 <HAL_TIM_IC_CaptureCallback+0x64>
		falling_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read second value
 800454e:	210c      	movs	r1, #12
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f01b fbe7 	bl	801fd24 <HAL_TIM_ReadCapturedValue>
 8004556:	4603      	mov	r3, r0
 8004558:	4a0f      	ldr	r2, [pc, #60]	; (8004598 <HAL_TIM_IC_CaptureCallback+0x6c>)
 800455a:	6013      	str	r3, [r2, #0]
		float refClock = TIMCLOCK/(PRESCALAR);
 800455c:	4b0f      	ldr	r3, [pc, #60]	; (800459c <HAL_TIM_IC_CaptureCallback+0x70>)
 800455e:	60fb      	str	r3, [r7, #12]
		float mFactor = 1000000/refClock;
 8004560:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80045a0 <HAL_TIM_IC_CaptureCallback+0x74>
 8004564:	ed97 7a03 	vldr	s14, [r7, #12]
 8004568:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800456c:	edc7 7a02 	vstr	s15, [r7, #8]
		usWidth_throttle = falling_value*mFactor;
 8004570:	4b09      	ldr	r3, [pc, #36]	; (8004598 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	ee07 3a90 	vmov	s15, r3
 8004578:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800457c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004584:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004588:	ee17 2a90 	vmov	r2, s15
 800458c:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <HAL_TIM_IC_CaptureCallback+0x78>)
 800458e:	601a      	str	r2, [r3, #0]
}
 8004590:	bf00      	nop
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	200002fc 	.word	0x200002fc
 800459c:	49742400 	.word	0x49742400
 80045a0:	49742400 	.word	0x49742400
 80045a4:	200002f8 	.word	0x200002f8

080045a8 <_ZNSt9__cmp_cat8__unspecC1EPS0_>:

    enum class _Ncmp : type { _Unordered = 2 };

    struct __unspec
    {
      constexpr __unspec(__unspec*) noexcept { }
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4618      	mov	r0, r3
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <_ZNSt16partial_orderingC1ENSt9__cmp_cat4_OrdE>:
  {
    // less=0xff, equiv=0x00, greater=0x01, unordered=0x02
    __cmp_cat::type _M_value;

    constexpr explicit
    partial_ordering(__cmp_cat::_Ord __v) noexcept
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	460b      	mov	r3, r1
 80045ca:	70fb      	strb	r3, [r7, #3]
    : _M_value(__cmp_cat::type(__v))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	78fa      	ldrb	r2, [r7, #3]
 80045d0:	701a      	strb	r2, [r3, #0]
    { }
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4618      	mov	r0, r3
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <_ZSteqSt16partial_orderingNSt9__cmp_cat8__unspecE>:
    static const partial_ordering greater;
    static const partial_ordering unordered;

    // comparisons
    friend constexpr bool
    operator==(partial_ordering __v, __cmp_cat::__unspec) noexcept
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	7138      	strb	r0, [r7, #4]
 80045e8:	7039      	strb	r1, [r7, #0]
    { return __v._M_value == 0; }
 80045ea:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	bf0c      	ite	eq
 80045f2:	2301      	moveq	r3, #1
 80045f4:	2300      	movne	r3, #0
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	4618      	mov	r0, r3
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <_ZStgtSt16partial_orderingNSt9__cmp_cat8__unspecE>:
    friend constexpr bool
    operator< (partial_ordering __v, __cmp_cat::__unspec) noexcept
    { return __v._M_value == -1; }

    friend constexpr bool
    operator> (partial_ordering __v, __cmp_cat::__unspec) noexcept
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	7138      	strb	r0, [r7, #4]
 800460c:	7039      	strb	r1, [r7, #0]
    { return __v._M_value == 1; }
 800460e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004612:	2b01      	cmp	r3, #1
 8004614:	bf0c      	ite	eq
 8004616:	2301      	moveq	r3, #1
 8004618:	2300      	movne	r3, #0
 800461a:	b2db      	uxtb	r3, r3
 800461c:	4618      	mov	r0, r3
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <_ZNKSt15strong_orderingcvSt16partial_orderingEv>:
    static const strong_ordering less;
    static const strong_ordering equal;
    static const strong_ordering equivalent;
    static const strong_ordering greater;

    constexpr operator partial_ordering() const noexcept
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
    { return partial_ordering(__cmp_cat::_Ord(_M_value)); }
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f993 2000 	ldrsb.w	r2, [r3]
 8004636:	f107 030c 	add.w	r3, r7, #12
 800463a:	4611      	mov	r1, r2
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff ffbf 	bl	80045c0 <_ZNSt16partial_orderingC1ENSt9__cmp_cat4_OrdE>
 8004642:	7b3b      	ldrb	r3, [r7, #12]
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>:

    friend constexpr bool
    operator==(strong_ordering, strong_ordering) noexcept = default;

    friend constexpr bool
    operator< (strong_ordering __v, __cmp_cat::__unspec) noexcept
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	7138      	strb	r0, [r7, #4]
 8004654:	7039      	strb	r1, [r7, #0]
    { return __v._M_value < 0; }
 8004656:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800465a:	b2db      	uxtb	r3, r3
 800465c:	09db      	lsrs	r3, r3, #7
 800465e:	b2db      	uxtb	r3, r3
 8004660:	4618      	mov	r0, r3
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>:
  };

  _GLIBCXX14_CONSTEXPR
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0
 8004670:	bf00      	nop
 8004672:	4618      	mov	r0, r3
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>:
  { return _Val_less_iter(); }

  _GLIBCXX20_CONSTEXPR
  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	7138      	strb	r0, [r7, #4]
 8004684:	bf00      	nop
 8004686:	4618      	mov	r0, r3
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	fab3 f383 	clz	r3, r3
 80046a0:	f1c3 031f 	rsb	r3, r3, #31
 80046a4:	4618      	mov	r0, r3
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <_ZNSt14numeric_limitsIfE8infinityEv>:
	= bool(__FLT_HAS_DENORM__) ? denorm_present : denorm_absent;
      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss
       = __glibcxx_float_has_denorm_loss;

      static _GLIBCXX_CONSTEXPR float
      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_valf(); }
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80046b8:	ee07 3a90 	vmov	s15, r3
 80046bc:	eeb0 0a67 	vmov.f32	s0, s15
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80046d2:	edc7 0a00 	vstr	s1, [r7]
 80046d6:	edd7 0a00 	vldr	s1, [r7]
 80046da:	ed97 0a01 	vldr	s0, [r7, #4]
 80046de:	f021 fa87 	bl	8025bf0 <atan2f>
 80046e2:	eef0 7a40 	vmov.f32	s15, s0
 80046e6:	eeb0 0a67 	vmov.f32	s0, s15
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80046fa:	ed97 0a01 	vldr	s0, [r7, #4]
 80046fe:	f021 fa79 	bl	8025bf4 <cosf>
 8004702:	eef0 7a40 	vmov.f32	s15, s0
 8004706:	eeb0 0a67 	vmov.f32	s0, s15
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	ed87 0a01 	vstr	s0, [r7, #4]
 800471a:	edd7 7a01 	vldr	s15, [r7, #4]
 800471e:	eef0 7ae7 	vabs.f32	s15, s15
 8004722:	eeb0 0a67 	vmov.f32	s0, s15
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <_ZSt3sinf>:
  { return __builtin_sinf(__x); }
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	ed87 0a01 	vstr	s0, [r7, #4]
 800473a:	ed97 0a01 	vldr	s0, [r7, #4]
 800473e:	f021 fa9d 	bl	8025c7c <sinf>
 8004742:	eef0 7a40 	vmov.f32	s15, s0
 8004746:	eeb0 0a67 	vmov.f32	s0, s15
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <_ZNSt7complexIfEC1Eff>:
      typedef float value_type;
      typedef __complex__ float _ComplexT;

      _GLIBCXX_CONSTEXPR complex(_ComplexT __z) : _M_value(__z) { }

      _GLIBCXX_CONSTEXPR complex(float __r = 0.0f, float __i = 0.0f)
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	ed87 0a02 	vstr	s0, [r7, #8]
 800475c:	edc7 0a01 	vstr	s1, [r7, #4]
#if __cplusplus >= 201103L
      : _M_value{ __r, __i } { }
 8004760:	68b9      	ldr	r1, [r7, #8]
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6019      	str	r1, [r3, #0]
 8004768:	605a      	str	r2, [r3, #4]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4618      	mov	r0, r3
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <_ZNKSt7complexIfE4realB5cxx11Ev>:
#if __cplusplus >= 201103L
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // DR 387. std::complex over-encapsulated.
      __attribute ((__abi_tag__ ("cxx11")))
      constexpr float
      real() const { return __real__ _M_value; }
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	ee07 3a90 	vmov	s15, r3
 8004788:	eeb0 0a67 	vmov.f32	s0, s15
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <_ZNSt7complexIfEmLEf>:
	_M_value -= __f;
	return *this;
      }

      _GLIBCXX20_CONSTEXPR complex&
      operator*=(float __f)
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
 800479e:	ed87 0a00 	vstr	s0, [r7]
      {
	_M_value *= __f;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	ee07 2a10 	vmov	s14, r2
 80047ac:	edd7 7a00 	vldr	s15, [r7]
 80047b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80047b4:	ee06 3a90 	vmov	s13, r3
 80047b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80047bc:	ee17 1a10 	vmov	r1, s14
 80047c0:	ee17 2a90 	vmov	r2, s15
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6019      	str	r1, [r3, #0]
 80047c8:	605a      	str	r2, [r3, #4]
	return *this;
 80047ca:	687b      	ldr	r3, [r7, #4]
      }
 80047cc:	4618      	mov	r0, r3
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <_ZNKSt7complexIfE5__repEv>:
	  const _ComplexT __t = __z.__rep();
	  _M_value /= __t;
	  return *this;
	}

      _GLIBCXX_CONSTEXPR _ComplexT __rep() const { return _M_value; }
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	ee07 2a10 	vmov	s14, r2
 80047ea:	ee07 3a90 	vmov	s15, r3
 80047ee:	eeb0 0a47 	vmov.f32	s0, s14
 80047f2:	eef0 0a67 	vmov.f32	s1, s15
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <_ZN3jlb10ControllerC1ENS_9DirectionE>:
        Direction prev_direction = Direction::STRAIGHT;

        uint32_t tick_counter      = 0u;
        uint32_t tick_counter_prev = 0u;

        Controller(Direction direction_ = Direction::STRAIGHT) : direction{direction_} {}
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2210      	movs	r2, #16
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2210      	movs	r2, #16
 8004814:	605a      	str	r2, [r3, #4]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f04f 0200 	mov.w	r2, #0
 800481c:	609a      	str	r2, [r3, #8]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	60da      	str	r2, [r3, #12]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	611a      	str	r2, [r3, #16]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	615a      	str	r2, [r3, #20]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	619a      	str	r2, [r3, #24]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	61da      	str	r2, [r3, #28]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f04f 0200 	mov.w	r2, #0
 800484c:	621a      	str	r2, [r3, #32]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	625a      	str	r2, [r3, #36]	; 0x24
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f04f 0200 	mov.w	r2, #0
 800485c:	629a      	str	r2, [r3, #40]	; 0x28
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	62da      	str	r2, [r3, #44]	; 0x2c
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a20      	ldr	r2, [pc, #128]	; (80048ec <_ZN3jlb10ControllerC1ENS_9DirectionE+0xec>)
 800486a:	631a      	str	r2, [r3, #48]	; 0x30
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3374      	adds	r3, #116	; 0x74
 8004870:	4618      	mov	r0, r3
 8004872:	f7fe f978 	bl	8002b66 <_ZNSt6vectorIfSaIfEEC1Ev>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	3380      	adds	r3, #128	; 0x80
 800487a:	4618      	mov	r0, r3
 800487c:	f7fe f973 	bl	8002b66 <_ZNSt6vectorIfSaIfEEC1Ev>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f04f 0200 	mov.w	r2, #0
 80048a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f04f 0200 	mov.w	r2, #0
 80048b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	33a4      	adds	r3, #164	; 0xa4
 80048b8:	ed9f 4a0d 	vldr	s8, [pc, #52]	; 80048f0 <_ZN3jlb10ControllerC1ENS_9DirectionE+0xf0>
 80048bc:	eddf 3a0d 	vldr	s7, [pc, #52]	; 80048f4 <_ZN3jlb10ControllerC1ENS_9DirectionE+0xf4>
 80048c0:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 80048c4:	eddf 2a0c 	vldr	s5, [pc, #48]	; 80048f8 <_ZN3jlb10ControllerC1ENS_9DirectionE+0xf8>
 80048c8:	ed9f 2a0c 	vldr	s4, [pc, #48]	; 80048fc <_ZN3jlb10ControllerC1ENS_9DirectionE+0xfc>
 80048cc:	eddf 1a09 	vldr	s3, [pc, #36]	; 80048f4 <_ZN3jlb10ControllerC1ENS_9DirectionE+0xf4>
 80048d0:	ed9f 1a09 	vldr	s2, [pc, #36]	; 80048f8 <_ZN3jlb10ControllerC1ENS_9DirectionE+0xf8>
 80048d4:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8004900 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x100>
 80048d8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8004904 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x104>
 80048dc:	4618      	mov	r0, r3
 80048de:	f7ff fa47 	bl	8003d70 <_ZN3PIDC1Efffffffff>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4618      	mov	r0, r3
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	42c80000 	.word	0x42c80000
 80048f0:	3dcccccd 	.word	0x3dcccccd
 80048f4:	3d4ccccd 	.word	0x3d4ccccd
 80048f8:	00000000 	.word	0x00000000
 80048fc:	3ba3d70a 	.word	0x3ba3d70a
 8004900:	3f30a3d7 	.word	0x3f30a3d7
 8004904:	40866666 	.word	0x40866666

08004908 <_ZN3jlb10ControllerD1Ev>:

        ~Controller() {}
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	33a4      	adds	r3, #164	; 0xa4
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff fa6f 	bl	8003df8 <_ZN3PIDD1Ev>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	3380      	adds	r3, #128	; 0x80
 800491e:	4618      	mov	r0, r3
 8004920:	f7fe fdbe 	bl	80034a0 <_ZNSt6vectorIfSaIfEED1Ev>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	3374      	adds	r3, #116	; 0x74
 8004928:	4618      	mov	r0, r3
 800492a:	f7fe fdb9 	bl	80034a0 <_ZNSt6vectorIfSaIfEED1Ev>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4618      	mov	r0, r3
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf>:

        float select_control_point(std::vector<float> line_positions, float prev_line_position)
 8004938:	b590      	push	{r4, r7, lr}
 800493a:	ed2d 8b02 	vpush	{d8}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	ed87 0a01 	vstr	s0, [r7, #4]
        {
            std::sort(line_positions.begin(), line_positions.end());
 800494a:	68b8      	ldr	r0, [r7, #8]
 800494c:	f7fe ffba 	bl	80038c4 <_ZNSt6vectorIfSaIfEE5beginEv>
 8004950:	4604      	mov	r4, r0
 8004952:	68b8      	ldr	r0, [r7, #8]
 8004954:	f7fe fe86 	bl	8003664 <_ZNSt6vectorIfSaIfEE3endEv>
 8004958:	4603      	mov	r3, r0
 800495a:	4619      	mov	r1, r3
 800495c:	4620      	mov	r0, r4
 800495e:	f008 f9a7 	bl	800ccb0 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>

            if (line_positions.size() == 1) { return line_positions[0]; }
 8004962:	68b8      	ldr	r0, [r7, #8]
 8004964:	f7ff f83b 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004968:	4603      	mov	r3, r0
 800496a:	2b01      	cmp	r3, #1
 800496c:	bf0c      	ite	eq
 800496e:	2301      	moveq	r3, #1
 8004970:	2300      	movne	r3, #0
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	d007      	beq.n	8004988 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x50>
 8004978:	2100      	movs	r1, #0
 800497a:	68b8      	ldr	r0, [r7, #8]
 800497c:	f008 f9a8 	bl	800ccd0 <_ZNSt6vectorIfSaIfEEixEj>
 8004980:	4603      	mov	r3, r0
 8004982:	edd3 7a00 	vldr	s15, [r3]
 8004986:	e114      	b.n	8004bb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
            else if (line_positions.size() == 2)
 8004988:	68b8      	ldr	r0, [r7, #8]
 800498a:	f7ff f828 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800498e:	4603      	mov	r3, r0
 8004990:	2b02      	cmp	r3, #2
 8004992:	bf0c      	ite	eq
 8004994:	2301      	moveq	r3, #1
 8004996:	2300      	movne	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 8096 	beq.w	8004acc <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x194>
            {
                switch (direction)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d00f      	beq.n	80049ca <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x92>
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	f300 808b 	bgt.w	8004ac6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x18e>
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d002      	beq.n	80049ba <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x82>
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d07e      	beq.n	8004ab6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x17e>
 80049b8:	e085      	b.n	8004ac6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x18e>
                {
                    case Direction::LEFT:
                    {
                        return line_positions[0];
 80049ba:	2100      	movs	r1, #0
 80049bc:	68b8      	ldr	r0, [r7, #8]
 80049be:	f008 f987 	bl	800ccd0 <_ZNSt6vectorIfSaIfEEixEj>
 80049c2:	4603      	mov	r3, r0
 80049c4:	edd3 7a00 	vldr	s15, [r3]
 80049c8:	e0f3      	b.n	8004bb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::STRAIGHT:
                    {
                        if (direction == prev_direction)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d136      	bne.n	8004a48 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x110>
                        {
                            return std::fabs(line_positions[0] - prev_line_position) < std::fabs(line_positions[1] - prev_line_position) ? line_positions[0] : line_positions[1];
 80049da:	2100      	movs	r1, #0
 80049dc:	68b8      	ldr	r0, [r7, #8]
 80049de:	f008 f977 	bl	800ccd0 <_ZNSt6vectorIfSaIfEEixEj>
 80049e2:	4603      	mov	r3, r0
 80049e4:	ed93 7a00 	vldr	s14, [r3]
 80049e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80049ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049f0:	eeb0 0a67 	vmov.f32	s0, s15
 80049f4:	f7ff fe8c 	bl	8004710 <_ZSt4fabsf>
 80049f8:	eeb0 8a40 	vmov.f32	s16, s0
 80049fc:	2101      	movs	r1, #1
 80049fe:	68b8      	ldr	r0, [r7, #8]
 8004a00:	f008 f966 	bl	800ccd0 <_ZNSt6vectorIfSaIfEEixEj>
 8004a04:	4603      	mov	r3, r0
 8004a06:	ed93 7a00 	vldr	s14, [r3]
 8004a0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a12:	eeb0 0a67 	vmov.f32	s0, s15
 8004a16:	f7ff fe7b 	bl	8004710 <_ZSt4fabsf>
 8004a1a:	eef0 7a40 	vmov.f32	s15, s0
 8004a1e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a26:	d507      	bpl.n	8004a38 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x100>
 8004a28:	2100      	movs	r1, #0
 8004a2a:	68b8      	ldr	r0, [r7, #8]
 8004a2c:	f008 f950 	bl	800ccd0 <_ZNSt6vectorIfSaIfEEixEj>
 8004a30:	4603      	mov	r3, r0
 8004a32:	edd3 7a00 	vldr	s15, [r3]
 8004a36:	e0bc      	b.n	8004bb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
 8004a38:	2101      	movs	r1, #1
 8004a3a:	68b8      	ldr	r0, [r7, #8]
 8004a3c:	f008 f948 	bl	800ccd0 <_ZNSt6vectorIfSaIfEEixEj>
 8004a40:	4603      	mov	r3, r0
 8004a42:	edd3 7a00 	vldr	s15, [r3]
 8004a46:	e0b4      	b.n	8004bb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                        }
                        else { return std::fabs(line_positions[0] - prev_line_position) > std::fabs(line_positions[1] - prev_line_position) ? line_positions[0] : line_positions[1]; }
 8004a48:	2100      	movs	r1, #0
 8004a4a:	68b8      	ldr	r0, [r7, #8]
 8004a4c:	f008 f940 	bl	800ccd0 <_ZNSt6vectorIfSaIfEEixEj>
 8004a50:	4603      	mov	r3, r0
 8004a52:	ed93 7a00 	vldr	s14, [r3]
 8004a56:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a5e:	eeb0 0a67 	vmov.f32	s0, s15
 8004a62:	f7ff fe55 	bl	8004710 <_ZSt4fabsf>
 8004a66:	eeb0 8a40 	vmov.f32	s16, s0
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	68b8      	ldr	r0, [r7, #8]
 8004a6e:	f008 f92f 	bl	800ccd0 <_ZNSt6vectorIfSaIfEEixEj>
 8004a72:	4603      	mov	r3, r0
 8004a74:	ed93 7a00 	vldr	s14, [r3]
 8004a78:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a80:	eeb0 0a67 	vmov.f32	s0, s15
 8004a84:	f7ff fe44 	bl	8004710 <_ZSt4fabsf>
 8004a88:	eef0 7a40 	vmov.f32	s15, s0
 8004a8c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a94:	dd07      	ble.n	8004aa6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x16e>
 8004a96:	2100      	movs	r1, #0
 8004a98:	68b8      	ldr	r0, [r7, #8]
 8004a9a:	f008 f919 	bl	800ccd0 <_ZNSt6vectorIfSaIfEEixEj>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	edd3 7a00 	vldr	s15, [r3]
 8004aa4:	e085      	b.n	8004bb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	68b8      	ldr	r0, [r7, #8]
 8004aaa:	f008 f911 	bl	800ccd0 <_ZNSt6vectorIfSaIfEEixEj>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	edd3 7a00 	vldr	s15, [r3]
 8004ab4:	e07d      	b.n	8004bb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::RIGHT:
                    {
                        return line_positions[1];
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	68b8      	ldr	r0, [r7, #8]
 8004aba:	f008 f909 	bl	800ccd0 <_ZNSt6vectorIfSaIfEEixEj>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	edd3 7a00 	vldr	s15, [r3]
 8004ac4:	e075      	b.n	8004bb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    default:
                        return 0.0f;
 8004ac6:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8004bc0 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
 8004aca:	e072      	b.n	8004bb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
            }
            else if (line_positions.size() == 3)
 8004acc:	68b8      	ldr	r0, [r7, #8]
 8004ace:	f7fe ff86 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b03      	cmp	r3, #3
 8004ad6:	bf0c      	ite	eq
 8004ad8:	2301      	moveq	r3, #1
 8004ada:	2300      	movne	r3, #0
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d026      	beq.n	8004b30 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f8>
            {
                switch (direction)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d00e      	beq.n	8004b0a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1d2>
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	dc1c      	bgt.n	8004b2a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f2>
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1c2>
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d010      	beq.n	8004b1a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1e2>
 8004af8:	e017      	b.n	8004b2a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f2>
                {
                    case Direction::LEFT:
                    {
                        return line_positions[0];
 8004afa:	2100      	movs	r1, #0
 8004afc:	68b8      	ldr	r0, [r7, #8]
 8004afe:	f008 f8e7 	bl	800ccd0 <_ZNSt6vectorIfSaIfEEixEj>
 8004b02:	4603      	mov	r3, r0
 8004b04:	edd3 7a00 	vldr	s15, [r3]
 8004b08:	e053      	b.n	8004bb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::STRAIGHT:
                    {
                        return line_positions[1];
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	68b8      	ldr	r0, [r7, #8]
 8004b0e:	f008 f8df 	bl	800ccd0 <_ZNSt6vectorIfSaIfEEixEj>
 8004b12:	4603      	mov	r3, r0
 8004b14:	edd3 7a00 	vldr	s15, [r3]
 8004b18:	e04b      	b.n	8004bb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::RIGHT:
                    {
                        return line_positions[2];
 8004b1a:	2102      	movs	r1, #2
 8004b1c:	68b8      	ldr	r0, [r7, #8]
 8004b1e:	f008 f8d7 	bl	800ccd0 <_ZNSt6vectorIfSaIfEEixEj>
 8004b22:	4603      	mov	r3, r0
 8004b24:	edd3 7a00 	vldr	s15, [r3]
 8004b28:	e043      	b.n	8004bb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    default:
                        return 0.0f;
 8004b2a:	eddf 7a25 	vldr	s15, [pc, #148]	; 8004bc0 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
 8004b2e:	e040      	b.n	8004bb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
            }
            else if (line_positions.size() == 4)
 8004b30:	68b8      	ldr	r0, [r7, #8]
 8004b32:	f7fe ff54 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	bf0c      	ite	eq
 8004b3c:	2301      	moveq	r3, #1
 8004b3e:	2300      	movne	r3, #0
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d033      	beq.n	8004bae <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x276>
            {
                switch (direction)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d00e      	beq.n	8004b6e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x236>
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	dc29      	bgt.n	8004ba8 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x270>
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x226>
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d01d      	beq.n	8004b98 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x260>
 8004b5c:	e024      	b.n	8004ba8 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x270>
                {
                    case Direction::LEFT:
                    {
                        return line_positions[0];
 8004b5e:	2100      	movs	r1, #0
 8004b60:	68b8      	ldr	r0, [r7, #8]
 8004b62:	f008 f8b5 	bl	800ccd0 <_ZNSt6vectorIfSaIfEEixEj>
 8004b66:	4603      	mov	r3, r0
 8004b68:	edd3 7a00 	vldr	s15, [r3]
 8004b6c:	e021      	b.n	8004bb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::STRAIGHT:
                    {
                        return line_positions[1] + line_positions[2] / 2.0f;
 8004b6e:	2101      	movs	r1, #1
 8004b70:	68b8      	ldr	r0, [r7, #8]
 8004b72:	f008 f8ad 	bl	800ccd0 <_ZNSt6vectorIfSaIfEEixEj>
 8004b76:	4603      	mov	r3, r0
 8004b78:	ed93 8a00 	vldr	s16, [r3]
 8004b7c:	2102      	movs	r1, #2
 8004b7e:	68b8      	ldr	r0, [r7, #8]
 8004b80:	f008 f8a6 	bl	800ccd0 <_ZNSt6vectorIfSaIfEEixEj>
 8004b84:	4603      	mov	r3, r0
 8004b86:	ed93 7a00 	vldr	s14, [r3]
 8004b8a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004b8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b92:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004b96:	e00c      	b.n	8004bb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::RIGHT:
                    {
                        return line_positions[3];
 8004b98:	2103      	movs	r1, #3
 8004b9a:	68b8      	ldr	r0, [r7, #8]
 8004b9c:	f008 f898 	bl	800ccd0 <_ZNSt6vectorIfSaIfEEixEj>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	edd3 7a00 	vldr	s15, [r3]
 8004ba6:	e004      	b.n	8004bb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    default:
                        return 0.0f;
 8004ba8:	eddf 7a05 	vldr	s15, [pc, #20]	; 8004bc0 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
 8004bac:	e001      	b.n	8004bb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
            }
            else
            {
                // this should never happen

                return 0.0f;
 8004bae:	eddf 7a04 	vldr	s15, [pc, #16]	; 8004bc0 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
            }
        }
 8004bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	ecbd 8b02 	vpop	{d8}
 8004bbe:	bd90      	pop	{r4, r7, pc}
	...

08004bc8 <_ZN3jlb10Controller18get_control_paramsEv>:

        ControlParams get_control_params()
 8004bc8:	b5b0      	push	{r4, r5, r7, lr}
 8004bca:	b09e      	sub	sp, #120	; 0x78
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
        {
            float d5 = OFFSET + SLOPE * current_velocity;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8004bd6:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8004bda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004bde:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
            if (d5 < D5_MIN) d5 = D5_MIN;
 8004be2:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004be6:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8004bea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bf2:	d502      	bpl.n	8004bfa <_ZN3jlb10Controller18get_control_paramsEv+0x32>
 8004bf4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004bf8:	677b      	str	r3, [r7, #116]	; 0x74
            float               t5  = d5 / current_velocity;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8004c00:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8004c04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c08:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
            float               T   = t5 / 3.0f * DAMPING;
 8004c0c:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8004c10:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8004c14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c18:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8004df0 <_ZN3jlb10Controller18get_control_paramsEv+0x228>
 8004c1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c20:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
            float               wp  = (1.0f / T) * sqrt(1.0f - DAMPING * DAMPING);
 8004c24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c28:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8004c2c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004c30:	ee16 0a90 	vmov	r0, s13
 8004c34:	f7fb fc7a 	bl	800052c <__aeabi_f2d>
 8004c38:	a36b      	add	r3, pc, #428	; (adr r3, 8004de8 <_ZN3jlb10Controller18get_control_paramsEv+0x220>)
 8004c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3e:	f7fb fccd 	bl	80005dc <__aeabi_dmul>
 8004c42:	4602      	mov	r2, r0
 8004c44:	460b      	mov	r3, r1
 8004c46:	4610      	mov	r0, r2
 8004c48:	4619      	mov	r1, r3
 8004c4a:	f7fb ffbf 	bl	8000bcc <__aeabi_d2f>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	66bb      	str	r3, [r7, #104]	; 0x68
            float               phi = acosf(DAMPING);
 8004c52:	4b68      	ldr	r3, [pc, #416]	; (8004df4 <_ZN3jlb10Controller18get_control_paramsEv+0x22c>)
 8004c54:	667b      	str	r3, [r7, #100]	; 0x64
            float               x   = wp / tan(phi);
 8004c56:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004c58:	f7fb fc68 	bl	800052c <__aeabi_f2d>
 8004c5c:	4604      	mov	r4, r0
 8004c5e:	460d      	mov	r5, r1
 8004c60:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004c62:	f7fb fc63 	bl	800052c <__aeabi_f2d>
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	ec43 2b10 	vmov	d0, r2, r3
 8004c6e:	f020 ff8b 	bl	8025b88 <tan>
 8004c72:	ec53 2b10 	vmov	r2, r3, d0
 8004c76:	4620      	mov	r0, r4
 8004c78:	4629      	mov	r1, r5
 8004c7a:	f7fb fdd9 	bl	8000830 <__aeabi_ddiv>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	460b      	mov	r3, r1
 8004c82:	4610      	mov	r0, r2
 8004c84:	4619      	mov	r1, r3
 8004c86:	f7fb ffa1 	bl	8000bcc <__aeabi_d2f>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	663b      	str	r3, [r7, #96]	; 0x60
            std::complex<float> s1  = std::complex<float>(x, wp);
 8004c8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c92:	edd7 0a1a 	vldr	s1, [r7, #104]	; 0x68
 8004c96:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7ff fd58 	bl	8004750 <_ZNSt7complexIfEC1Eff>
            std::complex<float> s2  = std::complex<float>(x, -wp);
 8004ca0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8004ca4:	eef1 7a67 	vneg.f32	s15, s15
 8004ca8:	f107 0320 	add.w	r3, r7, #32
 8004cac:	eef0 0a67 	vmov.f32	s1, s15
 8004cb0:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7ff fd4b 	bl	8004750 <_ZNSt7complexIfEC1Eff>

            std::complex<float> kP     = -SENSOR_BASE / (current_velocity * current_velocity) * s1 * s2;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8004cc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cca:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8004cce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cd2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8004cd6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004cda:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004cde:	4611      	mov	r1, r2
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f008 f805 	bl	800ccf0 <_ZStmlIfESt7complexIT_ERKS1_RKS2_>
 8004ce6:	eeb0 7a40 	vmov.f32	s14, s0
 8004cea:	eef0 7a60 	vmov.f32	s15, s1
 8004cee:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8004cf2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8004cf6:	f107 0220 	add.w	r2, r7, #32
 8004cfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004cfe:	4611      	mov	r1, r2
 8004d00:	4618      	mov	r0, r3
 8004d02:	f008 f847 	bl	800cd94 <_ZStmlIfESt7complexIT_ERKS2_S4_>
 8004d06:	eeb0 7a40 	vmov.f32	s14, s0
 8004d0a:	eef0 7a60 	vmov.f32	s15, s1
 8004d0e:	ed87 7a06 	vstr	s14, [r7, #24]
 8004d12:	edc7 7a07 	vstr	s15, [r7, #28]
            std::complex<float> kDelta = -SENSOR_BASE / current_velocity * ((s1 + s2) - current_velocity * kP);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8004d1c:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8004d20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d24:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8004d28:	f107 0220 	add.w	r2, r7, #32
 8004d2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d30:	4611      	mov	r1, r2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f008 f870 	bl	800ce18 <_ZStplIfESt7complexIT_ERKS2_S4_>
 8004d38:	eeb0 7a40 	vmov.f32	s14, s0
 8004d3c:	eef0 7a60 	vmov.f32	s15, s1
 8004d40:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 8004d44:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	33a0      	adds	r3, #160	; 0xa0
 8004d4c:	f107 0218 	add.w	r2, r7, #24
 8004d50:	4611      	mov	r1, r2
 8004d52:	4618      	mov	r0, r3
 8004d54:	f007 ffcc 	bl	800ccf0 <_ZStmlIfESt7complexIT_ERKS1_RKS2_>
 8004d58:	eeb0 7a40 	vmov.f32	s14, s0
 8004d5c:	eef0 7a60 	vmov.f32	s15, s1
 8004d60:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 8004d64:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 8004d68:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004d6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004d70:	4611      	mov	r1, r2
 8004d72:	4618      	mov	r0, r3
 8004d74:	f008 f892 	bl	800ce9c <_ZStmiIfESt7complexIT_ERKS2_S4_>
 8004d78:	eeb0 7a40 	vmov.f32	s14, s0
 8004d7c:	eef0 7a60 	vmov.f32	s15, s1
 8004d80:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 8004d84:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8004d88:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004d8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004d90:	4611      	mov	r1, r2
 8004d92:	4618      	mov	r0, r3
 8004d94:	f007 ffac 	bl	800ccf0 <_ZStmlIfESt7complexIT_ERKS1_RKS2_>
 8004d98:	eeb0 7a40 	vmov.f32	s14, s0
 8004d9c:	eef0 7a60 	vmov.f32	s15, s1
 8004da0:	ed87 7a04 	vstr	s14, [r7, #16]
 8004da4:	edc7 7a05 	vstr	s15, [r7, #20]

            return {kP.real(), kDelta.real()};
 8004da8:	f107 0318 	add.w	r3, r7, #24
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7ff fce3 	bl	8004778 <_ZNKSt7complexIfE4realB5cxx11Ev>
 8004db2:	eef0 7a40 	vmov.f32	s15, s0
 8004db6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8004dba:	f107 0310 	add.w	r3, r7, #16
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7ff fcda 	bl	8004778 <_ZNKSt7complexIfE4realB5cxx11Ev>
 8004dc4:	eef0 7a40 	vmov.f32	s15, s0
 8004dc8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 8004dcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dd0:	ee07 2a10 	vmov	s14, r2
 8004dd4:	ee07 3a90 	vmov	s15, r3
        }
 8004dd8:	eeb0 0a47 	vmov.f32	s0, s14
 8004ddc:	eef0 0a67 	vmov.f32	s1, s15
 8004de0:	3778      	adds	r7, #120	; 0x78
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bdb0      	pop	{r4, r5, r7, pc}
 8004de6:	bf00      	nop
 8004de8:	00b412ca 	.word	0x00b412ca
 8004dec:	3fdbe59f 	.word	0x3fdbe59f
 8004df0:	3f666666 	.word	0x3f666666
 8004df4:	3ee6ecfe 	.word	0x3ee6ecfe

08004df8 <_ZZN3jlb10Controller15lateral_controlEfENKUlbE_clEb>:

        void lateral_control([[maybe_unused]] const float dt)
        {
            if (std::all_of(std::begin(detection_front), std::end(detection_front), [](bool b) { return b; }) ||
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	460b      	mov	r3, r1
 8004e02:	70fb      	strb	r3, [r7, #3]
 8004e04:	78fb      	ldrb	r3, [r7, #3]
 8004e06:	4618      	mov	r0, r3
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <_ZZN3jlb10Controller15lateral_controlEfENKUlbE0_clEb>:
                std::all_of(std::begin(detection_rear), std::end(detection_rear), [](bool b) { return b; }) || line_positions_front.size() == 0 || line_positions_rear.size() == 0)
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	70fb      	strb	r3, [r7, #3]
 8004e1e:	78fb      	ldrb	r3, [r7, #3]
 8004e20:	4618      	mov	r0, r3
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <_ZN3jlb10Controller15lateral_controlEf>:
        void lateral_control([[maybe_unused]] const float dt)
 8004e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e2e:	b08d      	sub	sp, #52	; 0x34
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	ed87 0a00 	vstr	s0, [r7]
            if (std::all_of(std::begin(detection_front), std::end(detection_front), [](bool b) { return b; }) ||
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3334      	adds	r3, #52	; 0x34
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f008 f84a 	bl	800ced6 <_ZSt5beginIbLj32EEPT_RAT0__S0_>
 8004e42:	4604      	mov	r4, r0
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	3334      	adds	r3, #52	; 0x34
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f008 f84f 	bl	800ceec <_ZSt3endIbLj32EEPT_RAT0__S0_>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	4632      	mov	r2, r6
 8004e52:	4619      	mov	r1, r3
 8004e54:	4620      	mov	r0, r4
 8004e56:	f008 f855 	bl	800cf04 <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEfEUlbE_EbT_S4_T0_>
 8004e5a:	4603      	mov	r3, r0
                std::all_of(std::begin(detection_rear), std::end(detection_rear), [](bool b) { return b; }) || line_positions_front.size() == 0 || line_positions_rear.size() == 0)
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d123      	bne.n	8004ea8 <_ZN3jlb10Controller15lateral_controlEf+0x7c>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3354      	adds	r3, #84	; 0x54
 8004e64:	4618      	mov	r0, r3
 8004e66:	f008 f836 	bl	800ced6 <_ZSt5beginIbLj32EEPT_RAT0__S0_>
 8004e6a:	4604      	mov	r4, r0
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	3354      	adds	r3, #84	; 0x54
 8004e70:	4618      	mov	r0, r3
 8004e72:	f008 f83b 	bl	800ceec <_ZSt3endIbLj32EEPT_RAT0__S0_>
 8004e76:	4603      	mov	r3, r0
 8004e78:	462a      	mov	r2, r5
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	f008 f857 	bl	800cf30 <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEfEUlbE0_EbT_S4_T0_>
 8004e82:	4603      	mov	r3, r0
            if (std::all_of(std::begin(detection_front), std::end(detection_front), [](bool b) { return b; }) ||
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10f      	bne.n	8004ea8 <_ZN3jlb10Controller15lateral_controlEf+0x7c>
                std::all_of(std::begin(detection_rear), std::end(detection_rear), [](bool b) { return b; }) || line_positions_front.size() == 0 || line_positions_rear.size() == 0)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	3374      	adds	r3, #116	; 0x74
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7fe fda6 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d007      	beq.n	8004ea8 <_ZN3jlb10Controller15lateral_controlEf+0x7c>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	3380      	adds	r3, #128	; 0x80
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fe fd9e 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <_ZN3jlb10Controller15lateral_controlEf+0x80>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e000      	b.n	8004eae <_ZN3jlb10Controller15lateral_controlEf+0x82>
 8004eac:	2300      	movs	r3, #0
            if (std::all_of(std::begin(detection_front), std::end(detection_front), [](bool b) { return b; }) ||
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d025      	beq.n	8004efe <_ZN3jlb10Controller15lateral_controlEf+0xd2>
            {
                if (target_angle < 0) { target_angle = -MAX_WHEEL_ANGLE; }
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	edd3 7a06 	vldr	s15, [r3, #24]
 8004eb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec0:	d503      	bpl.n	8004eca <_ZN3jlb10Controller15lateral_controlEf+0x9e>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a79      	ldr	r2, [pc, #484]	; (80050ac <_ZN3jlb10Controller15lateral_controlEf+0x280>)
 8004ec6:	619a      	str	r2, [r3, #24]
                else if (target_angle == 0) { target_angle = 0; }
                else if (target_angle > 0) { target_angle = MAX_WHEEL_ANGLE; }
                return;
 8004ec8:	e0ed      	b.n	80050a6 <_ZN3jlb10Controller15lateral_controlEf+0x27a>
                else if (target_angle == 0) { target_angle = 0; }
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	edd3 7a06 	vldr	s15, [r3, #24]
 8004ed0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ed8:	d104      	bne.n	8004ee4 <_ZN3jlb10Controller15lateral_controlEf+0xb8>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f04f 0200 	mov.w	r2, #0
 8004ee0:	619a      	str	r2, [r3, #24]
                return;
 8004ee2:	e0e0      	b.n	80050a6 <_ZN3jlb10Controller15lateral_controlEf+0x27a>
                else if (target_angle > 0) { target_angle = MAX_WHEEL_ANGLE; }
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	edd3 7a06 	vldr	s15, [r3, #24]
 8004eea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef2:	dc00      	bgt.n	8004ef6 <_ZN3jlb10Controller15lateral_controlEf+0xca>
                return;
 8004ef4:	e0d7      	b.n	80050a6 <_ZN3jlb10Controller15lateral_controlEf+0x27a>
                else if (target_angle > 0) { target_angle = MAX_WHEEL_ANGLE; }
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a6d      	ldr	r2, [pc, #436]	; (80050b0 <_ZN3jlb10Controller15lateral_controlEf+0x284>)
 8004efa:	619a      	str	r2, [r3, #24]
                return;
 8004efc:	e0d3      	b.n	80050a6 <_ZN3jlb10Controller15lateral_controlEf+0x27a>
            }

            if (line_positions_front.size() > 4 || line_positions_rear.size() > 4) { return; }
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	3374      	adds	r3, #116	; 0x74
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fe fd6b 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	d807      	bhi.n	8004f1e <_ZN3jlb10Controller15lateral_controlEf+0xf2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	3380      	adds	r3, #128	; 0x80
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fe fd63 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d901      	bls.n	8004f22 <_ZN3jlb10Controller15lateral_controlEf+0xf6>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e000      	b.n	8004f24 <_ZN3jlb10Controller15lateral_controlEf+0xf8>
 8004f22:	2300      	movs	r3, #0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f040 80bd 	bne.w	80050a4 <_ZN3jlb10Controller15lateral_controlEf+0x278>

            line_position_front      = select_control_point(line_positions_front, prev_line_position_front);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f103 0274 	add.w	r2, r3, #116	; 0x74
 8004f30:	f107 0310 	add.w	r3, r7, #16
 8004f34:	4611      	mov	r1, r2
 8004f36:	4618      	mov	r0, r3
 8004f38:	f008 f810 	bl	800cf5c <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004f42:	f107 0310 	add.w	r3, r7, #16
 8004f46:	eeb0 0a67 	vmov.f32	s0, s15
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7ff fcf3 	bl	8004938 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf>
 8004f52:	eef0 7a40 	vmov.f32	s15, s0
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	edc3 7a02 	vstr	s15, [r3, #8]
 8004f5c:	f107 0310 	add.w	r3, r7, #16
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7fe fa9d 	bl	80034a0 <_ZNSt6vectorIfSaIfEED1Ev>
            line_position_rear       = select_control_point(line_positions_rear, prev_line_position_rear);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8004f6c:	f107 031c 	add.w	r3, r7, #28
 8004f70:	4611      	mov	r1, r2
 8004f72:	4618      	mov	r0, r3
 8004f74:	f007 fff2 	bl	800cf5c <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	edd3 7a05 	vldr	s15, [r3, #20]
 8004f7e:	f107 031c 	add.w	r3, r7, #28
 8004f82:	eeb0 0a67 	vmov.f32	s0, s15
 8004f86:	4619      	mov	r1, r3
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7ff fcd5 	bl	8004938 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf>
 8004f8e:	eef0 7a40 	vmov.f32	s15, s0
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	edc3 7a03 	vstr	s15, [r3, #12]
 8004f98:	f107 031c 	add.w	r3, r7, #28
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7fe fa7f 	bl	80034a0 <_ZNSt6vectorIfSaIfEED1Ev>
            prev_line_position_front = line_position_front;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689a      	ldr	r2, [r3, #8]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	611a      	str	r2, [r3, #16]
            prev_line_position_rear  = line_position_rear;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	615a      	str	r2, [r3, #20]

            float sensor_rate   = SENSOR_WIDTH / SENSOR_COUNT;
 8004fb2:	4b40      	ldr	r3, [pc, #256]	; (80050b4 <_ZN3jlb10Controller15lateral_controlEf+0x288>)
 8004fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
            float sensor_center = SENSOR_COUNT / 2.0f;
 8004fb6:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8004fba:	62bb      	str	r3, [r7, #40]	; 0x28
            selected_front      = static_cast<unsigned long>(line_position_front / sensor_rate + sensor_center);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	edd3 6a02 	vldr	s13, [r3, #8]
 8004fc2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004fce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fd6:	ee17 2a90 	vmov	r2, s15
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	601a      	str	r2, [r3, #0]
            selected_rear       = static_cast<unsigned long>(line_position_rear / sensor_rate + sensor_center);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	edd3 6a03 	vldr	s13, [r3, #12]
 8004fe4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004fe8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004ff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ff4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ff8:	ee17 2a90 	vmov	r2, s15
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	605a      	str	r2, [r3, #4]

            cross_track_error = line_position_front;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	621a      	str	r2, [r3, #32]
            heading_error     = std::atan2(line_position_front - line_position_rear, SENSOR_BASE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	ed93 7a02 	vldr	s14, [r3, #8]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	edd3 7a03 	vldr	s15, [r3, #12]
 8005014:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005018:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800501c:	eeb0 0a67 	vmov.f32	s0, s15
 8005020:	f7ff fb52 	bl	80046c8 <_ZSt5atan2ff>
 8005024:	eef0 7a40 	vmov.f32	s15, s0
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

            auto [kP, kDelta] = get_control_params();
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7ff fdca 	bl	8004bc8 <_ZN3jlb10Controller18get_control_paramsEv>
 8005034:	eeb0 7a40 	vmov.f32	s14, s0
 8005038:	eef0 7a60 	vmov.f32	s15, s1
 800503c:	ed87 7a02 	vstr	s14, [r7, #8]
 8005040:	edc7 7a03 	vstr	s15, [r7, #12]
 8005044:	edd7 7a02 	vldr	s15, [r7, #8]
            target_angle      = -kP * cross_track_error - kDelta * heading_error;
 8005048:	eeb1 7a67 	vneg.f32	s14, s15
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	edd3 7a08 	vldr	s15, [r3, #32]
 8005052:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
            auto [kP, kDelta] = get_control_params();
 800505c:	edd7 7a03 	vldr	s15, [r7, #12]
            target_angle      = -kP * cross_track_error - kDelta * heading_error;
 8005060:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005064:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	edc3 7a06 	vstr	s15, [r3, #24]

            if (target_angle > deg2rad(MAX_WHEEL_ANGLE)) target_angle = deg2rad(MAX_WHEEL_ANGLE);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	edd3 7a06 	vldr	s15, [r3, #24]
 8005074:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80050b8 <_ZN3jlb10Controller15lateral_controlEf+0x28c>
 8005078:	eef4 7ac7 	vcmpe.f32	s15, s14
 800507c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005080:	dd02      	ble.n	8005088 <_ZN3jlb10Controller15lateral_controlEf+0x25c>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a0d      	ldr	r2, [pc, #52]	; (80050bc <_ZN3jlb10Controller15lateral_controlEf+0x290>)
 8005086:	619a      	str	r2, [r3, #24]
            if (target_angle < -deg2rad(MAX_WHEEL_ANGLE)) target_angle = -deg2rad(MAX_WHEEL_ANGLE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	edd3 7a06 	vldr	s15, [r3, #24]
 800508e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80050c0 <_ZN3jlb10Controller15lateral_controlEf+0x294>
 8005092:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800509a:	d504      	bpl.n	80050a6 <_ZN3jlb10Controller15lateral_controlEf+0x27a>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a09      	ldr	r2, [pc, #36]	; (80050c4 <_ZN3jlb10Controller15lateral_controlEf+0x298>)
 80050a0:	619a      	str	r2, [r3, #24]
 80050a2:	e000      	b.n	80050a6 <_ZN3jlb10Controller15lateral_controlEf+0x27a>
            if (line_positions_front.size() > 4 || line_positions_rear.size() > 4) { return; }
 80050a4:	bf00      	nop
        }
 80050a6:	3734      	adds	r7, #52	; 0x34
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050ac:	c1b40000 	.word	0xc1b40000
 80050b0:	41b40000 	.word	0x41b40000
 80050b4:	3bcccccd 	.word	0x3bcccccd
 80050b8:	3ec90fdb 	.word	0x3ec90fdb
 80050bc:	3ec90fdb 	.word	0x3ec90fdb
 80050c0:	bec90fdb 	.word	0xbec90fdb
 80050c4:	bec90fdb 	.word	0xbec90fdb

080050c8 <_ZN3jlb10Controller20longitudinal_controlEf>:

        void longitudinal_control([[maybe_unused]] const float dt)
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	ed87 0a00 	vstr	s0, [r7]

            float x      = std::max(dist_error_norm, ang_error_norm);
            target_speed = std::min(reference_speed, reference_speed * (1.0f - (0.1666667f * x) - (0.8333333f * x * x)));
            */

            if (reference_speed > target_speed + MAX_ACCELERATION * dt) { target_speed += MAX_ACCELERATION * dt; }
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	edd3 6a07 	vldr	s13, [r3, #28]
 80050e0:	edd7 7a00 	vldr	s15, [r7]
 80050e4:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 80050e8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80050ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050f8:	dd0e      	ble.n	8005118 <_ZN3jlb10Controller20longitudinal_controlEf+0x50>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	ed93 7a07 	vldr	s14, [r3, #28]
 8005100:	edd7 7a00 	vldr	s15, [r7]
 8005104:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8005108:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800510c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	edc3 7a07 	vstr	s15, [r3, #28]
 8005116:	e026      	b.n	8005166 <_ZN3jlb10Controller20longitudinal_controlEf+0x9e>
            else if (reference_speed < target_speed - MAX_DECELERATION * dt) { target_speed -= MAX_DECELERATION * dt; }
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	edd3 6a07 	vldr	s13, [r3, #28]
 8005124:	edd7 7a00 	vldr	s15, [r7]
 8005128:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800512c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005130:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005134:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800513c:	d50e      	bpl.n	800515c <_ZN3jlb10Controller20longitudinal_controlEf+0x94>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	ed93 7a07 	vldr	s14, [r3, #28]
 8005144:	edd7 7a00 	vldr	s15, [r7]
 8005148:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800514c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005150:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	edc3 7a07 	vstr	s15, [r3, #28]
 800515a:	e004      	b.n	8005166 <_ZN3jlb10Controller20longitudinal_controlEf+0x9e>
            else { target_speed = reference_speed; }
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	61da      	str	r2, [r3, #28]

            if (target_speed < MIN_SPEED) target_speed = MIN_SPEED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	edd3 7a07 	vldr	s15, [r3, #28]
 800516c:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8005170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005178:	d400      	bmi.n	800517c <_ZN3jlb10Controller20longitudinal_controlEf+0xb4>

            // float object_rate = object_pid.update(obj::FOLLOW_DISTANCE, object_range, dt);
            // target_speed *= std::pow((1 - object_rate), 2);
        }
 800517a:	e003      	b.n	8005184 <_ZN3jlb10Controller20longitudinal_controlEf+0xbc>
            if (target_speed < MIN_SPEED) target_speed = MIN_SPEED;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8005182:	61da      	str	r2, [r3, #28]
        }
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <_ZN3jlb10Controller6updateEv>:

        ControlSignal update()
 8005190:	b580      	push	{r7, lr}
 8005192:	b088      	sub	sp, #32
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
        {
#ifndef SIMULATION
            // TODO: add timestamp
            tick_counter_prev = tick_counter;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            tick_counter      = HAL_GetTick();
 80051a4:	f013 fd56 	bl	8018c54 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            float dt          = (((float)tick_counter) - ((float)(tick_counter_prev))) / 1000.0f;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051b6:	ee07 3a90 	vmov	s15, r3
 80051ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051c4:	ee07 3a90 	vmov	s15, r3
 80051c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80051d0:	eddf 6a11 	vldr	s13, [pc, #68]	; 8005218 <_ZN3jlb10Controller6updateEv+0x88>
 80051d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051d8:	edc7 7a07 	vstr	s15, [r7, #28]
            auto                   control_timestamp_ = std::chrono::steady_clock::now();
            [[maybe_unused]] float dt                 = std::chrono::duration_cast<std::chrono::milliseconds>(control_timestamp_ - prev_control_timestamp_).count() / 1000.0f;
            prev_control_timestamp_                   = control_timestamp_;
#endif

            lateral_control(dt);
 80051dc:	ed97 0a07 	vldr	s0, [r7, #28]
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f7ff fe23 	bl	8004e2c <_ZN3jlb10Controller15lateral_controlEf>
            longitudinal_control(dt);
 80051e6:	ed97 0a07 	vldr	s0, [r7, #28]
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f7ff ff6c 	bl	80050c8 <_ZN3jlb10Controller20longitudinal_controlEf>

            return {target_angle, target_speed};
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	617b      	str	r3, [r7, #20]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	61bb      	str	r3, [r7, #24]
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	ee07 2a10 	vmov	s14, r2
 8005204:	ee07 3a90 	vmov	s15, r3
        }
 8005208:	eeb0 0a47 	vmov.f32	s0, s14
 800520c:	eef0 0a67 	vmov.f32	s1, s15
 8005210:	3720      	adds	r7, #32
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	447a0000 	.word	0x447a0000

0800521c <_ZN3jlb10Controller16set_object_rangeEf>:

        void set_object_range(const float object_range_) { object_range = object_range_; }
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	ed87 0a00 	vstr	s0, [r7]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	631a      	str	r2, [r3, #48]	; 0x30
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE>:

        void set_detection_front(bool *detection_front_, std::vector<float> line_positions_front_)
 800523a:	b580      	push	{r7, lr}
 800523c:	b086      	sub	sp, #24
 800523e:	af00      	add	r7, sp, #0
 8005240:	60f8      	str	r0, [r7, #12]
 8005242:	60b9      	str	r1, [r7, #8]
 8005244:	607a      	str	r2, [r7, #4]
        {
            for (unsigned long i = 0; i < SENSOR_COUNT; i++) detection_front[i] = detection_front_[i];
 8005246:	2300      	movs	r3, #0
 8005248:	617b      	str	r3, [r7, #20]
 800524a:	e00c      	b.n	8005266 <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE+0x2c>
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	4413      	add	r3, r2
 8005252:	7819      	ldrb	r1, [r3, #0]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	4413      	add	r3, r2
 800525a:	3334      	adds	r3, #52	; 0x34
 800525c:	460a      	mov	r2, r1
 800525e:	701a      	strb	r2, [r3, #0]
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	3301      	adds	r3, #1
 8005264:	617b      	str	r3, [r7, #20]
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2b1f      	cmp	r3, #31
 800526a:	d9ef      	bls.n	800524c <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE+0x12>
            line_positions_front = line_positions_front_;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	3374      	adds	r3, #116	; 0x74
 8005270:	6879      	ldr	r1, [r7, #4]
 8005272:	4618      	mov	r0, r3
 8005274:	f007 fee3 	bl	800d03e <_ZNSt6vectorIfSaIfEEaSERKS1_>
        }
 8005278:	bf00      	nop
 800527a:	3718      	adds	r7, #24
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE>:

        void set_detection_rear(bool *detection_rear_, std::vector<float> line_positions_rear_)
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
        {
            for (unsigned long i = 0; i < SENSOR_COUNT; i++) detection_rear[i] = detection_rear_[i];
 800528c:	2300      	movs	r3, #0
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	e00c      	b.n	80052ac <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE+0x2c>
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	4413      	add	r3, r2
 8005298:	7819      	ldrb	r1, [r3, #0]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	4413      	add	r3, r2
 80052a0:	3354      	adds	r3, #84	; 0x54
 80052a2:	460a      	mov	r2, r1
 80052a4:	701a      	strb	r2, [r3, #0]
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	3301      	adds	r3, #1
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	2b1f      	cmp	r3, #31
 80052b0:	d9ef      	bls.n	8005292 <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE+0x12>
            line_positions_rear = line_positions_rear_;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	3380      	adds	r3, #128	; 0x80
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f007 fec0 	bl	800d03e <_ZNSt6vectorIfSaIfEEaSERKS1_>
        }
 80052be:	bf00      	nop
 80052c0:	3718      	adds	r7, #24
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <_ZN3jlb10Controller20set_current_velocityEf>:

        void set_current_velocity(const float current_velocity_) { current_velocity = current_velocity_; }
 80052c6:	b480      	push	{r7}
 80052c8:	b083      	sub	sp, #12
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	ed87 0a00 	vstr	s0, [r7]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <_ZN3jlb10Controller13set_directionENS_9DirectionE>:

        void set_direction(const Direction direction_)
 80052e6:	b480      	push	{r7}
 80052e8:	b083      	sub	sp, #12
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
 80052ee:	6039      	str	r1, [r7, #0]
        {
            prev_direction = direction;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            direction      = direction_;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <_ZN3jlb10Controller19set_reference_speedEf>:

        void set_reference_speed(const float reference_speed_) { reference_speed = reference_speed_; }
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	ed87 0a00 	vstr	s0, [r7]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	701a      	strb	r2, [r3, #0]
      _M_reset();
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f805 	bl	800534e <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4618      	mov	r0, r3
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	611a      	str	r2, [r3, #16]
    }
 800536e:	bf00      	nop
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 800537a:	b480      	push	{r7}
 800537c:	b083      	sub	sp, #12
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005388:	d205      	bcs.n	8005396 <_ZSt16__deque_buf_sizej+0x1c>
 800538a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	fbb2 f3f3 	udiv	r3, r2, r3
 8005394:	e000      	b.n	8005398 <_ZSt16__deque_buf_sizej+0x1e>
 8005396:	2301      	movs	r3, #1
 8005398:	4618      	mov	r0, r3
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <_ZN3jlb4EdgeC1EcNS_9DirectionESt6vectorIcSaIcEEf>:
        char              node;
        Direction         direction;
        std::vector<char> prev_nodes;
        float             distance;

        Edge(char node_, Direction direction_, std::vector<char> prev_nodes_, float distance_) : node{node_}, direction{direction_}, prev_nodes{prev_nodes_}, distance{distance_} {}
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6178      	str	r0, [r7, #20]
 80053ac:	60fa      	str	r2, [r7, #12]
 80053ae:	60bb      	str	r3, [r7, #8]
 80053b0:	ed87 0a01 	vstr	s0, [r7, #4]
 80053b4:	460b      	mov	r3, r1
 80053b6:	74fb      	strb	r3, [r7, #19]
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	7cfa      	ldrb	r2, [r7, #19]
 80053bc:	701a      	strb	r2, [r3, #0]
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	605a      	str	r2, [r3, #4]
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	3308      	adds	r3, #8
 80053c8:	68b9      	ldr	r1, [r7, #8]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f007 ff2f 	bl	800d22e <_ZNSt6vectorIcSaIcEEC1ERKS1_>
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	615a      	str	r2, [r3, #20]
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	4618      	mov	r0, r3
 80053da:	3718      	adds	r7, #24
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <_ZNK3jlb4Edge10get_weightEv>:

        float get_weight() const { return distance; }
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	ee07 3a90 	vmov	s15, r3
 80053f0:	eeb0 0a67 	vmov.f32	s0, s15
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80053fe:	b580      	push	{r7, lr}
 8005400:	b082      	sub	sp, #8
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f007 ff79 	bl	800d2fe <_ZNSaIN3jlb4EdgeEED1Ev>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1Ev>:
      _Vector_base() = default;
 8005416:	b580      	push	{r7, lr}
 8005418:	b082      	sub	sp, #8
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4618      	mov	r0, r3
 8005422:	f007 ff5c 	bl	800d2de <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1Ev>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4618      	mov	r0, r3
 800542a:	3708      	adds	r7, #8
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1Ev>:
      vector() = default;
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4618      	mov	r0, r3
 800543c:	f7ff ffeb 	bl	8005416 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1Ev>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4618      	mov	r0, r3
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <_ZN3jlb4NodeC1Ecff>:
        char              name;
        float             x;
        float             y;
        std::vector<Edge> edges;

        Node(char name_, float x_, float y_) : name{name_}, x(x_), y(y_) {}
 800544a:	b580      	push	{r7, lr}
 800544c:	b084      	sub	sp, #16
 800544e:	af00      	add	r7, sp, #0
 8005450:	60f8      	str	r0, [r7, #12]
 8005452:	460b      	mov	r3, r1
 8005454:	ed87 0a01 	vstr	s0, [r7, #4]
 8005458:	edc7 0a00 	vstr	s1, [r7]
 800545c:	72fb      	strb	r3, [r7, #11]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	7afa      	ldrb	r2, [r7, #11]
 8005462:	701a      	strb	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	605a      	str	r2, [r3, #4]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	609a      	str	r2, [r3, #8]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	330c      	adds	r3, #12
 8005474:	4618      	mov	r0, r3
 8005476:	f7ff ffdb 	bl	8005430 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1Ev>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <_ZN3jlb4NodeD1Ev>:
        ~Node() {}
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	330c      	adds	r3, #12
 8005490:	4618      	mov	r0, r3
 8005492:	f007 ff5d 	bl	800d350 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EED1Ev>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4618      	mov	r0, r3
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <_ZN3jlb4EdgeD1Ev>:
    struct Edge
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	3308      	adds	r3, #8
 80054ac:	4618      	mov	r0, r3
 80054ae:	f007 fefb 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4618      	mov	r0, r3
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>:

        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float distance_) { edges.push_back(Edge{name_, direction_, prev_nodes_, distance_}); }
 80054bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054be:	b091      	sub	sp, #68	; 0x44
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6178      	str	r0, [r7, #20]
 80054c4:	60fa      	str	r2, [r7, #12]
 80054c6:	60bb      	str	r3, [r7, #8]
 80054c8:	ed87 0a01 	vstr	s0, [r7, #4]
 80054cc:	460b      	mov	r3, r1
 80054ce:	74fb      	strb	r3, [r7, #19]
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	f103 040c 	add.w	r4, r3, #12
 80054d6:	7cfd      	ldrb	r5, [r7, #19]
 80054d8:	68fe      	ldr	r6, [r7, #12]
 80054da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80054de:	68b9      	ldr	r1, [r7, #8]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f007 fea4 	bl	800d22e <_ZNSt6vectorIcSaIcEEC1ERKS1_>
 80054e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80054ea:	f107 001c 	add.w	r0, r7, #28
 80054ee:	ed97 0a01 	vldr	s0, [r7, #4]
 80054f2:	4632      	mov	r2, r6
 80054f4:	4629      	mov	r1, r5
 80054f6:	f7ff ff55 	bl	80053a4 <_ZN3jlb4EdgeC1EcNS_9DirectionESt6vectorIcSaIcEEf>
 80054fa:	f107 031c 	add.w	r3, r7, #28
 80054fe:	4619      	mov	r1, r3
 8005500:	4620      	mov	r0, r4
 8005502:	f007 ff40 	bl	800d386 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE9push_backEOS1_>
 8005506:	f107 031c 	add.w	r3, r7, #28
 800550a:	4618      	mov	r0, r3
 800550c:	f7ff ffc8 	bl	80054a0 <_ZN3jlb4EdgeD1Ev>
 8005510:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005514:	4618      	mov	r0, r3
 8005516:	f007 fec7 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 800551a:	bf00      	nop
 800551c:	3744      	adds	r7, #68	; 0x44
 800551e:	46bd      	mov	sp, r7
 8005520:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005522 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8005522:	b580      	push	{r7, lr}
 8005524:	b082      	sub	sp, #8
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f007 ff4c 	bl	800d3c8 <_ZNSaIN3jlb4NodeEED1Ev>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4618      	mov	r0, r3
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EEC1Ev>:
      _Vector_base() = default;
 800553a:	b580      	push	{r7, lr}
 800553c:	b082      	sub	sp, #8
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4618      	mov	r0, r3
 8005546:	f007 ff2f 	bl	800d3a8 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implC1Ev>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4618      	mov	r0, r3
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <_ZNSt6vectorIN3jlb4NodeESaIS1_EEC1Ev>:
      vector() = default;
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4618      	mov	r0, r3
 8005560:	f7ff ffeb 	bl	800553a <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EEC1Ev>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4618      	mov	r0, r3
 8005568:	3708      	adds	r7, #8
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>:
      struct _Vector_impl
 800556e:	b580      	push	{r7, lr}
 8005570:	b082      	sub	sp, #8
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f020 f99f 	bl	80258ba <_ZNSaIcED1Ev>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4618      	mov	r0, r3
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <_ZNSt12_Vector_baseIcSaIcEEC1Ev>:
      _Vector_base() = default;
 8005586:	b580      	push	{r7, lr}
 8005588:	b082      	sub	sp, #8
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4618      	mov	r0, r3
 8005592:	f007 ff5e 	bl	800d452 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1Ev>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4618      	mov	r0, r3
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <_ZNSt6vectorIcSaIcEEC1Ev>:
      vector() = default;
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7ff ffeb 	bl	8005586 <_ZNSt12_Vector_baseIcSaIcEEC1Ev>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4618      	mov	r0, r3
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	0000      	movs	r0, r0
 80055bc:	0000      	movs	r0, r0
	...

080055c0 <_ZN3jlb5GraphC1Ev>:
    {
    public:
        std::vector<Node> nodes;
        std::vector<char> collected_nodes;

        Graph()
 80055c0:	b590      	push	{r4, r7, lr}
 80055c2:	f6ad 4d6c 	subw	sp, sp, #3180	; 0xc6c
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80055cc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80055d0:	6018      	str	r0, [r3, #0]
        {
 80055d2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80055d6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4618      	mov	r0, r3
 80055de:	f7ff ffb9 	bl	8005554 <_ZNSt6vectorIN3jlb4NodeESaIS1_EEC1Ev>
 80055e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80055e6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	330c      	adds	r3, #12
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7ff ffd6 	bl	80055a0 <_ZNSt6vectorIcSaIcEEC1Ev>
            nodes.push_back(Node{static_cast<char>('A'), px_to_m(704), px_to_m(448)});
 80055f4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80055f8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80055fc:	681c      	ldr	r4, [r3, #0]
 80055fe:	f107 0308 	add.w	r3, r7, #8
 8005602:	eddf 0af4 	vldr	s1, [pc, #976]	; 80059d4 <_ZN3jlb5GraphC1Ev+0x414>
 8005606:	ed9f 0af4 	vldr	s0, [pc, #976]	; 80059d8 <_ZN3jlb5GraphC1Ev+0x418>
 800560a:	2141      	movs	r1, #65	; 0x41
 800560c:	4618      	mov	r0, r3
 800560e:	f7ff ff1c 	bl	800544a <_ZN3jlb4NodeC1Ecff>
 8005612:	f107 0308 	add.w	r3, r7, #8
 8005616:	4619      	mov	r1, r3
 8005618:	4620      	mov	r0, r4
 800561a:	f007 ff42 	bl	800d4a2 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800561e:	f107 0308 	add.w	r3, r7, #8
 8005622:	4618      	mov	r0, r3
 8005624:	f7ff ff2e 	bl	8005484 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('B'), px_to_m(704), px_to_m(576)});
 8005628:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800562c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005630:	681c      	ldr	r4, [r3, #0]
 8005632:	f107 0320 	add.w	r3, r7, #32
 8005636:	eddf 0aec 	vldr	s1, [pc, #944]	; 80059e8 <_ZN3jlb5GraphC1Ev+0x428>
 800563a:	ed9f 0ae7 	vldr	s0, [pc, #924]	; 80059d8 <_ZN3jlb5GraphC1Ev+0x418>
 800563e:	2142      	movs	r1, #66	; 0x42
 8005640:	4618      	mov	r0, r3
 8005642:	f7ff ff02 	bl	800544a <_ZN3jlb4NodeC1Ecff>
 8005646:	f107 0320 	add.w	r3, r7, #32
 800564a:	4619      	mov	r1, r3
 800564c:	4620      	mov	r0, r4
 800564e:	f007 ff28 	bl	800d4a2 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005652:	f107 0320 	add.w	r3, r7, #32
 8005656:	4618      	mov	r0, r3
 8005658:	f7ff ff14 	bl	8005484 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('C'), px_to_m(640), px_to_m(384)});
 800565c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005660:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005664:	681c      	ldr	r4, [r3, #0]
 8005666:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800566a:	eddf 0adc 	vldr	s1, [pc, #880]	; 80059dc <_ZN3jlb5GraphC1Ev+0x41c>
 800566e:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8005672:	2143      	movs	r1, #67	; 0x43
 8005674:	4618      	mov	r0, r3
 8005676:	f7ff fee8 	bl	800544a <_ZN3jlb4NodeC1Ecff>
 800567a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800567e:	4619      	mov	r1, r3
 8005680:	4620      	mov	r0, r4
 8005682:	f007 ff0e 	bl	800d4a2 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005686:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800568a:	4618      	mov	r0, r3
 800568c:	f7ff fefa 	bl	8005484 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('D'), px_to_m(640), px_to_m(512)});
 8005690:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005694:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005698:	681c      	ldr	r4, [r3, #0]
 800569a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800569e:	eddf 0ad0 	vldr	s1, [pc, #832]	; 80059e0 <_ZN3jlb5GraphC1Ev+0x420>
 80056a2:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 80056a6:	2144      	movs	r1, #68	; 0x44
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7ff fece 	bl	800544a <_ZN3jlb4NodeC1Ecff>
 80056ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80056b2:	4619      	mov	r1, r3
 80056b4:	4620      	mov	r0, r4
 80056b6:	f007 fef4 	bl	800d4a2 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80056ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80056be:	4618      	mov	r0, r3
 80056c0:	f7ff fee0 	bl	8005484 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('E'), px_to_m(640), px_to_m(640)});
 80056c4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80056c8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80056cc:	681c      	ldr	r4, [r3, #0]
 80056ce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80056d2:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80056d6:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 80056da:	2145      	movs	r1, #69	; 0x45
 80056dc:	4618      	mov	r0, r3
 80056de:	f7ff feb4 	bl	800544a <_ZN3jlb4NodeC1Ecff>
 80056e2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80056e6:	4619      	mov	r1, r3
 80056e8:	4620      	mov	r0, r4
 80056ea:	f007 feda 	bl	800d4a2 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80056ee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7ff fec6 	bl	8005484 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('F'), px_to_m(576), px_to_m(448)});
 80056f8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80056fc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005700:	681c      	ldr	r4, [r3, #0]
 8005702:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005706:	eddf 0ab3 	vldr	s1, [pc, #716]	; 80059d4 <_ZN3jlb5GraphC1Ev+0x414>
 800570a:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 80059e8 <_ZN3jlb5GraphC1Ev+0x428>
 800570e:	2146      	movs	r1, #70	; 0x46
 8005710:	4618      	mov	r0, r3
 8005712:	f7ff fe9a 	bl	800544a <_ZN3jlb4NodeC1Ecff>
 8005716:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800571a:	4619      	mov	r1, r3
 800571c:	4620      	mov	r0, r4
 800571e:	f007 fec0 	bl	800d4a2 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005722:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff feac 	bl	8005484 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('G'), px_to_m(576), px_to_m(576)});
 800572c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005730:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005734:	681c      	ldr	r4, [r3, #0]
 8005736:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800573a:	eddf 0aab 	vldr	s1, [pc, #684]	; 80059e8 <_ZN3jlb5GraphC1Ev+0x428>
 800573e:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 80059e8 <_ZN3jlb5GraphC1Ev+0x428>
 8005742:	2147      	movs	r1, #71	; 0x47
 8005744:	4618      	mov	r0, r3
 8005746:	f7ff fe80 	bl	800544a <_ZN3jlb4NodeC1Ecff>
 800574a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800574e:	4619      	mov	r1, r3
 8005750:	4620      	mov	r0, r4
 8005752:	f007 fea6 	bl	800d4a2 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005756:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800575a:	4618      	mov	r0, r3
 800575c:	f7ff fe92 	bl	8005484 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('H'), px_to_m(512), px_to_m(384)});
 8005760:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005764:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005768:	681c      	ldr	r4, [r3, #0]
 800576a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800576e:	eddf 0a9b 	vldr	s1, [pc, #620]	; 80059dc <_ZN3jlb5GraphC1Ev+0x41c>
 8005772:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 80059e0 <_ZN3jlb5GraphC1Ev+0x420>
 8005776:	2148      	movs	r1, #72	; 0x48
 8005778:	4618      	mov	r0, r3
 800577a:	f7ff fe66 	bl	800544a <_ZN3jlb4NodeC1Ecff>
 800577e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005782:	4619      	mov	r1, r3
 8005784:	4620      	mov	r0, r4
 8005786:	f007 fe8c 	bl	800d4a2 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800578a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800578e:	4618      	mov	r0, r3
 8005790:	f7ff fe78 	bl	8005484 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('I'), px_to_m(512), px_to_m(512)});
 8005794:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005798:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800579c:	681c      	ldr	r4, [r3, #0]
 800579e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80057a2:	eddf 0a8f 	vldr	s1, [pc, #572]	; 80059e0 <_ZN3jlb5GraphC1Ev+0x420>
 80057a6:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 80059e0 <_ZN3jlb5GraphC1Ev+0x420>
 80057aa:	2149      	movs	r1, #73	; 0x49
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7ff fe4c 	bl	800544a <_ZN3jlb4NodeC1Ecff>
 80057b2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80057b6:	4619      	mov	r1, r3
 80057b8:	4620      	mov	r0, r4
 80057ba:	f007 fe72 	bl	800d4a2 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80057be:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7ff fe5e 	bl	8005484 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('J'), px_to_m(512), px_to_m(640)});
 80057c8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80057cc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80057d0:	681c      	ldr	r4, [r3, #0]
 80057d2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80057d6:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80057da:	ed9f 0a81 	vldr	s0, [pc, #516]	; 80059e0 <_ZN3jlb5GraphC1Ev+0x420>
 80057de:	214a      	movs	r1, #74	; 0x4a
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7ff fe32 	bl	800544a <_ZN3jlb4NodeC1Ecff>
 80057e6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80057ea:	4619      	mov	r1, r3
 80057ec:	4620      	mov	r0, r4
 80057ee:	f007 fe58 	bl	800d4a2 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80057f2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7ff fe44 	bl	8005484 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('K'), px_to_m(448), px_to_m(448)});
 80057fc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005800:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005804:	681c      	ldr	r4, [r3, #0]
 8005806:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800580a:	eddf 0a72 	vldr	s1, [pc, #456]	; 80059d4 <_ZN3jlb5GraphC1Ev+0x414>
 800580e:	ed9f 0a71 	vldr	s0, [pc, #452]	; 80059d4 <_ZN3jlb5GraphC1Ev+0x414>
 8005812:	214b      	movs	r1, #75	; 0x4b
 8005814:	4618      	mov	r0, r3
 8005816:	f7ff fe18 	bl	800544a <_ZN3jlb4NodeC1Ecff>
 800581a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800581e:	4619      	mov	r1, r3
 8005820:	4620      	mov	r0, r4
 8005822:	f007 fe3e 	bl	800d4a2 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005826:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800582a:	4618      	mov	r0, r3
 800582c:	f7ff fe2a 	bl	8005484 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('L'), px_to_m(448), px_to_m(576)});
 8005830:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005834:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005838:	681c      	ldr	r4, [r3, #0]
 800583a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800583e:	eddf 0a6a 	vldr	s1, [pc, #424]	; 80059e8 <_ZN3jlb5GraphC1Ev+0x428>
 8005842:	ed9f 0a64 	vldr	s0, [pc, #400]	; 80059d4 <_ZN3jlb5GraphC1Ev+0x414>
 8005846:	214c      	movs	r1, #76	; 0x4c
 8005848:	4618      	mov	r0, r3
 800584a:	f7ff fdfe 	bl	800544a <_ZN3jlb4NodeC1Ecff>
 800584e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005852:	4619      	mov	r1, r3
 8005854:	4620      	mov	r0, r4
 8005856:	f007 fe24 	bl	800d4a2 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800585a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800585e:	4618      	mov	r0, r3
 8005860:	f7ff fe10 	bl	8005484 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('M'), px_to_m(384), px_to_m(384)});
 8005864:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005868:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800586c:	681c      	ldr	r4, [r3, #0]
 800586e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005872:	eddf 0a5a 	vldr	s1, [pc, #360]	; 80059dc <_ZN3jlb5GraphC1Ev+0x41c>
 8005876:	ed9f 0a59 	vldr	s0, [pc, #356]	; 80059dc <_ZN3jlb5GraphC1Ev+0x41c>
 800587a:	214d      	movs	r1, #77	; 0x4d
 800587c:	4618      	mov	r0, r3
 800587e:	f7ff fde4 	bl	800544a <_ZN3jlb4NodeC1Ecff>
 8005882:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005886:	4619      	mov	r1, r3
 8005888:	4620      	mov	r0, r4
 800588a:	f007 fe0a 	bl	800d4a2 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800588e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005892:	4618      	mov	r0, r3
 8005894:	f7ff fdf6 	bl	8005484 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('N'), px_to_m(384), px_to_m(512)});
 8005898:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800589c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80058a0:	681c      	ldr	r4, [r3, #0]
 80058a2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80058a6:	eddf 0a4e 	vldr	s1, [pc, #312]	; 80059e0 <_ZN3jlb5GraphC1Ev+0x420>
 80058aa:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 80059dc <_ZN3jlb5GraphC1Ev+0x41c>
 80058ae:	214e      	movs	r1, #78	; 0x4e
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7ff fdca 	bl	800544a <_ZN3jlb4NodeC1Ecff>
 80058b6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80058ba:	4619      	mov	r1, r3
 80058bc:	4620      	mov	r0, r4
 80058be:	f007 fdf0 	bl	800d4a2 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80058c2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7ff fddc 	bl	8005484 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('O'), px_to_m(384), px_to_m(640)});
 80058cc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80058d0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80058d4:	681c      	ldr	r4, [r3, #0]
 80058d6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80058da:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80058de:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 80059dc <_ZN3jlb5GraphC1Ev+0x41c>
 80058e2:	214f      	movs	r1, #79	; 0x4f
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7ff fdb0 	bl	800544a <_ZN3jlb4NodeC1Ecff>
 80058ea:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80058ee:	4619      	mov	r1, r3
 80058f0:	4620      	mov	r0, r4
 80058f2:	f007 fdd6 	bl	800d4a2 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80058f6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7ff fdc2 	bl	8005484 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('P'), px_to_m(320), px_to_m(320)});
 8005900:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005904:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005908:	681c      	ldr	r4, [r3, #0]
 800590a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800590e:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8005912:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8005916:	2150      	movs	r1, #80	; 0x50
 8005918:	4618      	mov	r0, r3
 800591a:	f7ff fd96 	bl	800544a <_ZN3jlb4NodeC1Ecff>
 800591e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8005922:	4619      	mov	r1, r3
 8005924:	4620      	mov	r0, r4
 8005926:	f007 fdbc 	bl	800d4a2 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800592a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800592e:	4618      	mov	r0, r3
 8005930:	f7ff fda8 	bl	8005484 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('Q'), px_to_m(320), px_to_m(384)});
 8005934:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005938:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800593c:	681c      	ldr	r4, [r3, #0]
 800593e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8005942:	eddf 0a26 	vldr	s1, [pc, #152]	; 80059dc <_ZN3jlb5GraphC1Ev+0x41c>
 8005946:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800594a:	2151      	movs	r1, #81	; 0x51
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff fd7c 	bl	800544a <_ZN3jlb4NodeC1Ecff>
 8005952:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8005956:	4619      	mov	r1, r3
 8005958:	4620      	mov	r0, r4
 800595a:	f007 fda2 	bl	800d4a2 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800595e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8005962:	4618      	mov	r0, r3
 8005964:	f7ff fd8e 	bl	8005484 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('R'), px_to_m(320), px_to_m(448)});
 8005968:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800596c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005970:	681c      	ldr	r4, [r3, #0]
 8005972:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005976:	eddf 0a17 	vldr	s1, [pc, #92]	; 80059d4 <_ZN3jlb5GraphC1Ev+0x414>
 800597a:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800597e:	2152      	movs	r1, #82	; 0x52
 8005980:	4618      	mov	r0, r3
 8005982:	f7ff fd62 	bl	800544a <_ZN3jlb4NodeC1Ecff>
 8005986:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800598a:	4619      	mov	r1, r3
 800598c:	4620      	mov	r0, r4
 800598e:	f007 fd88 	bl	800d4a2 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005992:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005996:	4618      	mov	r0, r3
 8005998:	f7ff fd74 	bl	8005484 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('S'), px_to_m(320), px_to_m(512)});
 800599c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80059a0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80059a4:	681c      	ldr	r4, [r3, #0]
 80059a6:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80059aa:	eddf 0a0d 	vldr	s1, [pc, #52]	; 80059e0 <_ZN3jlb5GraphC1Ev+0x420>
 80059ae:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80059b2:	2153      	movs	r1, #83	; 0x53
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7ff fd48 	bl	800544a <_ZN3jlb4NodeC1Ecff>
 80059ba:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80059be:	4619      	mov	r1, r3
 80059c0:	4620      	mov	r0, r4
 80059c2:	f007 fd6e 	bl	800d4a2 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80059c6:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7ff fd5a 	bl	8005484 <_ZN3jlb4NodeD1Ev>
 80059d0:	e012      	b.n	80059f8 <_ZN3jlb5GraphC1Ev+0x438>
 80059d2:	bf00      	nop
 80059d4:	40866667 	.word	0x40866667
 80059d8:	40d33334 	.word	0x40d33334
 80059dc:	40666667 	.word	0x40666667
 80059e0:	4099999a 	.word	0x4099999a
 80059e4:	40d33334 	.word	0x40d33334
 80059e8:	40accccd 	.word	0x40accccd
 80059ec:	4019999a 	.word	0x4019999a
 80059f0:	40866667 	.word	0x40866667
 80059f4:	3f666667 	.word	0x3f666667
            nodes.push_back(Node{static_cast<char>('T'), px_to_m(320), px_to_m(576)});
 80059f8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80059fc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005a00:	681c      	ldr	r4, [r3, #0]
 8005a02:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8005a06:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 80059e8 <_ZN3jlb5GraphC1Ev+0x428>
 8005a0a:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8005a0e:	2154      	movs	r1, #84	; 0x54
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7ff fd1a 	bl	800544a <_ZN3jlb4NodeC1Ecff>
 8005a16:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	f007 fd40 	bl	800d4a2 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005a22:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7ff fd2c 	bl	8005484 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('U'), px_to_m(320), px_to_m(704)});
 8005a2c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a30:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005a34:	681c      	ldr	r4, [r3, #0]
 8005a36:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8005a3a:	ed5f 0a16 	vldr	s1, [pc, #-88]	; 80059e4 <_ZN3jlb5GraphC1Ev+0x424>
 8005a3e:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8005a42:	2155      	movs	r1, #85	; 0x55
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7ff fd00 	bl	800544a <_ZN3jlb4NodeC1Ecff>
 8005a4a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8005a4e:	4619      	mov	r1, r3
 8005a50:	4620      	mov	r0, r4
 8005a52:	f007 fd26 	bl	800d4a2 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005a56:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7ff fd12 	bl	8005484 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('V'), px_to_m(256), px_to_m(448)});
 8005a60:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a64:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005a68:	681c      	ldr	r4, [r3, #0]
 8005a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a6e:	ed5f 0a20 	vldr	s1, [pc, #-128]	; 80059f0 <_ZN3jlb5GraphC1Ev+0x430>
 8005a72:	ed1f 0a22 	vldr	s0, [pc, #-136]	; 80059ec <_ZN3jlb5GraphC1Ev+0x42c>
 8005a76:	2156      	movs	r1, #86	; 0x56
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7ff fce6 	bl	800544a <_ZN3jlb4NodeC1Ecff>
 8005a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a82:	4619      	mov	r1, r3
 8005a84:	4620      	mov	r0, r4
 8005a86:	f007 fd0c 	bl	800d4a2 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7ff fcf8 	bl	8005484 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('W'), px_to_m(256), px_to_m(576)});
 8005a94:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a98:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005a9c:	681c      	ldr	r4, [r3, #0]
 8005a9e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005aa2:	ed5f 0a2f 	vldr	s1, [pc, #-188]	; 80059e8 <_ZN3jlb5GraphC1Ev+0x428>
 8005aa6:	ed1f 0a2f 	vldr	s0, [pc, #-188]	; 80059ec <_ZN3jlb5GraphC1Ev+0x42c>
 8005aaa:	2157      	movs	r1, #87	; 0x57
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7ff fccc 	bl	800544a <_ZN3jlb4NodeC1Ecff>
 8005ab2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	4620      	mov	r0, r4
 8005aba:	f007 fcf2 	bl	800d4a2 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005abe:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7ff fcde 	bl	8005484 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('X'), px_to_m(96), px_to_m(448)});
 8005ac8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005acc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005ad0:	681c      	ldr	r4, [r3, #0]
 8005ad2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8005ad6:	ed5f 0a3a 	vldr	s1, [pc, #-232]	; 80059f0 <_ZN3jlb5GraphC1Ev+0x430>
 8005ada:	ed1f 0a3a 	vldr	s0, [pc, #-232]	; 80059f4 <_ZN3jlb5GraphC1Ev+0x434>
 8005ade:	2158      	movs	r1, #88	; 0x58
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7ff fcb2 	bl	800544a <_ZN3jlb4NodeC1Ecff>
 8005ae6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8005aea:	4619      	mov	r1, r3
 8005aec:	4620      	mov	r0, r4
 8005aee:	f007 fcd8 	bl	800d4a2 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005af2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7ff fcc4 	bl	8005484 <_ZN3jlb4NodeD1Ev>

            const auto UNIT           = SQUARE_LENGTH;
 8005afc:	4bea      	ldr	r3, [pc, #936]	; (8005ea8 <_ZN3jlb5GraphC1Ev+0x8e8>)
 8005afe:	f607 4264 	addw	r2, r7, #3172	; 0xc64
 8005b02:	6013      	str	r3, [r2, #0]
            const auto QUARTER_CIRCLE = 2 * UNIT * M_PI / 4.0f;
 8005b04:	a3e6      	add	r3, pc, #920	; (adr r3, 8005ea0 <_ZN3jlb5GraphC1Ev+0x8e0>)
 8005b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0a:	f607 4158 	addw	r1, r7, #3160	; 0xc58
 8005b0e:	e9c1 2300 	strd	r2, r3, [r1]

            this->operator[]('A').add_edge('C', Direction::LEFT, {'B', 'D'}, QUARTER_CIRCLE);
 8005b12:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b16:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005b1a:	2141      	movs	r1, #65	; 0x41
 8005b1c:	6818      	ldr	r0, [r3, #0]
 8005b1e:	f002 ff93 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8005b22:	4604      	mov	r4, r0
 8005b24:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b28:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 8005b2c:	4adf      	ldr	r2, [pc, #892]	; (8005eac <_ZN3jlb5GraphC1Ev+0x8ec>)
 8005b2e:	8812      	ldrh	r2, [r2, #0]
 8005b30:	801a      	strh	r2, [r3, #0]
 8005b32:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b36:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8005b3a:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b44:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8005b48:	2202      	movs	r2, #2
 8005b4a:	605a      	str	r2, [r3, #4]
 8005b4c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b50:	4618      	mov	r0, r3
 8005b52:	f01f feb0 	bl	80258b6 <_ZNSaIcEC1Ev>
 8005b56:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b5a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005b5e:	f6a2 2214 	subw	r2, r2, #2580	; 0xa14
 8005b62:	f507 7012 	add.w	r0, r7, #584	; 0x248
 8005b66:	ca06      	ldmia	r2, {r1, r2}
 8005b68:	f007 fcac 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005b6c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8005b70:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 8005eb8 <_ZN3jlb5GraphC1Ev+0x8f8>
 8005b74:	2200      	movs	r2, #0
 8005b76:	2143      	movs	r1, #67	; 0x43
 8005b78:	4620      	mov	r0, r4
 8005b7a:	f7ff fc9f 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005b7e:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8005b82:	4618      	mov	r0, r3
 8005b84:	f007 fb90 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005b88:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f01f fe94 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('A').add_edge('B', Direction::STRAIGHT, {'C'}, 2.0f * UNIT);
 8005b92:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b96:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005b9a:	2141      	movs	r1, #65	; 0x41
 8005b9c:	6818      	ldr	r0, [r3, #0]
 8005b9e:	f002 ff53 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8005ba2:	4604      	mov	r4, r0
 8005ba4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ba8:	f5a3 631f 	sub.w	r3, r3, #2544	; 0x9f0
 8005bac:	2243      	movs	r2, #67	; 0x43
 8005bae:	701a      	strb	r2, [r3, #0]
 8005bb0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005bb4:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 8005bb8:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8005bbc:	601a      	str	r2, [r3, #0]
 8005bbe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005bc2:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	605a      	str	r2, [r3, #4]
 8005bca:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f01f fe71 	bl	80258b6 <_ZNSaIcEC1Ev>
 8005bd4:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8005bd8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005bdc:	f6a2 12f8 	subw	r2, r2, #2552	; 0x9f8
 8005be0:	f507 7019 	add.w	r0, r7, #612	; 0x264
 8005be4:	ca06      	ldmia	r2, {r1, r2}
 8005be6:	f007 fc6d 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005bea:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8005bee:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 8005eb0 <_ZN3jlb5GraphC1Ev+0x8f0>
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	2142      	movs	r1, #66	; 0x42
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	f7ff fc60 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005bfc:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8005c00:	4618      	mov	r0, r3
 8005c02:	f007 fb51 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005c06:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f01f fe55 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('A').add_edge('D', Direction::RIGHT, {'C'}, QUARTER_CIRCLE);
 8005c10:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c14:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005c18:	2141      	movs	r1, #65	; 0x41
 8005c1a:	6818      	ldr	r0, [r3, #0]
 8005c1c:	f002 ff14 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8005c20:	4604      	mov	r4, r0
 8005c22:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c26:	f6a3 13d4 	subw	r3, r3, #2516	; 0x9d4
 8005c2a:	2243      	movs	r2, #67	; 0x43
 8005c2c:	701a      	strb	r2, [r3, #0]
 8005c2e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c32:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8005c36:	f507 7225 	add.w	r2, r7, #660	; 0x294
 8005c3a:	601a      	str	r2, [r3, #0]
 8005c3c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c40:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8005c44:	2201      	movs	r2, #1
 8005c46:	605a      	str	r2, [r3, #4]
 8005c48:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f01f fe32 	bl	80258b6 <_ZNSaIcEC1Ev>
 8005c52:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8005c56:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005c5a:	f6a2 12dc 	subw	r2, r2, #2524	; 0x9dc
 8005c5e:	f507 7020 	add.w	r0, r7, #640	; 0x280
 8005c62:	ca06      	ldmia	r2, {r1, r2}
 8005c64:	f007 fc2e 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005c68:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8005c6c:	ed9f 0a92 	vldr	s0, [pc, #584]	; 8005eb8 <_ZN3jlb5GraphC1Ev+0x8f8>
 8005c70:	2201      	movs	r2, #1
 8005c72:	2144      	movs	r1, #68	; 0x44
 8005c74:	4620      	mov	r0, r4
 8005c76:	f7ff fc21 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005c7a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f007 fb12 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005c84:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f01f fe16 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('A', Direction::STRAIGHT, {'E'}, 2.0f * UNIT);
 8005c8e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c92:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005c96:	2142      	movs	r1, #66	; 0x42
 8005c98:	6818      	ldr	r0, [r3, #0]
 8005c9a:	f002 fed5 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8005c9e:	4604      	mov	r4, r0
 8005ca0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ca4:	f6a3 13b8 	subw	r3, r3, #2488	; 0x9b8
 8005ca8:	2245      	movs	r2, #69	; 0x45
 8005caa:	701a      	strb	r2, [r3, #0]
 8005cac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005cb0:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 8005cb4:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8005cb8:	601a      	str	r2, [r3, #0]
 8005cba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005cbe:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	605a      	str	r2, [r3, #4]
 8005cc6:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f01f fdf3 	bl	80258b6 <_ZNSaIcEC1Ev>
 8005cd0:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8005cd4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005cd8:	f5a2 621c 	sub.w	r2, r2, #2496	; 0x9c0
 8005cdc:	f507 7027 	add.w	r0, r7, #668	; 0x29c
 8005ce0:	ca06      	ldmia	r2, {r1, r2}
 8005ce2:	f007 fbef 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005ce6:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8005cea:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8005eb0 <_ZN3jlb5GraphC1Ev+0x8f0>
 8005cee:	2202      	movs	r2, #2
 8005cf0:	2141      	movs	r1, #65	; 0x41
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f7ff fbe2 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005cf8:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f007 fad3 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005d02:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8005d06:	4618      	mov	r0, r3
 8005d08:	f01f fdd7 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('E', Direction::RIGHT, {'A', 'D'}, QUARTER_CIRCLE);
 8005d0c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d10:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005d14:	2142      	movs	r1, #66	; 0x42
 8005d16:	6818      	ldr	r0, [r3, #0]
 8005d18:	f002 fe96 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8005d1c:	4604      	mov	r4, r0
 8005d1e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d22:	f6a3 139c 	subw	r3, r3, #2460	; 0x99c
 8005d26:	4a63      	ldr	r2, [pc, #396]	; (8005eb4 <_ZN3jlb5GraphC1Ev+0x8f4>)
 8005d28:	8812      	ldrh	r2, [r2, #0]
 8005d2a:	801a      	strh	r2, [r3, #0]
 8005d2c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d30:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 8005d34:	f507 7233 	add.w	r2, r7, #716	; 0x2cc
 8005d38:	601a      	str	r2, [r3, #0]
 8005d3a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d3e:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 8005d42:	2202      	movs	r2, #2
 8005d44:	605a      	str	r2, [r3, #4]
 8005d46:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f01f fdb3 	bl	80258b6 <_ZNSaIcEC1Ev>
 8005d50:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005d54:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005d58:	f6a2 12a4 	subw	r2, r2, #2468	; 0x9a4
 8005d5c:	f507 702e 	add.w	r0, r7, #696	; 0x2b8
 8005d60:	ca06      	ldmia	r2, {r1, r2}
 8005d62:	f007 fbaf 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005d66:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8005d6a:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8005eb8 <_ZN3jlb5GraphC1Ev+0x8f8>
 8005d6e:	2201      	movs	r2, #1
 8005d70:	2145      	movs	r1, #69	; 0x45
 8005d72:	4620      	mov	r0, r4
 8005d74:	f7ff fba2 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005d78:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f007 fa93 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005d82:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005d86:	4618      	mov	r0, r3
 8005d88:	f01f fd97 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('D', Direction::LEFT, {'E'}, QUARTER_CIRCLE);
 8005d8c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d90:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005d94:	2142      	movs	r1, #66	; 0x42
 8005d96:	6818      	ldr	r0, [r3, #0]
 8005d98:	f002 fe56 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8005d9c:	4604      	mov	r4, r0
 8005d9e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005da2:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 8005da6:	2245      	movs	r2, #69	; 0x45
 8005da8:	701a      	strb	r2, [r3, #0]
 8005daa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005dae:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 8005db2:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005dbc:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	605a      	str	r2, [r3, #4]
 8005dc4:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f01f fd74 	bl	80258b6 <_ZNSaIcEC1Ev>
 8005dce:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8005dd2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005dd6:	f6a2 1288 	subw	r2, r2, #2440	; 0x988
 8005dda:	f507 7035 	add.w	r0, r7, #724	; 0x2d4
 8005dde:	ca06      	ldmia	r2, {r1, r2}
 8005de0:	f007 fb70 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005de4:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8005de8:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8005eb8 <_ZN3jlb5GraphC1Ev+0x8f8>
 8005dec:	2200      	movs	r2, #0
 8005dee:	2144      	movs	r1, #68	; 0x44
 8005df0:	4620      	mov	r0, r4
 8005df2:	f7ff fb63 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005df6:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f007 fa54 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005e00:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8005e04:	4618      	mov	r0, r3
 8005e06:	f01f fd58 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('C').add_edge('A', Direction::RIGHT, {'F'}, QUARTER_CIRCLE);
 8005e0a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e0e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005e12:	2143      	movs	r1, #67	; 0x43
 8005e14:	6818      	ldr	r0, [r3, #0]
 8005e16:	f002 fe17 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8005e1a:	4604      	mov	r4, r0
 8005e1c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e20:	f6a3 1364 	subw	r3, r3, #2404	; 0x964
 8005e24:	2246      	movs	r2, #70	; 0x46
 8005e26:	701a      	strb	r2, [r3, #0]
 8005e28:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e2c:	f6a3 136c 	subw	r3, r3, #2412	; 0x96c
 8005e30:	f507 7241 	add.w	r2, r7, #772	; 0x304
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e3a:	f6a3 136c 	subw	r3, r3, #2412	; 0x96c
 8005e3e:	2201      	movs	r2, #1
 8005e40:	605a      	str	r2, [r3, #4]
 8005e42:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8005e46:	4618      	mov	r0, r3
 8005e48:	f01f fd35 	bl	80258b6 <_ZNSaIcEC1Ev>
 8005e4c:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8005e50:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005e54:	f6a2 126c 	subw	r2, r2, #2412	; 0x96c
 8005e58:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8005e5c:	ca06      	ldmia	r2, {r1, r2}
 8005e5e:	f007 fb31 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005e62:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8005e66:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8005eb8 <_ZN3jlb5GraphC1Ev+0x8f8>
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	2141      	movs	r1, #65	; 0x41
 8005e6e:	4620      	mov	r0, r4
 8005e70:	f7ff fb24 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005e74:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f007 fa15 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005e7e:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8005e82:	4618      	mov	r0, r3
 8005e84:	f01f fd19 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('C').add_edge('F', Direction::LEFT, {'A'}, QUARTER_CIRCLE);
 8005e88:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e8c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005e90:	2143      	movs	r1, #67	; 0x43
 8005e92:	6818      	ldr	r0, [r3, #0]
 8005e94:	f002 fdd8 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8005e98:	e010      	b.n	8005ebc <_ZN3jlb5GraphC1Ev+0x8fc>
 8005e9a:	bf00      	nop
 8005e9c:	f3af 8000 	nop.w
 8005ea0:	460698c7 	.word	0x460698c7
 8005ea4:	3fee28c7 	.word	0x3fee28c7
 8005ea8:	3f19999a 	.word	0x3f19999a
 8005eac:	080296b0 	.word	0x080296b0
 8005eb0:	3f99999a 	.word	0x3f99999a
 8005eb4:	080296b4 	.word	0x080296b4
 8005eb8:	3f71463a 	.word	0x3f71463a
 8005ebc:	4604      	mov	r4, r0
 8005ebe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ec2:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 8005ec6:	2241      	movs	r2, #65	; 0x41
 8005ec8:	701a      	strb	r2, [r3, #0]
 8005eca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ece:	f5a3 6315 	sub.w	r3, r3, #2384	; 0x950
 8005ed2:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8005ed6:	601a      	str	r2, [r3, #0]
 8005ed8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005edc:	f5a3 6315 	sub.w	r3, r3, #2384	; 0x950
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	605a      	str	r2, [r3, #4]
 8005ee4:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f01f fce4 	bl	80258b6 <_ZNSaIcEC1Ev>
 8005eee:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8005ef2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005ef6:	f5a2 6215 	sub.w	r2, r2, #2384	; 0x950
 8005efa:	f507 7043 	add.w	r0, r7, #780	; 0x30c
 8005efe:	ca06      	ldmia	r2, {r1, r2}
 8005f00:	f007 fae0 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005f04:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8005f08:	ed1f 0a15 	vldr	s0, [pc, #-84]	; 8005eb8 <_ZN3jlb5GraphC1Ev+0x8f8>
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	2146      	movs	r1, #70	; 0x46
 8005f10:	4620      	mov	r0, r4
 8005f12:	f7ff fad3 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005f16:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f007 f9c4 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005f20:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8005f24:	4618      	mov	r0, r3
 8005f26:	f01f fcc8 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('A', Direction::LEFT, {'F', 'G', 'I'}, QUARTER_CIRCLE);
 8005f2a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f2e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005f32:	2144      	movs	r1, #68	; 0x44
 8005f34:	6818      	ldr	r0, [r3, #0]
 8005f36:	f002 fd87 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8005f3a:	4604      	mov	r4, r0
 8005f3c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f40:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 8005f44:	4ae5      	ldr	r2, [pc, #916]	; (80062dc <_ZN3jlb5GraphC1Ev+0xd1c>)
 8005f46:	6812      	ldr	r2, [r2, #0]
 8005f48:	4611      	mov	r1, r2
 8005f4a:	8019      	strh	r1, [r3, #0]
 8005f4c:	3302      	adds	r3, #2
 8005f4e:	0c12      	lsrs	r2, r2, #16
 8005f50:	701a      	strb	r2, [r3, #0]
 8005f52:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f56:	f6a3 1334 	subw	r3, r3, #2356	; 0x934
 8005f5a:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f64:	f6a3 1334 	subw	r3, r3, #2356	; 0x934
 8005f68:	2203      	movs	r2, #3
 8005f6a:	605a      	str	r2, [r3, #4]
 8005f6c:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8005f70:	4618      	mov	r0, r3
 8005f72:	f01f fca0 	bl	80258b6 <_ZNSaIcEC1Ev>
 8005f76:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8005f7a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005f7e:	f6a2 1234 	subw	r2, r2, #2356	; 0x934
 8005f82:	f507 704a 	add.w	r0, r7, #808	; 0x328
 8005f86:	ca06      	ldmia	r2, {r1, r2}
 8005f88:	f007 fa9c 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005f8c:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005f90:	ed9f 0ad6 	vldr	s0, [pc, #856]	; 80062ec <_ZN3jlb5GraphC1Ev+0xd2c>
 8005f94:	2200      	movs	r2, #0
 8005f96:	2141      	movs	r1, #65	; 0x41
 8005f98:	4620      	mov	r0, r4
 8005f9a:	f7ff fa8f 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005f9e:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f007 f980 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005fa8:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8005fac:	4618      	mov	r0, r3
 8005fae:	f01f fc84 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('B', Direction::RIGHT, {'F', 'G', 'I'}, QUARTER_CIRCLE);
 8005fb2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005fb6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005fba:	2144      	movs	r1, #68	; 0x44
 8005fbc:	6818      	ldr	r0, [r3, #0]
 8005fbe:	f002 fd43 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8005fc2:	4604      	mov	r4, r0
 8005fc4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005fc8:	f5a3 6311 	sub.w	r3, r3, #2320	; 0x910
 8005fcc:	4ac3      	ldr	r2, [pc, #780]	; (80062dc <_ZN3jlb5GraphC1Ev+0xd1c>)
 8005fce:	6812      	ldr	r2, [r2, #0]
 8005fd0:	4611      	mov	r1, r2
 8005fd2:	8019      	strh	r1, [r3, #0]
 8005fd4:	3302      	adds	r3, #2
 8005fd6:	0c12      	lsrs	r2, r2, #16
 8005fd8:	701a      	strb	r2, [r3, #0]
 8005fda:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005fde:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 8005fe2:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8005fe6:	601a      	str	r2, [r3, #0]
 8005fe8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005fec:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 8005ff0:	2203      	movs	r2, #3
 8005ff2:	605a      	str	r2, [r3, #4]
 8005ff4:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f01f fc5c 	bl	80258b6 <_ZNSaIcEC1Ev>
 8005ffe:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8006002:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006006:	f6a2 1218 	subw	r2, r2, #2328	; 0x918
 800600a:	f507 7051 	add.w	r0, r7, #836	; 0x344
 800600e:	ca06      	ldmia	r2, {r1, r2}
 8006010:	f007 fa58 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006014:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8006018:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 80062ec <_ZN3jlb5GraphC1Ev+0xd2c>
 800601c:	2201      	movs	r2, #1
 800601e:	2142      	movs	r1, #66	; 0x42
 8006020:	4620      	mov	r0, r4
 8006022:	f7ff fa4b 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006026:	f507 7351 	add.w	r3, r7, #836	; 0x344
 800602a:	4618      	mov	r0, r3
 800602c:	f007 f93c 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006030:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8006034:	4618      	mov	r0, r3
 8006036:	f01f fc40 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('G', Direction::LEFT, {'A', 'B'}, QUARTER_CIRCLE);
 800603a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800603e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006042:	2144      	movs	r1, #68	; 0x44
 8006044:	6818      	ldr	r0, [r3, #0]
 8006046:	f002 fcff 	bl	8008a48 <_ZN3jlb5GraphixEc>
 800604a:	4604      	mov	r4, r0
 800604c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006050:	f6a3 03f4 	subw	r3, r3, #2292	; 0x8f4
 8006054:	4aa2      	ldr	r2, [pc, #648]	; (80062e0 <_ZN3jlb5GraphC1Ev+0xd20>)
 8006056:	8812      	ldrh	r2, [r2, #0]
 8006058:	801a      	strh	r2, [r3, #0]
 800605a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800605e:	f6a3 03fc 	subw	r3, r3, #2300	; 0x8fc
 8006062:	f507 725d 	add.w	r2, r7, #884	; 0x374
 8006066:	601a      	str	r2, [r3, #0]
 8006068:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800606c:	f6a3 03fc 	subw	r3, r3, #2300	; 0x8fc
 8006070:	2202      	movs	r2, #2
 8006072:	605a      	str	r2, [r3, #4]
 8006074:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8006078:	4618      	mov	r0, r3
 800607a:	f01f fc1c 	bl	80258b6 <_ZNSaIcEC1Ev>
 800607e:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8006082:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006086:	f6a2 02fc 	subw	r2, r2, #2300	; 0x8fc
 800608a:	f507 7058 	add.w	r0, r7, #864	; 0x360
 800608e:	ca06      	ldmia	r2, {r1, r2}
 8006090:	f007 fa18 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006094:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8006098:	ed9f 0a94 	vldr	s0, [pc, #592]	; 80062ec <_ZN3jlb5GraphC1Ev+0xd2c>
 800609c:	2200      	movs	r2, #0
 800609e:	2147      	movs	r1, #71	; 0x47
 80060a0:	4620      	mov	r0, r4
 80060a2:	f7ff fa0b 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80060a6:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80060aa:	4618      	mov	r0, r3
 80060ac:	f007 f8fc 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 80060b0:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80060b4:	4618      	mov	r0, r3
 80060b6:	f01f fc00 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('I', Direction::STRAIGHT, {'A', 'B'}, 2.0f * UNIT);
 80060ba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80060be:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80060c2:	2144      	movs	r1, #68	; 0x44
 80060c4:	6818      	ldr	r0, [r3, #0]
 80060c6:	f002 fcbf 	bl	8008a48 <_ZN3jlb5GraphixEc>
 80060ca:	4604      	mov	r4, r0
 80060cc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80060d0:	f6a3 03d8 	subw	r3, r3, #2264	; 0x8d8
 80060d4:	4a82      	ldr	r2, [pc, #520]	; (80062e0 <_ZN3jlb5GraphC1Ev+0xd20>)
 80060d6:	8812      	ldrh	r2, [r2, #0]
 80060d8:	801a      	strh	r2, [r3, #0]
 80060da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80060de:	f5a3 630e 	sub.w	r3, r3, #2272	; 0x8e0
 80060e2:	f507 7264 	add.w	r2, r7, #912	; 0x390
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80060ec:	f5a3 630e 	sub.w	r3, r3, #2272	; 0x8e0
 80060f0:	2202      	movs	r2, #2
 80060f2:	605a      	str	r2, [r3, #4]
 80060f4:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80060f8:	4618      	mov	r0, r3
 80060fa:	f01f fbdc 	bl	80258b6 <_ZNSaIcEC1Ev>
 80060fe:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8006102:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006106:	f5a2 620e 	sub.w	r2, r2, #2272	; 0x8e0
 800610a:	f507 705f 	add.w	r0, r7, #892	; 0x37c
 800610e:	ca06      	ldmia	r2, {r1, r2}
 8006110:	f007 f9d8 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006114:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8006118:	ed9f 0a72 	vldr	s0, [pc, #456]	; 80062e4 <_ZN3jlb5GraphC1Ev+0xd24>
 800611c:	2202      	movs	r2, #2
 800611e:	2149      	movs	r1, #73	; 0x49
 8006120:	4620      	mov	r0, r4
 8006122:	f7ff f9cb 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006126:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 800612a:	4618      	mov	r0, r3
 800612c:	f007 f8bc 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006130:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8006134:	4618      	mov	r0, r3
 8006136:	f01f fbc0 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('F', Direction::RIGHT, {'A', 'B'}, QUARTER_CIRCLE);
 800613a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800613e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006142:	2144      	movs	r1, #68	; 0x44
 8006144:	6818      	ldr	r0, [r3, #0]
 8006146:	f002 fc7f 	bl	8008a48 <_ZN3jlb5GraphixEc>
 800614a:	4604      	mov	r4, r0
 800614c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006150:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 8006154:	4a62      	ldr	r2, [pc, #392]	; (80062e0 <_ZN3jlb5GraphC1Ev+0xd20>)
 8006156:	8812      	ldrh	r2, [r2, #0]
 8006158:	801a      	strh	r2, [r3, #0]
 800615a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800615e:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 8006162:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 8006166:	601a      	str	r2, [r3, #0]
 8006168:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800616c:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 8006170:	2202      	movs	r2, #2
 8006172:	605a      	str	r2, [r3, #4]
 8006174:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8006178:	4618      	mov	r0, r3
 800617a:	f01f fb9c 	bl	80258b6 <_ZNSaIcEC1Ev>
 800617e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8006182:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006186:	f6a2 02c4 	subw	r2, r2, #2244	; 0x8c4
 800618a:	f507 7066 	add.w	r0, r7, #920	; 0x398
 800618e:	ca06      	ldmia	r2, {r1, r2}
 8006190:	f007 f998 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006194:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8006198:	ed9f 0a54 	vldr	s0, [pc, #336]	; 80062ec <_ZN3jlb5GraphC1Ev+0xd2c>
 800619c:	2201      	movs	r2, #1
 800619e:	2146      	movs	r1, #70	; 0x46
 80061a0:	4620      	mov	r0, r4
 80061a2:	f7ff f98b 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80061a6:	f507 7366 	add.w	r3, r7, #920	; 0x398
 80061aa:	4618      	mov	r0, r3
 80061ac:	f007 f87c 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 80061b0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80061b4:	4618      	mov	r0, r3
 80061b6:	f01f fb80 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('B', Direction::LEFT, {'G', 'J'}, QUARTER_CIRCLE);
 80061ba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80061be:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80061c2:	2145      	movs	r1, #69	; 0x45
 80061c4:	6818      	ldr	r0, [r3, #0]
 80061c6:	f002 fc3f 	bl	8008a48 <_ZN3jlb5GraphixEc>
 80061ca:	4604      	mov	r4, r0
 80061cc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80061d0:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 80061d4:	4a44      	ldr	r2, [pc, #272]	; (80062e8 <_ZN3jlb5GraphC1Ev+0xd28>)
 80061d6:	8812      	ldrh	r2, [r2, #0]
 80061d8:	801a      	strh	r2, [r3, #0]
 80061da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80061de:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 80061e2:	f507 7272 	add.w	r2, r7, #968	; 0x3c8
 80061e6:	601a      	str	r2, [r3, #0]
 80061e8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80061ec:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 80061f0:	2202      	movs	r2, #2
 80061f2:	605a      	str	r2, [r3, #4]
 80061f4:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 80061f8:	4618      	mov	r0, r3
 80061fa:	f01f fb5c 	bl	80258b6 <_ZNSaIcEC1Ev>
 80061fe:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8006202:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006206:	f6a2 02a8 	subw	r2, r2, #2216	; 0x8a8
 800620a:	f507 706d 	add.w	r0, r7, #948	; 0x3b4
 800620e:	ca06      	ldmia	r2, {r1, r2}
 8006210:	f007 f958 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006214:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8006218:	ed9f 0a34 	vldr	s0, [pc, #208]	; 80062ec <_ZN3jlb5GraphC1Ev+0xd2c>
 800621c:	2200      	movs	r2, #0
 800621e:	2142      	movs	r1, #66	; 0x42
 8006220:	4620      	mov	r0, r4
 8006222:	f7ff f94b 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006226:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 800622a:	4618      	mov	r0, r3
 800622c:	f007 f83c 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006230:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8006234:	4618      	mov	r0, r3
 8006236:	f01f fb40 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('J', Direction::STRAIGHT, {'B'}, 2.0f * UNIT);
 800623a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800623e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006242:	2145      	movs	r1, #69	; 0x45
 8006244:	6818      	ldr	r0, [r3, #0]
 8006246:	f002 fbff 	bl	8008a48 <_ZN3jlb5GraphixEc>
 800624a:	4604      	mov	r4, r0
 800624c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006250:	f6a3 0384 	subw	r3, r3, #2180	; 0x884
 8006254:	2242      	movs	r2, #66	; 0x42
 8006256:	701a      	strb	r2, [r3, #0]
 8006258:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800625c:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 8006260:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 8006264:	601a      	str	r2, [r3, #0]
 8006266:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800626a:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 800626e:	2201      	movs	r2, #1
 8006270:	605a      	str	r2, [r3, #4]
 8006272:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8006276:	4618      	mov	r0, r3
 8006278:	f01f fb1d 	bl	80258b6 <_ZNSaIcEC1Ev>
 800627c:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8006280:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006284:	f6a2 028c 	subw	r2, r2, #2188	; 0x88c
 8006288:	f507 7074 	add.w	r0, r7, #976	; 0x3d0
 800628c:	ca06      	ldmia	r2, {r1, r2}
 800628e:	f007 f919 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006292:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8006296:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80062e4 <_ZN3jlb5GraphC1Ev+0xd24>
 800629a:	2202      	movs	r2, #2
 800629c:	214a      	movs	r1, #74	; 0x4a
 800629e:	4620      	mov	r0, r4
 80062a0:	f7ff f90c 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80062a4:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80062a8:	4618      	mov	r0, r3
 80062aa:	f006 fffd 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 80062ae:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80062b2:	4618      	mov	r0, r3
 80062b4:	f01f fb01 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('G', Direction::RIGHT, {'B'}, QUARTER_CIRCLE);
 80062b8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80062bc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80062c0:	2145      	movs	r1, #69	; 0x45
 80062c2:	6818      	ldr	r0, [r3, #0]
 80062c4:	f002 fbc0 	bl	8008a48 <_ZN3jlb5GraphixEc>
 80062c8:	4604      	mov	r4, r0
 80062ca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80062ce:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 80062d2:	2242      	movs	r2, #66	; 0x42
 80062d4:	701a      	strb	r2, [r3, #0]
 80062d6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80062da:	e009      	b.n	80062f0 <_ZN3jlb5GraphC1Ev+0xd30>
 80062dc:	080296b8 	.word	0x080296b8
 80062e0:	080296bc 	.word	0x080296bc
 80062e4:	3f99999a 	.word	0x3f99999a
 80062e8:	080296c0 	.word	0x080296c0
 80062ec:	3f71463a 	.word	0x3f71463a
 80062f0:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 80062f4:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 80062f8:	601a      	str	r2, [r3, #0]
 80062fa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80062fe:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 8006302:	2201      	movs	r2, #1
 8006304:	605a      	str	r2, [r3, #4]
 8006306:	f207 4304 	addw	r3, r7, #1028	; 0x404
 800630a:	4618      	mov	r0, r3
 800630c:	f01f fad3 	bl	80258b6 <_ZNSaIcEC1Ev>
 8006310:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8006314:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006318:	f5a2 6207 	sub.w	r2, r2, #2160	; 0x870
 800631c:	f507 707b 	add.w	r0, r7, #1004	; 0x3ec
 8006320:	ca06      	ldmia	r2, {r1, r2}
 8006322:	f007 f8cf 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006326:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 800632a:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 80062ec <_ZN3jlb5GraphC1Ev+0xd2c>
 800632e:	2201      	movs	r2, #1
 8006330:	2147      	movs	r1, #71	; 0x47
 8006332:	4620      	mov	r0, r4
 8006334:	f7ff f8c2 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006338:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 800633c:	4618      	mov	r0, r3
 800633e:	f006 ffb3 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006342:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8006346:	4618      	mov	r0, r3
 8006348:	f01f fab7 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('C', Direction::RIGHT, {'D', 'G', 'I'}, QUARTER_CIRCLE);
 800634c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006350:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006354:	2146      	movs	r1, #70	; 0x46
 8006356:	6818      	ldr	r0, [r3, #0]
 8006358:	f002 fb76 	bl	8008a48 <_ZN3jlb5GraphixEc>
 800635c:	4604      	mov	r4, r0
 800635e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006362:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 8006366:	4ae4      	ldr	r2, [pc, #912]	; (80066f8 <_ZN3jlb5GraphC1Ev+0x1138>)
 8006368:	6812      	ldr	r2, [r2, #0]
 800636a:	4611      	mov	r1, r2
 800636c:	8019      	strh	r1, [r3, #0]
 800636e:	3302      	adds	r3, #2
 8006370:	0c12      	lsrs	r2, r2, #16
 8006372:	701a      	strb	r2, [r3, #0]
 8006374:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006378:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 800637c:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006386:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 800638a:	2203      	movs	r2, #3
 800638c:	605a      	str	r2, [r3, #4]
 800638e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8006392:	4618      	mov	r0, r3
 8006394:	f01f fa8f 	bl	80258b6 <_ZNSaIcEC1Ev>
 8006398:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800639c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80063a0:	f6a2 0254 	subw	r2, r2, #2132	; 0x854
 80063a4:	f507 6081 	add.w	r0, r7, #1032	; 0x408
 80063a8:	ca06      	ldmia	r2, {r1, r2}
 80063aa:	f007 f88b 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80063ae:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80063b2:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 80066fc <_ZN3jlb5GraphC1Ev+0x113c>
 80063b6:	2201      	movs	r2, #1
 80063b8:	2143      	movs	r1, #67	; 0x43
 80063ba:	4620      	mov	r0, r4
 80063bc:	f7ff f87e 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80063c0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80063c4:	4618      	mov	r0, r3
 80063c6:	f006 ff6f 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 80063ca:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80063ce:	4618      	mov	r0, r3
 80063d0:	f01f fa73 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('D', Direction::LEFT, {'C', 'H'}, QUARTER_CIRCLE);
 80063d4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80063d8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80063dc:	2146      	movs	r1, #70	; 0x46
 80063de:	6818      	ldr	r0, [r3, #0]
 80063e0:	f002 fb32 	bl	8008a48 <_ZN3jlb5GraphixEc>
 80063e4:	4604      	mov	r4, r0
 80063e6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80063ea:	f5a3 6303 	sub.w	r3, r3, #2096	; 0x830
 80063ee:	4ac4      	ldr	r2, [pc, #784]	; (8006700 <_ZN3jlb5GraphC1Ev+0x1140>)
 80063f0:	8812      	ldrh	r2, [r2, #0]
 80063f2:	801a      	strh	r2, [r3, #0]
 80063f4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80063f8:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 80063fc:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006406:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 800640a:	2202      	movs	r2, #2
 800640c:	605a      	str	r2, [r3, #4]
 800640e:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8006412:	4618      	mov	r0, r3
 8006414:	f01f fa4f 	bl	80258b6 <_ZNSaIcEC1Ev>
 8006418:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800641c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006420:	f6a2 0238 	subw	r2, r2, #2104	; 0x838
 8006424:	f207 4024 	addw	r0, r7, #1060	; 0x424
 8006428:	ca06      	ldmia	r2, {r1, r2}
 800642a:	f007 f84b 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800642e:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8006432:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 80066fc <_ZN3jlb5GraphC1Ev+0x113c>
 8006436:	2200      	movs	r2, #0
 8006438:	2144      	movs	r1, #68	; 0x44
 800643a:	4620      	mov	r0, r4
 800643c:	f7ff f83e 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006440:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8006444:	4618      	mov	r0, r3
 8006446:	f006 ff2f 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 800644a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800644e:	4618      	mov	r0, r3
 8006450:	f01f fa33 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('G', Direction::STRAIGHT, {'C', 'H'}, 2.0f * UNIT);
 8006454:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006458:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800645c:	2146      	movs	r1, #70	; 0x46
 800645e:	6818      	ldr	r0, [r3, #0]
 8006460:	f002 faf2 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8006464:	4604      	mov	r4, r0
 8006466:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800646a:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 800646e:	4aa4      	ldr	r2, [pc, #656]	; (8006700 <_ZN3jlb5GraphC1Ev+0x1140>)
 8006470:	8812      	ldrh	r2, [r2, #0]
 8006472:	801a      	strh	r2, [r3, #0]
 8006474:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006478:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800647c:	f207 4254 	addw	r2, r7, #1108	; 0x454
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006486:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800648a:	2202      	movs	r2, #2
 800648c:	605a      	str	r2, [r3, #4]
 800648e:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8006492:	4618      	mov	r0, r3
 8006494:	f01f fa0f 	bl	80258b6 <_ZNSaIcEC1Ev>
 8006498:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800649c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80064a0:	f6a2 021c 	subw	r2, r2, #2076	; 0x81c
 80064a4:	f507 6088 	add.w	r0, r7, #1088	; 0x440
 80064a8:	ca06      	ldmia	r2, {r1, r2}
 80064aa:	f007 f80b 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80064ae:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80064b2:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8006704 <_ZN3jlb5GraphC1Ev+0x1144>
 80064b6:	2202      	movs	r2, #2
 80064b8:	2147      	movs	r1, #71	; 0x47
 80064ba:	4620      	mov	r0, r4
 80064bc:	f7fe fffe 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80064c0:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80064c4:	4618      	mov	r0, r3
 80064c6:	f006 feef 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 80064ca:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80064ce:	4618      	mov	r0, r3
 80064d0:	f01f f9f3 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('I', Direction::RIGHT, {'C', 'H'}, QUARTER_CIRCLE);
 80064d4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80064d8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80064dc:	2146      	movs	r1, #70	; 0x46
 80064de:	6818      	ldr	r0, [r3, #0]
 80064e0:	f002 fab2 	bl	8008a48 <_ZN3jlb5GraphixEc>
 80064e4:	4604      	mov	r4, r0
 80064e6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80064ea:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 80064ee:	4a84      	ldr	r2, [pc, #528]	; (8006700 <_ZN3jlb5GraphC1Ev+0x1140>)
 80064f0:	8812      	ldrh	r2, [r2, #0]
 80064f2:	801a      	strh	r2, [r3, #0]
 80064f4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80064f8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80064fc:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8006500:	601a      	str	r2, [r3, #0]
 8006502:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006506:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800650a:	2202      	movs	r2, #2
 800650c:	605a      	str	r2, [r3, #4]
 800650e:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8006512:	4618      	mov	r0, r3
 8006514:	f01f f9cf 	bl	80258b6 <_ZNSaIcEC1Ev>
 8006518:	f207 4374 	addw	r3, r7, #1140	; 0x474
 800651c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006520:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8006524:	f207 405c 	addw	r0, r7, #1116	; 0x45c
 8006528:	ca06      	ldmia	r2, {r1, r2}
 800652a:	f006 ffcb 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800652e:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8006532:	ed9f 0a72 	vldr	s0, [pc, #456]	; 80066fc <_ZN3jlb5GraphC1Ev+0x113c>
 8006536:	2201      	movs	r2, #1
 8006538:	2149      	movs	r1, #73	; 0x49
 800653a:	4620      	mov	r0, r4
 800653c:	f7fe ffbe 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006540:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8006544:	4618      	mov	r0, r3
 8006546:	f006 feaf 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 800654a:	f207 4374 	addw	r3, r7, #1140	; 0x474
 800654e:	4618      	mov	r0, r3
 8006550:	f01f f9b3 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('H', Direction::LEFT, {'D', 'G', 'I'}, QUARTER_CIRCLE);
 8006554:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006558:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800655c:	2146      	movs	r1, #70	; 0x46
 800655e:	6818      	ldr	r0, [r3, #0]
 8006560:	f002 fa72 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8006564:	4604      	mov	r4, r0
 8006566:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800656a:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 800656e:	4a62      	ldr	r2, [pc, #392]	; (80066f8 <_ZN3jlb5GraphC1Ev+0x1138>)
 8006570:	6812      	ldr	r2, [r2, #0]
 8006572:	4611      	mov	r1, r2
 8006574:	8019      	strh	r1, [r3, #0]
 8006576:	3302      	adds	r3, #2
 8006578:	0c12      	lsrs	r2, r2, #16
 800657a:	701a      	strb	r2, [r3, #0]
 800657c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006580:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 8006584:	f207 428c 	addw	r2, r7, #1164	; 0x48c
 8006588:	601a      	str	r2, [r3, #0]
 800658a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800658e:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 8006592:	2203      	movs	r2, #3
 8006594:	605a      	str	r2, [r3, #4]
 8006596:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800659a:	4618      	mov	r0, r3
 800659c:	f01f f98b 	bl	80258b6 <_ZNSaIcEC1Ev>
 80065a0:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80065a4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80065a8:	f2a2 72e4 	subw	r2, r2, #2020	; 0x7e4
 80065ac:	f507 608f 	add.w	r0, r7, #1144	; 0x478
 80065b0:	ca06      	ldmia	r2, {r1, r2}
 80065b2:	f006 ff87 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80065b6:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80065ba:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80066fc <_ZN3jlb5GraphC1Ev+0x113c>
 80065be:	2200      	movs	r2, #0
 80065c0:	2148      	movs	r1, #72	; 0x48
 80065c2:	4620      	mov	r0, r4
 80065c4:	f7fe ff7a 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80065c8:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80065cc:	4618      	mov	r0, r3
 80065ce:	f006 fe6b 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 80065d2:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80065d6:	4618      	mov	r0, r3
 80065d8:	f01f f96f 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('F', Direction::STRAIGHT, {'E', 'J'}, 2.0f * UNIT);
 80065dc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80065e0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80065e4:	2147      	movs	r1, #71	; 0x47
 80065e6:	6818      	ldr	r0, [r3, #0]
 80065e8:	f002 fa2e 	bl	8008a48 <_ZN3jlb5GraphixEc>
 80065ec:	4604      	mov	r4, r0
 80065ee:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80065f2:	f5a3 63f8 	sub.w	r3, r3, #1984	; 0x7c0
 80065f6:	4a44      	ldr	r2, [pc, #272]	; (8006708 <_ZN3jlb5GraphC1Ev+0x1148>)
 80065f8:	8812      	ldrh	r2, [r2, #0]
 80065fa:	801a      	strh	r2, [r3, #0]
 80065fc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006600:	f5a3 63f9 	sub.w	r3, r3, #1992	; 0x7c8
 8006604:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 8006608:	601a      	str	r2, [r3, #0]
 800660a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800660e:	f5a3 63f9 	sub.w	r3, r3, #1992	; 0x7c8
 8006612:	2202      	movs	r2, #2
 8006614:	605a      	str	r2, [r3, #4]
 8006616:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 800661a:	4618      	mov	r0, r3
 800661c:	f01f f94b 	bl	80258b6 <_ZNSaIcEC1Ev>
 8006620:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8006624:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006628:	f5a2 62f9 	sub.w	r2, r2, #1992	; 0x7c8
 800662c:	f207 4094 	addw	r0, r7, #1172	; 0x494
 8006630:	ca06      	ldmia	r2, {r1, r2}
 8006632:	f006 ff47 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006636:	f207 4394 	addw	r3, r7, #1172	; 0x494
 800663a:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8006704 <_ZN3jlb5GraphC1Ev+0x1144>
 800663e:	2202      	movs	r2, #2
 8006640:	2146      	movs	r1, #70	; 0x46
 8006642:	4620      	mov	r0, r4
 8006644:	f7fe ff3a 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006648:	f207 4394 	addw	r3, r7, #1172	; 0x494
 800664c:	4618      	mov	r0, r3
 800664e:	f006 fe2b 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006652:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8006656:	4618      	mov	r0, r3
 8006658:	f01f f92f 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('D', Direction::RIGHT, {'E', 'J'}, QUARTER_CIRCLE);
 800665c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006660:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006664:	2147      	movs	r1, #71	; 0x47
 8006666:	6818      	ldr	r0, [r3, #0]
 8006668:	f002 f9ee 	bl	8008a48 <_ZN3jlb5GraphixEc>
 800666c:	4604      	mov	r4, r0
 800666e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006672:	f2a3 73a4 	subw	r3, r3, #1956	; 0x7a4
 8006676:	4a24      	ldr	r2, [pc, #144]	; (8006708 <_ZN3jlb5GraphC1Ev+0x1148>)
 8006678:	8812      	ldrh	r2, [r2, #0]
 800667a:	801a      	strh	r2, [r3, #0]
 800667c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006680:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8006684:	f207 42c4 	addw	r2, r7, #1220	; 0x4c4
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800668e:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8006692:	2202      	movs	r2, #2
 8006694:	605a      	str	r2, [r3, #4]
 8006696:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800669a:	4618      	mov	r0, r3
 800669c:	f01f f90b 	bl	80258b6 <_ZNSaIcEC1Ev>
 80066a0:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 80066a4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80066a8:	f2a2 72ac 	subw	r2, r2, #1964	; 0x7ac
 80066ac:	f507 6096 	add.w	r0, r7, #1200	; 0x4b0
 80066b0:	ca06      	ldmia	r2, {r1, r2}
 80066b2:	f006 ff07 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80066b6:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80066ba:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80066fc <_ZN3jlb5GraphC1Ev+0x113c>
 80066be:	2201      	movs	r2, #1
 80066c0:	2144      	movs	r1, #68	; 0x44
 80066c2:	4620      	mov	r0, r4
 80066c4:	f7fe fefa 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80066c8:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80066cc:	4618      	mov	r0, r3
 80066ce:	f006 fdeb 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 80066d2:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 80066d6:	4618      	mov	r0, r3
 80066d8:	f01f f8ef 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('E', Direction::LEFT, {'D', 'F', 'I'}, QUARTER_CIRCLE);
 80066dc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80066e0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80066e4:	2147      	movs	r1, #71	; 0x47
 80066e6:	6818      	ldr	r0, [r3, #0]
 80066e8:	f002 f9ae 	bl	8008a48 <_ZN3jlb5GraphixEc>
 80066ec:	4604      	mov	r4, r0
 80066ee:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80066f2:	f5a3 63f1 	sub.w	r3, r3, #1928	; 0x788
 80066f6:	e009      	b.n	800670c <_ZN3jlb5GraphC1Ev+0x114c>
 80066f8:	080296c4 	.word	0x080296c4
 80066fc:	3f71463a 	.word	0x3f71463a
 8006700:	080296c8 	.word	0x080296c8
 8006704:	3f99999a 	.word	0x3f99999a
 8006708:	080296cc 	.word	0x080296cc
 800670c:	4ae6      	ldr	r2, [pc, #920]	; (8006aa8 <_ZN3jlb5GraphC1Ev+0x14e8>)
 800670e:	6812      	ldr	r2, [r2, #0]
 8006710:	4611      	mov	r1, r2
 8006712:	8019      	strh	r1, [r3, #0]
 8006714:	3302      	adds	r3, #2
 8006716:	0c12      	lsrs	r2, r2, #16
 8006718:	701a      	strb	r2, [r3, #0]
 800671a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800671e:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 8006722:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 8006726:	601a      	str	r2, [r3, #0]
 8006728:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800672c:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 8006730:	2203      	movs	r2, #3
 8006732:	605a      	str	r2, [r3, #4]
 8006734:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8006738:	4618      	mov	r0, r3
 800673a:	f01f f8bc 	bl	80258b6 <_ZNSaIcEC1Ev>
 800673e:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8006742:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006746:	f5a2 62f2 	sub.w	r2, r2, #1936	; 0x790
 800674a:	f207 40cc 	addw	r0, r7, #1228	; 0x4cc
 800674e:	ca06      	ldmia	r2, {r1, r2}
 8006750:	f006 feb8 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006754:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8006758:	ed9f 0ad4 	vldr	s0, [pc, #848]	; 8006aac <_ZN3jlb5GraphC1Ev+0x14ec>
 800675c:	2200      	movs	r2, #0
 800675e:	2145      	movs	r1, #69	; 0x45
 8006760:	4620      	mov	r0, r4
 8006762:	f7fe feab 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006766:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 800676a:	4618      	mov	r0, r3
 800676c:	f006 fd9c 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006770:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8006774:	4618      	mov	r0, r3
 8006776:	f01f f8a0 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('J', Direction::RIGHT, {'D', 'F', 'I'}, QUARTER_CIRCLE);
 800677a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800677e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006782:	2147      	movs	r1, #71	; 0x47
 8006784:	6818      	ldr	r0, [r3, #0]
 8006786:	f002 f95f 	bl	8008a48 <_ZN3jlb5GraphixEc>
 800678a:	4604      	mov	r4, r0
 800678c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006790:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 8006794:	4ac4      	ldr	r2, [pc, #784]	; (8006aa8 <_ZN3jlb5GraphC1Ev+0x14e8>)
 8006796:	6812      	ldr	r2, [r2, #0]
 8006798:	4611      	mov	r1, r2
 800679a:	8019      	strh	r1, [r3, #0]
 800679c:	3302      	adds	r3, #2
 800679e:	0c12      	lsrs	r2, r2, #16
 80067a0:	701a      	strb	r2, [r3, #0]
 80067a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80067a6:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 80067aa:	f207 42fc 	addw	r2, r7, #1276	; 0x4fc
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80067b4:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 80067b8:	2203      	movs	r2, #3
 80067ba:	605a      	str	r2, [r3, #4]
 80067bc:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 80067c0:	4618      	mov	r0, r3
 80067c2:	f01f f878 	bl	80258b6 <_ZNSaIcEC1Ev>
 80067c6:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 80067ca:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80067ce:	f2a2 7274 	subw	r2, r2, #1908	; 0x774
 80067d2:	f507 609d 	add.w	r0, r7, #1256	; 0x4e8
 80067d6:	ca06      	ldmia	r2, {r1, r2}
 80067d8:	f006 fe74 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80067dc:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80067e0:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8006aac <_ZN3jlb5GraphC1Ev+0x14ec>
 80067e4:	2201      	movs	r2, #1
 80067e6:	214a      	movs	r1, #74	; 0x4a
 80067e8:	4620      	mov	r0, r4
 80067ea:	f7fe fe67 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80067ee:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80067f2:	4618      	mov	r0, r3
 80067f4:	f006 fd58 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 80067f8:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 80067fc:	4618      	mov	r0, r3
 80067fe:	f01f f85c 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('I', Direction::LEFT, {'E', 'J'}, QUARTER_CIRCLE);
 8006802:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006806:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800680a:	2147      	movs	r1, #71	; 0x47
 800680c:	6818      	ldr	r0, [r3, #0]
 800680e:	f002 f91b 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8006812:	4604      	mov	r4, r0
 8006814:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006818:	f5a3 63ea 	sub.w	r3, r3, #1872	; 0x750
 800681c:	4aa4      	ldr	r2, [pc, #656]	; (8006ab0 <_ZN3jlb5GraphC1Ev+0x14f0>)
 800681e:	8812      	ldrh	r2, [r2, #0]
 8006820:	801a      	strh	r2, [r3, #0]
 8006822:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006826:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 800682a:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 800682e:	601a      	str	r2, [r3, #0]
 8006830:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006834:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8006838:	2202      	movs	r2, #2
 800683a:	605a      	str	r2, [r3, #4]
 800683c:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 8006840:	4618      	mov	r0, r3
 8006842:	f01f f838 	bl	80258b6 <_ZNSaIcEC1Ev>
 8006846:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 800684a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800684e:	f5a2 62eb 	sub.w	r2, r2, #1880	; 0x758
 8006852:	f207 5004 	addw	r0, r7, #1284	; 0x504
 8006856:	ca06      	ldmia	r2, {r1, r2}
 8006858:	f006 fe34 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800685c:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8006860:	ed9f 0a92 	vldr	s0, [pc, #584]	; 8006aac <_ZN3jlb5GraphC1Ev+0x14ec>
 8006864:	2200      	movs	r2, #0
 8006866:	2149      	movs	r1, #73	; 0x49
 8006868:	4620      	mov	r0, r4
 800686a:	f7fe fe27 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800686e:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8006872:	4618      	mov	r0, r3
 8006874:	f006 fd18 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006878:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 800687c:	4618      	mov	r0, r3
 800687e:	f01f f81c 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('F', Direction::RIGHT, {'K', 'M'}, QUARTER_CIRCLE);
 8006882:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006886:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800688a:	2148      	movs	r1, #72	; 0x48
 800688c:	6818      	ldr	r0, [r3, #0]
 800688e:	f002 f8db 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8006892:	4604      	mov	r4, r0
 8006894:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006898:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 800689c:	4a85      	ldr	r2, [pc, #532]	; (8006ab4 <_ZN3jlb5GraphC1Ev+0x14f4>)
 800689e:	8812      	ldrh	r2, [r2, #0]
 80068a0:	801a      	strh	r2, [r3, #0]
 80068a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80068a6:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 80068aa:	f207 5234 	addw	r2, r7, #1332	; 0x534
 80068ae:	601a      	str	r2, [r3, #0]
 80068b0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80068b4:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 80068b8:	2202      	movs	r2, #2
 80068ba:	605a      	str	r2, [r3, #4]
 80068bc:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80068c0:	4618      	mov	r0, r3
 80068c2:	f01e fff8 	bl	80258b6 <_ZNSaIcEC1Ev>
 80068c6:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80068ca:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80068ce:	f2a2 723c 	subw	r2, r2, #1852	; 0x73c
 80068d2:	f507 60a4 	add.w	r0, r7, #1312	; 0x520
 80068d6:	ca06      	ldmia	r2, {r1, r2}
 80068d8:	f006 fdf4 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80068dc:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80068e0:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8006aac <_ZN3jlb5GraphC1Ev+0x14ec>
 80068e4:	2201      	movs	r2, #1
 80068e6:	2146      	movs	r1, #70	; 0x46
 80068e8:	4620      	mov	r0, r4
 80068ea:	f7fe fde7 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80068ee:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80068f2:	4618      	mov	r0, r3
 80068f4:	f006 fcd8 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 80068f8:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80068fc:	4618      	mov	r0, r3
 80068fe:	f01e ffdc 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('K', Direction::LEFT, {'F'}, QUARTER_CIRCLE);
 8006902:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006906:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800690a:	2148      	movs	r1, #72	; 0x48
 800690c:	6818      	ldr	r0, [r3, #0]
 800690e:	f002 f89b 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8006912:	4604      	mov	r4, r0
 8006914:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006918:	f5a3 63e3 	sub.w	r3, r3, #1816	; 0x718
 800691c:	2246      	movs	r2, #70	; 0x46
 800691e:	701a      	strb	r2, [r3, #0]
 8006920:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006924:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8006928:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006932:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8006936:	2201      	movs	r2, #1
 8006938:	605a      	str	r2, [r3, #4]
 800693a:	f207 5354 	addw	r3, r7, #1364	; 0x554
 800693e:	4618      	mov	r0, r3
 8006940:	f01e ffb9 	bl	80258b6 <_ZNSaIcEC1Ev>
 8006944:	f207 5354 	addw	r3, r7, #1364	; 0x554
 8006948:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800694c:	f5a2 62e4 	sub.w	r2, r2, #1824	; 0x720
 8006950:	f207 503c 	addw	r0, r7, #1340	; 0x53c
 8006954:	ca06      	ldmia	r2, {r1, r2}
 8006956:	f006 fdb5 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800695a:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 800695e:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8006aac <_ZN3jlb5GraphC1Ev+0x14ec>
 8006962:	2200      	movs	r2, #0
 8006964:	214b      	movs	r1, #75	; 0x4b
 8006966:	4620      	mov	r0, r4
 8006968:	f7fe fda8 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800696c:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 8006970:	4618      	mov	r0, r3
 8006972:	f006 fc99 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006976:	f207 5354 	addw	r3, r7, #1364	; 0x554
 800697a:	4618      	mov	r0, r3
 800697c:	f01e ff9d 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('M', Direction::STRAIGHT, {'F'}, 2.0f * UNIT);
 8006980:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006984:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006988:	2148      	movs	r1, #72	; 0x48
 800698a:	6818      	ldr	r0, [r3, #0]
 800698c:	f002 f85c 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8006990:	4604      	mov	r4, r0
 8006992:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006996:	f2a3 63fc 	subw	r3, r3, #1788	; 0x6fc
 800699a:	2246      	movs	r2, #70	; 0x46
 800699c:	701a      	strb	r2, [r3, #0]
 800699e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80069a2:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 80069a6:	f207 526c 	addw	r2, r7, #1388	; 0x56c
 80069aa:	601a      	str	r2, [r3, #0]
 80069ac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80069b0:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 80069b4:	2201      	movs	r2, #1
 80069b6:	605a      	str	r2, [r3, #4]
 80069b8:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80069bc:	4618      	mov	r0, r3
 80069be:	f01e ff7a 	bl	80258b6 <_ZNSaIcEC1Ev>
 80069c2:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80069c6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80069ca:	f2a2 7204 	subw	r2, r2, #1796	; 0x704
 80069ce:	f507 60ab 	add.w	r0, r7, #1368	; 0x558
 80069d2:	ca06      	ldmia	r2, {r1, r2}
 80069d4:	f006 fd76 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80069d8:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 80069dc:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8006abc <_ZN3jlb5GraphC1Ev+0x14fc>
 80069e0:	2202      	movs	r2, #2
 80069e2:	214d      	movs	r1, #77	; 0x4d
 80069e4:	4620      	mov	r0, r4
 80069e6:	f7fe fd69 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80069ea:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 80069ee:	4618      	mov	r0, r3
 80069f0:	f006 fc5a 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 80069f4:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80069f8:	4618      	mov	r0, r3
 80069fa:	f01e ff5e 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('F', Direction::LEFT, {'K', 'L', 'N'}, QUARTER_CIRCLE);
 80069fe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a02:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006a06:	2149      	movs	r1, #73	; 0x49
 8006a08:	6818      	ldr	r0, [r3, #0]
 8006a0a:	f002 f81d 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8006a0e:	4604      	mov	r4, r0
 8006a10:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a14:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 8006a18:	4a27      	ldr	r2, [pc, #156]	; (8006ab8 <_ZN3jlb5GraphC1Ev+0x14f8>)
 8006a1a:	6812      	ldr	r2, [r2, #0]
 8006a1c:	4611      	mov	r1, r2
 8006a1e:	8019      	strh	r1, [r3, #0]
 8006a20:	3302      	adds	r3, #2
 8006a22:	0c12      	lsrs	r2, r2, #16
 8006a24:	701a      	strb	r2, [r3, #0]
 8006a26:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a2a:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 8006a2e:	f507 62b1 	add.w	r2, r7, #1416	; 0x588
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a38:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 8006a3c:	2203      	movs	r2, #3
 8006a3e:	605a      	str	r2, [r3, #4]
 8006a40:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8006a44:	4618      	mov	r0, r3
 8006a46:	f01e ff36 	bl	80258b6 <_ZNSaIcEC1Ev>
 8006a4a:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8006a4e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006a52:	f5a2 62dd 	sub.w	r2, r2, #1768	; 0x6e8
 8006a56:	f207 5074 	addw	r0, r7, #1396	; 0x574
 8006a5a:	ca06      	ldmia	r2, {r1, r2}
 8006a5c:	f006 fd32 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006a60:	f207 5374 	addw	r3, r7, #1396	; 0x574
 8006a64:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8006aac <_ZN3jlb5GraphC1Ev+0x14ec>
 8006a68:	2200      	movs	r2, #0
 8006a6a:	2146      	movs	r1, #70	; 0x46
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	f7fe fd25 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006a72:	f207 5374 	addw	r3, r7, #1396	; 0x574
 8006a76:	4618      	mov	r0, r3
 8006a78:	f006 fc16 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006a7c:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8006a80:	4618      	mov	r0, r3
 8006a82:	f01e ff1a 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('D', Direction::STRAIGHT, {'K', 'L', 'N'}, 2.0f * UNIT);
 8006a86:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a8a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006a8e:	2149      	movs	r1, #73	; 0x49
 8006a90:	6818      	ldr	r0, [r3, #0]
 8006a92:	f001 ffd9 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8006a96:	4604      	mov	r4, r0
 8006a98:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a9c:	f2a3 63c4 	subw	r3, r3, #1732	; 0x6c4
 8006aa0:	4a05      	ldr	r2, [pc, #20]	; (8006ab8 <_ZN3jlb5GraphC1Ev+0x14f8>)
 8006aa2:	6812      	ldr	r2, [r2, #0]
 8006aa4:	4611      	mov	r1, r2
 8006aa6:	e00b      	b.n	8006ac0 <_ZN3jlb5GraphC1Ev+0x1500>
 8006aa8:	080296d0 	.word	0x080296d0
 8006aac:	3f71463a 	.word	0x3f71463a
 8006ab0:	080296cc 	.word	0x080296cc
 8006ab4:	080296d4 	.word	0x080296d4
 8006ab8:	080296d8 	.word	0x080296d8
 8006abc:	3f99999a 	.word	0x3f99999a
 8006ac0:	8019      	strh	r1, [r3, #0]
 8006ac2:	3302      	adds	r3, #2
 8006ac4:	0c12      	lsrs	r2, r2, #16
 8006ac6:	701a      	strb	r2, [r3, #0]
 8006ac8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006acc:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 8006ad0:	f207 52a4 	addw	r2, r7, #1444	; 0x5a4
 8006ad4:	601a      	str	r2, [r3, #0]
 8006ad6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ada:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 8006ade:	2203      	movs	r2, #3
 8006ae0:	605a      	str	r2, [r3, #4]
 8006ae2:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f01e fee5 	bl	80258b6 <_ZNSaIcEC1Ev>
 8006aec:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8006af0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006af4:	f2a2 62cc 	subw	r2, r2, #1740	; 0x6cc
 8006af8:	f507 60b2 	add.w	r0, r7, #1424	; 0x590
 8006afc:	ca06      	ldmia	r2, {r1, r2}
 8006afe:	f006 fce1 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006b02:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8006b06:	ed1f 0a13 	vldr	s0, [pc, #-76]	; 8006abc <_ZN3jlb5GraphC1Ev+0x14fc>
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	2144      	movs	r1, #68	; 0x44
 8006b0e:	4620      	mov	r0, r4
 8006b10:	f7fe fcd4 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006b14:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f006 fbc5 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006b1e:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8006b22:	4618      	mov	r0, r3
 8006b24:	f01e fec9 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('G', Direction::RIGHT, {'K', 'L', 'N'}, QUARTER_CIRCLE);
 8006b28:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b2c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006b30:	2149      	movs	r1, #73	; 0x49
 8006b32:	6818      	ldr	r0, [r3, #0]
 8006b34:	f001 ff88 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8006b38:	4604      	mov	r4, r0
 8006b3a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b3e:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 8006b42:	4ae7      	ldr	r2, [pc, #924]	; (8006ee0 <_ZN3jlb5GraphC1Ev+0x1920>)
 8006b44:	6812      	ldr	r2, [r2, #0]
 8006b46:	4611      	mov	r1, r2
 8006b48:	8019      	strh	r1, [r3, #0]
 8006b4a:	3302      	adds	r3, #2
 8006b4c:	0c12      	lsrs	r2, r2, #16
 8006b4e:	701a      	strb	r2, [r3, #0]
 8006b50:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b54:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 8006b58:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 8006b5c:	601a      	str	r2, [r3, #0]
 8006b5e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b62:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 8006b66:	2203      	movs	r2, #3
 8006b68:	605a      	str	r2, [r3, #4]
 8006b6a:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f01e fea1 	bl	80258b6 <_ZNSaIcEC1Ev>
 8006b74:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 8006b78:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006b7c:	f5a2 62d6 	sub.w	r2, r2, #1712	; 0x6b0
 8006b80:	f207 50ac 	addw	r0, r7, #1452	; 0x5ac
 8006b84:	ca06      	ldmia	r2, {r1, r2}
 8006b86:	f006 fc9d 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006b8a:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 8006b8e:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 8006ee4 <_ZN3jlb5GraphC1Ev+0x1924>
 8006b92:	2201      	movs	r2, #1
 8006b94:	2147      	movs	r1, #71	; 0x47
 8006b96:	4620      	mov	r0, r4
 8006b98:	f7fe fc90 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006b9c:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f006 fb81 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006ba6:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 8006baa:	4618      	mov	r0, r3
 8006bac:	f01e fe85 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('L', Direction::LEFT, {'D', 'F', 'G'}, QUARTER_CIRCLE);
 8006bb0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006bb4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006bb8:	2149      	movs	r1, #73	; 0x49
 8006bba:	6818      	ldr	r0, [r3, #0]
 8006bbc:	f001 ff44 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8006bc0:	4604      	mov	r4, r0
 8006bc2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006bc6:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8006bca:	4ac7      	ldr	r2, [pc, #796]	; (8006ee8 <_ZN3jlb5GraphC1Ev+0x1928>)
 8006bcc:	6812      	ldr	r2, [r2, #0]
 8006bce:	4611      	mov	r1, r2
 8006bd0:	8019      	strh	r1, [r3, #0]
 8006bd2:	3302      	adds	r3, #2
 8006bd4:	0c12      	lsrs	r2, r2, #16
 8006bd6:	701a      	strb	r2, [r3, #0]
 8006bd8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006bdc:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 8006be0:	f207 52dc 	addw	r2, r7, #1500	; 0x5dc
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006bea:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 8006bee:	2203      	movs	r2, #3
 8006bf0:	605a      	str	r2, [r3, #4]
 8006bf2:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f01e fe5d 	bl	80258b6 <_ZNSaIcEC1Ev>
 8006bfc:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8006c00:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006c04:	f2a2 6294 	subw	r2, r2, #1684	; 0x694
 8006c08:	f507 60b9 	add.w	r0, r7, #1480	; 0x5c8
 8006c0c:	ca06      	ldmia	r2, {r1, r2}
 8006c0e:	f006 fc59 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006c12:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 8006c16:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 8006ee4 <_ZN3jlb5GraphC1Ev+0x1924>
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	214c      	movs	r1, #76	; 0x4c
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f7fe fc4c 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006c24:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f006 fb3d 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006c2e:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8006c32:	4618      	mov	r0, r3
 8006c34:	f01e fe41 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('N', Direction::STRAIGHT, {'D', 'F', 'G'}, 2.0f * UNIT);
 8006c38:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c3c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006c40:	2149      	movs	r1, #73	; 0x49
 8006c42:	6818      	ldr	r0, [r3, #0]
 8006c44:	f001 ff00 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8006c48:	4604      	mov	r4, r0
 8006c4a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c4e:	f5a3 63ce 	sub.w	r3, r3, #1648	; 0x670
 8006c52:	4aa5      	ldr	r2, [pc, #660]	; (8006ee8 <_ZN3jlb5GraphC1Ev+0x1928>)
 8006c54:	6812      	ldr	r2, [r2, #0]
 8006c56:	4611      	mov	r1, r2
 8006c58:	8019      	strh	r1, [r3, #0]
 8006c5a:	3302      	adds	r3, #2
 8006c5c:	0c12      	lsrs	r2, r2, #16
 8006c5e:	701a      	strb	r2, [r3, #0]
 8006c60:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c64:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8006c68:	f507 62bf 	add.w	r2, r7, #1528	; 0x5f8
 8006c6c:	601a      	str	r2, [r3, #0]
 8006c6e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c72:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8006c76:	2203      	movs	r2, #3
 8006c78:	605a      	str	r2, [r3, #4]
 8006c7a:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f01e fe19 	bl	80258b6 <_ZNSaIcEC1Ev>
 8006c84:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 8006c88:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006c8c:	f5a2 62cf 	sub.w	r2, r2, #1656	; 0x678
 8006c90:	f207 50e4 	addw	r0, r7, #1508	; 0x5e4
 8006c94:	ca06      	ldmia	r2, {r1, r2}
 8006c96:	f006 fc15 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006c9a:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 8006c9e:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8006eec <_ZN3jlb5GraphC1Ev+0x192c>
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	214e      	movs	r1, #78	; 0x4e
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	f7fe fc08 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006cac:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f006 faf9 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006cb6:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f01e fdfd 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('K', Direction::RIGHT, {'D', 'F', 'G'}, QUARTER_CIRCLE);
 8006cc0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006cc4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006cc8:	2149      	movs	r1, #73	; 0x49
 8006cca:	6818      	ldr	r0, [r3, #0]
 8006ccc:	f001 febc 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006cd6:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 8006cda:	4a83      	ldr	r2, [pc, #524]	; (8006ee8 <_ZN3jlb5GraphC1Ev+0x1928>)
 8006cdc:	6812      	ldr	r2, [r2, #0]
 8006cde:	4611      	mov	r1, r2
 8006ce0:	8019      	strh	r1, [r3, #0]
 8006ce2:	3302      	adds	r3, #2
 8006ce4:	0c12      	lsrs	r2, r2, #16
 8006ce6:	701a      	strb	r2, [r3, #0]
 8006ce8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006cec:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8006cf0:	f207 6214 	addw	r2, r7, #1556	; 0x614
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006cfa:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8006cfe:	2203      	movs	r2, #3
 8006d00:	605a      	str	r2, [r3, #4]
 8006d02:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8006d06:	4618      	mov	r0, r3
 8006d08:	f01e fdd5 	bl	80258b6 <_ZNSaIcEC1Ev>
 8006d0c:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8006d10:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006d14:	f2a2 625c 	subw	r2, r2, #1628	; 0x65c
 8006d18:	f507 60c0 	add.w	r0, r7, #1536	; 0x600
 8006d1c:	ca06      	ldmia	r2, {r1, r2}
 8006d1e:	f006 fbd1 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006d22:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8006d26:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8006ee4 <_ZN3jlb5GraphC1Ev+0x1924>
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	214b      	movs	r1, #75	; 0x4b
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f7fe fbc4 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006d34:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f006 fab5 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006d3e:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8006d42:	4618      	mov	r0, r3
 8006d44:	f01e fdb9 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('G', Direction::LEFT, {'L'}, QUARTER_CIRCLE);
 8006d48:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d4c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006d50:	214a      	movs	r1, #74	; 0x4a
 8006d52:	6818      	ldr	r0, [r3, #0]
 8006d54:	f001 fe78 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8006d58:	4604      	mov	r4, r0
 8006d5a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d5e:	f5a3 63c7 	sub.w	r3, r3, #1592	; 0x638
 8006d62:	224c      	movs	r2, #76	; 0x4c
 8006d64:	701a      	strb	r2, [r3, #0]
 8006d66:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d6a:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 8006d6e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d78:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	605a      	str	r2, [r3, #4]
 8006d80:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8006d84:	4618      	mov	r0, r3
 8006d86:	f01e fd96 	bl	80258b6 <_ZNSaIcEC1Ev>
 8006d8a:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8006d8e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006d92:	f5a2 62c8 	sub.w	r2, r2, #1600	; 0x640
 8006d96:	f207 601c 	addw	r0, r7, #1564	; 0x61c
 8006d9a:	ca06      	ldmia	r2, {r1, r2}
 8006d9c:	f006 fb92 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006da0:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8006da4:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8006ee4 <_ZN3jlb5GraphC1Ev+0x1924>
 8006da8:	2200      	movs	r2, #0
 8006daa:	2147      	movs	r1, #71	; 0x47
 8006dac:	4620      	mov	r0, r4
 8006dae:	f7fe fb85 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006db2:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8006db6:	4618      	mov	r0, r3
 8006db8:	f006 fa76 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006dbc:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f01e fd7a 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('E', Direction::STRAIGHT, {'L'}, 2.0f * UNIT);
 8006dc6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006dca:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006dce:	214a      	movs	r1, #74	; 0x4a
 8006dd0:	6818      	ldr	r0, [r3, #0]
 8006dd2:	f001 fe39 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8006dd6:	4604      	mov	r4, r0
 8006dd8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ddc:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 8006de0:	224c      	movs	r2, #76	; 0x4c
 8006de2:	701a      	strb	r2, [r3, #0]
 8006de4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006de8:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 8006dec:	f207 624c 	addw	r2, r7, #1612	; 0x64c
 8006df0:	601a      	str	r2, [r3, #0]
 8006df2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006df6:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	605a      	str	r2, [r3, #4]
 8006dfe:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8006e02:	4618      	mov	r0, r3
 8006e04:	f01e fd57 	bl	80258b6 <_ZNSaIcEC1Ev>
 8006e08:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8006e0c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006e10:	f2a2 6224 	subw	r2, r2, #1572	; 0x624
 8006e14:	f507 60c7 	add.w	r0, r7, #1592	; 0x638
 8006e18:	ca06      	ldmia	r2, {r1, r2}
 8006e1a:	f006 fb53 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006e1e:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8006e22:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8006eec <_ZN3jlb5GraphC1Ev+0x192c>
 8006e26:	2202      	movs	r2, #2
 8006e28:	2145      	movs	r1, #69	; 0x45
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	f7fe fb46 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006e30:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8006e34:	4618      	mov	r0, r3
 8006e36:	f006 fa37 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006e3a:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f01e fd3b 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('L', Direction::RIGHT, {'E', 'G'}, QUARTER_CIRCLE);
 8006e44:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e48:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006e4c:	214a      	movs	r1, #74	; 0x4a
 8006e4e:	6818      	ldr	r0, [r3, #0]
 8006e50:	f001 fdfa 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8006e54:	4604      	mov	r4, r0
 8006e56:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e5a:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 8006e5e:	4a24      	ldr	r2, [pc, #144]	; (8006ef0 <_ZN3jlb5GraphC1Ev+0x1930>)
 8006e60:	8812      	ldrh	r2, [r2, #0]
 8006e62:	801a      	strh	r2, [r3, #0]
 8006e64:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e68:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 8006e6c:	f507 62cd 	add.w	r2, r7, #1640	; 0x668
 8006e70:	601a      	str	r2, [r3, #0]
 8006e72:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e76:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	605a      	str	r2, [r3, #4]
 8006e7e:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8006e82:	4618      	mov	r0, r3
 8006e84:	f01e fd17 	bl	80258b6 <_ZNSaIcEC1Ev>
 8006e88:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8006e8c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006e90:	f5a2 62c1 	sub.w	r2, r2, #1544	; 0x608
 8006e94:	f207 6054 	addw	r0, r7, #1620	; 0x654
 8006e98:	ca06      	ldmia	r2, {r1, r2}
 8006e9a:	f006 fb13 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006e9e:	f207 6354 	addw	r3, r7, #1620	; 0x654
 8006ea2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8006ee4 <_ZN3jlb5GraphC1Ev+0x1924>
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	214c      	movs	r1, #76	; 0x4c
 8006eaa:	4620      	mov	r0, r4
 8006eac:	f7fe fb06 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006eb0:	f207 6354 	addw	r3, r7, #1620	; 0x654
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f006 f9f7 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006eba:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f01e fcfb 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('H', Direction::RIGHT, {'I', 'L', 'N'}, QUARTER_CIRCLE);
 8006ec4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ec8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006ecc:	214b      	movs	r1, #75	; 0x4b
 8006ece:	6818      	ldr	r0, [r3, #0]
 8006ed0:	f001 fdba 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006eda:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8006ede:	e009      	b.n	8006ef4 <_ZN3jlb5GraphC1Ev+0x1934>
 8006ee0:	080296d8 	.word	0x080296d8
 8006ee4:	3f71463a 	.word	0x3f71463a
 8006ee8:	080296dc 	.word	0x080296dc
 8006eec:	3f99999a 	.word	0x3f99999a
 8006ef0:	080296e0 	.word	0x080296e0
 8006ef4:	4ae4      	ldr	r2, [pc, #912]	; (8007288 <_ZN3jlb5GraphC1Ev+0x1cc8>)
 8006ef6:	6812      	ldr	r2, [r2, #0]
 8006ef8:	4611      	mov	r1, r2
 8006efa:	8019      	strh	r1, [r3, #0]
 8006efc:	3302      	adds	r3, #2
 8006efe:	0c12      	lsrs	r2, r2, #16
 8006f00:	701a      	strb	r2, [r3, #0]
 8006f02:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f06:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8006f0a:	f207 6284 	addw	r2, r7, #1668	; 0x684
 8006f0e:	601a      	str	r2, [r3, #0]
 8006f10:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f14:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8006f18:	2203      	movs	r2, #3
 8006f1a:	605a      	str	r2, [r3, #4]
 8006f1c:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8006f20:	4618      	mov	r0, r3
 8006f22:	f01e fcc8 	bl	80258b6 <_ZNSaIcEC1Ev>
 8006f26:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8006f2a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006f2e:	f2a2 52ec 	subw	r2, r2, #1516	; 0x5ec
 8006f32:	f507 60ce 	add.w	r0, r7, #1648	; 0x670
 8006f36:	ca06      	ldmia	r2, {r1, r2}
 8006f38:	f006 fac4 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006f3c:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8006f40:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 800728c <_ZN3jlb5GraphC1Ev+0x1ccc>
 8006f44:	2201      	movs	r2, #1
 8006f46:	2148      	movs	r1, #72	; 0x48
 8006f48:	4620      	mov	r0, r4
 8006f4a:	f7fe fab7 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006f4e:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8006f52:	4618      	mov	r0, r3
 8006f54:	f006 f9a8 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006f58:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f01e fcac 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('I', Direction::LEFT, {'H', 'M'}, QUARTER_CIRCLE);
 8006f62:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f66:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006f6a:	214b      	movs	r1, #75	; 0x4b
 8006f6c:	6818      	ldr	r0, [r3, #0]
 8006f6e:	f001 fd6b 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8006f72:	4604      	mov	r4, r0
 8006f74:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f78:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 8006f7c:	4ac4      	ldr	r2, [pc, #784]	; (8007290 <_ZN3jlb5GraphC1Ev+0x1cd0>)
 8006f7e:	8812      	ldrh	r2, [r2, #0]
 8006f80:	801a      	strh	r2, [r3, #0]
 8006f82:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f86:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8006f8a:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8006f8e:	601a      	str	r2, [r3, #0]
 8006f90:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f94:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8006f98:	2202      	movs	r2, #2
 8006f9a:	605a      	str	r2, [r3, #4]
 8006f9c:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f01e fc88 	bl	80258b6 <_ZNSaIcEC1Ev>
 8006fa6:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 8006faa:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006fae:	f5a2 62ba 	sub.w	r2, r2, #1488	; 0x5d0
 8006fb2:	f207 608c 	addw	r0, r7, #1676	; 0x68c
 8006fb6:	ca06      	ldmia	r2, {r1, r2}
 8006fb8:	f006 fa84 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006fbc:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 8006fc0:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 800728c <_ZN3jlb5GraphC1Ev+0x1ccc>
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	2149      	movs	r1, #73	; 0x49
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f7fe fa77 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006fce:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f006 f968 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006fd8:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f01e fc6c 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('L', Direction::STRAIGHT, {'H', 'M'}, 2.0f * UNIT);
 8006fe2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006fe6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006fea:	214b      	movs	r1, #75	; 0x4b
 8006fec:	6818      	ldr	r0, [r3, #0]
 8006fee:	f001 fd2b 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ff8:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8006ffc:	4aa4      	ldr	r2, [pc, #656]	; (8007290 <_ZN3jlb5GraphC1Ev+0x1cd0>)
 8006ffe:	8812      	ldrh	r2, [r2, #0]
 8007000:	801a      	strh	r2, [r3, #0]
 8007002:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007006:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 800700a:	f207 62bc 	addw	r2, r7, #1724	; 0x6bc
 800700e:	601a      	str	r2, [r3, #0]
 8007010:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007014:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 8007018:	2202      	movs	r2, #2
 800701a:	605a      	str	r2, [r3, #4]
 800701c:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8007020:	4618      	mov	r0, r3
 8007022:	f01e fc48 	bl	80258b6 <_ZNSaIcEC1Ev>
 8007026:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800702a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800702e:	f2a2 52b4 	subw	r2, r2, #1460	; 0x5b4
 8007032:	f507 60d5 	add.w	r0, r7, #1704	; 0x6a8
 8007036:	ca06      	ldmia	r2, {r1, r2}
 8007038:	f006 fa44 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800703c:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8007040:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8007294 <_ZN3jlb5GraphC1Ev+0x1cd4>
 8007044:	2202      	movs	r2, #2
 8007046:	214c      	movs	r1, #76	; 0x4c
 8007048:	4620      	mov	r0, r4
 800704a:	f7fe fa37 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800704e:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8007052:	4618      	mov	r0, r3
 8007054:	f006 f928 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007058:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800705c:	4618      	mov	r0, r3
 800705e:	f01e fc2c 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('N', Direction::RIGHT, {'H', 'M'}, QUARTER_CIRCLE);
 8007062:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007066:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800706a:	214b      	movs	r1, #75	; 0x4b
 800706c:	6818      	ldr	r0, [r3, #0]
 800706e:	f001 fceb 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8007072:	4604      	mov	r4, r0
 8007074:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007078:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 800707c:	4a84      	ldr	r2, [pc, #528]	; (8007290 <_ZN3jlb5GraphC1Ev+0x1cd0>)
 800707e:	8812      	ldrh	r2, [r2, #0]
 8007080:	801a      	strh	r2, [r3, #0]
 8007082:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007086:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 800708a:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 800708e:	601a      	str	r2, [r3, #0]
 8007090:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007094:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 8007098:	2202      	movs	r2, #2
 800709a:	605a      	str	r2, [r3, #4]
 800709c:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 80070a0:	4618      	mov	r0, r3
 80070a2:	f01e fc08 	bl	80258b6 <_ZNSaIcEC1Ev>
 80070a6:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 80070aa:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80070ae:	f5a2 62b3 	sub.w	r2, r2, #1432	; 0x598
 80070b2:	f207 60c4 	addw	r0, r7, #1732	; 0x6c4
 80070b6:	ca06      	ldmia	r2, {r1, r2}
 80070b8:	f006 fa04 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80070bc:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 80070c0:	ed9f 0a72 	vldr	s0, [pc, #456]	; 800728c <_ZN3jlb5GraphC1Ev+0x1ccc>
 80070c4:	2201      	movs	r2, #1
 80070c6:	214e      	movs	r1, #78	; 0x4e
 80070c8:	4620      	mov	r0, r4
 80070ca:	f7fe f9f7 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80070ce:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 80070d2:	4618      	mov	r0, r3
 80070d4:	f006 f8e8 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 80070d8:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 80070dc:	4618      	mov	r0, r3
 80070de:	f01e fbec 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('M', Direction::LEFT, {'I', 'L', 'N'}, QUARTER_CIRCLE);
 80070e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80070e6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80070ea:	214b      	movs	r1, #75	; 0x4b
 80070ec:	6818      	ldr	r0, [r3, #0]
 80070ee:	f001 fcab 	bl	8008a48 <_ZN3jlb5GraphixEc>
 80070f2:	4604      	mov	r4, r0
 80070f4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80070f8:	f2a3 5374 	subw	r3, r3, #1396	; 0x574
 80070fc:	4a62      	ldr	r2, [pc, #392]	; (8007288 <_ZN3jlb5GraphC1Ev+0x1cc8>)
 80070fe:	6812      	ldr	r2, [r2, #0]
 8007100:	4611      	mov	r1, r2
 8007102:	8019      	strh	r1, [r3, #0]
 8007104:	3302      	adds	r3, #2
 8007106:	0c12      	lsrs	r2, r2, #16
 8007108:	701a      	strb	r2, [r3, #0]
 800710a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800710e:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8007112:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 8007116:	601a      	str	r2, [r3, #0]
 8007118:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800711c:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8007120:	2203      	movs	r2, #3
 8007122:	605a      	str	r2, [r3, #4]
 8007124:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8007128:	4618      	mov	r0, r3
 800712a:	f01e fbc4 	bl	80258b6 <_ZNSaIcEC1Ev>
 800712e:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8007132:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007136:	f2a2 527c 	subw	r2, r2, #1404	; 0x57c
 800713a:	f507 60dc 	add.w	r0, r7, #1760	; 0x6e0
 800713e:	ca06      	ldmia	r2, {r1, r2}
 8007140:	f006 f9c0 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007144:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8007148:	ed9f 0a50 	vldr	s0, [pc, #320]	; 800728c <_ZN3jlb5GraphC1Ev+0x1ccc>
 800714c:	2200      	movs	r2, #0
 800714e:	214d      	movs	r1, #77	; 0x4d
 8007150:	4620      	mov	r0, r4
 8007152:	f7fe f9b3 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007156:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 800715a:	4618      	mov	r0, r3
 800715c:	f006 f8a4 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007160:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8007164:	4618      	mov	r0, r3
 8007166:	f01e fba8 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('K', Direction::STRAIGHT, {'J', 'O'}, 2.0f * UNIT);
 800716a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800716e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007172:	214c      	movs	r1, #76	; 0x4c
 8007174:	6818      	ldr	r0, [r3, #0]
 8007176:	f001 fc67 	bl	8008a48 <_ZN3jlb5GraphixEc>
 800717a:	4604      	mov	r4, r0
 800717c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007180:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8007184:	4a44      	ldr	r2, [pc, #272]	; (8007298 <_ZN3jlb5GraphC1Ev+0x1cd8>)
 8007186:	8812      	ldrh	r2, [r2, #0]
 8007188:	801a      	strh	r2, [r3, #0]
 800718a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800718e:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8007192:	f507 62e2 	add.w	r2, r7, #1808	; 0x710
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800719c:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 80071a0:	2202      	movs	r2, #2
 80071a2:	605a      	str	r2, [r3, #4]
 80071a4:	f207 7314 	addw	r3, r7, #1812	; 0x714
 80071a8:	4618      	mov	r0, r3
 80071aa:	f01e fb84 	bl	80258b6 <_ZNSaIcEC1Ev>
 80071ae:	f207 7314 	addw	r3, r7, #1812	; 0x714
 80071b2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80071b6:	f5a2 62ac 	sub.w	r2, r2, #1376	; 0x560
 80071ba:	f207 60fc 	addw	r0, r7, #1788	; 0x6fc
 80071be:	ca06      	ldmia	r2, {r1, r2}
 80071c0:	f006 f980 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80071c4:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 80071c8:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8007294 <_ZN3jlb5GraphC1Ev+0x1cd4>
 80071cc:	2202      	movs	r2, #2
 80071ce:	214b      	movs	r1, #75	; 0x4b
 80071d0:	4620      	mov	r0, r4
 80071d2:	f7fe f973 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80071d6:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 80071da:	4618      	mov	r0, r3
 80071dc:	f006 f864 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 80071e0:	f207 7314 	addw	r3, r7, #1812	; 0x714
 80071e4:	4618      	mov	r0, r3
 80071e6:	f01e fb68 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('I', Direction::RIGHT, {'J', 'O'}, QUARTER_CIRCLE);
 80071ea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80071ee:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80071f2:	214c      	movs	r1, #76	; 0x4c
 80071f4:	6818      	ldr	r0, [r3, #0]
 80071f6:	f001 fc27 	bl	8008a48 <_ZN3jlb5GraphixEc>
 80071fa:	4604      	mov	r4, r0
 80071fc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007200:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 8007204:	4a24      	ldr	r2, [pc, #144]	; (8007298 <_ZN3jlb5GraphC1Ev+0x1cd8>)
 8007206:	8812      	ldrh	r2, [r2, #0]
 8007208:	801a      	strh	r2, [r3, #0]
 800720a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800720e:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8007212:	f207 722c 	addw	r2, r7, #1836	; 0x72c
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800721c:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8007220:	2202      	movs	r2, #2
 8007222:	605a      	str	r2, [r3, #4]
 8007224:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8007228:	4618      	mov	r0, r3
 800722a:	f01e fb44 	bl	80258b6 <_ZNSaIcEC1Ev>
 800722e:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8007232:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007236:	f2a2 5244 	subw	r2, r2, #1348	; 0x544
 800723a:	f507 60e3 	add.w	r0, r7, #1816	; 0x718
 800723e:	ca06      	ldmia	r2, {r1, r2}
 8007240:	f006 f940 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007244:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 8007248:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800728c <_ZN3jlb5GraphC1Ev+0x1ccc>
 800724c:	2201      	movs	r2, #1
 800724e:	2149      	movs	r1, #73	; 0x49
 8007250:	4620      	mov	r0, r4
 8007252:	f7fe f933 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007256:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 800725a:	4618      	mov	r0, r3
 800725c:	f006 f824 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007260:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8007264:	4618      	mov	r0, r3
 8007266:	f01e fb28 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('J', Direction::LEFT, {'I', 'K', 'N'}, QUARTER_CIRCLE);
 800726a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800726e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007272:	214c      	movs	r1, #76	; 0x4c
 8007274:	6818      	ldr	r0, [r3, #0]
 8007276:	f001 fbe7 	bl	8008a48 <_ZN3jlb5GraphixEc>
 800727a:	4604      	mov	r4, r0
 800727c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007280:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8007284:	e00a      	b.n	800729c <_ZN3jlb5GraphC1Ev+0x1cdc>
 8007286:	bf00      	nop
 8007288:	080296e4 	.word	0x080296e4
 800728c:	3f71463a 	.word	0x3f71463a
 8007290:	080296e8 	.word	0x080296e8
 8007294:	3f99999a 	.word	0x3f99999a
 8007298:	080296ec 	.word	0x080296ec
 800729c:	4ae4      	ldr	r2, [pc, #912]	; (8007630 <_ZN3jlb5GraphC1Ev+0x2070>)
 800729e:	6812      	ldr	r2, [r2, #0]
 80072a0:	4611      	mov	r1, r2
 80072a2:	8019      	strh	r1, [r3, #0]
 80072a4:	3302      	adds	r3, #2
 80072a6:	0c12      	lsrs	r2, r2, #16
 80072a8:	701a      	strb	r2, [r3, #0]
 80072aa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80072ae:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 80072b2:	f507 62e9 	add.w	r2, r7, #1864	; 0x748
 80072b6:	601a      	str	r2, [r3, #0]
 80072b8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80072bc:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 80072c0:	2203      	movs	r2, #3
 80072c2:	605a      	str	r2, [r3, #4]
 80072c4:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 80072c8:	4618      	mov	r0, r3
 80072ca:	f01e faf4 	bl	80258b6 <_ZNSaIcEC1Ev>
 80072ce:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 80072d2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80072d6:	f5a2 62a5 	sub.w	r2, r2, #1320	; 0x528
 80072da:	f207 7034 	addw	r0, r7, #1844	; 0x734
 80072de:	ca06      	ldmia	r2, {r1, r2}
 80072e0:	f006 f8f0 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80072e4:	f207 7334 	addw	r3, r7, #1844	; 0x734
 80072e8:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 8007634 <_ZN3jlb5GraphC1Ev+0x2074>
 80072ec:	2200      	movs	r2, #0
 80072ee:	214a      	movs	r1, #74	; 0x4a
 80072f0:	4620      	mov	r0, r4
 80072f2:	f7fe f8e3 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80072f6:	f207 7334 	addw	r3, r7, #1844	; 0x734
 80072fa:	4618      	mov	r0, r3
 80072fc:	f005 ffd4 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007300:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 8007304:	4618      	mov	r0, r3
 8007306:	f01e fad8 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('O', Direction::RIGHT, {'I', 'K', 'N'}, QUARTER_CIRCLE);
 800730a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800730e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007312:	214c      	movs	r1, #76	; 0x4c
 8007314:	6818      	ldr	r0, [r3, #0]
 8007316:	f001 fb97 	bl	8008a48 <_ZN3jlb5GraphixEc>
 800731a:	4604      	mov	r4, r0
 800731c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007320:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 8007324:	4ac2      	ldr	r2, [pc, #776]	; (8007630 <_ZN3jlb5GraphC1Ev+0x2070>)
 8007326:	6812      	ldr	r2, [r2, #0]
 8007328:	4611      	mov	r1, r2
 800732a:	8019      	strh	r1, [r3, #0]
 800732c:	3302      	adds	r3, #2
 800732e:	0c12      	lsrs	r2, r2, #16
 8007330:	701a      	strb	r2, [r3, #0]
 8007332:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007336:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 800733a:	f207 7264 	addw	r2, r7, #1892	; 0x764
 800733e:	601a      	str	r2, [r3, #0]
 8007340:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007344:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 8007348:	2203      	movs	r2, #3
 800734a:	605a      	str	r2, [r3, #4]
 800734c:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8007350:	4618      	mov	r0, r3
 8007352:	f01e fab0 	bl	80258b6 <_ZNSaIcEC1Ev>
 8007356:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800735a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800735e:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 8007362:	f507 60ea 	add.w	r0, r7, #1872	; 0x750
 8007366:	ca06      	ldmia	r2, {r1, r2}
 8007368:	f006 f8ac 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800736c:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8007370:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 8007634 <_ZN3jlb5GraphC1Ev+0x2074>
 8007374:	2201      	movs	r2, #1
 8007376:	214f      	movs	r1, #79	; 0x4f
 8007378:	4620      	mov	r0, r4
 800737a:	f7fe f89f 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800737e:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8007382:	4618      	mov	r0, r3
 8007384:	f005 ff90 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007388:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800738c:	4618      	mov	r0, r3
 800738e:	f01e fa94 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('N', Direction::LEFT, {'J', 'O'}, QUARTER_CIRCLE);
 8007392:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007396:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800739a:	214c      	movs	r1, #76	; 0x4c
 800739c:	6818      	ldr	r0, [r3, #0]
 800739e:	f001 fb53 	bl	8008a48 <_ZN3jlb5GraphixEc>
 80073a2:	4604      	mov	r4, r0
 80073a4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80073a8:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 80073ac:	4aa2      	ldr	r2, [pc, #648]	; (8007638 <_ZN3jlb5GraphC1Ev+0x2078>)
 80073ae:	8812      	ldrh	r2, [r2, #0]
 80073b0:	801a      	strh	r2, [r3, #0]
 80073b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80073b6:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 80073ba:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 80073be:	601a      	str	r2, [r3, #0]
 80073c0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80073c4:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 80073c8:	2202      	movs	r2, #2
 80073ca:	605a      	str	r2, [r3, #4]
 80073cc:	f207 7384 	addw	r3, r7, #1924	; 0x784
 80073d0:	4618      	mov	r0, r3
 80073d2:	f01e fa70 	bl	80258b6 <_ZNSaIcEC1Ev>
 80073d6:	f207 7384 	addw	r3, r7, #1924	; 0x784
 80073da:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80073de:	f5a2 629e 	sub.w	r2, r2, #1264	; 0x4f0
 80073e2:	f207 706c 	addw	r0, r7, #1900	; 0x76c
 80073e6:	ca06      	ldmia	r2, {r1, r2}
 80073e8:	f006 f86c 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80073ec:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 80073f0:	ed9f 0a90 	vldr	s0, [pc, #576]	; 8007634 <_ZN3jlb5GraphC1Ev+0x2074>
 80073f4:	2200      	movs	r2, #0
 80073f6:	214e      	movs	r1, #78	; 0x4e
 80073f8:	4620      	mov	r0, r4
 80073fa:	f7fe f85f 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80073fe:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 8007402:	4618      	mov	r0, r3
 8007404:	f005 ff50 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007408:	f207 7384 	addw	r3, r7, #1924	; 0x784
 800740c:	4618      	mov	r0, r3
 800740e:	f01e fa54 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('H', Direction::STRAIGHT, {'P', 'Q', 'R'}, 2.0f * UNIT);
 8007412:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007416:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800741a:	214d      	movs	r1, #77	; 0x4d
 800741c:	6818      	ldr	r0, [r3, #0]
 800741e:	f001 fb13 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8007422:	4604      	mov	r4, r0
 8007424:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007428:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 800742c:	4a83      	ldr	r2, [pc, #524]	; (800763c <_ZN3jlb5GraphC1Ev+0x207c>)
 800742e:	6812      	ldr	r2, [r2, #0]
 8007430:	4611      	mov	r1, r2
 8007432:	8019      	strh	r1, [r3, #0]
 8007434:	3302      	adds	r3, #2
 8007436:	0c12      	lsrs	r2, r2, #16
 8007438:	701a      	strb	r2, [r3, #0]
 800743a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800743e:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8007442:	f207 729c 	addw	r2, r7, #1948	; 0x79c
 8007446:	601a      	str	r2, [r3, #0]
 8007448:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800744c:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8007450:	2203      	movs	r2, #3
 8007452:	605a      	str	r2, [r3, #4]
 8007454:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8007458:	4618      	mov	r0, r3
 800745a:	f01e fa2c 	bl	80258b6 <_ZNSaIcEC1Ev>
 800745e:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8007462:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007466:	f2a2 42d4 	subw	r2, r2, #1236	; 0x4d4
 800746a:	f507 60f1 	add.w	r0, r7, #1928	; 0x788
 800746e:	ca06      	ldmia	r2, {r1, r2}
 8007470:	f006 f828 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007474:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 8007478:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8007640 <_ZN3jlb5GraphC1Ev+0x2080>
 800747c:	2202      	movs	r2, #2
 800747e:	2148      	movs	r1, #72	; 0x48
 8007480:	4620      	mov	r0, r4
 8007482:	f7fe f81b 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007486:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 800748a:	4618      	mov	r0, r3
 800748c:	f005 ff0c 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007490:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8007494:	4618      	mov	r0, r3
 8007496:	f01e fa10 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('K', Direction::RIGHT, {'P', 'Q', 'R'}, QUARTER_CIRCLE);
 800749a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800749e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80074a2:	214d      	movs	r1, #77	; 0x4d
 80074a4:	6818      	ldr	r0, [r3, #0]
 80074a6:	f001 facf 	bl	8008a48 <_ZN3jlb5GraphixEc>
 80074aa:	4604      	mov	r4, r0
 80074ac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80074b0:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 80074b4:	4a61      	ldr	r2, [pc, #388]	; (800763c <_ZN3jlb5GraphC1Ev+0x207c>)
 80074b6:	6812      	ldr	r2, [r2, #0]
 80074b8:	4611      	mov	r1, r2
 80074ba:	8019      	strh	r1, [r3, #0]
 80074bc:	3302      	adds	r3, #2
 80074be:	0c12      	lsrs	r2, r2, #16
 80074c0:	701a      	strb	r2, [r3, #0]
 80074c2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80074c6:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 80074ca:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 80074ce:	601a      	str	r2, [r3, #0]
 80074d0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80074d4:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 80074d8:	2203      	movs	r2, #3
 80074da:	605a      	str	r2, [r3, #4]
 80074dc:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 80074e0:	4618      	mov	r0, r3
 80074e2:	f01e f9e8 	bl	80258b6 <_ZNSaIcEC1Ev>
 80074e6:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 80074ea:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80074ee:	f5a2 6297 	sub.w	r2, r2, #1208	; 0x4b8
 80074f2:	f207 70a4 	addw	r0, r7, #1956	; 0x7a4
 80074f6:	ca06      	ldmia	r2, {r1, r2}
 80074f8:	f005 ffe4 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80074fc:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 8007500:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8007634 <_ZN3jlb5GraphC1Ev+0x2074>
 8007504:	2201      	movs	r2, #1
 8007506:	214b      	movs	r1, #75	; 0x4b
 8007508:	4620      	mov	r0, r4
 800750a:	f7fd ffd7 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800750e:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 8007512:	4618      	mov	r0, r3
 8007514:	f005 fec8 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007518:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 800751c:	4618      	mov	r0, r3
 800751e:	f01e f9cc 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('R', Direction::LEFT, {'H', 'K'}, QUARTER_CIRCLE);
 8007522:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007526:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800752a:	214d      	movs	r1, #77	; 0x4d
 800752c:	6818      	ldr	r0, [r3, #0]
 800752e:	f001 fa8b 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8007532:	4604      	mov	r4, r0
 8007534:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007538:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 800753c:	4a41      	ldr	r2, [pc, #260]	; (8007644 <_ZN3jlb5GraphC1Ev+0x2084>)
 800753e:	8812      	ldrh	r2, [r2, #0]
 8007540:	801a      	strh	r2, [r3, #0]
 8007542:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007546:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 800754a:	f207 72d4 	addw	r2, r7, #2004	; 0x7d4
 800754e:	601a      	str	r2, [r3, #0]
 8007550:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007554:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8007558:	2202      	movs	r2, #2
 800755a:	605a      	str	r2, [r3, #4]
 800755c:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8007560:	4618      	mov	r0, r3
 8007562:	f01e f9a8 	bl	80258b6 <_ZNSaIcEC1Ev>
 8007566:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800756a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800756e:	f2a2 429c 	subw	r2, r2, #1180	; 0x49c
 8007572:	f507 60f8 	add.w	r0, r7, #1984	; 0x7c0
 8007576:	ca06      	ldmia	r2, {r1, r2}
 8007578:	f005 ffa4 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800757c:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 8007580:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8007634 <_ZN3jlb5GraphC1Ev+0x2074>
 8007584:	2200      	movs	r2, #0
 8007586:	2152      	movs	r1, #82	; 0x52
 8007588:	4620      	mov	r0, r4
 800758a:	f7fd ff97 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800758e:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 8007592:	4618      	mov	r0, r3
 8007594:	f005 fe88 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007598:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800759c:	4618      	mov	r0, r3
 800759e:	f01e f98c 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('Q', Direction::STRAIGHT, {'H', 'K'}, UNIT);
 80075a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80075a6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80075aa:	214d      	movs	r1, #77	; 0x4d
 80075ac:	6818      	ldr	r0, [r3, #0]
 80075ae:	f001 fa4b 	bl	8008a48 <_ZN3jlb5GraphixEc>
 80075b2:	4604      	mov	r4, r0
 80075b4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80075b8:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80075bc:	4a21      	ldr	r2, [pc, #132]	; (8007644 <_ZN3jlb5GraphC1Ev+0x2084>)
 80075be:	8812      	ldrh	r2, [r2, #0]
 80075c0:	801a      	strh	r2, [r3, #0]
 80075c2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80075c6:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 80075ca:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 80075ce:	601a      	str	r2, [r3, #0]
 80075d0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80075d4:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 80075d8:	2202      	movs	r2, #2
 80075da:	605a      	str	r2, [r3, #4]
 80075dc:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 80075e0:	4618      	mov	r0, r3
 80075e2:	f01e f968 	bl	80258b6 <_ZNSaIcEC1Ev>
 80075e6:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 80075ea:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80075ee:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 80075f2:	f207 70dc 	addw	r0, r7, #2012	; 0x7dc
 80075f6:	ca06      	ldmia	r2, {r1, r2}
 80075f8:	f005 ff64 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80075fc:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 8007600:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8007648 <_ZN3jlb5GraphC1Ev+0x2088>
 8007604:	2202      	movs	r2, #2
 8007606:	2151      	movs	r1, #81	; 0x51
 8007608:	4620      	mov	r0, r4
 800760a:	f7fd ff57 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800760e:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 8007612:	4618      	mov	r0, r3
 8007614:	f005 fe48 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007618:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 800761c:	4618      	mov	r0, r3
 800761e:	f01e f94c 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('P', Direction::RIGHT, {'H', 'K'}, QUARTER_CIRCLE);
 8007622:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007626:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800762a:	214d      	movs	r1, #77	; 0x4d
 800762c:	6818      	ldr	r0, [r3, #0]
 800762e:	e00d      	b.n	800764c <_ZN3jlb5GraphC1Ev+0x208c>
 8007630:	080296f0 	.word	0x080296f0
 8007634:	3f71463a 	.word	0x3f71463a
 8007638:	080296ec 	.word	0x080296ec
 800763c:	080296f4 	.word	0x080296f4
 8007640:	3f99999a 	.word	0x3f99999a
 8007644:	080296f8 	.word	0x080296f8
 8007648:	3f19999a 	.word	0x3f19999a
 800764c:	f001 f9fc 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8007650:	4604      	mov	r4, r0
 8007652:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007656:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800765a:	4ae5      	ldr	r2, [pc, #916]	; (80079f0 <_ZN3jlb5GraphC1Ev+0x2430>)
 800765c:	8812      	ldrh	r2, [r2, #0]
 800765e:	801a      	strh	r2, [r3, #0]
 8007660:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007664:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007668:	f607 020c 	addw	r2, r7, #2060	; 0x80c
 800766c:	601a      	str	r2, [r3, #0]
 800766e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007672:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007676:	2202      	movs	r2, #2
 8007678:	605a      	str	r2, [r3, #4]
 800767a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800767e:	4618      	mov	r0, r3
 8007680:	f01e f919 	bl	80258b6 <_ZNSaIcEC1Ev>
 8007684:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8007688:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800768c:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 8007690:	f507 60ff 	add.w	r0, r7, #2040	; 0x7f8
 8007694:	ca06      	ldmia	r2, {r1, r2}
 8007696:	f005 ff15 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800769a:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800769e:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 80079f4 <_ZN3jlb5GraphC1Ev+0x2434>
 80076a2:	2201      	movs	r2, #1
 80076a4:	2150      	movs	r1, #80	; 0x50
 80076a6:	4620      	mov	r0, r4
 80076a8:	f7fd ff08 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80076ac:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80076b0:	4618      	mov	r0, r3
 80076b2:	f005 fdf9 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 80076b6:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80076ba:	4618      	mov	r0, r3
 80076bc:	f01e f8fd 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('K', Direction::LEFT, {'R', 'S', 'T'}, QUARTER_CIRCLE);
 80076c0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80076c4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80076c8:	214e      	movs	r1, #78	; 0x4e
 80076ca:	6818      	ldr	r0, [r3, #0]
 80076cc:	f001 f9bc 	bl	8008a48 <_ZN3jlb5GraphixEc>
 80076d0:	4604      	mov	r4, r0
 80076d2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80076d6:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80076da:	4ac7      	ldr	r2, [pc, #796]	; (80079f8 <_ZN3jlb5GraphC1Ev+0x2438>)
 80076dc:	6812      	ldr	r2, [r2, #0]
 80076de:	4611      	mov	r1, r2
 80076e0:	8019      	strh	r1, [r3, #0]
 80076e2:	3302      	adds	r3, #2
 80076e4:	0c12      	lsrs	r2, r2, #16
 80076e6:	701a      	strb	r2, [r3, #0]
 80076e8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80076ec:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80076f0:	f607 0228 	addw	r2, r7, #2088	; 0x828
 80076f4:	601a      	str	r2, [r3, #0]
 80076f6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80076fa:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80076fe:	2203      	movs	r2, #3
 8007700:	605a      	str	r2, [r3, #4]
 8007702:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8007706:	4618      	mov	r0, r3
 8007708:	f01e f8d5 	bl	80258b6 <_ZNSaIcEC1Ev>
 800770c:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8007710:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007714:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8007718:	f607 0014 	addw	r0, r7, #2068	; 0x814
 800771c:	ca06      	ldmia	r2, {r1, r2}
 800771e:	f005 fed1 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007722:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8007726:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 80079f4 <_ZN3jlb5GraphC1Ev+0x2434>
 800772a:	2200      	movs	r2, #0
 800772c:	214b      	movs	r1, #75	; 0x4b
 800772e:	4620      	mov	r0, r4
 8007730:	f7fd fec4 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007734:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8007738:	4618      	mov	r0, r3
 800773a:	f005 fdb5 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 800773e:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8007742:	4618      	mov	r0, r3
 8007744:	f01e f8b9 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('I', Direction::STRAIGHT, {'R', 'S', 'T'}, 2.0f * UNIT);
 8007748:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800774c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007750:	214e      	movs	r1, #78	; 0x4e
 8007752:	6818      	ldr	r0, [r3, #0]
 8007754:	f001 f978 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8007758:	4604      	mov	r4, r0
 800775a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800775e:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8007762:	4aa5      	ldr	r2, [pc, #660]	; (80079f8 <_ZN3jlb5GraphC1Ev+0x2438>)
 8007764:	6812      	ldr	r2, [r2, #0]
 8007766:	4611      	mov	r1, r2
 8007768:	8019      	strh	r1, [r3, #0]
 800776a:	3302      	adds	r3, #2
 800776c:	0c12      	lsrs	r2, r2, #16
 800776e:	701a      	strb	r2, [r3, #0]
 8007770:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007774:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8007778:	f607 0244 	addw	r2, r7, #2116	; 0x844
 800777c:	601a      	str	r2, [r3, #0]
 800777e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007782:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8007786:	2203      	movs	r2, #3
 8007788:	605a      	str	r2, [r3, #4]
 800778a:	f607 0348 	addw	r3, r7, #2120	; 0x848
 800778e:	4618      	mov	r0, r3
 8007790:	f01e f891 	bl	80258b6 <_ZNSaIcEC1Ev>
 8007794:	f607 0348 	addw	r3, r7, #2120	; 0x848
 8007798:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800779c:	f2a2 422c 	subw	r2, r2, #1068	; 0x42c
 80077a0:	f507 6003 	add.w	r0, r7, #2096	; 0x830
 80077a4:	ca06      	ldmia	r2, {r1, r2}
 80077a6:	f005 fe8d 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80077aa:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 80077ae:	ed9f 0a93 	vldr	s0, [pc, #588]	; 80079fc <_ZN3jlb5GraphC1Ev+0x243c>
 80077b2:	2202      	movs	r2, #2
 80077b4:	2149      	movs	r1, #73	; 0x49
 80077b6:	4620      	mov	r0, r4
 80077b8:	f7fd fe80 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80077bc:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 80077c0:	4618      	mov	r0, r3
 80077c2:	f005 fd71 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 80077c6:	f607 0348 	addw	r3, r7, #2120	; 0x848
 80077ca:	4618      	mov	r0, r3
 80077cc:	f01e f875 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('L', Direction::RIGHT, {'R', 'S', 'T'}, QUARTER_CIRCLE);
 80077d0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80077d4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80077d8:	214e      	movs	r1, #78	; 0x4e
 80077da:	6818      	ldr	r0, [r3, #0]
 80077dc:	f001 f934 	bl	8008a48 <_ZN3jlb5GraphixEc>
 80077e0:	4604      	mov	r4, r0
 80077e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80077e6:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80077ea:	4a83      	ldr	r2, [pc, #524]	; (80079f8 <_ZN3jlb5GraphC1Ev+0x2438>)
 80077ec:	6812      	ldr	r2, [r2, #0]
 80077ee:	4611      	mov	r1, r2
 80077f0:	8019      	strh	r1, [r3, #0]
 80077f2:	3302      	adds	r3, #2
 80077f4:	0c12      	lsrs	r2, r2, #16
 80077f6:	701a      	strb	r2, [r3, #0]
 80077f8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80077fc:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8007800:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 8007804:	601a      	str	r2, [r3, #0]
 8007806:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800780a:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 800780e:	2203      	movs	r2, #3
 8007810:	605a      	str	r2, [r3, #4]
 8007812:	f607 0364 	addw	r3, r7, #2148	; 0x864
 8007816:	4618      	mov	r0, r3
 8007818:	f01e f84d 	bl	80258b6 <_ZNSaIcEC1Ev>
 800781c:	f607 0364 	addw	r3, r7, #2148	; 0x864
 8007820:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007824:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 8007828:	f607 004c 	addw	r0, r7, #2124	; 0x84c
 800782c:	ca06      	ldmia	r2, {r1, r2}
 800782e:	f005 fe49 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007832:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 8007836:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 80079f4 <_ZN3jlb5GraphC1Ev+0x2434>
 800783a:	2201      	movs	r2, #1
 800783c:	214c      	movs	r1, #76	; 0x4c
 800783e:	4620      	mov	r0, r4
 8007840:	f7fd fe3c 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007844:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 8007848:	4618      	mov	r0, r3
 800784a:	f005 fd2d 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 800784e:	f607 0364 	addw	r3, r7, #2148	; 0x864
 8007852:	4618      	mov	r0, r3
 8007854:	f01e f831 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('T', Direction::LEFT, {'K', 'I', 'L'}, QUARTER_CIRCLE);
 8007858:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800785c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007860:	214e      	movs	r1, #78	; 0x4e
 8007862:	6818      	ldr	r0, [r3, #0]
 8007864:	f001 f8f0 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8007868:	4604      	mov	r4, r0
 800786a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800786e:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8007872:	4a63      	ldr	r2, [pc, #396]	; (8007a00 <_ZN3jlb5GraphC1Ev+0x2440>)
 8007874:	6812      	ldr	r2, [r2, #0]
 8007876:	4611      	mov	r1, r2
 8007878:	8019      	strh	r1, [r3, #0]
 800787a:	3302      	adds	r3, #2
 800787c:	0c12      	lsrs	r2, r2, #16
 800787e:	701a      	strb	r2, [r3, #0]
 8007880:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007884:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8007888:	f607 027c 	addw	r2, r7, #2172	; 0x87c
 800788c:	601a      	str	r2, [r3, #0]
 800788e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007892:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8007896:	2203      	movs	r2, #3
 8007898:	605a      	str	r2, [r3, #4]
 800789a:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800789e:	4618      	mov	r0, r3
 80078a0:	f01e f809 	bl	80258b6 <_ZNSaIcEC1Ev>
 80078a4:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80078a8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80078ac:	f5a2 727d 	sub.w	r2, r2, #1012	; 0x3f4
 80078b0:	f607 0068 	addw	r0, r7, #2152	; 0x868
 80078b4:	ca06      	ldmia	r2, {r1, r2}
 80078b6:	f005 fe05 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80078ba:	f607 0368 	addw	r3, r7, #2152	; 0x868
 80078be:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80079f4 <_ZN3jlb5GraphC1Ev+0x2434>
 80078c2:	2200      	movs	r2, #0
 80078c4:	2154      	movs	r1, #84	; 0x54
 80078c6:	4620      	mov	r0, r4
 80078c8:	f7fd fdf8 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80078cc:	f607 0368 	addw	r3, r7, #2152	; 0x868
 80078d0:	4618      	mov	r0, r3
 80078d2:	f005 fce9 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 80078d6:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80078da:	4618      	mov	r0, r3
 80078dc:	f01d ffed 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('S', Direction::STRAIGHT, {'K', 'I', 'L'}, UNIT);
 80078e0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80078e4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80078e8:	214e      	movs	r1, #78	; 0x4e
 80078ea:	6818      	ldr	r0, [r3, #0]
 80078ec:	f001 f8ac 	bl	8008a48 <_ZN3jlb5GraphixEc>
 80078f0:	4604      	mov	r4, r0
 80078f2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80078f6:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 80078fa:	4a41      	ldr	r2, [pc, #260]	; (8007a00 <_ZN3jlb5GraphC1Ev+0x2440>)
 80078fc:	6812      	ldr	r2, [r2, #0]
 80078fe:	4611      	mov	r1, r2
 8007900:	8019      	strh	r1, [r3, #0]
 8007902:	3302      	adds	r3, #2
 8007904:	0c12      	lsrs	r2, r2, #16
 8007906:	701a      	strb	r2, [r3, #0]
 8007908:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800790c:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8007910:	f607 0298 	addw	r2, r7, #2200	; 0x898
 8007914:	601a      	str	r2, [r3, #0]
 8007916:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800791a:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800791e:	2203      	movs	r2, #3
 8007920:	605a      	str	r2, [r3, #4]
 8007922:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8007926:	4618      	mov	r0, r3
 8007928:	f01d ffc5 	bl	80258b6 <_ZNSaIcEC1Ev>
 800792c:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8007930:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007934:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8007938:	f607 0084 	addw	r0, r7, #2180	; 0x884
 800793c:	ca06      	ldmia	r2, {r1, r2}
 800793e:	f005 fdc1 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007942:	f607 0384 	addw	r3, r7, #2180	; 0x884
 8007946:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8007a04 <_ZN3jlb5GraphC1Ev+0x2444>
 800794a:	2202      	movs	r2, #2
 800794c:	2153      	movs	r1, #83	; 0x53
 800794e:	4620      	mov	r0, r4
 8007950:	f7fd fdb4 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007954:	f607 0384 	addw	r3, r7, #2180	; 0x884
 8007958:	4618      	mov	r0, r3
 800795a:	f005 fca5 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 800795e:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8007962:	4618      	mov	r0, r3
 8007964:	f01d ffa9 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('R', Direction::RIGHT, {'K', 'I', 'L'}, QUARTER_CIRCLE);
 8007968:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800796c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007970:	214e      	movs	r1, #78	; 0x4e
 8007972:	6818      	ldr	r0, [r3, #0]
 8007974:	f001 f868 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8007978:	4604      	mov	r4, r0
 800797a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800797e:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8007982:	4a1f      	ldr	r2, [pc, #124]	; (8007a00 <_ZN3jlb5GraphC1Ev+0x2440>)
 8007984:	6812      	ldr	r2, [r2, #0]
 8007986:	4611      	mov	r1, r2
 8007988:	8019      	strh	r1, [r3, #0]
 800798a:	3302      	adds	r3, #2
 800798c:	0c12      	lsrs	r2, r2, #16
 800798e:	701a      	strb	r2, [r3, #0]
 8007990:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007994:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8007998:	f607 02b4 	addw	r2, r7, #2228	; 0x8b4
 800799c:	601a      	str	r2, [r3, #0]
 800799e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80079a2:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 80079a6:	2203      	movs	r2, #3
 80079a8:	605a      	str	r2, [r3, #4]
 80079aa:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 80079ae:	4618      	mov	r0, r3
 80079b0:	f01d ff81 	bl	80258b6 <_ZNSaIcEC1Ev>
 80079b4:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 80079b8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80079bc:	f5a2 726f 	sub.w	r2, r2, #956	; 0x3bc
 80079c0:	f507 600a 	add.w	r0, r7, #2208	; 0x8a0
 80079c4:	ca06      	ldmia	r2, {r1, r2}
 80079c6:	f005 fd7d 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80079ca:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 80079ce:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80079f4 <_ZN3jlb5GraphC1Ev+0x2434>
 80079d2:	2201      	movs	r2, #1
 80079d4:	2152      	movs	r1, #82	; 0x52
 80079d6:	4620      	mov	r0, r4
 80079d8:	f7fd fd70 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80079dc:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 80079e0:	4618      	mov	r0, r3
 80079e2:	f005 fc61 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 80079e6:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 80079ea:	4618      	mov	r0, r3
 80079ec:	e00c      	b.n	8007a08 <_ZN3jlb5GraphC1Ev+0x2448>
 80079ee:	bf00      	nop
 80079f0:	080296f8 	.word	0x080296f8
 80079f4:	3f71463a 	.word	0x3f71463a
 80079f8:	080296fc 	.word	0x080296fc
 80079fc:	3f99999a 	.word	0x3f99999a
 8007a00:	08029700 	.word	0x08029700
 8007a04:	3f19999a 	.word	0x3f19999a
 8007a08:	f01d ff57 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('L', Direction::LEFT, {'T', 'U', 'W'}, QUARTER_CIRCLE);
 8007a0c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007a10:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007a14:	214f      	movs	r1, #79	; 0x4f
 8007a16:	6818      	ldr	r0, [r3, #0]
 8007a18:	f001 f816 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8007a1c:	4604      	mov	r4, r0
 8007a1e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007a22:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8007a26:	4aeb      	ldr	r2, [pc, #940]	; (8007dd4 <_ZN3jlb5GraphC1Ev+0x2814>)
 8007a28:	6812      	ldr	r2, [r2, #0]
 8007a2a:	4611      	mov	r1, r2
 8007a2c:	8019      	strh	r1, [r3, #0]
 8007a2e:	3302      	adds	r3, #2
 8007a30:	0c12      	lsrs	r2, r2, #16
 8007a32:	701a      	strb	r2, [r3, #0]
 8007a34:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007a38:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8007a3c:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007a46:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8007a4a:	2203      	movs	r2, #3
 8007a4c:	605a      	str	r2, [r3, #4]
 8007a4e:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8007a52:	4618      	mov	r0, r3
 8007a54:	f01d ff2f 	bl	80258b6 <_ZNSaIcEC1Ev>
 8007a58:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8007a5c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007a60:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8007a64:	f607 00bc 	addw	r0, r7, #2236	; 0x8bc
 8007a68:	ca06      	ldmia	r2, {r1, r2}
 8007a6a:	f005 fd2b 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007a6e:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 8007a72:	ed9f 0adc 	vldr	s0, [pc, #880]	; 8007de4 <_ZN3jlb5GraphC1Ev+0x2824>
 8007a76:	2200      	movs	r2, #0
 8007a78:	214c      	movs	r1, #76	; 0x4c
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f7fd fd1e 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007a80:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 8007a84:	4618      	mov	r0, r3
 8007a86:	f005 fc0f 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007a8a:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f01d ff13 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('U', Direction::LEFT, {'L'}, QUARTER_CIRCLE);
 8007a94:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007a98:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007a9c:	214f      	movs	r1, #79	; 0x4f
 8007a9e:	6818      	ldr	r0, [r3, #0]
 8007aa0:	f000 ffd2 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8007aa4:	4604      	mov	r4, r0
 8007aa6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007aaa:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8007aae:	224c      	movs	r2, #76	; 0x4c
 8007ab0:	701a      	strb	r2, [r3, #0]
 8007ab2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007ab6:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8007aba:	f607 02ec 	addw	r2, r7, #2284	; 0x8ec
 8007abe:	601a      	str	r2, [r3, #0]
 8007ac0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007ac4:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8007ac8:	2201      	movs	r2, #1
 8007aca:	605a      	str	r2, [r3, #4]
 8007acc:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f01d fef0 	bl	80258b6 <_ZNSaIcEC1Ev>
 8007ad6:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8007ada:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007ade:	f5a2 7261 	sub.w	r2, r2, #900	; 0x384
 8007ae2:	f607 00d8 	addw	r0, r7, #2264	; 0x8d8
 8007ae6:	ca06      	ldmia	r2, {r1, r2}
 8007ae8:	f005 fcec 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007aec:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8007af0:	ed9f 0abc 	vldr	s0, [pc, #752]	; 8007de4 <_ZN3jlb5GraphC1Ev+0x2824>
 8007af4:	2200      	movs	r2, #0
 8007af6:	2155      	movs	r1, #85	; 0x55
 8007af8:	4620      	mov	r0, r4
 8007afa:	f7fd fcdf 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007afe:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8007b02:	4618      	mov	r0, r3
 8007b04:	f005 fbd0 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007b08:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f01d fed4 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('W', Direction::STRAIGHT, {'L'}, UNIT + QUARTER_CIRCLE);
 8007b12:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007b16:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007b1a:	214f      	movs	r1, #79	; 0x4f
 8007b1c:	6818      	ldr	r0, [r3, #0]
 8007b1e:	f000 ff93 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8007b22:	4604      	mov	r4, r0
 8007b24:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007b28:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8007b2c:	224c      	movs	r2, #76	; 0x4c
 8007b2e:	701a      	strb	r2, [r3, #0]
 8007b30:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007b34:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8007b38:	f607 1208 	addw	r2, r7, #2312	; 0x908
 8007b3c:	601a      	str	r2, [r3, #0]
 8007b3e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007b42:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8007b46:	2201      	movs	r2, #1
 8007b48:	605a      	str	r2, [r3, #4]
 8007b4a:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f01d feb1 	bl	80258b6 <_ZNSaIcEC1Ev>
 8007b54:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8007b58:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007b5c:	f5a2 725a 	sub.w	r2, r2, #872	; 0x368
 8007b60:	f607 00f4 	addw	r0, r7, #2292	; 0x8f4
 8007b64:	ca06      	ldmia	r2, {r1, r2}
 8007b66:	f005 fcad 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007b6a:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 8007b6e:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 8007dd8 <_ZN3jlb5GraphC1Ev+0x2818>
 8007b72:	2202      	movs	r2, #2
 8007b74:	2157      	movs	r1, #87	; 0x57
 8007b76:	4620      	mov	r0, r4
 8007b78:	f7fd fca0 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007b7c:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 8007b80:	4618      	mov	r0, r3
 8007b82:	f005 fb91 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007b86:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f01d fe95 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('T', Direction::RIGHT, {'L'}, QUARTER_CIRCLE);
 8007b90:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007b94:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007b98:	214f      	movs	r1, #79	; 0x4f
 8007b9a:	6818      	ldr	r0, [r3, #0]
 8007b9c:	f000 ff54 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8007ba0:	4604      	mov	r4, r0
 8007ba2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007ba6:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8007baa:	224c      	movs	r2, #76	; 0x4c
 8007bac:	701a      	strb	r2, [r3, #0]
 8007bae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007bb2:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8007bb6:	f607 1224 	addw	r2, r7, #2340	; 0x924
 8007bba:	601a      	str	r2, [r3, #0]
 8007bbc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007bc0:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	605a      	str	r2, [r3, #4]
 8007bc8:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f01d fe72 	bl	80258b6 <_ZNSaIcEC1Ev>
 8007bd2:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8007bd6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007bda:	f5a2 7253 	sub.w	r2, r2, #844	; 0x34c
 8007bde:	f507 6011 	add.w	r0, r7, #2320	; 0x910
 8007be2:	ca06      	ldmia	r2, {r1, r2}
 8007be4:	f005 fc6e 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007be8:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8007bec:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8007de4 <_ZN3jlb5GraphC1Ev+0x2824>
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	2154      	movs	r1, #84	; 0x54
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	f7fd fc61 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007bfa:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f005 fb52 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007c04:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f01d fe56 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('P').add_edge('M', Direction::LEFT, {'P'}, QUARTER_CIRCLE);
 8007c0e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007c12:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007c16:	2150      	movs	r1, #80	; 0x50
 8007c18:	6818      	ldr	r0, [r3, #0]
 8007c1a:	f000 ff15 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8007c1e:	4604      	mov	r4, r0
 8007c20:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007c24:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8007c28:	2250      	movs	r2, #80	; 0x50
 8007c2a:	701a      	strb	r2, [r3, #0]
 8007c2c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007c30:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8007c34:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8007c38:	601a      	str	r2, [r3, #0]
 8007c3a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007c3e:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8007c42:	2201      	movs	r2, #1
 8007c44:	605a      	str	r2, [r3, #4]
 8007c46:	f607 1344 	addw	r3, r7, #2372	; 0x944
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f01d fe33 	bl	80258b6 <_ZNSaIcEC1Ev>
 8007c50:	f607 1344 	addw	r3, r7, #2372	; 0x944
 8007c54:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007c58:	f5a2 724c 	sub.w	r2, r2, #816	; 0x330
 8007c5c:	f607 102c 	addw	r0, r7, #2348	; 0x92c
 8007c60:	ca06      	ldmia	r2, {r1, r2}
 8007c62:	f005 fc2f 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007c66:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 8007c6a:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8007de4 <_ZN3jlb5GraphC1Ev+0x2824>
 8007c6e:	2200      	movs	r2, #0
 8007c70:	214d      	movs	r1, #77	; 0x4d
 8007c72:	4620      	mov	r0, r4
 8007c74:	f7fd fc22 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007c78:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f005 fb13 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007c82:	f607 1344 	addw	r3, r7, #2372	; 0x944
 8007c86:	4618      	mov	r0, r3
 8007c88:	f01d fe17 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('P').add_edge('Q', Direction::STRAIGHT, {'P'}, UNIT);
 8007c8c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007c90:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007c94:	2150      	movs	r1, #80	; 0x50
 8007c96:	6818      	ldr	r0, [r3, #0]
 8007c98:	f000 fed6 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8007c9c:	4604      	mov	r4, r0
 8007c9e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007ca2:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8007ca6:	2250      	movs	r2, #80	; 0x50
 8007ca8:	701a      	strb	r2, [r3, #0]
 8007caa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007cae:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8007cb2:	f607 125c 	addw	r2, r7, #2396	; 0x95c
 8007cb6:	601a      	str	r2, [r3, #0]
 8007cb8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007cbc:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	605a      	str	r2, [r3, #4]
 8007cc4:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f01d fdf4 	bl	80258b6 <_ZNSaIcEC1Ev>
 8007cce:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8007cd2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007cd6:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 8007cda:	f607 1048 	addw	r0, r7, #2376	; 0x948
 8007cde:	ca06      	ldmia	r2, {r1, r2}
 8007ce0:	f005 fbf0 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007ce4:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8007ce8:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8007de0 <_ZN3jlb5GraphC1Ev+0x2820>
 8007cec:	2202      	movs	r2, #2
 8007cee:	2151      	movs	r1, #81	; 0x51
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f7fd fbe3 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007cf6:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f005 fad4 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007d00:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8007d04:	4618      	mov	r0, r3
 8007d06:	f01d fdd8 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('P', Direction::STRAIGHT, {'R'}, UNIT);
 8007d0a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007d0e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007d12:	2151      	movs	r1, #81	; 0x51
 8007d14:	6818      	ldr	r0, [r3, #0]
 8007d16:	f000 fe97 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8007d1a:	4604      	mov	r4, r0
 8007d1c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007d20:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8007d24:	2252      	movs	r2, #82	; 0x52
 8007d26:	701a      	strb	r2, [r3, #0]
 8007d28:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007d2c:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8007d30:	f607 1278 	addw	r2, r7, #2424	; 0x978
 8007d34:	601a      	str	r2, [r3, #0]
 8007d36:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007d3a:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8007d3e:	2201      	movs	r2, #1
 8007d40:	605a      	str	r2, [r3, #4]
 8007d42:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 8007d46:	4618      	mov	r0, r3
 8007d48:	f01d fdb5 	bl	80258b6 <_ZNSaIcEC1Ev>
 8007d4c:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 8007d50:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007d54:	f5a2 723e 	sub.w	r2, r2, #760	; 0x2f8
 8007d58:	f607 1064 	addw	r0, r7, #2404	; 0x964
 8007d5c:	ca06      	ldmia	r2, {r1, r2}
 8007d5e:	f005 fbb1 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007d62:	f607 1364 	addw	r3, r7, #2404	; 0x964
 8007d66:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8007de0 <_ZN3jlb5GraphC1Ev+0x2820>
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	2150      	movs	r1, #80	; 0x50
 8007d6e:	4620      	mov	r0, r4
 8007d70:	f7fd fba4 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007d74:	f607 1364 	addw	r3, r7, #2404	; 0x964
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f005 fa95 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007d7e:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 8007d82:	4618      	mov	r0, r3
 8007d84:	f01d fd99 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('M', Direction::STRAIGHT, {'V', 'X'}, UNIT);
 8007d88:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007d8c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007d90:	2151      	movs	r1, #81	; 0x51
 8007d92:	6818      	ldr	r0, [r3, #0]
 8007d94:	f000 fe58 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8007d98:	4604      	mov	r4, r0
 8007d9a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007d9e:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8007da2:	4a0e      	ldr	r2, [pc, #56]	; (8007ddc <_ZN3jlb5GraphC1Ev+0x281c>)
 8007da4:	8812      	ldrh	r2, [r2, #0]
 8007da6:	801a      	strh	r2, [r3, #0]
 8007da8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007dac:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8007db0:	f607 1294 	addw	r2, r7, #2452	; 0x994
 8007db4:	601a      	str	r2, [r3, #0]
 8007db6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007dba:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	605a      	str	r2, [r3, #4]
 8007dc2:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f01d fd75 	bl	80258b6 <_ZNSaIcEC1Ev>
 8007dcc:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8007dd0:	e00c      	b.n	8007dec <_ZN3jlb5GraphC1Ev+0x282c>
 8007dd2:	bf00      	nop
 8007dd4:	08029704 	.word	0x08029704
 8007dd8:	3fc56fea 	.word	0x3fc56fea
 8007ddc:	08029708 	.word	0x08029708
 8007de0:	3f19999a 	.word	0x3f19999a
 8007de4:	3f71463a 	.word	0x3f71463a
 8007de8:	401c518f 	.word	0x401c518f
 8007dec:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007df0:	f5a2 7237 	sub.w	r2, r2, #732	; 0x2dc
 8007df4:	f507 6018 	add.w	r0, r7, #2432	; 0x980
 8007df8:	ca06      	ldmia	r2, {r1, r2}
 8007dfa:	f005 fb63 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007dfe:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8007e02:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 8007de0 <_ZN3jlb5GraphC1Ev+0x2820>
 8007e06:	2202      	movs	r2, #2
 8007e08:	214d      	movs	r1, #77	; 0x4d
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	f7fd fb56 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007e10:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8007e14:	4618      	mov	r0, r3
 8007e16:	f005 fa47 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007e1a:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f01d fd4b 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('R', Direction::STRAIGHT, {'P'}, UNIT);
 8007e24:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007e28:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007e2c:	2151      	movs	r1, #81	; 0x51
 8007e2e:	6818      	ldr	r0, [r3, #0]
 8007e30:	f000 fe0a 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8007e34:	4604      	mov	r4, r0
 8007e36:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007e3a:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8007e3e:	2250      	movs	r2, #80	; 0x50
 8007e40:	701a      	strb	r2, [r3, #0]
 8007e42:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007e46:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8007e4a:	f507 621b 	add.w	r2, r7, #2480	; 0x9b0
 8007e4e:	601a      	str	r2, [r3, #0]
 8007e50:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007e54:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8007e58:	2201      	movs	r2, #1
 8007e5a:	605a      	str	r2, [r3, #4]
 8007e5c:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 8007e60:	4618      	mov	r0, r3
 8007e62:	f01d fd28 	bl	80258b6 <_ZNSaIcEC1Ev>
 8007e66:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 8007e6a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007e6e:	f5a2 7230 	sub.w	r2, r2, #704	; 0x2c0
 8007e72:	f607 109c 	addw	r0, r7, #2460	; 0x99c
 8007e76:	ca06      	ldmia	r2, {r1, r2}
 8007e78:	f005 fb24 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007e7c:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8007e80:	ed1f 0a29 	vldr	s0, [pc, #-164]	; 8007de0 <_ZN3jlb5GraphC1Ev+0x2820>
 8007e84:	2202      	movs	r2, #2
 8007e86:	2152      	movs	r1, #82	; 0x52
 8007e88:	4620      	mov	r0, r4
 8007e8a:	f7fd fb17 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007e8e:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8007e92:	4618      	mov	r0, r3
 8007e94:	f005 fa08 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007e98:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f01d fd0c 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('V', Direction::LEFT, {'M'}, QUARTER_CIRCLE);
 8007ea2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007ea6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007eaa:	2151      	movs	r1, #81	; 0x51
 8007eac:	6818      	ldr	r0, [r3, #0]
 8007eae:	f000 fdcb 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007eb8:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8007ebc:	224d      	movs	r2, #77	; 0x4d
 8007ebe:	701a      	strb	r2, [r3, #0]
 8007ec0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007ec4:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8007ec8:	f607 12cc 	addw	r2, r7, #2508	; 0x9cc
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007ed2:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	605a      	str	r2, [r3, #4]
 8007eda:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f01d fce9 	bl	80258b6 <_ZNSaIcEC1Ev>
 8007ee4:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8007ee8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007eec:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 8007ef0:	f607 10b8 	addw	r0, r7, #2488	; 0x9b8
 8007ef4:	ca06      	ldmia	r2, {r1, r2}
 8007ef6:	f005 fae5 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007efa:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8007efe:	ed1f 0a47 	vldr	s0, [pc, #-284]	; 8007de4 <_ZN3jlb5GraphC1Ev+0x2824>
 8007f02:	2200      	movs	r2, #0
 8007f04:	2156      	movs	r1, #86	; 0x56
 8007f06:	4620      	mov	r0, r4
 8007f08:	f7fd fad8 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007f0c:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8007f10:	4618      	mov	r0, r3
 8007f12:	f005 f9c9 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007f16:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f01d fccd 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('X', Direction::STRAIGHT, {'M'}, 2.5f * UNIT + QUARTER_CIRCLE);
 8007f20:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007f24:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007f28:	2151      	movs	r1, #81	; 0x51
 8007f2a:	6818      	ldr	r0, [r3, #0]
 8007f2c:	f000 fd8c 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8007f30:	4604      	mov	r4, r0
 8007f32:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007f36:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8007f3a:	224d      	movs	r2, #77	; 0x4d
 8007f3c:	701a      	strb	r2, [r3, #0]
 8007f3e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007f42:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8007f46:	f607 12e8 	addw	r2, r7, #2536	; 0x9e8
 8007f4a:	601a      	str	r2, [r3, #0]
 8007f4c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007f50:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8007f54:	2201      	movs	r2, #1
 8007f56:	605a      	str	r2, [r3, #4]
 8007f58:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f01d fcaa 	bl	80258b6 <_ZNSaIcEC1Ev>
 8007f62:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8007f66:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007f6a:	f5a2 7222 	sub.w	r2, r2, #648	; 0x288
 8007f6e:	f607 10d4 	addw	r0, r7, #2516	; 0x9d4
 8007f72:	ca06      	ldmia	r2, {r1, r2}
 8007f74:	f005 faa6 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007f78:	f607 13d4 	addw	r3, r7, #2516	; 0x9d4
 8007f7c:	ed1f 0a66 	vldr	s0, [pc, #-408]	; 8007de8 <_ZN3jlb5GraphC1Ev+0x2828>
 8007f80:	2202      	movs	r2, #2
 8007f82:	2158      	movs	r1, #88	; 0x58
 8007f84:	4620      	mov	r0, r4
 8007f86:	f7fd fa99 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007f8a:	f607 13d4 	addw	r3, r7, #2516	; 0x9d4
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f005 f98a 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007f94:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f01d fc8e 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('Q', Direction::STRAIGHT, {'N', 'S'}, UNIT);
 8007f9e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007fa2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007fa6:	2152      	movs	r1, #82	; 0x52
 8007fa8:	6818      	ldr	r0, [r3, #0]
 8007faa:	f000 fd4d 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8007fae:	4604      	mov	r4, r0
 8007fb0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007fb4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007fb8:	4ae6      	ldr	r2, [pc, #920]	; (8008354 <_ZN3jlb5GraphC1Ev+0x2d94>)
 8007fba:	8812      	ldrh	r2, [r2, #0]
 8007fbc:	801a      	strh	r2, [r3, #0]
 8007fbe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007fc2:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8007fc6:	f607 2204 	addw	r2, r7, #2564	; 0xa04
 8007fca:	601a      	str	r2, [r3, #0]
 8007fcc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007fd0:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8007fd4:	2202      	movs	r2, #2
 8007fd6:	605a      	str	r2, [r3, #4]
 8007fd8:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f01d fc6a 	bl	80258b6 <_ZNSaIcEC1Ev>
 8007fe2:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8007fe6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007fea:	f5a2 721b 	sub.w	r2, r2, #620	; 0x26c
 8007fee:	f507 601f 	add.w	r0, r7, #2544	; 0x9f0
 8007ff2:	ca06      	ldmia	r2, {r1, r2}
 8007ff4:	f005 fa66 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007ff8:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8007ffc:	ed9f 0ad6 	vldr	s0, [pc, #856]	; 8008358 <_ZN3jlb5GraphC1Ev+0x2d98>
 8008000:	2202      	movs	r2, #2
 8008002:	2151      	movs	r1, #81	; 0x51
 8008004:	4620      	mov	r0, r4
 8008006:	f7fd fa59 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800800a:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 800800e:	4618      	mov	r0, r3
 8008010:	f005 f94a 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8008014:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8008018:	4618      	mov	r0, r3
 800801a:	f01d fc4e 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('M', Direction::RIGHT, {'N', 'S'}, QUARTER_CIRCLE);
 800801e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008022:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8008026:	2152      	movs	r1, #82	; 0x52
 8008028:	6818      	ldr	r0, [r3, #0]
 800802a:	f000 fd0d 	bl	8008a48 <_ZN3jlb5GraphixEc>
 800802e:	4604      	mov	r4, r0
 8008030:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008034:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8008038:	4ac6      	ldr	r2, [pc, #792]	; (8008354 <_ZN3jlb5GraphC1Ev+0x2d94>)
 800803a:	8812      	ldrh	r2, [r2, #0]
 800803c:	801a      	strh	r2, [r3, #0]
 800803e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008042:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8008046:	f507 6222 	add.w	r2, r7, #2592	; 0xa20
 800804a:	601a      	str	r2, [r3, #0]
 800804c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008050:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8008054:	2202      	movs	r2, #2
 8008056:	605a      	str	r2, [r3, #4]
 8008058:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 800805c:	4618      	mov	r0, r3
 800805e:	f01d fc2a 	bl	80258b6 <_ZNSaIcEC1Ev>
 8008062:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 8008066:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800806a:	f5a2 7214 	sub.w	r2, r2, #592	; 0x250
 800806e:	f607 200c 	addw	r0, r7, #2572	; 0xa0c
 8008072:	ca06      	ldmia	r2, {r1, r2}
 8008074:	f005 fa26 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008078:	f607 230c 	addw	r3, r7, #2572	; 0xa0c
 800807c:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8008364 <_ZN3jlb5GraphC1Ev+0x2da4>
 8008080:	2201      	movs	r2, #1
 8008082:	214d      	movs	r1, #77	; 0x4d
 8008084:	4620      	mov	r0, r4
 8008086:	f7fd fa19 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800808a:	f607 230c 	addw	r3, r7, #2572	; 0xa0c
 800808e:	4618      	mov	r0, r3
 8008090:	f005 f90a 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8008094:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 8008098:	4618      	mov	r0, r3
 800809a:	f01d fc0e 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('N', Direction::LEFT, {'M', 'Q'}, QUARTER_CIRCLE);
 800809e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80080a2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80080a6:	2152      	movs	r1, #82	; 0x52
 80080a8:	6818      	ldr	r0, [r3, #0]
 80080aa:	f000 fccd 	bl	8008a48 <_ZN3jlb5GraphixEc>
 80080ae:	4604      	mov	r4, r0
 80080b0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80080b4:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80080b8:	4aa8      	ldr	r2, [pc, #672]	; (800835c <_ZN3jlb5GraphC1Ev+0x2d9c>)
 80080ba:	8812      	ldrh	r2, [r2, #0]
 80080bc:	801a      	strh	r2, [r3, #0]
 80080be:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80080c2:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80080c6:	f607 223c 	addw	r2, r7, #2620	; 0xa3c
 80080ca:	601a      	str	r2, [r3, #0]
 80080cc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80080d0:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80080d4:	2202      	movs	r2, #2
 80080d6:	605a      	str	r2, [r3, #4]
 80080d8:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80080dc:	4618      	mov	r0, r3
 80080de:	f01d fbea 	bl	80258b6 <_ZNSaIcEC1Ev>
 80080e2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80080e6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80080ea:	f5a2 720d 	sub.w	r2, r2, #564	; 0x234
 80080ee:	f607 2028 	addw	r0, r7, #2600	; 0xa28
 80080f2:	ca06      	ldmia	r2, {r1, r2}
 80080f4:	f005 f9e6 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80080f8:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 80080fc:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8008364 <_ZN3jlb5GraphC1Ev+0x2da4>
 8008100:	2200      	movs	r2, #0
 8008102:	214e      	movs	r1, #78	; 0x4e
 8008104:	4620      	mov	r0, r4
 8008106:	f7fd f9d9 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800810a:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 800810e:	4618      	mov	r0, r3
 8008110:	f005 f8ca 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8008114:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8008118:	4618      	mov	r0, r3
 800811a:	f01d fbce 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('S', Direction::STRAIGHT, {'M', 'Q'}, UNIT);
 800811e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008122:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8008126:	2152      	movs	r1, #82	; 0x52
 8008128:	6818      	ldr	r0, [r3, #0]
 800812a:	f000 fc8d 	bl	8008a48 <_ZN3jlb5GraphixEc>
 800812e:	4604      	mov	r4, r0
 8008130:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008134:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8008138:	4a88      	ldr	r2, [pc, #544]	; (800835c <_ZN3jlb5GraphC1Ev+0x2d9c>)
 800813a:	8812      	ldrh	r2, [r2, #0]
 800813c:	801a      	strh	r2, [r3, #0]
 800813e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008142:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8008146:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800814a:	601a      	str	r2, [r3, #0]
 800814c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008150:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8008154:	2202      	movs	r2, #2
 8008156:	605a      	str	r2, [r3, #4]
 8008158:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 800815c:	4618      	mov	r0, r3
 800815e:	f01d fbaa 	bl	80258b6 <_ZNSaIcEC1Ev>
 8008162:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 8008166:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800816a:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 800816e:	f607 2044 	addw	r0, r7, #2628	; 0xa44
 8008172:	ca06      	ldmia	r2, {r1, r2}
 8008174:	f005 f9a6 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008178:	f607 2344 	addw	r3, r7, #2628	; 0xa44
 800817c:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8008358 <_ZN3jlb5GraphC1Ev+0x2d98>
 8008180:	2202      	movs	r2, #2
 8008182:	2153      	movs	r1, #83	; 0x53
 8008184:	4620      	mov	r0, r4
 8008186:	f7fd f999 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800818a:	f607 2344 	addw	r3, r7, #2628	; 0xa44
 800818e:	4618      	mov	r0, r3
 8008190:	f005 f88a 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8008194:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 8008198:	4618      	mov	r0, r3
 800819a:	f01d fb8e 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('R', Direction::STRAIGHT, {'T'}, UNIT);
 800819e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80081a2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80081a6:	2153      	movs	r1, #83	; 0x53
 80081a8:	6818      	ldr	r0, [r3, #0]
 80081aa:	f000 fc4d 	bl	8008a48 <_ZN3jlb5GraphixEc>
 80081ae:	4604      	mov	r4, r0
 80081b0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80081b4:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80081b8:	2254      	movs	r2, #84	; 0x54
 80081ba:	701a      	strb	r2, [r3, #0]
 80081bc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80081c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80081c4:	f607 2274 	addw	r2, r7, #2676	; 0xa74
 80081c8:	601a      	str	r2, [r3, #0]
 80081ca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80081ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80081d2:	2201      	movs	r2, #1
 80081d4:	605a      	str	r2, [r3, #4]
 80081d6:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80081da:	4618      	mov	r0, r3
 80081dc:	f01d fb6b 	bl	80258b6 <_ZNSaIcEC1Ev>
 80081e0:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80081e4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80081e8:	f5a2 72fe 	sub.w	r2, r2, #508	; 0x1fc
 80081ec:	f507 6026 	add.w	r0, r7, #2656	; 0xa60
 80081f0:	ca06      	ldmia	r2, {r1, r2}
 80081f2:	f005 f967 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80081f6:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80081fa:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8008358 <_ZN3jlb5GraphC1Ev+0x2d98>
 80081fe:	2202      	movs	r2, #2
 8008200:	2152      	movs	r1, #82	; 0x52
 8008202:	4620      	mov	r0, r4
 8008204:	f7fd f95a 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008208:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 800820c:	4618      	mov	r0, r3
 800820e:	f005 f84b 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8008212:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8008216:	4618      	mov	r0, r3
 8008218:	f01d fb4f 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('N', Direction::STRAIGHT, {'V', 'W'}, UNIT);
 800821c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008220:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8008224:	2153      	movs	r1, #83	; 0x53
 8008226:	6818      	ldr	r0, [r3, #0]
 8008228:	f000 fc0e 	bl	8008a48 <_ZN3jlb5GraphixEc>
 800822c:	4604      	mov	r4, r0
 800822e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008232:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8008236:	4a4a      	ldr	r2, [pc, #296]	; (8008360 <_ZN3jlb5GraphC1Ev+0x2da0>)
 8008238:	8812      	ldrh	r2, [r2, #0]
 800823a:	801a      	strh	r2, [r3, #0]
 800823c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008240:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8008244:	f507 6229 	add.w	r2, r7, #2704	; 0xa90
 8008248:	601a      	str	r2, [r3, #0]
 800824a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800824e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8008252:	2202      	movs	r2, #2
 8008254:	605a      	str	r2, [r3, #4]
 8008256:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 800825a:	4618      	mov	r0, r3
 800825c:	f01d fb2b 	bl	80258b6 <_ZNSaIcEC1Ev>
 8008260:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 8008264:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8008268:	f5a2 72f0 	sub.w	r2, r2, #480	; 0x1e0
 800826c:	f607 207c 	addw	r0, r7, #2684	; 0xa7c
 8008270:	ca06      	ldmia	r2, {r1, r2}
 8008272:	f005 f927 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008276:	f607 237c 	addw	r3, r7, #2684	; 0xa7c
 800827a:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8008358 <_ZN3jlb5GraphC1Ev+0x2d98>
 800827e:	2202      	movs	r2, #2
 8008280:	214e      	movs	r1, #78	; 0x4e
 8008282:	4620      	mov	r0, r4
 8008284:	f7fd f91a 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008288:	f607 237c 	addw	r3, r7, #2684	; 0xa7c
 800828c:	4618      	mov	r0, r3
 800828e:	f005 f80b 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8008292:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 8008296:	4618      	mov	r0, r3
 8008298:	f01d fb0f 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('T', Direction::STRAIGHT, {'R'}, UNIT);
 800829c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80082a0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80082a4:	2153      	movs	r1, #83	; 0x53
 80082a6:	6818      	ldr	r0, [r3, #0]
 80082a8:	f000 fbce 	bl	8008a48 <_ZN3jlb5GraphixEc>
 80082ac:	4604      	mov	r4, r0
 80082ae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80082b2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80082b6:	2252      	movs	r2, #82	; 0x52
 80082b8:	701a      	strb	r2, [r3, #0]
 80082ba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80082be:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80082c2:	f607 22ac 	addw	r2, r7, #2732	; 0xaac
 80082c6:	601a      	str	r2, [r3, #0]
 80082c8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80082cc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80082d0:	2201      	movs	r2, #1
 80082d2:	605a      	str	r2, [r3, #4]
 80082d4:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80082d8:	4618      	mov	r0, r3
 80082da:	f01d faec 	bl	80258b6 <_ZNSaIcEC1Ev>
 80082de:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80082e2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80082e6:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 80082ea:	f607 2098 	addw	r0, r7, #2712	; 0xa98
 80082ee:	ca06      	ldmia	r2, {r1, r2}
 80082f0:	f005 f8e8 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80082f4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80082f8:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8008358 <_ZN3jlb5GraphC1Ev+0x2d98>
 80082fc:	2202      	movs	r2, #2
 80082fe:	2154      	movs	r1, #84	; 0x54
 8008300:	4620      	mov	r0, r4
 8008302:	f7fd f8db 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008306:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800830a:	4618      	mov	r0, r3
 800830c:	f004 ffcc 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8008310:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8008314:	4618      	mov	r0, r3
 8008316:	f01d fad0 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('W', Direction::LEFT, {'N'}, QUARTER_CIRCLE);
 800831a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800831e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8008322:	2153      	movs	r1, #83	; 0x53
 8008324:	6818      	ldr	r0, [r3, #0]
 8008326:	f000 fb8f 	bl	8008a48 <_ZN3jlb5GraphixEc>
 800832a:	4604      	mov	r4, r0
 800832c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008330:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8008334:	224e      	movs	r2, #78	; 0x4e
 8008336:	701a      	strb	r2, [r3, #0]
 8008338:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800833c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8008340:	f607 22c8 	addw	r2, r7, #2760	; 0xac8
 8008344:	601a      	str	r2, [r3, #0]
 8008346:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800834a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800834e:	2201      	movs	r2, #1
 8008350:	605a      	str	r2, [r3, #4]
 8008352:	e009      	b.n	8008368 <_ZN3jlb5GraphC1Ev+0x2da8>
 8008354:	0802970c 	.word	0x0802970c
 8008358:	3f19999a 	.word	0x3f19999a
 800835c:	08029710 	.word	0x08029710
 8008360:	08029714 	.word	0x08029714
 8008364:	3f71463a 	.word	0x3f71463a
 8008368:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 800836c:	4618      	mov	r0, r3
 800836e:	f01d faa2 	bl	80258b6 <_ZNSaIcEC1Ev>
 8008372:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 8008376:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800837a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800837e:	f607 20b4 	addw	r0, r7, #2740	; 0xab4
 8008382:	ca06      	ldmia	r2, {r1, r2}
 8008384:	f005 f89e 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008388:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 800838c:	ed1f 0a0b 	vldr	s0, [pc, #-44]	; 8008364 <_ZN3jlb5GraphC1Ev+0x2da4>
 8008390:	2200      	movs	r2, #0
 8008392:	2157      	movs	r1, #87	; 0x57
 8008394:	4620      	mov	r0, r4
 8008396:	f7fd f891 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800839a:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 800839e:	4618      	mov	r0, r3
 80083a0:	f004 ff82 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 80083a4:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 80083a8:	4618      	mov	r0, r3
 80083aa:	f01d fa86 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('V', Direction::RIGHT, {'N'}, QUARTER_CIRCLE);
 80083ae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80083b2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80083b6:	2153      	movs	r1, #83	; 0x53
 80083b8:	6818      	ldr	r0, [r3, #0]
 80083ba:	f000 fb45 	bl	8008a48 <_ZN3jlb5GraphixEc>
 80083be:	4604      	mov	r4, r0
 80083c0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80083c4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80083c8:	224e      	movs	r2, #78	; 0x4e
 80083ca:	701a      	strb	r2, [r3, #0]
 80083cc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80083d0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80083d4:	f607 22e4 	addw	r2, r7, #2788	; 0xae4
 80083d8:	601a      	str	r2, [r3, #0]
 80083da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80083de:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80083e2:	2201      	movs	r2, #1
 80083e4:	605a      	str	r2, [r3, #4]
 80083e6:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 80083ea:	4618      	mov	r0, r3
 80083ec:	f01d fa63 	bl	80258b6 <_ZNSaIcEC1Ev>
 80083f0:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 80083f4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80083f8:	f5a2 72c6 	sub.w	r2, r2, #396	; 0x18c
 80083fc:	f507 602d 	add.w	r0, r7, #2768	; 0xad0
 8008400:	ca06      	ldmia	r2, {r1, r2}
 8008402:	f005 f85f 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008406:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 800840a:	ed1f 0a2a 	vldr	s0, [pc, #-168]	; 8008364 <_ZN3jlb5GraphC1Ev+0x2da4>
 800840e:	2201      	movs	r2, #1
 8008410:	2156      	movs	r1, #86	; 0x56
 8008412:	4620      	mov	r0, r4
 8008414:	f7fd f852 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008418:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 800841c:	4618      	mov	r0, r3
 800841e:	f004 ff43 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8008422:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8008426:	4618      	mov	r0, r3
 8008428:	f01d fa47 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('S', Direction::STRAIGHT, {'O', 'U'}, UNIT);
 800842c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008430:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8008434:	2154      	movs	r1, #84	; 0x54
 8008436:	6818      	ldr	r0, [r3, #0]
 8008438:	f000 fb06 	bl	8008a48 <_ZN3jlb5GraphixEc>
 800843c:	4604      	mov	r4, r0
 800843e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008442:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8008446:	4ae9      	ldr	r2, [pc, #932]	; (80087ec <_ZN3jlb5GraphC1Ev+0x322c>)
 8008448:	8812      	ldrh	r2, [r2, #0]
 800844a:	801a      	strh	r2, [r3, #0]
 800844c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008450:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8008454:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8008458:	601a      	str	r2, [r3, #0]
 800845a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800845e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8008462:	2202      	movs	r2, #2
 8008464:	605a      	str	r2, [r3, #4]
 8008466:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 800846a:	4618      	mov	r0, r3
 800846c:	f01d fa23 	bl	80258b6 <_ZNSaIcEC1Ev>
 8008470:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 8008474:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8008478:	f5a2 72b8 	sub.w	r2, r2, #368	; 0x170
 800847c:	f607 20ec 	addw	r0, r7, #2796	; 0xaec
 8008480:	ca06      	ldmia	r2, {r1, r2}
 8008482:	f005 f81f 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008486:	f607 23ec 	addw	r3, r7, #2796	; 0xaec
 800848a:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 80087f0 <_ZN3jlb5GraphC1Ev+0x3230>
 800848e:	2202      	movs	r2, #2
 8008490:	2153      	movs	r1, #83	; 0x53
 8008492:	4620      	mov	r0, r4
 8008494:	f7fd f812 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008498:	f607 23ec 	addw	r3, r7, #2796	; 0xaec
 800849c:	4618      	mov	r0, r3
 800849e:	f004 ff03 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 80084a2:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 80084a6:	4618      	mov	r0, r3
 80084a8:	f01d fa07 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('N', Direction::RIGHT, {'O', 'U'}, QUARTER_CIRCLE);
 80084ac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80084b0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80084b4:	2154      	movs	r1, #84	; 0x54
 80084b6:	6818      	ldr	r0, [r3, #0]
 80084b8:	f000 fac6 	bl	8008a48 <_ZN3jlb5GraphixEc>
 80084bc:	4604      	mov	r4, r0
 80084be:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80084c2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80084c6:	4ac9      	ldr	r2, [pc, #804]	; (80087ec <_ZN3jlb5GraphC1Ev+0x322c>)
 80084c8:	8812      	ldrh	r2, [r2, #0]
 80084ca:	801a      	strh	r2, [r3, #0]
 80084cc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80084d0:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80084d4:	f607 321c 	addw	r2, r7, #2844	; 0xb1c
 80084d8:	601a      	str	r2, [r3, #0]
 80084da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80084de:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80084e2:	2202      	movs	r2, #2
 80084e4:	605a      	str	r2, [r3, #4]
 80084e6:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80084ea:	4618      	mov	r0, r3
 80084ec:	f01d f9e3 	bl	80258b6 <_ZNSaIcEC1Ev>
 80084f0:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80084f4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80084f8:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 80084fc:	f607 3008 	addw	r0, r7, #2824	; 0xb08
 8008500:	ca06      	ldmia	r2, {r1, r2}
 8008502:	f004 ffdf 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008506:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800850a:	ed9f 0abd 	vldr	s0, [pc, #756]	; 8008800 <_ZN3jlb5GraphC1Ev+0x3240>
 800850e:	2201      	movs	r2, #1
 8008510:	214e      	movs	r1, #78	; 0x4e
 8008512:	4620      	mov	r0, r4
 8008514:	f7fc ffd2 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008518:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800851c:	4618      	mov	r0, r3
 800851e:	f004 fec3 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8008522:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8008526:	4618      	mov	r0, r3
 8008528:	f01d f9c7 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('O', Direction::LEFT, {'N', 'S'}, QUARTER_CIRCLE);
 800852c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008530:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8008534:	2154      	movs	r1, #84	; 0x54
 8008536:	6818      	ldr	r0, [r3, #0]
 8008538:	f000 fa86 	bl	8008a48 <_ZN3jlb5GraphixEc>
 800853c:	4604      	mov	r4, r0
 800853e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008542:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008546:	4aab      	ldr	r2, [pc, #684]	; (80087f4 <_ZN3jlb5GraphC1Ev+0x3234>)
 8008548:	8812      	ldrh	r2, [r2, #0]
 800854a:	801a      	strh	r2, [r3, #0]
 800854c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008550:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008554:	f607 3238 	addw	r2, r7, #2872	; 0xb38
 8008558:	601a      	str	r2, [r3, #0]
 800855a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800855e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008562:	2202      	movs	r2, #2
 8008564:	605a      	str	r2, [r3, #4]
 8008566:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 800856a:	4618      	mov	r0, r3
 800856c:	f01d f9a3 	bl	80258b6 <_ZNSaIcEC1Ev>
 8008570:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 8008574:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8008578:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800857c:	f607 3024 	addw	r0, r7, #2852	; 0xb24
 8008580:	ca06      	ldmia	r2, {r1, r2}
 8008582:	f004 ff9f 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008586:	f607 3324 	addw	r3, r7, #2852	; 0xb24
 800858a:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8008800 <_ZN3jlb5GraphC1Ev+0x3240>
 800858e:	2200      	movs	r2, #0
 8008590:	214f      	movs	r1, #79	; 0x4f
 8008592:	4620      	mov	r0, r4
 8008594:	f7fc ff92 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008598:	f607 3324 	addw	r3, r7, #2852	; 0xb24
 800859c:	4618      	mov	r0, r3
 800859e:	f004 fe83 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 80085a2:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 80085a6:	4618      	mov	r0, r3
 80085a8:	f01d f987 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('U', Direction::STRAIGHT, {'N', 'S'}, 2.0f * UNIT);
 80085ac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80085b0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80085b4:	2154      	movs	r1, #84	; 0x54
 80085b6:	6818      	ldr	r0, [r3, #0]
 80085b8:	f000 fa46 	bl	8008a48 <_ZN3jlb5GraphixEc>
 80085bc:	4604      	mov	r4, r0
 80085be:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80085c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80085c6:	4a8b      	ldr	r2, [pc, #556]	; (80087f4 <_ZN3jlb5GraphC1Ev+0x3234>)
 80085c8:	8812      	ldrh	r2, [r2, #0]
 80085ca:	801a      	strh	r2, [r3, #0]
 80085cc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80085d0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80085d4:	f607 3254 	addw	r2, r7, #2900	; 0xb54
 80085d8:	601a      	str	r2, [r3, #0]
 80085da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80085de:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80085e2:	2202      	movs	r2, #2
 80085e4:	605a      	str	r2, [r3, #4]
 80085e6:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 80085ea:	4618      	mov	r0, r3
 80085ec:	f01d f963 	bl	80258b6 <_ZNSaIcEC1Ev>
 80085f0:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 80085f4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80085f8:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 80085fc:	f507 6034 	add.w	r0, r7, #2880	; 0xb40
 8008600:	ca06      	ldmia	r2, {r1, r2}
 8008602:	f004 ff5f 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008606:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800860a:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 80087fc <_ZN3jlb5GraphC1Ev+0x323c>
 800860e:	2202      	movs	r2, #2
 8008610:	2155      	movs	r1, #85	; 0x55
 8008612:	4620      	mov	r0, r4
 8008614:	f7fc ff52 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008618:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800861c:	4618      	mov	r0, r3
 800861e:	f004 fe43 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8008622:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8008626:	4618      	mov	r0, r3
 8008628:	f01d f947 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('U').add_edge('T', Direction::STRAIGHT, {'U'}, 2.0f * UNIT);
 800862c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008630:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8008634:	2155      	movs	r1, #85	; 0x55
 8008636:	6818      	ldr	r0, [r3, #0]
 8008638:	f000 fa06 	bl	8008a48 <_ZN3jlb5GraphixEc>
 800863c:	4604      	mov	r4, r0
 800863e:	2355      	movs	r3, #85	; 0x55
 8008640:	f887 3b70 	strb.w	r3, [r7, #2928]	; 0xb70
 8008644:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008648:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800864c:	f507 6237 	add.w	r2, r7, #2928	; 0xb70
 8008650:	601a      	str	r2, [r3, #0]
 8008652:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008656:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800865a:	2201      	movs	r2, #1
 800865c:	605a      	str	r2, [r3, #4]
 800865e:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 8008662:	4618      	mov	r0, r3
 8008664:	f01d f927 	bl	80258b6 <_ZNSaIcEC1Ev>
 8008668:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 800866c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8008670:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8008674:	f607 305c 	addw	r0, r7, #2908	; 0xb5c
 8008678:	ca06      	ldmia	r2, {r1, r2}
 800867a:	f004 ff23 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800867e:	f607 335c 	addw	r3, r7, #2908	; 0xb5c
 8008682:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 80087fc <_ZN3jlb5GraphC1Ev+0x323c>
 8008686:	2202      	movs	r2, #2
 8008688:	2154      	movs	r1, #84	; 0x54
 800868a:	4620      	mov	r0, r4
 800868c:	f7fc ff16 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008690:	f607 335c 	addw	r3, r7, #2908	; 0xb5c
 8008694:	4618      	mov	r0, r3
 8008696:	f004 fe07 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 800869a:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 800869e:	4618      	mov	r0, r3
 80086a0:	f01d f90b 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('U').add_edge('O', Direction::RIGHT, {'U'}, QUARTER_CIRCLE);
 80086a4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80086a8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80086ac:	2155      	movs	r1, #85	; 0x55
 80086ae:	6818      	ldr	r0, [r3, #0]
 80086b0:	f000 f9ca 	bl	8008a48 <_ZN3jlb5GraphixEc>
 80086b4:	4604      	mov	r4, r0
 80086b6:	2355      	movs	r3, #85	; 0x55
 80086b8:	f887 3b8c 	strb.w	r3, [r7, #2956]	; 0xb8c
 80086bc:	f607 338c 	addw	r3, r7, #2956	; 0xb8c
 80086c0:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 80086c4:	2301      	movs	r3, #1
 80086c6:	f8c7 3b88 	str.w	r3, [r7, #2952]	; 0xb88
 80086ca:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 80086ce:	4618      	mov	r0, r3
 80086d0:	f01d f8f1 	bl	80258b6 <_ZNSaIcEC1Ev>
 80086d4:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 80086d8:	f607 3078 	addw	r0, r7, #2936	; 0xb78
 80086dc:	f607 3284 	addw	r2, r7, #2948	; 0xb84
 80086e0:	ca06      	ldmia	r2, {r1, r2}
 80086e2:	f004 feef 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80086e6:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80086ea:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8008800 <_ZN3jlb5GraphC1Ev+0x3240>
 80086ee:	2201      	movs	r2, #1
 80086f0:	214f      	movs	r1, #79	; 0x4f
 80086f2:	4620      	mov	r0, r4
 80086f4:	f7fc fee2 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80086f8:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80086fc:	4618      	mov	r0, r3
 80086fe:	f004 fdd3 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8008702:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8008706:	4618      	mov	r0, r3
 8008708:	f01d f8d7 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('Q', Direction::RIGHT, {'S', 'W'}, QUARTER_CIRCLE);
 800870c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008710:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8008714:	2156      	movs	r1, #86	; 0x56
 8008716:	6818      	ldr	r0, [r3, #0]
 8008718:	f000 f996 	bl	8008a48 <_ZN3jlb5GraphixEc>
 800871c:	4604      	mov	r4, r0
 800871e:	4b36      	ldr	r3, [pc, #216]	; (80087f8 <_ZN3jlb5GraphC1Ev+0x3238>)
 8008720:	881b      	ldrh	r3, [r3, #0]
 8008722:	f8a7 3ba8 	strh.w	r3, [r7, #2984]	; 0xba8
 8008726:	f607 33a8 	addw	r3, r7, #2984	; 0xba8
 800872a:	f8c7 3ba0 	str.w	r3, [r7, #2976]	; 0xba0
 800872e:	2302      	movs	r3, #2
 8008730:	f8c7 3ba4 	str.w	r3, [r7, #2980]	; 0xba4
 8008734:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8008738:	4618      	mov	r0, r3
 800873a:	f01d f8bc 	bl	80258b6 <_ZNSaIcEC1Ev>
 800873e:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8008742:	f607 3094 	addw	r0, r7, #2964	; 0xb94
 8008746:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800874a:	ca06      	ldmia	r2, {r1, r2}
 800874c:	f004 feba 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008750:	f607 3394 	addw	r3, r7, #2964	; 0xb94
 8008754:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8008800 <_ZN3jlb5GraphC1Ev+0x3240>
 8008758:	2201      	movs	r2, #1
 800875a:	2151      	movs	r1, #81	; 0x51
 800875c:	4620      	mov	r0, r4
 800875e:	f7fc fead 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008762:	f607 3394 	addw	r3, r7, #2964	; 0xb94
 8008766:	4618      	mov	r0, r3
 8008768:	f004 fd9e 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 800876c:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8008770:	4618      	mov	r0, r3
 8008772:	f01d f8a2 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('S', Direction::LEFT, {'Q'}, QUARTER_CIRCLE);
 8008776:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800877a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800877e:	2156      	movs	r1, #86	; 0x56
 8008780:	6818      	ldr	r0, [r3, #0]
 8008782:	f000 f961 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8008786:	4604      	mov	r4, r0
 8008788:	2351      	movs	r3, #81	; 0x51
 800878a:	f887 3bc4 	strb.w	r3, [r7, #3012]	; 0xbc4
 800878e:	f607 33c4 	addw	r3, r7, #3012	; 0xbc4
 8008792:	f8c7 3bbc 	str.w	r3, [r7, #3004]	; 0xbbc
 8008796:	2301      	movs	r3, #1
 8008798:	f8c7 3bc0 	str.w	r3, [r7, #3008]	; 0xbc0
 800879c:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 80087a0:	4618      	mov	r0, r3
 80087a2:	f01d f888 	bl	80258b6 <_ZNSaIcEC1Ev>
 80087a6:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 80087aa:	f507 603b 	add.w	r0, r7, #2992	; 0xbb0
 80087ae:	f607 32bc 	addw	r2, r7, #3004	; 0xbbc
 80087b2:	ca06      	ldmia	r2, {r1, r2}
 80087b4:	f004 fe86 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80087b8:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 80087bc:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8008800 <_ZN3jlb5GraphC1Ev+0x3240>
 80087c0:	2200      	movs	r2, #0
 80087c2:	2153      	movs	r1, #83	; 0x53
 80087c4:	4620      	mov	r0, r4
 80087c6:	f7fc fe79 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80087ca:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 80087ce:	4618      	mov	r0, r3
 80087d0:	f004 fd6a 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 80087d4:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 80087d8:	4618      	mov	r0, r3
 80087da:	f01d f86e 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('W', Direction::STRAIGHT, {'Q'}, 2.0f * UNIT);
 80087de:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80087e2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80087e6:	2156      	movs	r1, #86	; 0x56
 80087e8:	6818      	ldr	r0, [r3, #0]
 80087ea:	e00b      	b.n	8008804 <_ZN3jlb5GraphC1Ev+0x3244>
 80087ec:	08029718 	.word	0x08029718
 80087f0:	3f19999a 	.word	0x3f19999a
 80087f4:	0802970c 	.word	0x0802970c
 80087f8:	0802971c 	.word	0x0802971c
 80087fc:	3f99999a 	.word	0x3f99999a
 8008800:	3f71463a 	.word	0x3f71463a
 8008804:	f000 f920 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8008808:	4604      	mov	r4, r0
 800880a:	2351      	movs	r3, #81	; 0x51
 800880c:	f887 3be0 	strb.w	r3, [r7, #3040]	; 0xbe0
 8008810:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 8008814:	f8c7 3bd8 	str.w	r3, [r7, #3032]	; 0xbd8
 8008818:	2301      	movs	r3, #1
 800881a:	f8c7 3bdc 	str.w	r3, [r7, #3036]	; 0xbdc
 800881e:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 8008822:	4618      	mov	r0, r3
 8008824:	f01d f847 	bl	80258b6 <_ZNSaIcEC1Ev>
 8008828:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 800882c:	f607 30cc 	addw	r0, r7, #3020	; 0xbcc
 8008830:	f607 32d8 	addw	r2, r7, #3032	; 0xbd8
 8008834:	ca06      	ldmia	r2, {r1, r2}
 8008836:	f004 fe45 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800883a:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 800883e:	ed1f 0a11 	vldr	s0, [pc, #-68]	; 80087fc <_ZN3jlb5GraphC1Ev+0x323c>
 8008842:	2202      	movs	r2, #2
 8008844:	2157      	movs	r1, #87	; 0x57
 8008846:	4620      	mov	r0, r4
 8008848:	f7fc fe38 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800884c:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8008850:	4618      	mov	r0, r3
 8008852:	f004 fd29 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8008856:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 800885a:	4618      	mov	r0, r3
 800885c:	f01d f82d 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('V', Direction::STRAIGHT, {'O'}, 2.0f * UNIT);
 8008860:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008864:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8008868:	2157      	movs	r1, #87	; 0x57
 800886a:	6818      	ldr	r0, [r3, #0]
 800886c:	f000 f8ec 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8008870:	4604      	mov	r4, r0
 8008872:	234f      	movs	r3, #79	; 0x4f
 8008874:	f887 3bfc 	strb.w	r3, [r7, #3068]	; 0xbfc
 8008878:	f607 33fc 	addw	r3, r7, #3068	; 0xbfc
 800887c:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
 8008880:	2301      	movs	r3, #1
 8008882:	f8c7 3bf8 	str.w	r3, [r7, #3064]	; 0xbf8
 8008886:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 800888a:	4618      	mov	r0, r3
 800888c:	f01d f813 	bl	80258b6 <_ZNSaIcEC1Ev>
 8008890:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8008894:	f607 30e8 	addw	r0, r7, #3048	; 0xbe8
 8008898:	f607 32f4 	addw	r2, r7, #3060	; 0xbf4
 800889c:	ca06      	ldmia	r2, {r1, r2}
 800889e:	f004 fe11 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80088a2:	f607 33e8 	addw	r3, r7, #3048	; 0xbe8
 80088a6:	ed1f 0a2b 	vldr	s0, [pc, #-172]	; 80087fc <_ZN3jlb5GraphC1Ev+0x323c>
 80088aa:	2202      	movs	r2, #2
 80088ac:	2156      	movs	r1, #86	; 0x56
 80088ae:	4620      	mov	r0, r4
 80088b0:	f7fc fe04 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80088b4:	f607 33e8 	addw	r3, r7, #3048	; 0xbe8
 80088b8:	4618      	mov	r0, r3
 80088ba:	f004 fcf5 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 80088be:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80088c2:	4618      	mov	r0, r3
 80088c4:	f01c fff9 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('S', Direction::RIGHT, {'O'}, QUARTER_CIRCLE);
 80088c8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80088cc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80088d0:	2157      	movs	r1, #87	; 0x57
 80088d2:	6818      	ldr	r0, [r3, #0]
 80088d4:	f000 f8b8 	bl	8008a48 <_ZN3jlb5GraphixEc>
 80088d8:	4604      	mov	r4, r0
 80088da:	234f      	movs	r3, #79	; 0x4f
 80088dc:	f887 3c18 	strb.w	r3, [r7, #3096]	; 0xc18
 80088e0:	f607 4318 	addw	r3, r7, #3096	; 0xc18
 80088e4:	f8c7 3c10 	str.w	r3, [r7, #3088]	; 0xc10
 80088e8:	2301      	movs	r3, #1
 80088ea:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
 80088ee:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 80088f2:	4618      	mov	r0, r3
 80088f4:	f01c ffdf 	bl	80258b6 <_ZNSaIcEC1Ev>
 80088f8:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 80088fc:	f607 4004 	addw	r0, r7, #3076	; 0xc04
 8008900:	f507 6241 	add.w	r2, r7, #3088	; 0xc10
 8008904:	ca06      	ldmia	r2, {r1, r2}
 8008906:	f004 fddd 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800890a:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 800890e:	ed1f 0a44 	vldr	s0, [pc, #-272]	; 8008800 <_ZN3jlb5GraphC1Ev+0x3240>
 8008912:	2201      	movs	r2, #1
 8008914:	2153      	movs	r1, #83	; 0x53
 8008916:	4620      	mov	r0, r4
 8008918:	f7fc fdd0 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800891c:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 8008920:	4618      	mov	r0, r3
 8008922:	f004 fcc1 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8008926:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 800892a:	4618      	mov	r0, r3
 800892c:	f01c ffc5 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('O', Direction::STRAIGHT, {'S', 'V'}, UNIT + QUARTER_CIRCLE);
 8008930:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008934:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8008938:	2157      	movs	r1, #87	; 0x57
 800893a:	6818      	ldr	r0, [r3, #0]
 800893c:	f000 f884 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8008940:	4604      	mov	r4, r0
 8008942:	4b35      	ldr	r3, [pc, #212]	; (8008a18 <_ZN3jlb5GraphC1Ev+0x3458>)
 8008944:	881b      	ldrh	r3, [r3, #0]
 8008946:	f8a7 3c34 	strh.w	r3, [r7, #3124]	; 0xc34
 800894a:	f607 4334 	addw	r3, r7, #3124	; 0xc34
 800894e:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 8008952:	2302      	movs	r3, #2
 8008954:	f8c7 3c30 	str.w	r3, [r7, #3120]	; 0xc30
 8008958:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800895c:	4618      	mov	r0, r3
 800895e:	f01c ffaa 	bl	80258b6 <_ZNSaIcEC1Ev>
 8008962:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8008966:	f507 6042 	add.w	r0, r7, #3104	; 0xc20
 800896a:	f607 422c 	addw	r2, r7, #3116	; 0xc2c
 800896e:	ca06      	ldmia	r2, {r1, r2}
 8008970:	f004 fda8 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008974:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8008978:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8008a1c <_ZN3jlb5GraphC1Ev+0x345c>
 800897c:	2202      	movs	r2, #2
 800897e:	214f      	movs	r1, #79	; 0x4f
 8008980:	4620      	mov	r0, r4
 8008982:	f7fc fd9b 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008986:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 800898a:	4618      	mov	r0, r3
 800898c:	f004 fc8c 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8008990:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8008994:	4618      	mov	r0, r3
 8008996:	f01c ff90 	bl	80258ba <_ZNSaIcED1Ev>
            this->operator[]('X').add_edge('Q', Direction::STRAIGHT, {'X'}, 2.5f * UNIT + QUARTER_CIRCLE);
 800899a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800899e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80089a2:	2158      	movs	r1, #88	; 0x58
 80089a4:	6818      	ldr	r0, [r3, #0]
 80089a6:	f000 f84f 	bl	8008a48 <_ZN3jlb5GraphixEc>
 80089aa:	4604      	mov	r4, r0
 80089ac:	2358      	movs	r3, #88	; 0x58
 80089ae:	f887 3c50 	strb.w	r3, [r7, #3152]	; 0xc50
 80089b2:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 80089b6:	f8c7 3c48 	str.w	r3, [r7, #3144]	; 0xc48
 80089ba:	2301      	movs	r3, #1
 80089bc:	f8c7 3c4c 	str.w	r3, [r7, #3148]	; 0xc4c
 80089c0:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 80089c4:	4618      	mov	r0, r3
 80089c6:	f01c ff76 	bl	80258b6 <_ZNSaIcEC1Ev>
 80089ca:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 80089ce:	f607 403c 	addw	r0, r7, #3132	; 0xc3c
 80089d2:	f607 4248 	addw	r2, r7, #3144	; 0xc48
 80089d6:	ca06      	ldmia	r2, {r1, r2}
 80089d8:	f004 fd74 	bl	800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80089dc:	f607 433c 	addw	r3, r7, #3132	; 0xc3c
 80089e0:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8008a20 <_ZN3jlb5GraphC1Ev+0x3460>
 80089e4:	2202      	movs	r2, #2
 80089e6:	2151      	movs	r1, #81	; 0x51
 80089e8:	4620      	mov	r0, r4
 80089ea:	f7fc fd67 	bl	80054bc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80089ee:	f607 433c 	addw	r3, r7, #3132	; 0xc3c
 80089f2:	4618      	mov	r0, r3
 80089f4:	f004 fc58 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 80089f8:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 80089fc:	4618      	mov	r0, r3
 80089fe:	f01c ff5c 	bl	80258ba <_ZNSaIcED1Ev>
        }
 8008a02:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008a06:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f607 476c 	addw	r7, r7, #3180	; 0xc6c
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd90      	pop	{r4, r7, pc}
 8008a16:	bf00      	nop
 8008a18:	08029720 	.word	0x08029720
 8008a1c:	3fc56fea 	.word	0x3fc56fea
 8008a20:	401c518f 	.word	0x401c518f

08008a24 <_ZN3jlb5GraphD1Ev>:

        ~Graph() {}
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	330c      	adds	r3, #12
 8008a30:	4618      	mov	r0, r3
 8008a32:	f004 fc39 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f004 fcef 	bl	800d41c <_ZNSt6vectorIN3jlb4NodeESaIS1_EED1Ev>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4618      	mov	r0, r3
 8008a42:	3708      	adds	r7, #8
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <_ZN3jlb5GraphixEc>:

        Node &operator[](char name)
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	460b      	mov	r3, r1
 8008a52:	70fb      	strb	r3, [r7, #3]
            if (nodes.empty()) throw std::runtime_error("Graph is empty");
            if (name < 'A' || name > 'X') throw std::runtime_error("Invalid node name");
#else
            //if (nodes.empty() || name < 'A' || name > 'X') return Node{'@', 0.0f, 0.0f};
#endif
            return nodes[static_cast<int>(name - 'A')];
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	78fb      	ldrb	r3, [r7, #3]
 8008a58:	3b41      	subs	r3, #65	; 0x41
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	4610      	mov	r0, r2
 8008a5e:	f004 fd52 	bl	800d506 <_ZNSt6vectorIN3jlb4NodeESaIS1_EEixEj>
 8008a62:	4603      	mov	r3, r0
        }
 8008a64:	4618      	mov	r0, r3
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE13_Rb_tree_implISB_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f004 fd93 	bl	800d5a0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEEED1Ev>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3708      	adds	r7, #8
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f004 fd71 	bl	800d576 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE13_Rb_tree_implISB_Lb1EEC1Ev>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4618      	mov	r0, r3
 8008a98:	3708      	adds	r7, #8
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <_ZNSt3mapIcSt4pairIfSt6vectorIS0_IciESaIS2_EEESt4lessIcESaIS0_IKcS5_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b082      	sub	sp, #8
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7ff ffeb 	bl	8008a84 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EEC1Ev>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3708      	adds	r7, #8
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <_ZNSt3mapIcSt4pairIfSt6vectorIS0_IciESaIS2_EEESt4lessIcESaIS0_IKcS5_EEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f004 fd77 	bl	800d5b6 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EED1Ev>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4618      	mov	r0, r3
 8008acc:	3708      	adds	r7, #8
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <_ZNSt14priority_queueISt4pairIfcESt6vectorIS1_SaIS1_EESt7greaterIS1_EED1Ev>:
   *  order would be different, the %priority_queue will not re-sort
   *  the elements for you.  (How could it know to do so?)
  */
  template<typename _Tp, typename _Sequence = vector<_Tp>,
	   typename _Compare  = less<typename _Sequence::value_type> >
    class priority_queue
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b082      	sub	sp, #8
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4618      	mov	r0, r3
 8008ade:	f004 fdb8 	bl	800d652 <_ZNSt6vectorISt4pairIfcESaIS1_EED1Ev>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3708      	adds	r7, #8
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4618      	mov	r0, r3
 8008af8:	370c      	adds	r7, #12
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr

08008b02 <_ZN9__gnu_cxxeqIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8008b02:	b590      	push	{r4, r7, lr}
 8008b04:	b083      	sub	sp, #12
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
 8008b0a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f7ff ffed 	bl	8008aec <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 8008b12:	4603      	mov	r3, r0
 8008b14:	681c      	ldr	r4, [r3, #0]
 8008b16:	6838      	ldr	r0, [r7, #0]
 8008b18:	f7ff ffe8 	bl	8008aec <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	429c      	cmp	r4, r3
 8008b22:	bf0c      	ite	eq
 8008b24:	2301      	moveq	r3, #1
 8008b26:	2300      	movne	r3, #0
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	370c      	adds	r7, #12
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd90      	pop	{r4, r7, pc}

08008b32 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8008b32:	b480      	push	{r7}
 8008b34:	b083      	sub	sp, #12
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
	++_M_current;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f103 0218 	add.w	r2, r3, #24
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	601a      	str	r2, [r3, #0]
	return *this;
 8008b46:	687b      	ldr	r3, [r7, #4]
      }
 8008b48:	4618      	mov	r0, r3
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4618      	mov	r0, r3
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f004 fe15 	bl	800d7a4 <_ZNSaISt4pairIciEED1Ev>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3708      	adds	r7, #8
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EEC1Ev>:
      _Vector_base() = default;
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f004 fdf8 	bl	800d784 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE12_Vector_implC1Ev>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4618      	mov	r0, r3
 8008b98:	3708      	adds	r7, #8
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <_ZNSt6vectorISt4pairIciESaIS1_EEC1Ev>:
      vector() = default;
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b082      	sub	sp, #8
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7ff ffeb 	bl	8008b84 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EEC1Ev>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIciEES2_E15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 8008bb8:	b480      	push	{r7}
 8008bba:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <_ZNSt4pairIiSt6vectorIS_IciESaIS1_EEED1Ev>:
   *  @tparam _T2  Type of second object.
   *
   *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
   */
  template<typename _T1, typename _T2>
    struct pair
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	3304      	adds	r3, #4
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f004 fe09 	bl	800d7ec <_ZNSt6vectorISt4pairIciESaIS1_EED1Ev>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3708      	adds	r7, #8
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	370c      	adds	r7, #12
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr

08008bfa <_ZNSt4pairIfSt6vectorIS_IciESaIS1_EEEaSIiS3_EENSt9enable_ifIXsrSt6__and_IJSt13is_assignableIRfOT_ES8_IRS3_OT0_EEE5valueERS4_E4typeEOS_ISA_SE_E>:
      template<typename _U1, typename _U2>
	_GLIBCXX20_CONSTEXPR
	typename enable_if<__and_<is_assignable<_T1&, _U1&&>,
				  is_assignable<_T2&, _U2&&>>::value,
			   pair&>::type
	operator=(pair<_U1, _U2>&& __p)
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b082      	sub	sp, #8
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
 8008c02:	6039      	str	r1, [r7, #0]
	{
	  first = std::forward<_U1>(__p.first);
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7ff ffec 	bl	8008be4 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	ee07 3a90 	vmov	s15, r3
 8008c14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	edc3 7a00 	vstr	s15, [r3]
	  second = std::forward<_U2>(__p.second);
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	3304      	adds	r3, #4
 8008c22:	4618      	mov	r0, r3
 8008c24:	f004 fe14 	bl	800d850 <_ZSt7forwardISt6vectorISt4pairIciESaIS2_EEEOT_RNSt16remove_referenceIS5_E4typeE>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	3304      	adds	r3, #4
 8008c2e:	4611      	mov	r1, r2
 8008c30:	4618      	mov	r0, r3
 8008c32:	f004 fe18 	bl	800d866 <_ZNSt6vectorISt4pairIciESaIS1_EEaSEOS3_>
	  return *this;
 8008c36:	687b      	ldr	r3, [r7, #4]
	}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3708      	adds	r7, #8
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <_ZNSt4pairIfSt6vectorIS_IciESaIS1_EEED1Ev>:
    struct pair
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	3304      	adds	r3, #4
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f004 fdcd 	bl	800d7ec <_ZNSt6vectorISt4pairIciESaIS1_EED1Ev>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4618      	mov	r0, r3
 8008c56:	3708      	adds	r7, #8
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <_ZNSt4pairIfSt6vectorIS_IciESaIS1_EEEaSEOS4_>:
      operator=(typename conditional<
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
	first = std::forward<first_type>(__p.first);
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f000 f83d 	bl	8008ce8 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	601a      	str	r2, [r3, #0]
	second = std::forward<second_type>(__p.second);
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	3304      	adds	r3, #4
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f004 fde8 	bl	800d850 <_ZSt7forwardISt6vectorISt4pairIciESaIS2_EEEOT_RNSt16remove_referenceIS5_E4typeE>
 8008c80:	4602      	mov	r2, r0
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	3304      	adds	r3, #4
 8008c86:	4611      	mov	r1, r2
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f004 fdec 	bl	800d866 <_ZNSt6vectorISt4pairIciESaIS1_EEaSEOS3_>
	return *this;
 8008c8e:	687b      	ldr	r3, [r7, #4]
      }
 8008c90:	4618      	mov	r0, r3
 8008c92:	3708      	adds	r7, #8
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <_ZSt3getILj0EfcEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_>:
    get(pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__get(__in); }

  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&&
    get(pair<_Tp1, _Tp2>&& __in) noexcept
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__move_get(std::move(__in)); }
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 f816 	bl	8008cd2 <_ZSt4moveIRSt4pairIfcEEONSt16remove_referenceIT_E4typeEOS4_>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f000 f805 	bl	8008cb8 <_ZNSt10__pair_getILj0EE10__move_getIfcEEOT_OSt4pairIS2_T0_E>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3708      	adds	r7, #8
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <_ZNSt10__pair_getILj0EE10__move_getIfcEEOT_OSt4pairIS2_T0_E>:
	__move_get(pair<_Tp1, _Tp2>&& __pair) noexcept
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
	{ return std::forward<_Tp1>(__pair.first); }
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f000 f810 	bl	8008ce8 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3708      	adds	r7, #8
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <_ZSt4moveIRSt4pairIfcEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8008cd2:	b480      	push	{r7}
 8008cd4:	b083      	sub	sp, #12
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4618      	mov	r0, r3
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	370c      	adds	r7, #12
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr

08008cfe <_ZSt3getILj1EfcEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_>:
    get(pair<_Tp1, _Tp2>&& __in) noexcept
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b082      	sub	sp, #8
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__move_get(std::move(__in)); }
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f7ff ffe3 	bl	8008cd2 <_ZSt4moveIRSt4pairIfcEEONSt16remove_referenceIT_E4typeEOS4_>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f000 f805 	bl	8008d1e <_ZNSt10__pair_getILj1EE10__move_getIfcEEOT0_OSt4pairIT_S2_E>
 8008d14:	4603      	mov	r3, r0
 8008d16:	4618      	mov	r0, r3
 8008d18:	3708      	adds	r7, #8
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <_ZNSt10__pair_getILj1EE10__move_getIfcEEOT0_OSt4pairIT_S2_E>:
	__move_get(pair<_Tp1, _Tp2>&& __pair) noexcept
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b082      	sub	sp, #8
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
	{ return std::forward<_Tp2>(__pair.second); }
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	3304      	adds	r3, #4
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f000 f805 	bl	8008d3a <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>
 8008d30:	4603      	mov	r3, r0
 8008d32:	4618      	mov	r0, r3
 8008d34:	3708      	adds	r7, #8
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008d3a:	b480      	push	{r7}
 8008d3c:	b083      	sub	sp, #12
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4618      	mov	r0, r3
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	370c      	adds	r7, #12
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr

08008d66 <_ZZN3jlb5Graph8DijkstraEccENKUlRKNS_4EdgeEE_clES3_>:
                // find the index of the edge connecting the last node
                if (pair.second.size() > 0)
                {
                    char  before_last_node = pair.second[pair.second.size() - 1].first;
                    auto &edges            = this->operator[](before_last_node).edges;
                    auto  it               = std::find_if(edges.begin(), edges.end(), [&vertex_id](const Edge &edge) { return edge.node == vertex_id; });
 8008d66:	b480      	push	{r7}
 8008d68:	b083      	sub	sp, #12
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
 8008d6e:	6039      	str	r1, [r7, #0]
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	781a      	ldrb	r2, [r3, #0]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	bf0c      	ite	eq
 8008d7e:	2301      	moveq	r3, #1
 8008d80:	2300      	movne	r3, #0
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	4618      	mov	r0, r3
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <_ZSt3getILj0EKcSt4pairIfSt6vectorIS1_IciESaIS3_EEEERNSt13tuple_elementIXT_ES1_IT0_T1_EE4typeERSA_>:
    get(pair<_Tp1, _Tp2>& __in) noexcept
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__get(__in); }
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f005 f8d9 	bl	800df50 <_ZNSt10__pair_getILj0EE5__getIKcSt4pairIfSt6vectorIS3_IciESaIS5_EEEEERT_RS3_IS9_T0_E>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	4618      	mov	r0, r3
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <_ZSt3getILj1EKcSt4pairIfSt6vectorIS1_IciESaIS3_EEEERNSt13tuple_elementIXT_ES1_IT0_T1_EE4typeERSA_>:
    get(pair<_Tp1, _Tp2>& __in) noexcept
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__get(__in); }
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f005 f8d8 	bl	800df66 <_ZNSt10__pair_getILj1EE5__getIKcSt4pairIfSt6vectorIS3_IciESaIS5_EEEEERT0_RS3_IT_S9_E>
 8008db6:	4603      	mov	r3, r0
 8008db8:	4618      	mov	r0, r3
 8008dba:	3708      	adds	r7, #8
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <_ZN3jlb14DijkstraResultD1Ev>:
    struct DijkstraResult
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	3304      	adds	r3, #4
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f004 fd0d 	bl	800d7ec <_ZNSt6vectorISt4pairIciESaIS1_EED1Ev>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3708      	adds	r7, #8
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <_ZN3jlb5Graph8DijkstraEcc>:
        DijkstraResult Dijkstra(char previous_node, char current_node)
 8008ddc:	b590      	push	{r4, r7, lr}
 8008dde:	ed2d 8b02 	vpush	{d8}
 8008de2:	b0d1      	sub	sp, #324	; 0x144
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 8008dea:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 8008dee:	6020      	str	r0, [r4, #0]
 8008df0:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8008df4:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8008df8:	6001      	str	r1, [r0, #0]
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008e00:	f2a3 1339 	subw	r3, r3, #313	; 0x139
 8008e04:	701a      	strb	r2, [r3, #0]
 8008e06:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008e0a:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8008e0e:	460a      	mov	r2, r1
 8008e10:	701a      	strb	r2, [r3, #0]
            collected_nodes.push_back(current_node);
 8008e12:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008e16:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	330c      	adds	r3, #12
 8008e1e:	1dba      	adds	r2, r7, #6
 8008e20:	4611      	mov	r1, r2
 8008e22:	4618      	mov	r0, r3
 8008e24:	f004 fb82 	bl	800d52c <_ZNSt6vectorIcSaIcEE9push_backERKc>
            std::map<char, std::pair<float, std::vector<std::pair<char, int>>>>                                                    result;
 8008e28:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f7ff fe36 	bl	8008a9e <_ZNSt3mapIcSt4pairIfSt6vectorIS0_IciESaIS2_EEESt4lessIcESaIS0_IKcS5_EEEC1Ev>
            std::priority_queue<std::pair<float, char>, std::vector<std::pair<float, char>>, std::greater<std::pair<float, char>>> queue;
 8008e32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008e36:	4618      	mov	r0, r3
 8008e38:	f004 fbf8 	bl	800d62c <_ZNSt14priority_queueISt4pairIfcESt6vectorIS1_SaIS1_EESt7greaterIS1_EEC1IS4_vEEv>
            const auto                                                                                                            &start_vertex = this->operator[](current_node);
 8008e3c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008e40:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8008e44:	781a      	ldrb	r2, [r3, #0]
 8008e46:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008e4a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008e4e:	4611      	mov	r1, r2
 8008e50:	6818      	ldr	r0, [r3, #0]
 8008e52:	f7ff fdf9 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8008e56:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
            for (auto &vertex : nodes)
 8008e5a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008e5e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8008e68:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8008e6c:	f004 fc0c 	bl	800d688 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE5beginEv>
 8008e70:	4602      	mov	r2, r0
 8008e72:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008e76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e7a:	601a      	str	r2, [r3, #0]
 8008e7c:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8008e80:	f004 fc12 	bl	800d6a8 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>
 8008e84:	4602      	mov	r2, r0
 8008e86:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008e8a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008e8e:	601a      	str	r2, [r3, #0]
 8008e90:	e076      	b.n	8008f80 <_ZN3jlb5Graph8DijkstraEcc+0x1a4>
 8008e92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7ff fe5c 	bl	8008b54 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEdeEv>
 8008e9c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
                if (vertex.name == start_vertex.name) { result[vertex.name] = std::make_pair(0, std::vector<std::pair<char, int>>{}); }
 8008ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ea4:	781a      	ldrb	r2, [r3, #0]
 8008ea6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d12f      	bne.n	8008f10 <_ZN3jlb5Graph8DijkstraEcc+0x134>
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	67bb      	str	r3, [r7, #120]	; 0x78
 8008eb4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008eb8:	2200      	movs	r2, #0
 8008eba:	601a      	str	r2, [r3, #0]
 8008ebc:	605a      	str	r2, [r3, #4]
 8008ebe:	609a      	str	r2, [r3, #8]
 8008ec0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7ff fe6a 	bl	8008b9e <_ZNSt6vectorISt4pairIciESaIS1_EEC1Ev>
 8008eca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008ece:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8008ed2:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f004 fca3 	bl	800d822 <_ZSt9make_pairIiSt6vectorISt4pairIciESaIS2_EEES1_INSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS5_INS6_IT0_E4typeEE6__typeEEOS7_OSC_>
 8008edc:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8008ee0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008ee4:	4611      	mov	r1, r2
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f004 fbf0 	bl	800d6cc <_ZNSt3mapIcSt4pairIfSt6vectorIS0_IciESaIS2_EEESt4lessIcESaIS0_IKcS5_EEEixERS8_>
 8008eec:	4602      	mov	r2, r0
 8008eee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	4610      	mov	r0, r2
 8008ef6:	f7ff fe80 	bl	8008bfa <_ZNSt4pairIfSt6vectorIS_IciESaIS1_EEEaSIiS3_EENSt9enable_ifIXsrSt6__and_IJSt13is_assignableIRfOT_ES8_IRS3_OT0_EEE5valueERS4_E4typeEOS_ISA_SE_E>
 8008efa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7ff fe62 	bl	8008bc8 <_ZNSt4pairIiSt6vectorIS_IciESaIS1_EEED1Ev>
 8008f04:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f004 fc6f 	bl	800d7ec <_ZNSt6vectorISt4pairIciESaIS1_EED1Ev>
 8008f0e:	e032      	b.n	8008f76 <_ZN3jlb5Graph8DijkstraEcc+0x19a>
                else { result[vertex.name] = std::make_pair(std::numeric_limits<float>::infinity(), std::vector<std::pair<char, int>>{}); }
 8008f10:	f7fb fbce 	bl	80046b0 <_ZNSt14numeric_limitsIfE8infinityEv>
 8008f14:	eef0 7a40 	vmov.f32	s15, s0
 8008f18:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
 8008f1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008f20:	2200      	movs	r2, #0
 8008f22:	601a      	str	r2, [r3, #0]
 8008f24:	605a      	str	r2, [r3, #4]
 8008f26:	609a      	str	r2, [r3, #8]
 8008f28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7ff fe36 	bl	8008b9e <_ZNSt6vectorISt4pairIciESaIS1_EEC1Ev>
 8008f32:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008f36:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8008f3a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f004 fca6 	bl	800d890 <_ZSt9make_pairIfSt6vectorISt4pairIciESaIS2_EEES1_INSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS5_INS6_IT0_E4typeEE6__typeEEOS7_OSC_>
 8008f44:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8008f48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008f4c:	4611      	mov	r1, r2
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f004 fbbc 	bl	800d6cc <_ZNSt3mapIcSt4pairIfSt6vectorIS0_IciESaIS2_EEESt4lessIcESaIS0_IKcS5_EEEixERS8_>
 8008f54:	4602      	mov	r2, r0
 8008f56:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	4610      	mov	r0, r2
 8008f5e:	f7ff fe7d 	bl	8008c5c <_ZNSt4pairIfSt6vectorIS_IciESaIS1_EEEaSEOS4_>
 8008f62:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7ff fe6a 	bl	8008c40 <_ZNSt4pairIfSt6vectorIS_IciESaIS1_EEED1Ev>
 8008f6c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008f70:	4618      	mov	r0, r3
 8008f72:	f004 fc3b 	bl	800d7ec <_ZNSt6vectorISt4pairIciESaIS1_EED1Ev>
            for (auto &vertex : nodes)
 8008f76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7ff fdd9 	bl	8008b32 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEppEv>
 8008f80:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008f84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008f88:	4611      	mov	r1, r2
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7ff fdb9 	bl	8008b02 <_ZN9__gnu_cxxeqIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8008f90:	4603      	mov	r3, r0
 8008f92:	f083 0301 	eor.w	r3, r3, #1
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f47f af7a 	bne.w	8008e92 <_ZN3jlb5Graph8DijkstraEcc+0xb6>
            queue.push(std::make_pair(0, start_vertex.name));
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008fa4:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008fa8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8008fac:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f004 fc84 	bl	800d8be <_ZSt9make_pairIiRKcESt4pairINSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS3_INS4_IT0_E4typeEE6__typeEEOS5_OSA_>
 8008fb6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008fba:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8008fbe:	4611      	mov	r1, r2
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f004 fc93 	bl	800d8ec <_ZNSt4pairIfcEC1IicLb1EEEOS_IT_T0_E>
 8008fc6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8008fca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008fce:	4611      	mov	r1, r2
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f004 fcab 	bl	800d92c <_ZNSt14priority_queueISt4pairIfcESt6vectorIS1_SaIS1_EESt7greaterIS1_EE4pushEOS1_>
            while (!queue.empty())
 8008fd6:	e11f      	b.n	8009218 <_ZN3jlb5Graph8DijkstraEcc+0x43c>
                auto [distance, vertex_id] = queue.top();
 8008fd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f004 fcd3 	bl	800d988 <_ZNKSt14priority_queueISt4pairIfcESt6vectorIS1_SaIS1_EESt7greaterIS1_EE3topEv>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008fe8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008fec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008ff0:	e883 0003 	stmia.w	r3, {r0, r1}
 8008ff4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7ff fe4d 	bl	8008c98 <_ZSt3getILj0EfcEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_>
 8008ffe:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
 8009002:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009006:	4618      	mov	r0, r3
 8009008:	f7ff fe79 	bl	8008cfe <_ZSt3getILj1EfcEONSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeEOS4_>
 800900c:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
                queue.pop();
 8009010:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009014:	4618      	mov	r0, r3
 8009016:	f004 fcc4 	bl	800d9a2 <_ZNSt14priority_queueISt4pairIfcESt6vectorIS1_SaIS1_EESt7greaterIS1_EE3popEv>
                for (unsigned long index = 0; index < this->operator[](vertex_id).edges.size(); index++)
 800901a:	2300      	movs	r3, #0
 800901c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8009020:	e0df      	b.n	80091e2 <_ZN3jlb5Graph8DijkstraEcc+0x406>
                    auto &edge = this->operator[](vertex_id).edges[index];
 8009022:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009026:	781a      	ldrb	r2, [r3, #0]
 8009028:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800902c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009030:	4611      	mov	r1, r2
 8009032:	6818      	ldr	r0, [r3, #0]
 8009034:	f7ff fd08 	bl	8008a48 <_ZN3jlb5GraphixEc>
 8009038:	4603      	mov	r3, r0
 800903a:	330c      	adds	r3, #12
 800903c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8009040:	4618      	mov	r0, r3
 8009042:	f004 fcdf 	bl	800da04 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 8009046:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
                    if (vertex_id == current_node && std::find(edge.prev_nodes.begin(), edge.prev_nodes.end(), previous_node) == edge.prev_nodes.end()) { continue; }
 800904a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800904e:	781a      	ldrb	r2, [r3, #0]
 8009050:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009054:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	429a      	cmp	r2, r3
 800905c:	d12b      	bne.n	80090b6 <_ZN3jlb5Graph8DijkstraEcc+0x2da>
 800905e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009062:	3308      	adds	r3, #8
 8009064:	4618      	mov	r0, r3
 8009066:	f004 fce0 	bl	800da2a <_ZNSt6vectorIcSaIcEE5beginEv>
 800906a:	4604      	mov	r4, r0
 800906c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009070:	3308      	adds	r3, #8
 8009072:	4618      	mov	r0, r3
 8009074:	f004 fce9 	bl	800da4a <_ZNSt6vectorIcSaIcEE3endEv>
 8009078:	4601      	mov	r1, r0
 800907a:	1dfb      	adds	r3, r7, #7
 800907c:	461a      	mov	r2, r3
 800907e:	4620      	mov	r0, r4
 8009080:	f004 fcf4 	bl	800da6c <_ZSt4findIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEcET_S7_S7_RKT0_>
 8009084:	4603      	mov	r3, r0
 8009086:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800908a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800908e:	3308      	adds	r3, #8
 8009090:	4618      	mov	r0, r3
 8009092:	f004 fcda 	bl	800da4a <_ZNSt6vectorIcSaIcEE3endEv>
 8009096:	4603      	mov	r3, r0
 8009098:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800909c:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80090a0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80090a4:	4611      	mov	r1, r2
 80090a6:	4618      	mov	r0, r3
 80090a8:	f004 fcf4 	bl	800da94 <_ZN9__gnu_cxxeqIPcSt6vectorIcSaIcEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d001      	beq.n	80090b6 <_ZN3jlb5Graph8DijkstraEcc+0x2da>
 80090b2:	2301      	movs	r3, #1
 80090b4:	e000      	b.n	80090b8 <_ZN3jlb5Graph8DijkstraEcc+0x2dc>
 80090b6:	2300      	movs	r3, #0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	f040 808c 	bne.w	80091d6 <_ZN3jlb5Graph8DijkstraEcc+0x3fa>
                    char  neighbor = edge.node;
 80090be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090c2:	781a      	ldrb	r2, [r3, #0]
 80090c4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80090c8:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 80090cc:	701a      	strb	r2, [r3, #0]
                    float weight   = edge.get_weight();
 80090ce:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 80090d2:	f7fc f985 	bl	80053e0 <_ZNK3jlb4Edge10get_weightEv>
 80090d6:	ed87 0a3e 	vstr	s0, [r7, #248]	; 0xf8
                    if (result[neighbor].first > distance + weight)
 80090da:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 80090de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80090e2:	4611      	mov	r1, r2
 80090e4:	4618      	mov	r0, r3
 80090e6:	f004 faf1 	bl	800d6cc <_ZNSt3mapIcSt4pairIfSt6vectorIS0_IciESaIS2_EEESt4lessIcESaIS0_IKcS5_EEEixERS8_>
 80090ea:	4603      	mov	r3, r0
 80090ec:	ed93 7a00 	vldr	s14, [r3]
 80090f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090f4:	edd3 6a00 	vldr	s13, [r3]
 80090f8:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 80090fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009100:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009108:	bfcc      	ite	gt
 800910a:	2301      	movgt	r3, #1
 800910c:	2300      	movle	r3, #0
 800910e:	b2db      	uxtb	r3, r3
 8009110:	2b00      	cmp	r3, #0
 8009112:	d061      	beq.n	80091d8 <_ZN3jlb5Graph8DijkstraEcc+0x3fc>
                        result[neighbor].first  = distance + weight;
 8009114:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009118:	ed93 7a00 	vldr	s14, [r3]
 800911c:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 8009120:	ee37 8a27 	vadd.f32	s16, s14, s15
 8009124:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 8009128:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800912c:	4611      	mov	r1, r2
 800912e:	4618      	mov	r0, r3
 8009130:	f004 facc 	bl	800d6cc <_ZNSt3mapIcSt4pairIfSt6vectorIS0_IciESaIS2_EEESt4lessIcESaIS0_IKcS5_EEEixERS8_>
 8009134:	4603      	mov	r3, r0
 8009136:	ed83 8a00 	vstr	s16, [r3]
                        result[neighbor].second = result[vertex_id].second;
 800913a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800913e:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8009142:	4618      	mov	r0, r3
 8009144:	f004 fac2 	bl	800d6cc <_ZNSt3mapIcSt4pairIfSt6vectorIS0_IciESaIS2_EEESt4lessIcESaIS0_IKcS5_EEEixERS8_>
 8009148:	4603      	mov	r3, r0
 800914a:	1d1c      	adds	r4, r3, #4
 800914c:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 8009150:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009154:	4611      	mov	r1, r2
 8009156:	4618      	mov	r0, r3
 8009158:	f004 fab8 	bl	800d6cc <_ZNSt3mapIcSt4pairIfSt6vectorIS0_IciESaIS2_EEESt4lessIcESaIS0_IKcS5_EEEixERS8_>
 800915c:	4603      	mov	r3, r0
 800915e:	3304      	adds	r3, #4
 8009160:	4621      	mov	r1, r4
 8009162:	4618      	mov	r0, r3
 8009164:	f004 fcda 	bl	800db1c <_ZNSt6vectorISt4pairIciESaIS1_EEaSERKS3_>
                        result[neighbor].second.push_back(std::make_pair(vertex_id, static_cast<int>(index)));
 8009168:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 800916c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009170:	4611      	mov	r1, r2
 8009172:	4618      	mov	r0, r3
 8009174:	f004 faaa 	bl	800d6cc <_ZNSt3mapIcSt4pairIfSt6vectorIS0_IciESaIS2_EEESt4lessIcESaIS0_IKcS5_EEEixERS8_>
 8009178:	4603      	mov	r3, r0
 800917a:	1d1c      	adds	r4, r3, #4
 800917c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009180:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009184:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009188:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800918c:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8009190:	4618      	mov	r0, r3
 8009192:	f004 fdbb 	bl	800dd0c <_ZSt9make_pairIRciESt4pairINSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS2_INS3_IT0_E4typeEE6__typeEEOS4_OS9_>
 8009196:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800919a:	4619      	mov	r1, r3
 800919c:	4620      	mov	r0, r4
 800919e:	f004 fdcc 	bl	800dd3a <_ZNSt6vectorISt4pairIciESaIS1_EE9push_backEOS1_>
                        queue.push(std::make_pair(result[neighbor].first, neighbor));
 80091a2:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 80091a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80091aa:	4611      	mov	r1, r2
 80091ac:	4618      	mov	r0, r3
 80091ae:	f004 fa8d 	bl	800d6cc <_ZNSt3mapIcSt4pairIfSt6vectorIS0_IciESaIS2_EEESt4lessIcESaIS0_IKcS5_EEEixERS8_>
 80091b2:	4603      	mov	r3, r0
 80091b4:	4619      	mov	r1, r3
 80091b6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80091ba:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 80091be:	4618      	mov	r0, r3
 80091c0:	f004 fdcc 	bl	800dd5c <_ZSt9make_pairIRfRcESt4pairINSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS3_INS4_IT0_E4typeEE6__typeEEOS5_OSA_>
 80091c4:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80091c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80091cc:	4611      	mov	r1, r2
 80091ce:	4618      	mov	r0, r3
 80091d0:	f004 fbac 	bl	800d92c <_ZNSt14priority_queueISt4pairIfcESt6vectorIS1_SaIS1_EESt7greaterIS1_EE4pushEOS1_>
 80091d4:	e000      	b.n	80091d8 <_ZN3jlb5Graph8DijkstraEcc+0x3fc>
                    if (vertex_id == current_node && std::find(edge.prev_nodes.begin(), edge.prev_nodes.end(), previous_node) == edge.prev_nodes.end()) { continue; }
 80091d6:	bf00      	nop
                for (unsigned long index = 0; index < this->operator[](vertex_id).edges.size(); index++)
 80091d8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80091dc:	3301      	adds	r3, #1
 80091de:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80091e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80091e6:	781a      	ldrb	r2, [r3, #0]
 80091e8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80091ec:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80091f0:	4611      	mov	r1, r2
 80091f2:	6818      	ldr	r0, [r3, #0]
 80091f4:	f7ff fc28 	bl	8008a48 <_ZN3jlb5GraphixEc>
 80091f8:	4603      	mov	r3, r0
 80091fa:	330c      	adds	r3, #12
 80091fc:	4618      	mov	r0, r3
 80091fe:	f004 fbeb 	bl	800d9d8 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 8009202:	4602      	mov	r2, r0
 8009204:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009208:	4293      	cmp	r3, r2
 800920a:	bf34      	ite	cc
 800920c:	2301      	movcc	r3, #1
 800920e:	2300      	movcs	r3, #0
 8009210:	b2db      	uxtb	r3, r3
 8009212:	2b00      	cmp	r3, #0
 8009214:	f47f af05 	bne.w	8009022 <_ZN3jlb5Graph8DijkstraEcc+0x246>
            while (!queue.empty())
 8009218:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800921c:	4618      	mov	r0, r3
 800921e:	f004 fba6 	bl	800d96e <_ZNKSt14priority_queueISt4pairIfcESt6vectorIS1_SaIS1_EESt7greaterIS1_EE5emptyEv>
 8009222:	4603      	mov	r3, r0
 8009224:	f083 0301 	eor.w	r3, r3, #1
 8009228:	b2db      	uxtb	r3, r3
 800922a:	2b00      	cmp	r3, #0
 800922c:	f47f aed4 	bne.w	8008fd8 <_ZN3jlb5Graph8DijkstraEcc+0x1fc>
            for (auto &entry : result)
 8009230:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009234:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009238:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800923c:	f004 fda5 	bl	800dd8a <_ZNSt3mapIcSt4pairIfSt6vectorIS0_IciESaIS2_EEESt4lessIcESaIS0_IKcS5_EEE5beginEv>
 8009240:	4602      	mov	r2, r0
 8009242:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009246:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800924a:	601a      	str	r2, [r3, #0]
 800924c:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8009250:	f004 fda8 	bl	800dda4 <_ZNSt3mapIcSt4pairIfSt6vectorIS0_IciESaIS2_EEESt4lessIcESaIS0_IKcS5_EEE3endEv>
 8009254:	4602      	mov	r2, r0
 8009256:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800925a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800925e:	601a      	str	r2, [r3, #0]
 8009260:	e094      	b.n	800938c <_ZN3jlb5Graph8DijkstraEcc+0x5b0>
 8009262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009266:	4618      	mov	r0, r3
 8009268:	f004 fdce 	bl	800de08 <_ZNKSt17_Rb_tree_iteratorISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEEdeEv>
 800926c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
                auto &vertex_id = entry.first;
 8009270:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009274:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                auto &pair      = entry.second;
 8009278:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800927c:	3304      	adds	r3, #4
 800927e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
                if (pair.second.size() > 0)
 8009282:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009286:	3304      	adds	r3, #4
 8009288:	4618      	mov	r0, r3
 800928a:	f004 fdcb 	bl	800de24 <_ZNKSt6vectorISt4pairIciESaIS1_EE4sizeEv>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	bf14      	ite	ne
 8009294:	2301      	movne	r3, #1
 8009296:	2300      	moveq	r3, #0
 8009298:	b2db      	uxtb	r3, r3
 800929a:	2b00      	cmp	r3, #0
 800929c:	d05c      	beq.n	8009358 <_ZN3jlb5Graph8DijkstraEcc+0x57c>
                    char  before_last_node = pair.second[pair.second.size() - 1].first;
 800929e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80092a2:	1d1c      	adds	r4, r3, #4
 80092a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80092a8:	3304      	adds	r3, #4
 80092aa:	4618      	mov	r0, r3
 80092ac:	f004 fdba 	bl	800de24 <_ZNKSt6vectorISt4pairIciESaIS1_EE4sizeEv>
 80092b0:	4603      	mov	r3, r0
 80092b2:	3b01      	subs	r3, #1
 80092b4:	4619      	mov	r1, r3
 80092b6:	4620      	mov	r0, r4
 80092b8:	f004 fdc4 	bl	800de44 <_ZNSt6vectorISt4pairIciESaIS1_EEixEj>
 80092bc:	4603      	mov	r3, r0
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
                    auto &edges            = this->operator[](before_last_node).edges;
 80092c4:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 80092c8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80092cc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80092d0:	4611      	mov	r1, r2
 80092d2:	6818      	ldr	r0, [r3, #0]
 80092d4:	f7ff fbb8 	bl	8008a48 <_ZN3jlb5GraphixEc>
 80092d8:	4603      	mov	r3, r0
 80092da:	330c      	adds	r3, #12
 80092dc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                    auto  it               = std::find_if(edges.begin(), edges.end(), [&vertex_id](const Edge &edge) { return edge.node == vertex_id; });
 80092e0:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 80092e4:	f004 fdbe 	bl	800de64 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>
 80092e8:	4604      	mov	r4, r0
 80092ea:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 80092ee:	f004 fdc9 	bl	800de84 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 80092f2:	4601      	mov	r1, r0
 80092f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092f8:	461a      	mov	r2, r3
 80092fa:	4620      	mov	r0, r4
 80092fc:	f004 fdd3 	bl	800dea6 <_ZSt7find_ifIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEZNS2_5Graph8DijkstraEccEUlRKS3_E_ET_SD_SD_T0_>
 8009300:	4602      	mov	r2, r0
 8009302:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009306:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800930a:	601a      	str	r2, [r3, #0]
                    int   index            = std::distance(edges.begin(), it);
 800930c:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8009310:	f004 fda8 	bl	800de64 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>
 8009314:	4602      	mov	r2, r0
 8009316:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800931a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800931e:	6819      	ldr	r1, [r3, #0]
 8009320:	4610      	mov	r0, r2
 8009322:	f004 fdd4 	bl	800dece <_ZSt8distanceIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEENSt15iterator_traitsIT_E15difference_typeESA_SA_>
 8009326:	4602      	mov	r2, r0
 8009328:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800932c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009330:	601a      	str	r2, [r3, #0]
                    pair.second.push_back(std::make_pair(vertex_id, index));
 8009332:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009336:	1d1c      	adds	r4, r3, #4
 8009338:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800933c:	f107 0218 	add.w	r2, r7, #24
 8009340:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8009344:	4618      	mov	r0, r3
 8009346:	f004 fdd5 	bl	800def4 <_ZSt9make_pairIRKcRiESt4pairINSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS4_INS5_IT0_E4typeEE6__typeEEOS6_OSB_>
 800934a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800934e:	4619      	mov	r1, r3
 8009350:	4620      	mov	r0, r4
 8009352:	f004 fcf2 	bl	800dd3a <_ZNSt6vectorISt4pairIciESaIS1_EE9push_backEOS1_>
 8009356:	e014      	b.n	8009382 <_ZN3jlb5Graph8DijkstraEcc+0x5a6>
                }
                else { pair.second.push_back(std::make_pair(vertex_id, 0)); }
 8009358:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800935c:	1d1c      	adds	r4, r3, #4
 800935e:	2300      	movs	r3, #0
 8009360:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009364:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8009368:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800936c:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8009370:	4618      	mov	r0, r3
 8009372:	f004 fdd6 	bl	800df22 <_ZSt9make_pairIRKciESt4pairINSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS3_INS4_IT0_E4typeEE6__typeEEOS5_OSA_>
 8009376:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800937a:	4619      	mov	r1, r3
 800937c:	4620      	mov	r0, r4
 800937e:	f004 fcdc 	bl	800dd3a <_ZNSt6vectorISt4pairIciESaIS1_EE9push_backEOS1_>
            for (auto &entry : result)
 8009382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009386:	4618      	mov	r0, r3
 8009388:	f004 fd2d 	bl	800dde6 <_ZNSt17_Rb_tree_iteratorISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEEppEv>
 800938c:	f107 0220 	add.w	r2, r7, #32
 8009390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009394:	4611      	mov	r1, r2
 8009396:	4618      	mov	r0, r3
 8009398:	f004 fd11 	bl	800ddbe <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEESA_>
 800939c:	4603      	mov	r3, r0
 800939e:	f083 0301 	eor.w	r3, r3, #1
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	f47f af5c 	bne.w	8009262 <_ZN3jlb5Graph8DijkstraEcc+0x486>
            }

            // in the result find the node with the smallest distance which is not in collected_nodes
            float min_distance = std::numeric_limits<float>::infinity();
 80093aa:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80093ae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            char  min_node     = '@';
 80093b2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80093b6:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 80093ba:	2240      	movs	r2, #64	; 0x40
 80093bc:	701a      	strb	r2, [r3, #0]
            for (auto &[vertex_id, pair] : result)
 80093be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80093c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80093c6:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80093ca:	f004 fcde 	bl	800dd8a <_ZNSt3mapIcSt4pairIfSt6vectorIS0_IciESaIS2_EEESt4lessIcESaIS0_IKcS5_EEE5beginEv>
 80093ce:	4602      	mov	r2, r0
 80093d0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80093d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80093d8:	601a      	str	r2, [r3, #0]
 80093da:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80093de:	f004 fce1 	bl	800dda4 <_ZNSt3mapIcSt4pairIfSt6vectorIS0_IciESaIS2_EEESt4lessIcESaIS0_IKcS5_EEE3endEv>
 80093e2:	4602      	mov	r2, r0
 80093e4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80093e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093ec:	601a      	str	r2, [r3, #0]
 80093ee:	e071      	b.n	80094d4 <_ZN3jlb5Graph8DijkstraEcc+0x6f8>
 80093f0:	f107 0314 	add.w	r3, r7, #20
 80093f4:	4618      	mov	r0, r3
 80093f6:	f004 fd07 	bl	800de08 <_ZNKSt17_Rb_tree_iteratorISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEEdeEv>
 80093fa:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
 80093fe:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8009402:	f7ff fcc5 	bl	8008d90 <_ZSt3getILj0EKcSt4pairIfSt6vectorIS1_IciESaIS3_EEEERNSt13tuple_elementIXT_ES1_IT0_T1_EE4typeERSA_>
 8009406:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
 800940a:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800940e:	f7ff fccb 	bl	8008da8 <_ZSt3getILj1EKcSt4pairIfSt6vectorIS1_IciESaIS3_EEEERNSt13tuple_elementIXT_ES1_IT0_T1_EE4typeERSA_>
 8009412:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
            {
                if (pair.first != 0 && pair.first < min_distance && std::find(collected_nodes.begin(), collected_nodes.end(), vertex_id) == collected_nodes.end())
 8009416:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800941a:	edd3 7a00 	vldr	s15, [r3]
 800941e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009426:	d040      	beq.n	80094aa <_ZN3jlb5Graph8DijkstraEcc+0x6ce>
 8009428:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800942c:	edd3 7a00 	vldr	s15, [r3]
 8009430:	ed97 7a4e 	vldr	s14, [r7, #312]	; 0x138
 8009434:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800943c:	dd35      	ble.n	80094aa <_ZN3jlb5Graph8DijkstraEcc+0x6ce>
 800943e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009442:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	330c      	adds	r3, #12
 800944a:	4618      	mov	r0, r3
 800944c:	f004 faed 	bl	800da2a <_ZNSt6vectorIcSaIcEE5beginEv>
 8009450:	4604      	mov	r4, r0
 8009452:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009456:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	330c      	adds	r3, #12
 800945e:	4618      	mov	r0, r3
 8009460:	f004 faf3 	bl	800da4a <_ZNSt6vectorIcSaIcEE3endEv>
 8009464:	4603      	mov	r3, r0
 8009466:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800946a:	4619      	mov	r1, r3
 800946c:	4620      	mov	r0, r4
 800946e:	f004 fafd 	bl	800da6c <_ZSt4findIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEcET_S7_S7_RKT0_>
 8009472:	4603      	mov	r3, r0
 8009474:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009478:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800947c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	330c      	adds	r3, #12
 8009484:	4618      	mov	r0, r3
 8009486:	f004 fae0 	bl	800da4a <_ZNSt6vectorIcSaIcEE3endEv>
 800948a:	4603      	mov	r3, r0
 800948c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009490:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8009494:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8009498:	4611      	mov	r1, r2
 800949a:	4618      	mov	r0, r3
 800949c:	f004 fafa 	bl	800da94 <_ZN9__gnu_cxxeqIPcSt6vectorIcSaIcEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d001      	beq.n	80094aa <_ZN3jlb5Graph8DijkstraEcc+0x6ce>
 80094a6:	2301      	movs	r3, #1
 80094a8:	e000      	b.n	80094ac <_ZN3jlb5Graph8DijkstraEcc+0x6d0>
 80094aa:	2300      	movs	r3, #0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d00c      	beq.n	80094ca <_ZN3jlb5Graph8DijkstraEcc+0x6ee>
                {
                    min_distance = pair.first;
 80094b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
                    min_node     = vertex_id;
 80094ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80094be:	781a      	ldrb	r2, [r3, #0]
 80094c0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80094c4:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 80094c8:	701a      	strb	r2, [r3, #0]
            for (auto &[vertex_id, pair] : result)
 80094ca:	f107 0314 	add.w	r3, r7, #20
 80094ce:	4618      	mov	r0, r3
 80094d0:	f004 fc89 	bl	800dde6 <_ZNSt17_Rb_tree_iteratorISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEEppEv>
 80094d4:	f107 0210 	add.w	r2, r7, #16
 80094d8:	f107 0314 	add.w	r3, r7, #20
 80094dc:	4611      	mov	r1, r2
 80094de:	4618      	mov	r0, r3
 80094e0:	f004 fc6d 	bl	800ddbe <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEESA_>
 80094e4:	4603      	mov	r3, r0
 80094e6:	f083 0301 	eor.w	r3, r3, #1
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	f47f af7f 	bne.w	80093f0 <_ZN3jlb5Graph8DijkstraEcc+0x614>
                }
            }


            return DijkstraResult{min_node, result[min_node].second};
 80094f2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80094f6:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 80094fa:	781a      	ldrb	r2, [r3, #0]
 80094fc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009500:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	701a      	strb	r2, [r3, #0]
 8009508:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800950c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	1d1c      	adds	r4, r3, #4
 8009514:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8009518:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800951c:	4611      	mov	r1, r2
 800951e:	4618      	mov	r0, r3
 8009520:	f004 f8d4 	bl	800d6cc <_ZNSt3mapIcSt4pairIfSt6vectorIS0_IciESaIS2_EEESt4lessIcESaIS0_IKcS5_EEEixERS8_>
 8009524:	4603      	mov	r3, r0
 8009526:	3304      	adds	r3, #4
 8009528:	4619      	mov	r1, r3
 800952a:	4620      	mov	r0, r4
 800952c:	f004 fd27 	bl	800df7e <_ZNSt6vectorISt4pairIciESaIS1_EEC1ERKS3_>
        }
 8009530:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009534:	4618      	mov	r0, r3
 8009536:	f7ff facc 	bl	8008ad2 <_ZNSt14priority_queueISt4pairIfcESt6vectorIS1_SaIS1_EESt7greaterIS1_EED1Ev>
 800953a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800953e:	4618      	mov	r0, r3
 8009540:	f7ff faba 	bl	8008ab8 <_ZNSt3mapIcSt4pairIfSt6vectorIS0_IciESaIS2_EEESt4lessIcESaIS0_IKcS5_EEED1Ev>
            return DijkstraResult{min_node, result[min_node].second};
 8009544:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009548:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800954c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009550:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009554:	6812      	ldr	r2, [r2, #0]
 8009556:	601a      	str	r2, [r3, #0]
        }
 8009558:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800955c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009560:	6818      	ldr	r0, [r3, #0]
 8009562:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8009566:	46bd      	mov	sp, r7
 8009568:	ecbd 8b02 	vpop	{d8}
 800956c:	bd90      	pop	{r4, r7, pc}

0800956e <_ZNSt5dequeIfSaIfEEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 800956e:	b580      	push	{r7, lr}
 8009570:	b082      	sub	sp, #8
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	4618      	mov	r0, r3
 800957a:	f004 fd49 	bl	800e010 <_ZNSt11_Deque_baseIfSaIfEEC1Ev>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4618      	mov	r0, r3
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <_ZN3jlb8OdometryC1Efff>:
        float meas_lin_acc_y = 0.0f;
        float meas_lin_acc_z = 0.0f;

        uint32_t tick_counter      = 0u;
        uint32_t tick_counter_prev = 0u;
        Odometry(const float x_t_ = 0.0f, const float y_t_ = 0.0f, const float theta_t_ = 0.0f) : x_t(x_t_), y_t(y_t_), theta_t(normalize_angle(theta_t_)) {}
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	ed87 0a02 	vstr	s0, [r7, #8]
 8009594:	edc7 0a01 	vstr	s1, [r7, #4]
 8009598:	ed87 1a00 	vstr	s2, [r7]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f04f 0200 	mov.w	r2, #0
 80095a2:	601a      	str	r2, [r3, #0]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f04f 0200 	mov.w	r2, #0
 80095aa:	605a      	str	r2, [r3, #4]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	68ba      	ldr	r2, [r7, #8]
 80095b0:	609a      	str	r2, [r3, #8]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	60da      	str	r2, [r3, #12]
 80095b8:	ed97 0a00 	vldr	s0, [r7]
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	f000 fad3 	bl	8009b68 <_ZN3jlb8Odometry15normalize_angleEf>
 80095c2:	eef0 7a40 	vmov.f32	s15, s0
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	edc3 7a04 	vstr	s15, [r3, #16]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f04f 0200 	mov.w	r2, #0
 80095d2:	615a      	str	r2, [r3, #20]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f04f 0200 	mov.w	r2, #0
 80095da:	619a      	str	r2, [r3, #24]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f04f 0200 	mov.w	r2, #0
 80095e2:	61da      	str	r2, [r3, #28]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f04f 0200 	mov.w	r2, #0
 80095ea:	621a      	str	r2, [r3, #32]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f04f 0200 	mov.w	r2, #0
 80095f2:	625a      	str	r2, [r3, #36]	; 0x24
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f04f 0200 	mov.w	r2, #0
 80095fa:	629a      	str	r2, [r3, #40]	; 0x28
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f04f 0200 	mov.w	r2, #0
 8009602:	62da      	str	r2, [r3, #44]	; 0x2c
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f04f 0200 	mov.w	r2, #0
 800960a:	631a      	str	r2, [r3, #48]	; 0x30
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f04f 0200 	mov.w	r2, #0
 8009612:	635a      	str	r2, [r3, #52]	; 0x34
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f04f 0200 	mov.w	r2, #0
 800961a:	639a      	str	r2, [r3, #56]	; 0x38
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f04f 0200 	mov.w	r2, #0
 8009622:	63da      	str	r2, [r3, #60]	; 0x3c
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2200      	movs	r2, #0
 8009628:	641a      	str	r2, [r3, #64]	; 0x40
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2200      	movs	r2, #0
 800962e:	645a      	str	r2, [r3, #68]	; 0x44
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	3348      	adds	r3, #72	; 0x48
 8009634:	4618      	mov	r0, r3
 8009636:	f7ff ff9a 	bl	800956e <_ZNSt5dequeIfSaIfEEC1Ev>
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	3370      	adds	r3, #112	; 0x70
 800963e:	4618      	mov	r0, r3
 8009640:	f7ff ff95 	bl	800956e <_ZNSt5dequeIfSaIfEEC1Ev>
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2201      	movs	r2, #1
 8009648:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	4618      	mov	r0, r3
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <_ZN3jlb8OdometryD1Ev>:

        ~Odometry() {}
 8009656:	b580      	push	{r7, lr}
 8009658:	b082      	sub	sp, #8
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	3370      	adds	r3, #112	; 0x70
 8009662:	4618      	mov	r0, r3
 8009664:	f004 fd07 	bl	800e076 <_ZNSt5dequeIfSaIfEED1Ev>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	3348      	adds	r3, #72	; 0x48
 800966c:	4618      	mov	r0, r3
 800966e:	f004 fd02 	bl	800e076 <_ZNSt5dequeIfSaIfEED1Ev>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4618      	mov	r0, r3
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	0000      	movs	r0, r0
	...

08009680 <_ZN3jlb8Odometry12rpm_callbackEf>:

        void rpm_callback(const float wheel_rpm)
 8009680:	b580      	push	{r7, lr}
 8009682:	ed2d 8b02 	vpush	{d8}
 8009686:	b08c      	sub	sp, #48	; 0x30
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	ed87 0a00 	vstr	s0, [r7]
        {
            meas_wheel_rpm = wheel_rpm;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	683a      	ldr	r2, [r7, #0]
 8009694:	625a      	str	r2, [r3, #36]	; 0x24
            float velocity = M_PI * jlb::WHEEL_DIAMETER * wheel_rpm / 60.0f;
 8009696:	6838      	ldr	r0, [r7, #0]
 8009698:	f7f6 ff48 	bl	800052c <__aeabi_f2d>
 800969c:	a33e      	add	r3, pc, #248	; (adr r3, 8009798 <_ZN3jlb8Odometry12rpm_callbackEf+0x118>)
 800969e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a2:	f7f6 ff9b 	bl	80005dc <__aeabi_dmul>
 80096a6:	4602      	mov	r2, r0
 80096a8:	460b      	mov	r3, r1
 80096aa:	4610      	mov	r0, r2
 80096ac:	4619      	mov	r1, r3
 80096ae:	f04f 0200 	mov.w	r2, #0
 80096b2:	4b37      	ldr	r3, [pc, #220]	; (8009790 <_ZN3jlb8Odometry12rpm_callbackEf+0x110>)
 80096b4:	f7f7 f8bc 	bl	8000830 <__aeabi_ddiv>
 80096b8:	4602      	mov	r2, r0
 80096ba:	460b      	mov	r3, r1
 80096bc:	4610      	mov	r0, r2
 80096be:	4619      	mov	r1, r3
 80096c0:	f7f7 fa84 	bl	8000bcc <__aeabi_d2f>
 80096c4:	4603      	mov	r3, r0
 80096c6:	60fb      	str	r3, [r7, #12]

            if (std::fabs(velocity) > jlb::MAX_VELOCITY) { return; }
 80096c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80096cc:	eeb0 0a67 	vmov.f32	s0, s15
 80096d0:	f7fb f81e 	bl	8004710 <_ZSt4fabsf>
 80096d4:	eef0 7a40 	vmov.f32	s15, s0
 80096d8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80096dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80096e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096e4:	bfcc      	ite	gt
 80096e6:	2301      	movgt	r3, #1
 80096e8:	2300      	movle	r3, #0
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d146      	bne.n	800977e <_ZN3jlb8Odometry12rpm_callbackEf+0xfe>

            v_buffer_.push_back(velocity);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	3348      	adds	r3, #72	; 0x48
 80096f4:	f107 020c 	add.w	r2, r7, #12
 80096f8:	4611      	mov	r1, r2
 80096fa:	4618      	mov	r0, r3
 80096fc:	f004 fce0 	bl	800e0c0 <_ZNSt5dequeIfSaIfEE9push_backERKf>
            if (v_buffer_.size() > jlb::VELOCITY_BUFFER_SIZE) { v_buffer_.pop_front(); }
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	3348      	adds	r3, #72	; 0x48
 8009704:	4618      	mov	r0, r3
 8009706:	f004 fcfc 	bl	800e102 <_ZNKSt5dequeIfSaIfEE4sizeEv>
 800970a:	4603      	mov	r3, r0
 800970c:	2b01      	cmp	r3, #1
 800970e:	bf8c      	ite	hi
 8009710:	2301      	movhi	r3, #1
 8009712:	2300      	movls	r3, #0
 8009714:	b2db      	uxtb	r3, r3
 8009716:	2b00      	cmp	r3, #0
 8009718:	d004      	beq.n	8009724 <_ZN3jlb8Odometry12rpm_callbackEf+0xa4>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	3348      	adds	r3, #72	; 0x48
 800971e:	4618      	mov	r0, r3
 8009720:	f004 fd01 	bl	800e126 <_ZNSt5dequeIfSaIfEE9pop_frontEv>

            vx_t = std::accumulate(v_buffer_.begin(), v_buffer_.end(), 0.0f) / v_buffer_.size();
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800972a:	f107 0310 	add.w	r3, r7, #16
 800972e:	4611      	mov	r1, r2
 8009730:	4618      	mov	r0, r3
 8009732:	f004 fd1b 	bl	800e16c <_ZNSt5dequeIfSaIfEE5beginEv>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800973c:	f107 0320 	add.w	r3, r7, #32
 8009740:	4611      	mov	r1, r2
 8009742:	4618      	mov	r0, r3
 8009744:	f004 fd21 	bl	800e18a <_ZNSt5dequeIfSaIfEE3endEv>
 8009748:	f107 0220 	add.w	r2, r7, #32
 800974c:	f107 0310 	add.w	r3, r7, #16
 8009750:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8009794 <_ZN3jlb8Odometry12rpm_callbackEf+0x114>
 8009754:	4611      	mov	r1, r2
 8009756:	4618      	mov	r0, r3
 8009758:	f004 fd31 	bl	800e1be <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_>
 800975c:	eeb0 8a40 	vmov.f32	s16, s0
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	3348      	adds	r3, #72	; 0x48
 8009764:	4618      	mov	r0, r3
 8009766:	f004 fccc 	bl	800e102 <_ZNKSt5dequeIfSaIfEE4sizeEv>
 800976a:	ee07 0a90 	vmov	s15, r0
 800976e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009772:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	edc3 7a00 	vstr	s15, [r3]
 800977c:	e000      	b.n	8009780 <_ZN3jlb8Odometry12rpm_callbackEf+0x100>
            if (std::fabs(velocity) > jlb::MAX_VELOCITY) { return; }
 800977e:	bf00      	nop
        }
 8009780:	3730      	adds	r7, #48	; 0x30
 8009782:	46bd      	mov	sp, r7
 8009784:	ecbd 8b02 	vpop	{d8}
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	f3af 8000 	nop.w
 8009790:	404e0000 	.word	0x404e0000
 8009794:	00000000 	.word	0x00000000
 8009798:	64af6f9d 	.word	0x64af6f9d
 800979c:	3fd51c8b 	.word	0x3fd51c8b

080097a0 <_ZN3jlb8Odometry12imu_callbackEf>:

        void imu_callback(const float ang_vel_z)
 80097a0:	b580      	push	{r7, lr}
 80097a2:	ed2d 8b02 	vpush	{d8}
 80097a6:	b08a      	sub	sp, #40	; 0x28
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	ed87 0a00 	vstr	s0, [r7]
        {
            meas_ang_vel_z = ang_vel_z;
 80097b0:	683a      	ldr	r2, [r7, #0]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	631a      	str	r2, [r3, #48]	; 0x30

            if (std::fabs(ang_vel_z) > jlb::MAX_YAW_RATE) { return; }
 80097b6:	edd7 7a00 	vldr	s15, [r7]
 80097ba:	eeb0 0a67 	vmov.f32	s0, s15
 80097be:	f7fa ffa7 	bl	8004710 <_ZSt4fabsf>
 80097c2:	eef0 7a40 	vmov.f32	s15, s0
 80097c6:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8009878 <_ZN3jlb8Odometry12imu_callbackEf+0xd8>
 80097ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80097ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097d2:	bfcc      	ite	gt
 80097d4:	2301      	movgt	r3, #1
 80097d6:	2300      	movle	r3, #0
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d145      	bne.n	800986a <_ZN3jlb8Odometry12imu_callbackEf+0xca>

            w_buffer_.push_back(ang_vel_z);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	3370      	adds	r3, #112	; 0x70
 80097e2:	463a      	mov	r2, r7
 80097e4:	4611      	mov	r1, r2
 80097e6:	4618      	mov	r0, r3
 80097e8:	f004 fc6a 	bl	800e0c0 <_ZNSt5dequeIfSaIfEE9push_backERKf>
            if (w_buffer_.size() > jlb::IMU_BUFFER_SIZE) { w_buffer_.pop_front(); }
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	3370      	adds	r3, #112	; 0x70
 80097f0:	4618      	mov	r0, r3
 80097f2:	f004 fc86 	bl	800e102 <_ZNKSt5dequeIfSaIfEE4sizeEv>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b0a      	cmp	r3, #10
 80097fa:	bf8c      	ite	hi
 80097fc:	2301      	movhi	r3, #1
 80097fe:	2300      	movls	r3, #0
 8009800:	b2db      	uxtb	r3, r3
 8009802:	2b00      	cmp	r3, #0
 8009804:	d004      	beq.n	8009810 <_ZN3jlb8Odometry12imu_callbackEf+0x70>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	3370      	adds	r3, #112	; 0x70
 800980a:	4618      	mov	r0, r3
 800980c:	f004 fc8b 	bl	800e126 <_ZNSt5dequeIfSaIfEE9pop_frontEv>

            w_t = std::accumulate(w_buffer_.begin(), w_buffer_.end(), 0.0f) / w_buffer_.size();
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8009816:	f107 0308 	add.w	r3, r7, #8
 800981a:	4611      	mov	r1, r2
 800981c:	4618      	mov	r0, r3
 800981e:	f004 fca5 	bl	800e16c <_ZNSt5dequeIfSaIfEE5beginEv>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8009828:	f107 0318 	add.w	r3, r7, #24
 800982c:	4611      	mov	r1, r2
 800982e:	4618      	mov	r0, r3
 8009830:	f004 fcab 	bl	800e18a <_ZNSt5dequeIfSaIfEE3endEv>
 8009834:	f107 0218 	add.w	r2, r7, #24
 8009838:	f107 0308 	add.w	r3, r7, #8
 800983c:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800987c <_ZN3jlb8Odometry12imu_callbackEf+0xdc>
 8009840:	4611      	mov	r1, r2
 8009842:	4618      	mov	r0, r3
 8009844:	f004 fcbb 	bl	800e1be <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_>
 8009848:	eeb0 8a40 	vmov.f32	s16, s0
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	3370      	adds	r3, #112	; 0x70
 8009850:	4618      	mov	r0, r3
 8009852:	f004 fc56 	bl	800e102 <_ZNKSt5dequeIfSaIfEE4sizeEv>
 8009856:	ee07 0a90 	vmov	s15, r0
 800985a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800985e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	edc3 7a01 	vstr	s15, [r3, #4]
 8009868:	e000      	b.n	800986c <_ZN3jlb8Odometry12imu_callbackEf+0xcc>
            if (std::fabs(ang_vel_z) > jlb::MAX_YAW_RATE) { return; }
 800986a:	bf00      	nop
        }
 800986c:	3728      	adds	r7, #40	; 0x28
 800986e:	46bd      	mov	sp, r7
 8009870:	ecbd 8b02 	vpop	{d8}
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	4096cbe4 	.word	0x4096cbe4
 800987c:	00000000 	.word	0x00000000

08009880 <_ZN3jlb8Odometry11update_odomEv>:

        Odom update_odom()
 8009880:	b580      	push	{r7, lr}
 8009882:	ed2d 8b02 	vpush	{d8}
 8009886:	b08c      	sub	sp, #48	; 0x30
 8009888:	af00      	add	r7, sp, #0
 800988a:	6178      	str	r0, [r7, #20]
        {
#ifndef SIMULATION
            // TODO: add timestamp and dt
            tick_counter_prev = tick_counter;
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	645a      	str	r2, [r3, #68]	; 0x44
            tick_counter      = HAL_GetTick();
 8009894:	f00f f9de 	bl	8018c54 <HAL_GetTick>
 8009898:	4602      	mov	r2, r0
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	641a      	str	r2, [r3, #64]	; 0x40
            float dt          = (((float)tick_counter) - ((float)(tick_counter_prev))) / 1000.0f;
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a2:	ee07 3a90 	vmov	s15, r3
 80098a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ae:	ee07 3a90 	vmov	s15, r3
 80098b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80098ba:	eddf 6a9b 	vldr	s13, [pc, #620]	; 8009b28 <_ZN3jlb8Odometry11update_odomEv+0x2a8>
 80098be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80098c2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

            auto  update_timestamp = std::chrono::steady_clock::now();
            float dt               = std::chrono::duration_cast<std::chrono::milliseconds>(update_timestamp - odom_timestamp_).count() / 1000.0f;
#endif

            if (dt > 0.0f)
 80098c6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80098ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80098ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098d2:	f340 80fa 	ble.w	8009aca <_ZN3jlb8Odometry11update_odomEv+0x24a>
            {
                vx_t = std::fabs(vx_t) < 0.03 ? 0.0 : vx_t;
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	edd3 7a00 	vldr	s15, [r3]
 80098dc:	eeb0 0a67 	vmov.f32	s0, s15
 80098e0:	f7fa ff16 	bl	8004710 <_ZSt4fabsf>
 80098e4:	ee10 3a10 	vmov	r3, s0
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7f6 fe1f 	bl	800052c <__aeabi_f2d>
 80098ee:	a38a      	add	r3, pc, #552	; (adr r3, 8009b18 <_ZN3jlb8Odometry11update_odomEv+0x298>)
 80098f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f4:	f7f7 f8e4 	bl	8000ac0 <__aeabi_dcmplt>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d002      	beq.n	8009904 <_ZN3jlb8Odometry11update_odomEv+0x84>
 80098fe:	f04f 0300 	mov.w	r3, #0
 8009902:	e001      	b.n	8009908 <_ZN3jlb8Odometry11update_odomEv+0x88>
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	697a      	ldr	r2, [r7, #20]
 800990a:	6013      	str	r3, [r2, #0]
                w_t  = std::fabs(w_t) < 0.015 ? 0.0 : w_t;
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	edd3 7a01 	vldr	s15, [r3, #4]
 8009912:	eeb0 0a67 	vmov.f32	s0, s15
 8009916:	f7fa fefb 	bl	8004710 <_ZSt4fabsf>
 800991a:	ee10 3a10 	vmov	r3, s0
 800991e:	4618      	mov	r0, r3
 8009920:	f7f6 fe04 	bl	800052c <__aeabi_f2d>
 8009924:	a37e      	add	r3, pc, #504	; (adr r3, 8009b20 <_ZN3jlb8Odometry11update_odomEv+0x2a0>)
 8009926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992a:	f7f7 f8c9 	bl	8000ac0 <__aeabi_dcmplt>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d002      	beq.n	800993a <_ZN3jlb8Odometry11update_odomEv+0xba>
 8009934:	f04f 0300 	mov.w	r3, #0
 8009938:	e001      	b.n	800993e <_ZN3jlb8Odometry11update_odomEv+0xbe>
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	697a      	ldr	r2, [r7, #20]
 8009940:	6053      	str	r3, [r2, #4]
                // float vy_t = WHEELBASE * w_t / 2.0f;
                float vy_t = 0.0f;
 8009942:	f04f 0300 	mov.w	r3, #0
 8009946:	62bb      	str	r3, [r7, #40]	; 0x28

                x_t += (vx_t * std::cos(theta_t) - vy_t * std::sin(theta_t)) * dt;
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	ed93 8a00 	vldr	s16, [r3]
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	edd3 7a04 	vldr	s15, [r3, #16]
 8009954:	eeb0 0a67 	vmov.f32	s0, s15
 8009958:	f7fa feca 	bl	80046f0 <_ZSt3cosf>
 800995c:	eef0 7a40 	vmov.f32	s15, s0
 8009960:	ee28 8a27 	vmul.f32	s16, s16, s15
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	edd3 7a04 	vldr	s15, [r3, #16]
 800996a:	eeb0 0a67 	vmov.f32	s0, s15
 800996e:	f7fa fedf 	bl	8004730 <_ZSt3sinf>
 8009972:	eeb0 7a40 	vmov.f32	s14, s0
 8009976:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800997a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800997e:	ee38 7a67 	vsub.f32	s14, s16, s15
 8009982:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009986:	ee27 7a27 	vmul.f32	s14, s14, s15
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	edd3 7a02 	vldr	s15, [r3, #8]
 8009990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	edc3 7a02 	vstr	s15, [r3, #8]
                y_t += (vx_t * std::sin(theta_t) + vy_t * std::cos(theta_t)) * dt;
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	ed93 8a00 	vldr	s16, [r3]
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	edd3 7a04 	vldr	s15, [r3, #16]
 80099a6:	eeb0 0a67 	vmov.f32	s0, s15
 80099aa:	f7fa fec1 	bl	8004730 <_ZSt3sinf>
 80099ae:	eef0 7a40 	vmov.f32	s15, s0
 80099b2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80099bc:	eeb0 0a67 	vmov.f32	s0, s15
 80099c0:	f7fa fe96 	bl	80046f0 <_ZSt3cosf>
 80099c4:	eeb0 7a40 	vmov.f32	s14, s0
 80099c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80099cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099d0:	ee38 7a27 	vadd.f32	s14, s16, s15
 80099d4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80099d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	edd3 7a03 	vldr	s15, [r3, #12]
 80099e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	edc3 7a03 	vstr	s15, [r3, #12]
                theta_t = normalize_angle(theta_t + w_t * dt);
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	ed93 7a04 	vldr	s14, [r3, #16]
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	edd3 6a01 	vldr	s13, [r3, #4]
 80099f8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80099fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a04:	eeb0 0a67 	vmov.f32	s0, s15
 8009a08:	6978      	ldr	r0, [r7, #20]
 8009a0a:	f000 f8ad 	bl	8009b68 <_ZN3jlb8Odometry15normalize_angleEf>
 8009a0e:	eef0 7a40 	vmov.f32	s15, s0
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	edc3 7a04 	vstr	s15, [r3, #16]

                x_t_local += vx_t * std::cos(theta_t_local) * dt;
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	ed93 8a00 	vldr	s16, [r3]
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	edd3 7a07 	vldr	s15, [r3, #28]
 8009a24:	eeb0 0a67 	vmov.f32	s0, s15
 8009a28:	f7fa fe62 	bl	80046f0 <_ZSt3cosf>
 8009a2c:	eef0 7a40 	vmov.f32	s15, s0
 8009a30:	ee28 7a27 	vmul.f32	s14, s16, s15
 8009a34:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009a38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	edd3 7a05 	vldr	s15, [r3, #20]
 8009a42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	edc3 7a05 	vstr	s15, [r3, #20]
                y_t_local += vx_t * std::sin(theta_t_local) * dt;
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	ed93 8a00 	vldr	s16, [r3]
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	edd3 7a07 	vldr	s15, [r3, #28]
 8009a58:	eeb0 0a67 	vmov.f32	s0, s15
 8009a5c:	f7fa fe68 	bl	8004730 <_ZSt3sinf>
 8009a60:	eef0 7a40 	vmov.f32	s15, s0
 8009a64:	ee28 7a27 	vmul.f32	s14, s16, s15
 8009a68:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009a6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	edd3 7a06 	vldr	s15, [r3, #24]
 8009a76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	edc3 7a06 	vstr	s15, [r3, #24]
                theta_t_local = normalize_angle(theta_t_local + w_t * dt);
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	ed93 7a07 	vldr	s14, [r3, #28]
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	edd3 6a01 	vldr	s13, [r3, #4]
 8009a8c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009a90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a98:	eeb0 0a67 	vmov.f32	s0, s15
 8009a9c:	6978      	ldr	r0, [r7, #20]
 8009a9e:	f000 f863 	bl	8009b68 <_ZN3jlb8Odometry15normalize_angleEf>
 8009aa2:	eef0 7a40 	vmov.f32	s15, s0
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	edc3 7a07 	vstr	s15, [r3, #28]
                distance_local += vx_t * dt;
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	ed93 7a08 	vldr	s14, [r3, #32]
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	edd3 6a00 	vldr	s13, [r3]
 8009ab8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009abc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	edc3 7a08 	vstr	s15, [r3, #32]
            }
#ifdef SIMULATION
            odom_timestamp_ = update_timestamp > odom_timestamp_ ? update_timestamp : odom_timestamp_;
#endif
            return {vx_t, x_t, y_t, theta_t};
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	61bb      	str	r3, [r7, #24]
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	61fb      	str	r3, [r7, #28]
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	623b      	str	r3, [r7, #32]
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	691b      	ldr	r3, [r3, #16]
 8009ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8009ae2:	69b8      	ldr	r0, [r7, #24]
 8009ae4:	69f9      	ldr	r1, [r7, #28]
 8009ae6:	6a3a      	ldr	r2, [r7, #32]
 8009ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aea:	ee06 0a10 	vmov	s12, r0
 8009aee:	ee06 1a90 	vmov	s13, r1
 8009af2:	ee07 2a10 	vmov	s14, r2
 8009af6:	ee07 3a90 	vmov	s15, r3
        }
 8009afa:	eeb0 0a46 	vmov.f32	s0, s12
 8009afe:	eef0 0a66 	vmov.f32	s1, s13
 8009b02:	eeb0 1a47 	vmov.f32	s2, s14
 8009b06:	eef0 1a67 	vmov.f32	s3, s15
 8009b0a:	3730      	adds	r7, #48	; 0x30
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	ecbd 8b02 	vpop	{d8}
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	f3af 8000 	nop.w
 8009b18:	eb851eb8 	.word	0xeb851eb8
 8009b1c:	3f9eb851 	.word	0x3f9eb851
 8009b20:	eb851eb8 	.word	0xeb851eb8
 8009b24:	3f8eb851 	.word	0x3f8eb851
 8009b28:	447a0000 	.word	0x447a0000

08009b2c <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    fmod(_Tp __x, _Up __y)
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	ed87 0a03 	vstr	s0, [r7, #12]
 8009b36:	ed87 1b00 	vstr	d1, [r7]
      return fmod(__type(__x), __type(__y));
 8009b3a:	68f8      	ldr	r0, [r7, #12]
 8009b3c:	f7f6 fcf6 	bl	800052c <__aeabi_f2d>
 8009b40:	4602      	mov	r2, r0
 8009b42:	460b      	mov	r3, r1
 8009b44:	ed97 1b00 	vldr	d1, [r7]
 8009b48:	ec43 2b10 	vmov	d0, r2, r3
 8009b4c:	f01b ff7e 	bl	8025a4c <fmod>
 8009b50:	eeb0 7a40 	vmov.f32	s14, s0
 8009b54:	eef0 7a60 	vmov.f32	s15, s1
    }
 8009b58:	eeb0 0a47 	vmov.f32	s0, s14
 8009b5c:	eef0 0a67 	vmov.f32	s1, s15
 8009b60:	3710      	adds	r7, #16
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
	...

08009b68 <_ZN3jlb8Odometry15normalize_angleEf>:

        float normalize_angle(float angle)
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	ed87 0a00 	vstr	s0, [r7]
        {
            angle = std::fmod(angle, 2.0f * M_PI);
 8009b74:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8009bd0 <_ZN3jlb8Odometry15normalize_angleEf+0x68>
 8009b78:	ed97 0a00 	vldr	s0, [r7]
 8009b7c:	f7ff ffd6 	bl	8009b2c <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8009b80:	ec53 2b10 	vmov	r2, r3, d0
 8009b84:	4610      	mov	r0, r2
 8009b86:	4619      	mov	r1, r3
 8009b88:	f7f7 f820 	bl	8000bcc <__aeabi_d2f>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	603b      	str	r3, [r7, #0]
            if (angle < 0.0f) { angle += 2.0f * M_PI; }
 8009b90:	edd7 7a00 	vldr	s15, [r7]
 8009b94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b9c:	d50f      	bpl.n	8009bbe <_ZN3jlb8Odometry15normalize_angleEf+0x56>
 8009b9e:	6838      	ldr	r0, [r7, #0]
 8009ba0:	f7f6 fcc4 	bl	800052c <__aeabi_f2d>
 8009ba4:	a30a      	add	r3, pc, #40	; (adr r3, 8009bd0 <_ZN3jlb8Odometry15normalize_angleEf+0x68>)
 8009ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009baa:	f7f6 fb61 	bl	8000270 <__adddf3>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	4610      	mov	r0, r2
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	f7f7 f809 	bl	8000bcc <__aeabi_d2f>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	603b      	str	r3, [r7, #0]
            return angle;
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	ee07 3a90 	vmov	s15, r3
        }
 8009bc4:	eeb0 0a67 	vmov.f32	s0, s15
 8009bc8:	3708      	adds	r7, #8
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	bf00      	nop
 8009bd0:	54442d18 	.word	0x54442d18
 8009bd4:	401921fb 	.word	0x401921fb

08009bd8 <_ZN3jlb8Odometry10correctionEff>:

        void correction([[maybe_unused]] float x_t_, [[maybe_unused]] float y_t_)
 8009bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009bdc:	b094      	sub	sp, #80	; 0x50
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6178      	str	r0, [r7, #20]
 8009be2:	ed87 0a04 	vstr	s0, [r7, #16]
 8009be6:	edc7 0a03 	vstr	s1, [r7, #12]
        {
            x_t = x_t_ - (SENSOR_BASE / 2.0f * std::cos(theta_t));
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	edd3 7a04 	vldr	s15, [r3, #16]
 8009bf0:	eeb0 0a67 	vmov.f32	s0, s15
 8009bf4:	f7fa fd7c 	bl	80046f0 <_ZSt3cosf>
 8009bf8:	eef0 7a40 	vmov.f32	s15, s0
 8009bfc:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8009c00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c04:	ed97 7a04 	vldr	s14, [r7, #16]
 8009c08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	edc3 7a02 	vstr	s15, [r3, #8]
            y_t = y_t_ - (SENSOR_BASE / 2.0f * std::sin(theta_t));
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	edd3 7a04 	vldr	s15, [r3, #16]
 8009c18:	eeb0 0a67 	vmov.f32	s0, s15
 8009c1c:	f7fa fd88 	bl	8004730 <_ZSt3sinf>
 8009c20:	eef0 7a40 	vmov.f32	s15, s0
 8009c24:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8009c28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c2c:	ed97 7a03 	vldr	s14, [r7, #12]
 8009c30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	edc3 7a03 	vstr	s15, [r3, #12]

            // clamp theta to certain values whichever is closer
            // the values are 0, 90, 180, 270, 360

            float theta_0   = std::fabs(theta_t);
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	edd3 7a04 	vldr	s15, [r3, #16]
 8009c40:	eeb0 0a67 	vmov.f32	s0, s15
 8009c44:	f7fa fd64 	bl	8004710 <_ZSt4fabsf>
 8009c48:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
            float theta_90  = std::fabs(theta_t - M_PI / 2.0f);
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7f6 fc6b 	bl	800052c <__aeabi_f2d>
 8009c56:	a39e      	add	r3, pc, #632	; (adr r3, 8009ed0 <_ZN3jlb8Odometry10correctionEff+0x2f8>)
 8009c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5c:	f7f6 fb06 	bl	800026c <__aeabi_dsub>
 8009c60:	4602      	mov	r2, r0
 8009c62:	460b      	mov	r3, r1
 8009c64:	603a      	str	r2, [r7, #0]
 8009c66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c6a:	607b      	str	r3, [r7, #4]
 8009c6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c70:	f7f6 ffac 	bl	8000bcc <__aeabi_d2f>
 8009c74:	4603      	mov	r3, r0
 8009c76:	64bb      	str	r3, [r7, #72]	; 0x48
            float theta_180 = std::fabs(theta_t - M_PI);
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	691b      	ldr	r3, [r3, #16]
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7f6 fc55 	bl	800052c <__aeabi_f2d>
 8009c82:	a395      	add	r3, pc, #596	; (adr r3, 8009ed8 <_ZN3jlb8Odometry10correctionEff+0x300>)
 8009c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c88:	f7f6 faf0 	bl	800026c <__aeabi_dsub>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	460b      	mov	r3, r1
 8009c90:	4692      	mov	sl, r2
 8009c92:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8009c96:	4650      	mov	r0, sl
 8009c98:	4659      	mov	r1, fp
 8009c9a:	f7f6 ff97 	bl	8000bcc <__aeabi_d2f>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	647b      	str	r3, [r7, #68]	; 0x44
            float theta_270 = std::fabs(theta_t - 3.0f * M_PI / 2.0f);
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	691b      	ldr	r3, [r3, #16]
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7f6 fc40 	bl	800052c <__aeabi_f2d>
 8009cac:	a38c      	add	r3, pc, #560	; (adr r3, 8009ee0 <_ZN3jlb8Odometry10correctionEff+0x308>)
 8009cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb2:	f7f6 fadb 	bl	800026c <__aeabi_dsub>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	460b      	mov	r3, r1
 8009cba:	4690      	mov	r8, r2
 8009cbc:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8009cc0:	4640      	mov	r0, r8
 8009cc2:	4649      	mov	r1, r9
 8009cc4:	f7f6 ff82 	bl	8000bcc <__aeabi_d2f>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	643b      	str	r3, [r7, #64]	; 0x40
            float theta_360 = std::fabs(theta_t - 2.0f * M_PI);
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	691b      	ldr	r3, [r3, #16]
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7f6 fc2b 	bl	800052c <__aeabi_f2d>
 8009cd6:	a384      	add	r3, pc, #528	; (adr r3, 8009ee8 <_ZN3jlb8Odometry10correctionEff+0x310>)
 8009cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cdc:	f7f6 fac6 	bl	800026c <__aeabi_dsub>
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	4614      	mov	r4, r2
 8009ce6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8009cea:	4620      	mov	r0, r4
 8009cec:	4629      	mov	r1, r5
 8009cee:	f7f6 ff6d 	bl	8000bcc <__aeabi_d2f>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	63fb      	str	r3, [r7, #60]	; 0x3c

            float min_theta = std::min({theta_0, theta_90, theta_180, theta_270, theta_360});
 8009cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8009cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8009cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d04:	633b      	str	r3, [r7, #48]	; 0x30
 8009d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d08:	637b      	str	r3, [r7, #52]	; 0x34
 8009d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d0e:	61fb      	str	r3, [r7, #28]
 8009d10:	2305      	movs	r3, #5
 8009d12:	623b      	str	r3, [r7, #32]
 8009d14:	f107 031c 	add.w	r3, r7, #28
 8009d18:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009d1c:	f004 fa81 	bl	800e222 <_ZSt3minIfET_St16initializer_listIS0_E>
 8009d20:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

            if (min_theta == theta_0) { theta_t = (theta_t + 0.0f) / 2.0f; }
 8009d24:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009d28:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8009d2c:	eeb4 7a67 	vcmp.f32	s14, s15
 8009d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d34:	d10e      	bne.n	8009d54 <_ZN3jlb8Odometry10correctionEff+0x17c>
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	edd3 7a04 	vldr	s15, [r3, #16]
 8009d3c:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8009ef0 <_ZN3jlb8Odometry10correctionEff+0x318>
 8009d40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d44:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009d48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	edc3 7a04 	vstr	s15, [r3, #16]
 8009d52:	e09a      	b.n	8009e8a <_ZN3jlb8Odometry10correctionEff+0x2b2>
            else if (min_theta == theta_90) { theta_t = (theta_t + M_PI / 2.0f) / 2.0f; }
 8009d54:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009d58:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009d5c:	eeb4 7a67 	vcmp.f32	s14, s15
 8009d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d64:	d11d      	bne.n	8009da2 <_ZN3jlb8Odometry10correctionEff+0x1ca>
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	691b      	ldr	r3, [r3, #16]
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7f6 fbde 	bl	800052c <__aeabi_f2d>
 8009d70:	a357      	add	r3, pc, #348	; (adr r3, 8009ed0 <_ZN3jlb8Odometry10correctionEff+0x2f8>)
 8009d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d76:	f7f6 fa7b 	bl	8000270 <__adddf3>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	4610      	mov	r0, r2
 8009d80:	4619      	mov	r1, r3
 8009d82:	f04f 0200 	mov.w	r2, #0
 8009d86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009d8a:	f7f6 fd51 	bl	8000830 <__aeabi_ddiv>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	460b      	mov	r3, r1
 8009d92:	4610      	mov	r0, r2
 8009d94:	4619      	mov	r1, r3
 8009d96:	f7f6 ff19 	bl	8000bcc <__aeabi_d2f>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	611a      	str	r2, [r3, #16]
 8009da0:	e073      	b.n	8009e8a <_ZN3jlb8Odometry10correctionEff+0x2b2>
            else if (min_theta == theta_180) { theta_t = (theta_t + M_PI) / 2.0f; }
 8009da2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009da6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009daa:	eeb4 7a67 	vcmp.f32	s14, s15
 8009dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009db2:	d11d      	bne.n	8009df0 <_ZN3jlb8Odometry10correctionEff+0x218>
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	691b      	ldr	r3, [r3, #16]
 8009db8:	4618      	mov	r0, r3
 8009dba:	f7f6 fbb7 	bl	800052c <__aeabi_f2d>
 8009dbe:	a346      	add	r3, pc, #280	; (adr r3, 8009ed8 <_ZN3jlb8Odometry10correctionEff+0x300>)
 8009dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc4:	f7f6 fa54 	bl	8000270 <__adddf3>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	460b      	mov	r3, r1
 8009dcc:	4610      	mov	r0, r2
 8009dce:	4619      	mov	r1, r3
 8009dd0:	f04f 0200 	mov.w	r2, #0
 8009dd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009dd8:	f7f6 fd2a 	bl	8000830 <__aeabi_ddiv>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	460b      	mov	r3, r1
 8009de0:	4610      	mov	r0, r2
 8009de2:	4619      	mov	r1, r3
 8009de4:	f7f6 fef2 	bl	8000bcc <__aeabi_d2f>
 8009de8:	4602      	mov	r2, r0
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	611a      	str	r2, [r3, #16]
 8009dee:	e04c      	b.n	8009e8a <_ZN3jlb8Odometry10correctionEff+0x2b2>
            else if (min_theta == theta_270) { theta_t = (theta_t + 3.0f * M_PI / 2.0f) / 2.0f; }
 8009df0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009df4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8009df8:	eeb4 7a67 	vcmp.f32	s14, s15
 8009dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e00:	d11d      	bne.n	8009e3e <_ZN3jlb8Odometry10correctionEff+0x266>
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	691b      	ldr	r3, [r3, #16]
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7f6 fb90 	bl	800052c <__aeabi_f2d>
 8009e0c:	a334      	add	r3, pc, #208	; (adr r3, 8009ee0 <_ZN3jlb8Odometry10correctionEff+0x308>)
 8009e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e12:	f7f6 fa2d 	bl	8000270 <__adddf3>
 8009e16:	4602      	mov	r2, r0
 8009e18:	460b      	mov	r3, r1
 8009e1a:	4610      	mov	r0, r2
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	f04f 0200 	mov.w	r2, #0
 8009e22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009e26:	f7f6 fd03 	bl	8000830 <__aeabi_ddiv>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	4610      	mov	r0, r2
 8009e30:	4619      	mov	r1, r3
 8009e32:	f7f6 fecb 	bl	8000bcc <__aeabi_d2f>
 8009e36:	4602      	mov	r2, r0
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	611a      	str	r2, [r3, #16]
 8009e3c:	e025      	b.n	8009e8a <_ZN3jlb8Odometry10correctionEff+0x2b2>
            else if (min_theta == theta_360) { theta_t = (theta_t + 2.0f * M_PI) / 2.0f; }
 8009e3e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009e42:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009e46:	eeb4 7a67 	vcmp.f32	s14, s15
 8009e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e4e:	d11c      	bne.n	8009e8a <_ZN3jlb8Odometry10correctionEff+0x2b2>
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	691b      	ldr	r3, [r3, #16]
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7f6 fb69 	bl	800052c <__aeabi_f2d>
 8009e5a:	a323      	add	r3, pc, #140	; (adr r3, 8009ee8 <_ZN3jlb8Odometry10correctionEff+0x310>)
 8009e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e60:	f7f6 fa06 	bl	8000270 <__adddf3>
 8009e64:	4602      	mov	r2, r0
 8009e66:	460b      	mov	r3, r1
 8009e68:	4610      	mov	r0, r2
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	f04f 0200 	mov.w	r2, #0
 8009e70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009e74:	f7f6 fcdc 	bl	8000830 <__aeabi_ddiv>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	4610      	mov	r0, r2
 8009e7e:	4619      	mov	r1, r3
 8009e80:	f7f6 fea4 	bl	8000bcc <__aeabi_d2f>
 8009e84:	4602      	mov	r2, r0
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	611a      	str	r2, [r3, #16]

            theta_t = normalize_angle(theta_t);
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	edd3 7a04 	vldr	s15, [r3, #16]
 8009e90:	eeb0 0a67 	vmov.f32	s0, s15
 8009e94:	6978      	ldr	r0, [r7, #20]
 8009e96:	f7ff fe67 	bl	8009b68 <_ZN3jlb8Odometry15normalize_angleEf>
 8009e9a:	eef0 7a40 	vmov.f32	s15, s0
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	edc3 7a04 	vstr	s15, [r3, #16]

            x_t_local      = 0.0f;
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	f04f 0200 	mov.w	r2, #0
 8009eaa:	615a      	str	r2, [r3, #20]
            y_t_local      = 0.0f;
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	f04f 0200 	mov.w	r2, #0
 8009eb2:	619a      	str	r2, [r3, #24]
            theta_t_local  = 0.0f;
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	f04f 0200 	mov.w	r2, #0
 8009eba:	61da      	str	r2, [r3, #28]
            distance_local = 0.0f;
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	f04f 0200 	mov.w	r2, #0
 8009ec2:	621a      	str	r2, [r3, #32]
        }
 8009ec4:	bf00      	nop
 8009ec6:	3750      	adds	r7, #80	; 0x50
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ece:	bf00      	nop
 8009ed0:	54442d18 	.word	0x54442d18
 8009ed4:	3ff921fb 	.word	0x3ff921fb
 8009ed8:	54442d18 	.word	0x54442d18
 8009edc:	400921fb 	.word	0x400921fb
 8009ee0:	7f3321d2 	.word	0x7f3321d2
 8009ee4:	4012d97c 	.word	0x4012d97c
 8009ee8:	54442d18 	.word	0x54442d18
 8009eec:	401921fb 	.word	0x401921fb
 8009ef0:	00000000 	.word	0x00000000

08009ef4 <_ZN3jlb14CompositeStateC1ENS_9FastStateE>:
        Mission        mission;
        LabyrinthState labyrinth_state;
        FastState      fast_state;
        float          reference_speed = 0.0f;

        CompositeState(FastState fast_state_) : mission{Mission::FAST}, labyrinth_state{LabyrinthState::START}, fast_state{fast_state_}, reference_speed{0.0f} {}
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2201      	movs	r2, #1
 8009f02:	601a      	str	r2, [r3, #0]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	605a      	str	r2, [r3, #4]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	683a      	ldr	r2, [r7, #0]
 8009f0e:	609a      	str	r2, [r3, #8]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f04f 0200 	mov.w	r2, #0
 8009f16:	60da      	str	r2, [r3, #12]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	370c      	adds	r7, #12
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr

08009f26 <_ZN3jlb14CompositeStateC1ENS_7MissionENS_14LabyrinthStateENS_9FastStateEf>:
        CompositeState(LabyrinthState labyrinth_state_) : mission{Mission::LABYRINTH}, labyrinth_state{labyrinth_state_}, fast_state{FastState::FOLLOW_SAFETY_CAR}, reference_speed{0.0f} {}
        CompositeState(Mission mission_, LabyrinthState labyrinth_state_, FastState fast_state_, float reference_speed_)
 8009f26:	b480      	push	{r7}
 8009f28:	b087      	sub	sp, #28
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6178      	str	r0, [r7, #20]
 8009f2e:	6139      	str	r1, [r7, #16]
 8009f30:	60fa      	str	r2, [r7, #12]
 8009f32:	60bb      	str	r3, [r7, #8]
 8009f34:	ed87 0a01 	vstr	s0, [r7, #4]
            : mission{mission_}, labyrinth_state{labyrinth_state_}, fast_state{fast_state_}, reference_speed{reference_speed_}
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	693a      	ldr	r2, [r7, #16]
 8009f3c:	601a      	str	r2, [r3, #0]
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	68fa      	ldr	r2, [r7, #12]
 8009f42:	605a      	str	r2, [r3, #4]
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	68ba      	ldr	r2, [r7, #8]
 8009f48:	609a      	str	r2, [r3, #8]
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	60da      	str	r2, [r3, #12]
        {
        }
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	4618      	mov	r0, r3
 8009f54:	371c      	adds	r7, #28
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr

08009f5e <_ZN3jlb7ASStateC1ERNS_8OdometryERNS_10ControllerERNS_5GraphE>:
        char                              goal_node     = 'U';
        std::vector<std::pair<char, int>> goal_path;
        int                               path_idx      = 0;
        unsigned long                     selected_edge = 0u;

        ASState(Odometry& odometry_, Controller& controller_, Graph& graph_) : odometry{odometry_}, controller{controller_}, graph{graph_} {}
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b084      	sub	sp, #16
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	60f8      	str	r0, [r7, #12]
 8009f66:	60b9      	str	r1, [r7, #8]
 8009f68:	607a      	str	r2, [r7, #4]
 8009f6a:	603b      	str	r3, [r7, #0]
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	601a      	str	r2, [r3, #0]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2200      	movs	r2, #0
 8009f76:	605a      	str	r2, [r3, #4]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	609a      	str	r2, [r3, #8]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f04f 0200 	mov.w	r2, #0
 8009f84:	60da      	str	r2, [r3, #12]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	741a      	strb	r2, [r3, #16]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	745a      	strb	r2, [r3, #17]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2200      	movs	r2, #0
 8009f96:	749a      	strb	r2, [r3, #18]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	74da      	strb	r2, [r3, #19]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f04f 0200 	mov.w	r2, #0
 8009fa4:	615a      	str	r2, [r3, #20]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f04f 0200 	mov.w	r2, #0
 8009fac:	619a      	str	r2, [r3, #24]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	771a      	strb	r2, [r3, #28]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	621a      	str	r2, [r3, #32]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	625a      	str	r2, [r3, #36]	; 0x24
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2255      	movs	r2, #85	; 0x55
 8009fc4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2255      	movs	r2, #85	; 0x55
 8009fcc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2255      	movs	r2, #85	; 0x55
 8009fd4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	332c      	adds	r3, #44	; 0x2c
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f7fe fdde 	bl	8008b9e <_ZNSt6vectorISt4pairIciESaIS1_EEC1Ev>
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	639a      	str	r2, [r3, #56]	; 0x38
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2200      	movs	r2, #0
 8009fec:	63da      	str	r2, [r3, #60]	; 0x3c
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	68ba      	ldr	r2, [r7, #8]
 8009ff2:	641a      	str	r2, [r3, #64]	; 0x40
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	645a      	str	r2, [r3, #68]	; 0x44
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	683a      	ldr	r2, [r7, #0]
 8009ffe:	649a      	str	r2, [r3, #72]	; 0x48
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	4618      	mov	r0, r3
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <_ZN3jlb7ASState10set_statesENS_14CompositeStateE>:

        void set_states(const CompositeState state_)
 800a00a:	b084      	sub	sp, #16
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	f107 0014 	add.w	r0, r7, #20
 800a018:	e880 000e 	stmia.w	r0, {r1, r2, r3}
        {
            mission         = state_.mission;
 800a01c:	697a      	ldr	r2, [r7, #20]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	601a      	str	r2, [r3, #0]
            labyrinth_state = state_.labyrinth_state;
 800a022:	69ba      	ldr	r2, [r7, #24]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	605a      	str	r2, [r3, #4]
            fast_state      = state_.fast_state;
 800a028:	69fa      	ldr	r2, [r7, #28]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	609a      	str	r2, [r3, #8]
        }
 800a02e:	bf00      	nop
 800a030:	370c      	adds	r7, #12
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	b004      	add	sp, #16
 800a03a:	4770      	bx	lr

0800a03c <_ZN3jlb7ASState6updateEv>:

        CompositeState update()
 800a03c:	b590      	push	{r4, r7, lr}
 800a03e:	ed2d 8b02 	vpush	{d8}
 800a042:	b08b      	sub	sp, #44	; 0x2c
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
        {
#ifndef SIMULATION
            // TODO: add timestamp
            tick_counter_prev = tick_counter;
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	6a1a      	ldr	r2, [r3, #32]
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	625a      	str	r2, [r3, #36]	; 0x24
            tick_counter      = HAL_GetTick();
 800a052:	f00e fdff 	bl	8018c54 <HAL_GetTick>
 800a056:	4602      	mov	r2, r0
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	621a      	str	r2, [r3, #32]
            float dt          = (((float)tick_counter) - ((float)(tick_counter_prev))) / 1000.0f;
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	6a1b      	ldr	r3, [r3, #32]
 800a060:	ee07 3a90 	vmov	s15, r3
 800a064:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06c:	ee07 3a90 	vmov	s15, r3
 800a070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a074:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a078:	eddf 6aaa 	vldr	s13, [pc, #680]	; 800a324 <_ZN3jlb7ASState6updateEv+0x2e8>
 800a07c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a080:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            auto                   update_timestamp_ = std::chrono::steady_clock::now();
            [[maybe_unused]] float dt                = std::chrono::duration_cast<std::chrono::milliseconds>(update_timestamp_ - prev_update_timestamp_).count() / 1000.0f;
            prev_update_timestamp_                   = update_timestamp_;
#endif

            state_transition_time += dt;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	ed93 7a06 	vldr	s14, [r3, #24]
 800a08a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a08e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	edc3 7a06 	vstr	s15, [r3, #24]
            state_time += dt;
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	ed93 7a05 	vldr	s14, [r3, #20]
 800a09e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a0a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	edc3 7a05 	vstr	s15, [r3, #20]

            switch (mission)
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d003      	beq.n	800a0bc <_ZN3jlb7ASState6updateEv+0x80>
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	f000 80fd 	beq.w	800a2b4 <_ZN3jlb7ASState6updateEv+0x278>
                    break;
                }
                default:
                {
                    // this should never happen
                    break;
 800a0ba:	e22a      	b.n	800a512 <_ZN3jlb7ASState6updateEv+0x4d6>
                    bool at_decision_point = under_gate || at_cross_section;
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	7c1b      	ldrb	r3, [r3, #16]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d103      	bne.n	800a0cc <_ZN3jlb7ASState6updateEv+0x90>
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	7c5b      	ldrb	r3, [r3, #17]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d001      	beq.n	800a0d0 <_ZN3jlb7ASState6updateEv+0x94>
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e000      	b.n	800a0d2 <_ZN3jlb7ASState6updateEv+0x96>
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                    if (!prev_at_decision_point && at_decision_point)
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	7c9b      	ldrb	r3, [r3, #18]
 800a0da:	f083 0301 	eor.w	r3, r3, #1
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	f000 80de 	beq.w	800a2a2 <_ZN3jlb7ASState6updateEv+0x266>
 800a0e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	f000 80d9 	beq.w	800a2a2 <_ZN3jlb7ASState6updateEv+0x266>
                        auto distance = graph[previous_node].edges[selected_edge].distance;
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	4610      	mov	r0, r2
 800a0fe:	f7fe fca3 	bl	8008a48 <_ZN3jlb5GraphixEc>
 800a102:	4603      	mov	r3, r0
 800a104:	f103 020c 	add.w	r2, r3, #12
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a10c:	4619      	mov	r1, r3
 800a10e:	4610      	mov	r0, r2
 800a110:	f003 fc78 	bl	800da04 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 800a114:	4603      	mov	r3, r0
 800a116:	695b      	ldr	r3, [r3, #20]
 800a118:	61fb      	str	r3, [r7, #28]
                        if (std::fabs(distance - odometry.distance_local) < LOCALIZATION_INACCURACY || labyrinth_state == LabyrinthState::START)
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a11e:	edd3 7a08 	vldr	s15, [r3, #32]
 800a122:	ed97 7a07 	vldr	s14, [r7, #28]
 800a126:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a12a:	eeb0 0a67 	vmov.f32	s0, s15
 800a12e:	f7fa faef 	bl	8004710 <_ZSt4fabsf>
 800a132:	eef0 7a40 	vmov.f32	s15, s0
 800a136:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800a328 <_ZN3jlb7ASState6updateEv+0x2ec>
 800a13a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a13e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a142:	d403      	bmi.n	800a14c <_ZN3jlb7ASState6updateEv+0x110>
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d101      	bne.n	800a150 <_ZN3jlb7ASState6updateEv+0x114>
 800a14c:	2301      	movs	r3, #1
 800a14e:	e000      	b.n	800a152 <_ZN3jlb7ASState6updateEv+0x116>
 800a150:	2300      	movs	r3, #0
 800a152:	2b00      	cmp	r3, #0
 800a154:	f000 80a5 	beq.w	800a2a2 <_ZN3jlb7ASState6updateEv+0x266>
                            if (labyrinth_state == LabyrinthState::START) { labyrinth_state = LabyrinthState::EXPLORING; }
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d102      	bne.n	800a166 <_ZN3jlb7ASState6updateEv+0x12a>
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	2201      	movs	r2, #1
 800a164:	605a      	str	r2, [r3, #4]
                            auto at_node = next_node;
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800a16c:	76fb      	strb	r3, [r7, #27]
                            if (at_node == goal_node)
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800a174:	7efa      	ldrb	r2, [r7, #27]
 800a176:	429a      	cmp	r2, r3
 800a178:	d136      	bne.n	800a1e8 <_ZN3jlb7ASState6updateEv+0x1ac>
                                auto [node, path] = graph.Dijkstra(previous_node, at_node);
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800a184:	f107 0008 	add.w	r0, r7, #8
 800a188:	7efb      	ldrb	r3, [r7, #27]
 800a18a:	f7fe fe27 	bl	8008ddc <_ZN3jlb5Graph8DijkstraEcc>
 800a18e:	7a3a      	ldrb	r2, [r7, #8]
                                goal_node         = node;
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
                                goal_path         = path;
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800a19c:	f107 0308 	add.w	r3, r7, #8
 800a1a0:	3304      	adds	r3, #4
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	4610      	mov	r0, r2
 800a1a6:	f003 fcb9 	bl	800db1c <_ZNSt6vectorISt4pairIciESaIS1_EEaSERKS3_>
                                next_node         = goal_path[1].first;
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	332c      	adds	r3, #44	; 0x2c
 800a1ae:	2101      	movs	r1, #1
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f003 fe47 	bl	800de44 <_ZNSt6vectorISt4pairIciESaIS1_EEixEj>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	781a      	ldrb	r2, [r3, #0]
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                selected_edge     = goal_path[1].second;
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	332c      	adds	r3, #44	; 0x2c
 800a1c4:	2101      	movs	r1, #1
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f003 fe3c 	bl	800de44 <_ZNSt6vectorISt4pairIciESaIS1_EEixEj>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	63da      	str	r2, [r3, #60]	; 0x3c
                                path_idx          = 0;
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	639a      	str	r2, [r3, #56]	; 0x38
                            }
 800a1dc:	f107 0308 	add.w	r3, r7, #8
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f7fe fded 	bl	8008dc0 <_ZN3jlb14DijkstraResultD1Ev>
 800a1e6:	e01f      	b.n	800a228 <_ZN3jlb7ASState6updateEv+0x1ec>
                                next_node     = goal_path[++path_idx].first;
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1f2:	1c5a      	adds	r2, r3, #1
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	639a      	str	r2, [r3, #56]	; 0x38
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	f003 fe21 	bl	800de44 <_ZNSt6vectorISt4pairIciESaIS1_EEixEj>
 800a202:	4603      	mov	r3, r0
 800a204:	781a      	ldrb	r2, [r3, #0]
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                selected_edge = goal_path[path_idx].second;
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a216:	4619      	mov	r1, r3
 800a218:	4610      	mov	r0, r2
 800a21a:	f003 fe13 	bl	800de44 <_ZNSt6vectorISt4pairIciESaIS1_EEixEj>
 800a21e:	4603      	mov	r3, r0
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	461a      	mov	r2, r3
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	63da      	str	r2, [r3, #60]	; 0x3c
                            previous_node = at_node;
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	7efa      	ldrb	r2, [r7, #27]
 800a22c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            controller.set_direction(graph[at_node].edges[selected_edge].direction);
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a238:	7efa      	ldrb	r2, [r7, #27]
 800a23a:	4611      	mov	r1, r2
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7fe fc03 	bl	8008a48 <_ZN3jlb5GraphixEc>
 800a242:	4603      	mov	r3, r0
 800a244:	f103 020c 	add.w	r2, r3, #12
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a24c:	4619      	mov	r1, r3
 800a24e:	4610      	mov	r0, r2
 800a250:	f003 fbd8 	bl	800da04 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 800a254:	4603      	mov	r3, r0
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	4619      	mov	r1, r3
 800a25a:	4620      	mov	r0, r4
 800a25c:	f7fb f843 	bl	80052e6 <_ZN3jlb10Controller13set_directionENS_9DirectionE>
                            odometry.correction(graph[previous_node].x, graph[previous_node].y);
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a26e:	4619      	mov	r1, r3
 800a270:	4610      	mov	r0, r2
 800a272:	f7fe fbe9 	bl	8008a48 <_ZN3jlb5GraphixEc>
 800a276:	4603      	mov	r3, r0
 800a278:	ed93 8a01 	vldr	s16, [r3, #4]
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a286:	4619      	mov	r1, r3
 800a288:	4610      	mov	r0, r2
 800a28a:	f7fe fbdd 	bl	8008a48 <_ZN3jlb5GraphixEc>
 800a28e:	4603      	mov	r3, r0
 800a290:	edd3 7a02 	vldr	s15, [r3, #8]
 800a294:	eef0 0a67 	vmov.f32	s1, s15
 800a298:	eeb0 0a48 	vmov.f32	s0, s16
 800a29c:	4620      	mov	r0, r4
 800a29e:	f7ff fc9b 	bl	8009bd8 <_ZN3jlb8Odometry10correctionEff>
                    prev_at_decision_point = at_decision_point;
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800a2a8:	749a      	strb	r2, [r3, #18]
                    reference_speed = LABYRINTH_SPEED;
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a2b0:	60da      	str	r2, [r3, #12]
                    break;
 800a2b2:	e12e      	b.n	800a512 <_ZN3jlb7ASState6updateEv+0x4d6>
                    switch (fast_state)
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	689b      	ldr	r3, [r3, #8]
 800a2b8:	2b06      	cmp	r3, #6
 800a2ba:	f200 8128 	bhi.w	800a50e <_ZN3jlb7ASState6updateEv+0x4d2>
 800a2be:	a201      	add	r2, pc, #4	; (adr r2, 800a2c4 <_ZN3jlb7ASState6updateEv+0x288>)
 800a2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c4:	0800a2e1 	.word	0x0800a2e1
 800a2c8:	0800a2eb 	.word	0x0800a2eb
 800a2cc:	0800a2f5 	.word	0x0800a2f5
 800a2d0:	0800a2fd 	.word	0x0800a2fd
 800a2d4:	0800a38b 	.word	0x0800a38b
 800a2d8:	0800a40b 	.word	0x0800a40b
 800a2dc:	0800a48d 	.word	0x0800a48d
                            reference_speed = FAST_SPEED_SAFETY_CAR;
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a2e6:	60da      	str	r2, [r3, #12]
                            break;
 800a2e8:	e112      	b.n	800a510 <_ZN3jlb7ASState6updateEv+0x4d4>
                            reference_speed = FAST_SPEED_OVERTAKE;
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a2f0:	60da      	str	r2, [r3, #12]
                            break;
 800a2f2:	e10d      	b.n	800a510 <_ZN3jlb7ASState6updateEv+0x4d4>
                            reference_speed = FAST_SPEED;
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	4a0d      	ldr	r2, [pc, #52]	; (800a32c <_ZN3jlb7ASState6updateEv+0x2f0>)
 800a2f8:	60da      	str	r2, [r3, #12]
                            break;
 800a2fa:	e109      	b.n	800a510 <_ZN3jlb7ASState6updateEv+0x4d4>
                            if (current_number_of_lines == 1u && !started_state_transition)
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	7cdb      	ldrb	r3, [r3, #19]
 800a300:	2b01      	cmp	r3, #1
 800a302:	d115      	bne.n	800a330 <_ZN3jlb7ASState6updateEv+0x2f4>
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	7f1b      	ldrb	r3, [r3, #28]
 800a308:	f083 0301 	eor.w	r3, r3, #1
 800a30c:	b2db      	uxtb	r3, r3
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d00e      	beq.n	800a330 <_ZN3jlb7ASState6updateEv+0x2f4>
                                started_state_transition = true;
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	2201      	movs	r2, #1
 800a316:	771a      	strb	r2, [r3, #28]
                                state_transition_time    = 0.0f;
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	f04f 0200 	mov.w	r2, #0
 800a31e:	619a      	str	r2, [r3, #24]
 800a320:	e011      	b.n	800a346 <_ZN3jlb7ASState6updateEv+0x30a>
 800a322:	bf00      	nop
 800a324:	447a0000 	.word	0x447a0000
 800a328:	3dcccccd 	.word	0x3dcccccd
 800a32c:	40900000 	.word	0x40900000
                            else if (current_number_of_lines != 1u && started_state_transition) { started_state_transition = false; }
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	7cdb      	ldrb	r3, [r3, #19]
 800a334:	2b01      	cmp	r3, #1
 800a336:	d006      	beq.n	800a346 <_ZN3jlb7ASState6updateEv+0x30a>
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	7f1b      	ldrb	r3, [r3, #28]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d002      	beq.n	800a346 <_ZN3jlb7ASState6updateEv+0x30a>
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	2200      	movs	r2, #0
 800a344:	771a      	strb	r2, [r3, #28]
                            if (started_state_transition && state_transition_time > STATE_TRANSITION_TIME_LIMIT && state_time > STATE_MIN_TIME)
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	7f1b      	ldrb	r3, [r3, #28]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d019      	beq.n	800a382 <_ZN3jlb7ASState6updateEv+0x346>
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	edd3 7a06 	vldr	s15, [r3, #24]
 800a354:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a35c:	dd11      	ble.n	800a382 <_ZN3jlb7ASState6updateEv+0x346>
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	edd3 7a05 	vldr	s15, [r3, #20]
 800a364:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a368:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a36c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a370:	dd07      	ble.n	800a382 <_ZN3jlb7ASState6updateEv+0x346>
                                fast_state = FastState::OUT_ACCEL_ZONE;
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	2204      	movs	r2, #4
 800a376:	609a      	str	r2, [r3, #8]
                                state_time = 0.0f;
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	f04f 0200 	mov.w	r2, #0
 800a37e:	615a      	str	r2, [r3, #20]
                                break;
 800a380:	e0c6      	b.n	800a510 <_ZN3jlb7ASState6updateEv+0x4d4>
                            reference_speed = FAST_SPEED;
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	4a6d      	ldr	r2, [pc, #436]	; (800a53c <_ZN3jlb7ASState6updateEv+0x500>)
 800a386:	60da      	str	r2, [r3, #12]
                            break;
 800a388:	e0c2      	b.n	800a510 <_ZN3jlb7ASState6updateEv+0x4d4>
                            if (current_number_of_lines == 3u && !started_state_transition)
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	7cdb      	ldrb	r3, [r3, #19]
 800a38e:	2b03      	cmp	r3, #3
 800a390:	d10e      	bne.n	800a3b0 <_ZN3jlb7ASState6updateEv+0x374>
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	7f1b      	ldrb	r3, [r3, #28]
 800a396:	f083 0301 	eor.w	r3, r3, #1
 800a39a:	b2db      	uxtb	r3, r3
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d007      	beq.n	800a3b0 <_ZN3jlb7ASState6updateEv+0x374>
                                started_state_transition = true;
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	771a      	strb	r2, [r3, #28]
                                state_transition_time    = 0.0f;
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	f04f 0200 	mov.w	r2, #0
 800a3ac:	619a      	str	r2, [r3, #24]
 800a3ae:	e00a      	b.n	800a3c6 <_ZN3jlb7ASState6updateEv+0x38a>
                            else if (current_number_of_lines != 3u && started_state_transition) { started_state_transition = false; }
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	7cdb      	ldrb	r3, [r3, #19]
 800a3b4:	2b03      	cmp	r3, #3
 800a3b6:	d006      	beq.n	800a3c6 <_ZN3jlb7ASState6updateEv+0x38a>
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	7f1b      	ldrb	r3, [r3, #28]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d002      	beq.n	800a3c6 <_ZN3jlb7ASState6updateEv+0x38a>
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	771a      	strb	r2, [r3, #28]
                            if (started_state_transition && state_transition_time > STATE_TRANSITION_TIME_LIMIT && state_time > STATE_MIN_TIME)
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	7f1b      	ldrb	r3, [r3, #28]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d019      	beq.n	800a402 <_ZN3jlb7ASState6updateEv+0x3c6>
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	edd3 7a06 	vldr	s15, [r3, #24]
 800a3d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a3d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3dc:	dd11      	ble.n	800a402 <_ZN3jlb7ASState6updateEv+0x3c6>
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	edd3 7a05 	vldr	s15, [r3, #20]
 800a3e4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a3e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a3ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3f0:	dd07      	ble.n	800a402 <_ZN3jlb7ASState6updateEv+0x3c6>
                                fast_state = FastState::IN_BRAKE_ZONE;
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	2205      	movs	r2, #5
 800a3f6:	609a      	str	r2, [r3, #8]
                                state_time = 0.0f;
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	f04f 0200 	mov.w	r2, #0
 800a3fe:	615a      	str	r2, [r3, #20]
                                break;
 800a400:	e086      	b.n	800a510 <_ZN3jlb7ASState6updateEv+0x4d4>
                            reference_speed = FAST_SPEED;
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	4a4d      	ldr	r2, [pc, #308]	; (800a53c <_ZN3jlb7ASState6updateEv+0x500>)
 800a406:	60da      	str	r2, [r3, #12]
                            break;
 800a408:	e082      	b.n	800a510 <_ZN3jlb7ASState6updateEv+0x4d4>
                            if (current_number_of_lines == 1u && !started_state_transition)
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	7cdb      	ldrb	r3, [r3, #19]
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d10e      	bne.n	800a430 <_ZN3jlb7ASState6updateEv+0x3f4>
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	7f1b      	ldrb	r3, [r3, #28]
 800a416:	f083 0301 	eor.w	r3, r3, #1
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d007      	beq.n	800a430 <_ZN3jlb7ASState6updateEv+0x3f4>
                                started_state_transition = true;
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	2201      	movs	r2, #1
 800a424:	771a      	strb	r2, [r3, #28]
                                state_transition_time    = 0.0f;
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	f04f 0200 	mov.w	r2, #0
 800a42c:	619a      	str	r2, [r3, #24]
 800a42e:	e00a      	b.n	800a446 <_ZN3jlb7ASState6updateEv+0x40a>
                            else if (current_number_of_lines != 1u && started_state_transition) { started_state_transition = false; }
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	7cdb      	ldrb	r3, [r3, #19]
 800a434:	2b01      	cmp	r3, #1
 800a436:	d006      	beq.n	800a446 <_ZN3jlb7ASState6updateEv+0x40a>
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	7f1b      	ldrb	r3, [r3, #28]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d002      	beq.n	800a446 <_ZN3jlb7ASState6updateEv+0x40a>
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	2200      	movs	r2, #0
 800a444:	771a      	strb	r2, [r3, #28]
                            if (started_state_transition && state_transition_time > STATE_TRANSITION_TIME_LIMIT && state_time > STATE_MIN_TIME)
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	7f1b      	ldrb	r3, [r3, #28]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d019      	beq.n	800a482 <_ZN3jlb7ASState6updateEv+0x446>
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	edd3 7a06 	vldr	s15, [r3, #24]
 800a454:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a45c:	dd11      	ble.n	800a482 <_ZN3jlb7ASState6updateEv+0x446>
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	edd3 7a05 	vldr	s15, [r3, #20]
 800a464:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a468:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a46c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a470:	dd07      	ble.n	800a482 <_ZN3jlb7ASState6updateEv+0x446>
                                fast_state = FastState::OUT_BRAKE_ZONE;
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	2206      	movs	r2, #6
 800a476:	609a      	str	r2, [r3, #8]
                                state_time = 0.0f;
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	f04f 0200 	mov.w	r2, #0
 800a47e:	615a      	str	r2, [r3, #20]
                                break;
 800a480:	e046      	b.n	800a510 <_ZN3jlb7ASState6updateEv+0x4d4>
                            reference_speed = FAST_SPEED_TURN;
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800a488:	60da      	str	r2, [r3, #12]
                            break;
 800a48a:	e041      	b.n	800a510 <_ZN3jlb7ASState6updateEv+0x4d4>
                            if (current_number_of_lines == 3u && !started_state_transition)
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	7cdb      	ldrb	r3, [r3, #19]
 800a490:	2b03      	cmp	r3, #3
 800a492:	d10e      	bne.n	800a4b2 <_ZN3jlb7ASState6updateEv+0x476>
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	7f1b      	ldrb	r3, [r3, #28]
 800a498:	f083 0301 	eor.w	r3, r3, #1
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d007      	beq.n	800a4b2 <_ZN3jlb7ASState6updateEv+0x476>
                                started_state_transition = true;
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	771a      	strb	r2, [r3, #28]
                                state_transition_time    = 0.0f;
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	f04f 0200 	mov.w	r2, #0
 800a4ae:	619a      	str	r2, [r3, #24]
 800a4b0:	e00a      	b.n	800a4c8 <_ZN3jlb7ASState6updateEv+0x48c>
                            else if (current_number_of_lines != 3u && started_state_transition) { started_state_transition = false; }
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	7cdb      	ldrb	r3, [r3, #19]
 800a4b6:	2b03      	cmp	r3, #3
 800a4b8:	d006      	beq.n	800a4c8 <_ZN3jlb7ASState6updateEv+0x48c>
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	7f1b      	ldrb	r3, [r3, #28]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d002      	beq.n	800a4c8 <_ZN3jlb7ASState6updateEv+0x48c>
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	771a      	strb	r2, [r3, #28]
                            if (started_state_transition && state_transition_time > STATE_TRANSITION_TIME_LIMIT && state_time > STATE_MIN_TIME)
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	7f1b      	ldrb	r3, [r3, #28]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d019      	beq.n	800a504 <_ZN3jlb7ASState6updateEv+0x4c8>
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	edd3 7a06 	vldr	s15, [r3, #24]
 800a4d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a4da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4de:	dd11      	ble.n	800a504 <_ZN3jlb7ASState6updateEv+0x4c8>
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	edd3 7a05 	vldr	s15, [r3, #20]
 800a4e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a4ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a4ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4f2:	dd07      	ble.n	800a504 <_ZN3jlb7ASState6updateEv+0x4c8>
                                fast_state = FastState::IN_ACCEL_ZONE;
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	2203      	movs	r2, #3
 800a4f8:	609a      	str	r2, [r3, #8]
                                state_time = 0.0f;
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	f04f 0200 	mov.w	r2, #0
 800a500:	615a      	str	r2, [r3, #20]
                                break;
 800a502:	e005      	b.n	800a510 <_ZN3jlb7ASState6updateEv+0x4d4>
                            reference_speed = FAST_SPEED_TURN;
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800a50a:	60da      	str	r2, [r3, #12]
                            break;
 800a50c:	e000      	b.n	800a510 <_ZN3jlb7ASState6updateEv+0x4d4>
                            break;
 800a50e:	bf00      	nop
                    break;
 800a510:	bf00      	nop
                }
            }

            return CompositeState{mission, labyrinth_state, fast_state, reference_speed};
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	6819      	ldr	r1, [r3, #0]
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	685a      	ldr	r2, [r3, #4]
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	6898      	ldr	r0, [r3, #8]
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	edd3 7a03 	vldr	s15, [r3, #12]
 800a524:	eeb0 0a67 	vmov.f32	s0, s15
 800a528:	4603      	mov	r3, r0
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f7ff fcfb 	bl	8009f26 <_ZN3jlb14CompositeStateC1ENS_7MissionENS_14LabyrinthStateENS_9FastStateEf>
        }
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	372c      	adds	r7, #44	; 0x2c
 800a534:	46bd      	mov	sp, r7
 800a536:	ecbd 8b02 	vpop	{d8}
 800a53a:	bd90      	pop	{r4, r7, pc}
 800a53c:	40900000 	.word	0x40900000

0800a540 <_ZN3jlb12SignalSenderC1ERKNS_8OdometryERKNS_10ControllerERKNS_7ASStateERKNS_5GraphERK12Measurements>:

        std::vector<char> telemetry_data;

#ifndef SIMULATION
        // TODO: initialize UDPClient for STM32
        SignalSender(const Odometry &odometry_, const Controller &controller_, const ASState &as_state_, const Graph &graph_, const Measurements &measurements_)
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	60b9      	str	r1, [r7, #8]
 800a54a:	607a      	str	r2, [r7, #4]
 800a54c:	603b      	str	r3, [r7, #0]
            : odometry(odometry_), controller(controller_), as_state(as_state_), graph(graph_), measurements(measurements_)
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	68ba      	ldr	r2, [r7, #8]
 800a552:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	683a      	ldr	r2, [r7, #0]
 800a562:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	69ba      	ldr	r2, [r7, #24]
 800a56a:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	69fa      	ldr	r2, [r7, #28]
 800a572:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7fb f80f 	bl	80055a0 <_ZNSt6vectorIcSaIcEEC1Ev>
        {
        }
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	4618      	mov	r0, r3
 800a586:	3710      	adds	r7, #16
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <_ZN3jlb12SignalSenderD1Ev>:
            : odometry(odometry_), controller(controller_), as_state(as_state_), graph(graph_), measurements(measurements_), client(SENDER_ADDRESS, SENDER_PORT)
        {
        }
#endif

        ~SignalSender() {}
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800a59a:	4618      	mov	r0, r3
 800a59c:	f002 fe84 	bl	800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3708      	adds	r7, #8
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <_ZN3jlb12SignalSender14send_telemetryEv>:

        void send_telemetry()
 800a5aa:	b590      	push	{r4, r7, lr}
 800a5ac:	b085      	sub	sp, #20
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
        {
            telemetry_data.clear();
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f003 fe4f 	bl	800e25c <_ZNSt6vectorIcSaIcEE5clearEv>
            measurements_1();
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 f87e 	bl	800a6c0 <_ZN3jlb12SignalSender14measurements_1Ev>
            measurements_2();
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 fe18 	bl	800b1fa <_ZN3jlb12SignalSender14measurements_2Ev>
            measurements_3();
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f001 fd34 	bl	800c038 <_ZN3jlb12SignalSender14measurements_3Ev>
            measurements_4();
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f001 fd94 	bl	800c0fe <_ZN3jlb12SignalSender14measurements_4Ev>
            measurements_5();
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f001 fdf4 	bl	800c1c4 <_ZN3jlb12SignalSender14measurements_5Ev>
            odometry_1();
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f001 fe60 	bl	800c2a2 <_ZN3jlb12SignalSender10odometry_1Ev>
            odometry_2();
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f001 fec0 	bl	800c368 <_ZN3jlb12SignalSender10odometry_2Ev>
            logic_1();
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f001 ff14 	bl	800c416 <_ZN3jlb12SignalSender7logic_1Ev>
            logic_2();
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f001 ff80 	bl	800c4f4 <_ZN3jlb12SignalSender7logic_2Ev>
            logic3();
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f001 fff9 	bl	800c5ec <_ZN3jlb12SignalSender6logic3Ev>

#ifndef SIMULATION
            uint32_t timestamp = HAL_GetTick();
 800a5fa:	f00e fb2b 	bl	8018c54 <HAL_GetTick>
 800a5fe:	60f8      	str	r0, [r7, #12]
#else
            uint32_t timestamp = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::steady_clock::now() - std::chrono::steady_clock::time_point::min()).count();
#endif
            telemetry_data.push_back((timestamp >> 24u) & 0xFF);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f503 72ee 	add.w	r2, r3, #476	; 0x1dc
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	0e1b      	lsrs	r3, r3, #24
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	723b      	strb	r3, [r7, #8]
 800a60e:	f107 0308 	add.w	r3, r7, #8
 800a612:	4619      	mov	r1, r3
 800a614:	4610      	mov	r0, r2
 800a616:	f003 fe2f 	bl	800e278 <_ZNSt6vectorIcSaIcEE9push_backEOc>
            telemetry_data.push_back((timestamp >> 16u) & 0xFF);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f503 72ee 	add.w	r2, r3, #476	; 0x1dc
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	0c1b      	lsrs	r3, r3, #16
 800a624:	b2db      	uxtb	r3, r3
 800a626:	727b      	strb	r3, [r7, #9]
 800a628:	f107 0309 	add.w	r3, r7, #9
 800a62c:	4619      	mov	r1, r3
 800a62e:	4610      	mov	r0, r2
 800a630:	f003 fe22 	bl	800e278 <_ZNSt6vectorIcSaIcEE9push_backEOc>
            telemetry_data.push_back((timestamp >> 8u) & 0xFF);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f503 72ee 	add.w	r2, r3, #476	; 0x1dc
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	0a1b      	lsrs	r3, r3, #8
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	72bb      	strb	r3, [r7, #10]
 800a642:	f107 030a 	add.w	r3, r7, #10
 800a646:	4619      	mov	r1, r3
 800a648:	4610      	mov	r0, r2
 800a64a:	f003 fe15 	bl	800e278 <_ZNSt6vectorIcSaIcEE9push_backEOc>
            telemetry_data.push_back(timestamp & 0xFF);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	b2d2      	uxtb	r2, r2
 800a658:	72fa      	strb	r2, [r7, #11]
 800a65a:	f107 020b 	add.w	r2, r7, #11
 800a65e:	4611      	mov	r1, r2
 800a660:	4618      	mov	r0, r3
 800a662:	f003 fe09 	bl	800e278 <_ZNSt6vectorIcSaIcEE9push_backEOc>
            send(telemetry_data.data(), telemetry_data.size());
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800a66c:	4618      	mov	r0, r3
 800a66e:	f003 fe14 	bl	800e29a <_ZNSt6vectorIcSaIcEE4dataEv>
 800a672:	4604      	mov	r4, r0
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800a67a:	4618      	mov	r0, r3
 800a67c:	f003 fe1c 	bl	800e2b8 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 800a680:	4603      	mov	r3, r0
 800a682:	461a      	mov	r2, r3
 800a684:	4621      	mov	r1, r4
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 f804 	bl	800a694 <_ZN3jlb12SignalSender4sendEPcj>
        }
 800a68c:	bf00      	nop
 800a68e:	3714      	adds	r7, #20
 800a690:	46bd      	mov	sp, r7
 800a692:	bd90      	pop	{r4, r7, pc}

0800a694 <_ZN3jlb12SignalSender4sendEPcj>:
        // TODO: add UDPClient for STM32
#else
        UDPClient client;
#endif

        int send([[maybe_unused]] char *msg, [[maybe_unused]] size_t max_size)
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	60f8      	str	r0, [r7, #12]
 800a69c:	60b9      	str	r1, [r7, #8]
 800a69e:	607a      	str	r2, [r7, #4]
        {
#ifndef SIMULATION
            HAL_UART_Transmit(&huart2, reinterpret_cast<uint8_t *>(msg), max_size, HAL_MAX_DELAY);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	b29a      	uxth	r2, r3
 800a6a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a6a8:	68b9      	ldr	r1, [r7, #8]
 800a6aa:	4804      	ldr	r0, [pc, #16]	; (800a6bc <_ZN3jlb12SignalSender4sendEPcj+0x28>)
 800a6ac:	f016 fa88 	bl	8020bc0 <HAL_UART_Transmit>
            return 0;
 800a6b0:	2300      	movs	r3, #0
#else
            return client.send(msg, max_size);
#endif
        }
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3710      	adds	r7, #16
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	20000930 	.word	0x20000930

0800a6c0 <_ZN3jlb12SignalSender14measurements_1Ev>:

        void measurements_1()
 800a6c0:	b590      	push	{r4, r7, lr}
 800a6c2:	b089      	sub	sp, #36	; 0x24
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.measurements_1.line_sensor_1  = 0 == controller.selected_front ? controller.detection_front[0] + 2.0f : controller.detection_front[0];
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d113      	bne.n	800a6fc <_ZN3jlb12SignalSender14measurements_1Ev+0x3c>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a6da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a6de:	ee07 3a90 	vmov	s15, r3
 800a6e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6e6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a6ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a6ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6f2:	edc7 7a00 	vstr	s15, [r7]
 800a6f6:	783b      	ldrb	r3, [r7, #0]
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	e00e      	b.n	800a71a <_ZN3jlb12SignalSender14measurements_1Ev+0x5a>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a702:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a706:	ee07 3a90 	vmov	s15, r3
 800a70a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a70e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a712:	edc7 7a00 	vstr	s15, [r7]
 800a716:	783b      	ldrb	r3, [r7, #0]
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	7013      	strb	r3, [r2, #0]
            jlb_rx.measurements_1.line_sensor_2  = 1 == controller.selected_front ? controller.detection_front[1] + 2.0f : controller.detection_front[1];
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2b01      	cmp	r3, #1
 800a728:	d113      	bne.n	800a752 <_ZN3jlb12SignalSender14measurements_1Ev+0x92>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a730:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a734:	ee07 3a90 	vmov	s15, r3
 800a738:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a73c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a740:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a748:	edc7 7a00 	vstr	s15, [r7]
 800a74c:	783b      	ldrb	r3, [r7, #0]
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	e00e      	b.n	800a770 <_ZN3jlb12SignalSender14measurements_1Ev+0xb0>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a758:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a75c:	ee07 3a90 	vmov	s15, r3
 800a760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a768:	edc7 7a00 	vstr	s15, [r7]
 800a76c:	783b      	ldrb	r3, [r7, #0]
 800a76e:	b2db      	uxtb	r3, r3
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	7053      	strb	r3, [r2, #1]
            jlb_rx.measurements_1.line_sensor_3  = 2 == controller.selected_front ? controller.detection_front[2] + 2.0f : controller.detection_front[2];
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2b02      	cmp	r3, #2
 800a77e:	d113      	bne.n	800a7a8 <_ZN3jlb12SignalSender14measurements_1Ev+0xe8>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a786:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a78a:	ee07 3a90 	vmov	s15, r3
 800a78e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a792:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a796:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a79a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a79e:	edc7 7a00 	vstr	s15, [r7]
 800a7a2:	783b      	ldrb	r3, [r7, #0]
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	e00e      	b.n	800a7c6 <_ZN3jlb12SignalSender14measurements_1Ev+0x106>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a7ae:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a7b2:	ee07 3a90 	vmov	s15, r3
 800a7b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7be:	edc7 7a00 	vstr	s15, [r7]
 800a7c2:	783b      	ldrb	r3, [r7, #0]
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	7093      	strb	r3, [r2, #2]
            jlb_rx.measurements_1.line_sensor_4  = 3 == controller.selected_front ? controller.detection_front[3] + 2.0f : controller.detection_front[3];
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	2b03      	cmp	r3, #3
 800a7d4:	d113      	bne.n	800a7fe <_ZN3jlb12SignalSender14measurements_1Ev+0x13e>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a7dc:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800a7e0:	ee07 3a90 	vmov	s15, r3
 800a7e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7e8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a7ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a7f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7f4:	edc7 7a00 	vstr	s15, [r7]
 800a7f8:	783b      	ldrb	r3, [r7, #0]
 800a7fa:	b2db      	uxtb	r3, r3
 800a7fc:	e00e      	b.n	800a81c <_ZN3jlb12SignalSender14measurements_1Ev+0x15c>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a804:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800a808:	ee07 3a90 	vmov	s15, r3
 800a80c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a814:	edc7 7a00 	vstr	s15, [r7]
 800a818:	783b      	ldrb	r3, [r7, #0]
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	70d3      	strb	r3, [r2, #3]
            jlb_rx.measurements_1.line_sensor_5  = 4 == controller.selected_front ? controller.detection_front[4] + 2.0f : controller.detection_front[4];
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2b04      	cmp	r3, #4
 800a82a:	d113      	bne.n	800a854 <_ZN3jlb12SignalSender14measurements_1Ev+0x194>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a832:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a836:	ee07 3a90 	vmov	s15, r3
 800a83a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a83e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a842:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a84a:	edc7 7a00 	vstr	s15, [r7]
 800a84e:	783b      	ldrb	r3, [r7, #0]
 800a850:	b2db      	uxtb	r3, r3
 800a852:	e00e      	b.n	800a872 <_ZN3jlb12SignalSender14measurements_1Ev+0x1b2>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a85a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a85e:	ee07 3a90 	vmov	s15, r3
 800a862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a86a:	edc7 7a00 	vstr	s15, [r7]
 800a86e:	783b      	ldrb	r3, [r7, #0]
 800a870:	b2db      	uxtb	r3, r3
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	7113      	strb	r3, [r2, #4]
            jlb_rx.measurements_1.line_sensor_6  = 5 == controller.selected_front ? controller.detection_front[5] + 2.0f : controller.detection_front[5];
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	2b05      	cmp	r3, #5
 800a880:	d113      	bne.n	800a8aa <_ZN3jlb12SignalSender14measurements_1Ev+0x1ea>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a888:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a88c:	ee07 3a90 	vmov	s15, r3
 800a890:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a894:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a898:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a89c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8a0:	edc7 7a00 	vstr	s15, [r7]
 800a8a4:	783b      	ldrb	r3, [r7, #0]
 800a8a6:	b2db      	uxtb	r3, r3
 800a8a8:	e00e      	b.n	800a8c8 <_ZN3jlb12SignalSender14measurements_1Ev+0x208>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a8b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a8b4:	ee07 3a90 	vmov	s15, r3
 800a8b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8c0:	edc7 7a00 	vstr	s15, [r7]
 800a8c4:	783b      	ldrb	r3, [r7, #0]
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	7153      	strb	r3, [r2, #5]
            jlb_rx.measurements_1.line_sensor_7  = 6 == controller.selected_front ? controller.detection_front[6] + 2.0f : controller.detection_front[6];
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2b06      	cmp	r3, #6
 800a8d6:	d113      	bne.n	800a900 <_ZN3jlb12SignalSender14measurements_1Ev+0x240>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a8de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a8e2:	ee07 3a90 	vmov	s15, r3
 800a8e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a8ea:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a8ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a8f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8f6:	edc7 7a00 	vstr	s15, [r7]
 800a8fa:	783b      	ldrb	r3, [r7, #0]
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	e00e      	b.n	800a91e <_ZN3jlb12SignalSender14measurements_1Ev+0x25e>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a906:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a90a:	ee07 3a90 	vmov	s15, r3
 800a90e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a916:	edc7 7a00 	vstr	s15, [r7]
 800a91a:	783b      	ldrb	r3, [r7, #0]
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	7193      	strb	r3, [r2, #6]
            jlb_rx.measurements_1.line_sensor_8  = 7 == controller.selected_front ? controller.detection_front[7] + 2.0f : controller.detection_front[7];
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2b07      	cmp	r3, #7
 800a92c:	d113      	bne.n	800a956 <_ZN3jlb12SignalSender14measurements_1Ev+0x296>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a934:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800a938:	ee07 3a90 	vmov	s15, r3
 800a93c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a940:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a944:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a94c:	edc7 7a00 	vstr	s15, [r7]
 800a950:	783b      	ldrb	r3, [r7, #0]
 800a952:	b2db      	uxtb	r3, r3
 800a954:	e00e      	b.n	800a974 <_ZN3jlb12SignalSender14measurements_1Ev+0x2b4>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a95c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800a960:	ee07 3a90 	vmov	s15, r3
 800a964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a968:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a96c:	edc7 7a00 	vstr	s15, [r7]
 800a970:	783b      	ldrb	r3, [r7, #0]
 800a972:	b2db      	uxtb	r3, r3
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	71d3      	strb	r3, [r2, #7]
            jlb_rx.measurements_1.line_sensor_9  = 8 == controller.selected_front ? controller.detection_front[8] + 2.0f : controller.detection_front[8];
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2b08      	cmp	r3, #8
 800a982:	d113      	bne.n	800a9ac <_ZN3jlb12SignalSender14measurements_1Ev+0x2ec>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a98a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a98e:	ee07 3a90 	vmov	s15, r3
 800a992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a996:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a99a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a99e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9a2:	edc7 7a00 	vstr	s15, [r7]
 800a9a6:	783b      	ldrb	r3, [r7, #0]
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	e00e      	b.n	800a9ca <_ZN3jlb12SignalSender14measurements_1Ev+0x30a>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a9b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9b6:	ee07 3a90 	vmov	s15, r3
 800a9ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9c2:	edc7 7a00 	vstr	s15, [r7]
 800a9c6:	783b      	ldrb	r3, [r7, #0]
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	7213      	strb	r3, [r2, #8]
            jlb_rx.measurements_1.line_sensor_10 = 9 == controller.selected_front ? controller.detection_front[9] + 2.0f : controller.detection_front[9];
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	2b09      	cmp	r3, #9
 800a9d8:	d113      	bne.n	800aa02 <_ZN3jlb12SignalSender14measurements_1Ev+0x342>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a9e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9e4:	ee07 3a90 	vmov	s15, r3
 800a9e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9ec:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a9f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a9f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9f8:	edc7 7a00 	vstr	s15, [r7]
 800a9fc:	783b      	ldrb	r3, [r7, #0]
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	e00e      	b.n	800aa20 <_ZN3jlb12SignalSender14measurements_1Ev+0x360>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aa08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa0c:	ee07 3a90 	vmov	s15, r3
 800aa10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa18:	edc7 7a00 	vstr	s15, [r7]
 800aa1c:	783b      	ldrb	r3, [r7, #0]
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	7253      	strb	r3, [r2, #9]
            jlb_rx.measurements_1.line_sensor_11 = 10 == controller.selected_front ? controller.detection_front[10] + 2.0f : controller.detection_front[10];
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	2b0a      	cmp	r3, #10
 800aa2e:	d113      	bne.n	800aa58 <_ZN3jlb12SignalSender14measurements_1Ev+0x398>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aa36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa3a:	ee07 3a90 	vmov	s15, r3
 800aa3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa42:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800aa46:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa4e:	edc7 7a00 	vstr	s15, [r7]
 800aa52:	783b      	ldrb	r3, [r7, #0]
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	e00e      	b.n	800aa76 <_ZN3jlb12SignalSender14measurements_1Ev+0x3b6>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aa5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa62:	ee07 3a90 	vmov	s15, r3
 800aa66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa6e:	edc7 7a00 	vstr	s15, [r7]
 800aa72:	783b      	ldrb	r3, [r7, #0]
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	687a      	ldr	r2, [r7, #4]
 800aa78:	7293      	strb	r3, [r2, #10]
            jlb_rx.measurements_1.line_sensor_12 = 11 == controller.selected_front ? controller.detection_front[11] + 2.0f : controller.detection_front[11];
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	2b0b      	cmp	r3, #11
 800aa84:	d113      	bne.n	800aaae <_ZN3jlb12SignalSender14measurements_1Ev+0x3ee>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aa8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aa90:	ee07 3a90 	vmov	s15, r3
 800aa94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa98:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800aa9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aaa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aaa4:	edc7 7a00 	vstr	s15, [r7]
 800aaa8:	783b      	ldrb	r3, [r7, #0]
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	e00e      	b.n	800aacc <_ZN3jlb12SignalSender14measurements_1Ev+0x40c>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aab4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aab8:	ee07 3a90 	vmov	s15, r3
 800aabc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aac4:	edc7 7a00 	vstr	s15, [r7]
 800aac8:	783b      	ldrb	r3, [r7, #0]
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	72d3      	strb	r3, [r2, #11]
            jlb_rx.measurements_1.line_sensor_13 = 12 == controller.selected_front ? controller.detection_front[12] + 2.0f : controller.detection_front[12];
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2b0c      	cmp	r3, #12
 800aada:	d113      	bne.n	800ab04 <_ZN3jlb12SignalSender14measurements_1Ev+0x444>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aae2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aae6:	ee07 3a90 	vmov	s15, r3
 800aaea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aaee:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800aaf2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aaf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aafa:	edc7 7a00 	vstr	s15, [r7]
 800aafe:	783b      	ldrb	r3, [r7, #0]
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	e00e      	b.n	800ab22 <_ZN3jlb12SignalSender14measurements_1Ev+0x462>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ab0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab0e:	ee07 3a90 	vmov	s15, r3
 800ab12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab1a:	edc7 7a00 	vstr	s15, [r7]
 800ab1e:	783b      	ldrb	r3, [r7, #0]
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	7313      	strb	r3, [r2, #12]
            jlb_rx.measurements_1.line_sensor_14 = 13 == controller.selected_front ? controller.detection_front[13] + 2.0f : controller.detection_front[13];
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2b0d      	cmp	r3, #13
 800ab30:	d113      	bne.n	800ab5a <_ZN3jlb12SignalSender14measurements_1Ev+0x49a>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ab38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab3c:	ee07 3a90 	vmov	s15, r3
 800ab40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ab44:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ab48:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ab4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab50:	edc7 7a00 	vstr	s15, [r7]
 800ab54:	783b      	ldrb	r3, [r7, #0]
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	e00e      	b.n	800ab78 <_ZN3jlb12SignalSender14measurements_1Ev+0x4b8>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ab60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab64:	ee07 3a90 	vmov	s15, r3
 800ab68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab70:	edc7 7a00 	vstr	s15, [r7]
 800ab74:	783b      	ldrb	r3, [r7, #0]
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	7353      	strb	r3, [r2, #13]
            jlb_rx.measurements_1.line_sensor_15 = 14 == controller.selected_front ? controller.detection_front[14] + 2.0f : controller.detection_front[14];
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	2b0e      	cmp	r3, #14
 800ab86:	d113      	bne.n	800abb0 <_ZN3jlb12SignalSender14measurements_1Ev+0x4f0>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ab8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ab92:	ee07 3a90 	vmov	s15, r3
 800ab96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ab9a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ab9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aba2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aba6:	edc7 7a00 	vstr	s15, [r7]
 800abaa:	783b      	ldrb	r3, [r7, #0]
 800abac:	b2db      	uxtb	r3, r3
 800abae:	e00e      	b.n	800abce <_ZN3jlb12SignalSender14measurements_1Ev+0x50e>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800abb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800abba:	ee07 3a90 	vmov	s15, r3
 800abbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abc6:	edc7 7a00 	vstr	s15, [r7]
 800abca:	783b      	ldrb	r3, [r7, #0]
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	7393      	strb	r3, [r2, #14]
            jlb_rx.measurements_1.line_sensor_16 = 15 == controller.selected_front ? controller.detection_front[15] + 2.0f : controller.detection_front[15];
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2b0f      	cmp	r3, #15
 800abdc:	d113      	bne.n	800ac06 <_ZN3jlb12SignalSender14measurements_1Ev+0x546>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800abe4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800abe8:	ee07 3a90 	vmov	s15, r3
 800abec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800abf0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800abf4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800abf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abfc:	edc7 7a00 	vstr	s15, [r7]
 800ac00:	783b      	ldrb	r3, [r7, #0]
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	e00e      	b.n	800ac24 <_ZN3jlb12SignalSender14measurements_1Ev+0x564>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ac0c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ac10:	ee07 3a90 	vmov	s15, r3
 800ac14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac1c:	edc7 7a00 	vstr	s15, [r7]
 800ac20:	783b      	ldrb	r3, [r7, #0]
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	73d3      	strb	r3, [r2, #15]
#ifndef SIMULATION
            jlb_rx.measurements_1.line_sensor_17 = 16 == controller.selected_front ? controller.detection_front[16] + 2.0f : controller.detection_front[16];
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2b10      	cmp	r3, #16
 800ac32:	d113      	bne.n	800ac5c <_ZN3jlb12SignalSender14measurements_1Ev+0x59c>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ac3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac3e:	ee07 3a90 	vmov	s15, r3
 800ac42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac46:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ac4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ac4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac52:	edc7 7a00 	vstr	s15, [r7]
 800ac56:	783b      	ldrb	r3, [r7, #0]
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	e00e      	b.n	800ac7a <_ZN3jlb12SignalSender14measurements_1Ev+0x5ba>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ac62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac66:	ee07 3a90 	vmov	s15, r3
 800ac6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac72:	edc7 7a00 	vstr	s15, [r7]
 800ac76:	783b      	ldrb	r3, [r7, #0]
 800ac78:	b2db      	uxtb	r3, r3
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	7413      	strb	r3, [r2, #16]
            jlb_rx.measurements_1.line_sensor_18 = 17 == controller.selected_front ? controller.detection_front[17] + 2.0f : controller.detection_front[17];
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	2b11      	cmp	r3, #17
 800ac88:	d113      	bne.n	800acb2 <_ZN3jlb12SignalSender14measurements_1Ev+0x5f2>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ac90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac94:	ee07 3a90 	vmov	s15, r3
 800ac98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac9c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800aca0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aca8:	edc7 7a00 	vstr	s15, [r7]
 800acac:	783b      	ldrb	r3, [r7, #0]
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	e00e      	b.n	800acd0 <_ZN3jlb12SignalSender14measurements_1Ev+0x610>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800acb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acbc:	ee07 3a90 	vmov	s15, r3
 800acc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acc8:	edc7 7a00 	vstr	s15, [r7]
 800accc:	783b      	ldrb	r3, [r7, #0]
 800acce:	b2db      	uxtb	r3, r3
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	7453      	strb	r3, [r2, #17]
            jlb_rx.measurements_1.line_sensor_19 = 18 == controller.selected_front ? controller.detection_front[18] + 2.0f : controller.detection_front[18];
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	2b12      	cmp	r3, #18
 800acde:	d113      	bne.n	800ad08 <_ZN3jlb12SignalSender14measurements_1Ev+0x648>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ace6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800acea:	ee07 3a90 	vmov	s15, r3
 800acee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800acf2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800acf6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800acfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acfe:	edc7 7a00 	vstr	s15, [r7]
 800ad02:	783b      	ldrb	r3, [r7, #0]
 800ad04:	b2db      	uxtb	r3, r3
 800ad06:	e00e      	b.n	800ad26 <_ZN3jlb12SignalSender14measurements_1Ev+0x666>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ad0e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ad12:	ee07 3a90 	vmov	s15, r3
 800ad16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad1e:	edc7 7a00 	vstr	s15, [r7]
 800ad22:	783b      	ldrb	r3, [r7, #0]
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	7493      	strb	r3, [r2, #18]
            jlb_rx.measurements_1.line_sensor_20 = 19 == controller.selected_front ? controller.detection_front[19] + 2.0f : controller.detection_front[19];
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2b13      	cmp	r3, #19
 800ad34:	d113      	bne.n	800ad5e <_ZN3jlb12SignalSender14measurements_1Ev+0x69e>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ad3c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800ad40:	ee07 3a90 	vmov	s15, r3
 800ad44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad48:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ad4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ad50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad54:	edc7 7a00 	vstr	s15, [r7]
 800ad58:	783b      	ldrb	r3, [r7, #0]
 800ad5a:	b2db      	uxtb	r3, r3
 800ad5c:	e00e      	b.n	800ad7c <_ZN3jlb12SignalSender14measurements_1Ev+0x6bc>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ad64:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800ad68:	ee07 3a90 	vmov	s15, r3
 800ad6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad74:	edc7 7a00 	vstr	s15, [r7]
 800ad78:	783b      	ldrb	r3, [r7, #0]
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	74d3      	strb	r3, [r2, #19]
            jlb_rx.measurements_1.line_sensor_21 = 20 == controller.selected_front ? controller.detection_front[20] + 2.0f : controller.detection_front[20];
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2b14      	cmp	r3, #20
 800ad8a:	d113      	bne.n	800adb4 <_ZN3jlb12SignalSender14measurements_1Ev+0x6f4>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ad92:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ad96:	ee07 3a90 	vmov	s15, r3
 800ad9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad9e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ada2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ada6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adaa:	edc7 7a00 	vstr	s15, [r7]
 800adae:	783b      	ldrb	r3, [r7, #0]
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	e00e      	b.n	800add2 <_ZN3jlb12SignalSender14measurements_1Ev+0x712>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800adba:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800adbe:	ee07 3a90 	vmov	s15, r3
 800adc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adca:	edc7 7a00 	vstr	s15, [r7]
 800adce:	783b      	ldrb	r3, [r7, #0]
 800add0:	b2db      	uxtb	r3, r3
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	7513      	strb	r3, [r2, #20]
            jlb_rx.measurements_1.line_sensor_22 = 21 == controller.selected_front ? controller.detection_front[21] + 2.0f : controller.detection_front[21];
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	2b15      	cmp	r3, #21
 800ade0:	d113      	bne.n	800ae0a <_ZN3jlb12SignalSender14measurements_1Ev+0x74a>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ade8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800adec:	ee07 3a90 	vmov	s15, r3
 800adf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800adf4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800adf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800adfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae00:	edc7 7a00 	vstr	s15, [r7]
 800ae04:	783b      	ldrb	r3, [r7, #0]
 800ae06:	b2db      	uxtb	r3, r3
 800ae08:	e00e      	b.n	800ae28 <_ZN3jlb12SignalSender14measurements_1Ev+0x768>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ae10:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800ae14:	ee07 3a90 	vmov	s15, r3
 800ae18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae20:	edc7 7a00 	vstr	s15, [r7]
 800ae24:	783b      	ldrb	r3, [r7, #0]
 800ae26:	b2db      	uxtb	r3, r3
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	7553      	strb	r3, [r2, #21]
            jlb_rx.measurements_1.line_sensor_23 = 22 == controller.selected_front ? controller.detection_front[22] + 2.0f : controller.detection_front[22];
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	2b16      	cmp	r3, #22
 800ae36:	d113      	bne.n	800ae60 <_ZN3jlb12SignalSender14measurements_1Ev+0x7a0>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ae3e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800ae42:	ee07 3a90 	vmov	s15, r3
 800ae46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae4a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ae4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ae52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae56:	edc7 7a00 	vstr	s15, [r7]
 800ae5a:	783b      	ldrb	r3, [r7, #0]
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	e00e      	b.n	800ae7e <_ZN3jlb12SignalSender14measurements_1Ev+0x7be>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ae66:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800ae6a:	ee07 3a90 	vmov	s15, r3
 800ae6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae76:	edc7 7a00 	vstr	s15, [r7]
 800ae7a:	783b      	ldrb	r3, [r7, #0]
 800ae7c:	b2db      	uxtb	r3, r3
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	7593      	strb	r3, [r2, #22]
            jlb_rx.measurements_1.line_sensor_24 = 23 == controller.selected_front ? controller.detection_front[23] + 2.0f : controller.detection_front[23];
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	2b17      	cmp	r3, #23
 800ae8c:	d113      	bne.n	800aeb6 <_ZN3jlb12SignalSender14measurements_1Ev+0x7f6>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ae94:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800ae98:	ee07 3a90 	vmov	s15, r3
 800ae9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aea0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800aea4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aea8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aeac:	edc7 7a00 	vstr	s15, [r7]
 800aeb0:	783b      	ldrb	r3, [r7, #0]
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	e00e      	b.n	800aed4 <_ZN3jlb12SignalSender14measurements_1Ev+0x814>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aebc:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800aec0:	ee07 3a90 	vmov	s15, r3
 800aec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aecc:	edc7 7a00 	vstr	s15, [r7]
 800aed0:	783b      	ldrb	r3, [r7, #0]
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	75d3      	strb	r3, [r2, #23]
            jlb_rx.measurements_1.line_sensor_25 = 24 == controller.selected_front ? controller.detection_front[24] + 2.0f : controller.detection_front[24];
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	2b18      	cmp	r3, #24
 800aee2:	d113      	bne.n	800af0c <_ZN3jlb12SignalSender14measurements_1Ev+0x84c>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aeea:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800aeee:	ee07 3a90 	vmov	s15, r3
 800aef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aef6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800aefa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aefe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af02:	edc7 7a00 	vstr	s15, [r7]
 800af06:	783b      	ldrb	r3, [r7, #0]
 800af08:	b2db      	uxtb	r3, r3
 800af0a:	e00e      	b.n	800af2a <_ZN3jlb12SignalSender14measurements_1Ev+0x86a>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800af12:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800af16:	ee07 3a90 	vmov	s15, r3
 800af1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af22:	edc7 7a00 	vstr	s15, [r7]
 800af26:	783b      	ldrb	r3, [r7, #0]
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	687a      	ldr	r2, [r7, #4]
 800af2c:	7613      	strb	r3, [r2, #24]
            jlb_rx.measurements_1.line_sensor_26 = 25 == controller.selected_front ? controller.detection_front[25] + 2.0f : controller.detection_front[25];
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	2b19      	cmp	r3, #25
 800af38:	d113      	bne.n	800af62 <_ZN3jlb12SignalSender14measurements_1Ev+0x8a2>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800af40:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800af44:	ee07 3a90 	vmov	s15, r3
 800af48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af4c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800af50:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af58:	edc7 7a00 	vstr	s15, [r7]
 800af5c:	783b      	ldrb	r3, [r7, #0]
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	e00e      	b.n	800af80 <_ZN3jlb12SignalSender14measurements_1Ev+0x8c0>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800af68:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800af6c:	ee07 3a90 	vmov	s15, r3
 800af70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af78:	edc7 7a00 	vstr	s15, [r7]
 800af7c:	783b      	ldrb	r3, [r7, #0]
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	687a      	ldr	r2, [r7, #4]
 800af82:	7653      	strb	r3, [r2, #25]
            jlb_rx.measurements_1.line_sensor_27 = 26 == controller.selected_front ? controller.detection_front[26] + 2.0f : controller.detection_front[26];
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	2b1a      	cmp	r3, #26
 800af8e:	d113      	bne.n	800afb8 <_ZN3jlb12SignalSender14measurements_1Ev+0x8f8>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800af96:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800af9a:	ee07 3a90 	vmov	s15, r3
 800af9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afa2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800afa6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800afaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afae:	edc7 7a00 	vstr	s15, [r7]
 800afb2:	783b      	ldrb	r3, [r7, #0]
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	e00e      	b.n	800afd6 <_ZN3jlb12SignalSender14measurements_1Ev+0x916>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800afbe:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800afc2:	ee07 3a90 	vmov	s15, r3
 800afc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afce:	edc7 7a00 	vstr	s15, [r7]
 800afd2:	783b      	ldrb	r3, [r7, #0]
 800afd4:	b2db      	uxtb	r3, r3
 800afd6:	687a      	ldr	r2, [r7, #4]
 800afd8:	7693      	strb	r3, [r2, #26]
            jlb_rx.measurements_1.line_sensor_28 = 27 == controller.selected_front ? controller.detection_front[27] + 2.0f : controller.detection_front[27];
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	2b1b      	cmp	r3, #27
 800afe4:	d113      	bne.n	800b00e <_ZN3jlb12SignalSender14measurements_1Ev+0x94e>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800afec:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800aff0:	ee07 3a90 	vmov	s15, r3
 800aff4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aff8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800affc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b000:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b004:	edc7 7a00 	vstr	s15, [r7]
 800b008:	783b      	ldrb	r3, [r7, #0]
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	e00e      	b.n	800b02c <_ZN3jlb12SignalSender14measurements_1Ev+0x96c>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b014:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800b018:	ee07 3a90 	vmov	s15, r3
 800b01c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b024:	edc7 7a00 	vstr	s15, [r7]
 800b028:	783b      	ldrb	r3, [r7, #0]
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	76d3      	strb	r3, [r2, #27]
            jlb_rx.measurements_1.line_sensor_29 = 28 == controller.selected_front ? controller.detection_front[28] + 2.0f : controller.detection_front[28];
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	2b1c      	cmp	r3, #28
 800b03a:	d113      	bne.n	800b064 <_ZN3jlb12SignalSender14measurements_1Ev+0x9a4>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b042:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b046:	ee07 3a90 	vmov	s15, r3
 800b04a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b04e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b052:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b05a:	edc7 7a00 	vstr	s15, [r7]
 800b05e:	783b      	ldrb	r3, [r7, #0]
 800b060:	b2db      	uxtb	r3, r3
 800b062:	e00e      	b.n	800b082 <_ZN3jlb12SignalSender14measurements_1Ev+0x9c2>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b06a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b06e:	ee07 3a90 	vmov	s15, r3
 800b072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b076:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b07a:	edc7 7a00 	vstr	s15, [r7]
 800b07e:	783b      	ldrb	r3, [r7, #0]
 800b080:	b2db      	uxtb	r3, r3
 800b082:	687a      	ldr	r2, [r7, #4]
 800b084:	7713      	strb	r3, [r2, #28]
            jlb_rx.measurements_1.line_sensor_30 = 29 == controller.selected_front ? controller.detection_front[29] + 2.0f : controller.detection_front[29];
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	2b1d      	cmp	r3, #29
 800b090:	d113      	bne.n	800b0ba <_ZN3jlb12SignalSender14measurements_1Ev+0x9fa>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b098:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b09c:	ee07 3a90 	vmov	s15, r3
 800b0a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b0a4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b0a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b0ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0b0:	edc7 7a00 	vstr	s15, [r7]
 800b0b4:	783b      	ldrb	r3, [r7, #0]
 800b0b6:	b2db      	uxtb	r3, r3
 800b0b8:	e00e      	b.n	800b0d8 <_ZN3jlb12SignalSender14measurements_1Ev+0xa18>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b0c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b0c4:	ee07 3a90 	vmov	s15, r3
 800b0c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0d0:	edc7 7a00 	vstr	s15, [r7]
 800b0d4:	783b      	ldrb	r3, [r7, #0]
 800b0d6:	b2db      	uxtb	r3, r3
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	7753      	strb	r3, [r2, #29]
            jlb_rx.measurements_1.line_sensor_31 = 30 == controller.selected_front ? controller.detection_front[30] + 2.0f : controller.detection_front[30];
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	2b1e      	cmp	r3, #30
 800b0e6:	d113      	bne.n	800b110 <_ZN3jlb12SignalSender14measurements_1Ev+0xa50>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b0ee:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b0f2:	ee07 3a90 	vmov	s15, r3
 800b0f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b0fa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b0fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b106:	edc7 7a00 	vstr	s15, [r7]
 800b10a:	783b      	ldrb	r3, [r7, #0]
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	e00e      	b.n	800b12e <_ZN3jlb12SignalSender14measurements_1Ev+0xa6e>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b116:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b11a:	ee07 3a90 	vmov	s15, r3
 800b11e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b122:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b126:	edc7 7a00 	vstr	s15, [r7]
 800b12a:	783b      	ldrb	r3, [r7, #0]
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	687a      	ldr	r2, [r7, #4]
 800b130:	7793      	strb	r3, [r2, #30]
            jlb_rx.measurements_1.line_sensor_32 = 31 == controller.selected_front ? controller.detection_front[31] + 2.0f : controller.detection_front[31];
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	2b1f      	cmp	r3, #31
 800b13c:	d113      	bne.n	800b166 <_ZN3jlb12SignalSender14measurements_1Ev+0xaa6>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b144:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b148:	ee07 3a90 	vmov	s15, r3
 800b14c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b150:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b154:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b158:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b15c:	edc7 7a00 	vstr	s15, [r7]
 800b160:	783b      	ldrb	r3, [r7, #0]
 800b162:	b2db      	uxtb	r3, r3
 800b164:	e00e      	b.n	800b184 <_ZN3jlb12SignalSender14measurements_1Ev+0xac4>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b16c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b170:	ee07 3a90 	vmov	s15, r3
 800b174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b17c:	edc7 7a00 	vstr	s15, [r7]
 800b180:	783b      	ldrb	r3, [r7, #0]
 800b182:	b2db      	uxtb	r3, r3
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	77d3      	strb	r3, [r2, #31]
#endif

            char    data[measurements_1_DLC + 2] = {0};
 800b188:	2300      	movs	r3, #0
 800b18a:	60fb      	str	r3, [r7, #12]
 800b18c:	f107 0310 	add.w	r3, r7, #16
 800b190:	2200      	movs	r2, #0
 800b192:	601a      	str	r2, [r3, #0]
 800b194:	809a      	strh	r2, [r3, #4]
            uint8_t ide                          = measurements_1_IDE;
 800b196:	2300      	movs	r3, #0
 800b198:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                          = measurements_1_DLC;
 800b19a:	2308      	movs	r3, #8
 800b19c:	72bb      	strb	r3, [r7, #10]
            data[0]                              = measurements_1_CANID;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	733b      	strb	r3, [r7, #12]
            data[1]                              = measurements_1_DLC;
 800b1a2:	2308      	movs	r3, #8
 800b1a4:	737b      	strb	r3, [r7, #13]
            Pack_measurements_1_jlb(&jlb_rx.measurements_1, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f107 010c 	add.w	r1, r7, #12
 800b1ac:	3102      	adds	r1, #2
 800b1ae:	f107 030b 	add.w	r3, r7, #11
 800b1b2:	f107 020a 	add.w	r2, r7, #10
 800b1b6:	f7f6 f833 	bl	8001220 <Pack_measurements_1_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + measurements_1_DLC + 2);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f002 fc3f 	bl	800da4a <_ZNSt6vectorIcSaIcEE3endEv>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	61fb      	str	r3, [r7, #28]
 800b1d0:	f107 021c 	add.w	r2, r7, #28
 800b1d4:	f107 0318 	add.w	r3, r7, #24
 800b1d8:	4611      	mov	r1, r2
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f003 f87b 	bl	800e2d6 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800b1e0:	f107 030c 	add.w	r3, r7, #12
 800b1e4:	330a      	adds	r3, #10
 800b1e6:	f107 020c 	add.w	r2, r7, #12
 800b1ea:	69b9      	ldr	r1, [r7, #24]
 800b1ec:	4620      	mov	r0, r4
 800b1ee:	f003 f883 	bl	800e2f8 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800b1f2:	bf00      	nop
 800b1f4:	3724      	adds	r7, #36	; 0x24
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd90      	pop	{r4, r7, pc}

0800b1fa <_ZN3jlb12SignalSender14measurements_2Ev>:

        void measurements_2()
 800b1fa:	b590      	push	{r4, r7, lr}
 800b1fc:	b089      	sub	sp, #36	; 0x24
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.measurements_2.line_sensor_1  = 0 == controller.selected_rear ? controller.detection_rear[0] + 2.0f : controller.detection_rear[0];
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d113      	bne.n	800b236 <_ZN3jlb12SignalSender14measurements_2Ev+0x3c>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b214:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800b218:	ee07 3a90 	vmov	s15, r3
 800b21c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b220:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b224:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b22c:	edc7 7a00 	vstr	s15, [r7]
 800b230:	783b      	ldrb	r3, [r7, #0]
 800b232:	b2db      	uxtb	r3, r3
 800b234:	e00e      	b.n	800b254 <_ZN3jlb12SignalSender14measurements_2Ev+0x5a>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b23c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800b240:	ee07 3a90 	vmov	s15, r3
 800b244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b248:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b24c:	edc7 7a00 	vstr	s15, [r7]
 800b250:	783b      	ldrb	r3, [r7, #0]
 800b252:	b2db      	uxtb	r3, r3
 800b254:	687a      	ldr	r2, [r7, #4]
 800b256:	f882 3020 	strb.w	r3, [r2, #32]
            jlb_rx.measurements_2.line_sensor_2  = 1 == controller.selected_rear ? controller.detection_rear[1] + 2.0f : controller.detection_rear[1];
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	2b01      	cmp	r3, #1
 800b264:	d113      	bne.n	800b28e <_ZN3jlb12SignalSender14measurements_2Ev+0x94>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b26c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800b270:	ee07 3a90 	vmov	s15, r3
 800b274:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b278:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b27c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b284:	edc7 7a00 	vstr	s15, [r7]
 800b288:	783b      	ldrb	r3, [r7, #0]
 800b28a:	b2db      	uxtb	r3, r3
 800b28c:	e00e      	b.n	800b2ac <_ZN3jlb12SignalSender14measurements_2Ev+0xb2>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b294:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800b298:	ee07 3a90 	vmov	s15, r3
 800b29c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2a4:	edc7 7a00 	vstr	s15, [r7]
 800b2a8:	783b      	ldrb	r3, [r7, #0]
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
            jlb_rx.measurements_2.line_sensor_3  = 2 == controller.selected_rear ? controller.detection_rear[2] + 2.0f : controller.detection_rear[2];
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	2b02      	cmp	r3, #2
 800b2bc:	d113      	bne.n	800b2e6 <_ZN3jlb12SignalSender14measurements_2Ev+0xec>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b2c4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800b2c8:	ee07 3a90 	vmov	s15, r3
 800b2cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b2d0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b2d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b2d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2dc:	edc7 7a00 	vstr	s15, [r7]
 800b2e0:	783b      	ldrb	r3, [r7, #0]
 800b2e2:	b2db      	uxtb	r3, r3
 800b2e4:	e00e      	b.n	800b304 <_ZN3jlb12SignalSender14measurements_2Ev+0x10a>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b2ec:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800b2f0:	ee07 3a90 	vmov	s15, r3
 800b2f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2fc:	edc7 7a00 	vstr	s15, [r7]
 800b300:	783b      	ldrb	r3, [r7, #0]
 800b302:	b2db      	uxtb	r3, r3
 800b304:	687a      	ldr	r2, [r7, #4]
 800b306:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
            jlb_rx.measurements_2.line_sensor_4  = 3 == controller.selected_rear ? controller.detection_rear[3] + 2.0f : controller.detection_rear[3];
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	2b03      	cmp	r3, #3
 800b314:	d113      	bne.n	800b33e <_ZN3jlb12SignalSender14measurements_2Ev+0x144>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b31c:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800b320:	ee07 3a90 	vmov	s15, r3
 800b324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b328:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b32c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b334:	edc7 7a00 	vstr	s15, [r7]
 800b338:	783b      	ldrb	r3, [r7, #0]
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	e00e      	b.n	800b35c <_ZN3jlb12SignalSender14measurements_2Ev+0x162>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b344:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800b348:	ee07 3a90 	vmov	s15, r3
 800b34c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b354:	edc7 7a00 	vstr	s15, [r7]
 800b358:	783b      	ldrb	r3, [r7, #0]
 800b35a:	b2db      	uxtb	r3, r3
 800b35c:	687a      	ldr	r2, [r7, #4]
 800b35e:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
            jlb_rx.measurements_2.line_sensor_5  = 4 == controller.selected_rear ? controller.detection_rear[4] + 2.0f : controller.detection_rear[4];
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	2b04      	cmp	r3, #4
 800b36c:	d113      	bne.n	800b396 <_ZN3jlb12SignalSender14measurements_2Ev+0x19c>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b374:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b378:	ee07 3a90 	vmov	s15, r3
 800b37c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b380:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b384:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b388:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b38c:	edc7 7a00 	vstr	s15, [r7]
 800b390:	783b      	ldrb	r3, [r7, #0]
 800b392:	b2db      	uxtb	r3, r3
 800b394:	e00e      	b.n	800b3b4 <_ZN3jlb12SignalSender14measurements_2Ev+0x1ba>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b39c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b3a0:	ee07 3a90 	vmov	s15, r3
 800b3a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3ac:	edc7 7a00 	vstr	s15, [r7]
 800b3b0:	783b      	ldrb	r3, [r7, #0]
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
            jlb_rx.measurements_2.line_sensor_6  = 5 == controller.selected_rear ? controller.detection_rear[5] + 2.0f : controller.detection_rear[5];
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	2b05      	cmp	r3, #5
 800b3c4:	d113      	bne.n	800b3ee <_ZN3jlb12SignalSender14measurements_2Ev+0x1f4>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b3cc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b3d0:	ee07 3a90 	vmov	s15, r3
 800b3d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b3d8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b3dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b3e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3e4:	edc7 7a00 	vstr	s15, [r7]
 800b3e8:	783b      	ldrb	r3, [r7, #0]
 800b3ea:	b2db      	uxtb	r3, r3
 800b3ec:	e00e      	b.n	800b40c <_ZN3jlb12SignalSender14measurements_2Ev+0x212>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b3f4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b3f8:	ee07 3a90 	vmov	s15, r3
 800b3fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b400:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b404:	edc7 7a00 	vstr	s15, [r7]
 800b408:	783b      	ldrb	r3, [r7, #0]
 800b40a:	b2db      	uxtb	r3, r3
 800b40c:	687a      	ldr	r2, [r7, #4]
 800b40e:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
            jlb_rx.measurements_2.line_sensor_7  = 6 == controller.selected_rear ? controller.detection_rear[6] + 2.0f : controller.detection_rear[6];
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	2b06      	cmp	r3, #6
 800b41c:	d113      	bne.n	800b446 <_ZN3jlb12SignalSender14measurements_2Ev+0x24c>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b424:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800b428:	ee07 3a90 	vmov	s15, r3
 800b42c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b430:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b434:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b43c:	edc7 7a00 	vstr	s15, [r7]
 800b440:	783b      	ldrb	r3, [r7, #0]
 800b442:	b2db      	uxtb	r3, r3
 800b444:	e00e      	b.n	800b464 <_ZN3jlb12SignalSender14measurements_2Ev+0x26a>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b44c:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800b450:	ee07 3a90 	vmov	s15, r3
 800b454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b458:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b45c:	edc7 7a00 	vstr	s15, [r7]
 800b460:	783b      	ldrb	r3, [r7, #0]
 800b462:	b2db      	uxtb	r3, r3
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
            jlb_rx.measurements_2.line_sensor_8  = 7 == controller.selected_rear ? controller.detection_rear[7] + 2.0f : controller.detection_rear[7];
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	2b07      	cmp	r3, #7
 800b474:	d113      	bne.n	800b49e <_ZN3jlb12SignalSender14measurements_2Ev+0x2a4>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b47c:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800b480:	ee07 3a90 	vmov	s15, r3
 800b484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b488:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b48c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b494:	edc7 7a00 	vstr	s15, [r7]
 800b498:	783b      	ldrb	r3, [r7, #0]
 800b49a:	b2db      	uxtb	r3, r3
 800b49c:	e00e      	b.n	800b4bc <_ZN3jlb12SignalSender14measurements_2Ev+0x2c2>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b4a4:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800b4a8:	ee07 3a90 	vmov	s15, r3
 800b4ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4b4:	edc7 7a00 	vstr	s15, [r7]
 800b4b8:	783b      	ldrb	r3, [r7, #0]
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	f882 3027 	strb.w	r3, [r2, #39]	; 0x27
            jlb_rx.measurements_2.line_sensor_9  = 8 == controller.selected_rear ? controller.detection_rear[8] + 2.0f : controller.detection_rear[8];
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	2b08      	cmp	r3, #8
 800b4cc:	d113      	bne.n	800b4f6 <_ZN3jlb12SignalSender14measurements_2Ev+0x2fc>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b4d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b4d8:	ee07 3a90 	vmov	s15, r3
 800b4dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4e0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b4e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b4e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4ec:	edc7 7a00 	vstr	s15, [r7]
 800b4f0:	783b      	ldrb	r3, [r7, #0]
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	e00e      	b.n	800b514 <_ZN3jlb12SignalSender14measurements_2Ev+0x31a>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b4fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b500:	ee07 3a90 	vmov	s15, r3
 800b504:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b50c:	edc7 7a00 	vstr	s15, [r7]
 800b510:	783b      	ldrb	r3, [r7, #0]
 800b512:	b2db      	uxtb	r3, r3
 800b514:	687a      	ldr	r2, [r7, #4]
 800b516:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
            jlb_rx.measurements_2.line_sensor_10 = 9 == controller.selected_rear ? controller.detection_rear[9] + 2.0f : controller.detection_rear[9];
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	2b09      	cmp	r3, #9
 800b524:	d113      	bne.n	800b54e <_ZN3jlb12SignalSender14measurements_2Ev+0x354>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b52c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b530:	ee07 3a90 	vmov	s15, r3
 800b534:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b538:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b53c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b544:	edc7 7a00 	vstr	s15, [r7]
 800b548:	783b      	ldrb	r3, [r7, #0]
 800b54a:	b2db      	uxtb	r3, r3
 800b54c:	e00e      	b.n	800b56c <_ZN3jlb12SignalSender14measurements_2Ev+0x372>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b554:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b558:	ee07 3a90 	vmov	s15, r3
 800b55c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b564:	edc7 7a00 	vstr	s15, [r7]
 800b568:	783b      	ldrb	r3, [r7, #0]
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	687a      	ldr	r2, [r7, #4]
 800b56e:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
            jlb_rx.measurements_2.line_sensor_11 = 10 == controller.selected_rear ? controller.detection_rear[10] + 2.0f : controller.detection_rear[10];
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	2b0a      	cmp	r3, #10
 800b57c:	d113      	bne.n	800b5a6 <_ZN3jlb12SignalSender14measurements_2Ev+0x3ac>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b584:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800b588:	ee07 3a90 	vmov	s15, r3
 800b58c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b590:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b594:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b59c:	edc7 7a00 	vstr	s15, [r7]
 800b5a0:	783b      	ldrb	r3, [r7, #0]
 800b5a2:	b2db      	uxtb	r3, r3
 800b5a4:	e00e      	b.n	800b5c4 <_ZN3jlb12SignalSender14measurements_2Ev+0x3ca>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b5ac:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800b5b0:	ee07 3a90 	vmov	s15, r3
 800b5b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5bc:	edc7 7a00 	vstr	s15, [r7]
 800b5c0:	783b      	ldrb	r3, [r7, #0]
 800b5c2:	b2db      	uxtb	r3, r3
 800b5c4:	687a      	ldr	r2, [r7, #4]
 800b5c6:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            jlb_rx.measurements_2.line_sensor_12 = 11 == controller.selected_rear ? controller.detection_rear[11] + 2.0f : controller.detection_rear[11];
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	2b0b      	cmp	r3, #11
 800b5d4:	d113      	bne.n	800b5fe <_ZN3jlb12SignalSender14measurements_2Ev+0x404>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b5dc:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800b5e0:	ee07 3a90 	vmov	s15, r3
 800b5e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b5e8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b5ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b5f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5f4:	edc7 7a00 	vstr	s15, [r7]
 800b5f8:	783b      	ldrb	r3, [r7, #0]
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	e00e      	b.n	800b61c <_ZN3jlb12SignalSender14measurements_2Ev+0x422>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b604:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800b608:	ee07 3a90 	vmov	s15, r3
 800b60c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b614:	edc7 7a00 	vstr	s15, [r7]
 800b618:	783b      	ldrb	r3, [r7, #0]
 800b61a:	b2db      	uxtb	r3, r3
 800b61c:	687a      	ldr	r2, [r7, #4]
 800b61e:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
            jlb_rx.measurements_2.line_sensor_13 = 12 == controller.selected_rear ? controller.detection_rear[12] + 2.0f : controller.detection_rear[12];
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	2b0c      	cmp	r3, #12
 800b62c:	d113      	bne.n	800b656 <_ZN3jlb12SignalSender14measurements_2Ev+0x45c>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b634:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800b638:	ee07 3a90 	vmov	s15, r3
 800b63c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b640:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b644:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b64c:	edc7 7a00 	vstr	s15, [r7]
 800b650:	783b      	ldrb	r3, [r7, #0]
 800b652:	b2db      	uxtb	r3, r3
 800b654:	e00e      	b.n	800b674 <_ZN3jlb12SignalSender14measurements_2Ev+0x47a>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b65c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800b660:	ee07 3a90 	vmov	s15, r3
 800b664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b66c:	edc7 7a00 	vstr	s15, [r7]
 800b670:	783b      	ldrb	r3, [r7, #0]
 800b672:	b2db      	uxtb	r3, r3
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
            jlb_rx.measurements_2.line_sensor_14 = 13 == controller.selected_rear ? controller.detection_rear[13] + 2.0f : controller.detection_rear[13];
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	2b0d      	cmp	r3, #13
 800b684:	d113      	bne.n	800b6ae <_ZN3jlb12SignalSender14measurements_2Ev+0x4b4>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b68c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800b690:	ee07 3a90 	vmov	s15, r3
 800b694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b698:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b69c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b6a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6a4:	edc7 7a00 	vstr	s15, [r7]
 800b6a8:	783b      	ldrb	r3, [r7, #0]
 800b6aa:	b2db      	uxtb	r3, r3
 800b6ac:	e00e      	b.n	800b6cc <_ZN3jlb12SignalSender14measurements_2Ev+0x4d2>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b6b4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800b6b8:	ee07 3a90 	vmov	s15, r3
 800b6bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6c4:	edc7 7a00 	vstr	s15, [r7]
 800b6c8:	783b      	ldrb	r3, [r7, #0]
 800b6ca:	b2db      	uxtb	r3, r3
 800b6cc:	687a      	ldr	r2, [r7, #4]
 800b6ce:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
            jlb_rx.measurements_2.line_sensor_15 = 14 == controller.selected_rear ? controller.detection_rear[14] + 2.0f : controller.detection_rear[14];
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	2b0e      	cmp	r3, #14
 800b6dc:	d113      	bne.n	800b706 <_ZN3jlb12SignalSender14measurements_2Ev+0x50c>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b6e4:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800b6e8:	ee07 3a90 	vmov	s15, r3
 800b6ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b6f0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b6f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b6f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6fc:	edc7 7a00 	vstr	s15, [r7]
 800b700:	783b      	ldrb	r3, [r7, #0]
 800b702:	b2db      	uxtb	r3, r3
 800b704:	e00e      	b.n	800b724 <_ZN3jlb12SignalSender14measurements_2Ev+0x52a>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b70c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800b710:	ee07 3a90 	vmov	s15, r3
 800b714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b71c:	edc7 7a00 	vstr	s15, [r7]
 800b720:	783b      	ldrb	r3, [r7, #0]
 800b722:	b2db      	uxtb	r3, r3
 800b724:	687a      	ldr	r2, [r7, #4]
 800b726:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
            jlb_rx.measurements_2.line_sensor_16 = 15 == controller.selected_rear ? controller.detection_rear[15] + 2.0f : controller.detection_rear[15];
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	2b0f      	cmp	r3, #15
 800b734:	d113      	bne.n	800b75e <_ZN3jlb12SignalSender14measurements_2Ev+0x564>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b73c:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800b740:	ee07 3a90 	vmov	s15, r3
 800b744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b748:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b74c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b754:	edc7 7a00 	vstr	s15, [r7]
 800b758:	783b      	ldrb	r3, [r7, #0]
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	e00e      	b.n	800b77c <_ZN3jlb12SignalSender14measurements_2Ev+0x582>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b764:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800b768:	ee07 3a90 	vmov	s15, r3
 800b76c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b770:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b774:	edc7 7a00 	vstr	s15, [r7]
 800b778:	783b      	ldrb	r3, [r7, #0]
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	687a      	ldr	r2, [r7, #4]
 800b77e:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
#ifndef SIMULATION
            jlb_rx.measurements_2.line_sensor_9  = 8 == controller.selected_rear ? controller.detection_rear[8] + 2.0f : controller.detection_rear[8];
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	2b08      	cmp	r3, #8
 800b78c:	d113      	bne.n	800b7b6 <_ZN3jlb12SignalSender14measurements_2Ev+0x5bc>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b794:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b798:	ee07 3a90 	vmov	s15, r3
 800b79c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7a0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b7a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b7a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7ac:	edc7 7a00 	vstr	s15, [r7]
 800b7b0:	783b      	ldrb	r3, [r7, #0]
 800b7b2:	b2db      	uxtb	r3, r3
 800b7b4:	e00e      	b.n	800b7d4 <_ZN3jlb12SignalSender14measurements_2Ev+0x5da>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b7bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b7c0:	ee07 3a90 	vmov	s15, r3
 800b7c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7cc:	edc7 7a00 	vstr	s15, [r7]
 800b7d0:	783b      	ldrb	r3, [r7, #0]
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	687a      	ldr	r2, [r7, #4]
 800b7d6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
            jlb_rx.measurements_2.line_sensor_10 = 9 == controller.selected_rear ? controller.detection_rear[9] + 2.0f : controller.detection_rear[9];
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	2b09      	cmp	r3, #9
 800b7e4:	d113      	bne.n	800b80e <_ZN3jlb12SignalSender14measurements_2Ev+0x614>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b7ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b7f0:	ee07 3a90 	vmov	s15, r3
 800b7f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7f8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b7fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b800:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b804:	edc7 7a00 	vstr	s15, [r7]
 800b808:	783b      	ldrb	r3, [r7, #0]
 800b80a:	b2db      	uxtb	r3, r3
 800b80c:	e00e      	b.n	800b82c <_ZN3jlb12SignalSender14measurements_2Ev+0x632>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b814:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b818:	ee07 3a90 	vmov	s15, r3
 800b81c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b824:	edc7 7a00 	vstr	s15, [r7]
 800b828:	783b      	ldrb	r3, [r7, #0]
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	687a      	ldr	r2, [r7, #4]
 800b82e:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
            jlb_rx.measurements_2.line_sensor_11 = 10 == controller.selected_rear ? controller.detection_rear[10] + 2.0f : controller.detection_rear[10];
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	2b0a      	cmp	r3, #10
 800b83c:	d113      	bne.n	800b866 <_ZN3jlb12SignalSender14measurements_2Ev+0x66c>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b844:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800b848:	ee07 3a90 	vmov	s15, r3
 800b84c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b850:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b854:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b858:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b85c:	edc7 7a00 	vstr	s15, [r7]
 800b860:	783b      	ldrb	r3, [r7, #0]
 800b862:	b2db      	uxtb	r3, r3
 800b864:	e00e      	b.n	800b884 <_ZN3jlb12SignalSender14measurements_2Ev+0x68a>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b86c:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800b870:	ee07 3a90 	vmov	s15, r3
 800b874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b878:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b87c:	edc7 7a00 	vstr	s15, [r7]
 800b880:	783b      	ldrb	r3, [r7, #0]
 800b882:	b2db      	uxtb	r3, r3
 800b884:	687a      	ldr	r2, [r7, #4]
 800b886:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            jlb_rx.measurements_2.line_sensor_12 = 11 == controller.selected_rear ? controller.detection_rear[11] + 2.0f : controller.detection_rear[11];
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	2b0b      	cmp	r3, #11
 800b894:	d113      	bne.n	800b8be <_ZN3jlb12SignalSender14measurements_2Ev+0x6c4>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b89c:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800b8a0:	ee07 3a90 	vmov	s15, r3
 800b8a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8a8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b8ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b8b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8b4:	edc7 7a00 	vstr	s15, [r7]
 800b8b8:	783b      	ldrb	r3, [r7, #0]
 800b8ba:	b2db      	uxtb	r3, r3
 800b8bc:	e00e      	b.n	800b8dc <_ZN3jlb12SignalSender14measurements_2Ev+0x6e2>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b8c4:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800b8c8:	ee07 3a90 	vmov	s15, r3
 800b8cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8d4:	edc7 7a00 	vstr	s15, [r7]
 800b8d8:	783b      	ldrb	r3, [r7, #0]
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	687a      	ldr	r2, [r7, #4]
 800b8de:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
            jlb_rx.measurements_2.line_sensor_13 = 12 == controller.selected_rear ? controller.detection_rear[12] + 2.0f : controller.detection_rear[12];
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	2b0c      	cmp	r3, #12
 800b8ec:	d113      	bne.n	800b916 <_ZN3jlb12SignalSender14measurements_2Ev+0x71c>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b8f4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800b8f8:	ee07 3a90 	vmov	s15, r3
 800b8fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b900:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b904:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b90c:	edc7 7a00 	vstr	s15, [r7]
 800b910:	783b      	ldrb	r3, [r7, #0]
 800b912:	b2db      	uxtb	r3, r3
 800b914:	e00e      	b.n	800b934 <_ZN3jlb12SignalSender14measurements_2Ev+0x73a>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b91c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800b920:	ee07 3a90 	vmov	s15, r3
 800b924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b92c:	edc7 7a00 	vstr	s15, [r7]
 800b930:	783b      	ldrb	r3, [r7, #0]
 800b932:	b2db      	uxtb	r3, r3
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
            jlb_rx.measurements_2.line_sensor_14 = 13 == controller.selected_rear ? controller.detection_rear[13] + 2.0f : controller.detection_rear[13];
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	2b0d      	cmp	r3, #13
 800b944:	d113      	bne.n	800b96e <_ZN3jlb12SignalSender14measurements_2Ev+0x774>
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b94c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800b950:	ee07 3a90 	vmov	s15, r3
 800b954:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b958:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b95c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b964:	edc7 7a00 	vstr	s15, [r7]
 800b968:	783b      	ldrb	r3, [r7, #0]
 800b96a:	b2db      	uxtb	r3, r3
 800b96c:	e00e      	b.n	800b98c <_ZN3jlb12SignalSender14measurements_2Ev+0x792>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b974:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800b978:	ee07 3a90 	vmov	s15, r3
 800b97c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b984:	edc7 7a00 	vstr	s15, [r7]
 800b988:	783b      	ldrb	r3, [r7, #0]
 800b98a:	b2db      	uxtb	r3, r3
 800b98c:	687a      	ldr	r2, [r7, #4]
 800b98e:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
            jlb_rx.measurements_2.line_sensor_15 = 14 == controller.selected_rear ? controller.detection_rear[14] + 2.0f : controller.detection_rear[14];
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	2b0e      	cmp	r3, #14
 800b99c:	d113      	bne.n	800b9c6 <_ZN3jlb12SignalSender14measurements_2Ev+0x7cc>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b9a4:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800b9a8:	ee07 3a90 	vmov	s15, r3
 800b9ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9b0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b9b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b9b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9bc:	edc7 7a00 	vstr	s15, [r7]
 800b9c0:	783b      	ldrb	r3, [r7, #0]
 800b9c2:	b2db      	uxtb	r3, r3
 800b9c4:	e00e      	b.n	800b9e4 <_ZN3jlb12SignalSender14measurements_2Ev+0x7ea>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b9cc:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800b9d0:	ee07 3a90 	vmov	s15, r3
 800b9d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9dc:	edc7 7a00 	vstr	s15, [r7]
 800b9e0:	783b      	ldrb	r3, [r7, #0]
 800b9e2:	b2db      	uxtb	r3, r3
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
            jlb_rx.measurements_2.line_sensor_16 = 15 == controller.selected_rear ? controller.detection_rear[15] + 2.0f : controller.detection_rear[15];
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	2b0f      	cmp	r3, #15
 800b9f4:	d113      	bne.n	800ba1e <_ZN3jlb12SignalSender14measurements_2Ev+0x824>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b9fc:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800ba00:	ee07 3a90 	vmov	s15, r3
 800ba04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba08:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ba0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ba10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba14:	edc7 7a00 	vstr	s15, [r7]
 800ba18:	783b      	ldrb	r3, [r7, #0]
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	e00e      	b.n	800ba3c <_ZN3jlb12SignalSender14measurements_2Ev+0x842>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ba24:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800ba28:	ee07 3a90 	vmov	s15, r3
 800ba2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba34:	edc7 7a00 	vstr	s15, [r7]
 800ba38:	783b      	ldrb	r3, [r7, #0]
 800ba3a:	b2db      	uxtb	r3, r3
 800ba3c:	687a      	ldr	r2, [r7, #4]
 800ba3e:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
            jlb_rx.measurements_2.line_sensor_17 = 16 == controller.selected_rear ? controller.detection_rear[16] + 2.0f : controller.detection_rear[16];
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	2b10      	cmp	r3, #16
 800ba4c:	d113      	bne.n	800ba76 <_ZN3jlb12SignalSender14measurements_2Ev+0x87c>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ba54:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800ba58:	ee07 3a90 	vmov	s15, r3
 800ba5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba60:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ba64:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ba68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba6c:	edc7 7a00 	vstr	s15, [r7]
 800ba70:	783b      	ldrb	r3, [r7, #0]
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	e00e      	b.n	800ba94 <_ZN3jlb12SignalSender14measurements_2Ev+0x89a>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ba7c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800ba80:	ee07 3a90 	vmov	s15, r3
 800ba84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba8c:	edc7 7a00 	vstr	s15, [r7]
 800ba90:	783b      	ldrb	r3, [r7, #0]
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	687a      	ldr	r2, [r7, #4]
 800ba96:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
            jlb_rx.measurements_2.line_sensor_18 = 17 == controller.selected_rear ? controller.detection_rear[17] + 2.0f : controller.detection_rear[17];
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	2b11      	cmp	r3, #17
 800baa4:	d113      	bne.n	800bace <_ZN3jlb12SignalSender14measurements_2Ev+0x8d4>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800baac:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800bab0:	ee07 3a90 	vmov	s15, r3
 800bab4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bab8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800babc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bac4:	edc7 7a00 	vstr	s15, [r7]
 800bac8:	783b      	ldrb	r3, [r7, #0]
 800baca:	b2db      	uxtb	r3, r3
 800bacc:	e00e      	b.n	800baec <_ZN3jlb12SignalSender14measurements_2Ev+0x8f2>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bad4:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800bad8:	ee07 3a90 	vmov	s15, r3
 800badc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bae0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bae4:	edc7 7a00 	vstr	s15, [r7]
 800bae8:	783b      	ldrb	r3, [r7, #0]
 800baea:	b2db      	uxtb	r3, r3
 800baec:	687a      	ldr	r2, [r7, #4]
 800baee:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
            jlb_rx.measurements_2.line_sensor_19 = 18 == controller.selected_rear ? controller.detection_rear[18] + 2.0f : controller.detection_rear[18];
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800baf8:	685b      	ldr	r3, [r3, #4]
 800bafa:	2b12      	cmp	r3, #18
 800bafc:	d113      	bne.n	800bb26 <_ZN3jlb12SignalSender14measurements_2Ev+0x92c>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bb04:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800bb08:	ee07 3a90 	vmov	s15, r3
 800bb0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb10:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800bb14:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb1c:	edc7 7a00 	vstr	s15, [r7]
 800bb20:	783b      	ldrb	r3, [r7, #0]
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	e00e      	b.n	800bb44 <_ZN3jlb12SignalSender14measurements_2Ev+0x94a>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bb2c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800bb30:	ee07 3a90 	vmov	s15, r3
 800bb34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb3c:	edc7 7a00 	vstr	s15, [r7]
 800bb40:	783b      	ldrb	r3, [r7, #0]
 800bb42:	b2db      	uxtb	r3, r3
 800bb44:	687a      	ldr	r2, [r7, #4]
 800bb46:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
            jlb_rx.measurements_2.line_sensor_20 = 19 == controller.selected_rear ? controller.detection_rear[19] + 2.0f : controller.detection_rear[19];
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	2b13      	cmp	r3, #19
 800bb54:	d113      	bne.n	800bb7e <_ZN3jlb12SignalSender14measurements_2Ev+0x984>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bb5c:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800bb60:	ee07 3a90 	vmov	s15, r3
 800bb64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb68:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800bb6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb74:	edc7 7a00 	vstr	s15, [r7]
 800bb78:	783b      	ldrb	r3, [r7, #0]
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	e00e      	b.n	800bb9c <_ZN3jlb12SignalSender14measurements_2Ev+0x9a2>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bb84:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800bb88:	ee07 3a90 	vmov	s15, r3
 800bb8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb94:	edc7 7a00 	vstr	s15, [r7]
 800bb98:	783b      	ldrb	r3, [r7, #0]
 800bb9a:	b2db      	uxtb	r3, r3
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
            jlb_rx.measurements_2.line_sensor_21 = 20 == controller.selected_rear ? controller.detection_rear[20] + 2.0f : controller.detection_rear[20];
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	2b14      	cmp	r3, #20
 800bbac:	d113      	bne.n	800bbd6 <_ZN3jlb12SignalSender14measurements_2Ev+0x9dc>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bbb4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800bbb8:	ee07 3a90 	vmov	s15, r3
 800bbbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbc0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800bbc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bbc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbcc:	edc7 7a00 	vstr	s15, [r7]
 800bbd0:	783b      	ldrb	r3, [r7, #0]
 800bbd2:	b2db      	uxtb	r3, r3
 800bbd4:	e00e      	b.n	800bbf4 <_ZN3jlb12SignalSender14measurements_2Ev+0x9fa>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bbdc:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800bbe0:	ee07 3a90 	vmov	s15, r3
 800bbe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbec:	edc7 7a00 	vstr	s15, [r7]
 800bbf0:	783b      	ldrb	r3, [r7, #0]
 800bbf2:	b2db      	uxtb	r3, r3
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
            jlb_rx.measurements_2.line_sensor_22 = 21 == controller.selected_rear ? controller.detection_rear[21] + 2.0f : controller.detection_rear[21];
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	2b15      	cmp	r3, #21
 800bc04:	d113      	bne.n	800bc2e <_ZN3jlb12SignalSender14measurements_2Ev+0xa34>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bc0c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800bc10:	ee07 3a90 	vmov	s15, r3
 800bc14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc18:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800bc1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc24:	edc7 7a00 	vstr	s15, [r7]
 800bc28:	783b      	ldrb	r3, [r7, #0]
 800bc2a:	b2db      	uxtb	r3, r3
 800bc2c:	e00e      	b.n	800bc4c <_ZN3jlb12SignalSender14measurements_2Ev+0xa52>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bc34:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800bc38:	ee07 3a90 	vmov	s15, r3
 800bc3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc44:	edc7 7a00 	vstr	s15, [r7]
 800bc48:	783b      	ldrb	r3, [r7, #0]
 800bc4a:	b2db      	uxtb	r3, r3
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
            jlb_rx.measurements_2.line_sensor_23 = 22 == controller.selected_rear ? controller.detection_rear[22] + 2.0f : controller.detection_rear[22];
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bc58:	685b      	ldr	r3, [r3, #4]
 800bc5a:	2b16      	cmp	r3, #22
 800bc5c:	d113      	bne.n	800bc86 <_ZN3jlb12SignalSender14measurements_2Ev+0xa8c>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bc64:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800bc68:	ee07 3a90 	vmov	s15, r3
 800bc6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc70:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800bc74:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc7c:	edc7 7a00 	vstr	s15, [r7]
 800bc80:	783b      	ldrb	r3, [r7, #0]
 800bc82:	b2db      	uxtb	r3, r3
 800bc84:	e00e      	b.n	800bca4 <_ZN3jlb12SignalSender14measurements_2Ev+0xaaa>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bc8c:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800bc90:	ee07 3a90 	vmov	s15, r3
 800bc94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc9c:	edc7 7a00 	vstr	s15, [r7]
 800bca0:	783b      	ldrb	r3, [r7, #0]
 800bca2:	b2db      	uxtb	r3, r3
 800bca4:	687a      	ldr	r2, [r7, #4]
 800bca6:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
            jlb_rx.measurements_2.line_sensor_24 = 23 == controller.selected_rear ? controller.detection_rear[23] + 2.0f : controller.detection_rear[23];
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	2b17      	cmp	r3, #23
 800bcb4:	d113      	bne.n	800bcde <_ZN3jlb12SignalSender14measurements_2Ev+0xae4>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bcbc:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800bcc0:	ee07 3a90 	vmov	s15, r3
 800bcc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bcc8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800bccc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bcd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcd4:	edc7 7a00 	vstr	s15, [r7]
 800bcd8:	783b      	ldrb	r3, [r7, #0]
 800bcda:	b2db      	uxtb	r3, r3
 800bcdc:	e00e      	b.n	800bcfc <_ZN3jlb12SignalSender14measurements_2Ev+0xb02>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bce4:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800bce8:	ee07 3a90 	vmov	s15, r3
 800bcec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcf4:	edc7 7a00 	vstr	s15, [r7]
 800bcf8:	783b      	ldrb	r3, [r7, #0]
 800bcfa:	b2db      	uxtb	r3, r3
 800bcfc:	687a      	ldr	r2, [r7, #4]
 800bcfe:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37
            jlb_rx.measurements_2.line_sensor_25 = 24 == controller.selected_rear ? controller.detection_rear[24] + 2.0f : controller.detection_rear[24];
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	2b18      	cmp	r3, #24
 800bd0c:	d113      	bne.n	800bd36 <_ZN3jlb12SignalSender14measurements_2Ev+0xb3c>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bd14:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800bd18:	ee07 3a90 	vmov	s15, r3
 800bd1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd20:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800bd24:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bd28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd2c:	edc7 7a00 	vstr	s15, [r7]
 800bd30:	783b      	ldrb	r3, [r7, #0]
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	e00e      	b.n	800bd54 <_ZN3jlb12SignalSender14measurements_2Ev+0xb5a>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bd3c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800bd40:	ee07 3a90 	vmov	s15, r3
 800bd44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd4c:	edc7 7a00 	vstr	s15, [r7]
 800bd50:	783b      	ldrb	r3, [r7, #0]
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	687a      	ldr	r2, [r7, #4]
 800bd56:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            jlb_rx.measurements_2.line_sensor_26 = 25 == controller.selected_rear ? controller.detection_rear[25] + 2.0f : controller.detection_rear[25];
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bd60:	685b      	ldr	r3, [r3, #4]
 800bd62:	2b19      	cmp	r3, #25
 800bd64:	d113      	bne.n	800bd8e <_ZN3jlb12SignalSender14measurements_2Ev+0xb94>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bd6c:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800bd70:	ee07 3a90 	vmov	s15, r3
 800bd74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd78:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800bd7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bd80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd84:	edc7 7a00 	vstr	s15, [r7]
 800bd88:	783b      	ldrb	r3, [r7, #0]
 800bd8a:	b2db      	uxtb	r3, r3
 800bd8c:	e00e      	b.n	800bdac <_ZN3jlb12SignalSender14measurements_2Ev+0xbb2>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bd94:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800bd98:	ee07 3a90 	vmov	s15, r3
 800bd9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bda0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bda4:	edc7 7a00 	vstr	s15, [r7]
 800bda8:	783b      	ldrb	r3, [r7, #0]
 800bdaa:	b2db      	uxtb	r3, r3
 800bdac:	687a      	ldr	r2, [r7, #4]
 800bdae:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
            jlb_rx.measurements_2.line_sensor_27 = 26 == controller.selected_rear ? controller.detection_rear[26] + 2.0f : controller.detection_rear[26];
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bdb8:	685b      	ldr	r3, [r3, #4]
 800bdba:	2b1a      	cmp	r3, #26
 800bdbc:	d113      	bne.n	800bde6 <_ZN3jlb12SignalSender14measurements_2Ev+0xbec>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bdc4:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800bdc8:	ee07 3a90 	vmov	s15, r3
 800bdcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bdd0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800bdd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bdd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bddc:	edc7 7a00 	vstr	s15, [r7]
 800bde0:	783b      	ldrb	r3, [r7, #0]
 800bde2:	b2db      	uxtb	r3, r3
 800bde4:	e00e      	b.n	800be04 <_ZN3jlb12SignalSender14measurements_2Ev+0xc0a>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bdec:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800bdf0:	ee07 3a90 	vmov	s15, r3
 800bdf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdfc:	edc7 7a00 	vstr	s15, [r7]
 800be00:	783b      	ldrb	r3, [r7, #0]
 800be02:	b2db      	uxtb	r3, r3
 800be04:	687a      	ldr	r2, [r7, #4]
 800be06:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
            jlb_rx.measurements_2.line_sensor_28 = 27 == controller.selected_rear ? controller.detection_rear[27] + 2.0f : controller.detection_rear[27];
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	2b1b      	cmp	r3, #27
 800be14:	d113      	bne.n	800be3e <_ZN3jlb12SignalSender14measurements_2Ev+0xc44>
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800be1c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800be20:	ee07 3a90 	vmov	s15, r3
 800be24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be28:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800be2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800be30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be34:	edc7 7a00 	vstr	s15, [r7]
 800be38:	783b      	ldrb	r3, [r7, #0]
 800be3a:	b2db      	uxtb	r3, r3
 800be3c:	e00e      	b.n	800be5c <_ZN3jlb12SignalSender14measurements_2Ev+0xc62>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800be44:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800be48:	ee07 3a90 	vmov	s15, r3
 800be4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be54:	edc7 7a00 	vstr	s15, [r7]
 800be58:	783b      	ldrb	r3, [r7, #0]
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	f882 303b 	strb.w	r3, [r2, #59]	; 0x3b
            jlb_rx.measurements_2.line_sensor_29 = 28 == controller.selected_rear ? controller.detection_rear[28] + 2.0f : controller.detection_rear[28];
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	2b1c      	cmp	r3, #28
 800be6c:	d113      	bne.n	800be96 <_ZN3jlb12SignalSender14measurements_2Ev+0xc9c>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800be74:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800be78:	ee07 3a90 	vmov	s15, r3
 800be7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be80:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800be84:	ee77 7a87 	vadd.f32	s15, s15, s14
 800be88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be8c:	edc7 7a00 	vstr	s15, [r7]
 800be90:	783b      	ldrb	r3, [r7, #0]
 800be92:	b2db      	uxtb	r3, r3
 800be94:	e00e      	b.n	800beb4 <_ZN3jlb12SignalSender14measurements_2Ev+0xcba>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800be9c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800bea0:	ee07 3a90 	vmov	s15, r3
 800bea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bea8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800beac:	edc7 7a00 	vstr	s15, [r7]
 800beb0:	783b      	ldrb	r3, [r7, #0]
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
            jlb_rx.measurements_2.line_sensor_30 = 29 == controller.selected_rear ? controller.detection_rear[29] + 2.0f : controller.detection_rear[29];
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	2b1d      	cmp	r3, #29
 800bec4:	d113      	bne.n	800beee <_ZN3jlb12SignalSender14measurements_2Ev+0xcf4>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800becc:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800bed0:	ee07 3a90 	vmov	s15, r3
 800bed4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bed8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800bedc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bee0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bee4:	edc7 7a00 	vstr	s15, [r7]
 800bee8:	783b      	ldrb	r3, [r7, #0]
 800beea:	b2db      	uxtb	r3, r3
 800beec:	e00e      	b.n	800bf0c <_ZN3jlb12SignalSender14measurements_2Ev+0xd12>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bef4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800bef8:	ee07 3a90 	vmov	s15, r3
 800befc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf04:	edc7 7a00 	vstr	s15, [r7]
 800bf08:	783b      	ldrb	r3, [r7, #0]
 800bf0a:	b2db      	uxtb	r3, r3
 800bf0c:	687a      	ldr	r2, [r7, #4]
 800bf0e:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
            jlb_rx.measurements_2.line_sensor_31 = 30 == controller.selected_rear ? controller.detection_rear[30] + 2.0f : controller.detection_rear[30];
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bf18:	685b      	ldr	r3, [r3, #4]
 800bf1a:	2b1e      	cmp	r3, #30
 800bf1c:	d113      	bne.n	800bf46 <_ZN3jlb12SignalSender14measurements_2Ev+0xd4c>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bf24:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800bf28:	ee07 3a90 	vmov	s15, r3
 800bf2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf30:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800bf34:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bf38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf3c:	edc7 7a00 	vstr	s15, [r7]
 800bf40:	783b      	ldrb	r3, [r7, #0]
 800bf42:	b2db      	uxtb	r3, r3
 800bf44:	e00e      	b.n	800bf64 <_ZN3jlb12SignalSender14measurements_2Ev+0xd6a>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bf4c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800bf50:	ee07 3a90 	vmov	s15, r3
 800bf54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf5c:	edc7 7a00 	vstr	s15, [r7]
 800bf60:	783b      	ldrb	r3, [r7, #0]
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
            jlb_rx.measurements_2.line_sensor_32 = 31 == controller.selected_rear ? controller.detection_rear[31] + 2.0f : controller.detection_rear[31];
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bf70:	685b      	ldr	r3, [r3, #4]
 800bf72:	2b1f      	cmp	r3, #31
 800bf74:	d113      	bne.n	800bf9e <_ZN3jlb12SignalSender14measurements_2Ev+0xda4>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bf7c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800bf80:	ee07 3a90 	vmov	s15, r3
 800bf84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf88:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800bf8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bf90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf94:	edc7 7a00 	vstr	s15, [r7]
 800bf98:	783b      	ldrb	r3, [r7, #0]
 800bf9a:	b2db      	uxtb	r3, r3
 800bf9c:	e00e      	b.n	800bfbc <_ZN3jlb12SignalSender14measurements_2Ev+0xdc2>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bfa4:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800bfa8:	ee07 3a90 	vmov	s15, r3
 800bfac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfb4:	edc7 7a00 	vstr	s15, [r7]
 800bfb8:	783b      	ldrb	r3, [r7, #0]
 800bfba:	b2db      	uxtb	r3, r3
 800bfbc:	687a      	ldr	r2, [r7, #4]
 800bfbe:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
#endif

            char    data[measurements_2_DLC + 2] = {0};
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	60fb      	str	r3, [r7, #12]
 800bfc6:	f107 0310 	add.w	r3, r7, #16
 800bfca:	2200      	movs	r2, #0
 800bfcc:	601a      	str	r2, [r3, #0]
 800bfce:	809a      	strh	r2, [r3, #4]
            uint8_t ide                          = measurements_2_IDE;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                          = measurements_2_DLC;
 800bfd4:	2308      	movs	r3, #8
 800bfd6:	72bb      	strb	r3, [r7, #10]
            data[0]                              = measurements_2_CANID;
 800bfd8:	2302      	movs	r3, #2
 800bfda:	733b      	strb	r3, [r7, #12]
            data[1]                              = measurements_2_DLC;
 800bfdc:	2308      	movs	r3, #8
 800bfde:	737b      	strb	r3, [r7, #13]
            Pack_measurements_2_jlb(&jlb_rx.measurements_2, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f103 0020 	add.w	r0, r3, #32
 800bfe6:	f107 010c 	add.w	r1, r7, #12
 800bfea:	3102      	adds	r1, #2
 800bfec:	f107 030b 	add.w	r3, r7, #11
 800bff0:	f107 020a 	add.w	r2, r7, #10
 800bff4:	f7f5 fa5c 	bl	80014b0 <Pack_measurements_2_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + measurements_2_DLC + 2);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800c004:	4618      	mov	r0, r3
 800c006:	f001 fd20 	bl	800da4a <_ZNSt6vectorIcSaIcEE3endEv>
 800c00a:	4603      	mov	r3, r0
 800c00c:	61fb      	str	r3, [r7, #28]
 800c00e:	f107 021c 	add.w	r2, r7, #28
 800c012:	f107 0318 	add.w	r3, r7, #24
 800c016:	4611      	mov	r1, r2
 800c018:	4618      	mov	r0, r3
 800c01a:	f002 f95c 	bl	800e2d6 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800c01e:	f107 030c 	add.w	r3, r7, #12
 800c022:	330a      	adds	r3, #10
 800c024:	f107 020c 	add.w	r2, r7, #12
 800c028:	69b9      	ldr	r1, [r7, #24]
 800c02a:	4620      	mov	r0, r4
 800c02c:	f002 f964 	bl	800e2f8 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800c030:	bf00      	nop
 800c032:	3724      	adds	r7, #36	; 0x24
 800c034:	46bd      	mov	sp, r7
 800c036:	bd90      	pop	{r4, r7, pc}

0800c038 <_ZN3jlb12SignalSender14measurements_3Ev>:

        void measurements_3()
 800c038:	b590      	push	{r4, r7, lr}
 800c03a:	b089      	sub	sp, #36	; 0x24
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.measurements_3.angular_velocity_x_phys = odometry.meas_ang_vel_x;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800c046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c048:	4618      	mov	r0, r3
 800c04a:	f7f4 fa6f 	bl	800052c <__aeabi_f2d>
 800c04e:	4602      	mov	r2, r0
 800c050:	460b      	mov	r3, r1
 800c052:	6879      	ldr	r1, [r7, #4]
 800c054:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
            jlb_rx.measurements_3.angular_velocity_y_phys = odometry.meas_ang_vel_y;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800c05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c060:	4618      	mov	r0, r3
 800c062:	f7f4 fa63 	bl	800052c <__aeabi_f2d>
 800c066:	4602      	mov	r2, r0
 800c068:	460b      	mov	r3, r1
 800c06a:	6879      	ldr	r1, [r7, #4]
 800c06c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
            jlb_rx.measurements_3.angular_velocity_z_phys = odometry.meas_ang_vel_z;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800c076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c078:	4618      	mov	r0, r3
 800c07a:	f7f4 fa57 	bl	800052c <__aeabi_f2d>
 800c07e:	4602      	mov	r2, r0
 800c080:	460b      	mov	r3, r1
 800c082:	6879      	ldr	r1, [r7, #4]
 800c084:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

            char    data[measurements_2_DLC + 2] = {0};
 800c088:	2300      	movs	r3, #0
 800c08a:	60fb      	str	r3, [r7, #12]
 800c08c:	f107 0310 	add.w	r3, r7, #16
 800c090:	2200      	movs	r2, #0
 800c092:	601a      	str	r2, [r3, #0]
 800c094:	809a      	strh	r2, [r3, #4]
            uint8_t ide                          = measurements_3_IDE;
 800c096:	2300      	movs	r3, #0
 800c098:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                          = measurements_3_DLC;
 800c09a:	2308      	movs	r3, #8
 800c09c:	72bb      	strb	r3, [r7, #10]
            data[0]                              = measurements_3_CANID;
 800c09e:	2303      	movs	r3, #3
 800c0a0:	733b      	strb	r3, [r7, #12]
            data[1]                              = measurements_3_DLC;
 800c0a2:	2308      	movs	r3, #8
 800c0a4:	737b      	strb	r3, [r7, #13]
            Pack_measurements_3_jlb(&jlb_rx.measurements_3, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800c0ac:	f107 010c 	add.w	r1, r7, #12
 800c0b0:	3102      	adds	r1, #2
 800c0b2:	f107 030b 	add.w	r3, r7, #11
 800c0b6:	f107 020a 	add.w	r2, r7, #10
 800c0ba:	f7f5 fb41 	bl	8001740 <Pack_measurements_3_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + measurements_3_DLC + 2);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f001 fcbd 	bl	800da4a <_ZNSt6vectorIcSaIcEE3endEv>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	61fb      	str	r3, [r7, #28]
 800c0d4:	f107 021c 	add.w	r2, r7, #28
 800c0d8:	f107 0318 	add.w	r3, r7, #24
 800c0dc:	4611      	mov	r1, r2
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f002 f8f9 	bl	800e2d6 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800c0e4:	f107 030c 	add.w	r3, r7, #12
 800c0e8:	330a      	adds	r3, #10
 800c0ea:	f107 020c 	add.w	r2, r7, #12
 800c0ee:	69b9      	ldr	r1, [r7, #24]
 800c0f0:	4620      	mov	r0, r4
 800c0f2:	f002 f901 	bl	800e2f8 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800c0f6:	bf00      	nop
 800c0f8:	3724      	adds	r7, #36	; 0x24
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd90      	pop	{r4, r7, pc}

0800c0fe <_ZN3jlb12SignalSender14measurements_4Ev>:

        void measurements_4()
 800c0fe:	b590      	push	{r4, r7, lr}
 800c100:	b089      	sub	sp, #36	; 0x24
 800c102:	af00      	add	r7, sp, #0
 800c104:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.measurements_4.linear_acceleration_x_phys = odometry.meas_lin_acc_x;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800c10c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c10e:	4618      	mov	r0, r3
 800c110:	f7f4 fa0c 	bl	800052c <__aeabi_f2d>
 800c114:	4602      	mov	r2, r0
 800c116:	460b      	mov	r3, r1
 800c118:	6879      	ldr	r1, [r7, #4]
 800c11a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
            jlb_rx.measurements_4.linear_acceleration_y_phys = odometry.meas_lin_acc_y;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800c124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c126:	4618      	mov	r0, r3
 800c128:	f7f4 fa00 	bl	800052c <__aeabi_f2d>
 800c12c:	4602      	mov	r2, r0
 800c12e:	460b      	mov	r3, r1
 800c130:	6879      	ldr	r1, [r7, #4]
 800c132:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
            jlb_rx.measurements_4.linear_acceleration_z_phys = odometry.meas_lin_acc_z;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800c13c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c13e:	4618      	mov	r0, r3
 800c140:	f7f4 f9f4 	bl	800052c <__aeabi_f2d>
 800c144:	4602      	mov	r2, r0
 800c146:	460b      	mov	r3, r1
 800c148:	6879      	ldr	r1, [r7, #4]
 800c14a:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98

            char    data[measurements_3_DLC + 2] = {0};
 800c14e:	2300      	movs	r3, #0
 800c150:	60fb      	str	r3, [r7, #12]
 800c152:	f107 0310 	add.w	r3, r7, #16
 800c156:	2200      	movs	r2, #0
 800c158:	601a      	str	r2, [r3, #0]
 800c15a:	809a      	strh	r2, [r3, #4]
            uint8_t ide                          = measurements_4_IDE;
 800c15c:	2300      	movs	r3, #0
 800c15e:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                          = measurements_4_DLC;
 800c160:	2308      	movs	r3, #8
 800c162:	72bb      	strb	r3, [r7, #10]
            data[0]                              = measurements_4_CANID;
 800c164:	2304      	movs	r3, #4
 800c166:	733b      	strb	r3, [r7, #12]
            data[1]                              = measurements_4_DLC;
 800c168:	2308      	movs	r3, #8
 800c16a:	737b      	strb	r3, [r7, #13]
            Pack_measurements_4_jlb(&jlb_rx.measurements_4, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800c172:	f107 010c 	add.w	r1, r7, #12
 800c176:	3102      	adds	r1, #2
 800c178:	f107 030b 	add.w	r3, r7, #11
 800c17c:	f107 020a 	add.w	r2, r7, #10
 800c180:	f7f5 fb9e 	bl	80018c0 <Pack_measurements_4_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + measurements_4_DLC + 2);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800c190:	4618      	mov	r0, r3
 800c192:	f001 fc5a 	bl	800da4a <_ZNSt6vectorIcSaIcEE3endEv>
 800c196:	4603      	mov	r3, r0
 800c198:	61fb      	str	r3, [r7, #28]
 800c19a:	f107 021c 	add.w	r2, r7, #28
 800c19e:	f107 0318 	add.w	r3, r7, #24
 800c1a2:	4611      	mov	r1, r2
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f002 f896 	bl	800e2d6 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800c1aa:	f107 030c 	add.w	r3, r7, #12
 800c1ae:	330a      	adds	r3, #10
 800c1b0:	f107 020c 	add.w	r2, r7, #12
 800c1b4:	69b9      	ldr	r1, [r7, #24]
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	f002 f89e 	bl	800e2f8 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800c1bc:	bf00      	nop
 800c1be:	3724      	adds	r7, #36	; 0x24
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd90      	pop	{r4, r7, pc}

0800c1c4 <_ZN3jlb12SignalSender14measurements_5Ev>:

        void measurements_5()
 800c1c4:	b590      	push	{r4, r7, lr}
 800c1c6:	b089      	sub	sp, #36	; 0x24
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.measurements_5.duty_cycle_phys    = measurements.duty_cycle;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7f4 f9a9 	bl	800052c <__aeabi_f2d>
 800c1da:	4602      	mov	r2, r0
 800c1dc:	460b      	mov	r3, r1
 800c1de:	6879      	ldr	r1, [r7, #4]
 800c1e0:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
            jlb_rx.measurements_5.motor_current_phys = measurements.motor_current;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800c1ea:	685b      	ldr	r3, [r3, #4]
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f7f4 f99d 	bl	800052c <__aeabi_f2d>
 800c1f2:	4602      	mov	r2, r0
 800c1f4:	460b      	mov	r3, r1
 800c1f6:	6879      	ldr	r1, [r7, #4]
 800c1f8:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
            jlb_rx.measurements_5.object_range_phys  = measurements.object_range;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800c202:	689b      	ldr	r3, [r3, #8]
 800c204:	4618      	mov	r0, r3
 800c206:	f7f4 f991 	bl	800052c <__aeabi_f2d>
 800c20a:	4602      	mov	r2, r0
 800c20c:	460b      	mov	r3, r1
 800c20e:	6879      	ldr	r1, [r7, #4]
 800c210:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
            jlb_rx.measurements_5.wheel_rpm_phys     = measurements.wheel_rpm;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800c21a:	68db      	ldr	r3, [r3, #12]
 800c21c:	4618      	mov	r0, r3
 800c21e:	f7f4 f985 	bl	800052c <__aeabi_f2d>
 800c222:	4602      	mov	r2, r0
 800c224:	460b      	mov	r3, r1
 800c226:	6879      	ldr	r1, [r7, #4]
 800c228:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8

            char    data[measurements_4_DLC + 2] = {0};
 800c22c:	2300      	movs	r3, #0
 800c22e:	60fb      	str	r3, [r7, #12]
 800c230:	f107 0310 	add.w	r3, r7, #16
 800c234:	2200      	movs	r2, #0
 800c236:	601a      	str	r2, [r3, #0]
 800c238:	809a      	strh	r2, [r3, #4]
            uint8_t ide                          = measurements_5_IDE;
 800c23a:	2300      	movs	r3, #0
 800c23c:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                          = measurements_5_DLC;
 800c23e:	2308      	movs	r3, #8
 800c240:	72bb      	strb	r3, [r7, #10]
            data[0]                              = measurements_5_CANID;
 800c242:	2305      	movs	r3, #5
 800c244:	733b      	strb	r3, [r7, #12]
            data[1]                              = measurements_5_DLC;
 800c246:	2308      	movs	r3, #8
 800c248:	737b      	strb	r3, [r7, #13]
            Pack_measurements_5_jlb(&jlb_rx.measurements_5, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 800c250:	f107 010c 	add.w	r1, r7, #12
 800c254:	3102      	adds	r1, #2
 800c256:	f107 030b 	add.w	r3, r7, #11
 800c25a:	f107 020a 	add.w	r2, r7, #10
 800c25e:	f7f5 fbef 	bl	8001a40 <Pack_measurements_5_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + measurements_5_DLC + 2);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800c26e:	4618      	mov	r0, r3
 800c270:	f001 fbeb 	bl	800da4a <_ZNSt6vectorIcSaIcEE3endEv>
 800c274:	4603      	mov	r3, r0
 800c276:	61fb      	str	r3, [r7, #28]
 800c278:	f107 021c 	add.w	r2, r7, #28
 800c27c:	f107 0318 	add.w	r3, r7, #24
 800c280:	4611      	mov	r1, r2
 800c282:	4618      	mov	r0, r3
 800c284:	f002 f827 	bl	800e2d6 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800c288:	f107 030c 	add.w	r3, r7, #12
 800c28c:	330a      	adds	r3, #10
 800c28e:	f107 020c 	add.w	r2, r7, #12
 800c292:	69b9      	ldr	r1, [r7, #24]
 800c294:	4620      	mov	r0, r4
 800c296:	f002 f82f 	bl	800e2f8 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800c29a:	bf00      	nop
 800c29c:	3724      	adds	r7, #36	; 0x24
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd90      	pop	{r4, r7, pc}

0800c2a2 <_ZN3jlb12SignalSender10odometry_1Ev>:

        void odometry_1()
 800c2a2:	b590      	push	{r4, r7, lr}
 800c2a4:	b089      	sub	sp, #36	; 0x24
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.odometry_1.position_x_phys  = odometry.x_t;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800c2b0:	689b      	ldr	r3, [r3, #8]
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7f4 f93a 	bl	800052c <__aeabi_f2d>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	460b      	mov	r3, r1
 800c2bc:	6879      	ldr	r1, [r7, #4]
 800c2be:	e9c1 233e 	strd	r2, r3, [r1, #248]	; 0xf8
            jlb_rx.odometry_1.position_y_phys  = odometry.y_t;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800c2c8:	68db      	ldr	r3, [r3, #12]
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7f4 f92e 	bl	800052c <__aeabi_f2d>
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	460b      	mov	r3, r1
 800c2d4:	6879      	ldr	r1, [r7, #4]
 800c2d6:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
            jlb_rx.odometry_1.orientation_phys = odometry.theta_t;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800c2e0:	691b      	ldr	r3, [r3, #16]
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7f4 f922 	bl	800052c <__aeabi_f2d>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	460b      	mov	r3, r1
 800c2ec:	6879      	ldr	r1, [r7, #4]
 800c2ee:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8

            char    data[odometry_1_DLC + 2] = {0};
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	60fb      	str	r3, [r7, #12]
 800c2f6:	f107 0310 	add.w	r3, r7, #16
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	601a      	str	r2, [r3, #0]
 800c2fe:	809a      	strh	r2, [r3, #4]
            uint8_t ide                      = odometry_1_IDE;
 800c300:	2300      	movs	r3, #0
 800c302:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                      = odometry_1_DLC;
 800c304:	2308      	movs	r3, #8
 800c306:	72bb      	strb	r3, [r7, #10]
            data[0]                          = odometry_1_CANID;
 800c308:	2311      	movs	r3, #17
 800c30a:	733b      	strb	r3, [r7, #12]
            data[1]                          = odometry_1_DLC;
 800c30c:	2308      	movs	r3, #8
 800c30e:	737b      	strb	r3, [r7, #13]
            Pack_odometry_1_jlb(&jlb_rx.odometry_1, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f103 00e0 	add.w	r0, r3, #224	; 0xe0
 800c316:	f107 010c 	add.w	r1, r7, #12
 800c31a:	3102      	adds	r1, #2
 800c31c:	f107 030b 	add.w	r3, r7, #11
 800c320:	f107 020a 	add.w	r2, r7, #10
 800c324:	f7f5 fc70 	bl	8001c08 <Pack_odometry_1_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + odometry_1_DLC + 2);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800c334:	4618      	mov	r0, r3
 800c336:	f001 fb88 	bl	800da4a <_ZNSt6vectorIcSaIcEE3endEv>
 800c33a:	4603      	mov	r3, r0
 800c33c:	61fb      	str	r3, [r7, #28]
 800c33e:	f107 021c 	add.w	r2, r7, #28
 800c342:	f107 0318 	add.w	r3, r7, #24
 800c346:	4611      	mov	r1, r2
 800c348:	4618      	mov	r0, r3
 800c34a:	f001 ffc4 	bl	800e2d6 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800c34e:	f107 030c 	add.w	r3, r7, #12
 800c352:	330a      	adds	r3, #10
 800c354:	f107 020c 	add.w	r2, r7, #12
 800c358:	69b9      	ldr	r1, [r7, #24]
 800c35a:	4620      	mov	r0, r4
 800c35c:	f001 ffcc 	bl	800e2f8 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800c360:	bf00      	nop
 800c362:	3724      	adds	r7, #36	; 0x24
 800c364:	46bd      	mov	sp, r7
 800c366:	bd90      	pop	{r4, r7, pc}

0800c368 <_ZN3jlb12SignalSender10odometry_2Ev>:

        void odometry_2()
 800c368:	b590      	push	{r4, r7, lr}
 800c36a:	b089      	sub	sp, #36	; 0x24
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.odometry_2.linear_velocity_x_phys  = odometry.vx_t;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4618      	mov	r0, r3
 800c37a:	f7f4 f8d7 	bl	800052c <__aeabi_f2d>
 800c37e:	4602      	mov	r2, r0
 800c380:	460b      	mov	r3, r1
 800c382:	6879      	ldr	r1, [r7, #4]
 800c384:	e9c1 234a 	strd	r2, r3, [r1, #296]	; 0x128
            jlb_rx.odometry_2.angular_velocity_z_phys = odometry.w_t;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	4618      	mov	r0, r3
 800c392:	f7f4 f8cb 	bl	800052c <__aeabi_f2d>
 800c396:	4602      	mov	r2, r0
 800c398:	460b      	mov	r3, r1
 800c39a:	6879      	ldr	r1, [r7, #4]
 800c39c:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118

            char    data[odometry_2_DLC + 2] = {0};
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	60fb      	str	r3, [r7, #12]
 800c3a4:	f107 0310 	add.w	r3, r7, #16
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	601a      	str	r2, [r3, #0]
 800c3ac:	809a      	strh	r2, [r3, #4]
            uint8_t ide                      = odometry_2_IDE;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                      = odometry_2_DLC;
 800c3b2:	2308      	movs	r3, #8
 800c3b4:	72bb      	strb	r3, [r7, #10]
            data[0]                          = odometry_2_CANID;
 800c3b6:	2312      	movs	r3, #18
 800c3b8:	733b      	strb	r3, [r7, #12]
            data[1]                          = odometry_2_DLC;
 800c3ba:	2308      	movs	r3, #8
 800c3bc:	737b      	strb	r3, [r7, #13]
            Pack_odometry_2_jlb(&jlb_rx.odometry_2, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f503 7088 	add.w	r0, r3, #272	; 0x110
 800c3c4:	f107 010c 	add.w	r1, r7, #12
 800c3c8:	3102      	adds	r1, #2
 800c3ca:	f107 030b 	add.w	r3, r7, #11
 800c3ce:	f107 020a 	add.w	r2, r7, #10
 800c3d2:	f7f5 fce1 	bl	8001d98 <Pack_odometry_2_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + odometry_2_DLC + 2);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f001 fb31 	bl	800da4a <_ZNSt6vectorIcSaIcEE3endEv>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	61fb      	str	r3, [r7, #28]
 800c3ec:	f107 021c 	add.w	r2, r7, #28
 800c3f0:	f107 0318 	add.w	r3, r7, #24
 800c3f4:	4611      	mov	r1, r2
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f001 ff6d 	bl	800e2d6 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800c3fc:	f107 030c 	add.w	r3, r7, #12
 800c400:	330a      	adds	r3, #10
 800c402:	f107 020c 	add.w	r2, r7, #12
 800c406:	69b9      	ldr	r1, [r7, #24]
 800c408:	4620      	mov	r0, r4
 800c40a:	f001 ff75 	bl	800e2f8 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800c40e:	bf00      	nop
 800c410:	3724      	adds	r7, #36	; 0x24
 800c412:	46bd      	mov	sp, r7
 800c414:	bd90      	pop	{r4, r7, pc}

0800c416 <_ZN3jlb12SignalSender7logic_1Ev>:

        void logic_1()
 800c416:	b590      	push	{r4, r7, lr}
 800c418:	b089      	sub	sp, #36	; 0x24
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.logic_1.target_angle_phys      = controller.target_angle;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800c424:	699b      	ldr	r3, [r3, #24]
 800c426:	4618      	mov	r0, r3
 800c428:	f7f4 f880 	bl	800052c <__aeabi_f2d>
 800c42c:	4602      	mov	r2, r0
 800c42e:	460b      	mov	r3, r1
 800c430:	6879      	ldr	r1, [r7, #4]
 800c432:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
            jlb_rx.logic_1.target_speed_phys      = controller.target_speed;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800c43c:	69db      	ldr	r3, [r3, #28]
 800c43e:	4618      	mov	r0, r3
 800c440:	f7f4 f874 	bl	800052c <__aeabi_f2d>
 800c444:	4602      	mov	r2, r0
 800c446:	460b      	mov	r3, r1
 800c448:	6879      	ldr	r1, [r7, #4]
 800c44a:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
            jlb_rx.logic_1.cross_track_error_phys = controller.cross_track_error;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800c454:	6a1b      	ldr	r3, [r3, #32]
 800c456:	4618      	mov	r0, r3
 800c458:	f7f4 f868 	bl	800052c <__aeabi_f2d>
 800c45c:	4602      	mov	r2, r0
 800c45e:	460b      	mov	r3, r1
 800c460:	6879      	ldr	r1, [r7, #4]
 800c462:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
            jlb_rx.logic_1.heading_error_phys     = controller.heading_error;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800c46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c46e:	4618      	mov	r0, r3
 800c470:	f7f4 f85c 	bl	800052c <__aeabi_f2d>
 800c474:	4602      	mov	r2, r0
 800c476:	460b      	mov	r3, r1
 800c478:	6879      	ldr	r1, [r7, #4]
 800c47a:	e9c1 235a 	strd	r2, r3, [r1, #360]	; 0x168

            char    data[logic_1_DLC + 2] = {0};
 800c47e:	2300      	movs	r3, #0
 800c480:	60fb      	str	r3, [r7, #12]
 800c482:	f107 0310 	add.w	r3, r7, #16
 800c486:	2200      	movs	r2, #0
 800c488:	601a      	str	r2, [r3, #0]
 800c48a:	809a      	strh	r2, [r3, #4]
            uint8_t ide                   = logic_1_IDE;
 800c48c:	2300      	movs	r3, #0
 800c48e:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                   = logic_1_DLC;
 800c490:	2308      	movs	r3, #8
 800c492:	72bb      	strb	r3, [r7, #10]
            data[0]                       = logic_1_CANID;
 800c494:	2321      	movs	r3, #33	; 0x21
 800c496:	733b      	strb	r3, [r7, #12]
            data[1]                       = logic_1_DLC;
 800c498:	2308      	movs	r3, #8
 800c49a:	737b      	strb	r3, [r7, #13]
            Pack_logic_1_jlb(&jlb_rx.logic_1, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f503 7098 	add.w	r0, r3, #304	; 0x130
 800c4a2:	f107 010c 	add.w	r1, r7, #12
 800c4a6:	3102      	adds	r1, #2
 800c4a8:	f107 030b 	add.w	r3, r7, #11
 800c4ac:	f107 020a 	add.w	r2, r7, #10
 800c4b0:	f7f5 fd06 	bl	8001ec0 <Pack_logic_1_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + logic_1_DLC + 2);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f001 fac2 	bl	800da4a <_ZNSt6vectorIcSaIcEE3endEv>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	61fb      	str	r3, [r7, #28]
 800c4ca:	f107 021c 	add.w	r2, r7, #28
 800c4ce:	f107 0318 	add.w	r3, r7, #24
 800c4d2:	4611      	mov	r1, r2
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f001 fefe 	bl	800e2d6 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800c4da:	f107 030c 	add.w	r3, r7, #12
 800c4de:	330a      	adds	r3, #10
 800c4e0:	f107 020c 	add.w	r2, r7, #12
 800c4e4:	69b9      	ldr	r1, [r7, #24]
 800c4e6:	4620      	mov	r0, r4
 800c4e8:	f001 ff06 	bl	800e2f8 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800c4ec:	bf00      	nop
 800c4ee:	3724      	adds	r7, #36	; 0x24
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd90      	pop	{r4, r7, pc}

0800c4f4 <_ZN3jlb12SignalSender7logic_2Ev>:

        void logic_2()
 800c4f4:	b590      	push	{r4, r7, lr}
 800c4f6:	b089      	sub	sp, #36	; 0x24
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.logic_2.distance_traveled_phys = odometry.distance_local;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800c502:	6a1b      	ldr	r3, [r3, #32]
 800c504:	4618      	mov	r0, r3
 800c506:	f7f4 f811 	bl	800052c <__aeabi_f2d>
 800c50a:	4602      	mov	r2, r0
 800c50c:	460b      	mov	r3, r1
 800c50e:	6879      	ldr	r1, [r7, #4]
 800c510:	e9c1 235e 	strd	r2, r3, [r1, #376]	; 0x178
            jlb_rx.logic_2.labyrinth_state        = static_cast<uint8_t>(as_state.labyrinth_state);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	b2da      	uxtb	r2, r3
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f883 2173 	strb.w	r2, [r3, #371]	; 0x173
            jlb_rx.logic_2.fast_state             = static_cast<uint8_t>(as_state.fast_state);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800c52a:	689b      	ldr	r3, [r3, #8]
 800c52c:	b2da      	uxtb	r2, r3
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
            jlb_rx.logic_2.next_node              = as_state.next_node;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800c53a:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
            jlb_rx.logic_2.previous_node          = as_state.previous_node;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800c54a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f883 2175 	strb.w	r2, [r3, #373]	; 0x175
            jlb_rx.logic_2.direction              = static_cast<uint8_t>(controller.direction);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800c55a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c55e:	b2da      	uxtb	r2, r3
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
            jlb_rx.logic_2.mission                = static_cast<uint8_t>(as_state.mission);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	b2da      	uxtb	r2, r3
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171

            char    data[logic_2_DLC + 2] = {0};
 800c576:	2300      	movs	r3, #0
 800c578:	60fb      	str	r3, [r7, #12]
 800c57a:	f107 0310 	add.w	r3, r7, #16
 800c57e:	2200      	movs	r2, #0
 800c580:	601a      	str	r2, [r3, #0]
 800c582:	809a      	strh	r2, [r3, #4]
            uint8_t ide                   = logic_2_IDE;
 800c584:	2300      	movs	r3, #0
 800c586:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                   = logic_2_DLC;
 800c588:	2308      	movs	r3, #8
 800c58a:	72bb      	strb	r3, [r7, #10]
            data[0]                       = logic_2_CANID;
 800c58c:	2322      	movs	r3, #34	; 0x22
 800c58e:	733b      	strb	r3, [r7, #12]
            data[1]                       = logic_2_DLC;
 800c590:	2308      	movs	r3, #8
 800c592:	737b      	strb	r3, [r7, #13]
            Pack_logic_2_jlb(&jlb_rx.logic_2, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f503 70b8 	add.w	r0, r3, #368	; 0x170
 800c59a:	f107 010c 	add.w	r1, r7, #12
 800c59e:	3102      	adds	r1, #2
 800c5a0:	f107 030b 	add.w	r3, r7, #11
 800c5a4:	f107 020a 	add.w	r2, r7, #10
 800c5a8:	f7f5 fd8e 	bl	80020c8 <Pack_logic_2_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + logic_2_DLC + 2);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f001 fa46 	bl	800da4a <_ZNSt6vectorIcSaIcEE3endEv>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	61fb      	str	r3, [r7, #28]
 800c5c2:	f107 021c 	add.w	r2, r7, #28
 800c5c6:	f107 0318 	add.w	r3, r7, #24
 800c5ca:	4611      	mov	r1, r2
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f001 fe82 	bl	800e2d6 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800c5d2:	f107 030c 	add.w	r3, r7, #12
 800c5d6:	330a      	adds	r3, #10
 800c5d8:	f107 020c 	add.w	r2, r7, #12
 800c5dc:	69b9      	ldr	r1, [r7, #24]
 800c5de:	4620      	mov	r0, r4
 800c5e0:	f001 fe8a 	bl	800e2f8 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800c5e4:	bf00      	nop
 800c5e6:	3724      	adds	r7, #36	; 0x24
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd90      	pop	{r4, r7, pc}

0800c5ec <_ZN3jlb12SignalSender6logic3Ev>:

        void logic3()
 800c5ec:	b590      	push	{r4, r7, lr}
 800c5ee:	b089      	sub	sp, #36	; 0x24
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.logic_3.ang_error_norm_phys      = controller.ang_error_norm;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800c5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f7f3 ff95 	bl	800052c <__aeabi_f2d>
 800c602:	4602      	mov	r2, r0
 800c604:	460b      	mov	r3, r1
 800c606:	6879      	ldr	r1, [r7, #4]
 800c608:	e9c1 2362 	strd	r2, r3, [r1, #392]	; 0x188
            jlb_rx.logic_3.dist_error_norm_phys     = controller.dist_error_norm;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800c612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c614:	4618      	mov	r0, r3
 800c616:	f7f3 ff89 	bl	800052c <__aeabi_f2d>
 800c61a:	4602      	mov	r2, r0
 800c61c:	460b      	mov	r3, r1
 800c61e:	6879      	ldr	r1, [r7, #4]
 800c620:	e9c1 2366 	strd	r2, r3, [r1, #408]	; 0x198
            jlb_rx.logic_3.line_position_rear_phys  = controller.line_position_rear;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800c62a:	68db      	ldr	r3, [r3, #12]
 800c62c:	4618      	mov	r0, r3
 800c62e:	f7f3 ff7d 	bl	800052c <__aeabi_f2d>
 800c632:	4602      	mov	r2, r0
 800c634:	460b      	mov	r3, r1
 800c636:	6879      	ldr	r1, [r7, #4]
 800c638:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8
            jlb_rx.logic_3.line_position_front_phys = controller.line_position_front;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800c642:	689b      	ldr	r3, [r3, #8]
 800c644:	4618      	mov	r0, r3
 800c646:	f7f3 ff71 	bl	800052c <__aeabi_f2d>
 800c64a:	4602      	mov	r2, r0
 800c64c:	460b      	mov	r3, r1
 800c64e:	6879      	ldr	r1, [r7, #4]
 800c650:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
            jlb_rx.logic_3.at_cross_section         = as_state.at_cross_section;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800c65a:	7c5b      	ldrb	r3, [r3, #17]
 800c65c:	461a      	mov	r2, r3
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
            jlb_rx.logic_3.under_gate               = as_state.under_gate;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800c66a:	7c1b      	ldrb	r3, [r3, #16]
 800c66c:	461a      	mov	r2, r3
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1

            char    data[logic_3_DLC + 2] = {0};
 800c674:	2300      	movs	r3, #0
 800c676:	60fb      	str	r3, [r7, #12]
 800c678:	f107 0310 	add.w	r3, r7, #16
 800c67c:	2200      	movs	r2, #0
 800c67e:	601a      	str	r2, [r3, #0]
 800c680:	809a      	strh	r2, [r3, #4]
            uint8_t ide                   = logic_3_IDE;
 800c682:	2300      	movs	r3, #0
 800c684:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                   = logic_3_DLC;
 800c686:	2308      	movs	r3, #8
 800c688:	72bb      	strb	r3, [r7, #10]
            data[0]                       = logic_3_CANID;
 800c68a:	2323      	movs	r3, #35	; 0x23
 800c68c:	733b      	strb	r3, [r7, #12]
            data[1]                       = logic_3_DLC;
 800c68e:	2308      	movs	r3, #8
 800c690:	737b      	strb	r3, [r7, #13]
            Pack_logic_3_jlb(&jlb_rx.logic_3, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f503 70c0 	add.w	r0, r3, #384	; 0x180
 800c698:	f107 010c 	add.w	r1, r7, #12
 800c69c:	3102      	adds	r1, #2
 800c69e:	f107 030b 	add.w	r3, r7, #11
 800c6a2:	f107 020a 	add.w	r2, r7, #10
 800c6a6:	f7f5 fd97 	bl	80021d8 <Pack_logic_3_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + logic_3_DLC + 2);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f001 f9c7 	bl	800da4a <_ZNSt6vectorIcSaIcEE3endEv>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	61fb      	str	r3, [r7, #28]
 800c6c0:	f107 021c 	add.w	r2, r7, #28
 800c6c4:	f107 0318 	add.w	r3, r7, #24
 800c6c8:	4611      	mov	r1, r2
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f001 fe03 	bl	800e2d6 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800c6d0:	f107 030c 	add.w	r3, r7, #12
 800c6d4:	330a      	adds	r3, #10
 800c6d6:	f107 020c 	add.w	r2, r7, #12
 800c6da:	69b9      	ldr	r1, [r7, #24]
 800c6dc:	4620      	mov	r0, r4
 800c6de:	f001 fe0b 	bl	800e2f8 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800c6e2:	bf00      	nop
 800c6e4:	3724      	adds	r7, #36	; 0x24
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd90      	pop	{r4, r7, pc}

0800c6ea <_ZN3jlb7ASStateD1Ev>:
    class ASState
 800c6ea:	b580      	push	{r7, lr}
 800c6ec:	b082      	sub	sp, #8
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	332c      	adds	r3, #44	; 0x2c
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f001 f878 	bl	800d7ec <_ZNSt6vectorISt4pairIciESaIS1_EED1Ev>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	4618      	mov	r0, r3
 800c700:	3708      	adds	r7, #8
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}

0800c706 <_ZN3jlb5LogicC1ENS_9DirectionEfff>:
namespace jlb
{
    class Logic
    {
    public:
        Logic(Direction direction_ = Direction::STRAIGHT, const float x_t_ = 0.0f, const float y_t_ = 0.0f, const float theta_t_ = 0.0f) : odometry(x_t_, y_t_, theta_t_), controller(direction_) {}
 800c706:	b5b0      	push	{r4, r5, r7, lr}
 800c708:	b088      	sub	sp, #32
 800c70a:	af02      	add	r7, sp, #8
 800c70c:	6178      	str	r0, [r7, #20]
 800c70e:	6139      	str	r1, [r7, #16]
 800c710:	ed87 0a03 	vstr	s0, [r7, #12]
 800c714:	edc7 0a02 	vstr	s1, [r7, #8]
 800c718:	ed87 1a01 	vstr	s2, [r7, #4]
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	ed97 1a01 	vldr	s2, [r7, #4]
 800c722:	edd7 0a02 	vldr	s1, [r7, #8]
 800c726:	ed97 0a03 	vldr	s0, [r7, #12]
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7fc ff2c 	bl	8009588 <_ZN3jlb8OdometryC1Efff>
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	339c      	adds	r3, #156	; 0x9c
 800c734:	6939      	ldr	r1, [r7, #16]
 800c736:	4618      	mov	r0, r3
 800c738:	f7f8 f862 	bl	8004800 <_ZN3jlb10ControllerC1ENS_9DirectionE>
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800c742:	4618      	mov	r0, r3
 800c744:	f7f8 ff3c 	bl	80055c0 <_ZN3jlb5GraphC1Ev>
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 800c74e:	6979      	ldr	r1, [r7, #20]
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800c75c:	f7fd fbff 	bl	8009f5e <_ZN3jlb7ASStateC1ERNS_8OdometryERNS_10ControllerERNS_5GraphE>
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	f503 70f4 	add.w	r0, r3, #488	; 0x1e8
 800c766:	6979      	ldr	r1, [r7, #20]
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	f503 75cc 	add.w	r5, r3, #408	; 0x198
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800c77a:	697a      	ldr	r2, [r7, #20]
 800c77c:	f502 72c4 	add.w	r2, r2, #392	; 0x188
 800c780:	9201      	str	r2, [sp, #4]
 800c782:	9300      	str	r3, [sp, #0]
 800c784:	462b      	mov	r3, r5
 800c786:	4622      	mov	r2, r4
 800c788:	f7fd feda 	bl	800a540 <_ZN3jlb12SignalSenderC1ERKNS_8OdometryERKNS_10ControllerERKNS_7ASStateERKNS_5GraphERK12Measurements>
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	4618      	mov	r0, r3
 800c790:	3718      	adds	r7, #24
 800c792:	46bd      	mov	sp, r7
 800c794:	bdb0      	pop	{r4, r5, r7, pc}

0800c796 <_ZN3jlb5Logic6updateEv>:

        ControlSignal update()
 800c796:	b580      	push	{r7, lr}
 800c798:	b090      	sub	sp, #64	; 0x40
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	60f8      	str	r0, [r7, #12]
        {
            auto [vx, x, y, theta] = odometry.update_odom();
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f7fd f86d 	bl	8009880 <_ZN3jlb8Odometry11update_odomEv>
 800c7a6:	eeb0 6a40 	vmov.f32	s12, s0
 800c7aa:	eef0 6a60 	vmov.f32	s13, s1
 800c7ae:	eeb0 7a41 	vmov.f32	s14, s2
 800c7b2:	eef0 7a61 	vmov.f32	s15, s3
 800c7b6:	ed87 6a0a 	vstr	s12, [r7, #40]	; 0x28
 800c7ba:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 800c7be:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 800c7c2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            controller.set_current_velocity(vx);
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	339c      	adds	r3, #156	; 0x9c
            auto [vx, x, y, theta] = odometry.update_odom();
 800c7ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
            controller.set_current_velocity(vx);
 800c7ce:	eeb0 0a67 	vmov.f32	s0, s15
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7f8 fd77 	bl	80052c6 <_ZN3jlb10Controller20set_current_velocityEf>

            auto [mission, labyrinth_state, fast_state, reference_speed] = as_state.update();
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 800c7de:	f107 0318 	add.w	r3, r7, #24
 800c7e2:	4611      	mov	r1, r2
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f7fd fc29 	bl	800a03c <_ZN3jlb7ASState6updateEv>
            controller.set_reference_speed(reference_speed);
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	339c      	adds	r3, #156	; 0x9c
            auto [mission, labyrinth_state, fast_state, reference_speed] = as_state.update();
 800c7ee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
            controller.set_reference_speed(reference_speed);
 800c7f2:	eeb0 0a67 	vmov.f32	s0, s15
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7f8 fd8a 	bl	8005310 <_ZN3jlb10Controller19set_reference_speedEf>

            auto [target_angle, target_speed] = controller.update();
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	339c      	adds	r3, #156	; 0x9c
 800c800:	4618      	mov	r0, r3
 800c802:	f7f8 fcc5 	bl	8005190 <_ZN3jlb10Controller6updateEv>
 800c806:	eeb0 7a40 	vmov.f32	s14, s0
 800c80a:	eef0 7a60 	vmov.f32	s15, s1
 800c80e:	ed87 7a04 	vstr	s14, [r7, #16]
 800c812:	edc7 7a05 	vstr	s15, [r7, #20]
 800c816:	693b      	ldr	r3, [r7, #16]
            return ControlSignal{target_angle, target_speed};
 800c818:	63bb      	str	r3, [r7, #56]	; 0x38
            auto [target_angle, target_speed] = controller.update();
 800c81a:	697b      	ldr	r3, [r7, #20]
            return ControlSignal{target_angle, target_speed};
 800c81c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c81e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c822:	ee07 2a10 	vmov	s14, r2
 800c826:	ee07 3a90 	vmov	s15, r3
        }
 800c82a:	eeb0 0a47 	vmov.f32	s0, s14
 800c82e:	eef0 0a67 	vmov.f32	s1, s15
 800c832:	3740      	adds	r7, #64	; 0x40
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}

0800c838 <_ZN3jlb5Logic19set_detection_frontEPbSt6vectorIfSaIfEE>:

        void set_detection_front(bool *detection_front_, std::vector<float> line_positions_front_)
 800c838:	b590      	push	{r4, r7, lr}
 800c83a:	b089      	sub	sp, #36	; 0x24
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	60f8      	str	r0, [r7, #12]
 800c840:	60b9      	str	r1, [r7, #8]
 800c842:	607a      	str	r2, [r7, #4]
        {
            as_state.current_number_of_lines = static_cast<uint8_t>(line_positions_front_.size());
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f7f7 f8ca 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800c84a:	4603      	mov	r3, r0
 800c84c:	b2da      	uxtb	r2, r3
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
            controller.set_detection_front(detection_front_, line_positions_front_);
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 800c85a:	f107 0314 	add.w	r3, r7, #20
 800c85e:	6879      	ldr	r1, [r7, #4]
 800c860:	4618      	mov	r0, r3
 800c862:	f000 fb7b 	bl	800cf5c <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 800c866:	f107 0314 	add.w	r3, r7, #20
 800c86a:	461a      	mov	r2, r3
 800c86c:	68b9      	ldr	r1, [r7, #8]
 800c86e:	4620      	mov	r0, r4
 800c870:	f7f8 fce3 	bl	800523a <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE>
 800c874:	f107 0314 	add.w	r3, r7, #20
 800c878:	4618      	mov	r0, r3
 800c87a:	f7f6 fe11 	bl	80034a0 <_ZNSt6vectorIfSaIfEED1Ev>
        }
 800c87e:	bf00      	nop
 800c880:	3724      	adds	r7, #36	; 0x24
 800c882:	46bd      	mov	sp, r7
 800c884:	bd90      	pop	{r4, r7, pc}

0800c886 <_ZN3jlb5Logic18set_detection_rearEPbSt6vectorIfSaIfEE>:
        void set_detection_rear(bool *detection_rear_, std::vector<float> line_positions_rear_) { controller.set_detection_rear(detection_rear_, line_positions_rear_); }
 800c886:	b590      	push	{r4, r7, lr}
 800c888:	b089      	sub	sp, #36	; 0x24
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	60f8      	str	r0, [r7, #12]
 800c88e:	60b9      	str	r1, [r7, #8]
 800c890:	607a      	str	r2, [r7, #4]
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 800c898:	f107 0314 	add.w	r3, r7, #20
 800c89c:	6879      	ldr	r1, [r7, #4]
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f000 fb5c 	bl	800cf5c <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 800c8a4:	f107 0314 	add.w	r3, r7, #20
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	68b9      	ldr	r1, [r7, #8]
 800c8ac:	4620      	mov	r0, r4
 800c8ae:	f7f8 fce7 	bl	8005280 <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE>
 800c8b2:	f107 0314 	add.w	r3, r7, #20
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f7f6 fdf2 	bl	80034a0 <_ZNSt6vectorIfSaIfEED1Ev>
 800c8bc:	bf00      	nop
 800c8be:	3724      	adds	r7, #36	; 0x24
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd90      	pop	{r4, r7, pc}

0800c8c4 <_ZN3jlb5Logic12imu_callbackEf>:
        void set_under_gate(const bool under_gate_) { as_state.under_gate = under_gate_; }
        void set_at_cross_section(const bool at_cross_section_) { as_state.at_cross_section = at_cross_section_; }
        void imu_callback(const float yaw_rate_) { odometry.imu_callback(yaw_rate_); }
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b082      	sub	sp, #8
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	ed87 0a00 	vstr	s0, [r7]
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	ed97 0a00 	vldr	s0, [r7]
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f7fc ff62 	bl	80097a0 <_ZN3jlb8Odometry12imu_callbackEf>
 800c8dc:	bf00      	nop
 800c8de:	3708      	adds	r7, #8
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <_ZN3jlb5Logic12rpm_callbackEf>:
        void rpm_callback(const float motor_rpm_) { odometry.rpm_callback(motor_rpm_); }
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	ed87 0a00 	vstr	s0, [r7]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	ed97 0a00 	vldr	s0, [r7]
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f7fc fec2 	bl	8009680 <_ZN3jlb8Odometry12rpm_callbackEf>
 800c8fc:	bf00      	nop
 800c8fe:	3708      	adds	r7, #8
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}

0800c904 <_ZN3jlb5Logic16set_object_rangeEf>:
        void set_object_range(const float object_range_) { controller.set_object_range(object_range_); }
 800c904:	b580      	push	{r7, lr}
 800c906:	b082      	sub	sp, #8
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	ed87 0a00 	vstr	s0, [r7]
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	339c      	adds	r3, #156	; 0x9c
 800c914:	ed97 0a00 	vldr	s0, [r7]
 800c918:	4618      	mov	r0, r3
 800c91a:	f7f8 fc7f 	bl	800521c <_ZN3jlb10Controller16set_object_rangeEf>
 800c91e:	bf00      	nop
 800c920:	3708      	adds	r7, #8
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}

0800c926 <_ZN3jlb5Logic10set_statesENS_14CompositeStateE>:
        void set_states(const CompositeState state_) { as_state.set_states(state_); }
 800c926:	b084      	sub	sp, #16
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af02      	add	r7, sp, #8
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	f107 0014 	add.w	r0, r7, #20
 800c934:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 800c93e:	6a3b      	ldr	r3, [r7, #32]
 800c940:	9300      	str	r3, [sp, #0]
 800c942:	f107 0314 	add.w	r3, r7, #20
 800c946:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c948:	f7fd fb5f 	bl	800a00a <_ZN3jlb7ASState10set_statesENS_14CompositeStateE>
 800c94c:	bf00      	nop
 800c94e:	3708      	adds	r7, #8
 800c950:	46bd      	mov	sp, r7
 800c952:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c956:	b004      	add	sp, #16
 800c958:	4770      	bx	lr

0800c95a <_ZN3jlb5Logic14send_telemetryEv>:
        void send_telemetry() { signal_sender.send_telemetry(); }
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b082      	sub	sp, #8
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c968:	4618      	mov	r0, r3
 800c96a:	f7fd fe1e 	bl	800a5aa <_ZN3jlb12SignalSender14send_telemetryEv>
 800c96e:	bf00      	nop
 800c970:	3708      	adds	r7, #8
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}

0800c976 <_ZN3jlb5Logic16set_measurementsERK12Measurements>:
        void set_measurements(const Measurements &measurements_) { measurements = measurements_; }
 800c976:	b490      	push	{r4, r7}
 800c978:	b082      	sub	sp, #8
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
 800c97e:	6039      	str	r1, [r7, #0]
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	683a      	ldr	r2, [r7, #0]
 800c984:	f503 74c4 	add.w	r4, r3, #392	; 0x188
 800c988:	4613      	mov	r3, r2
 800c98a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c98c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c990:	bf00      	nop
 800c992:	3708      	adds	r7, #8
 800c994:	46bd      	mov	sp, r7
 800c996:	bc90      	pop	{r4, r7}
 800c998:	4770      	bx	lr

0800c99a <_ZN3jlb5Logic12get_odometryEv>:
        void set_flood(const bool flood_)
        {
            if (flood_ && as_state.labyrinth_state == LabyrinthState::EXPLORING) { as_state.labyrinth_state = LabyrinthState::FLOOD; }
            else if (!flood_ && as_state.labyrinth_state == LabyrinthState::FLOOD) { as_state.labyrinth_state = LabyrinthState::EXPLORING; }
        }
        Odom get_odometry() { return {odometry.vx_t, odometry.x_t, odometry.y_t, odometry.theta_t}; }
 800c99a:	b480      	push	{r7}
 800c99c:	b08b      	sub	sp, #44	; 0x2c
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	6178      	str	r0, [r7, #20]
 800c9a2:	697b      	ldr	r3, [r7, #20]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	61bb      	str	r3, [r7, #24]
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	689b      	ldr	r3, [r3, #8]
 800c9ac:	61fb      	str	r3, [r7, #28]
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	68db      	ldr	r3, [r3, #12]
 800c9b2:	623b      	str	r3, [r7, #32]
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	691b      	ldr	r3, [r3, #16]
 800c9b8:	627b      	str	r3, [r7, #36]	; 0x24
 800c9ba:	69b8      	ldr	r0, [r7, #24]
 800c9bc:	69f9      	ldr	r1, [r7, #28]
 800c9be:	6a3a      	ldr	r2, [r7, #32]
 800c9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c2:	ee06 0a10 	vmov	s12, r0
 800c9c6:	ee06 1a90 	vmov	s13, r1
 800c9ca:	ee07 2a10 	vmov	s14, r2
 800c9ce:	ee07 3a90 	vmov	s15, r3
 800c9d2:	eeb0 0a46 	vmov.f32	s0, s12
 800c9d6:	eef0 0a66 	vmov.f32	s1, s13
 800c9da:	eeb0 1a47 	vmov.f32	s2, s14
 800c9de:	eef0 1a67 	vmov.f32	s3, s15
 800c9e2:	372c      	adds	r7, #44	; 0x2c
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr

0800c9ec <_Z19RegistrateUserTasksv>:
{ .name = "LoggerTask", .stack_size = 128 * 5, .priority = (osPriority_t) osPriorityHigh };



void RegistrateUserTasks()
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	af00      	add	r7, sp, #0
	adcTaskHandle = osThreadNew(ADCTask, NULL, &adcTask_attributes);
 800c9f0:	4a0c      	ldr	r2, [pc, #48]	; (800ca24 <_Z19RegistrateUserTasksv+0x38>)
 800c9f2:	2100      	movs	r1, #0
 800c9f4:	480c      	ldr	r0, [pc, #48]	; (800ca28 <_Z19RegistrateUserTasksv+0x3c>)
 800c9f6:	f016 fc3f 	bl	8023278 <osThreadNew>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	4a0b      	ldr	r2, [pc, #44]	; (800ca2c <_Z19RegistrateUserTasksv+0x40>)
 800c9fe:	6013      	str	r3, [r2, #0]
	mainTaskHandle = osThreadNew(MainTask, NULL, &mainTask_attributes);
 800ca00:	4a0b      	ldr	r2, [pc, #44]	; (800ca30 <_Z19RegistrateUserTasksv+0x44>)
 800ca02:	2100      	movs	r1, #0
 800ca04:	480b      	ldr	r0, [pc, #44]	; (800ca34 <_Z19RegistrateUserTasksv+0x48>)
 800ca06:	f016 fc37 	bl	8023278 <osThreadNew>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	4a0a      	ldr	r2, [pc, #40]	; (800ca38 <_Z19RegistrateUserTasksv+0x4c>)
 800ca0e:	6013      	str	r3, [r2, #0]
	encoderTaskHandle = osThreadNew(Encoder_Task, NULL, &encoderTask_attributes);
 800ca10:	4a0a      	ldr	r2, [pc, #40]	; (800ca3c <_Z19RegistrateUserTasksv+0x50>)
 800ca12:	2100      	movs	r1, #0
 800ca14:	480a      	ldr	r0, [pc, #40]	; (800ca40 <_Z19RegistrateUserTasksv+0x54>)
 800ca16:	f016 fc2f 	bl	8023278 <osThreadNew>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	4a09      	ldr	r2, [pc, #36]	; (800ca44 <_Z19RegistrateUserTasksv+0x58>)
 800ca1e:	6013      	str	r3, [r2, #0]
	//loggerTaskHandle = osThreadNew(LoggerTask, NULL, &loggerTask_attributes);

}
 800ca20:	bf00      	nop
 800ca22:	bd80      	pop	{r7, pc}
 800ca24:	08029820 	.word	0x08029820
 800ca28:	0800ca49 	.word	0x0800ca49
 800ca2c:	200006d8 	.word	0x200006d8
 800ca30:	08029844 	.word	0x08029844
 800ca34:	0800ca79 	.word	0x0800ca79
 800ca38:	200006dc 	.word	0x200006dc
 800ca3c:	08029868 	.word	0x08029868
 800ca40:	080027a9 	.word	0x080027a9
 800ca44:	200006e0 	.word	0x200006e0

0800ca48 <_Z7ADCTaskPv>:

void ADCTask(void *argument)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b084      	sub	sp, #16
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 800ca50:	f017 fca8 	bl	80243a4 <xTaskGetTickCount>
 800ca54:	4603      	mov	r3, r0
 800ca56:	60fb      	str	r3, [r7, #12]
	for (;;)
	{
		HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 800ca58:	2208      	movs	r2, #8
 800ca5a:	4905      	ldr	r1, [pc, #20]	; (800ca70 <_Z7ADCTaskPv+0x28>)
 800ca5c:	4805      	ldr	r0, [pc, #20]	; (800ca74 <_Z7ADCTaskPv+0x2c>)
 800ca5e:	f00c fc5b 	bl	8019318 <HAL_ADC_Start_DMA>
		vTaskDelayUntil(&xLastWakeTime, 5u);
 800ca62:	f107 030c 	add.w	r3, r7, #12
 800ca66:	2105      	movs	r1, #5
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f017 fb27 	bl	80240bc <vTaskDelayUntil>
		HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 800ca6e:	e7f3      	b.n	800ca58 <_Z7ADCTaskPv+0x10>
 800ca70:	2000011c 	.word	0x2000011c
 800ca74:	200006e4 	.word	0x200006e4

0800ca78 <_Z8MainTaskPv>:
	}
}

void MainTask(void * argument)
{
 800ca78:	b590      	push	{r4, r7, lr}
 800ca7a:	b09b      	sub	sp, #108	; 0x6c
 800ca7c:	af02      	add	r7, sp, #8
 800ca7e:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 800ca80:	f017 fc90 	bl	80243a4 <xTaskGetTickCount>
 800ca84:	4603      	mov	r3, r0
 800ca86:	637b      	str	r3, [r7, #52]	; 0x34

	static uint8_t direction = 1u;
	logic.set_states({jlb::FastState::OUT_ACCEL_ZONE});
 800ca88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ca8c:	2104      	movs	r1, #4
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7fd fa30 	bl	8009ef4 <_ZN3jlb14CompositeStateC1ENS_9FastStateE>
 800ca94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca96:	9300      	str	r3, [sp, #0]
 800ca98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ca9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ca9e:	4868      	ldr	r0, [pc, #416]	; (800cc40 <_Z8MainTaskPv+0x1c8>)
 800caa0:	f7ff ff41 	bl	800c926 <_ZN3jlb5Logic10set_statesENS_14CompositeStateE>
	for (;;)
	{
		lv_battery_voltage = adc_values.lv_batt_voltage_raw / 4096.0f * 3.3f * LV_BATERY_VOLTAGE_DIVIDER * 1.04447;
 800caa4:	4b67      	ldr	r3, [pc, #412]	; (800cc44 <_Z8MainTaskPv+0x1cc>)
 800caa6:	899b      	ldrh	r3, [r3, #12]
 800caa8:	ee07 3a90 	vmov	s15, r3
 800caac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cab0:	eddf 6a65 	vldr	s13, [pc, #404]	; 800cc48 <_Z8MainTaskPv+0x1d0>
 800cab4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cab8:	ed9f 7a64 	vldr	s14, [pc, #400]	; 800cc4c <_Z8MainTaskPv+0x1d4>
 800cabc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cac0:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800cc50 <_Z8MainTaskPv+0x1d8>
 800cac4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800cac8:	ee16 0a90 	vmov	r0, s13
 800cacc:	f7f3 fd2e 	bl	800052c <__aeabi_f2d>
 800cad0:	a359      	add	r3, pc, #356	; (adr r3, 800cc38 <_Z8MainTaskPv+0x1c0>)
 800cad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad6:	f7f3 fd81 	bl	80005dc <__aeabi_dmul>
 800cada:	4602      	mov	r2, r0
 800cadc:	460b      	mov	r3, r1
 800cade:	4610      	mov	r0, r2
 800cae0:	4619      	mov	r1, r3
 800cae2:	f7f4 f873 	bl	8000bcc <__aeabi_d2f>
 800cae6:	4603      	mov	r3, r0
 800cae8:	4a5a      	ldr	r2, [pc, #360]	; (800cc54 <_Z8MainTaskPv+0x1dc>)
 800caea:	6013      	str	r3, [r2, #0]
		LineSensorTask();
 800caec:	f7f6 f992 	bl	8002e14 <_Z14LineSensorTaskv>
		IMU_Task();
 800caf0:	f7f5 ff1c 	bl	800292c <_Z8IMU_Taskv>
		DistanceSensorTask();
 800caf4:	f7f5 fc86 	bl	8002404 <_Z18DistanceSensorTaskv>
		wheel_rpm = CalculateRPM();
 800caf8:	f7f5 fea8 	bl	800284c <_Z12CalculateRPMv>
 800cafc:	eef0 7a40 	vmov.f32	s15, s0
 800cb00:	4b55      	ldr	r3, [pc, #340]	; (800cc58 <_Z8MainTaskPv+0x1e0>)
 800cb02:	edc3 7a00 	vstr	s15, [r3]
		{
			motorcontrol.target_velocity = 0.0f;
		}
#else

		logic.imu_callback(imu.yaw);
 800cb06:	4b55      	ldr	r3, [pc, #340]	; (800cc5c <_Z8MainTaskPv+0x1e4>)
 800cb08:	edd3 7a03 	vldr	s15, [r3, #12]
 800cb0c:	eeb0 0a67 	vmov.f32	s0, s15
 800cb10:	484b      	ldr	r0, [pc, #300]	; (800cc40 <_Z8MainTaskPv+0x1c8>)
 800cb12:	f7ff fed7 	bl	800c8c4 <_ZN3jlb5Logic12imu_callbackEf>
		logic.rpm_callback(wheel_rpm);
 800cb16:	4b50      	ldr	r3, [pc, #320]	; (800cc58 <_Z8MainTaskPv+0x1e0>)
 800cb18:	edd3 7a00 	vldr	s15, [r3]
 800cb1c:	eeb0 0a67 	vmov.f32	s0, s15
 800cb20:	4847      	ldr	r0, [pc, #284]	; (800cc40 <_Z8MainTaskPv+0x1c8>)
 800cb22:	f7ff fedf 	bl	800c8e4 <_ZN3jlb5Logic12rpm_callbackEf>

		std::reverse(std::begin(ls_data.front_detection), std::end(ls_data.front_detection));
 800cb26:	484e      	ldr	r0, [pc, #312]	; (800cc60 <_Z8MainTaskPv+0x1e8>)
 800cb28:	f000 f9d5 	bl	800ced6 <_ZSt5beginIbLj32EEPT_RAT0__S0_>
 800cb2c:	4604      	mov	r4, r0
 800cb2e:	484c      	ldr	r0, [pc, #304]	; (800cc60 <_Z8MainTaskPv+0x1e8>)
 800cb30:	f000 f9dc 	bl	800ceec <_ZSt3endIbLj32EEPT_RAT0__S0_>
 800cb34:	4603      	mov	r3, r0
 800cb36:	4619      	mov	r1, r3
 800cb38:	4620      	mov	r0, r4
 800cb3a:	f001 fc15 	bl	800e368 <_ZSt7reverseIPbEvT_S1_>
		//std::reverse(std::begin(ls_data.rear_detection), std::end(ls_data.rear_detection));
		logic.set_detection_front( ls_data.front_detection, ls_data.front);
 800cb3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cb42:	4948      	ldr	r1, [pc, #288]	; (800cc64 <_Z8MainTaskPv+0x1ec>)
 800cb44:	4618      	mov	r0, r3
 800cb46:	f000 fa09 	bl	800cf5c <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 800cb4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cb4e:	461a      	mov	r2, r3
 800cb50:	4943      	ldr	r1, [pc, #268]	; (800cc60 <_Z8MainTaskPv+0x1e8>)
 800cb52:	483b      	ldr	r0, [pc, #236]	; (800cc40 <_Z8MainTaskPv+0x1c8>)
 800cb54:	f7ff fe70 	bl	800c838 <_ZN3jlb5Logic19set_detection_frontEPbSt6vectorIfSaIfEE>
 800cb58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f7f6 fc9f 	bl	80034a0 <_ZNSt6vectorIfSaIfEED1Ev>
		logic.set_detection_rear(ls_data.rear_detection, ls_data.rear);
 800cb62:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800cb66:	4940      	ldr	r1, [pc, #256]	; (800cc68 <_Z8MainTaskPv+0x1f0>)
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f000 f9f7 	bl	800cf5c <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 800cb6e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800cb72:	461a      	mov	r2, r3
 800cb74:	493d      	ldr	r1, [pc, #244]	; (800cc6c <_Z8MainTaskPv+0x1f4>)
 800cb76:	4832      	ldr	r0, [pc, #200]	; (800cc40 <_Z8MainTaskPv+0x1c8>)
 800cb78:	f7ff fe85 	bl	800c886 <_ZN3jlb5Logic18set_detection_rearEPbSt6vectorIfSaIfEE>
 800cb7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800cb80:	4618      	mov	r0, r3
 800cb82:	f7f6 fc8d 	bl	80034a0 <_ZNSt6vectorIfSaIfEED1Ev>
		logic.set_object_range(distance_sensor.distance);
 800cb86:	4b3a      	ldr	r3, [pc, #232]	; (800cc70 <_Z8MainTaskPv+0x1f8>)
 800cb88:	edd3 7a08 	vldr	s15, [r3, #32]
 800cb8c:	eeb0 0a67 	vmov.f32	s0, s15
 800cb90:	482b      	ldr	r0, [pc, #172]	; (800cc40 <_Z8MainTaskPv+0x1c8>)
 800cb92:	f7ff feb7 	bl	800c904 <_ZN3jlb5Logic16set_object_rangeEf>
		auto [target_angle, target_speed] = logic.update();
 800cb96:	482a      	ldr	r0, [pc, #168]	; (800cc40 <_Z8MainTaskPv+0x1c8>)
 800cb98:	f7ff fdfd 	bl	800c796 <_ZN3jlb5Logic6updateEv>
 800cb9c:	eeb0 7a40 	vmov.f32	s14, s0
 800cba0:	eef0 7a60 	vmov.f32	s15, s1
 800cba4:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800cba8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		auto [vx_t, x_t, y_t, theta_t] = logic.get_odometry();
 800cbac:	4824      	ldr	r0, [pc, #144]	; (800cc40 <_Z8MainTaskPv+0x1c8>)
 800cbae:	f7ff fef4 	bl	800c99a <_ZN3jlb5Logic12get_odometryEv>
 800cbb2:	eeb0 6a40 	vmov.f32	s12, s0
 800cbb6:	eef0 6a60 	vmov.f32	s13, s1
 800cbba:	eeb0 7a41 	vmov.f32	s14, s2
 800cbbe:	eef0 7a61 	vmov.f32	s15, s3
 800cbc2:	ed87 6a07 	vstr	s12, [r7, #28]
 800cbc6:	edc7 6a08 	vstr	s13, [r7, #32]
 800cbca:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 800cbce:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800cbd2:	69fb      	ldr	r3, [r7, #28]
		motorcontrol.actual_velocity = vx_t;
 800cbd4:	4a27      	ldr	r2, [pc, #156]	; (800cc74 <_Z8MainTaskPv+0x1fc>)
 800cbd6:	6093      	str	r3, [r2, #8]
		auto [target_angle, target_speed] = logic.update();
 800cbd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		motorcontrol.target_velocity = target_speed;
 800cbda:	4a26      	ldr	r2, [pc, #152]	; (800cc74 <_Z8MainTaskPv+0x1fc>)
 800cbdc:	60d3      	str	r3, [r2, #12]
		MotorControlTask();
 800cbde:	f7f7 fa75 	bl	80040cc <_Z16MotorControlTaskv>
		Measurements meas;
		meas.duty_cycle = motorcontrol.duty_cycle;
 800cbe2:	4b24      	ldr	r3, [pc, #144]	; (800cc74 <_Z8MainTaskPv+0x1fc>)
 800cbe4:	691b      	ldr	r3, [r3, #16]
 800cbe6:	60fb      	str	r3, [r7, #12]
		meas.motor_current = motorcontrol.motor_current;
 800cbe8:	4b22      	ldr	r3, [pc, #136]	; (800cc74 <_Z8MainTaskPv+0x1fc>)
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	613b      	str	r3, [r7, #16]
		meas.object_range = distance_sensor.distance;
 800cbee:	4b20      	ldr	r3, [pc, #128]	; (800cc70 <_Z8MainTaskPv+0x1f8>)
 800cbf0:	6a1b      	ldr	r3, [r3, #32]
 800cbf2:	617b      	str	r3, [r7, #20]
		meas.wheel_rpm = wheel_rpm;
 800cbf4:	4b18      	ldr	r3, [pc, #96]	; (800cc58 <_Z8MainTaskPv+0x1e0>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	61bb      	str	r3, [r7, #24]
		logic.set_measurements(meas);
 800cbfa:	f107 030c 	add.w	r3, r7, #12
 800cbfe:	4619      	mov	r1, r3
 800cc00:	480f      	ldr	r0, [pc, #60]	; (800cc40 <_Z8MainTaskPv+0x1c8>)
 800cc02:	f7ff feb8 	bl	800c976 <_ZN3jlb5Logic16set_measurementsERK12Measurements>
		auto [target_angle, target_speed] = logic.update();
 800cc06:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
		SetSteeringAngle(target_angle * -180.0f / 3.14f);
 800cc0a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800cc78 <_Z8MainTaskPv+0x200>
 800cc0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cc12:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800cc7c <_Z8MainTaskPv+0x204>
 800cc16:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800cc1a:	eeb0 0a47 	vmov.f32	s0, s14
 800cc1e:	f7f7 fc49 	bl	80044b4 <_Z16SetSteeringAnglef>
		logic.send_telemetry();
 800cc22:	4807      	ldr	r0, [pc, #28]	; (800cc40 <_Z8MainTaskPv+0x1c8>)
 800cc24:	f7ff fe99 	bl	800c95a <_ZN3jlb5Logic14send_telemetryEv>

#endif
		//vTaskSuspend(static_cast<TaskHandle_t>(mainTaskHandle));
		vTaskDelayUntil(&xLastWakeTime, 20u);
 800cc28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cc2c:	2114      	movs	r1, #20
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f017 fa44 	bl	80240bc <vTaskDelayUntil>
	}
 800cc34:	e736      	b.n	800caa4 <_Z8MainTaskPv+0x2c>
 800cc36:	bf00      	nop
 800cc38:	2cba732e 	.word	0x2cba732e
 800cc3c:	3ff0b626 	.word	0x3ff0b626
 800cc40:	20000308 	.word	0x20000308
 800cc44:	2000013c 	.word	0x2000013c
 800cc48:	45800000 	.word	0x45800000
 800cc4c:	40533333 	.word	0x40533333
 800cc50:	3e7df3b6 	.word	0x3e7df3b6
 800cc54:	20000300 	.word	0x20000300
 800cc58:	20000304 	.word	0x20000304
 800cc5c:	20000198 	.word	0x20000198
 800cc60:	20000230 	.word	0x20000230
 800cc64:	20000278 	.word	0x20000278
 800cc68:	20000284 	.word	0x20000284
 800cc6c:	20000250 	.word	0x20000250
 800cc70:	2000014c 	.word	0x2000014c
 800cc74:	20000290 	.word	0x20000290
 800cc78:	c3340000 	.word	0xc3340000
 800cc7c:	4048f5c3 	.word	0x4048f5c3

0800cc80 <_ZSt4copyIPKcPcET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 800cc80:	b590      	push	{r4, r7, lr}
 800cc82:	b085      	sub	sp, #20
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	60f8      	str	r0, [r7, #12]
 800cc88:	60b9      	str	r1, [r7, #8]
 800cc8a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800cc8c:	68f8      	ldr	r0, [r7, #12]
 800cc8e:	f001 fb7e 	bl	800e38e <_ZSt12__miter_baseIPKcET_S2_>
 800cc92:	4604      	mov	r4, r0
 800cc94:	68b8      	ldr	r0, [r7, #8]
 800cc96:	f001 fb7a 	bl	800e38e <_ZSt12__miter_baseIPKcET_S2_>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	687a      	ldr	r2, [r7, #4]
 800cc9e:	4619      	mov	r1, r3
 800cca0:	4620      	mov	r0, r4
 800cca2:	f001 fb7f 	bl	800e3a4 <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>
 800cca6:	4603      	mov	r3, r0
    }
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3714      	adds	r7, #20
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd90      	pop	{r4, r7, pc}

0800ccb0 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator>
    _GLIBCXX20_CONSTEXPR
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
 800ccb0:	b590      	push	{r4, r7, lr}
 800ccb2:	b083      	sub	sp, #12
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	6039      	str	r1, [r7, #0]
      __glibcxx_function_requires(_LessThanComparableConcept<
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
 800ccba:	f7f7 fcd7 	bl	800466c <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
 800ccbe:	4622      	mov	r2, r4
 800ccc0:	6839      	ldr	r1, [r7, #0]
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f001 fbb3 	bl	800e42e <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 800ccc8:	bf00      	nop
 800ccca:	370c      	adds	r7, #12
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd90      	pop	{r4, r7, pc}

0800ccd0 <_ZNSt6vectorIfSaIfEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800ccd0:	b480      	push	{r7}
 800ccd2:	b083      	sub	sp, #12
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681a      	ldr	r2, [r3, #0]
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	009b      	lsls	r3, r3, #2
 800cce2:	4413      	add	r3, r2
      }
 800cce4:	4618      	mov	r0, r3
 800cce6:	370c      	adds	r7, #12
 800cce8:	46bd      	mov	sp, r7
 800ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccee:	4770      	bx	lr

0800ccf0 <_ZStmlIfESt7complexIT_ERKS1_RKS2_>:
    operator*(const _Tp& __x, const complex<_Tp>& __y)
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b084      	sub	sp, #16
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
 800ccf8:	6039      	str	r1, [r7, #0]
      complex<_Tp> __r = __y;
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	681a      	ldr	r2, [r3, #0]
 800ccfe:	60ba      	str	r2, [r7, #8]
 800cd00:	685b      	ldr	r3, [r3, #4]
 800cd02:	60fb      	str	r3, [r7, #12]
      __r *= __x;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	edd3 7a00 	vldr	s15, [r3]
 800cd0a:	f107 0308 	add.w	r3, r7, #8
 800cd0e:	eeb0 0a67 	vmov.f32	s0, s15
 800cd12:	4618      	mov	r0, r3
 800cd14:	f7f7 fd3f 	bl	8004796 <_ZNSt7complexIfEmLEf>
      return __r;
 800cd18:	68ba      	ldr	r2, [r7, #8]
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	ee07 2a10 	vmov	s14, r2
 800cd20:	ee07 3a90 	vmov	s15, r3
    }
 800cd24:	eeb0 0a47 	vmov.f32	s0, s14
 800cd28:	eef0 0a67 	vmov.f32	s1, s15
 800cd2c:	3710      	adds	r7, #16
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}

0800cd32 <_ZNSt7complexIfEmLIfEERS0_RKS_IT_E>:
        operator*=(const complex<_Tp>& __z)
 800cd32:	b580      	push	{r7, lr}
 800cd34:	b086      	sub	sp, #24
 800cd36:	af00      	add	r7, sp, #0
 800cd38:	6078      	str	r0, [r7, #4]
 800cd3a:	6039      	str	r1, [r7, #0]
	  const _ComplexT __t = __z.__rep();
 800cd3c:	6838      	ldr	r0, [r7, #0]
 800cd3e:	f7f7 fd4b 	bl	80047d8 <_ZNKSt7complexIfE5__repEv>
 800cd42:	ed87 0a04 	vstr	s0, [r7, #16]
 800cd46:	edc7 0a05 	vstr	s1, [r7, #20]
 800cd4a:	693b      	ldr	r3, [r7, #16]
 800cd4c:	60fb      	str	r3, [r7, #12]
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	60bb      	str	r3, [r7, #8]
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	edd3 7a00 	vldr	s15, [r3]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	ed93 7a01 	vldr	s14, [r3, #4]
	  _M_value *= __t;
 800cd5e:	eef0 1a47 	vmov.f32	s3, s14
 800cd62:	eeb0 1a67 	vmov.f32	s2, s15
 800cd66:	edd7 0a02 	vldr	s1, [r7, #8]
 800cd6a:	ed97 0a03 	vldr	s0, [r7, #12]
 800cd6e:	f7f3 ff95 	bl	8000c9c <__mulsc3>
 800cd72:	eeb0 7a40 	vmov.f32	s14, s0
 800cd76:	eef0 7a60 	vmov.f32	s15, s1
 800cd7a:	ee17 1a10 	vmov	r1, s14
 800cd7e:	ee17 2a90 	vmov	r2, s15
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6019      	str	r1, [r3, #0]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	605a      	str	r2, [r3, #4]
	  return *this;
 800cd8a:	687b      	ldr	r3, [r7, #4]
	}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3718      	adds	r7, #24
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}

0800cd94 <_ZStmlIfESt7complexIT_ERKS2_S4_>:
    operator*(const complex<_Tp>& __x, const complex<_Tp>& __y)
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b084      	sub	sp, #16
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
 800cd9c:	6039      	str	r1, [r7, #0]
      complex<_Tp> __r = __x;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681a      	ldr	r2, [r3, #0]
 800cda2:	60ba      	str	r2, [r7, #8]
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	60fb      	str	r3, [r7, #12]
      __r *= __y;
 800cda8:	f107 0308 	add.w	r3, r7, #8
 800cdac:	6839      	ldr	r1, [r7, #0]
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f7ff ffbf 	bl	800cd32 <_ZNSt7complexIfEmLIfEERS0_RKS_IT_E>
      return __r;
 800cdb4:	68ba      	ldr	r2, [r7, #8]
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	ee07 2a10 	vmov	s14, r2
 800cdbc:	ee07 3a90 	vmov	s15, r3
    }
 800cdc0:	eeb0 0a47 	vmov.f32	s0, s14
 800cdc4:	eef0 0a67 	vmov.f32	s1, s15
 800cdc8:	3710      	adds	r7, #16
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}

0800cdce <_ZNSt7complexIfEpLIfEERS0_RKS_IT_E>:
        operator+=(const complex<_Tp>& __z)
 800cdce:	b580      	push	{r7, lr}
 800cdd0:	b082      	sub	sp, #8
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	6078      	str	r0, [r7, #4]
 800cdd6:	6039      	str	r1, [r7, #0]
	  _M_value += __z.__rep();
 800cdd8:	6838      	ldr	r0, [r7, #0]
 800cdda:	f7f7 fcfd 	bl	80047d8 <_ZNKSt7complexIfE5__repEv>
 800cdde:	eeb0 7a40 	vmov.f32	s14, s0
 800cde2:	eef0 7a60 	vmov.f32	s15, s1
 800cde6:	eeb0 6a47 	vmov.f32	s12, s14
 800cdea:	eef0 6a67 	vmov.f32	s13, s15
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	ed93 7a00 	vldr	s14, [r3]
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	edd3 7a01 	vldr	s15, [r3, #4]
 800cdfa:	ee36 7a07 	vadd.f32	s14, s12, s14
 800cdfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	ed83 7a00 	vstr	s14, [r3]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	edc3 7a01 	vstr	s15, [r3, #4]
	  return *this;
 800ce0e:	687b      	ldr	r3, [r7, #4]
	}
 800ce10:	4618      	mov	r0, r3
 800ce12:	3708      	adds	r7, #8
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}

0800ce18 <_ZStplIfESt7complexIT_ERKS2_S4_>:
    operator+(const complex<_Tp>& __x, const complex<_Tp>& __y)
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b084      	sub	sp, #16
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	6039      	str	r1, [r7, #0]
      complex<_Tp> __r = __x;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681a      	ldr	r2, [r3, #0]
 800ce26:	60ba      	str	r2, [r7, #8]
 800ce28:	685b      	ldr	r3, [r3, #4]
 800ce2a:	60fb      	str	r3, [r7, #12]
      __r += __y;
 800ce2c:	f107 0308 	add.w	r3, r7, #8
 800ce30:	6839      	ldr	r1, [r7, #0]
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7ff ffcb 	bl	800cdce <_ZNSt7complexIfEpLIfEERS0_RKS_IT_E>
      return __r;
 800ce38:	68ba      	ldr	r2, [r7, #8]
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	ee07 2a10 	vmov	s14, r2
 800ce40:	ee07 3a90 	vmov	s15, r3
    }
 800ce44:	eeb0 0a47 	vmov.f32	s0, s14
 800ce48:	eef0 0a67 	vmov.f32	s1, s15
 800ce4c:	3710      	adds	r7, #16
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}

0800ce52 <_ZNSt7complexIfEmIIfEERS0_RKS_IT_E>:
        operator-=(const complex<_Tp>& __z)
 800ce52:	b580      	push	{r7, lr}
 800ce54:	b082      	sub	sp, #8
 800ce56:	af00      	add	r7, sp, #0
 800ce58:	6078      	str	r0, [r7, #4]
 800ce5a:	6039      	str	r1, [r7, #0]
	  _M_value -= __z.__rep();
 800ce5c:	6838      	ldr	r0, [r7, #0]
 800ce5e:	f7f7 fcbb 	bl	80047d8 <_ZNKSt7complexIfE5__repEv>
 800ce62:	eeb0 7a40 	vmov.f32	s14, s0
 800ce66:	eef0 7a60 	vmov.f32	s15, s1
 800ce6a:	eeb0 6a47 	vmov.f32	s12, s14
 800ce6e:	eef0 6a67 	vmov.f32	s13, s15
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	ed93 7a00 	vldr	s14, [r3]
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	edd3 7a01 	vldr	s15, [r3, #4]
 800ce7e:	ee37 7a46 	vsub.f32	s14, s14, s12
 800ce82:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	ed83 7a00 	vstr	s14, [r3]
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	edc3 7a01 	vstr	s15, [r3, #4]
	  return *this;
 800ce92:	687b      	ldr	r3, [r7, #4]
	}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3708      	adds	r7, #8
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}

0800ce9c <_ZStmiIfESt7complexIT_ERKS2_S4_>:
    operator-(const complex<_Tp>& __x, const complex<_Tp>& __y)
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b084      	sub	sp, #16
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	6039      	str	r1, [r7, #0]
      complex<_Tp> __r = __x;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681a      	ldr	r2, [r3, #0]
 800ceaa:	60ba      	str	r2, [r7, #8]
 800ceac:	685b      	ldr	r3, [r3, #4]
 800ceae:	60fb      	str	r3, [r7, #12]
      __r -= __y;
 800ceb0:	f107 0308 	add.w	r3, r7, #8
 800ceb4:	6839      	ldr	r1, [r7, #0]
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f7ff ffcb 	bl	800ce52 <_ZNSt7complexIfEmIIfEERS0_RKS_IT_E>
      return __r;
 800cebc:	68ba      	ldr	r2, [r7, #8]
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	ee07 2a10 	vmov	s14, r2
 800cec4:	ee07 3a90 	vmov	s15, r3
    }
 800cec8:	eeb0 0a47 	vmov.f32	s0, s14
 800cecc:	eef0 0a67 	vmov.f32	s1, s15
 800ced0:	3710      	adds	r7, #16
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}

0800ced6 <_ZSt5beginIbLj32EEPT_RAT0__S0_>:
   *  @brief  Return an iterator pointing to the first element of the array.
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    inline _GLIBCXX14_CONSTEXPR _Tp*
    begin(_Tp (&__arr)[_Nm]) noexcept
 800ced6:	b480      	push	{r7}
 800ced8:	b083      	sub	sp, #12
 800ceda:	af00      	add	r7, sp, #0
 800cedc:	6078      	str	r0, [r7, #4]
    { return __arr; }
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	4618      	mov	r0, r3
 800cee2:	370c      	adds	r7, #12
 800cee4:	46bd      	mov	sp, r7
 800cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceea:	4770      	bx	lr

0800ceec <_ZSt3endIbLj32EEPT_RAT0__S0_>:
   *          of the array.
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    inline _GLIBCXX14_CONSTEXPR _Tp*
    end(_Tp (&__arr)[_Nm]) noexcept
 800ceec:	b480      	push	{r7}
 800ceee:	b083      	sub	sp, #12
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
    { return __arr + _Nm; }
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	3320      	adds	r3, #32
 800cef8:	4618      	mov	r0, r3
 800cefa:	370c      	adds	r7, #12
 800cefc:	46bd      	mov	sp, r7
 800cefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf02:	4770      	bx	lr

0800cf04 <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEfEUlbE_EbT_S4_T0_>:
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b084      	sub	sp, #16
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	60f8      	str	r0, [r7, #12]
 800cf0c:	60b9      	str	r1, [r7, #8]
 800cf0e:	713a      	strb	r2, [r7, #4]
    { return __last == std::find_if_not(__first, __last, __pred); }
 800cf10:	461a      	mov	r2, r3
 800cf12:	68b9      	ldr	r1, [r7, #8]
 800cf14:	68f8      	ldr	r0, [r7, #12]
 800cf16:	f001 faba 	bl	800e48e <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEfEUlbE_ET_S4_S4_T0_>
 800cf1a:	4602      	mov	r2, r0
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	bf0c      	ite	eq
 800cf22:	2301      	moveq	r3, #1
 800cf24:	2300      	movne	r3, #0
 800cf26:	b2db      	uxtb	r3, r3
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3710      	adds	r7, #16
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}

0800cf30 <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEfEUlbE0_EbT_S4_T0_>:
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b084      	sub	sp, #16
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	60f8      	str	r0, [r7, #12]
 800cf38:	60b9      	str	r1, [r7, #8]
 800cf3a:	713a      	strb	r2, [r7, #4]
    { return __last == std::find_if_not(__first, __last, __pred); }
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	68b9      	ldr	r1, [r7, #8]
 800cf40:	68f8      	ldr	r0, [r7, #12]
 800cf42:	f001 fab7 	bl	800e4b4 <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEfEUlbE0_ET_S4_S4_T0_>
 800cf46:	4602      	mov	r2, r0
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	bf0c      	ite	eq
 800cf4e:	2301      	moveq	r3, #1
 800cf50:	2300      	movne	r3, #0
 800cf52:	b2db      	uxtb	r3, r3
 800cf54:	4618      	mov	r0, r3
 800cf56:	3710      	adds	r7, #16
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 800cf5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf5e:	b085      	sub	sp, #20
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800cf66:	687c      	ldr	r4, [r7, #4]
 800cf68:	6838      	ldr	r0, [r7, #0]
 800cf6a:	f7f6 fd38 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800cf6e:	4605      	mov	r5, r0
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7f6 fdde 	bl	8003b34 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800cf78:	4602      	mov	r2, r0
 800cf7a:	f107 030c 	add.w	r3, r7, #12
 800cf7e:	4611      	mov	r1, r2
 800cf80:	4618      	mov	r0, r3
 800cf82:	f001 faaa 	bl	800e4da <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>
 800cf86:	f107 030c 	add.w	r3, r7, #12
 800cf8a:	461a      	mov	r2, r3
 800cf8c:	4629      	mov	r1, r5
 800cf8e:	4620      	mov	r0, r4
 800cf90:	f001 fab1 	bl	800e4f6 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 800cf94:	f107 030c 	add.w	r3, r7, #12
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f7f6 fa5d 	bl	8003458 <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800cf9e:	6838      	ldr	r0, [r7, #0]
 800cfa0:	f001 fabd 	bl	800e51e <_ZNKSt6vectorIfSaIfEE5beginEv>
 800cfa4:	4605      	mov	r5, r0
 800cfa6:	6838      	ldr	r0, [r7, #0]
 800cfa8:	f001 fac9 	bl	800e53e <_ZNKSt6vectorIfSaIfEE3endEv>
 800cfac:	4606      	mov	r6, r0
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7f6 faf4 	bl	80035a2 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800cfba:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800cfbc:	4622      	mov	r2, r4
 800cfbe:	4631      	mov	r1, r6
 800cfc0:	4628      	mov	r0, r5
 800cfc2:	f001 facd 	bl	800e560 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 800cfc6:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	605a      	str	r2, [r3, #4]
      }
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	4618      	mov	r0, r3
 800cfd0:	3714      	adds	r7, #20
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cfd6 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE27_S_propagate_on_copy_assignEv>:
    static constexpr bool _S_propagate_on_copy_assign()
 800cfd6:	b480      	push	{r7}
 800cfd8:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 800cfda:	2300      	movs	r3, #0
 800cfdc:	4618      	mov	r0, r3
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe4:	4770      	bx	lr

0800cfe6 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE15_S_always_equalEv>:
    static constexpr bool _S_always_equal()
 800cfe6:	b480      	push	{r7}
 800cfe8:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 800cfea:	2301      	movs	r3, #1
 800cfec:	4618      	mov	r0, r3
 800cfee:	46bd      	mov	sp, r7
 800cff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff4:	4770      	bx	lr

0800cff6 <_ZSteqRKSaIfES1_>:
      }
#endif // C++20

      friend _GLIBCXX20_CONSTEXPR bool
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 800cff6:	b480      	push	{r7}
 800cff8:	b083      	sub	sp, #12
 800cffa:	af00      	add	r7, sp, #0
 800cffc:	6078      	str	r0, [r7, #4]
 800cffe:	6039      	str	r1, [r7, #0]
      { return true; }
 800d000:	2301      	movs	r3, #1
 800d002:	4618      	mov	r0, r3
 800d004:	370c      	adds	r7, #12
 800d006:	46bd      	mov	sp, r7
 800d008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00c:	4770      	bx	lr

0800d00e <_ZSt4copyIPfS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 800d00e:	b590      	push	{r4, r7, lr}
 800d010:	b085      	sub	sp, #20
 800d012:	af00      	add	r7, sp, #0
 800d014:	60f8      	str	r0, [r7, #12]
 800d016:	60b9      	str	r1, [r7, #8]
 800d018:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800d01a:	68f8      	ldr	r0, [r7, #12]
 800d01c:	f001 fb0e 	bl	800e63c <_ZSt12__miter_baseIPfET_S1_>
 800d020:	4604      	mov	r4, r0
 800d022:	68b8      	ldr	r0, [r7, #8]
 800d024:	f001 fb0a 	bl	800e63c <_ZSt12__miter_baseIPfET_S1_>
 800d028:	4603      	mov	r3, r0
 800d02a:	687a      	ldr	r2, [r7, #4]
 800d02c:	4619      	mov	r1, r3
 800d02e:	4620      	mov	r0, r4
 800d030:	f001 fb0f 	bl	800e652 <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>
 800d034:	4603      	mov	r3, r0
    }
 800d036:	4618      	mov	r0, r3
 800d038:	3714      	adds	r7, #20
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd90      	pop	{r4, r7, pc}

0800d03e <_ZNSt6vectorIfSaIfEEaSERKS1_>:
    vector<_Tp, _Alloc>::
 800d03e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d040:	b085      	sub	sp, #20
 800d042:	af00      	add	r7, sp, #0
 800d044:	6078      	str	r0, [r7, #4]
 800d046:	6039      	str	r1, [r7, #0]
      if (&__x != this)
 800d048:	683a      	ldr	r2, [r7, #0]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	429a      	cmp	r2, r3
 800d04e:	f000 80e9 	beq.w	800d224 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1e6>
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 800d052:	f7ff ffc0 	bl	800cfd6 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE27_S_propagate_on_copy_assignEv>
 800d056:	4603      	mov	r3, r0
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d046      	beq.n	800d0ea <_ZNSt6vectorIfSaIfEEaSERKS1_+0xac>
	      if (!_Alloc_traits::_S_always_equal()
 800d05c:	f7ff ffc3 	bl	800cfe6 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE15_S_always_equalEv>
 800d060:	4603      	mov	r3, r0
 800d062:	f083 0301 	eor.w	r3, r3, #1
 800d066:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d015      	beq.n	800d098 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x5a>
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	4618      	mov	r0, r3
 800d070:	f7f6 fa97 	bl	80035a2 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800d074:	4604      	mov	r4, r0
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	4618      	mov	r0, r3
 800d07a:	f7f6 fd5b 	bl	8003b34 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800d07e:	4603      	mov	r3, r0
 800d080:	4619      	mov	r1, r3
 800d082:	4620      	mov	r0, r4
 800d084:	f7ff ffb7 	bl	800cff6 <_ZSteqRKSaIfES1_>
 800d088:	4603      	mov	r3, r0
 800d08a:	f083 0301 	eor.w	r3, r3, #1
 800d08e:	b2db      	uxtb	r3, r3
 800d090:	2b00      	cmp	r3, #0
 800d092:	d001      	beq.n	800d098 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x5a>
 800d094:	2301      	movs	r3, #1
 800d096:	e000      	b.n	800d09a <_ZNSt6vectorIfSaIfEEaSERKS1_+0x5c>
 800d098:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d017      	beq.n	800d0ce <_ZNSt6vectorIfSaIfEEaSERKS1_+0x90>
		  this->clear();
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	f7f6 fa19 	bl	80034d6 <_ZNSt6vectorIfSaIfEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	1ad3      	subs	r3, r2, r3
 800d0b4:	109b      	asrs	r3, r3, #2
		  _M_deallocate(this->_M_impl._M_start,
 800d0b6:	461a      	mov	r2, r3
 800d0b8:	f7f6 fa60 	bl	800357c <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
		  this->_M_impl._M_start = nullptr;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	609a      	str	r2, [r3, #8]
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f7f6 fa66 	bl	80035a2 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800d0d6:	4604      	mov	r4, r0
				   __x._M_get_Tp_allocator());
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7f6 fd2a 	bl	8003b34 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800d0e0:	4603      	mov	r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	4620      	mov	r0, r4
 800d0e6:	f001 fa4c 	bl	800e582 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>
	  const size_type __xlen = __x.size();
 800d0ea:	6838      	ldr	r0, [r7, #0]
 800d0ec:	f7f6 fc77 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800d0f0:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f001 fa50 	bl	800e598 <_ZNKSt6vectorIfSaIfEE8capacityEv>
 800d0f8:	4602      	mov	r2, r0
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	4293      	cmp	r3, r2
 800d0fe:	bf8c      	ite	hi
 800d100:	2301      	movhi	r3, #1
 800d102:	2300      	movls	r3, #0
 800d104:	b2db      	uxtb	r3, r3
 800d106:	2b00      	cmp	r3, #0
 800d108:	d032      	beq.n	800d170 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x132>
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 800d10a:	6838      	ldr	r0, [r7, #0]
 800d10c:	f001 fa07 	bl	800e51e <_ZNKSt6vectorIfSaIfEE5beginEv>
 800d110:	4604      	mov	r4, r0
 800d112:	6838      	ldr	r0, [r7, #0]
 800d114:	f001 fa13 	bl	800e53e <_ZNKSt6vectorIfSaIfEE3endEv>
 800d118:	4603      	mov	r3, r0
 800d11a:	4622      	mov	r2, r4
 800d11c:	68f9      	ldr	r1, [r7, #12]
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f001 fa4a 	bl	800e5b8 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>
 800d124:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681c      	ldr	r4, [r3, #0]
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	4618      	mov	r0, r3
 800d132:	f7f6 fa36 	bl	80035a2 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800d136:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800d138:	461a      	mov	r2, r3
 800d13a:	4629      	mov	r1, r5
 800d13c:	4620      	mov	r0, r4
 800d13e:	f7f6 fa3b 	bl	80035b8 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	1ad3      	subs	r3, r2, r3
 800d152:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 800d154:	461a      	mov	r2, r3
 800d156:	f7f6 fa11 	bl	800357c <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
	      this->_M_impl._M_start = __tmp;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	68ba      	ldr	r2, [r7, #8]
 800d15e:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681a      	ldr	r2, [r3, #0]
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	009b      	lsls	r3, r3, #2
 800d168:	441a      	add	r2, r3
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	609a      	str	r2, [r3, #8]
 800d16e:	e052      	b.n	800d216 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d8>
	  else if (size() >= __xlen)
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f7f6 fc34 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800d176:	4602      	mov	r2, r0
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	4293      	cmp	r3, r2
 800d17c:	bf94      	ite	ls
 800d17e:	2301      	movls	r3, #1
 800d180:	2300      	movhi	r3, #0
 800d182:	b2db      	uxtb	r3, r3
 800d184:	2b00      	cmp	r3, #0
 800d186:	d020      	beq.n	800d1ca <_ZNSt6vectorIfSaIfEEaSERKS1_+0x18c>
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800d188:	6838      	ldr	r0, [r7, #0]
 800d18a:	f001 f9c8 	bl	800e51e <_ZNKSt6vectorIfSaIfEE5beginEv>
 800d18e:	4604      	mov	r4, r0
 800d190:	6838      	ldr	r0, [r7, #0]
 800d192:	f001 f9d4 	bl	800e53e <_ZNKSt6vectorIfSaIfEE3endEv>
 800d196:	4605      	mov	r5, r0
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f7f6 fb93 	bl	80038c4 <_ZNSt6vectorIfSaIfEE5beginEv>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	4629      	mov	r1, r5
 800d1a4:	4620      	mov	r0, r4
 800d1a6:	f001 fa23 	bl	800e5f0 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>
 800d1aa:	4604      	mov	r4, r0
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f7f6 fa59 	bl	8003664 <_ZNSt6vectorIfSaIfEE3endEv>
 800d1b2:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7f6 f9f3 	bl	80035a2 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800d1bc:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800d1be:	461a      	mov	r2, r3
 800d1c0:	4629      	mov	r1, r5
 800d1c2:	4620      	mov	r0, r4
 800d1c4:	f001 fa2c 	bl	800e620 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>
 800d1c8:	e025      	b.n	800d216 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d8>
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	681d      	ldr	r5, [r3, #0]
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	681c      	ldr	r4, [r3, #0]
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f7f6 fc03 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	009b      	lsls	r3, r3, #2
 800d1dc:	18e1      	adds	r1, r4, r3
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	4628      	mov	r0, r5
 800d1e6:	f7ff ff12 	bl	800d00e <_ZSt4copyIPfS0_ET0_T_S2_S1_>
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	681c      	ldr	r4, [r3, #0]
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f7f6 fbf5 	bl	80039de <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	009b      	lsls	r3, r3, #2
 800d1f8:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	685e      	ldr	r6, [r3, #4]
					  _M_get_Tp_allocator());
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	4618      	mov	r0, r3
 800d206:	f7f6 f9cc 	bl	80035a2 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800d20a:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800d20c:	4632      	mov	r2, r6
 800d20e:	4629      	mov	r1, r5
 800d210:	4620      	mov	r0, r4
 800d212:	f001 fa41 	bl	800e698 <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681a      	ldr	r2, [r3, #0]
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	009b      	lsls	r3, r3, #2
 800d21e:	441a      	add	r2, r3
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	605a      	str	r2, [r3, #4]
      return *this;
 800d224:	687b      	ldr	r3, [r7, #4]
    }
 800d226:	4618      	mov	r0, r3
 800d228:	3714      	adds	r7, #20
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d22e <_ZNSt6vectorIcSaIcEEC1ERKS1_>:
      vector(const vector& __x)
 800d22e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d230:	b085      	sub	sp, #20
 800d232:	af00      	add	r7, sp, #0
 800d234:	6078      	str	r0, [r7, #4]
 800d236:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800d238:	687c      	ldr	r4, [r7, #4]
 800d23a:	6838      	ldr	r0, [r7, #0]
 800d23c:	f001 f83c 	bl	800e2b8 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 800d240:	4605      	mov	r5, r0
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	4618      	mov	r0, r3
 800d246:	f001 fa46 	bl	800e6d6 <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800d24a:	4602      	mov	r2, r0
 800d24c:	f107 030c 	add.w	r3, r7, #12
 800d250:	4611      	mov	r1, r2
 800d252:	4618      	mov	r0, r3
 800d254:	f001 fa31 	bl	800e6ba <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>
 800d258:	f107 030c 	add.w	r3, r7, #12
 800d25c:	461a      	mov	r2, r3
 800d25e:	4629      	mov	r1, r5
 800d260:	4620      	mov	r0, r4
 800d262:	f001 fa43 	bl	800e6ec <_ZNSt12_Vector_baseIcSaIcEEC1EjRKS0_>
 800d266:	f107 030c 	add.w	r3, r7, #12
 800d26a:	4618      	mov	r0, r3
 800d26c:	f018 fb25 	bl	80258ba <_ZNSaIcED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800d270:	6838      	ldr	r0, [r7, #0]
 800d272:	f001 fa4f 	bl	800e714 <_ZNKSt6vectorIcSaIcEE5beginEv>
 800d276:	4605      	mov	r5, r0
 800d278:	6838      	ldr	r0, [r7, #0]
 800d27a:	f001 fa5b 	bl	800e734 <_ZNKSt6vectorIcSaIcEE3endEv>
 800d27e:	4606      	mov	r6, r0
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	4618      	mov	r0, r3
 800d288:	f001 fa65 	bl	800e756 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800d28c:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800d28e:	4622      	mov	r2, r4
 800d290:	4631      	mov	r1, r6
 800d292:	4628      	mov	r0, r5
 800d294:	f001 fa6a 	bl	800e76c <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPccET0_T_SA_S9_RSaIT1_E>
 800d298:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	605a      	str	r2, [r3, #4]
      }
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3714      	adds	r7, #20
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d2a8 <_ZNSt6vectorIcSaIcEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800d2a8:	b5b0      	push	{r4, r5, r7, lr}
 800d2aa:	b082      	sub	sp, #8
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681c      	ldr	r4, [r3, #0]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f001 fa4b 	bl	800e756 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800d2c0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800d2c2:	461a      	mov	r2, r3
 800d2c4:	4629      	mov	r1, r5
 800d2c6:	4620      	mov	r0, r4
 800d2c8:	f001 fa61 	bl	800e78e <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>
      }
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f000 f8cf 	bl	800d472 <_ZNSt12_Vector_baseIcSaIcEED1Ev>
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3708      	adds	r7, #8
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bdb0      	pop	{r4, r5, r7, pc}

0800d2de <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800d2de:	b580      	push	{r7, lr}
 800d2e0:	b082      	sub	sp, #8
 800d2e2:	af00      	add	r7, sp, #0
 800d2e4:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f001 fa5f 	bl	800e7aa <_ZNSaIN3jlb4EdgeEEC1Ev>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f001 fa67 	bl	800e7c2 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3708      	adds	r7, #8
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}

0800d2fe <_ZNSaIN3jlb4EdgeEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800d2fe:	b480      	push	{r7}
 800d300:	b083      	sub	sp, #12
 800d302:	af00      	add	r7, sp, #0
 800d304:	6078      	str	r0, [r7, #4]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	4618      	mov	r0, r3
 800d30a:	370c      	adds	r7, #12
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr

0800d314 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800d314:	b580      	push	{r7, lr}
 800d316:	b082      	sub	sp, #8
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	689a      	ldr	r2, [r3, #8]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	1ad3      	subs	r3, r2, r3
 800d32a:	10db      	asrs	r3, r3, #3
 800d32c:	4a07      	ldr	r2, [pc, #28]	; (800d34c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev+0x38>)
 800d32e:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800d332:	461a      	mov	r2, r3
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f001 fa58 	bl	800e7ea <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>
      }
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	4618      	mov	r0, r3
 800d33e:	f7f8 f85e 	bl	80053fe <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implD1Ev>
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	4618      	mov	r0, r3
 800d346:	3708      	adds	r7, #8
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}
 800d34c:	aaaaaaab 	.word	0xaaaaaaab

0800d350 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800d350:	b5b0      	push	{r4, r5, r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681c      	ldr	r4, [r3, #0]
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	4618      	mov	r0, r3
 800d364:	f001 fa54 	bl	800e810 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800d368:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800d36a:	461a      	mov	r2, r3
 800d36c:	4629      	mov	r1, r5
 800d36e:	4620      	mov	r0, r4
 800d370:	f001 fa59 	bl	800e826 <_ZSt8_DestroyIPN3jlb4EdgeES1_EvT_S3_RSaIT0_E>
      }
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	4618      	mov	r0, r3
 800d378:	f7ff ffcc 	bl	800d314 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev>
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	4618      	mov	r0, r3
 800d380:	3708      	adds	r7, #8
 800d382:	46bd      	mov	sp, r7
 800d384:	bdb0      	pop	{r4, r5, r7, pc}

0800d386 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800d386:	b580      	push	{r7, lr}
 800d388:	b082      	sub	sp, #8
 800d38a:	af00      	add	r7, sp, #0
 800d38c:	6078      	str	r0, [r7, #4]
 800d38e:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800d390:	6838      	ldr	r0, [r7, #0]
 800d392:	f001 fa56 	bl	800e842 <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>
 800d396:	4603      	mov	r3, r0
 800d398:	4619      	mov	r1, r3
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	f001 fa5c 	bl	800e858 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800d3a0:	bf00      	nop
 800d3a2:	3708      	adds	r7, #8
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f001 fa84 	bl	800e8be <_ZNSaIN3jlb4NodeEEC1Ev>
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f001 fa8c 	bl	800e8d6 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3708      	adds	r7, #8
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}

0800d3c8 <_ZNSaIN3jlb4NodeEED1Ev>:
 800d3c8:	b480      	push	{r7}
 800d3ca:	b083      	sub	sp, #12
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	370c      	adds	r7, #12
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3dc:	4770      	bx	lr
	...

0800d3e0 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b082      	sub	sp, #8
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	689a      	ldr	r2, [r3, #8]
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	1ad3      	subs	r3, r2, r3
 800d3f6:	10db      	asrs	r3, r3, #3
 800d3f8:	4a07      	ldr	r2, [pc, #28]	; (800d418 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EED1Ev+0x38>)
 800d3fa:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800d3fe:	461a      	mov	r2, r3
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f001 fa7c 	bl	800e8fe <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j>
      }
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	4618      	mov	r0, r3
 800d40a:	f7f8 f88a 	bl	8005522 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implD1Ev>
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	4618      	mov	r0, r3
 800d412:	3708      	adds	r7, #8
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}
 800d418:	aaaaaaab 	.word	0xaaaaaaab

0800d41c <_ZNSt6vectorIN3jlb4NodeESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800d41c:	b5b0      	push	{r4, r5, r7, lr}
 800d41e:	b082      	sub	sp, #8
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681c      	ldr	r4, [r3, #0]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	4618      	mov	r0, r3
 800d430:	f001 fa78 	bl	800e924 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800d434:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800d436:	461a      	mov	r2, r3
 800d438:	4629      	mov	r1, r5
 800d43a:	4620      	mov	r0, r4
 800d43c:	f001 fa7d 	bl	800e93a <_ZSt8_DestroyIPN3jlb4NodeES1_EvT_S3_RSaIT0_E>
      }
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	4618      	mov	r0, r3
 800d444:	f7ff ffcc 	bl	800d3e0 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EED1Ev>
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	4618      	mov	r0, r3
 800d44c:	3708      	adds	r7, #8
 800d44e:	46bd      	mov	sp, r7
 800d450:	bdb0      	pop	{r4, r5, r7, pc}

0800d452 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800d452:	b580      	push	{r7, lr}
 800d454:	b082      	sub	sp, #8
 800d456:	af00      	add	r7, sp, #0
 800d458:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f018 fa2b 	bl	80258b6 <_ZNSaIcEC1Ev>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	4618      	mov	r0, r3
 800d464:	f001 fa77 	bl	800e956 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>
	{ }
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	4618      	mov	r0, r3
 800d46c:	3708      	adds	r7, #8
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}

0800d472 <_ZNSt12_Vector_baseIcSaIcEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800d472:	b580      	push	{r7, lr}
 800d474:	b082      	sub	sp, #8
 800d476:	af00      	add	r7, sp, #0
 800d478:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	689a      	ldr	r2, [r3, #8]
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800d488:	461a      	mov	r2, r3
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f001 fa77 	bl	800e97e <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>
      }
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	4618      	mov	r0, r3
 800d494:	f7f8 f86b 	bl	800556e <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	4618      	mov	r0, r3
 800d49c:	3708      	adds	r7, #8
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}

0800d4a2 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800d4a2:	b580      	push	{r7, lr}
 800d4a4:	b082      	sub	sp, #8
 800d4a6:	af00      	add	r7, sp, #0
 800d4a8:	6078      	str	r0, [r7, #4]
 800d4aa:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800d4ac:	6838      	ldr	r0, [r7, #0]
 800d4ae:	f001 fa79 	bl	800e9a4 <_ZSt4moveIRN3jlb4NodeEEONSt16remove_referenceIT_E4typeEOS4_>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f001 fa7f 	bl	800e9ba <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800d4bc:	bf00      	nop
 800d4be:	3708      	adds	r7, #8
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}

0800d4c4 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>:
      vector(initializer_list<value_type> __l,
 800d4c4:	b5b0      	push	{r4, r5, r7, lr}
 800d4c6:	b086      	sub	sp, #24
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	60f8      	str	r0, [r7, #12]
 800d4cc:	1d38      	adds	r0, r7, #4
 800d4ce:	e880 0006 	stmia.w	r0, {r1, r2}
 800d4d2:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	6839      	ldr	r1, [r7, #0]
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f001 faa1 	bl	800ea20 <_ZNSt12_Vector_baseIcSaIcEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 800d4de:	1d3b      	adds	r3, r7, #4
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f001 faac 	bl	800ea3e <_ZNKSt16initializer_listIcE5beginEv>
 800d4e6:	4604      	mov	r4, r0
 800d4e8:	1d3b      	adds	r3, r7, #4
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f001 fab3 	bl	800ea56 <_ZNKSt16initializer_listIcE3endEv>
 800d4f0:	4602      	mov	r2, r0
 800d4f2:	462b      	mov	r3, r5
 800d4f4:	4621      	mov	r1, r4
 800d4f6:	68f8      	ldr	r0, [r7, #12]
 800d4f8:	f001 fad2 	bl	800eaa0 <_ZNSt6vectorIcSaIcEE19_M_range_initializeIPKcEEvT_S5_St20forward_iterator_tag>
      }
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	4618      	mov	r0, r3
 800d500:	3718      	adds	r7, #24
 800d502:	46bd      	mov	sp, r7
 800d504:	bdb0      	pop	{r4, r5, r7, pc}

0800d506 <_ZNSt6vectorIN3jlb4NodeESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800d506:	b480      	push	{r7}
 800d508:	b083      	sub	sp, #12
 800d50a:	af00      	add	r7, sp, #0
 800d50c:	6078      	str	r0, [r7, #4]
 800d50e:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6819      	ldr	r1, [r3, #0]
 800d514:	683a      	ldr	r2, [r7, #0]
 800d516:	4613      	mov	r3, r2
 800d518:	005b      	lsls	r3, r3, #1
 800d51a:	4413      	add	r3, r2
 800d51c:	00db      	lsls	r3, r3, #3
 800d51e:	440b      	add	r3, r1
      }
 800d520:	4618      	mov	r0, r3
 800d522:	370c      	adds	r7, #12
 800d524:	46bd      	mov	sp, r7
 800d526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52a:	4770      	bx	lr

0800d52c <_ZNSt6vectorIcSaIcEE9push_backERKc>:
      push_back(const value_type& __x)
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b082      	sub	sp, #8
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
 800d534:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	685a      	ldr	r2, [r3, #4]
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	689b      	ldr	r3, [r3, #8]
 800d53e:	429a      	cmp	r2, r3
 800d540:	d00c      	beq.n	800d55c <_ZNSt6vectorIcSaIcEE9push_backERKc+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	685b      	ldr	r3, [r3, #4]
 800d548:	683a      	ldr	r2, [r7, #0]
 800d54a:	4619      	mov	r1, r3
 800d54c:	f001 faf6 	bl	800eb3c <_ZNSt16allocator_traitsISaIcEE9constructIcJRKcEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	685b      	ldr	r3, [r3, #4]
 800d554:	1c5a      	adds	r2, r3, #1
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	605a      	str	r2, [r3, #4]
      }
 800d55a:	e008      	b.n	800d56e <_ZNSt6vectorIcSaIcEE9push_backERKc+0x42>
	  _M_realloc_insert(end(), __x);
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f000 fa74 	bl	800da4a <_ZNSt6vectorIcSaIcEE3endEv>
 800d562:	4603      	mov	r3, r0
 800d564:	683a      	ldr	r2, [r7, #0]
 800d566:	4619      	mov	r1, r3
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f001 faf9 	bl	800eb60 <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJRKcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_>
      }
 800d56e:	bf00      	nop
 800d570:	3708      	adds	r7, #8
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}

0800d576 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE13_Rb_tree_implISB_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 800d576:	b580      	push	{r7, lr}
 800d578:	b082      	sub	sp, #8
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f001 fb68 	bl	800ec54 <_ZNSaISt13_Rb_tree_nodeISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEEEC1Ev>
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	4618      	mov	r0, r3
 800d588:	f001 fb70 	bl	800ec6c <_ZNSt20_Rb_tree_key_compareISt4lessIcEEC1Ev>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	3304      	adds	r3, #4
 800d590:	4618      	mov	r0, r3
 800d592:	f7f7 fecd 	bl	8005330 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	4618      	mov	r0, r3
 800d59a:	3708      	adds	r7, #8
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEEED1Ev>:
 800d5a0:	b480      	push	{r7}
 800d5a2:	b083      	sub	sp, #12
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	370c      	adds	r7, #12
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b4:	4770      	bx	lr

0800d5b6 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800d5b6:	b580      	push	{r7, lr}
 800d5b8:	b082      	sub	sp, #8
 800d5ba:	af00      	add	r7, sp, #0
 800d5bc:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f001 fb7f 	bl	800ecc2 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE8_M_beginEv>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	4619      	mov	r1, r3
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f001 fb5a 	bl	800ec82 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE8_M_eraseEPSt13_Rb_tree_nodeIS7_E>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f7fb fa4b 	bl	8008a6c <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE13_Rb_tree_implISB_Lb1EED1Ev>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3708      	adds	r7, #8
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <_ZNSt12_Vector_baseISt4pairIfcESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b082      	sub	sp, #8
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f001 fb86 	bl	800ecfa <_ZNSaISt4pairIfcEED1Ev>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3708      	adds	r7, #8
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}

0800d5f8 <_ZNSt12_Vector_baseISt4pairIfcESaIS1_EEC1Ev>:
      _Vector_base() = default;
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	4618      	mov	r0, r3
 800d604:	f001 fb69 	bl	800ecda <_ZNSt12_Vector_baseISt4pairIfcESaIS1_EE12_Vector_implC1Ev>
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	4618      	mov	r0, r3
 800d60c:	3708      	adds	r7, #8
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}

0800d612 <_ZNSt6vectorISt4pairIfcESaIS1_EEC1Ev>:
      vector() = default;
 800d612:	b580      	push	{r7, lr}
 800d614:	b082      	sub	sp, #8
 800d616:	af00      	add	r7, sp, #0
 800d618:	6078      	str	r0, [r7, #4]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	4618      	mov	r0, r3
 800d61e:	f7ff ffeb 	bl	800d5f8 <_ZNSt12_Vector_baseISt4pairIfcESaIS1_EEC1Ev>
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	4618      	mov	r0, r3
 800d626:	3708      	adds	r7, #8
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}

0800d62c <_ZNSt14priority_queueISt4pairIfcESt6vectorIS1_SaIS1_EESt7greaterIS1_EEC1IS4_vEEv>:
      { std::make_heap(c.begin(), c.end(), comp); }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<__and_<is_default_constructible<_Compare>,
				is_default_constructible<_Seq>>::value>::type>
	priority_queue()
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b082      	sub	sp, #8
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
	: c(), comp() { }
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	461a      	mov	r2, r3
 800d638:	2300      	movs	r3, #0
 800d63a:	6013      	str	r3, [r2, #0]
 800d63c:	6053      	str	r3, [r2, #4]
 800d63e:	6093      	str	r3, [r2, #8]
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	4618      	mov	r0, r3
 800d644:	f7ff ffe5 	bl	800d612 <_ZNSt6vectorISt4pairIfcESaIS1_EEC1Ev>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	4618      	mov	r0, r3
 800d64c:	3708      	adds	r7, #8
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}

0800d652 <_ZNSt6vectorISt4pairIfcESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800d652:	b5b0      	push	{r4, r5, r7, lr}
 800d654:	b082      	sub	sp, #8
 800d656:	af00      	add	r7, sp, #0
 800d658:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681c      	ldr	r4, [r3, #0]
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	4618      	mov	r0, r3
 800d666:	f001 fb6c 	bl	800ed42 <_ZNSt12_Vector_baseISt4pairIfcESaIS1_EE19_M_get_Tp_allocatorEv>
 800d66a:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800d66c:	461a      	mov	r2, r3
 800d66e:	4629      	mov	r1, r5
 800d670:	4620      	mov	r0, r4
 800d672:	f001 fb71 	bl	800ed58 <_ZSt8_DestroyIPSt4pairIfcES1_EvT_S3_RSaIT0_E>
      }
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	4618      	mov	r0, r3
 800d67a:	f001 fb49 	bl	800ed10 <_ZNSt12_Vector_baseISt4pairIfcESaIS1_EED1Ev>
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	4618      	mov	r0, r3
 800d682:	3708      	adds	r7, #8
 800d684:	46bd      	mov	sp, r7
 800d686:	bdb0      	pop	{r4, r5, r7, pc}

0800d688 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800d688:	b580      	push	{r7, lr}
 800d68a:	b084      	sub	sp, #16
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800d690:	687a      	ldr	r2, [r7, #4]
 800d692:	f107 030c 	add.w	r3, r7, #12
 800d696:	4611      	mov	r1, r2
 800d698:	4618      	mov	r0, r3
 800d69a:	f001 fb6b 	bl	800ed74 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3710      	adds	r7, #16
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}

0800d6a8 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b084      	sub	sp, #16
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	1d1a      	adds	r2, r3, #4
 800d6b4:	f107 030c 	add.w	r3, r7, #12
 800d6b8:	4611      	mov	r1, r2
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f001 fb5a 	bl	800ed74 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3710      	adds	r7, #16
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
	...

0800d6cc <_ZNSt3mapIcSt4pairIfSt6vectorIS0_IciESaIS2_EEESt4lessIcESaIS0_IKcS5_EEEixERS8_>:
       *  is created using default values, which is then returned.
       *
       *  Lookup requires logarithmic time.
       */
      mapped_type&
      operator[](const key_type& __k)
 800d6cc:	b590      	push	{r4, r7, lr}
 800d6ce:	b08b      	sub	sp, #44	; 0x2c
 800d6d0:	af02      	add	r7, sp, #8
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	6039      	str	r1, [r7, #0]
      {
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
 800d6d6:	6839      	ldr	r1, [r7, #0]
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f001 fb5b 	bl	800ed94 <_ZNSt3mapIcSt4pairIfSt6vectorIS0_IciESaIS2_EEESt4lessIcESaIS0_IKcS5_EEE11lower_boundERS8_>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	60bb      	str	r3, [r7, #8]
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f000 fb5e 	bl	800dda4 <_ZNSt3mapIcSt4pairIfSt6vectorIS0_IciESaIS2_EEESt4lessIcESaIS0_IKcS5_EEE3endEv>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	60fb      	str	r3, [r7, #12]
 800d6ec:	f107 020c 	add.w	r2, r7, #12
 800d6f0:	f107 0308 	add.w	r3, r7, #8
 800d6f4:	4611      	mov	r1, r2
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f000 fb61 	bl	800ddbe <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEESA_>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d112      	bne.n	800d728 <_ZNSt3mapIcSt4pairIfSt6vectorIS0_IciESaIS2_EEESt4lessIcESaIS0_IKcS5_EEEixERS8_+0x5c>
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f001 fb55 	bl	800edb2 <_ZNKSt3mapIcSt4pairIfSt6vectorIS0_IciESaIS2_EEESt4lessIcESaIS0_IKcS5_EEE8key_compEv>
 800d708:	f107 0308 	add.w	r3, r7, #8
 800d70c:	4618      	mov	r0, r3
 800d70e:	f000 fb7b 	bl	800de08 <_ZNKSt17_Rb_tree_iteratorISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEEdeEv>
 800d712:	4603      	mov	r3, r0
 800d714:	461a      	mov	r2, r3
 800d716:	f107 0310 	add.w	r3, r7, #16
 800d71a:	6839      	ldr	r1, [r7, #0]
 800d71c:	4618      	mov	r0, r3
 800d71e:	f001 fb55 	bl	800edcc <_ZNKSt4lessIcEclERKcS2_>
 800d722:	4603      	mov	r3, r0
 800d724:	2b00      	cmp	r3, #0
 800d726:	d001      	beq.n	800d72c <_ZNSt3mapIcSt4pairIfSt6vectorIS0_IciESaIS2_EEESt4lessIcESaIS0_IKcS5_EEEixERS8_+0x60>
 800d728:	2301      	movs	r3, #1
 800d72a:	e000      	b.n	800d72e <_ZNSt3mapIcSt4pairIfSt6vectorIS0_IciESaIS2_EEESt4lessIcESaIS0_IKcS5_EEEixERS8_+0x62>
 800d72c:	2300      	movs	r3, #0
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d01b      	beq.n	800d76a <_ZNSt3mapIcSt4pairIfSt6vectorIS0_IciESaIS2_EEESt4lessIcESaIS0_IKcS5_EEEixERS8_+0x9e>
#if __cplusplus >= 201103L
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 800d732:	687c      	ldr	r4, [r7, #4]
 800d734:	f107 0208 	add.w	r2, r7, #8
 800d738:	f107 0314 	add.w	r3, r7, #20
 800d73c:	4611      	mov	r1, r2
 800d73e:	4618      	mov	r0, r3
 800d740:	f001 fb68 	bl	800ee14 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEEC1ERKSt17_Rb_tree_iteratorIS7_E>
					    std::tuple<const key_type&>(__k),
 800d744:	f107 0318 	add.w	r3, r7, #24
 800d748:	6839      	ldr	r1, [r7, #0]
 800d74a:	4618      	mov	r0, r3
 800d74c:	f001 fb53 	bl	800edf6 <_ZNSt5tupleIJRKcEEC1ILb1ELb1EEES1_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 800d750:	f107 0218 	add.w	r2, r7, #24
 800d754:	f107 031c 	add.w	r3, r7, #28
 800d758:	9300      	str	r3, [sp, #0]
 800d75a:	4613      	mov	r3, r2
 800d75c:	4a08      	ldr	r2, [pc, #32]	; (800d780 <_ZNSt3mapIcSt4pairIfSt6vectorIS0_IciESaIS2_EEESt4lessIcESaIS0_IKcS5_EEEixERS8_+0xb4>)
 800d75e:	6979      	ldr	r1, [r7, #20]
 800d760:	4620      	mov	r0, r4
 800d762:	f001 fb67 	bl	800ee34 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_>
 800d766:	4603      	mov	r3, r0
 800d768:	60bb      	str	r3, [r7, #8]
					    std::tuple<>());
#else
	  __i = insert(__i, value_type(__k, mapped_type()));
#endif
	return (*__i).second;
 800d76a:	f107 0308 	add.w	r3, r7, #8
 800d76e:	4618      	mov	r0, r3
 800d770:	f000 fb4a 	bl	800de08 <_ZNKSt17_Rb_tree_iteratorISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEEdeEv>
 800d774:	4603      	mov	r3, r0
 800d776:	3304      	adds	r3, #4
      }
 800d778:	4618      	mov	r0, r3
 800d77a:	3724      	adds	r7, #36	; 0x24
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd90      	pop	{r4, r7, pc}
 800d780:	0802981c 	.word	0x0802981c

0800d784 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800d784:	b580      	push	{r7, lr}
 800d786:	b082      	sub	sp, #8
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f001 fb8f 	bl	800eeb0 <_ZNSaISt4pairIciEEC1Ev>
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	4618      	mov	r0, r3
 800d796:	f001 fb97 	bl	800eec8 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	4618      	mov	r0, r3
 800d79e:	3708      	adds	r7, #8
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}

0800d7a4 <_ZNSaISt4pairIciEED1Ev>:
 800d7a4:	b480      	push	{r7}
 800d7a6:	b083      	sub	sp, #12
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	370c      	adds	r7, #12
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b8:	4770      	bx	lr

0800d7ba <_ZNSt12_Vector_baseISt4pairIciESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800d7ba:	b580      	push	{r7, lr}
 800d7bc:	b082      	sub	sp, #8
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	689a      	ldr	r2, [r3, #8]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	1ad3      	subs	r3, r2, r3
 800d7d0:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 800d7d2:	461a      	mov	r2, r3
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f001 fb8b 	bl	800eef0 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE13_M_deallocateEPS1_j>
      }
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f7fb f9c5 	bl	8008b6c <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE12_Vector_implD1Ev>
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3708      	adds	r7, #8
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <_ZNSt6vectorISt4pairIciESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800d7ec:	b5b0      	push	{r4, r5, r7, lr}
 800d7ee:	b082      	sub	sp, #8
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681c      	ldr	r4, [r3, #0]
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	4618      	mov	r0, r3
 800d800:	f001 fb89 	bl	800ef16 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE19_M_get_Tp_allocatorEv>
 800d804:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800d806:	461a      	mov	r2, r3
 800d808:	4629      	mov	r1, r5
 800d80a:	4620      	mov	r0, r4
 800d80c:	f001 fb8e 	bl	800ef2c <_ZSt8_DestroyIPSt4pairIciES1_EvT_S3_RSaIT0_E>
      }
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	4618      	mov	r0, r3
 800d814:	f7ff ffd1 	bl	800d7ba <_ZNSt12_Vector_baseISt4pairIciESaIS1_EED1Ev>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	4618      	mov	r0, r3
 800d81c:	3708      	adds	r7, #8
 800d81e:	46bd      	mov	sp, r7
 800d820:	bdb0      	pop	{r4, r5, r7, pc}

0800d822 <_ZSt9make_pairIiSt6vectorISt4pairIciESaIS2_EEES1_INSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS5_INS6_IT0_E4typeEE6__typeEEOS7_OSC_>:
#if __cplusplus >= 201103L
  // NB: DR 706.
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
 800d822:	b590      	push	{r4, r7, lr}
 800d824:	b085      	sub	sp, #20
 800d826:	af00      	add	r7, sp, #0
 800d828:	60f8      	str	r0, [r7, #12]
 800d82a:	60b9      	str	r1, [r7, #8]
 800d82c:	607a      	str	r2, [r7, #4]
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> 	      __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 800d82e:	68b8      	ldr	r0, [r7, #8]
 800d830:	f7fb f9d8 	bl	8008be4 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800d834:	4604      	mov	r4, r0
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f000 f80a 	bl	800d850 <_ZSt7forwardISt6vectorISt4pairIciESaIS2_EEEOT_RNSt16remove_referenceIS5_E4typeE>
 800d83c:	4603      	mov	r3, r0
 800d83e:	461a      	mov	r2, r3
 800d840:	4621      	mov	r1, r4
 800d842:	68f8      	ldr	r0, [r7, #12]
 800d844:	f001 fba0 	bl	800ef88 <_ZNSt4pairIiSt6vectorIS_IciESaIS1_EEEC1IiS3_Lb1EEEOT_OT0_>
    }
 800d848:	68f8      	ldr	r0, [r7, #12]
 800d84a:	3714      	adds	r7, #20
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd90      	pop	{r4, r7, pc}

0800d850 <_ZSt7forwardISt6vectorISt4pairIciESaIS2_EEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d850:	b480      	push	{r7}
 800d852:	b083      	sub	sp, #12
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	4618      	mov	r0, r3
 800d85c:	370c      	adds	r7, #12
 800d85e:	46bd      	mov	sp, r7
 800d860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d864:	4770      	bx	lr

0800d866 <_ZNSt6vectorISt4pairIciESaIS1_EEaSEOS3_>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800d866:	b590      	push	{r4, r7, lr}
 800d868:	b085      	sub	sp, #20
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	6078      	str	r0, [r7, #4]
 800d86e:	6039      	str	r1, [r7, #0]
	constexpr bool __move_storage =
 800d870:	2301      	movs	r3, #1
 800d872:	73fb      	strb	r3, [r7, #15]
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 800d874:	6838      	ldr	r0, [r7, #0]
 800d876:	f001 fba3 	bl	800efc0 <_ZSt4moveIRSt6vectorISt4pairIciESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800d87a:	4603      	mov	r3, r0
 800d87c:	4622      	mov	r2, r4
 800d87e:	4619      	mov	r1, r3
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f001 fba8 	bl	800efd6 <_ZNSt6vectorISt4pairIciESaIS1_EE14_M_move_assignEOS3_St17integral_constantIbLb1EE>
	return *this;
 800d886:	687b      	ldr	r3, [r7, #4]
      }
 800d888:	4618      	mov	r0, r3
 800d88a:	3714      	adds	r7, #20
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd90      	pop	{r4, r7, pc}

0800d890 <_ZSt9make_pairIfSt6vectorISt4pairIciESaIS2_EEES1_INSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS5_INS6_IT0_E4typeEE6__typeEEOS7_OSC_>:
    make_pair(_T1&& __x, _T2&& __y)
 800d890:	b590      	push	{r4, r7, lr}
 800d892:	b085      	sub	sp, #20
 800d894:	af00      	add	r7, sp, #0
 800d896:	60f8      	str	r0, [r7, #12]
 800d898:	60b9      	str	r1, [r7, #8]
 800d89a:	607a      	str	r2, [r7, #4]
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 800d89c:	68b8      	ldr	r0, [r7, #8]
 800d89e:	f7fb fa23 	bl	8008ce8 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800d8a2:	4604      	mov	r4, r0
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f7ff ffd3 	bl	800d850 <_ZSt7forwardISt6vectorISt4pairIciESaIS2_EEEOT_RNSt16remove_referenceIS5_E4typeE>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	4621      	mov	r1, r4
 800d8b0:	68f8      	ldr	r0, [r7, #12]
 800d8b2:	f001 fbcd 	bl	800f050 <_ZNSt4pairIfSt6vectorIS_IciESaIS1_EEEC1IfS3_Lb1EEEOT_OT0_>
    }
 800d8b6:	68f8      	ldr	r0, [r7, #12]
 800d8b8:	3714      	adds	r7, #20
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd90      	pop	{r4, r7, pc}

0800d8be <_ZSt9make_pairIiRKcESt4pairINSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS3_INS4_IT0_E4typeEE6__typeEEOS5_OSA_>:
    make_pair(_T1&& __x, _T2&& __y)
 800d8be:	b590      	push	{r4, r7, lr}
 800d8c0:	b085      	sub	sp, #20
 800d8c2:	af00      	add	r7, sp, #0
 800d8c4:	60f8      	str	r0, [r7, #12]
 800d8c6:	60b9      	str	r1, [r7, #8]
 800d8c8:	607a      	str	r2, [r7, #4]
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 800d8ca:	68b8      	ldr	r0, [r7, #8]
 800d8cc:	f7fb f98a 	bl	8008be4 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800d8d0:	4604      	mov	r4, r0
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f001 fbd8 	bl	800f088 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	461a      	mov	r2, r3
 800d8dc:	4621      	mov	r1, r4
 800d8de:	68f8      	ldr	r0, [r7, #12]
 800d8e0:	f001 fbdd 	bl	800f09e <_ZNSt4pairIicEC1IiLb1EEEOT_RKc>
    }
 800d8e4:	68f8      	ldr	r0, [r7, #12]
 800d8e6:	3714      	adds	r7, #20
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd90      	pop	{r4, r7, pc}

0800d8ec <_ZNSt4pairIfcEC1IicLb1EEEOS_IT_T0_E>:
	constexpr pair(pair<_U1, _U2>&& __p)
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b082      	sub	sp, #8
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	6039      	str	r1, [r7, #0]
	: first(std::forward<_U1>(__p.first)),
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f7fb f973 	bl	8008be4 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800d8fe:	4603      	mov	r3, r0
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	ee07 3a90 	vmov	s15, r3
 800d906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	edc3 7a00 	vstr	s15, [r3]
	  second(std::forward<_U2>(__p.second)) { }
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	3304      	adds	r3, #4
 800d914:	4618      	mov	r0, r3
 800d916:	f7fb fa10 	bl	8008d3a <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>
 800d91a:	4603      	mov	r3, r0
 800d91c:	781a      	ldrb	r2, [r3, #0]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	711a      	strb	r2, [r3, #4]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	4618      	mov	r0, r3
 800d926:	3708      	adds	r7, #8
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}

0800d92c <_ZNSt14priority_queueISt4pairIfcESt6vectorIS1_SaIS1_EESt7greaterIS1_EE4pushEOS1_>:
	std::push_heap(c.begin(), c.end(), comp);
      }

#if __cplusplus >= 201103L
      void
      push(value_type&& __x)
 800d92c:	b5b0      	push	{r4, r5, r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	6039      	str	r1, [r7, #0]
      {
	c.push_back(std::move(__x));
 800d936:	687c      	ldr	r4, [r7, #4]
 800d938:	6838      	ldr	r0, [r7, #0]
 800d93a:	f7fb f9ca 	bl	8008cd2 <_ZSt4moveIRSt4pairIfcEEONSt16remove_referenceIT_E4typeEOS4_>
 800d93e:	4603      	mov	r3, r0
 800d940:	4619      	mov	r1, r3
 800d942:	4620      	mov	r0, r4
 800d944:	f001 fbc1 	bl	800f0ca <_ZNSt6vectorISt4pairIfcESaIS1_EE9push_backEOS1_>
	std::push_heap(c.begin(), c.end(), comp);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	4618      	mov	r0, r3
 800d94c:	f001 fbce 	bl	800f0ec <_ZNSt6vectorISt4pairIfcESaIS1_EE5beginEv>
 800d950:	4604      	mov	r4, r0
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	4618      	mov	r0, r3
 800d956:	f001 fbd9 	bl	800f10c <_ZNSt6vectorISt4pairIfcESaIS1_EE3endEv>
 800d95a:	4603      	mov	r3, r0
 800d95c:	462a      	mov	r2, r5
 800d95e:	4619      	mov	r1, r3
 800d960:	4620      	mov	r0, r4
 800d962:	f001 fc04 	bl	800f16e <_ZSt9push_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS3_SaIS3_EEEESt7greaterIS3_EEvT_SB_T0_>
      }
 800d966:	bf00      	nop
 800d968:	3708      	adds	r7, #8
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bdb0      	pop	{r4, r5, r7, pc}

0800d96e <_ZNKSt14priority_queueISt4pairIfcESt6vectorIS1_SaIS1_EESt7greaterIS1_EE5emptyEv>:
      empty() const
 800d96e:	b580      	push	{r7, lr}
 800d970:	b082      	sub	sp, #8
 800d972:	af00      	add	r7, sp, #0
 800d974:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	4618      	mov	r0, r3
 800d97a:	f001 fc40 	bl	800f1fe <_ZNKSt6vectorISt4pairIfcESaIS1_EE5emptyEv>
 800d97e:	4603      	mov	r3, r0
 800d980:	4618      	mov	r0, r3
 800d982:	3708      	adds	r7, #8
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}

0800d988 <_ZNKSt14priority_queueISt4pairIfcESt6vectorIS1_SaIS1_EESt7greaterIS1_EE3topEv>:
      top() const
 800d988:	b580      	push	{r7, lr}
 800d98a:	b082      	sub	sp, #8
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
	return c.front();
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	4618      	mov	r0, r3
 800d994:	f001 fc4e 	bl	800f234 <_ZNKSt6vectorISt4pairIfcESaIS1_EE5frontEv>
 800d998:	4603      	mov	r3, r0
      }
 800d99a:	4618      	mov	r0, r3
 800d99c:	3708      	adds	r7, #8
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}

0800d9a2 <_ZNSt14priority_queueISt4pairIfcESt6vectorIS1_SaIS1_EESt7greaterIS1_EE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 800d9a2:	b5b0      	push	{r4, r5, r7, lr}
 800d9a4:	b082      	sub	sp, #8
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	std::pop_heap(c.begin(), c.end(), comp);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f001 fb9d 	bl	800f0ec <_ZNSt6vectorISt4pairIfcESaIS1_EE5beginEv>
 800d9b2:	4604      	mov	r4, r0
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f001 fba8 	bl	800f10c <_ZNSt6vectorISt4pairIfcESaIS1_EE3endEv>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	462a      	mov	r2, r5
 800d9c0:	4619      	mov	r1, r3
 800d9c2:	4620      	mov	r0, r4
 800d9c4:	f001 fc5a 	bl	800f27c <_ZSt8pop_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS3_SaIS3_EEEESt7greaterIS3_EEvT_SB_T0_>
	c.pop_back();
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f001 fc7c 	bl	800f2c8 <_ZNSt6vectorISt4pairIfcESaIS1_EE8pop_backEv>
      }
 800d9d0:	bf00      	nop
 800d9d2:	3708      	adds	r7, #8
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bdb0      	pop	{r4, r5, r7, pc}

0800d9d8 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800d9d8:	b480      	push	{r7}
 800d9da:	b083      	sub	sp, #12
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	685a      	ldr	r2, [r3, #4]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	1ad3      	subs	r3, r2, r3
 800d9ea:	10db      	asrs	r3, r3, #3
 800d9ec:	4a04      	ldr	r2, [pc, #16]	; (800da00 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv+0x28>)
 800d9ee:	fb02 f303 	mul.w	r3, r2, r3
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	370c      	adds	r7, #12
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fc:	4770      	bx	lr
 800d9fe:	bf00      	nop
 800da00:	aaaaaaab 	.word	0xaaaaaaab

0800da04 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800da04:	b480      	push	{r7}
 800da06:	b083      	sub	sp, #12
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6819      	ldr	r1, [r3, #0]
 800da12:	683a      	ldr	r2, [r7, #0]
 800da14:	4613      	mov	r3, r2
 800da16:	005b      	lsls	r3, r3, #1
 800da18:	4413      	add	r3, r2
 800da1a:	00db      	lsls	r3, r3, #3
 800da1c:	440b      	add	r3, r1
      }
 800da1e:	4618      	mov	r0, r3
 800da20:	370c      	adds	r7, #12
 800da22:	46bd      	mov	sp, r7
 800da24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da28:	4770      	bx	lr

0800da2a <_ZNSt6vectorIcSaIcEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800da2a:	b580      	push	{r7, lr}
 800da2c:	b084      	sub	sp, #16
 800da2e:	af00      	add	r7, sp, #0
 800da30:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800da32:	687a      	ldr	r2, [r7, #4]
 800da34:	f107 030c 	add.w	r3, r7, #12
 800da38:	4611      	mov	r1, r2
 800da3a:	4618      	mov	r0, r3
 800da3c:	f001 fc59 	bl	800f2f2 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	4618      	mov	r0, r3
 800da44:	3710      	adds	r7, #16
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}

0800da4a <_ZNSt6vectorIcSaIcEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800da4a:	b580      	push	{r7, lr}
 800da4c:	b084      	sub	sp, #16
 800da4e:	af00      	add	r7, sp, #0
 800da50:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	1d1a      	adds	r2, r3, #4
 800da56:	f107 030c 	add.w	r3, r7, #12
 800da5a:	4611      	mov	r1, r2
 800da5c:	4618      	mov	r0, r3
 800da5e:	f001 fc48 	bl	800f2f2 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	4618      	mov	r0, r3
 800da66:	3710      	adds	r7, #16
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}

0800da6c <_ZSt4findIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEcET_S7_S7_RKT0_>:
    find(_InputIterator __first, _InputIterator __last,
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b084      	sub	sp, #16
 800da70:	af00      	add	r7, sp, #0
 800da72:	60f8      	str	r0, [r7, #12]
 800da74:	60b9      	str	r1, [r7, #8]
 800da76:	607a      	str	r2, [r7, #4]
      return std::__find_if(__first, __last,
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f001 fc4a 	bl	800f312 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>
 800da7e:	4603      	mov	r3, r0
 800da80:	461a      	mov	r2, r3
 800da82:	68b9      	ldr	r1, [r7, #8]
 800da84:	68f8      	ldr	r0, [r7, #12]
 800da86:	f001 fc53 	bl	800f330 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_>
 800da8a:	4603      	mov	r3, r0
    }
 800da8c:	4618      	mov	r0, r3
 800da8e:	3710      	adds	r7, #16
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}

0800da94 <_ZN9__gnu_cxxeqIPcSt6vectorIcSaIcEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800da94:	b590      	push	{r4, r7, lr}
 800da96:	b083      	sub	sp, #12
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
 800da9c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f7fb f956 	bl	8008d50 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800daa4:	4603      	mov	r3, r0
 800daa6:	681c      	ldr	r4, [r3, #0]
 800daa8:	6838      	ldr	r0, [r7, #0]
 800daaa:	f7fb f951 	bl	8008d50 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800daae:	4603      	mov	r3, r0
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	429c      	cmp	r4, r3
 800dab4:	bf0c      	ite	eq
 800dab6:	2301      	moveq	r3, #1
 800dab8:	2300      	movne	r3, #0
 800daba:	b2db      	uxtb	r3, r3
 800dabc:	4618      	mov	r0, r3
 800dabe:	370c      	adds	r7, #12
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd90      	pop	{r4, r7, pc}

0800dac4 <_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIciEES2_E27_S_propagate_on_copy_assignEv>:
    static constexpr bool _S_propagate_on_copy_assign()
 800dac4:	b480      	push	{r7}
 800dac6:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 800dac8:	2300      	movs	r3, #0
 800daca:	4618      	mov	r0, r3
 800dacc:	46bd      	mov	sp, r7
 800dace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad2:	4770      	bx	lr

0800dad4 <_ZSteqRKSaISt4pairIciEES3_>:
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 800dad4:	b480      	push	{r7}
 800dad6:	b083      	sub	sp, #12
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	6039      	str	r1, [r7, #0]
      { return true; }
 800dade:	2301      	movs	r3, #1
 800dae0:	4618      	mov	r0, r3
 800dae2:	370c      	adds	r7, #12
 800dae4:	46bd      	mov	sp, r7
 800dae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daea:	4770      	bx	lr

0800daec <_ZSt4copyIPSt4pairIciES2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 800daec:	b590      	push	{r4, r7, lr}
 800daee:	b085      	sub	sp, #20
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	60f8      	str	r0, [r7, #12]
 800daf4:	60b9      	str	r1, [r7, #8]
 800daf6:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800daf8:	68f8      	ldr	r0, [r7, #12]
 800dafa:	f001 fce7 	bl	800f4cc <_ZSt12__miter_baseIPSt4pairIciEET_S3_>
 800dafe:	4604      	mov	r4, r0
 800db00:	68b8      	ldr	r0, [r7, #8]
 800db02:	f001 fce3 	bl	800f4cc <_ZSt12__miter_baseIPSt4pairIciEET_S3_>
 800db06:	4603      	mov	r3, r0
 800db08:	687a      	ldr	r2, [r7, #4]
 800db0a:	4619      	mov	r1, r3
 800db0c:	4620      	mov	r0, r4
 800db0e:	f001 fce8 	bl	800f4e2 <_ZSt13__copy_move_aILb0EPSt4pairIciES2_ET1_T0_S4_S3_>
 800db12:	4603      	mov	r3, r0
    }
 800db14:	4618      	mov	r0, r3
 800db16:	3714      	adds	r7, #20
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd90      	pop	{r4, r7, pc}

0800db1c <_ZNSt6vectorISt4pairIciESaIS1_EEaSERKS3_>:
    vector<_Tp, _Alloc>::
 800db1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db1e:	b085      	sub	sp, #20
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
 800db24:	6039      	str	r1, [r7, #0]
      if (&__x != this)
 800db26:	683a      	ldr	r2, [r7, #0]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	429a      	cmp	r2, r3
 800db2c:	f000 80e9 	beq.w	800dd02 <_ZNSt6vectorISt4pairIciESaIS1_EEaSERKS3_+0x1e6>
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 800db30:	f7ff ffc8 	bl	800dac4 <_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIciEES2_E27_S_propagate_on_copy_assignEv>
 800db34:	4603      	mov	r3, r0
 800db36:	2b00      	cmp	r3, #0
 800db38:	d046      	beq.n	800dbc8 <_ZNSt6vectorISt4pairIciESaIS1_EEaSERKS3_+0xac>
	      if (!_Alloc_traits::_S_always_equal()
 800db3a:	f7fb f83d 	bl	8008bb8 <_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIciEES2_E15_S_always_equalEv>
 800db3e:	4603      	mov	r3, r0
 800db40:	f083 0301 	eor.w	r3, r3, #1
 800db44:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 800db46:	2b00      	cmp	r3, #0
 800db48:	d015      	beq.n	800db76 <_ZNSt6vectorISt4pairIciESaIS1_EEaSERKS3_+0x5a>
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	4618      	mov	r0, r3
 800db4e:	f001 f9e2 	bl	800ef16 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE19_M_get_Tp_allocatorEv>
 800db52:	4604      	mov	r4, r0
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	4618      	mov	r0, r3
 800db58:	f001 fc00 	bl	800f35c <_ZNKSt12_Vector_baseISt4pairIciESaIS1_EE19_M_get_Tp_allocatorEv>
 800db5c:	4603      	mov	r3, r0
 800db5e:	4619      	mov	r1, r3
 800db60:	4620      	mov	r0, r4
 800db62:	f7ff ffb7 	bl	800dad4 <_ZSteqRKSaISt4pairIciEES3_>
 800db66:	4603      	mov	r3, r0
 800db68:	f083 0301 	eor.w	r3, r3, #1
 800db6c:	b2db      	uxtb	r3, r3
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d001      	beq.n	800db76 <_ZNSt6vectorISt4pairIciESaIS1_EEaSERKS3_+0x5a>
 800db72:	2301      	movs	r3, #1
 800db74:	e000      	b.n	800db78 <_ZNSt6vectorISt4pairIciESaIS1_EEaSERKS3_+0x5c>
 800db76:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d017      	beq.n	800dbac <_ZNSt6vectorISt4pairIciESaIS1_EEaSERKS3_+0x90>
		  this->clear();
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f001 fbf8 	bl	800f372 <_ZNSt6vectorISt4pairIciESaIS1_EE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 800db82:	6878      	ldr	r0, [r7, #4]
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	1ad3      	subs	r3, r2, r3
 800db92:	10db      	asrs	r3, r3, #3
		  _M_deallocate(this->_M_impl._M_start,
 800db94:	461a      	mov	r2, r3
 800db96:	f001 f9ab 	bl	800eef0 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE13_M_deallocateEPS1_j>
		  this->_M_impl._M_start = nullptr;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2200      	movs	r2, #0
 800db9e:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2200      	movs	r2, #0
 800dba4:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	609a      	str	r2, [r3, #8]
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f001 f9b1 	bl	800ef16 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE19_M_get_Tp_allocatorEv>
 800dbb4:	4604      	mov	r4, r0
				   __x._M_get_Tp_allocator());
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f001 fbcf 	bl	800f35c <_ZNKSt12_Vector_baseISt4pairIciESaIS1_EE19_M_get_Tp_allocatorEv>
 800dbbe:	4603      	mov	r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 800dbc0:	4619      	mov	r1, r3
 800dbc2:	4620      	mov	r0, r4
 800dbc4:	f001 fbe3 	bl	800f38e <_ZSt15__alloc_on_copyISaISt4pairIciEEEvRT_RKS3_>
	  const size_type __xlen = __x.size();
 800dbc8:	6838      	ldr	r0, [r7, #0]
 800dbca:	f000 f92b 	bl	800de24 <_ZNKSt6vectorISt4pairIciESaIS1_EE4sizeEv>
 800dbce:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f001 fbe7 	bl	800f3a4 <_ZNKSt6vectorISt4pairIciESaIS1_EE8capacityEv>
 800dbd6:	4602      	mov	r2, r0
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	4293      	cmp	r3, r2
 800dbdc:	bf8c      	ite	hi
 800dbde:	2301      	movhi	r3, #1
 800dbe0:	2300      	movls	r3, #0
 800dbe2:	b2db      	uxtb	r3, r3
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d032      	beq.n	800dc4e <_ZNSt6vectorISt4pairIciESaIS1_EEaSERKS3_+0x132>
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 800dbe8:	6838      	ldr	r0, [r7, #0]
 800dbea:	f001 fbeb 	bl	800f3c4 <_ZNKSt6vectorISt4pairIciESaIS1_EE5beginEv>
 800dbee:	4604      	mov	r4, r0
 800dbf0:	6838      	ldr	r0, [r7, #0]
 800dbf2:	f001 fbf7 	bl	800f3e4 <_ZNKSt6vectorISt4pairIciESaIS1_EE3endEv>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	4622      	mov	r2, r4
 800dbfa:	68f9      	ldr	r1, [r7, #12]
 800dbfc:	6878      	ldr	r0, [r7, #4]
 800dbfe:	f001 fc02 	bl	800f406 <_ZNSt6vectorISt4pairIciESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_jT_SB_>
 800dc02:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681c      	ldr	r4, [r3, #0]
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f001 f981 	bl	800ef16 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE19_M_get_Tp_allocatorEv>
 800dc14:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800dc16:	461a      	mov	r2, r3
 800dc18:	4629      	mov	r1, r5
 800dc1a:	4620      	mov	r0, r4
 800dc1c:	f001 f986 	bl	800ef2c <_ZSt8_DestroyIPSt4pairIciES1_EvT_S3_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	1ad3      	subs	r3, r2, r3
 800dc30:	10db      	asrs	r3, r3, #3
	      _M_deallocate(this->_M_impl._M_start,
 800dc32:	461a      	mov	r2, r3
 800dc34:	f001 f95c 	bl	800eef0 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE13_M_deallocateEPS1_j>
	      this->_M_impl._M_start = __tmp;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	68ba      	ldr	r2, [r7, #8]
 800dc3c:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681a      	ldr	r2, [r3, #0]
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	00db      	lsls	r3, r3, #3
 800dc46:	441a      	add	r2, r3
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	609a      	str	r2, [r3, #8]
 800dc4c:	e052      	b.n	800dcf4 <_ZNSt6vectorISt4pairIciESaIS1_EEaSERKS3_+0x1d8>
	  else if (size() >= __xlen)
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f000 f8e8 	bl	800de24 <_ZNKSt6vectorISt4pairIciESaIS1_EE4sizeEv>
 800dc54:	4602      	mov	r2, r0
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	bf94      	ite	ls
 800dc5c:	2301      	movls	r3, #1
 800dc5e:	2300      	movhi	r3, #0
 800dc60:	b2db      	uxtb	r3, r3
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d020      	beq.n	800dca8 <_ZNSt6vectorISt4pairIciESaIS1_EEaSERKS3_+0x18c>
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800dc66:	6838      	ldr	r0, [r7, #0]
 800dc68:	f001 fbac 	bl	800f3c4 <_ZNKSt6vectorISt4pairIciESaIS1_EE5beginEv>
 800dc6c:	4604      	mov	r4, r0
 800dc6e:	6838      	ldr	r0, [r7, #0]
 800dc70:	f001 fbb8 	bl	800f3e4 <_ZNKSt6vectorISt4pairIciESaIS1_EE3endEv>
 800dc74:	4605      	mov	r5, r0
 800dc76:	6878      	ldr	r0, [r7, #4]
 800dc78:	f001 fbe1 	bl	800f43e <_ZNSt6vectorISt4pairIciESaIS1_EE5beginEv>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	461a      	mov	r2, r3
 800dc80:	4629      	mov	r1, r5
 800dc82:	4620      	mov	r0, r4
 800dc84:	f001 fbeb 	bl	800f45e <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIciESt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET0_T_SD_SC_>
 800dc88:	4604      	mov	r4, r0
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f001 fbff 	bl	800f48e <_ZNSt6vectorISt4pairIciESaIS1_EE3endEv>
 800dc90:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	4618      	mov	r0, r3
 800dc96:	f001 f93e 	bl	800ef16 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE19_M_get_Tp_allocatorEv>
 800dc9a:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800dc9c:	461a      	mov	r2, r3
 800dc9e:	4629      	mov	r1, r5
 800dca0:	4620      	mov	r0, r4
 800dca2:	f001 fc05 	bl	800f4b0 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS3_SaIS3_EEEES3_EvT_S9_RSaIT0_E>
 800dca6:	e025      	b.n	800dcf4 <_ZNSt6vectorISt4pairIciESaIS1_EEaSERKS3_+0x1d8>
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	681d      	ldr	r5, [r3, #0]
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	681c      	ldr	r4, [r3, #0]
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f000 f8b7 	bl	800de24 <_ZNKSt6vectorISt4pairIciESaIS1_EE4sizeEv>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	00db      	lsls	r3, r3, #3
 800dcba:	18e1      	adds	r1, r4, r3
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	461a      	mov	r2, r3
 800dcc2:	4628      	mov	r0, r5
 800dcc4:	f7ff ff12 	bl	800daec <_ZSt4copyIPSt4pairIciES2_ET0_T_S4_S3_>
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	681c      	ldr	r4, [r3, #0]
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f000 f8a9 	bl	800de24 <_ZNKSt6vectorISt4pairIciESaIS1_EE4sizeEv>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	00db      	lsls	r3, r3, #3
 800dcd6:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	685e      	ldr	r6, [r3, #4]
					  _M_get_Tp_allocator());
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	4618      	mov	r0, r3
 800dce4:	f001 f917 	bl	800ef16 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE19_M_get_Tp_allocatorEv>
 800dce8:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800dcea:	4632      	mov	r2, r6
 800dcec:	4629      	mov	r1, r5
 800dcee:	4620      	mov	r0, r4
 800dcf0:	f001 fc1a 	bl	800f528 <_ZSt22__uninitialized_copy_aIPSt4pairIciES2_S1_ET0_T_S4_S3_RSaIT1_E>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681a      	ldr	r2, [r3, #0]
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	00db      	lsls	r3, r3, #3
 800dcfc:	441a      	add	r2, r3
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	605a      	str	r2, [r3, #4]
      return *this;
 800dd02:	687b      	ldr	r3, [r7, #4]
    }
 800dd04:	4618      	mov	r0, r3
 800dd06:	3714      	adds	r7, #20
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dd0c <_ZSt9make_pairIRciESt4pairINSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS2_INS3_IT0_E4typeEE6__typeEEOS4_OS9_>:
    make_pair(_T1&& __x, _T2&& __y)
 800dd0c:	b590      	push	{r4, r7, lr}
 800dd0e:	b085      	sub	sp, #20
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	60f8      	str	r0, [r7, #12]
 800dd14:	60b9      	str	r1, [r7, #8]
 800dd16:	607a      	str	r2, [r7, #4]
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 800dd18:	68b8      	ldr	r0, [r7, #8]
 800dd1a:	f001 fc16 	bl	800f54a <_ZSt7forwardIRcEOT_RNSt16remove_referenceIS1_E4typeE>
 800dd1e:	4604      	mov	r4, r0
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f7fa ff5f 	bl	8008be4 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800dd26:	4603      	mov	r3, r0
 800dd28:	461a      	mov	r2, r3
 800dd2a:	4621      	mov	r1, r4
 800dd2c:	68f8      	ldr	r0, [r7, #12]
 800dd2e:	f001 fc17 	bl	800f560 <_ZNSt4pairIciEC1IRciLb1EEEOT_OT0_>
    }
 800dd32:	68f8      	ldr	r0, [r7, #12]
 800dd34:	3714      	adds	r7, #20
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd90      	pop	{r4, r7, pc}

0800dd3a <_ZNSt6vectorISt4pairIciESaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800dd3a:	b580      	push	{r7, lr}
 800dd3c:	b082      	sub	sp, #8
 800dd3e:	af00      	add	r7, sp, #0
 800dd40:	6078      	str	r0, [r7, #4]
 800dd42:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800dd44:	6838      	ldr	r0, [r7, #0]
 800dd46:	f001 fc24 	bl	800f592 <_ZSt4moveIRSt4pairIciEEONSt16remove_referenceIT_E4typeEOS4_>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	4619      	mov	r1, r3
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f001 fc2a 	bl	800f5a8 <_ZNSt6vectorISt4pairIciESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800dd54:	bf00      	nop
 800dd56:	3708      	adds	r7, #8
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <_ZSt9make_pairIRfRcESt4pairINSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS3_INS4_IT0_E4typeEE6__typeEEOS5_OSA_>:
    make_pair(_T1&& __x, _T2&& __y)
 800dd5c:	b590      	push	{r4, r7, lr}
 800dd5e:	b085      	sub	sp, #20
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	60f8      	str	r0, [r7, #12]
 800dd64:	60b9      	str	r1, [r7, #8]
 800dd66:	607a      	str	r2, [r7, #4]
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 800dd68:	68b8      	ldr	r0, [r7, #8]
 800dd6a:	f001 fc50 	bl	800f60e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 800dd6e:	4604      	mov	r4, r0
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	f001 fbea 	bl	800f54a <_ZSt7forwardIRcEOT_RNSt16remove_referenceIS1_E4typeE>
 800dd76:	4603      	mov	r3, r0
 800dd78:	461a      	mov	r2, r3
 800dd7a:	4621      	mov	r1, r4
 800dd7c:	68f8      	ldr	r0, [r7, #12]
 800dd7e:	f001 fc51 	bl	800f624 <_ZNSt4pairIfcEC1IRfRcLb1EEEOT_OT0_>
    }
 800dd82:	68f8      	ldr	r0, [r7, #12]
 800dd84:	3714      	adds	r7, #20
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd90      	pop	{r4, r7, pc}

0800dd8a <_ZNSt3mapIcSt4pairIfSt6vectorIS0_IciESaIS2_EEESt4lessIcESaIS0_IKcS5_EEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800dd8a:	b580      	push	{r7, lr}
 800dd8c:	b082      	sub	sp, #8
 800dd8e:	af00      	add	r7, sp, #0
 800dd90:	6078      	str	r0, [r7, #4]
      { return _M_t.begin(); }
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	4618      	mov	r0, r3
 800dd96:	f001 fc5e 	bl	800f656 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE5beginEv>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3708      	adds	r7, #8
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <_ZNSt3mapIcSt4pairIfSt6vectorIS0_IciESaIS2_EEESt4lessIcESaIS0_IKcS5_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b082      	sub	sp, #8
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f001 fc62 	bl	800f678 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE3endEv>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3708      	adds	r7, #8
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}

0800ddbe <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEESA_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800ddbe:	b480      	push	{r7}
 800ddc0:	b083      	sub	sp, #12
 800ddc2:	af00      	add	r7, sp, #0
 800ddc4:	6078      	str	r0, [r7, #4]
 800ddc6:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681a      	ldr	r2, [r3, #0]
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	bf0c      	ite	eq
 800ddd4:	2301      	moveq	r3, #1
 800ddd6:	2300      	movne	r3, #0
 800ddd8:	b2db      	uxtb	r3, r3
 800ddda:	4618      	mov	r0, r3
 800dddc:	370c      	adds	r7, #12
 800ddde:	46bd      	mov	sp, r7
 800dde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde4:	4770      	bx	lr

0800dde6 <_ZNSt17_Rb_tree_iteratorISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800dde6:	b580      	push	{r7, lr}
 800dde8:	b082      	sub	sp, #8
 800ddea:	af00      	add	r7, sp, #0
 800ddec:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f017 fdb6 	bl	8025964 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800ddf8:	4602      	mov	r2, r0
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	601a      	str	r2, [r3, #0]
	return *this;
 800ddfe:	687b      	ldr	r3, [r7, #4]
      }
 800de00:	4618      	mov	r0, r3
 800de02:	3708      	adds	r7, #8
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}

0800de08 <_ZNKSt17_Rb_tree_iteratorISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800de08:	b580      	push	{r7, lr}
 800de0a:	b082      	sub	sp, #8
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	4618      	mov	r0, r3
 800de16:	f001 fc40 	bl	800f69a <_ZNSt13_Rb_tree_nodeISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEE9_M_valptrEv>
 800de1a:	4603      	mov	r3, r0
 800de1c:	4618      	mov	r0, r3
 800de1e:	3708      	adds	r7, #8
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}

0800de24 <_ZNKSt6vectorISt4pairIciESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800de24:	b480      	push	{r7}
 800de26:	b083      	sub	sp, #12
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	685a      	ldr	r2, [r3, #4]
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	1ad3      	subs	r3, r2, r3
 800de36:	10db      	asrs	r3, r3, #3
 800de38:	4618      	mov	r0, r3
 800de3a:	370c      	adds	r7, #12
 800de3c:	46bd      	mov	sp, r7
 800de3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de42:	4770      	bx	lr

0800de44 <_ZNSt6vectorISt4pairIciESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800de44:	b480      	push	{r7}
 800de46:	b083      	sub	sp, #12
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
 800de4c:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681a      	ldr	r2, [r3, #0]
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	00db      	lsls	r3, r3, #3
 800de56:	4413      	add	r3, r2
      }
 800de58:	4618      	mov	r0, r3
 800de5a:	370c      	adds	r7, #12
 800de5c:	46bd      	mov	sp, r7
 800de5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de62:	4770      	bx	lr

0800de64 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800de64:	b580      	push	{r7, lr}
 800de66:	b084      	sub	sp, #16
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800de6c:	687a      	ldr	r2, [r7, #4]
 800de6e:	f107 030c 	add.w	r3, r7, #12
 800de72:	4611      	mov	r1, r2
 800de74:	4618      	mov	r0, r3
 800de76:	f001 fc1e 	bl	800f6b6 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	4618      	mov	r0, r3
 800de7e:	3710      	adds	r7, #16
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}

0800de84 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800de84:	b580      	push	{r7, lr}
 800de86:	b084      	sub	sp, #16
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	1d1a      	adds	r2, r3, #4
 800de90:	f107 030c 	add.w	r3, r7, #12
 800de94:	4611      	mov	r1, r2
 800de96:	4618      	mov	r0, r3
 800de98:	f001 fc0d 	bl	800f6b6 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	4618      	mov	r0, r3
 800dea0:	3710      	adds	r7, #16
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}

0800dea6 <_ZSt7find_ifIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEZNS2_5Graph8DijkstraEccEUlRKS3_E_ET_SD_SD_T0_>:
    find_if(_InputIterator __first, _InputIterator __last,
 800dea6:	b580      	push	{r7, lr}
 800dea8:	b084      	sub	sp, #16
 800deaa:	af00      	add	r7, sp, #0
 800deac:	60f8      	str	r0, [r7, #12]
 800deae:	60b9      	str	r1, [r7, #8]
 800deb0:	607a      	str	r2, [r7, #4]
      return std::__find_if(__first, __last,
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f001 fc0f 	bl	800f6d6 <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb5Graph8DijkstraEccEUlRKNS2_4EdgeEE_EENS0_10_Iter_predIT_EES9_>
 800deb8:	4603      	mov	r3, r0
 800deba:	461a      	mov	r2, r3
 800debc:	68b9      	ldr	r1, [r7, #8]
 800debe:	68f8      	ldr	r0, [r7, #12]
 800dec0:	f001 fc1d 	bl	800f6fe <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_5Graph8DijkstraEccEUlRKS3_E_EEET_SG_SG_T0_>
 800dec4:	4603      	mov	r3, r0
    }
 800dec6:	4618      	mov	r0, r3
 800dec8:	3710      	adds	r7, #16
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}

0800dece <_ZSt8distanceIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEENSt15iterator_traitsIT_E15difference_typeESA_SA_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800dece:	b590      	push	{r4, r7, lr}
 800ded0:	b083      	sub	sp, #12
 800ded2:	af00      	add	r7, sp, #0
 800ded4:	6078      	str	r0, [r7, #4]
 800ded6:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
			     std::__iterator_category(__first));
 800ded8:	1d3b      	adds	r3, r7, #4
 800deda:	4618      	mov	r0, r3
 800dedc:	f001 fc25 	bl	800f72a <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSA_>
      return std::__distance(__first, __last,
 800dee0:	4622      	mov	r2, r4
 800dee2:	6839      	ldr	r1, [r7, #0]
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f001 fc2a 	bl	800f73e <_ZSt10__distanceIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEENSt15iterator_traitsIT_E15difference_typeESA_SA_St26random_access_iterator_tag>
 800deea:	4603      	mov	r3, r0
    }
 800deec:	4618      	mov	r0, r3
 800deee:	370c      	adds	r7, #12
 800def0:	46bd      	mov	sp, r7
 800def2:	bd90      	pop	{r4, r7, pc}

0800def4 <_ZSt9make_pairIRKcRiESt4pairINSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS4_INS5_IT0_E4typeEE6__typeEEOS6_OSB_>:
    make_pair(_T1&& __x, _T2&& __y)
 800def4:	b590      	push	{r4, r7, lr}
 800def6:	b085      	sub	sp, #20
 800def8:	af00      	add	r7, sp, #0
 800defa:	60f8      	str	r0, [r7, #12]
 800defc:	60b9      	str	r1, [r7, #8]
 800defe:	607a      	str	r2, [r7, #4]
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 800df00:	68b8      	ldr	r0, [r7, #8]
 800df02:	f001 f8c1 	bl	800f088 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>
 800df06:	4604      	mov	r4, r0
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f001 fc2b 	bl	800f764 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800df0e:	4603      	mov	r3, r0
 800df10:	461a      	mov	r2, r3
 800df12:	4621      	mov	r1, r4
 800df14:	68f8      	ldr	r0, [r7, #12]
 800df16:	f001 fc30 	bl	800f77a <_ZNSt4pairIciEC1IRiLb1EEERKcOT_>
    }
 800df1a:	68f8      	ldr	r0, [r7, #12]
 800df1c:	3714      	adds	r7, #20
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd90      	pop	{r4, r7, pc}

0800df22 <_ZSt9make_pairIRKciESt4pairINSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS3_INS4_IT0_E4typeEE6__typeEEOS5_OSA_>:
    make_pair(_T1&& __x, _T2&& __y)
 800df22:	b590      	push	{r4, r7, lr}
 800df24:	b085      	sub	sp, #20
 800df26:	af00      	add	r7, sp, #0
 800df28:	60f8      	str	r0, [r7, #12]
 800df2a:	60b9      	str	r1, [r7, #8]
 800df2c:	607a      	str	r2, [r7, #4]
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 800df2e:	68b8      	ldr	r0, [r7, #8]
 800df30:	f001 f8aa 	bl	800f088 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>
 800df34:	4604      	mov	r4, r0
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f7fa fe54 	bl	8008be4 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800df3c:	4603      	mov	r3, r0
 800df3e:	461a      	mov	r2, r3
 800df40:	4621      	mov	r1, r4
 800df42:	68f8      	ldr	r0, [r7, #12]
 800df44:	f001 fc2f 	bl	800f7a6 <_ZNSt4pairIciEC1IiLb1EEERKcOT_>
    }
 800df48:	68f8      	ldr	r0, [r7, #12]
 800df4a:	3714      	adds	r7, #20
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd90      	pop	{r4, r7, pc}

0800df50 <_ZNSt10__pair_getILj0EE5__getIKcSt4pairIfSt6vectorIS3_IciESaIS5_EEEEERT_RS3_IS9_T0_E>:
	__get(pair<_Tp1, _Tp2>& __pair) noexcept
 800df50:	b480      	push	{r7}
 800df52:	b083      	sub	sp, #12
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
	{ return __pair.first; }
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	4618      	mov	r0, r3
 800df5c:	370c      	adds	r7, #12
 800df5e:	46bd      	mov	sp, r7
 800df60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df64:	4770      	bx	lr

0800df66 <_ZNSt10__pair_getILj1EE5__getIKcSt4pairIfSt6vectorIS3_IciESaIS5_EEEEERT0_RS3_IT_S9_E>:
	__get(pair<_Tp1, _Tp2>& __pair) noexcept
 800df66:	b480      	push	{r7}
 800df68:	b083      	sub	sp, #12
 800df6a:	af00      	add	r7, sp, #0
 800df6c:	6078      	str	r0, [r7, #4]
	{ return __pair.second; }
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	3304      	adds	r3, #4
 800df72:	4618      	mov	r0, r3
 800df74:	370c      	adds	r7, #12
 800df76:	46bd      	mov	sp, r7
 800df78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7c:	4770      	bx	lr

0800df7e <_ZNSt6vectorISt4pairIciESaIS1_EEC1ERKS3_>:
      vector(const vector& __x)
 800df7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df80:	b085      	sub	sp, #20
 800df82:	af00      	add	r7, sp, #0
 800df84:	6078      	str	r0, [r7, #4]
 800df86:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800df88:	687c      	ldr	r4, [r7, #4]
 800df8a:	6838      	ldr	r0, [r7, #0]
 800df8c:	f7ff ff4a 	bl	800de24 <_ZNKSt6vectorISt4pairIciESaIS1_EE4sizeEv>
 800df90:	4605      	mov	r5, r0
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	4618      	mov	r0, r3
 800df96:	f001 f9e1 	bl	800f35c <_ZNKSt12_Vector_baseISt4pairIciESaIS1_EE19_M_get_Tp_allocatorEv>
 800df9a:	4602      	mov	r2, r0
 800df9c:	f107 030c 	add.w	r3, r7, #12
 800dfa0:	4611      	mov	r1, r2
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f001 fc15 	bl	800f7d2 <_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIciEES2_E17_S_select_on_copyERKS3_>
 800dfa8:	f107 030c 	add.w	r3, r7, #12
 800dfac:	461a      	mov	r2, r3
 800dfae:	4629      	mov	r1, r5
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	f001 fc1c 	bl	800f7ee <_ZNSt12_Vector_baseISt4pairIciESaIS1_EEC1EjRKS2_>
 800dfb6:	f107 030c 	add.w	r3, r7, #12
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7ff fbf2 	bl	800d7a4 <_ZNSaISt4pairIciEED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800dfc0:	6838      	ldr	r0, [r7, #0]
 800dfc2:	f001 f9ff 	bl	800f3c4 <_ZNKSt6vectorISt4pairIciESaIS1_EE5beginEv>
 800dfc6:	4605      	mov	r5, r0
 800dfc8:	6838      	ldr	r0, [r7, #0]
 800dfca:	f001 fa0b 	bl	800f3e4 <_ZNKSt6vectorISt4pairIciESaIS1_EE3endEv>
 800dfce:	4606      	mov	r6, r0
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f000 ff9d 	bl	800ef16 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE19_M_get_Tp_allocatorEv>
 800dfdc:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800dfde:	4622      	mov	r2, r4
 800dfe0:	4631      	mov	r1, r6
 800dfe2:	4628      	mov	r0, r5
 800dfe4:	f001 fc17 	bl	800f816 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIciESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
 800dfe8:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	605a      	str	r2, [r3, #4]
      }
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	4618      	mov	r0, r3
 800dff2:	3714      	adds	r7, #20
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dff8 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implD1Ev>:
      struct _Deque_impl
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b082      	sub	sp, #8
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	f7f5 fa29 	bl	8003458 <_ZNSaIfED1Ev>
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	4618      	mov	r0, r3
 800e00a:	3708      	adds	r7, #8
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}

0800e010 <_ZNSt11_Deque_baseIfSaIfEEC1Ev>:
      _Deque_base()
 800e010:	b580      	push	{r7, lr}
 800e012:	b082      	sub	sp, #8
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
      : _M_impl()
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	4618      	mov	r0, r3
 800e01c:	f001 fc0c 	bl	800f838 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 800e020:	2100      	movs	r1, #0
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f001 fc18 	bl	800f858 <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	4618      	mov	r0, r3
 800e02c:	3708      	adds	r7, #8
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}

0800e032 <_ZNSt11_Deque_baseIfSaIfEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 800e032:	b580      	push	{r7, lr}
 800e034:	b082      	sub	sp, #8
 800e036:	af00      	add	r7, sp, #0
 800e038:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d010      	beq.n	800e064 <_ZNSt11_Deque_baseIfSaIfEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800e04a:	3304      	adds	r3, #4
 800e04c:	461a      	mov	r2, r3
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f001 fc65 	bl	800f91e <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6819      	ldr	r1, [r3, #0]
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	685b      	ldr	r3, [r3, #4]
 800e05c:	461a      	mov	r2, r3
 800e05e:	6878      	ldr	r0, [r7, #4]
 800e060:	f001 fc78 	bl	800f954 <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>
    }
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	4618      	mov	r0, r3
 800e068:	f7ff ffc6 	bl	800dff8 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implD1Ev>
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	4618      	mov	r0, r3
 800e070:	3708      	adds	r7, #8
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}

0800e076 <_ZNSt5dequeIfSaIfEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 800e076:	b580      	push	{r7, lr}
 800e078:	b08a      	sub	sp, #40	; 0x28
 800e07a:	af00      	add	r7, sp, #0
 800e07c:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 800e07e:	f107 0308 	add.w	r3, r7, #8
 800e082:	6879      	ldr	r1, [r7, #4]
 800e084:	4618      	mov	r0, r3
 800e086:	f000 f871 	bl	800e16c <_ZNSt5dequeIfSaIfEE5beginEv>
 800e08a:	f107 0318 	add.w	r3, r7, #24
 800e08e:	6879      	ldr	r1, [r7, #4]
 800e090:	4618      	mov	r0, r3
 800e092:	f000 f87a 	bl	800e18a <_ZNSt5dequeIfSaIfEE3endEv>
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	4618      	mov	r0, r3
 800e09a:	f001 fc76 	bl	800f98a <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	f107 0218 	add.w	r2, r7, #24
 800e0a4:	f107 0108 	add.w	r1, r7, #8
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f001 fc79 	bl	800f9a0 <_ZNSt5dequeIfSaIfEE15_M_destroy_dataESt15_Deque_iteratorIfRfPfES5_RKS0_>
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f7ff ffbe 	bl	800e032 <_ZNSt11_Deque_baseIfSaIfEED1Ev>
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3728      	adds	r7, #40	; 0x28
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}

0800e0c0 <_ZNSt5dequeIfSaIfEE9push_backERKf>:
       *  element at the end of the %deque and assigns the given data
       *  to it.  Due to the nature of a %deque this operation can be
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b082      	sub	sp, #8
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
 800e0c8:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish._M_cur
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6a1b      	ldr	r3, [r3, #32]
 800e0d2:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d00c      	beq.n	800e0f2 <_ZNSt5dequeIfSaIfEE9push_backERKf+0x32>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	699b      	ldr	r3, [r3, #24]
 800e0de:	683a      	ldr	r2, [r7, #0]
 800e0e0:	4619      	mov	r1, r3
 800e0e2:	f7f5 faad 	bl	8003640 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	699b      	ldr	r3, [r3, #24]
 800e0ea:	1d1a      	adds	r2, r3, #4
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	619a      	str	r2, [r3, #24]
	  }
	else
	  _M_push_back_aux(__x);
      }
 800e0f0:	e003      	b.n	800e0fa <_ZNSt5dequeIfSaIfEE9push_backERKf+0x3a>
	  _M_push_back_aux(__x);
 800e0f2:	6839      	ldr	r1, [r7, #0]
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	f001 fc61 	bl	800f9bc <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_>
      }
 800e0fa:	bf00      	nop
 800e0fc:	3708      	adds	r7, #8
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}

0800e102 <_ZNKSt5dequeIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800e102:	b580      	push	{r7, lr}
 800e104:	b082      	sub	sp, #8
 800e106:	af00      	add	r7, sp, #0
 800e108:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	f103 0218 	add.w	r2, r3, #24
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	3308      	adds	r3, #8
 800e114:	4619      	mov	r1, r3
 800e116:	4610      	mov	r0, r2
 800e118:	f001 fc94 	bl	800fa44 <_ZStmiRKSt15_Deque_iteratorIfRfPfES4_>
 800e11c:	4603      	mov	r3, r0
 800e11e:	4618      	mov	r0, r3
 800e120:	3708      	adds	r7, #8
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}

0800e126 <_ZNSt5dequeIfSaIfEE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 800e126:	b580      	push	{r7, lr}
 800e128:	b082      	sub	sp, #8
 800e12a:	af00      	add	r7, sp, #0
 800e12c:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	691b      	ldr	r3, [r3, #16]
 800e136:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 800e138:	429a      	cmp	r2, r3
 800e13a:	d010      	beq.n	800e15e <_ZNSt5dequeIfSaIfEE9pop_frontEv+0x38>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	4618      	mov	r0, r3
 800e140:	f001 fc23 	bl	800f98a <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800e144:	4602      	mov	r2, r0
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	689b      	ldr	r3, [r3, #8]
 800e14a:	4619      	mov	r1, r3
 800e14c:	4610      	mov	r0, r2
 800e14e:	f001 fca5 	bl	800fa9c <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	689b      	ldr	r3, [r3, #8]
 800e156:	1d1a      	adds	r2, r3, #4
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 800e15c:	e002      	b.n	800e164 <_ZNSt5dequeIfSaIfEE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f001 fca8 	bl	800fab4 <_ZNSt5dequeIfSaIfEE16_M_pop_front_auxEv>
      }
 800e164:	bf00      	nop
 800e166:	3708      	adds	r7, #8
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}

0800e16c <_ZNSt5dequeIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b082      	sub	sp, #8
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
 800e174:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	3308      	adds	r3, #8
 800e17a:	4619      	mov	r1, r3
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f001 fcc1 	bl	800fb04 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	3708      	adds	r7, #8
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}

0800e18a <_ZNSt5dequeIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800e18a:	b580      	push	{r7, lr}
 800e18c:	b082      	sub	sp, #8
 800e18e:	af00      	add	r7, sp, #0
 800e190:	6078      	str	r0, [r7, #4]
 800e192:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	3318      	adds	r3, #24
 800e198:	4619      	mov	r1, r3
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f001 fcb2 	bl	800fb04 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>
 800e1a0:	6878      	ldr	r0, [r7, #4]
 800e1a2:	3708      	adds	r7, #8
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}

0800e1a8 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 800e1a8:	b480      	push	{r7}
 800e1aa:	b083      	sub	sp, #12
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	370c      	adds	r7, #12
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1bc:	4770      	bx	lr

0800e1be <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_>:
   *  @return  The final sum.
   */
  template<typename _InputIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _Tp
    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)
 800e1be:	b580      	push	{r7, lr}
 800e1c0:	ed2d 8b02 	vpush	{d8}
 800e1c4:	b084      	sub	sp, #16
 800e1c6:	af00      	add	r7, sp, #0
 800e1c8:	60f8      	str	r0, [r7, #12]
 800e1ca:	60b9      	str	r1, [r7, #8]
 800e1cc:	ed87 0a01 	vstr	s0, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      for (; __first != __last; ++__first)
 800e1d0:	e013      	b.n	800e1fa <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_+0x3c>
	__init = _GLIBCXX_MOVE_IF_20(__init) + *__first;
 800e1d2:	1d3b      	adds	r3, r7, #4
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f7ff ffe7 	bl	800e1a8 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	ed93 8a00 	vldr	s16, [r3]
 800e1e0:	68f8      	ldr	r0, [r7, #12]
 800e1e2:	f001 fcde 	bl	800fba2 <_ZNKSt15_Deque_iteratorIfRfPfEdeEv>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	edd3 7a00 	vldr	s15, [r3]
 800e1ec:	ee78 7a27 	vadd.f32	s15, s16, s15
 800e1f0:	edc7 7a01 	vstr	s15, [r7, #4]
      for (; __first != __last; ++__first)
 800e1f4:	68f8      	ldr	r0, [r7, #12]
 800e1f6:	f001 fcb5 	bl	800fb64 <_ZNSt15_Deque_iteratorIfRfPfEppEv>
 800e1fa:	68b9      	ldr	r1, [r7, #8]
 800e1fc:	68f8      	ldr	r0, [r7, #12]
 800e1fe:	f001 fc9d 	bl	800fb3c <_ZSteqRKSt15_Deque_iteratorIfRfPfES4_>
 800e202:	4603      	mov	r3, r0
 800e204:	f083 0301 	eor.w	r3, r3, #1
 800e208:	b2db      	uxtb	r3, r3
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d1e1      	bne.n	800e1d2 <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_+0x14>
      return __init;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	ee07 3a90 	vmov	s15, r3
    }
 800e214:	eeb0 0a67 	vmov.f32	s0, s15
 800e218:	3710      	adds	r7, #16
 800e21a:	46bd      	mov	sp, r7
 800e21c:	ecbd 8b02 	vpop	{d8}
 800e220:	bd80      	pop	{r7, pc}

0800e222 <_ZSt3minIfET_St16initializer_listIS0_E>:
    min(initializer_list<_Tp> __l)
 800e222:	b590      	push	{r4, r7, lr}
 800e224:	b083      	sub	sp, #12
 800e226:	af00      	add	r7, sp, #0
 800e228:	463b      	mov	r3, r7
 800e22a:	e883 0003 	stmia.w	r3, {r0, r1}
    { return *std::min_element(__l.begin(), __l.end()); }
 800e22e:	463b      	mov	r3, r7
 800e230:	4618      	mov	r0, r3
 800e232:	f001 fcc2 	bl	800fbba <_ZNKSt16initializer_listIfE5beginEv>
 800e236:	4604      	mov	r4, r0
 800e238:	463b      	mov	r3, r7
 800e23a:	4618      	mov	r0, r3
 800e23c:	f001 fcc9 	bl	800fbd2 <_ZNKSt16initializer_listIfE3endEv>
 800e240:	4603      	mov	r3, r0
 800e242:	4619      	mov	r1, r3
 800e244:	4620      	mov	r0, r4
 800e246:	f001 fcd6 	bl	800fbf6 <_ZSt11min_elementIPKfET_S2_S2_>
 800e24a:	4603      	mov	r3, r0
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	ee07 3a90 	vmov	s15, r3
 800e252:	eeb0 0a67 	vmov.f32	s0, s15
 800e256:	370c      	adds	r7, #12
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd90      	pop	{r4, r7, pc}

0800e25c <_ZNSt6vectorIcSaIcEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b082      	sub	sp, #8
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	4619      	mov	r1, r3
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f001 fcd4 	bl	800fc18 <_ZNSt6vectorIcSaIcEE15_M_erase_at_endEPc>
 800e270:	bf00      	nop
 800e272:	3708      	adds	r7, #8
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}

0800e278 <_ZNSt6vectorIcSaIcEE9push_backEOc>:
      push_back(value_type&& __x)
 800e278:	b580      	push	{r7, lr}
 800e27a:	b082      	sub	sp, #8
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800e282:	6838      	ldr	r0, [r7, #0]
 800e284:	f001 fce8 	bl	800fc58 <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>
 800e288:	4603      	mov	r3, r0
 800e28a:	4619      	mov	r1, r3
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f001 fcee 	bl	800fc6e <_ZNSt6vectorIcSaIcEE12emplace_backIJcEEERcDpOT_>
 800e292:	bf00      	nop
 800e294:	3708      	adds	r7, #8
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}

0800e29a <_ZNSt6vectorIcSaIcEE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
 800e29a:	b580      	push	{r7, lr}
 800e29c:	b082      	sub	sp, #8
 800e29e:	af00      	add	r7, sp, #0
 800e2a0:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f001 fd12 	bl	800fcd2 <_ZNKSt6vectorIcSaIcEE11_M_data_ptrIcEEPT_S4_>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	3708      	adds	r7, #8
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bd80      	pop	{r7, pc}

0800e2b8 <_ZNKSt6vectorIcSaIcEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800e2b8:	b480      	push	{r7}
 800e2ba:	b083      	sub	sp, #12
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	685a      	ldr	r2, [r3, #4]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	1ad3      	subs	r3, r2, r3
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	370c      	adds	r7, #12
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d4:	4770      	bx	lr

0800e2d6 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 800e2d6:	b580      	push	{r7, lr}
 800e2d8:	b082      	sub	sp, #8
 800e2da:	af00      	add	r7, sp, #0
 800e2dc:	6078      	str	r0, [r7, #4]
 800e2de:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 800e2e0:	6838      	ldr	r0, [r7, #0]
 800e2e2:	f7fa fd35 	bl	8008d50 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	681a      	ldr	r2, [r3, #0]
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	601a      	str	r2, [r3, #0]
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	3708      	adds	r7, #8
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}

0800e2f8 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>:
	insert(const_iterator __position, _InputIterator __first,
 800e2f8:	b590      	push	{r4, r7, lr}
 800e2fa:	b08b      	sub	sp, #44	; 0x2c
 800e2fc:	af02      	add	r7, sp, #8
 800e2fe:	60f8      	str	r0, [r7, #12]
 800e300:	60b9      	str	r1, [r7, #8]
 800e302:	607a      	str	r2, [r7, #4]
 800e304:	603b      	str	r3, [r7, #0]
	  difference_type __offset = __position - cbegin();
 800e306:	68f8      	ldr	r0, [r7, #12]
 800e308:	f001 fcef 	bl	800fcea <_ZNKSt6vectorIcSaIcEE6cbeginEv>
 800e30c:	4603      	mov	r3, r0
 800e30e:	613b      	str	r3, [r7, #16]
 800e310:	f107 0210 	add.w	r2, r7, #16
 800e314:	f107 0308 	add.w	r3, r7, #8
 800e318:	4611      	mov	r1, r2
 800e31a:	4618      	mov	r0, r3
 800e31c:	f001 fcf5 	bl	800fd0a <_ZN9__gnu_cxxmiIPKcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 800e320:	61f8      	str	r0, [r7, #28]
	  _M_insert_dispatch(begin() + __offset,
 800e322:	68f8      	ldr	r0, [r7, #12]
 800e324:	f7ff fb81 	bl	800da2a <_ZNSt6vectorIcSaIcEE5beginEv>
 800e328:	4603      	mov	r3, r0
 800e32a:	617b      	str	r3, [r7, #20]
 800e32c:	f107 0314 	add.w	r3, r7, #20
 800e330:	69f9      	ldr	r1, [r7, #28]
 800e332:	4618      	mov	r0, r3
 800e334:	f001 fcfd 	bl	800fd32 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEplEi>
 800e338:	4601      	mov	r1, r0
 800e33a:	f88d 4000 	strb.w	r4, [sp]
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	687a      	ldr	r2, [r7, #4]
 800e342:	68f8      	ldr	r0, [r7, #12]
 800e344:	f001 fd0c 	bl	800fd60 <_ZNSt6vectorIcSaIcEE18_M_insert_dispatchIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St12__false_type>
	  return begin() + __offset;
 800e348:	68f8      	ldr	r0, [r7, #12]
 800e34a:	f7ff fb6e 	bl	800da2a <_ZNSt6vectorIcSaIcEE5beginEv>
 800e34e:	4603      	mov	r3, r0
 800e350:	61bb      	str	r3, [r7, #24]
 800e352:	f107 0318 	add.w	r3, r7, #24
 800e356:	69f9      	ldr	r1, [r7, #28]
 800e358:	4618      	mov	r0, r3
 800e35a:	f001 fcea 	bl	800fd32 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEplEi>
 800e35e:	4603      	mov	r3, r0
	}
 800e360:	4618      	mov	r0, r3
 800e362:	3724      	adds	r7, #36	; 0x24
 800e364:	46bd      	mov	sp, r7
 800e366:	bd90      	pop	{r4, r7, pc}

0800e368 <_ZSt7reverseIPbEvT_S1_>:
    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
 800e368:	b5b0      	push	{r4, r5, r7, lr}
 800e36a:	b082      	sub	sp, #8
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
 800e370:	6039      	str	r1, [r7, #0]
      std::__reverse(__first, __last, std::__iterator_category(__first));
 800e372:	687c      	ldr	r4, [r7, #4]
 800e374:	1d3b      	adds	r3, r7, #4
 800e376:	4618      	mov	r0, r3
 800e378:	f001 fd0a 	bl	800fd90 <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 800e37c:	462a      	mov	r2, r5
 800e37e:	6839      	ldr	r1, [r7, #0]
 800e380:	4620      	mov	r0, r4
 800e382:	f001 fd0f 	bl	800fda4 <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag>
    }
 800e386:	bf00      	nop
 800e388:	3708      	adds	r7, #8
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bdb0      	pop	{r4, r5, r7, pc}

0800e38e <_ZSt12__miter_baseIPKcET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 800e38e:	b480      	push	{r7}
 800e390:	b083      	sub	sp, #12
 800e392:	af00      	add	r7, sp, #0
 800e394:	6078      	str	r0, [r7, #4]
    { return __it; }
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	4618      	mov	r0, r3
 800e39a:	370c      	adds	r7, #12
 800e39c:	46bd      	mov	sp, r7
 800e39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a2:	4770      	bx	lr

0800e3a4 <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800e3a4:	b5b0      	push	{r4, r5, r7, lr}
 800e3a6:	b084      	sub	sp, #16
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	60f8      	str	r0, [r7, #12]
 800e3ac:	60b9      	str	r1, [r7, #8]
 800e3ae:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800e3b0:	68f8      	ldr	r0, [r7, #12]
 800e3b2:	f001 fd18 	bl	800fde6 <_ZSt12__niter_baseIPKcET_S2_>
 800e3b6:	4604      	mov	r4, r0
 800e3b8:	68b8      	ldr	r0, [r7, #8]
 800e3ba:	f001 fd14 	bl	800fde6 <_ZSt12__niter_baseIPKcET_S2_>
 800e3be:	4605      	mov	r5, r0
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f001 fd1a 	bl	800fdfc <_ZSt12__niter_baseIPcET_S1_>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	461a      	mov	r2, r3
 800e3cc:	4629      	mov	r1, r5
 800e3ce:	4620      	mov	r0, r4
 800e3d0:	f001 fd1f 	bl	800fe12 <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>
 800e3d4:	4602      	mov	r2, r0
 800e3d6:	1d3b      	adds	r3, r7, #4
 800e3d8:	4611      	mov	r1, r2
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f001 fd29 	bl	800fe32 <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 800e3e0:	4603      	mov	r3, r0
    }
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	3710      	adds	r7, #16
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bdb0      	pop	{r4, r5, r7, pc}

0800e3ea <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800e3ea:	b480      	push	{r7}
 800e3ec:	b083      	sub	sp, #12
 800e3ee:	af00      	add	r7, sp, #0
 800e3f0:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	370c      	adds	r7, #12
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fc:	4770      	bx	lr

0800e3fe <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800e3fe:	b590      	push	{r4, r7, lr}
 800e400:	b083      	sub	sp, #12
 800e402:	af00      	add	r7, sp, #0
 800e404:	6078      	str	r0, [r7, #4]
 800e406:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f7f5 faa8 	bl	800395e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800e40e:	4603      	mov	r3, r0
 800e410:	681c      	ldr	r4, [r3, #0]
 800e412:	6838      	ldr	r0, [r7, #0]
 800e414:	f7f5 faa3 	bl	800395e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800e418:	4603      	mov	r3, r0
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	429c      	cmp	r4, r3
 800e41e:	bf0c      	ite	eq
 800e420:	2301      	moveq	r3, #1
 800e422:	2300      	movne	r3, #0
 800e424:	b2db      	uxtb	r3, r3
 800e426:	4618      	mov	r0, r3
 800e428:	370c      	adds	r7, #12
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd90      	pop	{r4, r7, pc}

0800e42e <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800e42e:	b5b0      	push	{r4, r5, r7, lr}
 800e430:	b084      	sub	sp, #16
 800e432:	af00      	add	r7, sp, #0
 800e434:	60f8      	str	r0, [r7, #12]
 800e436:	60b9      	str	r1, [r7, #8]
 800e438:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 800e43a:	f107 0208 	add.w	r2, r7, #8
 800e43e:	f107 030c 	add.w	r3, r7, #12
 800e442:	4611      	mov	r1, r2
 800e444:	4618      	mov	r0, r3
 800e446:	f7ff ffda 	bl	800e3fe <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800e44a:	4603      	mov	r3, r0
 800e44c:	f083 0301 	eor.w	r3, r3, #1
 800e450:	b2db      	uxtb	r3, r3
 800e452:	2b00      	cmp	r3, #0
 800e454:	d017      	beq.n	800e486 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x58>
				std::__lg(__last - __first) * 2,
 800e456:	f107 020c 	add.w	r2, r7, #12
 800e45a:	f107 0308 	add.w	r3, r7, #8
 800e45e:	4611      	mov	r1, r2
 800e460:	4618      	mov	r0, r3
 800e462:	f7f5 fa3f 	bl	80038e4 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800e466:	4603      	mov	r3, r0
 800e468:	4618      	mov	r0, r3
 800e46a:	f7f6 f912 	bl	8004692 <_ZSt4__lgi>
 800e46e:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 800e470:	005a      	lsls	r2, r3, #1
 800e472:	462b      	mov	r3, r5
 800e474:	68b9      	ldr	r1, [r7, #8]
 800e476:	68f8      	ldr	r0, [r7, #12]
 800e478:	f001 fce7 	bl	800fe4a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 800e47c:	4622      	mov	r2, r4
 800e47e:	68b9      	ldr	r1, [r7, #8]
 800e480:	68f8      	ldr	r0, [r7, #12]
 800e482:	f001 fd19 	bl	800feb8 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 800e486:	bf00      	nop
 800e488:	3710      	adds	r7, #16
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bdb0      	pop	{r4, r5, r7, pc}

0800e48e <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEfEUlbE_ET_S4_S4_T0_>:
    find_if_not(_InputIterator __first, _InputIterator __last,
 800e48e:	b590      	push	{r4, r7, lr}
 800e490:	b085      	sub	sp, #20
 800e492:	af00      	add	r7, sp, #0
 800e494:	60f8      	str	r0, [r7, #12]
 800e496:	60b9      	str	r1, [r7, #8]
 800e498:	713a      	strb	r2, [r7, #4]
      return std::__find_if_not(__first, __last,
 800e49a:	4618      	mov	r0, r3
 800e49c:	f001 fd44 	bl	800ff28 <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEfEUlbE_EENS0_10_Iter_predIT_EES6_>
 800e4a0:	4622      	mov	r2, r4
 800e4a2:	68b9      	ldr	r1, [r7, #8]
 800e4a4:	68f8      	ldr	r0, [r7, #12]
 800e4a6:	f001 fd52 	bl	800ff4e <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_>
 800e4aa:	4603      	mov	r3, r0
    }
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	3714      	adds	r7, #20
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	bd90      	pop	{r4, r7, pc}

0800e4b4 <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEfEUlbE0_ET_S4_S4_T0_>:
    find_if_not(_InputIterator __first, _InputIterator __last,
 800e4b4:	b590      	push	{r4, r7, lr}
 800e4b6:	b085      	sub	sp, #20
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	60f8      	str	r0, [r7, #12]
 800e4bc:	60b9      	str	r1, [r7, #8]
 800e4be:	713a      	strb	r2, [r7, #4]
      return std::__find_if_not(__first, __last,
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f001 fd5e 	bl	800ff82 <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEfEUlbE0_EENS0_10_Iter_predIT_EES6_>
 800e4c6:	4622      	mov	r2, r4
 800e4c8:	68b9      	ldr	r1, [r7, #8]
 800e4ca:	68f8      	ldr	r0, [r7, #12]
 800e4cc:	f001 fd6c 	bl	800ffa8 <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_>
 800e4d0:	4603      	mov	r3, r0
    }
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3714      	adds	r7, #20
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd90      	pop	{r4, r7, pc}

0800e4da <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800e4da:	b580      	push	{r7, lr}
 800e4dc:	b082      	sub	sp, #8
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	6078      	str	r0, [r7, #4]
 800e4e2:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6839      	ldr	r1, [r7, #0]
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f001 fd77 	bl	800ffdc <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	3708      	adds	r7, #8
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}

0800e4f6 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800e4f6:	b580      	push	{r7, lr}
 800e4f8:	b084      	sub	sp, #16
 800e4fa:	af00      	add	r7, sp, #0
 800e4fc:	60f8      	str	r0, [r7, #12]
 800e4fe:	60b9      	str	r1, [r7, #8]
 800e500:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	6879      	ldr	r1, [r7, #4]
 800e506:	4618      	mov	r0, r3
 800e508:	f001 fd75 	bl	800fff6 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 800e50c:	68b9      	ldr	r1, [r7, #8]
 800e50e:	68f8      	ldr	r0, [r7, #12]
 800e510:	f001 fd83 	bl	801001a <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	4618      	mov	r0, r3
 800e518:	3710      	adds	r7, #16
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}

0800e51e <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800e51e:	b580      	push	{r7, lr}
 800e520:	b084      	sub	sp, #16
 800e522:	af00      	add	r7, sp, #0
 800e524:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800e526:	687a      	ldr	r2, [r7, #4]
 800e528:	f107 030c 	add.w	r3, r7, #12
 800e52c:	4611      	mov	r1, r2
 800e52e:	4618      	mov	r0, r3
 800e530:	f001 fd8e 	bl	8010050 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	4618      	mov	r0, r3
 800e538:	3710      	adds	r7, #16
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd80      	pop	{r7, pc}

0800e53e <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800e53e:	b580      	push	{r7, lr}
 800e540:	b084      	sub	sp, #16
 800e542:	af00      	add	r7, sp, #0
 800e544:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	1d1a      	adds	r2, r3, #4
 800e54a:	f107 030c 	add.w	r3, r7, #12
 800e54e:	4611      	mov	r1, r2
 800e550:	4618      	mov	r0, r3
 800e552:	f001 fd7d 	bl	8010050 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	4618      	mov	r0, r3
 800e55a:	3710      	adds	r7, #16
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd80      	pop	{r7, pc}

0800e560 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800e560:	b580      	push	{r7, lr}
 800e562:	b084      	sub	sp, #16
 800e564:	af00      	add	r7, sp, #0
 800e566:	60f8      	str	r0, [r7, #12]
 800e568:	60b9      	str	r1, [r7, #8]
 800e56a:	607a      	str	r2, [r7, #4]
 800e56c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800e56e:	687a      	ldr	r2, [r7, #4]
 800e570:	68b9      	ldr	r1, [r7, #8]
 800e572:	68f8      	ldr	r0, [r7, #12]
 800e574:	f001 fd7c 	bl	8010070 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 800e578:	4603      	mov	r3, r0
 800e57a:	4618      	mov	r0, r3
 800e57c:	3710      	adds	r7, #16
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}

0800e582 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>:
    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 800e582:	b480      	push	{r7}
 800e584:	b083      	sub	sp, #12
 800e586:	af00      	add	r7, sp, #0
 800e588:	6078      	str	r0, [r7, #4]
 800e58a:	6039      	str	r1, [r7, #0]
    }
 800e58c:	bf00      	nop
 800e58e:	370c      	adds	r7, #12
 800e590:	46bd      	mov	sp, r7
 800e592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e596:	4770      	bx	lr

0800e598 <_ZNKSt6vectorIfSaIfEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 800e598:	b480      	push	{r7}
 800e59a:	b083      	sub	sp, #12
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	1ad3      	subs	r3, r2, r3
 800e5aa:	109b      	asrs	r3, r3, #2
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	370c      	adds	r7, #12
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b6:	4770      	bx	lr

0800e5b8 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>:
	_M_allocate_and_copy(size_type __n,
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b086      	sub	sp, #24
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	60f8      	str	r0, [r7, #12]
 800e5c0:	60b9      	str	r1, [r7, #8]
 800e5c2:	607a      	str	r2, [r7, #4]
 800e5c4:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	68b9      	ldr	r1, [r7, #8]
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f7f5 f99f 	bl	800390e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 800e5d0:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f7f4 ffe4 	bl	80035a2 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800e5da:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 800e5dc:	697a      	ldr	r2, [r7, #20]
 800e5de:	6839      	ldr	r1, [r7, #0]
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f7ff ffbd 	bl	800e560 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
	      return __result;
 800e5e6:	697b      	ldr	r3, [r7, #20]
	}
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	3718      	adds	r7, #24
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bd80      	pop	{r7, pc}

0800e5f0 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 800e5f0:	b590      	push	{r4, r7, lr}
 800e5f2:	b085      	sub	sp, #20
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	60f8      	str	r0, [r7, #12]
 800e5f8:	60b9      	str	r1, [r7, #8]
 800e5fa:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800e5fc:	68f8      	ldr	r0, [r7, #12]
 800e5fe:	f001 fd49 	bl	8010094 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 800e602:	4604      	mov	r4, r0
 800e604:	68b8      	ldr	r0, [r7, #8]
 800e606:	f001 fd45 	bl	8010094 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 800e60a:	4603      	mov	r3, r0
 800e60c:	687a      	ldr	r2, [r7, #4]
 800e60e:	4619      	mov	r1, r3
 800e610:	4620      	mov	r0, r4
 800e612:	f001 fd4a 	bl	80100aa <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>
 800e616:	4603      	mov	r3, r0
    }
 800e618:	4618      	mov	r0, r3
 800e61a:	3714      	adds	r7, #20
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd90      	pop	{r4, r7, pc}

0800e620 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800e620:	b580      	push	{r7, lr}
 800e622:	b084      	sub	sp, #16
 800e624:	af00      	add	r7, sp, #0
 800e626:	60f8      	str	r0, [r7, #12]
 800e628:	60b9      	str	r1, [r7, #8]
 800e62a:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800e62c:	68b9      	ldr	r1, [r7, #8]
 800e62e:	68f8      	ldr	r0, [r7, #12]
 800e630:	f001 fd5c 	bl	80100ec <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>
    }
 800e634:	bf00      	nop
 800e636:	3710      	adds	r7, #16
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}

0800e63c <_ZSt12__miter_baseIPfET_S1_>:
    __miter_base(_Iterator __it)
 800e63c:	b480      	push	{r7}
 800e63e:	b083      	sub	sp, #12
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
    { return __it; }
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	4618      	mov	r0, r3
 800e648:	370c      	adds	r7, #12
 800e64a:	46bd      	mov	sp, r7
 800e64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e650:	4770      	bx	lr

0800e652 <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800e652:	b5b0      	push	{r4, r5, r7, lr}
 800e654:	b084      	sub	sp, #16
 800e656:	af00      	add	r7, sp, #0
 800e658:	60f8      	str	r0, [r7, #12]
 800e65a:	60b9      	str	r1, [r7, #8]
 800e65c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800e65e:	68f8      	ldr	r0, [r7, #12]
 800e660:	f7f5 fada 	bl	8003c18 <_ZSt12__niter_baseIPfET_S1_>
 800e664:	4604      	mov	r4, r0
 800e666:	68b8      	ldr	r0, [r7, #8]
 800e668:	f7f5 fad6 	bl	8003c18 <_ZSt12__niter_baseIPfET_S1_>
 800e66c:	4605      	mov	r5, r0
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	4618      	mov	r0, r3
 800e672:	f7f5 fad1 	bl	8003c18 <_ZSt12__niter_baseIPfET_S1_>
 800e676:	4603      	mov	r3, r0
 800e678:	461a      	mov	r2, r3
 800e67a:	4629      	mov	r1, r5
 800e67c:	4620      	mov	r0, r4
 800e67e:	f001 fd4b 	bl	8010118 <_ZSt14__copy_move_a1ILb0EPfS0_ET1_T0_S2_S1_>
 800e682:	4602      	mov	r2, r0
 800e684:	1d3b      	adds	r3, r7, #4
 800e686:	4611      	mov	r1, r2
 800e688:	4618      	mov	r0, r3
 800e68a:	f001 fd55 	bl	8010138 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 800e68e:	4603      	mov	r3, r0
    }
 800e690:	4618      	mov	r0, r3
 800e692:	3710      	adds	r7, #16
 800e694:	46bd      	mov	sp, r7
 800e696:	bdb0      	pop	{r4, r5, r7, pc}

0800e698 <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800e698:	b580      	push	{r7, lr}
 800e69a:	b084      	sub	sp, #16
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	60f8      	str	r0, [r7, #12]
 800e6a0:	60b9      	str	r1, [r7, #8]
 800e6a2:	607a      	str	r2, [r7, #4]
 800e6a4:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800e6a6:	687a      	ldr	r2, [r7, #4]
 800e6a8:	68b9      	ldr	r1, [r7, #8]
 800e6aa:	68f8      	ldr	r0, [r7, #12]
 800e6ac:	f001 fd50 	bl	8010150 <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	3710      	adds	r7, #16
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}

0800e6ba <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800e6ba:	b580      	push	{r7, lr}
 800e6bc:	b082      	sub	sp, #8
 800e6be:	af00      	add	r7, sp, #0
 800e6c0:	6078      	str	r0, [r7, #4]
 800e6c2:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	6839      	ldr	r1, [r7, #0]
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f001 fd53 	bl	8010174 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>
 800e6ce:	6878      	ldr	r0, [r7, #4]
 800e6d0:	3708      	adds	r7, #8
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}

0800e6d6 <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800e6d6:	b480      	push	{r7}
 800e6d8:	b083      	sub	sp, #12
 800e6da:	af00      	add	r7, sp, #0
 800e6dc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	370c      	adds	r7, #12
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ea:	4770      	bx	lr

0800e6ec <_ZNSt12_Vector_baseIcSaIcEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b084      	sub	sp, #16
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	60f8      	str	r0, [r7, #12]
 800e6f4:	60b9      	str	r1, [r7, #8]
 800e6f6:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	6879      	ldr	r1, [r7, #4]
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f001 fd46 	bl	801018e <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 800e702:	68b9      	ldr	r1, [r7, #8]
 800e704:	68f8      	ldr	r0, [r7, #12]
 800e706:	f001 fd54 	bl	80101b2 <_ZNSt12_Vector_baseIcSaIcEE17_M_create_storageEj>
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	4618      	mov	r0, r3
 800e70e:	3710      	adds	r7, #16
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}

0800e714 <_ZNKSt6vectorIcSaIcEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800e714:	b580      	push	{r7, lr}
 800e716:	b084      	sub	sp, #16
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800e71c:	687a      	ldr	r2, [r7, #4]
 800e71e:	f107 030c 	add.w	r3, r7, #12
 800e722:	4611      	mov	r1, r2
 800e724:	4618      	mov	r0, r3
 800e726:	f001 fd5e 	bl	80101e6 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	4618      	mov	r0, r3
 800e72e:	3710      	adds	r7, #16
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}

0800e734 <_ZNKSt6vectorIcSaIcEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800e734:	b580      	push	{r7, lr}
 800e736:	b084      	sub	sp, #16
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	1d1a      	adds	r2, r3, #4
 800e740:	f107 030c 	add.w	r3, r7, #12
 800e744:	4611      	mov	r1, r2
 800e746:	4618      	mov	r0, r3
 800e748:	f001 fd4d 	bl	80101e6 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	4618      	mov	r0, r3
 800e750:	3710      	adds	r7, #16
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}

0800e756 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800e756:	b480      	push	{r7}
 800e758:	b083      	sub	sp, #12
 800e75a:	af00      	add	r7, sp, #0
 800e75c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	4618      	mov	r0, r3
 800e762:	370c      	adds	r7, #12
 800e764:	46bd      	mov	sp, r7
 800e766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76a:	4770      	bx	lr

0800e76c <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPccET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b084      	sub	sp, #16
 800e770:	af00      	add	r7, sp, #0
 800e772:	60f8      	str	r0, [r7, #12]
 800e774:	60b9      	str	r1, [r7, #8]
 800e776:	607a      	str	r2, [r7, #4]
 800e778:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800e77a:	687a      	ldr	r2, [r7, #4]
 800e77c:	68b9      	ldr	r1, [r7, #8]
 800e77e:	68f8      	ldr	r0, [r7, #12]
 800e780:	f001 fd41 	bl	8010206 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>
 800e784:	4603      	mov	r3, r0
 800e786:	4618      	mov	r0, r3
 800e788:	3710      	adds	r7, #16
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}

0800e78e <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800e78e:	b580      	push	{r7, lr}
 800e790:	b084      	sub	sp, #16
 800e792:	af00      	add	r7, sp, #0
 800e794:	60f8      	str	r0, [r7, #12]
 800e796:	60b9      	str	r1, [r7, #8]
 800e798:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800e79a:	68b9      	ldr	r1, [r7, #8]
 800e79c:	68f8      	ldr	r0, [r7, #12]
 800e79e:	f001 fd44 	bl	801022a <_ZSt8_DestroyIPcEvT_S1_>
    }
 800e7a2:	bf00      	nop
 800e7a4:	3710      	adds	r7, #16
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}

0800e7aa <_ZNSaIN3jlb4EdgeEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800e7aa:	b580      	push	{r7, lr}
 800e7ac:	b082      	sub	sp, #8
 800e7ae:	af00      	add	r7, sp, #0
 800e7b0:	6078      	str	r0, [r7, #4]
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f001 fd4f 	bl	8010256 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1Ev>
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	3708      	adds	r7, #8
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}

0800e7c2 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800e7c2:	b480      	push	{r7}
 800e7c4:	b083      	sub	sp, #12
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	601a      	str	r2, [r3, #0]
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	605a      	str	r2, [r3, #4]
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2200      	movs	r2, #0
 800e7da:	609a      	str	r2, [r3, #8]
	{ }
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	4618      	mov	r0, r3
 800e7e0:	370c      	adds	r7, #12
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e8:	4770      	bx	lr

0800e7ea <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800e7ea:	b580      	push	{r7, lr}
 800e7ec:	b084      	sub	sp, #16
 800e7ee:	af00      	add	r7, sp, #0
 800e7f0:	60f8      	str	r0, [r7, #12]
 800e7f2:	60b9      	str	r1, [r7, #8]
 800e7f4:	607a      	str	r2, [r7, #4]
	if (__p)
 800e7f6:	68bb      	ldr	r3, [r7, #8]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d005      	beq.n	800e808 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	687a      	ldr	r2, [r7, #4]
 800e800:	68b9      	ldr	r1, [r7, #8]
 800e802:	4618      	mov	r0, r3
 800e804:	f001 fd32 	bl	801026c <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j>
      }
 800e808:	bf00      	nop
 800e80a:	3710      	adds	r7, #16
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}

0800e810 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800e810:	b480      	push	{r7}
 800e812:	b083      	sub	sp, #12
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	4618      	mov	r0, r3
 800e81c:	370c      	adds	r7, #12
 800e81e:	46bd      	mov	sp, r7
 800e820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e824:	4770      	bx	lr

0800e826 <_ZSt8_DestroyIPN3jlb4EdgeES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800e826:	b580      	push	{r7, lr}
 800e828:	b084      	sub	sp, #16
 800e82a:	af00      	add	r7, sp, #0
 800e82c:	60f8      	str	r0, [r7, #12]
 800e82e:	60b9      	str	r1, [r7, #8]
 800e830:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800e832:	68b9      	ldr	r1, [r7, #8]
 800e834:	68f8      	ldr	r0, [r7, #12]
 800e836:	f001 fd38 	bl	80102aa <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_>
    }
 800e83a:	bf00      	nop
 800e83c:	3710      	adds	r7, #16
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}

0800e842 <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800e842:	b480      	push	{r7}
 800e844:	b083      	sub	sp, #12
 800e846:	af00      	add	r7, sp, #0
 800e848:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	4618      	mov	r0, r3
 800e84e:	370c      	adds	r7, #12
 800e850:	46bd      	mov	sp, r7
 800e852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e856:	4770      	bx	lr

0800e858 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800e858:	b5b0      	push	{r4, r5, r7, lr}
 800e85a:	b082      	sub	sp, #8
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
 800e860:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	685a      	ldr	r2, [r3, #4]
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	689b      	ldr	r3, [r3, #8]
 800e86a:	429a      	cmp	r2, r3
 800e86c:	d012      	beq.n	800e894 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800e86e:	687c      	ldr	r4, [r7, #4]
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	685d      	ldr	r5, [r3, #4]
 800e874:	6838      	ldr	r0, [r7, #0]
 800e876:	f001 fd2e 	bl	80102d6 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800e87a:	4603      	mov	r3, r0
 800e87c:	461a      	mov	r2, r3
 800e87e:	4629      	mov	r1, r5
 800e880:	4620      	mov	r0, r4
 800e882:	f001 fd8a 	bl	801039a <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	685b      	ldr	r3, [r3, #4]
 800e88a:	f103 0218 	add.w	r2, r3, #24
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	605a      	str	r2, [r3, #4]
 800e892:	e00c      	b.n	800e8ae <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f7ff faf5 	bl	800de84 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 800e89a:	4604      	mov	r4, r0
 800e89c:	6838      	ldr	r0, [r7, #0]
 800e89e:	f001 fd1a 	bl	80102d6 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	461a      	mov	r2, r3
 800e8a6:	4621      	mov	r1, r4
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f001 fd89 	bl	80103c0 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800e8ae:	6878      	ldr	r0, [r7, #4]
 800e8b0:	f001 fe10 	bl	80104d4 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE4backEv>
 800e8b4:	4603      	mov	r3, r0
      }
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	3708      	adds	r7, #8
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bdb0      	pop	{r4, r5, r7, pc}

0800e8be <_ZNSaIN3jlb4NodeEEC1Ev>:
 800e8be:	b580      	push	{r7, lr}
 800e8c0:	b082      	sub	sp, #8
 800e8c2:	af00      	add	r7, sp, #0
 800e8c4:	6078      	str	r0, [r7, #4]
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f001 fe1f 	bl	801050a <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEEC1Ev>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	3708      	adds	r7, #8
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}

0800e8d6 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800e8d6:	b480      	push	{r7}
 800e8d8:	b083      	sub	sp, #12
 800e8da:	af00      	add	r7, sp, #0
 800e8dc:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	601a      	str	r2, [r3, #0]
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	605a      	str	r2, [r3, #4]
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	609a      	str	r2, [r3, #8]
	{ }
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	370c      	adds	r7, #12
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fc:	4770      	bx	lr

0800e8fe <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800e8fe:	b580      	push	{r7, lr}
 800e900:	b084      	sub	sp, #16
 800e902:	af00      	add	r7, sp, #0
 800e904:	60f8      	str	r0, [r7, #12]
 800e906:	60b9      	str	r1, [r7, #8]
 800e908:	607a      	str	r2, [r7, #4]
	if (__p)
 800e90a:	68bb      	ldr	r3, [r7, #8]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d005      	beq.n	800e91c <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	687a      	ldr	r2, [r7, #4]
 800e914:	68b9      	ldr	r1, [r7, #8]
 800e916:	4618      	mov	r0, r3
 800e918:	f001 fe02 	bl	8010520 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j>
      }
 800e91c:	bf00      	nop
 800e91e:	3710      	adds	r7, #16
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}

0800e924 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800e924:	b480      	push	{r7}
 800e926:	b083      	sub	sp, #12
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	4618      	mov	r0, r3
 800e930:	370c      	adds	r7, #12
 800e932:	46bd      	mov	sp, r7
 800e934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e938:	4770      	bx	lr

0800e93a <_ZSt8_DestroyIPN3jlb4NodeES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800e93a:	b580      	push	{r7, lr}
 800e93c:	b084      	sub	sp, #16
 800e93e:	af00      	add	r7, sp, #0
 800e940:	60f8      	str	r0, [r7, #12]
 800e942:	60b9      	str	r1, [r7, #8]
 800e944:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800e946:	68b9      	ldr	r1, [r7, #8]
 800e948:	68f8      	ldr	r0, [r7, #12]
 800e94a:	f001 fe08 	bl	801055e <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_>
    }
 800e94e:	bf00      	nop
 800e950:	3710      	adds	r7, #16
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}

0800e956 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800e956:	b480      	push	{r7}
 800e958:	b083      	sub	sp, #12
 800e95a:	af00      	add	r7, sp, #0
 800e95c:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2200      	movs	r2, #0
 800e962:	601a      	str	r2, [r3, #0]
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2200      	movs	r2, #0
 800e968:	605a      	str	r2, [r3, #4]
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	2200      	movs	r2, #0
 800e96e:	609a      	str	r2, [r3, #8]
	{ }
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	4618      	mov	r0, r3
 800e974:	370c      	adds	r7, #12
 800e976:	46bd      	mov	sp, r7
 800e978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97c:	4770      	bx	lr

0800e97e <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>:
      _M_deallocate(pointer __p, size_t __n)
 800e97e:	b580      	push	{r7, lr}
 800e980:	b084      	sub	sp, #16
 800e982:	af00      	add	r7, sp, #0
 800e984:	60f8      	str	r0, [r7, #12]
 800e986:	60b9      	str	r1, [r7, #8]
 800e988:	607a      	str	r2, [r7, #4]
	if (__p)
 800e98a:	68bb      	ldr	r3, [r7, #8]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d005      	beq.n	800e99c <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	687a      	ldr	r2, [r7, #4]
 800e994:	68b9      	ldr	r1, [r7, #8]
 800e996:	4618      	mov	r0, r3
 800e998:	f001 fdf7 	bl	801058a <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>
      }
 800e99c:	bf00      	nop
 800e99e:	3710      	adds	r7, #16
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}

0800e9a4 <_ZSt4moveIRN3jlb4NodeEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800e9a4:	b480      	push	{r7}
 800e9a6:	b083      	sub	sp, #12
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	370c      	adds	r7, #12
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b8:	4770      	bx	lr

0800e9ba <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800e9ba:	b5b0      	push	{r4, r5, r7, lr}
 800e9bc:	b082      	sub	sp, #8
 800e9be:	af00      	add	r7, sp, #0
 800e9c0:	6078      	str	r0, [r7, #4]
 800e9c2:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	685a      	ldr	r2, [r3, #4]
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	689b      	ldr	r3, [r3, #8]
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	d012      	beq.n	800e9f6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800e9d0:	687c      	ldr	r4, [r7, #4]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	685d      	ldr	r5, [r3, #4]
 800e9d6:	6838      	ldr	r0, [r7, #0]
 800e9d8:	f001 fdf6 	bl	80105c8 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	461a      	mov	r2, r3
 800e9e0:	4629      	mov	r1, r5
 800e9e2:	4620      	mov	r0, r4
 800e9e4:	f001 fe32 	bl	801064c <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	685b      	ldr	r3, [r3, #4]
 800e9ec:	f103 0218 	add.w	r2, r3, #24
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	605a      	str	r2, [r3, #4]
 800e9f4:	e00c      	b.n	800ea10 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f7fe fe56 	bl	800d6a8 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>
 800e9fc:	4604      	mov	r4, r0
 800e9fe:	6838      	ldr	r0, [r7, #0]
 800ea00:	f001 fde2 	bl	80105c8 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800ea04:	4603      	mov	r3, r0
 800ea06:	461a      	mov	r2, r3
 800ea08:	4621      	mov	r1, r4
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f001 fe30 	bl	8010670 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800ea10:	6878      	ldr	r0, [r7, #4]
 800ea12:	f001 fec1 	bl	8010798 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE4backEv>
 800ea16:	4603      	mov	r3, r0
      }
 800ea18:	4618      	mov	r0, r3
 800ea1a:	3708      	adds	r7, #8
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bdb0      	pop	{r4, r5, r7, pc}

0800ea20 <_ZNSt12_Vector_baseIcSaIcEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b082      	sub	sp, #8
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	6839      	ldr	r1, [r7, #0]
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f001 fbad 	bl	801018e <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	4618      	mov	r0, r3
 800ea38:	3708      	adds	r7, #8
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}

0800ea3e <_ZNKSt16initializer_listIcE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800ea3e:	b480      	push	{r7}
 800ea40:	b083      	sub	sp, #12
 800ea42:	af00      	add	r7, sp, #0
 800ea44:	6078      	str	r0, [r7, #4]
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	370c      	adds	r7, #12
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea54:	4770      	bx	lr

0800ea56 <_ZNKSt16initializer_listIcE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 800ea56:	b590      	push	{r4, r7, lr}
 800ea58:	b083      	sub	sp, #12
 800ea5a:	af00      	add	r7, sp, #0
 800ea5c:	6078      	str	r0, [r7, #4]
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f7ff ffed 	bl	800ea3e <_ZNKSt16initializer_listIcE5beginEv>
 800ea64:	4604      	mov	r4, r0
 800ea66:	6878      	ldr	r0, [r7, #4]
 800ea68:	f001 feb1 	bl	80107ce <_ZNKSt16initializer_listIcE4sizeEv>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	4423      	add	r3, r4
 800ea70:	4618      	mov	r0, r3
 800ea72:	370c      	adds	r7, #12
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd90      	pop	{r4, r7, pc}

0800ea78 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
    distance(_InputIterator __first, _InputIterator __last)
 800ea78:	b5b0      	push	{r4, r5, r7, lr}
 800ea7a:	b082      	sub	sp, #8
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 800ea82:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800ea84:	1d3b      	adds	r3, r7, #4
 800ea86:	4618      	mov	r0, r3
 800ea88:	f001 fead 	bl	80107e6 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 800ea8c:	462a      	mov	r2, r5
 800ea8e:	6839      	ldr	r1, [r7, #0]
 800ea90:	4620      	mov	r0, r4
 800ea92:	f001 feb2 	bl	80107fa <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800ea96:	4603      	mov	r3, r0
    }
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3708      	adds	r7, #8
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bdb0      	pop	{r4, r5, r7, pc}

0800eaa0 <_ZNSt6vectorIcSaIcEE19_M_range_initializeIPKcEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 800eaa0:	b590      	push	{r4, r7, lr}
 800eaa2:	b087      	sub	sp, #28
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	60f8      	str	r0, [r7, #12]
 800eaa8:	60b9      	str	r1, [r7, #8]
 800eaaa:	607a      	str	r2, [r7, #4]
 800eaac:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 800eaae:	6879      	ldr	r1, [r7, #4]
 800eab0:	68b8      	ldr	r0, [r7, #8]
 800eab2:	f7ff ffe1 	bl	800ea78 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800eab6:	4603      	mov	r3, r0
 800eab8:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800eaba:	68fc      	ldr	r4, [r7, #12]
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	4618      	mov	r0, r3
 800eac0:	f7ff fe49 	bl	800e756 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800eac4:	4603      	mov	r3, r0
 800eac6:	4619      	mov	r1, r3
 800eac8:	6978      	ldr	r0, [r7, #20]
 800eaca:	f001 fea5 	bl	8010818 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_>
 800eace:	4603      	mov	r3, r0
 800ead0:	4619      	mov	r1, r3
 800ead2:	4620      	mov	r0, r4
 800ead4:	f001 fec8 	bl	8010868 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 800ead8:	4602      	mov	r2, r0
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	681a      	ldr	r2, [r3, #0]
 800eae2:	697b      	ldr	r3, [r7, #20]
 800eae4:	441a      	add	r2, r3
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f7ff fe30 	bl	800e756 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800eaf6:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800eaf8:	4622      	mov	r2, r4
 800eafa:	6879      	ldr	r1, [r7, #4]
 800eafc:	68b8      	ldr	r0, [r7, #8]
 800eafe:	f001 fec7 	bl	8010890 <_ZSt22__uninitialized_copy_aIPKcPccET0_T_S4_S3_RSaIT1_E>
 800eb02:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	605a      	str	r2, [r3, #4]
	}
 800eb08:	bf00      	nop
 800eb0a:	371c      	adds	r7, #28
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd90      	pop	{r4, r7, pc}

0800eb10 <_ZSt12construct_atIcJRKcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800eb10:	b590      	push	{r4, r7, lr}
 800eb12:	b083      	sub	sp, #12
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
 800eb18:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800eb1a:	6838      	ldr	r0, [r7, #0]
 800eb1c:	f000 fab4 	bl	800f088 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>
 800eb20:	4603      	mov	r3, r0
 800eb22:	781c      	ldrb	r4, [r3, #0]
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	4619      	mov	r1, r3
 800eb28:	2001      	movs	r0, #1
 800eb2a:	f7f3 fff7 	bl	8002b1c <_ZnwjPv>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	4622      	mov	r2, r4
 800eb32:	701a      	strb	r2, [r3, #0]
 800eb34:	4618      	mov	r0, r3
 800eb36:	370c      	adds	r7, #12
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd90      	pop	{r4, r7, pc}

0800eb3c <_ZNSt16allocator_traitsISaIcEE9constructIcJRKcEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b084      	sub	sp, #16
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	60f8      	str	r0, [r7, #12]
 800eb44:	60b9      	str	r1, [r7, #8]
 800eb46:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800eb48:	6878      	ldr	r0, [r7, #4]
 800eb4a:	f000 fa9d 	bl	800f088 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	4619      	mov	r1, r3
 800eb52:	68b8      	ldr	r0, [r7, #8]
 800eb54:	f7ff ffdc 	bl	800eb10 <_ZSt12construct_atIcJRKcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800eb58:	bf00      	nop
 800eb5a:	3710      	adds	r7, #16
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}

0800eb60 <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJRKcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800eb60:	b5b0      	push	{r4, r5, r7, lr}
 800eb62:	b08c      	sub	sp, #48	; 0x30
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	60f8      	str	r0, [r7, #12]
 800eb68:	60b9      	str	r1, [r7, #8]
 800eb6a:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800eb6c:	4a38      	ldr	r2, [pc, #224]	; (800ec50 <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJRKcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_+0xf0>)
 800eb6e:	2101      	movs	r1, #1
 800eb70:	68f8      	ldr	r0, [r7, #12]
 800eb72:	f001 fe9e 	bl	80108b2 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc>
 800eb76:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	685b      	ldr	r3, [r3, #4]
 800eb82:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800eb84:	68f8      	ldr	r0, [r7, #12]
 800eb86:	f7fe ff50 	bl	800da2a <_ZNSt6vectorIcSaIcEE5beginEv>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	617b      	str	r3, [r7, #20]
 800eb8e:	f107 0214 	add.w	r2, r7, #20
 800eb92:	f107 0308 	add.w	r3, r7, #8
 800eb96:	4611      	mov	r1, r2
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f001 fed1 	bl	8010940 <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eba6:	4618      	mov	r0, r3
 800eba8:	f001 fe5e 	bl	8010868 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 800ebac:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800ebae:	69fb      	ldr	r3, [r7, #28]
 800ebb0:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800ebb2:	68fc      	ldr	r4, [r7, #12]
 800ebb4:	69fa      	ldr	r2, [r7, #28]
 800ebb6:	6a3b      	ldr	r3, [r7, #32]
 800ebb8:	18d5      	adds	r5, r2, r3
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f000 fa64 	bl	800f088 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	461a      	mov	r2, r3
 800ebc4:	4629      	mov	r1, r5
 800ebc6:	4620      	mov	r0, r4
 800ebc8:	f7ff ffb8 	bl	800eb3c <_ZNSt16allocator_traitsISaIcEE9constructIcJRKcEEEvRS0_PT_DpOT0_>
	  __new_finish = pointer();
 800ebcc:	2300      	movs	r3, #0
 800ebce:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800ebd0:	f107 0308 	add.w	r3, r7, #8
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f7fa f8bb 	bl	8008d50 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f7ff fdb8 	bl	800e756 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800ebe6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800ebe8:	69fa      	ldr	r2, [r7, #28]
 800ebea:	4621      	mov	r1, r4
 800ebec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebee:	f001 febb 	bl	8010968 <_ZNSt6vectorIcSaIcEE11_S_relocateEPcS2_S2_RS0_>
 800ebf2:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800ebf4:	69bb      	ldr	r3, [r7, #24]
 800ebf6:	3301      	adds	r3, #1
 800ebf8:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800ebfa:	f107 0308 	add.w	r3, r7, #8
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7fa f8a6 	bl	8008d50 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800ec04:	4603      	mov	r3, r0
 800ec06:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f7ff fda3 	bl	800e756 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800ec10:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800ec12:	69ba      	ldr	r2, [r7, #24]
 800ec14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ec16:	4620      	mov	r0, r4
 800ec18:	f001 fea6 	bl	8010968 <_ZNSt6vectorIcSaIcEE11_S_relocateEPcS2_S2_RS0_>
 800ec1c:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 800ec1e:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	689a      	ldr	r2, [r3, #8]
 800ec24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec26:	1ad3      	subs	r3, r2, r3
      _M_deallocate(__old_start,
 800ec28:	461a      	mov	r2, r3
 800ec2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ec2c:	f7ff fea7 	bl	800e97e <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>
      this->_M_impl._M_start = __new_start;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	69fa      	ldr	r2, [r7, #28]
 800ec34:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	69ba      	ldr	r2, [r7, #24]
 800ec3a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800ec3c:	69fa      	ldr	r2, [r7, #28]
 800ec3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec40:	441a      	add	r2, r3
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	609a      	str	r2, [r3, #8]
    }
 800ec46:	bf00      	nop
 800ec48:	3730      	adds	r7, #48	; 0x30
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bdb0      	pop	{r4, r5, r7, pc}
 800ec4e:	bf00      	nop
 800ec50:	08029750 	.word	0x08029750

0800ec54 <_ZNSaISt13_Rb_tree_nodeISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEEEC1Ev>:
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b082      	sub	sp, #8
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f001 fe97 	bl	8010990 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKcS2_IfSt6vectorIS2_IciESaIS5_EEEEEEC1Ev>
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	4618      	mov	r0, r3
 800ec66:	3708      	adds	r7, #8
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}

0800ec6c <_ZNSt20_Rb_tree_key_compareISt4lessIcEEC1Ev>:
      _Rb_tree_key_compare()
 800ec6c:	b480      	push	{r7}
 800ec6e:	b083      	sub	sp, #12
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
      { }
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	4618      	mov	r0, r3
 800ec78:	370c      	adds	r7, #12
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec80:	4770      	bx	lr

0800ec82 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE8_M_eraseEPSt13_Rb_tree_nodeIS7_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800ec82:	b580      	push	{r7, lr}
 800ec84:	b084      	sub	sp, #16
 800ec86:	af00      	add	r7, sp, #0
 800ec88:	6078      	str	r0, [r7, #4]
 800ec8a:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 800ec8c:	e011      	b.n	800ecb2 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE8_M_eraseEPSt13_Rb_tree_nodeIS7_E+0x30>
	{
	  _M_erase(_S_right(__x));
 800ec8e:	6838      	ldr	r0, [r7, #0]
 800ec90:	f001 fe89 	bl	80109a6 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE8_S_rightEPSt18_Rb_tree_node_base>
 800ec94:	4603      	mov	r3, r0
 800ec96:	4619      	mov	r1, r3
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	f7ff fff2 	bl	800ec82 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE8_M_eraseEPSt13_Rb_tree_nodeIS7_E>
	  _Link_type __y = _S_left(__x);
 800ec9e:	6838      	ldr	r0, [r7, #0]
 800eca0:	f001 fe8d 	bl	80109be <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE7_S_leftEPSt18_Rb_tree_node_base>
 800eca4:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800eca6:	6839      	ldr	r1, [r7, #0]
 800eca8:	6878      	ldr	r0, [r7, #4]
 800ecaa:	f001 fe94 	bl	80109d6 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS7_E>
	  __x = __y;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d1ea      	bne.n	800ec8e <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE8_M_eraseEPSt13_Rb_tree_nodeIS7_E+0xc>
	}
    }
 800ecb8:	bf00      	nop
 800ecba:	bf00      	nop
 800ecbc:	3710      	adds	r7, #16
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}

0800ecc2 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800ecc2:	b580      	push	{r7, lr}
 800ecc4:	b082      	sub	sp, #8
 800ecc6:	af00      	add	r7, sp, #0
 800ecc8:	6078      	str	r0, [r7, #4]
      { return _M_mbegin(); }
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f001 fe94 	bl	80109f8 <_ZNKSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE9_M_mbeginEv>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3708      	adds	r7, #8
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}

0800ecda <_ZNSt12_Vector_baseISt4pairIfcESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800ecda:	b580      	push	{r7, lr}
 800ecdc:	b082      	sub	sp, #8
 800ecde:	af00      	add	r7, sp, #0
 800ece0:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	f001 fe94 	bl	8010a10 <_ZNSaISt4pairIfcEEC1Ev>
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	4618      	mov	r0, r3
 800ecec:	f001 fe9c 	bl	8010a28 <_ZNSt12_Vector_baseISt4pairIfcESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3708      	adds	r7, #8
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}

0800ecfa <_ZNSaISt4pairIfcEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800ecfa:	b480      	push	{r7}
 800ecfc:	b083      	sub	sp, #12
 800ecfe:	af00      	add	r7, sp, #0
 800ed00:	6078      	str	r0, [r7, #4]
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	4618      	mov	r0, r3
 800ed06:	370c      	adds	r7, #12
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0e:	4770      	bx	lr

0800ed10 <_ZNSt12_Vector_baseISt4pairIfcESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b082      	sub	sp, #8
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	689a      	ldr	r2, [r3, #8]
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	1ad3      	subs	r3, r2, r3
 800ed26:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 800ed28:	461a      	mov	r2, r3
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f001 fe90 	bl	8010a50 <_ZNSt12_Vector_baseISt4pairIfcESaIS1_EE13_M_deallocateEPS1_j>
      }
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	4618      	mov	r0, r3
 800ed34:	f7fe fc54 	bl	800d5e0 <_ZNSt12_Vector_baseISt4pairIfcESaIS1_EE12_Vector_implD1Ev>
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	3708      	adds	r7, #8
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}

0800ed42 <_ZNSt12_Vector_baseISt4pairIfcESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800ed42:	b480      	push	{r7}
 800ed44:	b083      	sub	sp, #12
 800ed46:	af00      	add	r7, sp, #0
 800ed48:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	370c      	adds	r7, #12
 800ed50:	46bd      	mov	sp, r7
 800ed52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed56:	4770      	bx	lr

0800ed58 <_ZSt8_DestroyIPSt4pairIfcES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b084      	sub	sp, #16
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	60f8      	str	r0, [r7, #12]
 800ed60:	60b9      	str	r1, [r7, #8]
 800ed62:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800ed64:	68b9      	ldr	r1, [r7, #8]
 800ed66:	68f8      	ldr	r0, [r7, #12]
 800ed68:	f001 fe85 	bl	8010a76 <_ZSt8_DestroyIPSt4pairIfcEEvT_S3_>
    }
 800ed6c:	bf00      	nop
 800ed6e:	3710      	adds	r7, #16
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}

0800ed74 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800ed74:	b480      	push	{r7}
 800ed76:	b083      	sub	sp, #12
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
 800ed7c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	681a      	ldr	r2, [r3, #0]
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	601a      	str	r2, [r3, #0]
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	4618      	mov	r0, r3
 800ed8a:	370c      	adds	r7, #12
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed92:	4770      	bx	lr

0800ed94 <_ZNSt3mapIcSt4pairIfSt6vectorIS0_IciESaIS2_EEESt4lessIcESaIS0_IKcS5_EEE11lower_boundERS8_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b082      	sub	sp, #8
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
 800ed9c:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6839      	ldr	r1, [r7, #0]
 800eda2:	4618      	mov	r0, r3
 800eda4:	f001 fe7d 	bl	8010aa2 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE11lower_boundERS1_>
 800eda8:	4603      	mov	r3, r0
 800edaa:	4618      	mov	r0, r3
 800edac:	3708      	adds	r7, #8
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}

0800edb2 <_ZNKSt3mapIcSt4pairIfSt6vectorIS0_IciESaIS2_EEESt4lessIcESaIS0_IKcS5_EEE8key_compEv>:
      key_comp() const
 800edb2:	b590      	push	{r4, r7, lr}
 800edb4:	b083      	sub	sp, #12
 800edb6:	af00      	add	r7, sp, #0
 800edb8:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	4618      	mov	r0, r3
 800edbe:	f001 fe87 	bl	8010ad0 <_ZNKSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE8key_compEv>
 800edc2:	bf00      	nop
 800edc4:	4620      	mov	r0, r4
 800edc6:	370c      	adds	r7, #12
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd90      	pop	{r4, r7, pc}

0800edcc <_ZNKSt4lessIcEclERKcS2_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 800edcc:	b480      	push	{r7}
 800edce:	b085      	sub	sp, #20
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	60f8      	str	r0, [r7, #12]
 800edd4:	60b9      	str	r1, [r7, #8]
 800edd6:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	781a      	ldrb	r2, [r3, #0]
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	781b      	ldrb	r3, [r3, #0]
 800ede0:	429a      	cmp	r2, r3
 800ede2:	bf34      	ite	cc
 800ede4:	2301      	movcc	r3, #1
 800ede6:	2300      	movcs	r3, #0
 800ede8:	b2db      	uxtb	r3, r3
 800edea:	4618      	mov	r0, r3
 800edec:	3714      	adds	r7, #20
 800edee:	46bd      	mov	sp, r7
 800edf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf4:	4770      	bx	lr

0800edf6 <_ZNSt5tupleIJRKcEEC1ILb1ELb1EEES1_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 800edf6:	b580      	push	{r7, lr}
 800edf8:	b082      	sub	sp, #8
 800edfa:	af00      	add	r7, sp, #0
 800edfc:	6078      	str	r0, [r7, #4]
 800edfe:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	6839      	ldr	r1, [r7, #0]
 800ee04:	4618      	mov	r0, r3
 800ee06:	f001 fe6e 	bl	8010ae6 <_ZNSt11_Tuple_implILj0EJRKcEEC1ES1_>
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	3708      	adds	r7, #8
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}

0800ee14 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEEC1ERKSt17_Rb_tree_iteratorIS7_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 800ee14:	b480      	push	{r7}
 800ee16:	b083      	sub	sp, #12
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
 800ee1c:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	681a      	ldr	r2, [r3, #0]
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	601a      	str	r2, [r3, #0]
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	4618      	mov	r0, r3
 800ee2a:	370c      	adds	r7, #12
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee32:	4770      	bx	lr

0800ee34 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800ee34:	b5b0      	push	{r4, r5, r7, lr}
 800ee36:	b088      	sub	sp, #32
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	60f8      	str	r0, [r7, #12]
 800ee3c:	60b9      	str	r1, [r7, #8]
 800ee3e:	607a      	str	r2, [r7, #4]
 800ee40:	603b      	str	r3, [r7, #0]
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      {
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	f001 fe5e 	bl	8010b04 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800ee48:	4604      	mov	r4, r0
 800ee4a:	6838      	ldr	r0, [r7, #0]
 800ee4c:	f001 fe65 	bl	8010b1a <_ZSt7forwardISt5tupleIJRKcEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800ee50:	4605      	mov	r5, r0
 800ee52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee54:	f001 fe6c 	bl	8010b30 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	462a      	mov	r2, r5
 800ee5c:	4621      	mov	r1, r4
 800ee5e:	68f8      	ldr	r0, [r7, #12]
 800ee60:	f001 fe71 	bl	8010b46 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEEPSt13_Rb_tree_nodeIS7_EDpOT_>
 800ee64:	61f8      	str	r0, [r7, #28]

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 800ee66:	69f8      	ldr	r0, [r7, #28]
 800ee68:	f001 ffb3 	bl	8010dd2 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE6_S_keyEPKSt13_Rb_tree_nodeIS7_E>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	f107 0010 	add.w	r0, r7, #16
 800ee72:	68ba      	ldr	r2, [r7, #8]
 800ee74:	68f9      	ldr	r1, [r7, #12]
 800ee76:	f001 fe89 	bl	8010b8c <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS1_>

	    if (__res.second)
 800ee7a:	697b      	ldr	r3, [r7, #20]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d007      	beq.n	800ee90 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 800ee80:	6939      	ldr	r1, [r7, #16]
 800ee82:	697a      	ldr	r2, [r7, #20]
 800ee84:	69fb      	ldr	r3, [r7, #28]
 800ee86:	68f8      	ldr	r0, [r7, #12]
 800ee88:	f001 ffb6 	bl	8010df8 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSF_PSt13_Rb_tree_nodeIS7_E>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	e00b      	b.n	800eea8 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_+0x74>

	    _M_drop_node(__z);
 800ee90:	69f9      	ldr	r1, [r7, #28]
 800ee92:	68f8      	ldr	r0, [r7, #12]
 800ee94:	f001 fd9f 	bl	80109d6 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS7_E>
	    return iterator(__res.first);
 800ee98:	693a      	ldr	r2, [r7, #16]
 800ee9a:	f107 0318 	add.w	r3, r7, #24
 800ee9e:	4611      	mov	r1, r2
 800eea0:	4618      	mov	r0, r3
 800eea2:	f001 ffe6 	bl	8010e72 <_ZNSt17_Rb_tree_iteratorISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEEC1EPSt18_Rb_tree_node_base>
 800eea6:	69bb      	ldr	r3, [r7, #24]
	__catch(...)
	  {
	    _M_drop_node(__z);
	    __throw_exception_again;
	  }
      }
 800eea8:	4618      	mov	r0, r3
 800eeaa:	3720      	adds	r7, #32
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bdb0      	pop	{r4, r5, r7, pc}

0800eeb0 <_ZNSaISt4pairIciEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b082      	sub	sp, #8
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f001 ffe9 	bl	8010e90 <_ZN9__gnu_cxx13new_allocatorISt4pairIciEEC1Ev>
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	4618      	mov	r0, r3
 800eec2:	3708      	adds	r7, #8
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}

0800eec8 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800eec8:	b480      	push	{r7}
 800eeca:	b083      	sub	sp, #12
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2200      	movs	r2, #0
 800eed4:	601a      	str	r2, [r3, #0]
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2200      	movs	r2, #0
 800eeda:	605a      	str	r2, [r3, #4]
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2200      	movs	r2, #0
 800eee0:	609a      	str	r2, [r3, #8]
	{ }
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	4618      	mov	r0, r3
 800eee6:	370c      	adds	r7, #12
 800eee8:	46bd      	mov	sp, r7
 800eeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeee:	4770      	bx	lr

0800eef0 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b084      	sub	sp, #16
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	60f8      	str	r0, [r7, #12]
 800eef8:	60b9      	str	r1, [r7, #8]
 800eefa:	607a      	str	r2, [r7, #4]
	if (__p)
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d005      	beq.n	800ef0e <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	687a      	ldr	r2, [r7, #4]
 800ef06:	68b9      	ldr	r1, [r7, #8]
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f001 ffcc 	bl	8010ea6 <_ZNSt16allocator_traitsISaISt4pairIciEEE10deallocateERS2_PS1_j>
      }
 800ef0e:	bf00      	nop
 800ef10:	3710      	adds	r7, #16
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}

0800ef16 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800ef16:	b480      	push	{r7}
 800ef18:	b083      	sub	sp, #12
 800ef1a:	af00      	add	r7, sp, #0
 800ef1c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	4618      	mov	r0, r3
 800ef22:	370c      	adds	r7, #12
 800ef24:	46bd      	mov	sp, r7
 800ef26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2a:	4770      	bx	lr

0800ef2c <_ZSt8_DestroyIPSt4pairIciES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b084      	sub	sp, #16
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	60f8      	str	r0, [r7, #12]
 800ef34:	60b9      	str	r1, [r7, #8]
 800ef36:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800ef38:	68b9      	ldr	r1, [r7, #8]
 800ef3a:	68f8      	ldr	r0, [r7, #12]
 800ef3c:	f001 ffd2 	bl	8010ee4 <_ZSt8_DestroyIPSt4pairIciEEvT_S3_>
    }
 800ef40:	bf00      	nop
 800ef42:	3710      	adds	r7, #16
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd80      	pop	{r7, pc}

0800ef48 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EEC1EOS3_>:
      _Vector_base(_Vector_base&&) = default;
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b082      	sub	sp, #8
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
 800ef50:	6039      	str	r1, [r7, #0]
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	683a      	ldr	r2, [r7, #0]
 800ef56:	4611      	mov	r1, r2
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f001 ffd9 	bl	8010f10 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE12_Vector_implC1EOS4_>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	4618      	mov	r0, r3
 800ef62:	3708      	adds	r7, #8
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}

0800ef68 <_ZNSt6vectorISt4pairIciESaIS1_EEC1EOS3_>:
      vector(vector&&) noexcept = default;
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b082      	sub	sp, #8
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
 800ef70:	6039      	str	r1, [r7, #0]
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	683a      	ldr	r2, [r7, #0]
 800ef76:	4611      	mov	r1, r2
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f7ff ffe5 	bl	800ef48 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EEC1EOS3_>
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	4618      	mov	r0, r3
 800ef82:	3708      	adds	r7, #8
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bd80      	pop	{r7, pc}

0800ef88 <_ZNSt4pairIiSt6vectorIS_IciESaIS1_EEEC1IiS3_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800ef88:	b590      	push	{r4, r7, lr}
 800ef8a:	b085      	sub	sp, #20
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	60f8      	str	r0, [r7, #12]
 800ef90:	60b9      	str	r1, [r7, #8]
 800ef92:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800ef94:	68b8      	ldr	r0, [r7, #8]
 800ef96:	f7f9 fe25 	bl	8008be4 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	681a      	ldr	r2, [r3, #0]
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	601a      	str	r2, [r3, #0]
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	1d1c      	adds	r4, r3, #4
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f7fe fc52 	bl	800d850 <_ZSt7forwardISt6vectorISt4pairIciESaIS2_EEEOT_RNSt16remove_referenceIS5_E4typeE>
 800efac:	4603      	mov	r3, r0
 800efae:	4619      	mov	r1, r3
 800efb0:	4620      	mov	r0, r4
 800efb2:	f7ff ffd9 	bl	800ef68 <_ZNSt6vectorISt4pairIciESaIS1_EEC1EOS3_>
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	4618      	mov	r0, r3
 800efba:	3714      	adds	r7, #20
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd90      	pop	{r4, r7, pc}

0800efc0 <_ZSt4moveIRSt6vectorISt4pairIciESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800efc0:	b480      	push	{r7}
 800efc2:	b083      	sub	sp, #12
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	4618      	mov	r0, r3
 800efcc:	370c      	adds	r7, #12
 800efce:	46bd      	mov	sp, r7
 800efd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd4:	4770      	bx	lr

0800efd6 <_ZNSt6vectorISt4pairIciESaIS1_EE14_M_move_assignEOS3_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 800efd6:	b590      	push	{r4, r7, lr}
 800efd8:	b089      	sub	sp, #36	; 0x24
 800efda:	af00      	add	r7, sp, #0
 800efdc:	60f8      	str	r0, [r7, #12]
 800efde:	60b9      	str	r1, [r7, #8]
 800efe0:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 800efe2:	68fa      	ldr	r2, [r7, #12]
 800efe4:	f107 031c 	add.w	r3, r7, #28
 800efe8:	4611      	mov	r1, r2
 800efea:	4618      	mov	r0, r3
 800efec:	f001 ffab 	bl	8010f46 <_ZNKSt12_Vector_baseISt4pairIciESaIS1_EE13get_allocatorEv>
 800eff0:	f107 021c 	add.w	r2, r7, #28
 800eff4:	f107 0310 	add.w	r3, r7, #16
 800eff8:	4611      	mov	r1, r2
 800effa:	4618      	mov	r0, r3
 800effc:	f001 ffb4 	bl	8010f68 <_ZNSt6vectorISt4pairIciESaIS1_EEC1ERKS2_>
 800f000:	f107 031c 	add.w	r3, r7, #28
 800f004:	4618      	mov	r0, r3
 800f006:	f7fe fbcd 	bl	800d7a4 <_ZNSaISt4pairIciEED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	68ba      	ldr	r2, [r7, #8]
 800f00e:	4611      	mov	r1, r2
 800f010:	4618      	mov	r0, r3
 800f012:	f001 ffb8 	bl	8010f86 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE17_Vector_impl_data12_M_swap_dataERS4_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 800f016:	68ba      	ldr	r2, [r7, #8]
 800f018:	f107 0310 	add.w	r3, r7, #16
 800f01c:	4611      	mov	r1, r2
 800f01e:	4618      	mov	r0, r3
 800f020:	f001 ffb1 	bl	8010f86 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE17_Vector_impl_data12_M_swap_dataERS4_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	4618      	mov	r0, r3
 800f028:	f7ff ff75 	bl	800ef16 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE19_M_get_Tp_allocatorEv>
 800f02c:	4604      	mov	r4, r0
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	4618      	mov	r0, r3
 800f032:	f7ff ff70 	bl	800ef16 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE19_M_get_Tp_allocatorEv>
 800f036:	4603      	mov	r3, r0
 800f038:	4619      	mov	r1, r3
 800f03a:	4620      	mov	r0, r4
 800f03c:	f001 ffc1 	bl	8010fc2 <_ZSt15__alloc_on_moveISaISt4pairIciEEEvRT_S4_>
      }
 800f040:	f107 0310 	add.w	r3, r7, #16
 800f044:	4618      	mov	r0, r3
 800f046:	f7fe fbd1 	bl	800d7ec <_ZNSt6vectorISt4pairIciESaIS1_EED1Ev>
 800f04a:	3724      	adds	r7, #36	; 0x24
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd90      	pop	{r4, r7, pc}

0800f050 <_ZNSt4pairIfSt6vectorIS_IciESaIS1_EEEC1IfS3_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800f050:	b590      	push	{r4, r7, lr}
 800f052:	b085      	sub	sp, #20
 800f054:	af00      	add	r7, sp, #0
 800f056:	60f8      	str	r0, [r7, #12]
 800f058:	60b9      	str	r1, [r7, #8]
 800f05a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800f05c:	68b8      	ldr	r0, [r7, #8]
 800f05e:	f7f9 fe43 	bl	8008ce8 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800f062:	4603      	mov	r3, r0
 800f064:	681a      	ldr	r2, [r3, #0]
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	601a      	str	r2, [r3, #0]
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	1d1c      	adds	r4, r3, #4
 800f06e:	6878      	ldr	r0, [r7, #4]
 800f070:	f7fe fbee 	bl	800d850 <_ZSt7forwardISt6vectorISt4pairIciESaIS2_EEEOT_RNSt16remove_referenceIS5_E4typeE>
 800f074:	4603      	mov	r3, r0
 800f076:	4619      	mov	r1, r3
 800f078:	4620      	mov	r0, r4
 800f07a:	f7ff ff75 	bl	800ef68 <_ZNSt6vectorISt4pairIciESaIS1_EEC1EOS3_>
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	4618      	mov	r0, r3
 800f082:	3714      	adds	r7, #20
 800f084:	46bd      	mov	sp, r7
 800f086:	bd90      	pop	{r4, r7, pc}

0800f088 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f088:	b480      	push	{r7}
 800f08a:	b083      	sub	sp, #12
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	4618      	mov	r0, r3
 800f094:	370c      	adds	r7, #12
 800f096:	46bd      	mov	sp, r7
 800f098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09c:	4770      	bx	lr

0800f09e <_ZNSt4pairIicEC1IiLb1EEEOT_RKc>:
       constexpr pair(_U1&& __x, const _T2& __y)
 800f09e:	b580      	push	{r7, lr}
 800f0a0:	b084      	sub	sp, #16
 800f0a2:	af00      	add	r7, sp, #0
 800f0a4:	60f8      	str	r0, [r7, #12]
 800f0a6:	60b9      	str	r1, [r7, #8]
 800f0a8:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 800f0aa:	68b8      	ldr	r0, [r7, #8]
 800f0ac:	f7f9 fd9a 	bl	8008be4 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	681a      	ldr	r2, [r3, #0]
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	601a      	str	r2, [r3, #0]
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	781a      	ldrb	r2, [r3, #0]
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	711a      	strb	r2, [r3, #4]
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	3710      	adds	r7, #16
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bd80      	pop	{r7, pc}

0800f0ca <_ZNSt6vectorISt4pairIfcESaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800f0ca:	b580      	push	{r7, lr}
 800f0cc:	b082      	sub	sp, #8
 800f0ce:	af00      	add	r7, sp, #0
 800f0d0:	6078      	str	r0, [r7, #4]
 800f0d2:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800f0d4:	6838      	ldr	r0, [r7, #0]
 800f0d6:	f7f9 fdfc 	bl	8008cd2 <_ZSt4moveIRSt4pairIfcEEONSt16remove_referenceIT_E4typeEOS4_>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	4619      	mov	r1, r3
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	f001 ff7b 	bl	8010fda <_ZNSt6vectorISt4pairIfcESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800f0e4:	bf00      	nop
 800f0e6:	3708      	adds	r7, #8
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}

0800f0ec <_ZNSt6vectorISt4pairIfcESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b084      	sub	sp, #16
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800f0f4:	687a      	ldr	r2, [r7, #4]
 800f0f6:	f107 030c 	add.w	r3, r7, #12
 800f0fa:	4611      	mov	r1, r2
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f001 ff9f 	bl	8011040 <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	4618      	mov	r0, r3
 800f106:	3710      	adds	r7, #16
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}

0800f10c <_ZNSt6vectorISt4pairIfcESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b084      	sub	sp, #16
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	1d1a      	adds	r2, r3, #4
 800f118:	f107 030c 	add.w	r3, r7, #12
 800f11c:	4611      	mov	r1, r2
 800f11e:	4618      	mov	r0, r3
 800f120:	f001 ff8e 	bl	8011040 <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	4618      	mov	r0, r3
 800f128:	3710      	adds	r7, #16
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}

0800f12e <_ZN9__gnu_cxxmiIPSt4pairIfcESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800f12e:	b590      	push	{r4, r7, lr}
 800f130:	b083      	sub	sp, #12
 800f132:	af00      	add	r7, sp, #0
 800f134:	6078      	str	r0, [r7, #4]
 800f136:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f000 f80d 	bl	800f158 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEE4baseEv>
 800f13e:	4603      	mov	r3, r0
 800f140:	681c      	ldr	r4, [r3, #0]
 800f142:	6838      	ldr	r0, [r7, #0]
 800f144:	f000 f808 	bl	800f158 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEE4baseEv>
 800f148:	4603      	mov	r3, r0
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	1ae3      	subs	r3, r4, r3
 800f14e:	10db      	asrs	r3, r3, #3
 800f150:	4618      	mov	r0, r3
 800f152:	370c      	adds	r7, #12
 800f154:	46bd      	mov	sp, r7
 800f156:	bd90      	pop	{r4, r7, pc}

0800f158 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800f158:	b480      	push	{r7}
 800f15a:	b083      	sub	sp, #12
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	4618      	mov	r0, r3
 800f164:	370c      	adds	r7, #12
 800f166:	46bd      	mov	sp, r7
 800f168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16c:	4770      	bx	lr

0800f16e <_ZSt9push_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS3_SaIS3_EEEESt7greaterIS3_EEvT_SB_T0_>:
   *  performed using comp.
  */
  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f16e:	b590      	push	{r4, r7, lr}
 800f170:	b08b      	sub	sp, #44	; 0x2c
 800f172:	af02      	add	r7, sp, #8
 800f174:	60f8      	str	r0, [r7, #12]
 800f176:	60b9      	str	r1, [r7, #8]
 800f178:	713a      	strb	r2, [r7, #4]
      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
      __glibcxx_requires_heap_pred(__first, __last - 1, __comp);

      __decltype(__gnu_cxx::__ops::__iter_comp_val(_GLIBCXX_MOVE(__comp)))
	__cmp(_GLIBCXX_MOVE(__comp));
      _ValueType __value = _GLIBCXX_MOVE(*(__last - 1));
 800f17a:	f107 0308 	add.w	r3, r7, #8
 800f17e:	2101      	movs	r1, #1
 800f180:	4618      	mov	r0, r3
 800f182:	f001 ff6d 	bl	8011060 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEmiEi>
 800f186:	4603      	mov	r3, r0
 800f188:	61fb      	str	r3, [r7, #28]
 800f18a:	f107 031c 	add.w	r3, r7, #28
 800f18e:	4618      	mov	r0, r3
 800f190:	f001 ff7f 	bl	8011092 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEdeEv>
 800f194:	4603      	mov	r3, r0
 800f196:	4618      	mov	r0, r3
 800f198:	f7f9 fd9b 	bl	8008cd2 <_ZSt4moveIRSt4pairIfcEEONSt16remove_referenceIT_E4typeEOS4_>
 800f19c:	4602      	mov	r2, r0
 800f19e:	f107 0310 	add.w	r3, r7, #16
 800f1a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f1a6:	e883 0003 	stmia.w	r3, {r0, r1}
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
 800f1aa:	f107 020c 	add.w	r2, r7, #12
 800f1ae:	f107 0308 	add.w	r3, r7, #8
 800f1b2:	4611      	mov	r1, r2
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f7ff ffba 	bl	800f12e <_ZN9__gnu_cxxmiIPSt4pairIfcESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	1e5c      	subs	r4, r3, #1
		       _DistanceType(0), _GLIBCXX_MOVE(__value), __cmp);
 800f1be:	f107 0310 	add.w	r3, r7, #16
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f7f9 fd85 	bl	8008cd2 <_ZSt4moveIRSt4pairIfcEEONSt16remove_referenceIT_E4typeEOS4_>
 800f1c8:	4603      	mov	r3, r0
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
 800f1ca:	f107 0218 	add.w	r2, r7, #24
 800f1ce:	9201      	str	r2, [sp, #4]
 800f1d0:	685a      	ldr	r2, [r3, #4]
 800f1d2:	9200      	str	r2, [sp, #0]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	4621      	mov	r1, r4
 800f1da:	68f8      	ldr	r0, [r7, #12]
 800f1dc:	f001 ffaf 	bl	801113e <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops14_Iter_comp_valISt7greaterIS3_EEEEvT_T0_SF_T1_RT2_>
    }
 800f1e0:	bf00      	nop
 800f1e2:	3724      	adds	r7, #36	; 0x24
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd90      	pop	{r4, r7, pc}

0800f1e8 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIfcESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800f1e8:	b480      	push	{r7}
 800f1ea:	b083      	sub	sp, #12
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	370c      	adds	r7, #12
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fc:	4770      	bx	lr

0800f1fe <_ZNKSt6vectorISt4pairIfcESaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 800f1fe:	b580      	push	{r7, lr}
 800f200:	b084      	sub	sp, #16
 800f202:	af00      	add	r7, sp, #0
 800f204:	6078      	str	r0, [r7, #4]
      { return begin() == end(); }
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	f002 f80c 	bl	8011224 <_ZNKSt6vectorISt4pairIfcESaIS1_EE5beginEv>
 800f20c:	4603      	mov	r3, r0
 800f20e:	60bb      	str	r3, [r7, #8]
 800f210:	6878      	ldr	r0, [r7, #4]
 800f212:	f002 f817 	bl	8011244 <_ZNKSt6vectorISt4pairIfcESaIS1_EE3endEv>
 800f216:	4603      	mov	r3, r0
 800f218:	60fb      	str	r3, [r7, #12]
 800f21a:	f107 020c 	add.w	r2, r7, #12
 800f21e:	f107 0308 	add.w	r3, r7, #8
 800f222:	4611      	mov	r1, r2
 800f224:	4618      	mov	r0, r3
 800f226:	f002 f81e 	bl	8011266 <_ZN9__gnu_cxxeqIPKSt4pairIfcESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800f22a:	4603      	mov	r3, r0
 800f22c:	4618      	mov	r0, r3
 800f22e:	3710      	adds	r7, #16
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}

0800f234 <_ZNKSt6vectorISt4pairIfcESaIS1_EE5frontEv>:
      front() const _GLIBCXX_NOEXCEPT
 800f234:	b580      	push	{r7, lr}
 800f236:	b084      	sub	sp, #16
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
	return *begin();
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f001 fff1 	bl	8011224 <_ZNKSt6vectorISt4pairIfcESaIS1_EE5beginEv>
 800f242:	4603      	mov	r3, r0
 800f244:	60fb      	str	r3, [r7, #12]
 800f246:	f107 030c 	add.w	r3, r7, #12
 800f24a:	4618      	mov	r0, r3
 800f24c:	f002 f823 	bl	8011296 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIfcESt6vectorIS2_SaIS2_EEEdeEv>
 800f250:	4603      	mov	r3, r0
      }
 800f252:	4618      	mov	r0, r3
 800f254:	3710      	adds	r7, #16
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}

0800f25a <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800f25a:	b480      	push	{r7}
 800f25c:	b083      	sub	sp, #12
 800f25e:	af00      	add	r7, sp, #0
 800f260:	6078      	str	r0, [r7, #4]
	--_M_current;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	f1a3 0208 	sub.w	r2, r3, #8
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	601a      	str	r2, [r3, #0]
	return *this;
 800f26e:	687b      	ldr	r3, [r7, #4]
      }
 800f270:	4618      	mov	r0, r3
 800f272:	370c      	adds	r7, #12
 800f274:	46bd      	mov	sp, r7
 800f276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27a:	4770      	bx	lr

0800f27c <_ZSt8pop_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS3_SaIS3_EEEESt7greaterIS3_EEvT_SB_T0_>:
   *  heap.  Comparisons are made using comp.
  */
  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline void
    pop_heap(_RandomAccessIterator __first,
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b086      	sub	sp, #24
 800f280:	af00      	add	r7, sp, #0
 800f282:	60f8      	str	r0, [r7, #12]
 800f284:	60b9      	str	r1, [r7, #8]
 800f286:	713a      	strb	r2, [r7, #4]
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
      __glibcxx_requires_non_empty_range(__first, __last);
      __glibcxx_requires_heap_pred(__first, __last, __comp);

      if (__last - __first > 1)
 800f288:	f107 020c 	add.w	r2, r7, #12
 800f28c:	f107 0308 	add.w	r3, r7, #8
 800f290:	4611      	mov	r1, r2
 800f292:	4618      	mov	r0, r3
 800f294:	f7ff ff4b 	bl	800f12e <_ZN9__gnu_cxxmiIPSt4pairIfcESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800f298:	4603      	mov	r3, r0
 800f29a:	2b01      	cmp	r3, #1
 800f29c:	bfcc      	ite	gt
 800f29e:	2301      	movgt	r3, #1
 800f2a0:	2300      	movle	r3, #0
 800f2a2:	b2db      	uxtb	r3, r3
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d00b      	beq.n	800f2c0 <_ZSt8pop_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS3_SaIS3_EEEESt7greaterIS3_EEvT_SB_T0_+0x44>
	{
	  typedef __decltype(__comp) _Cmp;
	  __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(_GLIBCXX_MOVE(__comp));
	  --__last;
 800f2a8:	f107 0308 	add.w	r3, r7, #8
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f7ff ffd4 	bl	800f25a <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEmmEv>
	  std::__pop_heap(__first, __last, __last, __cmp);
 800f2b2:	f107 0314 	add.w	r3, r7, #20
 800f2b6:	68ba      	ldr	r2, [r7, #8]
 800f2b8:	68b9      	ldr	r1, [r7, #8]
 800f2ba:	68f8      	ldr	r0, [r7, #12]
 800f2bc:	f001 fff7 	bl	80112ae <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterISt7greaterIS3_EEEEvT_SE_SE_RT0_>
	}
    }
 800f2c0:	bf00      	nop
 800f2c2:	3718      	adds	r7, #24
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}

0800f2c8 <_ZNSt6vectorISt4pairIfcESaIS1_EE8pop_backEv>:
      pop_back() _GLIBCXX_NOEXCEPT
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b082      	sub	sp, #8
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
	--this->_M_impl._M_finish;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	685b      	ldr	r3, [r3, #4]
 800f2d4:	f1a3 0208 	sub.w	r2, r3, #8
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	605a      	str	r2, [r3, #4]
	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 800f2dc:	687a      	ldr	r2, [r7, #4]
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	685b      	ldr	r3, [r3, #4]
 800f2e2:	4619      	mov	r1, r3
 800f2e4:	4610      	mov	r0, r2
 800f2e6:	f002 f82a 	bl	801133e <_ZNSt16allocator_traitsISaISt4pairIfcEEE7destroyIS1_EEvRS2_PT_>
      }
 800f2ea:	bf00      	nop
 800f2ec:	3708      	adds	r7, #8
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd80      	pop	{r7, pc}

0800f2f2 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800f2f2:	b480      	push	{r7}
 800f2f4:	b083      	sub	sp, #12
 800f2f6:	af00      	add	r7, sp, #0
 800f2f8:	6078      	str	r0, [r7, #4]
 800f2fa:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	681a      	ldr	r2, [r3, #0]
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	601a      	str	r2, [r3, #0]
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	4618      	mov	r0, r3
 800f308:	370c      	adds	r7, #12
 800f30a:	46bd      	mov	sp, r7
 800f30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f310:	4770      	bx	lr

0800f312 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>:
    };

  template<typename _Value>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
 800f312:	b580      	push	{r7, lr}
 800f314:	b084      	sub	sp, #16
 800f316:	af00      	add	r7, sp, #0
 800f318:	6078      	str	r0, [r7, #4]
    { return _Iter_equals_val<_Value>(__val); }
 800f31a:	f107 030c 	add.w	r3, r7, #12
 800f31e:	6879      	ldr	r1, [r7, #4]
 800f320:	4618      	mov	r0, r3
 800f322:	f002 f818 	bl	8011356 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	4618      	mov	r0, r3
 800f32a:	3710      	adds	r7, #16
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}

0800f330 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_>:
    }

  template<typename _Iterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
 800f330:	b590      	push	{r4, r7, lr}
 800f332:	b085      	sub	sp, #20
 800f334:	af00      	add	r7, sp, #0
 800f336:	60f8      	str	r0, [r7, #12]
 800f338:	60b9      	str	r1, [r7, #8]
 800f33a:	607a      	str	r2, [r7, #4]
    {
      return __find_if(__first, __last, __pred,
		       std::__iterator_category(__first));
 800f33c:	f107 030c 	add.w	r3, r7, #12
 800f340:	4618      	mov	r0, r3
 800f342:	f002 f817 	bl	8011374 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>
      return __find_if(__first, __last, __pred,
 800f346:	4623      	mov	r3, r4
 800f348:	687a      	ldr	r2, [r7, #4]
 800f34a:	68b9      	ldr	r1, [r7, #8]
 800f34c:	68f8      	ldr	r0, [r7, #12]
 800f34e:	f002 f84e 	bl	80113ee <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag>
 800f352:	4603      	mov	r3, r0
    }
 800f354:	4618      	mov	r0, r3
 800f356:	3714      	adds	r7, #20
 800f358:	46bd      	mov	sp, r7
 800f35a:	bd90      	pop	{r4, r7, pc}

0800f35c <_ZNKSt12_Vector_baseISt4pairIciESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800f35c:	b480      	push	{r7}
 800f35e:	b083      	sub	sp, #12
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	4618      	mov	r0, r3
 800f368:	370c      	adds	r7, #12
 800f36a:	46bd      	mov	sp, r7
 800f36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f370:	4770      	bx	lr

0800f372 <_ZNSt6vectorISt4pairIciESaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 800f372:	b580      	push	{r7, lr}
 800f374:	b082      	sub	sp, #8
 800f376:	af00      	add	r7, sp, #0
 800f378:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	4619      	mov	r1, r3
 800f380:	6878      	ldr	r0, [r7, #4]
 800f382:	f002 f8cd 	bl	8011520 <_ZNSt6vectorISt4pairIciESaIS1_EE15_M_erase_at_endEPS1_>
 800f386:	bf00      	nop
 800f388:	3708      	adds	r7, #8
 800f38a:	46bd      	mov	sp, r7
 800f38c:	bd80      	pop	{r7, pc}

0800f38e <_ZSt15__alloc_on_copyISaISt4pairIciEEEvRT_RKS3_>:
    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 800f38e:	b480      	push	{r7}
 800f390:	b083      	sub	sp, #12
 800f392:	af00      	add	r7, sp, #0
 800f394:	6078      	str	r0, [r7, #4]
 800f396:	6039      	str	r1, [r7, #0]
    }
 800f398:	bf00      	nop
 800f39a:	370c      	adds	r7, #12
 800f39c:	46bd      	mov	sp, r7
 800f39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a2:	4770      	bx	lr

0800f3a4 <_ZNKSt6vectorISt4pairIciESaIS1_EE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 800f3a4:	b480      	push	{r7}
 800f3a6:	b083      	sub	sp, #12
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	1ad3      	subs	r3, r2, r3
 800f3b6:	10db      	asrs	r3, r3, #3
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	370c      	adds	r7, #12
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c2:	4770      	bx	lr

0800f3c4 <_ZNKSt6vectorISt4pairIciESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b084      	sub	sp, #16
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800f3cc:	687a      	ldr	r2, [r7, #4]
 800f3ce:	f107 030c 	add.w	r3, r7, #12
 800f3d2:	4611      	mov	r1, r2
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f002 f8c4 	bl	8011562 <_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIciESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	4618      	mov	r0, r3
 800f3de:	3710      	adds	r7, #16
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd80      	pop	{r7, pc}

0800f3e4 <_ZNKSt6vectorISt4pairIciESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b084      	sub	sp, #16
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	1d1a      	adds	r2, r3, #4
 800f3f0:	f107 030c 	add.w	r3, r7, #12
 800f3f4:	4611      	mov	r1, r2
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f002 f8b3 	bl	8011562 <_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIciESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	4618      	mov	r0, r3
 800f400:	3710      	adds	r7, #16
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}

0800f406 <_ZNSt6vectorISt4pairIciESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_jT_SB_>:
	_M_allocate_and_copy(size_type __n,
 800f406:	b580      	push	{r7, lr}
 800f408:	b086      	sub	sp, #24
 800f40a:	af00      	add	r7, sp, #0
 800f40c:	60f8      	str	r0, [r7, #12]
 800f40e:	60b9      	str	r1, [r7, #8]
 800f410:	607a      	str	r2, [r7, #4]
 800f412:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	68b9      	ldr	r1, [r7, #8]
 800f418:	4618      	mov	r0, r3
 800f41a:	f002 f8b2 	bl	8011582 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE11_M_allocateEj>
 800f41e:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	4618      	mov	r0, r3
 800f424:	f7ff fd77 	bl	800ef16 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE19_M_get_Tp_allocatorEv>
 800f428:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 800f42a:	697a      	ldr	r2, [r7, #20]
 800f42c:	6839      	ldr	r1, [r7, #0]
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f000 f9f1 	bl	800f816 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIciESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
	      return __result;
 800f434:	697b      	ldr	r3, [r7, #20]
	}
 800f436:	4618      	mov	r0, r3
 800f438:	3718      	adds	r7, #24
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}

0800f43e <_ZNSt6vectorISt4pairIciESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800f43e:	b580      	push	{r7, lr}
 800f440:	b084      	sub	sp, #16
 800f442:	af00      	add	r7, sp, #0
 800f444:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800f446:	687a      	ldr	r2, [r7, #4]
 800f448:	f107 030c 	add.w	r3, r7, #12
 800f44c:	4611      	mov	r1, r2
 800f44e:	4618      	mov	r0, r3
 800f450:	f002 f8ab 	bl	80115aa <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	4618      	mov	r0, r3
 800f458:	3710      	adds	r7, #16
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}

0800f45e <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIciESt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET0_T_SD_SC_>:
    copy(_II __first, _II __last, _OI __result)
 800f45e:	b590      	push	{r4, r7, lr}
 800f460:	b085      	sub	sp, #20
 800f462:	af00      	add	r7, sp, #0
 800f464:	60f8      	str	r0, [r7, #12]
 800f466:	60b9      	str	r1, [r7, #8]
 800f468:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800f46a:	68f8      	ldr	r0, [r7, #12]
 800f46c:	f002 f8ad 	bl	80115ca <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIciESt6vectorIS3_SaIS3_EEEEET_SA_>
 800f470:	4604      	mov	r4, r0
 800f472:	68b8      	ldr	r0, [r7, #8]
 800f474:	f002 f8a9 	bl	80115ca <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIciESt6vectorIS3_SaIS3_EEEEET_SA_>
 800f478:	4603      	mov	r3, r0
 800f47a:	687a      	ldr	r2, [r7, #4]
 800f47c:	4619      	mov	r1, r3
 800f47e:	4620      	mov	r0, r4
 800f480:	f002 f8ae 	bl	80115e0 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKSt4pairIciESt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET1_T0_SD_SC_>
 800f484:	4603      	mov	r3, r0
    }
 800f486:	4618      	mov	r0, r3
 800f488:	3714      	adds	r7, #20
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd90      	pop	{r4, r7, pc}

0800f48e <_ZNSt6vectorISt4pairIciESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800f48e:	b580      	push	{r7, lr}
 800f490:	b084      	sub	sp, #16
 800f492:	af00      	add	r7, sp, #0
 800f494:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	1d1a      	adds	r2, r3, #4
 800f49a:	f107 030c 	add.w	r3, r7, #12
 800f49e:	4611      	mov	r1, r2
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	f002 f882 	bl	80115aa <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	3710      	adds	r7, #16
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bd80      	pop	{r7, pc}

0800f4b0 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS3_SaIS3_EEEES3_EvT_S9_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b084      	sub	sp, #16
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	60f8      	str	r0, [r7, #12]
 800f4b8:	60b9      	str	r1, [r7, #8]
 800f4ba:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800f4bc:	68b9      	ldr	r1, [r7, #8]
 800f4be:	68f8      	ldr	r0, [r7, #12]
 800f4c0:	f002 f8af 	bl	8011622 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS3_SaIS3_EEEEEvT_S9_>
    }
 800f4c4:	bf00      	nop
 800f4c6:	3710      	adds	r7, #16
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}

0800f4cc <_ZSt12__miter_baseIPSt4pairIciEET_S3_>:
    __miter_base(_Iterator __it)
 800f4cc:	b480      	push	{r7}
 800f4ce:	b083      	sub	sp, #12
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	370c      	adds	r7, #12
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e0:	4770      	bx	lr

0800f4e2 <_ZSt13__copy_move_aILb0EPSt4pairIciES2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800f4e2:	b5b0      	push	{r4, r5, r7, lr}
 800f4e4:	b084      	sub	sp, #16
 800f4e6:	af00      	add	r7, sp, #0
 800f4e8:	60f8      	str	r0, [r7, #12]
 800f4ea:	60b9      	str	r1, [r7, #8]
 800f4ec:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800f4ee:	68f8      	ldr	r0, [r7, #12]
 800f4f0:	f002 f8ad 	bl	801164e <_ZSt12__niter_baseIPSt4pairIciEET_S3_>
 800f4f4:	4604      	mov	r4, r0
 800f4f6:	68b8      	ldr	r0, [r7, #8]
 800f4f8:	f002 f8a9 	bl	801164e <_ZSt12__niter_baseIPSt4pairIciEET_S3_>
 800f4fc:	4605      	mov	r5, r0
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	4618      	mov	r0, r3
 800f502:	f002 f8a4 	bl	801164e <_ZSt12__niter_baseIPSt4pairIciEET_S3_>
 800f506:	4603      	mov	r3, r0
 800f508:	461a      	mov	r2, r3
 800f50a:	4629      	mov	r1, r5
 800f50c:	4620      	mov	r0, r4
 800f50e:	f002 f8a9 	bl	8011664 <_ZSt14__copy_move_a1ILb0EPSt4pairIciES2_ET1_T0_S4_S3_>
 800f512:	4602      	mov	r2, r0
 800f514:	1d3b      	adds	r3, r7, #4
 800f516:	4611      	mov	r1, r2
 800f518:	4618      	mov	r0, r3
 800f51a:	f002 f8b3 	bl	8011684 <_ZSt12__niter_wrapIPSt4pairIciEET_RKS3_S3_>
 800f51e:	4603      	mov	r3, r0
    }
 800f520:	4618      	mov	r0, r3
 800f522:	3710      	adds	r7, #16
 800f524:	46bd      	mov	sp, r7
 800f526:	bdb0      	pop	{r4, r5, r7, pc}

0800f528 <_ZSt22__uninitialized_copy_aIPSt4pairIciES2_S1_ET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800f528:	b580      	push	{r7, lr}
 800f52a:	b084      	sub	sp, #16
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	60f8      	str	r0, [r7, #12]
 800f530:	60b9      	str	r1, [r7, #8]
 800f532:	607a      	str	r2, [r7, #4]
 800f534:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800f536:	687a      	ldr	r2, [r7, #4]
 800f538:	68b9      	ldr	r1, [r7, #8]
 800f53a:	68f8      	ldr	r0, [r7, #12]
 800f53c:	f002 f8ae 	bl	801169c <_ZSt18uninitialized_copyIPSt4pairIciES2_ET0_T_S4_S3_>
 800f540:	4603      	mov	r3, r0
 800f542:	4618      	mov	r0, r3
 800f544:	3710      	adds	r7, #16
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}

0800f54a <_ZSt7forwardIRcEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f54a:	b480      	push	{r7}
 800f54c:	b083      	sub	sp, #12
 800f54e:	af00      	add	r7, sp, #0
 800f550:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	4618      	mov	r0, r3
 800f556:	370c      	adds	r7, #12
 800f558:	46bd      	mov	sp, r7
 800f55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55e:	4770      	bx	lr

0800f560 <_ZNSt4pairIciEC1IRciLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800f560:	b580      	push	{r7, lr}
 800f562:	b084      	sub	sp, #16
 800f564:	af00      	add	r7, sp, #0
 800f566:	60f8      	str	r0, [r7, #12]
 800f568:	60b9      	str	r1, [r7, #8]
 800f56a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800f56c:	68b8      	ldr	r0, [r7, #8]
 800f56e:	f7ff ffec 	bl	800f54a <_ZSt7forwardIRcEOT_RNSt16remove_referenceIS1_E4typeE>
 800f572:	4603      	mov	r3, r0
 800f574:	781a      	ldrb	r2, [r3, #0]
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	701a      	strb	r2, [r3, #0]
 800f57a:	6878      	ldr	r0, [r7, #4]
 800f57c:	f7f9 fb32 	bl	8008be4 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800f580:	4603      	mov	r3, r0
 800f582:	681a      	ldr	r2, [r3, #0]
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	605a      	str	r2, [r3, #4]
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	4618      	mov	r0, r3
 800f58c:	3710      	adds	r7, #16
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}

0800f592 <_ZSt4moveIRSt4pairIciEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800f592:	b480      	push	{r7}
 800f594:	b083      	sub	sp, #12
 800f596:	af00      	add	r7, sp, #0
 800f598:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	4618      	mov	r0, r3
 800f59e:	370c      	adds	r7, #12
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a6:	4770      	bx	lr

0800f5a8 <_ZNSt6vectorISt4pairIciESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800f5a8:	b5b0      	push	{r4, r5, r7, lr}
 800f5aa:	b082      	sub	sp, #8
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
 800f5b0:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	685a      	ldr	r2, [r3, #4]
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	689b      	ldr	r3, [r3, #8]
 800f5ba:	429a      	cmp	r2, r3
 800f5bc:	d012      	beq.n	800f5e4 <_ZNSt6vectorISt4pairIciESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800f5be:	687c      	ldr	r4, [r7, #4]
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	685d      	ldr	r5, [r3, #4]
 800f5c4:	6838      	ldr	r0, [r7, #0]
 800f5c6:	f002 f87b 	bl	80116c0 <_ZSt7forwardISt4pairIciEEOT_RNSt16remove_referenceIS2_E4typeE>
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	461a      	mov	r2, r3
 800f5ce:	4629      	mov	r1, r5
 800f5d0:	4620      	mov	r0, r4
 800f5d2:	f002 f89a 	bl	801170a <_ZNSt16allocator_traitsISaISt4pairIciEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	685b      	ldr	r3, [r3, #4]
 800f5da:	f103 0208 	add.w	r2, r3, #8
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	605a      	str	r2, [r3, #4]
 800f5e2:	e00c      	b.n	800f5fe <_ZNSt6vectorISt4pairIciESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f7ff ff52 	bl	800f48e <_ZNSt6vectorISt4pairIciESaIS1_EE3endEv>
 800f5ea:	4604      	mov	r4, r0
 800f5ec:	6838      	ldr	r0, [r7, #0]
 800f5ee:	f002 f867 	bl	80116c0 <_ZSt7forwardISt4pairIciEEOT_RNSt16remove_referenceIS2_E4typeE>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	461a      	mov	r2, r3
 800f5f6:	4621      	mov	r1, r4
 800f5f8:	6878      	ldr	r0, [r7, #4]
 800f5fa:	f002 f899 	bl	8011730 <_ZNSt6vectorISt4pairIciESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800f5fe:	6878      	ldr	r0, [r7, #4]
 800f600:	f002 f912 	bl	8011828 <_ZNSt6vectorISt4pairIciESaIS1_EE4backEv>
 800f604:	4603      	mov	r3, r0
      }
 800f606:	4618      	mov	r0, r3
 800f608:	3708      	adds	r7, #8
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bdb0      	pop	{r4, r5, r7, pc}

0800f60e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f60e:	b480      	push	{r7}
 800f610:	b083      	sub	sp, #12
 800f612:	af00      	add	r7, sp, #0
 800f614:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	4618      	mov	r0, r3
 800f61a:	370c      	adds	r7, #12
 800f61c:	46bd      	mov	sp, r7
 800f61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f622:	4770      	bx	lr

0800f624 <_ZNSt4pairIfcEC1IRfRcLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800f624:	b580      	push	{r7, lr}
 800f626:	b084      	sub	sp, #16
 800f628:	af00      	add	r7, sp, #0
 800f62a:	60f8      	str	r0, [r7, #12]
 800f62c:	60b9      	str	r1, [r7, #8]
 800f62e:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800f630:	68b8      	ldr	r0, [r7, #8]
 800f632:	f7ff ffec 	bl	800f60e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 800f636:	4603      	mov	r3, r0
 800f638:	681a      	ldr	r2, [r3, #0]
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	601a      	str	r2, [r3, #0]
 800f63e:	6878      	ldr	r0, [r7, #4]
 800f640:	f7ff ff83 	bl	800f54a <_ZSt7forwardIRcEOT_RNSt16remove_referenceIS1_E4typeE>
 800f644:	4603      	mov	r3, r0
 800f646:	781a      	ldrb	r2, [r3, #0]
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	711a      	strb	r2, [r3, #4]
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	4618      	mov	r0, r3
 800f650:	3710      	adds	r7, #16
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}

0800f656 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800f656:	b580      	push	{r7, lr}
 800f658:	b084      	sub	sp, #16
 800f65a:	af00      	add	r7, sp, #0
 800f65c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	68da      	ldr	r2, [r3, #12]
 800f662:	f107 030c 	add.w	r3, r7, #12
 800f666:	4611      	mov	r1, r2
 800f668:	4618      	mov	r0, r3
 800f66a:	f001 fc02 	bl	8010e72 <_ZNSt17_Rb_tree_iteratorISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEEC1EPSt18_Rb_tree_node_base>
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	4618      	mov	r0, r3
 800f672:	3710      	adds	r7, #16
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}

0800f678 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800f678:	b580      	push	{r7, lr}
 800f67a:	b084      	sub	sp, #16
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	1d1a      	adds	r2, r3, #4
 800f684:	f107 030c 	add.w	r3, r7, #12
 800f688:	4611      	mov	r1, r2
 800f68a:	4618      	mov	r0, r3
 800f68c:	f001 fbf1 	bl	8010e72 <_ZNSt17_Rb_tree_iteratorISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEEC1EPSt18_Rb_tree_node_base>
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	4618      	mov	r0, r3
 800f694:	3710      	adds	r7, #16
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}

0800f69a <_ZNSt13_Rb_tree_nodeISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEE9_M_valptrEv>:
      _M_valptr()
 800f69a:	b580      	push	{r7, lr}
 800f69c:	b082      	sub	sp, #8
 800f69e:	af00      	add	r7, sp, #0
 800f6a0:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	3310      	adds	r3, #16
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f002 f8d9 	bl	801185e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKcS1_IfSt6vectorIS1_IciESaIS4_EEEEE6_M_ptrEv>
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	3708      	adds	r7, #8
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}

0800f6b6 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800f6b6:	b480      	push	{r7}
 800f6b8:	b083      	sub	sp, #12
 800f6ba:	af00      	add	r7, sp, #0
 800f6bc:	6078      	str	r0, [r7, #4]
 800f6be:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800f6c0:	683b      	ldr	r3, [r7, #0]
 800f6c2:	681a      	ldr	r2, [r3, #0]
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	601a      	str	r2, [r3, #0]
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	370c      	adds	r7, #12
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d4:	4770      	bx	lr

0800f6d6 <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb5Graph8DijkstraEccEUlRKNS2_4EdgeEE_EENS0_10_Iter_predIT_EES9_>:
    };

  template<typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
 800f6d6:	b580      	push	{r7, lr}
 800f6d8:	b084      	sub	sp, #16
 800f6da:	af00      	add	r7, sp, #0
 800f6dc:	6078      	str	r0, [r7, #4]
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 800f6de:	1d3b      	adds	r3, r7, #4
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f002 f8c8 	bl	8011876 <_ZSt4moveIRZN3jlb5Graph8DijkstraEccEUlRKNS0_4EdgeEE_EONSt16remove_referenceIT_E4typeEOS8_>
 800f6e6:	4602      	mov	r2, r0
 800f6e8:	f107 030c 	add.w	r3, r7, #12
 800f6ec:	6811      	ldr	r1, [r2, #0]
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f002 f8cc 	bl	801188c <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb5Graph8DijkstraEccEUlRKNS2_4EdgeEE_EC1ES7_>
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3710      	adds	r7, #16
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}

0800f6fe <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_5Graph8DijkstraEccEUlRKS3_E_EEET_SG_SG_T0_>:
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
 800f6fe:	b590      	push	{r4, r7, lr}
 800f700:	b085      	sub	sp, #20
 800f702:	af00      	add	r7, sp, #0
 800f704:	60f8      	str	r0, [r7, #12]
 800f706:	60b9      	str	r1, [r7, #8]
 800f708:	607a      	str	r2, [r7, #4]
		       std::__iterator_category(__first));
 800f70a:	f107 030c 	add.w	r3, r7, #12
 800f70e:	4618      	mov	r0, r3
 800f710:	f000 f80b 	bl	800f72a <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSA_>
      return __find_if(__first, __last, __pred,
 800f714:	4623      	mov	r3, r4
 800f716:	687a      	ldr	r2, [r7, #4]
 800f718:	68b9      	ldr	r1, [r7, #8]
 800f71a:	68f8      	ldr	r0, [r7, #12]
 800f71c:	f002 f912 	bl	8011944 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_5Graph8DijkstraEccEUlRKS3_E_EEET_SG_SG_T0_St26random_access_iterator_tag>
 800f720:	4603      	mov	r3, r0
    }
 800f722:	4618      	mov	r0, r3
 800f724:	3714      	adds	r7, #20
 800f726:	46bd      	mov	sp, r7
 800f728:	bd90      	pop	{r4, r7, pc}

0800f72a <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSA_>:
    __iterator_category(const _Iter&)
 800f72a:	b480      	push	{r7}
 800f72c:	b083      	sub	sp, #12
 800f72e:	af00      	add	r7, sp, #0
 800f730:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800f732:	4618      	mov	r0, r3
 800f734:	370c      	adds	r7, #12
 800f736:	46bd      	mov	sp, r7
 800f738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73c:	4770      	bx	lr

0800f73e <_ZSt10__distanceIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEENSt15iterator_traitsIT_E15difference_typeESA_SA_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f73e:	b580      	push	{r7, lr}
 800f740:	b084      	sub	sp, #16
 800f742:	af00      	add	r7, sp, #0
 800f744:	60f8      	str	r0, [r7, #12]
 800f746:	60b9      	str	r1, [r7, #8]
 800f748:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800f74a:	f107 020c 	add.w	r2, r7, #12
 800f74e:	f107 0308 	add.w	r3, r7, #8
 800f752:	4611      	mov	r1, r2
 800f754:	4618      	mov	r0, r3
 800f756:	f002 f8ab 	bl	80118b0 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800f75a:	4603      	mov	r3, r0
    }
 800f75c:	4618      	mov	r0, r3
 800f75e:	3710      	adds	r7, #16
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}

0800f764 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f764:	b480      	push	{r7}
 800f766:	b083      	sub	sp, #12
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	4618      	mov	r0, r3
 800f770:	370c      	adds	r7, #12
 800f772:	46bd      	mov	sp, r7
 800f774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f778:	4770      	bx	lr

0800f77a <_ZNSt4pairIciEC1IRiLb1EEERKcOT_>:
       constexpr pair(const _T1& __x, _U2&& __y)
 800f77a:	b580      	push	{r7, lr}
 800f77c:	b084      	sub	sp, #16
 800f77e:	af00      	add	r7, sp, #0
 800f780:	60f8      	str	r0, [r7, #12]
 800f782:	60b9      	str	r1, [r7, #8]
 800f784:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 800f786:	68bb      	ldr	r3, [r7, #8]
 800f788:	781a      	ldrb	r2, [r3, #0]
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	701a      	strb	r2, [r3, #0]
 800f78e:	6878      	ldr	r0, [r7, #4]
 800f790:	f7ff ffe8 	bl	800f764 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800f794:	4603      	mov	r3, r0
 800f796:	681a      	ldr	r2, [r3, #0]
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	605a      	str	r2, [r3, #4]
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	4618      	mov	r0, r3
 800f7a0:	3710      	adds	r7, #16
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}

0800f7a6 <_ZNSt4pairIciEC1IiLb1EEERKcOT_>:
       constexpr pair(const _T1& __x, _U2&& __y)
 800f7a6:	b580      	push	{r7, lr}
 800f7a8:	b084      	sub	sp, #16
 800f7aa:	af00      	add	r7, sp, #0
 800f7ac:	60f8      	str	r0, [r7, #12]
 800f7ae:	60b9      	str	r1, [r7, #8]
 800f7b0:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 800f7b2:	68bb      	ldr	r3, [r7, #8]
 800f7b4:	781a      	ldrb	r2, [r3, #0]
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	701a      	strb	r2, [r3, #0]
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f7f9 fa12 	bl	8008be4 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	681a      	ldr	r2, [r3, #0]
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	605a      	str	r2, [r3, #4]
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3710      	adds	r7, #16
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}

0800f7d2 <_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIciEES2_E17_S_select_on_copyERKS3_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800f7d2:	b580      	push	{r7, lr}
 800f7d4:	b082      	sub	sp, #8
 800f7d6:	af00      	add	r7, sp, #0
 800f7d8:	6078      	str	r0, [r7, #4]
 800f7da:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	6839      	ldr	r1, [r7, #0]
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	f002 f948 	bl	8011a76 <_ZNSt16allocator_traitsISaISt4pairIciEEE37select_on_container_copy_constructionERKS2_>
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	3708      	adds	r7, #8
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bd80      	pop	{r7, pc}

0800f7ee <_ZNSt12_Vector_baseISt4pairIciESaIS1_EEC1EjRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800f7ee:	b580      	push	{r7, lr}
 800f7f0:	b084      	sub	sp, #16
 800f7f2:	af00      	add	r7, sp, #0
 800f7f4:	60f8      	str	r0, [r7, #12]
 800f7f6:	60b9      	str	r1, [r7, #8]
 800f7f8:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	6879      	ldr	r1, [r7, #4]
 800f7fe:	4618      	mov	r0, r3
 800f800:	f002 f946 	bl	8011a90 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
 800f804:	68b9      	ldr	r1, [r7, #8]
 800f806:	68f8      	ldr	r0, [r7, #12]
 800f808:	f002 f954 	bl	8011ab4 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE17_M_create_storageEj>
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	4618      	mov	r0, r3
 800f810:	3710      	adds	r7, #16
 800f812:	46bd      	mov	sp, r7
 800f814:	bd80      	pop	{r7, pc}

0800f816 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIciESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800f816:	b580      	push	{r7, lr}
 800f818:	b084      	sub	sp, #16
 800f81a:	af00      	add	r7, sp, #0
 800f81c:	60f8      	str	r0, [r7, #12]
 800f81e:	60b9      	str	r1, [r7, #8]
 800f820:	607a      	str	r2, [r7, #4]
 800f822:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800f824:	687a      	ldr	r2, [r7, #4]
 800f826:	68b9      	ldr	r1, [r7, #8]
 800f828:	68f8      	ldr	r0, [r7, #12]
 800f82a:	f002 f95e 	bl	8011aea <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIciESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
 800f82e:	4603      	mov	r3, r0
 800f830:	4618      	mov	r0, r3
 800f832:	3710      	adds	r7, #16
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}

0800f838 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 800f838:	b580      	push	{r7, lr}
 800f83a:	b082      	sub	sp, #8
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800f840:	6878      	ldr	r0, [r7, #4]
 800f842:	f7f3 fe7b 	bl	800353c <_ZNSaIfEC1Ev>
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	4618      	mov	r0, r3
 800f84a:	f002 f960 	bl	8011b0e <_ZNSt11_Deque_baseIfSaIfEE16_Deque_impl_dataC1Ev>
	{ }
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	4618      	mov	r0, r3
 800f852:	3708      	adds	r7, #8
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}

0800f858 <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 800f858:	b590      	push	{r4, r7, lr}
 800f85a:	b089      	sub	sp, #36	; 0x24
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
 800f860:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 800f862:	2004      	movs	r0, #4
 800f864:	f7f5 fd89 	bl	800537a <_ZSt16__deque_buf_sizej>
 800f868:	4602      	mov	r2, r0
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f870:	3301      	adds	r3, #1
 800f872:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800f874:	2308      	movs	r3, #8
 800f876:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 800f878:	69fb      	ldr	r3, [r7, #28]
 800f87a:	3302      	adds	r3, #2
 800f87c:	613b      	str	r3, [r7, #16]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800f87e:	f107 0210 	add.w	r2, r7, #16
 800f882:	f107 030c 	add.w	r3, r7, #12
 800f886:	4611      	mov	r1, r2
 800f888:	4618      	mov	r0, r3
 800f88a:	f7f4 f8b8 	bl	80039fe <_ZSt3maxIjERKT_S2_S2_>
 800f88e:	4603      	mov	r3, r0
 800f890:	681a      	ldr	r2, [r3, #0]
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	685b      	ldr	r3, [r3, #4]
 800f89a:	4619      	mov	r1, r3
 800f89c:	6878      	ldr	r0, [r7, #4]
 800f89e:	f002 f94f 	bl	8011b40 <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>
 800f8a2:	4602      	mov	r2, r0
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	6859      	ldr	r1, [r3, #4]
 800f8b0:	69fb      	ldr	r3, [r7, #28]
 800f8b2:	1acb      	subs	r3, r1, r3
 800f8b4:	085b      	lsrs	r3, r3, #1
 800f8b6:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 800f8b8:	4413      	add	r3, r2
 800f8ba:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 800f8bc:	69fb      	ldr	r3, [r7, #28]
 800f8be:	009b      	lsls	r3, r3, #2
 800f8c0:	69ba      	ldr	r2, [r7, #24]
 800f8c2:	4413      	add	r3, r2
 800f8c4:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 800f8c6:	697a      	ldr	r2, [r7, #20]
 800f8c8:	69b9      	ldr	r1, [r7, #24]
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f002 f955 	bl	8011b7a <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	3308      	adds	r3, #8
 800f8d4:	69b9      	ldr	r1, [r7, #24]
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f002 f96a 	bl	8011bb0 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	f103 0218 	add.w	r2, r3, #24
 800f8e2:	697b      	ldr	r3, [r7, #20]
 800f8e4:	3b04      	subs	r3, #4
 800f8e6:	4619      	mov	r1, r3
 800f8e8:	4610      	mov	r0, r2
 800f8ea:	f002 f961 	bl	8011bb0 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	68da      	ldr	r2, [r3, #12]
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 800f8fa:	2004      	movs	r0, #4
 800f8fc:	f7f5 fd3d 	bl	800537a <_ZSt16__deque_buf_sizej>
 800f900:	4602      	mov	r2, r0
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	fbb3 f1f2 	udiv	r1, r3, r2
 800f908:	fb01 f202 	mul.w	r2, r1, r2
 800f90c:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 800f90e:	009b      	lsls	r3, r3, #2
 800f910:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	619a      	str	r2, [r3, #24]
    }
 800f916:	bf00      	nop
 800f918:	3724      	adds	r7, #36	; 0x24
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd90      	pop	{r4, r7, pc}

0800f91e <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_>:
    _Deque_base<_Tp, _Alloc>::
 800f91e:	b580      	push	{r7, lr}
 800f920:	b086      	sub	sp, #24
 800f922:	af00      	add	r7, sp, #0
 800f924:	60f8      	str	r0, [r7, #12]
 800f926:	60b9      	str	r1, [r7, #8]
 800f928:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	617b      	str	r3, [r7, #20]
 800f92e:	e008      	b.n	800f942 <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_+0x24>
	_M_deallocate_node(*__n);
 800f930:	697b      	ldr	r3, [r7, #20]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	4619      	mov	r1, r3
 800f936:	68f8      	ldr	r0, [r7, #12]
 800f938:	f002 f953 	bl	8011be2 <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800f93c:	697b      	ldr	r3, [r7, #20]
 800f93e:	3304      	adds	r3, #4
 800f940:	617b      	str	r3, [r7, #20]
 800f942:	697a      	ldr	r2, [r7, #20]
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	429a      	cmp	r2, r3
 800f948:	d3f2      	bcc.n	800f930 <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_+0x12>
    }
 800f94a:	bf00      	nop
 800f94c:	bf00      	nop
 800f94e:	3718      	adds	r7, #24
 800f950:	46bd      	mov	sp, r7
 800f952:	bd80      	pop	{r7, pc}

0800f954 <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 800f954:	b580      	push	{r7, lr}
 800f956:	b086      	sub	sp, #24
 800f958:	af00      	add	r7, sp, #0
 800f95a:	60f8      	str	r0, [r7, #12]
 800f95c:	60b9      	str	r1, [r7, #8]
 800f95e:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800f960:	f107 0314 	add.w	r3, r7, #20
 800f964:	68f9      	ldr	r1, [r7, #12]
 800f966:	4618      	mov	r0, r3
 800f968:	f002 f94e 	bl	8011c08 <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 800f96c:	f107 0314 	add.w	r3, r7, #20
 800f970:	687a      	ldr	r2, [r7, #4]
 800f972:	68b9      	ldr	r1, [r7, #8]
 800f974:	4618      	mov	r0, r3
 800f976:	f002 f963 	bl	8011c40 <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j>
      }
 800f97a:	f107 0314 	add.w	r3, r7, #20
 800f97e:	4618      	mov	r0, r3
 800f980:	f002 f953 	bl	8011c2a <_ZNSaIPfED1Ev>
 800f984:	3718      	adds	r7, #24
 800f986:	46bd      	mov	sp, r7
 800f988:	bd80      	pop	{r7, pc}

0800f98a <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800f98a:	b480      	push	{r7}
 800f98c:	b083      	sub	sp, #12
 800f98e:	af00      	add	r7, sp, #0
 800f990:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	4618      	mov	r0, r3
 800f996:	370c      	adds	r7, #12
 800f998:	46bd      	mov	sp, r7
 800f99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99e:	4770      	bx	lr

0800f9a0 <_ZNSt5dequeIfSaIfEE15_M_destroy_dataESt15_Deque_iteratorIfRfPfES5_RKS0_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 800f9a0:	b480      	push	{r7}
 800f9a2:	b08d      	sub	sp, #52	; 0x34
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	60f8      	str	r0, [r7, #12]
 800f9a8:	60b9      	str	r1, [r7, #8]
 800f9aa:	607a      	str	r2, [r7, #4]
 800f9ac:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 800f9ae:	bf00      	nop
 800f9b0:	3734      	adds	r7, #52	; 0x34
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b8:	4770      	bx	lr
	...

0800f9bc <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 800f9bc:	b5b0      	push	{r4, r5, r7, lr}
 800f9be:	b082      	sub	sp, #8
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
 800f9c4:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 800f9c6:	6878      	ldr	r0, [r7, #4]
 800f9c8:	f7fe fb9b 	bl	800e102 <_ZNKSt5dequeIfSaIfEE4sizeEv>
 800f9cc:	4604      	mov	r4, r0
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f002 f955 	bl	8011c7e <_ZNKSt5dequeIfSaIfEE8max_sizeEv>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	429c      	cmp	r4, r3
 800f9d8:	bf0c      	ite	eq
 800f9da:	2301      	moveq	r3, #1
 800f9dc:	2300      	movne	r3, #0
 800f9de:	b2db      	uxtb	r3, r3
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d002      	beq.n	800f9ea <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0x2e>
	  __throw_length_error(
 800f9e4:	4816      	ldr	r0, [pc, #88]	; (800fa40 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0x84>)
 800f9e6:	f016 f827 	bl	8025a38 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 800f9ea:	2101      	movs	r1, #1
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	f002 f957 	bl	8011ca0 <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 800f9f2:	687a      	ldr	r2, [r7, #4]
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9f8:	1d1c      	adds	r4, r3, #4
 800f9fa:	4610      	mov	r0, r2
 800f9fc:	f002 f96b 	bl	8011cd6 <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>
 800fa00:	4603      	mov	r3, r0
 800fa02:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 800fa04:	687c      	ldr	r4, [r7, #4]
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	699d      	ldr	r5, [r3, #24]
 800fa0a:	6838      	ldr	r0, [r7, #0]
 800fa0c:	f7f3 fef8 	bl	8003800 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800fa10:	4603      	mov	r3, r0
 800fa12:	461a      	mov	r2, r3
 800fa14:	4629      	mov	r1, r5
 800fa16:	4620      	mov	r0, r4
 800fa18:	f7f3 fe12 	bl	8003640 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f103 0218 	add.w	r2, r3, #24
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa26:	3304      	adds	r3, #4
 800fa28:	4619      	mov	r1, r3
 800fa2a:	4610      	mov	r0, r2
 800fa2c:	f002 f8c0 	bl	8011bb0 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	69da      	ldr	r2, [r3, #28]
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 800fa38:	bf00      	nop
 800fa3a:	3708      	adds	r7, #8
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	bdb0      	pop	{r4, r5, r7, pc}
 800fa40:	0802976c 	.word	0x0802976c

0800fa44 <_ZStmiRKSt15_Deque_iteratorIfRfPfES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b082      	sub	sp, #8
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
 800fa4c:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 800fa4e:	f002 f954 	bl	8011cfa <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 800fa52:	4603      	mov	r3, r0
 800fa54:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	68da      	ldr	r2, [r3, #12]
 800fa5a:	683b      	ldr	r3, [r7, #0]
 800fa5c:	68db      	ldr	r3, [r3, #12]
 800fa5e:	1ad3      	subs	r3, r2, r3
 800fa60:	109b      	asrs	r3, r3, #2
 800fa62:	461a      	mov	r2, r3
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	68db      	ldr	r3, [r3, #12]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	bf14      	ite	ne
 800fa6c:	2301      	movne	r3, #1
 800fa6e:	2300      	moveq	r3, #0
 800fa70:	b2db      	uxtb	r3, r3
 800fa72:	1ad3      	subs	r3, r2, r3
 800fa74:	fb01 f303 	mul.w	r3, r1, r3
	  + (__x._M_cur - __x._M_first)
 800fa78:	687a      	ldr	r2, [r7, #4]
 800fa7a:	6811      	ldr	r1, [r2, #0]
 800fa7c:	687a      	ldr	r2, [r7, #4]
 800fa7e:	6852      	ldr	r2, [r2, #4]
 800fa80:	1a8a      	subs	r2, r1, r2
 800fa82:	1092      	asrs	r2, r2, #2
 800fa84:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 800fa86:	683a      	ldr	r2, [r7, #0]
 800fa88:	6891      	ldr	r1, [r2, #8]
 800fa8a:	683a      	ldr	r2, [r7, #0]
 800fa8c:	6812      	ldr	r2, [r2, #0]
 800fa8e:	1a8a      	subs	r2, r1, r2
 800fa90:	1092      	asrs	r2, r2, #2
 800fa92:	4413      	add	r3, r2
      }
 800fa94:	4618      	mov	r0, r3
 800fa96:	3708      	adds	r7, #8
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}

0800fa9c <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b082      	sub	sp, #8
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
 800faa4:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800faa6:	6838      	ldr	r0, [r7, #0]
 800faa8:	f7f3 ffef 	bl	8003a8a <_ZSt10destroy_atIfEvPT_>
	}
 800faac:	bf00      	nop
 800faae:	3708      	adds	r7, #8
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}

0800fab4 <_ZNSt5dequeIfSaIfEE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b082      	sub	sp, #8
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	4618      	mov	r0, r3
 800fac0:	f7ff ff63 	bl	800f98a <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800fac4:	4602      	mov	r2, r0
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	689b      	ldr	r3, [r3, #8]
 800faca:	4619      	mov	r1, r3
 800facc:	4610      	mov	r0, r2
 800face:	f7ff ffe5 	bl	800fa9c <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 800fad2:	687a      	ldr	r2, [r7, #4]
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	68db      	ldr	r3, [r3, #12]
 800fad8:	4619      	mov	r1, r3
 800fada:	4610      	mov	r0, r2
 800fadc:	f002 f881 	bl	8011be2 <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f103 0208 	add.w	r2, r3, #8
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	695b      	ldr	r3, [r3, #20]
 800faea:	3304      	adds	r3, #4
 800faec:	4619      	mov	r1, r3
 800faee:	4610      	mov	r0, r2
 800faf0:	f002 f85e 	bl	8011bb0 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	68da      	ldr	r2, [r3, #12]
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	609a      	str	r2, [r3, #8]
    }
 800fafc:	bf00      	nop
 800fafe:	3708      	adds	r7, #8
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}

0800fb04 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 800fb04:	b480      	push	{r7}
 800fb06:	b083      	sub	sp, #12
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	681a      	ldr	r2, [r3, #0]
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	601a      	str	r2, [r3, #0]
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	685a      	ldr	r2, [r3, #4]
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	605a      	str	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	689a      	ldr	r2, [r3, #8]
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	609a      	str	r2, [r3, #8]
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	68da      	ldr	r2, [r3, #12]
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	60da      	str	r2, [r3, #12]
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	4618      	mov	r0, r3
 800fb32:	370c      	adds	r7, #12
 800fb34:	46bd      	mov	sp, r7
 800fb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3a:	4770      	bx	lr

0800fb3c <_ZSteqRKSt15_Deque_iteratorIfRfPfES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800fb3c:	b480      	push	{r7}
 800fb3e:	b083      	sub	sp, #12
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
 800fb44:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681a      	ldr	r2, [r3, #0]
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	429a      	cmp	r2, r3
 800fb50:	bf0c      	ite	eq
 800fb52:	2301      	moveq	r3, #1
 800fb54:	2300      	movne	r3, #0
 800fb56:	b2db      	uxtb	r3, r3
 800fb58:	4618      	mov	r0, r3
 800fb5a:	370c      	adds	r7, #12
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb62:	4770      	bx	lr

0800fb64 <_ZNSt15_Deque_iteratorIfRfPfEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b082      	sub	sp, #8
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
	++_M_cur;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	1d1a      	adds	r2, r3, #4
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	601a      	str	r2, [r3, #0]
	if (_M_cur == _M_last)
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681a      	ldr	r2, [r3, #0]
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	689b      	ldr	r3, [r3, #8]
 800fb7e:	429a      	cmp	r2, r3
 800fb80:	d10a      	bne.n	800fb98 <_ZNSt15_Deque_iteratorIfRfPfEppEv+0x34>
	    _M_set_node(_M_node + 1);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	68db      	ldr	r3, [r3, #12]
 800fb86:	3304      	adds	r3, #4
 800fb88:	4619      	mov	r1, r3
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	f002 f810 	bl	8011bb0 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
	    _M_cur = _M_first;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	685a      	ldr	r2, [r3, #4]
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	601a      	str	r2, [r3, #0]
	return *this;
 800fb98:	687b      	ldr	r3, [r7, #4]
      }
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	3708      	adds	r7, #8
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}

0800fba2 <_ZNKSt15_Deque_iteratorIfRfPfEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800fba2:	b480      	push	{r7}
 800fba4:	b083      	sub	sp, #12
 800fba6:	af00      	add	r7, sp, #0
 800fba8:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	4618      	mov	r0, r3
 800fbb0:	370c      	adds	r7, #12
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb8:	4770      	bx	lr

0800fbba <_ZNKSt16initializer_listIfE5beginEv>:
      begin() const noexcept { return _M_array; }
 800fbba:	b480      	push	{r7}
 800fbbc:	b083      	sub	sp, #12
 800fbbe:	af00      	add	r7, sp, #0
 800fbc0:	6078      	str	r0, [r7, #4]
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	370c      	adds	r7, #12
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd0:	4770      	bx	lr

0800fbd2 <_ZNKSt16initializer_listIfE3endEv>:
      end() const noexcept { return begin() + size(); }
 800fbd2:	b590      	push	{r4, r7, lr}
 800fbd4:	b083      	sub	sp, #12
 800fbd6:	af00      	add	r7, sp, #0
 800fbd8:	6078      	str	r0, [r7, #4]
 800fbda:	6878      	ldr	r0, [r7, #4]
 800fbdc:	f7ff ffed 	bl	800fbba <_ZNKSt16initializer_listIfE5beginEv>
 800fbe0:	4604      	mov	r4, r0
 800fbe2:	6878      	ldr	r0, [r7, #4]
 800fbe4:	f002 f891 	bl	8011d0a <_ZNKSt16initializer_listIfE4sizeEv>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	009b      	lsls	r3, r3, #2
 800fbec:	4423      	add	r3, r4
 800fbee:	4618      	mov	r0, r3
 800fbf0:	370c      	adds	r7, #12
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd90      	pop	{r4, r7, pc}

0800fbf6 <_ZSt11min_elementIPKfET_S2_S2_>:
   *  @return  Iterator referencing the first instance of the smallest value.
  */
  template<typename _ForwardIterator>
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    inline min_element(_ForwardIterator __first, _ForwardIterator __last)
 800fbf6:	b590      	push	{r4, r7, lr}
 800fbf8:	b083      	sub	sp, #12
 800fbfa:	af00      	add	r7, sp, #0
 800fbfc:	6078      	str	r0, [r7, #4]
 800fbfe:	6039      	str	r1, [r7, #0]
	    typename iterator_traits<_ForwardIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      return _GLIBCXX_STD_A::__min_element(__first, __last,
				__gnu_cxx::__ops::__iter_less_iter());
 800fc00:	f7f4 fd34 	bl	800466c <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
      return _GLIBCXX_STD_A::__min_element(__first, __last,
 800fc04:	4622      	mov	r2, r4
 800fc06:	6839      	ldr	r1, [r7, #0]
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f002 f8a4 	bl	8011d56 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_>
 800fc0e:	4603      	mov	r3, r0
    }
 800fc10:	4618      	mov	r0, r3
 800fc12:	370c      	adds	r7, #12
 800fc14:	46bd      	mov	sp, r7
 800fc16:	bd90      	pop	{r4, r7, pc}

0800fc18 <_ZNSt6vectorIcSaIcEE15_M_erase_at_endEPc>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800fc18:	b590      	push	{r4, r7, lr}
 800fc1a:	b085      	sub	sp, #20
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
 800fc20:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	685a      	ldr	r2, [r3, #4]
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	1ad3      	subs	r3, r2, r3
 800fc2a:	60fb      	str	r3, [r7, #12]
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d00e      	beq.n	800fc50 <_ZNSt6vectorIcSaIcEE15_M_erase_at_endEPc+0x38>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	4618      	mov	r0, r3
 800fc3a:	f7fe fd8c 	bl	800e756 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800fc3e:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800fc40:	461a      	mov	r2, r3
 800fc42:	4621      	mov	r1, r4
 800fc44:	6838      	ldr	r0, [r7, #0]
 800fc46:	f7fe fda2 	bl	800e78e <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	683a      	ldr	r2, [r7, #0]
 800fc4e:	605a      	str	r2, [r3, #4]
      }
 800fc50:	bf00      	nop
 800fc52:	3714      	adds	r7, #20
 800fc54:	46bd      	mov	sp, r7
 800fc56:	bd90      	pop	{r4, r7, pc}

0800fc58 <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 800fc58:	b480      	push	{r7}
 800fc5a:	b083      	sub	sp, #12
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	4618      	mov	r0, r3
 800fc64:	370c      	adds	r7, #12
 800fc66:	46bd      	mov	sp, r7
 800fc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6c:	4770      	bx	lr

0800fc6e <_ZNSt6vectorIcSaIcEE12emplace_backIJcEEERcDpOT_>:
      vector<_Tp, _Alloc>::
 800fc6e:	b5b0      	push	{r4, r5, r7, lr}
 800fc70:	b082      	sub	sp, #8
 800fc72:	af00      	add	r7, sp, #0
 800fc74:	6078      	str	r0, [r7, #4]
 800fc76:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	685a      	ldr	r2, [r3, #4]
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	689b      	ldr	r3, [r3, #8]
 800fc80:	429a      	cmp	r2, r3
 800fc82:	d011      	beq.n	800fca8 <_ZNSt6vectorIcSaIcEE12emplace_backIJcEEERcDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800fc84:	687c      	ldr	r4, [r7, #4]
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	685d      	ldr	r5, [r3, #4]
 800fc8a:	6838      	ldr	r0, [r7, #0]
 800fc8c:	f7f9 f855 	bl	8008d3a <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>
 800fc90:	4603      	mov	r3, r0
 800fc92:	461a      	mov	r2, r3
 800fc94:	4629      	mov	r1, r5
 800fc96:	4620      	mov	r0, r4
 800fc98:	f002 f89e 	bl	8011dd8 <_ZNSt16allocator_traitsISaIcEE9constructIcJcEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	685b      	ldr	r3, [r3, #4]
 800fca0:	1c5a      	adds	r2, r3, #1
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	605a      	str	r2, [r3, #4]
 800fca6:	e00c      	b.n	800fcc2 <_ZNSt6vectorIcSaIcEE12emplace_backIJcEEERcDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f7fd fece 	bl	800da4a <_ZNSt6vectorIcSaIcEE3endEv>
 800fcae:	4604      	mov	r4, r0
 800fcb0:	6838      	ldr	r0, [r7, #0]
 800fcb2:	f7f9 f842 	bl	8008d3a <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	461a      	mov	r2, r3
 800fcba:	4621      	mov	r1, r4
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f002 f89d 	bl	8011dfc <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_>
	return back();
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	f002 f914 	bl	8011ef0 <_ZNSt6vectorIcSaIcEE4backEv>
 800fcc8:	4603      	mov	r3, r0
      }
 800fcca:	4618      	mov	r0, r3
 800fccc:	3708      	adds	r7, #8
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	bdb0      	pop	{r4, r5, r7, pc}

0800fcd2 <_ZNKSt6vectorIcSaIcEE11_M_data_ptrIcEEPT_S4_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 800fcd2:	b480      	push	{r7}
 800fcd4:	b083      	sub	sp, #12
 800fcd6:	af00      	add	r7, sp, #0
 800fcd8:	6078      	str	r0, [r7, #4]
 800fcda:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	4618      	mov	r0, r3
 800fce0:	370c      	adds	r7, #12
 800fce2:	46bd      	mov	sp, r7
 800fce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce8:	4770      	bx	lr

0800fcea <_ZNKSt6vectorIcSaIcEE6cbeginEv>:
      cbegin() const noexcept
 800fcea:	b580      	push	{r7, lr}
 800fcec:	b084      	sub	sp, #16
 800fcee:	af00      	add	r7, sp, #0
 800fcf0:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800fcf2:	687a      	ldr	r2, [r7, #4]
 800fcf4:	f107 030c 	add.w	r3, r7, #12
 800fcf8:	4611      	mov	r1, r2
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f000 fa73 	bl	80101e6 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	4618      	mov	r0, r3
 800fd04:	3710      	adds	r7, #16
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}

0800fd0a <_ZN9__gnu_cxxmiIPKcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800fd0a:	b590      	push	{r4, r7, lr}
 800fd0c:	b083      	sub	sp, #12
 800fd0e:	af00      	add	r7, sp, #0
 800fd10:	6078      	str	r0, [r7, #4]
 800fd12:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800fd14:	6878      	ldr	r0, [r7, #4]
 800fd16:	f002 f906 	bl	8011f26 <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	681c      	ldr	r4, [r3, #0]
 800fd1e:	6838      	ldr	r0, [r7, #0]
 800fd20:	f002 f901 	bl	8011f26 <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>
 800fd24:	4603      	mov	r3, r0
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	1ae3      	subs	r3, r4, r3
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	370c      	adds	r7, #12
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd90      	pop	{r4, r7, pc}

0800fd32 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800fd32:	b580      	push	{r7, lr}
 800fd34:	b084      	sub	sp, #16
 800fd36:	af00      	add	r7, sp, #0
 800fd38:	6078      	str	r0, [r7, #4]
 800fd3a:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681a      	ldr	r2, [r3, #0]
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	4413      	add	r3, r2
 800fd44:	60fb      	str	r3, [r7, #12]
 800fd46:	f107 020c 	add.w	r2, r7, #12
 800fd4a:	f107 0308 	add.w	r3, r7, #8
 800fd4e:	4611      	mov	r1, r2
 800fd50:	4618      	mov	r0, r3
 800fd52:	f7ff face 	bl	800f2f2 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 800fd56:	68bb      	ldr	r3, [r7, #8]
 800fd58:	4618      	mov	r0, r3
 800fd5a:	3710      	adds	r7, #16
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}

0800fd60 <_ZNSt6vectorIcSaIcEE18_M_insert_dispatchIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St12__false_type>:
	_M_insert_dispatch(iterator __pos, _InputIterator __first,
 800fd60:	b5b0      	push	{r4, r5, r7, lr}
 800fd62:	b088      	sub	sp, #32
 800fd64:	af02      	add	r7, sp, #8
 800fd66:	60f8      	str	r0, [r7, #12]
 800fd68:	60b9      	str	r1, [r7, #8]
 800fd6a:	607a      	str	r2, [r7, #4]
 800fd6c:	603b      	str	r3, [r7, #0]
	  _M_range_insert(__pos, __first, __last,
 800fd6e:	687c      	ldr	r4, [r7, #4]
			  std::__iterator_category(__first));
 800fd70:	1d3b      	adds	r3, r7, #4
 800fd72:	4618      	mov	r0, r3
 800fd74:	f7fe fb39 	bl	800e3ea <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
	  _M_range_insert(__pos, __first, __last,
 800fd78:	f88d 5000 	strb.w	r5, [sp]
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	4622      	mov	r2, r4
 800fd80:	68b9      	ldr	r1, [r7, #8]
 800fd82:	68f8      	ldr	r0, [r7, #12]
 800fd84:	f002 f91e 	bl	8011fc4 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag>
	}
 800fd88:	bf00      	nop
 800fd8a:	3718      	adds	r7, #24
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bdb0      	pop	{r4, r5, r7, pc}

0800fd90 <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 800fd90:	b480      	push	{r7}
 800fd92:	b083      	sub	sp, #12
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800fd98:	4618      	mov	r0, r3
 800fd9a:	370c      	adds	r7, #12
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda2:	4770      	bx	lr

0800fda4 <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag>:
    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b084      	sub	sp, #16
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	60f8      	str	r0, [r7, #12]
 800fdac:	60b9      	str	r1, [r7, #8]
 800fdae:	713a      	strb	r2, [r7, #4]
      if (__first == __last)
 800fdb0:	68fa      	ldr	r2, [r7, #12]
 800fdb2:	68bb      	ldr	r3, [r7, #8]
 800fdb4:	429a      	cmp	r2, r3
 800fdb6:	d012      	beq.n	800fdde <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag+0x3a>
      --__last;
 800fdb8:	68bb      	ldr	r3, [r7, #8]
 800fdba:	3b01      	subs	r3, #1
 800fdbc:	60bb      	str	r3, [r7, #8]
      while (__first < __last)
 800fdbe:	e009      	b.n	800fdd4 <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag+0x30>
	  std::iter_swap(__first, __last);
 800fdc0:	68b9      	ldr	r1, [r7, #8]
 800fdc2:	68f8      	ldr	r0, [r7, #12]
 800fdc4:	f002 fa06 	bl	80121d4 <_ZSt9iter_swapIPbS0_EvT_T0_>
	  ++__first;
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	3301      	adds	r3, #1
 800fdcc:	60fb      	str	r3, [r7, #12]
	  --__last;
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	3b01      	subs	r3, #1
 800fdd2:	60bb      	str	r3, [r7, #8]
      while (__first < __last)
 800fdd4:	68fa      	ldr	r2, [r7, #12]
 800fdd6:	68bb      	ldr	r3, [r7, #8]
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	d3f1      	bcc.n	800fdc0 <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag+0x1c>
 800fddc:	e000      	b.n	800fde0 <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag+0x3c>
	return;
 800fdde:	bf00      	nop
    }
 800fde0:	3710      	adds	r7, #16
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}

0800fde6 <_ZSt12__niter_baseIPKcET_S2_>:
    __niter_base(_Iterator __it)
 800fde6:	b480      	push	{r7}
 800fde8:	b083      	sub	sp, #12
 800fdea:	af00      	add	r7, sp, #0
 800fdec:	6078      	str	r0, [r7, #4]
    { return __it; }
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	370c      	adds	r7, #12
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfa:	4770      	bx	lr

0800fdfc <_ZSt12__niter_baseIPcET_S1_>:
    __niter_base(_Iterator __it)
 800fdfc:	b480      	push	{r7}
 800fdfe:	b083      	sub	sp, #12
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
    { return __it; }
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	4618      	mov	r0, r3
 800fe08:	370c      	adds	r7, #12
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe10:	4770      	bx	lr

0800fe12 <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800fe12:	b580      	push	{r7, lr}
 800fe14:	b084      	sub	sp, #16
 800fe16:	af00      	add	r7, sp, #0
 800fe18:	60f8      	str	r0, [r7, #12]
 800fe1a:	60b9      	str	r1, [r7, #8]
 800fe1c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800fe1e:	687a      	ldr	r2, [r7, #4]
 800fe20:	68b9      	ldr	r1, [r7, #8]
 800fe22:	68f8      	ldr	r0, [r7, #12]
 800fe24:	f002 f9e3 	bl	80121ee <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	3710      	adds	r7, #16
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	bd80      	pop	{r7, pc}

0800fe32 <_ZSt12__niter_wrapIPcET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800fe32:	b480      	push	{r7}
 800fe34:	b083      	sub	sp, #12
 800fe36:	af00      	add	r7, sp, #0
 800fe38:	6078      	str	r0, [r7, #4]
 800fe3a:	6039      	str	r1, [r7, #0]
    { return __res; }
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	4618      	mov	r0, r3
 800fe40:	370c      	adds	r7, #12
 800fe42:	46bd      	mov	sp, r7
 800fe44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe48:	4770      	bx	lr

0800fe4a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 800fe4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe4c:	b087      	sub	sp, #28
 800fe4e:	af00      	add	r7, sp, #0
 800fe50:	60f8      	str	r0, [r7, #12]
 800fe52:	60b9      	str	r1, [r7, #8]
 800fe54:	607a      	str	r2, [r7, #4]
 800fe56:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 800fe58:	e01b      	b.n	800fe92 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x48>
	  if (__depth_limit == 0)
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d106      	bne.n	800fe6e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x24>
	      std::__partial_sort(__first, __last, __last, __comp);
 800fe60:	4633      	mov	r3, r6
 800fe62:	68ba      	ldr	r2, [r7, #8]
 800fe64:	68b9      	ldr	r1, [r7, #8]
 800fe66:	68f8      	ldr	r0, [r7, #12]
 800fe68:	f002 f9fc 	bl	8012264 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
 800fe6c:	e021      	b.n	800feb2 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x68>
	  --__depth_limit;
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	3b01      	subs	r3, #1
 800fe72:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 800fe74:	462a      	mov	r2, r5
 800fe76:	68b9      	ldr	r1, [r7, #8]
 800fe78:	68f8      	ldr	r0, [r7, #12]
 800fe7a:	f002 fa0a 	bl	8012292 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>
 800fe7e:	4603      	mov	r3, r0
 800fe80:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 800fe82:	4623      	mov	r3, r4
 800fe84:	687a      	ldr	r2, [r7, #4]
 800fe86:	68b9      	ldr	r1, [r7, #8]
 800fe88:	6978      	ldr	r0, [r7, #20]
 800fe8a:	f7ff ffde 	bl	800fe4a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  __last = __cut;
 800fe8e:	697b      	ldr	r3, [r7, #20]
 800fe90:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 800fe92:	f107 020c 	add.w	r2, r7, #12
 800fe96:	f107 0308 	add.w	r3, r7, #8
 800fe9a:	4611      	mov	r1, r2
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	f7f3 fd21 	bl	80038e4 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800fea2:	4603      	mov	r3, r0
 800fea4:	2b10      	cmp	r3, #16
 800fea6:	bfcc      	ite	gt
 800fea8:	2301      	movgt	r3, #1
 800feaa:	2300      	movle	r3, #0
 800feac:	b2db      	uxtb	r3, r3
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d1d3      	bne.n	800fe5a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x10>
    }
 800feb2:	371c      	adds	r7, #28
 800feb4:	46bd      	mov	sp, r7
 800feb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800feb8 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 800feb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800feba:	b085      	sub	sp, #20
 800febc:	af00      	add	r7, sp, #0
 800febe:	60f8      	str	r0, [r7, #12]
 800fec0:	60b9      	str	r1, [r7, #8]
 800fec2:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 800fec4:	f107 020c 	add.w	r2, r7, #12
 800fec8:	f107 0308 	add.w	r3, r7, #8
 800fecc:	4611      	mov	r1, r2
 800fece:	4618      	mov	r0, r3
 800fed0:	f7f3 fd08 	bl	80038e4 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800fed4:	4603      	mov	r3, r0
 800fed6:	2b10      	cmp	r3, #16
 800fed8:	bfcc      	ite	gt
 800feda:	2301      	movgt	r3, #1
 800fedc:	2300      	movle	r3, #0
 800fede:	b2db      	uxtb	r3, r3
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d018      	beq.n	800ff16 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 800fee4:	f107 030c 	add.w	r3, r7, #12
 800fee8:	2110      	movs	r1, #16
 800feea:	4618      	mov	r0, r3
 800feec:	f002 fa11 	bl	8012312 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800fef0:	4603      	mov	r3, r0
 800fef2:	4632      	mov	r2, r6
 800fef4:	4619      	mov	r1, r3
 800fef6:	68f8      	ldr	r0, [r7, #12]
 800fef8:	f002 fa7c 	bl	80123f4 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 800fefc:	f107 030c 	add.w	r3, r7, #12
 800ff00:	2110      	movs	r1, #16
 800ff02:	4618      	mov	r0, r3
 800ff04:	f002 fa05 	bl	8012312 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	462a      	mov	r2, r5
 800ff0c:	68b9      	ldr	r1, [r7, #8]
 800ff0e:	4618      	mov	r0, r3
 800ff10:	f002 fad9 	bl	80124c6 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 800ff14:	e004      	b.n	800ff20 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 800ff16:	4622      	mov	r2, r4
 800ff18:	68b9      	ldr	r1, [r7, #8]
 800ff1a:	68f8      	ldr	r0, [r7, #12]
 800ff1c:	f002 fa6a 	bl	80123f4 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 800ff20:	bf00      	nop
 800ff22:	3714      	adds	r7, #20
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ff28 <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEfEUlbE_EENS0_10_Iter_predIT_EES6_>:
    __pred_iter(_Predicate __pred)
 800ff28:	b5b0      	push	{r4, r5, r7, lr}
 800ff2a:	b084      	sub	sp, #16
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	7138      	strb	r0, [r7, #4]
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 800ff30:	1d3b      	adds	r3, r7, #4
 800ff32:	4618      	mov	r0, r3
 800ff34:	f002 faef 	bl	8012516 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
 800ff38:	f107 030c 	add.w	r3, r7, #12
 800ff3c:	4629      	mov	r1, r5
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f002 faf4 	bl	801252c <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE_EC1ES4_>
 800ff44:	bf00      	nop
 800ff46:	4620      	mov	r0, r4
 800ff48:	3710      	adds	r7, #16
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bdb0      	pop	{r4, r5, r7, pc}

0800ff4e <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_>:
    __find_if_not(_InputIterator __first, _InputIterator __last,
 800ff4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff50:	b085      	sub	sp, #20
 800ff52:	af00      	add	r7, sp, #0
 800ff54:	60f8      	str	r0, [r7, #12]
 800ff56:	60b9      	str	r1, [r7, #8]
 800ff58:	713a      	strb	r2, [r7, #4]
      return std::__find_if(__first, __last,
 800ff5a:	68fc      	ldr	r4, [r7, #12]
 800ff5c:	7938      	ldrb	r0, [r7, #4]
 800ff5e:	f002 faf3 	bl	8012548 <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEfEUlbE_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>
			    std::__iterator_category(__first));
 800ff62:	f107 030c 	add.w	r3, r7, #12
 800ff66:	4618      	mov	r0, r3
 800ff68:	f7ff ff12 	bl	800fd90 <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__find_if(__first, __last,
 800ff6c:	4633      	mov	r3, r6
 800ff6e:	462a      	mov	r2, r5
 800ff70:	68b9      	ldr	r1, [r7, #8]
 800ff72:	4620      	mov	r0, r4
 800ff74:	f002 fb0f 	bl	8012596 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag>
 800ff78:	4603      	mov	r3, r0
    }
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	3714      	adds	r7, #20
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ff82 <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEfEUlbE0_EENS0_10_Iter_predIT_EES6_>:
    __pred_iter(_Predicate __pred)
 800ff82:	b5b0      	push	{r4, r5, r7, lr}
 800ff84:	b084      	sub	sp, #16
 800ff86:	af00      	add	r7, sp, #0
 800ff88:	7138      	strb	r0, [r7, #4]
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 800ff8a:	1d3b      	adds	r3, r7, #4
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f002 fb81 	bl	8012694 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
 800ff92:	f107 030c 	add.w	r3, r7, #12
 800ff96:	4629      	mov	r1, r5
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f002 fb86 	bl	80126aa <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE0_EC1ES4_>
 800ff9e:	bf00      	nop
 800ffa0:	4620      	mov	r0, r4
 800ffa2:	3710      	adds	r7, #16
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bdb0      	pop	{r4, r5, r7, pc}

0800ffa8 <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_>:
    __find_if_not(_InputIterator __first, _InputIterator __last,
 800ffa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffaa:	b085      	sub	sp, #20
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	60f8      	str	r0, [r7, #12]
 800ffb0:	60b9      	str	r1, [r7, #8]
 800ffb2:	713a      	strb	r2, [r7, #4]
      return std::__find_if(__first, __last,
 800ffb4:	68fc      	ldr	r4, [r7, #12]
 800ffb6:	7938      	ldrb	r0, [r7, #4]
 800ffb8:	f002 fb85 	bl	80126c6 <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>
			    std::__iterator_category(__first));
 800ffbc:	f107 030c 	add.w	r3, r7, #12
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	f7ff fee5 	bl	800fd90 <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__find_if(__first, __last,
 800ffc6:	4633      	mov	r3, r6
 800ffc8:	462a      	mov	r2, r5
 800ffca:	68b9      	ldr	r1, [r7, #8]
 800ffcc:	4620      	mov	r0, r4
 800ffce:	f002 fba1 	bl	8012714 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag>
 800ffd2:	4603      	mov	r3, r0
    }
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	3714      	adds	r7, #20
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ffdc <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b082      	sub	sp, #8
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
 800ffe4:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800ffe6:	6839      	ldr	r1, [r7, #0]
 800ffe8:	6878      	ldr	r0, [r7, #4]
 800ffea:	f002 fc12 	bl	8012812 <_ZNSaIfEC1ERKS_>
 800ffee:	6878      	ldr	r0, [r7, #4]
 800fff0:	3708      	adds	r7, #8
 800fff2:	46bd      	mov	sp, r7
 800fff4:	bd80      	pop	{r7, pc}

0800fff6 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800fff6:	b580      	push	{r7, lr}
 800fff8:	b082      	sub	sp, #8
 800fffa:	af00      	add	r7, sp, #0
 800fffc:	6078      	str	r0, [r7, #4]
 800fffe:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8010000:	6839      	ldr	r1, [r7, #0]
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f002 fc05 	bl	8012812 <_ZNSaIfEC1ERKS_>
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	4618      	mov	r0, r3
 801000c:	f7f3 faa2 	bl	8003554 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	4618      	mov	r0, r3
 8010014:	3708      	adds	r7, #8
 8010016:	46bd      	mov	sp, r7
 8010018:	bd80      	pop	{r7, pc}

0801001a <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 801001a:	b580      	push	{r7, lr}
 801001c:	b082      	sub	sp, #8
 801001e:	af00      	add	r7, sp, #0
 8010020:	6078      	str	r0, [r7, #4]
 8010022:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8010024:	6839      	ldr	r1, [r7, #0]
 8010026:	6878      	ldr	r0, [r7, #4]
 8010028:	f7f3 fc71 	bl	800390e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 801002c:	4602      	mov	r2, r0
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	681a      	ldr	r2, [r3, #0]
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681a      	ldr	r2, [r3, #0]
 801003e:	683b      	ldr	r3, [r7, #0]
 8010040:	009b      	lsls	r3, r3, #2
 8010042:	441a      	add	r2, r3
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	609a      	str	r2, [r3, #8]
      }
 8010048:	bf00      	nop
 801004a:	3708      	adds	r7, #8
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}

08010050 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8010050:	b480      	push	{r7}
 8010052:	b083      	sub	sp, #12
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
 8010058:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	681a      	ldr	r2, [r3, #0]
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	601a      	str	r2, [r3, #0]
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	4618      	mov	r0, r3
 8010066:	370c      	adds	r7, #12
 8010068:	46bd      	mov	sp, r7
 801006a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006e:	4770      	bx	lr

08010070 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8010070:	b580      	push	{r7, lr}
 8010072:	b086      	sub	sp, #24
 8010074:	af00      	add	r7, sp, #0
 8010076:	60f8      	str	r0, [r7, #12]
 8010078:	60b9      	str	r1, [r7, #8]
 801007a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 801007c:	2301      	movs	r3, #1
 801007e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8010080:	687a      	ldr	r2, [r7, #4]
 8010082:	68b9      	ldr	r1, [r7, #8]
 8010084:	68f8      	ldr	r0, [r7, #12]
 8010086:	f002 fbd2 	bl	801282e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 801008a:	4603      	mov	r3, r0
    }
 801008c:	4618      	mov	r0, r3
 801008e:	3718      	adds	r7, #24
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}

08010094 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:
    __miter_base(_Iterator __it)
 8010094:	b480      	push	{r7}
 8010096:	b083      	sub	sp, #12
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
    { return __it; }
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	4618      	mov	r0, r3
 80100a0:	370c      	adds	r7, #12
 80100a2:	46bd      	mov	sp, r7
 80100a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a8:	4770      	bx	lr

080100aa <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80100aa:	b5b0      	push	{r4, r5, r7, lr}
 80100ac:	b084      	sub	sp, #16
 80100ae:	af00      	add	r7, sp, #0
 80100b0:	60f8      	str	r0, [r7, #12]
 80100b2:	60b9      	str	r1, [r7, #8]
 80100b4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80100b6:	68f8      	ldr	r0, [r7, #12]
 80100b8:	f002 fbc9 	bl	801284e <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80100bc:	4604      	mov	r4, r0
 80100be:	68b8      	ldr	r0, [r7, #8]
 80100c0:	f002 fbc5 	bl	801284e <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80100c4:	4605      	mov	r5, r0
 80100c6:	6878      	ldr	r0, [r7, #4]
 80100c8:	f002 fbcf 	bl	801286a <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80100cc:	4603      	mov	r3, r0
 80100ce:	461a      	mov	r2, r3
 80100d0:	4629      	mov	r1, r5
 80100d2:	4620      	mov	r0, r4
 80100d4:	f002 fbd7 	bl	8012886 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 80100d8:	4603      	mov	r3, r0
 80100da:	4619      	mov	r1, r3
 80100dc:	6878      	ldr	r0, [r7, #4]
 80100de:	f002 fbe2 	bl	80128a6 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 80100e2:	4603      	mov	r3, r0
    }
 80100e4:	4618      	mov	r0, r3
 80100e6:	3710      	adds	r7, #16
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bdb0      	pop	{r4, r5, r7, pc}

080100ec <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b082      	sub	sp, #8
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
 80100f4:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 80100f6:	f7f2 fd09 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 80100fa:	4603      	mov	r3, r0
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d004      	beq.n	801010a <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8010100:	6839      	ldr	r1, [r7, #0]
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	f002 fbe6 	bl	80128d4 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>
 8010108:	e003      	b.n	8010112 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_+0x26>
	__destroy(__first, __last);
 801010a:	6839      	ldr	r1, [r7, #0]
 801010c:	6878      	ldr	r0, [r7, #4]
 801010e:	f002 fc08 	bl	8012922 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>
    }
 8010112:	3708      	adds	r7, #8
 8010114:	46bd      	mov	sp, r7
 8010116:	bd80      	pop	{r7, pc}

08010118 <_ZSt14__copy_move_a1ILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8010118:	b580      	push	{r7, lr}
 801011a:	b084      	sub	sp, #16
 801011c:	af00      	add	r7, sp, #0
 801011e:	60f8      	str	r0, [r7, #12]
 8010120:	60b9      	str	r1, [r7, #8]
 8010122:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8010124:	687a      	ldr	r2, [r7, #4]
 8010126:	68b9      	ldr	r1, [r7, #8]
 8010128:	68f8      	ldr	r0, [r7, #12]
 801012a:	f002 fc05 	bl	8012938 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>
 801012e:	4603      	mov	r3, r0
 8010130:	4618      	mov	r0, r3
 8010132:	3710      	adds	r7, #16
 8010134:	46bd      	mov	sp, r7
 8010136:	bd80      	pop	{r7, pc}

08010138 <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8010138:	b480      	push	{r7}
 801013a:	b083      	sub	sp, #12
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
 8010140:	6039      	str	r1, [r7, #0]
    { return __res; }
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	4618      	mov	r0, r3
 8010146:	370c      	adds	r7, #12
 8010148:	46bd      	mov	sp, r7
 801014a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014e:	4770      	bx	lr

08010150 <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8010150:	b580      	push	{r7, lr}
 8010152:	b086      	sub	sp, #24
 8010154:	af00      	add	r7, sp, #0
 8010156:	60f8      	str	r0, [r7, #12]
 8010158:	60b9      	str	r1, [r7, #8]
 801015a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 801015c:	2301      	movs	r3, #1
 801015e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8010160:	687a      	ldr	r2, [r7, #4]
 8010162:	68b9      	ldr	r1, [r7, #8]
 8010164:	68f8      	ldr	r0, [r7, #12]
 8010166:	f002 fc04 	bl	8012972 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>
 801016a:	4603      	mov	r3, r0
    }
 801016c:	4618      	mov	r0, r3
 801016e:	3718      	adds	r7, #24
 8010170:	46bd      	mov	sp, r7
 8010172:	bd80      	pop	{r7, pc}

08010174 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8010174:	b580      	push	{r7, lr}
 8010176:	b082      	sub	sp, #8
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
 801017c:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 801017e:	6839      	ldr	r1, [r7, #0]
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	f015 fb99 	bl	80258b8 <_ZNSaIcEC1ERKS_>
 8010186:	6878      	ldr	r0, [r7, #4]
 8010188:	3708      	adds	r7, #8
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}

0801018e <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 801018e:	b580      	push	{r7, lr}
 8010190:	b082      	sub	sp, #8
 8010192:	af00      	add	r7, sp, #0
 8010194:	6078      	str	r0, [r7, #4]
 8010196:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8010198:	6839      	ldr	r1, [r7, #0]
 801019a:	6878      	ldr	r0, [r7, #4]
 801019c:	f015 fb8c 	bl	80258b8 <_ZNSaIcEC1ERKS_>
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	4618      	mov	r0, r3
 80101a4:	f7fe fbd7 	bl	800e956 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>
	{ }
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	4618      	mov	r0, r3
 80101ac:	3708      	adds	r7, #8
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}

080101b2 <_ZNSt12_Vector_baseIcSaIcEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 80101b2:	b580      	push	{r7, lr}
 80101b4:	b082      	sub	sp, #8
 80101b6:	af00      	add	r7, sp, #0
 80101b8:	6078      	str	r0, [r7, #4]
 80101ba:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80101bc:	6839      	ldr	r1, [r7, #0]
 80101be:	6878      	ldr	r0, [r7, #4]
 80101c0:	f000 fb52 	bl	8010868 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 80101c4:	4602      	mov	r2, r0
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681a      	ldr	r2, [r3, #0]
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681a      	ldr	r2, [r3, #0]
 80101d6:	683b      	ldr	r3, [r7, #0]
 80101d8:	441a      	add	r2, r3
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	609a      	str	r2, [r3, #8]
      }
 80101de:	bf00      	nop
 80101e0:	3708      	adds	r7, #8
 80101e2:	46bd      	mov	sp, r7
 80101e4:	bd80      	pop	{r7, pc}

080101e6 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80101e6:	b480      	push	{r7}
 80101e8:	b083      	sub	sp, #12
 80101ea:	af00      	add	r7, sp, #0
 80101ec:	6078      	str	r0, [r7, #4]
 80101ee:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	681a      	ldr	r2, [r3, #0]
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	601a      	str	r2, [r3, #0]
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	4618      	mov	r0, r3
 80101fc:	370c      	adds	r7, #12
 80101fe:	46bd      	mov	sp, r7
 8010200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010204:	4770      	bx	lr

08010206 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8010206:	b580      	push	{r7, lr}
 8010208:	b086      	sub	sp, #24
 801020a:	af00      	add	r7, sp, #0
 801020c:	60f8      	str	r0, [r7, #12]
 801020e:	60b9      	str	r1, [r7, #8]
 8010210:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8010212:	2301      	movs	r3, #1
 8010214:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8010216:	687a      	ldr	r2, [r7, #4]
 8010218:	68b9      	ldr	r1, [r7, #8]
 801021a:	68f8      	ldr	r0, [r7, #12]
 801021c:	f002 fbb9 	bl	8012992 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcEET0_T_SC_SB_>
 8010220:	4603      	mov	r3, r0
    }
 8010222:	4618      	mov	r0, r3
 8010224:	3718      	adds	r7, #24
 8010226:	46bd      	mov	sp, r7
 8010228:	bd80      	pop	{r7, pc}

0801022a <_ZSt8_DestroyIPcEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 801022a:	b580      	push	{r7, lr}
 801022c:	b082      	sub	sp, #8
 801022e:	af00      	add	r7, sp, #0
 8010230:	6078      	str	r0, [r7, #4]
 8010232:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8010234:	f7f2 fc6a 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8010238:	4603      	mov	r3, r0
 801023a:	2b00      	cmp	r3, #0
 801023c:	d004      	beq.n	8010248 <_ZSt8_DestroyIPcEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 801023e:	6839      	ldr	r1, [r7, #0]
 8010240:	6878      	ldr	r0, [r7, #4]
 8010242:	f002 fbb6 	bl	80129b2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_>
 8010246:	e003      	b.n	8010250 <_ZSt8_DestroyIPcEvT_S1_+0x26>
	__destroy(__first, __last);
 8010248:	6839      	ldr	r1, [r7, #0]
 801024a:	6878      	ldr	r0, [r7, #4]
 801024c:	f002 fbca 	bl	80129e4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>
    }
 8010250:	3708      	adds	r7, #8
 8010252:	46bd      	mov	sp, r7
 8010254:	bd80      	pop	{r7, pc}

08010256 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8010256:	b480      	push	{r7}
 8010258:	b083      	sub	sp, #12
 801025a:	af00      	add	r7, sp, #0
 801025c:	6078      	str	r0, [r7, #4]
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	4618      	mov	r0, r3
 8010262:	370c      	adds	r7, #12
 8010264:	46bd      	mov	sp, r7
 8010266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026a:	4770      	bx	lr

0801026c <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801026c:	b580      	push	{r7, lr}
 801026e:	b088      	sub	sp, #32
 8010270:	af00      	add	r7, sp, #0
 8010272:	60f8      	str	r0, [r7, #12]
 8010274:	60b9      	str	r1, [r7, #8]
 8010276:	607a      	str	r2, [r7, #4]
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	61fb      	str	r3, [r7, #28]
 801027c:	68bb      	ldr	r3, [r7, #8]
 801027e:	61bb      	str	r3, [r7, #24]
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8010284:	f7f2 fc42 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8010288:	4603      	mov	r3, r0
 801028a:	2b00      	cmp	r3, #0
 801028c:	d003      	beq.n	8010296 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 801028e:	69b8      	ldr	r0, [r7, #24]
 8010290:	f015 fafc 	bl	802588c <_ZdlPv>
	    return;
 8010294:	e005      	b.n	80102a2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 8010296:	697a      	ldr	r2, [r7, #20]
 8010298:	69b9      	ldr	r1, [r7, #24]
 801029a:	69f8      	ldr	r0, [r7, #28]
 801029c:	f004 fa04 	bl	80146a8 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 80102a0:	bf00      	nop
 80102a2:	bf00      	nop
 80102a4:	3720      	adds	r7, #32
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bd80      	pop	{r7, pc}

080102aa <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80102aa:	b580      	push	{r7, lr}
 80102ac:	b082      	sub	sp, #8
 80102ae:	af00      	add	r7, sp, #0
 80102b0:	6078      	str	r0, [r7, #4]
 80102b2:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 80102b4:	f7f2 fc2a 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 80102b8:	4603      	mov	r3, r0
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d004      	beq.n	80102c8 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80102be:	6839      	ldr	r1, [r7, #0]
 80102c0:	6878      	ldr	r0, [r7, #4]
 80102c2:	f002 fb9a 	bl	80129fa <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>
 80102c6:	e003      	b.n	80102d0 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_+0x26>
	__destroy(__first, __last);
 80102c8:	6839      	ldr	r1, [r7, #0]
 80102ca:	6878      	ldr	r0, [r7, #4]
 80102cc:	f002 fb95 	bl	80129fa <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>
    }
 80102d0:	3708      	adds	r7, #8
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd80      	pop	{r7, pc}

080102d6 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80102d6:	b480      	push	{r7}
 80102d8:	b083      	sub	sp, #12
 80102da:	af00      	add	r7, sp, #0
 80102dc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	4618      	mov	r0, r3
 80102e2:	370c      	adds	r7, #12
 80102e4:	46bd      	mov	sp, r7
 80102e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ea:	4770      	bx	lr

080102ec <_ZNSt12_Vector_baseIcSaIcEEC1EOS1_>:
      _Vector_base(_Vector_base&&) = default;
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b082      	sub	sp, #8
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
 80102f4:	6039      	str	r1, [r7, #0]
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	683a      	ldr	r2, [r7, #0]
 80102fa:	4611      	mov	r1, r2
 80102fc:	4618      	mov	r0, r3
 80102fe:	f002 fb95 	bl	8012a2c <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1EOS2_>
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	4618      	mov	r0, r3
 8010306:	3708      	adds	r7, #8
 8010308:	46bd      	mov	sp, r7
 801030a:	bd80      	pop	{r7, pc}

0801030c <_ZNSt6vectorIcSaIcEEC1EOS1_>:
      vector(vector&&) noexcept = default;
 801030c:	b580      	push	{r7, lr}
 801030e:	b082      	sub	sp, #8
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
 8010314:	6039      	str	r1, [r7, #0]
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	683a      	ldr	r2, [r7, #0]
 801031a:	4611      	mov	r1, r2
 801031c:	4618      	mov	r0, r3
 801031e:	f7ff ffe5 	bl	80102ec <_ZNSt12_Vector_baseIcSaIcEEC1EOS1_>
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	4618      	mov	r0, r3
 8010326:	3708      	adds	r7, #8
 8010328:	46bd      	mov	sp, r7
 801032a:	bd80      	pop	{r7, pc}

0801032c <_ZN3jlb4EdgeC1EOS0_>:
    struct Edge
 801032c:	b580      	push	{r7, lr}
 801032e:	b082      	sub	sp, #8
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
 8010334:	6039      	str	r1, [r7, #0]
 8010336:	683b      	ldr	r3, [r7, #0]
 8010338:	781a      	ldrb	r2, [r3, #0]
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	701a      	strb	r2, [r3, #0]
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	685a      	ldr	r2, [r3, #4]
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	605a      	str	r2, [r3, #4]
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	f103 0208 	add.w	r2, r3, #8
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	3308      	adds	r3, #8
 8010350:	4619      	mov	r1, r3
 8010352:	4610      	mov	r0, r2
 8010354:	f7ff ffda 	bl	801030c <_ZNSt6vectorIcSaIcEEC1EOS1_>
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	695a      	ldr	r2, [r3, #20]
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	615a      	str	r2, [r3, #20]
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	4618      	mov	r0, r3
 8010364:	3708      	adds	r7, #8
 8010366:	46bd      	mov	sp, r7
 8010368:	bd80      	pop	{r7, pc}

0801036a <_ZSt12construct_atIN3jlb4EdgeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801036a:	b5b0      	push	{r4, r5, r7, lr}
 801036c:	b082      	sub	sp, #8
 801036e:	af00      	add	r7, sp, #0
 8010370:	6078      	str	r0, [r7, #4]
 8010372:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8010374:	6838      	ldr	r0, [r7, #0]
 8010376:	f7ff ffae 	bl	80102d6 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 801037a:	4605      	mov	r5, r0
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	4619      	mov	r1, r3
 8010380:	2018      	movs	r0, #24
 8010382:	f7f2 fbcb 	bl	8002b1c <_ZnwjPv>
 8010386:	4604      	mov	r4, r0
 8010388:	4629      	mov	r1, r5
 801038a:	4620      	mov	r0, r4
 801038c:	f7ff ffce 	bl	801032c <_ZN3jlb4EdgeC1EOS0_>
 8010390:	4623      	mov	r3, r4
 8010392:	4618      	mov	r0, r3
 8010394:	3708      	adds	r7, #8
 8010396:	46bd      	mov	sp, r7
 8010398:	bdb0      	pop	{r4, r5, r7, pc}

0801039a <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801039a:	b580      	push	{r7, lr}
 801039c:	b084      	sub	sp, #16
 801039e:	af00      	add	r7, sp, #0
 80103a0:	60f8      	str	r0, [r7, #12]
 80103a2:	60b9      	str	r1, [r7, #8]
 80103a4:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	f7ff ff95 	bl	80102d6 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 80103ac:	4603      	mov	r3, r0
 80103ae:	4619      	mov	r1, r3
 80103b0:	68b8      	ldr	r0, [r7, #8]
 80103b2:	f7ff ffda 	bl	801036a <_ZSt12construct_atIN3jlb4EdgeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 80103b6:	bf00      	nop
 80103b8:	3710      	adds	r7, #16
 80103ba:	46bd      	mov	sp, r7
 80103bc:	bd80      	pop	{r7, pc}
	...

080103c0 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80103c0:	b5b0      	push	{r4, r5, r7, lr}
 80103c2:	b08c      	sub	sp, #48	; 0x30
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	60f8      	str	r0, [r7, #12]
 80103c8:	60b9      	str	r1, [r7, #8]
 80103ca:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80103cc:	4a3f      	ldr	r2, [pc, #252]	; (80104cc <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x10c>)
 80103ce:	2101      	movs	r1, #1
 80103d0:	68f8      	ldr	r0, [r7, #12]
 80103d2:	f002 fb46 	bl	8012a62 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc>
 80103d6:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	685b      	ldr	r3, [r3, #4]
 80103e2:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80103e4:	68f8      	ldr	r0, [r7, #12]
 80103e6:	f7fd fd3d 	bl	800de64 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>
 80103ea:	4603      	mov	r3, r0
 80103ec:	617b      	str	r3, [r7, #20]
 80103ee:	f107 0214 	add.w	r2, r7, #20
 80103f2:	f107 0308 	add.w	r3, r7, #8
 80103f6:	4611      	mov	r1, r2
 80103f8:	4618      	mov	r0, r3
 80103fa:	f001 fa59 	bl	80118b0 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80103fe:	4603      	mov	r3, r0
 8010400:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010406:	4618      	mov	r0, r3
 8010408:	f002 fb72 	bl	8012af0 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>
 801040c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 801040e:	69fb      	ldr	r3, [r7, #28]
 8010410:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8010412:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8010414:	6a3a      	ldr	r2, [r7, #32]
 8010416:	4613      	mov	r3, r2
 8010418:	005b      	lsls	r3, r3, #1
 801041a:	4413      	add	r3, r2
 801041c:	00db      	lsls	r3, r3, #3
 801041e:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8010420:	69fb      	ldr	r3, [r7, #28]
 8010422:	189d      	adds	r5, r3, r2
 8010424:	6878      	ldr	r0, [r7, #4]
 8010426:	f7ff ff56 	bl	80102d6 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 801042a:	4603      	mov	r3, r0
 801042c:	461a      	mov	r2, r3
 801042e:	4629      	mov	r1, r5
 8010430:	4620      	mov	r0, r4
 8010432:	f7ff ffb2 	bl	801039a <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8010436:	2300      	movs	r3, #0
 8010438:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801043a:	f107 0308 	add.w	r3, r7, #8
 801043e:	4618      	mov	r0, r3
 8010440:	f001 fa50 	bl	80118e4 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 8010444:	4603      	mov	r3, r0
 8010446:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	4618      	mov	r0, r3
 801044c:	f7fe f9e0 	bl	800e810 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 8010450:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8010452:	69fa      	ldr	r2, [r7, #28]
 8010454:	4621      	mov	r1, r4
 8010456:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010458:	f002 fb5e 	bl	8012b18 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 801045c:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 801045e:	69bb      	ldr	r3, [r7, #24]
 8010460:	3318      	adds	r3, #24
 8010462:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8010464:	f107 0308 	add.w	r3, r7, #8
 8010468:	4618      	mov	r0, r3
 801046a:	f001 fa3b 	bl	80118e4 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 801046e:	4603      	mov	r3, r0
 8010470:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	4618      	mov	r0, r3
 8010476:	f7fe f9cb 	bl	800e810 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 801047a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 801047c:	69ba      	ldr	r2, [r7, #24]
 801047e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010480:	4620      	mov	r0, r4
 8010482:	f002 fb49 	bl	8012b18 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8010486:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8010488:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	689a      	ldr	r2, [r3, #8]
 801048e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010490:	1ad3      	subs	r3, r2, r3
 8010492:	10db      	asrs	r3, r3, #3
 8010494:	4a0e      	ldr	r2, [pc, #56]	; (80104d0 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x110>)
 8010496:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 801049a:	461a      	mov	r2, r3
 801049c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801049e:	f7fe f9a4 	bl	800e7ea <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	69fa      	ldr	r2, [r7, #28]
 80104a6:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	69ba      	ldr	r2, [r7, #24]
 80104ac:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80104ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80104b0:	4613      	mov	r3, r2
 80104b2:	005b      	lsls	r3, r3, #1
 80104b4:	4413      	add	r3, r2
 80104b6:	00db      	lsls	r3, r3, #3
 80104b8:	461a      	mov	r2, r3
 80104ba:	69fb      	ldr	r3, [r7, #28]
 80104bc:	441a      	add	r2, r3
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	609a      	str	r2, [r3, #8]
    }
 80104c2:	bf00      	nop
 80104c4:	3730      	adds	r7, #48	; 0x30
 80104c6:	46bd      	mov	sp, r7
 80104c8:	bdb0      	pop	{r4, r5, r7, pc}
 80104ca:	bf00      	nop
 80104cc:	08029750 	.word	0x08029750
 80104d0:	aaaaaaab 	.word	0xaaaaaaab

080104d4 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b084      	sub	sp, #16
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 80104dc:	6878      	ldr	r0, [r7, #4]
 80104de:	f7fd fcd1 	bl	800de84 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 80104e2:	4603      	mov	r3, r0
 80104e4:	60fb      	str	r3, [r7, #12]
 80104e6:	f107 030c 	add.w	r3, r7, #12
 80104ea:	2101      	movs	r1, #1
 80104ec:	4618      	mov	r0, r3
 80104ee:	f002 fb33 	bl	8012b58 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEmiEi>
 80104f2:	4603      	mov	r3, r0
 80104f4:	60bb      	str	r3, [r7, #8]
 80104f6:	f107 0308 	add.w	r3, r7, #8
 80104fa:	4618      	mov	r0, r3
 80104fc:	f002 fb48 	bl	8012b90 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>
 8010500:	4603      	mov	r3, r0
      }
 8010502:	4618      	mov	r0, r3
 8010504:	3710      	adds	r7, #16
 8010506:	46bd      	mov	sp, r7
 8010508:	bd80      	pop	{r7, pc}

0801050a <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEEC1Ev>:
 801050a:	b480      	push	{r7}
 801050c:	b083      	sub	sp, #12
 801050e:	af00      	add	r7, sp, #0
 8010510:	6078      	str	r0, [r7, #4]
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	4618      	mov	r0, r3
 8010516:	370c      	adds	r7, #12
 8010518:	46bd      	mov	sp, r7
 801051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051e:	4770      	bx	lr

08010520 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8010520:	b580      	push	{r7, lr}
 8010522:	b088      	sub	sp, #32
 8010524:	af00      	add	r7, sp, #0
 8010526:	60f8      	str	r0, [r7, #12]
 8010528:	60b9      	str	r1, [r7, #8]
 801052a:	607a      	str	r2, [r7, #4]
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	61fb      	str	r3, [r7, #28]
 8010530:	68bb      	ldr	r3, [r7, #8]
 8010532:	61bb      	str	r3, [r7, #24]
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8010538:	f7f2 fae8 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 801053c:	4603      	mov	r3, r0
 801053e:	2b00      	cmp	r3, #0
 8010540:	d003      	beq.n	801054a <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8010542:	69b8      	ldr	r0, [r7, #24]
 8010544:	f015 f9a2 	bl	802588c <_ZdlPv>
	    return;
 8010548:	e005      	b.n	8010556 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 801054a:	697a      	ldr	r2, [r7, #20]
 801054c:	69b9      	ldr	r1, [r7, #24]
 801054e:	69f8      	ldr	r0, [r7, #28]
 8010550:	f004 f951 	bl	80147f6 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8010554:	bf00      	nop
 8010556:	bf00      	nop
 8010558:	3720      	adds	r7, #32
 801055a:	46bd      	mov	sp, r7
 801055c:	bd80      	pop	{r7, pc}

0801055e <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 801055e:	b580      	push	{r7, lr}
 8010560:	b082      	sub	sp, #8
 8010562:	af00      	add	r7, sp, #0
 8010564:	6078      	str	r0, [r7, #4]
 8010566:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8010568:	f7f2 fad0 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 801056c:	4603      	mov	r3, r0
 801056e:	2b00      	cmp	r3, #0
 8010570:	d004      	beq.n	801057c <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8010572:	6839      	ldr	r1, [r7, #0]
 8010574:	6878      	ldr	r0, [r7, #4]
 8010576:	f002 fb17 	bl	8012ba8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>
 801057a:	e003      	b.n	8010584 <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_+0x26>
	__destroy(__first, __last);
 801057c:	6839      	ldr	r1, [r7, #0]
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f002 fb12 	bl	8012ba8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>
    }
 8010584:	3708      	adds	r7, #8
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}

0801058a <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801058a:	b580      	push	{r7, lr}
 801058c:	b088      	sub	sp, #32
 801058e:	af00      	add	r7, sp, #0
 8010590:	60f8      	str	r0, [r7, #12]
 8010592:	60b9      	str	r1, [r7, #8]
 8010594:	607a      	str	r2, [r7, #4]
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	61fb      	str	r3, [r7, #28]
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	61bb      	str	r3, [r7, #24]
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80105a2:	f7f2 fab3 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 80105a6:	4603      	mov	r3, r0
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d003      	beq.n	80105b4 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x2a>
	    ::operator delete(__p);
 80105ac:	69b8      	ldr	r0, [r7, #24]
 80105ae:	f015 f96d 	bl	802588c <_ZdlPv>
	    return;
 80105b2:	e005      	b.n	80105c0 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 80105b4:	697a      	ldr	r2, [r7, #20]
 80105b6:	69b9      	ldr	r1, [r7, #24]
 80105b8:	69f8      	ldr	r0, [r7, #28]
 80105ba:	f004 f944 	bl	8014846 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>
      { __a.deallocate(__p, __n); }
 80105be:	bf00      	nop
 80105c0:	bf00      	nop
 80105c2:	3720      	adds	r7, #32
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}

080105c8 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80105c8:	b480      	push	{r7}
 80105ca:	b083      	sub	sp, #12
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	4618      	mov	r0, r3
 80105d4:	370c      	adds	r7, #12
 80105d6:	46bd      	mov	sp, r7
 80105d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105dc:	4770      	bx	lr

080105de <_ZN3jlb4NodeC1ERKS0_>:
    class Node
 80105de:	b580      	push	{r7, lr}
 80105e0:	b082      	sub	sp, #8
 80105e2:	af00      	add	r7, sp, #0
 80105e4:	6078      	str	r0, [r7, #4]
 80105e6:	6039      	str	r1, [r7, #0]
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	781a      	ldrb	r2, [r3, #0]
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	701a      	strb	r2, [r3, #0]
 80105f0:	683b      	ldr	r3, [r7, #0]
 80105f2:	685a      	ldr	r2, [r3, #4]
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	605a      	str	r2, [r3, #4]
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	689a      	ldr	r2, [r3, #8]
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	609a      	str	r2, [r3, #8]
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	f103 020c 	add.w	r2, r3, #12
 8010606:	683b      	ldr	r3, [r7, #0]
 8010608:	330c      	adds	r3, #12
 801060a:	4619      	mov	r1, r3
 801060c:	4610      	mov	r0, r2
 801060e:	f002 fae4 	bl	8012bda <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1ERKS3_>
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	4618      	mov	r0, r3
 8010616:	3708      	adds	r7, #8
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}

0801061c <_ZSt12construct_atIN3jlb4NodeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801061c:	b5b0      	push	{r4, r5, r7, lr}
 801061e:	b082      	sub	sp, #8
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
 8010624:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8010626:	6838      	ldr	r0, [r7, #0]
 8010628:	f7ff ffce 	bl	80105c8 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 801062c:	4605      	mov	r5, r0
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	4619      	mov	r1, r3
 8010632:	2018      	movs	r0, #24
 8010634:	f7f2 fa72 	bl	8002b1c <_ZnwjPv>
 8010638:	4604      	mov	r4, r0
 801063a:	4629      	mov	r1, r5
 801063c:	4620      	mov	r0, r4
 801063e:	f7ff ffce 	bl	80105de <_ZN3jlb4NodeC1ERKS0_>
 8010642:	4623      	mov	r3, r4
 8010644:	4618      	mov	r0, r3
 8010646:	3708      	adds	r7, #8
 8010648:	46bd      	mov	sp, r7
 801064a:	bdb0      	pop	{r4, r5, r7, pc}

0801064c <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801064c:	b580      	push	{r7, lr}
 801064e:	b084      	sub	sp, #16
 8010650:	af00      	add	r7, sp, #0
 8010652:	60f8      	str	r0, [r7, #12]
 8010654:	60b9      	str	r1, [r7, #8]
 8010656:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8010658:	6878      	ldr	r0, [r7, #4]
 801065a:	f7ff ffb5 	bl	80105c8 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 801065e:	4603      	mov	r3, r0
 8010660:	4619      	mov	r1, r3
 8010662:	68b8      	ldr	r0, [r7, #8]
 8010664:	f7ff ffda 	bl	801061c <_ZSt12construct_atIN3jlb4NodeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8010668:	bf00      	nop
 801066a:	3710      	adds	r7, #16
 801066c:	46bd      	mov	sp, r7
 801066e:	bd80      	pop	{r7, pc}

08010670 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8010670:	b5b0      	push	{r4, r5, r7, lr}
 8010672:	b08c      	sub	sp, #48	; 0x30
 8010674:	af00      	add	r7, sp, #0
 8010676:	60f8      	str	r0, [r7, #12]
 8010678:	60b9      	str	r1, [r7, #8]
 801067a:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 801067c:	4a44      	ldr	r2, [pc, #272]	; (8010790 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x120>)
 801067e:	2101      	movs	r1, #1
 8010680:	68f8      	ldr	r0, [r7, #12]
 8010682:	f002 fae7 	bl	8012c54 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc>
 8010686:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	685b      	ldr	r3, [r3, #4]
 8010692:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8010694:	68f8      	ldr	r0, [r7, #12]
 8010696:	f7fc fff7 	bl	800d688 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE5beginEv>
 801069a:	4603      	mov	r3, r0
 801069c:	617b      	str	r3, [r7, #20]
 801069e:	f107 0214 	add.w	r2, r7, #20
 80106a2:	f107 0308 	add.w	r3, r7, #8
 80106a6:	4611      	mov	r1, r2
 80106a8:	4618      	mov	r0, r3
 80106aa:	f002 fb1b 	bl	8012ce4 <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80106ae:	4603      	mov	r3, r0
 80106b0:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80106b6:	4618      	mov	r0, r3
 80106b8:	f002 fb2e 	bl	8012d18 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj>
 80106bc:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80106be:	69fb      	ldr	r3, [r7, #28]
 80106c0:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 80106c2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80106c4:	6a3a      	ldr	r2, [r7, #32]
 80106c6:	4613      	mov	r3, r2
 80106c8:	005b      	lsls	r3, r3, #1
 80106ca:	4413      	add	r3, r2
 80106cc:	00db      	lsls	r3, r3, #3
 80106ce:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 80106d0:	69fb      	ldr	r3, [r7, #28]
 80106d2:	189d      	adds	r5, r3, r2
 80106d4:	6878      	ldr	r0, [r7, #4]
 80106d6:	f7ff ff77 	bl	80105c8 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 80106da:	4603      	mov	r3, r0
 80106dc:	461a      	mov	r2, r3
 80106de:	4629      	mov	r1, r5
 80106e0:	4620      	mov	r0, r4
 80106e2:	f7ff ffb3 	bl	801064c <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 80106e6:	2300      	movs	r3, #0
 80106e8:	61bb      	str	r3, [r7, #24]
		(__old_start, __position.base(),
 80106ea:	f107 0308 	add.w	r3, r7, #8
 80106ee:	4618      	mov	r0, r3
 80106f0:	f7f8 f9fc 	bl	8008aec <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 80106f4:	4603      	mov	r3, r0
 80106f6:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	4618      	mov	r0, r3
 80106fc:	f7fe f912 	bl	800e924 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 8010700:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8010702:	69fa      	ldr	r2, [r7, #28]
 8010704:	4621      	mov	r1, r4
 8010706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010708:	f002 fb1a 	bl	8012d40 <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>
 801070c:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 801070e:	69bb      	ldr	r3, [r7, #24]
 8010710:	3318      	adds	r3, #24
 8010712:	61bb      	str	r3, [r7, #24]
		(__position.base(), __old_finish,
 8010714:	f107 0308 	add.w	r3, r7, #8
 8010718:	4618      	mov	r0, r3
 801071a:	f7f8 f9e7 	bl	8008aec <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 801071e:	4603      	mov	r3, r0
 8010720:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	4618      	mov	r0, r3
 8010726:	f7fe f8fd 	bl	800e924 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 801072a:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 801072c:	69ba      	ldr	r2, [r7, #24]
 801072e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010730:	4620      	mov	r0, r4
 8010732:	f002 fb05 	bl	8012d40 <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>
 8010736:	61b8      	str	r0, [r7, #24]
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	4618      	mov	r0, r3
 801073c:	f7fe f8f2 	bl	800e924 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 8010740:	4603      	mov	r3, r0
 8010742:	461a      	mov	r2, r3
 8010744:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010748:	f7fe f8f7 	bl	800e93a <_ZSt8_DestroyIPN3jlb4NodeES1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 801074c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	689a      	ldr	r2, [r3, #8]
 8010752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010754:	1ad3      	subs	r3, r2, r3
 8010756:	10db      	asrs	r3, r3, #3
 8010758:	4a0e      	ldr	r2, [pc, #56]	; (8010794 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x124>)
 801075a:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 801075e:	461a      	mov	r2, r3
 8010760:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010762:	f7fe f8cc 	bl	800e8fe <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	69fa      	ldr	r2, [r7, #28]
 801076a:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	69ba      	ldr	r2, [r7, #24]
 8010770:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8010772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010774:	4613      	mov	r3, r2
 8010776:	005b      	lsls	r3, r3, #1
 8010778:	4413      	add	r3, r2
 801077a:	00db      	lsls	r3, r3, #3
 801077c:	461a      	mov	r2, r3
 801077e:	69fb      	ldr	r3, [r7, #28]
 8010780:	441a      	add	r2, r3
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	609a      	str	r2, [r3, #8]
    }
 8010786:	bf00      	nop
 8010788:	3730      	adds	r7, #48	; 0x30
 801078a:	46bd      	mov	sp, r7
 801078c:	bdb0      	pop	{r4, r5, r7, pc}
 801078e:	bf00      	nop
 8010790:	08029750 	.word	0x08029750
 8010794:	aaaaaaab 	.word	0xaaaaaaab

08010798 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8010798:	b580      	push	{r7, lr}
 801079a:	b084      	sub	sp, #16
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 80107a0:	6878      	ldr	r0, [r7, #4]
 80107a2:	f7fc ff81 	bl	800d6a8 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>
 80107a6:	4603      	mov	r3, r0
 80107a8:	60fb      	str	r3, [r7, #12]
 80107aa:	f107 030c 	add.w	r3, r7, #12
 80107ae:	2101      	movs	r1, #1
 80107b0:	4618      	mov	r0, r3
 80107b2:	f002 fade 	bl	8012d72 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEmiEi>
 80107b6:	4603      	mov	r3, r0
 80107b8:	60bb      	str	r3, [r7, #8]
 80107ba:	f107 0308 	add.w	r3, r7, #8
 80107be:	4618      	mov	r0, r3
 80107c0:	f7f8 f9c8 	bl	8008b54 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEdeEv>
 80107c4:	4603      	mov	r3, r0
      }
 80107c6:	4618      	mov	r0, r3
 80107c8:	3710      	adds	r7, #16
 80107ca:	46bd      	mov	sp, r7
 80107cc:	bd80      	pop	{r7, pc}

080107ce <_ZNKSt16initializer_listIcE4sizeEv>:
      size() const noexcept { return _M_len; }
 80107ce:	b480      	push	{r7}
 80107d0:	b083      	sub	sp, #12
 80107d2:	af00      	add	r7, sp, #0
 80107d4:	6078      	str	r0, [r7, #4]
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	685b      	ldr	r3, [r3, #4]
 80107da:	4618      	mov	r0, r3
 80107dc:	370c      	adds	r7, #12
 80107de:	46bd      	mov	sp, r7
 80107e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e4:	4770      	bx	lr

080107e6 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 80107e6:	b480      	push	{r7}
 80107e8:	b083      	sub	sp, #12
 80107ea:	af00      	add	r7, sp, #0
 80107ec:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80107ee:	4618      	mov	r0, r3
 80107f0:	370c      	adds	r7, #12
 80107f2:	46bd      	mov	sp, r7
 80107f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f8:	4770      	bx	lr

080107fa <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80107fa:	b480      	push	{r7}
 80107fc:	b085      	sub	sp, #20
 80107fe:	af00      	add	r7, sp, #0
 8010800:	60f8      	str	r0, [r7, #12]
 8010802:	60b9      	str	r1, [r7, #8]
 8010804:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8010806:	68ba      	ldr	r2, [r7, #8]
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	1ad3      	subs	r3, r2, r3
    }
 801080c:	4618      	mov	r0, r3
 801080e:	3714      	adds	r7, #20
 8010810:	46bd      	mov	sp, r7
 8010812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010816:	4770      	bx	lr

08010818 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8010818:	b590      	push	{r4, r7, lr}
 801081a:	b085      	sub	sp, #20
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
 8010820:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8010822:	f107 030c 	add.w	r3, r7, #12
 8010826:	6839      	ldr	r1, [r7, #0]
 8010828:	4618      	mov	r0, r3
 801082a:	f015 f845 	bl	80258b8 <_ZNSaIcEC1ERKS_>
 801082e:	f107 030c 	add.w	r3, r7, #12
 8010832:	4618      	mov	r0, r3
 8010834:	f002 fac5 	bl	8012dc2 <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>
 8010838:	4602      	mov	r2, r0
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	4293      	cmp	r3, r2
 801083e:	bf8c      	ite	hi
 8010840:	2301      	movhi	r3, #1
 8010842:	2300      	movls	r3, #0
 8010844:	b2dc      	uxtb	r4, r3
 8010846:	f107 030c 	add.w	r3, r7, #12
 801084a:	4618      	mov	r0, r3
 801084c:	f015 f835 	bl	80258ba <_ZNSaIcED1Ev>
 8010850:	2c00      	cmp	r4, #0
 8010852:	d002      	beq.n	801085a <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8010854:	4803      	ldr	r0, [pc, #12]	; (8010864 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_+0x4c>)
 8010856:	f015 f8ef 	bl	8025a38 <_ZSt20__throw_length_errorPKc>
	return __n;
 801085a:	687b      	ldr	r3, [r7, #4]
      }
 801085c:	4618      	mov	r0, r3
 801085e:	3714      	adds	r7, #20
 8010860:	46bd      	mov	sp, r7
 8010862:	bd90      	pop	{r4, r7, pc}
 8010864:	0802979c 	.word	0x0802979c

08010868 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8010868:	b580      	push	{r7, lr}
 801086a:	b082      	sub	sp, #8
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
 8010870:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8010872:	683b      	ldr	r3, [r7, #0]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d006      	beq.n	8010886 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj+0x1e>
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	6839      	ldr	r1, [r7, #0]
 801087c:	4618      	mov	r0, r3
 801087e:	f001 fcd3 	bl	8012228 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>
 8010882:	4603      	mov	r3, r0
 8010884:	e000      	b.n	8010888 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj+0x20>
 8010886:	2300      	movs	r3, #0
      }
 8010888:	4618      	mov	r0, r3
 801088a:	3708      	adds	r7, #8
 801088c:	46bd      	mov	sp, r7
 801088e:	bd80      	pop	{r7, pc}

08010890 <_ZSt22__uninitialized_copy_aIPKcPccET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8010890:	b580      	push	{r7, lr}
 8010892:	b084      	sub	sp, #16
 8010894:	af00      	add	r7, sp, #0
 8010896:	60f8      	str	r0, [r7, #12]
 8010898:	60b9      	str	r1, [r7, #8]
 801089a:	607a      	str	r2, [r7, #4]
 801089c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 801089e:	687a      	ldr	r2, [r7, #4]
 80108a0:	68b9      	ldr	r1, [r7, #8]
 80108a2:	68f8      	ldr	r0, [r7, #12]
 80108a4:	f002 faa7 	bl	8012df6 <_ZSt18uninitialized_copyIPKcPcET0_T_S4_S3_>
 80108a8:	4603      	mov	r3, r0
 80108aa:	4618      	mov	r0, r3
 80108ac:	3710      	adds	r7, #16
 80108ae:	46bd      	mov	sp, r7
 80108b0:	bd80      	pop	{r7, pc}

080108b2 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80108b2:	b590      	push	{r4, r7, lr}
 80108b4:	b087      	sub	sp, #28
 80108b6:	af00      	add	r7, sp, #0
 80108b8:	60f8      	str	r0, [r7, #12]
 80108ba:	60b9      	str	r1, [r7, #8]
 80108bc:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80108be:	68f8      	ldr	r0, [r7, #12]
 80108c0:	f002 faab 	bl	8012e1a <_ZNKSt6vectorIcSaIcEE8max_sizeEv>
 80108c4:	4604      	mov	r4, r0
 80108c6:	68f8      	ldr	r0, [r7, #12]
 80108c8:	f7fd fcf6 	bl	800e2b8 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 80108cc:	4603      	mov	r3, r0
 80108ce:	1ae2      	subs	r2, r4, r3
 80108d0:	68bb      	ldr	r3, [r7, #8]
 80108d2:	429a      	cmp	r2, r3
 80108d4:	bf34      	ite	cc
 80108d6:	2301      	movcc	r3, #1
 80108d8:	2300      	movcs	r3, #0
 80108da:	b2db      	uxtb	r3, r3
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d002      	beq.n	80108e6 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80108e0:	6878      	ldr	r0, [r7, #4]
 80108e2:	f015 f8a9 	bl	8025a38 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80108e6:	68f8      	ldr	r0, [r7, #12]
 80108e8:	f7fd fce6 	bl	800e2b8 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 80108ec:	4604      	mov	r4, r0
 80108ee:	68f8      	ldr	r0, [r7, #12]
 80108f0:	f7fd fce2 	bl	800e2b8 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 80108f4:	4603      	mov	r3, r0
 80108f6:	613b      	str	r3, [r7, #16]
 80108f8:	f107 0208 	add.w	r2, r7, #8
 80108fc:	f107 0310 	add.w	r3, r7, #16
 8010900:	4611      	mov	r1, r2
 8010902:	4618      	mov	r0, r3
 8010904:	f7f3 f87b 	bl	80039fe <_ZSt3maxIjERKT_S2_S2_>
 8010908:	4603      	mov	r3, r0
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	4423      	add	r3, r4
 801090e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8010910:	68f8      	ldr	r0, [r7, #12]
 8010912:	f7fd fcd1 	bl	800e2b8 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 8010916:	4602      	mov	r2, r0
 8010918:	697b      	ldr	r3, [r7, #20]
 801091a:	4293      	cmp	r3, r2
 801091c:	d306      	bcc.n	801092c <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x7a>
 801091e:	68f8      	ldr	r0, [r7, #12]
 8010920:	f002 fa7b 	bl	8012e1a <_ZNKSt6vectorIcSaIcEE8max_sizeEv>
 8010924:	4602      	mov	r2, r0
 8010926:	697b      	ldr	r3, [r7, #20]
 8010928:	4293      	cmp	r3, r2
 801092a:	d904      	bls.n	8010936 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x84>
 801092c:	68f8      	ldr	r0, [r7, #12]
 801092e:	f002 fa74 	bl	8012e1a <_ZNKSt6vectorIcSaIcEE8max_sizeEv>
 8010932:	4603      	mov	r3, r0
 8010934:	e000      	b.n	8010938 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x86>
 8010936:	697b      	ldr	r3, [r7, #20]
      }
 8010938:	4618      	mov	r0, r3
 801093a:	371c      	adds	r7, #28
 801093c:	46bd      	mov	sp, r7
 801093e:	bd90      	pop	{r4, r7, pc}

08010940 <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8010940:	b590      	push	{r4, r7, lr}
 8010942:	b083      	sub	sp, #12
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
 8010948:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 801094a:	6878      	ldr	r0, [r7, #4]
 801094c:	f7f8 fa00 	bl	8008d50 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 8010950:	4603      	mov	r3, r0
 8010952:	681c      	ldr	r4, [r3, #0]
 8010954:	6838      	ldr	r0, [r7, #0]
 8010956:	f7f8 f9fb 	bl	8008d50 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 801095a:	4603      	mov	r3, r0
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	1ae3      	subs	r3, r4, r3
 8010960:	4618      	mov	r0, r3
 8010962:	370c      	adds	r7, #12
 8010964:	46bd      	mov	sp, r7
 8010966:	bd90      	pop	{r4, r7, pc}

08010968 <_ZNSt6vectorIcSaIcEE11_S_relocateEPcS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8010968:	b590      	push	{r4, r7, lr}
 801096a:	b087      	sub	sp, #28
 801096c:	af02      	add	r7, sp, #8
 801096e:	60f8      	str	r0, [r7, #12]
 8010970:	60b9      	str	r1, [r7, #8]
 8010972:	607a      	str	r2, [r7, #4]
 8010974:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8010976:	f88d 4000 	strb.w	r4, [sp]
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	687a      	ldr	r2, [r7, #4]
 801097e:	68b9      	ldr	r1, [r7, #8]
 8010980:	68f8      	ldr	r0, [r7, #12]
 8010982:	f002 fa5b 	bl	8012e3c <_ZNSt6vectorIcSaIcEE14_S_do_relocateEPcS2_S2_RS0_St17integral_constantIbLb1EE>
 8010986:	4603      	mov	r3, r0
      }
 8010988:	4618      	mov	r0, r3
 801098a:	3714      	adds	r7, #20
 801098c:	46bd      	mov	sp, r7
 801098e:	bd90      	pop	{r4, r7, pc}

08010990 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKcS2_IfSt6vectorIS2_IciESaIS5_EEEEEEC1Ev>:
 8010990:	b480      	push	{r7}
 8010992:	b083      	sub	sp, #12
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	4618      	mov	r0, r3
 801099c:	370c      	adds	r7, #12
 801099e:	46bd      	mov	sp, r7
 80109a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a4:	4770      	bx	lr

080109a6 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80109a6:	b480      	push	{r7}
 80109a8:	b083      	sub	sp, #12
 80109aa:	af00      	add	r7, sp, #0
 80109ac:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	68db      	ldr	r3, [r3, #12]
 80109b2:	4618      	mov	r0, r3
 80109b4:	370c      	adds	r7, #12
 80109b6:	46bd      	mov	sp, r7
 80109b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109bc:	4770      	bx	lr

080109be <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80109be:	b480      	push	{r7}
 80109c0:	b083      	sub	sp, #12
 80109c2:	af00      	add	r7, sp, #0
 80109c4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	689b      	ldr	r3, [r3, #8]
 80109ca:	4618      	mov	r0, r3
 80109cc:	370c      	adds	r7, #12
 80109ce:	46bd      	mov	sp, r7
 80109d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d4:	4770      	bx	lr

080109d6 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS7_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80109d6:	b580      	push	{r7, lr}
 80109d8:	b082      	sub	sp, #8
 80109da:	af00      	add	r7, sp, #0
 80109dc:	6078      	str	r0, [r7, #4]
 80109de:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80109e0:	6839      	ldr	r1, [r7, #0]
 80109e2:	6878      	ldr	r0, [r7, #4]
 80109e4:	f002 fa46 	bl	8012e74 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS7_E>
	_M_put_node(__p);
 80109e8:	6839      	ldr	r1, [r7, #0]
 80109ea:	6878      	ldr	r0, [r7, #4]
 80109ec:	f002 fa57 	bl	8012e9e <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS7_E>
      }
 80109f0:	bf00      	nop
 80109f2:	3708      	adds	r7, #8
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}

080109f8 <_ZNKSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
 80109f8:	b480      	push	{r7}
 80109fa:	b083      	sub	sp, #12
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	689b      	ldr	r3, [r3, #8]
 8010a04:	4618      	mov	r0, r3
 8010a06:	370c      	adds	r7, #12
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0e:	4770      	bx	lr

08010a10 <_ZNSaISt4pairIfcEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b082      	sub	sp, #8
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
 8010a18:	6878      	ldr	r0, [r7, #4]
 8010a1a:	f002 fa52 	bl	8012ec2 <_ZN9__gnu_cxx13new_allocatorISt4pairIfcEEC1Ev>
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	4618      	mov	r0, r3
 8010a22:	3708      	adds	r7, #8
 8010a24:	46bd      	mov	sp, r7
 8010a26:	bd80      	pop	{r7, pc}

08010a28 <_ZNSt12_Vector_baseISt4pairIfcESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8010a28:	b480      	push	{r7}
 8010a2a:	b083      	sub	sp, #12
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	2200      	movs	r2, #0
 8010a34:	601a      	str	r2, [r3, #0]
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	2200      	movs	r2, #0
 8010a3a:	605a      	str	r2, [r3, #4]
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2200      	movs	r2, #0
 8010a40:	609a      	str	r2, [r3, #8]
	{ }
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	4618      	mov	r0, r3
 8010a46:	370c      	adds	r7, #12
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4e:	4770      	bx	lr

08010a50 <_ZNSt12_Vector_baseISt4pairIfcESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b084      	sub	sp, #16
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	60f8      	str	r0, [r7, #12]
 8010a58:	60b9      	str	r1, [r7, #8]
 8010a5a:	607a      	str	r2, [r7, #4]
	if (__p)
 8010a5c:	68bb      	ldr	r3, [r7, #8]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d005      	beq.n	8010a6e <_ZNSt12_Vector_baseISt4pairIfcESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	687a      	ldr	r2, [r7, #4]
 8010a66:	68b9      	ldr	r1, [r7, #8]
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f002 fa35 	bl	8012ed8 <_ZNSt16allocator_traitsISaISt4pairIfcEEE10deallocateERS2_PS1_j>
      }
 8010a6e:	bf00      	nop
 8010a70:	3710      	adds	r7, #16
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}

08010a76 <_ZSt8_DestroyIPSt4pairIfcEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8010a76:	b580      	push	{r7, lr}
 8010a78:	b082      	sub	sp, #8
 8010a7a:	af00      	add	r7, sp, #0
 8010a7c:	6078      	str	r0, [r7, #4]
 8010a7e:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8010a80:	f7f2 f844 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8010a84:	4603      	mov	r3, r0
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d004      	beq.n	8010a94 <_ZSt8_DestroyIPSt4pairIfcEEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8010a8a:	6839      	ldr	r1, [r7, #0]
 8010a8c:	6878      	ldr	r0, [r7, #4]
 8010a8e:	f002 fa42 	bl	8012f16 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIfcEEEvT_S5_>
 8010a92:	e003      	b.n	8010a9c <_ZSt8_DestroyIPSt4pairIfcEEvT_S3_+0x26>
	__destroy(__first, __last);
 8010a94:	6839      	ldr	r1, [r7, #0]
 8010a96:	6878      	ldr	r0, [r7, #4]
 8010a98:	f002 fa56 	bl	8012f48 <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt4pairIfcEEEvT_S5_>
    }
 8010a9c:	3708      	adds	r7, #8
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	bd80      	pop	{r7, pc}

08010aa2 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 8010aa2:	b590      	push	{r4, r7, lr}
 8010aa4:	b083      	sub	sp, #12
 8010aa6:	af00      	add	r7, sp, #0
 8010aa8:	6078      	str	r0, [r7, #4]
 8010aaa:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8010aac:	6878      	ldr	r0, [r7, #4]
 8010aae:	f7fe f908 	bl	800ecc2 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE8_M_beginEv>
 8010ab2:	4604      	mov	r4, r0
 8010ab4:	6878      	ldr	r0, [r7, #4]
 8010ab6:	f002 fa52 	bl	8012f5e <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE6_M_endEv>
 8010aba:	4602      	mov	r2, r0
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	4621      	mov	r1, r4
 8010ac0:	6878      	ldr	r0, [r7, #4]
 8010ac2:	f002 fa58 	bl	8012f76 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS7_EPSt18_Rb_tree_node_baseRS1_>
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	4618      	mov	r0, r3
 8010aca:	370c      	adds	r7, #12
 8010acc:	46bd      	mov	sp, r7
 8010ace:	bd90      	pop	{r4, r7, pc}

08010ad0 <_ZNKSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE8key_compEv>:
      key_comp() const
 8010ad0:	b480      	push	{r7}
 8010ad2:	b083      	sub	sp, #12
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8010ad8:	bf00      	nop
 8010ada:	4618      	mov	r0, r3
 8010adc:	370c      	adds	r7, #12
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae4:	4770      	bx	lr

08010ae6 <_ZNSt11_Tuple_implILj0EJRKcEEC1ES1_>:
      _Tuple_impl(const _Head& __head)
 8010ae6:	b580      	push	{r7, lr}
 8010ae8:	b082      	sub	sp, #8
 8010aea:	af00      	add	r7, sp, #0
 8010aec:	6078      	str	r0, [r7, #4]
 8010aee:	6039      	str	r1, [r7, #0]
      : _Base(__head)
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	6839      	ldr	r1, [r7, #0]
 8010af4:	4618      	mov	r0, r3
 8010af6:	f002 fa6f 	bl	8012fd8 <_ZNSt10_Head_baseILj0ERKcLb0EEC1ES1_>
      { }
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	4618      	mov	r0, r3
 8010afe:	3708      	adds	r7, #8
 8010b00:	46bd      	mov	sp, r7
 8010b02:	bd80      	pop	{r7, pc}

08010b04 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010b04:	b480      	push	{r7}
 8010b06:	b083      	sub	sp, #12
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	4618      	mov	r0, r3
 8010b10:	370c      	adds	r7, #12
 8010b12:	46bd      	mov	sp, r7
 8010b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b18:	4770      	bx	lr

08010b1a <_ZSt7forwardISt5tupleIJRKcEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010b1a:	b480      	push	{r7}
 8010b1c:	b083      	sub	sp, #12
 8010b1e:	af00      	add	r7, sp, #0
 8010b20:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	4618      	mov	r0, r3
 8010b26:	370c      	adds	r7, #12
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2e:	4770      	bx	lr

08010b30 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010b30:	b480      	push	{r7}
 8010b32:	b083      	sub	sp, #12
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	370c      	adds	r7, #12
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b44:	4770      	bx	lr

08010b46 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEEPSt13_Rb_tree_nodeIS7_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8010b46:	b5b0      	push	{r4, r5, r7, lr}
 8010b48:	b088      	sub	sp, #32
 8010b4a:	af02      	add	r7, sp, #8
 8010b4c:	60f8      	str	r0, [r7, #12]
 8010b4e:	60b9      	str	r1, [r7, #8]
 8010b50:	607a      	str	r2, [r7, #4]
 8010b52:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8010b54:	68f8      	ldr	r0, [r7, #12]
 8010b56:	f002 fa4e 	bl	8012ff6 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE11_M_get_nodeEv>
 8010b5a:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8010b5c:	68b8      	ldr	r0, [r7, #8]
 8010b5e:	f7ff ffd1 	bl	8010b04 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8010b62:	4604      	mov	r4, r0
 8010b64:	6878      	ldr	r0, [r7, #4]
 8010b66:	f7ff ffd8 	bl	8010b1a <_ZSt7forwardISt5tupleIJRKcEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010b6a:	4605      	mov	r5, r0
 8010b6c:	6838      	ldr	r0, [r7, #0]
 8010b6e:	f7ff ffdf 	bl	8010b30 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8010b72:	4603      	mov	r3, r0
 8010b74:	9300      	str	r3, [sp, #0]
 8010b76:	462b      	mov	r3, r5
 8010b78:	4622      	mov	r2, r4
 8010b7a:	6979      	ldr	r1, [r7, #20]
 8010b7c:	68f8      	ldr	r0, [r7, #12]
 8010b7e:	f002 fa4b 	bl	8013018 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEEvPSt13_Rb_tree_nodeIS7_EDpOT_>
	  return __tmp;
 8010b82:	697b      	ldr	r3, [r7, #20]
	}
 8010b84:	4618      	mov	r0, r3
 8010b86:	3718      	adds	r7, #24
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bdb0      	pop	{r4, r5, r7, pc}

08010b8c <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8010b8c:	b590      	push	{r4, r7, lr}
 8010b8e:	b08d      	sub	sp, #52	; 0x34
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	60f8      	str	r0, [r7, #12]
 8010b94:	60b9      	str	r1, [r7, #8]
 8010b96:	607a      	str	r2, [r7, #4]
 8010b98:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8010b9a:	1d3b      	adds	r3, r7, #4
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	f002 fa68 	bl	8013072 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEE13_M_const_castEv>
 8010ba2:	4603      	mov	r3, r0
 8010ba4:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8010ba6:	69bc      	ldr	r4, [r7, #24]
 8010ba8:	68b8      	ldr	r0, [r7, #8]
 8010baa:	f002 f9d8 	bl	8012f5e <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE6_M_endEv>
 8010bae:	4603      	mov	r3, r0
 8010bb0:	429c      	cmp	r4, r3
 8010bb2:	bf0c      	ite	eq
 8010bb4:	2301      	moveq	r3, #1
 8010bb6:	2300      	movne	r3, #0
 8010bb8:	b2db      	uxtb	r3, r3
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d030      	beq.n	8010c20 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS1_+0x94>
	  if (size() > 0
 8010bbe:	68b8      	ldr	r0, [r7, #8]
 8010bc0:	f002 fa68 	bl	8013094 <_ZNKSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE4sizeEv>
 8010bc4:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d013      	beq.n	8010bf2 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS1_+0x66>
 8010bca:	68bc      	ldr	r4, [r7, #8]
 8010bcc:	68b8      	ldr	r0, [r7, #8]
 8010bce:	f002 fa6d 	bl	80130ac <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE12_M_rightmostEv>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f002 fa74 	bl	80130c4 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	683a      	ldr	r2, [r7, #0]
 8010be0:	4619      	mov	r1, r3
 8010be2:	4620      	mov	r0, r4
 8010be4:	f7fe f8f2 	bl	800edcc <_ZNKSt4lessIcEclERKcS2_>
 8010be8:	4603      	mov	r3, r0
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d001      	beq.n	8010bf2 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS1_+0x66>
 8010bee:	2301      	movs	r3, #1
 8010bf0:	e000      	b.n	8010bf4 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS1_+0x68>
 8010bf2:	2300      	movs	r3, #0
	  if (size() > 0
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d00c      	beq.n	8010c12 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	61fb      	str	r3, [r7, #28]
 8010bfc:	68b8      	ldr	r0, [r7, #8]
 8010bfe:	f002 fa55 	bl	80130ac <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE12_M_rightmostEv>
 8010c02:	4602      	mov	r2, r0
 8010c04:	f107 031c 	add.w	r3, r7, #28
 8010c08:	4619      	mov	r1, r3
 8010c0a:	68f8      	ldr	r0, [r7, #12]
 8010c0c:	f002 fa66 	bl	80130dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8010c10:	e0db      	b.n	8010dca <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	683a      	ldr	r2, [r7, #0]
 8010c16:	68b9      	ldr	r1, [r7, #8]
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f002 fa75 	bl	8013108 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE24_M_get_insert_unique_posERS1_>
 8010c1e:	e0d4      	b.n	8010dca <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8010c20:	68bc      	ldr	r4, [r7, #8]
 8010c22:	69bb      	ldr	r3, [r7, #24]
 8010c24:	4618      	mov	r0, r3
 8010c26:	f002 fa4d 	bl	80130c4 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	461a      	mov	r2, r3
 8010c2e:	6839      	ldr	r1, [r7, #0]
 8010c30:	4620      	mov	r0, r4
 8010c32:	f7fe f8cb 	bl	800edcc <_ZNKSt4lessIcEclERKcS2_>
 8010c36:	4603      	mov	r3, r0
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d057      	beq.n	8010cec <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS1_+0x160>
	  iterator __before = __pos;
 8010c3c:	69bb      	ldr	r3, [r7, #24]
 8010c3e:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8010c40:	69bc      	ldr	r4, [r7, #24]
 8010c42:	68b8      	ldr	r0, [r7, #8]
 8010c44:	f002 fae5 	bl	8013212 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE11_M_leftmostEv>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	429c      	cmp	r4, r3
 8010c4e:	bf0c      	ite	eq
 8010c50:	2301      	moveq	r3, #1
 8010c52:	2300      	movne	r3, #0
 8010c54:	b2db      	uxtb	r3, r3
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d00d      	beq.n	8010c76 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8010c5a:	68b8      	ldr	r0, [r7, #8]
 8010c5c:	f002 fad9 	bl	8013212 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE11_M_leftmostEv>
 8010c60:	4604      	mov	r4, r0
 8010c62:	68b8      	ldr	r0, [r7, #8]
 8010c64:	f002 fad5 	bl	8013212 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE11_M_leftmostEv>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	461a      	mov	r2, r3
 8010c6c:	4621      	mov	r1, r4
 8010c6e:	68f8      	ldr	r0, [r7, #12]
 8010c70:	f002 fadb 	bl	801322a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8010c74:	e0a9      	b.n	8010dca <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8010c76:	68bc      	ldr	r4, [r7, #8]
 8010c78:	f107 0314 	add.w	r3, r7, #20
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	f002 faed 	bl	801325c <_ZNSt17_Rb_tree_iteratorISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEEmmEv>
 8010c82:	4603      	mov	r3, r0
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	4618      	mov	r0, r3
 8010c88:	f002 fa1c 	bl	80130c4 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	683a      	ldr	r2, [r7, #0]
 8010c90:	4619      	mov	r1, r3
 8010c92:	4620      	mov	r0, r4
 8010c94:	f7fe f89a 	bl	800edcc <_ZNKSt4lessIcEclERKcS2_>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d01f      	beq.n	8010cde <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	f7ff fe80 	bl	80109a6 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE8_S_rightEPSt18_Rb_tree_node_base>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	bf0c      	ite	eq
 8010cac:	2301      	moveq	r3, #1
 8010cae:	2300      	movne	r3, #0
 8010cb0:	b2db      	uxtb	r3, r3
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d00a      	beq.n	8010ccc <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS1_+0x140>
		return _Res(0, __before._M_node);
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	623b      	str	r3, [r7, #32]
 8010cba:	f107 0214 	add.w	r2, r7, #20
 8010cbe:	f107 0320 	add.w	r3, r7, #32
 8010cc2:	4619      	mov	r1, r3
 8010cc4:	68f8      	ldr	r0, [r7, #12]
 8010cc6:	f002 fa09 	bl	80130dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8010cca:	e07e      	b.n	8010dca <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8010ccc:	f107 0218 	add.w	r2, r7, #24
 8010cd0:	f107 0318 	add.w	r3, r7, #24
 8010cd4:	4619      	mov	r1, r3
 8010cd6:	68f8      	ldr	r0, [r7, #12]
 8010cd8:	f002 faa7 	bl	801322a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8010cdc:	e075      	b.n	8010dca <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	683a      	ldr	r2, [r7, #0]
 8010ce2:	68b9      	ldr	r1, [r7, #8]
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	f002 fa0f 	bl	8013108 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE24_M_get_insert_unique_posERS1_>
 8010cea:	e06e      	b.n	8010dca <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8010cec:	68bc      	ldr	r4, [r7, #8]
 8010cee:	69bb      	ldr	r3, [r7, #24]
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	f002 f9e7 	bl	80130c4 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	683a      	ldr	r2, [r7, #0]
 8010cfa:	4619      	mov	r1, r3
 8010cfc:	4620      	mov	r0, r4
 8010cfe:	f7fe f865 	bl	800edcc <_ZNKSt4lessIcEclERKcS2_>
 8010d02:	4603      	mov	r3, r0
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d056      	beq.n	8010db6 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS1_+0x22a>
	  iterator __after = __pos;
 8010d08:	69bb      	ldr	r3, [r7, #24]
 8010d0a:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8010d0c:	69bc      	ldr	r4, [r7, #24]
 8010d0e:	68b8      	ldr	r0, [r7, #8]
 8010d10:	f002 f9cc 	bl	80130ac <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE12_M_rightmostEv>
 8010d14:	4603      	mov	r3, r0
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	429c      	cmp	r4, r3
 8010d1a:	bf0c      	ite	eq
 8010d1c:	2301      	moveq	r3, #1
 8010d1e:	2300      	movne	r3, #0
 8010d20:	b2db      	uxtb	r3, r3
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d00c      	beq.n	8010d40 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 8010d26:	2300      	movs	r3, #0
 8010d28:	627b      	str	r3, [r7, #36]	; 0x24
 8010d2a:	68b8      	ldr	r0, [r7, #8]
 8010d2c:	f002 f9be 	bl	80130ac <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE12_M_rightmostEv>
 8010d30:	4602      	mov	r2, r0
 8010d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010d36:	4619      	mov	r1, r3
 8010d38:	68f8      	ldr	r0, [r7, #12]
 8010d3a:	f002 f9cf 	bl	80130dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8010d3e:	e044      	b.n	8010dca <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8010d40:	68bc      	ldr	r4, [r7, #8]
 8010d42:	f107 0310 	add.w	r3, r7, #16
 8010d46:	4618      	mov	r0, r3
 8010d48:	f7fd f84d 	bl	800dde6 <_ZNSt17_Rb_tree_iteratorISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEEppEv>
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	4618      	mov	r0, r3
 8010d52:	f002 f9b7 	bl	80130c4 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010d56:	4603      	mov	r3, r0
 8010d58:	461a      	mov	r2, r3
 8010d5a:	6839      	ldr	r1, [r7, #0]
 8010d5c:	4620      	mov	r0, r4
 8010d5e:	f7fe f835 	bl	800edcc <_ZNKSt4lessIcEclERKcS2_>
 8010d62:	4603      	mov	r3, r0
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d01f      	beq.n	8010da8 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8010d68:	69bb      	ldr	r3, [r7, #24]
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	f7ff fe1b 	bl	80109a6 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE8_S_rightEPSt18_Rb_tree_node_base>
 8010d70:	4603      	mov	r3, r0
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	bf0c      	ite	eq
 8010d76:	2301      	moveq	r3, #1
 8010d78:	2300      	movne	r3, #0
 8010d7a:	b2db      	uxtb	r3, r3
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d00a      	beq.n	8010d96 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8010d80:	2300      	movs	r3, #0
 8010d82:	62bb      	str	r3, [r7, #40]	; 0x28
 8010d84:	f107 0218 	add.w	r2, r7, #24
 8010d88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010d8c:	4619      	mov	r1, r3
 8010d8e:	68f8      	ldr	r0, [r7, #12]
 8010d90:	f002 f9a4 	bl	80130dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8010d94:	e019      	b.n	8010dca <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8010d96:	f107 0210 	add.w	r2, r7, #16
 8010d9a:	f107 0310 	add.w	r3, r7, #16
 8010d9e:	4619      	mov	r1, r3
 8010da0:	68f8      	ldr	r0, [r7, #12]
 8010da2:	f002 fa42 	bl	801322a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8010da6:	e010      	b.n	8010dca <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	683a      	ldr	r2, [r7, #0]
 8010dac:	68b9      	ldr	r1, [r7, #8]
 8010dae:	4618      	mov	r0, r3
 8010db0:	f002 f9aa 	bl	8013108 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE24_M_get_insert_unique_posERS1_>
 8010db4:	e009      	b.n	8010dca <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS7_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 8010db6:	2300      	movs	r3, #0
 8010db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010dba:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8010dbe:	f107 0318 	add.w	r3, r7, #24
 8010dc2:	4619      	mov	r1, r3
 8010dc4:	68f8      	ldr	r0, [r7, #12]
 8010dc6:	f002 fa5a 	bl	801327e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8010dca:	68f8      	ldr	r0, [r7, #12]
 8010dcc:	3734      	adds	r7, #52	; 0x34
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd90      	pop	{r4, r7, pc}

08010dd2 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE6_S_keyEPKSt13_Rb_tree_nodeIS7_E>:
      _S_key(_Const_Link_type __x)
 8010dd2:	b580      	push	{r7, lr}
 8010dd4:	b084      	sub	sp, #16
 8010dd6:	af00      	add	r7, sp, #0
 8010dd8:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8010dda:	6878      	ldr	r0, [r7, #4]
 8010ddc:	f002 fa65 	bl	80132aa <_ZNKSt13_Rb_tree_nodeISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEE9_M_valptrEv>
 8010de0:	4602      	mov	r2, r0
 8010de2:	f107 030c 	add.w	r3, r7, #12
 8010de6:	4611      	mov	r1, r2
 8010de8:	4618      	mov	r0, r3
 8010dea:	f002 fa6c 	bl	80132c6 <_ZNKSt10_Select1stISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEEclERKS7_>
 8010dee:	4603      	mov	r3, r0
      }
 8010df0:	4618      	mov	r0, r3
 8010df2:	3710      	adds	r7, #16
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}

08010df8 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSF_PSt13_Rb_tree_nodeIS7_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8010df8:	b5b0      	push	{r4, r5, r7, lr}
 8010dfa:	b086      	sub	sp, #24
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	60f8      	str	r0, [r7, #12]
 8010e00:	60b9      	str	r1, [r7, #8]
 8010e02:	607a      	str	r2, [r7, #4]
 8010e04:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8010e06:	68bb      	ldr	r3, [r7, #8]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d117      	bne.n	8010e3c <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSF_PSt13_Rb_tree_nodeIS7_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8010e0c:	68f8      	ldr	r0, [r7, #12]
 8010e0e:	f002 f8a6 	bl	8012f5e <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE6_M_endEv>
 8010e12:	4602      	mov	r2, r0
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	4293      	cmp	r3, r2
 8010e18:	d010      	beq.n	8010e3c <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSF_PSt13_Rb_tree_nodeIS7_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8010e1a:	68fc      	ldr	r4, [r7, #12]
 8010e1c:	6838      	ldr	r0, [r7, #0]
 8010e1e:	f7ff ffd8 	bl	8010dd2 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE6_S_keyEPKSt13_Rb_tree_nodeIS7_E>
 8010e22:	4605      	mov	r5, r0
 8010e24:	6878      	ldr	r0, [r7, #4]
 8010e26:	f002 f94d 	bl	80130c4 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	461a      	mov	r2, r3
 8010e2e:	4629      	mov	r1, r5
 8010e30:	4620      	mov	r0, r4
 8010e32:	f7fd ffcb 	bl	800edcc <_ZNKSt4lessIcEclERKcS2_>
 8010e36:	4603      	mov	r3, r0
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d001      	beq.n	8010e40 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSF_PSt13_Rb_tree_nodeIS7_E+0x48>
 8010e3c:	2301      	movs	r3, #1
 8010e3e:	e000      	b.n	8010e42 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSF_PSt13_Rb_tree_nodeIS7_E+0x4a>
 8010e40:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8010e42:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8010e48:	7df8      	ldrb	r0, [r7, #23]
 8010e4a:	687a      	ldr	r2, [r7, #4]
 8010e4c:	6839      	ldr	r1, [r7, #0]
 8010e4e:	f014 fd8d 	bl	802596c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	695b      	ldr	r3, [r3, #20]
 8010e56:	1c5a      	adds	r2, r3, #1
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8010e5c:	f107 0310 	add.w	r3, r7, #16
 8010e60:	6839      	ldr	r1, [r7, #0]
 8010e62:	4618      	mov	r0, r3
 8010e64:	f000 f805 	bl	8010e72 <_ZNSt17_Rb_tree_iteratorISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEEC1EPSt18_Rb_tree_node_base>
 8010e68:	693b      	ldr	r3, [r7, #16]
    }
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	3718      	adds	r7, #24
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bdb0      	pop	{r4, r5, r7, pc}

08010e72 <_ZNSt17_Rb_tree_iteratorISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8010e72:	b480      	push	{r7}
 8010e74:	b083      	sub	sp, #12
 8010e76:	af00      	add	r7, sp, #0
 8010e78:	6078      	str	r0, [r7, #4]
 8010e7a:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	683a      	ldr	r2, [r7, #0]
 8010e80:	601a      	str	r2, [r3, #0]
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	4618      	mov	r0, r3
 8010e86:	370c      	adds	r7, #12
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8e:	4770      	bx	lr

08010e90 <_ZN9__gnu_cxx13new_allocatorISt4pairIciEEC1Ev>:
 8010e90:	b480      	push	{r7}
 8010e92:	b083      	sub	sp, #12
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	370c      	adds	r7, #12
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea4:	4770      	bx	lr

08010ea6 <_ZNSt16allocator_traitsISaISt4pairIciEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8010ea6:	b580      	push	{r7, lr}
 8010ea8:	b088      	sub	sp, #32
 8010eaa:	af00      	add	r7, sp, #0
 8010eac:	60f8      	str	r0, [r7, #12]
 8010eae:	60b9      	str	r1, [r7, #8]
 8010eb0:	607a      	str	r2, [r7, #4]
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	61fb      	str	r3, [r7, #28]
 8010eb6:	68bb      	ldr	r3, [r7, #8]
 8010eb8:	61bb      	str	r3, [r7, #24]
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8010ebe:	f7f1 fe25 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d003      	beq.n	8010ed0 <_ZNSt16allocator_traitsISaISt4pairIciEEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8010ec8:	69b8      	ldr	r0, [r7, #24]
 8010eca:	f014 fcdf 	bl	802588c <_ZdlPv>
	    return;
 8010ece:	e005      	b.n	8010edc <_ZNSt16allocator_traitsISaISt4pairIciEEE10deallocateERS2_PS1_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 8010ed0:	697a      	ldr	r2, [r7, #20]
 8010ed2:	69b9      	ldr	r1, [r7, #24]
 8010ed4:	69f8      	ldr	r0, [r7, #28]
 8010ed6:	f003 feb5 	bl	8014c44 <_ZN9__gnu_cxx13new_allocatorISt4pairIciEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8010eda:	bf00      	nop
 8010edc:	bf00      	nop
 8010ede:	3720      	adds	r7, #32
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}

08010ee4 <_ZSt8_DestroyIPSt4pairIciEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b082      	sub	sp, #8
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
 8010eec:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8010eee:	f7f1 fe0d 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d004      	beq.n	8010f02 <_ZSt8_DestroyIPSt4pairIciEEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8010ef8:	6839      	ldr	r1, [r7, #0]
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	f002 f9ef 	bl	80132de <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIciEEEvT_S5_>
 8010f00:	e003      	b.n	8010f0a <_ZSt8_DestroyIPSt4pairIciEEvT_S3_+0x26>
	__destroy(__first, __last);
 8010f02:	6839      	ldr	r1, [r7, #0]
 8010f04:	6878      	ldr	r0, [r7, #4]
 8010f06:	f002 fa03 	bl	8013310 <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt4pairIciEEEvT_S5_>
    }
 8010f0a:	3708      	adds	r7, #8
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	bd80      	pop	{r7, pc}

08010f10 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE12_Vector_implC1EOS4_>:
	_Vector_impl(_Vector_impl&& __x) noexcept
 8010f10:	b590      	push	{r4, r7, lr}
 8010f12:	b083      	sub	sp, #12
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
 8010f18:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 8010f1a:	6838      	ldr	r0, [r7, #0]
 8010f1c:	f002 fa03 	bl	8013326 <_ZSt4moveIRNSt12_Vector_baseISt4pairIciESaIS2_EE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS8_>
 8010f20:	4603      	mov	r3, r0
 8010f22:	4619      	mov	r1, r3
 8010f24:	6878      	ldr	r0, [r7, #4]
 8010f26:	f002 fa09 	bl	801333c <_ZNSaISt4pairIciEEC1ERKS1_>
 8010f2a:	687c      	ldr	r4, [r7, #4]
 8010f2c:	6838      	ldr	r0, [r7, #0]
 8010f2e:	f002 f9fa 	bl	8013326 <_ZSt4moveIRNSt12_Vector_baseISt4pairIciESaIS2_EE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS8_>
 8010f32:	4603      	mov	r3, r0
 8010f34:	4619      	mov	r1, r3
 8010f36:	4620      	mov	r0, r4
 8010f38:	f002 fa0e 	bl	8013358 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE17_Vector_impl_dataC1EOS4_>
	{ }
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	4618      	mov	r0, r3
 8010f40:	370c      	adds	r7, #12
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bd90      	pop	{r4, r7, pc}

08010f46 <_ZNKSt12_Vector_baseISt4pairIciESaIS1_EE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 8010f46:	b580      	push	{r7, lr}
 8010f48:	b082      	sub	sp, #8
 8010f4a:	af00      	add	r7, sp, #0
 8010f4c:	6078      	str	r0, [r7, #4]
 8010f4e:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 8010f50:	6838      	ldr	r0, [r7, #0]
 8010f52:	f7fe fa03 	bl	800f35c <_ZNKSt12_Vector_baseISt4pairIciESaIS1_EE19_M_get_Tp_allocatorEv>
 8010f56:	4603      	mov	r3, r0
 8010f58:	4619      	mov	r1, r3
 8010f5a:	6878      	ldr	r0, [r7, #4]
 8010f5c:	f002 f9ee 	bl	801333c <_ZNSaISt4pairIciEEC1ERKS1_>
 8010f60:	6878      	ldr	r0, [r7, #4]
 8010f62:	3708      	adds	r7, #8
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd80      	pop	{r7, pc}

08010f68 <_ZNSt6vectorISt4pairIciESaIS1_EEC1ERKS2_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b082      	sub	sp, #8
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
 8010f70:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	6839      	ldr	r1, [r7, #0]
 8010f76:	4618      	mov	r0, r3
 8010f78:	f002 fa11 	bl	801339e <_ZNSt12_Vector_baseISt4pairIciESaIS1_EEC1ERKS2_>
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	4618      	mov	r0, r3
 8010f80:	3708      	adds	r7, #8
 8010f82:	46bd      	mov	sp, r7
 8010f84:	bd80      	pop	{r7, pc}

08010f86 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE17_Vector_impl_data12_M_swap_dataERS4_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 8010f86:	b580      	push	{r7, lr}
 8010f88:	b086      	sub	sp, #24
 8010f8a:	af00      	add	r7, sp, #0
 8010f8c:	6078      	str	r0, [r7, #4]
 8010f8e:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 8010f90:	f107 030c 	add.w	r3, r7, #12
 8010f94:	4618      	mov	r0, r3
 8010f96:	f7fd ff97 	bl	800eec8 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 8010f9a:	f107 030c 	add.w	r3, r7, #12
 8010f9e:	6879      	ldr	r1, [r7, #4]
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	f002 fa0b 	bl	80133bc <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE17_Vector_impl_data12_M_copy_dataERKS4_>
	  _M_copy_data(__x);
 8010fa6:	6839      	ldr	r1, [r7, #0]
 8010fa8:	6878      	ldr	r0, [r7, #4]
 8010faa:	f002 fa07 	bl	80133bc <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE17_Vector_impl_data12_M_copy_dataERKS4_>
	  __x._M_copy_data(__tmp);
 8010fae:	f107 030c 	add.w	r3, r7, #12
 8010fb2:	4619      	mov	r1, r3
 8010fb4:	6838      	ldr	r0, [r7, #0]
 8010fb6:	f002 fa01 	bl	80133bc <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE17_Vector_impl_data12_M_copy_dataERKS4_>
	}
 8010fba:	bf00      	nop
 8010fbc:	3718      	adds	r7, #24
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	bd80      	pop	{r7, pc}

08010fc2 <_ZSt15__alloc_on_moveISaISt4pairIciEEEvRT_S4_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8010fc2:	b580      	push	{r7, lr}
 8010fc4:	b082      	sub	sp, #8
 8010fc6:	af00      	add	r7, sp, #0
 8010fc8:	6078      	str	r0, [r7, #4]
 8010fca:	6039      	str	r1, [r7, #0]
	__one = std::move(__two);
 8010fcc:	6838      	ldr	r0, [r7, #0]
 8010fce:	f002 fa0c 	bl	80133ea <_ZSt4moveIRSaISt4pairIciEEEONSt16remove_referenceIT_E4typeEOS5_>
    }
 8010fd2:	bf00      	nop
 8010fd4:	3708      	adds	r7, #8
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	bd80      	pop	{r7, pc}

08010fda <_ZNSt6vectorISt4pairIfcESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 8010fda:	b5b0      	push	{r4, r5, r7, lr}
 8010fdc:	b082      	sub	sp, #8
 8010fde:	af00      	add	r7, sp, #0
 8010fe0:	6078      	str	r0, [r7, #4]
 8010fe2:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	685a      	ldr	r2, [r3, #4]
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	689b      	ldr	r3, [r3, #8]
 8010fec:	429a      	cmp	r2, r3
 8010fee:	d012      	beq.n	8011016 <_ZNSt6vectorISt4pairIfcESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8010ff0:	687c      	ldr	r4, [r7, #4]
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	685d      	ldr	r5, [r3, #4]
 8010ff6:	6838      	ldr	r0, [r7, #0]
 8010ff8:	f002 fa02 	bl	8013400 <_ZSt7forwardISt4pairIfcEEOT_RNSt16remove_referenceIS2_E4typeE>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	461a      	mov	r2, r3
 8011000:	4629      	mov	r1, r5
 8011002:	4620      	mov	r0, r4
 8011004:	f002 fa21 	bl	801344a <_ZNSt16allocator_traitsISaISt4pairIfcEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	685b      	ldr	r3, [r3, #4]
 801100c:	f103 0208 	add.w	r2, r3, #8
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	605a      	str	r2, [r3, #4]
 8011014:	e00c      	b.n	8011030 <_ZNSt6vectorISt4pairIfcESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	f7fe f878 	bl	800f10c <_ZNSt6vectorISt4pairIfcESaIS1_EE3endEv>
 801101c:	4604      	mov	r4, r0
 801101e:	6838      	ldr	r0, [r7, #0]
 8011020:	f002 f9ee 	bl	8013400 <_ZSt7forwardISt4pairIfcEEOT_RNSt16remove_referenceIS2_E4typeE>
 8011024:	4603      	mov	r3, r0
 8011026:	461a      	mov	r2, r3
 8011028:	4621      	mov	r1, r4
 801102a:	6878      	ldr	r0, [r7, #4]
 801102c:	f002 fa20 	bl	8013470 <_ZNSt6vectorISt4pairIfcESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8011030:	6878      	ldr	r0, [r7, #4]
 8011032:	f002 fa99 	bl	8013568 <_ZNSt6vectorISt4pairIfcESaIS1_EE4backEv>
 8011036:	4603      	mov	r3, r0
      }
 8011038:	4618      	mov	r0, r3
 801103a:	3708      	adds	r7, #8
 801103c:	46bd      	mov	sp, r7
 801103e:	bdb0      	pop	{r4, r5, r7, pc}

08011040 <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8011040:	b480      	push	{r7}
 8011042:	b083      	sub	sp, #12
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
 8011048:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 801104a:	683b      	ldr	r3, [r7, #0]
 801104c:	681a      	ldr	r2, [r3, #0]
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	601a      	str	r2, [r3, #0]
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	4618      	mov	r0, r3
 8011056:	370c      	adds	r7, #12
 8011058:	46bd      	mov	sp, r7
 801105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105e:	4770      	bx	lr

08011060 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8011060:	b580      	push	{r7, lr}
 8011062:	b084      	sub	sp, #16
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
 8011068:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681a      	ldr	r2, [r3, #0]
 801106e:	683b      	ldr	r3, [r7, #0]
 8011070:	00db      	lsls	r3, r3, #3
 8011072:	425b      	negs	r3, r3
 8011074:	4413      	add	r3, r2
 8011076:	60fb      	str	r3, [r7, #12]
 8011078:	f107 020c 	add.w	r2, r7, #12
 801107c:	f107 0308 	add.w	r3, r7, #8
 8011080:	4611      	mov	r1, r2
 8011082:	4618      	mov	r0, r3
 8011084:	f7ff ffdc 	bl	8011040 <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8011088:	68bb      	ldr	r3, [r7, #8]
 801108a:	4618      	mov	r0, r3
 801108c:	3710      	adds	r7, #16
 801108e:	46bd      	mov	sp, r7
 8011090:	bd80      	pop	{r7, pc}

08011092 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8011092:	b480      	push	{r7}
 8011094:	b083      	sub	sp, #12
 8011096:	af00      	add	r7, sp, #0
 8011098:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	4618      	mov	r0, r3
 80110a0:	370c      	adds	r7, #12
 80110a2:	46bd      	mov	sp, r7
 80110a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a8:	4770      	bx	lr

080110aa <_ZNSt4pairIfcEaSEOS0_>:
      operator=(typename conditional<
 80110aa:	b580      	push	{r7, lr}
 80110ac:	b082      	sub	sp, #8
 80110ae:	af00      	add	r7, sp, #0
 80110b0:	6078      	str	r0, [r7, #4]
 80110b2:	6039      	str	r1, [r7, #0]
	first = std::forward<first_type>(__p.first);
 80110b4:	683b      	ldr	r3, [r7, #0]
 80110b6:	4618      	mov	r0, r3
 80110b8:	f7f7 fe16 	bl	8008ce8 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 80110bc:	4603      	mov	r3, r0
 80110be:	681a      	ldr	r2, [r3, #0]
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	601a      	str	r2, [r3, #0]
	second = std::forward<second_type>(__p.second);
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	3304      	adds	r3, #4
 80110c8:	4618      	mov	r0, r3
 80110ca:	f7f7 fe36 	bl	8008d3a <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>
 80110ce:	4603      	mov	r3, r0
 80110d0:	781a      	ldrb	r2, [r3, #0]
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	711a      	strb	r2, [r3, #4]
	return *this;
 80110d6:	687b      	ldr	r3, [r7, #4]
      }
 80110d8:	4618      	mov	r0, r3
 80110da:	3708      	adds	r7, #8
 80110dc:	46bd      	mov	sp, r7
 80110de:	bd80      	pop	{r7, pc}

080110e0 <_ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterISt4pairIfcEEEclINS_17__normal_iteratorIPS4_St6vectorIS4_SaIS4_EEEES4_EEbT_RT0_>:
	operator()(_Iterator __it, _Value& __val)
 80110e0:	b590      	push	{r4, r7, lr}
 80110e2:	b085      	sub	sp, #20
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	60f8      	str	r0, [r7, #12]
 80110e8:	60b9      	str	r1, [r7, #8]
 80110ea:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(*__it, __val)); }
 80110ec:	68fc      	ldr	r4, [r7, #12]
 80110ee:	f107 0308 	add.w	r3, r7, #8
 80110f2:	4618      	mov	r0, r3
 80110f4:	f7ff ffcd 	bl	8011092 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEdeEv>
 80110f8:	4603      	mov	r3, r0
 80110fa:	687a      	ldr	r2, [r7, #4]
 80110fc:	4619      	mov	r1, r3
 80110fe:	4620      	mov	r0, r4
 8011100:	f002 fa9e 	bl	8013640 <_ZNKSt7greaterISt4pairIfcEEclERKS1_S4_>
 8011104:	4603      	mov	r3, r0
 8011106:	4618      	mov	r0, r3
 8011108:	3714      	adds	r7, #20
 801110a:	46bd      	mov	sp, r7
 801110c:	bd90      	pop	{r4, r7, pc}

0801110e <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 801110e:	b580      	push	{r7, lr}
 8011110:	b084      	sub	sp, #16
 8011112:	af00      	add	r7, sp, #0
 8011114:	6078      	str	r0, [r7, #4]
 8011116:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	681a      	ldr	r2, [r3, #0]
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	00db      	lsls	r3, r3, #3
 8011120:	4413      	add	r3, r2
 8011122:	60fb      	str	r3, [r7, #12]
 8011124:	f107 020c 	add.w	r2, r7, #12
 8011128:	f107 0308 	add.w	r3, r7, #8
 801112c:	4611      	mov	r1, r2
 801112e:	4618      	mov	r0, r3
 8011130:	f7ff ff86 	bl	8011040 <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8011134:	68bb      	ldr	r3, [r7, #8]
 8011136:	4618      	mov	r0, r3
 8011138:	3710      	adds	r7, #16
 801113a:	46bd      	mov	sp, r7
 801113c:	bd80      	pop	{r7, pc}

0801113e <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops14_Iter_comp_valISt7greaterIS3_EEEEvT_T0_SF_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 801113e:	b082      	sub	sp, #8
 8011140:	b590      	push	{r4, r7, lr}
 8011142:	b089      	sub	sp, #36	; 0x24
 8011144:	af00      	add	r7, sp, #0
 8011146:	60f8      	str	r0, [r7, #12]
 8011148:	60b9      	str	r1, [r7, #8]
 801114a:	607a      	str	r2, [r7, #4]
 801114c:	637b      	str	r3, [r7, #52]	; 0x34
      _Distance __parent = (__holeIndex - 1) / 2;
 801114e:	68bb      	ldr	r3, [r7, #8]
 8011150:	3b01      	subs	r3, #1
 8011152:	0fda      	lsrs	r2, r3, #31
 8011154:	4413      	add	r3, r2
 8011156:	105b      	asrs	r3, r3, #1
 8011158:	61fb      	str	r3, [r7, #28]
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 801115a:	e02b      	b.n	80111b4 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops14_Iter_comp_valISt7greaterIS3_EEEEvT_T0_SF_T1_RT2_+0x76>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 801115c:	f107 030c 	add.w	r3, r7, #12
 8011160:	69f9      	ldr	r1, [r7, #28]
 8011162:	4618      	mov	r0, r3
 8011164:	f7ff ffd3 	bl	801110e <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEplEi>
 8011168:	4603      	mov	r3, r0
 801116a:	613b      	str	r3, [r7, #16]
 801116c:	f107 0310 	add.w	r3, r7, #16
 8011170:	4618      	mov	r0, r3
 8011172:	f7ff ff8e 	bl	8011092 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEdeEv>
 8011176:	4603      	mov	r3, r0
 8011178:	4618      	mov	r0, r3
 801117a:	f7f7 fdaa 	bl	8008cd2 <_ZSt4moveIRSt4pairIfcEEONSt16remove_referenceIT_E4typeEOS4_>
 801117e:	4604      	mov	r4, r0
 8011180:	f107 030c 	add.w	r3, r7, #12
 8011184:	68b9      	ldr	r1, [r7, #8]
 8011186:	4618      	mov	r0, r3
 8011188:	f7ff ffc1 	bl	801110e <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEplEi>
 801118c:	4603      	mov	r3, r0
 801118e:	617b      	str	r3, [r7, #20]
 8011190:	f107 0314 	add.w	r3, r7, #20
 8011194:	4618      	mov	r0, r3
 8011196:	f7ff ff7c 	bl	8011092 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEdeEv>
 801119a:	4603      	mov	r3, r0
 801119c:	4621      	mov	r1, r4
 801119e:	4618      	mov	r0, r3
 80111a0:	f7ff ff83 	bl	80110aa <_ZNSt4pairIfcEaSEOS0_>
	  __holeIndex = __parent;
 80111a4:	69fb      	ldr	r3, [r7, #28]
 80111a6:	60bb      	str	r3, [r7, #8]
	  __parent = (__holeIndex - 1) / 2;
 80111a8:	68bb      	ldr	r3, [r7, #8]
 80111aa:	3b01      	subs	r3, #1
 80111ac:	0fda      	lsrs	r2, r3, #31
 80111ae:	4413      	add	r3, r2
 80111b0:	105b      	asrs	r3, r3, #1
 80111b2:	61fb      	str	r3, [r7, #28]
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80111b4:	68ba      	ldr	r2, [r7, #8]
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	429a      	cmp	r2, r3
 80111ba:	dd11      	ble.n	80111e0 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops14_Iter_comp_valISt7greaterIS3_EEEEvT_T0_SF_T1_RT2_+0xa2>
 80111bc:	f107 030c 	add.w	r3, r7, #12
 80111c0:	69f9      	ldr	r1, [r7, #28]
 80111c2:	4618      	mov	r0, r3
 80111c4:	f7ff ffa3 	bl	801110e <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEplEi>
 80111c8:	4601      	mov	r1, r0
 80111ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80111ce:	461a      	mov	r2, r3
 80111d0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80111d2:	f7ff ff85 	bl	80110e0 <_ZN9__gnu_cxx5__ops14_Iter_comp_valISt7greaterISt4pairIfcEEEclINS_17__normal_iteratorIPS4_St6vectorIS4_SaIS4_EEEES4_EEbT_RT0_>
 80111d6:	4603      	mov	r3, r0
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d001      	beq.n	80111e0 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops14_Iter_comp_valISt7greaterIS3_EEEEvT_T0_SF_T1_RT2_+0xa2>
 80111dc:	2301      	movs	r3, #1
 80111de:	e000      	b.n	80111e2 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops14_Iter_comp_valISt7greaterIS3_EEEEvT_T0_SF_T1_RT2_+0xa4>
 80111e0:	2300      	movs	r3, #0
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d1ba      	bne.n	801115c <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops14_Iter_comp_valISt7greaterIS3_EEEEvT_T0_SF_T1_RT2_+0x1e>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 80111e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80111ea:	4618      	mov	r0, r3
 80111ec:	f7f7 fd71 	bl	8008cd2 <_ZSt4moveIRSt4pairIfcEEONSt16remove_referenceIT_E4typeEOS4_>
 80111f0:	4604      	mov	r4, r0
 80111f2:	f107 030c 	add.w	r3, r7, #12
 80111f6:	68b9      	ldr	r1, [r7, #8]
 80111f8:	4618      	mov	r0, r3
 80111fa:	f7ff ff88 	bl	801110e <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEplEi>
 80111fe:	4603      	mov	r3, r0
 8011200:	61bb      	str	r3, [r7, #24]
 8011202:	f107 0318 	add.w	r3, r7, #24
 8011206:	4618      	mov	r0, r3
 8011208:	f7ff ff43 	bl	8011092 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEdeEv>
 801120c:	4603      	mov	r3, r0
 801120e:	4621      	mov	r1, r4
 8011210:	4618      	mov	r0, r3
 8011212:	f7ff ff4a 	bl	80110aa <_ZNSt4pairIfcEaSEOS0_>
    }
 8011216:	bf00      	nop
 8011218:	3724      	adds	r7, #36	; 0x24
 801121a:	46bd      	mov	sp, r7
 801121c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8011220:	b002      	add	sp, #8
 8011222:	4770      	bx	lr

08011224 <_ZNKSt6vectorISt4pairIfcESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8011224:	b580      	push	{r7, lr}
 8011226:	b084      	sub	sp, #16
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 801122c:	687a      	ldr	r2, [r7, #4]
 801122e:	f107 030c 	add.w	r3, r7, #12
 8011232:	4611      	mov	r1, r2
 8011234:	4618      	mov	r0, r3
 8011236:	f002 fa1d 	bl	8013674 <_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIfcESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	4618      	mov	r0, r3
 801123e:	3710      	adds	r7, #16
 8011240:	46bd      	mov	sp, r7
 8011242:	bd80      	pop	{r7, pc}

08011244 <_ZNKSt6vectorISt4pairIfcESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8011244:	b580      	push	{r7, lr}
 8011246:	b084      	sub	sp, #16
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	1d1a      	adds	r2, r3, #4
 8011250:	f107 030c 	add.w	r3, r7, #12
 8011254:	4611      	mov	r1, r2
 8011256:	4618      	mov	r0, r3
 8011258:	f002 fa0c 	bl	8013674 <_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIfcESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	4618      	mov	r0, r3
 8011260:	3710      	adds	r7, #16
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}

08011266 <_ZN9__gnu_cxxeqIPKSt4pairIfcESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8011266:	b590      	push	{r4, r7, lr}
 8011268:	b083      	sub	sp, #12
 801126a:	af00      	add	r7, sp, #0
 801126c:	6078      	str	r0, [r7, #4]
 801126e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8011270:	6878      	ldr	r0, [r7, #4]
 8011272:	f7fd ffb9 	bl	800f1e8 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIfcESt6vectorIS2_SaIS2_EEE4baseEv>
 8011276:	4603      	mov	r3, r0
 8011278:	681c      	ldr	r4, [r3, #0]
 801127a:	6838      	ldr	r0, [r7, #0]
 801127c:	f7fd ffb4 	bl	800f1e8 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIfcESt6vectorIS2_SaIS2_EEE4baseEv>
 8011280:	4603      	mov	r3, r0
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	429c      	cmp	r4, r3
 8011286:	bf0c      	ite	eq
 8011288:	2301      	moveq	r3, #1
 801128a:	2300      	movne	r3, #0
 801128c:	b2db      	uxtb	r3, r3
 801128e:	4618      	mov	r0, r3
 8011290:	370c      	adds	r7, #12
 8011292:	46bd      	mov	sp, r7
 8011294:	bd90      	pop	{r4, r7, pc}

08011296 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIfcESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8011296:	b480      	push	{r7}
 8011298:	b083      	sub	sp, #12
 801129a:	af00      	add	r7, sp, #0
 801129c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	4618      	mov	r0, r3
 80112a4:	370c      	adds	r7, #12
 80112a6:	46bd      	mov	sp, r7
 80112a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ac:	4770      	bx	lr

080112ae <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS3_SaIS3_EEEENS0_5__ops15_Iter_comp_iterISt7greaterIS3_EEEEvT_SE_SE_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80112ae:	b590      	push	{r4, r7, lr}
 80112b0:	b089      	sub	sp, #36	; 0x24
 80112b2:	af02      	add	r7, sp, #8
 80112b4:	60f8      	str	r0, [r7, #12]
 80112b6:	60b9      	str	r1, [r7, #8]
 80112b8:	607a      	str	r2, [r7, #4]
 80112ba:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 80112bc:	1d3b      	adds	r3, r7, #4
 80112be:	4618      	mov	r0, r3
 80112c0:	f7ff fee7 	bl	8011092 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEdeEv>
 80112c4:	4603      	mov	r3, r0
 80112c6:	4618      	mov	r0, r3
 80112c8:	f7f7 fd03 	bl	8008cd2 <_ZSt4moveIRSt4pairIfcEEONSt16remove_referenceIT_E4typeEOS4_>
 80112cc:	4602      	mov	r2, r0
 80112ce:	f107 0310 	add.w	r3, r7, #16
 80112d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80112d6:	e883 0003 	stmia.w	r3, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 80112da:	f107 030c 	add.w	r3, r7, #12
 80112de:	4618      	mov	r0, r3
 80112e0:	f7ff fed7 	bl	8011092 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEdeEv>
 80112e4:	4603      	mov	r3, r0
 80112e6:	4618      	mov	r0, r3
 80112e8:	f7f7 fcf3 	bl	8008cd2 <_ZSt4moveIRSt4pairIfcEEONSt16remove_referenceIT_E4typeEOS4_>
 80112ec:	4604      	mov	r4, r0
 80112ee:	1d3b      	adds	r3, r7, #4
 80112f0:	4618      	mov	r0, r3
 80112f2:	f7ff fece 	bl	8011092 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEdeEv>
 80112f6:	4603      	mov	r3, r0
 80112f8:	4621      	mov	r1, r4
 80112fa:	4618      	mov	r0, r3
 80112fc:	f7ff fed5 	bl	80110aa <_ZNSt4pairIfcEaSEOS0_>
			 _DistanceType(__last - __first),
 8011300:	f107 020c 	add.w	r2, r7, #12
 8011304:	f107 0308 	add.w	r3, r7, #8
 8011308:	4611      	mov	r1, r2
 801130a:	4618      	mov	r0, r3
 801130c:	f7fd ff0f 	bl	800f12e <_ZN9__gnu_cxxmiIPSt4pairIfcESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8011310:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 8011312:	f107 0310 	add.w	r3, r7, #16
 8011316:	4618      	mov	r0, r3
 8011318:	f7f7 fcdb 	bl	8008cd2 <_ZSt4moveIRSt4pairIfcEEONSt16remove_referenceIT_E4typeEOS4_>
 801131c:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 801131e:	683a      	ldr	r2, [r7, #0]
 8011320:	7812      	ldrb	r2, [r2, #0]
 8011322:	f88d 2004 	strb.w	r2, [sp, #4]
 8011326:	685a      	ldr	r2, [r3, #4]
 8011328:	9200      	str	r2, [sp, #0]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	4622      	mov	r2, r4
 801132e:	2100      	movs	r1, #0
 8011330:	68f8      	ldr	r0, [r7, #12]
 8011332:	f002 f9cb 	bl	80136cc <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_comp_iterISt7greaterIS3_EEEEvT_T0_SF_T1_T2_>
    }
 8011336:	bf00      	nop
 8011338:	371c      	adds	r7, #28
 801133a:	46bd      	mov	sp, r7
 801133c:	bd90      	pop	{r4, r7, pc}

0801133e <_ZNSt16allocator_traitsISaISt4pairIfcEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 801133e:	b580      	push	{r7, lr}
 8011340:	b082      	sub	sp, #8
 8011342:	af00      	add	r7, sp, #0
 8011344:	6078      	str	r0, [r7, #4]
 8011346:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8011348:	6838      	ldr	r0, [r7, #0]
 801134a:	f002 fa6e 	bl	801382a <_ZSt10destroy_atISt4pairIfcEEvPT_>
	}
 801134e:	bf00      	nop
 8011350:	3708      	adds	r7, #8
 8011352:	46bd      	mov	sp, r7
 8011354:	bd80      	pop	{r7, pc}

08011356 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>:
      _Iter_equals_val(_Value& __value)
 8011356:	b480      	push	{r7}
 8011358:	b083      	sub	sp, #12
 801135a:	af00      	add	r7, sp, #0
 801135c:	6078      	str	r0, [r7, #4]
 801135e:	6039      	str	r1, [r7, #0]
	: _M_value(__value)
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	683a      	ldr	r2, [r7, #0]
 8011364:	601a      	str	r2, [r3, #0]
      { }
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	4618      	mov	r0, r3
 801136a:	370c      	adds	r7, #12
 801136c:	46bd      	mov	sp, r7
 801136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011372:	4770      	bx	lr

08011374 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>:
    __iterator_category(const _Iter&)
 8011374:	b480      	push	{r7}
 8011376:	b083      	sub	sp, #12
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 801137c:	4618      	mov	r0, r3
 801137e:	370c      	adds	r7, #12
 8011380:	46bd      	mov	sp, r7
 8011382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011386:	4770      	bx	lr

08011388 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8011388:	b480      	push	{r7}
 801138a:	b083      	sub	sp, #12
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	4618      	mov	r0, r3
 8011396:	370c      	adds	r7, #12
 8011398:	46bd      	mov	sp, r7
 801139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801139e:	4770      	bx	lr

080113a0 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>:
	operator()(_Iterator __it)
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b082      	sub	sp, #8
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
 80113a8:	6039      	str	r1, [r7, #0]
	{ return *__it == _M_value; }
 80113aa:	463b      	mov	r3, r7
 80113ac:	4618      	mov	r0, r3
 80113ae:	f7ff ffeb 	bl	8011388 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEdeEv>
 80113b2:	4603      	mov	r3, r0
 80113b4:	781a      	ldrb	r2, [r3, #0]
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	781b      	ldrb	r3, [r3, #0]
 80113bc:	429a      	cmp	r2, r3
 80113be:	bf0c      	ite	eq
 80113c0:	2301      	moveq	r3, #1
 80113c2:	2300      	movne	r3, #0
 80113c4:	b2db      	uxtb	r3, r3
 80113c6:	4618      	mov	r0, r3
 80113c8:	3708      	adds	r7, #8
 80113ca:	46bd      	mov	sp, r7
 80113cc:	bd80      	pop	{r7, pc}

080113ce <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80113ce:	b480      	push	{r7}
 80113d0:	b083      	sub	sp, #12
 80113d2:	af00      	add	r7, sp, #0
 80113d4:	6078      	str	r0, [r7, #4]
	++_M_current;
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	1c5a      	adds	r2, r3, #1
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	601a      	str	r2, [r3, #0]
	return *this;
 80113e0:	687b      	ldr	r3, [r7, #4]
      }
 80113e2:	4618      	mov	r0, r3
 80113e4:	370c      	adds	r7, #12
 80113e6:	46bd      	mov	sp, r7
 80113e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ec:	4770      	bx	lr

080113ee <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80113ee:	b580      	push	{r7, lr}
 80113f0:	b086      	sub	sp, #24
 80113f2:	af00      	add	r7, sp, #0
 80113f4:	60f8      	str	r0, [r7, #12]
 80113f6:	60b9      	str	r1, [r7, #8]
 80113f8:	607a      	str	r2, [r7, #4]
 80113fa:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 80113fc:	f107 020c 	add.w	r2, r7, #12
 8011400:	f107 0308 	add.w	r3, r7, #8
 8011404:	4611      	mov	r1, r2
 8011406:	4618      	mov	r0, r3
 8011408:	f7ff fa9a 	bl	8010940 <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 801140c:	4603      	mov	r3, r0
 801140e:	109b      	asrs	r3, r3, #2
 8011410:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 8011412:	e03e      	b.n	8011492 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xa4>
	  if (__pred(__first))
 8011414:	1d3b      	adds	r3, r7, #4
 8011416:	68f9      	ldr	r1, [r7, #12]
 8011418:	4618      	mov	r0, r3
 801141a:	f7ff ffc1 	bl	80113a0 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 801141e:	4603      	mov	r3, r0
 8011420:	2b00      	cmp	r3, #0
 8011422:	d001      	beq.n	8011428 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x3a>
	    return __first;
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	e077      	b.n	8011518 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8011428:	f107 030c 	add.w	r3, r7, #12
 801142c:	4618      	mov	r0, r3
 801142e:	f7ff ffce 	bl	80113ce <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 8011432:	1d3b      	adds	r3, r7, #4
 8011434:	68f9      	ldr	r1, [r7, #12]
 8011436:	4618      	mov	r0, r3
 8011438:	f7ff ffb2 	bl	80113a0 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 801143c:	4603      	mov	r3, r0
 801143e:	2b00      	cmp	r3, #0
 8011440:	d001      	beq.n	8011446 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x58>
	    return __first;
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	e068      	b.n	8011518 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8011446:	f107 030c 	add.w	r3, r7, #12
 801144a:	4618      	mov	r0, r3
 801144c:	f7ff ffbf 	bl	80113ce <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 8011450:	1d3b      	adds	r3, r7, #4
 8011452:	68f9      	ldr	r1, [r7, #12]
 8011454:	4618      	mov	r0, r3
 8011456:	f7ff ffa3 	bl	80113a0 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 801145a:	4603      	mov	r3, r0
 801145c:	2b00      	cmp	r3, #0
 801145e:	d001      	beq.n	8011464 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x76>
	    return __first;
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	e059      	b.n	8011518 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8011464:	f107 030c 	add.w	r3, r7, #12
 8011468:	4618      	mov	r0, r3
 801146a:	f7ff ffb0 	bl	80113ce <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 801146e:	1d3b      	adds	r3, r7, #4
 8011470:	68f9      	ldr	r1, [r7, #12]
 8011472:	4618      	mov	r0, r3
 8011474:	f7ff ff94 	bl	80113a0 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 8011478:	4603      	mov	r3, r0
 801147a:	2b00      	cmp	r3, #0
 801147c:	d001      	beq.n	8011482 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x94>
	    return __first;
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	e04a      	b.n	8011518 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8011482:	f107 030c 	add.w	r3, r7, #12
 8011486:	4618      	mov	r0, r3
 8011488:	f7ff ffa1 	bl	80113ce <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
      for (; __trip_count > 0; --__trip_count)
 801148c:	697b      	ldr	r3, [r7, #20]
 801148e:	3b01      	subs	r3, #1
 8011490:	617b      	str	r3, [r7, #20]
 8011492:	697b      	ldr	r3, [r7, #20]
 8011494:	2b00      	cmp	r3, #0
 8011496:	dcbd      	bgt.n	8011414 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x26>
      switch (__last - __first)
 8011498:	f107 020c 	add.w	r2, r7, #12
 801149c:	f107 0308 	add.w	r3, r7, #8
 80114a0:	4611      	mov	r1, r2
 80114a2:	4618      	mov	r0, r3
 80114a4:	f7ff fa4c 	bl	8010940 <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80114a8:	4603      	mov	r3, r0
 80114aa:	2b03      	cmp	r3, #3
 80114ac:	d006      	beq.n	80114bc <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xce>
 80114ae:	2b03      	cmp	r3, #3
 80114b0:	dc31      	bgt.n	8011516 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x128>
 80114b2:	2b01      	cmp	r3, #1
 80114b4:	d020      	beq.n	80114f8 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x10a>
 80114b6:	2b02      	cmp	r3, #2
 80114b8:	d00f      	beq.n	80114da <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xec>
 80114ba:	e02c      	b.n	8011516 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x128>
	  if (__pred(__first))
 80114bc:	1d3b      	adds	r3, r7, #4
 80114be:	68f9      	ldr	r1, [r7, #12]
 80114c0:	4618      	mov	r0, r3
 80114c2:	f7ff ff6d 	bl	80113a0 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 80114c6:	4603      	mov	r3, r0
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d001      	beq.n	80114d0 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xe2>
	    return __first;
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	e023      	b.n	8011518 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 80114d0:	f107 030c 	add.w	r3, r7, #12
 80114d4:	4618      	mov	r0, r3
 80114d6:	f7ff ff7a 	bl	80113ce <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 80114da:	1d3b      	adds	r3, r7, #4
 80114dc:	68f9      	ldr	r1, [r7, #12]
 80114de:	4618      	mov	r0, r3
 80114e0:	f7ff ff5e 	bl	80113a0 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 80114e4:	4603      	mov	r3, r0
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d001      	beq.n	80114ee <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x100>
	    return __first;
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	e014      	b.n	8011518 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 80114ee:	f107 030c 	add.w	r3, r7, #12
 80114f2:	4618      	mov	r0, r3
 80114f4:	f7ff ff6b 	bl	80113ce <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 80114f8:	1d3b      	adds	r3, r7, #4
 80114fa:	68f9      	ldr	r1, [r7, #12]
 80114fc:	4618      	mov	r0, r3
 80114fe:	f7ff ff4f 	bl	80113a0 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 8011502:	4603      	mov	r3, r0
 8011504:	2b00      	cmp	r3, #0
 8011506:	d001      	beq.n	801150c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x11e>
	    return __first;
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	e005      	b.n	8011518 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 801150c:	f107 030c 	add.w	r3, r7, #12
 8011510:	4618      	mov	r0, r3
 8011512:	f7ff ff5c 	bl	80113ce <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  return __last;
 8011516:	68bb      	ldr	r3, [r7, #8]
    }
 8011518:	4618      	mov	r0, r3
 801151a:	3718      	adds	r7, #24
 801151c:	46bd      	mov	sp, r7
 801151e:	bd80      	pop	{r7, pc}

08011520 <_ZNSt6vectorISt4pairIciESaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8011520:	b590      	push	{r4, r7, lr}
 8011522:	b085      	sub	sp, #20
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
 8011528:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	685a      	ldr	r2, [r3, #4]
 801152e:	683b      	ldr	r3, [r7, #0]
 8011530:	1ad3      	subs	r3, r2, r3
 8011532:	10db      	asrs	r3, r3, #3
 8011534:	60fb      	str	r3, [r7, #12]
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d00e      	beq.n	801155a <_ZNSt6vectorISt4pairIciESaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	4618      	mov	r0, r3
 8011544:	f7fd fce7 	bl	800ef16 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE19_M_get_Tp_allocatorEv>
 8011548:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 801154a:	461a      	mov	r2, r3
 801154c:	4621      	mov	r1, r4
 801154e:	6838      	ldr	r0, [r7, #0]
 8011550:	f7fd fcec 	bl	800ef2c <_ZSt8_DestroyIPSt4pairIciES1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	683a      	ldr	r2, [r7, #0]
 8011558:	605a      	str	r2, [r3, #4]
      }
 801155a:	bf00      	nop
 801155c:	3714      	adds	r7, #20
 801155e:	46bd      	mov	sp, r7
 8011560:	bd90      	pop	{r4, r7, pc}

08011562 <_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIciESt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8011562:	b480      	push	{r7}
 8011564:	b083      	sub	sp, #12
 8011566:	af00      	add	r7, sp, #0
 8011568:	6078      	str	r0, [r7, #4]
 801156a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 801156c:	683b      	ldr	r3, [r7, #0]
 801156e:	681a      	ldr	r2, [r3, #0]
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	601a      	str	r2, [r3, #0]
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	4618      	mov	r0, r3
 8011578:	370c      	adds	r7, #12
 801157a:	46bd      	mov	sp, r7
 801157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011580:	4770      	bx	lr

08011582 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8011582:	b580      	push	{r7, lr}
 8011584:	b082      	sub	sp, #8
 8011586:	af00      	add	r7, sp, #0
 8011588:	6078      	str	r0, [r7, #4]
 801158a:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801158c:	683b      	ldr	r3, [r7, #0]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d006      	beq.n	80115a0 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE11_M_allocateEj+0x1e>
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	6839      	ldr	r1, [r7, #0]
 8011596:	4618      	mov	r0, r3
 8011598:	f002 f951 	bl	801383e <_ZNSt16allocator_traitsISaISt4pairIciEEE8allocateERS2_j>
 801159c:	4603      	mov	r3, r0
 801159e:	e000      	b.n	80115a2 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE11_M_allocateEj+0x20>
 80115a0:	2300      	movs	r3, #0
      }
 80115a2:	4618      	mov	r0, r3
 80115a4:	3708      	adds	r7, #8
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bd80      	pop	{r7, pc}

080115aa <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80115aa:	b480      	push	{r7}
 80115ac:	b083      	sub	sp, #12
 80115ae:	af00      	add	r7, sp, #0
 80115b0:	6078      	str	r0, [r7, #4]
 80115b2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80115b4:	683b      	ldr	r3, [r7, #0]
 80115b6:	681a      	ldr	r2, [r3, #0]
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	601a      	str	r2, [r3, #0]
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	4618      	mov	r0, r3
 80115c0:	370c      	adds	r7, #12
 80115c2:	46bd      	mov	sp, r7
 80115c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c8:	4770      	bx	lr

080115ca <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIciESt6vectorIS3_SaIS3_EEEEET_SA_>:
    __miter_base(_Iterator __it)
 80115ca:	b480      	push	{r7}
 80115cc:	b083      	sub	sp, #12
 80115ce:	af00      	add	r7, sp, #0
 80115d0:	6078      	str	r0, [r7, #4]
    { return __it; }
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	4618      	mov	r0, r3
 80115d6:	370c      	adds	r7, #12
 80115d8:	46bd      	mov	sp, r7
 80115da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115de:	4770      	bx	lr

080115e0 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKSt4pairIciESt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET1_T0_SD_SC_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80115e0:	b5b0      	push	{r4, r5, r7, lr}
 80115e2:	b084      	sub	sp, #16
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	60f8      	str	r0, [r7, #12]
 80115e8:	60b9      	str	r1, [r7, #8]
 80115ea:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80115ec:	68f8      	ldr	r0, [r7, #12]
 80115ee:	f002 f946 	bl	801387e <_ZSt12__niter_baseIPKSt4pairIciESt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 80115f2:	4604      	mov	r4, r0
 80115f4:	68b8      	ldr	r0, [r7, #8]
 80115f6:	f002 f942 	bl	801387e <_ZSt12__niter_baseIPKSt4pairIciESt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 80115fa:	4605      	mov	r5, r0
 80115fc:	6878      	ldr	r0, [r7, #4]
 80115fe:	f002 f94c 	bl	801389a <_ZSt12__niter_baseIPSt4pairIciESt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8011602:	4603      	mov	r3, r0
 8011604:	461a      	mov	r2, r3
 8011606:	4629      	mov	r1, r5
 8011608:	4620      	mov	r0, r4
 801160a:	f002 f954 	bl	80138b6 <_ZSt14__copy_move_a1ILb0EPKSt4pairIciEPS1_ET1_T0_S6_S5_>
 801160e:	4603      	mov	r3, r0
 8011610:	4619      	mov	r1, r3
 8011612:	6878      	ldr	r0, [r7, #4]
 8011614:	f002 f95f 	bl	80138d6 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>
 8011618:	4603      	mov	r3, r0
    }
 801161a:	4618      	mov	r0, r3
 801161c:	3710      	adds	r7, #16
 801161e:	46bd      	mov	sp, r7
 8011620:	bdb0      	pop	{r4, r5, r7, pc}

08011622 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS3_SaIS3_EEEEEvT_S9_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8011622:	b580      	push	{r7, lr}
 8011624:	b082      	sub	sp, #8
 8011626:	af00      	add	r7, sp, #0
 8011628:	6078      	str	r0, [r7, #4]
 801162a:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 801162c:	f7f1 fa6e 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8011630:	4603      	mov	r3, r0
 8011632:	2b00      	cmp	r3, #0
 8011634:	d004      	beq.n	8011640 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS3_SaIS3_EEEEEvT_S9_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8011636:	6839      	ldr	r1, [r7, #0]
 8011638:	6878      	ldr	r0, [r7, #4]
 801163a:	f002 f997 	bl	801396c <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS5_SaIS5_EEEEEEvT_SB_>
 801163e:	e003      	b.n	8011648 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS3_SaIS3_EEEEEvT_S9_+0x26>
	__destroy(__first, __last);
 8011640:	6839      	ldr	r1, [r7, #0]
 8011642:	6878      	ldr	r0, [r7, #4]
 8011644:	f002 f9b9 	bl	80139ba <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS5_SaIS5_EEEEEEvT_SB_>
    }
 8011648:	3708      	adds	r7, #8
 801164a:	46bd      	mov	sp, r7
 801164c:	bd80      	pop	{r7, pc}

0801164e <_ZSt12__niter_baseIPSt4pairIciEET_S3_>:
    __niter_base(_Iterator __it)
 801164e:	b480      	push	{r7}
 8011650:	b083      	sub	sp, #12
 8011652:	af00      	add	r7, sp, #0
 8011654:	6078      	str	r0, [r7, #4]
    { return __it; }
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	4618      	mov	r0, r3
 801165a:	370c      	adds	r7, #12
 801165c:	46bd      	mov	sp, r7
 801165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011662:	4770      	bx	lr

08011664 <_ZSt14__copy_move_a1ILb0EPSt4pairIciES2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8011664:	b580      	push	{r7, lr}
 8011666:	b084      	sub	sp, #16
 8011668:	af00      	add	r7, sp, #0
 801166a:	60f8      	str	r0, [r7, #12]
 801166c:	60b9      	str	r1, [r7, #8]
 801166e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8011670:	687a      	ldr	r2, [r7, #4]
 8011672:	68b9      	ldr	r1, [r7, #8]
 8011674:	68f8      	ldr	r0, [r7, #12]
 8011676:	f002 f9ab 	bl	80139d0 <_ZSt14__copy_move_a2ILb0EPSt4pairIciES2_ET1_T0_S4_S3_>
 801167a:	4603      	mov	r3, r0
 801167c:	4618      	mov	r0, r3
 801167e:	3710      	adds	r7, #16
 8011680:	46bd      	mov	sp, r7
 8011682:	bd80      	pop	{r7, pc}

08011684 <_ZSt12__niter_wrapIPSt4pairIciEET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8011684:	b480      	push	{r7}
 8011686:	b083      	sub	sp, #12
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
 801168c:	6039      	str	r1, [r7, #0]
    { return __res; }
 801168e:	683b      	ldr	r3, [r7, #0]
 8011690:	4618      	mov	r0, r3
 8011692:	370c      	adds	r7, #12
 8011694:	46bd      	mov	sp, r7
 8011696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169a:	4770      	bx	lr

0801169c <_ZSt18uninitialized_copyIPSt4pairIciES2_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 801169c:	b580      	push	{r7, lr}
 801169e:	b086      	sub	sp, #24
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	60f8      	str	r0, [r7, #12]
 80116a4:	60b9      	str	r1, [r7, #8]
 80116a6:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80116a8:	2301      	movs	r3, #1
 80116aa:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80116ac:	687a      	ldr	r2, [r7, #4]
 80116ae:	68b9      	ldr	r1, [r7, #8]
 80116b0:	68f8      	ldr	r0, [r7, #12]
 80116b2:	f002 f9aa 	bl	8013a0a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIciES4_EET0_T_S6_S5_>
 80116b6:	4603      	mov	r3, r0
    }
 80116b8:	4618      	mov	r0, r3
 80116ba:	3718      	adds	r7, #24
 80116bc:	46bd      	mov	sp, r7
 80116be:	bd80      	pop	{r7, pc}

080116c0 <_ZSt7forwardISt4pairIciEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80116c0:	b480      	push	{r7}
 80116c2:	b083      	sub	sp, #12
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	4618      	mov	r0, r3
 80116cc:	370c      	adds	r7, #12
 80116ce:	46bd      	mov	sp, r7
 80116d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d4:	4770      	bx	lr

080116d6 <_ZSt12construct_atISt4pairIciEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80116d6:	b5b0      	push	{r4, r5, r7, lr}
 80116d8:	b082      	sub	sp, #8
 80116da:	af00      	add	r7, sp, #0
 80116dc:	6078      	str	r0, [r7, #4]
 80116de:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80116e0:	6838      	ldr	r0, [r7, #0]
 80116e2:	f7ff ffed 	bl	80116c0 <_ZSt7forwardISt4pairIciEEOT_RNSt16remove_referenceIS2_E4typeE>
 80116e6:	4605      	mov	r5, r0
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	4619      	mov	r1, r3
 80116ec:	2008      	movs	r0, #8
 80116ee:	f7f1 fa15 	bl	8002b1c <_ZnwjPv>
 80116f2:	4604      	mov	r4, r0
 80116f4:	4623      	mov	r3, r4
 80116f6:	462a      	mov	r2, r5
 80116f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80116fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8011700:	4623      	mov	r3, r4
 8011702:	4618      	mov	r0, r3
 8011704:	3708      	adds	r7, #8
 8011706:	46bd      	mov	sp, r7
 8011708:	bdb0      	pop	{r4, r5, r7, pc}

0801170a <_ZNSt16allocator_traitsISaISt4pairIciEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801170a:	b580      	push	{r7, lr}
 801170c:	b084      	sub	sp, #16
 801170e:	af00      	add	r7, sp, #0
 8011710:	60f8      	str	r0, [r7, #12]
 8011712:	60b9      	str	r1, [r7, #8]
 8011714:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8011716:	6878      	ldr	r0, [r7, #4]
 8011718:	f7ff ffd2 	bl	80116c0 <_ZSt7forwardISt4pairIciEEOT_RNSt16remove_referenceIS2_E4typeE>
 801171c:	4603      	mov	r3, r0
 801171e:	4619      	mov	r1, r3
 8011720:	68b8      	ldr	r0, [r7, #8]
 8011722:	f7ff ffd8 	bl	80116d6 <_ZSt12construct_atISt4pairIciEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8011726:	bf00      	nop
 8011728:	3710      	adds	r7, #16
 801172a:	46bd      	mov	sp, r7
 801172c:	bd80      	pop	{r7, pc}
	...

08011730 <_ZNSt6vectorISt4pairIciESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8011730:	b5b0      	push	{r4, r5, r7, lr}
 8011732:	b08c      	sub	sp, #48	; 0x30
 8011734:	af00      	add	r7, sp, #0
 8011736:	60f8      	str	r0, [r7, #12]
 8011738:	60b9      	str	r1, [r7, #8]
 801173a:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 801173c:	4a39      	ldr	r2, [pc, #228]	; (8011824 <_ZNSt6vectorISt4pairIciESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 801173e:	2101      	movs	r1, #1
 8011740:	68f8      	ldr	r0, [r7, #12]
 8011742:	f002 f982 	bl	8013a4a <_ZNKSt6vectorISt4pairIciESaIS1_EE12_M_check_lenEjPKc>
 8011746:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	685b      	ldr	r3, [r3, #4]
 8011752:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8011754:	68f8      	ldr	r0, [r7, #12]
 8011756:	f7fd fe72 	bl	800f43e <_ZNSt6vectorISt4pairIciESaIS1_EE5beginEv>
 801175a:	4603      	mov	r3, r0
 801175c:	617b      	str	r3, [r7, #20]
 801175e:	f107 0214 	add.w	r2, r7, #20
 8011762:	f107 0308 	add.w	r3, r7, #8
 8011766:	4611      	mov	r1, r2
 8011768:	4618      	mov	r0, r3
 801176a:	f002 f9b5 	bl	8013ad8 <_ZN9__gnu_cxxmiIPSt4pairIciESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 801176e:	4603      	mov	r3, r0
 8011770:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011776:	4618      	mov	r0, r3
 8011778:	f7ff ff03 	bl	8011582 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE11_M_allocateEj>
 801177c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 801177e:	69fb      	ldr	r3, [r7, #28]
 8011780:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8011782:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8011784:	6a3b      	ldr	r3, [r7, #32]
 8011786:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 8011788:	69fa      	ldr	r2, [r7, #28]
 801178a:	18d5      	adds	r5, r2, r3
 801178c:	6878      	ldr	r0, [r7, #4]
 801178e:	f7ff ff97 	bl	80116c0 <_ZSt7forwardISt4pairIciEEOT_RNSt16remove_referenceIS2_E4typeE>
 8011792:	4603      	mov	r3, r0
 8011794:	461a      	mov	r2, r3
 8011796:	4629      	mov	r1, r5
 8011798:	4620      	mov	r0, r4
 801179a:	f7ff ffb6 	bl	801170a <_ZNSt16allocator_traitsISaISt4pairIciEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 801179e:	2300      	movs	r3, #0
 80117a0:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80117a2:	f107 0308 	add.w	r3, r7, #8
 80117a6:	4618      	mov	r0, r3
 80117a8:	f002 f8ac 	bl	8013904 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS2_SaIS2_EEE4baseEv>
 80117ac:	4603      	mov	r3, r0
 80117ae:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	4618      	mov	r0, r3
 80117b4:	f7fd fbaf 	bl	800ef16 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE19_M_get_Tp_allocatorEv>
 80117b8:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80117ba:	69fa      	ldr	r2, [r7, #28]
 80117bc:	4621      	mov	r1, r4
 80117be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80117c0:	f002 f99f 	bl	8013b02 <_ZNSt6vectorISt4pairIciESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80117c4:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 80117c6:	69bb      	ldr	r3, [r7, #24]
 80117c8:	3308      	adds	r3, #8
 80117ca:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80117cc:	f107 0308 	add.w	r3, r7, #8
 80117d0:	4618      	mov	r0, r3
 80117d2:	f002 f897 	bl	8013904 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS2_SaIS2_EEE4baseEv>
 80117d6:	4603      	mov	r3, r0
 80117d8:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	4618      	mov	r0, r3
 80117de:	f7fd fb9a 	bl	800ef16 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE19_M_get_Tp_allocatorEv>
 80117e2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80117e4:	69ba      	ldr	r2, [r7, #24]
 80117e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80117e8:	4620      	mov	r0, r4
 80117ea:	f002 f98a 	bl	8013b02 <_ZNSt6vectorISt4pairIciESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80117ee:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 80117f0:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	689a      	ldr	r2, [r3, #8]
 80117f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117f8:	1ad3      	subs	r3, r2, r3
 80117fa:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 80117fc:	461a      	mov	r2, r3
 80117fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011800:	f7fd fb76 	bl	800eef0 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	69fa      	ldr	r2, [r7, #28]
 8011808:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	69ba      	ldr	r2, [r7, #24]
 801180e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8011810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011812:	00db      	lsls	r3, r3, #3
 8011814:	69fa      	ldr	r2, [r7, #28]
 8011816:	441a      	add	r2, r3
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	609a      	str	r2, [r3, #8]
    }
 801181c:	bf00      	nop
 801181e:	3730      	adds	r7, #48	; 0x30
 8011820:	46bd      	mov	sp, r7
 8011822:	bdb0      	pop	{r4, r5, r7, pc}
 8011824:	08029750 	.word	0x08029750

08011828 <_ZNSt6vectorISt4pairIciESaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8011828:	b580      	push	{r7, lr}
 801182a:	b084      	sub	sp, #16
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8011830:	6878      	ldr	r0, [r7, #4]
 8011832:	f7fd fe2c 	bl	800f48e <_ZNSt6vectorISt4pairIciESaIS1_EE3endEv>
 8011836:	4603      	mov	r3, r0
 8011838:	60fb      	str	r3, [r7, #12]
 801183a:	f107 030c 	add.w	r3, r7, #12
 801183e:	2101      	movs	r1, #1
 8011840:	4618      	mov	r0, r3
 8011842:	f002 f97e 	bl	8013b42 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS2_SaIS2_EEEmiEi>
 8011846:	4603      	mov	r3, r0
 8011848:	60bb      	str	r3, [r7, #8]
 801184a:	f107 0308 	add.w	r3, r7, #8
 801184e:	4618      	mov	r0, r3
 8011850:	f002 f990 	bl	8013b74 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS2_SaIS2_EEEdeEv>
 8011854:	4603      	mov	r3, r0
      }
 8011856:	4618      	mov	r0, r3
 8011858:	3710      	adds	r7, #16
 801185a:	46bd      	mov	sp, r7
 801185c:	bd80      	pop	{r7, pc}

0801185e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKcS1_IfSt6vectorIS1_IciESaIS4_EEEEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 801185e:	b580      	push	{r7, lr}
 8011860:	b082      	sub	sp, #8
 8011862:	af00      	add	r7, sp, #0
 8011864:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8011866:	6878      	ldr	r0, [r7, #4]
 8011868:	f002 f990 	bl	8013b8c <_ZN9__gnu_cxx16__aligned_membufISt4pairIKcS1_IfSt6vectorIS1_IciESaIS4_EEEEE7_M_addrEv>
 801186c:	4603      	mov	r3, r0
 801186e:	4618      	mov	r0, r3
 8011870:	3708      	adds	r7, #8
 8011872:	46bd      	mov	sp, r7
 8011874:	bd80      	pop	{r7, pc}

08011876 <_ZSt4moveIRZN3jlb5Graph8DijkstraEccEUlRKNS0_4EdgeEE_EONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8011876:	b480      	push	{r7}
 8011878:	b083      	sub	sp, #12
 801187a:	af00      	add	r7, sp, #0
 801187c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	4618      	mov	r0, r3
 8011882:	370c      	adds	r7, #12
 8011884:	46bd      	mov	sp, r7
 8011886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188a:	4770      	bx	lr

0801188c <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb5Graph8DijkstraEccEUlRKNS2_4EdgeEE_EC1ES7_>:
      _Iter_pred(_Predicate __pred)
 801188c:	b580      	push	{r7, lr}
 801188e:	b082      	sub	sp, #8
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
 8011894:	6039      	str	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 8011896:	463b      	mov	r3, r7
 8011898:	4618      	mov	r0, r3
 801189a:	f7ff ffec 	bl	8011876 <_ZSt4moveIRZN3jlb5Graph8DijkstraEccEUlRKNS0_4EdgeEE_EONSt16remove_referenceIT_E4typeEOS8_>
 801189e:	4602      	mov	r2, r0
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	6812      	ldr	r2, [r2, #0]
 80118a4:	601a      	str	r2, [r3, #0]
      { }
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	4618      	mov	r0, r3
 80118aa:	3708      	adds	r7, #8
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bd80      	pop	{r7, pc}

080118b0 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80118b0:	b590      	push	{r4, r7, lr}
 80118b2:	b083      	sub	sp, #12
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
 80118b8:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80118ba:	6878      	ldr	r0, [r7, #4]
 80118bc:	f000 f812 	bl	80118e4 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 80118c0:	4603      	mov	r3, r0
 80118c2:	681c      	ldr	r4, [r3, #0]
 80118c4:	6838      	ldr	r0, [r7, #0]
 80118c6:	f000 f80d 	bl	80118e4 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 80118ca:	4603      	mov	r3, r0
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	1ae3      	subs	r3, r4, r3
 80118d0:	10db      	asrs	r3, r3, #3
 80118d2:	4a03      	ldr	r2, [pc, #12]	; (80118e0 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x30>)
 80118d4:	fb02 f303 	mul.w	r3, r2, r3
 80118d8:	4618      	mov	r0, r3
 80118da:	370c      	adds	r7, #12
 80118dc:	46bd      	mov	sp, r7
 80118de:	bd90      	pop	{r4, r7, pc}
 80118e0:	aaaaaaab 	.word	0xaaaaaaab

080118e4 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80118e4:	b480      	push	{r7}
 80118e6:	b083      	sub	sp, #12
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	4618      	mov	r0, r3
 80118f0:	370c      	adds	r7, #12
 80118f2:	46bd      	mov	sp, r7
 80118f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f8:	4770      	bx	lr

080118fa <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb5Graph8DijkstraEccEUlRKNS2_4EdgeEE_EclINS_17__normal_iteratorIPS4_St6vectorIS4_SaIS4_EEEEEEbT_>:
	operator()(_Iterator __it)
 80118fa:	b590      	push	{r4, r7, lr}
 80118fc:	b083      	sub	sp, #12
 80118fe:	af00      	add	r7, sp, #0
 8011900:	6078      	str	r0, [r7, #4]
 8011902:	6039      	str	r1, [r7, #0]
	{ return bool(_M_pred(*__it)); }
 8011904:	687c      	ldr	r4, [r7, #4]
 8011906:	463b      	mov	r3, r7
 8011908:	4618      	mov	r0, r3
 801190a:	f001 f941 	bl	8012b90 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>
 801190e:	4603      	mov	r3, r0
 8011910:	4619      	mov	r1, r3
 8011912:	4620      	mov	r0, r4
 8011914:	f7f7 fa27 	bl	8008d66 <_ZZN3jlb5Graph8DijkstraEccENKUlRKNS_4EdgeEE_clES3_>
 8011918:	4603      	mov	r3, r0
 801191a:	4618      	mov	r0, r3
 801191c:	370c      	adds	r7, #12
 801191e:	46bd      	mov	sp, r7
 8011920:	bd90      	pop	{r4, r7, pc}

08011922 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8011922:	b480      	push	{r7}
 8011924:	b083      	sub	sp, #12
 8011926:	af00      	add	r7, sp, #0
 8011928:	6078      	str	r0, [r7, #4]
	++_M_current;
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	f103 0218 	add.w	r2, r3, #24
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	601a      	str	r2, [r3, #0]
	return *this;
 8011936:	687b      	ldr	r3, [r7, #4]
      }
 8011938:	4618      	mov	r0, r3
 801193a:	370c      	adds	r7, #12
 801193c:	46bd      	mov	sp, r7
 801193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011942:	4770      	bx	lr

08011944 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_5Graph8DijkstraEccEUlRKS3_E_EEET_SG_SG_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8011944:	b580      	push	{r7, lr}
 8011946:	b086      	sub	sp, #24
 8011948:	af00      	add	r7, sp, #0
 801194a:	60f8      	str	r0, [r7, #12]
 801194c:	60b9      	str	r1, [r7, #8]
 801194e:	607a      	str	r2, [r7, #4]
 8011950:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 8011952:	f107 020c 	add.w	r2, r7, #12
 8011956:	f107 0308 	add.w	r3, r7, #8
 801195a:	4611      	mov	r1, r2
 801195c:	4618      	mov	r0, r3
 801195e:	f7ff ffa7 	bl	80118b0 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8011962:	4603      	mov	r3, r0
 8011964:	109b      	asrs	r3, r3, #2
 8011966:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 8011968:	e03e      	b.n	80119e8 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_5Graph8DijkstraEccEUlRKS3_E_EEET_SG_SG_T0_St26random_access_iterator_tag+0xa4>
	  if (__pred(__first))
 801196a:	1d3b      	adds	r3, r7, #4
 801196c:	68f9      	ldr	r1, [r7, #12]
 801196e:	4618      	mov	r0, r3
 8011970:	f7ff ffc3 	bl	80118fa <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb5Graph8DijkstraEccEUlRKNS2_4EdgeEE_EclINS_17__normal_iteratorIPS4_St6vectorIS4_SaIS4_EEEEEEbT_>
 8011974:	4603      	mov	r3, r0
 8011976:	2b00      	cmp	r3, #0
 8011978:	d001      	beq.n	801197e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_5Graph8DijkstraEccEUlRKS3_E_EEET_SG_SG_T0_St26random_access_iterator_tag+0x3a>
	    return __first;
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	e077      	b.n	8011a6e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_5Graph8DijkstraEccEUlRKS3_E_EEET_SG_SG_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 801197e:	f107 030c 	add.w	r3, r7, #12
 8011982:	4618      	mov	r0, r3
 8011984:	f7ff ffcd 	bl	8011922 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
 8011988:	1d3b      	adds	r3, r7, #4
 801198a:	68f9      	ldr	r1, [r7, #12]
 801198c:	4618      	mov	r0, r3
 801198e:	f7ff ffb4 	bl	80118fa <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb5Graph8DijkstraEccEUlRKNS2_4EdgeEE_EclINS_17__normal_iteratorIPS4_St6vectorIS4_SaIS4_EEEEEEbT_>
 8011992:	4603      	mov	r3, r0
 8011994:	2b00      	cmp	r3, #0
 8011996:	d001      	beq.n	801199c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_5Graph8DijkstraEccEUlRKS3_E_EEET_SG_SG_T0_St26random_access_iterator_tag+0x58>
	    return __first;
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	e068      	b.n	8011a6e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_5Graph8DijkstraEccEUlRKS3_E_EEET_SG_SG_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 801199c:	f107 030c 	add.w	r3, r7, #12
 80119a0:	4618      	mov	r0, r3
 80119a2:	f7ff ffbe 	bl	8011922 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
 80119a6:	1d3b      	adds	r3, r7, #4
 80119a8:	68f9      	ldr	r1, [r7, #12]
 80119aa:	4618      	mov	r0, r3
 80119ac:	f7ff ffa5 	bl	80118fa <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb5Graph8DijkstraEccEUlRKNS2_4EdgeEE_EclINS_17__normal_iteratorIPS4_St6vectorIS4_SaIS4_EEEEEEbT_>
 80119b0:	4603      	mov	r3, r0
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d001      	beq.n	80119ba <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_5Graph8DijkstraEccEUlRKS3_E_EEET_SG_SG_T0_St26random_access_iterator_tag+0x76>
	    return __first;
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	e059      	b.n	8011a6e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_5Graph8DijkstraEccEUlRKS3_E_EEET_SG_SG_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 80119ba:	f107 030c 	add.w	r3, r7, #12
 80119be:	4618      	mov	r0, r3
 80119c0:	f7ff ffaf 	bl	8011922 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
 80119c4:	1d3b      	adds	r3, r7, #4
 80119c6:	68f9      	ldr	r1, [r7, #12]
 80119c8:	4618      	mov	r0, r3
 80119ca:	f7ff ff96 	bl	80118fa <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb5Graph8DijkstraEccEUlRKNS2_4EdgeEE_EclINS_17__normal_iteratorIPS4_St6vectorIS4_SaIS4_EEEEEEbT_>
 80119ce:	4603      	mov	r3, r0
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d001      	beq.n	80119d8 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_5Graph8DijkstraEccEUlRKS3_E_EEET_SG_SG_T0_St26random_access_iterator_tag+0x94>
	    return __first;
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	e04a      	b.n	8011a6e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_5Graph8DijkstraEccEUlRKS3_E_EEET_SG_SG_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 80119d8:	f107 030c 	add.w	r3, r7, #12
 80119dc:	4618      	mov	r0, r3
 80119de:	f7ff ffa0 	bl	8011922 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>
      for (; __trip_count > 0; --__trip_count)
 80119e2:	697b      	ldr	r3, [r7, #20]
 80119e4:	3b01      	subs	r3, #1
 80119e6:	617b      	str	r3, [r7, #20]
 80119e8:	697b      	ldr	r3, [r7, #20]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	dcbd      	bgt.n	801196a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_5Graph8DijkstraEccEUlRKS3_E_EEET_SG_SG_T0_St26random_access_iterator_tag+0x26>
      switch (__last - __first)
 80119ee:	f107 020c 	add.w	r2, r7, #12
 80119f2:	f107 0308 	add.w	r3, r7, #8
 80119f6:	4611      	mov	r1, r2
 80119f8:	4618      	mov	r0, r3
 80119fa:	f7ff ff59 	bl	80118b0 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80119fe:	4603      	mov	r3, r0
 8011a00:	2b03      	cmp	r3, #3
 8011a02:	d006      	beq.n	8011a12 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_5Graph8DijkstraEccEUlRKS3_E_EEET_SG_SG_T0_St26random_access_iterator_tag+0xce>
 8011a04:	2b03      	cmp	r3, #3
 8011a06:	dc31      	bgt.n	8011a6c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_5Graph8DijkstraEccEUlRKS3_E_EEET_SG_SG_T0_St26random_access_iterator_tag+0x128>
 8011a08:	2b01      	cmp	r3, #1
 8011a0a:	d020      	beq.n	8011a4e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_5Graph8DijkstraEccEUlRKS3_E_EEET_SG_SG_T0_St26random_access_iterator_tag+0x10a>
 8011a0c:	2b02      	cmp	r3, #2
 8011a0e:	d00f      	beq.n	8011a30 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_5Graph8DijkstraEccEUlRKS3_E_EEET_SG_SG_T0_St26random_access_iterator_tag+0xec>
 8011a10:	e02c      	b.n	8011a6c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_5Graph8DijkstraEccEUlRKS3_E_EEET_SG_SG_T0_St26random_access_iterator_tag+0x128>
	  if (__pred(__first))
 8011a12:	1d3b      	adds	r3, r7, #4
 8011a14:	68f9      	ldr	r1, [r7, #12]
 8011a16:	4618      	mov	r0, r3
 8011a18:	f7ff ff6f 	bl	80118fa <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb5Graph8DijkstraEccEUlRKNS2_4EdgeEE_EclINS_17__normal_iteratorIPS4_St6vectorIS4_SaIS4_EEEEEEbT_>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d001      	beq.n	8011a26 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_5Graph8DijkstraEccEUlRKS3_E_EEET_SG_SG_T0_St26random_access_iterator_tag+0xe2>
	    return __first;
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	e023      	b.n	8011a6e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_5Graph8DijkstraEccEUlRKS3_E_EEET_SG_SG_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8011a26:	f107 030c 	add.w	r3, r7, #12
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	f7ff ff79 	bl	8011922 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
 8011a30:	1d3b      	adds	r3, r7, #4
 8011a32:	68f9      	ldr	r1, [r7, #12]
 8011a34:	4618      	mov	r0, r3
 8011a36:	f7ff ff60 	bl	80118fa <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb5Graph8DijkstraEccEUlRKNS2_4EdgeEE_EclINS_17__normal_iteratorIPS4_St6vectorIS4_SaIS4_EEEEEEbT_>
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d001      	beq.n	8011a44 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_5Graph8DijkstraEccEUlRKS3_E_EEET_SG_SG_T0_St26random_access_iterator_tag+0x100>
	    return __first;
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	e014      	b.n	8011a6e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_5Graph8DijkstraEccEUlRKS3_E_EEET_SG_SG_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8011a44:	f107 030c 	add.w	r3, r7, #12
 8011a48:	4618      	mov	r0, r3
 8011a4a:	f7ff ff6a 	bl	8011922 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>
	  if (__pred(__first))
 8011a4e:	1d3b      	adds	r3, r7, #4
 8011a50:	68f9      	ldr	r1, [r7, #12]
 8011a52:	4618      	mov	r0, r3
 8011a54:	f7ff ff51 	bl	80118fa <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb5Graph8DijkstraEccEUlRKNS2_4EdgeEE_EclINS_17__normal_iteratorIPS4_St6vectorIS4_SaIS4_EEEEEEbT_>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d001      	beq.n	8011a62 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_5Graph8DijkstraEccEUlRKS3_E_EEET_SG_SG_T0_St26random_access_iterator_tag+0x11e>
	    return __first;
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	e005      	b.n	8011a6e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS3_SaIS3_EEEENS0_5__ops10_Iter_predIZNS2_5Graph8DijkstraEccEUlRKS3_E_EEET_SG_SG_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8011a62:	f107 030c 	add.w	r3, r7, #12
 8011a66:	4618      	mov	r0, r3
 8011a68:	f7ff ff5b 	bl	8011922 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>
	  return __last;
 8011a6c:	68bb      	ldr	r3, [r7, #8]
    }
 8011a6e:	4618      	mov	r0, r3
 8011a70:	3718      	adds	r7, #24
 8011a72:	46bd      	mov	sp, r7
 8011a74:	bd80      	pop	{r7, pc}

08011a76 <_ZNSt16allocator_traitsISaISt4pairIciEEE37select_on_container_copy_constructionERKS2_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8011a76:	b580      	push	{r7, lr}
 8011a78:	b082      	sub	sp, #8
 8011a7a:	af00      	add	r7, sp, #0
 8011a7c:	6078      	str	r0, [r7, #4]
 8011a7e:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8011a80:	6839      	ldr	r1, [r7, #0]
 8011a82:	6878      	ldr	r0, [r7, #4]
 8011a84:	f001 fc5a 	bl	801333c <_ZNSaISt4pairIciEEC1ERKS1_>
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	3708      	adds	r7, #8
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	bd80      	pop	{r7, pc}

08011a90 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b082      	sub	sp, #8
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
 8011a98:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8011a9a:	6839      	ldr	r1, [r7, #0]
 8011a9c:	6878      	ldr	r0, [r7, #4]
 8011a9e:	f001 fc4d 	bl	801333c <_ZNSaISt4pairIciEEC1ERKS1_>
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	f7fd fa0f 	bl	800eec8 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	4618      	mov	r0, r3
 8011aae:	3708      	adds	r7, #8
 8011ab0:	46bd      	mov	sp, r7
 8011ab2:	bd80      	pop	{r7, pc}

08011ab4 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b082      	sub	sp, #8
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
 8011abc:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8011abe:	6839      	ldr	r1, [r7, #0]
 8011ac0:	6878      	ldr	r0, [r7, #4]
 8011ac2:	f7ff fd5e 	bl	8011582 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE11_M_allocateEj>
 8011ac6:	4602      	mov	r2, r0
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	681a      	ldr	r2, [r3, #0]
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	681a      	ldr	r2, [r3, #0]
 8011ad8:	683b      	ldr	r3, [r7, #0]
 8011ada:	00db      	lsls	r3, r3, #3
 8011adc:	441a      	add	r2, r3
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	609a      	str	r2, [r3, #8]
      }
 8011ae2:	bf00      	nop
 8011ae4:	3708      	adds	r7, #8
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	bd80      	pop	{r7, pc}

08011aea <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIciESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8011aea:	b580      	push	{r7, lr}
 8011aec:	b086      	sub	sp, #24
 8011aee:	af00      	add	r7, sp, #0
 8011af0:	60f8      	str	r0, [r7, #12]
 8011af2:	60b9      	str	r1, [r7, #8]
 8011af4:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8011af6:	2301      	movs	r3, #1
 8011af8:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8011afa:	687a      	ldr	r2, [r7, #4]
 8011afc:	68b9      	ldr	r1, [r7, #8]
 8011afe:	68f8      	ldr	r0, [r7, #12]
 8011b00:	f002 f86b 	bl	8013bda <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIciESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>
 8011b04:	4603      	mov	r3, r0
    }
 8011b06:	4618      	mov	r0, r3
 8011b08:	3718      	adds	r7, #24
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}

08011b0e <_ZNSt11_Deque_baseIfSaIfEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8011b0e:	b580      	push	{r7, lr}
 8011b10:	b082      	sub	sp, #8
 8011b12:	af00      	add	r7, sp, #0
 8011b14:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	2200      	movs	r2, #0
 8011b1a:	601a      	str	r2, [r3, #0]
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	2200      	movs	r2, #0
 8011b20:	605a      	str	r2, [r3, #4]
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	3308      	adds	r3, #8
 8011b26:	4618      	mov	r0, r3
 8011b28:	f002 f889 	bl	8013c3e <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	3318      	adds	r3, #24
 8011b30:	4618      	mov	r0, r3
 8011b32:	f002 f884 	bl	8013c3e <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>
	{ }
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	4618      	mov	r0, r3
 8011b3a:	3708      	adds	r7, #8
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	bd80      	pop	{r7, pc}

08011b40 <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8011b40:	b590      	push	{r4, r7, lr}
 8011b42:	b085      	sub	sp, #20
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
 8011b48:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8011b4a:	f107 030c 	add.w	r3, r7, #12
 8011b4e:	6879      	ldr	r1, [r7, #4]
 8011b50:	4618      	mov	r0, r3
 8011b52:	f000 f859 	bl	8011c08 <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8011b56:	f107 030c 	add.w	r3, r7, #12
 8011b5a:	6839      	ldr	r1, [r7, #0]
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	f002 f885 	bl	8013c6c <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j>
 8011b62:	4604      	mov	r4, r0
 8011b64:	bf00      	nop
      }
 8011b66:	f107 030c 	add.w	r3, r7, #12
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	f000 f85d 	bl	8011c2a <_ZNSaIPfED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8011b70:	4623      	mov	r3, r4
      }
 8011b72:	4618      	mov	r0, r3
 8011b74:	3714      	adds	r7, #20
 8011b76:	46bd      	mov	sp, r7
 8011b78:	bd90      	pop	{r4, r7, pc}

08011b7a <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_>:
    _Deque_base<_Tp, _Alloc>::
 8011b7a:	b580      	push	{r7, lr}
 8011b7c:	b086      	sub	sp, #24
 8011b7e:	af00      	add	r7, sp, #0
 8011b80:	60f8      	str	r0, [r7, #12]
 8011b82:	60b9      	str	r1, [r7, #8]
 8011b84:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8011b86:	68bb      	ldr	r3, [r7, #8]
 8011b88:	617b      	str	r3, [r7, #20]
 8011b8a:	e008      	b.n	8011b9e <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_+0x24>
	    *__cur = this->_M_allocate_node();
 8011b8c:	68f8      	ldr	r0, [r7, #12]
 8011b8e:	f000 f8a2 	bl	8011cd6 <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>
 8011b92:	4602      	mov	r2, r0
 8011b94:	697b      	ldr	r3, [r7, #20]
 8011b96:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8011b98:	697b      	ldr	r3, [r7, #20]
 8011b9a:	3304      	adds	r3, #4
 8011b9c:	617b      	str	r3, [r7, #20]
 8011b9e:	697a      	ldr	r2, [r7, #20]
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	429a      	cmp	r2, r3
 8011ba4:	d3f2      	bcc.n	8011b8c <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_+0x12>
    }
 8011ba6:	bf00      	nop
 8011ba8:	bf00      	nop
 8011baa:	3718      	adds	r7, #24
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bd80      	pop	{r7, pc}

08011bb0 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8011bb0:	b590      	push	{r4, r7, lr}
 8011bb2:	b083      	sub	sp, #12
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6078      	str	r0, [r7, #4]
 8011bb8:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	683a      	ldr	r2, [r7, #0]
 8011bbe:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8011bc0:	683b      	ldr	r3, [r7, #0]
 8011bc2:	681a      	ldr	r2, [r3, #0]
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	685c      	ldr	r4, [r3, #4]
 8011bcc:	f000 f895 	bl	8011cfa <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 8011bd0:	4603      	mov	r3, r0
 8011bd2:	009b      	lsls	r3, r3, #2
 8011bd4:	18e2      	adds	r2, r4, r3
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	609a      	str	r2, [r3, #8]
      }
 8011bda:	bf00      	nop
 8011bdc:	370c      	adds	r7, #12
 8011bde:	46bd      	mov	sp, r7
 8011be0:	bd90      	pop	{r4, r7, pc}

08011be2 <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8011be2:	b590      	push	{r4, r7, lr}
 8011be4:	b083      	sub	sp, #12
 8011be6:	af00      	add	r7, sp, #0
 8011be8:	6078      	str	r0, [r7, #4]
 8011bea:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8011bec:	687c      	ldr	r4, [r7, #4]
 8011bee:	2004      	movs	r0, #4
 8011bf0:	f7f3 fbc3 	bl	800537a <_ZSt16__deque_buf_sizej>
 8011bf4:	4603      	mov	r3, r0
 8011bf6:	461a      	mov	r2, r3
 8011bf8:	6839      	ldr	r1, [r7, #0]
 8011bfa:	4620      	mov	r0, r4
 8011bfc:	f7f1 fdcb 	bl	8003796 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 8011c00:	bf00      	nop
 8011c02:	370c      	adds	r7, #12
 8011c04:	46bd      	mov	sp, r7
 8011c06:	bd90      	pop	{r4, r7, pc}

08011c08 <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b082      	sub	sp, #8
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
 8011c10:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8011c12:	6838      	ldr	r0, [r7, #0]
 8011c14:	f002 f84a 	bl	8013cac <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8011c18:	4603      	mov	r3, r0
 8011c1a:	4619      	mov	r1, r3
 8011c1c:	6878      	ldr	r0, [r7, #4]
 8011c1e:	f002 f850 	bl	8013cc2 <_ZNSaIPfEC1IfEERKSaIT_E>
 8011c22:	6878      	ldr	r0, [r7, #4]
 8011c24:	3708      	adds	r7, #8
 8011c26:	46bd      	mov	sp, r7
 8011c28:	bd80      	pop	{r7, pc}

08011c2a <_ZNSaIPfED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8011c2a:	b480      	push	{r7}
 8011c2c:	b083      	sub	sp, #12
 8011c2e:	af00      	add	r7, sp, #0
 8011c30:	6078      	str	r0, [r7, #4]
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	4618      	mov	r0, r3
 8011c36:	370c      	adds	r7, #12
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3e:	4770      	bx	lr

08011c40 <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b088      	sub	sp, #32
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	60f8      	str	r0, [r7, #12]
 8011c48:	60b9      	str	r1, [r7, #8]
 8011c4a:	607a      	str	r2, [r7, #4]
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	61fb      	str	r3, [r7, #28]
 8011c50:	68bb      	ldr	r3, [r7, #8]
 8011c52:	61bb      	str	r3, [r7, #24]
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8011c58:	f7f0 ff58 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d003      	beq.n	8011c6a <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j+0x2a>
	    ::operator delete(__p);
 8011c62:	69b8      	ldr	r0, [r7, #24]
 8011c64:	f013 fe12 	bl	802588c <_ZdlPv>
	    return;
 8011c68:	e005      	b.n	8011c76 <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 8011c6a:	697a      	ldr	r2, [r7, #20]
 8011c6c:	69b9      	ldr	r1, [r7, #24]
 8011c6e:	69f8      	ldr	r0, [r7, #28]
 8011c70:	f003 f9b2 	bl	8014fd8 <_ZN9__gnu_cxx13new_allocatorIPfE10deallocateEPS1_j>
      { __a.deallocate(__p, __n); }
 8011c74:	bf00      	nop
 8011c76:	bf00      	nop
 8011c78:	3720      	adds	r7, #32
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	bd80      	pop	{r7, pc}

08011c7e <_ZNKSt5dequeIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8011c7e:	b580      	push	{r7, lr}
 8011c80:	b082      	sub	sp, #8
 8011c82:	af00      	add	r7, sp, #0
 8011c84:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	4618      	mov	r0, r3
 8011c8a:	f002 f80f 	bl	8013cac <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8011c8e:	4603      	mov	r3, r0
 8011c90:	4618      	mov	r0, r3
 8011c92:	f002 f823 	bl	8013cdc <_ZNSt5dequeIfSaIfEE11_S_max_sizeERKS0_>
 8011c96:	4603      	mov	r3, r0
 8011c98:	4618      	mov	r0, r3
 8011c9a:	3708      	adds	r7, #8
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	bd80      	pop	{r7, pc}

08011ca0 <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b082      	sub	sp, #8
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
 8011ca8:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8011caa:	683b      	ldr	r3, [r7, #0]
 8011cac:	1c5a      	adds	r2, r3, #1
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8011cb2:	6879      	ldr	r1, [r7, #4]
 8011cb4:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8011cb6:	6879      	ldr	r1, [r7, #4]
 8011cb8:	6809      	ldr	r1, [r1, #0]
 8011cba:	1a41      	subs	r1, r0, r1
 8011cbc:	1089      	asrs	r1, r1, #2
 8011cbe:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8011cc0:	429a      	cmp	r2, r3
 8011cc2:	d904      	bls.n	8011cce <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	6839      	ldr	r1, [r7, #0]
 8011cc8:	6878      	ldr	r0, [r7, #4]
 8011cca:	f002 f851 	bl	8013d70 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb>
      }
 8011cce:	bf00      	nop
 8011cd0:	3708      	adds	r7, #8
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	bd80      	pop	{r7, pc}

08011cd6 <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8011cd6:	b590      	push	{r4, r7, lr}
 8011cd8:	b083      	sub	sp, #12
 8011cda:	af00      	add	r7, sp, #0
 8011cdc:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8011cde:	687c      	ldr	r4, [r7, #4]
 8011ce0:	2004      	movs	r0, #4
 8011ce2:	f7f3 fb4a 	bl	800537a <_ZSt16__deque_buf_sizej>
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	4619      	mov	r1, r3
 8011cea:	4620      	mov	r0, r4
 8011cec:	f7f1 fe9b 	bl	8003a26 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8011cf0:	4603      	mov	r3, r0
      }
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	370c      	adds	r7, #12
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	bd90      	pop	{r4, r7, pc}

08011cfa <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8011cfa:	b580      	push	{r7, lr}
 8011cfc:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8011cfe:	2004      	movs	r0, #4
 8011d00:	f7f3 fb3b 	bl	800537a <_ZSt16__deque_buf_sizej>
 8011d04:	4603      	mov	r3, r0
 8011d06:	4618      	mov	r0, r3
 8011d08:	bd80      	pop	{r7, pc}

08011d0a <_ZNKSt16initializer_listIfE4sizeEv>:
 8011d0a:	b480      	push	{r7}
 8011d0c:	b083      	sub	sp, #12
 8011d0e:	af00      	add	r7, sp, #0
 8011d10:	6078      	str	r0, [r7, #4]
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	685b      	ldr	r3, [r3, #4]
 8011d16:	4618      	mov	r0, r3
 8011d18:	370c      	adds	r7, #12
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d20:	4770      	bx	lr

08011d22 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPKfS4_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 8011d22:	b480      	push	{r7}
 8011d24:	b085      	sub	sp, #20
 8011d26:	af00      	add	r7, sp, #0
 8011d28:	60f8      	str	r0, [r7, #12]
 8011d2a:	60b9      	str	r1, [r7, #8]
 8011d2c:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 8011d2e:	68bb      	ldr	r3, [r7, #8]
 8011d30:	ed93 7a00 	vldr	s14, [r3]
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	edd3 7a00 	vldr	s15, [r3]
 8011d3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d42:	bf4c      	ite	mi
 8011d44:	2301      	movmi	r3, #1
 8011d46:	2300      	movpl	r3, #0
 8011d48:	b2db      	uxtb	r3, r3
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	3714      	adds	r7, #20
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d54:	4770      	bx	lr

08011d56 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_>:
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
 8011d56:	b580      	push	{r7, lr}
 8011d58:	b086      	sub	sp, #24
 8011d5a:	af00      	add	r7, sp, #0
 8011d5c:	60f8      	str	r0, [r7, #12]
 8011d5e:	60b9      	str	r1, [r7, #8]
 8011d60:	713a      	strb	r2, [r7, #4]
      if (__first == __last)
 8011d62:	68fa      	ldr	r2, [r7, #12]
 8011d64:	68bb      	ldr	r3, [r7, #8]
 8011d66:	429a      	cmp	r2, r3
 8011d68:	d101      	bne.n	8011d6e <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x18>
	return __first;
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	e01a      	b.n	8011da4 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x4e>
      _ForwardIterator __result = __first;
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 8011d72:	e00a      	b.n	8011d8a <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x34>
	if (__comp(__first, __result))
 8011d74:	1d3b      	adds	r3, r7, #4
 8011d76:	697a      	ldr	r2, [r7, #20]
 8011d78:	68f9      	ldr	r1, [r7, #12]
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	f7ff ffd1 	bl	8011d22 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPKfS4_EEbT_T0_>
 8011d80:	4603      	mov	r3, r0
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d001      	beq.n	8011d8a <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x34>
	  __result = __first;
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	3304      	adds	r3, #4
 8011d8e:	60fb      	str	r3, [r7, #12]
 8011d90:	68fa      	ldr	r2, [r7, #12]
 8011d92:	68bb      	ldr	r3, [r7, #8]
 8011d94:	429a      	cmp	r2, r3
 8011d96:	bf14      	ite	ne
 8011d98:	2301      	movne	r3, #1
 8011d9a:	2300      	moveq	r3, #0
 8011d9c:	b2db      	uxtb	r3, r3
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d1e8      	bne.n	8011d74 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x1e>
      return __result;
 8011da2:	697b      	ldr	r3, [r7, #20]
    }
 8011da4:	4618      	mov	r0, r3
 8011da6:	3718      	adds	r7, #24
 8011da8:	46bd      	mov	sp, r7
 8011daa:	bd80      	pop	{r7, pc}

08011dac <_ZSt12construct_atIcJcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS1_DpOS2_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8011dac:	b590      	push	{r4, r7, lr}
 8011dae:	b083      	sub	sp, #12
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
 8011db4:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8011db6:	6838      	ldr	r0, [r7, #0]
 8011db8:	f7f6 ffbf 	bl	8008d3a <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	781c      	ldrb	r4, [r3, #0]
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	4619      	mov	r1, r3
 8011dc4:	2001      	movs	r0, #1
 8011dc6:	f7f0 fea9 	bl	8002b1c <_ZnwjPv>
 8011dca:	4603      	mov	r3, r0
 8011dcc:	4622      	mov	r2, r4
 8011dce:	701a      	strb	r2, [r3, #0]
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	370c      	adds	r7, #12
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	bd90      	pop	{r4, r7, pc}

08011dd8 <_ZNSt16allocator_traitsISaIcEE9constructIcJcEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b084      	sub	sp, #16
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	60f8      	str	r0, [r7, #12]
 8011de0:	60b9      	str	r1, [r7, #8]
 8011de2:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8011de4:	6878      	ldr	r0, [r7, #4]
 8011de6:	f7f6 ffa8 	bl	8008d3a <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>
 8011dea:	4603      	mov	r3, r0
 8011dec:	4619      	mov	r1, r3
 8011dee:	68b8      	ldr	r0, [r7, #8]
 8011df0:	f7ff ffdc 	bl	8011dac <_ZSt12construct_atIcJcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS1_DpOS2_>
	}
 8011df4:	bf00      	nop
 8011df6:	3710      	adds	r7, #16
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd80      	pop	{r7, pc}

08011dfc <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8011dfc:	b5b0      	push	{r4, r5, r7, lr}
 8011dfe:	b08c      	sub	sp, #48	; 0x30
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	60f8      	str	r0, [r7, #12]
 8011e04:	60b9      	str	r1, [r7, #8]
 8011e06:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8011e08:	4a38      	ldr	r2, [pc, #224]	; (8011eec <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_+0xf0>)
 8011e0a:	2101      	movs	r1, #1
 8011e0c:	68f8      	ldr	r0, [r7, #12]
 8011e0e:	f7fe fd50 	bl	80108b2 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc>
 8011e12:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	685b      	ldr	r3, [r3, #4]
 8011e1e:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8011e20:	68f8      	ldr	r0, [r7, #12]
 8011e22:	f7fb fe02 	bl	800da2a <_ZNSt6vectorIcSaIcEE5beginEv>
 8011e26:	4603      	mov	r3, r0
 8011e28:	617b      	str	r3, [r7, #20]
 8011e2a:	f107 0214 	add.w	r2, r7, #20
 8011e2e:	f107 0308 	add.w	r3, r7, #8
 8011e32:	4611      	mov	r1, r2
 8011e34:	4618      	mov	r0, r3
 8011e36:	f7fe fd83 	bl	8010940 <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8011e3a:	4603      	mov	r3, r0
 8011e3c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011e42:	4618      	mov	r0, r3
 8011e44:	f7fe fd10 	bl	8010868 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 8011e48:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8011e4a:	69fb      	ldr	r3, [r7, #28]
 8011e4c:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8011e4e:	68fc      	ldr	r4, [r7, #12]
 8011e50:	69fa      	ldr	r2, [r7, #28]
 8011e52:	6a3b      	ldr	r3, [r7, #32]
 8011e54:	18d5      	adds	r5, r2, r3
 8011e56:	6878      	ldr	r0, [r7, #4]
 8011e58:	f7f6 ff6f 	bl	8008d3a <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>
 8011e5c:	4603      	mov	r3, r0
 8011e5e:	461a      	mov	r2, r3
 8011e60:	4629      	mov	r1, r5
 8011e62:	4620      	mov	r0, r4
 8011e64:	f7ff ffb8 	bl	8011dd8 <_ZNSt16allocator_traitsISaIcEE9constructIcJcEEEvRS0_PT_DpOT0_>
	  __new_finish = pointer();
 8011e68:	2300      	movs	r3, #0
 8011e6a:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011e6c:	f107 0308 	add.w	r3, r7, #8
 8011e70:	4618      	mov	r0, r3
 8011e72:	f7f6 ff6d 	bl	8008d50 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 8011e76:	4603      	mov	r3, r0
 8011e78:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	f7fc fc6a 	bl	800e756 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8011e82:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011e84:	69fa      	ldr	r2, [r7, #28]
 8011e86:	4621      	mov	r1, r4
 8011e88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e8a:	f7fe fd6d 	bl	8010968 <_ZNSt6vectorIcSaIcEE11_S_relocateEPcS2_S2_RS0_>
 8011e8e:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8011e90:	69bb      	ldr	r3, [r7, #24]
 8011e92:	3301      	adds	r3, #1
 8011e94:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011e96:	f107 0308 	add.w	r3, r7, #8
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	f7f6 ff58 	bl	8008d50 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	f7fc fc55 	bl	800e756 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8011eac:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011eae:	69ba      	ldr	r2, [r7, #24]
 8011eb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011eb2:	4620      	mov	r0, r4
 8011eb4:	f7fe fd58 	bl	8010968 <_ZNSt6vectorIcSaIcEE11_S_relocateEPcS2_S2_RS0_>
 8011eb8:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8011eba:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	689a      	ldr	r2, [r3, #8]
 8011ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ec2:	1ad3      	subs	r3, r2, r3
      _M_deallocate(__old_start,
 8011ec4:	461a      	mov	r2, r3
 8011ec6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011ec8:	f7fc fd59 	bl	800e97e <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>
      this->_M_impl._M_start = __new_start;
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	69fa      	ldr	r2, [r7, #28]
 8011ed0:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	69ba      	ldr	r2, [r7, #24]
 8011ed6:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8011ed8:	69fa      	ldr	r2, [r7, #28]
 8011eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011edc:	441a      	add	r2, r3
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	609a      	str	r2, [r3, #8]
    }
 8011ee2:	bf00      	nop
 8011ee4:	3730      	adds	r7, #48	; 0x30
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	bdb0      	pop	{r4, r5, r7, pc}
 8011eea:	bf00      	nop
 8011eec:	08029750 	.word	0x08029750

08011ef0 <_ZNSt6vectorIcSaIcEE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b084      	sub	sp, #16
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8011ef8:	6878      	ldr	r0, [r7, #4]
 8011efa:	f7fb fda6 	bl	800da4a <_ZNSt6vectorIcSaIcEE3endEv>
 8011efe:	4603      	mov	r3, r0
 8011f00:	60fb      	str	r3, [r7, #12]
 8011f02:	f107 030c 	add.w	r3, r7, #12
 8011f06:	2101      	movs	r1, #1
 8011f08:	4618      	mov	r0, r3
 8011f0a:	f001 ffcb 	bl	8013ea4 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEmiEi>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	60bb      	str	r3, [r7, #8]
 8011f12:	f107 0308 	add.w	r3, r7, #8
 8011f16:	4618      	mov	r0, r3
 8011f18:	f7ff fa36 	bl	8011388 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEdeEv>
 8011f1c:	4603      	mov	r3, r0
      }
 8011f1e:	4618      	mov	r0, r3
 8011f20:	3710      	adds	r7, #16
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}

08011f26 <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8011f26:	b480      	push	{r7}
 8011f28:	b083      	sub	sp, #12
 8011f2a:	af00      	add	r7, sp, #0
 8011f2c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	4618      	mov	r0, r3
 8011f32:	370c      	adds	r7, #12
 8011f34:	46bd      	mov	sp, r7
 8011f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f3a:	4770      	bx	lr

08011f3c <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
    distance(_InputIterator __first, _InputIterator __last)
 8011f3c:	b5b0      	push	{r4, r5, r7, lr}
 8011f3e:	b082      	sub	sp, #8
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	6078      	str	r0, [r7, #4]
 8011f44:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 8011f46:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8011f48:	1d3b      	adds	r3, r7, #4
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	f7fc fa4d 	bl	800e3ea <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 8011f50:	462a      	mov	r2, r5
 8011f52:	6839      	ldr	r1, [r7, #0]
 8011f54:	4620      	mov	r0, r4
 8011f56:	f001 ffbd 	bl	8013ed4 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8011f5a:	4603      	mov	r3, r0
    }
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	3708      	adds	r7, #8
 8011f60:	46bd      	mov	sp, r7
 8011f62:	bdb0      	pop	{r4, r5, r7, pc}

08011f64 <_ZSt13move_backwardIPcS0_ET0_T_S2_S1_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8011f64:	b590      	push	{r4, r7, lr}
 8011f66:	b085      	sub	sp, #20
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	60f8      	str	r0, [r7, #12]
 8011f6c:	60b9      	str	r1, [r7, #8]
 8011f6e:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 8011f70:	68f8      	ldr	r0, [r7, #12]
 8011f72:	f001 ffd7 	bl	8013f24 <_ZSt12__miter_baseIPcET_S1_>
 8011f76:	4604      	mov	r4, r0
 8011f78:	68b8      	ldr	r0, [r7, #8]
 8011f7a:	f001 ffd3 	bl	8013f24 <_ZSt12__miter_baseIPcET_S1_>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	687a      	ldr	r2, [r7, #4]
 8011f82:	4619      	mov	r1, r3
 8011f84:	4620      	mov	r0, r4
 8011f86:	f001 ffd8 	bl	8013f3a <_ZSt22__copy_move_backward_aILb1EPcS0_ET1_T0_S2_S1_>
 8011f8a:	4603      	mov	r3, r0
    }
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	3714      	adds	r7, #20
 8011f90:	46bd      	mov	sp, r7
 8011f92:	bd90      	pop	{r4, r7, pc}

08011f94 <_ZSt4copyIPcN9__gnu_cxx17__normal_iteratorIS0_St6vectorIcSaIcEEEEET0_T_S8_S7_>:
    copy(_II __first, _II __last, _OI __result)
 8011f94:	b590      	push	{r4, r7, lr}
 8011f96:	b085      	sub	sp, #20
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	60f8      	str	r0, [r7, #12]
 8011f9c:	60b9      	str	r1, [r7, #8]
 8011f9e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8011fa0:	68f8      	ldr	r0, [r7, #12]
 8011fa2:	f001 ffbf 	bl	8013f24 <_ZSt12__miter_baseIPcET_S1_>
 8011fa6:	4604      	mov	r4, r0
 8011fa8:	68b8      	ldr	r0, [r7, #8]
 8011faa:	f001 ffbb 	bl	8013f24 <_ZSt12__miter_baseIPcET_S1_>
 8011fae:	4603      	mov	r3, r0
 8011fb0:	687a      	ldr	r2, [r7, #4]
 8011fb2:	4619      	mov	r1, r3
 8011fb4:	4620      	mov	r0, r4
 8011fb6:	f001 ffe3 	bl	8013f80 <_ZSt13__copy_move_aILb0EPcN9__gnu_cxx17__normal_iteratorIS0_St6vectorIcSaIcEEEEET1_T0_S8_S7_>
 8011fba:	4603      	mov	r3, r0
    }
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	3714      	adds	r7, #20
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd90      	pop	{r4, r7, pc}

08011fc4 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag>:
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
 8011fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fc6:	b08d      	sub	sp, #52	; 0x34
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	60f8      	str	r0, [r7, #12]
 8011fcc:	60b9      	str	r1, [r7, #8]
 8011fce:	607a      	str	r2, [r7, #4]
 8011fd0:	603b      	str	r3, [r7, #0]
      _M_range_insert(iterator __position, _ForwardIterator __first,
		      _ForwardIterator __last, std::forward_iterator_tag)
      {
	if (__first != __last)
 8011fd2:	687a      	ldr	r2, [r7, #4]
 8011fd4:	683b      	ldr	r3, [r7, #0]
 8011fd6:	429a      	cmp	r2, r3
 8011fd8:	f000 80f6 	beq.w	80121c8 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x204>
	  {
	    const size_type __n = std::distance(__first, __last);
 8011fdc:	6839      	ldr	r1, [r7, #0]
 8011fde:	6878      	ldr	r0, [r7, #4]
 8011fe0:	f7ff ffac 	bl	8011f3c <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8011fe4:	4603      	mov	r3, r0
 8011fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
	    if (size_type(this->_M_impl._M_end_of_storage
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	689a      	ldr	r2, [r3, #8]
			  - this->_M_impl._M_finish) >= __n)
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	685b      	ldr	r3, [r3, #4]
 8011ff0:	1ad3      	subs	r3, r2, r3
	    if (size_type(this->_M_impl._M_end_of_storage
 8011ff2:	461a      	mov	r2, r3
 8011ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ff6:	4293      	cmp	r3, r2
 8011ff8:	f200 8081 	bhi.w	80120fe <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x13a>
	      {
		const size_type __elems_after = end() - __position;
 8011ffc:	68f8      	ldr	r0, [r7, #12]
 8011ffe:	f7fb fd24 	bl	800da4a <_ZNSt6vectorIcSaIcEE3endEv>
 8012002:	4603      	mov	r3, r0
 8012004:	617b      	str	r3, [r7, #20]
 8012006:	f107 0208 	add.w	r2, r7, #8
 801200a:	f107 0314 	add.w	r3, r7, #20
 801200e:	4611      	mov	r1, r2
 8012010:	4618      	mov	r0, r3
 8012012:	f7fe fc95 	bl	8010940 <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8012016:	4603      	mov	r3, r0
 8012018:	61fb      	str	r3, [r7, #28]
		pointer __old_finish(this->_M_impl._M_finish);
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	685b      	ldr	r3, [r3, #4]
 801201e:	61bb      	str	r3, [r7, #24]
		if (__elems_after > __n)
 8012020:	69fa      	ldr	r2, [r7, #28]
 8012022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012024:	429a      	cmp	r2, r3
 8012026:	d92d      	bls.n	8012084 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xc0>
		  {
		    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	685a      	ldr	r2, [r3, #4]
 801202c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801202e:	425b      	negs	r3, r3
 8012030:	18d4      	adds	r4, r2, r3
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	685d      	ldr	r5, [r3, #4]
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	685e      	ldr	r6, [r3, #4]
						this->_M_impl._M_finish,
						this->_M_impl._M_finish,
						_M_get_Tp_allocator());
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	4618      	mov	r0, r3
 801203e:	f7fc fb8a 	bl	800e756 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8012042:	4603      	mov	r3, r0
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 8012044:	4632      	mov	r2, r6
 8012046:	4629      	mov	r1, r5
 8012048:	4620      	mov	r0, r4
 801204a:	f001 ff52 	bl	8013ef2 <_ZSt22__uninitialized_move_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
		    this->_M_impl._M_finish += __n;
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	685a      	ldr	r2, [r3, #4]
 8012052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012054:	441a      	add	r2, r3
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	605a      	str	r2, [r3, #4]
		    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
		    _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 801205a:	f107 0308 	add.w	r3, r7, #8
 801205e:	4618      	mov	r0, r3
 8012060:	f7f6 fe76 	bl	8008d50 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 8012064:	4603      	mov	r3, r0
 8012066:	6818      	ldr	r0, [r3, #0]
 8012068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801206a:	425b      	negs	r3, r3
 801206c:	69ba      	ldr	r2, [r7, #24]
 801206e:	4413      	add	r3, r2
 8012070:	69ba      	ldr	r2, [r7, #24]
 8012072:	4619      	mov	r1, r3
 8012074:	f7ff ff76 	bl	8011f64 <_ZSt13move_backwardIPcS0_ET0_T_S2_S1_>
					    __old_finish - __n, __old_finish);
		    std::copy(__first, __last, __position);
 8012078:	68ba      	ldr	r2, [r7, #8]
 801207a:	6839      	ldr	r1, [r7, #0]
 801207c:	6878      	ldr	r0, [r7, #4]
 801207e:	f7ff ff89 	bl	8011f94 <_ZSt4copyIPcN9__gnu_cxx17__normal_iteratorIS0_St6vectorIcSaIcEEEEET0_T_S8_S7_>
		this->_M_impl._M_start = __new_start;
		this->_M_impl._M_finish = __new_finish;
		this->_M_impl._M_end_of_storage = __new_start + __len;
	      }
	  }
      }
 8012082:	e0a1      	b.n	80121c8 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x204>
		    _ForwardIterator __mid = __first;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	613b      	str	r3, [r7, #16]
		    std::advance(__mid, __elems_after);
 8012088:	f107 0310 	add.w	r3, r7, #16
 801208c:	69f9      	ldr	r1, [r7, #28]
 801208e:	4618      	mov	r0, r3
 8012090:	f001 ff97 	bl	8013fc2 <_ZSt7advanceIPcjEvRT_T0_>
		    std::__uninitialized_copy_a(__mid, __last,
 8012094:	693c      	ldr	r4, [r7, #16]
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	685d      	ldr	r5, [r3, #4]
						_M_get_Tp_allocator());
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	4618      	mov	r0, r3
 801209e:	f7fc fb5a 	bl	800e756 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 80120a2:	4603      	mov	r3, r0
		    std::__uninitialized_copy_a(__mid, __last,
 80120a4:	462a      	mov	r2, r5
 80120a6:	6839      	ldr	r1, [r7, #0]
 80120a8:	4620      	mov	r0, r4
 80120aa:	f001 ff9d 	bl	8013fe8 <_ZSt22__uninitialized_copy_aIPcS0_cET0_T_S2_S1_RSaIT1_E>
		    this->_M_impl._M_finish += __n - __elems_after;
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	685a      	ldr	r2, [r3, #4]
 80120b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80120b4:	69fb      	ldr	r3, [r7, #28]
 80120b6:	1acb      	subs	r3, r1, r3
 80120b8:	441a      	add	r2, r3
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	605a      	str	r2, [r3, #4]
		    std::__uninitialized_move_a(__position.base(),
 80120be:	f107 0308 	add.w	r3, r7, #8
 80120c2:	4618      	mov	r0, r3
 80120c4:	f7f6 fe44 	bl	8008d50 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 80120c8:	4603      	mov	r3, r0
 80120ca:	681c      	ldr	r4, [r3, #0]
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	685d      	ldr	r5, [r3, #4]
						_M_get_Tp_allocator());
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	4618      	mov	r0, r3
 80120d4:	f7fc fb3f 	bl	800e756 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 80120d8:	4603      	mov	r3, r0
		    std::__uninitialized_move_a(__position.base(),
 80120da:	462a      	mov	r2, r5
 80120dc:	69b9      	ldr	r1, [r7, #24]
 80120de:	4620      	mov	r0, r4
 80120e0:	f001 ff07 	bl	8013ef2 <_ZSt22__uninitialized_move_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
		    this->_M_impl._M_finish += __elems_after;
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	685a      	ldr	r2, [r3, #4]
 80120e8:	69fb      	ldr	r3, [r7, #28]
 80120ea:	441a      	add	r2, r3
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	605a      	str	r2, [r3, #4]
		    std::copy(__first, __mid, __position);
 80120f0:	693b      	ldr	r3, [r7, #16]
 80120f2:	68ba      	ldr	r2, [r7, #8]
 80120f4:	4619      	mov	r1, r3
 80120f6:	6878      	ldr	r0, [r7, #4]
 80120f8:	f7ff ff4c 	bl	8011f94 <_ZSt4copyIPcN9__gnu_cxx17__normal_iteratorIS0_St6vectorIcSaIcEEEEET0_T_S8_S7_>
      }
 80120fc:	e064      	b.n	80121c8 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x204>
		  _M_check_len(__n, "vector::_M_range_insert");
 80120fe:	4a34      	ldr	r2, [pc, #208]	; (80121d0 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x20c>)
 8012100:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012102:	68f8      	ldr	r0, [r7, #12]
 8012104:	f7fe fbd5 	bl	80108b2 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc>
 8012108:	62b8      	str	r0, [r7, #40]	; 0x28
		pointer __new_start(this->_M_allocate(__len));
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801210e:	4618      	mov	r0, r3
 8012110:	f7fe fbaa 	bl	8010868 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 8012114:	6278      	str	r0, [r7, #36]	; 0x24
		pointer __new_finish(__new_start);
 8012116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012118:	623b      	str	r3, [r7, #32]
		      (this->_M_impl._M_start, __position.base(),
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	681c      	ldr	r4, [r3, #0]
 801211e:	f107 0308 	add.w	r3, r7, #8
 8012122:	4618      	mov	r0, r3
 8012124:	f7f6 fe14 	bl	8008d50 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 8012128:	4603      	mov	r3, r0
 801212a:	681d      	ldr	r5, [r3, #0]
		       __new_start, _M_get_Tp_allocator());
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	4618      	mov	r0, r3
 8012130:	f7fc fb11 	bl	800e756 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8012134:	4603      	mov	r3, r0
		      (this->_M_impl._M_start, __position.base(),
 8012136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012138:	4629      	mov	r1, r5
 801213a:	4620      	mov	r0, r4
 801213c:	f001 ff65 	bl	801400a <_ZSt34__uninitialized_move_if_noexcept_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
 8012140:	6238      	str	r0, [r7, #32]
						    _M_get_Tp_allocator());
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	4618      	mov	r0, r3
 8012146:	f7fc fb06 	bl	800e756 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 801214a:	4603      	mov	r3, r0
		      = std::__uninitialized_copy_a(__first, __last,
 801214c:	6a3a      	ldr	r2, [r7, #32]
 801214e:	6839      	ldr	r1, [r7, #0]
 8012150:	6878      	ldr	r0, [r7, #4]
 8012152:	f001 ff49 	bl	8013fe8 <_ZSt22__uninitialized_copy_aIPcS0_cET0_T_S2_S1_RSaIT1_E>
 8012156:	6238      	str	r0, [r7, #32]
		      (__position.base(), this->_M_impl._M_finish,
 8012158:	f107 0308 	add.w	r3, r7, #8
 801215c:	4618      	mov	r0, r3
 801215e:	f7f6 fdf7 	bl	8008d50 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 8012162:	4603      	mov	r3, r0
 8012164:	681c      	ldr	r4, [r3, #0]
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	685d      	ldr	r5, [r3, #4]
		       __new_finish, _M_get_Tp_allocator());
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	4618      	mov	r0, r3
 801216e:	f7fc faf2 	bl	800e756 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8012172:	4603      	mov	r3, r0
		      (__position.base(), this->_M_impl._M_finish,
 8012174:	6a3a      	ldr	r2, [r7, #32]
 8012176:	4629      	mov	r1, r5
 8012178:	4620      	mov	r0, r4
 801217a:	f001 ff46 	bl	801400a <_ZSt34__uninitialized_move_if_noexcept_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
 801217e:	6238      	str	r0, [r7, #32]
		std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	681c      	ldr	r4, [r3, #0]
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	685d      	ldr	r5, [r3, #4]
			      _M_get_Tp_allocator());
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	4618      	mov	r0, r3
 801218c:	f7fc fae3 	bl	800e756 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8012190:	4603      	mov	r3, r0
		std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8012192:	461a      	mov	r2, r3
 8012194:	4629      	mov	r1, r5
 8012196:	4620      	mov	r0, r4
 8012198:	f7fc faf9 	bl	800e78e <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>
		_M_deallocate(this->_M_impl._M_start,
 801219c:	68f8      	ldr	r0, [r7, #12]
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	6819      	ldr	r1, [r3, #0]
			      this->_M_impl._M_end_of_storage
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	689a      	ldr	r2, [r3, #8]
			      - this->_M_impl._M_start);
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	1ad3      	subs	r3, r2, r3
		_M_deallocate(this->_M_impl._M_start,
 80121ac:	461a      	mov	r2, r3
 80121ae:	f7fc fbe6 	bl	800e97e <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>
		this->_M_impl._M_start = __new_start;
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121b6:	601a      	str	r2, [r3, #0]
		this->_M_impl._M_finish = __new_finish;
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	6a3a      	ldr	r2, [r7, #32]
 80121bc:	605a      	str	r2, [r3, #4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 80121be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121c2:	441a      	add	r2, r3
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	609a      	str	r2, [r3, #8]
      }
 80121c8:	bf00      	nop
 80121ca:	3734      	adds	r7, #52	; 0x34
 80121cc:	46bd      	mov	sp, r7
 80121ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121d0:	080297d0 	.word	0x080297d0

080121d4 <_ZSt9iter_swapIPbS0_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b082      	sub	sp, #8
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
 80121dc:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 80121de:	6839      	ldr	r1, [r7, #0]
 80121e0:	6878      	ldr	r0, [r7, #4]
 80121e2:	f001 ff2b 	bl	801403c <_ZSt4swapIbENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 80121e6:	bf00      	nop
 80121e8:	3708      	adds	r7, #8
 80121ea:	46bd      	mov	sp, r7
 80121ec:	bd80      	pop	{r7, pc}

080121ee <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80121ee:	b580      	push	{r7, lr}
 80121f0:	b084      	sub	sp, #16
 80121f2:	af00      	add	r7, sp, #0
 80121f4:	60f8      	str	r0, [r7, #12]
 80121f6:	60b9      	str	r1, [r7, #8]
 80121f8:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 80121fa:	f7f0 fc87 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 80121fe:	4603      	mov	r3, r0
 8012200:	2b00      	cmp	r3, #0
 8012202:	d006      	beq.n	8012212 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 8012204:	687a      	ldr	r2, [r7, #4]
 8012206:	68b9      	ldr	r1, [r7, #8]
 8012208:	68f8      	ldr	r0, [r7, #12]
 801220a:	f001 ff36 	bl	801407a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_>
 801220e:	4603      	mov	r3, r0
 8012210:	e006      	b.n	8012220 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 8012212:	687a      	ldr	r2, [r7, #4]
 8012214:	68b9      	ldr	r1, [r7, #8]
 8012216:	68f8      	ldr	r0, [r7, #12]
 8012218:	f001 ff51 	bl	80140be <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 801221c:	4603      	mov	r3, r0
 801221e:	bf00      	nop
    }
 8012220:	4618      	mov	r0, r3
 8012222:	3710      	adds	r7, #16
 8012224:	46bd      	mov	sp, r7
 8012226:	bd80      	pop	{r7, pc}

08012228 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8012228:	b580      	push	{r7, lr}
 801222a:	b084      	sub	sp, #16
 801222c:	af00      	add	r7, sp, #0
 801222e:	6078      	str	r0, [r7, #4]
 8012230:	6039      	str	r1, [r7, #0]
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	60fb      	str	r3, [r7, #12]
 8012236:	683b      	ldr	r3, [r7, #0]
 8012238:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 801223a:	f7f0 fc67 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 801223e:	4603      	mov	r3, r0
 8012240:	2b00      	cmp	r3, #0
 8012242:	d004      	beq.n	801224e <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x26>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012244:	68b8      	ldr	r0, [r7, #8]
 8012246:	f013 fb25 	bl	8025894 <_Znwj>
 801224a:	4603      	mov	r3, r0
 801224c:	e006      	b.n	801225c <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x34>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801224e:	2200      	movs	r2, #0
 8012250:	68b9      	ldr	r1, [r7, #8]
 8012252:	68f8      	ldr	r0, [r7, #12]
 8012254:	f002 ffd3 	bl	80151fe <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>
 8012258:	4603      	mov	r3, r0
 801225a:	bf00      	nop
      { return __a.allocate(__n); }
 801225c:	4618      	mov	r0, r3
 801225e:	3710      	adds	r7, #16
 8012260:	46bd      	mov	sp, r7
 8012262:	bd80      	pop	{r7, pc}

08012264 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 8012264:	b590      	push	{r4, r7, lr}
 8012266:	b085      	sub	sp, #20
 8012268:	af00      	add	r7, sp, #0
 801226a:	60f8      	str	r0, [r7, #12]
 801226c:	60b9      	str	r1, [r7, #8]
 801226e:	607a      	str	r2, [r7, #4]
 8012270:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 8012272:	4623      	mov	r3, r4
 8012274:	687a      	ldr	r2, [r7, #4]
 8012276:	68b9      	ldr	r1, [r7, #8]
 8012278:	68f8      	ldr	r0, [r7, #12]
 801227a:	f001 ff7d 	bl	8014178 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
      std::__sort_heap(__first, __middle, __comp);
 801227e:	463b      	mov	r3, r7
 8012280:	461a      	mov	r2, r3
 8012282:	68b9      	ldr	r1, [r7, #8]
 8012284:	68f8      	ldr	r0, [r7, #12]
 8012286:	f001 ffc5 	bl	8014214 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
    }
 801228a:	bf00      	nop
 801228c:	3714      	adds	r7, #20
 801228e:	46bd      	mov	sp, r7
 8012290:	bd90      	pop	{r4, r7, pc}

08012292 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 8012292:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012294:	b089      	sub	sp, #36	; 0x24
 8012296:	af02      	add	r7, sp, #8
 8012298:	60f8      	str	r0, [r7, #12]
 801229a:	60b9      	str	r1, [r7, #8]
 801229c:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 801229e:	f107 020c 	add.w	r2, r7, #12
 80122a2:	f107 0308 	add.w	r3, r7, #8
 80122a6:	4611      	mov	r1, r2
 80122a8:	4618      	mov	r0, r3
 80122aa:	f7f1 fb1b 	bl	80038e4 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80122ae:	4603      	mov	r3, r0
 80122b0:	0fda      	lsrs	r2, r3, #31
 80122b2:	4413      	add	r3, r2
 80122b4:	105b      	asrs	r3, r3, #1
 80122b6:	461a      	mov	r2, r3
 80122b8:	f107 030c 	add.w	r3, r7, #12
 80122bc:	4611      	mov	r1, r2
 80122be:	4618      	mov	r0, r3
 80122c0:	f000 f827 	bl	8012312 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 80122c4:	4603      	mov	r3, r0
 80122c6:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 80122c8:	f107 030c 	add.w	r3, r7, #12
 80122cc:	2101      	movs	r1, #1
 80122ce:	4618      	mov	r0, r3
 80122d0:	f000 f81f 	bl	8012312 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 80122d4:	4604      	mov	r4, r0
 80122d6:	f107 0308 	add.w	r3, r7, #8
 80122da:	2101      	movs	r1, #1
 80122dc:	4618      	mov	r0, r3
 80122de:	f001 ffc0 	bl	8014262 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 80122e2:	4603      	mov	r3, r0
 80122e4:	f88d 5000 	strb.w	r5, [sp]
 80122e8:	697a      	ldr	r2, [r7, #20]
 80122ea:	4621      	mov	r1, r4
 80122ec:	68f8      	ldr	r0, [r7, #12]
 80122ee:	f001 ffd1 	bl	8014294 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 80122f2:	f107 030c 	add.w	r3, r7, #12
 80122f6:	2101      	movs	r1, #1
 80122f8:	4618      	mov	r0, r3
 80122fa:	f000 f80a 	bl	8012312 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 80122fe:	4633      	mov	r3, r6
 8012300:	68fa      	ldr	r2, [r7, #12]
 8012302:	68b9      	ldr	r1, [r7, #8]
 8012304:	f002 f81b 	bl	801433e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>
 8012308:	4603      	mov	r3, r0
    }
 801230a:	4618      	mov	r0, r3
 801230c:	371c      	adds	r7, #28
 801230e:	46bd      	mov	sp, r7
 8012310:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012312 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8012312:	b580      	push	{r7, lr}
 8012314:	b084      	sub	sp, #16
 8012316:	af00      	add	r7, sp, #0
 8012318:	6078      	str	r0, [r7, #4]
 801231a:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	681a      	ldr	r2, [r3, #0]
 8012320:	683b      	ldr	r3, [r7, #0]
 8012322:	009b      	lsls	r3, r3, #2
 8012324:	4413      	add	r3, r2
 8012326:	60fb      	str	r3, [r7, #12]
 8012328:	f107 020c 	add.w	r2, r7, #12
 801232c:	f107 0308 	add.w	r3, r7, #8
 8012330:	4611      	mov	r1, r2
 8012332:	4618      	mov	r0, r3
 8012334:	f7f1 fa6f 	bl	8003816 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8012338:	68bb      	ldr	r3, [r7, #8]
 801233a:	4618      	mov	r0, r3
 801233c:	3710      	adds	r7, #16
 801233e:	46bd      	mov	sp, r7
 8012340:	bd80      	pop	{r7, pc}

08012342 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8012342:	b480      	push	{r7}
 8012344:	b083      	sub	sp, #12
 8012346:	af00      	add	r7, sp, #0
 8012348:	6078      	str	r0, [r7, #4]
	++_M_current;
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	1d1a      	adds	r2, r3, #4
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	601a      	str	r2, [r3, #0]
	return *this;
 8012354:	687b      	ldr	r3, [r7, #4]
      }
 8012356:	4618      	mov	r0, r3
 8012358:	370c      	adds	r7, #12
 801235a:	46bd      	mov	sp, r7
 801235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012360:	4770      	bx	lr

08012362 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8012362:	b480      	push	{r7}
 8012364:	b083      	sub	sp, #12
 8012366:	af00      	add	r7, sp, #0
 8012368:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	4618      	mov	r0, r3
 8012370:	370c      	adds	r7, #12
 8012372:	46bd      	mov	sp, r7
 8012374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012378:	4770      	bx	lr

0801237a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 801237a:	b580      	push	{r7, lr}
 801237c:	ed2d 8b02 	vpush	{d8}
 8012380:	b084      	sub	sp, #16
 8012382:	af00      	add	r7, sp, #0
 8012384:	60f8      	str	r0, [r7, #12]
 8012386:	60b9      	str	r1, [r7, #8]
 8012388:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 801238a:	f107 0308 	add.w	r3, r7, #8
 801238e:	4618      	mov	r0, r3
 8012390:	f7ff ffe7 	bl	8012362 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8012394:	4603      	mov	r3, r0
 8012396:	ed93 8a00 	vldr	s16, [r3]
 801239a:	1d3b      	adds	r3, r7, #4
 801239c:	4618      	mov	r0, r3
 801239e:	f7ff ffe0 	bl	8012362 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 80123a2:	4603      	mov	r3, r0
 80123a4:	edd3 7a00 	vldr	s15, [r3]
 80123a8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80123ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123b0:	bf4c      	ite	mi
 80123b2:	2301      	movmi	r3, #1
 80123b4:	2300      	movpl	r3, #0
 80123b6:	b2db      	uxtb	r3, r3
 80123b8:	4618      	mov	r0, r3
 80123ba:	3710      	adds	r7, #16
 80123bc:	46bd      	mov	sp, r7
 80123be:	ecbd 8b02 	vpop	{d8}
 80123c2:	bd80      	pop	{r7, pc}

080123c4 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80123c4:	b590      	push	{r4, r7, lr}
 80123c6:	b085      	sub	sp, #20
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	60f8      	str	r0, [r7, #12]
 80123cc:	60b9      	str	r1, [r7, #8]
 80123ce:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 80123d0:	68f8      	ldr	r0, [r7, #12]
 80123d2:	f002 f807 	bl	80143e4 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 80123d6:	4604      	mov	r4, r0
 80123d8:	68b8      	ldr	r0, [r7, #8]
 80123da:	f002 f803 	bl	80143e4 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 80123de:	4603      	mov	r3, r0
 80123e0:	687a      	ldr	r2, [r7, #4]
 80123e2:	4619      	mov	r1, r3
 80123e4:	4620      	mov	r0, r4
 80123e6:	f002 f808 	bl	80143fa <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>
 80123ea:	4603      	mov	r3, r0
    }
 80123ec:	4618      	mov	r0, r3
 80123ee:	3714      	adds	r7, #20
 80123f0:	46bd      	mov	sp, r7
 80123f2:	bd90      	pop	{r4, r7, pc}

080123f4 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 80123f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123f6:	b087      	sub	sp, #28
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	60f8      	str	r0, [r7, #12]
 80123fc:	60b9      	str	r1, [r7, #8]
 80123fe:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 8012400:	f107 0208 	add.w	r2, r7, #8
 8012404:	f107 030c 	add.w	r3, r7, #12
 8012408:	4611      	mov	r1, r2
 801240a:	4618      	mov	r0, r3
 801240c:	f7fb fff7 	bl	800e3fe <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8012410:	4603      	mov	r3, r0
 8012412:	2b00      	cmp	r3, #0
 8012414:	d153      	bne.n	80124be <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xca>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8012416:	f107 030c 	add.w	r3, r7, #12
 801241a:	2101      	movs	r1, #1
 801241c:	4618      	mov	r0, r3
 801241e:	f7ff ff78 	bl	8012312 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8012422:	4603      	mov	r3, r0
 8012424:	617b      	str	r3, [r7, #20]
 8012426:	e03b      	b.n	80124a0 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xac>
	  if (__comp(__i, __first))
 8012428:	1d3b      	adds	r3, r7, #4
 801242a:	68fa      	ldr	r2, [r7, #12]
 801242c:	6979      	ldr	r1, [r7, #20]
 801242e:	4618      	mov	r0, r3
 8012430:	f7ff ffa3 	bl	801237a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 8012434:	4603      	mov	r3, r0
 8012436:	2b00      	cmp	r3, #0
 8012438:	d026      	beq.n	8012488 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x94>
		__val = _GLIBCXX_MOVE(*__i);
 801243a:	f107 0314 	add.w	r3, r7, #20
 801243e:	4618      	mov	r0, r3
 8012440:	f7ff ff8f 	bl	8012362 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8012444:	4603      	mov	r3, r0
 8012446:	4618      	mov	r0, r3
 8012448:	f7fb feae 	bl	800e1a8 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 801244c:	4603      	mov	r3, r0
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	613b      	str	r3, [r7, #16]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 8012452:	f107 0314 	add.w	r3, r7, #20
 8012456:	2101      	movs	r1, #1
 8012458:	4618      	mov	r0, r3
 801245a:	f7ff ff5a 	bl	8012312 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 801245e:	4603      	mov	r3, r0
 8012460:	461a      	mov	r2, r3
 8012462:	6979      	ldr	r1, [r7, #20]
 8012464:	68f8      	ldr	r0, [r7, #12]
 8012466:	f7ff ffad 	bl	80123c4 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
	      *__first = _GLIBCXX_MOVE(__val);
 801246a:	f107 0310 	add.w	r3, r7, #16
 801246e:	4618      	mov	r0, r3
 8012470:	f7fb fe9a 	bl	800e1a8 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8012474:	4603      	mov	r3, r0
 8012476:	681c      	ldr	r4, [r3, #0]
 8012478:	f107 030c 	add.w	r3, r7, #12
 801247c:	4618      	mov	r0, r3
 801247e:	f7ff ff70 	bl	8012362 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8012482:	4603      	mov	r3, r0
 8012484:	601c      	str	r4, [r3, #0]
 8012486:	e006      	b.n	8012496 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xa2>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 8012488:	4630      	mov	r0, r6
 801248a:	f7f2 f8f7 	bl	800467c <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	    std::__unguarded_linear_insert(__i,
 801248e:	4629      	mov	r1, r5
 8012490:	6978      	ldr	r0, [r7, #20]
 8012492:	f001 fff3 	bl	801447c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8012496:	f107 0314 	add.w	r3, r7, #20
 801249a:	4618      	mov	r0, r3
 801249c:	f7ff ff51 	bl	8012342 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 80124a0:	f107 0208 	add.w	r2, r7, #8
 80124a4:	f107 0314 	add.w	r3, r7, #20
 80124a8:	4611      	mov	r1, r2
 80124aa:	4618      	mov	r0, r3
 80124ac:	f7fb ffa7 	bl	800e3fe <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 80124b0:	4603      	mov	r3, r0
 80124b2:	f083 0301 	eor.w	r3, r3, #1
 80124b6:	b2db      	uxtb	r3, r3
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d1b5      	bne.n	8012428 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x34>
 80124bc:	e000      	b.n	80124c0 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xcc>
      if (__first == __last) return;
 80124be:	bf00      	nop
    }
 80124c0:	371c      	adds	r7, #28
 80124c2:	46bd      	mov	sp, r7
 80124c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080124c6 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 80124c6:	b5b0      	push	{r4, r5, r7, lr}
 80124c8:	b086      	sub	sp, #24
 80124ca:	af00      	add	r7, sp, #0
 80124cc:	60f8      	str	r0, [r7, #12]
 80124ce:	60b9      	str	r1, [r7, #8]
 80124d0:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	617b      	str	r3, [r7, #20]
 80124d6:	e00b      	b.n	80124f0 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x2a>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 80124d8:	4628      	mov	r0, r5
 80124da:	f7f2 f8cf 	bl	800467c <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	std::__unguarded_linear_insert(__i,
 80124de:	4621      	mov	r1, r4
 80124e0:	6978      	ldr	r0, [r7, #20]
 80124e2:	f001 ffcb 	bl	801447c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 80124e6:	f107 0314 	add.w	r3, r7, #20
 80124ea:	4618      	mov	r0, r3
 80124ec:	f7ff ff29 	bl	8012342 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 80124f0:	f107 0208 	add.w	r2, r7, #8
 80124f4:	f107 0314 	add.w	r3, r7, #20
 80124f8:	4611      	mov	r1, r2
 80124fa:	4618      	mov	r0, r3
 80124fc:	f7fb ff7f 	bl	800e3fe <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8012500:	4603      	mov	r3, r0
 8012502:	f083 0301 	eor.w	r3, r3, #1
 8012506:	b2db      	uxtb	r3, r3
 8012508:	2b00      	cmp	r3, #0
 801250a:	d1e5      	bne.n	80124d8 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x12>
    }
 801250c:	bf00      	nop
 801250e:	bf00      	nop
 8012510:	3718      	adds	r7, #24
 8012512:	46bd      	mov	sp, r7
 8012514:	bdb0      	pop	{r4, r5, r7, pc}

08012516 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8012516:	b480      	push	{r7}
 8012518:	b083      	sub	sp, #12
 801251a:	af00      	add	r7, sp, #0
 801251c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	4618      	mov	r0, r3
 8012522:	370c      	adds	r7, #12
 8012524:	46bd      	mov	sp, r7
 8012526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252a:	4770      	bx	lr

0801252c <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE_EC1ES4_>:
      _Iter_pred(_Predicate __pred)
 801252c:	b580      	push	{r7, lr}
 801252e:	b082      	sub	sp, #8
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
 8012534:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 8012536:	463b      	mov	r3, r7
 8012538:	4618      	mov	r0, r3
 801253a:	f7ff ffec 	bl	8012516 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	4618      	mov	r0, r3
 8012542:	3708      	adds	r7, #8
 8012544:	46bd      	mov	sp, r7
 8012546:	bd80      	pop	{r7, pc}

08012548 <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEfEUlbE_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>:
    };

  template<typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_negate<_Predicate>
    __negate(_Iter_pred<_Predicate> __pred)
 8012548:	b5b0      	push	{r4, r5, r7, lr}
 801254a:	b084      	sub	sp, #16
 801254c:	af00      	add	r7, sp, #0
 801254e:	7138      	strb	r0, [r7, #4]
    { return _Iter_negate<_Predicate>(_GLIBCXX_MOVE(__pred._M_pred)); }
 8012550:	1d3b      	adds	r3, r7, #4
 8012552:	4618      	mov	r0, r3
 8012554:	f7ff ffdf 	bl	8012516 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
 8012558:	f107 030c 	add.w	r3, r7, #12
 801255c:	4629      	mov	r1, r5
 801255e:	4618      	mov	r0, r3
 8012560:	f001 ffd7 	bl	8014512 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EC1ES4_>
 8012564:	bf00      	nop
 8012566:	4620      	mov	r0, r4
 8012568:	3710      	adds	r7, #16
 801256a:	46bd      	mov	sp, r7
 801256c:	bdb0      	pop	{r4, r5, r7, pc}

0801256e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>:
	operator()(_Iterator __it)
 801256e:	b580      	push	{r7, lr}
 8012570:	b082      	sub	sp, #8
 8012572:	af00      	add	r7, sp, #0
 8012574:	6078      	str	r0, [r7, #4]
 8012576:	6039      	str	r1, [r7, #0]
	{ return !bool(_M_pred(*__it)); }
 8012578:	687a      	ldr	r2, [r7, #4]
 801257a:	683b      	ldr	r3, [r7, #0]
 801257c:	781b      	ldrb	r3, [r3, #0]
 801257e:	4619      	mov	r1, r3
 8012580:	4610      	mov	r0, r2
 8012582:	f7f2 fc39 	bl	8004df8 <_ZZN3jlb10Controller15lateral_controlEfENKUlbE_clEb>
 8012586:	4603      	mov	r3, r0
 8012588:	f083 0301 	eor.w	r3, r3, #1
 801258c:	b2db      	uxtb	r3, r3
 801258e:	4618      	mov	r0, r3
 8012590:	3708      	adds	r7, #8
 8012592:	46bd      	mov	sp, r7
 8012594:	bd80      	pop	{r7, pc}

08012596 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8012596:	b580      	push	{r7, lr}
 8012598:	b086      	sub	sp, #24
 801259a:	af00      	add	r7, sp, #0
 801259c:	60f8      	str	r0, [r7, #12]
 801259e:	60b9      	str	r1, [r7, #8]
 80125a0:	713a      	strb	r2, [r7, #4]
 80125a2:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 80125a4:	68ba      	ldr	r2, [r7, #8]
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	1ad3      	subs	r3, r2, r3
 80125aa:	109b      	asrs	r3, r3, #2
 80125ac:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 80125ae:	e036      	b.n	801261e <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x88>
	  if (__pred(__first))
 80125b0:	1d3b      	adds	r3, r7, #4
 80125b2:	68f9      	ldr	r1, [r7, #12]
 80125b4:	4618      	mov	r0, r3
 80125b6:	f7ff ffda 	bl	801256e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 80125ba:	4603      	mov	r3, r0
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d001      	beq.n	80125c4 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x2e>
	    return __first;
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	e063      	b.n	801268c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	3301      	adds	r3, #1
 80125c8:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 80125ca:	1d3b      	adds	r3, r7, #4
 80125cc:	68f9      	ldr	r1, [r7, #12]
 80125ce:	4618      	mov	r0, r3
 80125d0:	f7ff ffcd 	bl	801256e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 80125d4:	4603      	mov	r3, r0
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d001      	beq.n	80125de <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x48>
	    return __first;
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	e056      	b.n	801268c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	3301      	adds	r3, #1
 80125e2:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 80125e4:	1d3b      	adds	r3, r7, #4
 80125e6:	68f9      	ldr	r1, [r7, #12]
 80125e8:	4618      	mov	r0, r3
 80125ea:	f7ff ffc0 	bl	801256e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 80125ee:	4603      	mov	r3, r0
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d001      	beq.n	80125f8 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x62>
	    return __first;
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	e049      	b.n	801268c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	3301      	adds	r3, #1
 80125fc:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 80125fe:	1d3b      	adds	r3, r7, #4
 8012600:	68f9      	ldr	r1, [r7, #12]
 8012602:	4618      	mov	r0, r3
 8012604:	f7ff ffb3 	bl	801256e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 8012608:	4603      	mov	r3, r0
 801260a:	2b00      	cmp	r3, #0
 801260c:	d001      	beq.n	8012612 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x7c>
	    return __first;
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	e03c      	b.n	801268c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	3301      	adds	r3, #1
 8012616:	60fb      	str	r3, [r7, #12]
      for (; __trip_count > 0; --__trip_count)
 8012618:	697b      	ldr	r3, [r7, #20]
 801261a:	3b01      	subs	r3, #1
 801261c:	617b      	str	r3, [r7, #20]
 801261e:	697b      	ldr	r3, [r7, #20]
 8012620:	2b00      	cmp	r3, #0
 8012622:	dcc5      	bgt.n	80125b0 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x1a>
      switch (__last - __first)
 8012624:	68ba      	ldr	r2, [r7, #8]
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	1ad3      	subs	r3, r2, r3
 801262a:	2b03      	cmp	r3, #3
 801262c:	d006      	beq.n	801263c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xa6>
 801262e:	2b03      	cmp	r3, #3
 8012630:	dc2b      	bgt.n	801268a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
 8012632:	2b01      	cmp	r3, #1
 8012634:	d01c      	beq.n	8012670 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xda>
 8012636:	2b02      	cmp	r3, #2
 8012638:	d00d      	beq.n	8012656 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xc0>
 801263a:	e026      	b.n	801268a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
	  if (__pred(__first))
 801263c:	1d3b      	adds	r3, r7, #4
 801263e:	68f9      	ldr	r1, [r7, #12]
 8012640:	4618      	mov	r0, r3
 8012642:	f7ff ff94 	bl	801256e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 8012646:	4603      	mov	r3, r0
 8012648:	2b00      	cmp	r3, #0
 801264a:	d001      	beq.n	8012650 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xba>
	    return __first;
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	e01d      	b.n	801268c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	3301      	adds	r3, #1
 8012654:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 8012656:	1d3b      	adds	r3, r7, #4
 8012658:	68f9      	ldr	r1, [r7, #12]
 801265a:	4618      	mov	r0, r3
 801265c:	f7ff ff87 	bl	801256e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 8012660:	4603      	mov	r3, r0
 8012662:	2b00      	cmp	r3, #0
 8012664:	d001      	beq.n	801266a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xd4>
	    return __first;
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	e010      	b.n	801268c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	3301      	adds	r3, #1
 801266e:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 8012670:	1d3b      	adds	r3, r7, #4
 8012672:	68f9      	ldr	r1, [r7, #12]
 8012674:	4618      	mov	r0, r3
 8012676:	f7ff ff7a 	bl	801256e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 801267a:	4603      	mov	r3, r0
 801267c:	2b00      	cmp	r3, #0
 801267e:	d001      	beq.n	8012684 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xee>
	    return __first;
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	e003      	b.n	801268c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	3301      	adds	r3, #1
 8012688:	60fb      	str	r3, [r7, #12]
	  return __last;
 801268a:	68bb      	ldr	r3, [r7, #8]
    }
 801268c:	4618      	mov	r0, r3
 801268e:	3718      	adds	r7, #24
 8012690:	46bd      	mov	sp, r7
 8012692:	bd80      	pop	{r7, pc}

08012694 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8012694:	b480      	push	{r7}
 8012696:	b083      	sub	sp, #12
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	4618      	mov	r0, r3
 80126a0:	370c      	adds	r7, #12
 80126a2:	46bd      	mov	sp, r7
 80126a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a8:	4770      	bx	lr

080126aa <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE0_EC1ES4_>:
      _Iter_pred(_Predicate __pred)
 80126aa:	b580      	push	{r7, lr}
 80126ac:	b082      	sub	sp, #8
 80126ae:	af00      	add	r7, sp, #0
 80126b0:	6078      	str	r0, [r7, #4]
 80126b2:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 80126b4:	463b      	mov	r3, r7
 80126b6:	4618      	mov	r0, r3
 80126b8:	f7ff ffec 	bl	8012694 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	4618      	mov	r0, r3
 80126c0:	3708      	adds	r7, #8
 80126c2:	46bd      	mov	sp, r7
 80126c4:	bd80      	pop	{r7, pc}

080126c6 <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>:
    __negate(_Iter_pred<_Predicate> __pred)
 80126c6:	b5b0      	push	{r4, r5, r7, lr}
 80126c8:	b084      	sub	sp, #16
 80126ca:	af00      	add	r7, sp, #0
 80126cc:	7138      	strb	r0, [r7, #4]
    { return _Iter_negate<_Predicate>(_GLIBCXX_MOVE(__pred._M_pred)); }
 80126ce:	1d3b      	adds	r3, r7, #4
 80126d0:	4618      	mov	r0, r3
 80126d2:	f7ff ffdf 	bl	8012694 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
 80126d6:	f107 030c 	add.w	r3, r7, #12
 80126da:	4629      	mov	r1, r5
 80126dc:	4618      	mov	r0, r3
 80126de:	f001 ff26 	bl	801452e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EC1ES4_>
 80126e2:	bf00      	nop
 80126e4:	4620      	mov	r0, r4
 80126e6:	3710      	adds	r7, #16
 80126e8:	46bd      	mov	sp, r7
 80126ea:	bdb0      	pop	{r4, r5, r7, pc}

080126ec <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>:
	operator()(_Iterator __it)
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b082      	sub	sp, #8
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	6078      	str	r0, [r7, #4]
 80126f4:	6039      	str	r1, [r7, #0]
	{ return !bool(_M_pred(*__it)); }
 80126f6:	687a      	ldr	r2, [r7, #4]
 80126f8:	683b      	ldr	r3, [r7, #0]
 80126fa:	781b      	ldrb	r3, [r3, #0]
 80126fc:	4619      	mov	r1, r3
 80126fe:	4610      	mov	r0, r2
 8012700:	f7f2 fb87 	bl	8004e12 <_ZZN3jlb10Controller15lateral_controlEfENKUlbE0_clEb>
 8012704:	4603      	mov	r3, r0
 8012706:	f083 0301 	eor.w	r3, r3, #1
 801270a:	b2db      	uxtb	r3, r3
 801270c:	4618      	mov	r0, r3
 801270e:	3708      	adds	r7, #8
 8012710:	46bd      	mov	sp, r7
 8012712:	bd80      	pop	{r7, pc}

08012714 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8012714:	b580      	push	{r7, lr}
 8012716:	b086      	sub	sp, #24
 8012718:	af00      	add	r7, sp, #0
 801271a:	60f8      	str	r0, [r7, #12]
 801271c:	60b9      	str	r1, [r7, #8]
 801271e:	713a      	strb	r2, [r7, #4]
 8012720:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 8012722:	68ba      	ldr	r2, [r7, #8]
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	1ad3      	subs	r3, r2, r3
 8012728:	109b      	asrs	r3, r3, #2
 801272a:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 801272c:	e036      	b.n	801279c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x88>
	  if (__pred(__first))
 801272e:	1d3b      	adds	r3, r7, #4
 8012730:	68f9      	ldr	r1, [r7, #12]
 8012732:	4618      	mov	r0, r3
 8012734:	f7ff ffda 	bl	80126ec <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 8012738:	4603      	mov	r3, r0
 801273a:	2b00      	cmp	r3, #0
 801273c:	d001      	beq.n	8012742 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x2e>
	    return __first;
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	e063      	b.n	801280a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	3301      	adds	r3, #1
 8012746:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 8012748:	1d3b      	adds	r3, r7, #4
 801274a:	68f9      	ldr	r1, [r7, #12]
 801274c:	4618      	mov	r0, r3
 801274e:	f7ff ffcd 	bl	80126ec <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 8012752:	4603      	mov	r3, r0
 8012754:	2b00      	cmp	r3, #0
 8012756:	d001      	beq.n	801275c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x48>
	    return __first;
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	e056      	b.n	801280a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	3301      	adds	r3, #1
 8012760:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 8012762:	1d3b      	adds	r3, r7, #4
 8012764:	68f9      	ldr	r1, [r7, #12]
 8012766:	4618      	mov	r0, r3
 8012768:	f7ff ffc0 	bl	80126ec <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 801276c:	4603      	mov	r3, r0
 801276e:	2b00      	cmp	r3, #0
 8012770:	d001      	beq.n	8012776 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x62>
	    return __first;
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	e049      	b.n	801280a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	3301      	adds	r3, #1
 801277a:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 801277c:	1d3b      	adds	r3, r7, #4
 801277e:	68f9      	ldr	r1, [r7, #12]
 8012780:	4618      	mov	r0, r3
 8012782:	f7ff ffb3 	bl	80126ec <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 8012786:	4603      	mov	r3, r0
 8012788:	2b00      	cmp	r3, #0
 801278a:	d001      	beq.n	8012790 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x7c>
	    return __first;
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	e03c      	b.n	801280a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	3301      	adds	r3, #1
 8012794:	60fb      	str	r3, [r7, #12]
      for (; __trip_count > 0; --__trip_count)
 8012796:	697b      	ldr	r3, [r7, #20]
 8012798:	3b01      	subs	r3, #1
 801279a:	617b      	str	r3, [r7, #20]
 801279c:	697b      	ldr	r3, [r7, #20]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	dcc5      	bgt.n	801272e <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x1a>
      switch (__last - __first)
 80127a2:	68ba      	ldr	r2, [r7, #8]
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	1ad3      	subs	r3, r2, r3
 80127a8:	2b03      	cmp	r3, #3
 80127aa:	d006      	beq.n	80127ba <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xa6>
 80127ac:	2b03      	cmp	r3, #3
 80127ae:	dc2b      	bgt.n	8012808 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
 80127b0:	2b01      	cmp	r3, #1
 80127b2:	d01c      	beq.n	80127ee <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xda>
 80127b4:	2b02      	cmp	r3, #2
 80127b6:	d00d      	beq.n	80127d4 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xc0>
 80127b8:	e026      	b.n	8012808 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
	  if (__pred(__first))
 80127ba:	1d3b      	adds	r3, r7, #4
 80127bc:	68f9      	ldr	r1, [r7, #12]
 80127be:	4618      	mov	r0, r3
 80127c0:	f7ff ff94 	bl	80126ec <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 80127c4:	4603      	mov	r3, r0
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d001      	beq.n	80127ce <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xba>
	    return __first;
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	e01d      	b.n	801280a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	3301      	adds	r3, #1
 80127d2:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 80127d4:	1d3b      	adds	r3, r7, #4
 80127d6:	68f9      	ldr	r1, [r7, #12]
 80127d8:	4618      	mov	r0, r3
 80127da:	f7ff ff87 	bl	80126ec <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 80127de:	4603      	mov	r3, r0
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d001      	beq.n	80127e8 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xd4>
	    return __first;
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	e010      	b.n	801280a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	3301      	adds	r3, #1
 80127ec:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 80127ee:	1d3b      	adds	r3, r7, #4
 80127f0:	68f9      	ldr	r1, [r7, #12]
 80127f2:	4618      	mov	r0, r3
 80127f4:	f7ff ff7a 	bl	80126ec <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 80127f8:	4603      	mov	r3, r0
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d001      	beq.n	8012802 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xee>
	    return __first;
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	e003      	b.n	801280a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	3301      	adds	r3, #1
 8012806:	60fb      	str	r3, [r7, #12]
	  return __last;
 8012808:	68bb      	ldr	r3, [r7, #8]
    }
 801280a:	4618      	mov	r0, r3
 801280c:	3718      	adds	r7, #24
 801280e:	46bd      	mov	sp, r7
 8012810:	bd80      	pop	{r7, pc}

08012812 <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8012812:	b580      	push	{r7, lr}
 8012814:	b082      	sub	sp, #8
 8012816:	af00      	add	r7, sp, #0
 8012818:	6078      	str	r0, [r7, #4]
 801281a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 801281c:	6839      	ldr	r1, [r7, #0]
 801281e:	6878      	ldr	r0, [r7, #4]
 8012820:	f001 fe93 	bl	801454a <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	4618      	mov	r0, r3
 8012828:	3708      	adds	r7, #8
 801282a:	46bd      	mov	sp, r7
 801282c:	bd80      	pop	{r7, pc}

0801282e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 801282e:	b580      	push	{r7, lr}
 8012830:	b084      	sub	sp, #16
 8012832:	af00      	add	r7, sp, #0
 8012834:	60f8      	str	r0, [r7, #12]
 8012836:	60b9      	str	r1, [r7, #8]
 8012838:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 801283a:	687a      	ldr	r2, [r7, #4]
 801283c:	68b9      	ldr	r1, [r7, #8]
 801283e:	68f8      	ldr	r0, [r7, #12]
 8012840:	f001 fe8f 	bl	8014562 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8012844:	4603      	mov	r3, r0
 8012846:	4618      	mov	r0, r3
 8012848:	3710      	adds	r7, #16
 801284a:	46bd      	mov	sp, r7
 801284c:	bd80      	pop	{r7, pc}

0801284e <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 801284e:	b580      	push	{r7, lr}
 8012850:	b082      	sub	sp, #8
 8012852:	af00      	add	r7, sp, #0
 8012854:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 8012856:	1d3b      	adds	r3, r7, #4
 8012858:	4618      	mov	r0, r3
 801285a:	f001 fe9a 	bl	8014592 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 801285e:	4603      	mov	r3, r0
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	4618      	mov	r0, r3
 8012864:	3708      	adds	r7, #8
 8012866:	46bd      	mov	sp, r7
 8012868:	bd80      	pop	{r7, pc}

0801286a <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 801286a:	b580      	push	{r7, lr}
 801286c:	b082      	sub	sp, #8
 801286e:	af00      	add	r7, sp, #0
 8012870:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8012872:	1d3b      	adds	r3, r7, #4
 8012874:	4618      	mov	r0, r3
 8012876:	f7f1 f872 	bl	800395e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 801287a:	4603      	mov	r3, r0
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	4618      	mov	r0, r3
 8012880:	3708      	adds	r7, #8
 8012882:	46bd      	mov	sp, r7
 8012884:	bd80      	pop	{r7, pc}

08012886 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8012886:	b580      	push	{r7, lr}
 8012888:	b084      	sub	sp, #16
 801288a:	af00      	add	r7, sp, #0
 801288c:	60f8      	str	r0, [r7, #12]
 801288e:	60b9      	str	r1, [r7, #8]
 8012890:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8012892:	687a      	ldr	r2, [r7, #4]
 8012894:	68b9      	ldr	r1, [r7, #8]
 8012896:	68f8      	ldr	r0, [r7, #12]
 8012898:	f001 fe86 	bl	80145a8 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 801289c:	4603      	mov	r3, r0
 801289e:	4618      	mov	r0, r3
 80128a0:	3710      	adds	r7, #16
 80128a2:	46bd      	mov	sp, r7
 80128a4:	bd80      	pop	{r7, pc}

080128a6 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 80128a6:	b580      	push	{r7, lr}
 80128a8:	b082      	sub	sp, #8
 80128aa:	af00      	add	r7, sp, #0
 80128ac:	6078      	str	r0, [r7, #4]
 80128ae:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 80128b0:	6878      	ldr	r0, [r7, #4]
 80128b2:	f7ff ffda 	bl	801286a <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80128b6:	4602      	mov	r2, r0
 80128b8:	683b      	ldr	r3, [r7, #0]
 80128ba:	1a9b      	subs	r3, r3, r2
 80128bc:	109b      	asrs	r3, r3, #2
 80128be:	461a      	mov	r2, r3
 80128c0:	1d3b      	adds	r3, r7, #4
 80128c2:	4611      	mov	r1, r2
 80128c4:	4618      	mov	r0, r3
 80128c6:	f7ff fd24 	bl	8012312 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 80128ca:	4603      	mov	r3, r0
 80128cc:	4618      	mov	r0, r3
 80128ce:	3708      	adds	r7, #8
 80128d0:	46bd      	mov	sp, r7
 80128d2:	bd80      	pop	{r7, pc}

080128d4 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b082      	sub	sp, #8
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
 80128dc:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80128de:	e00f      	b.n	8012900 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_+0x2c>
	    std::_Destroy(std::__addressof(*__first));
 80128e0:	1d3b      	adds	r3, r7, #4
 80128e2:	4618      	mov	r0, r3
 80128e4:	f7ff fd3d 	bl	8012362 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 80128e8:	4603      	mov	r3, r0
 80128ea:	4618      	mov	r0, r3
 80128ec:	f7f1 f8e6 	bl	8003abc <_ZSt11__addressofIfEPT_RS0_>
 80128f0:	4603      	mov	r3, r0
 80128f2:	4618      	mov	r0, r3
 80128f4:	f7f1 f8ed 	bl	8003ad2 <_ZSt8_DestroyIfEvPT_>
	  for (; __first != __last; ++__first)
 80128f8:	1d3b      	adds	r3, r7, #4
 80128fa:	4618      	mov	r0, r3
 80128fc:	f7ff fd21 	bl	8012342 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 8012900:	463a      	mov	r2, r7
 8012902:	1d3b      	adds	r3, r7, #4
 8012904:	4611      	mov	r1, r2
 8012906:	4618      	mov	r0, r3
 8012908:	f7fb fd79 	bl	800e3fe <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 801290c:	4603      	mov	r3, r0
 801290e:	f083 0301 	eor.w	r3, r3, #1
 8012912:	b2db      	uxtb	r3, r3
 8012914:	2b00      	cmp	r3, #0
 8012916:	d1e3      	bne.n	80128e0 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_+0xc>
	}
 8012918:	bf00      	nop
 801291a:	bf00      	nop
 801291c:	3708      	adds	r7, #8
 801291e:	46bd      	mov	sp, r7
 8012920:	bd80      	pop	{r7, pc}

08012922 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8012922:	b480      	push	{r7}
 8012924:	b083      	sub	sp, #12
 8012926:	af00      	add	r7, sp, #0
 8012928:	6078      	str	r0, [r7, #4]
 801292a:	6039      	str	r1, [r7, #0]
 801292c:	bf00      	nop
 801292e:	370c      	adds	r7, #12
 8012930:	46bd      	mov	sp, r7
 8012932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012936:	4770      	bx	lr

08012938 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8012938:	b580      	push	{r7, lr}
 801293a:	b084      	sub	sp, #16
 801293c:	af00      	add	r7, sp, #0
 801293e:	60f8      	str	r0, [r7, #12]
 8012940:	60b9      	str	r1, [r7, #8]
 8012942:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8012944:	f7f0 f8e2 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8012948:	4603      	mov	r3, r0
 801294a:	2b00      	cmp	r3, #0
 801294c:	d006      	beq.n	801295c <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_+0x24>
	  __copy_m(__first, __last, __result);
 801294e:	687a      	ldr	r2, [r7, #4]
 8012950:	68b9      	ldr	r1, [r7, #8]
 8012952:	68f8      	ldr	r0, [r7, #12]
 8012954:	f001 fe45 	bl	80145e2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_>
 8012958:	4603      	mov	r3, r0
 801295a:	e006      	b.n	801296a <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 801295c:	687a      	ldr	r2, [r7, #4]
 801295e:	68b9      	ldr	r1, [r7, #8]
 8012960:	68f8      	ldr	r0, [r7, #12]
 8012962:	f001 fe61 	bl	8014628 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8012966:	4603      	mov	r3, r0
 8012968:	bf00      	nop
    }
 801296a:	4618      	mov	r0, r3
 801296c:	3710      	adds	r7, #16
 801296e:	46bd      	mov	sp, r7
 8012970:	bd80      	pop	{r7, pc}

08012972 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8012972:	b580      	push	{r7, lr}
 8012974:	b084      	sub	sp, #16
 8012976:	af00      	add	r7, sp, #0
 8012978:	60f8      	str	r0, [r7, #12]
 801297a:	60b9      	str	r1, [r7, #8]
 801297c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 801297e:	687a      	ldr	r2, [r7, #4]
 8012980:	68b9      	ldr	r1, [r7, #8]
 8012982:	68f8      	ldr	r0, [r7, #12]
 8012984:	f7fa fb43 	bl	800d00e <_ZSt4copyIPfS0_ET0_T_S2_S1_>
 8012988:	4603      	mov	r3, r0
 801298a:	4618      	mov	r0, r3
 801298c:	3710      	adds	r7, #16
 801298e:	46bd      	mov	sp, r7
 8012990:	bd80      	pop	{r7, pc}

08012992 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8012992:	b580      	push	{r7, lr}
 8012994:	b084      	sub	sp, #16
 8012996:	af00      	add	r7, sp, #0
 8012998:	60f8      	str	r0, [r7, #12]
 801299a:	60b9      	str	r1, [r7, #8]
 801299c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 801299e:	687a      	ldr	r2, [r7, #4]
 80129a0:	68b9      	ldr	r1, [r7, #8]
 80129a2:	68f8      	ldr	r0, [r7, #12]
 80129a4:	f001 fe5d 	bl	8014662 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>
 80129a8:	4603      	mov	r3, r0
 80129aa:	4618      	mov	r0, r3
 80129ac:	3710      	adds	r7, #16
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd80      	pop	{r7, pc}

080129b2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80129b2:	b580      	push	{r7, lr}
 80129b4:	b082      	sub	sp, #8
 80129b6:	af00      	add	r7, sp, #0
 80129b8:	6078      	str	r0, [r7, #4]
 80129ba:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80129bc:	e009      	b.n	80129d2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 80129be:	6878      	ldr	r0, [r7, #4]
 80129c0:	f001 fb97 	bl	80140f2 <_ZSt11__addressofIcEPT_RS0_>
 80129c4:	4603      	mov	r3, r0
 80129c6:	4618      	mov	r0, r3
 80129c8:	f001 fe63 	bl	8014692 <_ZSt8_DestroyIcEvPT_>
	  for (; __first != __last; ++__first)
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	3301      	adds	r3, #1
 80129d0:	607b      	str	r3, [r7, #4]
 80129d2:	687a      	ldr	r2, [r7, #4]
 80129d4:	683b      	ldr	r3, [r7, #0]
 80129d6:	429a      	cmp	r2, r3
 80129d8:	d1f1      	bne.n	80129be <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_+0xc>
	}
 80129da:	bf00      	nop
 80129dc:	bf00      	nop
 80129de:	3708      	adds	r7, #8
 80129e0:	46bd      	mov	sp, r7
 80129e2:	bd80      	pop	{r7, pc}

080129e4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80129e4:	b480      	push	{r7}
 80129e6:	b083      	sub	sp, #12
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	6078      	str	r0, [r7, #4]
 80129ec:	6039      	str	r1, [r7, #0]
 80129ee:	bf00      	nop
 80129f0:	370c      	adds	r7, #12
 80129f2:	46bd      	mov	sp, r7
 80129f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f8:	4770      	bx	lr

080129fa <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80129fa:	b580      	push	{r7, lr}
 80129fc:	b082      	sub	sp, #8
 80129fe:	af00      	add	r7, sp, #0
 8012a00:	6078      	str	r0, [r7, #4]
 8012a02:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8012a04:	e009      	b.n	8012a1a <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8012a06:	6878      	ldr	r0, [r7, #4]
 8012a08:	f001 fe60 	bl	80146cc <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	4618      	mov	r0, r3
 8012a10:	f001 fe67 	bl	80146e2 <_ZSt8_DestroyIN3jlb4EdgeEEvPT_>
	  for (; __first != __last; ++__first)
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	3318      	adds	r3, #24
 8012a18:	607b      	str	r3, [r7, #4]
 8012a1a:	687a      	ldr	r2, [r7, #4]
 8012a1c:	683b      	ldr	r3, [r7, #0]
 8012a1e:	429a      	cmp	r2, r3
 8012a20:	d1f1      	bne.n	8012a06 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_+0xc>
	}
 8012a22:	bf00      	nop
 8012a24:	bf00      	nop
 8012a26:	3708      	adds	r7, #8
 8012a28:	46bd      	mov	sp, r7
 8012a2a:	bd80      	pop	{r7, pc}

08012a2c <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1EOS2_>:
	_Vector_impl(_Vector_impl&& __x) noexcept
 8012a2c:	b590      	push	{r4, r7, lr}
 8012a2e:	b083      	sub	sp, #12
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	6078      	str	r0, [r7, #4]
 8012a34:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 8012a36:	6838      	ldr	r0, [r7, #0]
 8012a38:	f001 fe5e 	bl	80146f8 <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 8012a3c:	4603      	mov	r3, r0
 8012a3e:	4619      	mov	r1, r3
 8012a40:	6878      	ldr	r0, [r7, #4]
 8012a42:	f012 ff39 	bl	80258b8 <_ZNSaIcEC1ERKS_>
 8012a46:	687c      	ldr	r4, [r7, #4]
 8012a48:	6838      	ldr	r0, [r7, #0]
 8012a4a:	f001 fe55 	bl	80146f8 <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 8012a4e:	4603      	mov	r3, r0
 8012a50:	4619      	mov	r1, r3
 8012a52:	4620      	mov	r0, r4
 8012a54:	f001 fe5b 	bl	801470e <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1EOS2_>
	{ }
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	370c      	adds	r7, #12
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	bd90      	pop	{r4, r7, pc}

08012a62 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8012a62:	b590      	push	{r4, r7, lr}
 8012a64:	b087      	sub	sp, #28
 8012a66:	af00      	add	r7, sp, #0
 8012a68:	60f8      	str	r0, [r7, #12]
 8012a6a:	60b9      	str	r1, [r7, #8]
 8012a6c:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8012a6e:	68f8      	ldr	r0, [r7, #12]
 8012a70:	f001 fe70 	bl	8014754 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 8012a74:	4604      	mov	r4, r0
 8012a76:	68f8      	ldr	r0, [r7, #12]
 8012a78:	f7fa ffae 	bl	800d9d8 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	1ae2      	subs	r2, r4, r3
 8012a80:	68bb      	ldr	r3, [r7, #8]
 8012a82:	429a      	cmp	r2, r3
 8012a84:	bf34      	ite	cc
 8012a86:	2301      	movcc	r3, #1
 8012a88:	2300      	movcs	r3, #0
 8012a8a:	b2db      	uxtb	r3, r3
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d002      	beq.n	8012a96 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	f012 ffd1 	bl	8025a38 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8012a96:	68f8      	ldr	r0, [r7, #12]
 8012a98:	f7fa ff9e 	bl	800d9d8 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 8012a9c:	4604      	mov	r4, r0
 8012a9e:	68f8      	ldr	r0, [r7, #12]
 8012aa0:	f7fa ff9a 	bl	800d9d8 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 8012aa4:	4603      	mov	r3, r0
 8012aa6:	613b      	str	r3, [r7, #16]
 8012aa8:	f107 0208 	add.w	r2, r7, #8
 8012aac:	f107 0310 	add.w	r3, r7, #16
 8012ab0:	4611      	mov	r1, r2
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	f7f0 ffa3 	bl	80039fe <_ZSt3maxIjERKT_S2_S2_>
 8012ab8:	4603      	mov	r3, r0
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	4423      	add	r3, r4
 8012abe:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8012ac0:	68f8      	ldr	r0, [r7, #12]
 8012ac2:	f7fa ff89 	bl	800d9d8 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 8012ac6:	4602      	mov	r2, r0
 8012ac8:	697b      	ldr	r3, [r7, #20]
 8012aca:	4293      	cmp	r3, r2
 8012acc:	d306      	bcc.n	8012adc <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x7a>
 8012ace:	68f8      	ldr	r0, [r7, #12]
 8012ad0:	f001 fe40 	bl	8014754 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 8012ad4:	4602      	mov	r2, r0
 8012ad6:	697b      	ldr	r3, [r7, #20]
 8012ad8:	4293      	cmp	r3, r2
 8012ada:	d904      	bls.n	8012ae6 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x84>
 8012adc:	68f8      	ldr	r0, [r7, #12]
 8012ade:	f001 fe39 	bl	8014754 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	e000      	b.n	8012ae8 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x86>
 8012ae6:	697b      	ldr	r3, [r7, #20]
      }
 8012ae8:	4618      	mov	r0, r3
 8012aea:	371c      	adds	r7, #28
 8012aec:	46bd      	mov	sp, r7
 8012aee:	bd90      	pop	{r4, r7, pc}

08012af0 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b082      	sub	sp, #8
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
 8012af8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8012afa:	683b      	ldr	r3, [r7, #0]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d006      	beq.n	8012b0e <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj+0x1e>
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	6839      	ldr	r1, [r7, #0]
 8012b04:	4618      	mov	r0, r3
 8012b06:	f001 fe36 	bl	8014776 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j>
 8012b0a:	4603      	mov	r3, r0
 8012b0c:	e000      	b.n	8012b10 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj+0x20>
 8012b0e:	2300      	movs	r3, #0
      }
 8012b10:	4618      	mov	r0, r3
 8012b12:	3708      	adds	r7, #8
 8012b14:	46bd      	mov	sp, r7
 8012b16:	bd80      	pop	{r7, pc}

08012b18 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8012b18:	b590      	push	{r4, r7, lr}
 8012b1a:	b087      	sub	sp, #28
 8012b1c:	af02      	add	r7, sp, #8
 8012b1e:	60f8      	str	r0, [r7, #12]
 8012b20:	60b9      	str	r1, [r7, #8]
 8012b22:	607a      	str	r2, [r7, #4]
 8012b24:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8012b26:	f88d 4000 	strb.w	r4, [sp]
 8012b2a:	683b      	ldr	r3, [r7, #0]
 8012b2c:	687a      	ldr	r2, [r7, #4]
 8012b2e:	68b9      	ldr	r1, [r7, #8]
 8012b30:	68f8      	ldr	r0, [r7, #12]
 8012b32:	f001 fe43 	bl	80147bc <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8012b36:	4603      	mov	r3, r0
      }
 8012b38:	4618      	mov	r0, r3
 8012b3a:	3714      	adds	r7, #20
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	bd90      	pop	{r4, r7, pc}

08012b40 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b082      	sub	sp, #8
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
 8012b48:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8012b4a:	6838      	ldr	r0, [r7, #0]
 8012b4c:	f001 fe48 	bl	80147e0 <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>
	}
 8012b50:	bf00      	nop
 8012b52:	3708      	adds	r7, #8
 8012b54:	46bd      	mov	sp, r7
 8012b56:	bd80      	pop	{r7, pc}

08012b58 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8012b58:	b580      	push	{r7, lr}
 8012b5a:	b084      	sub	sp, #16
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
 8012b60:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	6819      	ldr	r1, [r3, #0]
 8012b66:	683a      	ldr	r2, [r7, #0]
 8012b68:	4613      	mov	r3, r2
 8012b6a:	005b      	lsls	r3, r3, #1
 8012b6c:	4413      	add	r3, r2
 8012b6e:	00db      	lsls	r3, r3, #3
 8012b70:	425b      	negs	r3, r3
 8012b72:	440b      	add	r3, r1
 8012b74:	60fb      	str	r3, [r7, #12]
 8012b76:	f107 020c 	add.w	r2, r7, #12
 8012b7a:	f107 0308 	add.w	r3, r7, #8
 8012b7e:	4611      	mov	r1, r2
 8012b80:	4618      	mov	r0, r3
 8012b82:	f7fc fd98 	bl	800f6b6 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8012b86:	68bb      	ldr	r3, [r7, #8]
 8012b88:	4618      	mov	r0, r3
 8012b8a:	3710      	adds	r7, #16
 8012b8c:	46bd      	mov	sp, r7
 8012b8e:	bd80      	pop	{r7, pc}

08012b90 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8012b90:	b480      	push	{r7}
 8012b92:	b083      	sub	sp, #12
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	370c      	adds	r7, #12
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba6:	4770      	bx	lr

08012ba8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	b082      	sub	sp, #8
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	6078      	str	r0, [r7, #4]
 8012bb0:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8012bb2:	e009      	b.n	8012bc8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8012bb4:	6878      	ldr	r0, [r7, #4]
 8012bb6:	f001 fe30 	bl	801481a <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>
 8012bba:	4603      	mov	r3, r0
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	f001 fe37 	bl	8014830 <_ZSt8_DestroyIN3jlb4NodeEEvPT_>
	  for (; __first != __last; ++__first)
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	3318      	adds	r3, #24
 8012bc6:	607b      	str	r3, [r7, #4]
 8012bc8:	687a      	ldr	r2, [r7, #4]
 8012bca:	683b      	ldr	r3, [r7, #0]
 8012bcc:	429a      	cmp	r2, r3
 8012bce:	d1f1      	bne.n	8012bb4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_+0xc>
	}
 8012bd0:	bf00      	nop
 8012bd2:	bf00      	nop
 8012bd4:	3708      	adds	r7, #8
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	bd80      	pop	{r7, pc}

08012bda <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1ERKS3_>:
      vector(const vector& __x)
 8012bda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012bdc:	b085      	sub	sp, #20
 8012bde:	af00      	add	r7, sp, #0
 8012be0:	6078      	str	r0, [r7, #4]
 8012be2:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8012be4:	687c      	ldr	r4, [r7, #4]
 8012be6:	6838      	ldr	r0, [r7, #0]
 8012be8:	f7fa fef6 	bl	800d9d8 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 8012bec:	4605      	mov	r5, r0
 8012bee:	683b      	ldr	r3, [r7, #0]
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	f001 fe43 	bl	801487c <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 8012bf6:	4602      	mov	r2, r0
 8012bf8:	f107 030c 	add.w	r3, r7, #12
 8012bfc:	4611      	mov	r1, r2
 8012bfe:	4618      	mov	r0, r3
 8012c00:	f001 fe2e 	bl	8014860 <_ZN9__gnu_cxx14__alloc_traitsISaIN3jlb4EdgeEES2_E17_S_select_on_copyERKS3_>
 8012c04:	f107 030c 	add.w	r3, r7, #12
 8012c08:	461a      	mov	r2, r3
 8012c0a:	4629      	mov	r1, r5
 8012c0c:	4620      	mov	r0, r4
 8012c0e:	f001 fe40 	bl	8014892 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1EjRKS2_>
 8012c12:	f107 030c 	add.w	r3, r7, #12
 8012c16:	4618      	mov	r0, r3
 8012c18:	f7fa fb71 	bl	800d2fe <_ZNSaIN3jlb4EdgeEED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8012c1c:	6838      	ldr	r0, [r7, #0]
 8012c1e:	f001 fe4c 	bl	80148ba <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>
 8012c22:	4605      	mov	r5, r0
 8012c24:	6838      	ldr	r0, [r7, #0]
 8012c26:	f001 fe58 	bl	80148da <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 8012c2a:	4606      	mov	r6, r0
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	4618      	mov	r0, r3
 8012c34:	f7fb fdec 	bl	800e810 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 8012c38:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8012c3a:	4622      	mov	r2, r4
 8012c3c:	4631      	mov	r1, r6
 8012c3e:	4628      	mov	r0, r5
 8012c40:	f001 fe5c 	bl	80148fc <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
 8012c44:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	605a      	str	r2, [r3, #4]
      }
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	3714      	adds	r7, #20
 8012c50:	46bd      	mov	sp, r7
 8012c52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012c54 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8012c54:	b590      	push	{r4, r7, lr}
 8012c56:	b087      	sub	sp, #28
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	60f8      	str	r0, [r7, #12]
 8012c5c:	60b9      	str	r1, [r7, #8]
 8012c5e:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8012c60:	68f8      	ldr	r0, [r7, #12]
 8012c62:	f001 fe5c 	bl	801491e <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 8012c66:	4604      	mov	r4, r0
 8012c68:	68f8      	ldr	r0, [r7, #12]
 8012c6a:	f001 fe69 	bl	8014940 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 8012c6e:	4603      	mov	r3, r0
 8012c70:	1ae2      	subs	r2, r4, r3
 8012c72:	68bb      	ldr	r3, [r7, #8]
 8012c74:	429a      	cmp	r2, r3
 8012c76:	bf34      	ite	cc
 8012c78:	2301      	movcc	r3, #1
 8012c7a:	2300      	movcs	r3, #0
 8012c7c:	b2db      	uxtb	r3, r3
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d002      	beq.n	8012c88 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8012c82:	6878      	ldr	r0, [r7, #4]
 8012c84:	f012 fed8 	bl	8025a38 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8012c88:	68f8      	ldr	r0, [r7, #12]
 8012c8a:	f001 fe59 	bl	8014940 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 8012c8e:	4604      	mov	r4, r0
 8012c90:	68f8      	ldr	r0, [r7, #12]
 8012c92:	f001 fe55 	bl	8014940 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 8012c96:	4603      	mov	r3, r0
 8012c98:	613b      	str	r3, [r7, #16]
 8012c9a:	f107 0208 	add.w	r2, r7, #8
 8012c9e:	f107 0310 	add.w	r3, r7, #16
 8012ca2:	4611      	mov	r1, r2
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f7f0 feaa 	bl	80039fe <_ZSt3maxIjERKT_S2_S2_>
 8012caa:	4603      	mov	r3, r0
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	4423      	add	r3, r4
 8012cb0:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8012cb2:	68f8      	ldr	r0, [r7, #12]
 8012cb4:	f001 fe44 	bl	8014940 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 8012cb8:	4602      	mov	r2, r0
 8012cba:	697b      	ldr	r3, [r7, #20]
 8012cbc:	4293      	cmp	r3, r2
 8012cbe:	d306      	bcc.n	8012cce <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x7a>
 8012cc0:	68f8      	ldr	r0, [r7, #12]
 8012cc2:	f001 fe2c 	bl	801491e <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 8012cc6:	4602      	mov	r2, r0
 8012cc8:	697b      	ldr	r3, [r7, #20]
 8012cca:	4293      	cmp	r3, r2
 8012ccc:	d904      	bls.n	8012cd8 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x84>
 8012cce:	68f8      	ldr	r0, [r7, #12]
 8012cd0:	f001 fe25 	bl	801491e <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 8012cd4:	4603      	mov	r3, r0
 8012cd6:	e000      	b.n	8012cda <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x86>
 8012cd8:	697b      	ldr	r3, [r7, #20]
      }
 8012cda:	4618      	mov	r0, r3
 8012cdc:	371c      	adds	r7, #28
 8012cde:	46bd      	mov	sp, r7
 8012ce0:	bd90      	pop	{r4, r7, pc}
	...

08012ce4 <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8012ce4:	b590      	push	{r4, r7, lr}
 8012ce6:	b083      	sub	sp, #12
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
 8012cec:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8012cee:	6878      	ldr	r0, [r7, #4]
 8012cf0:	f7f5 fefc 	bl	8008aec <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 8012cf4:	4603      	mov	r3, r0
 8012cf6:	681c      	ldr	r4, [r3, #0]
 8012cf8:	6838      	ldr	r0, [r7, #0]
 8012cfa:	f7f5 fef7 	bl	8008aec <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 8012cfe:	4603      	mov	r3, r0
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	1ae3      	subs	r3, r4, r3
 8012d04:	10db      	asrs	r3, r3, #3
 8012d06:	4a03      	ldr	r2, [pc, #12]	; (8012d14 <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x30>)
 8012d08:	fb02 f303 	mul.w	r3, r2, r3
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	370c      	adds	r7, #12
 8012d10:	46bd      	mov	sp, r7
 8012d12:	bd90      	pop	{r4, r7, pc}
 8012d14:	aaaaaaab 	.word	0xaaaaaaab

08012d18 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8012d18:	b580      	push	{r7, lr}
 8012d1a:	b082      	sub	sp, #8
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	6078      	str	r0, [r7, #4]
 8012d20:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8012d22:	683b      	ldr	r3, [r7, #0]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d006      	beq.n	8012d36 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj+0x1e>
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	6839      	ldr	r1, [r7, #0]
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	f001 fe1d 	bl	801496c <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j>
 8012d32:	4603      	mov	r3, r0
 8012d34:	e000      	b.n	8012d38 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj+0x20>
 8012d36:	2300      	movs	r3, #0
      }
 8012d38:	4618      	mov	r0, r3
 8012d3a:	3708      	adds	r7, #8
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	bd80      	pop	{r7, pc}

08012d40 <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8012d40:	b590      	push	{r4, r7, lr}
 8012d42:	b085      	sub	sp, #20
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	60f8      	str	r0, [r7, #12]
 8012d48:	60b9      	str	r1, [r7, #8]
 8012d4a:	607a      	str	r2, [r7, #4]
 8012d4c:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8012d4e:	68f8      	ldr	r0, [r7, #12]
 8012d50:	f001 fe2f 	bl	80149b2 <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>
 8012d54:	4604      	mov	r4, r0
 8012d56:	68b8      	ldr	r0, [r7, #8]
 8012d58:	f001 fe2b 	bl	80149b2 <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>
 8012d5c:	4601      	mov	r1, r0
 8012d5e:	683b      	ldr	r3, [r7, #0]
 8012d60:	687a      	ldr	r2, [r7, #4]
 8012d62:	4620      	mov	r0, r4
 8012d64:	f001 fe30 	bl	80149c8 <_ZSt22__uninitialized_copy_aIPKN3jlb4NodeEPS1_S1_ET0_T_S6_S5_RSaIT1_E>
 8012d68:	4603      	mov	r3, r0
    }
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	3714      	adds	r7, #20
 8012d6e:	46bd      	mov	sp, r7
 8012d70:	bd90      	pop	{r4, r7, pc}

08012d72 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8012d72:	b580      	push	{r7, lr}
 8012d74:	b084      	sub	sp, #16
 8012d76:	af00      	add	r7, sp, #0
 8012d78:	6078      	str	r0, [r7, #4]
 8012d7a:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	6819      	ldr	r1, [r3, #0]
 8012d80:	683a      	ldr	r2, [r7, #0]
 8012d82:	4613      	mov	r3, r2
 8012d84:	005b      	lsls	r3, r3, #1
 8012d86:	4413      	add	r3, r2
 8012d88:	00db      	lsls	r3, r3, #3
 8012d8a:	425b      	negs	r3, r3
 8012d8c:	440b      	add	r3, r1
 8012d8e:	60fb      	str	r3, [r7, #12]
 8012d90:	f107 020c 	add.w	r2, r7, #12
 8012d94:	f107 0308 	add.w	r3, r7, #8
 8012d98:	4611      	mov	r1, r2
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	f7fb ffea 	bl	800ed74 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8012da0:	68bb      	ldr	r3, [r7, #8]
 8012da2:	4618      	mov	r0, r3
 8012da4:	3710      	adds	r7, #16
 8012da6:	46bd      	mov	sp, r7
 8012da8:	bd80      	pop	{r7, pc}

08012daa <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8012daa:	b480      	push	{r7}
 8012dac:	b083      	sub	sp, #12
 8012dae:	af00      	add	r7, sp, #0
 8012db0:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8012db2:	f04f 33ff 	mov.w	r3, #4294967295
      }
 8012db6:	4618      	mov	r0, r3
 8012db8:	370c      	adds	r7, #12
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc0:	4770      	bx	lr

08012dc2 <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8012dc2:	b580      	push	{r7, lr}
 8012dc4:	b084      	sub	sp, #16
 8012dc6:	af00      	add	r7, sp, #0
 8012dc8:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8012dca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012dce:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8012dd0:	6878      	ldr	r0, [r7, #4]
 8012dd2:	f7ff ffea 	bl	8012daa <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8012dda:	f107 0208 	add.w	r2, r7, #8
 8012dde:	f107 030c 	add.w	r3, r7, #12
 8012de2:	4611      	mov	r1, r2
 8012de4:	4618      	mov	r0, r3
 8012de6:	f7f0 fecd 	bl	8003b84 <_ZSt3minIjERKT_S2_S2_>
 8012dea:	4603      	mov	r3, r0
 8012dec:	681b      	ldr	r3, [r3, #0]
      }
 8012dee:	4618      	mov	r0, r3
 8012df0:	3710      	adds	r7, #16
 8012df2:	46bd      	mov	sp, r7
 8012df4:	bd80      	pop	{r7, pc}

08012df6 <_ZSt18uninitialized_copyIPKcPcET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8012df6:	b580      	push	{r7, lr}
 8012df8:	b086      	sub	sp, #24
 8012dfa:	af00      	add	r7, sp, #0
 8012dfc:	60f8      	str	r0, [r7, #12]
 8012dfe:	60b9      	str	r1, [r7, #8]
 8012e00:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8012e02:	2301      	movs	r3, #1
 8012e04:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8012e06:	687a      	ldr	r2, [r7, #4]
 8012e08:	68b9      	ldr	r1, [r7, #8]
 8012e0a:	68f8      	ldr	r0, [r7, #12]
 8012e0c:	f001 fdf8 	bl	8014a00 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKcPcEET0_T_S6_S5_>
 8012e10:	4603      	mov	r3, r0
    }
 8012e12:	4618      	mov	r0, r3
 8012e14:	3718      	adds	r7, #24
 8012e16:	46bd      	mov	sp, r7
 8012e18:	bd80      	pop	{r7, pc}

08012e1a <_ZNKSt6vectorIcSaIcEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8012e1a:	b580      	push	{r7, lr}
 8012e1c:	b082      	sub	sp, #8
 8012e1e:	af00      	add	r7, sp, #0
 8012e20:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	4618      	mov	r0, r3
 8012e26:	f7fb fc56 	bl	800e6d6 <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f7ff ffc8 	bl	8012dc2 <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>
 8012e32:	4603      	mov	r3, r0
 8012e34:	4618      	mov	r0, r3
 8012e36:	3708      	adds	r7, #8
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	bd80      	pop	{r7, pc}

08012e3c <_ZNSt6vectorIcSaIcEE14_S_do_relocateEPcS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8012e3c:	b580      	push	{r7, lr}
 8012e3e:	b084      	sub	sp, #16
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	60f8      	str	r0, [r7, #12]
 8012e44:	60b9      	str	r1, [r7, #8]
 8012e46:	607a      	str	r2, [r7, #4]
 8012e48:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8012e4a:	683b      	ldr	r3, [r7, #0]
 8012e4c:	687a      	ldr	r2, [r7, #4]
 8012e4e:	68b9      	ldr	r1, [r7, #8]
 8012e50:	68f8      	ldr	r0, [r7, #12]
 8012e52:	f001 fde5 	bl	8014a20 <_ZSt12__relocate_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
 8012e56:	4603      	mov	r3, r0
      }
 8012e58:	4618      	mov	r0, r3
 8012e5a:	3710      	adds	r7, #16
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	bd80      	pop	{r7, pc}

08012e60 <_ZSt10destroy_atIcEvPT_>:
    destroy_at(_Tp* __location)
 8012e60:	b480      	push	{r7}
 8012e62:	b083      	sub	sp, #12
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6078      	str	r0, [r7, #4]
    }
 8012e68:	bf00      	nop
 8012e6a:	370c      	adds	r7, #12
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e72:	4770      	bx	lr

08012e74 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS7_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8012e74:	b590      	push	{r4, r7, lr}
 8012e76:	b083      	sub	sp, #12
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
 8012e7c:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8012e7e:	6878      	ldr	r0, [r7, #4]
 8012e80:	f001 fdeb 	bl	8014a5a <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE21_M_get_Node_allocatorEv>
 8012e84:	4604      	mov	r4, r0
 8012e86:	6838      	ldr	r0, [r7, #0]
 8012e88:	f7fc fc07 	bl	800f69a <_ZNSt13_Rb_tree_nodeISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEE9_M_valptrEv>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	4619      	mov	r1, r3
 8012e90:	4620      	mov	r0, r4
 8012e92:	f001 fded 	bl	8014a70 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcS1_IfSt6vectorIS1_IciESaIS4_EEEEEEE7destroyIS8_EEvRSA_PT_>
      }
 8012e96:	bf00      	nop
 8012e98:	370c      	adds	r7, #12
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	bd90      	pop	{r4, r7, pc}

08012e9e <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS7_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8012e9e:	b580      	push	{r7, lr}
 8012ea0:	b082      	sub	sp, #8
 8012ea2:	af00      	add	r7, sp, #0
 8012ea4:	6078      	str	r0, [r7, #4]
 8012ea6:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8012ea8:	6878      	ldr	r0, [r7, #4]
 8012eaa:	f001 fdd6 	bl	8014a5a <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE21_M_get_Node_allocatorEv>
 8012eae:	4603      	mov	r3, r0
 8012eb0:	2201      	movs	r2, #1
 8012eb2:	6839      	ldr	r1, [r7, #0]
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	f001 fde7 	bl	8014a88 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcS1_IfSt6vectorIS1_IciESaIS4_EEEEEEE10deallocateERSA_PS9_j>
 8012eba:	bf00      	nop
 8012ebc:	3708      	adds	r7, #8
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	bd80      	pop	{r7, pc}

08012ec2 <_ZN9__gnu_cxx13new_allocatorISt4pairIfcEEC1Ev>:
 8012ec2:	b480      	push	{r7}
 8012ec4:	b083      	sub	sp, #12
 8012ec6:	af00      	add	r7, sp, #0
 8012ec8:	6078      	str	r0, [r7, #4]
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	4618      	mov	r0, r3
 8012ece:	370c      	adds	r7, #12
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed6:	4770      	bx	lr

08012ed8 <_ZNSt16allocator_traitsISaISt4pairIfcEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8012ed8:	b580      	push	{r7, lr}
 8012eda:	b088      	sub	sp, #32
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	60f8      	str	r0, [r7, #12]
 8012ee0:	60b9      	str	r1, [r7, #8]
 8012ee2:	607a      	str	r2, [r7, #4]
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	61fb      	str	r3, [r7, #28]
 8012ee8:	68bb      	ldr	r3, [r7, #8]
 8012eea:	61bb      	str	r3, [r7, #24]
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8012ef0:	f7ef fe0c 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d003      	beq.n	8012f02 <_ZNSt16allocator_traitsISaISt4pairIfcEEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8012efa:	69b8      	ldr	r0, [r7, #24]
 8012efc:	f012 fcc6 	bl	802588c <_ZdlPv>
	    return;
 8012f00:	e005      	b.n	8012f0e <_ZNSt16allocator_traitsISaISt4pairIfcEEE10deallocateERS2_PS1_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 8012f02:	697a      	ldr	r2, [r7, #20]
 8012f04:	69b9      	ldr	r1, [r7, #24]
 8012f06:	69f8      	ldr	r0, [r7, #28]
 8012f08:	f002 fbed 	bl	80156e6 <_ZN9__gnu_cxx13new_allocatorISt4pairIfcEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8012f0c:	bf00      	nop
 8012f0e:	bf00      	nop
 8012f10:	3720      	adds	r7, #32
 8012f12:	46bd      	mov	sp, r7
 8012f14:	bd80      	pop	{r7, pc}

08012f16 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIfcEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8012f16:	b580      	push	{r7, lr}
 8012f18:	b082      	sub	sp, #8
 8012f1a:	af00      	add	r7, sp, #0
 8012f1c:	6078      	str	r0, [r7, #4]
 8012f1e:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8012f20:	e009      	b.n	8012f36 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIfcEEEvT_S5_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8012f22:	6878      	ldr	r0, [r7, #4]
 8012f24:	f001 fdcf 	bl	8014ac6 <_ZSt11__addressofISt4pairIfcEEPT_RS2_>
 8012f28:	4603      	mov	r3, r0
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	f001 fdd6 	bl	8014adc <_ZSt8_DestroyISt4pairIfcEEvPT_>
	  for (; __first != __last; ++__first)
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	3308      	adds	r3, #8
 8012f34:	607b      	str	r3, [r7, #4]
 8012f36:	687a      	ldr	r2, [r7, #4]
 8012f38:	683b      	ldr	r3, [r7, #0]
 8012f3a:	429a      	cmp	r2, r3
 8012f3c:	d1f1      	bne.n	8012f22 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIfcEEEvT_S5_+0xc>
	}
 8012f3e:	bf00      	nop
 8012f40:	bf00      	nop
 8012f42:	3708      	adds	r7, #8
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bd80      	pop	{r7, pc}

08012f48 <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt4pairIfcEEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8012f48:	b480      	push	{r7}
 8012f4a:	b083      	sub	sp, #12
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
 8012f50:	6039      	str	r1, [r7, #0]
 8012f52:	bf00      	nop
 8012f54:	370c      	adds	r7, #12
 8012f56:	46bd      	mov	sp, r7
 8012f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f5c:	4770      	bx	lr

08012f5e <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8012f5e:	b480      	push	{r7}
 8012f60:	b083      	sub	sp, #12
 8012f62:	af00      	add	r7, sp, #0
 8012f64:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	3304      	adds	r3, #4
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	370c      	adds	r7, #12
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f74:	4770      	bx	lr

08012f76 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS7_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8012f76:	b590      	push	{r4, r7, lr}
 8012f78:	b087      	sub	sp, #28
 8012f7a:	af00      	add	r7, sp, #0
 8012f7c:	60f8      	str	r0, [r7, #12]
 8012f7e:	60b9      	str	r1, [r7, #8]
 8012f80:	607a      	str	r2, [r7, #4]
 8012f82:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8012f84:	e01a      	b.n	8012fbc <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS7_EPSt18_Rb_tree_node_baseRS1_+0x46>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8012f86:	68fc      	ldr	r4, [r7, #12]
 8012f88:	68b8      	ldr	r0, [r7, #8]
 8012f8a:	f7fd ff22 	bl	8010dd2 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE6_S_keyEPKSt13_Rb_tree_nodeIS7_E>
 8012f8e:	4603      	mov	r3, r0
 8012f90:	683a      	ldr	r2, [r7, #0]
 8012f92:	4619      	mov	r1, r3
 8012f94:	4620      	mov	r0, r4
 8012f96:	f7fb ff19 	bl	800edcc <_ZNKSt4lessIcEclERKcS2_>
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	f083 0301 	eor.w	r3, r3, #1
 8012fa0:	b2db      	uxtb	r3, r3
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d006      	beq.n	8012fb4 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS7_EPSt18_Rb_tree_node_baseRS1_+0x3e>
	  __y = __x, __x = _S_left(__x);
 8012fa6:	68bb      	ldr	r3, [r7, #8]
 8012fa8:	607b      	str	r3, [r7, #4]
 8012faa:	68b8      	ldr	r0, [r7, #8]
 8012fac:	f7fd fd07 	bl	80109be <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE7_S_leftEPSt18_Rb_tree_node_base>
 8012fb0:	60b8      	str	r0, [r7, #8]
 8012fb2:	e003      	b.n	8012fbc <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS7_EPSt18_Rb_tree_node_baseRS1_+0x46>
	  __x = _S_right(__x);
 8012fb4:	68b8      	ldr	r0, [r7, #8]
 8012fb6:	f7fd fcf6 	bl	80109a6 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE8_S_rightEPSt18_Rb_tree_node_base>
 8012fba:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8012fbc:	68bb      	ldr	r3, [r7, #8]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d1e1      	bne.n	8012f86 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS7_EPSt18_Rb_tree_node_baseRS1_+0x10>
      return iterator(__y);
 8012fc2:	f107 0314 	add.w	r3, r7, #20
 8012fc6:	6879      	ldr	r1, [r7, #4]
 8012fc8:	4618      	mov	r0, r3
 8012fca:	f7fd ff52 	bl	8010e72 <_ZNSt17_Rb_tree_iteratorISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEEC1EPSt18_Rb_tree_node_base>
 8012fce:	697b      	ldr	r3, [r7, #20]
    }
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	371c      	adds	r7, #28
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bd90      	pop	{r4, r7, pc}

08012fd8 <_ZNSt10_Head_baseILj0ERKcLb0EEC1ES1_>:
      constexpr _Head_base(const _Head& __h)
 8012fd8:	b480      	push	{r7}
 8012fda:	b083      	sub	sp, #12
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	6078      	str	r0, [r7, #4]
 8012fe0:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	683a      	ldr	r2, [r7, #0]
 8012fe6:	601a      	str	r2, [r3, #0]
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	4618      	mov	r0, r3
 8012fec:	370c      	adds	r7, #12
 8012fee:	46bd      	mov	sp, r7
 8012ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff4:	4770      	bx	lr

08012ff6 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE11_M_get_nodeEv>:
      _M_get_node()
 8012ff6:	b580      	push	{r7, lr}
 8012ff8:	b082      	sub	sp, #8
 8012ffa:	af00      	add	r7, sp, #0
 8012ffc:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8012ffe:	6878      	ldr	r0, [r7, #4]
 8013000:	f001 fd2b 	bl	8014a5a <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE21_M_get_Node_allocatorEv>
 8013004:	4603      	mov	r3, r0
 8013006:	2101      	movs	r1, #1
 8013008:	4618      	mov	r0, r3
 801300a:	f001 fd72 	bl	8014af2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcS1_IfSt6vectorIS1_IciESaIS4_EEEEEEE8allocateERSA_j>
 801300e:	4603      	mov	r3, r0
 8013010:	4618      	mov	r0, r3
 8013012:	3708      	adds	r7, #8
 8013014:	46bd      	mov	sp, r7
 8013016:	bd80      	pop	{r7, pc}

08013018 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEEvPSt13_Rb_tree_nodeIS7_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8013018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801301c:	b086      	sub	sp, #24
 801301e:	af02      	add	r7, sp, #8
 8013020:	60f8      	str	r0, [r7, #12]
 8013022:	60b9      	str	r1, [r7, #8]
 8013024:	607a      	str	r2, [r7, #4]
 8013026:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8013028:	68bb      	ldr	r3, [r7, #8]
 801302a:	4619      	mov	r1, r3
 801302c:	2024      	movs	r0, #36	; 0x24
 801302e:	f7ef fd75 	bl	8002b1c <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8013032:	68f8      	ldr	r0, [r7, #12]
 8013034:	f001 fd11 	bl	8014a5a <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE21_M_get_Node_allocatorEv>
 8013038:	4604      	mov	r4, r0
 801303a:	68b8      	ldr	r0, [r7, #8]
 801303c:	f7fc fb2d 	bl	800f69a <_ZNSt13_Rb_tree_nodeISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEE9_M_valptrEv>
 8013040:	4605      	mov	r5, r0
 8013042:	6878      	ldr	r0, [r7, #4]
 8013044:	f7fd fd5e 	bl	8010b04 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8013048:	4606      	mov	r6, r0
 801304a:	6838      	ldr	r0, [r7, #0]
 801304c:	f7fd fd65 	bl	8010b1a <_ZSt7forwardISt5tupleIJRKcEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8013050:	4680      	mov	r8, r0
 8013052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013054:	f7fd fd6c 	bl	8010b30 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8013058:	4603      	mov	r3, r0
 801305a:	9300      	str	r3, [sp, #0]
 801305c:	4643      	mov	r3, r8
 801305e:	4632      	mov	r2, r6
 8013060:	4629      	mov	r1, r5
 8013062:	4620      	mov	r0, r4
 8013064:	f001 fda2 	bl	8014bac <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcS1_IfSt6vectorIS1_IciESaIS4_EEEEEEE9constructIS8_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEEvRSA_PT_DpOT0_>
	}
 8013068:	bf00      	nop
 801306a:	3710      	adds	r7, #16
 801306c:	46bd      	mov	sp, r7
 801306e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013072 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8013072:	b580      	push	{r7, lr}
 8013074:	b084      	sub	sp, #16
 8013076:	af00      	add	r7, sp, #0
 8013078:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	681a      	ldr	r2, [r3, #0]
 801307e:	f107 030c 	add.w	r3, r7, #12
 8013082:	4611      	mov	r1, r2
 8013084:	4618      	mov	r0, r3
 8013086:	f7fd fef4 	bl	8010e72 <_ZNSt17_Rb_tree_iteratorISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEEC1EPSt18_Rb_tree_node_base>
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	4618      	mov	r0, r3
 801308e:	3710      	adds	r7, #16
 8013090:	46bd      	mov	sp, r7
 8013092:	bd80      	pop	{r7, pc}

08013094 <_ZNKSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8013094:	b480      	push	{r7}
 8013096:	b083      	sub	sp, #12
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	695b      	ldr	r3, [r3, #20]
 80130a0:	4618      	mov	r0, r3
 80130a2:	370c      	adds	r7, #12
 80130a4:	46bd      	mov	sp, r7
 80130a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130aa:	4770      	bx	lr

080130ac <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80130ac:	b480      	push	{r7}
 80130ae:	b083      	sub	sp, #12
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	3310      	adds	r3, #16
 80130b8:	4618      	mov	r0, r3
 80130ba:	370c      	adds	r7, #12
 80130bc:	46bd      	mov	sp, r7
 80130be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c2:	4770      	bx	lr

080130c4 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b082      	sub	sp, #8
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80130cc:	6878      	ldr	r0, [r7, #4]
 80130ce:	f7fd fe80 	bl	8010dd2 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE6_S_keyEPKSt13_Rb_tree_nodeIS7_E>
 80130d2:	4603      	mov	r3, r0
 80130d4:	4618      	mov	r0, r3
 80130d6:	3708      	adds	r7, #8
 80130d8:	46bd      	mov	sp, r7
 80130da:	bd80      	pop	{r7, pc}

080130dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>:
       constexpr pair(const _T1& __x, _U2&& __y)
 80130dc:	b580      	push	{r7, lr}
 80130de:	b084      	sub	sp, #16
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	60f8      	str	r0, [r7, #12]
 80130e4:	60b9      	str	r1, [r7, #8]
 80130e6:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 80130e8:	68bb      	ldr	r3, [r7, #8]
 80130ea:	681a      	ldr	r2, [r3, #0]
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	601a      	str	r2, [r3, #0]
 80130f0:	6878      	ldr	r0, [r7, #4]
 80130f2:	f001 fd77 	bl	8014be4 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80130f6:	4603      	mov	r3, r0
 80130f8:	681a      	ldr	r2, [r3, #0]
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	605a      	str	r2, [r3, #4]
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	4618      	mov	r0, r3
 8013102:	3710      	adds	r7, #16
 8013104:	46bd      	mov	sp, r7
 8013106:	bd80      	pop	{r7, pc}

08013108 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8013108:	b590      	push	{r4, r7, lr}
 801310a:	b08b      	sub	sp, #44	; 0x2c
 801310c:	af00      	add	r7, sp, #0
 801310e:	60f8      	str	r0, [r7, #12]
 8013110:	60b9      	str	r1, [r7, #8]
 8013112:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8013114:	68b8      	ldr	r0, [r7, #8]
 8013116:	f7fb fdd4 	bl	800ecc2 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE8_M_beginEv>
 801311a:	4603      	mov	r3, r0
 801311c:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 801311e:	68b8      	ldr	r0, [r7, #8]
 8013120:	f7ff ff1d 	bl	8012f5e <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE6_M_endEv>
 8013124:	4603      	mov	r3, r0
 8013126:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8013128:	2301      	movs	r3, #1
 801312a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 801312e:	e01f      	b.n	8013170 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE24_M_get_insert_unique_posERS1_+0x68>
	  __y = __x;
 8013130:	69bb      	ldr	r3, [r7, #24]
 8013132:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8013134:	68bc      	ldr	r4, [r7, #8]
 8013136:	69bb      	ldr	r3, [r7, #24]
 8013138:	4618      	mov	r0, r3
 801313a:	f7fd fe4a 	bl	8010dd2 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE6_S_keyEPKSt13_Rb_tree_nodeIS7_E>
 801313e:	4603      	mov	r3, r0
 8013140:	461a      	mov	r2, r3
 8013142:	6879      	ldr	r1, [r7, #4]
 8013144:	4620      	mov	r0, r4
 8013146:	f7fb fe41 	bl	800edcc <_ZNKSt4lessIcEclERKcS2_>
 801314a:	4603      	mov	r3, r0
 801314c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8013150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013154:	2b00      	cmp	r3, #0
 8013156:	d005      	beq.n	8013164 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE24_M_get_insert_unique_posERS1_+0x5c>
 8013158:	69bb      	ldr	r3, [r7, #24]
 801315a:	4618      	mov	r0, r3
 801315c:	f7fd fc2f 	bl	80109be <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE7_S_leftEPSt18_Rb_tree_node_base>
 8013160:	4603      	mov	r3, r0
 8013162:	e004      	b.n	801316e <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE24_M_get_insert_unique_posERS1_+0x66>
 8013164:	69bb      	ldr	r3, [r7, #24]
 8013166:	4618      	mov	r0, r3
 8013168:	f7fd fc1d 	bl	80109a6 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE8_S_rightEPSt18_Rb_tree_node_base>
 801316c:	4603      	mov	r3, r0
 801316e:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8013170:	69bb      	ldr	r3, [r7, #24]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d1dc      	bne.n	8013130 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE24_M_get_insert_unique_posERS1_+0x28>
      iterator __j = iterator(__y);
 8013176:	697a      	ldr	r2, [r7, #20]
 8013178:	f107 0310 	add.w	r3, r7, #16
 801317c:	4611      	mov	r1, r2
 801317e:	4618      	mov	r0, r3
 8013180:	f7fd fe77 	bl	8010e72 <_ZNSt17_Rb_tree_iteratorISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8013184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013188:	2b00      	cmp	r3, #0
 801318a:	d01d      	beq.n	80131c8 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 801318c:	68b8      	ldr	r0, [r7, #8]
 801318e:	f7fc fa62 	bl	800f656 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE5beginEv>
 8013192:	4603      	mov	r3, r0
 8013194:	61fb      	str	r3, [r7, #28]
 8013196:	f107 021c 	add.w	r2, r7, #28
 801319a:	f107 0310 	add.w	r3, r7, #16
 801319e:	4611      	mov	r1, r2
 80131a0:	4618      	mov	r0, r3
 80131a2:	f7fa fe0c 	bl	800ddbe <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEESA_>
 80131a6:	4603      	mov	r3, r0
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d008      	beq.n	80131be <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 80131ac:	f107 0214 	add.w	r2, r7, #20
 80131b0:	f107 0318 	add.w	r3, r7, #24
 80131b4:	4619      	mov	r1, r3
 80131b6:	68f8      	ldr	r0, [r7, #12]
 80131b8:	f001 fd1f 	bl	8014bfa <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKcS_IfSt6vectorIS_IciESaIS7_EEEEERS1_Lb1EEEOT_OT0_>
 80131bc:	e025      	b.n	801320a <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 80131be:	f107 0310 	add.w	r3, r7, #16
 80131c2:	4618      	mov	r0, r3
 80131c4:	f000 f84a 	bl	801325c <_ZNSt17_Rb_tree_iteratorISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80131c8:	68bc      	ldr	r4, [r7, #8]
 80131ca:	693b      	ldr	r3, [r7, #16]
 80131cc:	4618      	mov	r0, r3
 80131ce:	f7ff ff79 	bl	80130c4 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80131d2:	4603      	mov	r3, r0
 80131d4:	687a      	ldr	r2, [r7, #4]
 80131d6:	4619      	mov	r1, r3
 80131d8:	4620      	mov	r0, r4
 80131da:	f7fb fdf7 	bl	800edcc <_ZNKSt4lessIcEclERKcS2_>
 80131de:	4603      	mov	r3, r0
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d008      	beq.n	80131f6 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 80131e4:	f107 0214 	add.w	r2, r7, #20
 80131e8:	f107 0318 	add.w	r3, r7, #24
 80131ec:	4619      	mov	r1, r3
 80131ee:	68f8      	ldr	r0, [r7, #12]
 80131f0:	f001 fd03 	bl	8014bfa <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKcS_IfSt6vectorIS_IciESaIS7_EEEEERS1_Lb1EEEOT_OT0_>
 80131f4:	e009      	b.n	801320a <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 80131f6:	2300      	movs	r3, #0
 80131f8:	623b      	str	r3, [r7, #32]
 80131fa:	f107 0220 	add.w	r2, r7, #32
 80131fe:	f107 0310 	add.w	r3, r7, #16
 8013202:	4619      	mov	r1, r3
 8013204:	68f8      	ldr	r0, [r7, #12]
 8013206:	f000 f83a 	bl	801327e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801320a:	68f8      	ldr	r0, [r7, #12]
 801320c:	372c      	adds	r7, #44	; 0x2c
 801320e:	46bd      	mov	sp, r7
 8013210:	bd90      	pop	{r4, r7, pc}

08013212 <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8013212:	b480      	push	{r7}
 8013214:	b083      	sub	sp, #12
 8013216:	af00      	add	r7, sp, #0
 8013218:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	330c      	adds	r3, #12
 801321e:	4618      	mov	r0, r3
 8013220:	370c      	adds	r7, #12
 8013222:	46bd      	mov	sp, r7
 8013224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013228:	4770      	bx	lr

0801322a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 801322a:	b580      	push	{r7, lr}
 801322c:	b084      	sub	sp, #16
 801322e:	af00      	add	r7, sp, #0
 8013230:	60f8      	str	r0, [r7, #12]
 8013232:	60b9      	str	r1, [r7, #8]
 8013234:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8013236:	68b8      	ldr	r0, [r7, #8]
 8013238:	f001 fcd4 	bl	8014be4 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 801323c:	4603      	mov	r3, r0
 801323e:	681a      	ldr	r2, [r3, #0]
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	601a      	str	r2, [r3, #0]
 8013244:	6878      	ldr	r0, [r7, #4]
 8013246:	f001 fccd 	bl	8014be4 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 801324a:	4603      	mov	r3, r0
 801324c:	681a      	ldr	r2, [r3, #0]
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	605a      	str	r2, [r3, #4]
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	4618      	mov	r0, r3
 8013256:	3710      	adds	r7, #16
 8013258:	46bd      	mov	sp, r7
 801325a:	bd80      	pop	{r7, pc}

0801325c <_ZNSt17_Rb_tree_iteratorISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 801325c:	b580      	push	{r7, lr}
 801325e:	b082      	sub	sp, #8
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	4618      	mov	r0, r3
 801326a:	f012 fb7d 	bl	8025968 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 801326e:	4602      	mov	r2, r0
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	601a      	str	r2, [r3, #0]
	return *this;
 8013274:	687b      	ldr	r3, [r7, #4]
      }
 8013276:	4618      	mov	r0, r3
 8013278:	3708      	adds	r7, #8
 801327a:	46bd      	mov	sp, r7
 801327c:	bd80      	pop	{r7, pc}

0801327e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 801327e:	b580      	push	{r7, lr}
 8013280:	b084      	sub	sp, #16
 8013282:	af00      	add	r7, sp, #0
 8013284:	60f8      	str	r0, [r7, #12]
 8013286:	60b9      	str	r1, [r7, #8]
 8013288:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 801328a:	68b8      	ldr	r0, [r7, #8]
 801328c:	f001 fcaa 	bl	8014be4 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8013290:	4603      	mov	r3, r0
 8013292:	681a      	ldr	r2, [r3, #0]
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	601a      	str	r2, [r3, #0]
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	681a      	ldr	r2, [r3, #0]
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	605a      	str	r2, [r3, #4]
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	4618      	mov	r0, r3
 80132a4:	3710      	adds	r7, #16
 80132a6:	46bd      	mov	sp, r7
 80132a8:	bd80      	pop	{r7, pc}

080132aa <_ZNKSt13_Rb_tree_nodeISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEE9_M_valptrEv>:
      _M_valptr() const
 80132aa:	b580      	push	{r7, lr}
 80132ac:	b082      	sub	sp, #8
 80132ae:	af00      	add	r7, sp, #0
 80132b0:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	3310      	adds	r3, #16
 80132b6:	4618      	mov	r0, r3
 80132b8:	f001 fcb8 	bl	8014c2c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKcS1_IfSt6vectorIS1_IciESaIS4_EEEEE6_M_ptrEv>
 80132bc:	4603      	mov	r3, r0
 80132be:	4618      	mov	r0, r3
 80132c0:	3708      	adds	r7, #8
 80132c2:	46bd      	mov	sp, r7
 80132c4:	bd80      	pop	{r7, pc}

080132c6 <_ZNKSt10_Select1stISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEEclERKS7_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 80132c6:	b480      	push	{r7}
 80132c8:	b083      	sub	sp, #12
 80132ca:	af00      	add	r7, sp, #0
 80132cc:	6078      	str	r0, [r7, #4]
 80132ce:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80132d0:	683b      	ldr	r3, [r7, #0]
 80132d2:	4618      	mov	r0, r3
 80132d4:	370c      	adds	r7, #12
 80132d6:	46bd      	mov	sp, r7
 80132d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132dc:	4770      	bx	lr

080132de <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIciEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80132de:	b580      	push	{r7, lr}
 80132e0:	b082      	sub	sp, #8
 80132e2:	af00      	add	r7, sp, #0
 80132e4:	6078      	str	r0, [r7, #4]
 80132e6:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80132e8:	e009      	b.n	80132fe <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIciEEEvT_S5_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 80132ea:	6878      	ldr	r0, [r7, #4]
 80132ec:	f001 fcb9 	bl	8014c62 <_ZSt11__addressofISt4pairIciEEPT_RS2_>
 80132f0:	4603      	mov	r3, r0
 80132f2:	4618      	mov	r0, r3
 80132f4:	f001 fcc0 	bl	8014c78 <_ZSt8_DestroyISt4pairIciEEvPT_>
	  for (; __first != __last; ++__first)
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	3308      	adds	r3, #8
 80132fc:	607b      	str	r3, [r7, #4]
 80132fe:	687a      	ldr	r2, [r7, #4]
 8013300:	683b      	ldr	r3, [r7, #0]
 8013302:	429a      	cmp	r2, r3
 8013304:	d1f1      	bne.n	80132ea <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIciEEEvT_S5_+0xc>
	}
 8013306:	bf00      	nop
 8013308:	bf00      	nop
 801330a:	3708      	adds	r7, #8
 801330c:	46bd      	mov	sp, r7
 801330e:	bd80      	pop	{r7, pc}

08013310 <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt4pairIciEEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8013310:	b480      	push	{r7}
 8013312:	b083      	sub	sp, #12
 8013314:	af00      	add	r7, sp, #0
 8013316:	6078      	str	r0, [r7, #4]
 8013318:	6039      	str	r1, [r7, #0]
 801331a:	bf00      	nop
 801331c:	370c      	adds	r7, #12
 801331e:	46bd      	mov	sp, r7
 8013320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013324:	4770      	bx	lr

08013326 <_ZSt4moveIRNSt12_Vector_baseISt4pairIciESaIS2_EE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8013326:	b480      	push	{r7}
 8013328:	b083      	sub	sp, #12
 801332a:	af00      	add	r7, sp, #0
 801332c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	4618      	mov	r0, r3
 8013332:	370c      	adds	r7, #12
 8013334:	46bd      	mov	sp, r7
 8013336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801333a:	4770      	bx	lr

0801333c <_ZNSaISt4pairIciEEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 801333c:	b580      	push	{r7, lr}
 801333e:	b082      	sub	sp, #8
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
 8013344:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8013346:	6839      	ldr	r1, [r7, #0]
 8013348:	6878      	ldr	r0, [r7, #4]
 801334a:	f001 fca0 	bl	8014c8e <_ZN9__gnu_cxx13new_allocatorISt4pairIciEEC1ERKS3_>
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	4618      	mov	r0, r3
 8013352:	3708      	adds	r7, #8
 8013354:	46bd      	mov	sp, r7
 8013356:	bd80      	pop	{r7, pc}

08013358 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE17_Vector_impl_dataC1EOS4_>:
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 8013358:	b480      	push	{r7}
 801335a:	b083      	sub	sp, #12
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
 8013360:	6039      	str	r1, [r7, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8013362:	683b      	ldr	r3, [r7, #0]
 8013364:	681a      	ldr	r2, [r3, #0]
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	601a      	str	r2, [r3, #0]
 801336a:	683b      	ldr	r3, [r7, #0]
 801336c:	685a      	ldr	r2, [r3, #4]
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8013372:	683b      	ldr	r3, [r7, #0]
 8013374:	689a      	ldr	r2, [r3, #8]
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	609a      	str	r2, [r3, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801337a:	683b      	ldr	r3, [r7, #0]
 801337c:	2200      	movs	r2, #0
 801337e:	609a      	str	r2, [r3, #8]
 8013380:	683b      	ldr	r3, [r7, #0]
 8013382:	689a      	ldr	r2, [r3, #8]
 8013384:	683b      	ldr	r3, [r7, #0]
 8013386:	605a      	str	r2, [r3, #4]
 8013388:	683b      	ldr	r3, [r7, #0]
 801338a:	685a      	ldr	r2, [r3, #4]
 801338c:	683b      	ldr	r3, [r7, #0]
 801338e:	601a      	str	r2, [r3, #0]
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	4618      	mov	r0, r3
 8013394:	370c      	adds	r7, #12
 8013396:	46bd      	mov	sp, r7
 8013398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339c:	4770      	bx	lr

0801339e <_ZNSt12_Vector_baseISt4pairIciESaIS1_EEC1ERKS2_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 801339e:	b580      	push	{r7, lr}
 80133a0:	b082      	sub	sp, #8
 80133a2:	af00      	add	r7, sp, #0
 80133a4:	6078      	str	r0, [r7, #4]
 80133a6:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	6839      	ldr	r1, [r7, #0]
 80133ac:	4618      	mov	r0, r3
 80133ae:	f7fe fb6f 	bl	8011a90 <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE12_Vector_implC1ERKS2_>
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	4618      	mov	r0, r3
 80133b6:	3708      	adds	r7, #8
 80133b8:	46bd      	mov	sp, r7
 80133ba:	bd80      	pop	{r7, pc}

080133bc <_ZNSt12_Vector_baseISt4pairIciESaIS1_EE17_Vector_impl_data12_M_copy_dataERKS4_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 80133bc:	b480      	push	{r7}
 80133be:	b083      	sub	sp, #12
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	6078      	str	r0, [r7, #4]
 80133c4:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 80133c6:	683b      	ldr	r3, [r7, #0]
 80133c8:	681a      	ldr	r2, [r3, #0]
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	685a      	ldr	r2, [r3, #4]
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 80133d6:	683b      	ldr	r3, [r7, #0]
 80133d8:	689a      	ldr	r2, [r3, #8]
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	609a      	str	r2, [r3, #8]
	}
 80133de:	bf00      	nop
 80133e0:	370c      	adds	r7, #12
 80133e2:	46bd      	mov	sp, r7
 80133e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133e8:	4770      	bx	lr

080133ea <_ZSt4moveIRSaISt4pairIciEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80133ea:	b480      	push	{r7}
 80133ec:	b083      	sub	sp, #12
 80133ee:	af00      	add	r7, sp, #0
 80133f0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	4618      	mov	r0, r3
 80133f6:	370c      	adds	r7, #12
 80133f8:	46bd      	mov	sp, r7
 80133fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133fe:	4770      	bx	lr

08013400 <_ZSt7forwardISt4pairIfcEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013400:	b480      	push	{r7}
 8013402:	b083      	sub	sp, #12
 8013404:	af00      	add	r7, sp, #0
 8013406:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	4618      	mov	r0, r3
 801340c:	370c      	adds	r7, #12
 801340e:	46bd      	mov	sp, r7
 8013410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013414:	4770      	bx	lr

08013416 <_ZSt12construct_atISt4pairIfcEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8013416:	b5b0      	push	{r4, r5, r7, lr}
 8013418:	b082      	sub	sp, #8
 801341a:	af00      	add	r7, sp, #0
 801341c:	6078      	str	r0, [r7, #4]
 801341e:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8013420:	6838      	ldr	r0, [r7, #0]
 8013422:	f7ff ffed 	bl	8013400 <_ZSt7forwardISt4pairIfcEEOT_RNSt16remove_referenceIS2_E4typeE>
 8013426:	4605      	mov	r5, r0
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	4619      	mov	r1, r3
 801342c:	2008      	movs	r0, #8
 801342e:	f7ef fb75 	bl	8002b1c <_ZnwjPv>
 8013432:	4604      	mov	r4, r0
 8013434:	4623      	mov	r3, r4
 8013436:	462a      	mov	r2, r5
 8013438:	e892 0003 	ldmia.w	r2, {r0, r1}
 801343c:	e883 0003 	stmia.w	r3, {r0, r1}
 8013440:	4623      	mov	r3, r4
 8013442:	4618      	mov	r0, r3
 8013444:	3708      	adds	r7, #8
 8013446:	46bd      	mov	sp, r7
 8013448:	bdb0      	pop	{r4, r5, r7, pc}

0801344a <_ZNSt16allocator_traitsISaISt4pairIfcEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801344a:	b580      	push	{r7, lr}
 801344c:	b084      	sub	sp, #16
 801344e:	af00      	add	r7, sp, #0
 8013450:	60f8      	str	r0, [r7, #12]
 8013452:	60b9      	str	r1, [r7, #8]
 8013454:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8013456:	6878      	ldr	r0, [r7, #4]
 8013458:	f7ff ffd2 	bl	8013400 <_ZSt7forwardISt4pairIfcEEOT_RNSt16remove_referenceIS2_E4typeE>
 801345c:	4603      	mov	r3, r0
 801345e:	4619      	mov	r1, r3
 8013460:	68b8      	ldr	r0, [r7, #8]
 8013462:	f7ff ffd8 	bl	8013416 <_ZSt12construct_atISt4pairIfcEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8013466:	bf00      	nop
 8013468:	3710      	adds	r7, #16
 801346a:	46bd      	mov	sp, r7
 801346c:	bd80      	pop	{r7, pc}
	...

08013470 <_ZNSt6vectorISt4pairIfcESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8013470:	b5b0      	push	{r4, r5, r7, lr}
 8013472:	b08c      	sub	sp, #48	; 0x30
 8013474:	af00      	add	r7, sp, #0
 8013476:	60f8      	str	r0, [r7, #12]
 8013478:	60b9      	str	r1, [r7, #8]
 801347a:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 801347c:	4a39      	ldr	r2, [pc, #228]	; (8013564 <_ZNSt6vectorISt4pairIfcESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 801347e:	2101      	movs	r1, #1
 8013480:	68f8      	ldr	r0, [r7, #12]
 8013482:	f001 fc10 	bl	8014ca6 <_ZNKSt6vectorISt4pairIfcESaIS1_EE12_M_check_lenEjPKc>
 8013486:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	685b      	ldr	r3, [r3, #4]
 8013492:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8013494:	68f8      	ldr	r0, [r7, #12]
 8013496:	f7fb fe29 	bl	800f0ec <_ZNSt6vectorISt4pairIfcESaIS1_EE5beginEv>
 801349a:	4603      	mov	r3, r0
 801349c:	617b      	str	r3, [r7, #20]
 801349e:	f107 0214 	add.w	r2, r7, #20
 80134a2:	f107 0308 	add.w	r3, r7, #8
 80134a6:	4611      	mov	r1, r2
 80134a8:	4618      	mov	r0, r3
 80134aa:	f7fb fe40 	bl	800f12e <_ZN9__gnu_cxxmiIPSt4pairIfcESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80134ae:	4603      	mov	r3, r0
 80134b0:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80134b6:	4618      	mov	r0, r3
 80134b8:	f001 fc3c 	bl	8014d34 <_ZNSt12_Vector_baseISt4pairIfcESaIS1_EE11_M_allocateEj>
 80134bc:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80134be:	69fb      	ldr	r3, [r7, #28]
 80134c0:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 80134c2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80134c4:	6a3b      	ldr	r3, [r7, #32]
 80134c6:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 80134c8:	69fa      	ldr	r2, [r7, #28]
 80134ca:	18d5      	adds	r5, r2, r3
 80134cc:	6878      	ldr	r0, [r7, #4]
 80134ce:	f7ff ff97 	bl	8013400 <_ZSt7forwardISt4pairIfcEEOT_RNSt16remove_referenceIS2_E4typeE>
 80134d2:	4603      	mov	r3, r0
 80134d4:	461a      	mov	r2, r3
 80134d6:	4629      	mov	r1, r5
 80134d8:	4620      	mov	r0, r4
 80134da:	f7ff ffb6 	bl	801344a <_ZNSt16allocator_traitsISaISt4pairIfcEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 80134de:	2300      	movs	r3, #0
 80134e0:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80134e2:	f107 0308 	add.w	r3, r7, #8
 80134e6:	4618      	mov	r0, r3
 80134e8:	f7fb fe36 	bl	800f158 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEE4baseEv>
 80134ec:	4603      	mov	r3, r0
 80134ee:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	4618      	mov	r0, r3
 80134f4:	f7fb fc25 	bl	800ed42 <_ZNSt12_Vector_baseISt4pairIfcESaIS1_EE19_M_get_Tp_allocatorEv>
 80134f8:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80134fa:	69fa      	ldr	r2, [r7, #28]
 80134fc:	4621      	mov	r1, r4
 80134fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013500:	f001 fc2c 	bl	8014d5c <_ZNSt6vectorISt4pairIfcESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8013504:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8013506:	69bb      	ldr	r3, [r7, #24]
 8013508:	3308      	adds	r3, #8
 801350a:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 801350c:	f107 0308 	add.w	r3, r7, #8
 8013510:	4618      	mov	r0, r3
 8013512:	f7fb fe21 	bl	800f158 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEE4baseEv>
 8013516:	4603      	mov	r3, r0
 8013518:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	4618      	mov	r0, r3
 801351e:	f7fb fc10 	bl	800ed42 <_ZNSt12_Vector_baseISt4pairIfcESaIS1_EE19_M_get_Tp_allocatorEv>
 8013522:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8013524:	69ba      	ldr	r2, [r7, #24]
 8013526:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013528:	4620      	mov	r0, r4
 801352a:	f001 fc17 	bl	8014d5c <_ZNSt6vectorISt4pairIfcESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 801352e:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8013530:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	689a      	ldr	r2, [r3, #8]
 8013536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013538:	1ad3      	subs	r3, r2, r3
 801353a:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 801353c:	461a      	mov	r2, r3
 801353e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013540:	f7fd fa86 	bl	8010a50 <_ZNSt12_Vector_baseISt4pairIfcESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	69fa      	ldr	r2, [r7, #28]
 8013548:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	69ba      	ldr	r2, [r7, #24]
 801354e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8013550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013552:	00db      	lsls	r3, r3, #3
 8013554:	69fa      	ldr	r2, [r7, #28]
 8013556:	441a      	add	r2, r3
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	609a      	str	r2, [r3, #8]
    }
 801355c:	bf00      	nop
 801355e:	3730      	adds	r7, #48	; 0x30
 8013560:	46bd      	mov	sp, r7
 8013562:	bdb0      	pop	{r4, r5, r7, pc}
 8013564:	08029750 	.word	0x08029750

08013568 <_ZNSt6vectorISt4pairIfcESaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8013568:	b580      	push	{r7, lr}
 801356a:	b084      	sub	sp, #16
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8013570:	6878      	ldr	r0, [r7, #4]
 8013572:	f7fb fdcb 	bl	800f10c <_ZNSt6vectorISt4pairIfcESaIS1_EE3endEv>
 8013576:	4603      	mov	r3, r0
 8013578:	60fb      	str	r3, [r7, #12]
 801357a:	f107 030c 	add.w	r3, r7, #12
 801357e:	2101      	movs	r1, #1
 8013580:	4618      	mov	r0, r3
 8013582:	f7fd fd6d 	bl	8011060 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEmiEi>
 8013586:	4603      	mov	r3, r0
 8013588:	60bb      	str	r3, [r7, #8]
 801358a:	f107 0308 	add.w	r3, r7, #8
 801358e:	4618      	mov	r0, r3
 8013590:	f7fd fd7f 	bl	8011092 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEdeEv>
 8013594:	4603      	mov	r3, r0
      }
 8013596:	4618      	mov	r0, r3
 8013598:	3710      	adds	r7, #16
 801359a:	46bd      	mov	sp, r7
 801359c:	bd80      	pop	{r7, pc}

0801359e <_ZNKSt8__detail10_Synth3wayclIffEEDaRKT_RKT0_>:
	    return noexcept(*__t < *__u) && noexcept(*__u < *__t);
	}

      template<typename _Tp, typename _Up>
	constexpr auto
	operator()(const _Tp& __t, const _Up& __u) const
 801359e:	b480      	push	{r7}
 80135a0:	b085      	sub	sp, #20
 80135a2:	af00      	add	r7, sp, #0
 80135a4:	60f8      	str	r0, [r7, #12]
 80135a6:	60b9      	str	r1, [r7, #8]
 80135a8:	607a      	str	r2, [r7, #4]
	  { __t < __u } -> __boolean_testable;
	  { __u < __t } -> __boolean_testable;
	}
	{
	  if constexpr (three_way_comparable_with<_Tp, _Up>)
	    return __t <=> __u;
 80135aa:	68bb      	ldr	r3, [r7, #8]
 80135ac:	ed93 7a00 	vldr	s14, [r3]
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	edd3 7a00 	vldr	s15, [r3]
 80135b6:	eeb4 7a67 	vcmp.f32	s14, s15
 80135ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135be:	d01b      	beq.n	80135f8 <_ZNKSt8__detail10_Synth3wayclIffEEDaRKT_RKT0_+0x5a>
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	ed93 7a00 	vldr	s14, [r3]
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	edd3 7a00 	vldr	s15, [r3]
 80135cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80135d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135d4:	d501      	bpl.n	80135da <_ZNKSt8__detail10_Synth3wayclIffEEDaRKT_RKT0_+0x3c>
 80135d6:	23ff      	movs	r3, #255	; 0xff
 80135d8:	e00f      	b.n	80135fa <_ZNKSt8__detail10_Synth3wayclIffEEDaRKT_RKT0_+0x5c>
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	ed93 7a00 	vldr	s14, [r3]
 80135e0:	68bb      	ldr	r3, [r7, #8]
 80135e2:	edd3 7a00 	vldr	s15, [r3]
 80135e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80135ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135ee:	d501      	bpl.n	80135f4 <_ZNKSt8__detail10_Synth3wayclIffEEDaRKT_RKT0_+0x56>
 80135f0:	2301      	movs	r3, #1
 80135f2:	e002      	b.n	80135fa <_ZNKSt8__detail10_Synth3wayclIffEEDaRKT_RKT0_+0x5c>
 80135f4:	2302      	movs	r3, #2
 80135f6:	e000      	b.n	80135fa <_ZNKSt8__detail10_Synth3wayclIffEEDaRKT_RKT0_+0x5c>
 80135f8:	2300      	movs	r3, #0
	      else if (__u < __t)
		return weak_ordering::greater;
	      else
		return weak_ordering::equivalent;
	    }
	}
 80135fa:	4618      	mov	r0, r3
 80135fc:	3714      	adds	r7, #20
 80135fe:	46bd      	mov	sp, r7
 8013600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013604:	4770      	bx	lr

08013606 <_ZNKSt8__detail10_Synth3wayclIccEEDaRKT_RKT0_>:
	operator()(const _Tp& __t, const _Up& __u) const
 8013606:	b480      	push	{r7}
 8013608:	b085      	sub	sp, #20
 801360a:	af00      	add	r7, sp, #0
 801360c:	60f8      	str	r0, [r7, #12]
 801360e:	60b9      	str	r1, [r7, #8]
 8013610:	607a      	str	r2, [r7, #4]
	    return __t <=> __u;
 8013612:	68bb      	ldr	r3, [r7, #8]
 8013614:	781a      	ldrb	r2, [r3, #0]
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	781b      	ldrb	r3, [r3, #0]
 801361a:	429a      	cmp	r2, r3
 801361c:	d009      	beq.n	8013632 <_ZNKSt8__detail10_Synth3wayclIccEEDaRKT_RKT0_+0x2c>
 801361e:	68bb      	ldr	r3, [r7, #8]
 8013620:	781a      	ldrb	r2, [r3, #0]
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	781b      	ldrb	r3, [r3, #0]
 8013626:	429a      	cmp	r2, r3
 8013628:	d201      	bcs.n	801362e <_ZNKSt8__detail10_Synth3wayclIccEEDaRKT_RKT0_+0x28>
 801362a:	23ff      	movs	r3, #255	; 0xff
 801362c:	e002      	b.n	8013634 <_ZNKSt8__detail10_Synth3wayclIccEEDaRKT_RKT0_+0x2e>
 801362e:	2301      	movs	r3, #1
 8013630:	e000      	b.n	8013634 <_ZNKSt8__detail10_Synth3wayclIccEEDaRKT_RKT0_+0x2e>
 8013632:	2300      	movs	r3, #0
	}
 8013634:	4618      	mov	r0, r3
 8013636:	3714      	adds	r7, #20
 8013638:	46bd      	mov	sp, r7
 801363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801363e:	4770      	bx	lr

08013640 <_ZNKSt7greaterISt4pairIfcEEclERKS1_S4_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 8013640:	b590      	push	{r4, r7, lr}
 8013642:	b087      	sub	sp, #28
 8013644:	af00      	add	r7, sp, #0
 8013646:	60f8      	str	r0, [r7, #12]
 8013648:	60b9      	str	r1, [r7, #8]
 801364a:	607a      	str	r2, [r7, #4]
      { return __x > __y; }
 801364c:	6879      	ldr	r1, [r7, #4]
 801364e:	68b8      	ldr	r0, [r7, #8]
 8013650:	f001 fb98 	bl	8014d84 <_ZStssIfcENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS3_EEEEDTclL_ZNS1_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS6_EEEEEE4typeERKSt4pairIS2_S5_ESD_>
 8013654:	4604      	mov	r4, r0
 8013656:	f107 0314 	add.w	r3, r7, #20
 801365a:	2100      	movs	r1, #0
 801365c:	4618      	mov	r0, r3
 801365e:	f7f0 ffa3 	bl	80045a8 <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 8013662:	7d39      	ldrb	r1, [r7, #20]
 8013664:	4620      	mov	r0, r4
 8013666:	f7f0 ffcd 	bl	8004604 <_ZStgtSt16partial_orderingNSt9__cmp_cat8__unspecE>
 801366a:	4603      	mov	r3, r0
 801366c:	4618      	mov	r0, r3
 801366e:	371c      	adds	r7, #28
 8013670:	46bd      	mov	sp, r7
 8013672:	bd90      	pop	{r4, r7, pc}

08013674 <_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIfcESt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8013674:	b480      	push	{r7}
 8013676:	b083      	sub	sp, #12
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
 801367c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 801367e:	683b      	ldr	r3, [r7, #0]
 8013680:	681a      	ldr	r2, [r3, #0]
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	601a      	str	r2, [r3, #0]
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	4618      	mov	r0, r3
 801368a:	370c      	adds	r7, #12
 801368c:	46bd      	mov	sp, r7
 801368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013692:	4770      	bx	lr

08013694 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterISt7greaterISt4pairIfcEEEclINS_17__normal_iteratorIPS4_St6vectorIS4_SaIS4_EEEESD_EEbT_T0_>:
        operator()(_Iterator1 __it1, _Iterator2 __it2)
 8013694:	b5b0      	push	{r4, r5, r7, lr}
 8013696:	b084      	sub	sp, #16
 8013698:	af00      	add	r7, sp, #0
 801369a:	60f8      	str	r0, [r7, #12]
 801369c:	60b9      	str	r1, [r7, #8]
 801369e:	607a      	str	r2, [r7, #4]
        { return bool(_M_comp(*__it1, *__it2)); }
 80136a0:	68fc      	ldr	r4, [r7, #12]
 80136a2:	f107 0308 	add.w	r3, r7, #8
 80136a6:	4618      	mov	r0, r3
 80136a8:	f7fd fcf3 	bl	8011092 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEdeEv>
 80136ac:	4605      	mov	r5, r0
 80136ae:	1d3b      	adds	r3, r7, #4
 80136b0:	4618      	mov	r0, r3
 80136b2:	f7fd fcee 	bl	8011092 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEdeEv>
 80136b6:	4603      	mov	r3, r0
 80136b8:	461a      	mov	r2, r3
 80136ba:	4629      	mov	r1, r5
 80136bc:	4620      	mov	r0, r4
 80136be:	f7ff ffbf 	bl	8013640 <_ZNKSt7greaterISt4pairIfcEEclERKS1_S4_>
 80136c2:	4603      	mov	r3, r0
 80136c4:	4618      	mov	r0, r3
 80136c6:	3710      	adds	r7, #16
 80136c8:	46bd      	mov	sp, r7
 80136ca:	bdb0      	pop	{r4, r5, r7, pc}

080136cc <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_comp_iterISt7greaterIS3_EEEEvT_T0_SF_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 80136cc:	b082      	sub	sp, #8
 80136ce:	b590      	push	{r4, r7, lr}
 80136d0:	b08f      	sub	sp, #60	; 0x3c
 80136d2:	af02      	add	r7, sp, #8
 80136d4:	60f8      	str	r0, [r7, #12]
 80136d6:	60b9      	str	r1, [r7, #8]
 80136d8:	607a      	str	r2, [r7, #4]
 80136da:	647b      	str	r3, [r7, #68]	; 0x44
      const _Distance __topIndex = __holeIndex;
 80136dc:	68bb      	ldr	r3, [r7, #8]
 80136de:	62bb      	str	r3, [r7, #40]	; 0x28
      _Distance __secondChild = __holeIndex;
 80136e0:	68bb      	ldr	r3, [r7, #8]
 80136e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      while (__secondChild < (__len - 1) / 2)
 80136e4:	e045      	b.n	8013772 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_comp_iterISt7greaterIS3_EEEEvT_T0_SF_T1_T2_+0xa6>
	  __secondChild = 2 * (__secondChild + 1);
 80136e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136e8:	3301      	adds	r3, #1
 80136ea:	005b      	lsls	r3, r3, #1
 80136ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (__comp(__first + __secondChild,
 80136ee:	f107 030c 	add.w	r3, r7, #12
 80136f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80136f4:	4618      	mov	r0, r3
 80136f6:	f7fd fd0a 	bl	801110e <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEplEi>
 80136fa:	4604      	mov	r4, r0
 80136fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136fe:	1e5a      	subs	r2, r3, #1
 8013700:	f107 030c 	add.w	r3, r7, #12
 8013704:	4611      	mov	r1, r2
 8013706:	4618      	mov	r0, r3
 8013708:	f7fd fd01 	bl	801110e <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEplEi>
 801370c:	4602      	mov	r2, r0
 801370e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013712:	4621      	mov	r1, r4
 8013714:	4618      	mov	r0, r3
 8013716:	f7ff ffbd 	bl	8013694 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterISt7greaterISt4pairIfcEEEclINS_17__normal_iteratorIPS4_St6vectorIS4_SaIS4_EEEESD_EEbT_T0_>
 801371a:	4603      	mov	r3, r0
 801371c:	2b00      	cmp	r3, #0
 801371e:	d002      	beq.n	8013726 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_comp_iterISt7greaterIS3_EEEEvT_T0_SF_T1_T2_+0x5a>
	    __secondChild--;
 8013720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013722:	3b01      	subs	r3, #1
 8013724:	62fb      	str	r3, [r7, #44]	; 0x2c
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8013726:	f107 030c 	add.w	r3, r7, #12
 801372a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801372c:	4618      	mov	r0, r3
 801372e:	f7fd fcee 	bl	801110e <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEplEi>
 8013732:	4603      	mov	r3, r0
 8013734:	61bb      	str	r3, [r7, #24]
 8013736:	f107 0318 	add.w	r3, r7, #24
 801373a:	4618      	mov	r0, r3
 801373c:	f7fd fca9 	bl	8011092 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEdeEv>
 8013740:	4603      	mov	r3, r0
 8013742:	4618      	mov	r0, r3
 8013744:	f7f5 fac5 	bl	8008cd2 <_ZSt4moveIRSt4pairIfcEEONSt16remove_referenceIT_E4typeEOS4_>
 8013748:	4604      	mov	r4, r0
 801374a:	f107 030c 	add.w	r3, r7, #12
 801374e:	68b9      	ldr	r1, [r7, #8]
 8013750:	4618      	mov	r0, r3
 8013752:	f7fd fcdc 	bl	801110e <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEplEi>
 8013756:	4603      	mov	r3, r0
 8013758:	61fb      	str	r3, [r7, #28]
 801375a:	f107 031c 	add.w	r3, r7, #28
 801375e:	4618      	mov	r0, r3
 8013760:	f7fd fc97 	bl	8011092 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEdeEv>
 8013764:	4603      	mov	r3, r0
 8013766:	4621      	mov	r1, r4
 8013768:	4618      	mov	r0, r3
 801376a:	f7fd fc9e 	bl	80110aa <_ZNSt4pairIfcEaSEOS0_>
	  __holeIndex = __secondChild;
 801376e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013770:	60bb      	str	r3, [r7, #8]
      while (__secondChild < (__len - 1) / 2)
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	3b01      	subs	r3, #1
 8013776:	0fda      	lsrs	r2, r3, #31
 8013778:	4413      	add	r3, r2
 801377a:	105b      	asrs	r3, r3, #1
 801377c:	461a      	mov	r2, r3
 801377e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013780:	4293      	cmp	r3, r2
 8013782:	dbb0      	blt.n	80136e6 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_comp_iterISt7greaterIS3_EEEEvT_T0_SF_T1_T2_+0x1a>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	f003 0301 	and.w	r3, r3, #1
 801378a:	2b00      	cmp	r3, #0
 801378c:	d135      	bne.n	80137fa <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_comp_iterISt7greaterIS3_EEEEvT_T0_SF_T1_T2_+0x12e>
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	3b02      	subs	r3, #2
 8013792:	0fda      	lsrs	r2, r3, #31
 8013794:	4413      	add	r3, r2
 8013796:	105b      	asrs	r3, r3, #1
 8013798:	461a      	mov	r2, r3
 801379a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801379c:	4293      	cmp	r3, r2
 801379e:	d12c      	bne.n	80137fa <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops15_Iter_comp_iterISt7greaterIS3_EEEEvT_T0_SF_T1_T2_+0x12e>
	  __secondChild = 2 * (__secondChild + 1);
 80137a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137a2:	3301      	adds	r3, #1
 80137a4:	005b      	lsls	r3, r3, #1
 80137a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 80137a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137aa:	1e5a      	subs	r2, r3, #1
 80137ac:	f107 030c 	add.w	r3, r7, #12
 80137b0:	4611      	mov	r1, r2
 80137b2:	4618      	mov	r0, r3
 80137b4:	f7fd fcab 	bl	801110e <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEplEi>
 80137b8:	4603      	mov	r3, r0
 80137ba:	623b      	str	r3, [r7, #32]
 80137bc:	f107 0320 	add.w	r3, r7, #32
 80137c0:	4618      	mov	r0, r3
 80137c2:	f7fd fc66 	bl	8011092 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEdeEv>
 80137c6:	4603      	mov	r3, r0
 80137c8:	4618      	mov	r0, r3
 80137ca:	f7f5 fa82 	bl	8008cd2 <_ZSt4moveIRSt4pairIfcEEONSt16remove_referenceIT_E4typeEOS4_>
 80137ce:	4604      	mov	r4, r0
 80137d0:	f107 030c 	add.w	r3, r7, #12
 80137d4:	68b9      	ldr	r1, [r7, #8]
 80137d6:	4618      	mov	r0, r3
 80137d8:	f7fd fc99 	bl	801110e <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEplEi>
 80137dc:	4603      	mov	r3, r0
 80137de:	627b      	str	r3, [r7, #36]	; 0x24
 80137e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80137e4:	4618      	mov	r0, r3
 80137e6:	f7fd fc54 	bl	8011092 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS2_SaIS2_EEEdeEv>
 80137ea:	4603      	mov	r3, r0
 80137ec:	4621      	mov	r1, r4
 80137ee:	4618      	mov	r0, r3
 80137f0:	f7fd fc5b 	bl	80110aa <_ZNSt4pairIfcEaSEOS0_>
	  __holeIndex = __secondChild - 1;
 80137f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137f6:	3b01      	subs	r3, #1
 80137f8:	60bb      	str	r3, [r7, #8]
		       _GLIBCXX_MOVE(__value), __cmp);
 80137fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80137fe:	4618      	mov	r0, r3
 8013800:	f7f5 fa67 	bl	8008cd2 <_ZSt4moveIRSt4pairIfcEEONSt16remove_referenceIT_E4typeEOS4_>
 8013804:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 8013806:	f107 0214 	add.w	r2, r7, #20
 801380a:	9201      	str	r2, [sp, #4]
 801380c:	685a      	ldr	r2, [r3, #4]
 801380e:	9200      	str	r2, [sp, #0]
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013814:	68b9      	ldr	r1, [r7, #8]
 8013816:	68f8      	ldr	r0, [r7, #12]
 8013818:	f7fd fc91 	bl	801113e <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPSt4pairIfcESt6vectorIS3_SaIS3_EEEEiS3_NS0_5__ops14_Iter_comp_valISt7greaterIS3_EEEEvT_T0_SF_T1_RT2_>
    }
 801381c:	bf00      	nop
 801381e:	3734      	adds	r7, #52	; 0x34
 8013820:	46bd      	mov	sp, r7
 8013822:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8013826:	b002      	add	sp, #8
 8013828:	4770      	bx	lr

0801382a <_ZSt10destroy_atISt4pairIfcEEvPT_>:
    destroy_at(_Tp* __location)
 801382a:	b480      	push	{r7}
 801382c:	b083      	sub	sp, #12
 801382e:	af00      	add	r7, sp, #0
 8013830:	6078      	str	r0, [r7, #4]
    }
 8013832:	bf00      	nop
 8013834:	370c      	adds	r7, #12
 8013836:	46bd      	mov	sp, r7
 8013838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801383c:	4770      	bx	lr

0801383e <_ZNSt16allocator_traitsISaISt4pairIciEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 801383e:	b580      	push	{r7, lr}
 8013840:	b084      	sub	sp, #16
 8013842:	af00      	add	r7, sp, #0
 8013844:	6078      	str	r0, [r7, #4]
 8013846:	6039      	str	r1, [r7, #0]
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	60fb      	str	r3, [r7, #12]
 801384c:	683b      	ldr	r3, [r7, #0]
 801384e:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8013850:	f7ef f95c 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8013854:	4603      	mov	r3, r0
 8013856:	2b00      	cmp	r3, #0
 8013858:	d006      	beq.n	8013868 <_ZNSt16allocator_traitsISaISt4pairIciEEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801385a:	68bb      	ldr	r3, [r7, #8]
 801385c:	00db      	lsls	r3, r3, #3
 801385e:	4618      	mov	r0, r3
 8013860:	f012 f818 	bl	8025894 <_Znwj>
 8013864:	4603      	mov	r3, r0
 8013866:	e006      	b.n	8013876 <_ZNSt16allocator_traitsISaISt4pairIciEEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8013868:	2200      	movs	r2, #0
 801386a:	68b9      	ldr	r1, [r7, #8]
 801386c:	68f8      	ldr	r0, [r7, #12]
 801386e:	f001 fffe 	bl	801586e <_ZN9__gnu_cxx13new_allocatorISt4pairIciEE8allocateEjPKv>
 8013872:	4603      	mov	r3, r0
 8013874:	bf00      	nop
      { return __a.allocate(__n); }
 8013876:	4618      	mov	r0, r3
 8013878:	3710      	adds	r7, #16
 801387a:	46bd      	mov	sp, r7
 801387c:	bd80      	pop	{r7, pc}

0801387e <_ZSt12__niter_baseIPKSt4pairIciESt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 801387e:	b580      	push	{r7, lr}
 8013880:	b082      	sub	sp, #8
 8013882:	af00      	add	r7, sp, #0
 8013884:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8013886:	1d3b      	adds	r3, r7, #4
 8013888:	4618      	mov	r0, r3
 801388a:	f000 f98a 	bl	8013ba2 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIciESt6vectorIS2_SaIS2_EEE4baseEv>
 801388e:	4603      	mov	r3, r0
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	4618      	mov	r0, r3
 8013894:	3708      	adds	r7, #8
 8013896:	46bd      	mov	sp, r7
 8013898:	bd80      	pop	{r7, pc}

0801389a <_ZSt12__niter_baseIPSt4pairIciESt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 801389a:	b580      	push	{r7, lr}
 801389c:	b082      	sub	sp, #8
 801389e:	af00      	add	r7, sp, #0
 80138a0:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 80138a2:	1d3b      	adds	r3, r7, #4
 80138a4:	4618      	mov	r0, r3
 80138a6:	f000 f82d 	bl	8013904 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS2_SaIS2_EEE4baseEv>
 80138aa:	4603      	mov	r3, r0
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	4618      	mov	r0, r3
 80138b0:	3708      	adds	r7, #8
 80138b2:	46bd      	mov	sp, r7
 80138b4:	bd80      	pop	{r7, pc}

080138b6 <_ZSt14__copy_move_a1ILb0EPKSt4pairIciEPS1_ET1_T0_S6_S5_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80138b6:	b580      	push	{r7, lr}
 80138b8:	b084      	sub	sp, #16
 80138ba:	af00      	add	r7, sp, #0
 80138bc:	60f8      	str	r0, [r7, #12]
 80138be:	60b9      	str	r1, [r7, #8]
 80138c0:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80138c2:	687a      	ldr	r2, [r7, #4]
 80138c4:	68b9      	ldr	r1, [r7, #8]
 80138c6:	68f8      	ldr	r0, [r7, #12]
 80138c8:	f001 fa92 	bl	8014df0 <_ZSt14__copy_move_a2ILb0EPKSt4pairIciEPS1_ET1_T0_S6_S5_>
 80138cc:	4603      	mov	r3, r0
 80138ce:	4618      	mov	r0, r3
 80138d0:	3710      	adds	r7, #16
 80138d2:	46bd      	mov	sp, r7
 80138d4:	bd80      	pop	{r7, pc}

080138d6 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS3_SaIS3_EEEES4_ET_S9_T0_>:
    __niter_wrap(_From __from, _To __res)
 80138d6:	b580      	push	{r7, lr}
 80138d8:	b082      	sub	sp, #8
 80138da:	af00      	add	r7, sp, #0
 80138dc:	6078      	str	r0, [r7, #4]
 80138de:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 80138e0:	6878      	ldr	r0, [r7, #4]
 80138e2:	f7ff ffda 	bl	801389a <_ZSt12__niter_baseIPSt4pairIciESt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 80138e6:	4602      	mov	r2, r0
 80138e8:	683b      	ldr	r3, [r7, #0]
 80138ea:	1a9b      	subs	r3, r3, r2
 80138ec:	10db      	asrs	r3, r3, #3
 80138ee:	461a      	mov	r2, r3
 80138f0:	1d3b      	adds	r3, r7, #4
 80138f2:	4611      	mov	r1, r2
 80138f4:	4618      	mov	r0, r3
 80138f6:	f001 fa98 	bl	8014e2a <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS2_SaIS2_EEEplEi>
 80138fa:	4603      	mov	r3, r0
 80138fc:	4618      	mov	r0, r3
 80138fe:	3708      	adds	r7, #8
 8013900:	46bd      	mov	sp, r7
 8013902:	bd80      	pop	{r7, pc}

08013904 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8013904:	b480      	push	{r7}
 8013906:	b083      	sub	sp, #12
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	4618      	mov	r0, r3
 8013910:	370c      	adds	r7, #12
 8013912:	46bd      	mov	sp, r7
 8013914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013918:	4770      	bx	lr

0801391a <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 801391a:	b480      	push	{r7}
 801391c:	b083      	sub	sp, #12
 801391e:	af00      	add	r7, sp, #0
 8013920:	6078      	str	r0, [r7, #4]
	++_M_current;
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	f103 0208 	add.w	r2, r3, #8
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	601a      	str	r2, [r3, #0]
	return *this;
 801392e:	687b      	ldr	r3, [r7, #4]
      }
 8013930:	4618      	mov	r0, r3
 8013932:	370c      	adds	r7, #12
 8013934:	46bd      	mov	sp, r7
 8013936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801393a:	4770      	bx	lr

0801393c <_ZN9__gnu_cxxeqIPSt4pairIciESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 801393c:	b590      	push	{r4, r7, lr}
 801393e:	b083      	sub	sp, #12
 8013940:	af00      	add	r7, sp, #0
 8013942:	6078      	str	r0, [r7, #4]
 8013944:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8013946:	6878      	ldr	r0, [r7, #4]
 8013948:	f7ff ffdc 	bl	8013904 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS2_SaIS2_EEE4baseEv>
 801394c:	4603      	mov	r3, r0
 801394e:	681c      	ldr	r4, [r3, #0]
 8013950:	6838      	ldr	r0, [r7, #0]
 8013952:	f7ff ffd7 	bl	8013904 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS2_SaIS2_EEE4baseEv>
 8013956:	4603      	mov	r3, r0
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	429c      	cmp	r4, r3
 801395c:	bf0c      	ite	eq
 801395e:	2301      	moveq	r3, #1
 8013960:	2300      	movne	r3, #0
 8013962:	b2db      	uxtb	r3, r3
 8013964:	4618      	mov	r0, r3
 8013966:	370c      	adds	r7, #12
 8013968:	46bd      	mov	sp, r7
 801396a:	bd90      	pop	{r4, r7, pc}

0801396c <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS5_SaIS5_EEEEEEvT_SB_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 801396c:	b580      	push	{r7, lr}
 801396e:	b082      	sub	sp, #8
 8013970:	af00      	add	r7, sp, #0
 8013972:	6078      	str	r0, [r7, #4]
 8013974:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8013976:	e00f      	b.n	8013998 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS5_SaIS5_EEEEEEvT_SB_+0x2c>
	    std::_Destroy(std::__addressof(*__first));
 8013978:	1d3b      	adds	r3, r7, #4
 801397a:	4618      	mov	r0, r3
 801397c:	f000 f8fa 	bl	8013b74 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS2_SaIS2_EEEdeEv>
 8013980:	4603      	mov	r3, r0
 8013982:	4618      	mov	r0, r3
 8013984:	f001 f96d 	bl	8014c62 <_ZSt11__addressofISt4pairIciEEPT_RS2_>
 8013988:	4603      	mov	r3, r0
 801398a:	4618      	mov	r0, r3
 801398c:	f001 f974 	bl	8014c78 <_ZSt8_DestroyISt4pairIciEEvPT_>
	  for (; __first != __last; ++__first)
 8013990:	1d3b      	adds	r3, r7, #4
 8013992:	4618      	mov	r0, r3
 8013994:	f7ff ffc1 	bl	801391a <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS2_SaIS2_EEEppEv>
 8013998:	463a      	mov	r2, r7
 801399a:	1d3b      	adds	r3, r7, #4
 801399c:	4611      	mov	r1, r2
 801399e:	4618      	mov	r0, r3
 80139a0:	f7ff ffcc 	bl	801393c <_ZN9__gnu_cxxeqIPSt4pairIciESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80139a4:	4603      	mov	r3, r0
 80139a6:	f083 0301 	eor.w	r3, r3, #1
 80139aa:	b2db      	uxtb	r3, r3
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d1e3      	bne.n	8013978 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS5_SaIS5_EEEEEEvT_SB_+0xc>
	}
 80139b0:	bf00      	nop
 80139b2:	bf00      	nop
 80139b4:	3708      	adds	r7, #8
 80139b6:	46bd      	mov	sp, r7
 80139b8:	bd80      	pop	{r7, pc}

080139ba <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS5_SaIS5_EEEEEEvT_SB_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80139ba:	b480      	push	{r7}
 80139bc:	b083      	sub	sp, #12
 80139be:	af00      	add	r7, sp, #0
 80139c0:	6078      	str	r0, [r7, #4]
 80139c2:	6039      	str	r1, [r7, #0]
 80139c4:	bf00      	nop
 80139c6:	370c      	adds	r7, #12
 80139c8:	46bd      	mov	sp, r7
 80139ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ce:	4770      	bx	lr

080139d0 <_ZSt14__copy_move_a2ILb0EPSt4pairIciES2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b084      	sub	sp, #16
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	60f8      	str	r0, [r7, #12]
 80139d8:	60b9      	str	r1, [r7, #8]
 80139da:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 80139dc:	f7ef f896 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 80139e0:	4603      	mov	r3, r0
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d006      	beq.n	80139f4 <_ZSt14__copy_move_a2ILb0EPSt4pairIciES2_ET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 80139e6:	687a      	ldr	r2, [r7, #4]
 80139e8:	68b9      	ldr	r1, [r7, #8]
 80139ea:	68f8      	ldr	r0, [r7, #12]
 80139ec:	f001 fa49 	bl	8014e82 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPSt4pairIciES5_EET0_T_S7_S6_>
 80139f0:	4603      	mov	r3, r0
 80139f2:	e006      	b.n	8013a02 <_ZSt14__copy_move_a2ILb0EPSt4pairIciES2_ET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 80139f4:	687a      	ldr	r2, [r7, #4]
 80139f6:	68b9      	ldr	r1, [r7, #8]
 80139f8:	68f8      	ldr	r0, [r7, #12]
 80139fa:	f001 fa42 	bl	8014e82 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPSt4pairIciES5_EET0_T_S7_S6_>
 80139fe:	4603      	mov	r3, r0
 8013a00:	bf00      	nop
    }
 8013a02:	4618      	mov	r0, r3
 8013a04:	3710      	adds	r7, #16
 8013a06:	46bd      	mov	sp, r7
 8013a08:	bd80      	pop	{r7, pc}

08013a0a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIciES4_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8013a0a:	b580      	push	{r7, lr}
 8013a0c:	b086      	sub	sp, #24
 8013a0e:	af00      	add	r7, sp, #0
 8013a10:	60f8      	str	r0, [r7, #12]
 8013a12:	60b9      	str	r1, [r7, #8]
 8013a14:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8013a1a:	e00d      	b.n	8013a38 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIciES4_EET0_T_S6_S5_+0x2e>
		std::_Construct(std::__addressof(*__cur), *__first);
 8013a1c:	6978      	ldr	r0, [r7, #20]
 8013a1e:	f001 f920 	bl	8014c62 <_ZSt11__addressofISt4pairIciEEPT_RS2_>
 8013a22:	4603      	mov	r3, r0
 8013a24:	68f9      	ldr	r1, [r7, #12]
 8013a26:	4618      	mov	r0, r3
 8013a28:	f001 fa4c 	bl	8014ec4 <_ZSt10_ConstructISt4pairIciEJRS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	3308      	adds	r3, #8
 8013a30:	60fb      	str	r3, [r7, #12]
 8013a32:	697b      	ldr	r3, [r7, #20]
 8013a34:	3308      	adds	r3, #8
 8013a36:	617b      	str	r3, [r7, #20]
 8013a38:	68fa      	ldr	r2, [r7, #12]
 8013a3a:	68bb      	ldr	r3, [r7, #8]
 8013a3c:	429a      	cmp	r2, r3
 8013a3e:	d1ed      	bne.n	8013a1c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIciES4_EET0_T_S6_S5_+0x12>
	      return __cur;
 8013a40:	697b      	ldr	r3, [r7, #20]
	}
 8013a42:	4618      	mov	r0, r3
 8013a44:	3718      	adds	r7, #24
 8013a46:	46bd      	mov	sp, r7
 8013a48:	bd80      	pop	{r7, pc}

08013a4a <_ZNKSt6vectorISt4pairIciESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8013a4a:	b590      	push	{r4, r7, lr}
 8013a4c:	b087      	sub	sp, #28
 8013a4e:	af00      	add	r7, sp, #0
 8013a50:	60f8      	str	r0, [r7, #12]
 8013a52:	60b9      	str	r1, [r7, #8]
 8013a54:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8013a56:	68f8      	ldr	r0, [r7, #12]
 8013a58:	f001 fa4b 	bl	8014ef2 <_ZNKSt6vectorISt4pairIciESaIS1_EE8max_sizeEv>
 8013a5c:	4604      	mov	r4, r0
 8013a5e:	68f8      	ldr	r0, [r7, #12]
 8013a60:	f7fa f9e0 	bl	800de24 <_ZNKSt6vectorISt4pairIciESaIS1_EE4sizeEv>
 8013a64:	4603      	mov	r3, r0
 8013a66:	1ae2      	subs	r2, r4, r3
 8013a68:	68bb      	ldr	r3, [r7, #8]
 8013a6a:	429a      	cmp	r2, r3
 8013a6c:	bf34      	ite	cc
 8013a6e:	2301      	movcc	r3, #1
 8013a70:	2300      	movcs	r3, #0
 8013a72:	b2db      	uxtb	r3, r3
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d002      	beq.n	8013a7e <_ZNKSt6vectorISt4pairIciESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8013a78:	6878      	ldr	r0, [r7, #4]
 8013a7a:	f011 ffdd 	bl	8025a38 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8013a7e:	68f8      	ldr	r0, [r7, #12]
 8013a80:	f7fa f9d0 	bl	800de24 <_ZNKSt6vectorISt4pairIciESaIS1_EE4sizeEv>
 8013a84:	4604      	mov	r4, r0
 8013a86:	68f8      	ldr	r0, [r7, #12]
 8013a88:	f7fa f9cc 	bl	800de24 <_ZNKSt6vectorISt4pairIciESaIS1_EE4sizeEv>
 8013a8c:	4603      	mov	r3, r0
 8013a8e:	613b      	str	r3, [r7, #16]
 8013a90:	f107 0208 	add.w	r2, r7, #8
 8013a94:	f107 0310 	add.w	r3, r7, #16
 8013a98:	4611      	mov	r1, r2
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	f7ef ffaf 	bl	80039fe <_ZSt3maxIjERKT_S2_S2_>
 8013aa0:	4603      	mov	r3, r0
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	4423      	add	r3, r4
 8013aa6:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8013aa8:	68f8      	ldr	r0, [r7, #12]
 8013aaa:	f7fa f9bb 	bl	800de24 <_ZNKSt6vectorISt4pairIciESaIS1_EE4sizeEv>
 8013aae:	4602      	mov	r2, r0
 8013ab0:	697b      	ldr	r3, [r7, #20]
 8013ab2:	4293      	cmp	r3, r2
 8013ab4:	d306      	bcc.n	8013ac4 <_ZNKSt6vectorISt4pairIciESaIS1_EE12_M_check_lenEjPKc+0x7a>
 8013ab6:	68f8      	ldr	r0, [r7, #12]
 8013ab8:	f001 fa1b 	bl	8014ef2 <_ZNKSt6vectorISt4pairIciESaIS1_EE8max_sizeEv>
 8013abc:	4602      	mov	r2, r0
 8013abe:	697b      	ldr	r3, [r7, #20]
 8013ac0:	4293      	cmp	r3, r2
 8013ac2:	d904      	bls.n	8013ace <_ZNKSt6vectorISt4pairIciESaIS1_EE12_M_check_lenEjPKc+0x84>
 8013ac4:	68f8      	ldr	r0, [r7, #12]
 8013ac6:	f001 fa14 	bl	8014ef2 <_ZNKSt6vectorISt4pairIciESaIS1_EE8max_sizeEv>
 8013aca:	4603      	mov	r3, r0
 8013acc:	e000      	b.n	8013ad0 <_ZNKSt6vectorISt4pairIciESaIS1_EE12_M_check_lenEjPKc+0x86>
 8013ace:	697b      	ldr	r3, [r7, #20]
      }
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	371c      	adds	r7, #28
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	bd90      	pop	{r4, r7, pc}

08013ad8 <_ZN9__gnu_cxxmiIPSt4pairIciESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8013ad8:	b590      	push	{r4, r7, lr}
 8013ada:	b083      	sub	sp, #12
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	6078      	str	r0, [r7, #4]
 8013ae0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8013ae2:	6878      	ldr	r0, [r7, #4]
 8013ae4:	f7ff ff0e 	bl	8013904 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS2_SaIS2_EEE4baseEv>
 8013ae8:	4603      	mov	r3, r0
 8013aea:	681c      	ldr	r4, [r3, #0]
 8013aec:	6838      	ldr	r0, [r7, #0]
 8013aee:	f7ff ff09 	bl	8013904 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS2_SaIS2_EEE4baseEv>
 8013af2:	4603      	mov	r3, r0
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	1ae3      	subs	r3, r4, r3
 8013af8:	10db      	asrs	r3, r3, #3
 8013afa:	4618      	mov	r0, r3
 8013afc:	370c      	adds	r7, #12
 8013afe:	46bd      	mov	sp, r7
 8013b00:	bd90      	pop	{r4, r7, pc}

08013b02 <_ZNSt6vectorISt4pairIciESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8013b02:	b590      	push	{r4, r7, lr}
 8013b04:	b087      	sub	sp, #28
 8013b06:	af02      	add	r7, sp, #8
 8013b08:	60f8      	str	r0, [r7, #12]
 8013b0a:	60b9      	str	r1, [r7, #8]
 8013b0c:	607a      	str	r2, [r7, #4]
 8013b0e:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8013b10:	f88d 4000 	strb.w	r4, [sp]
 8013b14:	683b      	ldr	r3, [r7, #0]
 8013b16:	687a      	ldr	r2, [r7, #4]
 8013b18:	68b9      	ldr	r1, [r7, #8]
 8013b1a:	68f8      	ldr	r0, [r7, #12]
 8013b1c:	f001 f9fa 	bl	8014f14 <_ZNSt6vectorISt4pairIciESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8013b20:	4603      	mov	r3, r0
      }
 8013b22:	4618      	mov	r0, r3
 8013b24:	3714      	adds	r7, #20
 8013b26:	46bd      	mov	sp, r7
 8013b28:	bd90      	pop	{r4, r7, pc}

08013b2a <_ZNSt16allocator_traitsISaISt4pairIciEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8013b2a:	b580      	push	{r7, lr}
 8013b2c:	b082      	sub	sp, #8
 8013b2e:	af00      	add	r7, sp, #0
 8013b30:	6078      	str	r0, [r7, #4]
 8013b32:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8013b34:	6838      	ldr	r0, [r7, #0]
 8013b36:	f001 f9ff 	bl	8014f38 <_ZSt10destroy_atISt4pairIciEEvPT_>
	}
 8013b3a:	bf00      	nop
 8013b3c:	3708      	adds	r7, #8
 8013b3e:	46bd      	mov	sp, r7
 8013b40:	bd80      	pop	{r7, pc}

08013b42 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8013b42:	b580      	push	{r7, lr}
 8013b44:	b084      	sub	sp, #16
 8013b46:	af00      	add	r7, sp, #0
 8013b48:	6078      	str	r0, [r7, #4]
 8013b4a:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	681a      	ldr	r2, [r3, #0]
 8013b50:	683b      	ldr	r3, [r7, #0]
 8013b52:	00db      	lsls	r3, r3, #3
 8013b54:	425b      	negs	r3, r3
 8013b56:	4413      	add	r3, r2
 8013b58:	60fb      	str	r3, [r7, #12]
 8013b5a:	f107 020c 	add.w	r2, r7, #12
 8013b5e:	f107 0308 	add.w	r3, r7, #8
 8013b62:	4611      	mov	r1, r2
 8013b64:	4618      	mov	r0, r3
 8013b66:	f7fd fd20 	bl	80115aa <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8013b6a:	68bb      	ldr	r3, [r7, #8]
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	3710      	adds	r7, #16
 8013b70:	46bd      	mov	sp, r7
 8013b72:	bd80      	pop	{r7, pc}

08013b74 <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8013b74:	b480      	push	{r7}
 8013b76:	b083      	sub	sp, #12
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	4618      	mov	r0, r3
 8013b82:	370c      	adds	r7, #12
 8013b84:	46bd      	mov	sp, r7
 8013b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b8a:	4770      	bx	lr

08013b8c <_ZN9__gnu_cxx16__aligned_membufISt4pairIKcS1_IfSt6vectorIS1_IciESaIS4_EEEEE7_M_addrEv>:
      _M_addr() noexcept
 8013b8c:	b480      	push	{r7}
 8013b8e:	b083      	sub	sp, #12
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	4618      	mov	r0, r3
 8013b98:	370c      	adds	r7, #12
 8013b9a:	46bd      	mov	sp, r7
 8013b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba0:	4770      	bx	lr

08013ba2 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIciESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8013ba2:	b480      	push	{r7}
 8013ba4:	b083      	sub	sp, #12
 8013ba6:	af00      	add	r7, sp, #0
 8013ba8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	4618      	mov	r0, r3
 8013bae:	370c      	adds	r7, #12
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb6:	4770      	bx	lr

08013bb8 <_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIciESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8013bb8:	b480      	push	{r7}
 8013bba:	b083      	sub	sp, #12
 8013bbc:	af00      	add	r7, sp, #0
 8013bbe:	6078      	str	r0, [r7, #4]
	++_M_current;
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	f103 0208 	add.w	r2, r3, #8
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	601a      	str	r2, [r3, #0]
	return *this;
 8013bcc:	687b      	ldr	r3, [r7, #4]
      }
 8013bce:	4618      	mov	r0, r3
 8013bd0:	370c      	adds	r7, #12
 8013bd2:	46bd      	mov	sp, r7
 8013bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd8:	4770      	bx	lr

08013bda <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIciESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8013bda:	b590      	push	{r4, r7, lr}
 8013bdc:	b087      	sub	sp, #28
 8013bde:	af00      	add	r7, sp, #0
 8013be0:	60f8      	str	r0, [r7, #12]
 8013be2:	60b9      	str	r1, [r7, #8]
 8013be4:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8013bea:	e015      	b.n	8013c18 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIciESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x3e>
		std::_Construct(std::__addressof(*__cur), *__first);
 8013bec:	6978      	ldr	r0, [r7, #20]
 8013bee:	f001 f838 	bl	8014c62 <_ZSt11__addressofISt4pairIciEEPT_RS2_>
 8013bf2:	4604      	mov	r4, r0
 8013bf4:	f107 030c 	add.w	r3, r7, #12
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f001 f9bf 	bl	8014f7c <_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIciESt6vectorIS2_SaIS2_EEEdeEv>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	4619      	mov	r1, r3
 8013c02:	4620      	mov	r0, r4
 8013c04:	f001 f9c6 	bl	8014f94 <_ZSt10_ConstructISt4pairIciEJRKS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8013c08:	f107 030c 	add.w	r3, r7, #12
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	f7ff ffd3 	bl	8013bb8 <_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIciESt6vectorIS2_SaIS2_EEEppEv>
 8013c12:	697b      	ldr	r3, [r7, #20]
 8013c14:	3308      	adds	r3, #8
 8013c16:	617b      	str	r3, [r7, #20]
 8013c18:	f107 0208 	add.w	r2, r7, #8
 8013c1c:	f107 030c 	add.w	r3, r7, #12
 8013c20:	4611      	mov	r1, r2
 8013c22:	4618      	mov	r0, r3
 8013c24:	f001 f992 	bl	8014f4c <_ZN9__gnu_cxxeqIPKSt4pairIciESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8013c28:	4603      	mov	r3, r0
 8013c2a:	f083 0301 	eor.w	r3, r3, #1
 8013c2e:	b2db      	uxtb	r3, r3
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d1db      	bne.n	8013bec <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIciESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x12>
	      return __cur;
 8013c34:	697b      	ldr	r3, [r7, #20]
	}
 8013c36:	4618      	mov	r0, r3
 8013c38:	371c      	adds	r7, #28
 8013c3a:	46bd      	mov	sp, r7
 8013c3c:	bd90      	pop	{r4, r7, pc}

08013c3e <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8013c3e:	b480      	push	{r7}
 8013c40:	b083      	sub	sp, #12
 8013c42:	af00      	add	r7, sp, #0
 8013c44:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	2200      	movs	r2, #0
 8013c4a:	601a      	str	r2, [r3, #0]
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	2200      	movs	r2, #0
 8013c50:	605a      	str	r2, [r3, #4]
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	2200      	movs	r2, #0
 8013c56:	609a      	str	r2, [r3, #8]
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	60da      	str	r2, [r3, #12]
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	4618      	mov	r0, r3
 8013c62:	370c      	adds	r7, #12
 8013c64:	46bd      	mov	sp, r7
 8013c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c6a:	4770      	bx	lr

08013c6c <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8013c6c:	b580      	push	{r7, lr}
 8013c6e:	b084      	sub	sp, #16
 8013c70:	af00      	add	r7, sp, #0
 8013c72:	6078      	str	r0, [r7, #4]
 8013c74:	6039      	str	r1, [r7, #0]
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	60fb      	str	r3, [r7, #12]
 8013c7a:	683b      	ldr	r3, [r7, #0]
 8013c7c:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8013c7e:	f7ee ff45 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8013c82:	4603      	mov	r3, r0
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d006      	beq.n	8013c96 <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013c88:	68bb      	ldr	r3, [r7, #8]
 8013c8a:	009b      	lsls	r3, r3, #2
 8013c8c:	4618      	mov	r0, r3
 8013c8e:	f011 fe01 	bl	8025894 <_Znwj>
 8013c92:	4603      	mov	r3, r0
 8013c94:	e006      	b.n	8013ca4 <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8013c96:	2200      	movs	r2, #0
 8013c98:	68b9      	ldr	r1, [r7, #8]
 8013c9a:	68f8      	ldr	r0, [r7, #12]
 8013c9c:	f001 fe97 	bl	80159ce <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv>
 8013ca0:	4603      	mov	r3, r0
 8013ca2:	bf00      	nop
      { return __a.allocate(__n); }
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	3710      	adds	r7, #16
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	bd80      	pop	{r7, pc}

08013cac <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8013cac:	b480      	push	{r7}
 8013cae:	b083      	sub	sp, #12
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	370c      	adds	r7, #12
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc0:	4770      	bx	lr

08013cc2 <_ZNSaIPfEC1IfEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8013cc2:	b580      	push	{r7, lr}
 8013cc4:	b082      	sub	sp, #8
 8013cc6:	af00      	add	r7, sp, #0
 8013cc8:	6078      	str	r0, [r7, #4]
 8013cca:	6039      	str	r1, [r7, #0]
 8013ccc:	6878      	ldr	r0, [r7, #4]
 8013cce:	f001 f978 	bl	8014fc2 <_ZN9__gnu_cxx13new_allocatorIPfEC1Ev>
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	3708      	adds	r7, #8
 8013cd8:	46bd      	mov	sp, r7
 8013cda:	bd80      	pop	{r7, pc}

08013cdc <_ZNSt5dequeIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b084      	sub	sp, #16
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8013ce4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013ce8:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8013cea:	6878      	ldr	r0, [r7, #4]
 8013cec:	f7ef fefc 	bl	8003ae8 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 8013cf0:	4603      	mov	r3, r0
 8013cf2:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8013cf4:	f107 0208 	add.w	r2, r7, #8
 8013cf8:	f107 030c 	add.w	r3, r7, #12
 8013cfc:	4611      	mov	r1, r2
 8013cfe:	4618      	mov	r0, r3
 8013d00:	f7ef ff40 	bl	8003b84 <_ZSt3minIjERKT_S2_S2_>
 8013d04:	4603      	mov	r3, r0
 8013d06:	681b      	ldr	r3, [r3, #0]
      }
 8013d08:	4618      	mov	r0, r3
 8013d0a:	3710      	adds	r7, #16
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	bd80      	pop	{r7, pc}

08013d10 <_ZSt4copyIPPfS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 8013d10:	b590      	push	{r4, r7, lr}
 8013d12:	b085      	sub	sp, #20
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	60f8      	str	r0, [r7, #12]
 8013d18:	60b9      	str	r1, [r7, #8]
 8013d1a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8013d1c:	68f8      	ldr	r0, [r7, #12]
 8013d1e:	f001 f96a 	bl	8014ff6 <_ZSt12__miter_baseIPPfET_S2_>
 8013d22:	4604      	mov	r4, r0
 8013d24:	68b8      	ldr	r0, [r7, #8]
 8013d26:	f001 f966 	bl	8014ff6 <_ZSt12__miter_baseIPPfET_S2_>
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	687a      	ldr	r2, [r7, #4]
 8013d2e:	4619      	mov	r1, r3
 8013d30:	4620      	mov	r0, r4
 8013d32:	f001 f96b 	bl	801500c <_ZSt13__copy_move_aILb0EPPfS1_ET1_T0_S3_S2_>
 8013d36:	4603      	mov	r3, r0
    }
 8013d38:	4618      	mov	r0, r3
 8013d3a:	3714      	adds	r7, #20
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	bd90      	pop	{r4, r7, pc}

08013d40 <_ZSt13copy_backwardIPPfS1_ET0_T_S3_S2_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8013d40:	b590      	push	{r4, r7, lr}
 8013d42:	b085      	sub	sp, #20
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	60f8      	str	r0, [r7, #12]
 8013d48:	60b9      	str	r1, [r7, #8]
 8013d4a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8013d4c:	68f8      	ldr	r0, [r7, #12]
 8013d4e:	f001 f952 	bl	8014ff6 <_ZSt12__miter_baseIPPfET_S2_>
 8013d52:	4604      	mov	r4, r0
 8013d54:	68b8      	ldr	r0, [r7, #8]
 8013d56:	f001 f94e 	bl	8014ff6 <_ZSt12__miter_baseIPPfET_S2_>
 8013d5a:	4603      	mov	r3, r0
 8013d5c:	687a      	ldr	r2, [r7, #4]
 8013d5e:	4619      	mov	r1, r3
 8013d60:	4620      	mov	r0, r4
 8013d62:	f001 f976 	bl	8015052 <_ZSt22__copy_move_backward_aILb0EPPfS1_ET1_T0_S3_S2_>
 8013d66:	4603      	mov	r3, r0
    }
 8013d68:	4618      	mov	r0, r3
 8013d6a:	3714      	adds	r7, #20
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bd90      	pop	{r4, r7, pc}

08013d70 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8013d70:	b590      	push	{r4, r7, lr}
 8013d72:	b08b      	sub	sp, #44	; 0x2c
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	60f8      	str	r0, [r7, #12]
 8013d78:	60b9      	str	r1, [r7, #8]
 8013d7a:	4613      	mov	r3, r2
 8013d7c:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	695b      	ldr	r3, [r3, #20]
 8013d86:	1ad3      	subs	r3, r2, r3
 8013d88:	109b      	asrs	r3, r3, #2
 8013d8a:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8013d8c:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8013d8e:	68bb      	ldr	r3, [r7, #8]
 8013d90:	6a3a      	ldr	r2, [r7, #32]
 8013d92:	4413      	add	r3, r2
 8013d94:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	685a      	ldr	r2, [r3, #4]
 8013d9a:	69fb      	ldr	r3, [r7, #28]
 8013d9c:	005b      	lsls	r3, r3, #1
 8013d9e:	429a      	cmp	r2, r3
 8013da0:	d92d      	bls.n	8013dfe <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	681a      	ldr	r2, [r3, #0]
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8013daa:	69fb      	ldr	r3, [r7, #28]
 8013dac:	1acb      	subs	r3, r1, r3
 8013dae:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8013db0:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8013db2:	79fb      	ldrb	r3, [r7, #7]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d002      	beq.n	8013dbe <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x4e>
 8013db8:	68bb      	ldr	r3, [r7, #8]
 8013dba:	009b      	lsls	r3, r3, #2
 8013dbc:	e000      	b.n	8013dc0 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x50>
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8013dc2:	4413      	add	r3, r2
 8013dc4:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	695b      	ldr	r3, [r3, #20]
 8013dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013dcc:	429a      	cmp	r2, r3
 8013dce:	d209      	bcs.n	8013de4 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8013dd8:	3304      	adds	r3, #4
 8013dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ddc:	4619      	mov	r1, r3
 8013dde:	f7ff ff97 	bl	8013d10 <_ZSt4copyIPPfS1_ET0_T_S3_S2_>
 8013de2:	e048      	b.n	8013e76 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8013dec:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8013dee:	6a3b      	ldr	r3, [r7, #32]
 8013df0:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8013df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013df4:	4413      	add	r3, r2
 8013df6:	461a      	mov	r2, r3
 8013df8:	f7ff ffa2 	bl	8013d40 <_ZSt13copy_backwardIPPfS1_ET0_T_S3_S2_>
 8013dfc:	e03b      	b.n	8013e76 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	3304      	adds	r3, #4
 8013e06:	f107 0208 	add.w	r2, r7, #8
 8013e0a:	4611      	mov	r1, r2
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	f7ef fdf6 	bl	80039fe <_ZSt3maxIjERKT_S2_S2_>
 8013e12:	4603      	mov	r3, r0
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8013e18:	3302      	adds	r3, #2
 8013e1a:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	69b9      	ldr	r1, [r7, #24]
 8013e20:	4618      	mov	r0, r3
 8013e22:	f7fd fe8d 	bl	8011b40 <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>
 8013e26:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8013e28:	69ba      	ldr	r2, [r7, #24]
 8013e2a:	69fb      	ldr	r3, [r7, #28]
 8013e2c:	1ad3      	subs	r3, r2, r3
 8013e2e:	085b      	lsrs	r3, r3, #1
 8013e30:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8013e32:	79fb      	ldrb	r3, [r7, #7]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d002      	beq.n	8013e3e <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0xce>
 8013e38:	68bb      	ldr	r3, [r7, #8]
 8013e3a:	009b      	lsls	r3, r3, #2
 8013e3c:	e000      	b.n	8013e40 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0xd0>
 8013e3e:	2300      	movs	r3, #0
 8013e40:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8013e42:	697a      	ldr	r2, [r7, #20]
 8013e44:	4413      	add	r3, r2
 8013e46:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8013e50:	3304      	adds	r3, #4
 8013e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e54:	4619      	mov	r1, r3
 8013e56:	f7ff ff5b 	bl	8013d10 <_ZSt4copyIPPfS1_ET0_T_S3_S2_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8013e5a:	68f8      	ldr	r0, [r7, #12]
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	6819      	ldr	r1, [r3, #0]
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	685b      	ldr	r3, [r3, #4]
 8013e64:	461a      	mov	r2, r3
 8013e66:	f7fb fd75 	bl	800f954 <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>

	  this->_M_impl._M_map = __new_map;
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	697a      	ldr	r2, [r7, #20]
 8013e6e:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	69ba      	ldr	r2, [r7, #24]
 8013e74:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	3308      	adds	r3, #8
 8013e7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013e7c:	4618      	mov	r0, r3
 8013e7e:	f7fd fe97 	bl	8011bb0 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	f103 0018 	add.w	r0, r3, #24
 8013e88:	6a3b      	ldr	r3, [r7, #32]
 8013e8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013e8e:	3b01      	subs	r3, #1
 8013e90:	009b      	lsls	r3, r3, #2
 8013e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e94:	4413      	add	r3, r2
 8013e96:	4619      	mov	r1, r3
 8013e98:	f7fd fe8a 	bl	8011bb0 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
    }
 8013e9c:	bf00      	nop
 8013e9e:	372c      	adds	r7, #44	; 0x2c
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	bd90      	pop	{r4, r7, pc}

08013ea4 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b084      	sub	sp, #16
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	6078      	str	r0, [r7, #4]
 8013eac:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	681a      	ldr	r2, [r3, #0]
 8013eb2:	683b      	ldr	r3, [r7, #0]
 8013eb4:	425b      	negs	r3, r3
 8013eb6:	4413      	add	r3, r2
 8013eb8:	60fb      	str	r3, [r7, #12]
 8013eba:	f107 020c 	add.w	r2, r7, #12
 8013ebe:	f107 0308 	add.w	r3, r7, #8
 8013ec2:	4611      	mov	r1, r2
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	f7fb fa14 	bl	800f2f2 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 8013eca:	68bb      	ldr	r3, [r7, #8]
 8013ecc:	4618      	mov	r0, r3
 8013ece:	3710      	adds	r7, #16
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	bd80      	pop	{r7, pc}

08013ed4 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8013ed4:	b480      	push	{r7}
 8013ed6:	b085      	sub	sp, #20
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	60f8      	str	r0, [r7, #12]
 8013edc:	60b9      	str	r1, [r7, #8]
 8013ede:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8013ee0:	68ba      	ldr	r2, [r7, #8]
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	1ad3      	subs	r3, r2, r3
    }
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	3714      	adds	r7, #20
 8013eea:	46bd      	mov	sp, r7
 8013eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef0:	4770      	bx	lr

08013ef2 <_ZSt22__uninitialized_move_aIPcS0_SaIcEET0_T_S3_S2_RT1_>:
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 8013ef2:	b590      	push	{r4, r7, lr}
 8013ef4:	b085      	sub	sp, #20
 8013ef6:	af00      	add	r7, sp, #0
 8013ef8:	60f8      	str	r0, [r7, #12]
 8013efa:	60b9      	str	r1, [r7, #8]
 8013efc:	607a      	str	r2, [r7, #4]
 8013efe:	603b      	str	r3, [r7, #0]
      return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 8013f00:	68f8      	ldr	r0, [r7, #12]
 8013f02:	f001 f8c9 	bl	8015098 <_ZSt18make_move_iteratorIPcESt13move_iteratorIT_ES2_>
 8013f06:	4604      	mov	r4, r0
 8013f08:	68b8      	ldr	r0, [r7, #8]
 8013f0a:	f001 f8c5 	bl	8015098 <_ZSt18make_move_iteratorIPcESt13move_iteratorIT_ES2_>
 8013f0e:	4601      	mov	r1, r0
 8013f10:	683b      	ldr	r3, [r7, #0]
 8013f12:	687a      	ldr	r2, [r7, #4]
 8013f14:	4620      	mov	r0, r4
 8013f16:	f001 f8d4 	bl	80150c2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPcES1_cET0_T_S4_S3_RSaIT1_E>
 8013f1a:	4603      	mov	r3, r0
    }
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	3714      	adds	r7, #20
 8013f20:	46bd      	mov	sp, r7
 8013f22:	bd90      	pop	{r4, r7, pc}

08013f24 <_ZSt12__miter_baseIPcET_S1_>:
    __miter_base(_Iterator __it)
 8013f24:	b480      	push	{r7}
 8013f26:	b083      	sub	sp, #12
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	4618      	mov	r0, r3
 8013f30:	370c      	adds	r7, #12
 8013f32:	46bd      	mov	sp, r7
 8013f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f38:	4770      	bx	lr

08013f3a <_ZSt22__copy_move_backward_aILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8013f3a:	b5b0      	push	{r4, r5, r7, lr}
 8013f3c:	b084      	sub	sp, #16
 8013f3e:	af00      	add	r7, sp, #0
 8013f40:	60f8      	str	r0, [r7, #12]
 8013f42:	60b9      	str	r1, [r7, #8]
 8013f44:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8013f46:	68f8      	ldr	r0, [r7, #12]
 8013f48:	f7fb ff58 	bl	800fdfc <_ZSt12__niter_baseIPcET_S1_>
 8013f4c:	4604      	mov	r4, r0
 8013f4e:	68b8      	ldr	r0, [r7, #8]
 8013f50:	f7fb ff54 	bl	800fdfc <_ZSt12__niter_baseIPcET_S1_>
 8013f54:	4605      	mov	r5, r0
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	4618      	mov	r0, r3
 8013f5a:	f7fb ff4f 	bl	800fdfc <_ZSt12__niter_baseIPcET_S1_>
 8013f5e:	4603      	mov	r3, r0
 8013f60:	461a      	mov	r2, r3
 8013f62:	4629      	mov	r1, r5
 8013f64:	4620      	mov	r0, r4
 8013f66:	f001 f8bd 	bl	80150e4 <_ZSt23__copy_move_backward_a1ILb1EPcS0_ET1_T0_S2_S1_>
 8013f6a:	4602      	mov	r2, r0
 8013f6c:	1d3b      	adds	r3, r7, #4
 8013f6e:	4611      	mov	r1, r2
 8013f70:	4618      	mov	r0, r3
 8013f72:	f7fb ff5e 	bl	800fe32 <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 8013f76:	4603      	mov	r3, r0
    }
 8013f78:	4618      	mov	r0, r3
 8013f7a:	3710      	adds	r7, #16
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	bdb0      	pop	{r4, r5, r7, pc}

08013f80 <_ZSt13__copy_move_aILb0EPcN9__gnu_cxx17__normal_iteratorIS0_St6vectorIcSaIcEEEEET1_T0_S8_S7_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8013f80:	b5b0      	push	{r4, r5, r7, lr}
 8013f82:	b084      	sub	sp, #16
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	60f8      	str	r0, [r7, #12]
 8013f88:	60b9      	str	r1, [r7, #8]
 8013f8a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8013f8c:	68f8      	ldr	r0, [r7, #12]
 8013f8e:	f7fb ff35 	bl	800fdfc <_ZSt12__niter_baseIPcET_S1_>
 8013f92:	4604      	mov	r4, r0
 8013f94:	68b8      	ldr	r0, [r7, #8]
 8013f96:	f7fb ff31 	bl	800fdfc <_ZSt12__niter_baseIPcET_S1_>
 8013f9a:	4605      	mov	r5, r0
 8013f9c:	6878      	ldr	r0, [r7, #4]
 8013f9e:	f001 f8b1 	bl	8015104 <_ZSt12__niter_baseIPcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8013fa2:	4603      	mov	r3, r0
 8013fa4:	461a      	mov	r2, r3
 8013fa6:	4629      	mov	r1, r5
 8013fa8:	4620      	mov	r0, r4
 8013faa:	f001 f8b9 	bl	8015120 <_ZSt14__copy_move_a1ILb0EPcS0_ET1_T0_S2_S1_>
 8013fae:	4603      	mov	r3, r0
 8013fb0:	4619      	mov	r1, r3
 8013fb2:	6878      	ldr	r0, [r7, #4]
 8013fb4:	f001 f8c4 	bl	8015140 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES2_ET_S7_T0_>
 8013fb8:	4603      	mov	r3, r0
    }
 8013fba:	4618      	mov	r0, r3
 8013fbc:	3710      	adds	r7, #16
 8013fbe:	46bd      	mov	sp, r7
 8013fc0:	bdb0      	pop	{r4, r5, r7, pc}

08013fc2 <_ZSt7advanceIPcjEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 8013fc2:	b590      	push	{r4, r7, lr}
 8013fc4:	b085      	sub	sp, #20
 8013fc6:	af00      	add	r7, sp, #0
 8013fc8:	6078      	str	r0, [r7, #4]
 8013fca:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8013fcc:	683b      	ldr	r3, [r7, #0]
 8013fce:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8013fd0:	6878      	ldr	r0, [r7, #4]
 8013fd2:	f7fa fa0a 	bl	800e3ea <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 8013fd6:	4622      	mov	r2, r4
 8013fd8:	68f9      	ldr	r1, [r7, #12]
 8013fda:	6878      	ldr	r0, [r7, #4]
 8013fdc:	f001 f8c5 	bl	801516a <_ZSt9__advanceIPciEvRT_T0_St26random_access_iterator_tag>
    }
 8013fe0:	bf00      	nop
 8013fe2:	3714      	adds	r7, #20
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	bd90      	pop	{r4, r7, pc}

08013fe8 <_ZSt22__uninitialized_copy_aIPcS0_cET0_T_S2_S1_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b084      	sub	sp, #16
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	60f8      	str	r0, [r7, #12]
 8013ff0:	60b9      	str	r1, [r7, #8]
 8013ff2:	607a      	str	r2, [r7, #4]
 8013ff4:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8013ff6:	687a      	ldr	r2, [r7, #4]
 8013ff8:	68b9      	ldr	r1, [r7, #8]
 8013ffa:	68f8      	ldr	r0, [r7, #12]
 8013ffc:	f001 f8c7 	bl	801518e <_ZSt18uninitialized_copyIPcS0_ET0_T_S2_S1_>
 8014000:	4603      	mov	r3, r0
 8014002:	4618      	mov	r0, r3
 8014004:	3710      	adds	r7, #16
 8014006:	46bd      	mov	sp, r7
 8014008:	bd80      	pop	{r7, pc}

0801400a <_ZSt34__uninitialized_move_if_noexcept_aIPcS0_SaIcEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 801400a:	b590      	push	{r4, r7, lr}
 801400c:	b085      	sub	sp, #20
 801400e:	af00      	add	r7, sp, #0
 8014010:	60f8      	str	r0, [r7, #12]
 8014012:	60b9      	str	r1, [r7, #8]
 8014014:	607a      	str	r2, [r7, #4]
 8014016:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8014018:	68f8      	ldr	r0, [r7, #12]
 801401a:	f001 f8ca 	bl	80151b2 <_ZSt32__make_move_if_noexcept_iteratorIcSt13move_iteratorIPcEET0_PT_>
 801401e:	4604      	mov	r4, r0
 8014020:	68b8      	ldr	r0, [r7, #8]
 8014022:	f001 f8c6 	bl	80151b2 <_ZSt32__make_move_if_noexcept_iteratorIcSt13move_iteratorIPcEET0_PT_>
 8014026:	4601      	mov	r1, r0
 8014028:	683b      	ldr	r3, [r7, #0]
 801402a:	687a      	ldr	r2, [r7, #4]
 801402c:	4620      	mov	r0, r4
 801402e:	f001 f848 	bl	80150c2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPcES1_cET0_T_S4_S3_RSaIT1_E>
 8014032:	4603      	mov	r3, r0
    }
 8014034:	4618      	mov	r0, r3
 8014036:	3714      	adds	r7, #20
 8014038:	46bd      	mov	sp, r7
 801403a:	bd90      	pop	{r4, r7, pc}

0801403c <_ZSt4swapIbENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 801403c:	b580      	push	{r7, lr}
 801403e:	b084      	sub	sp, #16
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]
 8014044:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8014046:	6878      	ldr	r0, [r7, #4]
 8014048:	f001 f8c2 	bl	80151d0 <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>
 801404c:	4603      	mov	r3, r0
 801404e:	781b      	ldrb	r3, [r3, #0]
 8014050:	73fb      	strb	r3, [r7, #15]
      __a = _GLIBCXX_MOVE(__b);
 8014052:	6838      	ldr	r0, [r7, #0]
 8014054:	f001 f8bc 	bl	80151d0 <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>
 8014058:	4603      	mov	r3, r0
 801405a:	781a      	ldrb	r2, [r3, #0]
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	701a      	strb	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8014060:	f107 030f 	add.w	r3, r7, #15
 8014064:	4618      	mov	r0, r3
 8014066:	f001 f8b3 	bl	80151d0 <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>
 801406a:	4603      	mov	r3, r0
 801406c:	781a      	ldrb	r2, [r3, #0]
 801406e:	683b      	ldr	r3, [r7, #0]
 8014070:	701a      	strb	r2, [r3, #0]
    }
 8014072:	bf00      	nop
 8014074:	3710      	adds	r7, #16
 8014076:	46bd      	mov	sp, r7
 8014078:	bd80      	pop	{r7, pc}

0801407a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 801407a:	b480      	push	{r7}
 801407c:	b087      	sub	sp, #28
 801407e:	af00      	add	r7, sp, #0
 8014080:	60f8      	str	r0, [r7, #12]
 8014082:	60b9      	str	r1, [r7, #8]
 8014084:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8014086:	68ba      	ldr	r2, [r7, #8]
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	1ad3      	subs	r3, r2, r3
 801408c:	617b      	str	r3, [r7, #20]
 801408e:	e00c      	b.n	80140aa <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_+0x30>
	      *__result = *__first;
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	781a      	ldrb	r2, [r3, #0]
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	701a      	strb	r2, [r3, #0]
	      ++__first;
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	3301      	adds	r3, #1
 801409c:	60fb      	str	r3, [r7, #12]
	      ++__result;
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	3301      	adds	r3, #1
 80140a2:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80140a4:	697b      	ldr	r3, [r7, #20]
 80140a6:	3b01      	subs	r3, #1
 80140a8:	617b      	str	r3, [r7, #20]
 80140aa:	697b      	ldr	r3, [r7, #20]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	dcef      	bgt.n	8014090 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_+0x16>
	  return __result;
 80140b0:	687b      	ldr	r3, [r7, #4]
	}
 80140b2:	4618      	mov	r0, r3
 80140b4:	371c      	adds	r7, #28
 80140b6:	46bd      	mov	sp, r7
 80140b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140bc:	4770      	bx	lr

080140be <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80140be:	b580      	push	{r7, lr}
 80140c0:	b086      	sub	sp, #24
 80140c2:	af00      	add	r7, sp, #0
 80140c4:	60f8      	str	r0, [r7, #12]
 80140c6:	60b9      	str	r1, [r7, #8]
 80140c8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80140ca:	68ba      	ldr	r2, [r7, #8]
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	1ad3      	subs	r3, r2, r3
 80140d0:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80140d2:	697b      	ldr	r3, [r7, #20]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d005      	beq.n	80140e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80140d8:	697b      	ldr	r3, [r7, #20]
 80140da:	461a      	mov	r2, r3
 80140dc:	68f9      	ldr	r1, [r7, #12]
 80140de:	6878      	ldr	r0, [r7, #4]
 80140e0:	f014 fcf2 	bl	8028ac8 <memmove>
	  return __result + _Num;
 80140e4:	697b      	ldr	r3, [r7, #20]
 80140e6:	687a      	ldr	r2, [r7, #4]
 80140e8:	4413      	add	r3, r2
	}
 80140ea:	4618      	mov	r0, r3
 80140ec:	3718      	adds	r7, #24
 80140ee:	46bd      	mov	sp, r7
 80140f0:	bd80      	pop	{r7, pc}

080140f2 <_ZSt11__addressofIcEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80140f2:	b480      	push	{r7}
 80140f4:	b083      	sub	sp, #12
 80140f6:	af00      	add	r7, sp, #0
 80140f8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	4618      	mov	r0, r3
 80140fe:	370c      	adds	r7, #12
 8014100:	46bd      	mov	sp, r7
 8014102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014106:	4770      	bx	lr

08014108 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_>:
	operator()(const _Tp& __t, const _Up& __u) const
 8014108:	b480      	push	{r7}
 801410a:	b085      	sub	sp, #20
 801410c:	af00      	add	r7, sp, #0
 801410e:	60f8      	str	r0, [r7, #12]
 8014110:	60b9      	str	r1, [r7, #8]
 8014112:	607a      	str	r2, [r7, #4]
	    return __t <=> __u;
 8014114:	68bb      	ldr	r3, [r7, #8]
 8014116:	681a      	ldr	r2, [r3, #0]
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	429a      	cmp	r2, r3
 801411e:	d009      	beq.n	8014134 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2c>
 8014120:	68bb      	ldr	r3, [r7, #8]
 8014122:	681a      	ldr	r2, [r3, #0]
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	429a      	cmp	r2, r3
 801412a:	d201      	bcs.n	8014130 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x28>
 801412c:	23ff      	movs	r3, #255	; 0xff
 801412e:	e002      	b.n	8014136 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2e>
 8014130:	2301      	movs	r3, #1
 8014132:	e000      	b.n	8014136 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2e>
 8014134:	2300      	movs	r3, #0
	}
 8014136:	4618      	mov	r0, r3
 8014138:	3714      	adds	r7, #20
 801413a:	46bd      	mov	sp, r7
 801413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014140:	4770      	bx	lr
	...

08014144 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>:
    operator<=>(const __normal_iterator<_Iterator, _Container>& __lhs,
 8014144:	b590      	push	{r4, r7, lr}
 8014146:	b083      	sub	sp, #12
 8014148:	af00      	add	r7, sp, #0
 801414a:	6078      	str	r0, [r7, #4]
 801414c:	6039      	str	r1, [r7, #0]
    { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }
 801414e:	6878      	ldr	r0, [r7, #4]
 8014150:	f7ef fc05 	bl	800395e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8014154:	4604      	mov	r4, r0
 8014156:	6838      	ldr	r0, [r7, #0]
 8014158:	f7ef fc01 	bl	800395e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 801415c:	4603      	mov	r3, r0
 801415e:	461a      	mov	r2, r3
 8014160:	4621      	mov	r1, r4
 8014162:	4804      	ldr	r0, [pc, #16]	; (8014174 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_+0x30>)
 8014164:	f7ff ffd0 	bl	8014108 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_>
 8014168:	4603      	mov	r3, r0
 801416a:	4618      	mov	r0, r3
 801416c:	370c      	adds	r7, #12
 801416e:	46bd      	mov	sp, r7
 8014170:	bd90      	pop	{r4, r7, pc}
 8014172:	bf00      	nop
 8014174:	08029818 	.word	0x08029818

08014178 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __heap_select(_RandomAccessIterator __first,
 8014178:	b590      	push	{r4, r7, lr}
 801417a:	b087      	sub	sp, #28
 801417c:	af00      	add	r7, sp, #0
 801417e:	60f8      	str	r0, [r7, #12]
 8014180:	60b9      	str	r1, [r7, #8]
 8014182:	607a      	str	r2, [r7, #4]
 8014184:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 8014186:	463b      	mov	r3, r7
 8014188:	461a      	mov	r2, r3
 801418a:	68b9      	ldr	r1, [r7, #8]
 801418c:	68f8      	ldr	r0, [r7, #12]
 801418e:	f001 f858 	bl	8015242 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8014192:	68bb      	ldr	r3, [r7, #8]
 8014194:	613b      	str	r3, [r7, #16]
 8014196:	e013      	b.n	80141c0 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x48>
	if (__comp(__i, __first))
 8014198:	463b      	mov	r3, r7
 801419a:	68fa      	ldr	r2, [r7, #12]
 801419c:	6939      	ldr	r1, [r7, #16]
 801419e:	4618      	mov	r0, r3
 80141a0:	f7fe f8eb 	bl	801237a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 80141a4:	4603      	mov	r3, r0
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d005      	beq.n	80141b6 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x3e>
	  std::__pop_heap(__first, __middle, __i, __comp);
 80141aa:	463b      	mov	r3, r7
 80141ac:	693a      	ldr	r2, [r7, #16]
 80141ae:	68b9      	ldr	r1, [r7, #8]
 80141b0:	68f8      	ldr	r0, [r7, #12]
 80141b2:	f001 f89c 	bl	80152ee <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 80141b6:	f107 0310 	add.w	r3, r7, #16
 80141ba:	4618      	mov	r0, r3
 80141bc:	f7fe f8c1 	bl	8012342 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 80141c0:	1d3a      	adds	r2, r7, #4
 80141c2:	f107 0310 	add.w	r3, r7, #16
 80141c6:	4611      	mov	r1, r2
 80141c8:	4618      	mov	r0, r3
 80141ca:	f7ff ffbb 	bl	8014144 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>
 80141ce:	4604      	mov	r4, r0
 80141d0:	f107 0314 	add.w	r3, r7, #20
 80141d4:	2100      	movs	r1, #0
 80141d6:	4618      	mov	r0, r3
 80141d8:	f7f0 f9e6 	bl	80045a8 <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 80141dc:	7d39      	ldrb	r1, [r7, #20]
 80141de:	4620      	mov	r0, r4
 80141e0:	f7f0 fa34 	bl	800464c <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>
 80141e4:	4603      	mov	r3, r0
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d1d6      	bne.n	8014198 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x20>
    }
 80141ea:	bf00      	nop
 80141ec:	bf00      	nop
 80141ee:	371c      	adds	r7, #28
 80141f0:	46bd      	mov	sp, r7
 80141f2:	bd90      	pop	{r4, r7, pc}

080141f4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80141f4:	b480      	push	{r7}
 80141f6:	b083      	sub	sp, #12
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]
	--_M_current;
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	1f1a      	subs	r2, r3, #4
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	601a      	str	r2, [r3, #0]
	return *this;
 8014206:	687b      	ldr	r3, [r7, #4]
      }
 8014208:	4618      	mov	r0, r3
 801420a:	370c      	adds	r7, #12
 801420c:	46bd      	mov	sp, r7
 801420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014212:	4770      	bx	lr

08014214 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8014214:	b580      	push	{r7, lr}
 8014216:	b084      	sub	sp, #16
 8014218:	af00      	add	r7, sp, #0
 801421a:	60f8      	str	r0, [r7, #12]
 801421c:	60b9      	str	r1, [r7, #8]
 801421e:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 8014220:	e00a      	b.n	8014238 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x24>
	{
	  --__last;
 8014222:	f107 0308 	add.w	r3, r7, #8
 8014226:	4618      	mov	r0, r3
 8014228:	f7ff ffe4 	bl	80141f4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	68ba      	ldr	r2, [r7, #8]
 8014230:	68b9      	ldr	r1, [r7, #8]
 8014232:	68f8      	ldr	r0, [r7, #12]
 8014234:	f001 f85b 	bl	80152ee <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      while (__last - __first > 1)
 8014238:	f107 020c 	add.w	r2, r7, #12
 801423c:	f107 0308 	add.w	r3, r7, #8
 8014240:	4611      	mov	r1, r2
 8014242:	4618      	mov	r0, r3
 8014244:	f7ef fb4e 	bl	80038e4 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8014248:	4603      	mov	r3, r0
 801424a:	2b01      	cmp	r3, #1
 801424c:	bfcc      	ite	gt
 801424e:	2301      	movgt	r3, #1
 8014250:	2300      	movle	r3, #0
 8014252:	b2db      	uxtb	r3, r3
 8014254:	2b00      	cmp	r3, #0
 8014256:	d1e4      	bne.n	8014222 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xe>
	}
    }
 8014258:	bf00      	nop
 801425a:	bf00      	nop
 801425c:	3710      	adds	r7, #16
 801425e:	46bd      	mov	sp, r7
 8014260:	bd80      	pop	{r7, pc}

08014262 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8014262:	b580      	push	{r7, lr}
 8014264:	b084      	sub	sp, #16
 8014266:	af00      	add	r7, sp, #0
 8014268:	6078      	str	r0, [r7, #4]
 801426a:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	681a      	ldr	r2, [r3, #0]
 8014270:	683b      	ldr	r3, [r7, #0]
 8014272:	009b      	lsls	r3, r3, #2
 8014274:	425b      	negs	r3, r3
 8014276:	4413      	add	r3, r2
 8014278:	60fb      	str	r3, [r7, #12]
 801427a:	f107 020c 	add.w	r2, r7, #12
 801427e:	f107 0308 	add.w	r3, r7, #8
 8014282:	4611      	mov	r1, r2
 8014284:	4618      	mov	r0, r3
 8014286:	f7ef fac6 	bl	8003816 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 801428a:	68bb      	ldr	r3, [r7, #8]
 801428c:	4618      	mov	r0, r3
 801428e:	3710      	adds	r7, #16
 8014290:	46bd      	mov	sp, r7
 8014292:	bd80      	pop	{r7, pc}

08014294 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 8014294:	b580      	push	{r7, lr}
 8014296:	b084      	sub	sp, #16
 8014298:	af00      	add	r7, sp, #0
 801429a:	60f8      	str	r0, [r7, #12]
 801429c:	60b9      	str	r1, [r7, #8]
 801429e:	607a      	str	r2, [r7, #4]
 80142a0:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 80142a2:	687a      	ldr	r2, [r7, #4]
 80142a4:	68b9      	ldr	r1, [r7, #8]
 80142a6:	f107 0018 	add.w	r0, r7, #24
 80142aa:	f7fe f866 	bl	801237a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 80142ae:	4603      	mov	r3, r0
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d020      	beq.n	80142f6 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x62>
	  if (__comp(__b, __c))
 80142b4:	683a      	ldr	r2, [r7, #0]
 80142b6:	6879      	ldr	r1, [r7, #4]
 80142b8:	f107 0018 	add.w	r0, r7, #24
 80142bc:	f7fe f85d 	bl	801237a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 80142c0:	4603      	mov	r3, r0
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d004      	beq.n	80142d0 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x3c>
	    std::iter_swap(__result, __b);
 80142c6:	6879      	ldr	r1, [r7, #4]
 80142c8:	68f8      	ldr	r0, [r7, #12]
 80142ca:	f001 f850 	bl	801536e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 80142ce:	e032      	b.n	8014336 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	  else if (__comp(__a, __c))
 80142d0:	683a      	ldr	r2, [r7, #0]
 80142d2:	68b9      	ldr	r1, [r7, #8]
 80142d4:	f107 0018 	add.w	r0, r7, #24
 80142d8:	f7fe f84f 	bl	801237a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 80142dc:	4603      	mov	r3, r0
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d004      	beq.n	80142ec <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x58>
	    std::iter_swap(__result, __c);
 80142e2:	6839      	ldr	r1, [r7, #0]
 80142e4:	68f8      	ldr	r0, [r7, #12]
 80142e6:	f001 f842 	bl	801536e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 80142ea:	e024      	b.n	8014336 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	    std::iter_swap(__result, __a);
 80142ec:	68b9      	ldr	r1, [r7, #8]
 80142ee:	68f8      	ldr	r0, [r7, #12]
 80142f0:	f001 f83d 	bl	801536e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 80142f4:	e01f      	b.n	8014336 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__a, __c))
 80142f6:	683a      	ldr	r2, [r7, #0]
 80142f8:	68b9      	ldr	r1, [r7, #8]
 80142fa:	f107 0018 	add.w	r0, r7, #24
 80142fe:	f7fe f83c 	bl	801237a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 8014302:	4603      	mov	r3, r0
 8014304:	2b00      	cmp	r3, #0
 8014306:	d004      	beq.n	8014312 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x7e>
	std::iter_swap(__result, __a);
 8014308:	68b9      	ldr	r1, [r7, #8]
 801430a:	68f8      	ldr	r0, [r7, #12]
 801430c:	f001 f82f 	bl	801536e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 8014310:	e011      	b.n	8014336 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__b, __c))
 8014312:	683a      	ldr	r2, [r7, #0]
 8014314:	6879      	ldr	r1, [r7, #4]
 8014316:	f107 0018 	add.w	r0, r7, #24
 801431a:	f7fe f82e 	bl	801237a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 801431e:	4603      	mov	r3, r0
 8014320:	2b00      	cmp	r3, #0
 8014322:	d004      	beq.n	801432e <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x9a>
	std::iter_swap(__result, __c);
 8014324:	6839      	ldr	r1, [r7, #0]
 8014326:	68f8      	ldr	r0, [r7, #12]
 8014328:	f001 f821 	bl	801536e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 801432c:	e003      	b.n	8014336 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	std::iter_swap(__result, __b);
 801432e:	6879      	ldr	r1, [r7, #4]
 8014330:	68f8      	ldr	r0, [r7, #12]
 8014332:	f001 f81c 	bl	801536e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 8014336:	bf00      	nop
 8014338:	3710      	adds	r7, #16
 801433a:	46bd      	mov	sp, r7
 801433c:	bd80      	pop	{r7, pc}

0801433e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 801433e:	b590      	push	{r4, r7, lr}
 8014340:	b087      	sub	sp, #28
 8014342:	af00      	add	r7, sp, #0
 8014344:	60f8      	str	r0, [r7, #12]
 8014346:	60b9      	str	r1, [r7, #8]
 8014348:	607a      	str	r2, [r7, #4]
 801434a:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 801434c:	e004      	b.n	8014358 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x1a>
	    ++__first;
 801434e:	f107 030c 	add.w	r3, r7, #12
 8014352:	4618      	mov	r0, r3
 8014354:	f7fd fff5 	bl	8012342 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 8014358:	463b      	mov	r3, r7
 801435a:	687a      	ldr	r2, [r7, #4]
 801435c:	68f9      	ldr	r1, [r7, #12]
 801435e:	4618      	mov	r0, r3
 8014360:	f7fe f80b 	bl	801237a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 8014364:	4603      	mov	r3, r0
 8014366:	2b00      	cmp	r3, #0
 8014368:	d1f1      	bne.n	801434e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x10>
	  --__last;
 801436a:	f107 0308 	add.w	r3, r7, #8
 801436e:	4618      	mov	r0, r3
 8014370:	f7ff ff40 	bl	80141f4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 8014374:	e004      	b.n	8014380 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x42>
	    --__last;
 8014376:	f107 0308 	add.w	r3, r7, #8
 801437a:	4618      	mov	r0, r3
 801437c:	f7ff ff3a 	bl	80141f4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 8014380:	463b      	mov	r3, r7
 8014382:	68ba      	ldr	r2, [r7, #8]
 8014384:	6879      	ldr	r1, [r7, #4]
 8014386:	4618      	mov	r0, r3
 8014388:	f7fd fff7 	bl	801237a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 801438c:	4603      	mov	r3, r0
 801438e:	2b00      	cmp	r3, #0
 8014390:	d1f1      	bne.n	8014376 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x38>
	  if (!(__first < __last))
 8014392:	f107 0208 	add.w	r2, r7, #8
 8014396:	f107 030c 	add.w	r3, r7, #12
 801439a:	4611      	mov	r1, r2
 801439c:	4618      	mov	r0, r3
 801439e:	f7ff fed1 	bl	8014144 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>
 80143a2:	4604      	mov	r4, r0
 80143a4:	f107 0314 	add.w	r3, r7, #20
 80143a8:	2100      	movs	r1, #0
 80143aa:	4618      	mov	r0, r3
 80143ac:	f7f0 f8fc 	bl	80045a8 <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 80143b0:	7d39      	ldrb	r1, [r7, #20]
 80143b2:	4620      	mov	r0, r4
 80143b4:	f7f0 f94a 	bl	800464c <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>
 80143b8:	4603      	mov	r3, r0
 80143ba:	f083 0301 	eor.w	r3, r3, #1
 80143be:	b2db      	uxtb	r3, r3
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d001      	beq.n	80143c8 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x8a>
	    return __first;
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	e009      	b.n	80143dc <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x9e>
	  std::iter_swap(__first, __last);
 80143c8:	68b9      	ldr	r1, [r7, #8]
 80143ca:	68f8      	ldr	r0, [r7, #12]
 80143cc:	f000 ffcf 	bl	801536e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
	  ++__first;
 80143d0:	f107 030c 	add.w	r3, r7, #12
 80143d4:	4618      	mov	r0, r3
 80143d6:	f7fd ffb4 	bl	8012342 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 80143da:	e7bd      	b.n	8014358 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x1a>
    }
 80143dc:	4618      	mov	r0, r3
 80143de:	371c      	adds	r7, #28
 80143e0:	46bd      	mov	sp, r7
 80143e2:	bd90      	pop	{r4, r7, pc}

080143e4 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>:
    __miter_base(_Iterator __it)
 80143e4:	b480      	push	{r7}
 80143e6:	b083      	sub	sp, #12
 80143e8:	af00      	add	r7, sp, #0
 80143ea:	6078      	str	r0, [r7, #4]
    { return __it; }
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	4618      	mov	r0, r3
 80143f0:	370c      	adds	r7, #12
 80143f2:	46bd      	mov	sp, r7
 80143f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f8:	4770      	bx	lr

080143fa <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 80143fa:	b5b0      	push	{r4, r5, r7, lr}
 80143fc:	b084      	sub	sp, #16
 80143fe:	af00      	add	r7, sp, #0
 8014400:	60f8      	str	r0, [r7, #12]
 8014402:	60b9      	str	r1, [r7, #8]
 8014404:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8014406:	68f8      	ldr	r0, [r7, #12]
 8014408:	f7fe fa2f 	bl	801286a <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 801440c:	4604      	mov	r4, r0
 801440e:	68b8      	ldr	r0, [r7, #8]
 8014410:	f7fe fa2b 	bl	801286a <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8014414:	4605      	mov	r5, r0
 8014416:	6878      	ldr	r0, [r7, #4]
 8014418:	f7fe fa27 	bl	801286a <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 801441c:	4603      	mov	r3, r0
 801441e:	461a      	mov	r2, r3
 8014420:	4629      	mov	r1, r5
 8014422:	4620      	mov	r0, r4
 8014424:	f000 ffba 	bl	801539c <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>
 8014428:	4603      	mov	r3, r0
 801442a:	4619      	mov	r1, r3
 801442c:	6878      	ldr	r0, [r7, #4]
 801442e:	f7fe fa3a 	bl	80128a6 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 8014432:	4603      	mov	r3, r0
    }
 8014434:	4618      	mov	r0, r3
 8014436:	3710      	adds	r7, #16
 8014438:	46bd      	mov	sp, r7
 801443a:	bdb0      	pop	{r4, r5, r7, pc}

0801443c <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>:
      operator()(_Value& __val, _Iterator __it) const
 801443c:	b580      	push	{r7, lr}
 801443e:	ed2d 8b02 	vpush	{d8}
 8014442:	b084      	sub	sp, #16
 8014444:	af00      	add	r7, sp, #0
 8014446:	60f8      	str	r0, [r7, #12]
 8014448:	60b9      	str	r1, [r7, #8]
 801444a:	607a      	str	r2, [r7, #4]
      { return __val < *__it; }
 801444c:	68bb      	ldr	r3, [r7, #8]
 801444e:	ed93 8a00 	vldr	s16, [r3]
 8014452:	1d3b      	adds	r3, r7, #4
 8014454:	4618      	mov	r0, r3
 8014456:	f7fd ff84 	bl	8012362 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 801445a:	4603      	mov	r3, r0
 801445c:	edd3 7a00 	vldr	s15, [r3]
 8014460:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014468:	bf4c      	ite	mi
 801446a:	2301      	movmi	r3, #1
 801446c:	2300      	movpl	r3, #0
 801446e:	b2db      	uxtb	r3, r3
 8014470:	4618      	mov	r0, r3
 8014472:	3710      	adds	r7, #16
 8014474:	46bd      	mov	sp, r7
 8014476:	ecbd 8b02 	vpop	{d8}
 801447a:	bd80      	pop	{r7, pc}

0801447c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 801447c:	b590      	push	{r4, r7, lr}
 801447e:	b085      	sub	sp, #20
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
 8014484:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 8014486:	1d3b      	adds	r3, r7, #4
 8014488:	4618      	mov	r0, r3
 801448a:	f7fd ff6a 	bl	8012362 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 801448e:	4603      	mov	r3, r0
 8014490:	4618      	mov	r0, r3
 8014492:	f7f9 fe89 	bl	800e1a8 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8014496:	4603      	mov	r3, r0
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	60fb      	str	r3, [r7, #12]
      _RandomAccessIterator __next = __last;
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	60bb      	str	r3, [r7, #8]
      --__next;
 80144a0:	f107 0308 	add.w	r3, r7, #8
 80144a4:	4618      	mov	r0, r3
 80144a6:	f7ff fea5 	bl	80141f4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 80144aa:	e017      	b.n	80144dc <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x60>
	  *__last = _GLIBCXX_MOVE(*__next);
 80144ac:	f107 0308 	add.w	r3, r7, #8
 80144b0:	4618      	mov	r0, r3
 80144b2:	f7fd ff56 	bl	8012362 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 80144b6:	4603      	mov	r3, r0
 80144b8:	4618      	mov	r0, r3
 80144ba:	f7f9 fe75 	bl	800e1a8 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 80144be:	4603      	mov	r3, r0
 80144c0:	681c      	ldr	r4, [r3, #0]
 80144c2:	1d3b      	adds	r3, r7, #4
 80144c4:	4618      	mov	r0, r3
 80144c6:	f7fd ff4c 	bl	8012362 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 80144ca:	4603      	mov	r3, r0
 80144cc:	601c      	str	r4, [r3, #0]
	  __last = __next;
 80144ce:	68bb      	ldr	r3, [r7, #8]
 80144d0:	607b      	str	r3, [r7, #4]
	  --__next;
 80144d2:	f107 0308 	add.w	r3, r7, #8
 80144d6:	4618      	mov	r0, r3
 80144d8:	f7ff fe8c 	bl	80141f4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 80144dc:	f107 010c 	add.w	r1, r7, #12
 80144e0:	463b      	mov	r3, r7
 80144e2:	68ba      	ldr	r2, [r7, #8]
 80144e4:	4618      	mov	r0, r3
 80144e6:	f7ff ffa9 	bl	801443c <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>
 80144ea:	4603      	mov	r3, r0
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d1dd      	bne.n	80144ac <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x30>
      *__last = _GLIBCXX_MOVE(__val);
 80144f0:	f107 030c 	add.w	r3, r7, #12
 80144f4:	4618      	mov	r0, r3
 80144f6:	f7f9 fe57 	bl	800e1a8 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 80144fa:	4603      	mov	r3, r0
 80144fc:	681c      	ldr	r4, [r3, #0]
 80144fe:	1d3b      	adds	r3, r7, #4
 8014500:	4618      	mov	r0, r3
 8014502:	f7fd ff2e 	bl	8012362 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8014506:	4603      	mov	r3, r0
 8014508:	601c      	str	r4, [r3, #0]
    }
 801450a:	bf00      	nop
 801450c:	3714      	adds	r7, #20
 801450e:	46bd      	mov	sp, r7
 8014510:	bd90      	pop	{r4, r7, pc}

08014512 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EC1ES4_>:
      _Iter_negate(_Predicate __pred)
 8014512:	b580      	push	{r7, lr}
 8014514:	b082      	sub	sp, #8
 8014516:	af00      	add	r7, sp, #0
 8014518:	6078      	str	r0, [r7, #4]
 801451a:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 801451c:	463b      	mov	r3, r7
 801451e:	4618      	mov	r0, r3
 8014520:	f7fd fff9 	bl	8012516 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	4618      	mov	r0, r3
 8014528:	3708      	adds	r7, #8
 801452a:	46bd      	mov	sp, r7
 801452c:	bd80      	pop	{r7, pc}

0801452e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EC1ES4_>:
      _Iter_negate(_Predicate __pred)
 801452e:	b580      	push	{r7, lr}
 8014530:	b082      	sub	sp, #8
 8014532:	af00      	add	r7, sp, #0
 8014534:	6078      	str	r0, [r7, #4]
 8014536:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 8014538:	463b      	mov	r3, r7
 801453a:	4618      	mov	r0, r3
 801453c:	f7fe f8aa 	bl	8012694 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	4618      	mov	r0, r3
 8014544:	3708      	adds	r7, #8
 8014546:	46bd      	mov	sp, r7
 8014548:	bd80      	pop	{r7, pc}

0801454a <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 801454a:	b480      	push	{r7}
 801454c:	b083      	sub	sp, #12
 801454e:	af00      	add	r7, sp, #0
 8014550:	6078      	str	r0, [r7, #4]
 8014552:	6039      	str	r1, [r7, #0]
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	4618      	mov	r0, r3
 8014558:	370c      	adds	r7, #12
 801455a:	46bd      	mov	sp, r7
 801455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014560:	4770      	bx	lr

08014562 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 8014562:	b590      	push	{r4, r7, lr}
 8014564:	b085      	sub	sp, #20
 8014566:	af00      	add	r7, sp, #0
 8014568:	60f8      	str	r0, [r7, #12]
 801456a:	60b9      	str	r1, [r7, #8]
 801456c:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 801456e:	68f8      	ldr	r0, [r7, #12]
 8014570:	f7fb fd90 	bl	8010094 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8014574:	4604      	mov	r4, r0
 8014576:	68b8      	ldr	r0, [r7, #8]
 8014578:	f7fb fd8c 	bl	8010094 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 801457c:	4603      	mov	r3, r0
 801457e:	687a      	ldr	r2, [r7, #4]
 8014580:	4619      	mov	r1, r3
 8014582:	4620      	mov	r0, r4
 8014584:	f000 ff1a 	bl	80153bc <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 8014588:	4603      	mov	r3, r0
    }
 801458a:	4618      	mov	r0, r3
 801458c:	3714      	adds	r7, #20
 801458e:	46bd      	mov	sp, r7
 8014590:	bd90      	pop	{r4, r7, pc}

08014592 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8014592:	b480      	push	{r7}
 8014594:	b083      	sub	sp, #12
 8014596:	af00      	add	r7, sp, #0
 8014598:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	4618      	mov	r0, r3
 801459e:	370c      	adds	r7, #12
 80145a0:	46bd      	mov	sp, r7
 80145a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a6:	4770      	bx	lr

080145a8 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b084      	sub	sp, #16
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	60f8      	str	r0, [r7, #12]
 80145b0:	60b9      	str	r1, [r7, #8]
 80145b2:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 80145b4:	f7ee faaa 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 80145b8:	4603      	mov	r3, r0
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d006      	beq.n	80145cc <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 80145be:	687a      	ldr	r2, [r7, #4]
 80145c0:	68b9      	ldr	r1, [r7, #8]
 80145c2:	68f8      	ldr	r0, [r7, #12]
 80145c4:	f000 ff1d 	bl	8015402 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>
 80145c8:	4603      	mov	r3, r0
 80145ca:	e006      	b.n	80145da <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 80145cc:	687a      	ldr	r2, [r7, #4]
 80145ce:	68b9      	ldr	r1, [r7, #8]
 80145d0:	68f8      	ldr	r0, [r7, #12]
 80145d2:	f000 f829 	bl	8014628 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 80145d6:	4603      	mov	r3, r0
 80145d8:	bf00      	nop
    }
 80145da:	4618      	mov	r0, r3
 80145dc:	3710      	adds	r7, #16
 80145de:	46bd      	mov	sp, r7
 80145e0:	bd80      	pop	{r7, pc}

080145e2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_>:
	__copy_m(_II __first, _II __last, _OI __result)
 80145e2:	b480      	push	{r7}
 80145e4:	b087      	sub	sp, #28
 80145e6:	af00      	add	r7, sp, #0
 80145e8:	60f8      	str	r0, [r7, #12]
 80145ea:	60b9      	str	r1, [r7, #8]
 80145ec:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80145ee:	68ba      	ldr	r2, [r7, #8]
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	1ad3      	subs	r3, r2, r3
 80145f4:	109b      	asrs	r3, r3, #2
 80145f6:	617b      	str	r3, [r7, #20]
 80145f8:	e00c      	b.n	8014614 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_+0x32>
	      *__result = *__first;
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	681a      	ldr	r2, [r3, #0]
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	601a      	str	r2, [r3, #0]
	      ++__first;
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	3304      	adds	r3, #4
 8014606:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	3304      	adds	r3, #4
 801460c:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 801460e:	697b      	ldr	r3, [r7, #20]
 8014610:	3b01      	subs	r3, #1
 8014612:	617b      	str	r3, [r7, #20]
 8014614:	697b      	ldr	r3, [r7, #20]
 8014616:	2b00      	cmp	r3, #0
 8014618:	dcef      	bgt.n	80145fa <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_+0x18>
	  return __result;
 801461a:	687b      	ldr	r3, [r7, #4]
	}
 801461c:	4618      	mov	r0, r3
 801461e:	371c      	adds	r7, #28
 8014620:	46bd      	mov	sp, r7
 8014622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014626:	4770      	bx	lr

08014628 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8014628:	b580      	push	{r7, lr}
 801462a:	b086      	sub	sp, #24
 801462c:	af00      	add	r7, sp, #0
 801462e:	60f8      	str	r0, [r7, #12]
 8014630:	60b9      	str	r1, [r7, #8]
 8014632:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8014634:	68ba      	ldr	r2, [r7, #8]
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	1ad3      	subs	r3, r2, r3
 801463a:	109b      	asrs	r3, r3, #2
 801463c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 801463e:	697b      	ldr	r3, [r7, #20]
 8014640:	2b00      	cmp	r3, #0
 8014642:	d006      	beq.n	8014652 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8014644:	697b      	ldr	r3, [r7, #20]
 8014646:	009b      	lsls	r3, r3, #2
 8014648:	461a      	mov	r2, r3
 801464a:	68f9      	ldr	r1, [r7, #12]
 801464c:	6878      	ldr	r0, [r7, #4]
 801464e:	f014 fa3b 	bl	8028ac8 <memmove>
	  return __result + _Num;
 8014652:	697b      	ldr	r3, [r7, #20]
 8014654:	009b      	lsls	r3, r3, #2
 8014656:	687a      	ldr	r2, [r7, #4]
 8014658:	4413      	add	r3, r2
	}
 801465a:	4618      	mov	r0, r3
 801465c:	3718      	adds	r7, #24
 801465e:	46bd      	mov	sp, r7
 8014660:	bd80      	pop	{r7, pc}

08014662 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 8014662:	b590      	push	{r4, r7, lr}
 8014664:	b085      	sub	sp, #20
 8014666:	af00      	add	r7, sp, #0
 8014668:	60f8      	str	r0, [r7, #12]
 801466a:	60b9      	str	r1, [r7, #8]
 801466c:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 801466e:	68f8      	ldr	r0, [r7, #12]
 8014670:	f000 feea 	bl	8015448 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>
 8014674:	4604      	mov	r4, r0
 8014676:	68b8      	ldr	r0, [r7, #8]
 8014678:	f000 fee6 	bl	8015448 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>
 801467c:	4603      	mov	r3, r0
 801467e:	687a      	ldr	r2, [r7, #4]
 8014680:	4619      	mov	r1, r3
 8014682:	4620      	mov	r0, r4
 8014684:	f000 feeb 	bl	801545e <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET1_T0_SA_S9_>
 8014688:	4603      	mov	r3, r0
    }
 801468a:	4618      	mov	r0, r3
 801468c:	3714      	adds	r7, #20
 801468e:	46bd      	mov	sp, r7
 8014690:	bd90      	pop	{r4, r7, pc}

08014692 <_ZSt8_DestroyIcEvPT_>:
    _Destroy(_Tp* __pointer)
 8014692:	b580      	push	{r7, lr}
 8014694:	b082      	sub	sp, #8
 8014696:	af00      	add	r7, sp, #0
 8014698:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 801469a:	6878      	ldr	r0, [r7, #4]
 801469c:	f7fe fbe0 	bl	8012e60 <_ZSt10destroy_atIcEvPT_>
    }
 80146a0:	bf00      	nop
 80146a2:	3708      	adds	r7, #8
 80146a4:	46bd      	mov	sp, r7
 80146a6:	bd80      	pop	{r7, pc}

080146a8 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b084      	sub	sp, #16
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	60f8      	str	r0, [r7, #12]
 80146b0:	60b9      	str	r1, [r7, #8]
 80146b2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80146b4:	687a      	ldr	r2, [r7, #4]
 80146b6:	4613      	mov	r3, r2
 80146b8:	005b      	lsls	r3, r3, #1
 80146ba:	4413      	add	r3, r2
 80146bc:	00db      	lsls	r3, r3, #3
 80146be:	4619      	mov	r1, r3
 80146c0:	68b8      	ldr	r0, [r7, #8]
 80146c2:	f011 f8e5 	bl	8025890 <_ZdlPvj>
      }
 80146c6:	3710      	adds	r7, #16
 80146c8:	46bd      	mov	sp, r7
 80146ca:	bd80      	pop	{r7, pc}

080146cc <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80146cc:	b480      	push	{r7}
 80146ce:	b083      	sub	sp, #12
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	4618      	mov	r0, r3
 80146d8:	370c      	adds	r7, #12
 80146da:	46bd      	mov	sp, r7
 80146dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e0:	4770      	bx	lr

080146e2 <_ZSt8_DestroyIN3jlb4EdgeEEvPT_>:
    _Destroy(_Tp* __pointer)
 80146e2:	b580      	push	{r7, lr}
 80146e4:	b082      	sub	sp, #8
 80146e6:	af00      	add	r7, sp, #0
 80146e8:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 80146ea:	6878      	ldr	r0, [r7, #4]
 80146ec:	f000 f878 	bl	80147e0 <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>
    }
 80146f0:	bf00      	nop
 80146f2:	3708      	adds	r7, #8
 80146f4:	46bd      	mov	sp, r7
 80146f6:	bd80      	pop	{r7, pc}

080146f8 <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80146f8:	b480      	push	{r7}
 80146fa:	b083      	sub	sp, #12
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	4618      	mov	r0, r3
 8014704:	370c      	adds	r7, #12
 8014706:	46bd      	mov	sp, r7
 8014708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801470c:	4770      	bx	lr

0801470e <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1EOS2_>:
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 801470e:	b480      	push	{r7}
 8014710:	b083      	sub	sp, #12
 8014712:	af00      	add	r7, sp, #0
 8014714:	6078      	str	r0, [r7, #4]
 8014716:	6039      	str	r1, [r7, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8014718:	683b      	ldr	r3, [r7, #0]
 801471a:	681a      	ldr	r2, [r3, #0]
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	601a      	str	r2, [r3, #0]
 8014720:	683b      	ldr	r3, [r7, #0]
 8014722:	685a      	ldr	r2, [r3, #4]
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8014728:	683b      	ldr	r3, [r7, #0]
 801472a:	689a      	ldr	r2, [r3, #8]
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	609a      	str	r2, [r3, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8014730:	683b      	ldr	r3, [r7, #0]
 8014732:	2200      	movs	r2, #0
 8014734:	609a      	str	r2, [r3, #8]
 8014736:	683b      	ldr	r3, [r7, #0]
 8014738:	689a      	ldr	r2, [r3, #8]
 801473a:	683b      	ldr	r3, [r7, #0]
 801473c:	605a      	str	r2, [r3, #4]
 801473e:	683b      	ldr	r3, [r7, #0]
 8014740:	685a      	ldr	r2, [r3, #4]
 8014742:	683b      	ldr	r3, [r7, #0]
 8014744:	601a      	str	r2, [r3, #0]
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	4618      	mov	r0, r3
 801474a:	370c      	adds	r7, #12
 801474c:	46bd      	mov	sp, r7
 801474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014752:	4770      	bx	lr

08014754 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8014754:	b580      	push	{r7, lr}
 8014756:	b082      	sub	sp, #8
 8014758:	af00      	add	r7, sp, #0
 801475a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	4618      	mov	r0, r3
 8014760:	f000 f88c 	bl	801487c <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 8014764:	4603      	mov	r3, r0
 8014766:	4618      	mov	r0, r3
 8014768:	f000 feaa 	bl	80154c0 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_>
 801476c:	4603      	mov	r3, r0
 801476e:	4618      	mov	r0, r3
 8014770:	3708      	adds	r7, #8
 8014772:	46bd      	mov	sp, r7
 8014774:	bd80      	pop	{r7, pc}

08014776 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8014776:	b580      	push	{r7, lr}
 8014778:	b084      	sub	sp, #16
 801477a:	af00      	add	r7, sp, #0
 801477c:	6078      	str	r0, [r7, #4]
 801477e:	6039      	str	r1, [r7, #0]
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	60fb      	str	r3, [r7, #12]
 8014784:	683b      	ldr	r3, [r7, #0]
 8014786:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8014788:	f7ee f9c0 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 801478c:	4603      	mov	r3, r0
 801478e:	2b00      	cmp	r3, #0
 8014790:	d009      	beq.n	80147a6 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8014792:	68ba      	ldr	r2, [r7, #8]
 8014794:	4613      	mov	r3, r2
 8014796:	005b      	lsls	r3, r3, #1
 8014798:	4413      	add	r3, r2
 801479a:	00db      	lsls	r3, r3, #3
 801479c:	4618      	mov	r0, r3
 801479e:	f011 f879 	bl	8025894 <_Znwj>
 80147a2:	4603      	mov	r3, r0
 80147a4:	e006      	b.n	80147b4 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80147a6:	2200      	movs	r2, #0
 80147a8:	68b9      	ldr	r1, [r7, #8]
 80147aa:	68f8      	ldr	r0, [r7, #12]
 80147ac:	f001 faea 	bl	8015d84 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv>
 80147b0:	4603      	mov	r3, r0
 80147b2:	bf00      	nop
      { return __a.allocate(__n); }
 80147b4:	4618      	mov	r0, r3
 80147b6:	3710      	adds	r7, #16
 80147b8:	46bd      	mov	sp, r7
 80147ba:	bd80      	pop	{r7, pc}

080147bc <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80147bc:	b580      	push	{r7, lr}
 80147be:	b084      	sub	sp, #16
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	60f8      	str	r0, [r7, #12]
 80147c4:	60b9      	str	r1, [r7, #8]
 80147c6:	607a      	str	r2, [r7, #4]
 80147c8:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80147ca:	683b      	ldr	r3, [r7, #0]
 80147cc:	687a      	ldr	r2, [r7, #4]
 80147ce:	68b9      	ldr	r1, [r7, #8]
 80147d0:	68f8      	ldr	r0, [r7, #12]
 80147d2:	f000 fe91 	bl	80154f8 <_ZSt12__relocate_aIPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>
 80147d6:	4603      	mov	r3, r0
      }
 80147d8:	4618      	mov	r0, r3
 80147da:	3710      	adds	r7, #16
 80147dc:	46bd      	mov	sp, r7
 80147de:	bd80      	pop	{r7, pc}

080147e0 <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>:
    destroy_at(_Tp* __location)
 80147e0:	b580      	push	{r7, lr}
 80147e2:	b082      	sub	sp, #8
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 80147e8:	6878      	ldr	r0, [r7, #4]
 80147ea:	f7f0 fe59 	bl	80054a0 <_ZN3jlb4EdgeD1Ev>
    }
 80147ee:	bf00      	nop
 80147f0:	3708      	adds	r7, #8
 80147f2:	46bd      	mov	sp, r7
 80147f4:	bd80      	pop	{r7, pc}

080147f6 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 80147f6:	b580      	push	{r7, lr}
 80147f8:	b084      	sub	sp, #16
 80147fa:	af00      	add	r7, sp, #0
 80147fc:	60f8      	str	r0, [r7, #12]
 80147fe:	60b9      	str	r1, [r7, #8]
 8014800:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8014802:	687a      	ldr	r2, [r7, #4]
 8014804:	4613      	mov	r3, r2
 8014806:	005b      	lsls	r3, r3, #1
 8014808:	4413      	add	r3, r2
 801480a:	00db      	lsls	r3, r3, #3
 801480c:	4619      	mov	r1, r3
 801480e:	68b8      	ldr	r0, [r7, #8]
 8014810:	f011 f83e 	bl	8025890 <_ZdlPvj>
      }
 8014814:	3710      	adds	r7, #16
 8014816:	46bd      	mov	sp, r7
 8014818:	bd80      	pop	{r7, pc}

0801481a <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 801481a:	b480      	push	{r7}
 801481c:	b083      	sub	sp, #12
 801481e:	af00      	add	r7, sp, #0
 8014820:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	4618      	mov	r0, r3
 8014826:	370c      	adds	r7, #12
 8014828:	46bd      	mov	sp, r7
 801482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801482e:	4770      	bx	lr

08014830 <_ZSt8_DestroyIN3jlb4NodeEEvPT_>:
    _Destroy(_Tp* __pointer)
 8014830:	b580      	push	{r7, lr}
 8014832:	b082      	sub	sp, #8
 8014834:	af00      	add	r7, sp, #0
 8014836:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8014838:	6878      	ldr	r0, [r7, #4]
 801483a:	f000 f8d6 	bl	80149ea <_ZSt10destroy_atIN3jlb4NodeEEvPT_>
    }
 801483e:	bf00      	nop
 8014840:	3708      	adds	r7, #8
 8014842:	46bd      	mov	sp, r7
 8014844:	bd80      	pop	{r7, pc}

08014846 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8014846:	b580      	push	{r7, lr}
 8014848:	b084      	sub	sp, #16
 801484a:	af00      	add	r7, sp, #0
 801484c:	60f8      	str	r0, [r7, #12]
 801484e:	60b9      	str	r1, [r7, #8]
 8014850:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8014852:	6879      	ldr	r1, [r7, #4]
 8014854:	68b8      	ldr	r0, [r7, #8]
 8014856:	f011 f81b 	bl	8025890 <_ZdlPvj>
      }
 801485a:	3710      	adds	r7, #16
 801485c:	46bd      	mov	sp, r7
 801485e:	bd80      	pop	{r7, pc}

08014860 <_ZN9__gnu_cxx14__alloc_traitsISaIN3jlb4EdgeEES2_E17_S_select_on_copyERKS3_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8014860:	b580      	push	{r7, lr}
 8014862:	b082      	sub	sp, #8
 8014864:	af00      	add	r7, sp, #0
 8014866:	6078      	str	r0, [r7, #4]
 8014868:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	6839      	ldr	r1, [r7, #0]
 801486e:	4618      	mov	r0, r3
 8014870:	f000 fe5f 	bl	8015532 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE37select_on_container_copy_constructionERKS2_>
 8014874:	6878      	ldr	r0, [r7, #4]
 8014876:	3708      	adds	r7, #8
 8014878:	46bd      	mov	sp, r7
 801487a:	bd80      	pop	{r7, pc}

0801487c <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 801487c:	b480      	push	{r7}
 801487e:	b083      	sub	sp, #12
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	4618      	mov	r0, r3
 8014888:	370c      	adds	r7, #12
 801488a:	46bd      	mov	sp, r7
 801488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014890:	4770      	bx	lr

08014892 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1EjRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8014892:	b580      	push	{r7, lr}
 8014894:	b084      	sub	sp, #16
 8014896:	af00      	add	r7, sp, #0
 8014898:	60f8      	str	r0, [r7, #12]
 801489a:	60b9      	str	r1, [r7, #8]
 801489c:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	6879      	ldr	r1, [r7, #4]
 80148a2:	4618      	mov	r0, r3
 80148a4:	f000 fe52 	bl	801554c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
 80148a8:	68b9      	ldr	r1, [r7, #8]
 80148aa:	68f8      	ldr	r0, [r7, #12]
 80148ac:	f000 fe60 	bl	8015570 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_M_create_storageEj>
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	4618      	mov	r0, r3
 80148b4:	3710      	adds	r7, #16
 80148b6:	46bd      	mov	sp, r7
 80148b8:	bd80      	pop	{r7, pc}

080148ba <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80148ba:	b580      	push	{r7, lr}
 80148bc:	b084      	sub	sp, #16
 80148be:	af00      	add	r7, sp, #0
 80148c0:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80148c2:	687a      	ldr	r2, [r7, #4]
 80148c4:	f107 030c 	add.w	r3, r7, #12
 80148c8:	4611      	mov	r1, r2
 80148ca:	4618      	mov	r0, r3
 80148cc:	f000 fe6e 	bl	80155ac <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	4618      	mov	r0, r3
 80148d4:	3710      	adds	r7, #16
 80148d6:	46bd      	mov	sp, r7
 80148d8:	bd80      	pop	{r7, pc}

080148da <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80148da:	b580      	push	{r7, lr}
 80148dc:	b084      	sub	sp, #16
 80148de:	af00      	add	r7, sp, #0
 80148e0:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	1d1a      	adds	r2, r3, #4
 80148e6:	f107 030c 	add.w	r3, r7, #12
 80148ea:	4611      	mov	r1, r2
 80148ec:	4618      	mov	r0, r3
 80148ee:	f000 fe5d 	bl	80155ac <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	4618      	mov	r0, r3
 80148f6:	3710      	adds	r7, #16
 80148f8:	46bd      	mov	sp, r7
 80148fa:	bd80      	pop	{r7, pc}

080148fc <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80148fc:	b580      	push	{r7, lr}
 80148fe:	b084      	sub	sp, #16
 8014900:	af00      	add	r7, sp, #0
 8014902:	60f8      	str	r0, [r7, #12]
 8014904:	60b9      	str	r1, [r7, #8]
 8014906:	607a      	str	r2, [r7, #4]
 8014908:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 801490a:	687a      	ldr	r2, [r7, #4]
 801490c:	68b9      	ldr	r1, [r7, #8]
 801490e:	68f8      	ldr	r0, [r7, #12]
 8014910:	f000 fe5c 	bl	80155cc <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
 8014914:	4603      	mov	r3, r0
 8014916:	4618      	mov	r0, r3
 8014918:	3710      	adds	r7, #16
 801491a:	46bd      	mov	sp, r7
 801491c:	bd80      	pop	{r7, pc}

0801491e <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 801491e:	b580      	push	{r7, lr}
 8014920:	b082      	sub	sp, #8
 8014922:	af00      	add	r7, sp, #0
 8014924:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	4618      	mov	r0, r3
 801492a:	f000 fe8b 	bl	8015644 <_ZNKSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 801492e:	4603      	mov	r3, r0
 8014930:	4618      	mov	r0, r3
 8014932:	f000 fe6b 	bl	801560c <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_>
 8014936:	4603      	mov	r3, r0
 8014938:	4618      	mov	r0, r3
 801493a:	3708      	adds	r7, #8
 801493c:	46bd      	mov	sp, r7
 801493e:	bd80      	pop	{r7, pc}

08014940 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8014940:	b480      	push	{r7}
 8014942:	b083      	sub	sp, #12
 8014944:	af00      	add	r7, sp, #0
 8014946:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	685a      	ldr	r2, [r3, #4]
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	1ad3      	subs	r3, r2, r3
 8014952:	10db      	asrs	r3, r3, #3
 8014954:	4a04      	ldr	r2, [pc, #16]	; (8014968 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv+0x28>)
 8014956:	fb02 f303 	mul.w	r3, r2, r3
 801495a:	4618      	mov	r0, r3
 801495c:	370c      	adds	r7, #12
 801495e:	46bd      	mov	sp, r7
 8014960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014964:	4770      	bx	lr
 8014966:	bf00      	nop
 8014968:	aaaaaaab 	.word	0xaaaaaaab

0801496c <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 801496c:	b580      	push	{r7, lr}
 801496e:	b084      	sub	sp, #16
 8014970:	af00      	add	r7, sp, #0
 8014972:	6078      	str	r0, [r7, #4]
 8014974:	6039      	str	r1, [r7, #0]
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	60fb      	str	r3, [r7, #12]
 801497a:	683b      	ldr	r3, [r7, #0]
 801497c:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 801497e:	f7ee f8c5 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8014982:	4603      	mov	r3, r0
 8014984:	2b00      	cmp	r3, #0
 8014986:	d009      	beq.n	801499c <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8014988:	68ba      	ldr	r2, [r7, #8]
 801498a:	4613      	mov	r3, r2
 801498c:	005b      	lsls	r3, r3, #1
 801498e:	4413      	add	r3, r2
 8014990:	00db      	lsls	r3, r3, #3
 8014992:	4618      	mov	r0, r3
 8014994:	f010 ff7e 	bl	8025894 <_Znwj>
 8014998:	4603      	mov	r3, r0
 801499a:	e006      	b.n	80149aa <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801499c:	2200      	movs	r2, #0
 801499e:	68b9      	ldr	r1, [r7, #8]
 80149a0:	68f8      	ldr	r0, [r7, #12]
 80149a2:	f001 fabb 	bl	8015f1c <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv>
 80149a6:	4603      	mov	r3, r0
 80149a8:	bf00      	nop
      { return __a.allocate(__n); }
 80149aa:	4618      	mov	r0, r3
 80149ac:	3710      	adds	r7, #16
 80149ae:	46bd      	mov	sp, r7
 80149b0:	bd80      	pop	{r7, pc}

080149b2 <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80149b2:	b480      	push	{r7}
 80149b4:	b083      	sub	sp, #12
 80149b6:	af00      	add	r7, sp, #0
 80149b8:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	4618      	mov	r0, r3
 80149be:	370c      	adds	r7, #12
 80149c0:	46bd      	mov	sp, r7
 80149c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149c6:	4770      	bx	lr

080149c8 <_ZSt22__uninitialized_copy_aIPKN3jlb4NodeEPS1_S1_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80149c8:	b580      	push	{r7, lr}
 80149ca:	b084      	sub	sp, #16
 80149cc:	af00      	add	r7, sp, #0
 80149ce:	60f8      	str	r0, [r7, #12]
 80149d0:	60b9      	str	r1, [r7, #8]
 80149d2:	607a      	str	r2, [r7, #4]
 80149d4:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80149d6:	687a      	ldr	r2, [r7, #4]
 80149d8:	68b9      	ldr	r1, [r7, #8]
 80149da:	68f8      	ldr	r0, [r7, #12]
 80149dc:	f000 fe3d 	bl	801565a <_ZSt18uninitialized_copyIPKN3jlb4NodeEPS1_ET0_T_S6_S5_>
 80149e0:	4603      	mov	r3, r0
 80149e2:	4618      	mov	r0, r3
 80149e4:	3710      	adds	r7, #16
 80149e6:	46bd      	mov	sp, r7
 80149e8:	bd80      	pop	{r7, pc}

080149ea <_ZSt10destroy_atIN3jlb4NodeEEvPT_>:
    destroy_at(_Tp* __location)
 80149ea:	b580      	push	{r7, lr}
 80149ec:	b082      	sub	sp, #8
 80149ee:	af00      	add	r7, sp, #0
 80149f0:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 80149f2:	6878      	ldr	r0, [r7, #4]
 80149f4:	f7f0 fd46 	bl	8005484 <_ZN3jlb4NodeD1Ev>
    }
 80149f8:	bf00      	nop
 80149fa:	3708      	adds	r7, #8
 80149fc:	46bd      	mov	sp, r7
 80149fe:	bd80      	pop	{r7, pc}

08014a00 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKcPcEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8014a00:	b580      	push	{r7, lr}
 8014a02:	b084      	sub	sp, #16
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	60f8      	str	r0, [r7, #12]
 8014a08:	60b9      	str	r1, [r7, #8]
 8014a0a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8014a0c:	687a      	ldr	r2, [r7, #4]
 8014a0e:	68b9      	ldr	r1, [r7, #8]
 8014a10:	68f8      	ldr	r0, [r7, #12]
 8014a12:	f7f8 f935 	bl	800cc80 <_ZSt4copyIPKcPcET0_T_S4_S3_>
 8014a16:	4603      	mov	r3, r0
 8014a18:	4618      	mov	r0, r3
 8014a1a:	3710      	adds	r7, #16
 8014a1c:	46bd      	mov	sp, r7
 8014a1e:	bd80      	pop	{r7, pc}

08014a20 <_ZSt12__relocate_aIPcS0_SaIcEET0_T_S3_S2_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8014a20:	b5b0      	push	{r4, r5, r7, lr}
 8014a22:	b084      	sub	sp, #16
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	60f8      	str	r0, [r7, #12]
 8014a28:	60b9      	str	r1, [r7, #8]
 8014a2a:	607a      	str	r2, [r7, #4]
 8014a2c:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8014a2e:	68f8      	ldr	r0, [r7, #12]
 8014a30:	f7fb f9e4 	bl	800fdfc <_ZSt12__niter_baseIPcET_S1_>
 8014a34:	4604      	mov	r4, r0
 8014a36:	68b8      	ldr	r0, [r7, #8]
 8014a38:	f7fb f9e0 	bl	800fdfc <_ZSt12__niter_baseIPcET_S1_>
 8014a3c:	4605      	mov	r5, r0
 8014a3e:	6878      	ldr	r0, [r7, #4]
 8014a40:	f7fb f9dc 	bl	800fdfc <_ZSt12__niter_baseIPcET_S1_>
 8014a44:	4602      	mov	r2, r0
 8014a46:	683b      	ldr	r3, [r7, #0]
 8014a48:	4629      	mov	r1, r5
 8014a4a:	4620      	mov	r0, r4
 8014a4c:	f000 fe17 	bl	801567e <_ZSt14__relocate_a_1IccENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8014a50:	4603      	mov	r3, r0
    }
 8014a52:	4618      	mov	r0, r3
 8014a54:	3710      	adds	r7, #16
 8014a56:	46bd      	mov	sp, r7
 8014a58:	bdb0      	pop	{r4, r5, r7, pc}

08014a5a <_ZNSt8_Rb_treeIcSt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEESt10_Select1stIS7_ESt4lessIcESaIS7_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8014a5a:	b480      	push	{r7}
 8014a5c:	b083      	sub	sp, #12
 8014a5e:	af00      	add	r7, sp, #0
 8014a60:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	4618      	mov	r0, r3
 8014a66:	370c      	adds	r7, #12
 8014a68:	46bd      	mov	sp, r7
 8014a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a6e:	4770      	bx	lr

08014a70 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcS1_IfSt6vectorIS1_IciESaIS4_EEEEEEE7destroyIS8_EEvRSA_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8014a70:	b580      	push	{r7, lr}
 8014a72:	b082      	sub	sp, #8
 8014a74:	af00      	add	r7, sp, #0
 8014a76:	6078      	str	r0, [r7, #4]
 8014a78:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8014a7a:	6838      	ldr	r0, [r7, #0]
 8014a7c:	f000 fe28 	bl	80156d0 <_ZSt10destroy_atISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEEvPT_>
	}
 8014a80:	bf00      	nop
 8014a82:	3708      	adds	r7, #8
 8014a84:	46bd      	mov	sp, r7
 8014a86:	bd80      	pop	{r7, pc}

08014a88 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcS1_IfSt6vectorIS1_IciESaIS4_EEEEEEE10deallocateERSA_PS9_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	b088      	sub	sp, #32
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	60f8      	str	r0, [r7, #12]
 8014a90:	60b9      	str	r1, [r7, #8]
 8014a92:	607a      	str	r2, [r7, #4]
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	61fb      	str	r3, [r7, #28]
 8014a98:	68bb      	ldr	r3, [r7, #8]
 8014a9a:	61bb      	str	r3, [r7, #24]
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8014aa0:	f7ee f834 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8014aa4:	4603      	mov	r3, r0
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d003      	beq.n	8014ab2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcS1_IfSt6vectorIS1_IciESaIS4_EEEEEEE10deallocateERSA_PS9_j+0x2a>
	    ::operator delete(__p);
 8014aaa:	69b8      	ldr	r0, [r7, #24]
 8014aac:	f010 feee 	bl	802588c <_ZdlPv>
	    return;
 8014ab0:	e005      	b.n	8014abe <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcS1_IfSt6vectorIS1_IciESaIS4_EEEEEEE10deallocateERSA_PS9_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 8014ab2:	697a      	ldr	r2, [r7, #20]
 8014ab4:	69b9      	ldr	r1, [r7, #24]
 8014ab6:	69f8      	ldr	r0, [r7, #28]
 8014ab8:	f001 fa80 	bl	8015fbc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKcS2_IfSt6vectorIS2_IciESaIS5_EEEEEE10deallocateEPSA_j>
      { __a.deallocate(__p, __n); }
 8014abc:	bf00      	nop
 8014abe:	bf00      	nop
 8014ac0:	3720      	adds	r7, #32
 8014ac2:	46bd      	mov	sp, r7
 8014ac4:	bd80      	pop	{r7, pc}

08014ac6 <_ZSt11__addressofISt4pairIfcEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8014ac6:	b480      	push	{r7}
 8014ac8:	b083      	sub	sp, #12
 8014aca:	af00      	add	r7, sp, #0
 8014acc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	370c      	adds	r7, #12
 8014ad4:	46bd      	mov	sp, r7
 8014ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ada:	4770      	bx	lr

08014adc <_ZSt8_DestroyISt4pairIfcEEvPT_>:
    _Destroy(_Tp* __pointer)
 8014adc:	b580      	push	{r7, lr}
 8014ade:	b082      	sub	sp, #8
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8014ae4:	6878      	ldr	r0, [r7, #4]
 8014ae6:	f7fe fea0 	bl	801382a <_ZSt10destroy_atISt4pairIfcEEvPT_>
    }
 8014aea:	bf00      	nop
 8014aec:	3708      	adds	r7, #8
 8014aee:	46bd      	mov	sp, r7
 8014af0:	bd80      	pop	{r7, pc}

08014af2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcS1_IfSt6vectorIS1_IciESaIS4_EEEEEEE8allocateERSA_j>:
      allocate(allocator_type& __a, size_type __n)
 8014af2:	b580      	push	{r7, lr}
 8014af4:	b084      	sub	sp, #16
 8014af6:	af00      	add	r7, sp, #0
 8014af8:	6078      	str	r0, [r7, #4]
 8014afa:	6039      	str	r1, [r7, #0]
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	60fb      	str	r3, [r7, #12]
 8014b00:	683b      	ldr	r3, [r7, #0]
 8014b02:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8014b04:	f7ee f802 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8014b08:	4603      	mov	r3, r0
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d009      	beq.n	8014b22 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcS1_IfSt6vectorIS1_IciESaIS4_EEEEEEE8allocateERSA_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8014b0e:	68ba      	ldr	r2, [r7, #8]
 8014b10:	4613      	mov	r3, r2
 8014b12:	00db      	lsls	r3, r3, #3
 8014b14:	4413      	add	r3, r2
 8014b16:	009b      	lsls	r3, r3, #2
 8014b18:	4618      	mov	r0, r3
 8014b1a:	f010 febb 	bl	8025894 <_Znwj>
 8014b1e:	4603      	mov	r3, r0
 8014b20:	e006      	b.n	8014b30 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcS1_IfSt6vectorIS1_IciESaIS4_EEEEEEE8allocateERSA_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8014b22:	2200      	movs	r2, #0
 8014b24:	68b9      	ldr	r1, [r7, #8]
 8014b26:	68f8      	ldr	r0, [r7, #12]
 8014b28:	f001 fa68 	bl	8015ffc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKcS2_IfSt6vectorIS2_IciESaIS5_EEEEEE8allocateEjPKv>
 8014b2c:	4603      	mov	r3, r0
 8014b2e:	bf00      	nop
      { return __a.allocate(__n); }
 8014b30:	4618      	mov	r0, r3
 8014b32:	3710      	adds	r7, #16
 8014b34:	46bd      	mov	sp, r7
 8014b36:	bd80      	pop	{r7, pc}

08014b38 <_ZNSt5tupleIJRKcEEC1EOS2_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8014b38:	b580      	push	{r7, lr}
 8014b3a:	b082      	sub	sp, #8
 8014b3c:	af00      	add	r7, sp, #0
 8014b3e:	6078      	str	r0, [r7, #4]
 8014b40:	6039      	str	r1, [r7, #0]
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	683a      	ldr	r2, [r7, #0]
 8014b46:	4611      	mov	r1, r2
 8014b48:	4618      	mov	r0, r3
 8014b4a:	f000 fddb 	bl	8015704 <_ZNSt11_Tuple_implILj0EJRKcEEC1EOS2_>
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	4618      	mov	r0, r3
 8014b52:	3708      	adds	r7, #8
 8014b54:	46bd      	mov	sp, r7
 8014b56:	bd80      	pop	{r7, pc}

08014b58 <_ZSt12construct_atISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEJRKSt21piecewise_construct_tSt5tupleIJRS1_EESB_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSG_DpOSH_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8014b58:	b5b0      	push	{r4, r5, r7, lr}
 8014b5a:	b088      	sub	sp, #32
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	60f8      	str	r0, [r7, #12]
 8014b60:	60b9      	str	r1, [r7, #8]
 8014b62:	607a      	str	r2, [r7, #4]
 8014b64:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8014b66:	68b8      	ldr	r0, [r7, #8]
 8014b68:	f7fb ffcc 	bl	8010b04 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8014b6c:	6878      	ldr	r0, [r7, #4]
 8014b6e:	f7fb ffd4 	bl	8010b1a <_ZSt7forwardISt5tupleIJRKcEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8014b72:	4602      	mov	r2, r0
 8014b74:	f107 0318 	add.w	r3, r7, #24
 8014b78:	4611      	mov	r1, r2
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	f7ff ffdc 	bl	8014b38 <_ZNSt5tupleIJRKcEEC1EOS2_>
 8014b80:	f107 0418 	add.w	r4, r7, #24
 8014b84:	6838      	ldr	r0, [r7, #0]
 8014b86:	f7fb ffd3 	bl	8010b30 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	4619      	mov	r1, r3
 8014b8e:	2014      	movs	r0, #20
 8014b90:	f7ed ffc4 	bl	8002b1c <_ZnwjPv>
 8014b94:	4605      	mov	r5, r0
 8014b96:	7f3b      	ldrb	r3, [r7, #28]
 8014b98:	4622      	mov	r2, r4
 8014b9a:	7d39      	ldrb	r1, [r7, #20]
 8014b9c:	4628      	mov	r0, r5
 8014b9e:	f000 fddd 	bl	801575c <_ZNSt4pairIKcS_IfSt6vectorIS_IciESaIS2_EEEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESA_IJDpT0_EE>
 8014ba2:	462b      	mov	r3, r5
 8014ba4:	4618      	mov	r0, r3
 8014ba6:	3720      	adds	r7, #32
 8014ba8:	46bd      	mov	sp, r7
 8014baa:	bdb0      	pop	{r4, r5, r7, pc}

08014bac <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKcS1_IfSt6vectorIS1_IciESaIS4_EEEEEEE9constructIS8_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEEvRSA_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8014bac:	b5b0      	push	{r4, r5, r7, lr}
 8014bae:	b084      	sub	sp, #16
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	60f8      	str	r0, [r7, #12]
 8014bb4:	60b9      	str	r1, [r7, #8]
 8014bb6:	607a      	str	r2, [r7, #4]
 8014bb8:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8014bba:	6878      	ldr	r0, [r7, #4]
 8014bbc:	f7fb ffa2 	bl	8010b04 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8014bc0:	4604      	mov	r4, r0
 8014bc2:	6838      	ldr	r0, [r7, #0]
 8014bc4:	f7fb ffa9 	bl	8010b1a <_ZSt7forwardISt5tupleIJRKcEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8014bc8:	4605      	mov	r5, r0
 8014bca:	6a38      	ldr	r0, [r7, #32]
 8014bcc:	f7fb ffb0 	bl	8010b30 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8014bd0:	4603      	mov	r3, r0
 8014bd2:	462a      	mov	r2, r5
 8014bd4:	4621      	mov	r1, r4
 8014bd6:	68b8      	ldr	r0, [r7, #8]
 8014bd8:	f7ff ffbe 	bl	8014b58 <_ZSt12construct_atISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEJRKSt21piecewise_construct_tSt5tupleIJRS1_EESB_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSG_DpOSH_>
	}
 8014bdc:	bf00      	nop
 8014bde:	3710      	adds	r7, #16
 8014be0:	46bd      	mov	sp, r7
 8014be2:	bdb0      	pop	{r4, r5, r7, pc}

08014be4 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8014be4:	b480      	push	{r7}
 8014be6:	b083      	sub	sp, #12
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	4618      	mov	r0, r3
 8014bf0:	370c      	adds	r7, #12
 8014bf2:	46bd      	mov	sp, r7
 8014bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf8:	4770      	bx	lr

08014bfa <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKcS_IfSt6vectorIS_IciESaIS7_EEEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8014bfa:	b580      	push	{r7, lr}
 8014bfc:	b084      	sub	sp, #16
 8014bfe:	af00      	add	r7, sp, #0
 8014c00:	60f8      	str	r0, [r7, #12]
 8014c02:	60b9      	str	r1, [r7, #8]
 8014c04:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8014c06:	68b8      	ldr	r0, [r7, #8]
 8014c08:	f000 fdbc 	bl	8015784 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKcS1_IfSt6vectorIS1_IciESaIS4_EEEEEEOT_RNSt16remove_referenceISC_E4typeE>
 8014c0c:	4603      	mov	r3, r0
 8014c0e:	681a      	ldr	r2, [r3, #0]
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	601a      	str	r2, [r3, #0]
 8014c14:	6878      	ldr	r0, [r7, #4]
 8014c16:	f7ff ffe5 	bl	8014be4 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8014c1a:	4603      	mov	r3, r0
 8014c1c:	681a      	ldr	r2, [r3, #0]
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	605a      	str	r2, [r3, #4]
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	4618      	mov	r0, r3
 8014c26:	3710      	adds	r7, #16
 8014c28:	46bd      	mov	sp, r7
 8014c2a:	bd80      	pop	{r7, pc}

08014c2c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKcS1_IfSt6vectorIS1_IciESaIS4_EEEEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	b082      	sub	sp, #8
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8014c34:	6878      	ldr	r0, [r7, #4]
 8014c36:	f000 fdb0 	bl	801579a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKcS1_IfSt6vectorIS1_IciESaIS4_EEEEE7_M_addrEv>
 8014c3a:	4603      	mov	r3, r0
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	3708      	adds	r7, #8
 8014c40:	46bd      	mov	sp, r7
 8014c42:	bd80      	pop	{r7, pc}

08014c44 <_ZN9__gnu_cxx13new_allocatorISt4pairIciEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b084      	sub	sp, #16
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	60f8      	str	r0, [r7, #12]
 8014c4c:	60b9      	str	r1, [r7, #8]
 8014c4e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	00db      	lsls	r3, r3, #3
 8014c54:	4619      	mov	r1, r3
 8014c56:	68b8      	ldr	r0, [r7, #8]
 8014c58:	f010 fe1a 	bl	8025890 <_ZdlPvj>
      }
 8014c5c:	3710      	adds	r7, #16
 8014c5e:	46bd      	mov	sp, r7
 8014c60:	bd80      	pop	{r7, pc}

08014c62 <_ZSt11__addressofISt4pairIciEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8014c62:	b480      	push	{r7}
 8014c64:	b083      	sub	sp, #12
 8014c66:	af00      	add	r7, sp, #0
 8014c68:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	4618      	mov	r0, r3
 8014c6e:	370c      	adds	r7, #12
 8014c70:	46bd      	mov	sp, r7
 8014c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c76:	4770      	bx	lr

08014c78 <_ZSt8_DestroyISt4pairIciEEvPT_>:
    _Destroy(_Tp* __pointer)
 8014c78:	b580      	push	{r7, lr}
 8014c7a:	b082      	sub	sp, #8
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8014c80:	6878      	ldr	r0, [r7, #4]
 8014c82:	f000 f959 	bl	8014f38 <_ZSt10destroy_atISt4pairIciEEvPT_>
    }
 8014c86:	bf00      	nop
 8014c88:	3708      	adds	r7, #8
 8014c8a:	46bd      	mov	sp, r7
 8014c8c:	bd80      	pop	{r7, pc}

08014c8e <_ZN9__gnu_cxx13new_allocatorISt4pairIciEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8014c8e:	b480      	push	{r7}
 8014c90:	b083      	sub	sp, #12
 8014c92:	af00      	add	r7, sp, #0
 8014c94:	6078      	str	r0, [r7, #4]
 8014c96:	6039      	str	r1, [r7, #0]
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	4618      	mov	r0, r3
 8014c9c:	370c      	adds	r7, #12
 8014c9e:	46bd      	mov	sp, r7
 8014ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ca4:	4770      	bx	lr

08014ca6 <_ZNKSt6vectorISt4pairIfcESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8014ca6:	b590      	push	{r4, r7, lr}
 8014ca8:	b087      	sub	sp, #28
 8014caa:	af00      	add	r7, sp, #0
 8014cac:	60f8      	str	r0, [r7, #12]
 8014cae:	60b9      	str	r1, [r7, #8]
 8014cb0:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8014cb2:	68f8      	ldr	r0, [r7, #12]
 8014cb4:	f000 fd7c 	bl	80157b0 <_ZNKSt6vectorISt4pairIfcESaIS1_EE8max_sizeEv>
 8014cb8:	4604      	mov	r4, r0
 8014cba:	68f8      	ldr	r0, [r7, #12]
 8014cbc:	f000 fd89 	bl	80157d2 <_ZNKSt6vectorISt4pairIfcESaIS1_EE4sizeEv>
 8014cc0:	4603      	mov	r3, r0
 8014cc2:	1ae2      	subs	r2, r4, r3
 8014cc4:	68bb      	ldr	r3, [r7, #8]
 8014cc6:	429a      	cmp	r2, r3
 8014cc8:	bf34      	ite	cc
 8014cca:	2301      	movcc	r3, #1
 8014ccc:	2300      	movcs	r3, #0
 8014cce:	b2db      	uxtb	r3, r3
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d002      	beq.n	8014cda <_ZNKSt6vectorISt4pairIfcESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8014cd4:	6878      	ldr	r0, [r7, #4]
 8014cd6:	f010 feaf 	bl	8025a38 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8014cda:	68f8      	ldr	r0, [r7, #12]
 8014cdc:	f000 fd79 	bl	80157d2 <_ZNKSt6vectorISt4pairIfcESaIS1_EE4sizeEv>
 8014ce0:	4604      	mov	r4, r0
 8014ce2:	68f8      	ldr	r0, [r7, #12]
 8014ce4:	f000 fd75 	bl	80157d2 <_ZNKSt6vectorISt4pairIfcESaIS1_EE4sizeEv>
 8014ce8:	4603      	mov	r3, r0
 8014cea:	613b      	str	r3, [r7, #16]
 8014cec:	f107 0208 	add.w	r2, r7, #8
 8014cf0:	f107 0310 	add.w	r3, r7, #16
 8014cf4:	4611      	mov	r1, r2
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	f7ee fe81 	bl	80039fe <_ZSt3maxIjERKT_S2_S2_>
 8014cfc:	4603      	mov	r3, r0
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	4423      	add	r3, r4
 8014d02:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014d04:	68f8      	ldr	r0, [r7, #12]
 8014d06:	f000 fd64 	bl	80157d2 <_ZNKSt6vectorISt4pairIfcESaIS1_EE4sizeEv>
 8014d0a:	4602      	mov	r2, r0
 8014d0c:	697b      	ldr	r3, [r7, #20]
 8014d0e:	4293      	cmp	r3, r2
 8014d10:	d306      	bcc.n	8014d20 <_ZNKSt6vectorISt4pairIfcESaIS1_EE12_M_check_lenEjPKc+0x7a>
 8014d12:	68f8      	ldr	r0, [r7, #12]
 8014d14:	f000 fd4c 	bl	80157b0 <_ZNKSt6vectorISt4pairIfcESaIS1_EE8max_sizeEv>
 8014d18:	4602      	mov	r2, r0
 8014d1a:	697b      	ldr	r3, [r7, #20]
 8014d1c:	4293      	cmp	r3, r2
 8014d1e:	d904      	bls.n	8014d2a <_ZNKSt6vectorISt4pairIfcESaIS1_EE12_M_check_lenEjPKc+0x84>
 8014d20:	68f8      	ldr	r0, [r7, #12]
 8014d22:	f000 fd45 	bl	80157b0 <_ZNKSt6vectorISt4pairIfcESaIS1_EE8max_sizeEv>
 8014d26:	4603      	mov	r3, r0
 8014d28:	e000      	b.n	8014d2c <_ZNKSt6vectorISt4pairIfcESaIS1_EE12_M_check_lenEjPKc+0x86>
 8014d2a:	697b      	ldr	r3, [r7, #20]
      }
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	371c      	adds	r7, #28
 8014d30:	46bd      	mov	sp, r7
 8014d32:	bd90      	pop	{r4, r7, pc}

08014d34 <_ZNSt12_Vector_baseISt4pairIfcESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8014d34:	b580      	push	{r7, lr}
 8014d36:	b082      	sub	sp, #8
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	6078      	str	r0, [r7, #4]
 8014d3c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014d3e:	683b      	ldr	r3, [r7, #0]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d006      	beq.n	8014d52 <_ZNSt12_Vector_baseISt4pairIfcESaIS1_EE11_M_allocateEj+0x1e>
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	6839      	ldr	r1, [r7, #0]
 8014d48:	4618      	mov	r0, r3
 8014d4a:	f000 fd52 	bl	80157f2 <_ZNSt16allocator_traitsISaISt4pairIfcEEE8allocateERS2_j>
 8014d4e:	4603      	mov	r3, r0
 8014d50:	e000      	b.n	8014d54 <_ZNSt12_Vector_baseISt4pairIfcESaIS1_EE11_M_allocateEj+0x20>
 8014d52:	2300      	movs	r3, #0
      }
 8014d54:	4618      	mov	r0, r3
 8014d56:	3708      	adds	r7, #8
 8014d58:	46bd      	mov	sp, r7
 8014d5a:	bd80      	pop	{r7, pc}

08014d5c <_ZNSt6vectorISt4pairIfcESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8014d5c:	b590      	push	{r4, r7, lr}
 8014d5e:	b087      	sub	sp, #28
 8014d60:	af02      	add	r7, sp, #8
 8014d62:	60f8      	str	r0, [r7, #12]
 8014d64:	60b9      	str	r1, [r7, #8]
 8014d66:	607a      	str	r2, [r7, #4]
 8014d68:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8014d6a:	f88d 4000 	strb.w	r4, [sp]
 8014d6e:	683b      	ldr	r3, [r7, #0]
 8014d70:	687a      	ldr	r2, [r7, #4]
 8014d72:	68b9      	ldr	r1, [r7, #8]
 8014d74:	68f8      	ldr	r0, [r7, #12]
 8014d76:	f000 fd5c 	bl	8015832 <_ZNSt6vectorISt4pairIfcESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8014d7a:	4603      	mov	r3, r0
      }
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	3714      	adds	r7, #20
 8014d80:	46bd      	mov	sp, r7
 8014d82:	bd90      	pop	{r4, r7, pc}

08014d84 <_ZStssIfcENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS3_EEEEDTclL_ZNS1_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS6_EEEEEE4typeERKSt4pairIS2_S5_ESD_>:
    operator<=>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
 8014d84:	b580      	push	{r7, lr}
 8014d86:	b086      	sub	sp, #24
 8014d88:	af00      	add	r7, sp, #0
 8014d8a:	6078      	str	r0, [r7, #4]
 8014d8c:	6039      	str	r1, [r7, #0]
      if (auto __c = __detail::__synth3way(__x.first, __y.first); __c != 0)
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	683a      	ldr	r2, [r7, #0]
 8014d92:	4619      	mov	r1, r3
 8014d94:	4815      	ldr	r0, [pc, #84]	; (8014dec <_ZStssIfcENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS3_EEEEDTclL_ZNS1_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS6_EEEEEE4typeERKSt4pairIS2_S5_ESD_+0x68>)
 8014d96:	f7fe fc02 	bl	801359e <_ZNKSt8__detail10_Synth3wayclIffEEDaRKT_RKT0_>
 8014d9a:	4603      	mov	r3, r0
 8014d9c:	733b      	strb	r3, [r7, #12]
 8014d9e:	f107 0310 	add.w	r3, r7, #16
 8014da2:	2100      	movs	r1, #0
 8014da4:	4618      	mov	r0, r3
 8014da6:	f7ef fbff 	bl	80045a8 <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 8014daa:	7c39      	ldrb	r1, [r7, #16]
 8014dac:	7b38      	ldrb	r0, [r7, #12]
 8014dae:	f7ef fc17 	bl	80045e0 <_ZSteqSt16partial_orderingNSt9__cmp_cat8__unspecE>
 8014db2:	4603      	mov	r3, r0
 8014db4:	f083 0301 	eor.w	r3, r3, #1
 8014db8:	b2db      	uxtb	r3, r3
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d001      	beq.n	8014dc2 <_ZStssIfcENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS3_EEEEDTclL_ZNS1_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS6_EEEEEE4typeERKSt4pairIS2_S5_ESD_+0x3e>
	return __c;
 8014dbe:	7b3b      	ldrb	r3, [r7, #12]
 8014dc0:	e00f      	b.n	8014de2 <_ZStssIfcENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS3_EEEEDTclL_ZNS1_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS6_EEEEEE4typeERKSt4pairIS2_S5_ESD_+0x5e>
      return __detail::__synth3way(__x.second, __y.second);
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	1d19      	adds	r1, r3, #4
 8014dc6:	683b      	ldr	r3, [r7, #0]
 8014dc8:	3304      	adds	r3, #4
 8014dca:	461a      	mov	r2, r3
 8014dcc:	4807      	ldr	r0, [pc, #28]	; (8014dec <_ZStssIfcENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS3_EEEEDTclL_ZNS1_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS6_EEEEEE4typeERKSt4pairIS2_S5_ESD_+0x68>)
 8014dce:	f7fe fc1a 	bl	8013606 <_ZNKSt8__detail10_Synth3wayclIccEEDaRKT_RKT0_>
 8014dd2:	4603      	mov	r3, r0
 8014dd4:	753b      	strb	r3, [r7, #20]
 8014dd6:	f107 0314 	add.w	r3, r7, #20
 8014dda:	4618      	mov	r0, r3
 8014ddc:	f7ef fc24 	bl	8004628 <_ZNKSt15strong_orderingcvSt16partial_orderingEv>
 8014de0:	4603      	mov	r3, r0
    }
 8014de2:	4618      	mov	r0, r3
 8014de4:	3718      	adds	r7, #24
 8014de6:	46bd      	mov	sp, r7
 8014de8:	bd80      	pop	{r7, pc}
 8014dea:	bf00      	nop
 8014dec:	08029818 	.word	0x08029818

08014df0 <_ZSt14__copy_move_a2ILb0EPKSt4pairIciEPS1_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8014df0:	b580      	push	{r7, lr}
 8014df2:	b084      	sub	sp, #16
 8014df4:	af00      	add	r7, sp, #0
 8014df6:	60f8      	str	r0, [r7, #12]
 8014df8:	60b9      	str	r1, [r7, #8]
 8014dfa:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8014dfc:	f7ed fe86 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8014e00:	4603      	mov	r3, r0
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d006      	beq.n	8014e14 <_ZSt14__copy_move_a2ILb0EPKSt4pairIciEPS1_ET1_T0_S6_S5_+0x24>
	  __copy_m(__first, __last, __result);
 8014e06:	687a      	ldr	r2, [r7, #4]
 8014e08:	68b9      	ldr	r1, [r7, #8]
 8014e0a:	68f8      	ldr	r0, [r7, #12]
 8014e0c:	f000 fd59 	bl	80158c2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt4pairIciEPS4_EET0_T_S9_S8_>
 8014e10:	4603      	mov	r3, r0
 8014e12:	e006      	b.n	8014e22 <_ZSt14__copy_move_a2ILb0EPKSt4pairIciEPS1_ET1_T0_S6_S5_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 8014e14:	687a      	ldr	r2, [r7, #4]
 8014e16:	68b9      	ldr	r1, [r7, #8]
 8014e18:	68f8      	ldr	r0, [r7, #12]
 8014e1a:	f000 fd52 	bl	80158c2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt4pairIciEPS4_EET0_T_S9_S8_>
 8014e1e:	4603      	mov	r3, r0
 8014e20:	bf00      	nop
    }
 8014e22:	4618      	mov	r0, r3
 8014e24:	3710      	adds	r7, #16
 8014e26:	46bd      	mov	sp, r7
 8014e28:	bd80      	pop	{r7, pc}

08014e2a <_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS2_SaIS2_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8014e2a:	b580      	push	{r7, lr}
 8014e2c:	b084      	sub	sp, #16
 8014e2e:	af00      	add	r7, sp, #0
 8014e30:	6078      	str	r0, [r7, #4]
 8014e32:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	681a      	ldr	r2, [r3, #0]
 8014e38:	683b      	ldr	r3, [r7, #0]
 8014e3a:	00db      	lsls	r3, r3, #3
 8014e3c:	4413      	add	r3, r2
 8014e3e:	60fb      	str	r3, [r7, #12]
 8014e40:	f107 020c 	add.w	r2, r7, #12
 8014e44:	f107 0308 	add.w	r3, r7, #8
 8014e48:	4611      	mov	r1, r2
 8014e4a:	4618      	mov	r0, r3
 8014e4c:	f7fc fbad 	bl	80115aa <_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIciESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8014e50:	68bb      	ldr	r3, [r7, #8]
 8014e52:	4618      	mov	r0, r3
 8014e54:	3710      	adds	r7, #16
 8014e56:	46bd      	mov	sp, r7
 8014e58:	bd80      	pop	{r7, pc}

08014e5a <_ZNSt4pairIciEaSERKS0_>:
      operator=(typename conditional<
 8014e5a:	b480      	push	{r7}
 8014e5c:	b083      	sub	sp, #12
 8014e5e:	af00      	add	r7, sp, #0
 8014e60:	6078      	str	r0, [r7, #4]
 8014e62:	6039      	str	r1, [r7, #0]
	first = __p.first;
 8014e64:	683b      	ldr	r3, [r7, #0]
 8014e66:	781a      	ldrb	r2, [r3, #0]
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	701a      	strb	r2, [r3, #0]
	second = __p.second;
 8014e6c:	683b      	ldr	r3, [r7, #0]
 8014e6e:	685a      	ldr	r2, [r3, #4]
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	605a      	str	r2, [r3, #4]
	return *this;
 8014e74:	687b      	ldr	r3, [r7, #4]
      }
 8014e76:	4618      	mov	r0, r3
 8014e78:	370c      	adds	r7, #12
 8014e7a:	46bd      	mov	sp, r7
 8014e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e80:	4770      	bx	lr

08014e82 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPSt4pairIciES5_EET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8014e82:	b580      	push	{r7, lr}
 8014e84:	b086      	sub	sp, #24
 8014e86:	af00      	add	r7, sp, #0
 8014e88:	60f8      	str	r0, [r7, #12]
 8014e8a:	60b9      	str	r1, [r7, #8]
 8014e8c:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8014e8e:	68ba      	ldr	r2, [r7, #8]
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	1ad3      	subs	r3, r2, r3
 8014e94:	10db      	asrs	r3, r3, #3
 8014e96:	617b      	str	r3, [r7, #20]
 8014e98:	e00c      	b.n	8014eb4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPSt4pairIciES5_EET0_T_S7_S6_+0x32>
	      *__result = *__first;
 8014e9a:	68f9      	ldr	r1, [r7, #12]
 8014e9c:	6878      	ldr	r0, [r7, #4]
 8014e9e:	f7ff ffdc 	bl	8014e5a <_ZNSt4pairIciEaSERKS0_>
	      ++__first;
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	3308      	adds	r3, #8
 8014ea6:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	3308      	adds	r3, #8
 8014eac:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8014eae:	697b      	ldr	r3, [r7, #20]
 8014eb0:	3b01      	subs	r3, #1
 8014eb2:	617b      	str	r3, [r7, #20]
 8014eb4:	697b      	ldr	r3, [r7, #20]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	dcef      	bgt.n	8014e9a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPSt4pairIciES5_EET0_T_S7_S6_+0x18>
	  return __result;
 8014eba:	687b      	ldr	r3, [r7, #4]
	}
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	3718      	adds	r7, #24
 8014ec0:	46bd      	mov	sp, r7
 8014ec2:	bd80      	pop	{r7, pc}

08014ec4 <_ZSt10_ConstructISt4pairIciEJRS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8014ec4:	b590      	push	{r4, r7, lr}
 8014ec6:	b083      	sub	sp, #12
 8014ec8:	af00      	add	r7, sp, #0
 8014eca:	6078      	str	r0, [r7, #4]
 8014ecc:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8014ece:	6838      	ldr	r0, [r7, #0]
 8014ed0:	f000 fd18 	bl	8015904 <_ZSt7forwardIRSt4pairIciEEOT_RNSt16remove_referenceIS3_E4typeE>
 8014ed4:	4604      	mov	r4, r0
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	4619      	mov	r1, r3
 8014eda:	2008      	movs	r0, #8
 8014edc:	f7ed fe1e 	bl	8002b1c <_ZnwjPv>
 8014ee0:	4603      	mov	r3, r0
 8014ee2:	4622      	mov	r2, r4
 8014ee4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014ee8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8014eec:	370c      	adds	r7, #12
 8014eee:	46bd      	mov	sp, r7
 8014ef0:	bd90      	pop	{r4, r7, pc}

08014ef2 <_ZNKSt6vectorISt4pairIciESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8014ef2:	b580      	push	{r7, lr}
 8014ef4:	b082      	sub	sp, #8
 8014ef6:	af00      	add	r7, sp, #0
 8014ef8:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	4618      	mov	r0, r3
 8014efe:	f7fa fa2d 	bl	800f35c <_ZNKSt12_Vector_baseISt4pairIciESaIS1_EE19_M_get_Tp_allocatorEv>
 8014f02:	4603      	mov	r3, r0
 8014f04:	4618      	mov	r0, r3
 8014f06:	f000 fd14 	bl	8015932 <_ZNSt6vectorISt4pairIciESaIS1_EE11_S_max_sizeERKS2_>
 8014f0a:	4603      	mov	r3, r0
 8014f0c:	4618      	mov	r0, r3
 8014f0e:	3708      	adds	r7, #8
 8014f10:	46bd      	mov	sp, r7
 8014f12:	bd80      	pop	{r7, pc}

08014f14 <_ZNSt6vectorISt4pairIciESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8014f14:	b580      	push	{r7, lr}
 8014f16:	b084      	sub	sp, #16
 8014f18:	af00      	add	r7, sp, #0
 8014f1a:	60f8      	str	r0, [r7, #12]
 8014f1c:	60b9      	str	r1, [r7, #8]
 8014f1e:	607a      	str	r2, [r7, #4]
 8014f20:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8014f22:	683b      	ldr	r3, [r7, #0]
 8014f24:	687a      	ldr	r2, [r7, #4]
 8014f26:	68b9      	ldr	r1, [r7, #8]
 8014f28:	68f8      	ldr	r0, [r7, #12]
 8014f2a:	f000 fd1c 	bl	8015966 <_ZSt12__relocate_aIPSt4pairIciES2_SaIS1_EET0_T_S5_S4_RT1_>
 8014f2e:	4603      	mov	r3, r0
      }
 8014f30:	4618      	mov	r0, r3
 8014f32:	3710      	adds	r7, #16
 8014f34:	46bd      	mov	sp, r7
 8014f36:	bd80      	pop	{r7, pc}

08014f38 <_ZSt10destroy_atISt4pairIciEEvPT_>:
    destroy_at(_Tp* __location)
 8014f38:	b480      	push	{r7}
 8014f3a:	b083      	sub	sp, #12
 8014f3c:	af00      	add	r7, sp, #0
 8014f3e:	6078      	str	r0, [r7, #4]
    }
 8014f40:	bf00      	nop
 8014f42:	370c      	adds	r7, #12
 8014f44:	46bd      	mov	sp, r7
 8014f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f4a:	4770      	bx	lr

08014f4c <_ZN9__gnu_cxxeqIPKSt4pairIciESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8014f4c:	b590      	push	{r4, r7, lr}
 8014f4e:	b083      	sub	sp, #12
 8014f50:	af00      	add	r7, sp, #0
 8014f52:	6078      	str	r0, [r7, #4]
 8014f54:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8014f56:	6878      	ldr	r0, [r7, #4]
 8014f58:	f7fe fe23 	bl	8013ba2 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIciESt6vectorIS2_SaIS2_EEE4baseEv>
 8014f5c:	4603      	mov	r3, r0
 8014f5e:	681c      	ldr	r4, [r3, #0]
 8014f60:	6838      	ldr	r0, [r7, #0]
 8014f62:	f7fe fe1e 	bl	8013ba2 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIciESt6vectorIS2_SaIS2_EEE4baseEv>
 8014f66:	4603      	mov	r3, r0
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	429c      	cmp	r4, r3
 8014f6c:	bf0c      	ite	eq
 8014f6e:	2301      	moveq	r3, #1
 8014f70:	2300      	movne	r3, #0
 8014f72:	b2db      	uxtb	r3, r3
 8014f74:	4618      	mov	r0, r3
 8014f76:	370c      	adds	r7, #12
 8014f78:	46bd      	mov	sp, r7
 8014f7a:	bd90      	pop	{r4, r7, pc}

08014f7c <_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIciESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8014f7c:	b480      	push	{r7}
 8014f7e:	b083      	sub	sp, #12
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	4618      	mov	r0, r3
 8014f8a:	370c      	adds	r7, #12
 8014f8c:	46bd      	mov	sp, r7
 8014f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f92:	4770      	bx	lr

08014f94 <_ZSt10_ConstructISt4pairIciEJRKS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8014f94:	b590      	push	{r4, r7, lr}
 8014f96:	b083      	sub	sp, #12
 8014f98:	af00      	add	r7, sp, #0
 8014f9a:	6078      	str	r0, [r7, #4]
 8014f9c:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8014f9e:	6838      	ldr	r0, [r7, #0]
 8014fa0:	f000 fcfe 	bl	80159a0 <_ZSt7forwardIRKSt4pairIciEEOT_RNSt16remove_referenceIS4_E4typeE>
 8014fa4:	4604      	mov	r4, r0
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	4619      	mov	r1, r3
 8014faa:	2008      	movs	r0, #8
 8014fac:	f7ed fdb6 	bl	8002b1c <_ZnwjPv>
 8014fb0:	4603      	mov	r3, r0
 8014fb2:	4622      	mov	r2, r4
 8014fb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014fb8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8014fbc:	370c      	adds	r7, #12
 8014fbe:	46bd      	mov	sp, r7
 8014fc0:	bd90      	pop	{r4, r7, pc}

08014fc2 <_ZN9__gnu_cxx13new_allocatorIPfEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8014fc2:	b480      	push	{r7}
 8014fc4:	b083      	sub	sp, #12
 8014fc6:	af00      	add	r7, sp, #0
 8014fc8:	6078      	str	r0, [r7, #4]
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	4618      	mov	r0, r3
 8014fce:	370c      	adds	r7, #12
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fd6:	4770      	bx	lr

08014fd8 <_ZN9__gnu_cxx13new_allocatorIPfE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b084      	sub	sp, #16
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	60f8      	str	r0, [r7, #12]
 8014fe0:	60b9      	str	r1, [r7, #8]
 8014fe2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	009b      	lsls	r3, r3, #2
 8014fe8:	4619      	mov	r1, r3
 8014fea:	68b8      	ldr	r0, [r7, #8]
 8014fec:	f010 fc50 	bl	8025890 <_ZdlPvj>
      }
 8014ff0:	3710      	adds	r7, #16
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	bd80      	pop	{r7, pc}

08014ff6 <_ZSt12__miter_baseIPPfET_S2_>:
    __miter_base(_Iterator __it)
 8014ff6:	b480      	push	{r7}
 8014ff8:	b083      	sub	sp, #12
 8014ffa:	af00      	add	r7, sp, #0
 8014ffc:	6078      	str	r0, [r7, #4]
    { return __it; }
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	4618      	mov	r0, r3
 8015002:	370c      	adds	r7, #12
 8015004:	46bd      	mov	sp, r7
 8015006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801500a:	4770      	bx	lr

0801500c <_ZSt13__copy_move_aILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 801500c:	b5b0      	push	{r4, r5, r7, lr}
 801500e:	b084      	sub	sp, #16
 8015010:	af00      	add	r7, sp, #0
 8015012:	60f8      	str	r0, [r7, #12]
 8015014:	60b9      	str	r1, [r7, #8]
 8015016:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8015018:	68f8      	ldr	r0, [r7, #12]
 801501a:	f000 fd02 	bl	8015a22 <_ZSt12__niter_baseIPPfET_S2_>
 801501e:	4604      	mov	r4, r0
 8015020:	68b8      	ldr	r0, [r7, #8]
 8015022:	f000 fcfe 	bl	8015a22 <_ZSt12__niter_baseIPPfET_S2_>
 8015026:	4605      	mov	r5, r0
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	4618      	mov	r0, r3
 801502c:	f000 fcf9 	bl	8015a22 <_ZSt12__niter_baseIPPfET_S2_>
 8015030:	4603      	mov	r3, r0
 8015032:	461a      	mov	r2, r3
 8015034:	4629      	mov	r1, r5
 8015036:	4620      	mov	r0, r4
 8015038:	f000 fcfe 	bl	8015a38 <_ZSt14__copy_move_a1ILb0EPPfS1_ET1_T0_S3_S2_>
 801503c:	4602      	mov	r2, r0
 801503e:	1d3b      	adds	r3, r7, #4
 8015040:	4611      	mov	r1, r2
 8015042:	4618      	mov	r0, r3
 8015044:	f000 fd08 	bl	8015a58 <_ZSt12__niter_wrapIPPfET_RKS2_S2_>
 8015048:	4603      	mov	r3, r0
    }
 801504a:	4618      	mov	r0, r3
 801504c:	3710      	adds	r7, #16
 801504e:	46bd      	mov	sp, r7
 8015050:	bdb0      	pop	{r4, r5, r7, pc}

08015052 <_ZSt22__copy_move_backward_aILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8015052:	b5b0      	push	{r4, r5, r7, lr}
 8015054:	b084      	sub	sp, #16
 8015056:	af00      	add	r7, sp, #0
 8015058:	60f8      	str	r0, [r7, #12]
 801505a:	60b9      	str	r1, [r7, #8]
 801505c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 801505e:	68f8      	ldr	r0, [r7, #12]
 8015060:	f000 fcdf 	bl	8015a22 <_ZSt12__niter_baseIPPfET_S2_>
 8015064:	4604      	mov	r4, r0
 8015066:	68b8      	ldr	r0, [r7, #8]
 8015068:	f000 fcdb 	bl	8015a22 <_ZSt12__niter_baseIPPfET_S2_>
 801506c:	4605      	mov	r5, r0
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	4618      	mov	r0, r3
 8015072:	f000 fcd6 	bl	8015a22 <_ZSt12__niter_baseIPPfET_S2_>
 8015076:	4603      	mov	r3, r0
 8015078:	461a      	mov	r2, r3
 801507a:	4629      	mov	r1, r5
 801507c:	4620      	mov	r0, r4
 801507e:	f000 fcf7 	bl	8015a70 <_ZSt23__copy_move_backward_a1ILb0EPPfS1_ET1_T0_S3_S2_>
 8015082:	4602      	mov	r2, r0
 8015084:	1d3b      	adds	r3, r7, #4
 8015086:	4611      	mov	r1, r2
 8015088:	4618      	mov	r0, r3
 801508a:	f000 fce5 	bl	8015a58 <_ZSt12__niter_wrapIPPfET_RKS2_S2_>
 801508e:	4603      	mov	r3, r0
    }
 8015090:	4618      	mov	r0, r3
 8015092:	3710      	adds	r7, #16
 8015094:	46bd      	mov	sp, r7
 8015096:	bdb0      	pop	{r4, r5, r7, pc}

08015098 <_ZSt18make_move_iteratorIPcESt13move_iteratorIT_ES2_>:
    make_move_iterator(_Iterator __i)
 8015098:	b580      	push	{r7, lr}
 801509a:	b084      	sub	sp, #16
 801509c:	af00      	add	r7, sp, #0
 801509e:	6078      	str	r0, [r7, #4]
    { return move_iterator<_Iterator>(std::move(__i)); }
 80150a0:	1d3b      	adds	r3, r7, #4
 80150a2:	4618      	mov	r0, r3
 80150a4:	f000 fcf4 	bl	8015a90 <_ZSt4moveIRPcEONSt16remove_referenceIT_E4typeEOS3_>
 80150a8:	4603      	mov	r3, r0
 80150aa:	681a      	ldr	r2, [r3, #0]
 80150ac:	f107 030c 	add.w	r3, r7, #12
 80150b0:	4611      	mov	r1, r2
 80150b2:	4618      	mov	r0, r3
 80150b4:	f000 fcf7 	bl	8015aa6 <_ZNSt13move_iteratorIPcEC1ES0_>
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	4618      	mov	r0, r3
 80150bc:	3710      	adds	r7, #16
 80150be:	46bd      	mov	sp, r7
 80150c0:	bd80      	pop	{r7, pc}

080150c2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPcES1_cET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80150c2:	b580      	push	{r7, lr}
 80150c4:	b084      	sub	sp, #16
 80150c6:	af00      	add	r7, sp, #0
 80150c8:	60f8      	str	r0, [r7, #12]
 80150ca:	60b9      	str	r1, [r7, #8]
 80150cc:	607a      	str	r2, [r7, #4]
 80150ce:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80150d0:	687a      	ldr	r2, [r7, #4]
 80150d2:	68b9      	ldr	r1, [r7, #8]
 80150d4:	68f8      	ldr	r0, [r7, #12]
 80150d6:	f000 fcf8 	bl	8015aca <_ZSt18uninitialized_copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>
 80150da:	4603      	mov	r3, r0
 80150dc:	4618      	mov	r0, r3
 80150de:	3710      	adds	r7, #16
 80150e0:	46bd      	mov	sp, r7
 80150e2:	bd80      	pop	{r7, pc}

080150e4 <_ZSt23__copy_move_backward_a1ILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b084      	sub	sp, #16
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	60f8      	str	r0, [r7, #12]
 80150ec:	60b9      	str	r1, [r7, #8]
 80150ee:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80150f0:	687a      	ldr	r2, [r7, #4]
 80150f2:	68b9      	ldr	r1, [r7, #8]
 80150f4:	68f8      	ldr	r0, [r7, #12]
 80150f6:	f000 fcfa 	bl	8015aee <_ZSt23__copy_move_backward_a2ILb1EPcS0_ET1_T0_S2_S1_>
 80150fa:	4603      	mov	r3, r0
 80150fc:	4618      	mov	r0, r3
 80150fe:	3710      	adds	r7, #16
 8015100:	46bd      	mov	sp, r7
 8015102:	bd80      	pop	{r7, pc}

08015104 <_ZSt12__niter_baseIPcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8015104:	b580      	push	{r7, lr}
 8015106:	b082      	sub	sp, #8
 8015108:	af00      	add	r7, sp, #0
 801510a:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 801510c:	1d3b      	adds	r3, r7, #4
 801510e:	4618      	mov	r0, r3
 8015110:	f7f3 fe1e 	bl	8008d50 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 8015114:	4603      	mov	r3, r0
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	4618      	mov	r0, r3
 801511a:	3708      	adds	r7, #8
 801511c:	46bd      	mov	sp, r7
 801511e:	bd80      	pop	{r7, pc}

08015120 <_ZSt14__copy_move_a1ILb0EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8015120:	b580      	push	{r7, lr}
 8015122:	b084      	sub	sp, #16
 8015124:	af00      	add	r7, sp, #0
 8015126:	60f8      	str	r0, [r7, #12]
 8015128:	60b9      	str	r1, [r7, #8]
 801512a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 801512c:	687a      	ldr	r2, [r7, #4]
 801512e:	68b9      	ldr	r1, [r7, #8]
 8015130:	68f8      	ldr	r0, [r7, #12]
 8015132:	f000 fcf9 	bl	8015b28 <_ZSt14__copy_move_a2ILb0EPcS0_ET1_T0_S2_S1_>
 8015136:	4603      	mov	r3, r0
 8015138:	4618      	mov	r0, r3
 801513a:	3710      	adds	r7, #16
 801513c:	46bd      	mov	sp, r7
 801513e:	bd80      	pop	{r7, pc}

08015140 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 8015140:	b580      	push	{r7, lr}
 8015142:	b082      	sub	sp, #8
 8015144:	af00      	add	r7, sp, #0
 8015146:	6078      	str	r0, [r7, #4]
 8015148:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 801514a:	6878      	ldr	r0, [r7, #4]
 801514c:	f7ff ffda 	bl	8015104 <_ZSt12__niter_baseIPcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8015150:	4602      	mov	r2, r0
 8015152:	683b      	ldr	r3, [r7, #0]
 8015154:	1a9a      	subs	r2, r3, r2
 8015156:	1d3b      	adds	r3, r7, #4
 8015158:	4611      	mov	r1, r2
 801515a:	4618      	mov	r0, r3
 801515c:	f7fa fde9 	bl	800fd32 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEplEi>
 8015160:	4603      	mov	r3, r0
 8015162:	4618      	mov	r0, r3
 8015164:	3708      	adds	r7, #8
 8015166:	46bd      	mov	sp, r7
 8015168:	bd80      	pop	{r7, pc}

0801516a <_ZSt9__advanceIPciEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 801516a:	b480      	push	{r7}
 801516c:	b085      	sub	sp, #20
 801516e:	af00      	add	r7, sp, #0
 8015170:	60f8      	str	r0, [r7, #12]
 8015172:	60b9      	str	r1, [r7, #8]
 8015174:	713a      	strb	r2, [r7, #4]
	__i += __n;
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	681a      	ldr	r2, [r3, #0]
 801517a:	68bb      	ldr	r3, [r7, #8]
 801517c:	441a      	add	r2, r3
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	601a      	str	r2, [r3, #0]
    }
 8015182:	bf00      	nop
 8015184:	3714      	adds	r7, #20
 8015186:	46bd      	mov	sp, r7
 8015188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801518c:	4770      	bx	lr

0801518e <_ZSt18uninitialized_copyIPcS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 801518e:	b580      	push	{r7, lr}
 8015190:	b086      	sub	sp, #24
 8015192:	af00      	add	r7, sp, #0
 8015194:	60f8      	str	r0, [r7, #12]
 8015196:	60b9      	str	r1, [r7, #8]
 8015198:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 801519a:	2301      	movs	r3, #1
 801519c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 801519e:	687a      	ldr	r2, [r7, #4]
 80151a0:	68b9      	ldr	r1, [r7, #8]
 80151a2:	68f8      	ldr	r0, [r7, #12]
 80151a4:	f000 fcdd 	bl	8015b62 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPcS2_EET0_T_S4_S3_>
 80151a8:	4603      	mov	r3, r0
    }
 80151aa:	4618      	mov	r0, r3
 80151ac:	3718      	adds	r7, #24
 80151ae:	46bd      	mov	sp, r7
 80151b0:	bd80      	pop	{r7, pc}

080151b2 <_ZSt32__make_move_if_noexcept_iteratorIcSt13move_iteratorIPcEET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 80151b2:	b580      	push	{r7, lr}
 80151b4:	b084      	sub	sp, #16
 80151b6:	af00      	add	r7, sp, #0
 80151b8:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80151ba:	f107 030c 	add.w	r3, r7, #12
 80151be:	6879      	ldr	r1, [r7, #4]
 80151c0:	4618      	mov	r0, r3
 80151c2:	f000 fc70 	bl	8015aa6 <_ZNSt13move_iteratorIPcEC1ES0_>
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	4618      	mov	r0, r3
 80151ca:	3710      	adds	r7, #16
 80151cc:	46bd      	mov	sp, r7
 80151ce:	bd80      	pop	{r7, pc}

080151d0 <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 80151d0:	b480      	push	{r7}
 80151d2:	b083      	sub	sp, #12
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	4618      	mov	r0, r3
 80151dc:	370c      	adds	r7, #12
 80151de:	46bd      	mov	sp, r7
 80151e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151e4:	4770      	bx	lr

080151e6 <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80151e6:	b480      	push	{r7}
 80151e8:	b083      	sub	sp, #12
 80151ea:	af00      	add	r7, sp, #0
 80151ec:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80151ee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 80151f2:	4618      	mov	r0, r3
 80151f4:	370c      	adds	r7, #12
 80151f6:	46bd      	mov	sp, r7
 80151f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151fc:	4770      	bx	lr

080151fe <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80151fe:	b580      	push	{r7, lr}
 8015200:	b084      	sub	sp, #16
 8015202:	af00      	add	r7, sp, #0
 8015204:	60f8      	str	r0, [r7, #12]
 8015206:	60b9      	str	r1, [r7, #8]
 8015208:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 801520a:	68f8      	ldr	r0, [r7, #12]
 801520c:	f7ff ffeb 	bl	80151e6 <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>
 8015210:	4602      	mov	r2, r0
 8015212:	68bb      	ldr	r3, [r7, #8]
 8015214:	4293      	cmp	r3, r2
 8015216:	bf8c      	ite	hi
 8015218:	2301      	movhi	r3, #1
 801521a:	2300      	movls	r3, #0
 801521c:	b2db      	uxtb	r3, r3
 801521e:	2b00      	cmp	r3, #0
 8015220:	bf14      	ite	ne
 8015222:	2301      	movne	r3, #1
 8015224:	2300      	moveq	r3, #0
 8015226:	b2db      	uxtb	r3, r3
 8015228:	2b00      	cmp	r3, #0
 801522a:	d001      	beq.n	8015230 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv+0x32>
	    std::__throw_bad_alloc();
 801522c:	f010 fbfe 	bl	8025a2c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8015230:	68b8      	ldr	r0, [r7, #8]
 8015232:	f010 fb2f 	bl	8025894 <_Znwj>
 8015236:	4603      	mov	r3, r0
 8015238:	bf00      	nop
      }
 801523a:	4618      	mov	r0, r3
 801523c:	3710      	adds	r7, #16
 801523e:	46bd      	mov	sp, r7
 8015240:	bd80      	pop	{r7, pc}

08015242 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8015242:	b590      	push	{r4, r7, lr}
 8015244:	b089      	sub	sp, #36	; 0x24
 8015246:	af00      	add	r7, sp, #0
 8015248:	60f8      	str	r0, [r7, #12]
 801524a:	60b9      	str	r1, [r7, #8]
 801524c:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 801524e:	f107 020c 	add.w	r2, r7, #12
 8015252:	f107 0308 	add.w	r3, r7, #8
 8015256:	4611      	mov	r1, r2
 8015258:	4618      	mov	r0, r3
 801525a:	f7ee fb43 	bl	80038e4 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 801525e:	4603      	mov	r3, r0
 8015260:	2b01      	cmp	r3, #1
 8015262:	bfd4      	ite	le
 8015264:	2301      	movle	r3, #1
 8015266:	2300      	movgt	r3, #0
 8015268:	b2db      	uxtb	r3, r3
 801526a:	2b00      	cmp	r3, #0
 801526c:	d139      	bne.n	80152e2 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa0>
      const _DistanceType __len = __last - __first;
 801526e:	f107 020c 	add.w	r2, r7, #12
 8015272:	f107 0308 	add.w	r3, r7, #8
 8015276:	4611      	mov	r1, r2
 8015278:	4618      	mov	r0, r3
 801527a:	f7ee fb33 	bl	80038e4 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 801527e:	61b8      	str	r0, [r7, #24]
      _DistanceType __parent = (__len - 2) / 2;
 8015280:	69bb      	ldr	r3, [r7, #24]
 8015282:	3b02      	subs	r3, #2
 8015284:	0fda      	lsrs	r2, r3, #31
 8015286:	4413      	add	r3, r2
 8015288:	105b      	asrs	r3, r3, #1
 801528a:	61fb      	str	r3, [r7, #28]
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 801528c:	f107 030c 	add.w	r3, r7, #12
 8015290:	69f9      	ldr	r1, [r7, #28]
 8015292:	4618      	mov	r0, r3
 8015294:	f7fd f83d 	bl	8012312 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8015298:	4603      	mov	r3, r0
 801529a:	617b      	str	r3, [r7, #20]
 801529c:	f107 0314 	add.w	r3, r7, #20
 80152a0:	4618      	mov	r0, r3
 80152a2:	f7fd f85e 	bl	8012362 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 80152a6:	4603      	mov	r3, r0
 80152a8:	4618      	mov	r0, r3
 80152aa:	f7f8 ff7d 	bl	800e1a8 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 80152ae:	4603      	mov	r3, r0
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	613b      	str	r3, [r7, #16]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 80152b4:	f107 0310 	add.w	r3, r7, #16
 80152b8:	4618      	mov	r0, r3
 80152ba:	f7f8 ff75 	bl	800e1a8 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 80152be:	4603      	mov	r3, r0
 80152c0:	edd3 7a00 	vldr	s15, [r3]
 80152c4:	4623      	mov	r3, r4
 80152c6:	eeb0 0a67 	vmov.f32	s0, s15
 80152ca:	69ba      	ldr	r2, [r7, #24]
 80152cc:	69f9      	ldr	r1, [r7, #28]
 80152ce:	68f8      	ldr	r0, [r7, #12]
 80152d0:	f000 fc57 	bl	8015b82 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
	  if (__parent == 0)
 80152d4:	69fb      	ldr	r3, [r7, #28]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d005      	beq.n	80152e6 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa4>
	  __parent--;
 80152da:	69fb      	ldr	r3, [r7, #28]
 80152dc:	3b01      	subs	r3, #1
 80152de:	61fb      	str	r3, [r7, #28]
      while (true)
 80152e0:	e7d4      	b.n	801528c <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x4a>
	return;
 80152e2:	bf00      	nop
 80152e4:	e000      	b.n	80152e8 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa6>
	    return;
 80152e6:	bf00      	nop
    }
 80152e8:	3724      	adds	r7, #36	; 0x24
 80152ea:	46bd      	mov	sp, r7
 80152ec:	bd90      	pop	{r4, r7, pc}

080152ee <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80152ee:	b5b0      	push	{r4, r5, r7, lr}
 80152f0:	b086      	sub	sp, #24
 80152f2:	af00      	add	r7, sp, #0
 80152f4:	60f8      	str	r0, [r7, #12]
 80152f6:	60b9      	str	r1, [r7, #8]
 80152f8:	607a      	str	r2, [r7, #4]
 80152fa:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 80152fc:	1d3b      	adds	r3, r7, #4
 80152fe:	4618      	mov	r0, r3
 8015300:	f7fd f82f 	bl	8012362 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8015304:	4603      	mov	r3, r0
 8015306:	4618      	mov	r0, r3
 8015308:	f7f8 ff4e 	bl	800e1a8 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 801530c:	4603      	mov	r3, r0
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	617b      	str	r3, [r7, #20]
      *__result = _GLIBCXX_MOVE(*__first);
 8015312:	f107 030c 	add.w	r3, r7, #12
 8015316:	4618      	mov	r0, r3
 8015318:	f7fd f823 	bl	8012362 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 801531c:	4603      	mov	r3, r0
 801531e:	4618      	mov	r0, r3
 8015320:	f7f8 ff42 	bl	800e1a8 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8015324:	4603      	mov	r3, r0
 8015326:	681c      	ldr	r4, [r3, #0]
 8015328:	1d3b      	adds	r3, r7, #4
 801532a:	4618      	mov	r0, r3
 801532c:	f7fd f819 	bl	8012362 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8015330:	4603      	mov	r3, r0
 8015332:	601c      	str	r4, [r3, #0]
			 _DistanceType(__last - __first),
 8015334:	f107 020c 	add.w	r2, r7, #12
 8015338:	f107 0308 	add.w	r3, r7, #8
 801533c:	4611      	mov	r1, r2
 801533e:	4618      	mov	r0, r3
 8015340:	f7ee fad0 	bl	80038e4 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8015344:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 8015346:	f107 0314 	add.w	r3, r7, #20
 801534a:	4618      	mov	r0, r3
 801534c:	f7f8 ff2c 	bl	800e1a8 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8015350:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 8015352:	edd3 7a00 	vldr	s15, [r3]
 8015356:	462b      	mov	r3, r5
 8015358:	eeb0 0a67 	vmov.f32	s0, s15
 801535c:	4622      	mov	r2, r4
 801535e:	2100      	movs	r1, #0
 8015360:	68f8      	ldr	r0, [r7, #12]
 8015362:	f000 fc0e 	bl	8015b82 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
    }
 8015366:	bf00      	nop
 8015368:	3718      	adds	r7, #24
 801536a:	46bd      	mov	sp, r7
 801536c:	bdb0      	pop	{r4, r5, r7, pc}

0801536e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 801536e:	b590      	push	{r4, r7, lr}
 8015370:	b083      	sub	sp, #12
 8015372:	af00      	add	r7, sp, #0
 8015374:	6078      	str	r0, [r7, #4]
 8015376:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 8015378:	1d3b      	adds	r3, r7, #4
 801537a:	4618      	mov	r0, r3
 801537c:	f7fc fff1 	bl	8012362 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8015380:	4604      	mov	r4, r0
 8015382:	463b      	mov	r3, r7
 8015384:	4618      	mov	r0, r3
 8015386:	f7fc ffec 	bl	8012362 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 801538a:	4603      	mov	r3, r0
 801538c:	4619      	mov	r1, r3
 801538e:	4620      	mov	r0, r4
 8015390:	f000 fc9f 	bl	8015cd2 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 8015394:	bf00      	nop
 8015396:	370c      	adds	r7, #12
 8015398:	46bd      	mov	sp, r7
 801539a:	bd90      	pop	{r4, r7, pc}

0801539c <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 801539c:	b580      	push	{r7, lr}
 801539e:	b084      	sub	sp, #16
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	60f8      	str	r0, [r7, #12]
 80153a4:	60b9      	str	r1, [r7, #8]
 80153a6:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80153a8:	687a      	ldr	r2, [r7, #4]
 80153aa:	68b9      	ldr	r1, [r7, #8]
 80153ac:	68f8      	ldr	r0, [r7, #12]
 80153ae:	f000 fcaf 	bl	8015d10 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>
 80153b2:	4603      	mov	r3, r0
 80153b4:	4618      	mov	r0, r3
 80153b6:	3710      	adds	r7, #16
 80153b8:	46bd      	mov	sp, r7
 80153ba:	bd80      	pop	{r7, pc}

080153bc <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80153bc:	b5b0      	push	{r4, r5, r7, lr}
 80153be:	b084      	sub	sp, #16
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	60f8      	str	r0, [r7, #12]
 80153c4:	60b9      	str	r1, [r7, #8]
 80153c6:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80153c8:	68f8      	ldr	r0, [r7, #12]
 80153ca:	f7fd fa40 	bl	801284e <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80153ce:	4604      	mov	r4, r0
 80153d0:	68b8      	ldr	r0, [r7, #8]
 80153d2:	f7fd fa3c 	bl	801284e <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80153d6:	4605      	mov	r5, r0
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	4618      	mov	r0, r3
 80153dc:	f7ee fc1c 	bl	8003c18 <_ZSt12__niter_baseIPfET_S1_>
 80153e0:	4603      	mov	r3, r0
 80153e2:	461a      	mov	r2, r3
 80153e4:	4629      	mov	r1, r5
 80153e6:	4620      	mov	r0, r4
 80153e8:	f7fd fa4d 	bl	8012886 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 80153ec:	4602      	mov	r2, r0
 80153ee:	1d3b      	adds	r3, r7, #4
 80153f0:	4611      	mov	r1, r2
 80153f2:	4618      	mov	r0, r3
 80153f4:	f7fa fea0 	bl	8010138 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 80153f8:	4603      	mov	r3, r0
    }
 80153fa:	4618      	mov	r0, r3
 80153fc:	3710      	adds	r7, #16
 80153fe:	46bd      	mov	sp, r7
 8015400:	bdb0      	pop	{r4, r5, r7, pc}

08015402 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8015402:	b480      	push	{r7}
 8015404:	b087      	sub	sp, #28
 8015406:	af00      	add	r7, sp, #0
 8015408:	60f8      	str	r0, [r7, #12]
 801540a:	60b9      	str	r1, [r7, #8]
 801540c:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 801540e:	68ba      	ldr	r2, [r7, #8]
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	1ad3      	subs	r3, r2, r3
 8015414:	109b      	asrs	r3, r3, #2
 8015416:	617b      	str	r3, [r7, #20]
 8015418:	e00c      	b.n	8015434 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x32>
	      *__result = *__first;
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	681a      	ldr	r2, [r3, #0]
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	601a      	str	r2, [r3, #0]
	      ++__first;
 8015422:	68fb      	ldr	r3, [r7, #12]
 8015424:	3304      	adds	r3, #4
 8015426:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	3304      	adds	r3, #4
 801542c:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 801542e:	697b      	ldr	r3, [r7, #20]
 8015430:	3b01      	subs	r3, #1
 8015432:	617b      	str	r3, [r7, #20]
 8015434:	697b      	ldr	r3, [r7, #20]
 8015436:	2b00      	cmp	r3, #0
 8015438:	dcef      	bgt.n	801541a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x18>
	  return __result;
 801543a:	687b      	ldr	r3, [r7, #4]
	}
 801543c:	4618      	mov	r0, r3
 801543e:	371c      	adds	r7, #28
 8015440:	46bd      	mov	sp, r7
 8015442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015446:	4770      	bx	lr

08015448 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>:
    __miter_base(_Iterator __it)
 8015448:	b480      	push	{r7}
 801544a:	b083      	sub	sp, #12
 801544c:	af00      	add	r7, sp, #0
 801544e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	4618      	mov	r0, r3
 8015454:	370c      	adds	r7, #12
 8015456:	46bd      	mov	sp, r7
 8015458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801545c:	4770      	bx	lr

0801545e <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 801545e:	b5b0      	push	{r4, r5, r7, lr}
 8015460:	b084      	sub	sp, #16
 8015462:	af00      	add	r7, sp, #0
 8015464:	60f8      	str	r0, [r7, #12]
 8015466:	60b9      	str	r1, [r7, #8]
 8015468:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 801546a:	68f8      	ldr	r0, [r7, #12]
 801546c:	f000 fc6d 	bl	8015d4a <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8015470:	4604      	mov	r4, r0
 8015472:	68b8      	ldr	r0, [r7, #8]
 8015474:	f000 fc69 	bl	8015d4a <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8015478:	4605      	mov	r5, r0
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	4618      	mov	r0, r3
 801547e:	f7fa fcbd 	bl	800fdfc <_ZSt12__niter_baseIPcET_S1_>
 8015482:	4603      	mov	r3, r0
 8015484:	461a      	mov	r2, r3
 8015486:	4629      	mov	r1, r5
 8015488:	4620      	mov	r0, r4
 801548a:	f7fa fcc2 	bl	800fe12 <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>
 801548e:	4602      	mov	r2, r0
 8015490:	1d3b      	adds	r3, r7, #4
 8015492:	4611      	mov	r1, r2
 8015494:	4618      	mov	r0, r3
 8015496:	f7fa fccc 	bl	800fe32 <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 801549a:	4603      	mov	r3, r0
    }
 801549c:	4618      	mov	r0, r3
 801549e:	3710      	adds	r7, #16
 80154a0:	46bd      	mov	sp, r7
 80154a2:	bdb0      	pop	{r4, r5, r7, pc}

080154a4 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80154a4:	b480      	push	{r7}
 80154a6:	b083      	sub	sp, #12
 80154a8:	af00      	add	r7, sp, #0
 80154aa:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 80154ac:	4b03      	ldr	r3, [pc, #12]	; (80154bc <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_+0x18>)
      }
 80154ae:	4618      	mov	r0, r3
 80154b0:	370c      	adds	r7, #12
 80154b2:	46bd      	mov	sp, r7
 80154b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154b8:	4770      	bx	lr
 80154ba:	bf00      	nop
 80154bc:	0aaaaaaa 	.word	0x0aaaaaaa

080154c0 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b084      	sub	sp, #16
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80154c8:	4b0a      	ldr	r3, [pc, #40]	; (80154f4 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 80154ca:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80154cc:	6878      	ldr	r0, [r7, #4]
 80154ce:	f7ff ffe9 	bl	80154a4 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_>
 80154d2:	4603      	mov	r3, r0
 80154d4:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80154d6:	f107 0208 	add.w	r2, r7, #8
 80154da:	f107 030c 	add.w	r3, r7, #12
 80154de:	4611      	mov	r1, r2
 80154e0:	4618      	mov	r0, r3
 80154e2:	f7ee fb4f 	bl	8003b84 <_ZSt3minIjERKT_S2_S2_>
 80154e6:	4603      	mov	r3, r0
 80154e8:	681b      	ldr	r3, [r3, #0]
      }
 80154ea:	4618      	mov	r0, r3
 80154ec:	3710      	adds	r7, #16
 80154ee:	46bd      	mov	sp, r7
 80154f0:	bd80      	pop	{r7, pc}
 80154f2:	bf00      	nop
 80154f4:	05555555 	.word	0x05555555

080154f8 <_ZSt12__relocate_aIPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80154f8:	b5b0      	push	{r4, r5, r7, lr}
 80154fa:	b084      	sub	sp, #16
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	60f8      	str	r0, [r7, #12]
 8015500:	60b9      	str	r1, [r7, #8]
 8015502:	607a      	str	r2, [r7, #4]
 8015504:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8015506:	68f8      	ldr	r0, [r7, #12]
 8015508:	f000 fc6c 	bl	8015de4 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 801550c:	4604      	mov	r4, r0
 801550e:	68b8      	ldr	r0, [r7, #8]
 8015510:	f000 fc68 	bl	8015de4 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 8015514:	4605      	mov	r5, r0
 8015516:	6878      	ldr	r0, [r7, #4]
 8015518:	f000 fc64 	bl	8015de4 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 801551c:	4602      	mov	r2, r0
 801551e:	683b      	ldr	r3, [r7, #0]
 8015520:	4629      	mov	r1, r5
 8015522:	4620      	mov	r0, r4
 8015524:	f000 fc69 	bl	8015dfa <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>
 8015528:	4603      	mov	r3, r0
    }
 801552a:	4618      	mov	r0, r3
 801552c:	3710      	adds	r7, #16
 801552e:	46bd      	mov	sp, r7
 8015530:	bdb0      	pop	{r4, r5, r7, pc}

08015532 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE37select_on_container_copy_constructionERKS2_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8015532:	b580      	push	{r7, lr}
 8015534:	b082      	sub	sp, #8
 8015536:	af00      	add	r7, sp, #0
 8015538:	6078      	str	r0, [r7, #4]
 801553a:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 801553c:	6839      	ldr	r1, [r7, #0]
 801553e:	6878      	ldr	r0, [r7, #4]
 8015540:	f000 fc81 	bl	8015e46 <_ZNSaIN3jlb4EdgeEEC1ERKS1_>
 8015544:	6878      	ldr	r0, [r7, #4]
 8015546:	3708      	adds	r7, #8
 8015548:	46bd      	mov	sp, r7
 801554a:	bd80      	pop	{r7, pc}

0801554c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 801554c:	b580      	push	{r7, lr}
 801554e:	b082      	sub	sp, #8
 8015550:	af00      	add	r7, sp, #0
 8015552:	6078      	str	r0, [r7, #4]
 8015554:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8015556:	6839      	ldr	r1, [r7, #0]
 8015558:	6878      	ldr	r0, [r7, #4]
 801555a:	f000 fc74 	bl	8015e46 <_ZNSaIN3jlb4EdgeEEC1ERKS1_>
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	4618      	mov	r0, r3
 8015562:	f7f9 f92e 	bl	800e7c2 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	4618      	mov	r0, r3
 801556a:	3708      	adds	r7, #8
 801556c:	46bd      	mov	sp, r7
 801556e:	bd80      	pop	{r7, pc}

08015570 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8015570:	b580      	push	{r7, lr}
 8015572:	b082      	sub	sp, #8
 8015574:	af00      	add	r7, sp, #0
 8015576:	6078      	str	r0, [r7, #4]
 8015578:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 801557a:	6839      	ldr	r1, [r7, #0]
 801557c:	6878      	ldr	r0, [r7, #4]
 801557e:	f7fd fab7 	bl	8012af0 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>
 8015582:	4602      	mov	r2, r0
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	681a      	ldr	r2, [r3, #0]
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	6819      	ldr	r1, [r3, #0]
 8015594:	683a      	ldr	r2, [r7, #0]
 8015596:	4613      	mov	r3, r2
 8015598:	005b      	lsls	r3, r3, #1
 801559a:	4413      	add	r3, r2
 801559c:	00db      	lsls	r3, r3, #3
 801559e:	18ca      	adds	r2, r1, r3
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	609a      	str	r2, [r3, #8]
      }
 80155a4:	bf00      	nop
 80155a6:	3708      	adds	r7, #8
 80155a8:	46bd      	mov	sp, r7
 80155aa:	bd80      	pop	{r7, pc}

080155ac <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80155ac:	b480      	push	{r7}
 80155ae:	b083      	sub	sp, #12
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	6078      	str	r0, [r7, #4]
 80155b4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80155b6:	683b      	ldr	r3, [r7, #0]
 80155b8:	681a      	ldr	r2, [r3, #0]
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	601a      	str	r2, [r3, #0]
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	4618      	mov	r0, r3
 80155c2:	370c      	adds	r7, #12
 80155c4:	46bd      	mov	sp, r7
 80155c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ca:	4770      	bx	lr

080155cc <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80155cc:	b580      	push	{r7, lr}
 80155ce:	b086      	sub	sp, #24
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	60f8      	str	r0, [r7, #12]
 80155d4:	60b9      	str	r1, [r7, #8]
 80155d6:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80155d8:	2301      	movs	r3, #1
 80155da:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80155dc:	687a      	ldr	r2, [r7, #4]
 80155de:	68b9      	ldr	r1, [r7, #8]
 80155e0:	68f8      	ldr	r0, [r7, #12]
 80155e2:	f000 fc5a 	bl	8015e9a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>
 80155e6:	4603      	mov	r3, r0
    }
 80155e8:	4618      	mov	r0, r3
 80155ea:	3718      	adds	r7, #24
 80155ec:	46bd      	mov	sp, r7
 80155ee:	bd80      	pop	{r7, pc}

080155f0 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80155f0:	b480      	push	{r7}
 80155f2:	b083      	sub	sp, #12
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 80155f8:	4b03      	ldr	r3, [pc, #12]	; (8015608 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_+0x18>)
      }
 80155fa:	4618      	mov	r0, r3
 80155fc:	370c      	adds	r7, #12
 80155fe:	46bd      	mov	sp, r7
 8015600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015604:	4770      	bx	lr
 8015606:	bf00      	nop
 8015608:	0aaaaaaa 	.word	0x0aaaaaaa

0801560c <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 801560c:	b580      	push	{r7, lr}
 801560e:	b084      	sub	sp, #16
 8015610:	af00      	add	r7, sp, #0
 8015612:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8015614:	4b0a      	ldr	r3, [pc, #40]	; (8015640 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 8015616:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8015618:	6878      	ldr	r0, [r7, #4]
 801561a:	f7ff ffe9 	bl	80155f0 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_>
 801561e:	4603      	mov	r3, r0
 8015620:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8015622:	f107 0208 	add.w	r2, r7, #8
 8015626:	f107 030c 	add.w	r3, r7, #12
 801562a:	4611      	mov	r1, r2
 801562c:	4618      	mov	r0, r3
 801562e:	f7ee faa9 	bl	8003b84 <_ZSt3minIjERKT_S2_S2_>
 8015632:	4603      	mov	r3, r0
 8015634:	681b      	ldr	r3, [r3, #0]
      }
 8015636:	4618      	mov	r0, r3
 8015638:	3710      	adds	r7, #16
 801563a:	46bd      	mov	sp, r7
 801563c:	bd80      	pop	{r7, pc}
 801563e:	bf00      	nop
 8015640:	05555555 	.word	0x05555555

08015644 <_ZNKSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8015644:	b480      	push	{r7}
 8015646:	b083      	sub	sp, #12
 8015648:	af00      	add	r7, sp, #0
 801564a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	4618      	mov	r0, r3
 8015650:	370c      	adds	r7, #12
 8015652:	46bd      	mov	sp, r7
 8015654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015658:	4770      	bx	lr

0801565a <_ZSt18uninitialized_copyIPKN3jlb4NodeEPS1_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 801565a:	b580      	push	{r7, lr}
 801565c:	b086      	sub	sp, #24
 801565e:	af00      	add	r7, sp, #0
 8015660:	60f8      	str	r0, [r7, #12]
 8015662:	60b9      	str	r1, [r7, #8]
 8015664:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8015666:	2301      	movs	r3, #1
 8015668:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 801566a:	687a      	ldr	r2, [r7, #4]
 801566c:	68b9      	ldr	r1, [r7, #8]
 801566e:	68f8      	ldr	r0, [r7, #12]
 8015670:	f000 fc84 	bl	8015f7c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_>
 8015674:	4603      	mov	r3, r0
    }
 8015676:	4618      	mov	r0, r3
 8015678:	3718      	adds	r7, #24
 801567a:	46bd      	mov	sp, r7
 801567c:	bd80      	pop	{r7, pc}

0801567e <_ZSt14__relocate_a_1IccENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 801567e:	b580      	push	{r7, lr}
 8015680:	b086      	sub	sp, #24
 8015682:	af00      	add	r7, sp, #0
 8015684:	60f8      	str	r0, [r7, #12]
 8015686:	60b9      	str	r1, [r7, #8]
 8015688:	607a      	str	r2, [r7, #4]
 801568a:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 801568c:	68ba      	ldr	r2, [r7, #8]
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	1ad3      	subs	r3, r2, r3
 8015692:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8015694:	697b      	ldr	r3, [r7, #20]
 8015696:	2b00      	cmp	r3, #0
 8015698:	dd05      	ble.n	80156a6 <_ZSt14__relocate_a_1IccENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x28>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801569a:	697b      	ldr	r3, [r7, #20]
 801569c:	461a      	mov	r2, r3
 801569e:	68f9      	ldr	r1, [r7, #12]
 80156a0:	6878      	ldr	r0, [r7, #4]
 80156a2:	f013 fa11 	bl	8028ac8 <memmove>
      return __result + __count;
 80156a6:	697b      	ldr	r3, [r7, #20]
 80156a8:	687a      	ldr	r2, [r7, #4]
 80156aa:	4413      	add	r3, r2
    }
 80156ac:	4618      	mov	r0, r3
 80156ae:	3718      	adds	r7, #24
 80156b0:	46bd      	mov	sp, r7
 80156b2:	bd80      	pop	{r7, pc}

080156b4 <_ZNSt4pairIKcS_IfSt6vectorIS_IciESaIS2_EEEED1Ev>:
    struct pair
 80156b4:	b580      	push	{r7, lr}
 80156b6:	b082      	sub	sp, #8
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	6078      	str	r0, [r7, #4]
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	3304      	adds	r3, #4
 80156c0:	4618      	mov	r0, r3
 80156c2:	f7f3 fabd 	bl	8008c40 <_ZNSt4pairIfSt6vectorIS_IciESaIS1_EEED1Ev>
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	4618      	mov	r0, r3
 80156ca:	3708      	adds	r7, #8
 80156cc:	46bd      	mov	sp, r7
 80156ce:	bd80      	pop	{r7, pc}

080156d0 <_ZSt10destroy_atISt4pairIKcS0_IfSt6vectorIS0_IciESaIS3_EEEEEvPT_>:
    destroy_at(_Tp* __location)
 80156d0:	b580      	push	{r7, lr}
 80156d2:	b082      	sub	sp, #8
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 80156d8:	6878      	ldr	r0, [r7, #4]
 80156da:	f7ff ffeb 	bl	80156b4 <_ZNSt4pairIKcS_IfSt6vectorIS_IciESaIS2_EEEED1Ev>
    }
 80156de:	bf00      	nop
 80156e0:	3708      	adds	r7, #8
 80156e2:	46bd      	mov	sp, r7
 80156e4:	bd80      	pop	{r7, pc}

080156e6 <_ZN9__gnu_cxx13new_allocatorISt4pairIfcEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 80156e6:	b580      	push	{r7, lr}
 80156e8:	b084      	sub	sp, #16
 80156ea:	af00      	add	r7, sp, #0
 80156ec:	60f8      	str	r0, [r7, #12]
 80156ee:	60b9      	str	r1, [r7, #8]
 80156f0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	00db      	lsls	r3, r3, #3
 80156f6:	4619      	mov	r1, r3
 80156f8:	68b8      	ldr	r0, [r7, #8]
 80156fa:	f010 f8c9 	bl	8025890 <_ZdlPvj>
      }
 80156fe:	3710      	adds	r7, #16
 8015700:	46bd      	mov	sp, r7
 8015702:	bd80      	pop	{r7, pc}

08015704 <_ZNSt11_Tuple_implILj0EJRKcEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8015704:	b480      	push	{r7}
 8015706:	b083      	sub	sp, #12
 8015708:	af00      	add	r7, sp, #0
 801570a:	6078      	str	r0, [r7, #4]
 801570c:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	683a      	ldr	r2, [r7, #0]
 8015712:	6812      	ldr	r2, [r2, #0]
 8015714:	601a      	str	r2, [r3, #0]
      { }
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	4618      	mov	r0, r3
 801571a:	370c      	adds	r7, #12
 801571c:	46bd      	mov	sp, r7
 801571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015722:	4770      	bx	lr

08015724 <_ZNSt4pairIKcS_IfSt6vectorIS_IciESaIS2_EEEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS9_IJDpT1_EESt12_Index_tupleIJXspT0_EEESI_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 8015724:	b580      	push	{r7, lr}
 8015726:	b084      	sub	sp, #16
 8015728:	af00      	add	r7, sp, #0
 801572a:	60f8      	str	r0, [r7, #12]
 801572c:	60b9      	str	r1, [r7, #8]
 801572e:	607a      	str	r2, [r7, #4]
 8015730:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8015732:	68b8      	ldr	r0, [r7, #8]
 8015734:	f000 fc92 	bl	801605c <_ZSt3getILj0EJRKcEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8015738:	4603      	mov	r3, r0
 801573a:	4618      	mov	r0, r3
 801573c:	f7f9 fca4 	bl	800f088 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>
 8015740:	4603      	mov	r3, r0
 8015742:	781a      	ldrb	r2, [r3, #0]
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	701a      	strb	r2, [r3, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	3304      	adds	r3, #4
 801574c:	4618      	mov	r0, r3
 801574e:	f000 fc92 	bl	8016076 <_ZNSt4pairIfSt6vectorIS_IciESaIS1_EEEC1IfS3_Lb1EEEv>
      { }
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	4618      	mov	r0, r3
 8015756:	3710      	adds	r7, #16
 8015758:	46bd      	mov	sp, r7
 801575a:	bd80      	pop	{r7, pc}

0801575c <_ZNSt4pairIKcS_IfSt6vectorIS_IciESaIS2_EEEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESA_IJDpT0_EE>:
      pair<_T1, _T2>::
 801575c:	b5b0      	push	{r4, r5, r7, lr}
 801575e:	b086      	sub	sp, #24
 8015760:	af02      	add	r7, sp, #8
 8015762:	60f8      	str	r0, [r7, #12]
 8015764:	7239      	strb	r1, [r7, #8]
 8015766:	607a      	str	r2, [r7, #4]
 8015768:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 801576a:	463a      	mov	r2, r7
 801576c:	f88d 4000 	strb.w	r4, [sp]
 8015770:	462b      	mov	r3, r5
 8015772:	6879      	ldr	r1, [r7, #4]
 8015774:	68f8      	ldr	r0, [r7, #12]
 8015776:	f7ff ffd5 	bl	8015724 <_ZNSt4pairIKcS_IfSt6vectorIS_IciESaIS2_EEEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS9_IJDpT1_EESt12_Index_tupleIJXspT0_EEESI_IJXspT2_EEE>
      { }
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	4618      	mov	r0, r3
 801577e:	3710      	adds	r7, #16
 8015780:	46bd      	mov	sp, r7
 8015782:	bdb0      	pop	{r4, r5, r7, pc}

08015784 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKcS1_IfSt6vectorIS1_IciESaIS4_EEEEEEOT_RNSt16remove_referenceISC_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8015784:	b480      	push	{r7}
 8015786:	b083      	sub	sp, #12
 8015788:	af00      	add	r7, sp, #0
 801578a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	4618      	mov	r0, r3
 8015790:	370c      	adds	r7, #12
 8015792:	46bd      	mov	sp, r7
 8015794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015798:	4770      	bx	lr

0801579a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKcS1_IfSt6vectorIS1_IciESaIS4_EEEEE7_M_addrEv>:
      _M_addr() const noexcept
 801579a:	b480      	push	{r7}
 801579c:	b083      	sub	sp, #12
 801579e:	af00      	add	r7, sp, #0
 80157a0:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	4618      	mov	r0, r3
 80157a6:	370c      	adds	r7, #12
 80157a8:	46bd      	mov	sp, r7
 80157aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ae:	4770      	bx	lr

080157b0 <_ZNKSt6vectorISt4pairIfcESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80157b0:	b580      	push	{r7, lr}
 80157b2:	b082      	sub	sp, #8
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	4618      	mov	r0, r3
 80157bc:	f000 fc99 	bl	80160f2 <_ZNKSt12_Vector_baseISt4pairIfcESaIS1_EE19_M_get_Tp_allocatorEv>
 80157c0:	4603      	mov	r3, r0
 80157c2:	4618      	mov	r0, r3
 80157c4:	f000 fc7b 	bl	80160be <_ZNSt6vectorISt4pairIfcESaIS1_EE11_S_max_sizeERKS2_>
 80157c8:	4603      	mov	r3, r0
 80157ca:	4618      	mov	r0, r3
 80157cc:	3708      	adds	r7, #8
 80157ce:	46bd      	mov	sp, r7
 80157d0:	bd80      	pop	{r7, pc}

080157d2 <_ZNKSt6vectorISt4pairIfcESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80157d2:	b480      	push	{r7}
 80157d4:	b083      	sub	sp, #12
 80157d6:	af00      	add	r7, sp, #0
 80157d8:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	685a      	ldr	r2, [r3, #4]
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	1ad3      	subs	r3, r2, r3
 80157e4:	10db      	asrs	r3, r3, #3
 80157e6:	4618      	mov	r0, r3
 80157e8:	370c      	adds	r7, #12
 80157ea:	46bd      	mov	sp, r7
 80157ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f0:	4770      	bx	lr

080157f2 <_ZNSt16allocator_traitsISaISt4pairIfcEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80157f2:	b580      	push	{r7, lr}
 80157f4:	b084      	sub	sp, #16
 80157f6:	af00      	add	r7, sp, #0
 80157f8:	6078      	str	r0, [r7, #4]
 80157fa:	6039      	str	r1, [r7, #0]
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	60fb      	str	r3, [r7, #12]
 8015800:	683b      	ldr	r3, [r7, #0]
 8015802:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8015804:	f7ed f982 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8015808:	4603      	mov	r3, r0
 801580a:	2b00      	cmp	r3, #0
 801580c:	d006      	beq.n	801581c <_ZNSt16allocator_traitsISaISt4pairIfcEEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801580e:	68bb      	ldr	r3, [r7, #8]
 8015810:	00db      	lsls	r3, r3, #3
 8015812:	4618      	mov	r0, r3
 8015814:	f010 f83e 	bl	8025894 <_Znwj>
 8015818:	4603      	mov	r3, r0
 801581a:	e006      	b.n	801582a <_ZNSt16allocator_traitsISaISt4pairIfcEEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801581c:	2200      	movs	r2, #0
 801581e:	68b9      	ldr	r1, [r7, #8]
 8015820:	68f8      	ldr	r0, [r7, #12]
 8015822:	f000 fef7 	bl	8016614 <_ZN9__gnu_cxx13new_allocatorISt4pairIfcEE8allocateEjPKv>
 8015826:	4603      	mov	r3, r0
 8015828:	bf00      	nop
      { return __a.allocate(__n); }
 801582a:	4618      	mov	r0, r3
 801582c:	3710      	adds	r7, #16
 801582e:	46bd      	mov	sp, r7
 8015830:	bd80      	pop	{r7, pc}

08015832 <_ZNSt6vectorISt4pairIfcESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8015832:	b580      	push	{r7, lr}
 8015834:	b084      	sub	sp, #16
 8015836:	af00      	add	r7, sp, #0
 8015838:	60f8      	str	r0, [r7, #12]
 801583a:	60b9      	str	r1, [r7, #8]
 801583c:	607a      	str	r2, [r7, #4]
 801583e:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8015840:	683b      	ldr	r3, [r7, #0]
 8015842:	687a      	ldr	r2, [r7, #4]
 8015844:	68b9      	ldr	r1, [r7, #8]
 8015846:	68f8      	ldr	r0, [r7, #12]
 8015848:	f000 fc5e 	bl	8016108 <_ZSt12__relocate_aIPSt4pairIfcES2_SaIS1_EET0_T_S5_S4_RT1_>
 801584c:	4603      	mov	r3, r0
      }
 801584e:	4618      	mov	r0, r3
 8015850:	3710      	adds	r7, #16
 8015852:	46bd      	mov	sp, r7
 8015854:	bd80      	pop	{r7, pc}

08015856 <_ZNK9__gnu_cxx13new_allocatorISt4pairIciEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8015856:	b480      	push	{r7}
 8015858:	b083      	sub	sp, #12
 801585a:	af00      	add	r7, sp, #0
 801585c:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801585e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 8015862:	4618      	mov	r0, r3
 8015864:	370c      	adds	r7, #12
 8015866:	46bd      	mov	sp, r7
 8015868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801586c:	4770      	bx	lr

0801586e <_ZN9__gnu_cxx13new_allocatorISt4pairIciEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801586e:	b580      	push	{r7, lr}
 8015870:	b084      	sub	sp, #16
 8015872:	af00      	add	r7, sp, #0
 8015874:	60f8      	str	r0, [r7, #12]
 8015876:	60b9      	str	r1, [r7, #8]
 8015878:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 801587a:	68f8      	ldr	r0, [r7, #12]
 801587c:	f7ff ffeb 	bl	8015856 <_ZNK9__gnu_cxx13new_allocatorISt4pairIciEE11_M_max_sizeEv>
 8015880:	4602      	mov	r2, r0
 8015882:	68bb      	ldr	r3, [r7, #8]
 8015884:	4293      	cmp	r3, r2
 8015886:	bf8c      	ite	hi
 8015888:	2301      	movhi	r3, #1
 801588a:	2300      	movls	r3, #0
 801588c:	b2db      	uxtb	r3, r3
 801588e:	2b00      	cmp	r3, #0
 8015890:	bf14      	ite	ne
 8015892:	2301      	movne	r3, #1
 8015894:	2300      	moveq	r3, #0
 8015896:	b2db      	uxtb	r3, r3
 8015898:	2b00      	cmp	r3, #0
 801589a:	d007      	beq.n	80158ac <_ZN9__gnu_cxx13new_allocatorISt4pairIciEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 801589c:	68bb      	ldr	r3, [r7, #8]
 801589e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80158a2:	d301      	bcc.n	80158a8 <_ZN9__gnu_cxx13new_allocatorISt4pairIciEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80158a4:	f010 f8c5 	bl	8025a32 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80158a8:	f010 f8c0 	bl	8025a2c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80158ac:	68bb      	ldr	r3, [r7, #8]
 80158ae:	00db      	lsls	r3, r3, #3
 80158b0:	4618      	mov	r0, r3
 80158b2:	f00f ffef 	bl	8025894 <_Znwj>
 80158b6:	4603      	mov	r3, r0
 80158b8:	bf00      	nop
      }
 80158ba:	4618      	mov	r0, r3
 80158bc:	3710      	adds	r7, #16
 80158be:	46bd      	mov	sp, r7
 80158c0:	bd80      	pop	{r7, pc}

080158c2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt4pairIciEPS4_EET0_T_S9_S8_>:
	__copy_m(_II __first, _II __last, _OI __result)
 80158c2:	b580      	push	{r7, lr}
 80158c4:	b086      	sub	sp, #24
 80158c6:	af00      	add	r7, sp, #0
 80158c8:	60f8      	str	r0, [r7, #12]
 80158ca:	60b9      	str	r1, [r7, #8]
 80158cc:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80158ce:	68ba      	ldr	r2, [r7, #8]
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	1ad3      	subs	r3, r2, r3
 80158d4:	10db      	asrs	r3, r3, #3
 80158d6:	617b      	str	r3, [r7, #20]
 80158d8:	e00c      	b.n	80158f4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt4pairIciEPS4_EET0_T_S9_S8_+0x32>
	      *__result = *__first;
 80158da:	68f9      	ldr	r1, [r7, #12]
 80158dc:	6878      	ldr	r0, [r7, #4]
 80158de:	f7ff fabc 	bl	8014e5a <_ZNSt4pairIciEaSERKS0_>
	      ++__first;
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	3308      	adds	r3, #8
 80158e6:	60fb      	str	r3, [r7, #12]
	      ++__result;
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	3308      	adds	r3, #8
 80158ec:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80158ee:	697b      	ldr	r3, [r7, #20]
 80158f0:	3b01      	subs	r3, #1
 80158f2:	617b      	str	r3, [r7, #20]
 80158f4:	697b      	ldr	r3, [r7, #20]
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	dcef      	bgt.n	80158da <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt4pairIciEPS4_EET0_T_S9_S8_+0x18>
	  return __result;
 80158fa:	687b      	ldr	r3, [r7, #4]
	}
 80158fc:	4618      	mov	r0, r3
 80158fe:	3718      	adds	r7, #24
 8015900:	46bd      	mov	sp, r7
 8015902:	bd80      	pop	{r7, pc}

08015904 <_ZSt7forwardIRSt4pairIciEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8015904:	b480      	push	{r7}
 8015906:	b083      	sub	sp, #12
 8015908:	af00      	add	r7, sp, #0
 801590a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	4618      	mov	r0, r3
 8015910:	370c      	adds	r7, #12
 8015912:	46bd      	mov	sp, r7
 8015914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015918:	4770      	bx	lr

0801591a <_ZNSt16allocator_traitsISaISt4pairIciEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 801591a:	b480      	push	{r7}
 801591c:	b083      	sub	sp, #12
 801591e:	af00      	add	r7, sp, #0
 8015920:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8015922:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8015926:	4618      	mov	r0, r3
 8015928:	370c      	adds	r7, #12
 801592a:	46bd      	mov	sp, r7
 801592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015930:	4770      	bx	lr

08015932 <_ZNSt6vectorISt4pairIciESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8015932:	b580      	push	{r7, lr}
 8015934:	b084      	sub	sp, #16
 8015936:	af00      	add	r7, sp, #0
 8015938:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 801593a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 801593e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8015940:	6878      	ldr	r0, [r7, #4]
 8015942:	f7ff ffea 	bl	801591a <_ZNSt16allocator_traitsISaISt4pairIciEEE8max_sizeERKS2_>
 8015946:	4603      	mov	r3, r0
 8015948:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 801594a:	f107 0208 	add.w	r2, r7, #8
 801594e:	f107 030c 	add.w	r3, r7, #12
 8015952:	4611      	mov	r1, r2
 8015954:	4618      	mov	r0, r3
 8015956:	f7ee f915 	bl	8003b84 <_ZSt3minIjERKT_S2_S2_>
 801595a:	4603      	mov	r3, r0
 801595c:	681b      	ldr	r3, [r3, #0]
      }
 801595e:	4618      	mov	r0, r3
 8015960:	3710      	adds	r7, #16
 8015962:	46bd      	mov	sp, r7
 8015964:	bd80      	pop	{r7, pc}

08015966 <_ZSt12__relocate_aIPSt4pairIciES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8015966:	b5b0      	push	{r4, r5, r7, lr}
 8015968:	b084      	sub	sp, #16
 801596a:	af00      	add	r7, sp, #0
 801596c:	60f8      	str	r0, [r7, #12]
 801596e:	60b9      	str	r1, [r7, #8]
 8015970:	607a      	str	r2, [r7, #4]
 8015972:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8015974:	68f8      	ldr	r0, [r7, #12]
 8015976:	f7fb fe6a 	bl	801164e <_ZSt12__niter_baseIPSt4pairIciEET_S3_>
 801597a:	4604      	mov	r4, r0
 801597c:	68b8      	ldr	r0, [r7, #8]
 801597e:	f7fb fe66 	bl	801164e <_ZSt12__niter_baseIPSt4pairIciEET_S3_>
 8015982:	4605      	mov	r5, r0
 8015984:	6878      	ldr	r0, [r7, #4]
 8015986:	f7fb fe62 	bl	801164e <_ZSt12__niter_baseIPSt4pairIciEET_S3_>
 801598a:	4602      	mov	r2, r0
 801598c:	683b      	ldr	r3, [r7, #0]
 801598e:	4629      	mov	r1, r5
 8015990:	4620      	mov	r0, r4
 8015992:	f000 fbd6 	bl	8016142 <_ZSt14__relocate_a_1IPSt4pairIciES2_SaIS1_EET0_T_S5_S4_RT1_>
 8015996:	4603      	mov	r3, r0
    }
 8015998:	4618      	mov	r0, r3
 801599a:	3710      	adds	r7, #16
 801599c:	46bd      	mov	sp, r7
 801599e:	bdb0      	pop	{r4, r5, r7, pc}

080159a0 <_ZSt7forwardIRKSt4pairIciEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80159a0:	b480      	push	{r7}
 80159a2:	b083      	sub	sp, #12
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	4618      	mov	r0, r3
 80159ac:	370c      	adds	r7, #12
 80159ae:	46bd      	mov	sp, r7
 80159b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159b4:	4770      	bx	lr

080159b6 <_ZNK9__gnu_cxx13new_allocatorIPfE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80159b6:	b480      	push	{r7}
 80159b8:	b083      	sub	sp, #12
 80159ba:	af00      	add	r7, sp, #0
 80159bc:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80159be:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80159c2:	4618      	mov	r0, r3
 80159c4:	370c      	adds	r7, #12
 80159c6:	46bd      	mov	sp, r7
 80159c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159cc:	4770      	bx	lr

080159ce <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80159ce:	b580      	push	{r7, lr}
 80159d0:	b084      	sub	sp, #16
 80159d2:	af00      	add	r7, sp, #0
 80159d4:	60f8      	str	r0, [r7, #12]
 80159d6:	60b9      	str	r1, [r7, #8]
 80159d8:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80159da:	68f8      	ldr	r0, [r7, #12]
 80159dc:	f7ff ffeb 	bl	80159b6 <_ZNK9__gnu_cxx13new_allocatorIPfE11_M_max_sizeEv>
 80159e0:	4602      	mov	r2, r0
 80159e2:	68bb      	ldr	r3, [r7, #8]
 80159e4:	4293      	cmp	r3, r2
 80159e6:	bf8c      	ite	hi
 80159e8:	2301      	movhi	r3, #1
 80159ea:	2300      	movls	r3, #0
 80159ec:	b2db      	uxtb	r3, r3
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	bf14      	ite	ne
 80159f2:	2301      	movne	r3, #1
 80159f4:	2300      	moveq	r3, #0
 80159f6:	b2db      	uxtb	r3, r3
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d007      	beq.n	8015a0c <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80159fc:	68bb      	ldr	r3, [r7, #8]
 80159fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015a02:	d301      	bcc.n	8015a08 <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8015a04:	f010 f815 	bl	8025a32 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8015a08:	f010 f810 	bl	8025a2c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8015a0c:	68bb      	ldr	r3, [r7, #8]
 8015a0e:	009b      	lsls	r3, r3, #2
 8015a10:	4618      	mov	r0, r3
 8015a12:	f00f ff3f 	bl	8025894 <_Znwj>
 8015a16:	4603      	mov	r3, r0
 8015a18:	bf00      	nop
      }
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	3710      	adds	r7, #16
 8015a1e:	46bd      	mov	sp, r7
 8015a20:	bd80      	pop	{r7, pc}

08015a22 <_ZSt12__niter_baseIPPfET_S2_>:
    __niter_base(_Iterator __it)
 8015a22:	b480      	push	{r7}
 8015a24:	b083      	sub	sp, #12
 8015a26:	af00      	add	r7, sp, #0
 8015a28:	6078      	str	r0, [r7, #4]
    { return __it; }
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	370c      	adds	r7, #12
 8015a30:	46bd      	mov	sp, r7
 8015a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a36:	4770      	bx	lr

08015a38 <_ZSt14__copy_move_a1ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8015a38:	b580      	push	{r7, lr}
 8015a3a:	b084      	sub	sp, #16
 8015a3c:	af00      	add	r7, sp, #0
 8015a3e:	60f8      	str	r0, [r7, #12]
 8015a40:	60b9      	str	r1, [r7, #8]
 8015a42:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8015a44:	687a      	ldr	r2, [r7, #4]
 8015a46:	68b9      	ldr	r1, [r7, #8]
 8015a48:	68f8      	ldr	r0, [r7, #12]
 8015a4a:	f000 fba0 	bl	801618e <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_>
 8015a4e:	4603      	mov	r3, r0
 8015a50:	4618      	mov	r0, r3
 8015a52:	3710      	adds	r7, #16
 8015a54:	46bd      	mov	sp, r7
 8015a56:	bd80      	pop	{r7, pc}

08015a58 <_ZSt12__niter_wrapIPPfET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8015a58:	b480      	push	{r7}
 8015a5a:	b083      	sub	sp, #12
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	6078      	str	r0, [r7, #4]
 8015a60:	6039      	str	r1, [r7, #0]
    { return __res; }
 8015a62:	683b      	ldr	r3, [r7, #0]
 8015a64:	4618      	mov	r0, r3
 8015a66:	370c      	adds	r7, #12
 8015a68:	46bd      	mov	sp, r7
 8015a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a6e:	4770      	bx	lr

08015a70 <_ZSt23__copy_move_backward_a1ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8015a70:	b580      	push	{r7, lr}
 8015a72:	b084      	sub	sp, #16
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	60f8      	str	r0, [r7, #12]
 8015a78:	60b9      	str	r1, [r7, #8]
 8015a7a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8015a7c:	687a      	ldr	r2, [r7, #4]
 8015a7e:	68b9      	ldr	r1, [r7, #8]
 8015a80:	68f8      	ldr	r0, [r7, #12]
 8015a82:	f000 fba1 	bl	80161c8 <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_>
 8015a86:	4603      	mov	r3, r0
 8015a88:	4618      	mov	r0, r3
 8015a8a:	3710      	adds	r7, #16
 8015a8c:	46bd      	mov	sp, r7
 8015a8e:	bd80      	pop	{r7, pc}

08015a90 <_ZSt4moveIRPcEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8015a90:	b480      	push	{r7}
 8015a92:	b083      	sub	sp, #12
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	370c      	adds	r7, #12
 8015a9e:	46bd      	mov	sp, r7
 8015aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aa4:	4770      	bx	lr

08015aa6 <_ZNSt13move_iteratorIPcEC1ES0_>:
      move_iterator(iterator_type __i)
 8015aa6:	b580      	push	{r7, lr}
 8015aa8:	b082      	sub	sp, #8
 8015aaa:	af00      	add	r7, sp, #0
 8015aac:	6078      	str	r0, [r7, #4]
 8015aae:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8015ab0:	463b      	mov	r3, r7
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	f7ff ffec 	bl	8015a90 <_ZSt4moveIRPcEONSt16remove_referenceIT_E4typeEOS3_>
 8015ab8:	4603      	mov	r3, r0
 8015aba:	681a      	ldr	r2, [r3, #0]
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	601a      	str	r2, [r3, #0]
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	3708      	adds	r7, #8
 8015ac6:	46bd      	mov	sp, r7
 8015ac8:	bd80      	pop	{r7, pc}

08015aca <_ZSt18uninitialized_copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8015aca:	b580      	push	{r7, lr}
 8015acc:	b086      	sub	sp, #24
 8015ace:	af00      	add	r7, sp, #0
 8015ad0:	60f8      	str	r0, [r7, #12]
 8015ad2:	60b9      	str	r1, [r7, #8]
 8015ad4:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8015ad6:	2301      	movs	r3, #1
 8015ad8:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8015ada:	687a      	ldr	r2, [r7, #4]
 8015adc:	68b9      	ldr	r1, [r7, #8]
 8015ade:	68f8      	ldr	r0, [r7, #12]
 8015ae0:	f000 fb8f 	bl	8016202 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPcES3_EET0_T_S6_S5_>
 8015ae4:	4603      	mov	r3, r0
    }
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	3718      	adds	r7, #24
 8015aea:	46bd      	mov	sp, r7
 8015aec:	bd80      	pop	{r7, pc}

08015aee <_ZSt23__copy_move_backward_a2ILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8015aee:	b580      	push	{r7, lr}
 8015af0:	b084      	sub	sp, #16
 8015af2:	af00      	add	r7, sp, #0
 8015af4:	60f8      	str	r0, [r7, #12]
 8015af6:	60b9      	str	r1, [r7, #8]
 8015af8:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8015afa:	f7ed f807 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8015afe:	4603      	mov	r3, r0
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d006      	beq.n	8015b12 <_ZSt23__copy_move_backward_a2ILb1EPcS0_ET1_T0_S2_S1_+0x24>
	  __copy_move_b(__first, __last, __result);
 8015b04:	687a      	ldr	r2, [r7, #4]
 8015b06:	68b9      	ldr	r1, [r7, #8]
 8015b08:	68f8      	ldr	r0, [r7, #12]
 8015b0a:	f000 fb8a 	bl	8016222 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPcS3_EET0_T_S5_S4_>
 8015b0e:	4603      	mov	r3, r0
 8015b10:	e006      	b.n	8015b20 <_ZSt23__copy_move_backward_a2ILb1EPcS0_ET1_T0_S2_S1_+0x32>
				       _Category>::__copy_move_b(__first,
 8015b12:	687a      	ldr	r2, [r7, #4]
 8015b14:	68b9      	ldr	r1, [r7, #8]
 8015b16:	68f8      	ldr	r0, [r7, #12]
 8015b18:	f000 fba6 	bl	8016268 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_>
 8015b1c:	4603      	mov	r3, r0
								 __result);
 8015b1e:	bf00      	nop
    }
 8015b20:	4618      	mov	r0, r3
 8015b22:	3710      	adds	r7, #16
 8015b24:	46bd      	mov	sp, r7
 8015b26:	bd80      	pop	{r7, pc}

08015b28 <_ZSt14__copy_move_a2ILb0EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8015b28:	b580      	push	{r7, lr}
 8015b2a:	b084      	sub	sp, #16
 8015b2c:	af00      	add	r7, sp, #0
 8015b2e:	60f8      	str	r0, [r7, #12]
 8015b30:	60b9      	str	r1, [r7, #8]
 8015b32:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8015b34:	f7ec ffea 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8015b38:	4603      	mov	r3, r0
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d006      	beq.n	8015b4c <_ZSt14__copy_move_a2ILb0EPcS0_ET1_T0_S2_S1_+0x24>
	  __copy_m(__first, __last, __result);
 8015b3e:	687a      	ldr	r2, [r7, #4]
 8015b40:	68b9      	ldr	r1, [r7, #8]
 8015b42:	68f8      	ldr	r0, [r7, #12]
 8015b44:	f000 fbae 	bl	80162a4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_>
 8015b48:	4603      	mov	r3, r0
 8015b4a:	e006      	b.n	8015b5a <_ZSt14__copy_move_a2ILb0EPcS0_ET1_T0_S2_S1_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 8015b4c:	687a      	ldr	r2, [r7, #4]
 8015b4e:	68b9      	ldr	r1, [r7, #8]
 8015b50:	68f8      	ldr	r0, [r7, #12]
 8015b52:	f7fe fab4 	bl	80140be <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 8015b56:	4603      	mov	r3, r0
 8015b58:	bf00      	nop
    }
 8015b5a:	4618      	mov	r0, r3
 8015b5c:	3710      	adds	r7, #16
 8015b5e:	46bd      	mov	sp, r7
 8015b60:	bd80      	pop	{r7, pc}

08015b62 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPcS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8015b62:	b580      	push	{r7, lr}
 8015b64:	b084      	sub	sp, #16
 8015b66:	af00      	add	r7, sp, #0
 8015b68:	60f8      	str	r0, [r7, #12]
 8015b6a:	60b9      	str	r1, [r7, #8]
 8015b6c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8015b6e:	687a      	ldr	r2, [r7, #4]
 8015b70:	68b9      	ldr	r1, [r7, #8]
 8015b72:	68f8      	ldr	r0, [r7, #12]
 8015b74:	f000 fbb8 	bl	80162e8 <_ZSt4copyIPcS0_ET0_T_S2_S1_>
 8015b78:	4603      	mov	r3, r0
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	3710      	adds	r7, #16
 8015b7e:	46bd      	mov	sp, r7
 8015b80:	bd80      	pop	{r7, pc}

08015b82 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 8015b82:	b590      	push	{r4, r7, lr}
 8015b84:	b08f      	sub	sp, #60	; 0x3c
 8015b86:	af00      	add	r7, sp, #0
 8015b88:	6178      	str	r0, [r7, #20]
 8015b8a:	6139      	str	r1, [r7, #16]
 8015b8c:	60fa      	str	r2, [r7, #12]
 8015b8e:	ed87 0a02 	vstr	s0, [r7, #8]
 8015b92:	713b      	strb	r3, [r7, #4]
      const _Distance __topIndex = __holeIndex;
 8015b94:	693b      	ldr	r3, [r7, #16]
 8015b96:	633b      	str	r3, [r7, #48]	; 0x30
      _Distance __secondChild = __holeIndex;
 8015b98:	693b      	ldr	r3, [r7, #16]
 8015b9a:	637b      	str	r3, [r7, #52]	; 0x34
      while (__secondChild < (__len - 1) / 2)
 8015b9c:	e042      	b.n	8015c24 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0xa2>
	  __secondChild = 2 * (__secondChild + 1);
 8015b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ba0:	3301      	adds	r3, #1
 8015ba2:	005b      	lsls	r3, r3, #1
 8015ba4:	637b      	str	r3, [r7, #52]	; 0x34
	  if (__comp(__first + __secondChild,
 8015ba6:	f107 0314 	add.w	r3, r7, #20
 8015baa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015bac:	4618      	mov	r0, r3
 8015bae:	f7fc fbb0 	bl	8012312 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8015bb2:	4604      	mov	r4, r0
 8015bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bb6:	1e5a      	subs	r2, r3, #1
 8015bb8:	f107 0314 	add.w	r3, r7, #20
 8015bbc:	4611      	mov	r1, r2
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	f7fc fba7 	bl	8012312 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8015bc4:	4602      	mov	r2, r0
 8015bc6:	1d3b      	adds	r3, r7, #4
 8015bc8:	4621      	mov	r1, r4
 8015bca:	4618      	mov	r0, r3
 8015bcc:	f7fc fbd5 	bl	801237a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 8015bd0:	4603      	mov	r3, r0
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d002      	beq.n	8015bdc <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x5a>
	    __secondChild--;
 8015bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bd8:	3b01      	subs	r3, #1
 8015bda:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8015bdc:	f107 0314 	add.w	r3, r7, #20
 8015be0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015be2:	4618      	mov	r0, r3
 8015be4:	f7fc fb95 	bl	8012312 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8015be8:	4603      	mov	r3, r0
 8015bea:	623b      	str	r3, [r7, #32]
 8015bec:	f107 0320 	add.w	r3, r7, #32
 8015bf0:	4618      	mov	r0, r3
 8015bf2:	f7fc fbb6 	bl	8012362 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8015bf6:	4603      	mov	r3, r0
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	f7f8 fad5 	bl	800e1a8 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8015bfe:	4603      	mov	r3, r0
 8015c00:	681c      	ldr	r4, [r3, #0]
 8015c02:	f107 0314 	add.w	r3, r7, #20
 8015c06:	6939      	ldr	r1, [r7, #16]
 8015c08:	4618      	mov	r0, r3
 8015c0a:	f7fc fb82 	bl	8012312 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8015c0e:	4603      	mov	r3, r0
 8015c10:	627b      	str	r3, [r7, #36]	; 0x24
 8015c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015c16:	4618      	mov	r0, r3
 8015c18:	f7fc fba3 	bl	8012362 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8015c1c:	4603      	mov	r3, r0
 8015c1e:	601c      	str	r4, [r3, #0]
	  __holeIndex = __secondChild;
 8015c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c22:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 8015c24:	68fb      	ldr	r3, [r7, #12]
 8015c26:	3b01      	subs	r3, #1
 8015c28:	0fda      	lsrs	r2, r3, #31
 8015c2a:	4413      	add	r3, r2
 8015c2c:	105b      	asrs	r3, r3, #1
 8015c2e:	461a      	mov	r2, r3
 8015c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c32:	4293      	cmp	r3, r2
 8015c34:	dbb3      	blt.n	8015b9e <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x1c>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	f003 0301 	and.w	r3, r3, #1
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d133      	bne.n	8015ca8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	3b02      	subs	r3, #2
 8015c44:	0fda      	lsrs	r2, r3, #31
 8015c46:	4413      	add	r3, r2
 8015c48:	105b      	asrs	r3, r3, #1
 8015c4a:	461a      	mov	r2, r3
 8015c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c4e:	4293      	cmp	r3, r2
 8015c50:	d12a      	bne.n	8015ca8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
	  __secondChild = 2 * (__secondChild + 1);
 8015c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c54:	3301      	adds	r3, #1
 8015c56:	005b      	lsls	r3, r3, #1
 8015c58:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8015c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c5c:	1e5a      	subs	r2, r3, #1
 8015c5e:	f107 0314 	add.w	r3, r7, #20
 8015c62:	4611      	mov	r1, r2
 8015c64:	4618      	mov	r0, r3
 8015c66:	f7fc fb54 	bl	8012312 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8015c6a:	4603      	mov	r3, r0
 8015c6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8015c6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015c72:	4618      	mov	r0, r3
 8015c74:	f7fc fb75 	bl	8012362 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8015c78:	4603      	mov	r3, r0
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	f7f8 fa94 	bl	800e1a8 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8015c80:	4603      	mov	r3, r0
 8015c82:	681c      	ldr	r4, [r3, #0]
 8015c84:	f107 0314 	add.w	r3, r7, #20
 8015c88:	6939      	ldr	r1, [r7, #16]
 8015c8a:	4618      	mov	r0, r3
 8015c8c:	f7fc fb41 	bl	8012312 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8015c90:	4603      	mov	r3, r0
 8015c92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015c94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015c98:	4618      	mov	r0, r3
 8015c9a:	f7fc fb62 	bl	8012362 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8015c9e:	4603      	mov	r3, r0
 8015ca0:	601c      	str	r4, [r3, #0]
	  __holeIndex = __secondChild - 1;
 8015ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ca4:	3b01      	subs	r3, #1
 8015ca6:	613b      	str	r3, [r7, #16]
		       _GLIBCXX_MOVE(__value), __cmp);
 8015ca8:	f107 0308 	add.w	r3, r7, #8
 8015cac:	4618      	mov	r0, r3
 8015cae:	f7f8 fa7b 	bl	800e1a8 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8015cb2:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 8015cb4:	edd3 7a00 	vldr	s15, [r3]
 8015cb8:	f107 031c 	add.w	r3, r7, #28
 8015cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8015cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015cc2:	6939      	ldr	r1, [r7, #16]
 8015cc4:	6978      	ldr	r0, [r7, #20]
 8015cc6:	f000 fb44 	bl	8016352 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>
    }
 8015cca:	bf00      	nop
 8015ccc:	373c      	adds	r7, #60	; 0x3c
 8015cce:	46bd      	mov	sp, r7
 8015cd0:	bd90      	pop	{r4, r7, pc}

08015cd2 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
    swap(_Tp& __a, _Tp& __b)
 8015cd2:	b580      	push	{r7, lr}
 8015cd4:	b084      	sub	sp, #16
 8015cd6:	af00      	add	r7, sp, #0
 8015cd8:	6078      	str	r0, [r7, #4]
 8015cda:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8015cdc:	6878      	ldr	r0, [r7, #4]
 8015cde:	f7f8 fa63 	bl	800e1a8 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8015ce2:	4603      	mov	r3, r0
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8015ce8:	6838      	ldr	r0, [r7, #0]
 8015cea:	f7f8 fa5d 	bl	800e1a8 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8015cee:	4603      	mov	r3, r0
 8015cf0:	681a      	ldr	r2, [r3, #0]
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8015cf6:	f107 030c 	add.w	r3, r7, #12
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	f7f8 fa54 	bl	800e1a8 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8015d00:	4603      	mov	r3, r0
 8015d02:	681a      	ldr	r2, [r3, #0]
 8015d04:	683b      	ldr	r3, [r7, #0]
 8015d06:	601a      	str	r2, [r3, #0]
    }
 8015d08:	bf00      	nop
 8015d0a:	3710      	adds	r7, #16
 8015d0c:	46bd      	mov	sp, r7
 8015d0e:	bd80      	pop	{r7, pc}

08015d10 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b084      	sub	sp, #16
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	60f8      	str	r0, [r7, #12]
 8015d18:	60b9      	str	r1, [r7, #8]
 8015d1a:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8015d1c:	f7ec fef6 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8015d20:	4603      	mov	r3, r0
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d006      	beq.n	8015d34 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_+0x24>
	  __copy_move_b(__first, __last, __result);
 8015d26:	687a      	ldr	r2, [r7, #4]
 8015d28:	68b9      	ldr	r1, [r7, #8]
 8015d2a:	68f8      	ldr	r0, [r7, #12]
 8015d2c:	f000 fb7e 	bl	801642c <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_>
 8015d30:	4603      	mov	r3, r0
 8015d32:	e006      	b.n	8015d42 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_+0x32>
				       _Category>::__copy_move_b(__first,
 8015d34:	687a      	ldr	r2, [r7, #4]
 8015d36:	68b9      	ldr	r1, [r7, #8]
 8015d38:	68f8      	ldr	r0, [r7, #12]
 8015d3a:	f000 fb9b 	bl	8016474 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>
 8015d3e:	4603      	mov	r3, r0
								 __result);
 8015d40:	bf00      	nop
    }
 8015d42:	4618      	mov	r0, r3
 8015d44:	3710      	adds	r7, #16
 8015d46:	46bd      	mov	sp, r7
 8015d48:	bd80      	pop	{r7, pc}

08015d4a <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8015d4a:	b580      	push	{r7, lr}
 8015d4c:	b082      	sub	sp, #8
 8015d4e:	af00      	add	r7, sp, #0
 8015d50:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8015d52:	1d3b      	adds	r3, r7, #4
 8015d54:	4618      	mov	r0, r3
 8015d56:	f7fc f8e6 	bl	8011f26 <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>
 8015d5a:	4603      	mov	r3, r0
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	4618      	mov	r0, r3
 8015d60:	3708      	adds	r7, #8
 8015d62:	46bd      	mov	sp, r7
 8015d64:	bd80      	pop	{r7, pc}
	...

08015d68 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8015d68:	b480      	push	{r7}
 8015d6a:	b083      	sub	sp, #12
 8015d6c:	af00      	add	r7, sp, #0
 8015d6e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8015d70:	4b03      	ldr	r3, [pc, #12]	; (8015d80 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv+0x18>)
      }
 8015d72:	4618      	mov	r0, r3
 8015d74:	370c      	adds	r7, #12
 8015d76:	46bd      	mov	sp, r7
 8015d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d7c:	4770      	bx	lr
 8015d7e:	bf00      	nop
 8015d80:	05555555 	.word	0x05555555

08015d84 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8015d84:	b580      	push	{r7, lr}
 8015d86:	b084      	sub	sp, #16
 8015d88:	af00      	add	r7, sp, #0
 8015d8a:	60f8      	str	r0, [r7, #12]
 8015d8c:	60b9      	str	r1, [r7, #8]
 8015d8e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8015d90:	68f8      	ldr	r0, [r7, #12]
 8015d92:	f7ff ffe9 	bl	8015d68 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv>
 8015d96:	4602      	mov	r2, r0
 8015d98:	68bb      	ldr	r3, [r7, #8]
 8015d9a:	4293      	cmp	r3, r2
 8015d9c:	bf8c      	ite	hi
 8015d9e:	2301      	movhi	r3, #1
 8015da0:	2300      	movls	r3, #0
 8015da2:	b2db      	uxtb	r3, r3
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	bf14      	ite	ne
 8015da8:	2301      	movne	r3, #1
 8015daa:	2300      	moveq	r3, #0
 8015dac:	b2db      	uxtb	r3, r3
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d007      	beq.n	8015dc2 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8015db2:	68bb      	ldr	r3, [r7, #8]
 8015db4:	4a0a      	ldr	r2, [pc, #40]	; (8015de0 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x5c>)
 8015db6:	4293      	cmp	r3, r2
 8015db8:	d901      	bls.n	8015dbe <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8015dba:	f00f fe3a 	bl	8025a32 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8015dbe:	f00f fe35 	bl	8025a2c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8015dc2:	68ba      	ldr	r2, [r7, #8]
 8015dc4:	4613      	mov	r3, r2
 8015dc6:	005b      	lsls	r3, r3, #1
 8015dc8:	4413      	add	r3, r2
 8015dca:	00db      	lsls	r3, r3, #3
 8015dcc:	4618      	mov	r0, r3
 8015dce:	f00f fd61 	bl	8025894 <_Znwj>
 8015dd2:	4603      	mov	r3, r0
 8015dd4:	bf00      	nop
      }
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	3710      	adds	r7, #16
 8015dda:	46bd      	mov	sp, r7
 8015ddc:	bd80      	pop	{r7, pc}
 8015dde:	bf00      	nop
 8015de0:	0aaaaaaa 	.word	0x0aaaaaaa

08015de4 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>:
    __niter_base(_Iterator __it)
 8015de4:	b480      	push	{r7}
 8015de6:	b083      	sub	sp, #12
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	6078      	str	r0, [r7, #4]
    { return __it; }
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	4618      	mov	r0, r3
 8015df0:	370c      	adds	r7, #12
 8015df2:	46bd      	mov	sp, r7
 8015df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015df8:	4770      	bx	lr

08015dfa <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8015dfa:	b590      	push	{r4, r7, lr}
 8015dfc:	b087      	sub	sp, #28
 8015dfe:	af00      	add	r7, sp, #0
 8015e00:	60f8      	str	r0, [r7, #12]
 8015e02:	60b9      	str	r1, [r7, #8]
 8015e04:	607a      	str	r2, [r7, #4]
 8015e06:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 8015e0c:	e012      	b.n	8015e34 <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 8015e0e:	6978      	ldr	r0, [r7, #20]
 8015e10:	f7fe fc5c 	bl	80146cc <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 8015e14:	4604      	mov	r4, r0
 8015e16:	68f8      	ldr	r0, [r7, #12]
 8015e18:	f7fe fc58 	bl	80146cc <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 8015e1c:	4603      	mov	r3, r0
 8015e1e:	683a      	ldr	r2, [r7, #0]
 8015e20:	4619      	mov	r1, r3
 8015e22:	4620      	mov	r0, r4
 8015e24:	f000 fb48 	bl	80164b8 <_ZSt19__relocate_object_aIN3jlb4EdgeES1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	3318      	adds	r3, #24
 8015e2c:	60fb      	str	r3, [r7, #12]
 8015e2e:	697b      	ldr	r3, [r7, #20]
 8015e30:	3318      	adds	r3, #24
 8015e32:	617b      	str	r3, [r7, #20]
 8015e34:	68fa      	ldr	r2, [r7, #12]
 8015e36:	68bb      	ldr	r3, [r7, #8]
 8015e38:	429a      	cmp	r2, r3
 8015e3a:	d1e8      	bne.n	8015e0e <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_+0x14>
      return __cur;
 8015e3c:	697b      	ldr	r3, [r7, #20]
    }
 8015e3e:	4618      	mov	r0, r3
 8015e40:	371c      	adds	r7, #28
 8015e42:	46bd      	mov	sp, r7
 8015e44:	bd90      	pop	{r4, r7, pc}

08015e46 <_ZNSaIN3jlb4EdgeEEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8015e46:	b580      	push	{r7, lr}
 8015e48:	b082      	sub	sp, #8
 8015e4a:	af00      	add	r7, sp, #0
 8015e4c:	6078      	str	r0, [r7, #4]
 8015e4e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8015e50:	6839      	ldr	r1, [r7, #0]
 8015e52:	6878      	ldr	r0, [r7, #4]
 8015e54:	f000 fb4b 	bl	80164ee <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1ERKS3_>
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	3708      	adds	r7, #8
 8015e5e:	46bd      	mov	sp, r7
 8015e60:	bd80      	pop	{r7, pc}

08015e62 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8015e62:	b480      	push	{r7}
 8015e64:	b083      	sub	sp, #12
 8015e66:	af00      	add	r7, sp, #0
 8015e68:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	370c      	adds	r7, #12
 8015e70:	46bd      	mov	sp, r7
 8015e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e76:	4770      	bx	lr

08015e78 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8015e78:	b480      	push	{r7}
 8015e7a:	b083      	sub	sp, #12
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	6078      	str	r0, [r7, #4]
	++_M_current;
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	681b      	ldr	r3, [r3, #0]
 8015e84:	f103 0218 	add.w	r2, r3, #24
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	601a      	str	r2, [r3, #0]
	return *this;
 8015e8c:	687b      	ldr	r3, [r7, #4]
      }
 8015e8e:	4618      	mov	r0, r3
 8015e90:	370c      	adds	r7, #12
 8015e92:	46bd      	mov	sp, r7
 8015e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e98:	4770      	bx	lr

08015e9a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8015e9a:	b590      	push	{r4, r7, lr}
 8015e9c:	b087      	sub	sp, #28
 8015e9e:	af00      	add	r7, sp, #0
 8015ea0:	60f8      	str	r0, [r7, #12]
 8015ea2:	60b9      	str	r1, [r7, #8]
 8015ea4:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8015eaa:	e015      	b.n	8015ed8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x3e>
		std::_Construct(std::__addressof(*__cur), *__first);
 8015eac:	6978      	ldr	r0, [r7, #20]
 8015eae:	f7fe fc0d 	bl	80146cc <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 8015eb2:	4604      	mov	r4, r0
 8015eb4:	f107 030c 	add.w	r3, r7, #12
 8015eb8:	4618      	mov	r0, r3
 8015eba:	f000 fb3c 	bl	8016536 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>
 8015ebe:	4603      	mov	r3, r0
 8015ec0:	4619      	mov	r1, r3
 8015ec2:	4620      	mov	r0, r4
 8015ec4:	f000 fb62 	bl	801658c <_ZSt10_ConstructIN3jlb4EdgeEJRKS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8015ec8:	f107 030c 	add.w	r3, r7, #12
 8015ecc:	4618      	mov	r0, r3
 8015ece:	f7ff ffd3 	bl	8015e78 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>
 8015ed2:	697b      	ldr	r3, [r7, #20]
 8015ed4:	3318      	adds	r3, #24
 8015ed6:	617b      	str	r3, [r7, #20]
 8015ed8:	f107 0208 	add.w	r2, r7, #8
 8015edc:	f107 030c 	add.w	r3, r7, #12
 8015ee0:	4611      	mov	r1, r2
 8015ee2:	4618      	mov	r0, r3
 8015ee4:	f000 fb0f 	bl	8016506 <_ZN9__gnu_cxxeqIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8015ee8:	4603      	mov	r3, r0
 8015eea:	f083 0301 	eor.w	r3, r3, #1
 8015eee:	b2db      	uxtb	r3, r3
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d1db      	bne.n	8015eac <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x12>
	      return __cur;
 8015ef4:	697b      	ldr	r3, [r7, #20]
	}
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	371c      	adds	r7, #28
 8015efa:	46bd      	mov	sp, r7
 8015efc:	bd90      	pop	{r4, r7, pc}
	...

08015f00 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8015f00:	b480      	push	{r7}
 8015f02:	b083      	sub	sp, #12
 8015f04:	af00      	add	r7, sp, #0
 8015f06:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8015f08:	4b03      	ldr	r3, [pc, #12]	; (8015f18 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv+0x18>)
      }
 8015f0a:	4618      	mov	r0, r3
 8015f0c:	370c      	adds	r7, #12
 8015f0e:	46bd      	mov	sp, r7
 8015f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f14:	4770      	bx	lr
 8015f16:	bf00      	nop
 8015f18:	05555555 	.word	0x05555555

08015f1c <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b084      	sub	sp, #16
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	60f8      	str	r0, [r7, #12]
 8015f24:	60b9      	str	r1, [r7, #8]
 8015f26:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8015f28:	68f8      	ldr	r0, [r7, #12]
 8015f2a:	f7ff ffe9 	bl	8015f00 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv>
 8015f2e:	4602      	mov	r2, r0
 8015f30:	68bb      	ldr	r3, [r7, #8]
 8015f32:	4293      	cmp	r3, r2
 8015f34:	bf8c      	ite	hi
 8015f36:	2301      	movhi	r3, #1
 8015f38:	2300      	movls	r3, #0
 8015f3a:	b2db      	uxtb	r3, r3
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	bf14      	ite	ne
 8015f40:	2301      	movne	r3, #1
 8015f42:	2300      	moveq	r3, #0
 8015f44:	b2db      	uxtb	r3, r3
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d007      	beq.n	8015f5a <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8015f4a:	68bb      	ldr	r3, [r7, #8]
 8015f4c:	4a0a      	ldr	r2, [pc, #40]	; (8015f78 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x5c>)
 8015f4e:	4293      	cmp	r3, r2
 8015f50:	d901      	bls.n	8015f56 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8015f52:	f00f fd6e 	bl	8025a32 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8015f56:	f00f fd69 	bl	8025a2c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8015f5a:	68ba      	ldr	r2, [r7, #8]
 8015f5c:	4613      	mov	r3, r2
 8015f5e:	005b      	lsls	r3, r3, #1
 8015f60:	4413      	add	r3, r2
 8015f62:	00db      	lsls	r3, r3, #3
 8015f64:	4618      	mov	r0, r3
 8015f66:	f00f fc95 	bl	8025894 <_Znwj>
 8015f6a:	4603      	mov	r3, r0
 8015f6c:	bf00      	nop
      }
 8015f6e:	4618      	mov	r0, r3
 8015f70:	3710      	adds	r7, #16
 8015f72:	46bd      	mov	sp, r7
 8015f74:	bd80      	pop	{r7, pc}
 8015f76:	bf00      	nop
 8015f78:	0aaaaaaa 	.word	0x0aaaaaaa

08015f7c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8015f7c:	b580      	push	{r7, lr}
 8015f7e:	b086      	sub	sp, #24
 8015f80:	af00      	add	r7, sp, #0
 8015f82:	60f8      	str	r0, [r7, #12]
 8015f84:	60b9      	str	r1, [r7, #8]
 8015f86:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8015f8c:	e00d      	b.n	8015faa <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_+0x2e>
		std::_Construct(std::__addressof(*__cur), *__first);
 8015f8e:	6978      	ldr	r0, [r7, #20]
 8015f90:	f7fe fc43 	bl	801481a <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>
 8015f94:	4603      	mov	r3, r0
 8015f96:	68f9      	ldr	r1, [r7, #12]
 8015f98:	4618      	mov	r0, r3
 8015f9a:	f000 fb0d 	bl	80165b8 <_ZSt10_ConstructIN3jlb4NodeEJRKS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8015f9e:	68fb      	ldr	r3, [r7, #12]
 8015fa0:	3318      	adds	r3, #24
 8015fa2:	60fb      	str	r3, [r7, #12]
 8015fa4:	697b      	ldr	r3, [r7, #20]
 8015fa6:	3318      	adds	r3, #24
 8015fa8:	617b      	str	r3, [r7, #20]
 8015faa:	68fa      	ldr	r2, [r7, #12]
 8015fac:	68bb      	ldr	r3, [r7, #8]
 8015fae:	429a      	cmp	r2, r3
 8015fb0:	d1ed      	bne.n	8015f8e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_+0x12>
	      return __cur;
 8015fb2:	697b      	ldr	r3, [r7, #20]
	}
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	3718      	adds	r7, #24
 8015fb8:	46bd      	mov	sp, r7
 8015fba:	bd80      	pop	{r7, pc}

08015fbc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKcS2_IfSt6vectorIS2_IciESaIS5_EEEEEE10deallocateEPSA_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b084      	sub	sp, #16
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	60f8      	str	r0, [r7, #12]
 8015fc4:	60b9      	str	r1, [r7, #8]
 8015fc6:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8015fc8:	687a      	ldr	r2, [r7, #4]
 8015fca:	4613      	mov	r3, r2
 8015fcc:	00db      	lsls	r3, r3, #3
 8015fce:	4413      	add	r3, r2
 8015fd0:	009b      	lsls	r3, r3, #2
 8015fd2:	4619      	mov	r1, r3
 8015fd4:	68b8      	ldr	r0, [r7, #8]
 8015fd6:	f00f fc5b 	bl	8025890 <_ZdlPvj>
      }
 8015fda:	3710      	adds	r7, #16
 8015fdc:	46bd      	mov	sp, r7
 8015fde:	bd80      	pop	{r7, pc}

08015fe0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKcS2_IfSt6vectorIS2_IciESaIS5_EEEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8015fe0:	b480      	push	{r7}
 8015fe2:	b083      	sub	sp, #12
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8015fe8:	4b03      	ldr	r3, [pc, #12]	; (8015ff8 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKcS2_IfSt6vectorIS2_IciESaIS5_EEEEEE11_M_max_sizeEv+0x18>)
      }
 8015fea:	4618      	mov	r0, r3
 8015fec:	370c      	adds	r7, #12
 8015fee:	46bd      	mov	sp, r7
 8015ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ff4:	4770      	bx	lr
 8015ff6:	bf00      	nop
 8015ff8:	038e38e3 	.word	0x038e38e3

08015ffc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKcS2_IfSt6vectorIS2_IciESaIS5_EEEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8015ffc:	b580      	push	{r7, lr}
 8015ffe:	b084      	sub	sp, #16
 8016000:	af00      	add	r7, sp, #0
 8016002:	60f8      	str	r0, [r7, #12]
 8016004:	60b9      	str	r1, [r7, #8]
 8016006:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8016008:	68f8      	ldr	r0, [r7, #12]
 801600a:	f7ff ffe9 	bl	8015fe0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKcS2_IfSt6vectorIS2_IciESaIS5_EEEEEE11_M_max_sizeEv>
 801600e:	4602      	mov	r2, r0
 8016010:	68bb      	ldr	r3, [r7, #8]
 8016012:	4293      	cmp	r3, r2
 8016014:	bf8c      	ite	hi
 8016016:	2301      	movhi	r3, #1
 8016018:	2300      	movls	r3, #0
 801601a:	b2db      	uxtb	r3, r3
 801601c:	2b00      	cmp	r3, #0
 801601e:	bf14      	ite	ne
 8016020:	2301      	movne	r3, #1
 8016022:	2300      	moveq	r3, #0
 8016024:	b2db      	uxtb	r3, r3
 8016026:	2b00      	cmp	r3, #0
 8016028:	d007      	beq.n	801603a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKcS2_IfSt6vectorIS2_IciESaIS5_EEEEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 801602a:	68bb      	ldr	r3, [r7, #8]
 801602c:	4a0a      	ldr	r2, [pc, #40]	; (8016058 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKcS2_IfSt6vectorIS2_IciESaIS5_EEEEEE8allocateEjPKv+0x5c>)
 801602e:	4293      	cmp	r3, r2
 8016030:	d901      	bls.n	8016036 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKcS2_IfSt6vectorIS2_IciESaIS5_EEEEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8016032:	f00f fcfe 	bl	8025a32 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8016036:	f00f fcf9 	bl	8025a2c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801603a:	68ba      	ldr	r2, [r7, #8]
 801603c:	4613      	mov	r3, r2
 801603e:	00db      	lsls	r3, r3, #3
 8016040:	4413      	add	r3, r2
 8016042:	009b      	lsls	r3, r3, #2
 8016044:	4618      	mov	r0, r3
 8016046:	f00f fc25 	bl	8025894 <_Znwj>
 801604a:	4603      	mov	r3, r0
 801604c:	bf00      	nop
      }
 801604e:	4618      	mov	r0, r3
 8016050:	3710      	adds	r7, #16
 8016052:	46bd      	mov	sp, r7
 8016054:	bd80      	pop	{r7, pc}
 8016056:	bf00      	nop
 8016058:	071c71c7 	.word	0x071c71c7

0801605c <_ZSt3getILj0EJRKcEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 801605c:	b580      	push	{r7, lr}
 801605e:	b082      	sub	sp, #8
 8016060:	af00      	add	r7, sp, #0
 8016062:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	4618      	mov	r0, r3
 8016068:	f000 fabc 	bl	80165e4 <_ZSt12__get_helperILj0ERKcJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 801606c:	4603      	mov	r3, r0
 801606e:	4618      	mov	r0, r3
 8016070:	3708      	adds	r7, #8
 8016072:	46bd      	mov	sp, r7
 8016074:	bd80      	pop	{r7, pc}

08016076 <_ZNSt4pairIfSt6vectorIS_IciESaIS1_EEEC1IfS3_Lb1EEEv>:
      _GLIBCXX_CONSTEXPR pair()
 8016076:	b580      	push	{r7, lr}
 8016078:	b082      	sub	sp, #8
 801607a:	af00      	add	r7, sp, #0
 801607c:	6078      	str	r0, [r7, #4]
      : first(), second() { }
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	f04f 0200 	mov.w	r2, #0
 8016084:	601a      	str	r2, [r3, #0]
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	3304      	adds	r3, #4
 801608a:	2200      	movs	r2, #0
 801608c:	601a      	str	r2, [r3, #0]
 801608e:	605a      	str	r2, [r3, #4]
 8016090:	609a      	str	r2, [r3, #8]
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	3304      	adds	r3, #4
 8016096:	4618      	mov	r0, r3
 8016098:	f7f2 fd81 	bl	8008b9e <_ZNSt6vectorISt4pairIciESaIS1_EEC1Ev>
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	4618      	mov	r0, r3
 80160a0:	3708      	adds	r7, #8
 80160a2:	46bd      	mov	sp, r7
 80160a4:	bd80      	pop	{r7, pc}

080160a6 <_ZNSt16allocator_traitsISaISt4pairIfcEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80160a6:	b480      	push	{r7}
 80160a8:	b083      	sub	sp, #12
 80160aa:	af00      	add	r7, sp, #0
 80160ac:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 80160ae:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80160b2:	4618      	mov	r0, r3
 80160b4:	370c      	adds	r7, #12
 80160b6:	46bd      	mov	sp, r7
 80160b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160bc:	4770      	bx	lr

080160be <_ZNSt6vectorISt4pairIfcESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80160be:	b580      	push	{r7, lr}
 80160c0:	b084      	sub	sp, #16
 80160c2:	af00      	add	r7, sp, #0
 80160c4:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80160c6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80160ca:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80160cc:	6878      	ldr	r0, [r7, #4]
 80160ce:	f7ff ffea 	bl	80160a6 <_ZNSt16allocator_traitsISaISt4pairIfcEEE8max_sizeERKS2_>
 80160d2:	4603      	mov	r3, r0
 80160d4:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80160d6:	f107 0208 	add.w	r2, r7, #8
 80160da:	f107 030c 	add.w	r3, r7, #12
 80160de:	4611      	mov	r1, r2
 80160e0:	4618      	mov	r0, r3
 80160e2:	f7ed fd4f 	bl	8003b84 <_ZSt3minIjERKT_S2_S2_>
 80160e6:	4603      	mov	r3, r0
 80160e8:	681b      	ldr	r3, [r3, #0]
      }
 80160ea:	4618      	mov	r0, r3
 80160ec:	3710      	adds	r7, #16
 80160ee:	46bd      	mov	sp, r7
 80160f0:	bd80      	pop	{r7, pc}

080160f2 <_ZNKSt12_Vector_baseISt4pairIfcESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80160f2:	b480      	push	{r7}
 80160f4:	b083      	sub	sp, #12
 80160f6:	af00      	add	r7, sp, #0
 80160f8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	4618      	mov	r0, r3
 80160fe:	370c      	adds	r7, #12
 8016100:	46bd      	mov	sp, r7
 8016102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016106:	4770      	bx	lr

08016108 <_ZSt12__relocate_aIPSt4pairIfcES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8016108:	b5b0      	push	{r4, r5, r7, lr}
 801610a:	b084      	sub	sp, #16
 801610c:	af00      	add	r7, sp, #0
 801610e:	60f8      	str	r0, [r7, #12]
 8016110:	60b9      	str	r1, [r7, #8]
 8016112:	607a      	str	r2, [r7, #4]
 8016114:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8016116:	68f8      	ldr	r0, [r7, #12]
 8016118:	f000 faa6 	bl	8016668 <_ZSt12__niter_baseIPSt4pairIfcEET_S3_>
 801611c:	4604      	mov	r4, r0
 801611e:	68b8      	ldr	r0, [r7, #8]
 8016120:	f000 faa2 	bl	8016668 <_ZSt12__niter_baseIPSt4pairIfcEET_S3_>
 8016124:	4605      	mov	r5, r0
 8016126:	6878      	ldr	r0, [r7, #4]
 8016128:	f000 fa9e 	bl	8016668 <_ZSt12__niter_baseIPSt4pairIfcEET_S3_>
 801612c:	4602      	mov	r2, r0
 801612e:	683b      	ldr	r3, [r7, #0]
 8016130:	4629      	mov	r1, r5
 8016132:	4620      	mov	r0, r4
 8016134:	f000 faa3 	bl	801667e <_ZSt14__relocate_a_1IPSt4pairIfcES2_SaIS1_EET0_T_S5_S4_RT1_>
 8016138:	4603      	mov	r3, r0
    }
 801613a:	4618      	mov	r0, r3
 801613c:	3710      	adds	r7, #16
 801613e:	46bd      	mov	sp, r7
 8016140:	bdb0      	pop	{r4, r5, r7, pc}

08016142 <_ZSt14__relocate_a_1IPSt4pairIciES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8016142:	b590      	push	{r4, r7, lr}
 8016144:	b087      	sub	sp, #28
 8016146:	af00      	add	r7, sp, #0
 8016148:	60f8      	str	r0, [r7, #12]
 801614a:	60b9      	str	r1, [r7, #8]
 801614c:	607a      	str	r2, [r7, #4]
 801614e:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 8016154:	e012      	b.n	801617c <_ZSt14__relocate_a_1IPSt4pairIciES2_SaIS1_EET0_T_S5_S4_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 8016156:	6978      	ldr	r0, [r7, #20]
 8016158:	f7fe fd83 	bl	8014c62 <_ZSt11__addressofISt4pairIciEEPT_RS2_>
 801615c:	4604      	mov	r4, r0
 801615e:	68f8      	ldr	r0, [r7, #12]
 8016160:	f7fe fd7f 	bl	8014c62 <_ZSt11__addressofISt4pairIciEEPT_RS2_>
 8016164:	4603      	mov	r3, r0
 8016166:	683a      	ldr	r2, [r7, #0]
 8016168:	4619      	mov	r1, r3
 801616a:	4620      	mov	r0, r4
 801616c:	f000 faad 	bl	80166ca <_ZSt19__relocate_object_aISt4pairIciES1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	3308      	adds	r3, #8
 8016174:	60fb      	str	r3, [r7, #12]
 8016176:	697b      	ldr	r3, [r7, #20]
 8016178:	3308      	adds	r3, #8
 801617a:	617b      	str	r3, [r7, #20]
 801617c:	68fa      	ldr	r2, [r7, #12]
 801617e:	68bb      	ldr	r3, [r7, #8]
 8016180:	429a      	cmp	r2, r3
 8016182:	d1e8      	bne.n	8016156 <_ZSt14__relocate_a_1IPSt4pairIciES2_SaIS1_EET0_T_S5_S4_RT1_+0x14>
      return __cur;
 8016184:	697b      	ldr	r3, [r7, #20]
    }
 8016186:	4618      	mov	r0, r3
 8016188:	371c      	adds	r7, #28
 801618a:	46bd      	mov	sp, r7
 801618c:	bd90      	pop	{r4, r7, pc}

0801618e <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 801618e:	b580      	push	{r7, lr}
 8016190:	b084      	sub	sp, #16
 8016192:	af00      	add	r7, sp, #0
 8016194:	60f8      	str	r0, [r7, #12]
 8016196:	60b9      	str	r1, [r7, #8]
 8016198:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 801619a:	f7ec fcb7 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 801619e:	4603      	mov	r3, r0
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d006      	beq.n	80161b2 <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x24>
	  __copy_m(__first, __last, __result);
 80161a4:	687a      	ldr	r2, [r7, #4]
 80161a6:	68b9      	ldr	r1, [r7, #8]
 80161a8:	68f8      	ldr	r0, [r7, #12]
 80161aa:	f000 faa9 	bl	8016700 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_>
 80161ae:	4603      	mov	r3, r0
 80161b0:	e006      	b.n	80161c0 <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 80161b2:	687a      	ldr	r2, [r7, #4]
 80161b4:	68b9      	ldr	r1, [r7, #8]
 80161b6:	68f8      	ldr	r0, [r7, #12]
 80161b8:	f000 fac5 	bl	8016746 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_>
 80161bc:	4603      	mov	r3, r0
 80161be:	bf00      	nop
    }
 80161c0:	4618      	mov	r0, r3
 80161c2:	3710      	adds	r7, #16
 80161c4:	46bd      	mov	sp, r7
 80161c6:	bd80      	pop	{r7, pc}

080161c8 <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80161c8:	b580      	push	{r7, lr}
 80161ca:	b084      	sub	sp, #16
 80161cc:	af00      	add	r7, sp, #0
 80161ce:	60f8      	str	r0, [r7, #12]
 80161d0:	60b9      	str	r1, [r7, #8]
 80161d2:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 80161d4:	f7ec fc9a 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 80161d8:	4603      	mov	r3, r0
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d006      	beq.n	80161ec <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x24>
	  __copy_move_b(__first, __last, __result);
 80161de:	687a      	ldr	r2, [r7, #4]
 80161e0:	68b9      	ldr	r1, [r7, #8]
 80161e2:	68f8      	ldr	r0, [r7, #12]
 80161e4:	f000 facc 	bl	8016780 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_>
 80161e8:	4603      	mov	r3, r0
 80161ea:	e006      	b.n	80161fa <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x32>
				       _Category>::__copy_move_b(__first,
 80161ec:	687a      	ldr	r2, [r7, #4]
 80161ee:	68b9      	ldr	r1, [r7, #8]
 80161f0:	68f8      	ldr	r0, [r7, #12]
 80161f2:	f000 fae8 	bl	80167c6 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_>
 80161f6:	4603      	mov	r3, r0
								 __result);
 80161f8:	bf00      	nop
    }
 80161fa:	4618      	mov	r0, r3
 80161fc:	3710      	adds	r7, #16
 80161fe:	46bd      	mov	sp, r7
 8016200:	bd80      	pop	{r7, pc}

08016202 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPcES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8016202:	b580      	push	{r7, lr}
 8016204:	b084      	sub	sp, #16
 8016206:	af00      	add	r7, sp, #0
 8016208:	60f8      	str	r0, [r7, #12]
 801620a:	60b9      	str	r1, [r7, #8]
 801620c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 801620e:	687a      	ldr	r2, [r7, #4]
 8016210:	68b9      	ldr	r1, [r7, #8]
 8016212:	68f8      	ldr	r0, [r7, #12]
 8016214:	f000 faf9 	bl	801680a <_ZSt4copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>
 8016218:	4603      	mov	r3, r0
 801621a:	4618      	mov	r0, r3
 801621c:	3710      	adds	r7, #16
 801621e:	46bd      	mov	sp, r7
 8016220:	bd80      	pop	{r7, pc}

08016222 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPcS3_EET0_T_S5_S4_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 8016222:	b580      	push	{r7, lr}
 8016224:	b086      	sub	sp, #24
 8016226:	af00      	add	r7, sp, #0
 8016228:	60f8      	str	r0, [r7, #12]
 801622a:	60b9      	str	r1, [r7, #8]
 801622c:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 801622e:	68ba      	ldr	r2, [r7, #8]
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	1ad3      	subs	r3, r2, r3
 8016234:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 8016236:	e00f      	b.n	8016258 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPcS3_EET0_T_S5_S4_+0x36>
	    *--__result = std::move(*--__last);
 8016238:	68bb      	ldr	r3, [r7, #8]
 801623a:	3b01      	subs	r3, #1
 801623c:	60bb      	str	r3, [r7, #8]
 801623e:	68b8      	ldr	r0, [r7, #8]
 8016240:	f7f9 fd0a 	bl	800fc58 <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>
 8016244:	4603      	mov	r3, r0
 8016246:	781a      	ldrb	r2, [r3, #0]
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	3b01      	subs	r3, #1
 801624c:	607b      	str	r3, [r7, #4]
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	701a      	strb	r2, [r3, #0]
	  for (; __n > 0; --__n)
 8016252:	697b      	ldr	r3, [r7, #20]
 8016254:	3b01      	subs	r3, #1
 8016256:	617b      	str	r3, [r7, #20]
 8016258:	697b      	ldr	r3, [r7, #20]
 801625a:	2b00      	cmp	r3, #0
 801625c:	dcec      	bgt.n	8016238 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPcS3_EET0_T_S5_S4_+0x16>
	  return __result;
 801625e:	687b      	ldr	r3, [r7, #4]
	}
 8016260:	4618      	mov	r0, r3
 8016262:	3718      	adds	r7, #24
 8016264:	46bd      	mov	sp, r7
 8016266:	bd80      	pop	{r7, pc}

08016268 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8016268:	b580      	push	{r7, lr}
 801626a:	b086      	sub	sp, #24
 801626c:	af00      	add	r7, sp, #0
 801626e:	60f8      	str	r0, [r7, #12]
 8016270:	60b9      	str	r1, [r7, #8]
 8016272:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8016274:	68ba      	ldr	r2, [r7, #8]
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	1ad3      	subs	r3, r2, r3
 801627a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 801627c:	697b      	ldr	r3, [r7, #20]
 801627e:	2b00      	cmp	r3, #0
 8016280:	d008      	beq.n	8016294 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_+0x2c>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8016282:	697b      	ldr	r3, [r7, #20]
 8016284:	425b      	negs	r3, r3
 8016286:	687a      	ldr	r2, [r7, #4]
 8016288:	4413      	add	r3, r2
 801628a:	697a      	ldr	r2, [r7, #20]
 801628c:	68f9      	ldr	r1, [r7, #12]
 801628e:	4618      	mov	r0, r3
 8016290:	f012 fc1a 	bl	8028ac8 <memmove>
	  return __result - _Num;
 8016294:	697b      	ldr	r3, [r7, #20]
 8016296:	425b      	negs	r3, r3
 8016298:	687a      	ldr	r2, [r7, #4]
 801629a:	4413      	add	r3, r2
	}
 801629c:	4618      	mov	r0, r3
 801629e:	3718      	adds	r7, #24
 80162a0:	46bd      	mov	sp, r7
 80162a2:	bd80      	pop	{r7, pc}

080162a4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_>:
	__copy_m(_II __first, _II __last, _OI __result)
 80162a4:	b480      	push	{r7}
 80162a6:	b087      	sub	sp, #28
 80162a8:	af00      	add	r7, sp, #0
 80162aa:	60f8      	str	r0, [r7, #12]
 80162ac:	60b9      	str	r1, [r7, #8]
 80162ae:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80162b0:	68ba      	ldr	r2, [r7, #8]
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	1ad3      	subs	r3, r2, r3
 80162b6:	617b      	str	r3, [r7, #20]
 80162b8:	e00c      	b.n	80162d4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_+0x30>
	      *__result = *__first;
 80162ba:	68fb      	ldr	r3, [r7, #12]
 80162bc:	781a      	ldrb	r2, [r3, #0]
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	701a      	strb	r2, [r3, #0]
	      ++__first;
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	3301      	adds	r3, #1
 80162c6:	60fb      	str	r3, [r7, #12]
	      ++__result;
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	3301      	adds	r3, #1
 80162cc:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80162ce:	697b      	ldr	r3, [r7, #20]
 80162d0:	3b01      	subs	r3, #1
 80162d2:	617b      	str	r3, [r7, #20]
 80162d4:	697b      	ldr	r3, [r7, #20]
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	dcef      	bgt.n	80162ba <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_+0x16>
	  return __result;
 80162da:	687b      	ldr	r3, [r7, #4]
	}
 80162dc:	4618      	mov	r0, r3
 80162de:	371c      	adds	r7, #28
 80162e0:	46bd      	mov	sp, r7
 80162e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162e6:	4770      	bx	lr

080162e8 <_ZSt4copyIPcS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 80162e8:	b590      	push	{r4, r7, lr}
 80162ea:	b085      	sub	sp, #20
 80162ec:	af00      	add	r7, sp, #0
 80162ee:	60f8      	str	r0, [r7, #12]
 80162f0:	60b9      	str	r1, [r7, #8]
 80162f2:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80162f4:	68f8      	ldr	r0, [r7, #12]
 80162f6:	f7fd fe15 	bl	8013f24 <_ZSt12__miter_baseIPcET_S1_>
 80162fa:	4604      	mov	r4, r0
 80162fc:	68b8      	ldr	r0, [r7, #8]
 80162fe:	f7fd fe11 	bl	8013f24 <_ZSt12__miter_baseIPcET_S1_>
 8016302:	4603      	mov	r3, r0
 8016304:	687a      	ldr	r2, [r7, #4]
 8016306:	4619      	mov	r1, r3
 8016308:	4620      	mov	r0, r4
 801630a:	f000 fa96 	bl	801683a <_ZSt13__copy_move_aILb0EPcS0_ET1_T0_S2_S1_>
 801630e:	4603      	mov	r3, r0
    }
 8016310:	4618      	mov	r0, r3
 8016312:	3714      	adds	r7, #20
 8016314:	46bd      	mov	sp, r7
 8016316:	bd90      	pop	{r4, r7, pc}

08016318 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>:
      operator()(_Iterator __it, _Value& __val) const
 8016318:	b580      	push	{r7, lr}
 801631a:	b084      	sub	sp, #16
 801631c:	af00      	add	r7, sp, #0
 801631e:	60f8      	str	r0, [r7, #12]
 8016320:	60b9      	str	r1, [r7, #8]
 8016322:	607a      	str	r2, [r7, #4]
      { return *__it < __val; }
 8016324:	f107 0308 	add.w	r3, r7, #8
 8016328:	4618      	mov	r0, r3
 801632a:	f7fc f81a 	bl	8012362 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 801632e:	4603      	mov	r3, r0
 8016330:	ed93 7a00 	vldr	s14, [r3]
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	edd3 7a00 	vldr	s15, [r3]
 801633a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801633e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016342:	bf4c      	ite	mi
 8016344:	2301      	movmi	r3, #1
 8016346:	2300      	movpl	r3, #0
 8016348:	b2db      	uxtb	r3, r3
 801634a:	4618      	mov	r0, r3
 801634c:	3710      	adds	r7, #16
 801634e:	46bd      	mov	sp, r7
 8016350:	bd80      	pop	{r7, pc}

08016352 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 8016352:	b590      	push	{r4, r7, lr}
 8016354:	b08b      	sub	sp, #44	; 0x2c
 8016356:	af00      	add	r7, sp, #0
 8016358:	6178      	str	r0, [r7, #20]
 801635a:	6139      	str	r1, [r7, #16]
 801635c:	60fa      	str	r2, [r7, #12]
 801635e:	ed87 0a02 	vstr	s0, [r7, #8]
 8016362:	607b      	str	r3, [r7, #4]
      _Distance __parent = (__holeIndex - 1) / 2;
 8016364:	693b      	ldr	r3, [r7, #16]
 8016366:	3b01      	subs	r3, #1
 8016368:	0fda      	lsrs	r2, r3, #31
 801636a:	4413      	add	r3, r2
 801636c:	105b      	asrs	r3, r3, #1
 801636e:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8016370:	e029      	b.n	80163c6 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x74>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8016372:	f107 0314 	add.w	r3, r7, #20
 8016376:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016378:	4618      	mov	r0, r3
 801637a:	f7fb ffca 	bl	8012312 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 801637e:	4603      	mov	r3, r0
 8016380:	61bb      	str	r3, [r7, #24]
 8016382:	f107 0318 	add.w	r3, r7, #24
 8016386:	4618      	mov	r0, r3
 8016388:	f7fb ffeb 	bl	8012362 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 801638c:	4603      	mov	r3, r0
 801638e:	4618      	mov	r0, r3
 8016390:	f7f7 ff0a 	bl	800e1a8 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8016394:	4603      	mov	r3, r0
 8016396:	681c      	ldr	r4, [r3, #0]
 8016398:	f107 0314 	add.w	r3, r7, #20
 801639c:	6939      	ldr	r1, [r7, #16]
 801639e:	4618      	mov	r0, r3
 80163a0:	f7fb ffb7 	bl	8012312 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 80163a4:	4603      	mov	r3, r0
 80163a6:	61fb      	str	r3, [r7, #28]
 80163a8:	f107 031c 	add.w	r3, r7, #28
 80163ac:	4618      	mov	r0, r3
 80163ae:	f7fb ffd8 	bl	8012362 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 80163b2:	4603      	mov	r3, r0
 80163b4:	601c      	str	r4, [r3, #0]
	  __holeIndex = __parent;
 80163b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163b8:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 80163ba:	693b      	ldr	r3, [r7, #16]
 80163bc:	3b01      	subs	r3, #1
 80163be:	0fda      	lsrs	r2, r3, #31
 80163c0:	4413      	add	r3, r2
 80163c2:	105b      	asrs	r3, r3, #1
 80163c4:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80163c6:	693a      	ldr	r2, [r7, #16]
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	429a      	cmp	r2, r3
 80163cc:	dd11      	ble.n	80163f2 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa0>
 80163ce:	f107 0314 	add.w	r3, r7, #20
 80163d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80163d4:	4618      	mov	r0, r3
 80163d6:	f7fb ff9c 	bl	8012312 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 80163da:	4601      	mov	r1, r0
 80163dc:	f107 0308 	add.w	r3, r7, #8
 80163e0:	461a      	mov	r2, r3
 80163e2:	6878      	ldr	r0, [r7, #4]
 80163e4:	f7ff ff98 	bl	8016318 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>
 80163e8:	4603      	mov	r3, r0
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d001      	beq.n	80163f2 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa0>
 80163ee:	2301      	movs	r3, #1
 80163f0:	e000      	b.n	80163f4 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa2>
 80163f2:	2300      	movs	r3, #0
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d1bc      	bne.n	8016372 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x20>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 80163f8:	f107 0308 	add.w	r3, r7, #8
 80163fc:	4618      	mov	r0, r3
 80163fe:	f7f7 fed3 	bl	800e1a8 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8016402:	4603      	mov	r3, r0
 8016404:	681c      	ldr	r4, [r3, #0]
 8016406:	f107 0314 	add.w	r3, r7, #20
 801640a:	6939      	ldr	r1, [r7, #16]
 801640c:	4618      	mov	r0, r3
 801640e:	f7fb ff80 	bl	8012312 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8016412:	4603      	mov	r3, r0
 8016414:	623b      	str	r3, [r7, #32]
 8016416:	f107 0320 	add.w	r3, r7, #32
 801641a:	4618      	mov	r0, r3
 801641c:	f7fb ffa1 	bl	8012362 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8016420:	4603      	mov	r3, r0
 8016422:	601c      	str	r4, [r3, #0]
    }
 8016424:	bf00      	nop
 8016426:	372c      	adds	r7, #44	; 0x2c
 8016428:	46bd      	mov	sp, r7
 801642a:	bd90      	pop	{r4, r7, pc}

0801642c <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 801642c:	b580      	push	{r7, lr}
 801642e:	b086      	sub	sp, #24
 8016430:	af00      	add	r7, sp, #0
 8016432:	60f8      	str	r0, [r7, #12]
 8016434:	60b9      	str	r1, [r7, #8]
 8016436:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 8016438:	68ba      	ldr	r2, [r7, #8]
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	1ad3      	subs	r3, r2, r3
 801643e:	109b      	asrs	r3, r3, #2
 8016440:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 8016442:	e00f      	b.n	8016464 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_+0x38>
	    *--__result = std::move(*--__last);
 8016444:	68bb      	ldr	r3, [r7, #8]
 8016446:	3b04      	subs	r3, #4
 8016448:	60bb      	str	r3, [r7, #8]
 801644a:	68b8      	ldr	r0, [r7, #8]
 801644c:	f7f7 feac 	bl	800e1a8 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8016450:	4603      	mov	r3, r0
 8016452:	681a      	ldr	r2, [r3, #0]
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	3b04      	subs	r3, #4
 8016458:	607b      	str	r3, [r7, #4]
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	601a      	str	r2, [r3, #0]
	  for (; __n > 0; --__n)
 801645e:	697b      	ldr	r3, [r7, #20]
 8016460:	3b01      	subs	r3, #1
 8016462:	617b      	str	r3, [r7, #20]
 8016464:	697b      	ldr	r3, [r7, #20]
 8016466:	2b00      	cmp	r3, #0
 8016468:	dcec      	bgt.n	8016444 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_+0x18>
	  return __result;
 801646a:	687b      	ldr	r3, [r7, #4]
	}
 801646c:	4618      	mov	r0, r3
 801646e:	3718      	adds	r7, #24
 8016470:	46bd      	mov	sp, r7
 8016472:	bd80      	pop	{r7, pc}

08016474 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8016474:	b580      	push	{r7, lr}
 8016476:	b086      	sub	sp, #24
 8016478:	af00      	add	r7, sp, #0
 801647a:	60f8      	str	r0, [r7, #12]
 801647c:	60b9      	str	r1, [r7, #8]
 801647e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8016480:	68ba      	ldr	r2, [r7, #8]
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	1ad3      	subs	r3, r2, r3
 8016486:	109b      	asrs	r3, r3, #2
 8016488:	617b      	str	r3, [r7, #20]
	  if (_Num)
 801648a:	697b      	ldr	r3, [r7, #20]
 801648c:	2b00      	cmp	r3, #0
 801648e:	d00a      	beq.n	80164a6 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8016490:	697b      	ldr	r3, [r7, #20]
 8016492:	009b      	lsls	r3, r3, #2
 8016494:	425b      	negs	r3, r3
 8016496:	687a      	ldr	r2, [r7, #4]
 8016498:	18d0      	adds	r0, r2, r3
 801649a:	697b      	ldr	r3, [r7, #20]
 801649c:	009b      	lsls	r3, r3, #2
 801649e:	461a      	mov	r2, r3
 80164a0:	68f9      	ldr	r1, [r7, #12]
 80164a2:	f012 fb11 	bl	8028ac8 <memmove>
	  return __result - _Num;
 80164a6:	697b      	ldr	r3, [r7, #20]
 80164a8:	009b      	lsls	r3, r3, #2
 80164aa:	425b      	negs	r3, r3
 80164ac:	687a      	ldr	r2, [r7, #4]
 80164ae:	4413      	add	r3, r2
	}
 80164b0:	4618      	mov	r0, r3
 80164b2:	3718      	adds	r7, #24
 80164b4:	46bd      	mov	sp, r7
 80164b6:	bd80      	pop	{r7, pc}

080164b8 <_ZSt19__relocate_object_aIN3jlb4EdgeES1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 80164b8:	b580      	push	{r7, lr}
 80164ba:	b084      	sub	sp, #16
 80164bc:	af00      	add	r7, sp, #0
 80164be:	60f8      	str	r0, [r7, #12]
 80164c0:	60b9      	str	r1, [r7, #8]
 80164c2:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 80164c4:	68b8      	ldr	r0, [r7, #8]
 80164c6:	f7f8 f9bc 	bl	800e842 <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>
 80164ca:	4603      	mov	r3, r0
 80164cc:	461a      	mov	r2, r3
 80164ce:	68f9      	ldr	r1, [r7, #12]
 80164d0:	6878      	ldr	r0, [r7, #4]
 80164d2:	f7f9 ff62 	bl	801039a <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 80164d6:	68b8      	ldr	r0, [r7, #8]
 80164d8:	f7fe f8f8 	bl	80146cc <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 80164dc:	4603      	mov	r3, r0
 80164de:	4619      	mov	r1, r3
 80164e0:	6878      	ldr	r0, [r7, #4]
 80164e2:	f7fc fb2d 	bl	8012b40 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE7destroyIS1_EEvRS2_PT_>
    }
 80164e6:	bf00      	nop
 80164e8:	3710      	adds	r7, #16
 80164ea:	46bd      	mov	sp, r7
 80164ec:	bd80      	pop	{r7, pc}

080164ee <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80164ee:	b480      	push	{r7}
 80164f0:	b083      	sub	sp, #12
 80164f2:	af00      	add	r7, sp, #0
 80164f4:	6078      	str	r0, [r7, #4]
 80164f6:	6039      	str	r1, [r7, #0]
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	4618      	mov	r0, r3
 80164fc:	370c      	adds	r7, #12
 80164fe:	46bd      	mov	sp, r7
 8016500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016504:	4770      	bx	lr

08016506 <_ZN9__gnu_cxxeqIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8016506:	b590      	push	{r4, r7, lr}
 8016508:	b083      	sub	sp, #12
 801650a:	af00      	add	r7, sp, #0
 801650c:	6078      	str	r0, [r7, #4]
 801650e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8016510:	6878      	ldr	r0, [r7, #4]
 8016512:	f7ff fca6 	bl	8015e62 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 8016516:	4603      	mov	r3, r0
 8016518:	681c      	ldr	r4, [r3, #0]
 801651a:	6838      	ldr	r0, [r7, #0]
 801651c:	f7ff fca1 	bl	8015e62 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 8016520:	4603      	mov	r3, r0
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	429c      	cmp	r4, r3
 8016526:	bf0c      	ite	eq
 8016528:	2301      	moveq	r3, #1
 801652a:	2300      	movne	r3, #0
 801652c:	b2db      	uxtb	r3, r3
 801652e:	4618      	mov	r0, r3
 8016530:	370c      	adds	r7, #12
 8016532:	46bd      	mov	sp, r7
 8016534:	bd90      	pop	{r4, r7, pc}

08016536 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8016536:	b480      	push	{r7}
 8016538:	b083      	sub	sp, #12
 801653a:	af00      	add	r7, sp, #0
 801653c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	4618      	mov	r0, r3
 8016544:	370c      	adds	r7, #12
 8016546:	46bd      	mov	sp, r7
 8016548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801654c:	4770      	bx	lr

0801654e <_ZN3jlb4EdgeC1ERKS0_>:
    struct Edge
 801654e:	b580      	push	{r7, lr}
 8016550:	b082      	sub	sp, #8
 8016552:	af00      	add	r7, sp, #0
 8016554:	6078      	str	r0, [r7, #4]
 8016556:	6039      	str	r1, [r7, #0]
 8016558:	683b      	ldr	r3, [r7, #0]
 801655a:	781a      	ldrb	r2, [r3, #0]
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	701a      	strb	r2, [r3, #0]
 8016560:	683b      	ldr	r3, [r7, #0]
 8016562:	685a      	ldr	r2, [r3, #4]
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	605a      	str	r2, [r3, #4]
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	f103 0208 	add.w	r2, r3, #8
 801656e:	683b      	ldr	r3, [r7, #0]
 8016570:	3308      	adds	r3, #8
 8016572:	4619      	mov	r1, r3
 8016574:	4610      	mov	r0, r2
 8016576:	f7f6 fe5a 	bl	800d22e <_ZNSt6vectorIcSaIcEEC1ERKS1_>
 801657a:	683b      	ldr	r3, [r7, #0]
 801657c:	695a      	ldr	r2, [r3, #20]
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	615a      	str	r2, [r3, #20]
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	4618      	mov	r0, r3
 8016586:	3708      	adds	r7, #8
 8016588:	46bd      	mov	sp, r7
 801658a:	bd80      	pop	{r7, pc}

0801658c <_ZSt10_ConstructIN3jlb4EdgeEJRKS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 801658c:	b590      	push	{r4, r7, lr}
 801658e:	b083      	sub	sp, #12
 8016590:	af00      	add	r7, sp, #0
 8016592:	6078      	str	r0, [r7, #4]
 8016594:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8016596:	6838      	ldr	r0, [r7, #0]
 8016598:	f000 f972 	bl	8016880 <_ZSt7forwardIRKN3jlb4EdgeEEOT_RNSt16remove_referenceIS4_E4typeE>
 801659c:	4604      	mov	r4, r0
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	4619      	mov	r1, r3
 80165a2:	2018      	movs	r0, #24
 80165a4:	f7ec faba 	bl	8002b1c <_ZnwjPv>
 80165a8:	4603      	mov	r3, r0
 80165aa:	4621      	mov	r1, r4
 80165ac:	4618      	mov	r0, r3
 80165ae:	f7ff ffce 	bl	801654e <_ZN3jlb4EdgeC1ERKS0_>
    }
 80165b2:	370c      	adds	r7, #12
 80165b4:	46bd      	mov	sp, r7
 80165b6:	bd90      	pop	{r4, r7, pc}

080165b8 <_ZSt10_ConstructIN3jlb4NodeEJRKS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 80165b8:	b590      	push	{r4, r7, lr}
 80165ba:	b083      	sub	sp, #12
 80165bc:	af00      	add	r7, sp, #0
 80165be:	6078      	str	r0, [r7, #4]
 80165c0:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 80165c2:	6838      	ldr	r0, [r7, #0]
 80165c4:	f000 f967 	bl	8016896 <_ZSt7forwardIRKN3jlb4NodeEEOT_RNSt16remove_referenceIS4_E4typeE>
 80165c8:	4604      	mov	r4, r0
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	4619      	mov	r1, r3
 80165ce:	2018      	movs	r0, #24
 80165d0:	f7ec faa4 	bl	8002b1c <_ZnwjPv>
 80165d4:	4603      	mov	r3, r0
 80165d6:	4621      	mov	r1, r4
 80165d8:	4618      	mov	r0, r3
 80165da:	f7fa f800 	bl	80105de <_ZN3jlb4NodeC1ERKS0_>
    }
 80165de:	370c      	adds	r7, #12
 80165e0:	46bd      	mov	sp, r7
 80165e2:	bd90      	pop	{r4, r7, pc}

080165e4 <_ZSt12__get_helperILj0ERKcJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80165e4:	b580      	push	{r7, lr}
 80165e6:	b082      	sub	sp, #8
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80165ec:	6878      	ldr	r0, [r7, #4]
 80165ee:	f000 f95d 	bl	80168ac <_ZNSt11_Tuple_implILj0EJRKcEE7_M_headERS2_>
 80165f2:	4603      	mov	r3, r0
 80165f4:	4618      	mov	r0, r3
 80165f6:	3708      	adds	r7, #8
 80165f8:	46bd      	mov	sp, r7
 80165fa:	bd80      	pop	{r7, pc}

080165fc <_ZNK9__gnu_cxx13new_allocatorISt4pairIfcEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80165fc:	b480      	push	{r7}
 80165fe:	b083      	sub	sp, #12
 8016600:	af00      	add	r7, sp, #0
 8016602:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8016604:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 8016608:	4618      	mov	r0, r3
 801660a:	370c      	adds	r7, #12
 801660c:	46bd      	mov	sp, r7
 801660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016612:	4770      	bx	lr

08016614 <_ZN9__gnu_cxx13new_allocatorISt4pairIfcEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8016614:	b580      	push	{r7, lr}
 8016616:	b084      	sub	sp, #16
 8016618:	af00      	add	r7, sp, #0
 801661a:	60f8      	str	r0, [r7, #12]
 801661c:	60b9      	str	r1, [r7, #8]
 801661e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8016620:	68f8      	ldr	r0, [r7, #12]
 8016622:	f7ff ffeb 	bl	80165fc <_ZNK9__gnu_cxx13new_allocatorISt4pairIfcEE11_M_max_sizeEv>
 8016626:	4602      	mov	r2, r0
 8016628:	68bb      	ldr	r3, [r7, #8]
 801662a:	4293      	cmp	r3, r2
 801662c:	bf8c      	ite	hi
 801662e:	2301      	movhi	r3, #1
 8016630:	2300      	movls	r3, #0
 8016632:	b2db      	uxtb	r3, r3
 8016634:	2b00      	cmp	r3, #0
 8016636:	bf14      	ite	ne
 8016638:	2301      	movne	r3, #1
 801663a:	2300      	moveq	r3, #0
 801663c:	b2db      	uxtb	r3, r3
 801663e:	2b00      	cmp	r3, #0
 8016640:	d007      	beq.n	8016652 <_ZN9__gnu_cxx13new_allocatorISt4pairIfcEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8016642:	68bb      	ldr	r3, [r7, #8]
 8016644:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8016648:	d301      	bcc.n	801664e <_ZN9__gnu_cxx13new_allocatorISt4pairIfcEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 801664a:	f00f f9f2 	bl	8025a32 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 801664e:	f00f f9ed 	bl	8025a2c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8016652:	68bb      	ldr	r3, [r7, #8]
 8016654:	00db      	lsls	r3, r3, #3
 8016656:	4618      	mov	r0, r3
 8016658:	f00f f91c 	bl	8025894 <_Znwj>
 801665c:	4603      	mov	r3, r0
 801665e:	bf00      	nop
      }
 8016660:	4618      	mov	r0, r3
 8016662:	3710      	adds	r7, #16
 8016664:	46bd      	mov	sp, r7
 8016666:	bd80      	pop	{r7, pc}

08016668 <_ZSt12__niter_baseIPSt4pairIfcEET_S3_>:
    __niter_base(_Iterator __it)
 8016668:	b480      	push	{r7}
 801666a:	b083      	sub	sp, #12
 801666c:	af00      	add	r7, sp, #0
 801666e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	4618      	mov	r0, r3
 8016674:	370c      	adds	r7, #12
 8016676:	46bd      	mov	sp, r7
 8016678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801667c:	4770      	bx	lr

0801667e <_ZSt14__relocate_a_1IPSt4pairIfcES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 801667e:	b590      	push	{r4, r7, lr}
 8016680:	b087      	sub	sp, #28
 8016682:	af00      	add	r7, sp, #0
 8016684:	60f8      	str	r0, [r7, #12]
 8016686:	60b9      	str	r1, [r7, #8]
 8016688:	607a      	str	r2, [r7, #4]
 801668a:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 8016690:	e012      	b.n	80166b8 <_ZSt14__relocate_a_1IPSt4pairIfcES2_SaIS1_EET0_T_S5_S4_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 8016692:	6978      	ldr	r0, [r7, #20]
 8016694:	f7fe fa17 	bl	8014ac6 <_ZSt11__addressofISt4pairIfcEEPT_RS2_>
 8016698:	4604      	mov	r4, r0
 801669a:	68f8      	ldr	r0, [r7, #12]
 801669c:	f7fe fa13 	bl	8014ac6 <_ZSt11__addressofISt4pairIfcEEPT_RS2_>
 80166a0:	4603      	mov	r3, r0
 80166a2:	683a      	ldr	r2, [r7, #0]
 80166a4:	4619      	mov	r1, r3
 80166a6:	4620      	mov	r0, r4
 80166a8:	f000 f90d 	bl	80168c6 <_ZSt19__relocate_object_aISt4pairIfcES1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	3308      	adds	r3, #8
 80166b0:	60fb      	str	r3, [r7, #12]
 80166b2:	697b      	ldr	r3, [r7, #20]
 80166b4:	3308      	adds	r3, #8
 80166b6:	617b      	str	r3, [r7, #20]
 80166b8:	68fa      	ldr	r2, [r7, #12]
 80166ba:	68bb      	ldr	r3, [r7, #8]
 80166bc:	429a      	cmp	r2, r3
 80166be:	d1e8      	bne.n	8016692 <_ZSt14__relocate_a_1IPSt4pairIfcES2_SaIS1_EET0_T_S5_S4_RT1_+0x14>
      return __cur;
 80166c0:	697b      	ldr	r3, [r7, #20]
    }
 80166c2:	4618      	mov	r0, r3
 80166c4:	371c      	adds	r7, #28
 80166c6:	46bd      	mov	sp, r7
 80166c8:	bd90      	pop	{r4, r7, pc}

080166ca <_ZSt19__relocate_object_aISt4pairIciES1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 80166ca:	b580      	push	{r7, lr}
 80166cc:	b084      	sub	sp, #16
 80166ce:	af00      	add	r7, sp, #0
 80166d0:	60f8      	str	r0, [r7, #12]
 80166d2:	60b9      	str	r1, [r7, #8]
 80166d4:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 80166d6:	68b8      	ldr	r0, [r7, #8]
 80166d8:	f7f8 ff5b 	bl	800f592 <_ZSt4moveIRSt4pairIciEEONSt16remove_referenceIT_E4typeEOS4_>
 80166dc:	4603      	mov	r3, r0
 80166de:	461a      	mov	r2, r3
 80166e0:	68f9      	ldr	r1, [r7, #12]
 80166e2:	6878      	ldr	r0, [r7, #4]
 80166e4:	f7fb f811 	bl	801170a <_ZNSt16allocator_traitsISaISt4pairIciEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 80166e8:	68b8      	ldr	r0, [r7, #8]
 80166ea:	f7fe faba 	bl	8014c62 <_ZSt11__addressofISt4pairIciEEPT_RS2_>
 80166ee:	4603      	mov	r3, r0
 80166f0:	4619      	mov	r1, r3
 80166f2:	6878      	ldr	r0, [r7, #4]
 80166f4:	f7fd fa19 	bl	8013b2a <_ZNSt16allocator_traitsISaISt4pairIciEEE7destroyIS1_EEvRS2_PT_>
    }
 80166f8:	bf00      	nop
 80166fa:	3710      	adds	r7, #16
 80166fc:	46bd      	mov	sp, r7
 80166fe:	bd80      	pop	{r7, pc}

08016700 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8016700:	b480      	push	{r7}
 8016702:	b087      	sub	sp, #28
 8016704:	af00      	add	r7, sp, #0
 8016706:	60f8      	str	r0, [r7, #12]
 8016708:	60b9      	str	r1, [r7, #8]
 801670a:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 801670c:	68ba      	ldr	r2, [r7, #8]
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	1ad3      	subs	r3, r2, r3
 8016712:	109b      	asrs	r3, r3, #2
 8016714:	617b      	str	r3, [r7, #20]
 8016716:	e00c      	b.n	8016732 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_+0x32>
	      *__result = *__first;
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	681a      	ldr	r2, [r3, #0]
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	601a      	str	r2, [r3, #0]
	      ++__first;
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	3304      	adds	r3, #4
 8016724:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	3304      	adds	r3, #4
 801672a:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 801672c:	697b      	ldr	r3, [r7, #20]
 801672e:	3b01      	subs	r3, #1
 8016730:	617b      	str	r3, [r7, #20]
 8016732:	697b      	ldr	r3, [r7, #20]
 8016734:	2b00      	cmp	r3, #0
 8016736:	dcef      	bgt.n	8016718 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_+0x18>
	  return __result;
 8016738:	687b      	ldr	r3, [r7, #4]
	}
 801673a:	4618      	mov	r0, r3
 801673c:	371c      	adds	r7, #28
 801673e:	46bd      	mov	sp, r7
 8016740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016744:	4770      	bx	lr

08016746 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8016746:	b580      	push	{r7, lr}
 8016748:	b086      	sub	sp, #24
 801674a:	af00      	add	r7, sp, #0
 801674c:	60f8      	str	r0, [r7, #12]
 801674e:	60b9      	str	r1, [r7, #8]
 8016750:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8016752:	68ba      	ldr	r2, [r7, #8]
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	1ad3      	subs	r3, r2, r3
 8016758:	109b      	asrs	r3, r3, #2
 801675a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 801675c:	697b      	ldr	r3, [r7, #20]
 801675e:	2b00      	cmp	r3, #0
 8016760:	d006      	beq.n	8016770 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8016762:	697b      	ldr	r3, [r7, #20]
 8016764:	009b      	lsls	r3, r3, #2
 8016766:	461a      	mov	r2, r3
 8016768:	68f9      	ldr	r1, [r7, #12]
 801676a:	6878      	ldr	r0, [r7, #4]
 801676c:	f012 f9ac 	bl	8028ac8 <memmove>
	  return __result + _Num;
 8016770:	697b      	ldr	r3, [r7, #20]
 8016772:	009b      	lsls	r3, r3, #2
 8016774:	687a      	ldr	r2, [r7, #4]
 8016776:	4413      	add	r3, r2
	}
 8016778:	4618      	mov	r0, r3
 801677a:	3718      	adds	r7, #24
 801677c:	46bd      	mov	sp, r7
 801677e:	bd80      	pop	{r7, pc}

08016780 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 8016780:	b480      	push	{r7}
 8016782:	b087      	sub	sp, #28
 8016784:	af00      	add	r7, sp, #0
 8016786:	60f8      	str	r0, [r7, #12]
 8016788:	60b9      	str	r1, [r7, #8]
 801678a:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 801678c:	68ba      	ldr	r2, [r7, #8]
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	1ad3      	subs	r3, r2, r3
 8016792:	109b      	asrs	r3, r3, #2
 8016794:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 8016796:	e00c      	b.n	80167b2 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_+0x32>
	    *--__result = *--__last;
 8016798:	68bb      	ldr	r3, [r7, #8]
 801679a:	3b04      	subs	r3, #4
 801679c:	60bb      	str	r3, [r7, #8]
 801679e:	68bb      	ldr	r3, [r7, #8]
 80167a0:	681a      	ldr	r2, [r3, #0]
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	3b04      	subs	r3, #4
 80167a6:	607b      	str	r3, [r7, #4]
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	601a      	str	r2, [r3, #0]
	  for (; __n > 0; --__n)
 80167ac:	697b      	ldr	r3, [r7, #20]
 80167ae:	3b01      	subs	r3, #1
 80167b0:	617b      	str	r3, [r7, #20]
 80167b2:	697b      	ldr	r3, [r7, #20]
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	dcef      	bgt.n	8016798 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_+0x18>
	  return __result;
 80167b8:	687b      	ldr	r3, [r7, #4]
	}
 80167ba:	4618      	mov	r0, r3
 80167bc:	371c      	adds	r7, #28
 80167be:	46bd      	mov	sp, r7
 80167c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167c4:	4770      	bx	lr

080167c6 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80167c6:	b580      	push	{r7, lr}
 80167c8:	b086      	sub	sp, #24
 80167ca:	af00      	add	r7, sp, #0
 80167cc:	60f8      	str	r0, [r7, #12]
 80167ce:	60b9      	str	r1, [r7, #8]
 80167d0:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80167d2:	68ba      	ldr	r2, [r7, #8]
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	1ad3      	subs	r3, r2, r3
 80167d8:	109b      	asrs	r3, r3, #2
 80167da:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80167dc:	697b      	ldr	r3, [r7, #20]
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d00a      	beq.n	80167f8 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80167e2:	697b      	ldr	r3, [r7, #20]
 80167e4:	009b      	lsls	r3, r3, #2
 80167e6:	425b      	negs	r3, r3
 80167e8:	687a      	ldr	r2, [r7, #4]
 80167ea:	18d0      	adds	r0, r2, r3
 80167ec:	697b      	ldr	r3, [r7, #20]
 80167ee:	009b      	lsls	r3, r3, #2
 80167f0:	461a      	mov	r2, r3
 80167f2:	68f9      	ldr	r1, [r7, #12]
 80167f4:	f012 f968 	bl	8028ac8 <memmove>
	  return __result - _Num;
 80167f8:	697b      	ldr	r3, [r7, #20]
 80167fa:	009b      	lsls	r3, r3, #2
 80167fc:	425b      	negs	r3, r3
 80167fe:	687a      	ldr	r2, [r7, #4]
 8016800:	4413      	add	r3, r2
	}
 8016802:	4618      	mov	r0, r3
 8016804:	3718      	adds	r7, #24
 8016806:	46bd      	mov	sp, r7
 8016808:	bd80      	pop	{r7, pc}

0801680a <_ZSt4copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 801680a:	b590      	push	{r4, r7, lr}
 801680c:	b085      	sub	sp, #20
 801680e:	af00      	add	r7, sp, #0
 8016810:	60f8      	str	r0, [r7, #12]
 8016812:	60b9      	str	r1, [r7, #8]
 8016814:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8016816:	68f8      	ldr	r0, [r7, #12]
 8016818:	f000 f870 	bl	80168fc <_ZSt12__miter_baseIPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 801681c:	4604      	mov	r4, r0
 801681e:	68b8      	ldr	r0, [r7, #8]
 8016820:	f000 f86c 	bl	80168fc <_ZSt12__miter_baseIPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8016824:	4603      	mov	r3, r0
 8016826:	687a      	ldr	r2, [r7, #4]
 8016828:	4619      	mov	r1, r3
 801682a:	4620      	mov	r0, r4
 801682c:	f000 f878 	bl	8016920 <_ZSt13__copy_move_aILb1EPcS0_ET1_T0_S2_S1_>
 8016830:	4603      	mov	r3, r0
    }
 8016832:	4618      	mov	r0, r3
 8016834:	3714      	adds	r7, #20
 8016836:	46bd      	mov	sp, r7
 8016838:	bd90      	pop	{r4, r7, pc}

0801683a <_ZSt13__copy_move_aILb0EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 801683a:	b5b0      	push	{r4, r5, r7, lr}
 801683c:	b084      	sub	sp, #16
 801683e:	af00      	add	r7, sp, #0
 8016840:	60f8      	str	r0, [r7, #12]
 8016842:	60b9      	str	r1, [r7, #8]
 8016844:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8016846:	68f8      	ldr	r0, [r7, #12]
 8016848:	f7f9 fad8 	bl	800fdfc <_ZSt12__niter_baseIPcET_S1_>
 801684c:	4604      	mov	r4, r0
 801684e:	68b8      	ldr	r0, [r7, #8]
 8016850:	f7f9 fad4 	bl	800fdfc <_ZSt12__niter_baseIPcET_S1_>
 8016854:	4605      	mov	r5, r0
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	4618      	mov	r0, r3
 801685a:	f7f9 facf 	bl	800fdfc <_ZSt12__niter_baseIPcET_S1_>
 801685e:	4603      	mov	r3, r0
 8016860:	461a      	mov	r2, r3
 8016862:	4629      	mov	r1, r5
 8016864:	4620      	mov	r0, r4
 8016866:	f7fe fc5b 	bl	8015120 <_ZSt14__copy_move_a1ILb0EPcS0_ET1_T0_S2_S1_>
 801686a:	4602      	mov	r2, r0
 801686c:	1d3b      	adds	r3, r7, #4
 801686e:	4611      	mov	r1, r2
 8016870:	4618      	mov	r0, r3
 8016872:	f7f9 fade 	bl	800fe32 <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 8016876:	4603      	mov	r3, r0
    }
 8016878:	4618      	mov	r0, r3
 801687a:	3710      	adds	r7, #16
 801687c:	46bd      	mov	sp, r7
 801687e:	bdb0      	pop	{r4, r5, r7, pc}

08016880 <_ZSt7forwardIRKN3jlb4EdgeEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8016880:	b480      	push	{r7}
 8016882:	b083      	sub	sp, #12
 8016884:	af00      	add	r7, sp, #0
 8016886:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	4618      	mov	r0, r3
 801688c:	370c      	adds	r7, #12
 801688e:	46bd      	mov	sp, r7
 8016890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016894:	4770      	bx	lr

08016896 <_ZSt7forwardIRKN3jlb4NodeEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8016896:	b480      	push	{r7}
 8016898:	b083      	sub	sp, #12
 801689a:	af00      	add	r7, sp, #0
 801689c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	4618      	mov	r0, r3
 80168a2:	370c      	adds	r7, #12
 80168a4:	46bd      	mov	sp, r7
 80168a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168aa:	4770      	bx	lr

080168ac <_ZNSt11_Tuple_implILj0EJRKcEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b082      	sub	sp, #8
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	6078      	str	r0, [r7, #4]
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	4618      	mov	r0, r3
 80168b8:	f000 f855 	bl	8016966 <_ZNSt10_Head_baseILj0ERKcLb0EE7_M_headERS2_>
 80168bc:	4603      	mov	r3, r0
 80168be:	4618      	mov	r0, r3
 80168c0:	3708      	adds	r7, #8
 80168c2:	46bd      	mov	sp, r7
 80168c4:	bd80      	pop	{r7, pc}

080168c6 <_ZSt19__relocate_object_aISt4pairIfcES1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 80168c6:	b580      	push	{r7, lr}
 80168c8:	b084      	sub	sp, #16
 80168ca:	af00      	add	r7, sp, #0
 80168cc:	60f8      	str	r0, [r7, #12]
 80168ce:	60b9      	str	r1, [r7, #8]
 80168d0:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 80168d2:	68b8      	ldr	r0, [r7, #8]
 80168d4:	f7f2 f9fd 	bl	8008cd2 <_ZSt4moveIRSt4pairIfcEEONSt16remove_referenceIT_E4typeEOS4_>
 80168d8:	4603      	mov	r3, r0
 80168da:	461a      	mov	r2, r3
 80168dc:	68f9      	ldr	r1, [r7, #12]
 80168de:	6878      	ldr	r0, [r7, #4]
 80168e0:	f7fc fdb3 	bl	801344a <_ZNSt16allocator_traitsISaISt4pairIfcEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 80168e4:	68b8      	ldr	r0, [r7, #8]
 80168e6:	f7fe f8ee 	bl	8014ac6 <_ZSt11__addressofISt4pairIfcEEPT_RS2_>
 80168ea:	4603      	mov	r3, r0
 80168ec:	4619      	mov	r1, r3
 80168ee:	6878      	ldr	r0, [r7, #4]
 80168f0:	f7fa fd25 	bl	801133e <_ZNSt16allocator_traitsISaISt4pairIfcEEE7destroyIS1_EEvRS2_PT_>
    }
 80168f4:	bf00      	nop
 80168f6:	3710      	adds	r7, #16
 80168f8:	46bd      	mov	sp, r7
 80168fa:	bd80      	pop	{r7, pc}

080168fc <_ZSt12__miter_baseIPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    };

  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    auto
    __miter_base(move_iterator<_Iterator> __it)
 80168fc:	b580      	push	{r7, lr}
 80168fe:	b082      	sub	sp, #8
 8016900:	af00      	add	r7, sp, #0
 8016902:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8016904:	1d3b      	adds	r3, r7, #4
 8016906:	4618      	mov	r0, r3
 8016908:	f000 f839 	bl	801697e <_ZNKRSt13move_iteratorIPcE4baseEv>
 801690c:	4603      	mov	r3, r0
 801690e:	681b      	ldr	r3, [r3, #0]
 8016910:	4618      	mov	r0, r3
 8016912:	f7fd fb07 	bl	8013f24 <_ZSt12__miter_baseIPcET_S1_>
 8016916:	4603      	mov	r3, r0
 8016918:	4618      	mov	r0, r3
 801691a:	3708      	adds	r7, #8
 801691c:	46bd      	mov	sp, r7
 801691e:	bd80      	pop	{r7, pc}

08016920 <_ZSt13__copy_move_aILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8016920:	b5b0      	push	{r4, r5, r7, lr}
 8016922:	b084      	sub	sp, #16
 8016924:	af00      	add	r7, sp, #0
 8016926:	60f8      	str	r0, [r7, #12]
 8016928:	60b9      	str	r1, [r7, #8]
 801692a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 801692c:	68f8      	ldr	r0, [r7, #12]
 801692e:	f7f9 fa65 	bl	800fdfc <_ZSt12__niter_baseIPcET_S1_>
 8016932:	4604      	mov	r4, r0
 8016934:	68b8      	ldr	r0, [r7, #8]
 8016936:	f7f9 fa61 	bl	800fdfc <_ZSt12__niter_baseIPcET_S1_>
 801693a:	4605      	mov	r5, r0
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	4618      	mov	r0, r3
 8016940:	f7f9 fa5c 	bl	800fdfc <_ZSt12__niter_baseIPcET_S1_>
 8016944:	4603      	mov	r3, r0
 8016946:	461a      	mov	r2, r3
 8016948:	4629      	mov	r1, r5
 801694a:	4620      	mov	r0, r4
 801694c:	f000 f822 	bl	8016994 <_ZSt14__copy_move_a1ILb1EPcS0_ET1_T0_S2_S1_>
 8016950:	4602      	mov	r2, r0
 8016952:	1d3b      	adds	r3, r7, #4
 8016954:	4611      	mov	r1, r2
 8016956:	4618      	mov	r0, r3
 8016958:	f7f9 fa6b 	bl	800fe32 <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 801695c:	4603      	mov	r3, r0
    }
 801695e:	4618      	mov	r0, r3
 8016960:	3710      	adds	r7, #16
 8016962:	46bd      	mov	sp, r7
 8016964:	bdb0      	pop	{r4, r5, r7, pc}

08016966 <_ZNSt10_Head_baseILj0ERKcLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8016966:	b480      	push	{r7}
 8016968:	b083      	sub	sp, #12
 801696a:	af00      	add	r7, sp, #0
 801696c:	6078      	str	r0, [r7, #4]
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	4618      	mov	r0, r3
 8016974:	370c      	adds	r7, #12
 8016976:	46bd      	mov	sp, r7
 8016978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801697c:	4770      	bx	lr

0801697e <_ZNKRSt13move_iteratorIPcE4baseEv>:
      base() const & noexcept
 801697e:	b480      	push	{r7}
 8016980:	b083      	sub	sp, #12
 8016982:	af00      	add	r7, sp, #0
 8016984:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	4618      	mov	r0, r3
 801698a:	370c      	adds	r7, #12
 801698c:	46bd      	mov	sp, r7
 801698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016992:	4770      	bx	lr

08016994 <_ZSt14__copy_move_a1ILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8016994:	b580      	push	{r7, lr}
 8016996:	b084      	sub	sp, #16
 8016998:	af00      	add	r7, sp, #0
 801699a:	60f8      	str	r0, [r7, #12]
 801699c:	60b9      	str	r1, [r7, #8]
 801699e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80169a0:	687a      	ldr	r2, [r7, #4]
 80169a2:	68b9      	ldr	r1, [r7, #8]
 80169a4:	68f8      	ldr	r0, [r7, #12]
 80169a6:	f000 f805 	bl	80169b4 <_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_>
 80169aa:	4603      	mov	r3, r0
 80169ac:	4618      	mov	r0, r3
 80169ae:	3710      	adds	r7, #16
 80169b0:	46bd      	mov	sp, r7
 80169b2:	bd80      	pop	{r7, pc}

080169b4 <_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80169b4:	b580      	push	{r7, lr}
 80169b6:	b084      	sub	sp, #16
 80169b8:	af00      	add	r7, sp, #0
 80169ba:	60f8      	str	r0, [r7, #12]
 80169bc:	60b9      	str	r1, [r7, #8]
 80169be:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 80169c0:	f7ec f8a4 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 80169c4:	4603      	mov	r3, r0
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d006      	beq.n	80169d8 <_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_+0x24>
	  __copy_m(__first, __last, __result);
 80169ca:	687a      	ldr	r2, [r7, #4]
 80169cc:	68b9      	ldr	r1, [r7, #8]
 80169ce:	68f8      	ldr	r0, [r7, #12]
 80169d0:	f000 f80d 	bl	80169ee <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_>
 80169d4:	4603      	mov	r3, r0
 80169d6:	e006      	b.n	80169e6 <_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 80169d8:	687a      	ldr	r2, [r7, #4]
 80169da:	68b9      	ldr	r1, [r7, #8]
 80169dc:	68f8      	ldr	r0, [r7, #12]
 80169de:	f000 f829 	bl	8016a34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 80169e2:	4603      	mov	r3, r0
 80169e4:	bf00      	nop
    }
 80169e6:	4618      	mov	r0, r3
 80169e8:	3710      	adds	r7, #16
 80169ea:	46bd      	mov	sp, r7
 80169ec:	bd80      	pop	{r7, pc}

080169ee <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_>:
	__copy_m(_II __first, _II __last, _OI __result)
 80169ee:	b580      	push	{r7, lr}
 80169f0:	b086      	sub	sp, #24
 80169f2:	af00      	add	r7, sp, #0
 80169f4:	60f8      	str	r0, [r7, #12]
 80169f6:	60b9      	str	r1, [r7, #8]
 80169f8:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80169fa:	68ba      	ldr	r2, [r7, #8]
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	1ad3      	subs	r3, r2, r3
 8016a00:	617b      	str	r3, [r7, #20]
 8016a02:	e00f      	b.n	8016a24 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_+0x36>
	      *__result = std::move(*__first);
 8016a04:	68f8      	ldr	r0, [r7, #12]
 8016a06:	f7f9 f927 	bl	800fc58 <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>
 8016a0a:	4603      	mov	r3, r0
 8016a0c:	781a      	ldrb	r2, [r3, #0]
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	701a      	strb	r2, [r3, #0]
	      ++__first;
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	3301      	adds	r3, #1
 8016a16:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	3301      	adds	r3, #1
 8016a1c:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8016a1e:	697b      	ldr	r3, [r7, #20]
 8016a20:	3b01      	subs	r3, #1
 8016a22:	617b      	str	r3, [r7, #20]
 8016a24:	697b      	ldr	r3, [r7, #20]
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	dcec      	bgt.n	8016a04 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_+0x16>
	  return __result;
 8016a2a:	687b      	ldr	r3, [r7, #4]
	}
 8016a2c:	4618      	mov	r0, r3
 8016a2e:	3718      	adds	r7, #24
 8016a30:	46bd      	mov	sp, r7
 8016a32:	bd80      	pop	{r7, pc}

08016a34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8016a34:	b580      	push	{r7, lr}
 8016a36:	b086      	sub	sp, #24
 8016a38:	af00      	add	r7, sp, #0
 8016a3a:	60f8      	str	r0, [r7, #12]
 8016a3c:	60b9      	str	r1, [r7, #8]
 8016a3e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8016a40:	68ba      	ldr	r2, [r7, #8]
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	1ad3      	subs	r3, r2, r3
 8016a46:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8016a48:	697b      	ldr	r3, [r7, #20]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d005      	beq.n	8016a5a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8016a4e:	697b      	ldr	r3, [r7, #20]
 8016a50:	461a      	mov	r2, r3
 8016a52:	68f9      	ldr	r1, [r7, #12]
 8016a54:	6878      	ldr	r0, [r7, #4]
 8016a56:	f012 f837 	bl	8028ac8 <memmove>
	  return __result + _Num;
 8016a5a:	697b      	ldr	r3, [r7, #20]
 8016a5c:	687a      	ldr	r2, [r7, #4]
 8016a5e:	4413      	add	r3, r2
	}
 8016a60:	4618      	mov	r0, r3
 8016a62:	3718      	adds	r7, #24
 8016a64:	46bd      	mov	sp, r7
 8016a66:	bd80      	pop	{r7, pc}

08016a68 <_ZN3jlb5LogicD1Ev>:
    class Logic
 8016a68:	b580      	push	{r7, lr}
 8016a6a:	b082      	sub	sp, #8
 8016a6c:	af00      	add	r7, sp, #0
 8016a6e:	6078      	str	r0, [r7, #4]
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8016a76:	4618      	mov	r0, r3
 8016a78:	f7f3 fd88 	bl	800a58c <_ZN3jlb12SignalSenderD1Ev>
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8016a82:	4618      	mov	r0, r3
 8016a84:	f7f5 fe31 	bl	800c6ea <_ZN3jlb7ASStateD1Ev>
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8016a8e:	4618      	mov	r0, r3
 8016a90:	f7f1 ffc8 	bl	8008a24 <_ZN3jlb5GraphD1Ev>
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	339c      	adds	r3, #156	; 0x9c
 8016a98:	4618      	mov	r0, r3
 8016a9a:	f7ed ff35 	bl	8004908 <_ZN3jlb10ControllerD1Ev>
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	4618      	mov	r0, r3
 8016aa2:	f7f2 fdd8 	bl	8009656 <_ZN3jlb8OdometryD1Ev>
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	3708      	adds	r7, #8
 8016aac:	46bd      	mov	sp, r7
 8016aae:	bd80      	pop	{r7, pc}

08016ab0 <_Z41__static_initialization_and_destruction_0ii>:
	for(;;)
	{
		vTaskDelayUntil(&xLastWakeTime, 50u);
	}

}
 8016ab0:	b580      	push	{r7, lr}
 8016ab2:	b082      	sub	sp, #8
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	6078      	str	r0, [r7, #4]
 8016ab8:	6039      	str	r1, [r7, #0]
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	2b01      	cmp	r3, #1
 8016abe:	d10e      	bne.n	8016ade <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8016ac0:	683b      	ldr	r3, [r7, #0]
 8016ac2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016ac6:	4293      	cmp	r3, r2
 8016ac8:	d109      	bne.n	8016ade <_Z41__static_initialization_and_destruction_0ii+0x2e>
jlb::Logic logic;
 8016aca:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8016afc <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8016ace:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8016afc <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8016ad2:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8016afc <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8016ad6:	2102      	movs	r1, #2
 8016ad8:	4809      	ldr	r0, [pc, #36]	; (8016b00 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8016ada:	f7f5 fe14 	bl	800c706 <_ZN3jlb5LogicC1ENS_9DirectionEfff>
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d107      	bne.n	8016af4 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8016ae4:	683b      	ldr	r3, [r7, #0]
 8016ae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016aea:	4293      	cmp	r3, r2
 8016aec:	d102      	bne.n	8016af4 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8016aee:	4804      	ldr	r0, [pc, #16]	; (8016b00 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8016af0:	f7ff ffba 	bl	8016a68 <_ZN3jlb5LogicD1Ev>
}
 8016af4:	bf00      	nop
 8016af6:	3708      	adds	r7, #8
 8016af8:	46bd      	mov	sp, r7
 8016afa:	bd80      	pop	{r7, pc}
 8016afc:	00000000 	.word	0x00000000
 8016b00:	20000308 	.word	0x20000308

08016b04 <_GLOBAL__sub_I_motor_battery_voltage>:
 8016b04:	b580      	push	{r7, lr}
 8016b06:	af00      	add	r7, sp, #0
 8016b08:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016b0c:	2001      	movs	r0, #1
 8016b0e:	f7ff ffcf 	bl	8016ab0 <_Z41__static_initialization_and_destruction_0ii>
 8016b12:	bd80      	pop	{r7, pc}

08016b14 <_GLOBAL__sub_D_motor_battery_voltage>:
 8016b14:	b580      	push	{r7, lr}
 8016b16:	af00      	add	r7, sp, #0
 8016b18:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016b1c:	2000      	movs	r0, #0
 8016b1e:	f7ff ffc7 	bl	8016ab0 <_Z41__static_initialization_and_destruction_0ii>
 8016b22:	bd80      	pop	{r7, pc}

08016b24 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8016b24:	b480      	push	{r7}
 8016b26:	b085      	sub	sp, #20
 8016b28:	af00      	add	r7, sp, #0
 8016b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8016b2c:	4b08      	ldr	r3, [pc, #32]	; (8016b50 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8016b2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016b30:	4907      	ldr	r1, [pc, #28]	; (8016b50 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	4313      	orrs	r3, r2
 8016b36:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8016b38:	4b05      	ldr	r3, [pc, #20]	; (8016b50 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8016b3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	4013      	ands	r3, r2
 8016b40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8016b42:	68fb      	ldr	r3, [r7, #12]
}
 8016b44:	bf00      	nop
 8016b46:	3714      	adds	r7, #20
 8016b48:	46bd      	mov	sp, r7
 8016b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b4e:	4770      	bx	lr
 8016b50:	40021000 	.word	0x40021000

08016b54 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8016b54:	b480      	push	{r7}
 8016b56:	b085      	sub	sp, #20
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8016b5c:	4b08      	ldr	r3, [pc, #32]	; (8016b80 <LL_APB1_GRP2_EnableClock+0x2c>)
 8016b5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8016b60:	4907      	ldr	r1, [pc, #28]	; (8016b80 <LL_APB1_GRP2_EnableClock+0x2c>)
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	4313      	orrs	r3, r2
 8016b66:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8016b68:	4b05      	ldr	r3, [pc, #20]	; (8016b80 <LL_APB1_GRP2_EnableClock+0x2c>)
 8016b6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	4013      	ands	r3, r2
 8016b70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8016b72:	68fb      	ldr	r3, [r7, #12]
}
 8016b74:	bf00      	nop
 8016b76:	3714      	adds	r7, #20
 8016b78:	46bd      	mov	sp, r7
 8016b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b7e:	4770      	bx	lr
 8016b80:	40021000 	.word	0x40021000

08016b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8016b84:	b580      	push	{r7, lr}
 8016b86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8016b88:	f002 f835 	bl	8018bf6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8016b8c:	f000 f862 	bl	8016c54 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8016b90:	f000 ffba 	bl	8017b08 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8016b94:	f000 ff8e 	bl	8017ab4 <_ZL11MX_DMA_Initv>
  MX_LPUART1_UART_Init();
 8016b98:	f000 fa62 	bl	8017060 <_ZL20MX_LPUART1_UART_Initv>
  MX_RTC_Init();
 8016b9c:	f000 fb82 	bl	80172a4 <_ZL11MX_RTC_Initv>
  MX_UCPD1_Init();
 8016ba0:	f000 ff24 	bl	80179ec <_ZL13MX_UCPD1_Initv>
  MX_USB_PCD_Init();
 8016ba4:	f000 ff58 	bl	8017a58 <_ZL15MX_USB_PCD_Initv>
  MX_UART4_Init();
 8016ba8:	f000 fabc 	bl	8017124 <_ZL13MX_UART4_Initv>
  MX_SPI1_Init();
 8016bac:	f000 fbce 	bl	801734c <_ZL12MX_SPI1_Initv>
  MX_SPI2_Init();
 8016bb0:	f000 fc0e 	bl	80173d0 <_ZL12MX_SPI2_Initv>
  MX_SPI3_Init();
 8016bb4:	f000 fc4e 	bl	8017454 <_ZL12MX_SPI3_Initv>
  MX_TIM1_Init();
 8016bb8:	f000 fc8e 	bl	80174d8 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8016bbc:	f000 fd2e 	bl	801761c <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 8016bc0:	f000 fb10 	bl	80171e4 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 8016bc4:	f000 f8b6 	bl	8016d34 <_ZL12MX_ADC1_Initv>
  MX_TIM5_Init();
 8016bc8:	f000 fd88 	bl	80176dc <_ZL12MX_TIM5_Initv>
  MX_I2C1_Init();
 8016bcc:	f000 f9dc 	bl	8016f88 <_ZL12MX_I2C1_Initv>
  MX_ICACHE_Init();
 8016bd0:	f000 fa28 	bl	8017024 <_ZL14MX_ICACHE_Initv>
  MX_TIM6_Init();
 8016bd4:	f000 fe22 	bl	801781c <_ZL12MX_TIM6_Initv>
  MX_TIM8_Init();
 8016bd8:	f000 fe60 	bl	801789c <_ZL12MX_TIM8_Initv>
  /* USER CODE BEGIN 2 */
	Radio_Init();
 8016bdc:	f7ed fbfc 	bl	80043d8 <_Z10Radio_Initv>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8016be0:	2100      	movs	r1, #0
 8016be2:	4814      	ldr	r0, [pc, #80]	; (8016c34 <main+0xb0>)
 8016be4:	f008 f91e 	bl	801ee24 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8016be8:	2100      	movs	r1, #0
 8016bea:	4813      	ldr	r0, [pc, #76]	; (8016c38 <main+0xb4>)
 8016bec:	f008 f91a 	bl	801ee24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8016bf0:	210c      	movs	r1, #12
 8016bf2:	4811      	ldr	r0, [pc, #68]	; (8016c38 <main+0xb4>)
 8016bf4:	f008 f916 	bl	801ee24 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8016bf8:	213c      	movs	r1, #60	; 0x3c
 8016bfa:	4810      	ldr	r0, [pc, #64]	; (8016c3c <main+0xb8>)
 8016bfc:	f008 fc6a 	bl	801f4d4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start(&htim6);
 8016c00:	480f      	ldr	r0, [pc, #60]	; (8016c40 <main+0xbc>)
 8016c02:	f007 ffdf 	bl	801ebc4 <HAL_TIM_Base_Start>

	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8016c06:	2108      	movs	r1, #8
 8016c08:	480e      	ldr	r0, [pc, #56]	; (8016c44 <main+0xc0>)
 8016c0a:	f008 fa73 	bl	801f0f4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 8016c0e:	210c      	movs	r1, #12
 8016c10:	480c      	ldr	r0, [pc, #48]	; (8016c44 <main+0xc0>)
 8016c12:	f008 fa6f 	bl	801f0f4 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8016c16:	f00c fae5 	bl	80231e4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8016c1a:	4a0b      	ldr	r2, [pc, #44]	; (8016c48 <main+0xc4>)
 8016c1c:	2100      	movs	r1, #0
 8016c1e:	480b      	ldr	r0, [pc, #44]	; (8016c4c <main+0xc8>)
 8016c20:	f00c fb2a 	bl	8023278 <osThreadNew>
 8016c24:	4603      	mov	r3, r0
 8016c26:	4a0a      	ldr	r2, [pc, #40]	; (8016c50 <main+0xcc>)
 8016c28:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  RegistrateUserTasks();
 8016c2a:	f7f5 fedf 	bl	800c9ec <_Z19RegistrateUserTasksv>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8016c2e:	f00c fafd 	bl	802322c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8016c32:	e7fe      	b.n	8016c32 <main+0xae>
 8016c34:	20000c48 	.word	0x20000c48
 8016c38:	20000bb0 	.word	0x20000bb0
 8016c3c:	20000b64 	.word	0x20000b64
 8016c40:	20000bfc 	.word	0x20000bfc
 8016c44:	20000b18 	.word	0x20000b18
 8016c48:	0802988c 	.word	0x0802988c
 8016c4c:	08017d6d 	.word	0x08017d6d
 8016c50:	20000f88 	.word	0x20000f88

08016c54 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b098      	sub	sp, #96	; 0x60
 8016c58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8016c5a:	f107 0318 	add.w	r3, r7, #24
 8016c5e:	2248      	movs	r2, #72	; 0x48
 8016c60:	2100      	movs	r1, #0
 8016c62:	4618      	mov	r0, r3
 8016c64:	f011 ff4a 	bl	8028afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8016c68:	1d3b      	adds	r3, r7, #4
 8016c6a:	2200      	movs	r2, #0
 8016c6c:	601a      	str	r2, [r3, #0]
 8016c6e:	605a      	str	r2, [r3, #4]
 8016c70:	609a      	str	r2, [r3, #8]
 8016c72:	60da      	str	r2, [r3, #12]
 8016c74:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8016c76:	2000      	movs	r0, #0
 8016c78:	f005 f970 	bl	801bf5c <HAL_PWREx_ControlVoltageScaling>
 8016c7c:	4603      	mov	r3, r0
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	bf14      	ite	ne
 8016c82:	2301      	movne	r3, #1
 8016c84:	2300      	moveq	r3, #0
 8016c86:	b2db      	uxtb	r3, r3
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d001      	beq.n	8016c90 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8016c8c:	f001 f88d 	bl	8017daa <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8016c90:	f005 f946 	bl	801bf20 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8016c94:	4b26      	ldr	r3, [pc, #152]	; (8016d30 <_Z18SystemClock_Configv+0xdc>)
 8016c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016c9a:	4a25      	ldr	r2, [pc, #148]	; (8016d30 <_Z18SystemClock_Configv+0xdc>)
 8016c9c:	f023 0318 	bic.w	r3, r3, #24
 8016ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8016ca4:	2334      	movs	r3, #52	; 0x34
 8016ca6:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8016ca8:	2381      	movs	r3, #129	; 0x81
 8016caa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8016cac:	2301      	movs	r3, #1
 8016cae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8016cb0:	2301      	movs	r3, #1
 8016cb2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8016cb4:	2300      	movs	r3, #0
 8016cb6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8016cb8:	2360      	movs	r3, #96	; 0x60
 8016cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8016cbc:	2302      	movs	r3, #2
 8016cbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8016cc0:	2301      	movs	r3, #1
 8016cc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8016cc4:	2301      	movs	r3, #1
 8016cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8016cc8:	2337      	movs	r3, #55	; 0x37
 8016cca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8016ccc:	2307      	movs	r3, #7
 8016cce:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8016cd0:	2302      	movs	r3, #2
 8016cd2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8016cd4:	2302      	movs	r3, #2
 8016cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8016cd8:	f107 0318 	add.w	r3, r7, #24
 8016cdc:	4618      	mov	r0, r3
 8016cde:	f005 f9cd 	bl	801c07c <HAL_RCC_OscConfig>
 8016ce2:	4603      	mov	r3, r0
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	bf14      	ite	ne
 8016ce8:	2301      	movne	r3, #1
 8016cea:	2300      	moveq	r3, #0
 8016cec:	b2db      	uxtb	r3, r3
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d001      	beq.n	8016cf6 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8016cf2:	f001 f85a 	bl	8017daa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8016cf6:	230f      	movs	r3, #15
 8016cf8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8016cfa:	2303      	movs	r3, #3
 8016cfc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8016cfe:	2300      	movs	r3, #0
 8016d00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8016d02:	2300      	movs	r3, #0
 8016d04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8016d06:	2300      	movs	r3, #0
 8016d08:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8016d0a:	1d3b      	adds	r3, r7, #4
 8016d0c:	2105      	movs	r1, #5
 8016d0e:	4618      	mov	r0, r3
 8016d10:	f005 fe8a 	bl	801ca28 <HAL_RCC_ClockConfig>
 8016d14:	4603      	mov	r3, r0
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	bf14      	ite	ne
 8016d1a:	2301      	movne	r3, #1
 8016d1c:	2300      	moveq	r3, #0
 8016d1e:	b2db      	uxtb	r3, r3
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d001      	beq.n	8016d28 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8016d24:	f001 f841 	bl	8017daa <Error_Handler>
  }
}
 8016d28:	bf00      	nop
 8016d2a:	3760      	adds	r7, #96	; 0x60
 8016d2c:	46bd      	mov	sp, r7
 8016d2e:	bd80      	pop	{r7, pc}
 8016d30:	40021000 	.word	0x40021000

08016d34 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8016d34:	b580      	push	{r7, lr}
 8016d36:	b08a      	sub	sp, #40	; 0x28
 8016d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8016d3a:	f107 031c 	add.w	r3, r7, #28
 8016d3e:	2200      	movs	r2, #0
 8016d40:	601a      	str	r2, [r3, #0]
 8016d42:	605a      	str	r2, [r3, #4]
 8016d44:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8016d46:	1d3b      	adds	r3, r7, #4
 8016d48:	2200      	movs	r2, #0
 8016d4a:	601a      	str	r2, [r3, #0]
 8016d4c:	605a      	str	r2, [r3, #4]
 8016d4e:	609a      	str	r2, [r3, #8]
 8016d50:	60da      	str	r2, [r3, #12]
 8016d52:	611a      	str	r2, [r3, #16]
 8016d54:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8016d56:	4b82      	ldr	r3, [pc, #520]	; (8016f60 <_ZL12MX_ADC1_Initv+0x22c>)
 8016d58:	4a82      	ldr	r2, [pc, #520]	; (8016f64 <_ZL12MX_ADC1_Initv+0x230>)
 8016d5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8016d5c:	4b80      	ldr	r3, [pc, #512]	; (8016f60 <_ZL12MX_ADC1_Initv+0x22c>)
 8016d5e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8016d62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8016d64:	4b7e      	ldr	r3, [pc, #504]	; (8016f60 <_ZL12MX_ADC1_Initv+0x22c>)
 8016d66:	2200      	movs	r2, #0
 8016d68:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8016d6a:	4b7d      	ldr	r3, [pc, #500]	; (8016f60 <_ZL12MX_ADC1_Initv+0x22c>)
 8016d6c:	2200      	movs	r2, #0
 8016d6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8016d70:	4b7b      	ldr	r3, [pc, #492]	; (8016f60 <_ZL12MX_ADC1_Initv+0x22c>)
 8016d72:	2201      	movs	r2, #1
 8016d74:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8016d76:	4b7a      	ldr	r3, [pc, #488]	; (8016f60 <_ZL12MX_ADC1_Initv+0x22c>)
 8016d78:	2208      	movs	r2, #8
 8016d7a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8016d7c:	4b78      	ldr	r3, [pc, #480]	; (8016f60 <_ZL12MX_ADC1_Initv+0x22c>)
 8016d7e:	2201      	movs	r2, #1
 8016d80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8016d82:	4b77      	ldr	r3, [pc, #476]	; (8016f60 <_ZL12MX_ADC1_Initv+0x22c>)
 8016d84:	2200      	movs	r2, #0
 8016d86:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 8;
 8016d88:	4b75      	ldr	r3, [pc, #468]	; (8016f60 <_ZL12MX_ADC1_Initv+0x22c>)
 8016d8a:	2208      	movs	r2, #8
 8016d8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8016d8e:	4b74      	ldr	r3, [pc, #464]	; (8016f60 <_ZL12MX_ADC1_Initv+0x22c>)
 8016d90:	2200      	movs	r2, #0
 8016d92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8016d96:	4b72      	ldr	r3, [pc, #456]	; (8016f60 <_ZL12MX_ADC1_Initv+0x22c>)
 8016d98:	2200      	movs	r2, #0
 8016d9a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8016d9c:	4b70      	ldr	r3, [pc, #448]	; (8016f60 <_ZL12MX_ADC1_Initv+0x22c>)
 8016d9e:	2200      	movs	r2, #0
 8016da0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8016da2:	4b6f      	ldr	r3, [pc, #444]	; (8016f60 <_ZL12MX_ADC1_Initv+0x22c>)
 8016da4:	2201      	movs	r2, #1
 8016da6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8016daa:	4b6d      	ldr	r3, [pc, #436]	; (8016f60 <_ZL12MX_ADC1_Initv+0x22c>)
 8016dac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016db0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8016db2:	4b6b      	ldr	r3, [pc, #428]	; (8016f60 <_ZL12MX_ADC1_Initv+0x22c>)
 8016db4:	2201      	movs	r2, #1
 8016db6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_64;
 8016dba:	4b69      	ldr	r3, [pc, #420]	; (8016f60 <_ZL12MX_ADC1_Initv+0x22c>)
 8016dbc:	2214      	movs	r2, #20
 8016dbe:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 8016dc0:	4b67      	ldr	r3, [pc, #412]	; (8016f60 <_ZL12MX_ADC1_Initv+0x22c>)
 8016dc2:	22c0      	movs	r2, #192	; 0xc0
 8016dc4:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8016dc6:	4b66      	ldr	r3, [pc, #408]	; (8016f60 <_ZL12MX_ADC1_Initv+0x22c>)
 8016dc8:	2200      	movs	r2, #0
 8016dca:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8016dcc:	4b64      	ldr	r3, [pc, #400]	; (8016f60 <_ZL12MX_ADC1_Initv+0x22c>)
 8016dce:	2201      	movs	r2, #1
 8016dd0:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8016dd2:	4863      	ldr	r0, [pc, #396]	; (8016f60 <_ZL12MX_ADC1_Initv+0x22c>)
 8016dd4:	f002 f954 	bl	8019080 <HAL_ADC_Init>
 8016dd8:	4603      	mov	r3, r0
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	bf14      	ite	ne
 8016dde:	2301      	movne	r3, #1
 8016de0:	2300      	moveq	r3, #0
 8016de2:	b2db      	uxtb	r3, r3
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d001      	beq.n	8016dec <_ZL12MX_ADC1_Initv+0xb8>
  {
    Error_Handler();
 8016de8:	f000 ffdf 	bl	8017daa <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8016dec:	2300      	movs	r3, #0
 8016dee:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8016df0:	f107 031c 	add.w	r3, r7, #28
 8016df4:	4619      	mov	r1, r3
 8016df6:	485a      	ldr	r0, [pc, #360]	; (8016f60 <_ZL12MX_ADC1_Initv+0x22c>)
 8016df8:	f003 fad6 	bl	801a3a8 <HAL_ADCEx_MultiModeConfigChannel>
 8016dfc:	4603      	mov	r3, r0
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	bf14      	ite	ne
 8016e02:	2301      	movne	r3, #1
 8016e04:	2300      	moveq	r3, #0
 8016e06:	b2db      	uxtb	r3, r3
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d001      	beq.n	8016e10 <_ZL12MX_ADC1_Initv+0xdc>
  {
    Error_Handler();
 8016e0c:	f000 ffcd 	bl	8017daa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8016e10:	4b55      	ldr	r3, [pc, #340]	; (8016f68 <_ZL12MX_ADC1_Initv+0x234>)
 8016e12:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8016e14:	2306      	movs	r3, #6
 8016e16:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8016e18:	2301      	movs	r3, #1
 8016e1a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8016e1c:	237f      	movs	r3, #127	; 0x7f
 8016e1e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8016e20:	2304      	movs	r3, #4
 8016e22:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8016e24:	2300      	movs	r3, #0
 8016e26:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8016e28:	1d3b      	adds	r3, r7, #4
 8016e2a:	4619      	mov	r1, r3
 8016e2c:	484c      	ldr	r0, [pc, #304]	; (8016f60 <_ZL12MX_ADC1_Initv+0x22c>)
 8016e2e:	f002 fd5f 	bl	80198f0 <HAL_ADC_ConfigChannel>
 8016e32:	4603      	mov	r3, r0
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	bf14      	ite	ne
 8016e38:	2301      	movne	r3, #1
 8016e3a:	2300      	moveq	r3, #0
 8016e3c:	b2db      	uxtb	r3, r3
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d001      	beq.n	8016e46 <_ZL12MX_ADC1_Initv+0x112>
  {
    Error_Handler();
 8016e42:	f000 ffb2 	bl	8017daa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8016e46:	4b49      	ldr	r3, [pc, #292]	; (8016f6c <_ZL12MX_ADC1_Initv+0x238>)
 8016e48:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8016e4a:	230c      	movs	r3, #12
 8016e4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8016e4e:	1d3b      	adds	r3, r7, #4
 8016e50:	4619      	mov	r1, r3
 8016e52:	4843      	ldr	r0, [pc, #268]	; (8016f60 <_ZL12MX_ADC1_Initv+0x22c>)
 8016e54:	f002 fd4c 	bl	80198f0 <HAL_ADC_ConfigChannel>
 8016e58:	4603      	mov	r3, r0
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	bf14      	ite	ne
 8016e5e:	2301      	movne	r3, #1
 8016e60:	2300      	moveq	r3, #0
 8016e62:	b2db      	uxtb	r3, r3
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d001      	beq.n	8016e6c <_ZL12MX_ADC1_Initv+0x138>
  {
    Error_Handler();
 8016e68:	f000 ff9f 	bl	8017daa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8016e6c:	4b40      	ldr	r3, [pc, #256]	; (8016f70 <_ZL12MX_ADC1_Initv+0x23c>)
 8016e6e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8016e70:	2312      	movs	r3, #18
 8016e72:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8016e74:	1d3b      	adds	r3, r7, #4
 8016e76:	4619      	mov	r1, r3
 8016e78:	4839      	ldr	r0, [pc, #228]	; (8016f60 <_ZL12MX_ADC1_Initv+0x22c>)
 8016e7a:	f002 fd39 	bl	80198f0 <HAL_ADC_ConfigChannel>
 8016e7e:	4603      	mov	r3, r0
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	bf14      	ite	ne
 8016e84:	2301      	movne	r3, #1
 8016e86:	2300      	moveq	r3, #0
 8016e88:	b2db      	uxtb	r3, r3
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d001      	beq.n	8016e92 <_ZL12MX_ADC1_Initv+0x15e>
  {
    Error_Handler();
 8016e8e:	f000 ff8c 	bl	8017daa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8016e92:	4b38      	ldr	r3, [pc, #224]	; (8016f74 <_ZL12MX_ADC1_Initv+0x240>)
 8016e94:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8016e96:	2318      	movs	r3, #24
 8016e98:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8016e9a:	1d3b      	adds	r3, r7, #4
 8016e9c:	4619      	mov	r1, r3
 8016e9e:	4830      	ldr	r0, [pc, #192]	; (8016f60 <_ZL12MX_ADC1_Initv+0x22c>)
 8016ea0:	f002 fd26 	bl	80198f0 <HAL_ADC_ConfigChannel>
 8016ea4:	4603      	mov	r3, r0
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	bf14      	ite	ne
 8016eaa:	2301      	movne	r3, #1
 8016eac:	2300      	moveq	r3, #0
 8016eae:	b2db      	uxtb	r3, r3
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d001      	beq.n	8016eb8 <_ZL12MX_ADC1_Initv+0x184>
  {
    Error_Handler();
 8016eb4:	f000 ff79 	bl	8017daa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8016eb8:	4b2f      	ldr	r3, [pc, #188]	; (8016f78 <_ZL12MX_ADC1_Initv+0x244>)
 8016eba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8016ebc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016ec0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8016ec2:	1d3b      	adds	r3, r7, #4
 8016ec4:	4619      	mov	r1, r3
 8016ec6:	4826      	ldr	r0, [pc, #152]	; (8016f60 <_ZL12MX_ADC1_Initv+0x22c>)
 8016ec8:	f002 fd12 	bl	80198f0 <HAL_ADC_ConfigChannel>
 8016ecc:	4603      	mov	r3, r0
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	bf14      	ite	ne
 8016ed2:	2301      	movne	r3, #1
 8016ed4:	2300      	moveq	r3, #0
 8016ed6:	b2db      	uxtb	r3, r3
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d001      	beq.n	8016ee0 <_ZL12MX_ADC1_Initv+0x1ac>
  {
    Error_Handler();
 8016edc:	f000 ff65 	bl	8017daa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8016ee0:	4b26      	ldr	r3, [pc, #152]	; (8016f7c <_ZL12MX_ADC1_Initv+0x248>)
 8016ee2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8016ee4:	f44f 7383 	mov.w	r3, #262	; 0x106
 8016ee8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8016eea:	1d3b      	adds	r3, r7, #4
 8016eec:	4619      	mov	r1, r3
 8016eee:	481c      	ldr	r0, [pc, #112]	; (8016f60 <_ZL12MX_ADC1_Initv+0x22c>)
 8016ef0:	f002 fcfe 	bl	80198f0 <HAL_ADC_ConfigChannel>
 8016ef4:	4603      	mov	r3, r0
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	bf14      	ite	ne
 8016efa:	2301      	movne	r3, #1
 8016efc:	2300      	moveq	r3, #0
 8016efe:	b2db      	uxtb	r3, r3
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d001      	beq.n	8016f08 <_ZL12MX_ADC1_Initv+0x1d4>
  {
    Error_Handler();
 8016f04:	f000 ff51 	bl	8017daa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8016f08:	4b1d      	ldr	r3, [pc, #116]	; (8016f80 <_ZL12MX_ADC1_Initv+0x24c>)
 8016f0a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8016f0c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8016f10:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8016f12:	1d3b      	adds	r3, r7, #4
 8016f14:	4619      	mov	r1, r3
 8016f16:	4812      	ldr	r0, [pc, #72]	; (8016f60 <_ZL12MX_ADC1_Initv+0x22c>)
 8016f18:	f002 fcea 	bl	80198f0 <HAL_ADC_ConfigChannel>
 8016f1c:	4603      	mov	r3, r0
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	bf14      	ite	ne
 8016f22:	2301      	movne	r3, #1
 8016f24:	2300      	moveq	r3, #0
 8016f26:	b2db      	uxtb	r3, r3
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d001      	beq.n	8016f30 <_ZL12MX_ADC1_Initv+0x1fc>
  {
    Error_Handler();
 8016f2c:	f000 ff3d 	bl	8017daa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8016f30:	4b14      	ldr	r3, [pc, #80]	; (8016f84 <_ZL12MX_ADC1_Initv+0x250>)
 8016f32:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8016f34:	f44f 7389 	mov.w	r3, #274	; 0x112
 8016f38:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8016f3a:	1d3b      	adds	r3, r7, #4
 8016f3c:	4619      	mov	r1, r3
 8016f3e:	4808      	ldr	r0, [pc, #32]	; (8016f60 <_ZL12MX_ADC1_Initv+0x22c>)
 8016f40:	f002 fcd6 	bl	80198f0 <HAL_ADC_ConfigChannel>
 8016f44:	4603      	mov	r3, r0
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	bf14      	ite	ne
 8016f4a:	2301      	movne	r3, #1
 8016f4c:	2300      	moveq	r3, #0
 8016f4e:	b2db      	uxtb	r3, r3
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d001      	beq.n	8016f58 <_ZL12MX_ADC1_Initv+0x224>
  {
    Error_Handler();
 8016f54:	f000 ff29 	bl	8017daa <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8016f58:	bf00      	nop
 8016f5a:	3728      	adds	r7, #40	; 0x28
 8016f5c:	46bd      	mov	sp, r7
 8016f5e:	bd80      	pop	{r7, pc}
 8016f60:	200006e4 	.word	0x200006e4
 8016f64:	42028000 	.word	0x42028000
 8016f68:	04300002 	.word	0x04300002
 8016f6c:	08600004 	.word	0x08600004
 8016f70:	0c900008 	.word	0x0c900008
 8016f74:	1d500080 	.word	0x1d500080
 8016f78:	21800100 	.word	0x21800100
 8016f7c:	25b00200 	.word	0x25b00200
 8016f80:	32601000 	.word	0x32601000
 8016f84:	43210000 	.word	0x43210000

08016f88 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8016f88:	b580      	push	{r7, lr}
 8016f8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8016f8c:	4b22      	ldr	r3, [pc, #136]	; (8017018 <_ZL12MX_I2C1_Initv+0x90>)
 8016f8e:	4a23      	ldr	r2, [pc, #140]	; (801701c <_ZL12MX_I2C1_Initv+0x94>)
 8016f90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60514452;
 8016f92:	4b21      	ldr	r3, [pc, #132]	; (8017018 <_ZL12MX_I2C1_Initv+0x90>)
 8016f94:	4a22      	ldr	r2, [pc, #136]	; (8017020 <_ZL12MX_I2C1_Initv+0x98>)
 8016f96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8016f98:	4b1f      	ldr	r3, [pc, #124]	; (8017018 <_ZL12MX_I2C1_Initv+0x90>)
 8016f9a:	2200      	movs	r2, #0
 8016f9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8016f9e:	4b1e      	ldr	r3, [pc, #120]	; (8017018 <_ZL12MX_I2C1_Initv+0x90>)
 8016fa0:	2201      	movs	r2, #1
 8016fa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8016fa4:	4b1c      	ldr	r3, [pc, #112]	; (8017018 <_ZL12MX_I2C1_Initv+0x90>)
 8016fa6:	2200      	movs	r2, #0
 8016fa8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8016faa:	4b1b      	ldr	r3, [pc, #108]	; (8017018 <_ZL12MX_I2C1_Initv+0x90>)
 8016fac:	2200      	movs	r2, #0
 8016fae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8016fb0:	4b19      	ldr	r3, [pc, #100]	; (8017018 <_ZL12MX_I2C1_Initv+0x90>)
 8016fb2:	2200      	movs	r2, #0
 8016fb4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8016fb6:	4b18      	ldr	r3, [pc, #96]	; (8017018 <_ZL12MX_I2C1_Initv+0x90>)
 8016fb8:	2200      	movs	r2, #0
 8016fba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8016fbc:	4b16      	ldr	r3, [pc, #88]	; (8017018 <_ZL12MX_I2C1_Initv+0x90>)
 8016fbe:	2200      	movs	r2, #0
 8016fc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8016fc2:	4815      	ldr	r0, [pc, #84]	; (8017018 <_ZL12MX_I2C1_Initv+0x90>)
 8016fc4:	f004 f8d4 	bl	801b170 <HAL_I2C_Init>
 8016fc8:	4603      	mov	r3, r0
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	bf14      	ite	ne
 8016fce:	2301      	movne	r3, #1
 8016fd0:	2300      	moveq	r3, #0
 8016fd2:	b2db      	uxtb	r3, r3
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d001      	beq.n	8016fdc <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8016fd8:	f000 fee7 	bl	8017daa <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8016fdc:	2100      	movs	r1, #0
 8016fde:	480e      	ldr	r0, [pc, #56]	; (8017018 <_ZL12MX_I2C1_Initv+0x90>)
 8016fe0:	f004 fdd2 	bl	801bb88 <HAL_I2CEx_ConfigAnalogFilter>
 8016fe4:	4603      	mov	r3, r0
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	bf14      	ite	ne
 8016fea:	2301      	movne	r3, #1
 8016fec:	2300      	moveq	r3, #0
 8016fee:	b2db      	uxtb	r3, r3
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d001      	beq.n	8016ff8 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8016ff4:	f000 fed9 	bl	8017daa <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8016ff8:	2100      	movs	r1, #0
 8016ffa:	4807      	ldr	r0, [pc, #28]	; (8017018 <_ZL12MX_I2C1_Initv+0x90>)
 8016ffc:	f004 fe0f 	bl	801bc1e <HAL_I2CEx_ConfigDigitalFilter>
 8017000:	4603      	mov	r3, r0
 8017002:	2b00      	cmp	r3, #0
 8017004:	bf14      	ite	ne
 8017006:	2301      	movne	r3, #1
 8017008:	2300      	moveq	r3, #0
 801700a:	b2db      	uxtb	r3, r3
 801700c:	2b00      	cmp	r3, #0
 801700e:	d001      	beq.n	8017014 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8017010:	f000 fecb 	bl	8017daa <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8017014:	bf00      	nop
 8017016:	bd80      	pop	{r7, pc}
 8017018:	200007b4 	.word	0x200007b4
 801701c:	40005400 	.word	0x40005400
 8017020:	60514452 	.word	0x60514452

08017024 <_ZL14MX_ICACHE_Initv>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8017024:	b580      	push	{r7, lr}
 8017026:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8017028:	2000      	movs	r0, #0
 801702a:	f004 fe45 	bl	801bcb8 <HAL_ICACHE_ConfigAssociativityMode>
 801702e:	4603      	mov	r3, r0
 8017030:	2b00      	cmp	r3, #0
 8017032:	bf14      	ite	ne
 8017034:	2301      	movne	r3, #1
 8017036:	2300      	moveq	r3, #0
 8017038:	b2db      	uxtb	r3, r3
 801703a:	2b00      	cmp	r3, #0
 801703c:	d001      	beq.n	8017042 <_ZL14MX_ICACHE_Initv+0x1e>
  {
    Error_Handler();
 801703e:	f000 feb4 	bl	8017daa <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8017042:	f004 fe59 	bl	801bcf8 <HAL_ICACHE_Enable>
 8017046:	4603      	mov	r3, r0
 8017048:	2b00      	cmp	r3, #0
 801704a:	bf14      	ite	ne
 801704c:	2301      	movne	r3, #1
 801704e:	2300      	moveq	r3, #0
 8017050:	b2db      	uxtb	r3, r3
 8017052:	2b00      	cmp	r3, #0
 8017054:	d001      	beq.n	801705a <_ZL14MX_ICACHE_Initv+0x36>
  {
    Error_Handler();
 8017056:	f000 fea8 	bl	8017daa <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 801705a:	bf00      	nop
 801705c:	bd80      	pop	{r7, pc}
	...

08017060 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8017060:	b580      	push	{r7, lr}
 8017062:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8017064:	4b2c      	ldr	r3, [pc, #176]	; (8017118 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8017066:	4a2d      	ldr	r2, [pc, #180]	; (801711c <_ZL20MX_LPUART1_UART_Initv+0xbc>)
 8017068:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 801706a:	4b2b      	ldr	r3, [pc, #172]	; (8017118 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 801706c:	4a2c      	ldr	r2, [pc, #176]	; (8017120 <_ZL20MX_LPUART1_UART_Initv+0xc0>)
 801706e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8017070:	4b29      	ldr	r3, [pc, #164]	; (8017118 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8017072:	2200      	movs	r2, #0
 8017074:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8017076:	4b28      	ldr	r3, [pc, #160]	; (8017118 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8017078:	2200      	movs	r2, #0
 801707a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 801707c:	4b26      	ldr	r3, [pc, #152]	; (8017118 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 801707e:	2200      	movs	r2, #0
 8017080:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8017082:	4b25      	ldr	r3, [pc, #148]	; (8017118 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8017084:	220c      	movs	r2, #12
 8017086:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8017088:	4b23      	ldr	r3, [pc, #140]	; (8017118 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 801708a:	2200      	movs	r2, #0
 801708c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801708e:	4b22      	ldr	r3, [pc, #136]	; (8017118 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8017090:	2200      	movs	r2, #0
 8017092:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8017094:	4b20      	ldr	r3, [pc, #128]	; (8017118 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8017096:	2200      	movs	r2, #0
 8017098:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801709a:	4b1f      	ldr	r3, [pc, #124]	; (8017118 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 801709c:	2200      	movs	r2, #0
 801709e:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80170a0:	4b1d      	ldr	r3, [pc, #116]	; (8017118 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80170a2:	2200      	movs	r2, #0
 80170a4:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80170a6:	481c      	ldr	r0, [pc, #112]	; (8017118 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80170a8:	f009 fd3a 	bl	8020b20 <HAL_UART_Init>
 80170ac:	4603      	mov	r3, r0
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	bf14      	ite	ne
 80170b2:	2301      	movne	r3, #1
 80170b4:	2300      	moveq	r3, #0
 80170b6:	b2db      	uxtb	r3, r3
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d001      	beq.n	80170c0 <_ZL20MX_LPUART1_UART_Initv+0x60>
  {
    Error_Handler();
 80170bc:	f000 fe75 	bl	8017daa <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80170c0:	2100      	movs	r1, #0
 80170c2:	4815      	ldr	r0, [pc, #84]	; (8017118 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80170c4:	f00b fd8b 	bl	8022bde <HAL_UARTEx_SetTxFifoThreshold>
 80170c8:	4603      	mov	r3, r0
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	bf14      	ite	ne
 80170ce:	2301      	movne	r3, #1
 80170d0:	2300      	moveq	r3, #0
 80170d2:	b2db      	uxtb	r3, r3
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d001      	beq.n	80170dc <_ZL20MX_LPUART1_UART_Initv+0x7c>
  {
    Error_Handler();
 80170d8:	f000 fe67 	bl	8017daa <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80170dc:	2100      	movs	r1, #0
 80170de:	480e      	ldr	r0, [pc, #56]	; (8017118 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80170e0:	f00b fdbb 	bl	8022c5a <HAL_UARTEx_SetRxFifoThreshold>
 80170e4:	4603      	mov	r3, r0
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	bf14      	ite	ne
 80170ea:	2301      	movne	r3, #1
 80170ec:	2300      	moveq	r3, #0
 80170ee:	b2db      	uxtb	r3, r3
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d001      	beq.n	80170f8 <_ZL20MX_LPUART1_UART_Initv+0x98>
  {
    Error_Handler();
 80170f4:	f000 fe59 	bl	8017daa <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80170f8:	4807      	ldr	r0, [pc, #28]	; (8017118 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80170fa:	f00b fd37 	bl	8022b6c <HAL_UARTEx_DisableFifoMode>
 80170fe:	4603      	mov	r3, r0
 8017100:	2b00      	cmp	r3, #0
 8017102:	bf14      	ite	ne
 8017104:	2301      	movne	r3, #1
 8017106:	2300      	moveq	r3, #0
 8017108:	b2db      	uxtb	r3, r3
 801710a:	2b00      	cmp	r3, #0
 801710c:	d001      	beq.n	8017112 <_ZL20MX_LPUART1_UART_Initv+0xb2>
  {
    Error_Handler();
 801710e:	f000 fe4c 	bl	8017daa <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8017112:	bf00      	nop
 8017114:	bd80      	pop	{r7, pc}
 8017116:	bf00      	nop
 8017118:	20000808 	.word	0x20000808
 801711c:	40008000 	.word	0x40008000
 8017120:	00033324 	.word	0x00033324

08017124 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8017124:	b580      	push	{r7, lr}
 8017126:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8017128:	4b2c      	ldr	r3, [pc, #176]	; (80171dc <_ZL13MX_UART4_Initv+0xb8>)
 801712a:	4a2d      	ldr	r2, [pc, #180]	; (80171e0 <_ZL13MX_UART4_Initv+0xbc>)
 801712c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 801712e:	4b2b      	ldr	r3, [pc, #172]	; (80171dc <_ZL13MX_UART4_Initv+0xb8>)
 8017130:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8017134:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8017136:	4b29      	ldr	r3, [pc, #164]	; (80171dc <_ZL13MX_UART4_Initv+0xb8>)
 8017138:	2200      	movs	r2, #0
 801713a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 801713c:	4b27      	ldr	r3, [pc, #156]	; (80171dc <_ZL13MX_UART4_Initv+0xb8>)
 801713e:	2200      	movs	r2, #0
 8017140:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8017142:	4b26      	ldr	r3, [pc, #152]	; (80171dc <_ZL13MX_UART4_Initv+0xb8>)
 8017144:	2200      	movs	r2, #0
 8017146:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8017148:	4b24      	ldr	r3, [pc, #144]	; (80171dc <_ZL13MX_UART4_Initv+0xb8>)
 801714a:	2204      	movs	r2, #4
 801714c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801714e:	4b23      	ldr	r3, [pc, #140]	; (80171dc <_ZL13MX_UART4_Initv+0xb8>)
 8017150:	2200      	movs	r2, #0
 8017152:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8017154:	4b21      	ldr	r3, [pc, #132]	; (80171dc <_ZL13MX_UART4_Initv+0xb8>)
 8017156:	2200      	movs	r2, #0
 8017158:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801715a:	4b20      	ldr	r3, [pc, #128]	; (80171dc <_ZL13MX_UART4_Initv+0xb8>)
 801715c:	2200      	movs	r2, #0
 801715e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8017160:	4b1e      	ldr	r3, [pc, #120]	; (80171dc <_ZL13MX_UART4_Initv+0xb8>)
 8017162:	2200      	movs	r2, #0
 8017164:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8017166:	4b1d      	ldr	r3, [pc, #116]	; (80171dc <_ZL13MX_UART4_Initv+0xb8>)
 8017168:	2200      	movs	r2, #0
 801716a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 801716c:	481b      	ldr	r0, [pc, #108]	; (80171dc <_ZL13MX_UART4_Initv+0xb8>)
 801716e:	f009 fcd7 	bl	8020b20 <HAL_UART_Init>
 8017172:	4603      	mov	r3, r0
 8017174:	2b00      	cmp	r3, #0
 8017176:	bf14      	ite	ne
 8017178:	2301      	movne	r3, #1
 801717a:	2300      	moveq	r3, #0
 801717c:	b2db      	uxtb	r3, r3
 801717e:	2b00      	cmp	r3, #0
 8017180:	d001      	beq.n	8017186 <_ZL13MX_UART4_Initv+0x62>
  {
    Error_Handler();
 8017182:	f000 fe12 	bl	8017daa <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8017186:	2100      	movs	r1, #0
 8017188:	4814      	ldr	r0, [pc, #80]	; (80171dc <_ZL13MX_UART4_Initv+0xb8>)
 801718a:	f00b fd28 	bl	8022bde <HAL_UARTEx_SetTxFifoThreshold>
 801718e:	4603      	mov	r3, r0
 8017190:	2b00      	cmp	r3, #0
 8017192:	bf14      	ite	ne
 8017194:	2301      	movne	r3, #1
 8017196:	2300      	moveq	r3, #0
 8017198:	b2db      	uxtb	r3, r3
 801719a:	2b00      	cmp	r3, #0
 801719c:	d001      	beq.n	80171a2 <_ZL13MX_UART4_Initv+0x7e>
  {
    Error_Handler();
 801719e:	f000 fe04 	bl	8017daa <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80171a2:	2100      	movs	r1, #0
 80171a4:	480d      	ldr	r0, [pc, #52]	; (80171dc <_ZL13MX_UART4_Initv+0xb8>)
 80171a6:	f00b fd58 	bl	8022c5a <HAL_UARTEx_SetRxFifoThreshold>
 80171aa:	4603      	mov	r3, r0
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	bf14      	ite	ne
 80171b0:	2301      	movne	r3, #1
 80171b2:	2300      	moveq	r3, #0
 80171b4:	b2db      	uxtb	r3, r3
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d001      	beq.n	80171be <_ZL13MX_UART4_Initv+0x9a>
  {
    Error_Handler();
 80171ba:	f000 fdf6 	bl	8017daa <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80171be:	4807      	ldr	r0, [pc, #28]	; (80171dc <_ZL13MX_UART4_Initv+0xb8>)
 80171c0:	f00b fcd4 	bl	8022b6c <HAL_UARTEx_DisableFifoMode>
 80171c4:	4603      	mov	r3, r0
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	bf14      	ite	ne
 80171ca:	2301      	movne	r3, #1
 80171cc:	2300      	moveq	r3, #0
 80171ce:	b2db      	uxtb	r3, r3
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d001      	beq.n	80171d8 <_ZL13MX_UART4_Initv+0xb4>
  {
    Error_Handler();
 80171d4:	f000 fde9 	bl	8017daa <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80171d8:	bf00      	nop
 80171da:	bd80      	pop	{r7, pc}
 80171dc:	2000089c 	.word	0x2000089c
 80171e0:	40004c00 	.word	0x40004c00

080171e4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80171e4:	b580      	push	{r7, lr}
 80171e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80171e8:	4b2c      	ldr	r3, [pc, #176]	; (801729c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80171ea:	4a2d      	ldr	r2, [pc, #180]	; (80172a0 <_ZL19MX_USART2_UART_Initv+0xbc>)
 80171ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80171ee:	4b2b      	ldr	r3, [pc, #172]	; (801729c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80171f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80171f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80171f6:	4b29      	ldr	r3, [pc, #164]	; (801729c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80171f8:	2200      	movs	r2, #0
 80171fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80171fc:	4b27      	ldr	r3, [pc, #156]	; (801729c <_ZL19MX_USART2_UART_Initv+0xb8>)
 80171fe:	2200      	movs	r2, #0
 8017200:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8017202:	4b26      	ldr	r3, [pc, #152]	; (801729c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8017204:	2200      	movs	r2, #0
 8017206:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8017208:	4b24      	ldr	r3, [pc, #144]	; (801729c <_ZL19MX_USART2_UART_Initv+0xb8>)
 801720a:	2208      	movs	r2, #8
 801720c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801720e:	4b23      	ldr	r3, [pc, #140]	; (801729c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8017210:	2200      	movs	r2, #0
 8017212:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8017214:	4b21      	ldr	r3, [pc, #132]	; (801729c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8017216:	2200      	movs	r2, #0
 8017218:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801721a:	4b20      	ldr	r3, [pc, #128]	; (801729c <_ZL19MX_USART2_UART_Initv+0xb8>)
 801721c:	2200      	movs	r2, #0
 801721e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8017220:	4b1e      	ldr	r3, [pc, #120]	; (801729c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8017222:	2200      	movs	r2, #0
 8017224:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8017226:	4b1d      	ldr	r3, [pc, #116]	; (801729c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8017228:	2200      	movs	r2, #0
 801722a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 801722c:	481b      	ldr	r0, [pc, #108]	; (801729c <_ZL19MX_USART2_UART_Initv+0xb8>)
 801722e:	f009 fc77 	bl	8020b20 <HAL_UART_Init>
 8017232:	4603      	mov	r3, r0
 8017234:	2b00      	cmp	r3, #0
 8017236:	bf14      	ite	ne
 8017238:	2301      	movne	r3, #1
 801723a:	2300      	moveq	r3, #0
 801723c:	b2db      	uxtb	r3, r3
 801723e:	2b00      	cmp	r3, #0
 8017240:	d001      	beq.n	8017246 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8017242:	f000 fdb2 	bl	8017daa <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8017246:	2100      	movs	r1, #0
 8017248:	4814      	ldr	r0, [pc, #80]	; (801729c <_ZL19MX_USART2_UART_Initv+0xb8>)
 801724a:	f00b fcc8 	bl	8022bde <HAL_UARTEx_SetTxFifoThreshold>
 801724e:	4603      	mov	r3, r0
 8017250:	2b00      	cmp	r3, #0
 8017252:	bf14      	ite	ne
 8017254:	2301      	movne	r3, #1
 8017256:	2300      	moveq	r3, #0
 8017258:	b2db      	uxtb	r3, r3
 801725a:	2b00      	cmp	r3, #0
 801725c:	d001      	beq.n	8017262 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 801725e:	f000 fda4 	bl	8017daa <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8017262:	2100      	movs	r1, #0
 8017264:	480d      	ldr	r0, [pc, #52]	; (801729c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8017266:	f00b fcf8 	bl	8022c5a <HAL_UARTEx_SetRxFifoThreshold>
 801726a:	4603      	mov	r3, r0
 801726c:	2b00      	cmp	r3, #0
 801726e:	bf14      	ite	ne
 8017270:	2301      	movne	r3, #1
 8017272:	2300      	moveq	r3, #0
 8017274:	b2db      	uxtb	r3, r3
 8017276:	2b00      	cmp	r3, #0
 8017278:	d001      	beq.n	801727e <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 801727a:	f000 fd96 	bl	8017daa <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 801727e:	4807      	ldr	r0, [pc, #28]	; (801729c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8017280:	f00b fc74 	bl	8022b6c <HAL_UARTEx_DisableFifoMode>
 8017284:	4603      	mov	r3, r0
 8017286:	2b00      	cmp	r3, #0
 8017288:	bf14      	ite	ne
 801728a:	2301      	movne	r3, #1
 801728c:	2300      	moveq	r3, #0
 801728e:	b2db      	uxtb	r3, r3
 8017290:	2b00      	cmp	r3, #0
 8017292:	d001      	beq.n	8017298 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8017294:	f000 fd89 	bl	8017daa <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8017298:	bf00      	nop
 801729a:	bd80      	pop	{r7, pc}
 801729c:	20000930 	.word	0x20000930
 80172a0:	40004400 	.word	0x40004400

080172a4 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80172a4:	b580      	push	{r7, lr}
 80172a6:	b086      	sub	sp, #24
 80172a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80172aa:	463b      	mov	r3, r7
 80172ac:	2200      	movs	r2, #0
 80172ae:	601a      	str	r2, [r3, #0]
 80172b0:	605a      	str	r2, [r3, #4]
 80172b2:	609a      	str	r2, [r3, #8]
 80172b4:	60da      	str	r2, [r3, #12]
 80172b6:	611a      	str	r2, [r3, #16]
 80172b8:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80172ba:	4b22      	ldr	r3, [pc, #136]	; (8017344 <_ZL11MX_RTC_Initv+0xa0>)
 80172bc:	4a22      	ldr	r2, [pc, #136]	; (8017348 <_ZL11MX_RTC_Initv+0xa4>)
 80172be:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80172c0:	4b20      	ldr	r3, [pc, #128]	; (8017344 <_ZL11MX_RTC_Initv+0xa0>)
 80172c2:	2200      	movs	r2, #0
 80172c4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80172c6:	4b1f      	ldr	r3, [pc, #124]	; (8017344 <_ZL11MX_RTC_Initv+0xa0>)
 80172c8:	227f      	movs	r2, #127	; 0x7f
 80172ca:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80172cc:	4b1d      	ldr	r3, [pc, #116]	; (8017344 <_ZL11MX_RTC_Initv+0xa0>)
 80172ce:	22ff      	movs	r2, #255	; 0xff
 80172d0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80172d2:	4b1c      	ldr	r3, [pc, #112]	; (8017344 <_ZL11MX_RTC_Initv+0xa0>)
 80172d4:	2200      	movs	r2, #0
 80172d6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80172d8:	4b1a      	ldr	r3, [pc, #104]	; (8017344 <_ZL11MX_RTC_Initv+0xa0>)
 80172da:	2200      	movs	r2, #0
 80172dc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80172de:	4b19      	ldr	r3, [pc, #100]	; (8017344 <_ZL11MX_RTC_Initv+0xa0>)
 80172e0:	2200      	movs	r2, #0
 80172e2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80172e4:	4b17      	ldr	r3, [pc, #92]	; (8017344 <_ZL11MX_RTC_Initv+0xa0>)
 80172e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80172ea:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80172ec:	4b15      	ldr	r3, [pc, #84]	; (8017344 <_ZL11MX_RTC_Initv+0xa0>)
 80172ee:	2200      	movs	r2, #0
 80172f0:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80172f2:	4814      	ldr	r0, [pc, #80]	; (8017344 <_ZL11MX_RTC_Initv+0xa0>)
 80172f4:	f006 fbc4 	bl	801da80 <HAL_RTC_Init>
 80172f8:	4603      	mov	r3, r0
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	bf14      	ite	ne
 80172fe:	2301      	movne	r3, #1
 8017300:	2300      	moveq	r3, #0
 8017302:	b2db      	uxtb	r3, r3
 8017304:	2b00      	cmp	r3, #0
 8017306:	d001      	beq.n	801730c <_ZL11MX_RTC_Initv+0x68>
  {
    Error_Handler();
 8017308:	f000 fd4f 	bl	8017daa <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 801730c:	2300      	movs	r3, #0
 801730e:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8017310:	2300      	movs	r3, #0
 8017312:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8017314:	2300      	movs	r3, #0
 8017316:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8017318:	2300      	movs	r3, #0
 801731a:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 801731c:	463b      	mov	r3, r7
 801731e:	4619      	mov	r1, r3
 8017320:	4808      	ldr	r0, [pc, #32]	; (8017344 <_ZL11MX_RTC_Initv+0xa0>)
 8017322:	f006 fcbb 	bl	801dc9c <HAL_RTCEx_PrivilegeModeSet>
 8017326:	4603      	mov	r3, r0
 8017328:	2b00      	cmp	r3, #0
 801732a:	bf14      	ite	ne
 801732c:	2301      	movne	r3, #1
 801732e:	2300      	moveq	r3, #0
 8017330:	b2db      	uxtb	r3, r3
 8017332:	2b00      	cmp	r3, #0
 8017334:	d001      	beq.n	801733a <_ZL11MX_RTC_Initv+0x96>
  {
    Error_Handler();
 8017336:	f000 fd38 	bl	8017daa <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 801733a:	bf00      	nop
 801733c:	3718      	adds	r7, #24
 801733e:	46bd      	mov	sp, r7
 8017340:	bd80      	pop	{r7, pc}
 8017342:	bf00      	nop
 8017344:	200009c4 	.word	0x200009c4
 8017348:	40002800 	.word	0x40002800

0801734c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 801734c:	b580      	push	{r7, lr}
 801734e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8017350:	4b1d      	ldr	r3, [pc, #116]	; (80173c8 <_ZL12MX_SPI1_Initv+0x7c>)
 8017352:	4a1e      	ldr	r2, [pc, #120]	; (80173cc <_ZL12MX_SPI1_Initv+0x80>)
 8017354:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8017356:	4b1c      	ldr	r3, [pc, #112]	; (80173c8 <_ZL12MX_SPI1_Initv+0x7c>)
 8017358:	f44f 7282 	mov.w	r2, #260	; 0x104
 801735c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 801735e:	4b1a      	ldr	r3, [pc, #104]	; (80173c8 <_ZL12MX_SPI1_Initv+0x7c>)
 8017360:	2200      	movs	r2, #0
 8017362:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8017364:	4b18      	ldr	r3, [pc, #96]	; (80173c8 <_ZL12MX_SPI1_Initv+0x7c>)
 8017366:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 801736a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 801736c:	4b16      	ldr	r3, [pc, #88]	; (80173c8 <_ZL12MX_SPI1_Initv+0x7c>)
 801736e:	2200      	movs	r2, #0
 8017370:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8017372:	4b15      	ldr	r3, [pc, #84]	; (80173c8 <_ZL12MX_SPI1_Initv+0x7c>)
 8017374:	2200      	movs	r2, #0
 8017376:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8017378:	4b13      	ldr	r3, [pc, #76]	; (80173c8 <_ZL12MX_SPI1_Initv+0x7c>)
 801737a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801737e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8017380:	4b11      	ldr	r3, [pc, #68]	; (80173c8 <_ZL12MX_SPI1_Initv+0x7c>)
 8017382:	2228      	movs	r2, #40	; 0x28
 8017384:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8017386:	4b10      	ldr	r3, [pc, #64]	; (80173c8 <_ZL12MX_SPI1_Initv+0x7c>)
 8017388:	2200      	movs	r2, #0
 801738a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 801738c:	4b0e      	ldr	r3, [pc, #56]	; (80173c8 <_ZL12MX_SPI1_Initv+0x7c>)
 801738e:	2200      	movs	r2, #0
 8017390:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017392:	4b0d      	ldr	r3, [pc, #52]	; (80173c8 <_ZL12MX_SPI1_Initv+0x7c>)
 8017394:	2200      	movs	r2, #0
 8017396:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8017398:	4b0b      	ldr	r3, [pc, #44]	; (80173c8 <_ZL12MX_SPI1_Initv+0x7c>)
 801739a:	2207      	movs	r2, #7
 801739c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 801739e:	4b0a      	ldr	r3, [pc, #40]	; (80173c8 <_ZL12MX_SPI1_Initv+0x7c>)
 80173a0:	2200      	movs	r2, #0
 80173a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80173a4:	4b08      	ldr	r3, [pc, #32]	; (80173c8 <_ZL12MX_SPI1_Initv+0x7c>)
 80173a6:	2208      	movs	r2, #8
 80173a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80173aa:	4807      	ldr	r0, [pc, #28]	; (80173c8 <_ZL12MX_SPI1_Initv+0x7c>)
 80173ac:	f006 fca2 	bl	801dcf4 <HAL_SPI_Init>
 80173b0:	4603      	mov	r3, r0
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	bf14      	ite	ne
 80173b6:	2301      	movne	r3, #1
 80173b8:	2300      	moveq	r3, #0
 80173ba:	b2db      	uxtb	r3, r3
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d001      	beq.n	80173c4 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 80173c0:	f000 fcf3 	bl	8017daa <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80173c4:	bf00      	nop
 80173c6:	bd80      	pop	{r7, pc}
 80173c8:	200009ec 	.word	0x200009ec
 80173cc:	40013000 	.word	0x40013000

080173d0 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80173d0:	b580      	push	{r7, lr}
 80173d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80173d4:	4b1d      	ldr	r3, [pc, #116]	; (801744c <_ZL12MX_SPI2_Initv+0x7c>)
 80173d6:	4a1e      	ldr	r2, [pc, #120]	; (8017450 <_ZL12MX_SPI2_Initv+0x80>)
 80173d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80173da:	4b1c      	ldr	r3, [pc, #112]	; (801744c <_ZL12MX_SPI2_Initv+0x7c>)
 80173dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80173e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80173e2:	4b1a      	ldr	r3, [pc, #104]	; (801744c <_ZL12MX_SPI2_Initv+0x7c>)
 80173e4:	2200      	movs	r2, #0
 80173e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80173e8:	4b18      	ldr	r3, [pc, #96]	; (801744c <_ZL12MX_SPI2_Initv+0x7c>)
 80173ea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80173ee:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80173f0:	4b16      	ldr	r3, [pc, #88]	; (801744c <_ZL12MX_SPI2_Initv+0x7c>)
 80173f2:	2200      	movs	r2, #0
 80173f4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80173f6:	4b15      	ldr	r3, [pc, #84]	; (801744c <_ZL12MX_SPI2_Initv+0x7c>)
 80173f8:	2200      	movs	r2, #0
 80173fa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80173fc:	4b13      	ldr	r3, [pc, #76]	; (801744c <_ZL12MX_SPI2_Initv+0x7c>)
 80173fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017402:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8017404:	4b11      	ldr	r3, [pc, #68]	; (801744c <_ZL12MX_SPI2_Initv+0x7c>)
 8017406:	2218      	movs	r2, #24
 8017408:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 801740a:	4b10      	ldr	r3, [pc, #64]	; (801744c <_ZL12MX_SPI2_Initv+0x7c>)
 801740c:	2280      	movs	r2, #128	; 0x80
 801740e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8017410:	4b0e      	ldr	r3, [pc, #56]	; (801744c <_ZL12MX_SPI2_Initv+0x7c>)
 8017412:	2200      	movs	r2, #0
 8017414:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017416:	4b0d      	ldr	r3, [pc, #52]	; (801744c <_ZL12MX_SPI2_Initv+0x7c>)
 8017418:	2200      	movs	r2, #0
 801741a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 801741c:	4b0b      	ldr	r3, [pc, #44]	; (801744c <_ZL12MX_SPI2_Initv+0x7c>)
 801741e:	2207      	movs	r2, #7
 8017420:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8017422:	4b0a      	ldr	r3, [pc, #40]	; (801744c <_ZL12MX_SPI2_Initv+0x7c>)
 8017424:	2200      	movs	r2, #0
 8017426:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8017428:	4b08      	ldr	r3, [pc, #32]	; (801744c <_ZL12MX_SPI2_Initv+0x7c>)
 801742a:	2208      	movs	r2, #8
 801742c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 801742e:	4807      	ldr	r0, [pc, #28]	; (801744c <_ZL12MX_SPI2_Initv+0x7c>)
 8017430:	f006 fc60 	bl	801dcf4 <HAL_SPI_Init>
 8017434:	4603      	mov	r3, r0
 8017436:	2b00      	cmp	r3, #0
 8017438:	bf14      	ite	ne
 801743a:	2301      	movne	r3, #1
 801743c:	2300      	moveq	r3, #0
 801743e:	b2db      	uxtb	r3, r3
 8017440:	2b00      	cmp	r3, #0
 8017442:	d001      	beq.n	8017448 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 8017444:	f000 fcb1 	bl	8017daa <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8017448:	bf00      	nop
 801744a:	bd80      	pop	{r7, pc}
 801744c:	20000a50 	.word	0x20000a50
 8017450:	40003800 	.word	0x40003800

08017454 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8017454:	b580      	push	{r7, lr}
 8017456:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8017458:	4b1d      	ldr	r3, [pc, #116]	; (80174d0 <_ZL12MX_SPI3_Initv+0x7c>)
 801745a:	4a1e      	ldr	r2, [pc, #120]	; (80174d4 <_ZL12MX_SPI3_Initv+0x80>)
 801745c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 801745e:	4b1c      	ldr	r3, [pc, #112]	; (80174d0 <_ZL12MX_SPI3_Initv+0x7c>)
 8017460:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017464:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8017466:	4b1a      	ldr	r3, [pc, #104]	; (80174d0 <_ZL12MX_SPI3_Initv+0x7c>)
 8017468:	2200      	movs	r2, #0
 801746a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 801746c:	4b18      	ldr	r3, [pc, #96]	; (80174d0 <_ZL12MX_SPI3_Initv+0x7c>)
 801746e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8017472:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8017474:	4b16      	ldr	r3, [pc, #88]	; (80174d0 <_ZL12MX_SPI3_Initv+0x7c>)
 8017476:	2200      	movs	r2, #0
 8017478:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 801747a:	4b15      	ldr	r3, [pc, #84]	; (80174d0 <_ZL12MX_SPI3_Initv+0x7c>)
 801747c:	2200      	movs	r2, #0
 801747e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8017480:	4b13      	ldr	r3, [pc, #76]	; (80174d0 <_ZL12MX_SPI3_Initv+0x7c>)
 8017482:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017486:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8017488:	4b11      	ldr	r3, [pc, #68]	; (80174d0 <_ZL12MX_SPI3_Initv+0x7c>)
 801748a:	2218      	movs	r2, #24
 801748c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801748e:	4b10      	ldr	r3, [pc, #64]	; (80174d0 <_ZL12MX_SPI3_Initv+0x7c>)
 8017490:	2200      	movs	r2, #0
 8017492:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8017494:	4b0e      	ldr	r3, [pc, #56]	; (80174d0 <_ZL12MX_SPI3_Initv+0x7c>)
 8017496:	2200      	movs	r2, #0
 8017498:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801749a:	4b0d      	ldr	r3, [pc, #52]	; (80174d0 <_ZL12MX_SPI3_Initv+0x7c>)
 801749c:	2200      	movs	r2, #0
 801749e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80174a0:	4b0b      	ldr	r3, [pc, #44]	; (80174d0 <_ZL12MX_SPI3_Initv+0x7c>)
 80174a2:	2207      	movs	r2, #7
 80174a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80174a6:	4b0a      	ldr	r3, [pc, #40]	; (80174d0 <_ZL12MX_SPI3_Initv+0x7c>)
 80174a8:	2200      	movs	r2, #0
 80174aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80174ac:	4b08      	ldr	r3, [pc, #32]	; (80174d0 <_ZL12MX_SPI3_Initv+0x7c>)
 80174ae:	2208      	movs	r2, #8
 80174b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80174b2:	4807      	ldr	r0, [pc, #28]	; (80174d0 <_ZL12MX_SPI3_Initv+0x7c>)
 80174b4:	f006 fc1e 	bl	801dcf4 <HAL_SPI_Init>
 80174b8:	4603      	mov	r3, r0
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	bf14      	ite	ne
 80174be:	2301      	movne	r3, #1
 80174c0:	2300      	moveq	r3, #0
 80174c2:	b2db      	uxtb	r3, r3
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d001      	beq.n	80174cc <_ZL12MX_SPI3_Initv+0x78>
  {
    Error_Handler();
 80174c8:	f000 fc6f 	bl	8017daa <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80174cc:	bf00      	nop
 80174ce:	bd80      	pop	{r7, pc}
 80174d0:	20000ab4 	.word	0x20000ab4
 80174d4:	40003c00 	.word	0x40003c00

080174d8 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80174d8:	b580      	push	{r7, lr}
 80174da:	b08c      	sub	sp, #48	; 0x30
 80174dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80174de:	f107 0320 	add.w	r3, r7, #32
 80174e2:	2200      	movs	r2, #0
 80174e4:	601a      	str	r2, [r3, #0]
 80174e6:	605a      	str	r2, [r3, #4]
 80174e8:	609a      	str	r2, [r3, #8]
 80174ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80174ec:	f107 0314 	add.w	r3, r7, #20
 80174f0:	2200      	movs	r2, #0
 80174f2:	601a      	str	r2, [r3, #0]
 80174f4:	605a      	str	r2, [r3, #4]
 80174f6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80174f8:	1d3b      	adds	r3, r7, #4
 80174fa:	2200      	movs	r2, #0
 80174fc:	601a      	str	r2, [r3, #0]
 80174fe:	605a      	str	r2, [r3, #4]
 8017500:	609a      	str	r2, [r3, #8]
 8017502:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8017504:	4b43      	ldr	r3, [pc, #268]	; (8017614 <_ZL12MX_TIM1_Initv+0x13c>)
 8017506:	4a44      	ldr	r2, [pc, #272]	; (8017618 <_ZL12MX_TIM1_Initv+0x140>)
 8017508:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 110;
 801750a:	4b42      	ldr	r3, [pc, #264]	; (8017614 <_ZL12MX_TIM1_Initv+0x13c>)
 801750c:	226e      	movs	r2, #110	; 0x6e
 801750e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017510:	4b40      	ldr	r3, [pc, #256]	; (8017614 <_ZL12MX_TIM1_Initv+0x13c>)
 8017512:	2200      	movs	r2, #0
 8017514:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 8017516:	4b3f      	ldr	r3, [pc, #252]	; (8017614 <_ZL12MX_TIM1_Initv+0x13c>)
 8017518:	f24c 3250 	movw	r2, #50000	; 0xc350
 801751c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801751e:	4b3d      	ldr	r3, [pc, #244]	; (8017614 <_ZL12MX_TIM1_Initv+0x13c>)
 8017520:	2200      	movs	r2, #0
 8017522:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8017524:	4b3b      	ldr	r3, [pc, #236]	; (8017614 <_ZL12MX_TIM1_Initv+0x13c>)
 8017526:	2200      	movs	r2, #0
 8017528:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801752a:	4b3a      	ldr	r3, [pc, #232]	; (8017614 <_ZL12MX_TIM1_Initv+0x13c>)
 801752c:	2280      	movs	r2, #128	; 0x80
 801752e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8017530:	4838      	ldr	r0, [pc, #224]	; (8017614 <_ZL12MX_TIM1_Initv+0x13c>)
 8017532:	f007 faef 	bl	801eb14 <HAL_TIM_Base_Init>
 8017536:	4603      	mov	r3, r0
 8017538:	2b00      	cmp	r3, #0
 801753a:	bf14      	ite	ne
 801753c:	2301      	movne	r3, #1
 801753e:	2300      	moveq	r3, #0
 8017540:	b2db      	uxtb	r3, r3
 8017542:	2b00      	cmp	r3, #0
 8017544:	d001      	beq.n	801754a <_ZL12MX_TIM1_Initv+0x72>
  {
    Error_Handler();
 8017546:	f000 fc30 	bl	8017daa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801754a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801754e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8017550:	f107 0320 	add.w	r3, r7, #32
 8017554:	4619      	mov	r1, r3
 8017556:	482f      	ldr	r0, [pc, #188]	; (8017614 <_ZL12MX_TIM1_Initv+0x13c>)
 8017558:	f008 fb1a 	bl	801fb90 <HAL_TIM_ConfigClockSource>
 801755c:	4603      	mov	r3, r0
 801755e:	2b00      	cmp	r3, #0
 8017560:	bf14      	ite	ne
 8017562:	2301      	movne	r3, #1
 8017564:	2300      	moveq	r3, #0
 8017566:	b2db      	uxtb	r3, r3
 8017568:	2b00      	cmp	r3, #0
 801756a:	d001      	beq.n	8017570 <_ZL12MX_TIM1_Initv+0x98>
  {
    Error_Handler();
 801756c:	f000 fc1d 	bl	8017daa <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8017570:	4828      	ldr	r0, [pc, #160]	; (8017614 <_ZL12MX_TIM1_Initv+0x13c>)
 8017572:	f007 fd5d 	bl	801f030 <HAL_TIM_IC_Init>
 8017576:	4603      	mov	r3, r0
 8017578:	2b00      	cmp	r3, #0
 801757a:	bf14      	ite	ne
 801757c:	2301      	movne	r3, #1
 801757e:	2300      	moveq	r3, #0
 8017580:	b2db      	uxtb	r3, r3
 8017582:	2b00      	cmp	r3, #0
 8017584:	d001      	beq.n	801758a <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 8017586:	f000 fc10 	bl	8017daa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801758a:	2300      	movs	r3, #0
 801758c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 801758e:	2300      	movs	r3, #0
 8017590:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017592:	2300      	movs	r3, #0
 8017594:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8017596:	f107 0314 	add.w	r3, r7, #20
 801759a:	4619      	mov	r1, r3
 801759c:	481d      	ldr	r0, [pc, #116]	; (8017614 <_ZL12MX_TIM1_Initv+0x13c>)
 801759e:	f009 f979 	bl	8020894 <HAL_TIMEx_MasterConfigSynchronization>
 80175a2:	4603      	mov	r3, r0
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	bf14      	ite	ne
 80175a8:	2301      	movne	r3, #1
 80175aa:	2300      	moveq	r3, #0
 80175ac:	b2db      	uxtb	r3, r3
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d001      	beq.n	80175b6 <_ZL12MX_TIM1_Initv+0xde>
  {
    Error_Handler();
 80175b2:	f000 fbfa 	bl	8017daa <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80175b6:	2300      	movs	r3, #0
 80175b8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80175ba:	2301      	movs	r3, #1
 80175bc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80175be:	2300      	movs	r3, #0
 80175c0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80175c2:	2300      	movs	r3, #0
 80175c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80175c6:	1d3b      	adds	r3, r7, #4
 80175c8:	2208      	movs	r2, #8
 80175ca:	4619      	mov	r1, r3
 80175cc:	4811      	ldr	r0, [pc, #68]	; (8017614 <_ZL12MX_TIM1_Initv+0x13c>)
 80175ce:	f008 f92e 	bl	801f82e <HAL_TIM_IC_ConfigChannel>
 80175d2:	4603      	mov	r3, r0
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	bf14      	ite	ne
 80175d8:	2301      	movne	r3, #1
 80175da:	2300      	moveq	r3, #0
 80175dc:	b2db      	uxtb	r3, r3
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d001      	beq.n	80175e6 <_ZL12MX_TIM1_Initv+0x10e>
  {
    Error_Handler();
 80175e2:	f000 fbe2 	bl	8017daa <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80175e6:	2302      	movs	r3, #2
 80175e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80175ea:	1d3b      	adds	r3, r7, #4
 80175ec:	220c      	movs	r2, #12
 80175ee:	4619      	mov	r1, r3
 80175f0:	4808      	ldr	r0, [pc, #32]	; (8017614 <_ZL12MX_TIM1_Initv+0x13c>)
 80175f2:	f008 f91c 	bl	801f82e <HAL_TIM_IC_ConfigChannel>
 80175f6:	4603      	mov	r3, r0
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	bf14      	ite	ne
 80175fc:	2301      	movne	r3, #1
 80175fe:	2300      	moveq	r3, #0
 8017600:	b2db      	uxtb	r3, r3
 8017602:	2b00      	cmp	r3, #0
 8017604:	d001      	beq.n	801760a <_ZL12MX_TIM1_Initv+0x132>
  {
    Error_Handler();
 8017606:	f000 fbd0 	bl	8017daa <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 801760a:	bf00      	nop
 801760c:	3730      	adds	r7, #48	; 0x30
 801760e:	46bd      	mov	sp, r7
 8017610:	bd80      	pop	{r7, pc}
 8017612:	bf00      	nop
 8017614:	20000b18 	.word	0x20000b18
 8017618:	40012c00 	.word	0x40012c00

0801761c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 801761c:	b580      	push	{r7, lr}
 801761e:	b08c      	sub	sp, #48	; 0x30
 8017620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8017622:	f107 030c 	add.w	r3, r7, #12
 8017626:	2224      	movs	r2, #36	; 0x24
 8017628:	2100      	movs	r1, #0
 801762a:	4618      	mov	r0, r3
 801762c:	f011 fa66 	bl	8028afc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017630:	463b      	mov	r3, r7
 8017632:	2200      	movs	r2, #0
 8017634:	601a      	str	r2, [r3, #0]
 8017636:	605a      	str	r2, [r3, #4]
 8017638:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 801763a:	4b26      	ldr	r3, [pc, #152]	; (80176d4 <_ZL12MX_TIM3_Initv+0xb8>)
 801763c:	4a26      	ldr	r2, [pc, #152]	; (80176d8 <_ZL12MX_TIM3_Initv+0xbc>)
 801763e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8017640:	4b24      	ldr	r3, [pc, #144]	; (80176d4 <_ZL12MX_TIM3_Initv+0xb8>)
 8017642:	2200      	movs	r2, #0
 8017644:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017646:	4b23      	ldr	r3, [pc, #140]	; (80176d4 <_ZL12MX_TIM3_Initv+0xb8>)
 8017648:	2200      	movs	r2, #0
 801764a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 801764c:	4b21      	ldr	r3, [pc, #132]	; (80176d4 <_ZL12MX_TIM3_Initv+0xb8>)
 801764e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017652:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017654:	4b1f      	ldr	r3, [pc, #124]	; (80176d4 <_ZL12MX_TIM3_Initv+0xb8>)
 8017656:	2200      	movs	r2, #0
 8017658:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801765a:	4b1e      	ldr	r3, [pc, #120]	; (80176d4 <_ZL12MX_TIM3_Initv+0xb8>)
 801765c:	2200      	movs	r2, #0
 801765e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8017660:	2303      	movs	r3, #3
 8017662:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8017664:	2300      	movs	r3, #0
 8017666:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8017668:	2301      	movs	r3, #1
 801766a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 801766c:	2300      	movs	r3, #0
 801766e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8017670:	2300      	movs	r3, #0
 8017672:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8017674:	2300      	movs	r3, #0
 8017676:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8017678:	2301      	movs	r3, #1
 801767a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 801767c:	2300      	movs	r3, #0
 801767e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8017680:	2300      	movs	r3, #0
 8017682:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8017684:	f107 030c 	add.w	r3, r7, #12
 8017688:	4619      	mov	r1, r3
 801768a:	4812      	ldr	r0, [pc, #72]	; (80176d4 <_ZL12MX_TIM3_Initv+0xb8>)
 801768c:	f007 fe7c 	bl	801f388 <HAL_TIM_Encoder_Init>
 8017690:	4603      	mov	r3, r0
 8017692:	2b00      	cmp	r3, #0
 8017694:	bf14      	ite	ne
 8017696:	2301      	movne	r3, #1
 8017698:	2300      	moveq	r3, #0
 801769a:	b2db      	uxtb	r3, r3
 801769c:	2b00      	cmp	r3, #0
 801769e:	d001      	beq.n	80176a4 <_ZL12MX_TIM3_Initv+0x88>
  {
    Error_Handler();
 80176a0:	f000 fb83 	bl	8017daa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80176a4:	2300      	movs	r3, #0
 80176a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80176a8:	2300      	movs	r3, #0
 80176aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80176ac:	463b      	mov	r3, r7
 80176ae:	4619      	mov	r1, r3
 80176b0:	4808      	ldr	r0, [pc, #32]	; (80176d4 <_ZL12MX_TIM3_Initv+0xb8>)
 80176b2:	f009 f8ef 	bl	8020894 <HAL_TIMEx_MasterConfigSynchronization>
 80176b6:	4603      	mov	r3, r0
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	bf14      	ite	ne
 80176bc:	2301      	movne	r3, #1
 80176be:	2300      	moveq	r3, #0
 80176c0:	b2db      	uxtb	r3, r3
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d001      	beq.n	80176ca <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 80176c6:	f000 fb70 	bl	8017daa <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80176ca:	bf00      	nop
 80176cc:	3730      	adds	r7, #48	; 0x30
 80176ce:	46bd      	mov	sp, r7
 80176d0:	bd80      	pop	{r7, pc}
 80176d2:	bf00      	nop
 80176d4:	20000b64 	.word	0x20000b64
 80176d8:	40000400 	.word	0x40000400

080176dc <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80176dc:	b580      	push	{r7, lr}
 80176de:	b08e      	sub	sp, #56	; 0x38
 80176e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80176e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80176e6:	2200      	movs	r2, #0
 80176e8:	601a      	str	r2, [r3, #0]
 80176ea:	605a      	str	r2, [r3, #4]
 80176ec:	609a      	str	r2, [r3, #8]
 80176ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80176f0:	f107 031c 	add.w	r3, r7, #28
 80176f4:	2200      	movs	r2, #0
 80176f6:	601a      	str	r2, [r3, #0]
 80176f8:	605a      	str	r2, [r3, #4]
 80176fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80176fc:	463b      	mov	r3, r7
 80176fe:	2200      	movs	r2, #0
 8017700:	601a      	str	r2, [r3, #0]
 8017702:	605a      	str	r2, [r3, #4]
 8017704:	609a      	str	r2, [r3, #8]
 8017706:	60da      	str	r2, [r3, #12]
 8017708:	611a      	str	r2, [r3, #16]
 801770a:	615a      	str	r2, [r3, #20]
 801770c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 801770e:	4b41      	ldr	r3, [pc, #260]	; (8017814 <_ZL12MX_TIM5_Initv+0x138>)
 8017710:	4a41      	ldr	r2, [pc, #260]	; (8017818 <_ZL12MX_TIM5_Initv+0x13c>)
 8017712:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8017714:	4b3f      	ldr	r3, [pc, #252]	; (8017814 <_ZL12MX_TIM5_Initv+0x138>)
 8017716:	2200      	movs	r2, #0
 8017718:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 801771a:	4b3e      	ldr	r3, [pc, #248]	; (8017814 <_ZL12MX_TIM5_Initv+0x138>)
 801771c:	2220      	movs	r2, #32
 801771e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1834;
 8017720:	4b3c      	ldr	r3, [pc, #240]	; (8017814 <_ZL12MX_TIM5_Initv+0x138>)
 8017722:	f240 722a 	movw	r2, #1834	; 0x72a
 8017726:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017728:	4b3a      	ldr	r3, [pc, #232]	; (8017814 <_ZL12MX_TIM5_Initv+0x138>)
 801772a:	2200      	movs	r2, #0
 801772c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801772e:	4b39      	ldr	r3, [pc, #228]	; (8017814 <_ZL12MX_TIM5_Initv+0x138>)
 8017730:	2280      	movs	r2, #128	; 0x80
 8017732:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8017734:	4837      	ldr	r0, [pc, #220]	; (8017814 <_ZL12MX_TIM5_Initv+0x138>)
 8017736:	f007 f9ed 	bl	801eb14 <HAL_TIM_Base_Init>
 801773a:	4603      	mov	r3, r0
 801773c:	2b00      	cmp	r3, #0
 801773e:	bf14      	ite	ne
 8017740:	2301      	movne	r3, #1
 8017742:	2300      	moveq	r3, #0
 8017744:	b2db      	uxtb	r3, r3
 8017746:	2b00      	cmp	r3, #0
 8017748:	d001      	beq.n	801774e <_ZL12MX_TIM5_Initv+0x72>
  {
    Error_Handler();
 801774a:	f000 fb2e 	bl	8017daa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801774e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017752:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8017754:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017758:	4619      	mov	r1, r3
 801775a:	482e      	ldr	r0, [pc, #184]	; (8017814 <_ZL12MX_TIM5_Initv+0x138>)
 801775c:	f008 fa18 	bl	801fb90 <HAL_TIM_ConfigClockSource>
 8017760:	4603      	mov	r3, r0
 8017762:	2b00      	cmp	r3, #0
 8017764:	bf14      	ite	ne
 8017766:	2301      	movne	r3, #1
 8017768:	2300      	moveq	r3, #0
 801776a:	b2db      	uxtb	r3, r3
 801776c:	2b00      	cmp	r3, #0
 801776e:	d001      	beq.n	8017774 <_ZL12MX_TIM5_Initv+0x98>
  {
    Error_Handler();
 8017770:	f000 fb1b 	bl	8017daa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8017774:	4827      	ldr	r0, [pc, #156]	; (8017814 <_ZL12MX_TIM5_Initv+0x138>)
 8017776:	f007 fafd 	bl	801ed74 <HAL_TIM_PWM_Init>
 801777a:	4603      	mov	r3, r0
 801777c:	2b00      	cmp	r3, #0
 801777e:	bf14      	ite	ne
 8017780:	2301      	movne	r3, #1
 8017782:	2300      	moveq	r3, #0
 8017784:	b2db      	uxtb	r3, r3
 8017786:	2b00      	cmp	r3, #0
 8017788:	d001      	beq.n	801778e <_ZL12MX_TIM5_Initv+0xb2>
  {
    Error_Handler();
 801778a:	f000 fb0e 	bl	8017daa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801778e:	2300      	movs	r3, #0
 8017790:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017792:	2300      	movs	r3, #0
 8017794:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8017796:	f107 031c 	add.w	r3, r7, #28
 801779a:	4619      	mov	r1, r3
 801779c:	481d      	ldr	r0, [pc, #116]	; (8017814 <_ZL12MX_TIM5_Initv+0x138>)
 801779e:	f009 f879 	bl	8020894 <HAL_TIMEx_MasterConfigSynchronization>
 80177a2:	4603      	mov	r3, r0
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	bf14      	ite	ne
 80177a8:	2301      	movne	r3, #1
 80177aa:	2300      	moveq	r3, #0
 80177ac:	b2db      	uxtb	r3, r3
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	d001      	beq.n	80177b6 <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 80177b2:	f000 fafa 	bl	8017daa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80177b6:	2360      	movs	r3, #96	; 0x60
 80177b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80177ba:	2300      	movs	r3, #0
 80177bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80177be:	2300      	movs	r3, #0
 80177c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80177c2:	2300      	movs	r3, #0
 80177c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80177c6:	463b      	mov	r3, r7
 80177c8:	2200      	movs	r2, #0
 80177ca:	4619      	mov	r1, r3
 80177cc:	4811      	ldr	r0, [pc, #68]	; (8017814 <_ZL12MX_TIM5_Initv+0x138>)
 80177ce:	f008 f8cb 	bl	801f968 <HAL_TIM_PWM_ConfigChannel>
 80177d2:	4603      	mov	r3, r0
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	bf14      	ite	ne
 80177d8:	2301      	movne	r3, #1
 80177da:	2300      	moveq	r3, #0
 80177dc:	b2db      	uxtb	r3, r3
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d001      	beq.n	80177e6 <_ZL12MX_TIM5_Initv+0x10a>
  {
    Error_Handler();
 80177e2:	f000 fae2 	bl	8017daa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80177e6:	463b      	mov	r3, r7
 80177e8:	220c      	movs	r2, #12
 80177ea:	4619      	mov	r1, r3
 80177ec:	4809      	ldr	r0, [pc, #36]	; (8017814 <_ZL12MX_TIM5_Initv+0x138>)
 80177ee:	f008 f8bb 	bl	801f968 <HAL_TIM_PWM_ConfigChannel>
 80177f2:	4603      	mov	r3, r0
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	bf14      	ite	ne
 80177f8:	2301      	movne	r3, #1
 80177fa:	2300      	moveq	r3, #0
 80177fc:	b2db      	uxtb	r3, r3
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d001      	beq.n	8017806 <_ZL12MX_TIM5_Initv+0x12a>
  {
    Error_Handler();
 8017802:	f000 fad2 	bl	8017daa <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8017806:	4803      	ldr	r0, [pc, #12]	; (8017814 <_ZL12MX_TIM5_Initv+0x138>)
 8017808:	f000 ff2c 	bl	8018664 <HAL_TIM_MspPostInit>

}
 801780c:	bf00      	nop
 801780e:	3738      	adds	r7, #56	; 0x38
 8017810:	46bd      	mov	sp, r7
 8017812:	bd80      	pop	{r7, pc}
 8017814:	20000bb0 	.word	0x20000bb0
 8017818:	40000c00 	.word	0x40000c00

0801781c <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 801781c:	b580      	push	{r7, lr}
 801781e:	b084      	sub	sp, #16
 8017820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017822:	1d3b      	adds	r3, r7, #4
 8017824:	2200      	movs	r2, #0
 8017826:	601a      	str	r2, [r3, #0]
 8017828:	605a      	str	r2, [r3, #4]
 801782a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 801782c:	4b19      	ldr	r3, [pc, #100]	; (8017894 <_ZL12MX_TIM6_Initv+0x78>)
 801782e:	4a1a      	ldr	r2, [pc, #104]	; (8017898 <_ZL12MX_TIM6_Initv+0x7c>)
 8017830:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 110;
 8017832:	4b18      	ldr	r3, [pc, #96]	; (8017894 <_ZL12MX_TIM6_Initv+0x78>)
 8017834:	226e      	movs	r2, #110	; 0x6e
 8017836:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017838:	4b16      	ldr	r3, [pc, #88]	; (8017894 <_ZL12MX_TIM6_Initv+0x78>)
 801783a:	2200      	movs	r2, #0
 801783c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 801783e:	4b15      	ldr	r3, [pc, #84]	; (8017894 <_ZL12MX_TIM6_Initv+0x78>)
 8017840:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017844:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017846:	4b13      	ldr	r3, [pc, #76]	; (8017894 <_ZL12MX_TIM6_Initv+0x78>)
 8017848:	2200      	movs	r2, #0
 801784a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 801784c:	4811      	ldr	r0, [pc, #68]	; (8017894 <_ZL12MX_TIM6_Initv+0x78>)
 801784e:	f007 f961 	bl	801eb14 <HAL_TIM_Base_Init>
 8017852:	4603      	mov	r3, r0
 8017854:	2b00      	cmp	r3, #0
 8017856:	bf14      	ite	ne
 8017858:	2301      	movne	r3, #1
 801785a:	2300      	moveq	r3, #0
 801785c:	b2db      	uxtb	r3, r3
 801785e:	2b00      	cmp	r3, #0
 8017860:	d001      	beq.n	8017866 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8017862:	f000 faa2 	bl	8017daa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017866:	2300      	movs	r3, #0
 8017868:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801786a:	2300      	movs	r3, #0
 801786c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 801786e:	1d3b      	adds	r3, r7, #4
 8017870:	4619      	mov	r1, r3
 8017872:	4808      	ldr	r0, [pc, #32]	; (8017894 <_ZL12MX_TIM6_Initv+0x78>)
 8017874:	f009 f80e 	bl	8020894 <HAL_TIMEx_MasterConfigSynchronization>
 8017878:	4603      	mov	r3, r0
 801787a:	2b00      	cmp	r3, #0
 801787c:	bf14      	ite	ne
 801787e:	2301      	movne	r3, #1
 8017880:	2300      	moveq	r3, #0
 8017882:	b2db      	uxtb	r3, r3
 8017884:	2b00      	cmp	r3, #0
 8017886:	d001      	beq.n	801788c <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8017888:	f000 fa8f 	bl	8017daa <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 801788c:	bf00      	nop
 801788e:	3710      	adds	r7, #16
 8017890:	46bd      	mov	sp, r7
 8017892:	bd80      	pop	{r7, pc}
 8017894:	20000bfc 	.word	0x20000bfc
 8017898:	40001000 	.word	0x40001000

0801789c <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 801789c:	b580      	push	{r7, lr}
 801789e:	b098      	sub	sp, #96	; 0x60
 80178a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80178a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80178a6:	2200      	movs	r2, #0
 80178a8:	601a      	str	r2, [r3, #0]
 80178aa:	605a      	str	r2, [r3, #4]
 80178ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80178ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80178b2:	2200      	movs	r2, #0
 80178b4:	601a      	str	r2, [r3, #0]
 80178b6:	605a      	str	r2, [r3, #4]
 80178b8:	609a      	str	r2, [r3, #8]
 80178ba:	60da      	str	r2, [r3, #12]
 80178bc:	611a      	str	r2, [r3, #16]
 80178be:	615a      	str	r2, [r3, #20]
 80178c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80178c2:	1d3b      	adds	r3, r7, #4
 80178c4:	2234      	movs	r2, #52	; 0x34
 80178c6:	2100      	movs	r1, #0
 80178c8:	4618      	mov	r0, r3
 80178ca:	f011 f917 	bl	8028afc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80178ce:	4b45      	ldr	r3, [pc, #276]	; (80179e4 <_ZL12MX_TIM8_Initv+0x148>)
 80178d0:	4a45      	ldr	r2, [pc, #276]	; (80179e8 <_ZL12MX_TIM8_Initv+0x14c>)
 80178d2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 110;
 80178d4:	4b43      	ldr	r3, [pc, #268]	; (80179e4 <_ZL12MX_TIM8_Initv+0x148>)
 80178d6:	226e      	movs	r2, #110	; 0x6e
 80178d8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80178da:	4b42      	ldr	r3, [pc, #264]	; (80179e4 <_ZL12MX_TIM8_Initv+0x148>)
 80178dc:	2200      	movs	r2, #0
 80178de:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = PWM_PERIOD;
 80178e0:	4b40      	ldr	r3, [pc, #256]	; (80179e4 <_ZL12MX_TIM8_Initv+0x148>)
 80178e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80178e6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80178e8:	4b3e      	ldr	r3, [pc, #248]	; (80179e4 <_ZL12MX_TIM8_Initv+0x148>)
 80178ea:	2200      	movs	r2, #0
 80178ec:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80178ee:	4b3d      	ldr	r3, [pc, #244]	; (80179e4 <_ZL12MX_TIM8_Initv+0x148>)
 80178f0:	2200      	movs	r2, #0
 80178f2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80178f4:	4b3b      	ldr	r3, [pc, #236]	; (80179e4 <_ZL12MX_TIM8_Initv+0x148>)
 80178f6:	2200      	movs	r2, #0
 80178f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80178fa:	483a      	ldr	r0, [pc, #232]	; (80179e4 <_ZL12MX_TIM8_Initv+0x148>)
 80178fc:	f007 fa3a 	bl	801ed74 <HAL_TIM_PWM_Init>
 8017900:	4603      	mov	r3, r0
 8017902:	2b00      	cmp	r3, #0
 8017904:	bf14      	ite	ne
 8017906:	2301      	movne	r3, #1
 8017908:	2300      	moveq	r3, #0
 801790a:	b2db      	uxtb	r3, r3
 801790c:	2b00      	cmp	r3, #0
 801790e:	d001      	beq.n	8017914 <_ZL12MX_TIM8_Initv+0x78>
  {
    Error_Handler();
 8017910:	f000 fa4b 	bl	8017daa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017914:	2300      	movs	r3, #0
 8017916:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8017918:	2300      	movs	r3, #0
 801791a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801791c:	2300      	movs	r3, #0
 801791e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8017920:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8017924:	4619      	mov	r1, r3
 8017926:	482f      	ldr	r0, [pc, #188]	; (80179e4 <_ZL12MX_TIM8_Initv+0x148>)
 8017928:	f008 ffb4 	bl	8020894 <HAL_TIMEx_MasterConfigSynchronization>
 801792c:	4603      	mov	r3, r0
 801792e:	2b00      	cmp	r3, #0
 8017930:	bf14      	ite	ne
 8017932:	2301      	movne	r3, #1
 8017934:	2300      	moveq	r3, #0
 8017936:	b2db      	uxtb	r3, r3
 8017938:	2b00      	cmp	r3, #0
 801793a:	d001      	beq.n	8017940 <_ZL12MX_TIM8_Initv+0xa4>
  {
    Error_Handler();
 801793c:	f000 fa35 	bl	8017daa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8017940:	2360      	movs	r3, #96	; 0x60
 8017942:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8017944:	2300      	movs	r3, #0
 8017946:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8017948:	2300      	movs	r3, #0
 801794a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 801794c:	2300      	movs	r3, #0
 801794e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8017950:	2300      	movs	r3, #0
 8017952:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8017954:	2300      	movs	r3, #0
 8017956:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8017958:	2300      	movs	r3, #0
 801795a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801795c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017960:	2200      	movs	r2, #0
 8017962:	4619      	mov	r1, r3
 8017964:	481f      	ldr	r0, [pc, #124]	; (80179e4 <_ZL12MX_TIM8_Initv+0x148>)
 8017966:	f007 ffff 	bl	801f968 <HAL_TIM_PWM_ConfigChannel>
 801796a:	4603      	mov	r3, r0
 801796c:	2b00      	cmp	r3, #0
 801796e:	bf14      	ite	ne
 8017970:	2301      	movne	r3, #1
 8017972:	2300      	moveq	r3, #0
 8017974:	b2db      	uxtb	r3, r3
 8017976:	2b00      	cmp	r3, #0
 8017978:	d001      	beq.n	801797e <_ZL12MX_TIM8_Initv+0xe2>
  {
    Error_Handler();
 801797a:	f000 fa16 	bl	8017daa <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801797e:	2300      	movs	r3, #0
 8017980:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8017982:	2300      	movs	r3, #0
 8017984:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8017986:	2300      	movs	r3, #0
 8017988:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 801798a:	2300      	movs	r3, #0
 801798c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 801798e:	2300      	movs	r3, #0
 8017990:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8017992:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8017996:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8017998:	2300      	movs	r3, #0
 801799a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 801799c:	2300      	movs	r3, #0
 801799e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80179a0:	2300      	movs	r3, #0
 80179a2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80179a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80179a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80179aa:	2300      	movs	r3, #0
 80179ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80179ae:	2300      	movs	r3, #0
 80179b0:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80179b2:	2300      	movs	r3, #0
 80179b4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80179b6:	1d3b      	adds	r3, r7, #4
 80179b8:	4619      	mov	r1, r3
 80179ba:	480a      	ldr	r0, [pc, #40]	; (80179e4 <_ZL12MX_TIM8_Initv+0x148>)
 80179bc:	f008 fff2 	bl	80209a4 <HAL_TIMEx_ConfigBreakDeadTime>
 80179c0:	4603      	mov	r3, r0
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	bf14      	ite	ne
 80179c6:	2301      	movne	r3, #1
 80179c8:	2300      	moveq	r3, #0
 80179ca:	b2db      	uxtb	r3, r3
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d001      	beq.n	80179d4 <_ZL12MX_TIM8_Initv+0x138>
  {
    Error_Handler();
 80179d0:	f000 f9eb 	bl	8017daa <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80179d4:	4803      	ldr	r0, [pc, #12]	; (80179e4 <_ZL12MX_TIM8_Initv+0x148>)
 80179d6:	f000 fe45 	bl	8018664 <HAL_TIM_MspPostInit>

}
 80179da:	bf00      	nop
 80179dc:	3760      	adds	r7, #96	; 0x60
 80179de:	46bd      	mov	sp, r7
 80179e0:	bd80      	pop	{r7, pc}
 80179e2:	bf00      	nop
 80179e4:	20000c48 	.word	0x20000c48
 80179e8:	40013400 	.word	0x40013400

080179ec <_ZL13MX_UCPD1_Initv>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 80179ec:	b580      	push	{r7, lr}
 80179ee:	b086      	sub	sp, #24
 80179f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80179f2:	463b      	mov	r3, r7
 80179f4:	2200      	movs	r2, #0
 80179f6:	601a      	str	r2, [r3, #0]
 80179f8:	605a      	str	r2, [r3, #4]
 80179fa:	609a      	str	r2, [r3, #8]
 80179fc:	60da      	str	r2, [r3, #12]
 80179fe:	611a      	str	r2, [r3, #16]
 8017a00:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8017a02:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8017a06:	f7ff f8a5 	bl	8016b54 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8017a0a:	2002      	movs	r0, #2
 8017a0c:	f7ff f88a 	bl	8016b24 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8017a10:	2001      	movs	r0, #1
 8017a12:	f7ff f887 	bl	8016b24 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8017a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017a1a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8017a1c:	2303      	movs	r3, #3
 8017a1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8017a20:	2300      	movs	r3, #0
 8017a22:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017a24:	463b      	mov	r3, r7
 8017a26:	4619      	mov	r1, r3
 8017a28:	4809      	ldr	r0, [pc, #36]	; (8017a50 <_ZL13MX_UCPD1_Initv+0x64>)
 8017a2a:	f00b faee 	bl	802300a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8017a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017a32:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8017a34:	2303      	movs	r3, #3
 8017a36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8017a38:	2300      	movs	r3, #0
 8017a3a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017a3c:	463b      	mov	r3, r7
 8017a3e:	4619      	mov	r1, r3
 8017a40:	4804      	ldr	r0, [pc, #16]	; (8017a54 <_ZL13MX_UCPD1_Initv+0x68>)
 8017a42:	f00b fae2 	bl	802300a <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8017a46:	bf00      	nop
 8017a48:	3718      	adds	r7, #24
 8017a4a:	46bd      	mov	sp, r7
 8017a4c:	bd80      	pop	{r7, pc}
 8017a4e:	bf00      	nop
 8017a50:	42020400 	.word	0x42020400
 8017a54:	42020000 	.word	0x42020000

08017a58 <_ZL15MX_USB_PCD_Initv>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8017a58:	b580      	push	{r7, lr}
 8017a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8017a5c:	4b13      	ldr	r3, [pc, #76]	; (8017aac <_ZL15MX_USB_PCD_Initv+0x54>)
 8017a5e:	4a14      	ldr	r2, [pc, #80]	; (8017ab0 <_ZL15MX_USB_PCD_Initv+0x58>)
 8017a60:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8017a62:	4b12      	ldr	r3, [pc, #72]	; (8017aac <_ZL15MX_USB_PCD_Initv+0x54>)
 8017a64:	2208      	movs	r2, #8
 8017a66:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8017a68:	4b10      	ldr	r3, [pc, #64]	; (8017aac <_ZL15MX_USB_PCD_Initv+0x54>)
 8017a6a:	2202      	movs	r2, #2
 8017a6c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017a6e:	4b0f      	ldr	r3, [pc, #60]	; (8017aac <_ZL15MX_USB_PCD_Initv+0x54>)
 8017a70:	2202      	movs	r2, #2
 8017a72:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8017a74:	4b0d      	ldr	r3, [pc, #52]	; (8017aac <_ZL15MX_USB_PCD_Initv+0x54>)
 8017a76:	2200      	movs	r2, #0
 8017a78:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8017a7a:	4b0c      	ldr	r3, [pc, #48]	; (8017aac <_ZL15MX_USB_PCD_Initv+0x54>)
 8017a7c:	2200      	movs	r2, #0
 8017a7e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8017a80:	4b0a      	ldr	r3, [pc, #40]	; (8017aac <_ZL15MX_USB_PCD_Initv+0x54>)
 8017a82:	2200      	movs	r2, #0
 8017a84:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8017a86:	4b09      	ldr	r3, [pc, #36]	; (8017aac <_ZL15MX_USB_PCD_Initv+0x54>)
 8017a88:	2200      	movs	r2, #0
 8017a8a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8017a8c:	4807      	ldr	r0, [pc, #28]	; (8017aac <_ZL15MX_USB_PCD_Initv+0x54>)
 8017a8e:	f004 f943 	bl	801bd18 <HAL_PCD_Init>
 8017a92:	4603      	mov	r3, r0
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	bf14      	ite	ne
 8017a98:	2301      	movne	r3, #1
 8017a9a:	2300      	moveq	r3, #0
 8017a9c:	b2db      	uxtb	r3, r3
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d001      	beq.n	8017aa6 <_ZL15MX_USB_PCD_Initv+0x4e>
  {
    Error_Handler();
 8017aa2:	f000 f982 	bl	8017daa <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8017aa6:	bf00      	nop
 8017aa8:	bd80      	pop	{r7, pc}
 8017aaa:	bf00      	nop
 8017aac:	20000c94 	.word	0x20000c94
 8017ab0:	4000d400 	.word	0x4000d400

08017ab4 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8017ab4:	b580      	push	{r7, lr}
 8017ab6:	b082      	sub	sp, #8
 8017ab8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8017aba:	4b12      	ldr	r3, [pc, #72]	; (8017b04 <_ZL11MX_DMA_Initv+0x50>)
 8017abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017abe:	4a11      	ldr	r2, [pc, #68]	; (8017b04 <_ZL11MX_DMA_Initv+0x50>)
 8017ac0:	f043 0304 	orr.w	r3, r3, #4
 8017ac4:	6493      	str	r3, [r2, #72]	; 0x48
 8017ac6:	4b0f      	ldr	r3, [pc, #60]	; (8017b04 <_ZL11MX_DMA_Initv+0x50>)
 8017ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017aca:	f003 0304 	and.w	r3, r3, #4
 8017ace:	607b      	str	r3, [r7, #4]
 8017ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8017ad2:	4b0c      	ldr	r3, [pc, #48]	; (8017b04 <_ZL11MX_DMA_Initv+0x50>)
 8017ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017ad6:	4a0b      	ldr	r2, [pc, #44]	; (8017b04 <_ZL11MX_DMA_Initv+0x50>)
 8017ad8:	f043 0301 	orr.w	r3, r3, #1
 8017adc:	6493      	str	r3, [r2, #72]	; 0x48
 8017ade:	4b09      	ldr	r3, [pc, #36]	; (8017b04 <_ZL11MX_DMA_Initv+0x50>)
 8017ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017ae2:	f003 0301 	and.w	r3, r3, #1
 8017ae6:	603b      	str	r3, [r7, #0]
 8017ae8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8017aea:	2200      	movs	r2, #0
 8017aec:	2105      	movs	r1, #5
 8017aee:	201d      	movs	r0, #29
 8017af0:	f002 fdb6 	bl	801a660 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8017af4:	201d      	movs	r0, #29
 8017af6:	f002 fdcd 	bl	801a694 <HAL_NVIC_EnableIRQ>

}
 8017afa:	bf00      	nop
 8017afc:	3708      	adds	r7, #8
 8017afe:	46bd      	mov	sp, r7
 8017b00:	bd80      	pop	{r7, pc}
 8017b02:	bf00      	nop
 8017b04:	40021000 	.word	0x40021000

08017b08 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8017b08:	b580      	push	{r7, lr}
 8017b0a:	b08c      	sub	sp, #48	; 0x30
 8017b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017b0e:	f107 031c 	add.w	r3, r7, #28
 8017b12:	2200      	movs	r2, #0
 8017b14:	601a      	str	r2, [r3, #0]
 8017b16:	605a      	str	r2, [r3, #4]
 8017b18:	609a      	str	r2, [r3, #8]
 8017b1a:	60da      	str	r2, [r3, #12]
 8017b1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8017b1e:	4b8b      	ldr	r3, [pc, #556]	; (8017d4c <_ZL12MX_GPIO_Initv+0x244>)
 8017b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b22:	4a8a      	ldr	r2, [pc, #552]	; (8017d4c <_ZL12MX_GPIO_Initv+0x244>)
 8017b24:	f043 0310 	orr.w	r3, r3, #16
 8017b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017b2a:	4b88      	ldr	r3, [pc, #544]	; (8017d4c <_ZL12MX_GPIO_Initv+0x244>)
 8017b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b2e:	f003 0310 	and.w	r3, r3, #16
 8017b32:	61bb      	str	r3, [r7, #24]
 8017b34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8017b36:	4b85      	ldr	r3, [pc, #532]	; (8017d4c <_ZL12MX_GPIO_Initv+0x244>)
 8017b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b3a:	4a84      	ldr	r2, [pc, #528]	; (8017d4c <_ZL12MX_GPIO_Initv+0x244>)
 8017b3c:	f043 0304 	orr.w	r3, r3, #4
 8017b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017b42:	4b82      	ldr	r3, [pc, #520]	; (8017d4c <_ZL12MX_GPIO_Initv+0x244>)
 8017b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b46:	f003 0304 	and.w	r3, r3, #4
 8017b4a:	617b      	str	r3, [r7, #20]
 8017b4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8017b4e:	4b7f      	ldr	r3, [pc, #508]	; (8017d4c <_ZL12MX_GPIO_Initv+0x244>)
 8017b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b52:	4a7e      	ldr	r2, [pc, #504]	; (8017d4c <_ZL12MX_GPIO_Initv+0x244>)
 8017b54:	f043 0320 	orr.w	r3, r3, #32
 8017b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017b5a:	4b7c      	ldr	r3, [pc, #496]	; (8017d4c <_ZL12MX_GPIO_Initv+0x244>)
 8017b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b5e:	f003 0320 	and.w	r3, r3, #32
 8017b62:	613b      	str	r3, [r7, #16]
 8017b64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8017b66:	4b79      	ldr	r3, [pc, #484]	; (8017d4c <_ZL12MX_GPIO_Initv+0x244>)
 8017b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b6a:	4a78      	ldr	r2, [pc, #480]	; (8017d4c <_ZL12MX_GPIO_Initv+0x244>)
 8017b6c:	f043 0301 	orr.w	r3, r3, #1
 8017b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017b72:	4b76      	ldr	r3, [pc, #472]	; (8017d4c <_ZL12MX_GPIO_Initv+0x244>)
 8017b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b76:	f003 0301 	and.w	r3, r3, #1
 8017b7a:	60fb      	str	r3, [r7, #12]
 8017b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8017b7e:	4b73      	ldr	r3, [pc, #460]	; (8017d4c <_ZL12MX_GPIO_Initv+0x244>)
 8017b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b82:	4a72      	ldr	r2, [pc, #456]	; (8017d4c <_ZL12MX_GPIO_Initv+0x244>)
 8017b84:	f043 0302 	orr.w	r3, r3, #2
 8017b88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017b8a:	4b70      	ldr	r3, [pc, #448]	; (8017d4c <_ZL12MX_GPIO_Initv+0x244>)
 8017b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b8e:	f003 0302 	and.w	r3, r3, #2
 8017b92:	60bb      	str	r3, [r7, #8]
 8017b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8017b96:	4b6d      	ldr	r3, [pc, #436]	; (8017d4c <_ZL12MX_GPIO_Initv+0x244>)
 8017b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b9a:	4a6c      	ldr	r2, [pc, #432]	; (8017d4c <_ZL12MX_GPIO_Initv+0x244>)
 8017b9c:	f043 0308 	orr.w	r3, r3, #8
 8017ba0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017ba2:	4b6a      	ldr	r3, [pc, #424]	; (8017d4c <_ZL12MX_GPIO_Initv+0x244>)
 8017ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017ba6:	f003 0308 	and.w	r3, r3, #8
 8017baa:	607b      	str	r3, [r7, #4]
 8017bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8017bae:	4b67      	ldr	r3, [pc, #412]	; (8017d4c <_ZL12MX_GPIO_Initv+0x244>)
 8017bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017bb2:	4a66      	ldr	r2, [pc, #408]	; (8017d4c <_ZL12MX_GPIO_Initv+0x244>)
 8017bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017bb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017bba:	4b64      	ldr	r3, [pc, #400]	; (8017d4c <_ZL12MX_GPIO_Initv+0x244>)
 8017bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017bc2:	603b      	str	r3, [r7, #0]
 8017bc4:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8017bc6:	f004 fa25 	bl	801c014 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DRIVE_ENABLE_Pin|MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin, GPIO_PIN_RESET);
 8017bca:	2200      	movs	r2, #0
 8017bcc:	f24e 0108 	movw	r1, #57352	; 0xe008
 8017bd0:	485f      	ldr	r0, [pc, #380]	; (8017d50 <_ZL12MX_GPIO_Initv+0x248>)
 8017bd2:	f003 fa9b 	bl	801b10c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8017bd6:	2200      	movs	r2, #0
 8017bd8:	21a4      	movs	r1, #164	; 0xa4
 8017bda:	485e      	ldr	r0, [pc, #376]	; (8017d54 <_ZL12MX_GPIO_Initv+0x24c>)
 8017bdc:	f003 fa96 	bl	801b10c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 8017be0:	2200      	movs	r2, #0
 8017be2:	f64f 7187 	movw	r1, #65415	; 0xff87
 8017be6:	485c      	ldr	r0, [pc, #368]	; (8017d58 <_ZL12MX_GPIO_Initv+0x250>)
 8017be8:	f003 fa90 	bl	801b10c <HAL_GPIO_WritePin>
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |INFRA_LE_F_Pin|LED_LE_F_Pin|INFRA_OE_F_Pin|LED_OE_F_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8017bec:	2200      	movs	r2, #0
 8017bee:	2180      	movs	r1, #128	; 0x80
 8017bf0:	485a      	ldr	r0, [pc, #360]	; (8017d5c <_ZL12MX_GPIO_Initv+0x254>)
 8017bf2:	f003 fa8b 	bl	801b10c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8017bf6:	2200      	movs	r2, #0
 8017bf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8017bfc:	4858      	ldr	r0, [pc, #352]	; (8017d60 <_ZL12MX_GPIO_Initv+0x258>)
 8017bfe:	f003 fa85 	bl	801b10c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, INFRA_LE_R_Pin|LED_LE_R_Pin|INFRA_OE_R_Pin|LED_OE_R_Pin
 8017c02:	2200      	movs	r2, #0
 8017c04:	f44f 41ec 	mov.w	r1, #30208	; 0x7600
 8017c08:	4856      	ldr	r0, [pc, #344]	; (8017d64 <_ZL12MX_GPIO_Initv+0x25c>)
 8017c0a:	f003 fa7f 	bl	801b10c <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DRIVE_ENABLE_Pin */
  GPIO_InitStruct.Pin = DRIVE_ENABLE_Pin;
 8017c0e:	2308      	movs	r3, #8
 8017c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017c12:	2301      	movs	r3, #1
 8017c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8017c16:	2302      	movs	r3, #2
 8017c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017c1a:	2303      	movs	r3, #3
 8017c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DRIVE_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8017c1e:	f107 031c 	add.w	r3, r7, #28
 8017c22:	4619      	mov	r1, r3
 8017c24:	484a      	ldr	r0, [pc, #296]	; (8017d50 <_ZL12MX_GPIO_Initv+0x248>)
 8017c26:	f003 f8f1 	bl	801ae0c <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_FB_Pin REMOTE_GAS_Pin REMOTE_STEER_Pin */
  GPIO_InitStruct.Pin = MCU_FB_Pin|REMOTE_GAS_Pin|REMOTE_STEER_Pin;
 8017c2a:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8017c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017c30:	2300      	movs	r3, #0
 8017c32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017c34:	2300      	movs	r3, #0
 8017c36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8017c38:	f107 031c 	add.w	r3, r7, #28
 8017c3c:	4619      	mov	r1, r3
 8017c3e:	4844      	ldr	r0, [pc, #272]	; (8017d50 <_ZL12MX_GPIO_Initv+0x248>)
 8017c40:	f003 f8e4 	bl	801ae0c <HAL_GPIO_Init>

  /*Configure GPIO pins : MAX_CS_Pin UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin;
 8017c44:	23a4      	movs	r3, #164	; 0xa4
 8017c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017c48:	2301      	movs	r3, #1
 8017c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017c4c:	2300      	movs	r3, #0
 8017c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017c50:	2300      	movs	r3, #0
 8017c52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017c54:	f107 031c 	add.w	r3, r7, #28
 8017c58:	4619      	mov	r1, r3
 8017c5a:	483e      	ldr	r0, [pc, #248]	; (8017d54 <_ZL12MX_GPIO_Initv+0x24c>)
 8017c5c:	f003 f8d6 	bl	801ae0c <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_LED_Pin MOT_BATT_L_Pin LV_BATT_L_Pin */
  GPIO_InitStruct.Pin = MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin;
 8017c60:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8017c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017c66:	2301      	movs	r3, #1
 8017c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017c6a:	2300      	movs	r3, #0
 8017c6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017c6e:	2300      	movs	r3, #0
 8017c70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8017c72:	f107 031c 	add.w	r3, r7, #28
 8017c76:	4619      	mov	r1, r3
 8017c78:	4835      	ldr	r0, [pc, #212]	; (8017d50 <_ZL12MX_GPIO_Initv+0x248>)
 8017c7a:	f003 f8c7 	bl	801ae0c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin ROTARY1_Pin ROTARY2_Pin ROTARY3_Pin
                           ROTARY4_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|ROTARY1_Pin|ROTARY2_Pin|ROTARY3_Pin
 8017c7e:	f643 6301 	movw	r3, #15873	; 0x3e01
 8017c82:	61fb      	str	r3, [r7, #28]
                          |ROTARY4_Pin|BUTTON1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017c84:	2300      	movs	r3, #0
 8017c86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017c88:	2300      	movs	r3, #0
 8017c8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8017c8c:	f107 031c 	add.w	r3, r7, #28
 8017c90:	4619      	mov	r1, r3
 8017c92:	4835      	ldr	r0, [pc, #212]	; (8017d68 <_ZL12MX_GPIO_Initv+0x260>)
 8017c94:	f003 f8ba 	bl	801ae0c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8017c98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8017c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8017c9e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8017ca2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017ca4:	2300      	movs	r3, #0
 8017ca6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8017ca8:	f107 031c 	add.w	r3, r7, #28
 8017cac:	4619      	mov	r1, r3
 8017cae:	4829      	ldr	r0, [pc, #164]	; (8017d54 <_ZL12MX_GPIO_Initv+0x24c>)
 8017cb0:	f003 f8ac 	bl	801ae0c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCF1_CS_Pin ADCF2_CS_Pin ADCF3_CS_Pin ADCF4_CS_Pin
                           ADCR1_CS_Pin ADCR2_CS_Pin ADCR3_CS_Pin ADCR4_CS_Pin
                           INFRA_LE_F_Pin LED_LE_F_Pin INFRA_OE_F_Pin LED_OE_F_Pin */
  GPIO_InitStruct.Pin = ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 8017cb4:	f64f 7387 	movw	r3, #65415	; 0xff87
 8017cb8:	61fb      	str	r3, [r7, #28]
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |INFRA_LE_F_Pin|LED_LE_F_Pin|INFRA_OE_F_Pin|LED_OE_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017cba:	2301      	movs	r3, #1
 8017cbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017cbe:	2300      	movs	r3, #0
 8017cc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017cc2:	2300      	movs	r3, #0
 8017cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8017cc6:	f107 031c 	add.w	r3, r7, #28
 8017cca:	4619      	mov	r1, r3
 8017ccc:	4822      	ldr	r0, [pc, #136]	; (8017d58 <_ZL12MX_GPIO_Initv+0x250>)
 8017cce:	f003 f89d 	bl	801ae0c <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_BUTTON_Pin SET_BUTTON_Pin LED2_Pin */
  GPIO_InitStruct.Pin = RESET_BUTTON_Pin|SET_BUTTON_Pin|LED2_Pin;
 8017cd2:	2370      	movs	r3, #112	; 0x70
 8017cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017cd6:	2300      	movs	r3, #0
 8017cd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017cda:	2300      	movs	r3, #0
 8017cdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8017cde:	f107 031c 	add.w	r3, r7, #28
 8017ce2:	4619      	mov	r1, r3
 8017ce4:	481f      	ldr	r0, [pc, #124]	; (8017d64 <_ZL12MX_GPIO_Initv+0x25c>)
 8017ce6:	f003 f891 	bl	801ae0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8017cea:	2380      	movs	r3, #128	; 0x80
 8017cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017cee:	2301      	movs	r3, #1
 8017cf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017cf2:	2300      	movs	r3, #0
 8017cf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017cf6:	2300      	movs	r3, #0
 8017cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8017cfa:	f107 031c 	add.w	r3, r7, #28
 8017cfe:	4619      	mov	r1, r3
 8017d00:	4816      	ldr	r0, [pc, #88]	; (8017d5c <_ZL12MX_GPIO_Initv+0x254>)
 8017d02:	f003 f883 	bl	801ae0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8017d06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017d0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017d0c:	2301      	movs	r3, #1
 8017d0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017d10:	2300      	movs	r3, #0
 8017d12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017d14:	2300      	movs	r3, #0
 8017d16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8017d18:	f107 031c 	add.w	r3, r7, #28
 8017d1c:	4619      	mov	r1, r3
 8017d1e:	4810      	ldr	r0, [pc, #64]	; (8017d60 <_ZL12MX_GPIO_Initv+0x258>)
 8017d20:	f003 f874 	bl	801ae0c <HAL_GPIO_Init>

  /*Configure GPIO pins : INFRA_LE_R_Pin LED_LE_R_Pin INFRA_OE_R_Pin LED_OE_R_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = INFRA_LE_R_Pin|LED_LE_R_Pin|INFRA_OE_R_Pin|LED_OE_R_Pin
 8017d24:	f44f 43ec 	mov.w	r3, #30208	; 0x7600
 8017d28:	61fb      	str	r3, [r7, #28]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017d2a:	2301      	movs	r3, #1
 8017d2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017d2e:	2300      	movs	r3, #0
 8017d30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017d32:	2300      	movs	r3, #0
 8017d34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8017d36:	f107 031c 	add.w	r3, r7, #28
 8017d3a:	4619      	mov	r1, r3
 8017d3c:	4809      	ldr	r0, [pc, #36]	; (8017d64 <_ZL12MX_GPIO_Initv+0x25c>)
 8017d3e:	f003 f865 	bl	801ae0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8017d42:	bf00      	nop
 8017d44:	3730      	adds	r7, #48	; 0x30
 8017d46:	46bd      	mov	sp, r7
 8017d48:	bd80      	pop	{r7, pc}
 8017d4a:	bf00      	nop
 8017d4c:	40021000 	.word	0x40021000
 8017d50:	42021400 	.word	0x42021400
 8017d54:	42020400 	.word	0x42020400
 8017d58:	42020c00 	.word	0x42020c00
 8017d5c:	42020800 	.word	0x42020800
 8017d60:	42020000 	.word	0x42020000
 8017d64:	42021800 	.word	0x42021800
 8017d68:	42021000 	.word	0x42021000

08017d6c <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8017d6c:	b580      	push	{r7, lr}
 8017d6e:	b082      	sub	sp, #8
 8017d70:	af00      	add	r7, sp, #0
 8017d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8017d74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8017d78:	4803      	ldr	r0, [pc, #12]	; (8017d88 <_Z16StartDefaultTaskPv+0x1c>)
 8017d7a:	f003 f9df 	bl	801b13c <HAL_GPIO_TogglePin>
	  vTaskDelay(100);
 8017d7e:	2064      	movs	r0, #100	; 0x64
 8017d80:	f00c f9fa 	bl	8024178 <vTaskDelay>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8017d84:	e7f6      	b.n	8017d74 <_Z16StartDefaultTaskPv+0x8>
 8017d86:	bf00      	nop
 8017d88:	42020000 	.word	0x42020000

08017d8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8017d8c:	b580      	push	{r7, lr}
 8017d8e:	b082      	sub	sp, #8
 8017d90:	af00      	add	r7, sp, #0
 8017d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	681b      	ldr	r3, [r3, #0]
 8017d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017d9c:	d101      	bne.n	8017da2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8017d9e:	f000 ff45 	bl	8018c2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8017da2:	bf00      	nop
 8017da4:	3708      	adds	r7, #8
 8017da6:	46bd      	mov	sp, r7
 8017da8:	bd80      	pop	{r7, pc}

08017daa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8017daa:	b480      	push	{r7}
 8017dac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8017dae:	b672      	cpsid	i
}
 8017db0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8017db2:	e7fe      	b.n	8017db2 <Error_Handler+0x8>

08017db4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8017db4:	b580      	push	{r7, lr}
 8017db6:	b082      	sub	sp, #8
 8017db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017dba:	4b11      	ldr	r3, [pc, #68]	; (8017e00 <HAL_MspInit+0x4c>)
 8017dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017dbe:	4a10      	ldr	r2, [pc, #64]	; (8017e00 <HAL_MspInit+0x4c>)
 8017dc0:	f043 0301 	orr.w	r3, r3, #1
 8017dc4:	6613      	str	r3, [r2, #96]	; 0x60
 8017dc6:	4b0e      	ldr	r3, [pc, #56]	; (8017e00 <HAL_MspInit+0x4c>)
 8017dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017dca:	f003 0301 	and.w	r3, r3, #1
 8017dce:	607b      	str	r3, [r7, #4]
 8017dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8017dd2:	4b0b      	ldr	r3, [pc, #44]	; (8017e00 <HAL_MspInit+0x4c>)
 8017dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017dd6:	4a0a      	ldr	r2, [pc, #40]	; (8017e00 <HAL_MspInit+0x4c>)
 8017dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017ddc:	6593      	str	r3, [r2, #88]	; 0x58
 8017dde:	4b08      	ldr	r3, [pc, #32]	; (8017e00 <HAL_MspInit+0x4c>)
 8017de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017de6:	603b      	str	r3, [r7, #0]
 8017de8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 8017dea:	2200      	movs	r2, #0
 8017dec:	2107      	movs	r1, #7
 8017dee:	f06f 0001 	mvn.w	r0, #1
 8017df2:	f002 fc35 	bl	801a660 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8017df6:	bf00      	nop
 8017df8:	3708      	adds	r7, #8
 8017dfa:	46bd      	mov	sp, r7
 8017dfc:	bd80      	pop	{r7, pc}
 8017dfe:	bf00      	nop
 8017e00:	40021000 	.word	0x40021000

08017e04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8017e04:	b580      	push	{r7, lr}
 8017e06:	b08c      	sub	sp, #48	; 0x30
 8017e08:	af00      	add	r7, sp, #0
 8017e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017e0c:	f107 031c 	add.w	r3, r7, #28
 8017e10:	2200      	movs	r2, #0
 8017e12:	601a      	str	r2, [r3, #0]
 8017e14:	605a      	str	r2, [r3, #4]
 8017e16:	609a      	str	r2, [r3, #8]
 8017e18:	60da      	str	r2, [r3, #12]
 8017e1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	681b      	ldr	r3, [r3, #0]
 8017e20:	4a4b      	ldr	r2, [pc, #300]	; (8017f50 <HAL_ADC_MspInit+0x14c>)
 8017e22:	4293      	cmp	r3, r2
 8017e24:	f040 8090 	bne.w	8017f48 <HAL_ADC_MspInit+0x144>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8017e28:	4b4a      	ldr	r3, [pc, #296]	; (8017f54 <HAL_ADC_MspInit+0x150>)
 8017e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017e2c:	4a49      	ldr	r2, [pc, #292]	; (8017f54 <HAL_ADC_MspInit+0x150>)
 8017e2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017e32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017e34:	4b47      	ldr	r3, [pc, #284]	; (8017f54 <HAL_ADC_MspInit+0x150>)
 8017e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017e38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017e3c:	61bb      	str	r3, [r7, #24]
 8017e3e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8017e40:	4b44      	ldr	r3, [pc, #272]	; (8017f54 <HAL_ADC_MspInit+0x150>)
 8017e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017e44:	4a43      	ldr	r2, [pc, #268]	; (8017f54 <HAL_ADC_MspInit+0x150>)
 8017e46:	f043 0304 	orr.w	r3, r3, #4
 8017e4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017e4c:	4b41      	ldr	r3, [pc, #260]	; (8017f54 <HAL_ADC_MspInit+0x150>)
 8017e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017e50:	f003 0304 	and.w	r3, r3, #4
 8017e54:	617b      	str	r3, [r7, #20]
 8017e56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017e58:	4b3e      	ldr	r3, [pc, #248]	; (8017f54 <HAL_ADC_MspInit+0x150>)
 8017e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017e5c:	4a3d      	ldr	r2, [pc, #244]	; (8017f54 <HAL_ADC_MspInit+0x150>)
 8017e5e:	f043 0301 	orr.w	r3, r3, #1
 8017e62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017e64:	4b3b      	ldr	r3, [pc, #236]	; (8017f54 <HAL_ADC_MspInit+0x150>)
 8017e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017e68:	f003 0301 	and.w	r3, r3, #1
 8017e6c:	613b      	str	r3, [r7, #16]
 8017e6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017e70:	4b38      	ldr	r3, [pc, #224]	; (8017f54 <HAL_ADC_MspInit+0x150>)
 8017e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017e74:	4a37      	ldr	r2, [pc, #220]	; (8017f54 <HAL_ADC_MspInit+0x150>)
 8017e76:	f043 0302 	orr.w	r3, r3, #2
 8017e7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017e7c:	4b35      	ldr	r3, [pc, #212]	; (8017f54 <HAL_ADC_MspInit+0x150>)
 8017e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017e80:	f003 0302 	and.w	r3, r3, #2
 8017e84:	60fb      	str	r3, [r7, #12]
 8017e86:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = BATT_VOLTAGE_Pin|MOT_CURR_Pin|VBUS_SENSE_Pin|ENC_CHA_Pin;
 8017e88:	230f      	movs	r3, #15
 8017e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017e8c:	2303      	movs	r3, #3
 8017e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017e90:	2300      	movs	r3, #0
 8017e92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017e94:	f107 031c 	add.w	r3, r7, #28
 8017e98:	4619      	mov	r1, r3
 8017e9a:	482f      	ldr	r0, [pc, #188]	; (8017f58 <HAL_ADC_MspInit+0x154>)
 8017e9c:	f002 ffb6 	bl	801ae0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISTANCE2_ADC_Pin|DISTANCE1_ADC_Pin|DISTANCE3_ADC_Pin|LV_BATT_Pin;
 8017ea0:	239c      	movs	r3, #156	; 0x9c
 8017ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017ea4:	2303      	movs	r3, #3
 8017ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017ea8:	2300      	movs	r3, #0
 8017eaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017eac:	f107 031c 	add.w	r3, r7, #28
 8017eb0:	4619      	mov	r1, r3
 8017eb2:	482a      	ldr	r0, [pc, #168]	; (8017f5c <HAL_ADC_MspInit+0x158>)
 8017eb4:	f002 ffaa 	bl	801ae0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_CHBB0_Pin|DISTANCE4_ADC_Pin;
 8017eb8:	2303      	movs	r3, #3
 8017eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017ebc:	2303      	movs	r3, #3
 8017ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017ec0:	2300      	movs	r3, #0
 8017ec2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017ec4:	f107 031c 	add.w	r3, r7, #28
 8017ec8:	4619      	mov	r1, r3
 8017eca:	4825      	ldr	r0, [pc, #148]	; (8017f60 <HAL_ADC_MspInit+0x15c>)
 8017ecc:	f002 ff9e 	bl	801ae0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8017ed0:	4b24      	ldr	r3, [pc, #144]	; (8017f64 <HAL_ADC_MspInit+0x160>)
 8017ed2:	4a25      	ldr	r2, [pc, #148]	; (8017f68 <HAL_ADC_MspInit+0x164>)
 8017ed4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8017ed6:	4b23      	ldr	r3, [pc, #140]	; (8017f64 <HAL_ADC_MspInit+0x160>)
 8017ed8:	2205      	movs	r2, #5
 8017eda:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8017edc:	4b21      	ldr	r3, [pc, #132]	; (8017f64 <HAL_ADC_MspInit+0x160>)
 8017ede:	2200      	movs	r2, #0
 8017ee0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8017ee2:	4b20      	ldr	r3, [pc, #128]	; (8017f64 <HAL_ADC_MspInit+0x160>)
 8017ee4:	2200      	movs	r2, #0
 8017ee6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8017ee8:	4b1e      	ldr	r3, [pc, #120]	; (8017f64 <HAL_ADC_MspInit+0x160>)
 8017eea:	2280      	movs	r2, #128	; 0x80
 8017eec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8017eee:	4b1d      	ldr	r3, [pc, #116]	; (8017f64 <HAL_ADC_MspInit+0x160>)
 8017ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017ef4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8017ef6:	4b1b      	ldr	r3, [pc, #108]	; (8017f64 <HAL_ADC_MspInit+0x160>)
 8017ef8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017efc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8017efe:	4b19      	ldr	r3, [pc, #100]	; (8017f64 <HAL_ADC_MspInit+0x160>)
 8017f00:	2200      	movs	r2, #0
 8017f02:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8017f04:	4b17      	ldr	r3, [pc, #92]	; (8017f64 <HAL_ADC_MspInit+0x160>)
 8017f06:	2200      	movs	r2, #0
 8017f08:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8017f0a:	4816      	ldr	r0, [pc, #88]	; (8017f64 <HAL_ADC_MspInit+0x160>)
 8017f0c:	f002 fbd0 	bl	801a6b0 <HAL_DMA_Init>
 8017f10:	4603      	mov	r3, r0
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	d001      	beq.n	8017f1a <HAL_ADC_MspInit+0x116>
    {
      Error_Handler();
 8017f16:	f7ff ff48 	bl	8017daa <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8017f1a:	2110      	movs	r1, #16
 8017f1c:	4811      	ldr	r0, [pc, #68]	; (8017f64 <HAL_ADC_MspInit+0x160>)
 8017f1e:	f002 fea5 	bl	801ac6c <HAL_DMA_ConfigChannelAttributes>
 8017f22:	4603      	mov	r3, r0
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d001      	beq.n	8017f2c <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8017f28:	f7ff ff3f 	bl	8017daa <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	4a0d      	ldr	r2, [pc, #52]	; (8017f64 <HAL_ADC_MspInit+0x160>)
 8017f30:	651a      	str	r2, [r3, #80]	; 0x50
 8017f32:	4a0c      	ldr	r2, [pc, #48]	; (8017f64 <HAL_ADC_MspInit+0x160>)
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8017f38:	2200      	movs	r2, #0
 8017f3a:	2105      	movs	r1, #5
 8017f3c:	2025      	movs	r0, #37	; 0x25
 8017f3e:	f002 fb8f 	bl	801a660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8017f42:	2025      	movs	r0, #37	; 0x25
 8017f44:	f002 fba6 	bl	801a694 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8017f48:	bf00      	nop
 8017f4a:	3730      	adds	r7, #48	; 0x30
 8017f4c:	46bd      	mov	sp, r7
 8017f4e:	bd80      	pop	{r7, pc}
 8017f50:	42028000 	.word	0x42028000
 8017f54:	40021000 	.word	0x40021000
 8017f58:	42020800 	.word	0x42020800
 8017f5c:	42020000 	.word	0x42020000
 8017f60:	42020400 	.word	0x42020400
 8017f64:	2000074c 	.word	0x2000074c
 8017f68:	40020008 	.word	0x40020008

08017f6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8017f6c:	b580      	push	{r7, lr}
 8017f6e:	b0ae      	sub	sp, #184	; 0xb8
 8017f70:	af00      	add	r7, sp, #0
 8017f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017f74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8017f78:	2200      	movs	r2, #0
 8017f7a:	601a      	str	r2, [r3, #0]
 8017f7c:	605a      	str	r2, [r3, #4]
 8017f7e:	609a      	str	r2, [r3, #8]
 8017f80:	60da      	str	r2, [r3, #12]
 8017f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8017f84:	f107 0310 	add.w	r3, r7, #16
 8017f88:	2294      	movs	r2, #148	; 0x94
 8017f8a:	2100      	movs	r1, #0
 8017f8c:	4618      	mov	r0, r3
 8017f8e:	f010 fdb5 	bl	8028afc <memset>
  if(hi2c->Instance==I2C1)
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	681b      	ldr	r3, [r3, #0]
 8017f96:	4a21      	ldr	r2, [pc, #132]	; (801801c <HAL_I2C_MspInit+0xb0>)
 8017f98:	4293      	cmp	r3, r2
 8017f9a:	d13b      	bne.n	8018014 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8017f9c:	2340      	movs	r3, #64	; 0x40
 8017f9e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8017fa0:	2300      	movs	r3, #0
 8017fa2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8017fa4:	f107 0310 	add.w	r3, r7, #16
 8017fa8:	4618      	mov	r0, r3
 8017faa:	f005 f853 	bl	801d054 <HAL_RCCEx_PeriphCLKConfig>
 8017fae:	4603      	mov	r3, r0
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d001      	beq.n	8017fb8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8017fb4:	f7ff fef9 	bl	8017daa <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017fb8:	4b19      	ldr	r3, [pc, #100]	; (8018020 <HAL_I2C_MspInit+0xb4>)
 8017fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017fbc:	4a18      	ldr	r2, [pc, #96]	; (8018020 <HAL_I2C_MspInit+0xb4>)
 8017fbe:	f043 0302 	orr.w	r3, r3, #2
 8017fc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017fc4:	4b16      	ldr	r3, [pc, #88]	; (8018020 <HAL_I2C_MspInit+0xb4>)
 8017fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017fc8:	f003 0302 	and.w	r3, r3, #2
 8017fcc:	60fb      	str	r3, [r7, #12]
 8017fce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8017fd0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8017fd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8017fd8:	2312      	movs	r3, #18
 8017fda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017fde:	2300      	movs	r3, #0
 8017fe0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017fe4:	2300      	movs	r3, #0
 8017fe6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8017fea:	2304      	movs	r3, #4
 8017fec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017ff0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8017ff4:	4619      	mov	r1, r3
 8017ff6:	480b      	ldr	r0, [pc, #44]	; (8018024 <HAL_I2C_MspInit+0xb8>)
 8017ff8:	f002 ff08 	bl	801ae0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8017ffc:	4b08      	ldr	r3, [pc, #32]	; (8018020 <HAL_I2C_MspInit+0xb4>)
 8017ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018000:	4a07      	ldr	r2, [pc, #28]	; (8018020 <HAL_I2C_MspInit+0xb4>)
 8018002:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8018006:	6593      	str	r3, [r2, #88]	; 0x58
 8018008:	4b05      	ldr	r3, [pc, #20]	; (8018020 <HAL_I2C_MspInit+0xb4>)
 801800a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801800c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8018010:	60bb      	str	r3, [r7, #8]
 8018012:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8018014:	bf00      	nop
 8018016:	37b8      	adds	r7, #184	; 0xb8
 8018018:	46bd      	mov	sp, r7
 801801a:	bd80      	pop	{r7, pc}
 801801c:	40005400 	.word	0x40005400
 8018020:	40021000 	.word	0x40021000
 8018024:	42020400 	.word	0x42020400

08018028 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8018028:	b580      	push	{r7, lr}
 801802a:	b0b2      	sub	sp, #200	; 0xc8
 801802c:	af00      	add	r7, sp, #0
 801802e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018030:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8018034:	2200      	movs	r2, #0
 8018036:	601a      	str	r2, [r3, #0]
 8018038:	605a      	str	r2, [r3, #4]
 801803a:	609a      	str	r2, [r3, #8]
 801803c:	60da      	str	r2, [r3, #12]
 801803e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8018040:	f107 0320 	add.w	r3, r7, #32
 8018044:	2294      	movs	r2, #148	; 0x94
 8018046:	2100      	movs	r1, #0
 8018048:	4618      	mov	r0, r3
 801804a:	f010 fd57 	bl	8028afc <memset>
  if(huart->Instance==LPUART1)
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	681b      	ldr	r3, [r3, #0]
 8018052:	4a67      	ldr	r2, [pc, #412]	; (80181f0 <HAL_UART_MspInit+0x1c8>)
 8018054:	4293      	cmp	r3, r2
 8018056:	d13e      	bne.n	80180d6 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8018058:	2320      	movs	r3, #32
 801805a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 801805c:	2300      	movs	r3, #0
 801805e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8018060:	f107 0320 	add.w	r3, r7, #32
 8018064:	4618      	mov	r0, r3
 8018066:	f004 fff5 	bl	801d054 <HAL_RCCEx_PeriphCLKConfig>
 801806a:	4603      	mov	r3, r0
 801806c:	2b00      	cmp	r3, #0
 801806e:	d001      	beq.n	8018074 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8018070:	f7ff fe9b 	bl	8017daa <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8018074:	4b5f      	ldr	r3, [pc, #380]	; (80181f4 <HAL_UART_MspInit+0x1cc>)
 8018076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018078:	4a5e      	ldr	r2, [pc, #376]	; (80181f4 <HAL_UART_MspInit+0x1cc>)
 801807a:	f043 0301 	orr.w	r3, r3, #1
 801807e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8018080:	4b5c      	ldr	r3, [pc, #368]	; (80181f4 <HAL_UART_MspInit+0x1cc>)
 8018082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018084:	f003 0301 	and.w	r3, r3, #1
 8018088:	61fb      	str	r3, [r7, #28]
 801808a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 801808c:	4b59      	ldr	r3, [pc, #356]	; (80181f4 <HAL_UART_MspInit+0x1cc>)
 801808e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018090:	4a58      	ldr	r2, [pc, #352]	; (80181f4 <HAL_UART_MspInit+0x1cc>)
 8018092:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018096:	64d3      	str	r3, [r2, #76]	; 0x4c
 8018098:	4b56      	ldr	r3, [pc, #344]	; (80181f4 <HAL_UART_MspInit+0x1cc>)
 801809a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801809c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80180a0:	61bb      	str	r3, [r7, #24]
 80180a2:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 80180a4:	f003 ffb6 	bl	801c014 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 80180a8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80180ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80180b0:	2302      	movs	r3, #2
 80180b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80180b6:	2300      	movs	r3, #0
 80180b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80180bc:	2300      	movs	r3, #0
 80180be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80180c2:	2308      	movs	r3, #8
 80180c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80180c8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80180cc:	4619      	mov	r1, r3
 80180ce:	484a      	ldr	r0, [pc, #296]	; (80181f8 <HAL_UART_MspInit+0x1d0>)
 80180d0:	f002 fe9c 	bl	801ae0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80180d4:	e088      	b.n	80181e8 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==UART4)
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	681b      	ldr	r3, [r3, #0]
 80180da:	4a48      	ldr	r2, [pc, #288]	; (80181fc <HAL_UART_MspInit+0x1d4>)
 80180dc:	4293      	cmp	r3, r2
 80180de:	d143      	bne.n	8018168 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80180e0:	2308      	movs	r3, #8
 80180e2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80180e4:	2300      	movs	r3, #0
 80180e6:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80180e8:	f107 0320 	add.w	r3, r7, #32
 80180ec:	4618      	mov	r0, r3
 80180ee:	f004 ffb1 	bl	801d054 <HAL_RCCEx_PeriphCLKConfig>
 80180f2:	4603      	mov	r3, r0
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d001      	beq.n	80180fc <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80180f8:	f7ff fe57 	bl	8017daa <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 80180fc:	4b3d      	ldr	r3, [pc, #244]	; (80181f4 <HAL_UART_MspInit+0x1cc>)
 80180fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018100:	4a3c      	ldr	r2, [pc, #240]	; (80181f4 <HAL_UART_MspInit+0x1cc>)
 8018102:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8018106:	6593      	str	r3, [r2, #88]	; 0x58
 8018108:	4b3a      	ldr	r3, [pc, #232]	; (80181f4 <HAL_UART_MspInit+0x1cc>)
 801810a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801810c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018110:	617b      	str	r3, [r7, #20]
 8018112:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018114:	4b37      	ldr	r3, [pc, #220]	; (80181f4 <HAL_UART_MspInit+0x1cc>)
 8018116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018118:	4a36      	ldr	r2, [pc, #216]	; (80181f4 <HAL_UART_MspInit+0x1cc>)
 801811a:	f043 0301 	orr.w	r3, r3, #1
 801811e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8018120:	4b34      	ldr	r3, [pc, #208]	; (80181f4 <HAL_UART_MspInit+0x1cc>)
 8018122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018124:	f003 0301 	and.w	r3, r3, #1
 8018128:	613b      	str	r3, [r7, #16]
 801812a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801812c:	2303      	movs	r3, #3
 801812e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018132:	2302      	movs	r3, #2
 8018134:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018138:	2300      	movs	r3, #0
 801813a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801813e:	2300      	movs	r3, #0
 8018140:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8018144:	2308      	movs	r3, #8
 8018146:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801814a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801814e:	4619      	mov	r1, r3
 8018150:	482b      	ldr	r0, [pc, #172]	; (8018200 <HAL_UART_MspInit+0x1d8>)
 8018152:	f002 fe5b 	bl	801ae0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8018156:	2200      	movs	r2, #0
 8018158:	2105      	movs	r1, #5
 801815a:	2040      	movs	r0, #64	; 0x40
 801815c:	f002 fa80 	bl	801a660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8018160:	2040      	movs	r0, #64	; 0x40
 8018162:	f002 fa97 	bl	801a694 <HAL_NVIC_EnableIRQ>
}
 8018166:	e03f      	b.n	80181e8 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART2)
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	681b      	ldr	r3, [r3, #0]
 801816c:	4a25      	ldr	r2, [pc, #148]	; (8018204 <HAL_UART_MspInit+0x1dc>)
 801816e:	4293      	cmp	r3, r2
 8018170:	d13a      	bne.n	80181e8 <HAL_UART_MspInit+0x1c0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8018172:	2302      	movs	r3, #2
 8018174:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8018176:	2300      	movs	r3, #0
 8018178:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801817a:	f107 0320 	add.w	r3, r7, #32
 801817e:	4618      	mov	r0, r3
 8018180:	f004 ff68 	bl	801d054 <HAL_RCCEx_PeriphCLKConfig>
 8018184:	4603      	mov	r3, r0
 8018186:	2b00      	cmp	r3, #0
 8018188:	d001      	beq.n	801818e <HAL_UART_MspInit+0x166>
      Error_Handler();
 801818a:	f7ff fe0e 	bl	8017daa <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 801818e:	4b19      	ldr	r3, [pc, #100]	; (80181f4 <HAL_UART_MspInit+0x1cc>)
 8018190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018192:	4a18      	ldr	r2, [pc, #96]	; (80181f4 <HAL_UART_MspInit+0x1cc>)
 8018194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8018198:	6593      	str	r3, [r2, #88]	; 0x58
 801819a:	4b16      	ldr	r3, [pc, #88]	; (80181f4 <HAL_UART_MspInit+0x1cc>)
 801819c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801819e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80181a2:	60fb      	str	r3, [r7, #12]
 80181a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80181a6:	4b13      	ldr	r3, [pc, #76]	; (80181f4 <HAL_UART_MspInit+0x1cc>)
 80181a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80181aa:	4a12      	ldr	r2, [pc, #72]	; (80181f4 <HAL_UART_MspInit+0x1cc>)
 80181ac:	f043 0308 	orr.w	r3, r3, #8
 80181b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80181b2:	4b10      	ldr	r3, [pc, #64]	; (80181f4 <HAL_UART_MspInit+0x1cc>)
 80181b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80181b6:	f003 0308 	and.w	r3, r3, #8
 80181ba:	60bb      	str	r3, [r7, #8]
 80181bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = XBEE_TX_Pin|XBEE_RX_Pin;
 80181be:	2360      	movs	r3, #96	; 0x60
 80181c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80181c4:	2302      	movs	r3, #2
 80181c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80181ca:	2300      	movs	r3, #0
 80181cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80181d0:	2300      	movs	r3, #0
 80181d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80181d6:	2307      	movs	r3, #7
 80181d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80181dc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80181e0:	4619      	mov	r1, r3
 80181e2:	4809      	ldr	r0, [pc, #36]	; (8018208 <HAL_UART_MspInit+0x1e0>)
 80181e4:	f002 fe12 	bl	801ae0c <HAL_GPIO_Init>
}
 80181e8:	bf00      	nop
 80181ea:	37c8      	adds	r7, #200	; 0xc8
 80181ec:	46bd      	mov	sp, r7
 80181ee:	bd80      	pop	{r7, pc}
 80181f0:	40008000 	.word	0x40008000
 80181f4:	40021000 	.word	0x40021000
 80181f8:	42021800 	.word	0x42021800
 80181fc:	40004c00 	.word	0x40004c00
 8018200:	42020000 	.word	0x42020000
 8018204:	40004400 	.word	0x40004400
 8018208:	42020c00 	.word	0x42020c00

0801820c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 801820c:	b580      	push	{r7, lr}
 801820e:	b0a8      	sub	sp, #160	; 0xa0
 8018210:	af00      	add	r7, sp, #0
 8018212:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8018214:	f107 030c 	add.w	r3, r7, #12
 8018218:	2294      	movs	r2, #148	; 0x94
 801821a:	2100      	movs	r1, #0
 801821c:	4618      	mov	r0, r3
 801821e:	f010 fc6d 	bl	8028afc <memset>
  if(hrtc->Instance==RTC)
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	681b      	ldr	r3, [r3, #0]
 8018226:	4a16      	ldr	r2, [pc, #88]	; (8018280 <HAL_RTC_MspInit+0x74>)
 8018228:	4293      	cmp	r3, r2
 801822a:	d124      	bne.n	8018276 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 801822c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8018230:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8018232:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018236:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801823a:	f107 030c 	add.w	r3, r7, #12
 801823e:	4618      	mov	r0, r3
 8018240:	f004 ff08 	bl	801d054 <HAL_RCCEx_PeriphCLKConfig>
 8018244:	4603      	mov	r3, r0
 8018246:	2b00      	cmp	r3, #0
 8018248:	d001      	beq.n	801824e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 801824a:	f7ff fdae 	bl	8017daa <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 801824e:	4b0d      	ldr	r3, [pc, #52]	; (8018284 <HAL_RTC_MspInit+0x78>)
 8018250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018254:	4a0b      	ldr	r2, [pc, #44]	; (8018284 <HAL_RTC_MspInit+0x78>)
 8018256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801825a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 801825e:	4b09      	ldr	r3, [pc, #36]	; (8018284 <HAL_RTC_MspInit+0x78>)
 8018260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018262:	4a08      	ldr	r2, [pc, #32]	; (8018284 <HAL_RTC_MspInit+0x78>)
 8018264:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8018268:	6593      	str	r3, [r2, #88]	; 0x58
 801826a:	4b06      	ldr	r3, [pc, #24]	; (8018284 <HAL_RTC_MspInit+0x78>)
 801826c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801826e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018272:	60bb      	str	r3, [r7, #8]
 8018274:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8018276:	bf00      	nop
 8018278:	37a0      	adds	r7, #160	; 0xa0
 801827a:	46bd      	mov	sp, r7
 801827c:	bd80      	pop	{r7, pc}
 801827e:	bf00      	nop
 8018280:	40002800 	.word	0x40002800
 8018284:	40021000 	.word	0x40021000

08018288 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8018288:	b580      	push	{r7, lr}
 801828a:	b090      	sub	sp, #64	; 0x40
 801828c:	af00      	add	r7, sp, #0
 801828e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018290:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018294:	2200      	movs	r2, #0
 8018296:	601a      	str	r2, [r3, #0]
 8018298:	605a      	str	r2, [r3, #4]
 801829a:	609a      	str	r2, [r3, #8]
 801829c:	60da      	str	r2, [r3, #12]
 801829e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	681b      	ldr	r3, [r3, #0]
 80182a4:	4a62      	ldr	r2, [pc, #392]	; (8018430 <HAL_SPI_MspInit+0x1a8>)
 80182a6:	4293      	cmp	r3, r2
 80182a8:	d145      	bne.n	8018336 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80182aa:	4b62      	ldr	r3, [pc, #392]	; (8018434 <HAL_SPI_MspInit+0x1ac>)
 80182ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80182ae:	4a61      	ldr	r2, [pc, #388]	; (8018434 <HAL_SPI_MspInit+0x1ac>)
 80182b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80182b4:	6613      	str	r3, [r2, #96]	; 0x60
 80182b6:	4b5f      	ldr	r3, [pc, #380]	; (8018434 <HAL_SPI_MspInit+0x1ac>)
 80182b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80182ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80182be:	62bb      	str	r3, [r7, #40]	; 0x28
 80182c0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80182c2:	4b5c      	ldr	r3, [pc, #368]	; (8018434 <HAL_SPI_MspInit+0x1ac>)
 80182c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80182c6:	4a5b      	ldr	r2, [pc, #364]	; (8018434 <HAL_SPI_MspInit+0x1ac>)
 80182c8:	f043 0301 	orr.w	r3, r3, #1
 80182cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80182ce:	4b59      	ldr	r3, [pc, #356]	; (8018434 <HAL_SPI_MspInit+0x1ac>)
 80182d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80182d2:	f003 0301 	and.w	r3, r3, #1
 80182d6:	627b      	str	r3, [r7, #36]	; 0x24
 80182d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80182da:	4b56      	ldr	r3, [pc, #344]	; (8018434 <HAL_SPI_MspInit+0x1ac>)
 80182dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80182de:	4a55      	ldr	r2, [pc, #340]	; (8018434 <HAL_SPI_MspInit+0x1ac>)
 80182e0:	f043 0310 	orr.w	r3, r3, #16
 80182e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80182e6:	4b53      	ldr	r3, [pc, #332]	; (8018434 <HAL_SPI_MspInit+0x1ac>)
 80182e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80182ea:	f003 0310 	and.w	r3, r3, #16
 80182ee:	623b      	str	r3, [r7, #32]
 80182f0:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_ADC_CLK_Pin|SPI_ADC_MISO_Pin;
 80182f2:	2360      	movs	r3, #96	; 0x60
 80182f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80182f6:	2302      	movs	r3, #2
 80182f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80182fa:	2300      	movs	r3, #0
 80182fc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80182fe:	2300      	movs	r3, #0
 8018300:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8018302:	2305      	movs	r3, #5
 8018304:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018306:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801830a:	4619      	mov	r1, r3
 801830c:	484a      	ldr	r0, [pc, #296]	; (8018438 <HAL_SPI_MspInit+0x1b0>)
 801830e:	f002 fd7d 	bl	801ae0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_ADC_MOSI_Pin;
 8018312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018316:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018318:	2302      	movs	r3, #2
 801831a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801831c:	2300      	movs	r3, #0
 801831e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018320:	2300      	movs	r3, #0
 8018322:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8018324:	2305      	movs	r3, #5
 8018326:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SPI_ADC_MOSI_GPIO_Port, &GPIO_InitStruct);
 8018328:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801832c:	4619      	mov	r1, r3
 801832e:	4843      	ldr	r0, [pc, #268]	; (801843c <HAL_SPI_MspInit+0x1b4>)
 8018330:	f002 fd6c 	bl	801ae0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8018334:	e078      	b.n	8018428 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI2)
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	4a41      	ldr	r2, [pc, #260]	; (8018440 <HAL_SPI_MspInit+0x1b8>)
 801833c:	4293      	cmp	r3, r2
 801833e:	d145      	bne.n	80183cc <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8018340:	4b3c      	ldr	r3, [pc, #240]	; (8018434 <HAL_SPI_MspInit+0x1ac>)
 8018342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018344:	4a3b      	ldr	r2, [pc, #236]	; (8018434 <HAL_SPI_MspInit+0x1ac>)
 8018346:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801834a:	6593      	str	r3, [r2, #88]	; 0x58
 801834c:	4b39      	ldr	r3, [pc, #228]	; (8018434 <HAL_SPI_MspInit+0x1ac>)
 801834e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018354:	61fb      	str	r3, [r7, #28]
 8018356:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8018358:	4b36      	ldr	r3, [pc, #216]	; (8018434 <HAL_SPI_MspInit+0x1ac>)
 801835a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801835c:	4a35      	ldr	r2, [pc, #212]	; (8018434 <HAL_SPI_MspInit+0x1ac>)
 801835e:	f043 0302 	orr.w	r3, r3, #2
 8018362:	64d3      	str	r3, [r2, #76]	; 0x4c
 8018364:	4b33      	ldr	r3, [pc, #204]	; (8018434 <HAL_SPI_MspInit+0x1ac>)
 8018366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018368:	f003 0302 	and.w	r3, r3, #2
 801836c:	61bb      	str	r3, [r7, #24]
 801836e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8018370:	4b30      	ldr	r3, [pc, #192]	; (8018434 <HAL_SPI_MspInit+0x1ac>)
 8018372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018374:	4a2f      	ldr	r2, [pc, #188]	; (8018434 <HAL_SPI_MspInit+0x1ac>)
 8018376:	f043 0308 	orr.w	r3, r3, #8
 801837a:	64d3      	str	r3, [r2, #76]	; 0x4c
 801837c:	4b2d      	ldr	r3, [pc, #180]	; (8018434 <HAL_SPI_MspInit+0x1ac>)
 801837e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018380:	f003 0308 	and.w	r3, r3, #8
 8018384:	617b      	str	r3, [r7, #20]
 8018386:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8018388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801838c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801838e:	2302      	movs	r3, #2
 8018390:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018392:	2300      	movs	r3, #0
 8018394:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018396:	2300      	movs	r3, #0
 8018398:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801839a:	2305      	movs	r3, #5
 801839c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801839e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80183a2:	4619      	mov	r1, r3
 80183a4:	4827      	ldr	r0, [pc, #156]	; (8018444 <HAL_SPI_MspInit+0x1bc>)
 80183a6:	f002 fd31 	bl	801ae0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80183aa:	2318      	movs	r3, #24
 80183ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80183ae:	2302      	movs	r3, #2
 80183b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80183b2:	2300      	movs	r3, #0
 80183b4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80183b6:	2300      	movs	r3, #0
 80183b8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80183ba:	2305      	movs	r3, #5
 80183bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80183be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80183c2:	4619      	mov	r1, r3
 80183c4:	4820      	ldr	r0, [pc, #128]	; (8018448 <HAL_SPI_MspInit+0x1c0>)
 80183c6:	f002 fd21 	bl	801ae0c <HAL_GPIO_Init>
}
 80183ca:	e02d      	b.n	8018428 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI3)
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	4a1e      	ldr	r2, [pc, #120]	; (801844c <HAL_SPI_MspInit+0x1c4>)
 80183d2:	4293      	cmp	r3, r2
 80183d4:	d128      	bne.n	8018428 <HAL_SPI_MspInit+0x1a0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80183d6:	4b17      	ldr	r3, [pc, #92]	; (8018434 <HAL_SPI_MspInit+0x1ac>)
 80183d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80183da:	4a16      	ldr	r2, [pc, #88]	; (8018434 <HAL_SPI_MspInit+0x1ac>)
 80183dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80183e0:	6593      	str	r3, [r2, #88]	; 0x58
 80183e2:	4b14      	ldr	r3, [pc, #80]	; (8018434 <HAL_SPI_MspInit+0x1ac>)
 80183e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80183e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80183ea:	613b      	str	r3, [r7, #16]
 80183ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80183ee:	4b11      	ldr	r3, [pc, #68]	; (8018434 <HAL_SPI_MspInit+0x1ac>)
 80183f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80183f2:	4a10      	ldr	r2, [pc, #64]	; (8018434 <HAL_SPI_MspInit+0x1ac>)
 80183f4:	f043 0304 	orr.w	r3, r3, #4
 80183f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80183fa:	4b0e      	ldr	r3, [pc, #56]	; (8018434 <HAL_SPI_MspInit+0x1ac>)
 80183fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80183fe:	f003 0304 	and.w	r3, r3, #4
 8018402:	60fb      	str	r3, [r7, #12]
 8018404:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8018406:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801840a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801840c:	2302      	movs	r3, #2
 801840e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018410:	2300      	movs	r3, #0
 8018412:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018414:	2300      	movs	r3, #0
 8018416:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8018418:	2306      	movs	r3, #6
 801841a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801841c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018420:	4619      	mov	r1, r3
 8018422:	480b      	ldr	r0, [pc, #44]	; (8018450 <HAL_SPI_MspInit+0x1c8>)
 8018424:	f002 fcf2 	bl	801ae0c <HAL_GPIO_Init>
}
 8018428:	bf00      	nop
 801842a:	3740      	adds	r7, #64	; 0x40
 801842c:	46bd      	mov	sp, r7
 801842e:	bd80      	pop	{r7, pc}
 8018430:	40013000 	.word	0x40013000
 8018434:	40021000 	.word	0x40021000
 8018438:	42020000 	.word	0x42020000
 801843c:	42021000 	.word	0x42021000
 8018440:	40003800 	.word	0x40003800
 8018444:	42020400 	.word	0x42020400
 8018448:	42020c00 	.word	0x42020c00
 801844c:	40003c00 	.word	0x40003c00
 8018450:	42020800 	.word	0x42020800

08018454 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8018454:	b580      	push	{r7, lr}
 8018456:	b08c      	sub	sp, #48	; 0x30
 8018458:	af00      	add	r7, sp, #0
 801845a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801845c:	f107 031c 	add.w	r3, r7, #28
 8018460:	2200      	movs	r2, #0
 8018462:	601a      	str	r2, [r3, #0]
 8018464:	605a      	str	r2, [r3, #4]
 8018466:	609a      	str	r2, [r3, #8]
 8018468:	60da      	str	r2, [r3, #12]
 801846a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	681b      	ldr	r3, [r3, #0]
 8018470:	4a40      	ldr	r2, [pc, #256]	; (8018574 <HAL_TIM_Base_MspInit+0x120>)
 8018472:	4293      	cmp	r3, r2
 8018474:	d14e      	bne.n	8018514 <HAL_TIM_Base_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8018476:	4b40      	ldr	r3, [pc, #256]	; (8018578 <HAL_TIM_Base_MspInit+0x124>)
 8018478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801847a:	4a3f      	ldr	r2, [pc, #252]	; (8018578 <HAL_TIM_Base_MspInit+0x124>)
 801847c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8018480:	6613      	str	r3, [r2, #96]	; 0x60
 8018482:	4b3d      	ldr	r3, [pc, #244]	; (8018578 <HAL_TIM_Base_MspInit+0x124>)
 8018484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801848a:	61bb      	str	r3, [r7, #24]
 801848c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 801848e:	4b3a      	ldr	r3, [pc, #232]	; (8018578 <HAL_TIM_Base_MspInit+0x124>)
 8018490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018492:	4a39      	ldr	r2, [pc, #228]	; (8018578 <HAL_TIM_Base_MspInit+0x124>)
 8018494:	f043 0310 	orr.w	r3, r3, #16
 8018498:	64d3      	str	r3, [r2, #76]	; 0x4c
 801849a:	4b37      	ldr	r3, [pc, #220]	; (8018578 <HAL_TIM_Base_MspInit+0x124>)
 801849c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801849e:	f003 0310 	and.w	r3, r3, #16
 80184a2:	617b      	str	r3, [r7, #20]
 80184a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80184a6:	4b34      	ldr	r3, [pc, #208]	; (8018578 <HAL_TIM_Base_MspInit+0x124>)
 80184a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80184aa:	4a33      	ldr	r2, [pc, #204]	; (8018578 <HAL_TIM_Base_MspInit+0x124>)
 80184ac:	f043 0301 	orr.w	r3, r3, #1
 80184b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80184b2:	4b31      	ldr	r3, [pc, #196]	; (8018578 <HAL_TIM_Base_MspInit+0x124>)
 80184b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80184b6:	f003 0301 	and.w	r3, r3, #1
 80184ba:	613b      	str	r3, [r7, #16]
 80184bc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = RC_PWM_STEERING_IN_Pin;
 80184be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80184c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80184c4:	2302      	movs	r3, #2
 80184c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80184c8:	2300      	movs	r3, #0
 80184ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80184cc:	2300      	movs	r3, #0
 80184ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80184d0:	2301      	movs	r3, #1
 80184d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_STEERING_IN_GPIO_Port, &GPIO_InitStruct);
 80184d4:	f107 031c 	add.w	r3, r7, #28
 80184d8:	4619      	mov	r1, r3
 80184da:	4828      	ldr	r0, [pc, #160]	; (801857c <HAL_TIM_Base_MspInit+0x128>)
 80184dc:	f002 fc96 	bl	801ae0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RC_PWM_STEERING_Pin|RC_PWM_THROTTLE_IN_Pin;
 80184e0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80184e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80184e6:	2302      	movs	r3, #2
 80184e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80184ea:	2300      	movs	r3, #0
 80184ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80184ee:	2300      	movs	r3, #0
 80184f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80184f2:	2301      	movs	r3, #1
 80184f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80184f6:	f107 031c 	add.w	r3, r7, #28
 80184fa:	4619      	mov	r1, r3
 80184fc:	4820      	ldr	r0, [pc, #128]	; (8018580 <HAL_TIM_Base_MspInit+0x12c>)
 80184fe:	f002 fc85 	bl	801ae0c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8018502:	2200      	movs	r2, #0
 8018504:	2105      	movs	r1, #5
 8018506:	202c      	movs	r0, #44	; 0x2c
 8018508:	f002 f8aa 	bl	801a660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 801850c:	202c      	movs	r0, #44	; 0x2c
 801850e:	f002 f8c1 	bl	801a694 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8018512:	e02a      	b.n	801856a <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM5)
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	681b      	ldr	r3, [r3, #0]
 8018518:	4a1a      	ldr	r2, [pc, #104]	; (8018584 <HAL_TIM_Base_MspInit+0x130>)
 801851a:	4293      	cmp	r3, r2
 801851c:	d10c      	bne.n	8018538 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 801851e:	4b16      	ldr	r3, [pc, #88]	; (8018578 <HAL_TIM_Base_MspInit+0x124>)
 8018520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018522:	4a15      	ldr	r2, [pc, #84]	; (8018578 <HAL_TIM_Base_MspInit+0x124>)
 8018524:	f043 0308 	orr.w	r3, r3, #8
 8018528:	6593      	str	r3, [r2, #88]	; 0x58
 801852a:	4b13      	ldr	r3, [pc, #76]	; (8018578 <HAL_TIM_Base_MspInit+0x124>)
 801852c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801852e:	f003 0308 	and.w	r3, r3, #8
 8018532:	60fb      	str	r3, [r7, #12]
 8018534:	68fb      	ldr	r3, [r7, #12]
}
 8018536:	e018      	b.n	801856a <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM6)
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	681b      	ldr	r3, [r3, #0]
 801853c:	4a12      	ldr	r2, [pc, #72]	; (8018588 <HAL_TIM_Base_MspInit+0x134>)
 801853e:	4293      	cmp	r3, r2
 8018540:	d113      	bne.n	801856a <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8018542:	4b0d      	ldr	r3, [pc, #52]	; (8018578 <HAL_TIM_Base_MspInit+0x124>)
 8018544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018546:	4a0c      	ldr	r2, [pc, #48]	; (8018578 <HAL_TIM_Base_MspInit+0x124>)
 8018548:	f043 0310 	orr.w	r3, r3, #16
 801854c:	6593      	str	r3, [r2, #88]	; 0x58
 801854e:	4b0a      	ldr	r3, [pc, #40]	; (8018578 <HAL_TIM_Base_MspInit+0x124>)
 8018550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018552:	f003 0310 	and.w	r3, r3, #16
 8018556:	60bb      	str	r3, [r7, #8]
 8018558:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 801855a:	2200      	movs	r2, #0
 801855c:	2105      	movs	r1, #5
 801855e:	2031      	movs	r0, #49	; 0x31
 8018560:	f002 f87e 	bl	801a660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8018564:	2031      	movs	r0, #49	; 0x31
 8018566:	f002 f895 	bl	801a694 <HAL_NVIC_EnableIRQ>
}
 801856a:	bf00      	nop
 801856c:	3730      	adds	r7, #48	; 0x30
 801856e:	46bd      	mov	sp, r7
 8018570:	bd80      	pop	{r7, pc}
 8018572:	bf00      	nop
 8018574:	40012c00 	.word	0x40012c00
 8018578:	40021000 	.word	0x40021000
 801857c:	42021000 	.word	0x42021000
 8018580:	42020000 	.word	0x42020000
 8018584:	40000c00 	.word	0x40000c00
 8018588:	40001000 	.word	0x40001000

0801858c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 801858c:	b580      	push	{r7, lr}
 801858e:	b08a      	sub	sp, #40	; 0x28
 8018590:	af00      	add	r7, sp, #0
 8018592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018594:	f107 0314 	add.w	r3, r7, #20
 8018598:	2200      	movs	r2, #0
 801859a:	601a      	str	r2, [r3, #0]
 801859c:	605a      	str	r2, [r3, #4]
 801859e:	609a      	str	r2, [r3, #8]
 80185a0:	60da      	str	r2, [r3, #12]
 80185a2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	4a1b      	ldr	r2, [pc, #108]	; (8018618 <HAL_TIM_Encoder_MspInit+0x8c>)
 80185aa:	4293      	cmp	r3, r2
 80185ac:	d12f      	bne.n	801860e <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80185ae:	4b1b      	ldr	r3, [pc, #108]	; (801861c <HAL_TIM_Encoder_MspInit+0x90>)
 80185b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80185b2:	4a1a      	ldr	r2, [pc, #104]	; (801861c <HAL_TIM_Encoder_MspInit+0x90>)
 80185b4:	f043 0302 	orr.w	r3, r3, #2
 80185b8:	6593      	str	r3, [r2, #88]	; 0x58
 80185ba:	4b18      	ldr	r3, [pc, #96]	; (801861c <HAL_TIM_Encoder_MspInit+0x90>)
 80185bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80185be:	f003 0302 	and.w	r3, r3, #2
 80185c2:	613b      	str	r3, [r7, #16]
 80185c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80185c6:	4b15      	ldr	r3, [pc, #84]	; (801861c <HAL_TIM_Encoder_MspInit+0x90>)
 80185c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80185ca:	4a14      	ldr	r2, [pc, #80]	; (801861c <HAL_TIM_Encoder_MspInit+0x90>)
 80185cc:	f043 0310 	orr.w	r3, r3, #16
 80185d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80185d2:	4b12      	ldr	r3, [pc, #72]	; (801861c <HAL_TIM_Encoder_MspInit+0x90>)
 80185d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80185d6:	f003 0310 	and.w	r3, r3, #16
 80185da:	60fb      	str	r3, [r7, #12]
 80185dc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PE3     ------> TIM3_CH1
    PE4     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CH_A_Pin|ENC_CHB_Pin;
 80185de:	2318      	movs	r3, #24
 80185e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80185e2:	2302      	movs	r3, #2
 80185e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80185e6:	2300      	movs	r3, #0
 80185e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80185ea:	2300      	movs	r3, #0
 80185ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80185ee:	2302      	movs	r3, #2
 80185f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80185f2:	f107 0314 	add.w	r3, r7, #20
 80185f6:	4619      	mov	r1, r3
 80185f8:	4809      	ldr	r0, [pc, #36]	; (8018620 <HAL_TIM_Encoder_MspInit+0x94>)
 80185fa:	f002 fc07 	bl	801ae0c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80185fe:	2200      	movs	r2, #0
 8018600:	2105      	movs	r1, #5
 8018602:	202e      	movs	r0, #46	; 0x2e
 8018604:	f002 f82c 	bl	801a660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8018608:	202e      	movs	r0, #46	; 0x2e
 801860a:	f002 f843 	bl	801a694 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 801860e:	bf00      	nop
 8018610:	3728      	adds	r7, #40	; 0x28
 8018612:	46bd      	mov	sp, r7
 8018614:	bd80      	pop	{r7, pc}
 8018616:	bf00      	nop
 8018618:	40000400 	.word	0x40000400
 801861c:	40021000 	.word	0x40021000
 8018620:	42021000 	.word	0x42021000

08018624 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8018624:	b480      	push	{r7}
 8018626:	b085      	sub	sp, #20
 8018628:	af00      	add	r7, sp, #0
 801862a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	681b      	ldr	r3, [r3, #0]
 8018630:	4a0a      	ldr	r2, [pc, #40]	; (801865c <HAL_TIM_PWM_MspInit+0x38>)
 8018632:	4293      	cmp	r3, r2
 8018634:	d10b      	bne.n	801864e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8018636:	4b0a      	ldr	r3, [pc, #40]	; (8018660 <HAL_TIM_PWM_MspInit+0x3c>)
 8018638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801863a:	4a09      	ldr	r2, [pc, #36]	; (8018660 <HAL_TIM_PWM_MspInit+0x3c>)
 801863c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018640:	6613      	str	r3, [r2, #96]	; 0x60
 8018642:	4b07      	ldr	r3, [pc, #28]	; (8018660 <HAL_TIM_PWM_MspInit+0x3c>)
 8018644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018646:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801864a:	60fb      	str	r3, [r7, #12]
 801864c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 801864e:	bf00      	nop
 8018650:	3714      	adds	r7, #20
 8018652:	46bd      	mov	sp, r7
 8018654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018658:	4770      	bx	lr
 801865a:	bf00      	nop
 801865c:	40013400 	.word	0x40013400
 8018660:	40021000 	.word	0x40021000

08018664 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8018664:	b580      	push	{r7, lr}
 8018666:	b08a      	sub	sp, #40	; 0x28
 8018668:	af00      	add	r7, sp, #0
 801866a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801866c:	f107 0314 	add.w	r3, r7, #20
 8018670:	2200      	movs	r2, #0
 8018672:	601a      	str	r2, [r3, #0]
 8018674:	605a      	str	r2, [r3, #4]
 8018676:	609a      	str	r2, [r3, #8]
 8018678:	60da      	str	r2, [r3, #12]
 801867a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	681b      	ldr	r3, [r3, #0]
 8018680:	4a22      	ldr	r2, [pc, #136]	; (801870c <HAL_TIM_MspPostInit+0xa8>)
 8018682:	4293      	cmp	r3, r2
 8018684:	d11d      	bne.n	80186c2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8018686:	4b22      	ldr	r3, [pc, #136]	; (8018710 <HAL_TIM_MspPostInit+0xac>)
 8018688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801868a:	4a21      	ldr	r2, [pc, #132]	; (8018710 <HAL_TIM_MspPostInit+0xac>)
 801868c:	f043 0320 	orr.w	r3, r3, #32
 8018690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8018692:	4b1f      	ldr	r3, [pc, #124]	; (8018710 <HAL_TIM_MspPostInit+0xac>)
 8018694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018696:	f003 0320 	and.w	r3, r3, #32
 801869a:	613b      	str	r3, [r7, #16]
 801869c:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PF6     ------> TIM5_CH1
    PF9     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_PWM1_Pin|MOTOR_PWM2_Pin;
 801869e:	f44f 7310 	mov.w	r3, #576	; 0x240
 80186a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80186a4:	2302      	movs	r3, #2
 80186a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80186a8:	2300      	movs	r3, #0
 80186aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80186ac:	2300      	movs	r3, #0
 80186ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80186b0:	2302      	movs	r3, #2
 80186b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80186b4:	f107 0314 	add.w	r3, r7, #20
 80186b8:	4619      	mov	r1, r3
 80186ba:	4816      	ldr	r0, [pc, #88]	; (8018714 <HAL_TIM_MspPostInit+0xb0>)
 80186bc:	f002 fba6 	bl	801ae0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80186c0:	e020      	b.n	8018704 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	681b      	ldr	r3, [r3, #0]
 80186c6:	4a14      	ldr	r2, [pc, #80]	; (8018718 <HAL_TIM_MspPostInit+0xb4>)
 80186c8:	4293      	cmp	r3, r2
 80186ca:	d11b      	bne.n	8018704 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80186cc:	4b10      	ldr	r3, [pc, #64]	; (8018710 <HAL_TIM_MspPostInit+0xac>)
 80186ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80186d0:	4a0f      	ldr	r2, [pc, #60]	; (8018710 <HAL_TIM_MspPostInit+0xac>)
 80186d2:	f043 0304 	orr.w	r3, r3, #4
 80186d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80186d8:	4b0d      	ldr	r3, [pc, #52]	; (8018710 <HAL_TIM_MspPostInit+0xac>)
 80186da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80186dc:	f003 0304 	and.w	r3, r3, #4
 80186e0:	60fb      	str	r3, [r7, #12]
 80186e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80186e4:	2340      	movs	r3, #64	; 0x40
 80186e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80186e8:	2302      	movs	r3, #2
 80186ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80186ec:	2300      	movs	r3, #0
 80186ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80186f0:	2300      	movs	r3, #0
 80186f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80186f4:	2303      	movs	r3, #3
 80186f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80186f8:	f107 0314 	add.w	r3, r7, #20
 80186fc:	4619      	mov	r1, r3
 80186fe:	4807      	ldr	r0, [pc, #28]	; (801871c <HAL_TIM_MspPostInit+0xb8>)
 8018700:	f002 fb84 	bl	801ae0c <HAL_GPIO_Init>
}
 8018704:	bf00      	nop
 8018706:	3728      	adds	r7, #40	; 0x28
 8018708:	46bd      	mov	sp, r7
 801870a:	bd80      	pop	{r7, pc}
 801870c:	40000c00 	.word	0x40000c00
 8018710:	40021000 	.word	0x40021000
 8018714:	42021400 	.word	0x42021400
 8018718:	40013400 	.word	0x40013400
 801871c:	42020800 	.word	0x42020800

08018720 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8018720:	b580      	push	{r7, lr}
 8018722:	b0ae      	sub	sp, #184	; 0xb8
 8018724:	af00      	add	r7, sp, #0
 8018726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018728:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801872c:	2200      	movs	r2, #0
 801872e:	601a      	str	r2, [r3, #0]
 8018730:	605a      	str	r2, [r3, #4]
 8018732:	609a      	str	r2, [r3, #8]
 8018734:	60da      	str	r2, [r3, #12]
 8018736:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8018738:	f107 0310 	add.w	r3, r7, #16
 801873c:	2294      	movs	r2, #148	; 0x94
 801873e:	2100      	movs	r1, #0
 8018740:	4618      	mov	r0, r3
 8018742:	f010 f9db 	bl	8028afc <memset>
  if(hpcd->Instance==USB)
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	681b      	ldr	r3, [r3, #0]
 801874a:	4a22      	ldr	r2, [pc, #136]	; (80187d4 <HAL_PCD_MspInit+0xb4>)
 801874c:	4293      	cmp	r3, r2
 801874e:	d13d      	bne.n	80187cc <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8018750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018754:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8018756:	2300      	movs	r3, #0
 8018758:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801875c:	f107 0310 	add.w	r3, r7, #16
 8018760:	4618      	mov	r0, r3
 8018762:	f004 fc77 	bl	801d054 <HAL_RCCEx_PeriphCLKConfig>
 8018766:	4603      	mov	r3, r0
 8018768:	2b00      	cmp	r3, #0
 801876a:	d001      	beq.n	8018770 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 801876c:	f7ff fb1d 	bl	8017daa <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018770:	4b19      	ldr	r3, [pc, #100]	; (80187d8 <HAL_PCD_MspInit+0xb8>)
 8018772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018774:	4a18      	ldr	r2, [pc, #96]	; (80187d8 <HAL_PCD_MspInit+0xb8>)
 8018776:	f043 0301 	orr.w	r3, r3, #1
 801877a:	64d3      	str	r3, [r2, #76]	; 0x4c
 801877c:	4b16      	ldr	r3, [pc, #88]	; (80187d8 <HAL_PCD_MspInit+0xb8>)
 801877e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018780:	f003 0301 	and.w	r3, r3, #1
 8018784:	60fb      	str	r3, [r7, #12]
 8018786:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018788:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801878c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018790:	2302      	movs	r3, #2
 8018792:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018796:	2300      	movs	r3, #0
 8018798:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801879c:	2300      	movs	r3, #0
 801879e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80187a2:	230a      	movs	r3, #10
 80187a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80187a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80187ac:	4619      	mov	r1, r3
 80187ae:	480b      	ldr	r0, [pc, #44]	; (80187dc <HAL_PCD_MspInit+0xbc>)
 80187b0:	f002 fb2c 	bl	801ae0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80187b4:	4b08      	ldr	r3, [pc, #32]	; (80187d8 <HAL_PCD_MspInit+0xb8>)
 80187b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80187b8:	4a07      	ldr	r2, [pc, #28]	; (80187d8 <HAL_PCD_MspInit+0xb8>)
 80187ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80187be:	65d3      	str	r3, [r2, #92]	; 0x5c
 80187c0:	4b05      	ldr	r3, [pc, #20]	; (80187d8 <HAL_PCD_MspInit+0xb8>)
 80187c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80187c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80187c8:	60bb      	str	r3, [r7, #8]
 80187ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80187cc:	bf00      	nop
 80187ce:	37b8      	adds	r7, #184	; 0xb8
 80187d0:	46bd      	mov	sp, r7
 80187d2:	bd80      	pop	{r7, pc}
 80187d4:	4000d400 	.word	0x4000d400
 80187d8:	40021000 	.word	0x40021000
 80187dc:	42020000 	.word	0x42020000

080187e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80187e0:	b580      	push	{r7, lr}
 80187e2:	b08c      	sub	sp, #48	; 0x30
 80187e4:	af00      	add	r7, sp, #0
 80187e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80187e8:	2300      	movs	r3, #0
 80187ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80187ec:	2300      	movs	r3, #0
 80187ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80187f0:	2200      	movs	r2, #0
 80187f2:	6879      	ldr	r1, [r7, #4]
 80187f4:	202d      	movs	r0, #45	; 0x2d
 80187f6:	f001 ff33 	bl	801a660 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80187fa:	202d      	movs	r0, #45	; 0x2d
 80187fc:	f001 ff4a 	bl	801a694 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8018800:	4b1f      	ldr	r3, [pc, #124]	; (8018880 <HAL_InitTick+0xa0>)
 8018802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018804:	4a1e      	ldr	r2, [pc, #120]	; (8018880 <HAL_InitTick+0xa0>)
 8018806:	f043 0301 	orr.w	r3, r3, #1
 801880a:	6593      	str	r3, [r2, #88]	; 0x58
 801880c:	4b1c      	ldr	r3, [pc, #112]	; (8018880 <HAL_InitTick+0xa0>)
 801880e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018810:	f003 0301 	and.w	r3, r3, #1
 8018814:	60fb      	str	r3, [r7, #12]
 8018816:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8018818:	f107 0210 	add.w	r2, r7, #16
 801881c:	f107 0314 	add.w	r3, r7, #20
 8018820:	4611      	mov	r1, r2
 8018822:	4618      	mov	r0, r3
 8018824:	f004 fb12 	bl	801ce4c <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8018828:	f004 fae8 	bl	801cdfc <HAL_RCC_GetPCLK1Freq>
 801882c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 801882e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018830:	4a14      	ldr	r2, [pc, #80]	; (8018884 <HAL_InitTick+0xa4>)
 8018832:	fba2 2303 	umull	r2, r3, r2, r3
 8018836:	0c9b      	lsrs	r3, r3, #18
 8018838:	3b01      	subs	r3, #1
 801883a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 801883c:	4b12      	ldr	r3, [pc, #72]	; (8018888 <HAL_InitTick+0xa8>)
 801883e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018842:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8018844:	4b10      	ldr	r3, [pc, #64]	; (8018888 <HAL_InitTick+0xa8>)
 8018846:	f240 32e7 	movw	r2, #999	; 0x3e7
 801884a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 801884c:	4a0e      	ldr	r2, [pc, #56]	; (8018888 <HAL_InitTick+0xa8>)
 801884e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018850:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8018852:	4b0d      	ldr	r3, [pc, #52]	; (8018888 <HAL_InitTick+0xa8>)
 8018854:	2200      	movs	r2, #0
 8018856:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8018858:	4b0b      	ldr	r3, [pc, #44]	; (8018888 <HAL_InitTick+0xa8>)
 801885a:	2200      	movs	r2, #0
 801885c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 801885e:	480a      	ldr	r0, [pc, #40]	; (8018888 <HAL_InitTick+0xa8>)
 8018860:	f006 f958 	bl	801eb14 <HAL_TIM_Base_Init>
 8018864:	4603      	mov	r3, r0
 8018866:	2b00      	cmp	r3, #0
 8018868:	d104      	bne.n	8018874 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 801886a:	4807      	ldr	r0, [pc, #28]	; (8018888 <HAL_InitTick+0xa8>)
 801886c:	f006 fa12 	bl	801ec94 <HAL_TIM_Base_Start_IT>
 8018870:	4603      	mov	r3, r0
 8018872:	e000      	b.n	8018876 <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 8018874:	2301      	movs	r3, #1
}
 8018876:	4618      	mov	r0, r3
 8018878:	3730      	adds	r7, #48	; 0x30
 801887a:	46bd      	mov	sp, r7
 801887c:	bd80      	pop	{r7, pc}
 801887e:	bf00      	nop
 8018880:	40021000 	.word	0x40021000
 8018884:	431bde83 	.word	0x431bde83
 8018888:	20000f8c 	.word	0x20000f8c

0801888c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 801888c:	b480      	push	{r7}
 801888e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8018890:	f3bf 8f4f 	dsb	sy
}
 8018894:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8018896:	4b06      	ldr	r3, [pc, #24]	; (80188b0 <__NVIC_SystemReset+0x24>)
 8018898:	68db      	ldr	r3, [r3, #12]
 801889a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801889e:	4904      	ldr	r1, [pc, #16]	; (80188b0 <__NVIC_SystemReset+0x24>)
 80188a0:	4b04      	ldr	r3, [pc, #16]	; (80188b4 <__NVIC_SystemReset+0x28>)
 80188a2:	4313      	orrs	r3, r2
 80188a4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80188a6:	f3bf 8f4f 	dsb	sy
}
 80188aa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80188ac:	bf00      	nop
 80188ae:	e7fd      	b.n	80188ac <__NVIC_SystemReset+0x20>
 80188b0:	e000ed00 	.word	0xe000ed00
 80188b4:	05fa0004 	.word	0x05fa0004

080188b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80188b8:	b480      	push	{r7}
 80188ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80188bc:	e7fe      	b.n	80188bc <NMI_Handler+0x4>

080188be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80188be:	b580      	push	{r7, lr}
 80188c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 80188c2:	f7ff ffe3 	bl	801888c <__NVIC_SystemReset>

080188c6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80188c6:	b480      	push	{r7}
 80188c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80188ca:	e7fe      	b.n	80188ca <MemManage_Handler+0x4>

080188cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80188cc:	b480      	push	{r7}
 80188ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80188d0:	e7fe      	b.n	80188d0 <BusFault_Handler+0x4>

080188d2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80188d2:	b480      	push	{r7}
 80188d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80188d6:	e7fe      	b.n	80188d6 <UsageFault_Handler+0x4>

080188d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80188d8:	b480      	push	{r7}
 80188da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80188dc:	bf00      	nop
 80188de:	46bd      	mov	sp, r7
 80188e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188e4:	4770      	bx	lr
	...

080188e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80188e8:	b580      	push	{r7, lr}
 80188ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80188ec:	4802      	ldr	r0, [pc, #8]	; (80188f8 <DMA1_Channel1_IRQHandler+0x10>)
 80188ee:	f002 f8bd 	bl	801aa6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80188f2:	bf00      	nop
 80188f4:	bd80      	pop	{r7, pc}
 80188f6:	bf00      	nop
 80188f8:	2000074c 	.word	0x2000074c

080188fc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80188fc:	b580      	push	{r7, lr}
 80188fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8018900:	4802      	ldr	r0, [pc, #8]	; (801890c <ADC1_2_IRQHandler+0x10>)
 8018902:	f000 fdbd 	bl	8019480 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8018906:	bf00      	nop
 8018908:	bd80      	pop	{r7, pc}
 801890a:	bf00      	nop
 801890c:	200006e4 	.word	0x200006e4

08018910 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8018910:	b580      	push	{r7, lr}
 8018912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8018914:	4802      	ldr	r0, [pc, #8]	; (8018920 <TIM1_CC_IRQHandler+0x10>)
 8018916:	f006 fe6b 	bl	801f5f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 801891a:	bf00      	nop
 801891c:	bd80      	pop	{r7, pc}
 801891e:	bf00      	nop
 8018920:	20000b18 	.word	0x20000b18

08018924 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8018924:	b580      	push	{r7, lr}
 8018926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8018928:	4802      	ldr	r0, [pc, #8]	; (8018934 <TIM2_IRQHandler+0x10>)
 801892a:	f006 fe61 	bl	801f5f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 801892e:	bf00      	nop
 8018930:	bd80      	pop	{r7, pc}
 8018932:	bf00      	nop
 8018934:	20000f8c 	.word	0x20000f8c

08018938 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8018938:	b580      	push	{r7, lr}
 801893a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 801893c:	4802      	ldr	r0, [pc, #8]	; (8018948 <TIM3_IRQHandler+0x10>)
 801893e:	f006 fe57 	bl	801f5f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8018942:	bf00      	nop
 8018944:	bd80      	pop	{r7, pc}
 8018946:	bf00      	nop
 8018948:	20000b64 	.word	0x20000b64

0801894c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 801894c:	b580      	push	{r7, lr}
 801894e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8018950:	4802      	ldr	r0, [pc, #8]	; (801895c <TIM6_IRQHandler+0x10>)
 8018952:	f006 fe4d 	bl	801f5f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8018956:	bf00      	nop
 8018958:	bd80      	pop	{r7, pc}
 801895a:	bf00      	nop
 801895c:	20000bfc 	.word	0x20000bfc

08018960 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 29.
  */
void UART4_IRQHandler(void)
{
 8018960:	b580      	push	{r7, lr}
 8018962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8018964:	4802      	ldr	r0, [pc, #8]	; (8018970 <UART4_IRQHandler+0x10>)
 8018966:	f008 fa05 	bl	8020d74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 801896a:	bf00      	nop
 801896c:	bd80      	pop	{r7, pc}
 801896e:	bf00      	nop
 8018970:	2000089c 	.word	0x2000089c

08018974 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8018974:	b480      	push	{r7}
 8018976:	af00      	add	r7, sp, #0
  return 1;
 8018978:	2301      	movs	r3, #1
}
 801897a:	4618      	mov	r0, r3
 801897c:	46bd      	mov	sp, r7
 801897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018982:	4770      	bx	lr

08018984 <_kill>:

int _kill(int pid, int sig)
{
 8018984:	b580      	push	{r7, lr}
 8018986:	b082      	sub	sp, #8
 8018988:	af00      	add	r7, sp, #0
 801898a:	6078      	str	r0, [r7, #4]
 801898c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 801898e:	f010 f911 	bl	8028bb4 <__errno>
 8018992:	4603      	mov	r3, r0
 8018994:	2216      	movs	r2, #22
 8018996:	601a      	str	r2, [r3, #0]
  return -1;
 8018998:	f04f 33ff 	mov.w	r3, #4294967295
}
 801899c:	4618      	mov	r0, r3
 801899e:	3708      	adds	r7, #8
 80189a0:	46bd      	mov	sp, r7
 80189a2:	bd80      	pop	{r7, pc}

080189a4 <_exit>:

void _exit (int status)
{
 80189a4:	b580      	push	{r7, lr}
 80189a6:	b082      	sub	sp, #8
 80189a8:	af00      	add	r7, sp, #0
 80189aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80189ac:	f04f 31ff 	mov.w	r1, #4294967295
 80189b0:	6878      	ldr	r0, [r7, #4]
 80189b2:	f7ff ffe7 	bl	8018984 <_kill>
  while (1) {}    /* Make sure we hang here */
 80189b6:	e7fe      	b.n	80189b6 <_exit+0x12>

080189b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80189b8:	b580      	push	{r7, lr}
 80189ba:	b086      	sub	sp, #24
 80189bc:	af00      	add	r7, sp, #0
 80189be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80189c0:	4a14      	ldr	r2, [pc, #80]	; (8018a14 <_sbrk+0x5c>)
 80189c2:	4b15      	ldr	r3, [pc, #84]	; (8018a18 <_sbrk+0x60>)
 80189c4:	1ad3      	subs	r3, r2, r3
 80189c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80189c8:	697b      	ldr	r3, [r7, #20]
 80189ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80189cc:	4b13      	ldr	r3, [pc, #76]	; (8018a1c <_sbrk+0x64>)
 80189ce:	681b      	ldr	r3, [r3, #0]
 80189d0:	2b00      	cmp	r3, #0
 80189d2:	d102      	bne.n	80189da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80189d4:	4b11      	ldr	r3, [pc, #68]	; (8018a1c <_sbrk+0x64>)
 80189d6:	4a12      	ldr	r2, [pc, #72]	; (8018a20 <_sbrk+0x68>)
 80189d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80189da:	4b10      	ldr	r3, [pc, #64]	; (8018a1c <_sbrk+0x64>)
 80189dc:	681a      	ldr	r2, [r3, #0]
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	4413      	add	r3, r2
 80189e2:	693a      	ldr	r2, [r7, #16]
 80189e4:	429a      	cmp	r2, r3
 80189e6:	d207      	bcs.n	80189f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80189e8:	f010 f8e4 	bl	8028bb4 <__errno>
 80189ec:	4603      	mov	r3, r0
 80189ee:	220c      	movs	r2, #12
 80189f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80189f2:	f04f 33ff 	mov.w	r3, #4294967295
 80189f6:	e009      	b.n	8018a0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80189f8:	4b08      	ldr	r3, [pc, #32]	; (8018a1c <_sbrk+0x64>)
 80189fa:	681b      	ldr	r3, [r3, #0]
 80189fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80189fe:	4b07      	ldr	r3, [pc, #28]	; (8018a1c <_sbrk+0x64>)
 8018a00:	681a      	ldr	r2, [r3, #0]
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	4413      	add	r3, r2
 8018a06:	4a05      	ldr	r2, [pc, #20]	; (8018a1c <_sbrk+0x64>)
 8018a08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8018a0a:	68fb      	ldr	r3, [r7, #12]
}
 8018a0c:	4618      	mov	r0, r3
 8018a0e:	3718      	adds	r7, #24
 8018a10:	46bd      	mov	sp, r7
 8018a12:	bd80      	pop	{r7, pc}
 8018a14:	20030000 	.word	0x20030000
 8018a18:	00000400 	.word	0x00000400
 8018a1c:	20000fd8 	.word	0x20000fd8
 8018a20:	20005e78 	.word	0x20005e78

08018a24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8018a24:	b480      	push	{r7}
 8018a26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8018a28:	4b06      	ldr	r3, [pc, #24]	; (8018a44 <SystemInit+0x20>)
 8018a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018a2e:	4a05      	ldr	r2, [pc, #20]	; (8018a44 <SystemInit+0x20>)
 8018a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8018a38:	bf00      	nop
 8018a3a:	46bd      	mov	sp, r7
 8018a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a40:	4770      	bx	lr
 8018a42:	bf00      	nop
 8018a44:	e000ed00 	.word	0xe000ed00

08018a48 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8018a48:	b480      	push	{r7}
 8018a4a:	b087      	sub	sp, #28
 8018a4c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8018a4e:	4b4f      	ldr	r3, [pc, #316]	; (8018b8c <SystemCoreClockUpdate+0x144>)
 8018a50:	681b      	ldr	r3, [r3, #0]
 8018a52:	f003 0308 	and.w	r3, r3, #8
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	d107      	bne.n	8018a6a <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8018a5a:	4b4c      	ldr	r3, [pc, #304]	; (8018b8c <SystemCoreClockUpdate+0x144>)
 8018a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8018a60:	0a1b      	lsrs	r3, r3, #8
 8018a62:	f003 030f 	and.w	r3, r3, #15
 8018a66:	617b      	str	r3, [r7, #20]
 8018a68:	e005      	b.n	8018a76 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8018a6a:	4b48      	ldr	r3, [pc, #288]	; (8018b8c <SystemCoreClockUpdate+0x144>)
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	091b      	lsrs	r3, r3, #4
 8018a70:	f003 030f 	and.w	r3, r3, #15
 8018a74:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8018a76:	4a46      	ldr	r2, [pc, #280]	; (8018b90 <SystemCoreClockUpdate+0x148>)
 8018a78:	697b      	ldr	r3, [r7, #20]
 8018a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018a7e:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8018a80:	4b42      	ldr	r3, [pc, #264]	; (8018b8c <SystemCoreClockUpdate+0x144>)
 8018a82:	689b      	ldr	r3, [r3, #8]
 8018a84:	f003 030c 	and.w	r3, r3, #12
 8018a88:	2b0c      	cmp	r3, #12
 8018a8a:	d866      	bhi.n	8018b5a <SystemCoreClockUpdate+0x112>
 8018a8c:	a201      	add	r2, pc, #4	; (adr r2, 8018a94 <SystemCoreClockUpdate+0x4c>)
 8018a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a92:	bf00      	nop
 8018a94:	08018ac9 	.word	0x08018ac9
 8018a98:	08018b5b 	.word	0x08018b5b
 8018a9c:	08018b5b 	.word	0x08018b5b
 8018aa0:	08018b5b 	.word	0x08018b5b
 8018aa4:	08018ad1 	.word	0x08018ad1
 8018aa8:	08018b5b 	.word	0x08018b5b
 8018aac:	08018b5b 	.word	0x08018b5b
 8018ab0:	08018b5b 	.word	0x08018b5b
 8018ab4:	08018ad9 	.word	0x08018ad9
 8018ab8:	08018b5b 	.word	0x08018b5b
 8018abc:	08018b5b 	.word	0x08018b5b
 8018ac0:	08018b5b 	.word	0x08018b5b
 8018ac4:	08018ae1 	.word	0x08018ae1
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8018ac8:	4a32      	ldr	r2, [pc, #200]	; (8018b94 <SystemCoreClockUpdate+0x14c>)
 8018aca:	697b      	ldr	r3, [r7, #20]
 8018acc:	6013      	str	r3, [r2, #0]
      break;
 8018ace:	e048      	b.n	8018b62 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8018ad0:	4b30      	ldr	r3, [pc, #192]	; (8018b94 <SystemCoreClockUpdate+0x14c>)
 8018ad2:	4a31      	ldr	r2, [pc, #196]	; (8018b98 <SystemCoreClockUpdate+0x150>)
 8018ad4:	601a      	str	r2, [r3, #0]
      break;
 8018ad6:	e044      	b.n	8018b62 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8018ad8:	4b2e      	ldr	r3, [pc, #184]	; (8018b94 <SystemCoreClockUpdate+0x14c>)
 8018ada:	4a30      	ldr	r2, [pc, #192]	; (8018b9c <SystemCoreClockUpdate+0x154>)
 8018adc:	601a      	str	r2, [r3, #0]
      break;
 8018ade:	e040      	b.n	8018b62 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8018ae0:	4b2a      	ldr	r3, [pc, #168]	; (8018b8c <SystemCoreClockUpdate+0x144>)
 8018ae2:	68db      	ldr	r3, [r3, #12]
 8018ae4:	f003 0303 	and.w	r3, r3, #3
 8018ae8:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8018aea:	4b28      	ldr	r3, [pc, #160]	; (8018b8c <SystemCoreClockUpdate+0x144>)
 8018aec:	68db      	ldr	r3, [r3, #12]
 8018aee:	091b      	lsrs	r3, r3, #4
 8018af0:	f003 030f 	and.w	r3, r3, #15
 8018af4:	3301      	adds	r3, #1
 8018af6:	60bb      	str	r3, [r7, #8]
 8018af8:	68fb      	ldr	r3, [r7, #12]
 8018afa:	2b02      	cmp	r3, #2
 8018afc:	d003      	beq.n	8018b06 <SystemCoreClockUpdate+0xbe>
 8018afe:	68fb      	ldr	r3, [r7, #12]
 8018b00:	2b03      	cmp	r3, #3
 8018b02:	d006      	beq.n	8018b12 <SystemCoreClockUpdate+0xca>
 8018b04:	e00b      	b.n	8018b1e <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8018b06:	4a24      	ldr	r2, [pc, #144]	; (8018b98 <SystemCoreClockUpdate+0x150>)
 8018b08:	68bb      	ldr	r3, [r7, #8]
 8018b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8018b0e:	613b      	str	r3, [r7, #16]
          break;
 8018b10:	e00b      	b.n	8018b2a <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8018b12:	4a22      	ldr	r2, [pc, #136]	; (8018b9c <SystemCoreClockUpdate+0x154>)
 8018b14:	68bb      	ldr	r3, [r7, #8]
 8018b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8018b1a:	613b      	str	r3, [r7, #16]
          break;
 8018b1c:	e005      	b.n	8018b2a <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8018b1e:	697a      	ldr	r2, [r7, #20]
 8018b20:	68bb      	ldr	r3, [r7, #8]
 8018b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8018b26:	613b      	str	r3, [r7, #16]
          break;
 8018b28:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8018b2a:	4b18      	ldr	r3, [pc, #96]	; (8018b8c <SystemCoreClockUpdate+0x144>)
 8018b2c:	68db      	ldr	r3, [r3, #12]
 8018b2e:	0a1b      	lsrs	r3, r3, #8
 8018b30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018b34:	693b      	ldr	r3, [r7, #16]
 8018b36:	fb02 f303 	mul.w	r3, r2, r3
 8018b3a:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8018b3c:	4b13      	ldr	r3, [pc, #76]	; (8018b8c <SystemCoreClockUpdate+0x144>)
 8018b3e:	68db      	ldr	r3, [r3, #12]
 8018b40:	0e5b      	lsrs	r3, r3, #25
 8018b42:	f003 0303 	and.w	r3, r3, #3
 8018b46:	3301      	adds	r3, #1
 8018b48:	005b      	lsls	r3, r3, #1
 8018b4a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8018b4c:	693a      	ldr	r2, [r7, #16]
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8018b54:	4a0f      	ldr	r2, [pc, #60]	; (8018b94 <SystemCoreClockUpdate+0x14c>)
 8018b56:	6013      	str	r3, [r2, #0]
      break;
 8018b58:	e003      	b.n	8018b62 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8018b5a:	4a0e      	ldr	r2, [pc, #56]	; (8018b94 <SystemCoreClockUpdate+0x14c>)
 8018b5c:	697b      	ldr	r3, [r7, #20]
 8018b5e:	6013      	str	r3, [r2, #0]
      break;
 8018b60:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8018b62:	4b0a      	ldr	r3, [pc, #40]	; (8018b8c <SystemCoreClockUpdate+0x144>)
 8018b64:	689b      	ldr	r3, [r3, #8]
 8018b66:	091b      	lsrs	r3, r3, #4
 8018b68:	f003 030f 	and.w	r3, r3, #15
 8018b6c:	4a0c      	ldr	r2, [pc, #48]	; (8018ba0 <SystemCoreClockUpdate+0x158>)
 8018b6e:	5cd3      	ldrb	r3, [r2, r3]
 8018b70:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8018b72:	4b08      	ldr	r3, [pc, #32]	; (8018b94 <SystemCoreClockUpdate+0x14c>)
 8018b74:	681a      	ldr	r2, [r3, #0]
 8018b76:	683b      	ldr	r3, [r7, #0]
 8018b78:	fa22 f303 	lsr.w	r3, r2, r3
 8018b7c:	4a05      	ldr	r2, [pc, #20]	; (8018b94 <SystemCoreClockUpdate+0x14c>)
 8018b7e:	6013      	str	r3, [r2, #0]
}
 8018b80:	bf00      	nop
 8018b82:	371c      	adds	r7, #28
 8018b84:	46bd      	mov	sp, r7
 8018b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b8a:	4770      	bx	lr
 8018b8c:	40021000 	.word	0x40021000
 8018b90:	080298c8 	.word	0x080298c8
 8018b94:	20000090 	.word	0x20000090
 8018b98:	00f42400 	.word	0x00f42400
 8018b9c:	007a1200 	.word	0x007a1200
 8018ba0:	080298b0 	.word	0x080298b0

08018ba4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8018ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8018bdc <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8018ba8:	f7ff ff3c 	bl	8018a24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8018bac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8018bae:	e003      	b.n	8018bb8 <LoopCopyDataInit>

08018bb0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8018bb0:	4b0b      	ldr	r3, [pc, #44]	; (8018be0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8018bb2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8018bb4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8018bb6:	3104      	adds	r1, #4

08018bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8018bb8:	480a      	ldr	r0, [pc, #40]	; (8018be4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8018bba:	4b0b      	ldr	r3, [pc, #44]	; (8018be8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8018bbc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8018bbe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8018bc0:	d3f6      	bcc.n	8018bb0 <CopyDataInit>
	ldr	r2, =_sbss
 8018bc2:	4a0a      	ldr	r2, [pc, #40]	; (8018bec <LoopForever+0x12>)
	b	LoopFillZerobss
 8018bc4:	e002      	b.n	8018bcc <LoopFillZerobss>

08018bc6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8018bc6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8018bc8:	f842 3b04 	str.w	r3, [r2], #4

08018bcc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8018bcc:	4b08      	ldr	r3, [pc, #32]	; (8018bf0 <LoopForever+0x16>)
	cmp	r2, r3
 8018bce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8018bd0:	d3f9      	bcc.n	8018bc6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8018bd2:	f00f fff5 	bl	8028bc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8018bd6:	f7fd ffd5 	bl	8016b84 <main>

08018bda <LoopForever>:

LoopForever:
    b LoopForever
 8018bda:	e7fe      	b.n	8018bda <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8018bdc:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8018be0:	0802a098 	.word	0x0802a098
	ldr	r0, =_sdata
 8018be4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8018be8:	20000100 	.word	0x20000100
	ldr	r2, =_sbss
 8018bec:	20000100 	.word	0x20000100
	ldr	r3, = _ebss
 8018bf0:	20005e74 	.word	0x20005e74

08018bf4 <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8018bf4:	e7fe      	b.n	8018bf4 <COMP_IRQHandler>

08018bf6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8018bf6:	b580      	push	{r7, lr}
 8018bf8:	b082      	sub	sp, #8
 8018bfa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8018bfc:	2300      	movs	r3, #0
 8018bfe:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8018c00:	2004      	movs	r0, #4
 8018c02:	f001 fd22 	bl	801a64a <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8018c06:	f7ff ff1f 	bl	8018a48 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8018c0a:	2007      	movs	r0, #7
 8018c0c:	f7ff fde8 	bl	80187e0 <HAL_InitTick>
 8018c10:	4603      	mov	r3, r0
 8018c12:	2b00      	cmp	r3, #0
 8018c14:	d002      	beq.n	8018c1c <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8018c16:	2301      	movs	r3, #1
 8018c18:	71fb      	strb	r3, [r7, #7]
 8018c1a:	e001      	b.n	8018c20 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8018c1c:	f7ff f8ca 	bl	8017db4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8018c20:	79fb      	ldrb	r3, [r7, #7]
}
 8018c22:	4618      	mov	r0, r3
 8018c24:	3708      	adds	r7, #8
 8018c26:	46bd      	mov	sp, r7
 8018c28:	bd80      	pop	{r7, pc}
	...

08018c2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8018c2c:	b480      	push	{r7}
 8018c2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8018c30:	4b06      	ldr	r3, [pc, #24]	; (8018c4c <HAL_IncTick+0x20>)
 8018c32:	781b      	ldrb	r3, [r3, #0]
 8018c34:	461a      	mov	r2, r3
 8018c36:	4b06      	ldr	r3, [pc, #24]	; (8018c50 <HAL_IncTick+0x24>)
 8018c38:	681b      	ldr	r3, [r3, #0]
 8018c3a:	4413      	add	r3, r2
 8018c3c:	4a04      	ldr	r2, [pc, #16]	; (8018c50 <HAL_IncTick+0x24>)
 8018c3e:	6013      	str	r3, [r2, #0]
}
 8018c40:	bf00      	nop
 8018c42:	46bd      	mov	sp, r7
 8018c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c48:	4770      	bx	lr
 8018c4a:	bf00      	nop
 8018c4c:	20000098 	.word	0x20000098
 8018c50:	20000fdc 	.word	0x20000fdc

08018c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8018c54:	b480      	push	{r7}
 8018c56:	af00      	add	r7, sp, #0
  return uwTick;
 8018c58:	4b03      	ldr	r3, [pc, #12]	; (8018c68 <HAL_GetTick+0x14>)
 8018c5a:	681b      	ldr	r3, [r3, #0]
}
 8018c5c:	4618      	mov	r0, r3
 8018c5e:	46bd      	mov	sp, r7
 8018c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c64:	4770      	bx	lr
 8018c66:	bf00      	nop
 8018c68:	20000fdc 	.word	0x20000fdc

08018c6c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8018c6c:	b480      	push	{r7}
 8018c6e:	b083      	sub	sp, #12
 8018c70:	af00      	add	r7, sp, #0
 8018c72:	6078      	str	r0, [r7, #4]
 8018c74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	689b      	ldr	r3, [r3, #8]
 8018c7a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8018c7e:	683b      	ldr	r3, [r7, #0]
 8018c80:	431a      	orrs	r2, r3
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	609a      	str	r2, [r3, #8]
}
 8018c86:	bf00      	nop
 8018c88:	370c      	adds	r7, #12
 8018c8a:	46bd      	mov	sp, r7
 8018c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c90:	4770      	bx	lr

08018c92 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8018c92:	b480      	push	{r7}
 8018c94:	b083      	sub	sp, #12
 8018c96:	af00      	add	r7, sp, #0
 8018c98:	6078      	str	r0, [r7, #4]
 8018c9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	689b      	ldr	r3, [r3, #8]
 8018ca0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8018ca4:	683b      	ldr	r3, [r7, #0]
 8018ca6:	431a      	orrs	r2, r3
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	609a      	str	r2, [r3, #8]
}
 8018cac:	bf00      	nop
 8018cae:	370c      	adds	r7, #12
 8018cb0:	46bd      	mov	sp, r7
 8018cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cb6:	4770      	bx	lr

08018cb8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8018cb8:	b480      	push	{r7}
 8018cba:	b083      	sub	sp, #12
 8018cbc:	af00      	add	r7, sp, #0
 8018cbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	689b      	ldr	r3, [r3, #8]
 8018cc4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8018cc8:	4618      	mov	r0, r3
 8018cca:	370c      	adds	r7, #12
 8018ccc:	46bd      	mov	sp, r7
 8018cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cd2:	4770      	bx	lr

08018cd4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8018cd4:	b480      	push	{r7}
 8018cd6:	b087      	sub	sp, #28
 8018cd8:	af00      	add	r7, sp, #0
 8018cda:	60f8      	str	r0, [r7, #12]
 8018cdc:	60b9      	str	r1, [r7, #8]
 8018cde:	607a      	str	r2, [r7, #4]
 8018ce0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018ce2:	68fb      	ldr	r3, [r7, #12]
 8018ce4:	3360      	adds	r3, #96	; 0x60
 8018ce6:	461a      	mov	r2, r3
 8018ce8:	68bb      	ldr	r3, [r7, #8]
 8018cea:	009b      	lsls	r3, r3, #2
 8018cec:	4413      	add	r3, r2
 8018cee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018cf0:	697b      	ldr	r3, [r7, #20]
 8018cf2:	681a      	ldr	r2, [r3, #0]
 8018cf4:	4b08      	ldr	r3, [pc, #32]	; (8018d18 <LL_ADC_SetOffset+0x44>)
 8018cf6:	4013      	ands	r3, r2
 8018cf8:	687a      	ldr	r2, [r7, #4]
 8018cfa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8018cfe:	683a      	ldr	r2, [r7, #0]
 8018d00:	430a      	orrs	r2, r1
 8018d02:	4313      	orrs	r3, r2
 8018d04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8018d08:	697b      	ldr	r3, [r7, #20]
 8018d0a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8018d0c:	bf00      	nop
 8018d0e:	371c      	adds	r7, #28
 8018d10:	46bd      	mov	sp, r7
 8018d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d16:	4770      	bx	lr
 8018d18:	03fff000 	.word	0x03fff000

08018d1c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8018d1c:	b480      	push	{r7}
 8018d1e:	b085      	sub	sp, #20
 8018d20:	af00      	add	r7, sp, #0
 8018d22:	6078      	str	r0, [r7, #4]
 8018d24:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	3360      	adds	r3, #96	; 0x60
 8018d2a:	461a      	mov	r2, r3
 8018d2c:	683b      	ldr	r3, [r7, #0]
 8018d2e:	009b      	lsls	r3, r3, #2
 8018d30:	4413      	add	r3, r2
 8018d32:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8018d34:	68fb      	ldr	r3, [r7, #12]
 8018d36:	681b      	ldr	r3, [r3, #0]
 8018d38:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8018d3c:	4618      	mov	r0, r3
 8018d3e:	3714      	adds	r7, #20
 8018d40:	46bd      	mov	sp, r7
 8018d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d46:	4770      	bx	lr

08018d48 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8018d48:	b480      	push	{r7}
 8018d4a:	b087      	sub	sp, #28
 8018d4c:	af00      	add	r7, sp, #0
 8018d4e:	60f8      	str	r0, [r7, #12]
 8018d50:	60b9      	str	r1, [r7, #8]
 8018d52:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018d54:	68fb      	ldr	r3, [r7, #12]
 8018d56:	3360      	adds	r3, #96	; 0x60
 8018d58:	461a      	mov	r2, r3
 8018d5a:	68bb      	ldr	r3, [r7, #8]
 8018d5c:	009b      	lsls	r3, r3, #2
 8018d5e:	4413      	add	r3, r2
 8018d60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018d62:	697b      	ldr	r3, [r7, #20]
 8018d64:	681b      	ldr	r3, [r3, #0]
 8018d66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	431a      	orrs	r2, r3
 8018d6e:	697b      	ldr	r3, [r7, #20]
 8018d70:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8018d72:	bf00      	nop
 8018d74:	371c      	adds	r7, #28
 8018d76:	46bd      	mov	sp, r7
 8018d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d7c:	4770      	bx	lr

08018d7e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8018d7e:	b480      	push	{r7}
 8018d80:	b083      	sub	sp, #12
 8018d82:	af00      	add	r7, sp, #0
 8018d84:	6078      	str	r0, [r7, #4]
 8018d86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	695b      	ldr	r3, [r3, #20]
 8018d8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018d90:	683b      	ldr	r3, [r7, #0]
 8018d92:	431a      	orrs	r2, r3
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	615a      	str	r2, [r3, #20]
}
 8018d98:	bf00      	nop
 8018d9a:	370c      	adds	r7, #12
 8018d9c:	46bd      	mov	sp, r7
 8018d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018da2:	4770      	bx	lr

08018da4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8018da4:	b480      	push	{r7}
 8018da6:	b083      	sub	sp, #12
 8018da8:	af00      	add	r7, sp, #0
 8018daa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	68db      	ldr	r3, [r3, #12]
 8018db0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d101      	bne.n	8018dbc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8018db8:	2301      	movs	r3, #1
 8018dba:	e000      	b.n	8018dbe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8018dbc:	2300      	movs	r3, #0
}
 8018dbe:	4618      	mov	r0, r3
 8018dc0:	370c      	adds	r7, #12
 8018dc2:	46bd      	mov	sp, r7
 8018dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dc8:	4770      	bx	lr

08018dca <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8018dca:	b480      	push	{r7}
 8018dcc:	b087      	sub	sp, #28
 8018dce:	af00      	add	r7, sp, #0
 8018dd0:	60f8      	str	r0, [r7, #12]
 8018dd2:	60b9      	str	r1, [r7, #8]
 8018dd4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8018dd6:	68fb      	ldr	r3, [r7, #12]
 8018dd8:	3330      	adds	r3, #48	; 0x30
 8018dda:	461a      	mov	r2, r3
 8018ddc:	68bb      	ldr	r3, [r7, #8]
 8018dde:	0a1b      	lsrs	r3, r3, #8
 8018de0:	009b      	lsls	r3, r3, #2
 8018de2:	f003 030c 	and.w	r3, r3, #12
 8018de6:	4413      	add	r3, r2
 8018de8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8018dea:	697b      	ldr	r3, [r7, #20]
 8018dec:	681a      	ldr	r2, [r3, #0]
 8018dee:	68bb      	ldr	r3, [r7, #8]
 8018df0:	f003 031f 	and.w	r3, r3, #31
 8018df4:	211f      	movs	r1, #31
 8018df6:	fa01 f303 	lsl.w	r3, r1, r3
 8018dfa:	43db      	mvns	r3, r3
 8018dfc:	401a      	ands	r2, r3
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	0e9b      	lsrs	r3, r3, #26
 8018e02:	f003 011f 	and.w	r1, r3, #31
 8018e06:	68bb      	ldr	r3, [r7, #8]
 8018e08:	f003 031f 	and.w	r3, r3, #31
 8018e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8018e10:	431a      	orrs	r2, r3
 8018e12:	697b      	ldr	r3, [r7, #20]
 8018e14:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8018e16:	bf00      	nop
 8018e18:	371c      	adds	r7, #28
 8018e1a:	46bd      	mov	sp, r7
 8018e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e20:	4770      	bx	lr

08018e22 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8018e22:	b480      	push	{r7}
 8018e24:	b083      	sub	sp, #12
 8018e26:	af00      	add	r7, sp, #0
 8018e28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018e2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d101      	bne.n	8018e3a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8018e36:	2301      	movs	r3, #1
 8018e38:	e000      	b.n	8018e3c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8018e3a:	2300      	movs	r3, #0
}
 8018e3c:	4618      	mov	r0, r3
 8018e3e:	370c      	adds	r7, #12
 8018e40:	46bd      	mov	sp, r7
 8018e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e46:	4770      	bx	lr

08018e48 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8018e48:	b480      	push	{r7}
 8018e4a:	b087      	sub	sp, #28
 8018e4c:	af00      	add	r7, sp, #0
 8018e4e:	60f8      	str	r0, [r7, #12]
 8018e50:	60b9      	str	r1, [r7, #8]
 8018e52:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8018e54:	68fb      	ldr	r3, [r7, #12]
 8018e56:	3314      	adds	r3, #20
 8018e58:	461a      	mov	r2, r3
 8018e5a:	68bb      	ldr	r3, [r7, #8]
 8018e5c:	0e5b      	lsrs	r3, r3, #25
 8018e5e:	009b      	lsls	r3, r3, #2
 8018e60:	f003 0304 	and.w	r3, r3, #4
 8018e64:	4413      	add	r3, r2
 8018e66:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8018e68:	697b      	ldr	r3, [r7, #20]
 8018e6a:	681a      	ldr	r2, [r3, #0]
 8018e6c:	68bb      	ldr	r3, [r7, #8]
 8018e6e:	0d1b      	lsrs	r3, r3, #20
 8018e70:	f003 031f 	and.w	r3, r3, #31
 8018e74:	2107      	movs	r1, #7
 8018e76:	fa01 f303 	lsl.w	r3, r1, r3
 8018e7a:	43db      	mvns	r3, r3
 8018e7c:	401a      	ands	r2, r3
 8018e7e:	68bb      	ldr	r3, [r7, #8]
 8018e80:	0d1b      	lsrs	r3, r3, #20
 8018e82:	f003 031f 	and.w	r3, r3, #31
 8018e86:	6879      	ldr	r1, [r7, #4]
 8018e88:	fa01 f303 	lsl.w	r3, r1, r3
 8018e8c:	431a      	orrs	r2, r3
 8018e8e:	697b      	ldr	r3, [r7, #20]
 8018e90:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8018e92:	bf00      	nop
 8018e94:	371c      	adds	r7, #28
 8018e96:	46bd      	mov	sp, r7
 8018e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e9c:	4770      	bx	lr
	...

08018ea0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8018ea0:	b480      	push	{r7}
 8018ea2:	b085      	sub	sp, #20
 8018ea4:	af00      	add	r7, sp, #0
 8018ea6:	60f8      	str	r0, [r7, #12]
 8018ea8:	60b9      	str	r1, [r7, #8]
 8018eaa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8018eac:	68fb      	ldr	r3, [r7, #12]
 8018eae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8018eb2:	68bb      	ldr	r3, [r7, #8]
 8018eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8018eb8:	43db      	mvns	r3, r3
 8018eba:	401a      	ands	r2, r3
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	f003 0318 	and.w	r3, r3, #24
 8018ec2:	4908      	ldr	r1, [pc, #32]	; (8018ee4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8018ec4:	40d9      	lsrs	r1, r3
 8018ec6:	68bb      	ldr	r3, [r7, #8]
 8018ec8:	400b      	ands	r3, r1
 8018eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8018ece:	431a      	orrs	r2, r3
 8018ed0:	68fb      	ldr	r3, [r7, #12]
 8018ed2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8018ed6:	bf00      	nop
 8018ed8:	3714      	adds	r7, #20
 8018eda:	46bd      	mov	sp, r7
 8018edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ee0:	4770      	bx	lr
 8018ee2:	bf00      	nop
 8018ee4:	0007ffff 	.word	0x0007ffff

08018ee8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8018ee8:	b480      	push	{r7}
 8018eea:	b083      	sub	sp, #12
 8018eec:	af00      	add	r7, sp, #0
 8018eee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	689b      	ldr	r3, [r3, #8]
 8018ef4:	f003 031f 	and.w	r3, r3, #31
}
 8018ef8:	4618      	mov	r0, r3
 8018efa:	370c      	adds	r7, #12
 8018efc:	46bd      	mov	sp, r7
 8018efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f02:	4770      	bx	lr

08018f04 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8018f04:	b480      	push	{r7}
 8018f06:	b083      	sub	sp, #12
 8018f08:	af00      	add	r7, sp, #0
 8018f0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	689b      	ldr	r3, [r3, #8]
 8018f10:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8018f14:	4618      	mov	r0, r3
 8018f16:	370c      	adds	r7, #12
 8018f18:	46bd      	mov	sp, r7
 8018f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f1e:	4770      	bx	lr

08018f20 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8018f20:	b480      	push	{r7}
 8018f22:	b083      	sub	sp, #12
 8018f24:	af00      	add	r7, sp, #0
 8018f26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	689b      	ldr	r3, [r3, #8]
 8018f2c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8018f30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018f34:	687a      	ldr	r2, [r7, #4]
 8018f36:	6093      	str	r3, [r2, #8]
}
 8018f38:	bf00      	nop
 8018f3a:	370c      	adds	r7, #12
 8018f3c:	46bd      	mov	sp, r7
 8018f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f42:	4770      	bx	lr

08018f44 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8018f44:	b480      	push	{r7}
 8018f46:	b083      	sub	sp, #12
 8018f48:	af00      	add	r7, sp, #0
 8018f4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	689b      	ldr	r3, [r3, #8]
 8018f50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8018f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8018f58:	d101      	bne.n	8018f5e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8018f5a:	2301      	movs	r3, #1
 8018f5c:	e000      	b.n	8018f60 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8018f5e:	2300      	movs	r3, #0
}
 8018f60:	4618      	mov	r0, r3
 8018f62:	370c      	adds	r7, #12
 8018f64:	46bd      	mov	sp, r7
 8018f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f6a:	4770      	bx	lr

08018f6c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8018f6c:	b480      	push	{r7}
 8018f6e:	b083      	sub	sp, #12
 8018f70:	af00      	add	r7, sp, #0
 8018f72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	689b      	ldr	r3, [r3, #8]
 8018f78:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8018f7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018f80:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8018f88:	bf00      	nop
 8018f8a:	370c      	adds	r7, #12
 8018f8c:	46bd      	mov	sp, r7
 8018f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f92:	4770      	bx	lr

08018f94 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8018f94:	b480      	push	{r7}
 8018f96:	b083      	sub	sp, #12
 8018f98:	af00      	add	r7, sp, #0
 8018f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	689b      	ldr	r3, [r3, #8]
 8018fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018fa4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8018fa8:	d101      	bne.n	8018fae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8018faa:	2301      	movs	r3, #1
 8018fac:	e000      	b.n	8018fb0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8018fae:	2300      	movs	r3, #0
}
 8018fb0:	4618      	mov	r0, r3
 8018fb2:	370c      	adds	r7, #12
 8018fb4:	46bd      	mov	sp, r7
 8018fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fba:	4770      	bx	lr

08018fbc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8018fbc:	b480      	push	{r7}
 8018fbe:	b083      	sub	sp, #12
 8018fc0:	af00      	add	r7, sp, #0
 8018fc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	689b      	ldr	r3, [r3, #8]
 8018fc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018fcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018fd0:	f043 0201 	orr.w	r2, r3, #1
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8018fd8:	bf00      	nop
 8018fda:	370c      	adds	r7, #12
 8018fdc:	46bd      	mov	sp, r7
 8018fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fe2:	4770      	bx	lr

08018fe4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8018fe4:	b480      	push	{r7}
 8018fe6:	b083      	sub	sp, #12
 8018fe8:	af00      	add	r7, sp, #0
 8018fea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	689b      	ldr	r3, [r3, #8]
 8018ff0:	f003 0301 	and.w	r3, r3, #1
 8018ff4:	2b01      	cmp	r3, #1
 8018ff6:	d101      	bne.n	8018ffc <LL_ADC_IsEnabled+0x18>
 8018ff8:	2301      	movs	r3, #1
 8018ffa:	e000      	b.n	8018ffe <LL_ADC_IsEnabled+0x1a>
 8018ffc:	2300      	movs	r3, #0
}
 8018ffe:	4618      	mov	r0, r3
 8019000:	370c      	adds	r7, #12
 8019002:	46bd      	mov	sp, r7
 8019004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019008:	4770      	bx	lr

0801900a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 801900a:	b480      	push	{r7}
 801900c:	b083      	sub	sp, #12
 801900e:	af00      	add	r7, sp, #0
 8019010:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	689b      	ldr	r3, [r3, #8]
 8019016:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801901a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801901e:	f043 0204 	orr.w	r2, r3, #4
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8019026:	bf00      	nop
 8019028:	370c      	adds	r7, #12
 801902a:	46bd      	mov	sp, r7
 801902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019030:	4770      	bx	lr

08019032 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8019032:	b480      	push	{r7}
 8019034:	b083      	sub	sp, #12
 8019036:	af00      	add	r7, sp, #0
 8019038:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	689b      	ldr	r3, [r3, #8]
 801903e:	f003 0304 	and.w	r3, r3, #4
 8019042:	2b04      	cmp	r3, #4
 8019044:	d101      	bne.n	801904a <LL_ADC_REG_IsConversionOngoing+0x18>
 8019046:	2301      	movs	r3, #1
 8019048:	e000      	b.n	801904c <LL_ADC_REG_IsConversionOngoing+0x1a>
 801904a:	2300      	movs	r3, #0
}
 801904c:	4618      	mov	r0, r3
 801904e:	370c      	adds	r7, #12
 8019050:	46bd      	mov	sp, r7
 8019052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019056:	4770      	bx	lr

08019058 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8019058:	b480      	push	{r7}
 801905a:	b083      	sub	sp, #12
 801905c:	af00      	add	r7, sp, #0
 801905e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	689b      	ldr	r3, [r3, #8]
 8019064:	f003 0308 	and.w	r3, r3, #8
 8019068:	2b08      	cmp	r3, #8
 801906a:	d101      	bne.n	8019070 <LL_ADC_INJ_IsConversionOngoing+0x18>
 801906c:	2301      	movs	r3, #1
 801906e:	e000      	b.n	8019072 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8019070:	2300      	movs	r3, #0
}
 8019072:	4618      	mov	r0, r3
 8019074:	370c      	adds	r7, #12
 8019076:	46bd      	mov	sp, r7
 8019078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801907c:	4770      	bx	lr
	...

08019080 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8019080:	b590      	push	{r4, r7, lr}
 8019082:	b089      	sub	sp, #36	; 0x24
 8019084:	af00      	add	r7, sp, #0
 8019086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8019088:	2300      	movs	r3, #0
 801908a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 801908c:	2300      	movs	r3, #0
 801908e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	2b00      	cmp	r3, #0
 8019094:	d101      	bne.n	801909a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8019096:	2301      	movs	r3, #1
 8019098:	e12e      	b.n	80192f8 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	691b      	ldr	r3, [r3, #16]
 801909e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	d109      	bne.n	80190bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80190a8:	6878      	ldr	r0, [r7, #4]
 80190aa:	f7fe feab 	bl	8017e04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	2200      	movs	r2, #0
 80190b2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	2200      	movs	r2, #0
 80190b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	681b      	ldr	r3, [r3, #0]
 80190c0:	4618      	mov	r0, r3
 80190c2:	f7ff ff3f 	bl	8018f44 <LL_ADC_IsDeepPowerDownEnabled>
 80190c6:	4603      	mov	r3, r0
 80190c8:	2b00      	cmp	r3, #0
 80190ca:	d004      	beq.n	80190d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	681b      	ldr	r3, [r3, #0]
 80190d0:	4618      	mov	r0, r3
 80190d2:	f7ff ff25 	bl	8018f20 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80190d6:	687b      	ldr	r3, [r7, #4]
 80190d8:	681b      	ldr	r3, [r3, #0]
 80190da:	4618      	mov	r0, r3
 80190dc:	f7ff ff5a 	bl	8018f94 <LL_ADC_IsInternalRegulatorEnabled>
 80190e0:	4603      	mov	r3, r0
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	d115      	bne.n	8019112 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	681b      	ldr	r3, [r3, #0]
 80190ea:	4618      	mov	r0, r3
 80190ec:	f7ff ff3e 	bl	8018f6c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80190f0:	4b83      	ldr	r3, [pc, #524]	; (8019300 <HAL_ADC_Init+0x280>)
 80190f2:	681b      	ldr	r3, [r3, #0]
 80190f4:	099b      	lsrs	r3, r3, #6
 80190f6:	4a83      	ldr	r2, [pc, #524]	; (8019304 <HAL_ADC_Init+0x284>)
 80190f8:	fba2 2303 	umull	r2, r3, r2, r3
 80190fc:	099b      	lsrs	r3, r3, #6
 80190fe:	3301      	adds	r3, #1
 8019100:	005b      	lsls	r3, r3, #1
 8019102:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8019104:	e002      	b.n	801910c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8019106:	68fb      	ldr	r3, [r7, #12]
 8019108:	3b01      	subs	r3, #1
 801910a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 801910c:	68fb      	ldr	r3, [r7, #12]
 801910e:	2b00      	cmp	r3, #0
 8019110:	d1f9      	bne.n	8019106 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8019112:	687b      	ldr	r3, [r7, #4]
 8019114:	681b      	ldr	r3, [r3, #0]
 8019116:	4618      	mov	r0, r3
 8019118:	f7ff ff3c 	bl	8018f94 <LL_ADC_IsInternalRegulatorEnabled>
 801911c:	4603      	mov	r3, r0
 801911e:	2b00      	cmp	r3, #0
 8019120:	d10d      	bne.n	801913e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019126:	f043 0210 	orr.w	r2, r3, #16
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801912e:	687b      	ldr	r3, [r7, #4]
 8019130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019132:	f043 0201 	orr.w	r2, r3, #1
 8019136:	687b      	ldr	r3, [r7, #4]
 8019138:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 801913a:	2301      	movs	r3, #1
 801913c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	681b      	ldr	r3, [r3, #0]
 8019142:	4618      	mov	r0, r3
 8019144:	f7ff ff75 	bl	8019032 <LL_ADC_REG_IsConversionOngoing>
 8019148:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801914e:	f003 0310 	and.w	r3, r3, #16
 8019152:	2b00      	cmp	r3, #0
 8019154:	f040 80c7 	bne.w	80192e6 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8019158:	697b      	ldr	r3, [r7, #20]
 801915a:	2b00      	cmp	r3, #0
 801915c:	f040 80c3 	bne.w	80192e6 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019164:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8019168:	f043 0202 	orr.w	r2, r3, #2
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8019170:	687b      	ldr	r3, [r7, #4]
 8019172:	681b      	ldr	r3, [r3, #0]
 8019174:	4618      	mov	r0, r3
 8019176:	f7ff ff35 	bl	8018fe4 <LL_ADC_IsEnabled>
 801917a:	4603      	mov	r3, r0
 801917c:	2b00      	cmp	r3, #0
 801917e:	d110      	bne.n	80191a2 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8019180:	4861      	ldr	r0, [pc, #388]	; (8019308 <HAL_ADC_Init+0x288>)
 8019182:	f7ff ff2f 	bl	8018fe4 <LL_ADC_IsEnabled>
 8019186:	4604      	mov	r4, r0
 8019188:	4860      	ldr	r0, [pc, #384]	; (801930c <HAL_ADC_Init+0x28c>)
 801918a:	f7ff ff2b 	bl	8018fe4 <LL_ADC_IsEnabled>
 801918e:	4603      	mov	r3, r0
 8019190:	4323      	orrs	r3, r4
 8019192:	2b00      	cmp	r3, #0
 8019194:	d105      	bne.n	80191a2 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	685b      	ldr	r3, [r3, #4]
 801919a:	4619      	mov	r1, r3
 801919c:	485c      	ldr	r0, [pc, #368]	; (8019310 <HAL_ADC_Init+0x290>)
 801919e:	f7ff fd65 	bl	8018c6c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	7e5b      	ldrb	r3, [r3, #25]
 80191a6:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80191ac:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80191b2:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80191b8:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80191c0:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80191c2:	4313      	orrs	r3, r2
 80191c4:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80191cc:	2b01      	cmp	r3, #1
 80191ce:	d106      	bne.n	80191de <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191d4:	3b01      	subs	r3, #1
 80191d6:	045b      	lsls	r3, r3, #17
 80191d8:	69ba      	ldr	r2, [r7, #24]
 80191da:	4313      	orrs	r3, r2
 80191dc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191e2:	2b00      	cmp	r3, #0
 80191e4:	d009      	beq.n	80191fa <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191ea:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191f2:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80191f4:	69ba      	ldr	r2, [r7, #24]
 80191f6:	4313      	orrs	r3, r2
 80191f8:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	681b      	ldr	r3, [r3, #0]
 80191fe:	68da      	ldr	r2, [r3, #12]
 8019200:	4b44      	ldr	r3, [pc, #272]	; (8019314 <HAL_ADC_Init+0x294>)
 8019202:	4013      	ands	r3, r2
 8019204:	687a      	ldr	r2, [r7, #4]
 8019206:	6812      	ldr	r2, [r2, #0]
 8019208:	69b9      	ldr	r1, [r7, #24]
 801920a:	430b      	orrs	r3, r1
 801920c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	681b      	ldr	r3, [r3, #0]
 8019212:	4618      	mov	r0, r3
 8019214:	f7ff ff20 	bl	8019058 <LL_ADC_INJ_IsConversionOngoing>
 8019218:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 801921a:	697b      	ldr	r3, [r7, #20]
 801921c:	2b00      	cmp	r3, #0
 801921e:	d140      	bne.n	80192a2 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8019220:	693b      	ldr	r3, [r7, #16]
 8019222:	2b00      	cmp	r3, #0
 8019224:	d13d      	bne.n	80192a2 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	7e1b      	ldrb	r3, [r3, #24]
 801922e:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8019230:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019238:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 801923a:	4313      	orrs	r3, r2
 801923c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	681b      	ldr	r3, [r3, #0]
 8019242:	68db      	ldr	r3, [r3, #12]
 8019244:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8019248:	f023 0306 	bic.w	r3, r3, #6
 801924c:	687a      	ldr	r2, [r7, #4]
 801924e:	6812      	ldr	r2, [r2, #0]
 8019250:	69b9      	ldr	r1, [r7, #24]
 8019252:	430b      	orrs	r3, r1
 8019254:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801925c:	2b01      	cmp	r3, #1
 801925e:	d118      	bne.n	8019292 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	691b      	ldr	r3, [r3, #16]
 8019266:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801926a:	f023 0304 	bic.w	r3, r3, #4
 801926e:	687a      	ldr	r2, [r7, #4]
 8019270:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8019272:	687a      	ldr	r2, [r7, #4]
 8019274:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8019276:	4311      	orrs	r1, r2
 8019278:	687a      	ldr	r2, [r7, #4]
 801927a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801927c:	4311      	orrs	r1, r2
 801927e:	687a      	ldr	r2, [r7, #4]
 8019280:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8019282:	430a      	orrs	r2, r1
 8019284:	431a      	orrs	r2, r3
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	681b      	ldr	r3, [r3, #0]
 801928a:	f042 0201 	orr.w	r2, r2, #1
 801928e:	611a      	str	r2, [r3, #16]
 8019290:	e007      	b.n	80192a2 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	681b      	ldr	r3, [r3, #0]
 8019296:	691a      	ldr	r2, [r3, #16]
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	681b      	ldr	r3, [r3, #0]
 801929c:	f022 0201 	bic.w	r2, r2, #1
 80192a0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	691b      	ldr	r3, [r3, #16]
 80192a6:	2b01      	cmp	r3, #1
 80192a8:	d10c      	bne.n	80192c4 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	681b      	ldr	r3, [r3, #0]
 80192ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80192b0:	f023 010f 	bic.w	r1, r3, #15
 80192b4:	687b      	ldr	r3, [r7, #4]
 80192b6:	69db      	ldr	r3, [r3, #28]
 80192b8:	1e5a      	subs	r2, r3, #1
 80192ba:	687b      	ldr	r3, [r7, #4]
 80192bc:	681b      	ldr	r3, [r3, #0]
 80192be:	430a      	orrs	r2, r1
 80192c0:	631a      	str	r2, [r3, #48]	; 0x30
 80192c2:	e007      	b.n	80192d4 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	681b      	ldr	r3, [r3, #0]
 80192c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	681b      	ldr	r3, [r3, #0]
 80192ce:	f022 020f 	bic.w	r2, r2, #15
 80192d2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80192d4:	687b      	ldr	r3, [r7, #4]
 80192d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80192d8:	f023 0303 	bic.w	r3, r3, #3
 80192dc:	f043 0201 	orr.w	r2, r3, #1
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	659a      	str	r2, [r3, #88]	; 0x58
 80192e4:	e007      	b.n	80192f6 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80192ea:	f043 0210 	orr.w	r2, r3, #16
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80192f2:	2301      	movs	r3, #1
 80192f4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80192f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80192f8:	4618      	mov	r0, r3
 80192fa:	3724      	adds	r7, #36	; 0x24
 80192fc:	46bd      	mov	sp, r7
 80192fe:	bd90      	pop	{r4, r7, pc}
 8019300:	20000090 	.word	0x20000090
 8019304:	053e2d63 	.word	0x053e2d63
 8019308:	42028000 	.word	0x42028000
 801930c:	42028100 	.word	0x42028100
 8019310:	42028300 	.word	0x42028300
 8019314:	fff0c007 	.word	0xfff0c007

08019318 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8019318:	b580      	push	{r7, lr}
 801931a:	b086      	sub	sp, #24
 801931c:	af00      	add	r7, sp, #0
 801931e:	60f8      	str	r0, [r7, #12]
 8019320:	60b9      	str	r1, [r7, #8]
 8019322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8019324:	4850      	ldr	r0, [pc, #320]	; (8019468 <HAL_ADC_Start_DMA+0x150>)
 8019326:	f7ff fddf 	bl	8018ee8 <LL_ADC_GetMultimode>
 801932a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801932c:	68fb      	ldr	r3, [r7, #12]
 801932e:	681b      	ldr	r3, [r3, #0]
 8019330:	4618      	mov	r0, r3
 8019332:	f7ff fe7e 	bl	8019032 <LL_ADC_REG_IsConversionOngoing>
 8019336:	4603      	mov	r3, r0
 8019338:	2b00      	cmp	r3, #0
 801933a:	f040 808e 	bne.w	801945a <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 801933e:	68fb      	ldr	r3, [r7, #12]
 8019340:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8019344:	2b01      	cmp	r3, #1
 8019346:	d101      	bne.n	801934c <HAL_ADC_Start_DMA+0x34>
 8019348:	2302      	movs	r3, #2
 801934a:	e089      	b.n	8019460 <HAL_ADC_Start_DMA+0x148>
 801934c:	68fb      	ldr	r3, [r7, #12]
 801934e:	2201      	movs	r2, #1
 8019350:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019354:	693b      	ldr	r3, [r7, #16]
 8019356:	2b00      	cmp	r3, #0
 8019358:	d005      	beq.n	8019366 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801935a:	693b      	ldr	r3, [r7, #16]
 801935c:	2b05      	cmp	r3, #5
 801935e:	d002      	beq.n	8019366 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8019360:	693b      	ldr	r3, [r7, #16]
 8019362:	2b09      	cmp	r3, #9
 8019364:	d172      	bne.n	801944c <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8019366:	68f8      	ldr	r0, [r7, #12]
 8019368:	f000 feac 	bl	801a0c4 <ADC_Enable>
 801936c:	4603      	mov	r3, r0
 801936e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8019370:	7dfb      	ldrb	r3, [r7, #23]
 8019372:	2b00      	cmp	r3, #0
 8019374:	d165      	bne.n	8019442 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8019376:	68fb      	ldr	r3, [r7, #12]
 8019378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801937a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801937e:	f023 0301 	bic.w	r3, r3, #1
 8019382:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8019386:	68fb      	ldr	r3, [r7, #12]
 8019388:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801938a:	68fb      	ldr	r3, [r7, #12]
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	4a37      	ldr	r2, [pc, #220]	; (801946c <HAL_ADC_Start_DMA+0x154>)
 8019390:	4293      	cmp	r3, r2
 8019392:	d002      	beq.n	801939a <HAL_ADC_Start_DMA+0x82>
 8019394:	68fb      	ldr	r3, [r7, #12]
 8019396:	681b      	ldr	r3, [r3, #0]
 8019398:	e000      	b.n	801939c <HAL_ADC_Start_DMA+0x84>
 801939a:	4b35      	ldr	r3, [pc, #212]	; (8019470 <HAL_ADC_Start_DMA+0x158>)
 801939c:	68fa      	ldr	r2, [r7, #12]
 801939e:	6812      	ldr	r2, [r2, #0]
 80193a0:	4293      	cmp	r3, r2
 80193a2:	d002      	beq.n	80193aa <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80193a4:	693b      	ldr	r3, [r7, #16]
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	d105      	bne.n	80193b6 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80193aa:	68fb      	ldr	r3, [r7, #12]
 80193ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80193ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80193b2:	68fb      	ldr	r3, [r7, #12]
 80193b4:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80193b6:	68fb      	ldr	r3, [r7, #12]
 80193b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80193ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80193be:	2b00      	cmp	r3, #0
 80193c0:	d006      	beq.n	80193d0 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80193c2:	68fb      	ldr	r3, [r7, #12]
 80193c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80193c6:	f023 0206 	bic.w	r2, r3, #6
 80193ca:	68fb      	ldr	r3, [r7, #12]
 80193cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80193ce:	e002      	b.n	80193d6 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80193d0:	68fb      	ldr	r3, [r7, #12]
 80193d2:	2200      	movs	r2, #0
 80193d4:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80193d6:	68fb      	ldr	r3, [r7, #12]
 80193d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80193da:	4a26      	ldr	r2, [pc, #152]	; (8019474 <HAL_ADC_Start_DMA+0x15c>)
 80193dc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80193de:	68fb      	ldr	r3, [r7, #12]
 80193e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80193e2:	4a25      	ldr	r2, [pc, #148]	; (8019478 <HAL_ADC_Start_DMA+0x160>)
 80193e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80193e6:	68fb      	ldr	r3, [r7, #12]
 80193e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80193ea:	4a24      	ldr	r2, [pc, #144]	; (801947c <HAL_ADC_Start_DMA+0x164>)
 80193ec:	63da      	str	r2, [r3, #60]	; 0x3c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80193ee:	68fb      	ldr	r3, [r7, #12]
 80193f0:	681b      	ldr	r3, [r3, #0]
 80193f2:	221c      	movs	r2, #28
 80193f4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	2200      	movs	r2, #0
 80193fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80193fe:	68fb      	ldr	r3, [r7, #12]
 8019400:	681b      	ldr	r3, [r3, #0]
 8019402:	685a      	ldr	r2, [r3, #4]
 8019404:	68fb      	ldr	r3, [r7, #12]
 8019406:	681b      	ldr	r3, [r3, #0]
 8019408:	f042 0210 	orr.w	r2, r2, #16
 801940c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 801940e:	68fb      	ldr	r3, [r7, #12]
 8019410:	681b      	ldr	r3, [r3, #0]
 8019412:	68da      	ldr	r2, [r3, #12]
 8019414:	68fb      	ldr	r3, [r7, #12]
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	f042 0201 	orr.w	r2, r2, #1
 801941c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 801941e:	68fb      	ldr	r3, [r7, #12]
 8019420:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8019422:	68fb      	ldr	r3, [r7, #12]
 8019424:	681b      	ldr	r3, [r3, #0]
 8019426:	3340      	adds	r3, #64	; 0x40
 8019428:	4619      	mov	r1, r3
 801942a:	68ba      	ldr	r2, [r7, #8]
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	f001 f9e7 	bl	801a800 <HAL_DMA_Start_IT>
 8019432:	4603      	mov	r3, r0
 8019434:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8019436:	68fb      	ldr	r3, [r7, #12]
 8019438:	681b      	ldr	r3, [r3, #0]
 801943a:	4618      	mov	r0, r3
 801943c:	f7ff fde5 	bl	801900a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8019440:	e00d      	b.n	801945e <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8019442:	68fb      	ldr	r3, [r7, #12]
 8019444:	2200      	movs	r2, #0
 8019446:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 801944a:	e008      	b.n	801945e <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 801944c:	2301      	movs	r3, #1
 801944e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8019450:	68fb      	ldr	r3, [r7, #12]
 8019452:	2200      	movs	r2, #0
 8019454:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8019458:	e001      	b.n	801945e <HAL_ADC_Start_DMA+0x146>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 801945a:	2302      	movs	r3, #2
 801945c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 801945e:	7dfb      	ldrb	r3, [r7, #23]
}
 8019460:	4618      	mov	r0, r3
 8019462:	3718      	adds	r7, #24
 8019464:	46bd      	mov	sp, r7
 8019466:	bd80      	pop	{r7, pc}
 8019468:	42028300 	.word	0x42028300
 801946c:	42028100 	.word	0x42028100
 8019470:	42028000 	.word	0x42028000
 8019474:	0801a1d1 	.word	0x0801a1d1
 8019478:	0801a2a9 	.word	0x0801a2a9
 801947c:	0801a2c5 	.word	0x0801a2c5

08019480 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8019480:	b580      	push	{r7, lr}
 8019482:	b08a      	sub	sp, #40	; 0x28
 8019484:	af00      	add	r7, sp, #0
 8019486:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8019488:	2300      	movs	r3, #0
 801948a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	681b      	ldr	r3, [r3, #0]
 8019490:	681b      	ldr	r3, [r3, #0]
 8019492:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	685b      	ldr	r3, [r3, #4]
 801949a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801949c:	4882      	ldr	r0, [pc, #520]	; (80196a8 <HAL_ADC_IRQHandler+0x228>)
 801949e:	f7ff fd23 	bl	8018ee8 <LL_ADC_GetMultimode>
 80194a2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80194a4:	69fb      	ldr	r3, [r7, #28]
 80194a6:	f003 0302 	and.w	r3, r3, #2
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d017      	beq.n	80194de <HAL_ADC_IRQHandler+0x5e>
 80194ae:	69bb      	ldr	r3, [r7, #24]
 80194b0:	f003 0302 	and.w	r3, r3, #2
 80194b4:	2b00      	cmp	r3, #0
 80194b6:	d012      	beq.n	80194de <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80194bc:	f003 0310 	and.w	r3, r3, #16
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	d105      	bne.n	80194d0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80194c8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80194d0:	6878      	ldr	r0, [r7, #4]
 80194d2:	f000 ff5f 	bl	801a394 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	2202      	movs	r2, #2
 80194dc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80194de:	69fb      	ldr	r3, [r7, #28]
 80194e0:	f003 0304 	and.w	r3, r3, #4
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	d004      	beq.n	80194f2 <HAL_ADC_IRQHandler+0x72>
 80194e8:	69bb      	ldr	r3, [r7, #24]
 80194ea:	f003 0304 	and.w	r3, r3, #4
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	d10a      	bne.n	8019508 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80194f2:	69fb      	ldr	r3, [r7, #28]
 80194f4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	f000 8083 	beq.w	8019604 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80194fe:	69bb      	ldr	r3, [r7, #24]
 8019500:	f003 0308 	and.w	r3, r3, #8
 8019504:	2b00      	cmp	r3, #0
 8019506:	d07d      	beq.n	8019604 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801950c:	f003 0310 	and.w	r3, r3, #16
 8019510:	2b00      	cmp	r3, #0
 8019512:	d105      	bne.n	8019520 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019518:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	681b      	ldr	r3, [r3, #0]
 8019524:	4618      	mov	r0, r3
 8019526:	f7ff fc3d 	bl	8018da4 <LL_ADC_REG_IsTriggerSourceSWStart>
 801952a:	4603      	mov	r3, r0
 801952c:	2b00      	cmp	r3, #0
 801952e:	d062      	beq.n	80195f6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8019530:	687b      	ldr	r3, [r7, #4]
 8019532:	681b      	ldr	r3, [r3, #0]
 8019534:	4a5d      	ldr	r2, [pc, #372]	; (80196ac <HAL_ADC_IRQHandler+0x22c>)
 8019536:	4293      	cmp	r3, r2
 8019538:	d002      	beq.n	8019540 <HAL_ADC_IRQHandler+0xc0>
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	681b      	ldr	r3, [r3, #0]
 801953e:	e000      	b.n	8019542 <HAL_ADC_IRQHandler+0xc2>
 8019540:	4b5b      	ldr	r3, [pc, #364]	; (80196b0 <HAL_ADC_IRQHandler+0x230>)
 8019542:	687a      	ldr	r2, [r7, #4]
 8019544:	6812      	ldr	r2, [r2, #0]
 8019546:	4293      	cmp	r3, r2
 8019548:	d008      	beq.n	801955c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801954a:	697b      	ldr	r3, [r7, #20]
 801954c:	2b00      	cmp	r3, #0
 801954e:	d005      	beq.n	801955c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8019550:	697b      	ldr	r3, [r7, #20]
 8019552:	2b05      	cmp	r3, #5
 8019554:	d002      	beq.n	801955c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8019556:	697b      	ldr	r3, [r7, #20]
 8019558:	2b09      	cmp	r3, #9
 801955a:	d104      	bne.n	8019566 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	681b      	ldr	r3, [r3, #0]
 8019560:	68db      	ldr	r3, [r3, #12]
 8019562:	623b      	str	r3, [r7, #32]
 8019564:	e00c      	b.n	8019580 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	681b      	ldr	r3, [r3, #0]
 801956a:	4a50      	ldr	r2, [pc, #320]	; (80196ac <HAL_ADC_IRQHandler+0x22c>)
 801956c:	4293      	cmp	r3, r2
 801956e:	d002      	beq.n	8019576 <HAL_ADC_IRQHandler+0xf6>
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	681b      	ldr	r3, [r3, #0]
 8019574:	e000      	b.n	8019578 <HAL_ADC_IRQHandler+0xf8>
 8019576:	4b4e      	ldr	r3, [pc, #312]	; (80196b0 <HAL_ADC_IRQHandler+0x230>)
 8019578:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 801957a:	693b      	ldr	r3, [r7, #16]
 801957c:	68db      	ldr	r3, [r3, #12]
 801957e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8019580:	6a3b      	ldr	r3, [r7, #32]
 8019582:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019586:	2b00      	cmp	r3, #0
 8019588:	d135      	bne.n	80195f6 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	681b      	ldr	r3, [r3, #0]
 801958e:	681b      	ldr	r3, [r3, #0]
 8019590:	f003 0308 	and.w	r3, r3, #8
 8019594:	2b08      	cmp	r3, #8
 8019596:	d12e      	bne.n	80195f6 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	4618      	mov	r0, r3
 801959e:	f7ff fd48 	bl	8019032 <LL_ADC_REG_IsConversionOngoing>
 80195a2:	4603      	mov	r3, r0
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	d11a      	bne.n	80195de <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	681b      	ldr	r3, [r3, #0]
 80195ac:	685a      	ldr	r2, [r3, #4]
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	681b      	ldr	r3, [r3, #0]
 80195b2:	f022 020c 	bic.w	r2, r2, #12
 80195b6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80195bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80195c4:	687b      	ldr	r3, [r7, #4]
 80195c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80195c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d112      	bne.n	80195f6 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80195d4:	f043 0201 	orr.w	r2, r3, #1
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	659a      	str	r2, [r3, #88]	; 0x58
 80195dc:	e00b      	b.n	80195f6 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80195e2:	f043 0210 	orr.w	r2, r3, #16
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80195ee:	f043 0201 	orr.w	r2, r3, #1
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80195f6:	6878      	ldr	r0, [r7, #4]
 80195f8:	f7e8 fece 	bl	8002398 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	681b      	ldr	r3, [r3, #0]
 8019600:	220c      	movs	r2, #12
 8019602:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8019604:	69fb      	ldr	r3, [r7, #28]
 8019606:	f003 0320 	and.w	r3, r3, #32
 801960a:	2b00      	cmp	r3, #0
 801960c:	d004      	beq.n	8019618 <HAL_ADC_IRQHandler+0x198>
 801960e:	69bb      	ldr	r3, [r7, #24]
 8019610:	f003 0320 	and.w	r3, r3, #32
 8019614:	2b00      	cmp	r3, #0
 8019616:	d10b      	bne.n	8019630 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8019618:	69fb      	ldr	r3, [r7, #28]
 801961a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 801961e:	2b00      	cmp	r3, #0
 8019620:	f000 809f 	beq.w	8019762 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8019624:	69bb      	ldr	r3, [r7, #24]
 8019626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801962a:	2b00      	cmp	r3, #0
 801962c:	f000 8099 	beq.w	8019762 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019634:	f003 0310 	and.w	r3, r3, #16
 8019638:	2b00      	cmp	r3, #0
 801963a:	d105      	bne.n	8019648 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019640:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	681b      	ldr	r3, [r3, #0]
 801964c:	4618      	mov	r0, r3
 801964e:	f7ff fbe8 	bl	8018e22 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8019652:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	681b      	ldr	r3, [r3, #0]
 8019658:	4618      	mov	r0, r3
 801965a:	f7ff fba3 	bl	8018da4 <LL_ADC_REG_IsTriggerSourceSWStart>
 801965e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	681b      	ldr	r3, [r3, #0]
 8019664:	4a11      	ldr	r2, [pc, #68]	; (80196ac <HAL_ADC_IRQHandler+0x22c>)
 8019666:	4293      	cmp	r3, r2
 8019668:	d002      	beq.n	8019670 <HAL_ADC_IRQHandler+0x1f0>
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	681b      	ldr	r3, [r3, #0]
 801966e:	e000      	b.n	8019672 <HAL_ADC_IRQHandler+0x1f2>
 8019670:	4b0f      	ldr	r3, [pc, #60]	; (80196b0 <HAL_ADC_IRQHandler+0x230>)
 8019672:	687a      	ldr	r2, [r7, #4]
 8019674:	6812      	ldr	r2, [r2, #0]
 8019676:	4293      	cmp	r3, r2
 8019678:	d008      	beq.n	801968c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801967a:	697b      	ldr	r3, [r7, #20]
 801967c:	2b00      	cmp	r3, #0
 801967e:	d005      	beq.n	801968c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8019680:	697b      	ldr	r3, [r7, #20]
 8019682:	2b06      	cmp	r3, #6
 8019684:	d002      	beq.n	801968c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8019686:	697b      	ldr	r3, [r7, #20]
 8019688:	2b07      	cmp	r3, #7
 801968a:	d104      	bne.n	8019696 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	681b      	ldr	r3, [r3, #0]
 8019690:	68db      	ldr	r3, [r3, #12]
 8019692:	623b      	str	r3, [r7, #32]
 8019694:	e013      	b.n	80196be <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	681b      	ldr	r3, [r3, #0]
 801969a:	4a04      	ldr	r2, [pc, #16]	; (80196ac <HAL_ADC_IRQHandler+0x22c>)
 801969c:	4293      	cmp	r3, r2
 801969e:	d009      	beq.n	80196b4 <HAL_ADC_IRQHandler+0x234>
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	681b      	ldr	r3, [r3, #0]
 80196a4:	e007      	b.n	80196b6 <HAL_ADC_IRQHandler+0x236>
 80196a6:	bf00      	nop
 80196a8:	42028300 	.word	0x42028300
 80196ac:	42028100 	.word	0x42028100
 80196b0:	42028000 	.word	0x42028000
 80196b4:	4b7d      	ldr	r3, [pc, #500]	; (80198ac <HAL_ADC_IRQHandler+0x42c>)
 80196b6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80196b8:	693b      	ldr	r3, [r7, #16]
 80196ba:	68db      	ldr	r3, [r3, #12]
 80196bc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80196be:	68fb      	ldr	r3, [r7, #12]
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d047      	beq.n	8019754 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80196c4:	6a3b      	ldr	r3, [r7, #32]
 80196c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	d007      	beq.n	80196de <HAL_ADC_IRQHandler+0x25e>
 80196ce:	68bb      	ldr	r3, [r7, #8]
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d03f      	beq.n	8019754 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80196d4:	6a3b      	ldr	r3, [r7, #32]
 80196d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80196da:	2b00      	cmp	r3, #0
 80196dc:	d13a      	bne.n	8019754 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	681b      	ldr	r3, [r3, #0]
 80196e2:	681b      	ldr	r3, [r3, #0]
 80196e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80196e8:	2b40      	cmp	r3, #64	; 0x40
 80196ea:	d133      	bne.n	8019754 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80196ec:	6a3b      	ldr	r3, [r7, #32]
 80196ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80196f2:	2b00      	cmp	r3, #0
 80196f4:	d12e      	bne.n	8019754 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	681b      	ldr	r3, [r3, #0]
 80196fa:	4618      	mov	r0, r3
 80196fc:	f7ff fcac 	bl	8019058 <LL_ADC_INJ_IsConversionOngoing>
 8019700:	4603      	mov	r3, r0
 8019702:	2b00      	cmp	r3, #0
 8019704:	d11a      	bne.n	801973c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	681b      	ldr	r3, [r3, #0]
 801970a:	685a      	ldr	r2, [r3, #4]
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	681b      	ldr	r3, [r3, #0]
 8019710:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019714:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801971a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801972a:	2b00      	cmp	r3, #0
 801972c:	d112      	bne.n	8019754 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019732:	f043 0201 	orr.w	r2, r3, #1
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	659a      	str	r2, [r3, #88]	; 0x58
 801973a:	e00b      	b.n	8019754 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019740:	f043 0210 	orr.w	r2, r3, #16
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801974c:	f043 0201 	orr.w	r2, r3, #1
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8019754:	6878      	ldr	r0, [r7, #4]
 8019756:	f000 fdf5 	bl	801a344 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	681b      	ldr	r3, [r3, #0]
 801975e:	2260      	movs	r2, #96	; 0x60
 8019760:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8019762:	69fb      	ldr	r3, [r7, #28]
 8019764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019768:	2b00      	cmp	r3, #0
 801976a:	d011      	beq.n	8019790 <HAL_ADC_IRQHandler+0x310>
 801976c:	69bb      	ldr	r3, [r7, #24]
 801976e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019772:	2b00      	cmp	r3, #0
 8019774:	d00c      	beq.n	8019790 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801977a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8019782:	6878      	ldr	r0, [r7, #4]
 8019784:	f000 f8a0 	bl	80198c8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	681b      	ldr	r3, [r3, #0]
 801978c:	2280      	movs	r2, #128	; 0x80
 801978e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8019790:	69fb      	ldr	r3, [r7, #28]
 8019792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019796:	2b00      	cmp	r3, #0
 8019798:	d012      	beq.n	80197c0 <HAL_ADC_IRQHandler+0x340>
 801979a:	69bb      	ldr	r3, [r7, #24]
 801979c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80197a0:	2b00      	cmp	r3, #0
 80197a2:	d00d      	beq.n	80197c0 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80197a8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80197b0:	6878      	ldr	r0, [r7, #4]
 80197b2:	f000 fddb 	bl	801a36c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80197b6:	687b      	ldr	r3, [r7, #4]
 80197b8:	681b      	ldr	r3, [r3, #0]
 80197ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80197be:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80197c0:	69fb      	ldr	r3, [r7, #28]
 80197c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	d012      	beq.n	80197f0 <HAL_ADC_IRQHandler+0x370>
 80197ca:	69bb      	ldr	r3, [r7, #24]
 80197cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	d00d      	beq.n	80197f0 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80197d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80197e0:	6878      	ldr	r0, [r7, #4]
 80197e2:	f000 fdcd 	bl	801a380 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80197ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80197f0:	69fb      	ldr	r3, [r7, #28]
 80197f2:	f003 0310 	and.w	r3, r3, #16
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d036      	beq.n	8019868 <HAL_ADC_IRQHandler+0x3e8>
 80197fa:	69bb      	ldr	r3, [r7, #24]
 80197fc:	f003 0310 	and.w	r3, r3, #16
 8019800:	2b00      	cmp	r3, #0
 8019802:	d031      	beq.n	8019868 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8019804:	687b      	ldr	r3, [r7, #4]
 8019806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019808:	2b00      	cmp	r3, #0
 801980a:	d102      	bne.n	8019812 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 801980c:	2301      	movs	r3, #1
 801980e:	627b      	str	r3, [r7, #36]	; 0x24
 8019810:	e014      	b.n	801983c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8019812:	697b      	ldr	r3, [r7, #20]
 8019814:	2b00      	cmp	r3, #0
 8019816:	d008      	beq.n	801982a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8019818:	4825      	ldr	r0, [pc, #148]	; (80198b0 <HAL_ADC_IRQHandler+0x430>)
 801981a:	f7ff fb73 	bl	8018f04 <LL_ADC_GetMultiDMATransfer>
 801981e:	4603      	mov	r3, r0
 8019820:	2b00      	cmp	r3, #0
 8019822:	d00b      	beq.n	801983c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8019824:	2301      	movs	r3, #1
 8019826:	627b      	str	r3, [r7, #36]	; 0x24
 8019828:	e008      	b.n	801983c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	681b      	ldr	r3, [r3, #0]
 801982e:	68db      	ldr	r3, [r3, #12]
 8019830:	f003 0301 	and.w	r3, r3, #1
 8019834:	2b00      	cmp	r3, #0
 8019836:	d001      	beq.n	801983c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8019838:	2301      	movs	r3, #1
 801983a:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 801983c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801983e:	2b01      	cmp	r3, #1
 8019840:	d10e      	bne.n	8019860 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019846:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019852:	f043 0202 	orr.w	r2, r3, #2
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 801985a:	6878      	ldr	r0, [r7, #4]
 801985c:	f000 f83e 	bl	80198dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	681b      	ldr	r3, [r3, #0]
 8019864:	2210      	movs	r2, #16
 8019866:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8019868:	69fb      	ldr	r3, [r7, #28]
 801986a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801986e:	2b00      	cmp	r3, #0
 8019870:	d018      	beq.n	80198a4 <HAL_ADC_IRQHandler+0x424>
 8019872:	69bb      	ldr	r3, [r7, #24]
 8019874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019878:	2b00      	cmp	r3, #0
 801987a:	d013      	beq.n	80198a4 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019880:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801988c:	f043 0208 	orr.w	r2, r3, #8
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	681b      	ldr	r3, [r3, #0]
 8019898:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801989c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 801989e:	6878      	ldr	r0, [r7, #4]
 80198a0:	f000 fd5a 	bl	801a358 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80198a4:	bf00      	nop
 80198a6:	3728      	adds	r7, #40	; 0x28
 80198a8:	46bd      	mov	sp, r7
 80198aa:	bd80      	pop	{r7, pc}
 80198ac:	42028000 	.word	0x42028000
 80198b0:	42028300 	.word	0x42028300

080198b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80198b4:	b480      	push	{r7}
 80198b6:	b083      	sub	sp, #12
 80198b8:	af00      	add	r7, sp, #0
 80198ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80198bc:	bf00      	nop
 80198be:	370c      	adds	r7, #12
 80198c0:	46bd      	mov	sp, r7
 80198c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198c6:	4770      	bx	lr

080198c8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80198c8:	b480      	push	{r7}
 80198ca:	b083      	sub	sp, #12
 80198cc:	af00      	add	r7, sp, #0
 80198ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80198d0:	bf00      	nop
 80198d2:	370c      	adds	r7, #12
 80198d4:	46bd      	mov	sp, r7
 80198d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198da:	4770      	bx	lr

080198dc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80198dc:	b480      	push	{r7}
 80198de:	b083      	sub	sp, #12
 80198e0:	af00      	add	r7, sp, #0
 80198e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80198e4:	bf00      	nop
 80198e6:	370c      	adds	r7, #12
 80198e8:	46bd      	mov	sp, r7
 80198ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198ee:	4770      	bx	lr

080198f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80198f0:	b590      	push	{r4, r7, lr}
 80198f2:	b0b7      	sub	sp, #220	; 0xdc
 80198f4:	af00      	add	r7, sp, #0
 80198f6:	6078      	str	r0, [r7, #4]
 80198f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80198fa:	2300      	movs	r3, #0
 80198fc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8019900:	2300      	movs	r3, #0
 8019902:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801990a:	2b01      	cmp	r3, #1
 801990c:	d101      	bne.n	8019912 <HAL_ADC_ConfigChannel+0x22>
 801990e:	2302      	movs	r3, #2
 8019910:	e3c1      	b.n	801a096 <HAL_ADC_ConfigChannel+0x7a6>
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	2201      	movs	r2, #1
 8019916:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	4618      	mov	r0, r3
 8019920:	f7ff fb87 	bl	8019032 <LL_ADC_REG_IsConversionOngoing>
 8019924:	4603      	mov	r3, r0
 8019926:	2b00      	cmp	r3, #0
 8019928:	f040 83a6 	bne.w	801a078 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	6818      	ldr	r0, [r3, #0]
 8019930:	683b      	ldr	r3, [r7, #0]
 8019932:	6859      	ldr	r1, [r3, #4]
 8019934:	683b      	ldr	r3, [r7, #0]
 8019936:	681b      	ldr	r3, [r3, #0]
 8019938:	461a      	mov	r2, r3
 801993a:	f7ff fa46 	bl	8018dca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	681b      	ldr	r3, [r3, #0]
 8019942:	4618      	mov	r0, r3
 8019944:	f7ff fb75 	bl	8019032 <LL_ADC_REG_IsConversionOngoing>
 8019948:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	681b      	ldr	r3, [r3, #0]
 8019950:	4618      	mov	r0, r3
 8019952:	f7ff fb81 	bl	8019058 <LL_ADC_INJ_IsConversionOngoing>
 8019956:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 801995a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801995e:	2b00      	cmp	r3, #0
 8019960:	f040 81c1 	bne.w	8019ce6 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8019964:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8019968:	2b00      	cmp	r3, #0
 801996a:	f040 81bc 	bne.w	8019ce6 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 801996e:	683b      	ldr	r3, [r7, #0]
 8019970:	689b      	ldr	r3, [r3, #8]
 8019972:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019976:	d10f      	bne.n	8019998 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	6818      	ldr	r0, [r3, #0]
 801997c:	683b      	ldr	r3, [r7, #0]
 801997e:	681b      	ldr	r3, [r3, #0]
 8019980:	2200      	movs	r2, #0
 8019982:	4619      	mov	r1, r3
 8019984:	f7ff fa60 	bl	8018e48 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8019988:	687b      	ldr	r3, [r7, #4]
 801998a:	681b      	ldr	r3, [r3, #0]
 801998c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8019990:	4618      	mov	r0, r3
 8019992:	f7ff f9f4 	bl	8018d7e <LL_ADC_SetSamplingTimeCommonConfig>
 8019996:	e00e      	b.n	80199b6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	6818      	ldr	r0, [r3, #0]
 801999c:	683b      	ldr	r3, [r7, #0]
 801999e:	6819      	ldr	r1, [r3, #0]
 80199a0:	683b      	ldr	r3, [r7, #0]
 80199a2:	689b      	ldr	r3, [r3, #8]
 80199a4:	461a      	mov	r2, r3
 80199a6:	f7ff fa4f 	bl	8018e48 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	681b      	ldr	r3, [r3, #0]
 80199ae:	2100      	movs	r1, #0
 80199b0:	4618      	mov	r0, r3
 80199b2:	f7ff f9e4 	bl	8018d7e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80199b6:	683b      	ldr	r3, [r7, #0]
 80199b8:	695a      	ldr	r2, [r3, #20]
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	681b      	ldr	r3, [r3, #0]
 80199be:	68db      	ldr	r3, [r3, #12]
 80199c0:	08db      	lsrs	r3, r3, #3
 80199c2:	f003 0303 	and.w	r3, r3, #3
 80199c6:	005b      	lsls	r3, r3, #1
 80199c8:	fa02 f303 	lsl.w	r3, r2, r3
 80199cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80199d0:	683b      	ldr	r3, [r7, #0]
 80199d2:	691b      	ldr	r3, [r3, #16]
 80199d4:	2b04      	cmp	r3, #4
 80199d6:	d00a      	beq.n	80199ee <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80199d8:	687b      	ldr	r3, [r7, #4]
 80199da:	6818      	ldr	r0, [r3, #0]
 80199dc:	683b      	ldr	r3, [r7, #0]
 80199de:	6919      	ldr	r1, [r3, #16]
 80199e0:	683b      	ldr	r3, [r7, #0]
 80199e2:	681a      	ldr	r2, [r3, #0]
 80199e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80199e8:	f7ff f974 	bl	8018cd4 <LL_ADC_SetOffset>
 80199ec:	e17b      	b.n	8019ce6 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	681b      	ldr	r3, [r3, #0]
 80199f2:	2100      	movs	r1, #0
 80199f4:	4618      	mov	r0, r3
 80199f6:	f7ff f991 	bl	8018d1c <LL_ADC_GetOffsetChannel>
 80199fa:	4603      	mov	r3, r0
 80199fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019a00:	2b00      	cmp	r3, #0
 8019a02:	d10a      	bne.n	8019a1a <HAL_ADC_ConfigChannel+0x12a>
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	681b      	ldr	r3, [r3, #0]
 8019a08:	2100      	movs	r1, #0
 8019a0a:	4618      	mov	r0, r3
 8019a0c:	f7ff f986 	bl	8018d1c <LL_ADC_GetOffsetChannel>
 8019a10:	4603      	mov	r3, r0
 8019a12:	0e9b      	lsrs	r3, r3, #26
 8019a14:	f003 021f 	and.w	r2, r3, #31
 8019a18:	e01e      	b.n	8019a58 <HAL_ADC_ConfigChannel+0x168>
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	681b      	ldr	r3, [r3, #0]
 8019a1e:	2100      	movs	r1, #0
 8019a20:	4618      	mov	r0, r3
 8019a22:	f7ff f97b 	bl	8018d1c <LL_ADC_GetOffsetChannel>
 8019a26:	4603      	mov	r3, r0
 8019a28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019a2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8019a30:	fa93 f3a3 	rbit	r3, r3
 8019a34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8019a38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8019a3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8019a40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	d101      	bne.n	8019a4c <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8019a48:	2320      	movs	r3, #32
 8019a4a:	e004      	b.n	8019a56 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8019a4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8019a50:	fab3 f383 	clz	r3, r3
 8019a54:	b2db      	uxtb	r3, r3
 8019a56:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8019a58:	683b      	ldr	r3, [r7, #0]
 8019a5a:	681b      	ldr	r3, [r3, #0]
 8019a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	d105      	bne.n	8019a70 <HAL_ADC_ConfigChannel+0x180>
 8019a64:	683b      	ldr	r3, [r7, #0]
 8019a66:	681b      	ldr	r3, [r3, #0]
 8019a68:	0e9b      	lsrs	r3, r3, #26
 8019a6a:	f003 031f 	and.w	r3, r3, #31
 8019a6e:	e018      	b.n	8019aa2 <HAL_ADC_ConfigChannel+0x1b2>
 8019a70:	683b      	ldr	r3, [r7, #0]
 8019a72:	681b      	ldr	r3, [r3, #0]
 8019a74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019a78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8019a7c:	fa93 f3a3 	rbit	r3, r3
 8019a80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8019a84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019a88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8019a8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8019a90:	2b00      	cmp	r3, #0
 8019a92:	d101      	bne.n	8019a98 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8019a94:	2320      	movs	r3, #32
 8019a96:	e004      	b.n	8019aa2 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8019a98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8019a9c:	fab3 f383 	clz	r3, r3
 8019aa0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8019aa2:	429a      	cmp	r2, r3
 8019aa4:	d106      	bne.n	8019ab4 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	681b      	ldr	r3, [r3, #0]
 8019aaa:	2200      	movs	r2, #0
 8019aac:	2100      	movs	r1, #0
 8019aae:	4618      	mov	r0, r3
 8019ab0:	f7ff f94a 	bl	8018d48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	681b      	ldr	r3, [r3, #0]
 8019ab8:	2101      	movs	r1, #1
 8019aba:	4618      	mov	r0, r3
 8019abc:	f7ff f92e 	bl	8018d1c <LL_ADC_GetOffsetChannel>
 8019ac0:	4603      	mov	r3, r0
 8019ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d10a      	bne.n	8019ae0 <HAL_ADC_ConfigChannel+0x1f0>
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	681b      	ldr	r3, [r3, #0]
 8019ace:	2101      	movs	r1, #1
 8019ad0:	4618      	mov	r0, r3
 8019ad2:	f7ff f923 	bl	8018d1c <LL_ADC_GetOffsetChannel>
 8019ad6:	4603      	mov	r3, r0
 8019ad8:	0e9b      	lsrs	r3, r3, #26
 8019ada:	f003 021f 	and.w	r2, r3, #31
 8019ade:	e01e      	b.n	8019b1e <HAL_ADC_ConfigChannel+0x22e>
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	681b      	ldr	r3, [r3, #0]
 8019ae4:	2101      	movs	r1, #1
 8019ae6:	4618      	mov	r0, r3
 8019ae8:	f7ff f918 	bl	8018d1c <LL_ADC_GetOffsetChannel>
 8019aec:	4603      	mov	r3, r0
 8019aee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019af2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019af6:	fa93 f3a3 	rbit	r3, r3
 8019afa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8019afe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019b02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8019b06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	d101      	bne.n	8019b12 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8019b0e:	2320      	movs	r3, #32
 8019b10:	e004      	b.n	8019b1c <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8019b12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8019b16:	fab3 f383 	clz	r3, r3
 8019b1a:	b2db      	uxtb	r3, r3
 8019b1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8019b1e:	683b      	ldr	r3, [r7, #0]
 8019b20:	681b      	ldr	r3, [r3, #0]
 8019b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	d105      	bne.n	8019b36 <HAL_ADC_ConfigChannel+0x246>
 8019b2a:	683b      	ldr	r3, [r7, #0]
 8019b2c:	681b      	ldr	r3, [r3, #0]
 8019b2e:	0e9b      	lsrs	r3, r3, #26
 8019b30:	f003 031f 	and.w	r3, r3, #31
 8019b34:	e018      	b.n	8019b68 <HAL_ADC_ConfigChannel+0x278>
 8019b36:	683b      	ldr	r3, [r7, #0]
 8019b38:	681b      	ldr	r3, [r3, #0]
 8019b3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019b3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019b42:	fa93 f3a3 	rbit	r3, r3
 8019b46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8019b4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019b4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8019b52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019b56:	2b00      	cmp	r3, #0
 8019b58:	d101      	bne.n	8019b5e <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8019b5a:	2320      	movs	r3, #32
 8019b5c:	e004      	b.n	8019b68 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8019b5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019b62:	fab3 f383 	clz	r3, r3
 8019b66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8019b68:	429a      	cmp	r2, r3
 8019b6a:	d106      	bne.n	8019b7a <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	681b      	ldr	r3, [r3, #0]
 8019b70:	2200      	movs	r2, #0
 8019b72:	2101      	movs	r1, #1
 8019b74:	4618      	mov	r0, r3
 8019b76:	f7ff f8e7 	bl	8018d48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	2102      	movs	r1, #2
 8019b80:	4618      	mov	r0, r3
 8019b82:	f7ff f8cb 	bl	8018d1c <LL_ADC_GetOffsetChannel>
 8019b86:	4603      	mov	r3, r0
 8019b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	d10a      	bne.n	8019ba6 <HAL_ADC_ConfigChannel+0x2b6>
 8019b90:	687b      	ldr	r3, [r7, #4]
 8019b92:	681b      	ldr	r3, [r3, #0]
 8019b94:	2102      	movs	r1, #2
 8019b96:	4618      	mov	r0, r3
 8019b98:	f7ff f8c0 	bl	8018d1c <LL_ADC_GetOffsetChannel>
 8019b9c:	4603      	mov	r3, r0
 8019b9e:	0e9b      	lsrs	r3, r3, #26
 8019ba0:	f003 021f 	and.w	r2, r3, #31
 8019ba4:	e01e      	b.n	8019be4 <HAL_ADC_ConfigChannel+0x2f4>
 8019ba6:	687b      	ldr	r3, [r7, #4]
 8019ba8:	681b      	ldr	r3, [r3, #0]
 8019baa:	2102      	movs	r1, #2
 8019bac:	4618      	mov	r0, r3
 8019bae:	f7ff f8b5 	bl	8018d1c <LL_ADC_GetOffsetChannel>
 8019bb2:	4603      	mov	r3, r0
 8019bb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019bb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019bbc:	fa93 f3a3 	rbit	r3, r3
 8019bc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8019bc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019bc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8019bcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019bd0:	2b00      	cmp	r3, #0
 8019bd2:	d101      	bne.n	8019bd8 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8019bd4:	2320      	movs	r3, #32
 8019bd6:	e004      	b.n	8019be2 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8019bd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019bdc:	fab3 f383 	clz	r3, r3
 8019be0:	b2db      	uxtb	r3, r3
 8019be2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8019be4:	683b      	ldr	r3, [r7, #0]
 8019be6:	681b      	ldr	r3, [r3, #0]
 8019be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	d105      	bne.n	8019bfc <HAL_ADC_ConfigChannel+0x30c>
 8019bf0:	683b      	ldr	r3, [r7, #0]
 8019bf2:	681b      	ldr	r3, [r3, #0]
 8019bf4:	0e9b      	lsrs	r3, r3, #26
 8019bf6:	f003 031f 	and.w	r3, r3, #31
 8019bfa:	e016      	b.n	8019c2a <HAL_ADC_ConfigChannel+0x33a>
 8019bfc:	683b      	ldr	r3, [r7, #0]
 8019bfe:	681b      	ldr	r3, [r3, #0]
 8019c00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019c04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019c08:	fa93 f3a3 	rbit	r3, r3
 8019c0c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8019c0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019c10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8019c14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019c18:	2b00      	cmp	r3, #0
 8019c1a:	d101      	bne.n	8019c20 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8019c1c:	2320      	movs	r3, #32
 8019c1e:	e004      	b.n	8019c2a <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8019c20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8019c24:	fab3 f383 	clz	r3, r3
 8019c28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8019c2a:	429a      	cmp	r2, r3
 8019c2c:	d106      	bne.n	8019c3c <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	681b      	ldr	r3, [r3, #0]
 8019c32:	2200      	movs	r2, #0
 8019c34:	2102      	movs	r1, #2
 8019c36:	4618      	mov	r0, r3
 8019c38:	f7ff f886 	bl	8018d48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	2103      	movs	r1, #3
 8019c42:	4618      	mov	r0, r3
 8019c44:	f7ff f86a 	bl	8018d1c <LL_ADC_GetOffsetChannel>
 8019c48:	4603      	mov	r3, r0
 8019c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019c4e:	2b00      	cmp	r3, #0
 8019c50:	d10a      	bne.n	8019c68 <HAL_ADC_ConfigChannel+0x378>
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	681b      	ldr	r3, [r3, #0]
 8019c56:	2103      	movs	r1, #3
 8019c58:	4618      	mov	r0, r3
 8019c5a:	f7ff f85f 	bl	8018d1c <LL_ADC_GetOffsetChannel>
 8019c5e:	4603      	mov	r3, r0
 8019c60:	0e9b      	lsrs	r3, r3, #26
 8019c62:	f003 021f 	and.w	r2, r3, #31
 8019c66:	e017      	b.n	8019c98 <HAL_ADC_ConfigChannel+0x3a8>
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	681b      	ldr	r3, [r3, #0]
 8019c6c:	2103      	movs	r1, #3
 8019c6e:	4618      	mov	r0, r3
 8019c70:	f7ff f854 	bl	8018d1c <LL_ADC_GetOffsetChannel>
 8019c74:	4603      	mov	r3, r0
 8019c76:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019c78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019c7a:	fa93 f3a3 	rbit	r3, r3
 8019c7e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8019c80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019c82:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8019c84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	d101      	bne.n	8019c8e <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8019c8a:	2320      	movs	r3, #32
 8019c8c:	e003      	b.n	8019c96 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8019c8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019c90:	fab3 f383 	clz	r3, r3
 8019c94:	b2db      	uxtb	r3, r3
 8019c96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8019c98:	683b      	ldr	r3, [r7, #0]
 8019c9a:	681b      	ldr	r3, [r3, #0]
 8019c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	d105      	bne.n	8019cb0 <HAL_ADC_ConfigChannel+0x3c0>
 8019ca4:	683b      	ldr	r3, [r7, #0]
 8019ca6:	681b      	ldr	r3, [r3, #0]
 8019ca8:	0e9b      	lsrs	r3, r3, #26
 8019caa:	f003 031f 	and.w	r3, r3, #31
 8019cae:	e011      	b.n	8019cd4 <HAL_ADC_ConfigChannel+0x3e4>
 8019cb0:	683b      	ldr	r3, [r7, #0]
 8019cb2:	681b      	ldr	r3, [r3, #0]
 8019cb4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019cb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019cb8:	fa93 f3a3 	rbit	r3, r3
 8019cbc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8019cbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019cc0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8019cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019cc4:	2b00      	cmp	r3, #0
 8019cc6:	d101      	bne.n	8019ccc <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8019cc8:	2320      	movs	r3, #32
 8019cca:	e003      	b.n	8019cd4 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8019ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019cce:	fab3 f383 	clz	r3, r3
 8019cd2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8019cd4:	429a      	cmp	r2, r3
 8019cd6:	d106      	bne.n	8019ce6 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8019cd8:	687b      	ldr	r3, [r7, #4]
 8019cda:	681b      	ldr	r3, [r3, #0]
 8019cdc:	2200      	movs	r2, #0
 8019cde:	2103      	movs	r1, #3
 8019ce0:	4618      	mov	r0, r3
 8019ce2:	f7ff f831 	bl	8018d48 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	681b      	ldr	r3, [r3, #0]
 8019cea:	4618      	mov	r0, r3
 8019cec:	f7ff f97a 	bl	8018fe4 <LL_ADC_IsEnabled>
 8019cf0:	4603      	mov	r3, r0
 8019cf2:	2b00      	cmp	r3, #0
 8019cf4:	f040 81c9 	bne.w	801a08a <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8019cf8:	687b      	ldr	r3, [r7, #4]
 8019cfa:	6818      	ldr	r0, [r3, #0]
 8019cfc:	683b      	ldr	r3, [r7, #0]
 8019cfe:	6819      	ldr	r1, [r3, #0]
 8019d00:	683b      	ldr	r3, [r7, #0]
 8019d02:	68db      	ldr	r3, [r3, #12]
 8019d04:	461a      	mov	r2, r3
 8019d06:	f7ff f8cb 	bl	8018ea0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8019d0a:	683b      	ldr	r3, [r7, #0]
 8019d0c:	68db      	ldr	r3, [r3, #12]
 8019d0e:	4a8f      	ldr	r2, [pc, #572]	; (8019f4c <HAL_ADC_ConfigChannel+0x65c>)
 8019d10:	4293      	cmp	r3, r2
 8019d12:	f040 8131 	bne.w	8019f78 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8019d1a:	683b      	ldr	r3, [r7, #0]
 8019d1c:	681b      	ldr	r3, [r3, #0]
 8019d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019d22:	2b00      	cmp	r3, #0
 8019d24:	d10b      	bne.n	8019d3e <HAL_ADC_ConfigChannel+0x44e>
 8019d26:	683b      	ldr	r3, [r7, #0]
 8019d28:	681b      	ldr	r3, [r3, #0]
 8019d2a:	0e9b      	lsrs	r3, r3, #26
 8019d2c:	3301      	adds	r3, #1
 8019d2e:	f003 031f 	and.w	r3, r3, #31
 8019d32:	2b09      	cmp	r3, #9
 8019d34:	bf94      	ite	ls
 8019d36:	2301      	movls	r3, #1
 8019d38:	2300      	movhi	r3, #0
 8019d3a:	b2db      	uxtb	r3, r3
 8019d3c:	e019      	b.n	8019d72 <HAL_ADC_ConfigChannel+0x482>
 8019d3e:	683b      	ldr	r3, [r7, #0]
 8019d40:	681b      	ldr	r3, [r3, #0]
 8019d42:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019d44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019d46:	fa93 f3a3 	rbit	r3, r3
 8019d4a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8019d4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019d4e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8019d50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019d52:	2b00      	cmp	r3, #0
 8019d54:	d101      	bne.n	8019d5a <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8019d56:	2320      	movs	r3, #32
 8019d58:	e003      	b.n	8019d62 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8019d5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019d5c:	fab3 f383 	clz	r3, r3
 8019d60:	b2db      	uxtb	r3, r3
 8019d62:	3301      	adds	r3, #1
 8019d64:	f003 031f 	and.w	r3, r3, #31
 8019d68:	2b09      	cmp	r3, #9
 8019d6a:	bf94      	ite	ls
 8019d6c:	2301      	movls	r3, #1
 8019d6e:	2300      	movhi	r3, #0
 8019d70:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	d079      	beq.n	8019e6a <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8019d76:	683b      	ldr	r3, [r7, #0]
 8019d78:	681b      	ldr	r3, [r3, #0]
 8019d7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	d107      	bne.n	8019d92 <HAL_ADC_ConfigChannel+0x4a2>
 8019d82:	683b      	ldr	r3, [r7, #0]
 8019d84:	681b      	ldr	r3, [r3, #0]
 8019d86:	0e9b      	lsrs	r3, r3, #26
 8019d88:	3301      	adds	r3, #1
 8019d8a:	069b      	lsls	r3, r3, #26
 8019d8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8019d90:	e015      	b.n	8019dbe <HAL_ADC_ConfigChannel+0x4ce>
 8019d92:	683b      	ldr	r3, [r7, #0]
 8019d94:	681b      	ldr	r3, [r3, #0]
 8019d96:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019d98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019d9a:	fa93 f3a3 	rbit	r3, r3
 8019d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8019da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019da2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8019da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019da6:	2b00      	cmp	r3, #0
 8019da8:	d101      	bne.n	8019dae <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8019daa:	2320      	movs	r3, #32
 8019dac:	e003      	b.n	8019db6 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8019dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019db0:	fab3 f383 	clz	r3, r3
 8019db4:	b2db      	uxtb	r3, r3
 8019db6:	3301      	adds	r3, #1
 8019db8:	069b      	lsls	r3, r3, #26
 8019dba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8019dbe:	683b      	ldr	r3, [r7, #0]
 8019dc0:	681b      	ldr	r3, [r3, #0]
 8019dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	d109      	bne.n	8019dde <HAL_ADC_ConfigChannel+0x4ee>
 8019dca:	683b      	ldr	r3, [r7, #0]
 8019dcc:	681b      	ldr	r3, [r3, #0]
 8019dce:	0e9b      	lsrs	r3, r3, #26
 8019dd0:	3301      	adds	r3, #1
 8019dd2:	f003 031f 	and.w	r3, r3, #31
 8019dd6:	2101      	movs	r1, #1
 8019dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8019ddc:	e017      	b.n	8019e0e <HAL_ADC_ConfigChannel+0x51e>
 8019dde:	683b      	ldr	r3, [r7, #0]
 8019de0:	681b      	ldr	r3, [r3, #0]
 8019de2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019de6:	fa93 f3a3 	rbit	r3, r3
 8019dea:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8019dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019dee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8019df0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019df2:	2b00      	cmp	r3, #0
 8019df4:	d101      	bne.n	8019dfa <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8019df6:	2320      	movs	r3, #32
 8019df8:	e003      	b.n	8019e02 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8019dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019dfc:	fab3 f383 	clz	r3, r3
 8019e00:	b2db      	uxtb	r3, r3
 8019e02:	3301      	adds	r3, #1
 8019e04:	f003 031f 	and.w	r3, r3, #31
 8019e08:	2101      	movs	r1, #1
 8019e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8019e0e:	ea42 0103 	orr.w	r1, r2, r3
 8019e12:	683b      	ldr	r3, [r7, #0]
 8019e14:	681b      	ldr	r3, [r3, #0]
 8019e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	d10a      	bne.n	8019e34 <HAL_ADC_ConfigChannel+0x544>
 8019e1e:	683b      	ldr	r3, [r7, #0]
 8019e20:	681b      	ldr	r3, [r3, #0]
 8019e22:	0e9b      	lsrs	r3, r3, #26
 8019e24:	3301      	adds	r3, #1
 8019e26:	f003 021f 	and.w	r2, r3, #31
 8019e2a:	4613      	mov	r3, r2
 8019e2c:	005b      	lsls	r3, r3, #1
 8019e2e:	4413      	add	r3, r2
 8019e30:	051b      	lsls	r3, r3, #20
 8019e32:	e018      	b.n	8019e66 <HAL_ADC_ConfigChannel+0x576>
 8019e34:	683b      	ldr	r3, [r7, #0]
 8019e36:	681b      	ldr	r3, [r3, #0]
 8019e38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e3c:	fa93 f3a3 	rbit	r3, r3
 8019e40:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8019e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019e44:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8019e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	d101      	bne.n	8019e50 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8019e4c:	2320      	movs	r3, #32
 8019e4e:	e003      	b.n	8019e58 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8019e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019e52:	fab3 f383 	clz	r3, r3
 8019e56:	b2db      	uxtb	r3, r3
 8019e58:	3301      	adds	r3, #1
 8019e5a:	f003 021f 	and.w	r2, r3, #31
 8019e5e:	4613      	mov	r3, r2
 8019e60:	005b      	lsls	r3, r3, #1
 8019e62:	4413      	add	r3, r2
 8019e64:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8019e66:	430b      	orrs	r3, r1
 8019e68:	e081      	b.n	8019f6e <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8019e6a:	683b      	ldr	r3, [r7, #0]
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	d107      	bne.n	8019e86 <HAL_ADC_ConfigChannel+0x596>
 8019e76:	683b      	ldr	r3, [r7, #0]
 8019e78:	681b      	ldr	r3, [r3, #0]
 8019e7a:	0e9b      	lsrs	r3, r3, #26
 8019e7c:	3301      	adds	r3, #1
 8019e7e:	069b      	lsls	r3, r3, #26
 8019e80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8019e84:	e015      	b.n	8019eb2 <HAL_ADC_ConfigChannel+0x5c2>
 8019e86:	683b      	ldr	r3, [r7, #0]
 8019e88:	681b      	ldr	r3, [r3, #0]
 8019e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e8e:	fa93 f3a3 	rbit	r3, r3
 8019e92:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8019e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e96:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8019e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019e9a:	2b00      	cmp	r3, #0
 8019e9c:	d101      	bne.n	8019ea2 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8019e9e:	2320      	movs	r3, #32
 8019ea0:	e003      	b.n	8019eaa <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8019ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ea4:	fab3 f383 	clz	r3, r3
 8019ea8:	b2db      	uxtb	r3, r3
 8019eaa:	3301      	adds	r3, #1
 8019eac:	069b      	lsls	r3, r3, #26
 8019eae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8019eb2:	683b      	ldr	r3, [r7, #0]
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019eba:	2b00      	cmp	r3, #0
 8019ebc:	d109      	bne.n	8019ed2 <HAL_ADC_ConfigChannel+0x5e2>
 8019ebe:	683b      	ldr	r3, [r7, #0]
 8019ec0:	681b      	ldr	r3, [r3, #0]
 8019ec2:	0e9b      	lsrs	r3, r3, #26
 8019ec4:	3301      	adds	r3, #1
 8019ec6:	f003 031f 	and.w	r3, r3, #31
 8019eca:	2101      	movs	r1, #1
 8019ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8019ed0:	e017      	b.n	8019f02 <HAL_ADC_ConfigChannel+0x612>
 8019ed2:	683b      	ldr	r3, [r7, #0]
 8019ed4:	681b      	ldr	r3, [r3, #0]
 8019ed6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019ed8:	6a3b      	ldr	r3, [r7, #32]
 8019eda:	fa93 f3a3 	rbit	r3, r3
 8019ede:	61fb      	str	r3, [r7, #28]
  return result;
 8019ee0:	69fb      	ldr	r3, [r7, #28]
 8019ee2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8019ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	d101      	bne.n	8019eee <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8019eea:	2320      	movs	r3, #32
 8019eec:	e003      	b.n	8019ef6 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8019eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ef0:	fab3 f383 	clz	r3, r3
 8019ef4:	b2db      	uxtb	r3, r3
 8019ef6:	3301      	adds	r3, #1
 8019ef8:	f003 031f 	and.w	r3, r3, #31
 8019efc:	2101      	movs	r1, #1
 8019efe:	fa01 f303 	lsl.w	r3, r1, r3
 8019f02:	ea42 0103 	orr.w	r1, r2, r3
 8019f06:	683b      	ldr	r3, [r7, #0]
 8019f08:	681b      	ldr	r3, [r3, #0]
 8019f0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019f0e:	2b00      	cmp	r3, #0
 8019f10:	d10d      	bne.n	8019f2e <HAL_ADC_ConfigChannel+0x63e>
 8019f12:	683b      	ldr	r3, [r7, #0]
 8019f14:	681b      	ldr	r3, [r3, #0]
 8019f16:	0e9b      	lsrs	r3, r3, #26
 8019f18:	3301      	adds	r3, #1
 8019f1a:	f003 021f 	and.w	r2, r3, #31
 8019f1e:	4613      	mov	r3, r2
 8019f20:	005b      	lsls	r3, r3, #1
 8019f22:	4413      	add	r3, r2
 8019f24:	3b1e      	subs	r3, #30
 8019f26:	051b      	lsls	r3, r3, #20
 8019f28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8019f2c:	e01e      	b.n	8019f6c <HAL_ADC_ConfigChannel+0x67c>
 8019f2e:	683b      	ldr	r3, [r7, #0]
 8019f30:	681b      	ldr	r3, [r3, #0]
 8019f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019f34:	697b      	ldr	r3, [r7, #20]
 8019f36:	fa93 f3a3 	rbit	r3, r3
 8019f3a:	613b      	str	r3, [r7, #16]
  return result;
 8019f3c:	693b      	ldr	r3, [r7, #16]
 8019f3e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8019f40:	69bb      	ldr	r3, [r7, #24]
 8019f42:	2b00      	cmp	r3, #0
 8019f44:	d104      	bne.n	8019f50 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8019f46:	2320      	movs	r3, #32
 8019f48:	e006      	b.n	8019f58 <HAL_ADC_ConfigChannel+0x668>
 8019f4a:	bf00      	nop
 8019f4c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8019f50:	69bb      	ldr	r3, [r7, #24]
 8019f52:	fab3 f383 	clz	r3, r3
 8019f56:	b2db      	uxtb	r3, r3
 8019f58:	3301      	adds	r3, #1
 8019f5a:	f003 021f 	and.w	r2, r3, #31
 8019f5e:	4613      	mov	r3, r2
 8019f60:	005b      	lsls	r3, r3, #1
 8019f62:	4413      	add	r3, r2
 8019f64:	3b1e      	subs	r3, #30
 8019f66:	051b      	lsls	r3, r3, #20
 8019f68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8019f6c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8019f6e:	683a      	ldr	r2, [r7, #0]
 8019f70:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8019f72:	4619      	mov	r1, r3
 8019f74:	f7fe ff68 	bl	8018e48 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8019f78:	683b      	ldr	r3, [r7, #0]
 8019f7a:	681a      	ldr	r2, [r3, #0]
 8019f7c:	4b48      	ldr	r3, [pc, #288]	; (801a0a0 <HAL_ADC_ConfigChannel+0x7b0>)
 8019f7e:	4013      	ands	r3, r2
 8019f80:	2b00      	cmp	r3, #0
 8019f82:	f000 8082 	beq.w	801a08a <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8019f86:	4847      	ldr	r0, [pc, #284]	; (801a0a4 <HAL_ADC_ConfigChannel+0x7b4>)
 8019f88:	f7fe fe96 	bl	8018cb8 <LL_ADC_GetCommonPathInternalCh>
 8019f8c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8019f90:	4845      	ldr	r0, [pc, #276]	; (801a0a8 <HAL_ADC_ConfigChannel+0x7b8>)
 8019f92:	f7ff f827 	bl	8018fe4 <LL_ADC_IsEnabled>
 8019f96:	4604      	mov	r4, r0
 8019f98:	4844      	ldr	r0, [pc, #272]	; (801a0ac <HAL_ADC_ConfigChannel+0x7bc>)
 8019f9a:	f7ff f823 	bl	8018fe4 <LL_ADC_IsEnabled>
 8019f9e:	4603      	mov	r3, r0
 8019fa0:	4323      	orrs	r3, r4
 8019fa2:	2b00      	cmp	r3, #0
 8019fa4:	d15e      	bne.n	801a064 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8019fa6:	683b      	ldr	r3, [r7, #0]
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	4a41      	ldr	r2, [pc, #260]	; (801a0b0 <HAL_ADC_ConfigChannel+0x7c0>)
 8019fac:	4293      	cmp	r3, r2
 8019fae:	d127      	bne.n	801a000 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8019fb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8019fb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	d121      	bne.n	801a000 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8019fbc:	687b      	ldr	r3, [r7, #4]
 8019fbe:	681b      	ldr	r3, [r3, #0]
 8019fc0:	4a39      	ldr	r2, [pc, #228]	; (801a0a8 <HAL_ADC_ConfigChannel+0x7b8>)
 8019fc2:	4293      	cmp	r3, r2
 8019fc4:	d161      	bne.n	801a08a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8019fc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8019fca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8019fce:	4619      	mov	r1, r3
 8019fd0:	4834      	ldr	r0, [pc, #208]	; (801a0a4 <HAL_ADC_ConfigChannel+0x7b4>)
 8019fd2:	f7fe fe5e 	bl	8018c92 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8019fd6:	4b37      	ldr	r3, [pc, #220]	; (801a0b4 <HAL_ADC_ConfigChannel+0x7c4>)
 8019fd8:	681b      	ldr	r3, [r3, #0]
 8019fda:	099b      	lsrs	r3, r3, #6
 8019fdc:	4a36      	ldr	r2, [pc, #216]	; (801a0b8 <HAL_ADC_ConfigChannel+0x7c8>)
 8019fde:	fba2 2303 	umull	r2, r3, r2, r3
 8019fe2:	099b      	lsrs	r3, r3, #6
 8019fe4:	1c5a      	adds	r2, r3, #1
 8019fe6:	4613      	mov	r3, r2
 8019fe8:	005b      	lsls	r3, r3, #1
 8019fea:	4413      	add	r3, r2
 8019fec:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8019fee:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8019ff0:	e002      	b.n	8019ff8 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8019ff2:	68fb      	ldr	r3, [r7, #12]
 8019ff4:	3b01      	subs	r3, #1
 8019ff6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8019ff8:	68fb      	ldr	r3, [r7, #12]
 8019ffa:	2b00      	cmp	r3, #0
 8019ffc:	d1f9      	bne.n	8019ff2 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8019ffe:	e044      	b.n	801a08a <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 801a000:	683b      	ldr	r3, [r7, #0]
 801a002:	681b      	ldr	r3, [r3, #0]
 801a004:	4a2d      	ldr	r2, [pc, #180]	; (801a0bc <HAL_ADC_ConfigChannel+0x7cc>)
 801a006:	4293      	cmp	r3, r2
 801a008:	d113      	bne.n	801a032 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 801a00a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a00e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801a012:	2b00      	cmp	r3, #0
 801a014:	d10d      	bne.n	801a032 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	4a23      	ldr	r2, [pc, #140]	; (801a0a8 <HAL_ADC_ConfigChannel+0x7b8>)
 801a01c:	4293      	cmp	r3, r2
 801a01e:	d134      	bne.n	801a08a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801a020:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a024:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801a028:	4619      	mov	r1, r3
 801a02a:	481e      	ldr	r0, [pc, #120]	; (801a0a4 <HAL_ADC_ConfigChannel+0x7b4>)
 801a02c:	f7fe fe31 	bl	8018c92 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801a030:	e02b      	b.n	801a08a <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 801a032:	683b      	ldr	r3, [r7, #0]
 801a034:	681b      	ldr	r3, [r3, #0]
 801a036:	4a22      	ldr	r2, [pc, #136]	; (801a0c0 <HAL_ADC_ConfigChannel+0x7d0>)
 801a038:	4293      	cmp	r3, r2
 801a03a:	d126      	bne.n	801a08a <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 801a03c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801a044:	2b00      	cmp	r3, #0
 801a046:	d120      	bne.n	801a08a <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 801a048:	687b      	ldr	r3, [r7, #4]
 801a04a:	681b      	ldr	r3, [r3, #0]
 801a04c:	4a16      	ldr	r2, [pc, #88]	; (801a0a8 <HAL_ADC_ConfigChannel+0x7b8>)
 801a04e:	4293      	cmp	r3, r2
 801a050:	d11b      	bne.n	801a08a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801a052:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a056:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801a05a:	4619      	mov	r1, r3
 801a05c:	4811      	ldr	r0, [pc, #68]	; (801a0a4 <HAL_ADC_ConfigChannel+0x7b4>)
 801a05e:	f7fe fe18 	bl	8018c92 <LL_ADC_SetCommonPathInternalCh>
 801a062:	e012      	b.n	801a08a <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a068:	f043 0220 	orr.w	r2, r3, #32
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 801a070:	2301      	movs	r3, #1
 801a072:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 801a076:	e008      	b.n	801a08a <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a07c:	f043 0220 	orr.w	r2, r3, #32
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 801a084:	2301      	movs	r3, #1
 801a086:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	2200      	movs	r2, #0
 801a08e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 801a092:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 801a096:	4618      	mov	r0, r3
 801a098:	37dc      	adds	r7, #220	; 0xdc
 801a09a:	46bd      	mov	sp, r7
 801a09c:	bd90      	pop	{r4, r7, pc}
 801a09e:	bf00      	nop
 801a0a0:	80080000 	.word	0x80080000
 801a0a4:	42028300 	.word	0x42028300
 801a0a8:	42028000 	.word	0x42028000
 801a0ac:	42028100 	.word	0x42028100
 801a0b0:	c7520000 	.word	0xc7520000
 801a0b4:	20000090 	.word	0x20000090
 801a0b8:	053e2d63 	.word	0x053e2d63
 801a0bc:	cb840000 	.word	0xcb840000
 801a0c0:	80000001 	.word	0x80000001

0801a0c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 801a0c4:	b580      	push	{r7, lr}
 801a0c6:	b084      	sub	sp, #16
 801a0c8:	af00      	add	r7, sp, #0
 801a0ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 801a0cc:	2300      	movs	r3, #0
 801a0ce:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801a0d0:	687b      	ldr	r3, [r7, #4]
 801a0d2:	681b      	ldr	r3, [r3, #0]
 801a0d4:	4618      	mov	r0, r3
 801a0d6:	f7fe ff85 	bl	8018fe4 <LL_ADC_IsEnabled>
 801a0da:	4603      	mov	r3, r0
 801a0dc:	2b00      	cmp	r3, #0
 801a0de:	d169      	bne.n	801a1b4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 801a0e0:	687b      	ldr	r3, [r7, #4]
 801a0e2:	681b      	ldr	r3, [r3, #0]
 801a0e4:	689a      	ldr	r2, [r3, #8]
 801a0e6:	4b36      	ldr	r3, [pc, #216]	; (801a1c0 <ADC_Enable+0xfc>)
 801a0e8:	4013      	ands	r3, r2
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	d00d      	beq.n	801a10a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a0f2:	f043 0210 	orr.w	r2, r3, #16
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a0fa:	687b      	ldr	r3, [r7, #4]
 801a0fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a0fe:	f043 0201 	orr.w	r2, r3, #1
 801a102:	687b      	ldr	r3, [r7, #4]
 801a104:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 801a106:	2301      	movs	r3, #1
 801a108:	e055      	b.n	801a1b6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	4618      	mov	r0, r3
 801a110:	f7fe ff54 	bl	8018fbc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 801a114:	482b      	ldr	r0, [pc, #172]	; (801a1c4 <ADC_Enable+0x100>)
 801a116:	f7fe fdcf 	bl	8018cb8 <LL_ADC_GetCommonPathInternalCh>
 801a11a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 801a11c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 801a120:	2b00      	cmp	r3, #0
 801a122:	d013      	beq.n	801a14c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 801a124:	4b28      	ldr	r3, [pc, #160]	; (801a1c8 <ADC_Enable+0x104>)
 801a126:	681b      	ldr	r3, [r3, #0]
 801a128:	099b      	lsrs	r3, r3, #6
 801a12a:	4a28      	ldr	r2, [pc, #160]	; (801a1cc <ADC_Enable+0x108>)
 801a12c:	fba2 2303 	umull	r2, r3, r2, r3
 801a130:	099b      	lsrs	r3, r3, #6
 801a132:	1c5a      	adds	r2, r3, #1
 801a134:	4613      	mov	r3, r2
 801a136:	005b      	lsls	r3, r3, #1
 801a138:	4413      	add	r3, r2
 801a13a:	009b      	lsls	r3, r3, #2
 801a13c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 801a13e:	e002      	b.n	801a146 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 801a140:	68bb      	ldr	r3, [r7, #8]
 801a142:	3b01      	subs	r3, #1
 801a144:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 801a146:	68bb      	ldr	r3, [r7, #8]
 801a148:	2b00      	cmp	r3, #0
 801a14a:	d1f9      	bne.n	801a140 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 801a14c:	f7fe fd82 	bl	8018c54 <HAL_GetTick>
 801a150:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801a152:	e028      	b.n	801a1a6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	681b      	ldr	r3, [r3, #0]
 801a158:	4618      	mov	r0, r3
 801a15a:	f7fe ff43 	bl	8018fe4 <LL_ADC_IsEnabled>
 801a15e:	4603      	mov	r3, r0
 801a160:	2b00      	cmp	r3, #0
 801a162:	d104      	bne.n	801a16e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 801a164:	687b      	ldr	r3, [r7, #4]
 801a166:	681b      	ldr	r3, [r3, #0]
 801a168:	4618      	mov	r0, r3
 801a16a:	f7fe ff27 	bl	8018fbc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 801a16e:	f7fe fd71 	bl	8018c54 <HAL_GetTick>
 801a172:	4602      	mov	r2, r0
 801a174:	68fb      	ldr	r3, [r7, #12]
 801a176:	1ad3      	subs	r3, r2, r3
 801a178:	2b02      	cmp	r3, #2
 801a17a:	d914      	bls.n	801a1a6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801a17c:	687b      	ldr	r3, [r7, #4]
 801a17e:	681b      	ldr	r3, [r3, #0]
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	f003 0301 	and.w	r3, r3, #1
 801a186:	2b01      	cmp	r3, #1
 801a188:	d00d      	beq.n	801a1a6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a18e:	f043 0210 	orr.w	r2, r3, #16
 801a192:	687b      	ldr	r3, [r7, #4]
 801a194:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a19a:	f043 0201 	orr.w	r2, r3, #1
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 801a1a2:	2301      	movs	r3, #1
 801a1a4:	e007      	b.n	801a1b6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	681b      	ldr	r3, [r3, #0]
 801a1aa:	681b      	ldr	r3, [r3, #0]
 801a1ac:	f003 0301 	and.w	r3, r3, #1
 801a1b0:	2b01      	cmp	r3, #1
 801a1b2:	d1cf      	bne.n	801a154 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801a1b4:	2300      	movs	r3, #0
}
 801a1b6:	4618      	mov	r0, r3
 801a1b8:	3710      	adds	r7, #16
 801a1ba:	46bd      	mov	sp, r7
 801a1bc:	bd80      	pop	{r7, pc}
 801a1be:	bf00      	nop
 801a1c0:	8000003f 	.word	0x8000003f
 801a1c4:	42028300 	.word	0x42028300
 801a1c8:	20000090 	.word	0x20000090
 801a1cc:	053e2d63 	.word	0x053e2d63

0801a1d0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 801a1d0:	b580      	push	{r7, lr}
 801a1d2:	b084      	sub	sp, #16
 801a1d4:	af00      	add	r7, sp, #0
 801a1d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a1dc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 801a1de:	68fb      	ldr	r3, [r7, #12]
 801a1e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a1e2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801a1e6:	2b00      	cmp	r3, #0
 801a1e8:	d14b      	bne.n	801a282 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801a1ea:	68fb      	ldr	r3, [r7, #12]
 801a1ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a1ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801a1f2:	68fb      	ldr	r3, [r7, #12]
 801a1f4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 801a1f6:	68fb      	ldr	r3, [r7, #12]
 801a1f8:	681b      	ldr	r3, [r3, #0]
 801a1fa:	681b      	ldr	r3, [r3, #0]
 801a1fc:	f003 0308 	and.w	r3, r3, #8
 801a200:	2b00      	cmp	r3, #0
 801a202:	d021      	beq.n	801a248 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 801a204:	68fb      	ldr	r3, [r7, #12]
 801a206:	681b      	ldr	r3, [r3, #0]
 801a208:	4618      	mov	r0, r3
 801a20a:	f7fe fdcb 	bl	8018da4 <LL_ADC_REG_IsTriggerSourceSWStart>
 801a20e:	4603      	mov	r3, r0
 801a210:	2b00      	cmp	r3, #0
 801a212:	d032      	beq.n	801a27a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 801a214:	68fb      	ldr	r3, [r7, #12]
 801a216:	681b      	ldr	r3, [r3, #0]
 801a218:	68db      	ldr	r3, [r3, #12]
 801a21a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a21e:	2b00      	cmp	r3, #0
 801a220:	d12b      	bne.n	801a27a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801a222:	68fb      	ldr	r3, [r7, #12]
 801a224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a226:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801a22a:	68fb      	ldr	r3, [r7, #12]
 801a22c:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801a22e:	68fb      	ldr	r3, [r7, #12]
 801a230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a232:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a236:	2b00      	cmp	r3, #0
 801a238:	d11f      	bne.n	801a27a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801a23a:	68fb      	ldr	r3, [r7, #12]
 801a23c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a23e:	f043 0201 	orr.w	r2, r3, #1
 801a242:	68fb      	ldr	r3, [r7, #12]
 801a244:	659a      	str	r2, [r3, #88]	; 0x58
 801a246:	e018      	b.n	801a27a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 801a248:	68fb      	ldr	r3, [r7, #12]
 801a24a:	681b      	ldr	r3, [r3, #0]
 801a24c:	68db      	ldr	r3, [r3, #12]
 801a24e:	f003 0302 	and.w	r3, r3, #2
 801a252:	2b00      	cmp	r3, #0
 801a254:	d111      	bne.n	801a27a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801a256:	68fb      	ldr	r3, [r7, #12]
 801a258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a25a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801a25e:	68fb      	ldr	r3, [r7, #12]
 801a260:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801a262:	68fb      	ldr	r3, [r7, #12]
 801a264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a266:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a26a:	2b00      	cmp	r3, #0
 801a26c:	d105      	bne.n	801a27a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801a26e:	68fb      	ldr	r3, [r7, #12]
 801a270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a272:	f043 0201 	orr.w	r2, r3, #1
 801a276:	68fb      	ldr	r3, [r7, #12]
 801a278:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801a27a:	68f8      	ldr	r0, [r7, #12]
 801a27c:	f7e8 f88c 	bl	8002398 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801a280:	e00e      	b.n	801a2a0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801a282:	68fb      	ldr	r3, [r7, #12]
 801a284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a286:	f003 0310 	and.w	r3, r3, #16
 801a28a:	2b00      	cmp	r3, #0
 801a28c:	d003      	beq.n	801a296 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 801a28e:	68f8      	ldr	r0, [r7, #12]
 801a290:	f7ff fb24 	bl	80198dc <HAL_ADC_ErrorCallback>
}
 801a294:	e004      	b.n	801a2a0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 801a296:	68fb      	ldr	r3, [r7, #12]
 801a298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a29a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a29c:	6878      	ldr	r0, [r7, #4]
 801a29e:	4798      	blx	r3
}
 801a2a0:	bf00      	nop
 801a2a2:	3710      	adds	r7, #16
 801a2a4:	46bd      	mov	sp, r7
 801a2a6:	bd80      	pop	{r7, pc}

0801a2a8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 801a2a8:	b580      	push	{r7, lr}
 801a2aa:	b084      	sub	sp, #16
 801a2ac:	af00      	add	r7, sp, #0
 801a2ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a2b4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801a2b6:	68f8      	ldr	r0, [r7, #12]
 801a2b8:	f7ff fafc 	bl	80198b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801a2bc:	bf00      	nop
 801a2be:	3710      	adds	r7, #16
 801a2c0:	46bd      	mov	sp, r7
 801a2c2:	bd80      	pop	{r7, pc}

0801a2c4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 801a2c4:	b580      	push	{r7, lr}
 801a2c6:	b084      	sub	sp, #16
 801a2c8:	af00      	add	r7, sp, #0
 801a2ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801a2cc:	687b      	ldr	r3, [r7, #4]
 801a2ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a2d0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 801a2d2:	68fb      	ldr	r3, [r7, #12]
 801a2d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a2d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801a2da:	68fb      	ldr	r3, [r7, #12]
 801a2dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 801a2de:	68fb      	ldr	r3, [r7, #12]
 801a2e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a2e2:	f043 0204 	orr.w	r2, r3, #4
 801a2e6:	68fb      	ldr	r3, [r7, #12]
 801a2e8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 801a2ea:	68f8      	ldr	r0, [r7, #12]
 801a2ec:	f7ff faf6 	bl	80198dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801a2f0:	bf00      	nop
 801a2f2:	3710      	adds	r7, #16
 801a2f4:	46bd      	mov	sp, r7
 801a2f6:	bd80      	pop	{r7, pc}

0801a2f8 <LL_ADC_IsEnabled>:
{
 801a2f8:	b480      	push	{r7}
 801a2fa:	b083      	sub	sp, #12
 801a2fc:	af00      	add	r7, sp, #0
 801a2fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	689b      	ldr	r3, [r3, #8]
 801a304:	f003 0301 	and.w	r3, r3, #1
 801a308:	2b01      	cmp	r3, #1
 801a30a:	d101      	bne.n	801a310 <LL_ADC_IsEnabled+0x18>
 801a30c:	2301      	movs	r3, #1
 801a30e:	e000      	b.n	801a312 <LL_ADC_IsEnabled+0x1a>
 801a310:	2300      	movs	r3, #0
}
 801a312:	4618      	mov	r0, r3
 801a314:	370c      	adds	r7, #12
 801a316:	46bd      	mov	sp, r7
 801a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a31c:	4770      	bx	lr

0801a31e <LL_ADC_REG_IsConversionOngoing>:
{
 801a31e:	b480      	push	{r7}
 801a320:	b083      	sub	sp, #12
 801a322:	af00      	add	r7, sp, #0
 801a324:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	689b      	ldr	r3, [r3, #8]
 801a32a:	f003 0304 	and.w	r3, r3, #4
 801a32e:	2b04      	cmp	r3, #4
 801a330:	d101      	bne.n	801a336 <LL_ADC_REG_IsConversionOngoing+0x18>
 801a332:	2301      	movs	r3, #1
 801a334:	e000      	b.n	801a338 <LL_ADC_REG_IsConversionOngoing+0x1a>
 801a336:	2300      	movs	r3, #0
}
 801a338:	4618      	mov	r0, r3
 801a33a:	370c      	adds	r7, #12
 801a33c:	46bd      	mov	sp, r7
 801a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a342:	4770      	bx	lr

0801a344 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 801a344:	b480      	push	{r7}
 801a346:	b083      	sub	sp, #12
 801a348:	af00      	add	r7, sp, #0
 801a34a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 801a34c:	bf00      	nop
 801a34e:	370c      	adds	r7, #12
 801a350:	46bd      	mov	sp, r7
 801a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a356:	4770      	bx	lr

0801a358 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 801a358:	b480      	push	{r7}
 801a35a:	b083      	sub	sp, #12
 801a35c:	af00      	add	r7, sp, #0
 801a35e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 801a360:	bf00      	nop
 801a362:	370c      	adds	r7, #12
 801a364:	46bd      	mov	sp, r7
 801a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a36a:	4770      	bx	lr

0801a36c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 801a36c:	b480      	push	{r7}
 801a36e:	b083      	sub	sp, #12
 801a370:	af00      	add	r7, sp, #0
 801a372:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 801a374:	bf00      	nop
 801a376:	370c      	adds	r7, #12
 801a378:	46bd      	mov	sp, r7
 801a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a37e:	4770      	bx	lr

0801a380 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 801a380:	b480      	push	{r7}
 801a382:	b083      	sub	sp, #12
 801a384:	af00      	add	r7, sp, #0
 801a386:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 801a388:	bf00      	nop
 801a38a:	370c      	adds	r7, #12
 801a38c:	46bd      	mov	sp, r7
 801a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a392:	4770      	bx	lr

0801a394 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 801a394:	b480      	push	{r7}
 801a396:	b083      	sub	sp, #12
 801a398:	af00      	add	r7, sp, #0
 801a39a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 801a39c:	bf00      	nop
 801a39e:	370c      	adds	r7, #12
 801a3a0:	46bd      	mov	sp, r7
 801a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3a6:	4770      	bx	lr

0801a3a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 801a3a8:	b590      	push	{r4, r7, lr}
 801a3aa:	b0a1      	sub	sp, #132	; 0x84
 801a3ac:	af00      	add	r7, sp, #0
 801a3ae:	6078      	str	r0, [r7, #4]
 801a3b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801a3b2:	2300      	movs	r3, #0
 801a3b4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 801a3b8:	687b      	ldr	r3, [r7, #4]
 801a3ba:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801a3be:	2b01      	cmp	r3, #1
 801a3c0:	d101      	bne.n	801a3c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 801a3c2:	2302      	movs	r3, #2
 801a3c4:	e089      	b.n	801a4da <HAL_ADCEx_MultiModeConfigChannel+0x132>
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	2201      	movs	r2, #1
 801a3ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 801a3ce:	2300      	movs	r3, #0
 801a3d0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 801a3d2:	2300      	movs	r3, #0
 801a3d4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 801a3d6:	687b      	ldr	r3, [r7, #4]
 801a3d8:	681b      	ldr	r3, [r3, #0]
 801a3da:	4a42      	ldr	r2, [pc, #264]	; (801a4e4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 801a3dc:	4293      	cmp	r3, r2
 801a3de:	d102      	bne.n	801a3e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 801a3e0:	4b41      	ldr	r3, [pc, #260]	; (801a4e8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 801a3e2:	60fb      	str	r3, [r7, #12]
 801a3e4:	e001      	b.n	801a3ea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 801a3e6:	2300      	movs	r3, #0
 801a3e8:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 801a3ea:	68fb      	ldr	r3, [r7, #12]
 801a3ec:	2b00      	cmp	r3, #0
 801a3ee:	d10b      	bne.n	801a408 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a3f4:	f043 0220 	orr.w	r2, r3, #32
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 801a3fc:	687b      	ldr	r3, [r7, #4]
 801a3fe:	2200      	movs	r2, #0
 801a400:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 801a404:	2301      	movs	r3, #1
 801a406:	e068      	b.n	801a4da <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 801a408:	68fb      	ldr	r3, [r7, #12]
 801a40a:	4618      	mov	r0, r3
 801a40c:	f7ff ff87 	bl	801a31e <LL_ADC_REG_IsConversionOngoing>
 801a410:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801a412:	687b      	ldr	r3, [r7, #4]
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	4618      	mov	r0, r3
 801a418:	f7ff ff81 	bl	801a31e <LL_ADC_REG_IsConversionOngoing>
 801a41c:	4603      	mov	r3, r0
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d14a      	bne.n	801a4b8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 801a422:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a424:	2b00      	cmp	r3, #0
 801a426:	d147      	bne.n	801a4b8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 801a428:	4b30      	ldr	r3, [pc, #192]	; (801a4ec <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 801a42a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 801a42c:	683b      	ldr	r3, [r7, #0]
 801a42e:	681b      	ldr	r3, [r3, #0]
 801a430:	2b00      	cmp	r3, #0
 801a432:	d027      	beq.n	801a484 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 801a434:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a436:	689b      	ldr	r3, [r3, #8]
 801a438:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801a43c:	683b      	ldr	r3, [r7, #0]
 801a43e:	6859      	ldr	r1, [r3, #4]
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a446:	035b      	lsls	r3, r3, #13
 801a448:	430b      	orrs	r3, r1
 801a44a:	431a      	orrs	r2, r3
 801a44c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a44e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801a450:	4824      	ldr	r0, [pc, #144]	; (801a4e4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 801a452:	f7ff ff51 	bl	801a2f8 <LL_ADC_IsEnabled>
 801a456:	4604      	mov	r4, r0
 801a458:	4823      	ldr	r0, [pc, #140]	; (801a4e8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 801a45a:	f7ff ff4d 	bl	801a2f8 <LL_ADC_IsEnabled>
 801a45e:	4603      	mov	r3, r0
 801a460:	4323      	orrs	r3, r4
 801a462:	2b00      	cmp	r3, #0
 801a464:	d132      	bne.n	801a4cc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 801a466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a468:	689b      	ldr	r3, [r3, #8]
 801a46a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 801a46e:	f023 030f 	bic.w	r3, r3, #15
 801a472:	683a      	ldr	r2, [r7, #0]
 801a474:	6811      	ldr	r1, [r2, #0]
 801a476:	683a      	ldr	r2, [r7, #0]
 801a478:	6892      	ldr	r2, [r2, #8]
 801a47a:	430a      	orrs	r2, r1
 801a47c:	431a      	orrs	r2, r3
 801a47e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a480:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 801a482:	e023      	b.n	801a4cc <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 801a484:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a486:	689b      	ldr	r3, [r3, #8]
 801a488:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801a48c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a48e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801a490:	4814      	ldr	r0, [pc, #80]	; (801a4e4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 801a492:	f7ff ff31 	bl	801a2f8 <LL_ADC_IsEnabled>
 801a496:	4604      	mov	r4, r0
 801a498:	4813      	ldr	r0, [pc, #76]	; (801a4e8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 801a49a:	f7ff ff2d 	bl	801a2f8 <LL_ADC_IsEnabled>
 801a49e:	4603      	mov	r3, r0
 801a4a0:	4323      	orrs	r3, r4
 801a4a2:	2b00      	cmp	r3, #0
 801a4a4:	d112      	bne.n	801a4cc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 801a4a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a4a8:	689b      	ldr	r3, [r3, #8]
 801a4aa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 801a4ae:	f023 030f 	bic.w	r3, r3, #15
 801a4b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801a4b4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 801a4b6:	e009      	b.n	801a4cc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a4bc:	f043 0220 	orr.w	r2, r3, #32
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 801a4c4:	2301      	movs	r3, #1
 801a4c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801a4ca:	e000      	b.n	801a4ce <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 801a4cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	2200      	movs	r2, #0
 801a4d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 801a4d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 801a4da:	4618      	mov	r0, r3
 801a4dc:	3784      	adds	r7, #132	; 0x84
 801a4de:	46bd      	mov	sp, r7
 801a4e0:	bd90      	pop	{r4, r7, pc}
 801a4e2:	bf00      	nop
 801a4e4:	42028000 	.word	0x42028000
 801a4e8:	42028100 	.word	0x42028100
 801a4ec:	42028300 	.word	0x42028300

0801a4f0 <__NVIC_SetPriorityGrouping>:
{
 801a4f0:	b480      	push	{r7}
 801a4f2:	b085      	sub	sp, #20
 801a4f4:	af00      	add	r7, sp, #0
 801a4f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	f003 0307 	and.w	r3, r3, #7
 801a4fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801a500:	4b0c      	ldr	r3, [pc, #48]	; (801a534 <__NVIC_SetPriorityGrouping+0x44>)
 801a502:	68db      	ldr	r3, [r3, #12]
 801a504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801a506:	68ba      	ldr	r2, [r7, #8]
 801a508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801a50c:	4013      	ands	r3, r2
 801a50e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801a510:	68fb      	ldr	r3, [r7, #12]
 801a512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801a514:	68bb      	ldr	r3, [r7, #8]
 801a516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801a518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801a51c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801a520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801a522:	4a04      	ldr	r2, [pc, #16]	; (801a534 <__NVIC_SetPriorityGrouping+0x44>)
 801a524:	68bb      	ldr	r3, [r7, #8]
 801a526:	60d3      	str	r3, [r2, #12]
}
 801a528:	bf00      	nop
 801a52a:	3714      	adds	r7, #20
 801a52c:	46bd      	mov	sp, r7
 801a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a532:	4770      	bx	lr
 801a534:	e000ed00 	.word	0xe000ed00

0801a538 <__NVIC_GetPriorityGrouping>:
{
 801a538:	b480      	push	{r7}
 801a53a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801a53c:	4b04      	ldr	r3, [pc, #16]	; (801a550 <__NVIC_GetPriorityGrouping+0x18>)
 801a53e:	68db      	ldr	r3, [r3, #12]
 801a540:	0a1b      	lsrs	r3, r3, #8
 801a542:	f003 0307 	and.w	r3, r3, #7
}
 801a546:	4618      	mov	r0, r3
 801a548:	46bd      	mov	sp, r7
 801a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a54e:	4770      	bx	lr
 801a550:	e000ed00 	.word	0xe000ed00

0801a554 <__NVIC_EnableIRQ>:
{
 801a554:	b480      	push	{r7}
 801a556:	b083      	sub	sp, #12
 801a558:	af00      	add	r7, sp, #0
 801a55a:	4603      	mov	r3, r0
 801a55c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801a55e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a562:	2b00      	cmp	r3, #0
 801a564:	db0b      	blt.n	801a57e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801a566:	79fb      	ldrb	r3, [r7, #7]
 801a568:	f003 021f 	and.w	r2, r3, #31
 801a56c:	4907      	ldr	r1, [pc, #28]	; (801a58c <__NVIC_EnableIRQ+0x38>)
 801a56e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a572:	095b      	lsrs	r3, r3, #5
 801a574:	2001      	movs	r0, #1
 801a576:	fa00 f202 	lsl.w	r2, r0, r2
 801a57a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801a57e:	bf00      	nop
 801a580:	370c      	adds	r7, #12
 801a582:	46bd      	mov	sp, r7
 801a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a588:	4770      	bx	lr
 801a58a:	bf00      	nop
 801a58c:	e000e100 	.word	0xe000e100

0801a590 <__NVIC_SetPriority>:
{
 801a590:	b480      	push	{r7}
 801a592:	b083      	sub	sp, #12
 801a594:	af00      	add	r7, sp, #0
 801a596:	4603      	mov	r3, r0
 801a598:	6039      	str	r1, [r7, #0]
 801a59a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801a59c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a5a0:	2b00      	cmp	r3, #0
 801a5a2:	db0a      	blt.n	801a5ba <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a5a4:	683b      	ldr	r3, [r7, #0]
 801a5a6:	b2da      	uxtb	r2, r3
 801a5a8:	490c      	ldr	r1, [pc, #48]	; (801a5dc <__NVIC_SetPriority+0x4c>)
 801a5aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a5ae:	0152      	lsls	r2, r2, #5
 801a5b0:	b2d2      	uxtb	r2, r2
 801a5b2:	440b      	add	r3, r1
 801a5b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801a5b8:	e00a      	b.n	801a5d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a5ba:	683b      	ldr	r3, [r7, #0]
 801a5bc:	b2da      	uxtb	r2, r3
 801a5be:	4908      	ldr	r1, [pc, #32]	; (801a5e0 <__NVIC_SetPriority+0x50>)
 801a5c0:	79fb      	ldrb	r3, [r7, #7]
 801a5c2:	f003 030f 	and.w	r3, r3, #15
 801a5c6:	3b04      	subs	r3, #4
 801a5c8:	0152      	lsls	r2, r2, #5
 801a5ca:	b2d2      	uxtb	r2, r2
 801a5cc:	440b      	add	r3, r1
 801a5ce:	761a      	strb	r2, [r3, #24]
}
 801a5d0:	bf00      	nop
 801a5d2:	370c      	adds	r7, #12
 801a5d4:	46bd      	mov	sp, r7
 801a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5da:	4770      	bx	lr
 801a5dc:	e000e100 	.word	0xe000e100
 801a5e0:	e000ed00 	.word	0xe000ed00

0801a5e4 <NVIC_EncodePriority>:
{
 801a5e4:	b480      	push	{r7}
 801a5e6:	b089      	sub	sp, #36	; 0x24
 801a5e8:	af00      	add	r7, sp, #0
 801a5ea:	60f8      	str	r0, [r7, #12]
 801a5ec:	60b9      	str	r1, [r7, #8]
 801a5ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801a5f0:	68fb      	ldr	r3, [r7, #12]
 801a5f2:	f003 0307 	and.w	r3, r3, #7
 801a5f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801a5f8:	69fb      	ldr	r3, [r7, #28]
 801a5fa:	f1c3 0307 	rsb	r3, r3, #7
 801a5fe:	2b03      	cmp	r3, #3
 801a600:	bf28      	it	cs
 801a602:	2303      	movcs	r3, #3
 801a604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801a606:	69fb      	ldr	r3, [r7, #28]
 801a608:	3303      	adds	r3, #3
 801a60a:	2b06      	cmp	r3, #6
 801a60c:	d902      	bls.n	801a614 <NVIC_EncodePriority+0x30>
 801a60e:	69fb      	ldr	r3, [r7, #28]
 801a610:	3b04      	subs	r3, #4
 801a612:	e000      	b.n	801a616 <NVIC_EncodePriority+0x32>
 801a614:	2300      	movs	r3, #0
 801a616:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801a618:	f04f 32ff 	mov.w	r2, #4294967295
 801a61c:	69bb      	ldr	r3, [r7, #24]
 801a61e:	fa02 f303 	lsl.w	r3, r2, r3
 801a622:	43da      	mvns	r2, r3
 801a624:	68bb      	ldr	r3, [r7, #8]
 801a626:	401a      	ands	r2, r3
 801a628:	697b      	ldr	r3, [r7, #20]
 801a62a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801a62c:	f04f 31ff 	mov.w	r1, #4294967295
 801a630:	697b      	ldr	r3, [r7, #20]
 801a632:	fa01 f303 	lsl.w	r3, r1, r3
 801a636:	43d9      	mvns	r1, r3
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801a63c:	4313      	orrs	r3, r2
}
 801a63e:	4618      	mov	r0, r3
 801a640:	3724      	adds	r7, #36	; 0x24
 801a642:	46bd      	mov	sp, r7
 801a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a648:	4770      	bx	lr

0801a64a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801a64a:	b580      	push	{r7, lr}
 801a64c:	b082      	sub	sp, #8
 801a64e:	af00      	add	r7, sp, #0
 801a650:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801a652:	6878      	ldr	r0, [r7, #4]
 801a654:	f7ff ff4c 	bl	801a4f0 <__NVIC_SetPriorityGrouping>
}
 801a658:	bf00      	nop
 801a65a:	3708      	adds	r7, #8
 801a65c:	46bd      	mov	sp, r7
 801a65e:	bd80      	pop	{r7, pc}

0801a660 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801a660:	b580      	push	{r7, lr}
 801a662:	b086      	sub	sp, #24
 801a664:	af00      	add	r7, sp, #0
 801a666:	4603      	mov	r3, r0
 801a668:	60b9      	str	r1, [r7, #8]
 801a66a:	607a      	str	r2, [r7, #4]
 801a66c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801a66e:	f7ff ff63 	bl	801a538 <__NVIC_GetPriorityGrouping>
 801a672:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801a674:	687a      	ldr	r2, [r7, #4]
 801a676:	68b9      	ldr	r1, [r7, #8]
 801a678:	6978      	ldr	r0, [r7, #20]
 801a67a:	f7ff ffb3 	bl	801a5e4 <NVIC_EncodePriority>
 801a67e:	4602      	mov	r2, r0
 801a680:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a684:	4611      	mov	r1, r2
 801a686:	4618      	mov	r0, r3
 801a688:	f7ff ff82 	bl	801a590 <__NVIC_SetPriority>
}
 801a68c:	bf00      	nop
 801a68e:	3718      	adds	r7, #24
 801a690:	46bd      	mov	sp, r7
 801a692:	bd80      	pop	{r7, pc}

0801a694 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801a694:	b580      	push	{r7, lr}
 801a696:	b082      	sub	sp, #8
 801a698:	af00      	add	r7, sp, #0
 801a69a:	4603      	mov	r3, r0
 801a69c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801a69e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a6a2:	4618      	mov	r0, r3
 801a6a4:	f7ff ff56 	bl	801a554 <__NVIC_EnableIRQ>
}
 801a6a8:	bf00      	nop
 801a6aa:	3708      	adds	r7, #8
 801a6ac:	46bd      	mov	sp, r7
 801a6ae:	bd80      	pop	{r7, pc}

0801a6b0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801a6b0:	b580      	push	{r7, lr}
 801a6b2:	b084      	sub	sp, #16
 801a6b4:	af00      	add	r7, sp, #0
 801a6b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 801a6b8:	687b      	ldr	r3, [r7, #4]
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	d101      	bne.n	801a6c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 801a6be:	2301      	movs	r3, #1
 801a6c0:	e08d      	b.n	801a7de <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 801a6c2:	687b      	ldr	r3, [r7, #4]
 801a6c4:	681b      	ldr	r3, [r3, #0]
 801a6c6:	461a      	mov	r2, r3
 801a6c8:	4b47      	ldr	r3, [pc, #284]	; (801a7e8 <HAL_DMA_Init+0x138>)
 801a6ca:	429a      	cmp	r2, r3
 801a6cc:	d80f      	bhi.n	801a6ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 801a6ce:	687b      	ldr	r3, [r7, #4]
 801a6d0:	681b      	ldr	r3, [r3, #0]
 801a6d2:	461a      	mov	r2, r3
 801a6d4:	4b45      	ldr	r3, [pc, #276]	; (801a7ec <HAL_DMA_Init+0x13c>)
 801a6d6:	4413      	add	r3, r2
 801a6d8:	4a45      	ldr	r2, [pc, #276]	; (801a7f0 <HAL_DMA_Init+0x140>)
 801a6da:	fba2 2303 	umull	r2, r3, r2, r3
 801a6de:	091b      	lsrs	r3, r3, #4
 801a6e0:	009a      	lsls	r2, r3, #2
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	4a42      	ldr	r2, [pc, #264]	; (801a7f4 <HAL_DMA_Init+0x144>)
 801a6ea:	649a      	str	r2, [r3, #72]	; 0x48
 801a6ec:	e00e      	b.n	801a70c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	681b      	ldr	r3, [r3, #0]
 801a6f2:	461a      	mov	r2, r3
 801a6f4:	4b40      	ldr	r3, [pc, #256]	; (801a7f8 <HAL_DMA_Init+0x148>)
 801a6f6:	4413      	add	r3, r2
 801a6f8:	4a3d      	ldr	r2, [pc, #244]	; (801a7f0 <HAL_DMA_Init+0x140>)
 801a6fa:	fba2 2303 	umull	r2, r3, r2, r3
 801a6fe:	091b      	lsrs	r3, r3, #4
 801a700:	009a      	lsls	r2, r3, #2
 801a702:	687b      	ldr	r3, [r7, #4]
 801a704:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 801a706:	687b      	ldr	r3, [r7, #4]
 801a708:	4a3c      	ldr	r2, [pc, #240]	; (801a7fc <HAL_DMA_Init+0x14c>)
 801a70a:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801a70c:	687b      	ldr	r3, [r7, #4]
 801a70e:	2202      	movs	r2, #2
 801a710:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	681b      	ldr	r3, [r3, #0]
 801a718:	681b      	ldr	r3, [r3, #0]
 801a71a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 801a71c:	68fb      	ldr	r3, [r7, #12]
 801a71e:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 801a722:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 801a726:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 801a730:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	691b      	ldr	r3, [r3, #16]
 801a736:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801a73c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	699b      	ldr	r3, [r3, #24]
 801a742:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801a744:	687b      	ldr	r3, [r7, #4]
 801a746:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801a748:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	6a1b      	ldr	r3, [r3, #32]
 801a74e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 801a750:	68fa      	ldr	r2, [r7, #12]
 801a752:	4313      	orrs	r3, r2
 801a754:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	681b      	ldr	r3, [r3, #0]
 801a75a:	68fa      	ldr	r2, [r7, #12]
 801a75c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801a75e:	6878      	ldr	r0, [r7, #4]
 801a760:	f000 faf2 	bl	801ad48 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801a764:	687b      	ldr	r3, [r7, #4]
 801a766:	689b      	ldr	r3, [r3, #8]
 801a768:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801a76c:	d102      	bne.n	801a774 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	2200      	movs	r2, #0
 801a772:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	685a      	ldr	r2, [r3, #4]
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a77c:	b2d2      	uxtb	r2, r2
 801a77e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801a780:	687b      	ldr	r3, [r7, #4]
 801a782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a784:	687a      	ldr	r2, [r7, #4]
 801a786:	6d92      	ldr	r2, [r2, #88]	; 0x58
 801a788:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 801a78a:	687b      	ldr	r3, [r7, #4]
 801a78c:	685b      	ldr	r3, [r3, #4]
 801a78e:	2b00      	cmp	r3, #0
 801a790:	d010      	beq.n	801a7b4 <HAL_DMA_Init+0x104>
 801a792:	687b      	ldr	r3, [r7, #4]
 801a794:	685b      	ldr	r3, [r3, #4]
 801a796:	2b04      	cmp	r3, #4
 801a798:	d80c      	bhi.n	801a7b4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801a79a:	6878      	ldr	r0, [r7, #4]
 801a79c:	f000 fb12 	bl	801adc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 801a7a0:	687b      	ldr	r3, [r7, #4]
 801a7a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a7a4:	2200      	movs	r2, #0
 801a7a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a7ac:	687a      	ldr	r2, [r7, #4]
 801a7ae:	6e52      	ldr	r2, [r2, #100]	; 0x64
 801a7b0:	605a      	str	r2, [r3, #4]
 801a7b2:	e008      	b.n	801a7c6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 801a7b4:	687b      	ldr	r3, [r7, #4]
 801a7b6:	2200      	movs	r2, #0
 801a7b8:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 801a7ba:	687b      	ldr	r3, [r7, #4]
 801a7bc:	2200      	movs	r2, #0
 801a7be:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 801a7c0:	687b      	ldr	r3, [r7, #4]
 801a7c2:	2200      	movs	r2, #0
 801a7c4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801a7c6:	687b      	ldr	r3, [r7, #4]
 801a7c8:	2200      	movs	r2, #0
 801a7ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	2201      	movs	r2, #1
 801a7d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 801a7d4:	687b      	ldr	r3, [r7, #4]
 801a7d6:	2200      	movs	r2, #0
 801a7d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801a7dc:	2300      	movs	r3, #0
}
 801a7de:	4618      	mov	r0, r3
 801a7e0:	3710      	adds	r7, #16
 801a7e2:	46bd      	mov	sp, r7
 801a7e4:	bd80      	pop	{r7, pc}
 801a7e6:	bf00      	nop
 801a7e8:	40020407 	.word	0x40020407
 801a7ec:	bffdfff8 	.word	0xbffdfff8
 801a7f0:	cccccccd 	.word	0xcccccccd
 801a7f4:	40020000 	.word	0x40020000
 801a7f8:	bffdfbf8 	.word	0xbffdfbf8
 801a7fc:	40020400 	.word	0x40020400

0801a800 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801a800:	b580      	push	{r7, lr}
 801a802:	b086      	sub	sp, #24
 801a804:	af00      	add	r7, sp, #0
 801a806:	60f8      	str	r0, [r7, #12]
 801a808:	60b9      	str	r1, [r7, #8]
 801a80a:	607a      	str	r2, [r7, #4]
 801a80c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801a80e:	2300      	movs	r3, #0
 801a810:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 801a812:	68fb      	ldr	r3, [r7, #12]
 801a814:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a818:	2b01      	cmp	r3, #1
 801a81a:	d101      	bne.n	801a820 <HAL_DMA_Start_IT+0x20>
 801a81c:	2302      	movs	r3, #2
 801a81e:	e066      	b.n	801a8ee <HAL_DMA_Start_IT+0xee>
 801a820:	68fb      	ldr	r3, [r7, #12]
 801a822:	2201      	movs	r2, #1
 801a824:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 801a828:	68fb      	ldr	r3, [r7, #12]
 801a82a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801a82e:	b2db      	uxtb	r3, r3
 801a830:	2b01      	cmp	r3, #1
 801a832:	d155      	bne.n	801a8e0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801a834:	68fb      	ldr	r3, [r7, #12]
 801a836:	2202      	movs	r2, #2
 801a838:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801a83c:	68fb      	ldr	r3, [r7, #12]
 801a83e:	2200      	movs	r2, #0
 801a840:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801a842:	68fb      	ldr	r3, [r7, #12]
 801a844:	681b      	ldr	r3, [r3, #0]
 801a846:	681a      	ldr	r2, [r3, #0]
 801a848:	68fb      	ldr	r3, [r7, #12]
 801a84a:	681b      	ldr	r3, [r3, #0]
 801a84c:	f022 0201 	bic.w	r2, r2, #1
 801a850:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801a852:	683b      	ldr	r3, [r7, #0]
 801a854:	687a      	ldr	r2, [r7, #4]
 801a856:	68b9      	ldr	r1, [r7, #8]
 801a858:	68f8      	ldr	r0, [r7, #12]
 801a85a:	f000 fa37 	bl	801accc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 801a85e:	68fb      	ldr	r3, [r7, #12]
 801a860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a862:	2b00      	cmp	r3, #0
 801a864:	d008      	beq.n	801a878 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801a866:	68fb      	ldr	r3, [r7, #12]
 801a868:	681b      	ldr	r3, [r3, #0]
 801a86a:	681a      	ldr	r2, [r3, #0]
 801a86c:	68fb      	ldr	r3, [r7, #12]
 801a86e:	681b      	ldr	r3, [r3, #0]
 801a870:	f042 020e 	orr.w	r2, r2, #14
 801a874:	601a      	str	r2, [r3, #0]
 801a876:	e00f      	b.n	801a898 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801a878:	68fb      	ldr	r3, [r7, #12]
 801a87a:	681b      	ldr	r3, [r3, #0]
 801a87c:	681a      	ldr	r2, [r3, #0]
 801a87e:	68fb      	ldr	r3, [r7, #12]
 801a880:	681b      	ldr	r3, [r3, #0]
 801a882:	f022 0204 	bic.w	r2, r2, #4
 801a886:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 801a888:	68fb      	ldr	r3, [r7, #12]
 801a88a:	681b      	ldr	r3, [r3, #0]
 801a88c:	681a      	ldr	r2, [r3, #0]
 801a88e:	68fb      	ldr	r3, [r7, #12]
 801a890:	681b      	ldr	r3, [r3, #0]
 801a892:	f042 020a 	orr.w	r2, r2, #10
 801a896:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801a898:	68fb      	ldr	r3, [r7, #12]
 801a89a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a89c:	681b      	ldr	r3, [r3, #0]
 801a89e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a8a2:	2b00      	cmp	r3, #0
 801a8a4:	d007      	beq.n	801a8b6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801a8a6:	68fb      	ldr	r3, [r7, #12]
 801a8a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a8aa:	681a      	ldr	r2, [r3, #0]
 801a8ac:	68fb      	ldr	r3, [r7, #12]
 801a8ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a8b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a8b4:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 801a8b6:	68fb      	ldr	r3, [r7, #12]
 801a8b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a8ba:	2b00      	cmp	r3, #0
 801a8bc:	d007      	beq.n	801a8ce <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 801a8be:	68fb      	ldr	r3, [r7, #12]
 801a8c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a8c2:	681a      	ldr	r2, [r3, #0]
 801a8c4:	68fb      	ldr	r3, [r7, #12]
 801a8c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a8c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a8cc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801a8ce:	68fb      	ldr	r3, [r7, #12]
 801a8d0:	681b      	ldr	r3, [r3, #0]
 801a8d2:	681a      	ldr	r2, [r3, #0]
 801a8d4:	68fb      	ldr	r3, [r7, #12]
 801a8d6:	681b      	ldr	r3, [r3, #0]
 801a8d8:	f042 0201 	orr.w	r2, r2, #1
 801a8dc:	601a      	str	r2, [r3, #0]
 801a8de:	e005      	b.n	801a8ec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801a8e0:	68fb      	ldr	r3, [r7, #12]
 801a8e2:	2200      	movs	r2, #0
 801a8e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 801a8e8:	2302      	movs	r3, #2
 801a8ea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 801a8ec:	7dfb      	ldrb	r3, [r7, #23]
}
 801a8ee:	4618      	mov	r0, r3
 801a8f0:	3718      	adds	r7, #24
 801a8f2:	46bd      	mov	sp, r7
 801a8f4:	bd80      	pop	{r7, pc}

0801a8f6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801a8f6:	b480      	push	{r7}
 801a8f8:	b085      	sub	sp, #20
 801a8fa:	af00      	add	r7, sp, #0
 801a8fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801a8fe:	2300      	movs	r3, #0
 801a900:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801a908:	b2db      	uxtb	r3, r3
 801a90a:	2b02      	cmp	r3, #2
 801a90c:	d008      	beq.n	801a920 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801a90e:	687b      	ldr	r3, [r7, #4]
 801a910:	2204      	movs	r2, #4
 801a912:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	2200      	movs	r2, #0
 801a918:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801a91c:	2301      	movs	r3, #1
 801a91e:	e040      	b.n	801a9a2 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	681b      	ldr	r3, [r3, #0]
 801a924:	681a      	ldr	r2, [r3, #0]
 801a926:	687b      	ldr	r3, [r7, #4]
 801a928:	681b      	ldr	r3, [r3, #0]
 801a92a:	f022 020e 	bic.w	r2, r2, #14
 801a92e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801a930:	687b      	ldr	r3, [r7, #4]
 801a932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a934:	681a      	ldr	r2, [r3, #0]
 801a936:	687b      	ldr	r3, [r7, #4]
 801a938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a93a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801a93e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801a940:	687b      	ldr	r3, [r7, #4]
 801a942:	681b      	ldr	r3, [r3, #0]
 801a944:	681a      	ldr	r2, [r3, #0]
 801a946:	687b      	ldr	r3, [r7, #4]
 801a948:	681b      	ldr	r3, [r3, #0]
 801a94a:	f022 0201 	bic.w	r2, r2, #1
 801a94e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a954:	f003 021c 	and.w	r2, r3, #28
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a95c:	2101      	movs	r1, #1
 801a95e:	fa01 f202 	lsl.w	r2, r1, r2
 801a962:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801a964:	687b      	ldr	r3, [r7, #4]
 801a966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a968:	687a      	ldr	r2, [r7, #4]
 801a96a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 801a96c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 801a96e:	687b      	ldr	r3, [r7, #4]
 801a970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a972:	2b00      	cmp	r3, #0
 801a974:	d00c      	beq.n	801a990 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a97a:	681a      	ldr	r2, [r3, #0]
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a980:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801a984:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a98a:	687a      	ldr	r2, [r7, #4]
 801a98c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 801a98e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	2201      	movs	r2, #1
 801a994:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	2200      	movs	r2, #0
 801a99c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 801a9a0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 801a9a2:	4618      	mov	r0, r3
 801a9a4:	3714      	adds	r7, #20
 801a9a6:	46bd      	mov	sp, r7
 801a9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9ac:	4770      	bx	lr

0801a9ae <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801a9ae:	b580      	push	{r7, lr}
 801a9b0:	b084      	sub	sp, #16
 801a9b2:	af00      	add	r7, sp, #0
 801a9b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801a9b6:	2300      	movs	r3, #0
 801a9b8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801a9c0:	b2db      	uxtb	r3, r3
 801a9c2:	2b02      	cmp	r3, #2
 801a9c4:	d005      	beq.n	801a9d2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	2204      	movs	r2, #4
 801a9ca:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 801a9cc:	2301      	movs	r3, #1
 801a9ce:	73fb      	strb	r3, [r7, #15]
 801a9d0:	e047      	b.n	801aa62 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	681b      	ldr	r3, [r3, #0]
 801a9d6:	681a      	ldr	r2, [r3, #0]
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	681b      	ldr	r3, [r3, #0]
 801a9dc:	f022 020e 	bic.w	r2, r2, #14
 801a9e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801a9e2:	687b      	ldr	r3, [r7, #4]
 801a9e4:	681b      	ldr	r3, [r3, #0]
 801a9e6:	681a      	ldr	r2, [r3, #0]
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	681b      	ldr	r3, [r3, #0]
 801a9ec:	f022 0201 	bic.w	r2, r2, #1
 801a9f0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a9f6:	681a      	ldr	r2, [r3, #0]
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a9fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801aa00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 801aa02:	687b      	ldr	r3, [r7, #4]
 801aa04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801aa06:	f003 021c 	and.w	r2, r3, #28
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801aa0e:	2101      	movs	r1, #1
 801aa10:	fa01 f202 	lsl.w	r2, r1, r2
 801aa14:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801aa1a:	687a      	ldr	r2, [r7, #4]
 801aa1c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 801aa1e:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 801aa20:	687b      	ldr	r3, [r7, #4]
 801aa22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aa24:	2b00      	cmp	r3, #0
 801aa26:	d00c      	beq.n	801aa42 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aa2c:	681a      	ldr	r2, [r3, #0]
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aa32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801aa36:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801aa38:	687b      	ldr	r3, [r7, #4]
 801aa3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801aa3c:	687a      	ldr	r2, [r7, #4]
 801aa3e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 801aa40:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801aa42:	687b      	ldr	r3, [r7, #4]
 801aa44:	2201      	movs	r2, #1
 801aa46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	2200      	movs	r2, #0
 801aa4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 801aa52:	687b      	ldr	r3, [r7, #4]
 801aa54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aa56:	2b00      	cmp	r3, #0
 801aa58:	d003      	beq.n	801aa62 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aa5e:	6878      	ldr	r0, [r7, #4]
 801aa60:	4798      	blx	r3
    }
  }
  return status;
 801aa62:	7bfb      	ldrb	r3, [r7, #15]
}
 801aa64:	4618      	mov	r0, r3
 801aa66:	3710      	adds	r7, #16
 801aa68:	46bd      	mov	sp, r7
 801aa6a:	bd80      	pop	{r7, pc}

0801aa6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801aa6c:	b580      	push	{r7, lr}
 801aa6e:	b084      	sub	sp, #16
 801aa70:	af00      	add	r7, sp, #0
 801aa72:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 801aa74:	687b      	ldr	r3, [r7, #4]
 801aa76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801aa78:	681b      	ldr	r3, [r3, #0]
 801aa7a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	681b      	ldr	r3, [r3, #0]
 801aa80:	681b      	ldr	r3, [r3, #0]
 801aa82:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801aa88:	f003 031c 	and.w	r3, r3, #28
 801aa8c:	2204      	movs	r2, #4
 801aa8e:	409a      	lsls	r2, r3
 801aa90:	68fb      	ldr	r3, [r7, #12]
 801aa92:	4013      	ands	r3, r2
 801aa94:	2b00      	cmp	r3, #0
 801aa96:	d053      	beq.n	801ab40 <HAL_DMA_IRQHandler+0xd4>
 801aa98:	68bb      	ldr	r3, [r7, #8]
 801aa9a:	f003 0304 	and.w	r3, r3, #4
 801aa9e:	2b00      	cmp	r3, #0
 801aaa0:	d04e      	beq.n	801ab40 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 801aaa2:	687b      	ldr	r3, [r7, #4]
 801aaa4:	681b      	ldr	r3, [r3, #0]
 801aaa6:	681b      	ldr	r3, [r3, #0]
 801aaa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801aaac:	2b00      	cmp	r3, #0
 801aaae:	d024      	beq.n	801aafa <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 801aab0:	687b      	ldr	r3, [r7, #4]
 801aab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801aab4:	f003 021c 	and.w	r2, r3, #28
 801aab8:	687b      	ldr	r3, [r7, #4]
 801aaba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801aabc:	2104      	movs	r1, #4
 801aabe:	fa01 f202 	lsl.w	r2, r1, r2
 801aac2:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	681b      	ldr	r3, [r3, #0]
 801aac8:	681b      	ldr	r3, [r3, #0]
 801aaca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801aace:	2b00      	cmp	r3, #0
 801aad0:	d109      	bne.n	801aae6 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aad6:	2b00      	cmp	r3, #0
 801aad8:	f000 80c0 	beq.w	801ac5c <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aae0:	6878      	ldr	r0, [r7, #4]
 801aae2:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 801aae4:	e0ba      	b.n	801ac5c <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aaea:	2b00      	cmp	r3, #0
 801aaec:	f000 80b6 	beq.w	801ac5c <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aaf4:	6878      	ldr	r0, [r7, #4]
 801aaf6:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 801aaf8:	e0b0      	b.n	801ac5c <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	681b      	ldr	r3, [r3, #0]
 801aafe:	681b      	ldr	r3, [r3, #0]
 801ab00:	f003 0320 	and.w	r3, r3, #32
 801ab04:	2b00      	cmp	r3, #0
 801ab06:	d107      	bne.n	801ab18 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	681b      	ldr	r3, [r3, #0]
 801ab0c:	681a      	ldr	r2, [r3, #0]
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	681b      	ldr	r3, [r3, #0]
 801ab12:	f022 0204 	bic.w	r2, r2, #4
 801ab16:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ab1c:	f003 021c 	and.w	r2, r3, #28
 801ab20:	687b      	ldr	r3, [r7, #4]
 801ab22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ab24:	2104      	movs	r1, #4
 801ab26:	fa01 f202 	lsl.w	r2, r1, r2
 801ab2a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 801ab2c:	687b      	ldr	r3, [r7, #4]
 801ab2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ab30:	2b00      	cmp	r3, #0
 801ab32:	f000 8093 	beq.w	801ac5c <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 801ab36:	687b      	ldr	r3, [r7, #4]
 801ab38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ab3a:	6878      	ldr	r0, [r7, #4]
 801ab3c:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 801ab3e:	e08d      	b.n	801ac5c <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ab44:	f003 031c 	and.w	r3, r3, #28
 801ab48:	2202      	movs	r2, #2
 801ab4a:	409a      	lsls	r2, r3
 801ab4c:	68fb      	ldr	r3, [r7, #12]
 801ab4e:	4013      	ands	r3, r2
 801ab50:	2b00      	cmp	r3, #0
 801ab52:	d04e      	beq.n	801abf2 <HAL_DMA_IRQHandler+0x186>
 801ab54:	68bb      	ldr	r3, [r7, #8]
 801ab56:	f003 0302 	and.w	r3, r3, #2
 801ab5a:	2b00      	cmp	r3, #0
 801ab5c:	d049      	beq.n	801abf2 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 801ab5e:	687b      	ldr	r3, [r7, #4]
 801ab60:	681b      	ldr	r3, [r3, #0]
 801ab62:	681b      	ldr	r3, [r3, #0]
 801ab64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801ab68:	2b00      	cmp	r3, #0
 801ab6a:	d018      	beq.n	801ab9e <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	681b      	ldr	r3, [r3, #0]
 801ab70:	681b      	ldr	r3, [r3, #0]
 801ab72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801ab76:	2b00      	cmp	r3, #0
 801ab78:	d108      	bne.n	801ab8c <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 801ab7a:	687b      	ldr	r3, [r7, #4]
 801ab7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ab7e:	2b00      	cmp	r3, #0
 801ab80:	d06e      	beq.n	801ac60 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ab86:	6878      	ldr	r0, [r7, #4]
 801ab88:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 801ab8a:	e069      	b.n	801ac60 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab90:	2b00      	cmp	r3, #0
 801ab92:	d065      	beq.n	801ac60 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab98:	6878      	ldr	r0, [r7, #4]
 801ab9a:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 801ab9c:	e060      	b.n	801ac60 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	681b      	ldr	r3, [r3, #0]
 801aba2:	681b      	ldr	r3, [r3, #0]
 801aba4:	f003 0320 	and.w	r3, r3, #32
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	d10b      	bne.n	801abc4 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	681b      	ldr	r3, [r3, #0]
 801abb0:	681a      	ldr	r2, [r3, #0]
 801abb2:	687b      	ldr	r3, [r7, #4]
 801abb4:	681b      	ldr	r3, [r3, #0]
 801abb6:	f022 020a 	bic.w	r2, r2, #10
 801abba:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	2201      	movs	r2, #1
 801abc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801abc8:	f003 021c 	and.w	r2, r3, #28
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801abd0:	2102      	movs	r1, #2
 801abd2:	fa01 f202 	lsl.w	r2, r1, r2
 801abd6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	2200      	movs	r2, #0
 801abdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 801abe0:	687b      	ldr	r3, [r7, #4]
 801abe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801abe4:	2b00      	cmp	r3, #0
 801abe6:	d03b      	beq.n	801ac60 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 801abe8:	687b      	ldr	r3, [r7, #4]
 801abea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801abec:	6878      	ldr	r0, [r7, #4]
 801abee:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 801abf0:	e036      	b.n	801ac60 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 801abf2:	687b      	ldr	r3, [r7, #4]
 801abf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801abf6:	f003 031c 	and.w	r3, r3, #28
 801abfa:	2208      	movs	r2, #8
 801abfc:	409a      	lsls	r2, r3
 801abfe:	68fb      	ldr	r3, [r7, #12]
 801ac00:	4013      	ands	r3, r2
 801ac02:	2b00      	cmp	r3, #0
 801ac04:	d02e      	beq.n	801ac64 <HAL_DMA_IRQHandler+0x1f8>
 801ac06:	68bb      	ldr	r3, [r7, #8]
 801ac08:	f003 0308 	and.w	r3, r3, #8
 801ac0c:	2b00      	cmp	r3, #0
 801ac0e:	d029      	beq.n	801ac64 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	681b      	ldr	r3, [r3, #0]
 801ac14:	681a      	ldr	r2, [r3, #0]
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	681b      	ldr	r3, [r3, #0]
 801ac1a:	f022 020e 	bic.w	r2, r2, #14
 801ac1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 801ac20:	687b      	ldr	r3, [r7, #4]
 801ac22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ac24:	f003 021c 	and.w	r2, r3, #28
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ac2c:	2101      	movs	r1, #1
 801ac2e:	fa01 f202 	lsl.w	r2, r1, r2
 801ac32:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	2201      	movs	r2, #1
 801ac38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801ac3a:	687b      	ldr	r3, [r7, #4]
 801ac3c:	2201      	movs	r2, #1
 801ac3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801ac42:	687b      	ldr	r3, [r7, #4]
 801ac44:	2200      	movs	r2, #0
 801ac46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 801ac4a:	687b      	ldr	r3, [r7, #4]
 801ac4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ac4e:	2b00      	cmp	r3, #0
 801ac50:	d008      	beq.n	801ac64 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801ac52:	687b      	ldr	r3, [r7, #4]
 801ac54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ac56:	6878      	ldr	r0, [r7, #4]
 801ac58:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 801ac5a:	e002      	b.n	801ac62 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 801ac5c:	bf00      	nop
 801ac5e:	e000      	b.n	801ac62 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 801ac60:	bf00      	nop
  return;
 801ac62:	bf00      	nop
 801ac64:	bf00      	nop
}
 801ac66:	3710      	adds	r7, #16
 801ac68:	46bd      	mov	sp, r7
 801ac6a:	bd80      	pop	{r7, pc}

0801ac6c <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 801ac6c:	b480      	push	{r7}
 801ac6e:	b085      	sub	sp, #20
 801ac70:	af00      	add	r7, sp, #0
 801ac72:	6078      	str	r0, [r7, #4]
 801ac74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801ac76:	2300      	movs	r3, #0
 801ac78:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	2b00      	cmp	r3, #0
 801ac7e:	d103      	bne.n	801ac88 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 801ac80:	2301      	movs	r3, #1
 801ac82:	72fb      	strb	r3, [r7, #11]
    return status;
 801ac84:	7afb      	ldrb	r3, [r7, #11]
 801ac86:	e01b      	b.n	801acc0 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	681b      	ldr	r3, [r3, #0]
 801ac8c:	681b      	ldr	r3, [r3, #0]
 801ac8e:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 801ac90:	683b      	ldr	r3, [r7, #0]
 801ac92:	f003 0310 	and.w	r3, r3, #16
 801ac96:	2b00      	cmp	r3, #0
 801ac98:	d00d      	beq.n	801acb6 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 801ac9a:	683b      	ldr	r3, [r7, #0]
 801ac9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801aca0:	2b00      	cmp	r3, #0
 801aca2:	d004      	beq.n	801acae <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 801aca4:	68fb      	ldr	r3, [r7, #12]
 801aca6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801acaa:	60fb      	str	r3, [r7, #12]
 801acac:	e003      	b.n	801acb6 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 801acae:	68fb      	ldr	r3, [r7, #12]
 801acb0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801acb4:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 801acb6:	687b      	ldr	r3, [r7, #4]
 801acb8:	681b      	ldr	r3, [r3, #0]
 801acba:	68fa      	ldr	r2, [r7, #12]
 801acbc:	601a      	str	r2, [r3, #0]

  return status;
 801acbe:	7afb      	ldrb	r3, [r7, #11]
}
 801acc0:	4618      	mov	r0, r3
 801acc2:	3714      	adds	r7, #20
 801acc4:	46bd      	mov	sp, r7
 801acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acca:	4770      	bx	lr

0801accc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801accc:	b480      	push	{r7}
 801acce:	b085      	sub	sp, #20
 801acd0:	af00      	add	r7, sp, #0
 801acd2:	60f8      	str	r0, [r7, #12]
 801acd4:	60b9      	str	r1, [r7, #8]
 801acd6:	607a      	str	r2, [r7, #4]
 801acd8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801acda:	68fb      	ldr	r3, [r7, #12]
 801acdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801acde:	68fa      	ldr	r2, [r7, #12]
 801ace0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 801ace2:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 801ace4:	68fb      	ldr	r3, [r7, #12]
 801ace6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ace8:	2b00      	cmp	r3, #0
 801acea:	d004      	beq.n	801acf6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801acec:	68fb      	ldr	r3, [r7, #12]
 801acee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801acf0:	68fa      	ldr	r2, [r7, #12]
 801acf2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 801acf4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 801acf6:	68fb      	ldr	r3, [r7, #12]
 801acf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801acfa:	f003 021c 	and.w	r2, r3, #28
 801acfe:	68fb      	ldr	r3, [r7, #12]
 801ad00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ad02:	2101      	movs	r1, #1
 801ad04:	fa01 f202 	lsl.w	r2, r1, r2
 801ad08:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801ad0a:	68fb      	ldr	r3, [r7, #12]
 801ad0c:	681b      	ldr	r3, [r3, #0]
 801ad0e:	683a      	ldr	r2, [r7, #0]
 801ad10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801ad12:	68fb      	ldr	r3, [r7, #12]
 801ad14:	689b      	ldr	r3, [r3, #8]
 801ad16:	2b10      	cmp	r3, #16
 801ad18:	d108      	bne.n	801ad2c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801ad1a:	68fb      	ldr	r3, [r7, #12]
 801ad1c:	681b      	ldr	r3, [r3, #0]
 801ad1e:	687a      	ldr	r2, [r7, #4]
 801ad20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 801ad22:	68fb      	ldr	r3, [r7, #12]
 801ad24:	681b      	ldr	r3, [r3, #0]
 801ad26:	68ba      	ldr	r2, [r7, #8]
 801ad28:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 801ad2a:	e007      	b.n	801ad3c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 801ad2c:	68fb      	ldr	r3, [r7, #12]
 801ad2e:	681b      	ldr	r3, [r3, #0]
 801ad30:	68ba      	ldr	r2, [r7, #8]
 801ad32:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 801ad34:	68fb      	ldr	r3, [r7, #12]
 801ad36:	681b      	ldr	r3, [r3, #0]
 801ad38:	687a      	ldr	r2, [r7, #4]
 801ad3a:	60da      	str	r2, [r3, #12]
}
 801ad3c:	bf00      	nop
 801ad3e:	3714      	adds	r7, #20
 801ad40:	46bd      	mov	sp, r7
 801ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad46:	4770      	bx	lr

0801ad48 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801ad48:	b480      	push	{r7}
 801ad4a:	b085      	sub	sp, #20
 801ad4c:	af00      	add	r7, sp, #0
 801ad4e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	681b      	ldr	r3, [r3, #0]
 801ad54:	461a      	mov	r2, r3
 801ad56:	4b17      	ldr	r3, [pc, #92]	; (801adb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 801ad58:	429a      	cmp	r2, r3
 801ad5a:	d80a      	bhi.n	801ad72 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ad60:	089b      	lsrs	r3, r3, #2
 801ad62:	009b      	lsls	r3, r3, #2
 801ad64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801ad68:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 801ad6c:	687a      	ldr	r2, [r7, #4]
 801ad6e:	6513      	str	r3, [r2, #80]	; 0x50
 801ad70:	e007      	b.n	801ad82 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ad76:	089b      	lsrs	r3, r3, #2
 801ad78:	009a      	lsls	r2, r3, #2
 801ad7a:	4b0f      	ldr	r3, [pc, #60]	; (801adb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 801ad7c:	4413      	add	r3, r2
 801ad7e:	687a      	ldr	r2, [r7, #4]
 801ad80:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 801ad82:	687b      	ldr	r3, [r7, #4]
 801ad84:	681b      	ldr	r3, [r3, #0]
 801ad86:	b2db      	uxtb	r3, r3
 801ad88:	3b08      	subs	r3, #8
 801ad8a:	4a0c      	ldr	r2, [pc, #48]	; (801adbc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 801ad8c:	fba2 2303 	umull	r2, r3, r2, r3
 801ad90:	091b      	lsrs	r3, r3, #4
 801ad92:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801ad94:	687b      	ldr	r3, [r7, #4]
 801ad96:	4a0a      	ldr	r2, [pc, #40]	; (801adc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 801ad98:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 801ad9a:	68fb      	ldr	r3, [r7, #12]
 801ad9c:	f003 031f 	and.w	r3, r3, #31
 801ada0:	2201      	movs	r2, #1
 801ada2:	409a      	lsls	r2, r3
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	659a      	str	r2, [r3, #88]	; 0x58
}
 801ada8:	bf00      	nop
 801adaa:	3714      	adds	r7, #20
 801adac:	46bd      	mov	sp, r7
 801adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adb2:	4770      	bx	lr
 801adb4:	40020407 	.word	0x40020407
 801adb8:	40020820 	.word	0x40020820
 801adbc:	cccccccd 	.word	0xcccccccd
 801adc0:	40020880 	.word	0x40020880

0801adc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801adc4:	b480      	push	{r7}
 801adc6:	b085      	sub	sp, #20
 801adc8:	af00      	add	r7, sp, #0
 801adca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	685b      	ldr	r3, [r3, #4]
 801add0:	b2db      	uxtb	r3, r3
 801add2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801add4:	68fa      	ldr	r2, [r7, #12]
 801add6:	4b0b      	ldr	r3, [pc, #44]	; (801ae04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 801add8:	4413      	add	r3, r2
 801adda:	009b      	lsls	r3, r3, #2
 801addc:	461a      	mov	r2, r3
 801adde:	687b      	ldr	r3, [r7, #4]
 801ade0:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801ade2:	687b      	ldr	r3, [r7, #4]
 801ade4:	4a08      	ldr	r2, [pc, #32]	; (801ae08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 801ade6:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 801ade8:	68fb      	ldr	r3, [r7, #12]
 801adea:	3b01      	subs	r3, #1
 801adec:	f003 0303 	and.w	r3, r3, #3
 801adf0:	2201      	movs	r2, #1
 801adf2:	409a      	lsls	r2, r3
 801adf4:	687b      	ldr	r3, [r7, #4]
 801adf6:	665a      	str	r2, [r3, #100]	; 0x64
}
 801adf8:	bf00      	nop
 801adfa:	3714      	adds	r7, #20
 801adfc:	46bd      	mov	sp, r7
 801adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae02:	4770      	bx	lr
 801ae04:	1000823f 	.word	0x1000823f
 801ae08:	40020940 	.word	0x40020940

0801ae0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801ae0c:	b480      	push	{r7}
 801ae0e:	b087      	sub	sp, #28
 801ae10:	af00      	add	r7, sp, #0
 801ae12:	6078      	str	r0, [r7, #4]
 801ae14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 801ae16:	2300      	movs	r3, #0
 801ae18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 801ae1a:	e158      	b.n	801b0ce <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801ae1c:	683b      	ldr	r3, [r7, #0]
 801ae1e:	681a      	ldr	r2, [r3, #0]
 801ae20:	2101      	movs	r1, #1
 801ae22:	697b      	ldr	r3, [r7, #20]
 801ae24:	fa01 f303 	lsl.w	r3, r1, r3
 801ae28:	4013      	ands	r3, r2
 801ae2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 801ae2c:	68fb      	ldr	r3, [r7, #12]
 801ae2e:	2b00      	cmp	r3, #0
 801ae30:	f000 814a 	beq.w	801b0c8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801ae34:	683b      	ldr	r3, [r7, #0]
 801ae36:	685b      	ldr	r3, [r3, #4]
 801ae38:	f003 0303 	and.w	r3, r3, #3
 801ae3c:	2b01      	cmp	r3, #1
 801ae3e:	d005      	beq.n	801ae4c <HAL_GPIO_Init+0x40>
 801ae40:	683b      	ldr	r3, [r7, #0]
 801ae42:	685b      	ldr	r3, [r3, #4]
 801ae44:	f003 0303 	and.w	r3, r3, #3
 801ae48:	2b02      	cmp	r3, #2
 801ae4a:	d130      	bne.n	801aeae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801ae4c:	687b      	ldr	r3, [r7, #4]
 801ae4e:	689b      	ldr	r3, [r3, #8]
 801ae50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801ae52:	697b      	ldr	r3, [r7, #20]
 801ae54:	005b      	lsls	r3, r3, #1
 801ae56:	2203      	movs	r2, #3
 801ae58:	fa02 f303 	lsl.w	r3, r2, r3
 801ae5c:	43db      	mvns	r3, r3
 801ae5e:	693a      	ldr	r2, [r7, #16]
 801ae60:	4013      	ands	r3, r2
 801ae62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801ae64:	683b      	ldr	r3, [r7, #0]
 801ae66:	68da      	ldr	r2, [r3, #12]
 801ae68:	697b      	ldr	r3, [r7, #20]
 801ae6a:	005b      	lsls	r3, r3, #1
 801ae6c:	fa02 f303 	lsl.w	r3, r2, r3
 801ae70:	693a      	ldr	r2, [r7, #16]
 801ae72:	4313      	orrs	r3, r2
 801ae74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	693a      	ldr	r2, [r7, #16]
 801ae7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	685b      	ldr	r3, [r3, #4]
 801ae80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801ae82:	2201      	movs	r2, #1
 801ae84:	697b      	ldr	r3, [r7, #20]
 801ae86:	fa02 f303 	lsl.w	r3, r2, r3
 801ae8a:	43db      	mvns	r3, r3
 801ae8c:	693a      	ldr	r2, [r7, #16]
 801ae8e:	4013      	ands	r3, r2
 801ae90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801ae92:	683b      	ldr	r3, [r7, #0]
 801ae94:	685b      	ldr	r3, [r3, #4]
 801ae96:	091b      	lsrs	r3, r3, #4
 801ae98:	f003 0201 	and.w	r2, r3, #1
 801ae9c:	697b      	ldr	r3, [r7, #20]
 801ae9e:	fa02 f303 	lsl.w	r3, r2, r3
 801aea2:	693a      	ldr	r2, [r7, #16]
 801aea4:	4313      	orrs	r3, r2
 801aea6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	693a      	ldr	r2, [r7, #16]
 801aeac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801aeae:	683b      	ldr	r3, [r7, #0]
 801aeb0:	685b      	ldr	r3, [r3, #4]
 801aeb2:	f003 0303 	and.w	r3, r3, #3
 801aeb6:	2b03      	cmp	r3, #3
 801aeb8:	d017      	beq.n	801aeea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 801aeba:	687b      	ldr	r3, [r7, #4]
 801aebc:	68db      	ldr	r3, [r3, #12]
 801aebe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801aec0:	697b      	ldr	r3, [r7, #20]
 801aec2:	005b      	lsls	r3, r3, #1
 801aec4:	2203      	movs	r2, #3
 801aec6:	fa02 f303 	lsl.w	r3, r2, r3
 801aeca:	43db      	mvns	r3, r3
 801aecc:	693a      	ldr	r2, [r7, #16]
 801aece:	4013      	ands	r3, r2
 801aed0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801aed2:	683b      	ldr	r3, [r7, #0]
 801aed4:	689a      	ldr	r2, [r3, #8]
 801aed6:	697b      	ldr	r3, [r7, #20]
 801aed8:	005b      	lsls	r3, r3, #1
 801aeda:	fa02 f303 	lsl.w	r3, r2, r3
 801aede:	693a      	ldr	r2, [r7, #16]
 801aee0:	4313      	orrs	r3, r2
 801aee2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 801aee4:	687b      	ldr	r3, [r7, #4]
 801aee6:	693a      	ldr	r2, [r7, #16]
 801aee8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801aeea:	683b      	ldr	r3, [r7, #0]
 801aeec:	685b      	ldr	r3, [r3, #4]
 801aeee:	f003 0303 	and.w	r3, r3, #3
 801aef2:	2b02      	cmp	r3, #2
 801aef4:	d123      	bne.n	801af3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801aef6:	697b      	ldr	r3, [r7, #20]
 801aef8:	08da      	lsrs	r2, r3, #3
 801aefa:	687b      	ldr	r3, [r7, #4]
 801aefc:	3208      	adds	r2, #8
 801aefe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801af02:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 801af04:	697b      	ldr	r3, [r7, #20]
 801af06:	f003 0307 	and.w	r3, r3, #7
 801af0a:	009b      	lsls	r3, r3, #2
 801af0c:	220f      	movs	r2, #15
 801af0e:	fa02 f303 	lsl.w	r3, r2, r3
 801af12:	43db      	mvns	r3, r3
 801af14:	693a      	ldr	r2, [r7, #16]
 801af16:	4013      	ands	r3, r2
 801af18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801af1a:	683b      	ldr	r3, [r7, #0]
 801af1c:	691a      	ldr	r2, [r3, #16]
 801af1e:	697b      	ldr	r3, [r7, #20]
 801af20:	f003 0307 	and.w	r3, r3, #7
 801af24:	009b      	lsls	r3, r3, #2
 801af26:	fa02 f303 	lsl.w	r3, r2, r3
 801af2a:	693a      	ldr	r2, [r7, #16]
 801af2c:	4313      	orrs	r3, r2
 801af2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 801af30:	697b      	ldr	r3, [r7, #20]
 801af32:	08da      	lsrs	r2, r3, #3
 801af34:	687b      	ldr	r3, [r7, #4]
 801af36:	3208      	adds	r2, #8
 801af38:	6939      	ldr	r1, [r7, #16]
 801af3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801af3e:	687b      	ldr	r3, [r7, #4]
 801af40:	681b      	ldr	r3, [r3, #0]
 801af42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801af44:	697b      	ldr	r3, [r7, #20]
 801af46:	005b      	lsls	r3, r3, #1
 801af48:	2203      	movs	r2, #3
 801af4a:	fa02 f303 	lsl.w	r3, r2, r3
 801af4e:	43db      	mvns	r3, r3
 801af50:	693a      	ldr	r2, [r7, #16]
 801af52:	4013      	ands	r3, r2
 801af54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801af56:	683b      	ldr	r3, [r7, #0]
 801af58:	685b      	ldr	r3, [r3, #4]
 801af5a:	f003 0203 	and.w	r2, r3, #3
 801af5e:	697b      	ldr	r3, [r7, #20]
 801af60:	005b      	lsls	r3, r3, #1
 801af62:	fa02 f303 	lsl.w	r3, r2, r3
 801af66:	693a      	ldr	r2, [r7, #16]
 801af68:	4313      	orrs	r3, r2
 801af6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801af6c:	687b      	ldr	r3, [r7, #4]
 801af6e:	693a      	ldr	r2, [r7, #16]
 801af70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801af72:	683b      	ldr	r3, [r7, #0]
 801af74:	685b      	ldr	r3, [r3, #4]
 801af76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801af7a:	2b00      	cmp	r3, #0
 801af7c:	f000 80a4 	beq.w	801b0c8 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 801af80:	4a5a      	ldr	r2, [pc, #360]	; (801b0ec <HAL_GPIO_Init+0x2e0>)
 801af82:	697b      	ldr	r3, [r7, #20]
 801af84:	089b      	lsrs	r3, r3, #2
 801af86:	3318      	adds	r3, #24
 801af88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801af8c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 801af8e:	697b      	ldr	r3, [r7, #20]
 801af90:	f003 0303 	and.w	r3, r3, #3
 801af94:	00db      	lsls	r3, r3, #3
 801af96:	220f      	movs	r2, #15
 801af98:	fa02 f303 	lsl.w	r3, r2, r3
 801af9c:	43db      	mvns	r3, r3
 801af9e:	693a      	ldr	r2, [r7, #16]
 801afa0:	4013      	ands	r3, r2
 801afa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 801afa4:	687b      	ldr	r3, [r7, #4]
 801afa6:	4a52      	ldr	r2, [pc, #328]	; (801b0f0 <HAL_GPIO_Init+0x2e4>)
 801afa8:	4293      	cmp	r3, r2
 801afaa:	d025      	beq.n	801aff8 <HAL_GPIO_Init+0x1ec>
 801afac:	687b      	ldr	r3, [r7, #4]
 801afae:	4a51      	ldr	r2, [pc, #324]	; (801b0f4 <HAL_GPIO_Init+0x2e8>)
 801afb0:	4293      	cmp	r3, r2
 801afb2:	d01f      	beq.n	801aff4 <HAL_GPIO_Init+0x1e8>
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	4a50      	ldr	r2, [pc, #320]	; (801b0f8 <HAL_GPIO_Init+0x2ec>)
 801afb8:	4293      	cmp	r3, r2
 801afba:	d019      	beq.n	801aff0 <HAL_GPIO_Init+0x1e4>
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	4a4f      	ldr	r2, [pc, #316]	; (801b0fc <HAL_GPIO_Init+0x2f0>)
 801afc0:	4293      	cmp	r3, r2
 801afc2:	d013      	beq.n	801afec <HAL_GPIO_Init+0x1e0>
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	4a4e      	ldr	r2, [pc, #312]	; (801b100 <HAL_GPIO_Init+0x2f4>)
 801afc8:	4293      	cmp	r3, r2
 801afca:	d00d      	beq.n	801afe8 <HAL_GPIO_Init+0x1dc>
 801afcc:	687b      	ldr	r3, [r7, #4]
 801afce:	4a4d      	ldr	r2, [pc, #308]	; (801b104 <HAL_GPIO_Init+0x2f8>)
 801afd0:	4293      	cmp	r3, r2
 801afd2:	d007      	beq.n	801afe4 <HAL_GPIO_Init+0x1d8>
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	4a4c      	ldr	r2, [pc, #304]	; (801b108 <HAL_GPIO_Init+0x2fc>)
 801afd8:	4293      	cmp	r3, r2
 801afda:	d101      	bne.n	801afe0 <HAL_GPIO_Init+0x1d4>
 801afdc:	2306      	movs	r3, #6
 801afde:	e00c      	b.n	801affa <HAL_GPIO_Init+0x1ee>
 801afe0:	2307      	movs	r3, #7
 801afe2:	e00a      	b.n	801affa <HAL_GPIO_Init+0x1ee>
 801afe4:	2305      	movs	r3, #5
 801afe6:	e008      	b.n	801affa <HAL_GPIO_Init+0x1ee>
 801afe8:	2304      	movs	r3, #4
 801afea:	e006      	b.n	801affa <HAL_GPIO_Init+0x1ee>
 801afec:	2303      	movs	r3, #3
 801afee:	e004      	b.n	801affa <HAL_GPIO_Init+0x1ee>
 801aff0:	2302      	movs	r3, #2
 801aff2:	e002      	b.n	801affa <HAL_GPIO_Init+0x1ee>
 801aff4:	2301      	movs	r3, #1
 801aff6:	e000      	b.n	801affa <HAL_GPIO_Init+0x1ee>
 801aff8:	2300      	movs	r3, #0
 801affa:	697a      	ldr	r2, [r7, #20]
 801affc:	f002 0203 	and.w	r2, r2, #3
 801b000:	00d2      	lsls	r2, r2, #3
 801b002:	4093      	lsls	r3, r2
 801b004:	693a      	ldr	r2, [r7, #16]
 801b006:	4313      	orrs	r3, r2
 801b008:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 801b00a:	4938      	ldr	r1, [pc, #224]	; (801b0ec <HAL_GPIO_Init+0x2e0>)
 801b00c:	697b      	ldr	r3, [r7, #20]
 801b00e:	089b      	lsrs	r3, r3, #2
 801b010:	3318      	adds	r3, #24
 801b012:	693a      	ldr	r2, [r7, #16]
 801b014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801b018:	4b34      	ldr	r3, [pc, #208]	; (801b0ec <HAL_GPIO_Init+0x2e0>)
 801b01a:	681b      	ldr	r3, [r3, #0]
 801b01c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801b01e:	68fb      	ldr	r3, [r7, #12]
 801b020:	43db      	mvns	r3, r3
 801b022:	693a      	ldr	r2, [r7, #16]
 801b024:	4013      	ands	r3, r2
 801b026:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 801b028:	683b      	ldr	r3, [r7, #0]
 801b02a:	685b      	ldr	r3, [r3, #4]
 801b02c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801b030:	2b00      	cmp	r3, #0
 801b032:	d003      	beq.n	801b03c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 801b034:	693a      	ldr	r2, [r7, #16]
 801b036:	68fb      	ldr	r3, [r7, #12]
 801b038:	4313      	orrs	r3, r2
 801b03a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 801b03c:	4a2b      	ldr	r2, [pc, #172]	; (801b0ec <HAL_GPIO_Init+0x2e0>)
 801b03e:	693b      	ldr	r3, [r7, #16]
 801b040:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801b042:	4b2a      	ldr	r3, [pc, #168]	; (801b0ec <HAL_GPIO_Init+0x2e0>)
 801b044:	685b      	ldr	r3, [r3, #4]
 801b046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801b048:	68fb      	ldr	r3, [r7, #12]
 801b04a:	43db      	mvns	r3, r3
 801b04c:	693a      	ldr	r2, [r7, #16]
 801b04e:	4013      	ands	r3, r2
 801b050:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 801b052:	683b      	ldr	r3, [r7, #0]
 801b054:	685b      	ldr	r3, [r3, #4]
 801b056:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d003      	beq.n	801b066 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 801b05e:	693a      	ldr	r2, [r7, #16]
 801b060:	68fb      	ldr	r3, [r7, #12]
 801b062:	4313      	orrs	r3, r2
 801b064:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801b066:	4a21      	ldr	r2, [pc, #132]	; (801b0ec <HAL_GPIO_Init+0x2e0>)
 801b068:	693b      	ldr	r3, [r7, #16]
 801b06a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 801b06c:	4b1f      	ldr	r3, [pc, #124]	; (801b0ec <HAL_GPIO_Init+0x2e0>)
 801b06e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801b074:	68fb      	ldr	r3, [r7, #12]
 801b076:	43db      	mvns	r3, r3
 801b078:	693a      	ldr	r2, [r7, #16]
 801b07a:	4013      	ands	r3, r2
 801b07c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 801b07e:	683b      	ldr	r3, [r7, #0]
 801b080:	685b      	ldr	r3, [r3, #4]
 801b082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b086:	2b00      	cmp	r3, #0
 801b088:	d003      	beq.n	801b092 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 801b08a:	693a      	ldr	r2, [r7, #16]
 801b08c:	68fb      	ldr	r3, [r7, #12]
 801b08e:	4313      	orrs	r3, r2
 801b090:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 801b092:	4a16      	ldr	r2, [pc, #88]	; (801b0ec <HAL_GPIO_Init+0x2e0>)
 801b094:	693b      	ldr	r3, [r7, #16]
 801b096:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 801b09a:	4b14      	ldr	r3, [pc, #80]	; (801b0ec <HAL_GPIO_Init+0x2e0>)
 801b09c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b0a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801b0a2:	68fb      	ldr	r3, [r7, #12]
 801b0a4:	43db      	mvns	r3, r3
 801b0a6:	693a      	ldr	r2, [r7, #16]
 801b0a8:	4013      	ands	r3, r2
 801b0aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 801b0ac:	683b      	ldr	r3, [r7, #0]
 801b0ae:	685b      	ldr	r3, [r3, #4]
 801b0b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b0b4:	2b00      	cmp	r3, #0
 801b0b6:	d003      	beq.n	801b0c0 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 801b0b8:	693a      	ldr	r2, [r7, #16]
 801b0ba:	68fb      	ldr	r3, [r7, #12]
 801b0bc:	4313      	orrs	r3, r2
 801b0be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801b0c0:	4a0a      	ldr	r2, [pc, #40]	; (801b0ec <HAL_GPIO_Init+0x2e0>)
 801b0c2:	693b      	ldr	r3, [r7, #16]
 801b0c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 801b0c8:	697b      	ldr	r3, [r7, #20]
 801b0ca:	3301      	adds	r3, #1
 801b0cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 801b0ce:	683b      	ldr	r3, [r7, #0]
 801b0d0:	681a      	ldr	r2, [r3, #0]
 801b0d2:	697b      	ldr	r3, [r7, #20]
 801b0d4:	fa22 f303 	lsr.w	r3, r2, r3
 801b0d8:	2b00      	cmp	r3, #0
 801b0da:	f47f ae9f 	bne.w	801ae1c <HAL_GPIO_Init+0x10>
  }
}
 801b0de:	bf00      	nop
 801b0e0:	bf00      	nop
 801b0e2:	371c      	adds	r7, #28
 801b0e4:	46bd      	mov	sp, r7
 801b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0ea:	4770      	bx	lr
 801b0ec:	4002f400 	.word	0x4002f400
 801b0f0:	42020000 	.word	0x42020000
 801b0f4:	42020400 	.word	0x42020400
 801b0f8:	42020800 	.word	0x42020800
 801b0fc:	42020c00 	.word	0x42020c00
 801b100:	42021000 	.word	0x42021000
 801b104:	42021400 	.word	0x42021400
 801b108:	42021800 	.word	0x42021800

0801b10c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801b10c:	b480      	push	{r7}
 801b10e:	b083      	sub	sp, #12
 801b110:	af00      	add	r7, sp, #0
 801b112:	6078      	str	r0, [r7, #4]
 801b114:	460b      	mov	r3, r1
 801b116:	807b      	strh	r3, [r7, #2]
 801b118:	4613      	mov	r3, r2
 801b11a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801b11c:	787b      	ldrb	r3, [r7, #1]
 801b11e:	2b00      	cmp	r3, #0
 801b120:	d003      	beq.n	801b12a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801b122:	887a      	ldrh	r2, [r7, #2]
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801b128:	e002      	b.n	801b130 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801b12a:	887a      	ldrh	r2, [r7, #2]
 801b12c:	687b      	ldr	r3, [r7, #4]
 801b12e:	629a      	str	r2, [r3, #40]	; 0x28
}
 801b130:	bf00      	nop
 801b132:	370c      	adds	r7, #12
 801b134:	46bd      	mov	sp, r7
 801b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b13a:	4770      	bx	lr

0801b13c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801b13c:	b480      	push	{r7}
 801b13e:	b085      	sub	sp, #20
 801b140:	af00      	add	r7, sp, #0
 801b142:	6078      	str	r0, [r7, #4]
 801b144:	460b      	mov	r3, r1
 801b146:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	695b      	ldr	r3, [r3, #20]
 801b14c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 801b14e:	887a      	ldrh	r2, [r7, #2]
 801b150:	68fb      	ldr	r3, [r7, #12]
 801b152:	4013      	ands	r3, r2
 801b154:	041a      	lsls	r2, r3, #16
 801b156:	68fb      	ldr	r3, [r7, #12]
 801b158:	43d9      	mvns	r1, r3
 801b15a:	887b      	ldrh	r3, [r7, #2]
 801b15c:	400b      	ands	r3, r1
 801b15e:	431a      	orrs	r2, r3
 801b160:	687b      	ldr	r3, [r7, #4]
 801b162:	619a      	str	r2, [r3, #24]
}
 801b164:	bf00      	nop
 801b166:	3714      	adds	r7, #20
 801b168:	46bd      	mov	sp, r7
 801b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b16e:	4770      	bx	lr

0801b170 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801b170:	b580      	push	{r7, lr}
 801b172:	b082      	sub	sp, #8
 801b174:	af00      	add	r7, sp, #0
 801b176:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801b178:	687b      	ldr	r3, [r7, #4]
 801b17a:	2b00      	cmp	r3, #0
 801b17c:	d101      	bne.n	801b182 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801b17e:	2301      	movs	r3, #1
 801b180:	e081      	b.n	801b286 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801b188:	b2db      	uxtb	r3, r3
 801b18a:	2b00      	cmp	r3, #0
 801b18c:	d106      	bne.n	801b19c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801b18e:	687b      	ldr	r3, [r7, #4]
 801b190:	2200      	movs	r2, #0
 801b192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801b196:	6878      	ldr	r0, [r7, #4]
 801b198:	f7fc fee8 	bl	8017f6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801b19c:	687b      	ldr	r3, [r7, #4]
 801b19e:	2224      	movs	r2, #36	; 0x24
 801b1a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801b1a4:	687b      	ldr	r3, [r7, #4]
 801b1a6:	681b      	ldr	r3, [r3, #0]
 801b1a8:	681a      	ldr	r2, [r3, #0]
 801b1aa:	687b      	ldr	r3, [r7, #4]
 801b1ac:	681b      	ldr	r3, [r3, #0]
 801b1ae:	f022 0201 	bic.w	r2, r2, #1
 801b1b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	685a      	ldr	r2, [r3, #4]
 801b1b8:	687b      	ldr	r3, [r7, #4]
 801b1ba:	681b      	ldr	r3, [r3, #0]
 801b1bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801b1c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801b1c2:	687b      	ldr	r3, [r7, #4]
 801b1c4:	681b      	ldr	r3, [r3, #0]
 801b1c6:	689a      	ldr	r2, [r3, #8]
 801b1c8:	687b      	ldr	r3, [r7, #4]
 801b1ca:	681b      	ldr	r3, [r3, #0]
 801b1cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801b1d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	68db      	ldr	r3, [r3, #12]
 801b1d6:	2b01      	cmp	r3, #1
 801b1d8:	d107      	bne.n	801b1ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801b1da:	687b      	ldr	r3, [r7, #4]
 801b1dc:	689a      	ldr	r2, [r3, #8]
 801b1de:	687b      	ldr	r3, [r7, #4]
 801b1e0:	681b      	ldr	r3, [r3, #0]
 801b1e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801b1e6:	609a      	str	r2, [r3, #8]
 801b1e8:	e006      	b.n	801b1f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801b1ea:	687b      	ldr	r3, [r7, #4]
 801b1ec:	689a      	ldr	r2, [r3, #8]
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	681b      	ldr	r3, [r3, #0]
 801b1f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 801b1f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801b1f8:	687b      	ldr	r3, [r7, #4]
 801b1fa:	68db      	ldr	r3, [r3, #12]
 801b1fc:	2b02      	cmp	r3, #2
 801b1fe:	d104      	bne.n	801b20a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801b200:	687b      	ldr	r3, [r7, #4]
 801b202:	681b      	ldr	r3, [r3, #0]
 801b204:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801b208:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801b20a:	687b      	ldr	r3, [r7, #4]
 801b20c:	681b      	ldr	r3, [r3, #0]
 801b20e:	685b      	ldr	r3, [r3, #4]
 801b210:	687a      	ldr	r2, [r7, #4]
 801b212:	6812      	ldr	r2, [r2, #0]
 801b214:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801b218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801b21c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801b21e:	687b      	ldr	r3, [r7, #4]
 801b220:	681b      	ldr	r3, [r3, #0]
 801b222:	68da      	ldr	r2, [r3, #12]
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	681b      	ldr	r3, [r3, #0]
 801b228:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801b22c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801b22e:	687b      	ldr	r3, [r7, #4]
 801b230:	691a      	ldr	r2, [r3, #16]
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	695b      	ldr	r3, [r3, #20]
 801b236:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801b23a:	687b      	ldr	r3, [r7, #4]
 801b23c:	699b      	ldr	r3, [r3, #24]
 801b23e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	681b      	ldr	r3, [r3, #0]
 801b244:	430a      	orrs	r2, r1
 801b246:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801b248:	687b      	ldr	r3, [r7, #4]
 801b24a:	69d9      	ldr	r1, [r3, #28]
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	6a1a      	ldr	r2, [r3, #32]
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	681b      	ldr	r3, [r3, #0]
 801b254:	430a      	orrs	r2, r1
 801b256:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801b258:	687b      	ldr	r3, [r7, #4]
 801b25a:	681b      	ldr	r3, [r3, #0]
 801b25c:	681a      	ldr	r2, [r3, #0]
 801b25e:	687b      	ldr	r3, [r7, #4]
 801b260:	681b      	ldr	r3, [r3, #0]
 801b262:	f042 0201 	orr.w	r2, r2, #1
 801b266:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801b268:	687b      	ldr	r3, [r7, #4]
 801b26a:	2200      	movs	r2, #0
 801b26c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	2220      	movs	r2, #32
 801b272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	2200      	movs	r2, #0
 801b27a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801b27c:	687b      	ldr	r3, [r7, #4]
 801b27e:	2200      	movs	r2, #0
 801b280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 801b284:	2300      	movs	r3, #0
}
 801b286:	4618      	mov	r0, r3
 801b288:	3708      	adds	r7, #8
 801b28a:	46bd      	mov	sp, r7
 801b28c:	bd80      	pop	{r7, pc}
	...

0801b290 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 801b290:	b580      	push	{r7, lr}
 801b292:	b088      	sub	sp, #32
 801b294:	af02      	add	r7, sp, #8
 801b296:	60f8      	str	r0, [r7, #12]
 801b298:	607a      	str	r2, [r7, #4]
 801b29a:	461a      	mov	r2, r3
 801b29c:	460b      	mov	r3, r1
 801b29e:	817b      	strh	r3, [r7, #10]
 801b2a0:	4613      	mov	r3, r2
 801b2a2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801b2a4:	68fb      	ldr	r3, [r7, #12]
 801b2a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801b2aa:	b2db      	uxtb	r3, r3
 801b2ac:	2b20      	cmp	r3, #32
 801b2ae:	f040 80da 	bne.w	801b466 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801b2b2:	68fb      	ldr	r3, [r7, #12]
 801b2b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801b2b8:	2b01      	cmp	r3, #1
 801b2ba:	d101      	bne.n	801b2c0 <HAL_I2C_Master_Transmit+0x30>
 801b2bc:	2302      	movs	r3, #2
 801b2be:	e0d3      	b.n	801b468 <HAL_I2C_Master_Transmit+0x1d8>
 801b2c0:	68fb      	ldr	r3, [r7, #12]
 801b2c2:	2201      	movs	r2, #1
 801b2c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801b2c8:	f7fd fcc4 	bl	8018c54 <HAL_GetTick>
 801b2cc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801b2ce:	697b      	ldr	r3, [r7, #20]
 801b2d0:	9300      	str	r3, [sp, #0]
 801b2d2:	2319      	movs	r3, #25
 801b2d4:	2201      	movs	r2, #1
 801b2d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801b2da:	68f8      	ldr	r0, [r7, #12]
 801b2dc:	f000 f9e6 	bl	801b6ac <I2C_WaitOnFlagUntilTimeout>
 801b2e0:	4603      	mov	r3, r0
 801b2e2:	2b00      	cmp	r3, #0
 801b2e4:	d001      	beq.n	801b2ea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 801b2e6:	2301      	movs	r3, #1
 801b2e8:	e0be      	b.n	801b468 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801b2ea:	68fb      	ldr	r3, [r7, #12]
 801b2ec:	2221      	movs	r2, #33	; 0x21
 801b2ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801b2f2:	68fb      	ldr	r3, [r7, #12]
 801b2f4:	2210      	movs	r2, #16
 801b2f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801b2fa:	68fb      	ldr	r3, [r7, #12]
 801b2fc:	2200      	movs	r2, #0
 801b2fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801b300:	68fb      	ldr	r3, [r7, #12]
 801b302:	687a      	ldr	r2, [r7, #4]
 801b304:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 801b306:	68fb      	ldr	r3, [r7, #12]
 801b308:	893a      	ldrh	r2, [r7, #8]
 801b30a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801b30c:	68fb      	ldr	r3, [r7, #12]
 801b30e:	2200      	movs	r2, #0
 801b310:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801b312:	68fb      	ldr	r3, [r7, #12]
 801b314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b316:	b29b      	uxth	r3, r3
 801b318:	2bff      	cmp	r3, #255	; 0xff
 801b31a:	d90e      	bls.n	801b33a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801b31c:	68fb      	ldr	r3, [r7, #12]
 801b31e:	22ff      	movs	r2, #255	; 0xff
 801b320:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801b322:	68fb      	ldr	r3, [r7, #12]
 801b324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b326:	b2da      	uxtb	r2, r3
 801b328:	8979      	ldrh	r1, [r7, #10]
 801b32a:	4b51      	ldr	r3, [pc, #324]	; (801b470 <HAL_I2C_Master_Transmit+0x1e0>)
 801b32c:	9300      	str	r3, [sp, #0]
 801b32e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801b332:	68f8      	ldr	r0, [r7, #12]
 801b334:	f000 fbf6 	bl	801bb24 <I2C_TransferConfig>
 801b338:	e06c      	b.n	801b414 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801b33a:	68fb      	ldr	r3, [r7, #12]
 801b33c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b33e:	b29a      	uxth	r2, r3
 801b340:	68fb      	ldr	r3, [r7, #12]
 801b342:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801b344:	68fb      	ldr	r3, [r7, #12]
 801b346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b348:	b2da      	uxtb	r2, r3
 801b34a:	8979      	ldrh	r1, [r7, #10]
 801b34c:	4b48      	ldr	r3, [pc, #288]	; (801b470 <HAL_I2C_Master_Transmit+0x1e0>)
 801b34e:	9300      	str	r3, [sp, #0]
 801b350:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801b354:	68f8      	ldr	r0, [r7, #12]
 801b356:	f000 fbe5 	bl	801bb24 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 801b35a:	e05b      	b.n	801b414 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801b35c:	697a      	ldr	r2, [r7, #20]
 801b35e:	6a39      	ldr	r1, [r7, #32]
 801b360:	68f8      	ldr	r0, [r7, #12]
 801b362:	f000 f9f2 	bl	801b74a <I2C_WaitOnTXISFlagUntilTimeout>
 801b366:	4603      	mov	r3, r0
 801b368:	2b00      	cmp	r3, #0
 801b36a:	d001      	beq.n	801b370 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 801b36c:	2301      	movs	r3, #1
 801b36e:	e07b      	b.n	801b468 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801b370:	68fb      	ldr	r3, [r7, #12]
 801b372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b374:	781a      	ldrb	r2, [r3, #0]
 801b376:	68fb      	ldr	r3, [r7, #12]
 801b378:	681b      	ldr	r3, [r3, #0]
 801b37a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801b37c:	68fb      	ldr	r3, [r7, #12]
 801b37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b380:	1c5a      	adds	r2, r3, #1
 801b382:	68fb      	ldr	r3, [r7, #12]
 801b384:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 801b386:	68fb      	ldr	r3, [r7, #12]
 801b388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b38a:	b29b      	uxth	r3, r3
 801b38c:	3b01      	subs	r3, #1
 801b38e:	b29a      	uxth	r2, r3
 801b390:	68fb      	ldr	r3, [r7, #12]
 801b392:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 801b394:	68fb      	ldr	r3, [r7, #12]
 801b396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b398:	3b01      	subs	r3, #1
 801b39a:	b29a      	uxth	r2, r3
 801b39c:	68fb      	ldr	r3, [r7, #12]
 801b39e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801b3a0:	68fb      	ldr	r3, [r7, #12]
 801b3a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b3a4:	b29b      	uxth	r3, r3
 801b3a6:	2b00      	cmp	r3, #0
 801b3a8:	d034      	beq.n	801b414 <HAL_I2C_Master_Transmit+0x184>
 801b3aa:	68fb      	ldr	r3, [r7, #12]
 801b3ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	d130      	bne.n	801b414 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801b3b2:	697b      	ldr	r3, [r7, #20]
 801b3b4:	9300      	str	r3, [sp, #0]
 801b3b6:	6a3b      	ldr	r3, [r7, #32]
 801b3b8:	2200      	movs	r2, #0
 801b3ba:	2180      	movs	r1, #128	; 0x80
 801b3bc:	68f8      	ldr	r0, [r7, #12]
 801b3be:	f000 f975 	bl	801b6ac <I2C_WaitOnFlagUntilTimeout>
 801b3c2:	4603      	mov	r3, r0
 801b3c4:	2b00      	cmp	r3, #0
 801b3c6:	d001      	beq.n	801b3cc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 801b3c8:	2301      	movs	r3, #1
 801b3ca:	e04d      	b.n	801b468 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801b3cc:	68fb      	ldr	r3, [r7, #12]
 801b3ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b3d0:	b29b      	uxth	r3, r3
 801b3d2:	2bff      	cmp	r3, #255	; 0xff
 801b3d4:	d90e      	bls.n	801b3f4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801b3d6:	68fb      	ldr	r3, [r7, #12]
 801b3d8:	22ff      	movs	r2, #255	; 0xff
 801b3da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801b3dc:	68fb      	ldr	r3, [r7, #12]
 801b3de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b3e0:	b2da      	uxtb	r2, r3
 801b3e2:	8979      	ldrh	r1, [r7, #10]
 801b3e4:	2300      	movs	r3, #0
 801b3e6:	9300      	str	r3, [sp, #0]
 801b3e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801b3ec:	68f8      	ldr	r0, [r7, #12]
 801b3ee:	f000 fb99 	bl	801bb24 <I2C_TransferConfig>
 801b3f2:	e00f      	b.n	801b414 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801b3f4:	68fb      	ldr	r3, [r7, #12]
 801b3f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b3f8:	b29a      	uxth	r2, r3
 801b3fa:	68fb      	ldr	r3, [r7, #12]
 801b3fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801b3fe:	68fb      	ldr	r3, [r7, #12]
 801b400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b402:	b2da      	uxtb	r2, r3
 801b404:	8979      	ldrh	r1, [r7, #10]
 801b406:	2300      	movs	r3, #0
 801b408:	9300      	str	r3, [sp, #0]
 801b40a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801b40e:	68f8      	ldr	r0, [r7, #12]
 801b410:	f000 fb88 	bl	801bb24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801b414:	68fb      	ldr	r3, [r7, #12]
 801b416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b418:	b29b      	uxth	r3, r3
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	d19e      	bne.n	801b35c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801b41e:	697a      	ldr	r2, [r7, #20]
 801b420:	6a39      	ldr	r1, [r7, #32]
 801b422:	68f8      	ldr	r0, [r7, #12]
 801b424:	f000 f9d8 	bl	801b7d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 801b428:	4603      	mov	r3, r0
 801b42a:	2b00      	cmp	r3, #0
 801b42c:	d001      	beq.n	801b432 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 801b42e:	2301      	movs	r3, #1
 801b430:	e01a      	b.n	801b468 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801b432:	68fb      	ldr	r3, [r7, #12]
 801b434:	681b      	ldr	r3, [r3, #0]
 801b436:	2220      	movs	r2, #32
 801b438:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801b43a:	68fb      	ldr	r3, [r7, #12]
 801b43c:	681b      	ldr	r3, [r3, #0]
 801b43e:	6859      	ldr	r1, [r3, #4]
 801b440:	68fb      	ldr	r3, [r7, #12]
 801b442:	681a      	ldr	r2, [r3, #0]
 801b444:	4b0b      	ldr	r3, [pc, #44]	; (801b474 <HAL_I2C_Master_Transmit+0x1e4>)
 801b446:	400b      	ands	r3, r1
 801b448:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801b44a:	68fb      	ldr	r3, [r7, #12]
 801b44c:	2220      	movs	r2, #32
 801b44e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801b452:	68fb      	ldr	r3, [r7, #12]
 801b454:	2200      	movs	r2, #0
 801b456:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801b45a:	68fb      	ldr	r3, [r7, #12]
 801b45c:	2200      	movs	r2, #0
 801b45e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801b462:	2300      	movs	r3, #0
 801b464:	e000      	b.n	801b468 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 801b466:	2302      	movs	r3, #2
  }
}
 801b468:	4618      	mov	r0, r3
 801b46a:	3718      	adds	r7, #24
 801b46c:	46bd      	mov	sp, r7
 801b46e:	bd80      	pop	{r7, pc}
 801b470:	80002000 	.word	0x80002000
 801b474:	fe00e800 	.word	0xfe00e800

0801b478 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 801b478:	b580      	push	{r7, lr}
 801b47a:	b088      	sub	sp, #32
 801b47c:	af02      	add	r7, sp, #8
 801b47e:	60f8      	str	r0, [r7, #12]
 801b480:	607a      	str	r2, [r7, #4]
 801b482:	461a      	mov	r2, r3
 801b484:	460b      	mov	r3, r1
 801b486:	817b      	strh	r3, [r7, #10]
 801b488:	4613      	mov	r3, r2
 801b48a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801b48c:	68fb      	ldr	r3, [r7, #12]
 801b48e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801b492:	b2db      	uxtb	r3, r3
 801b494:	2b20      	cmp	r3, #32
 801b496:	f040 80db 	bne.w	801b650 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801b49a:	68fb      	ldr	r3, [r7, #12]
 801b49c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801b4a0:	2b01      	cmp	r3, #1
 801b4a2:	d101      	bne.n	801b4a8 <HAL_I2C_Master_Receive+0x30>
 801b4a4:	2302      	movs	r3, #2
 801b4a6:	e0d4      	b.n	801b652 <HAL_I2C_Master_Receive+0x1da>
 801b4a8:	68fb      	ldr	r3, [r7, #12]
 801b4aa:	2201      	movs	r2, #1
 801b4ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801b4b0:	f7fd fbd0 	bl	8018c54 <HAL_GetTick>
 801b4b4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801b4b6:	697b      	ldr	r3, [r7, #20]
 801b4b8:	9300      	str	r3, [sp, #0]
 801b4ba:	2319      	movs	r3, #25
 801b4bc:	2201      	movs	r2, #1
 801b4be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801b4c2:	68f8      	ldr	r0, [r7, #12]
 801b4c4:	f000 f8f2 	bl	801b6ac <I2C_WaitOnFlagUntilTimeout>
 801b4c8:	4603      	mov	r3, r0
 801b4ca:	2b00      	cmp	r3, #0
 801b4cc:	d001      	beq.n	801b4d2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 801b4ce:	2301      	movs	r3, #1
 801b4d0:	e0bf      	b.n	801b652 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801b4d2:	68fb      	ldr	r3, [r7, #12]
 801b4d4:	2222      	movs	r2, #34	; 0x22
 801b4d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801b4da:	68fb      	ldr	r3, [r7, #12]
 801b4dc:	2210      	movs	r2, #16
 801b4de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801b4e2:	68fb      	ldr	r3, [r7, #12]
 801b4e4:	2200      	movs	r2, #0
 801b4e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801b4e8:	68fb      	ldr	r3, [r7, #12]
 801b4ea:	687a      	ldr	r2, [r7, #4]
 801b4ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 801b4ee:	68fb      	ldr	r3, [r7, #12]
 801b4f0:	893a      	ldrh	r2, [r7, #8]
 801b4f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801b4f4:	68fb      	ldr	r3, [r7, #12]
 801b4f6:	2200      	movs	r2, #0
 801b4f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801b4fa:	68fb      	ldr	r3, [r7, #12]
 801b4fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b4fe:	b29b      	uxth	r3, r3
 801b500:	2bff      	cmp	r3, #255	; 0xff
 801b502:	d90e      	bls.n	801b522 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801b504:	68fb      	ldr	r3, [r7, #12]
 801b506:	22ff      	movs	r2, #255	; 0xff
 801b508:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801b50a:	68fb      	ldr	r3, [r7, #12]
 801b50c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b50e:	b2da      	uxtb	r2, r3
 801b510:	8979      	ldrh	r1, [r7, #10]
 801b512:	4b52      	ldr	r3, [pc, #328]	; (801b65c <HAL_I2C_Master_Receive+0x1e4>)
 801b514:	9300      	str	r3, [sp, #0]
 801b516:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801b51a:	68f8      	ldr	r0, [r7, #12]
 801b51c:	f000 fb02 	bl	801bb24 <I2C_TransferConfig>
 801b520:	e06d      	b.n	801b5fe <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801b522:	68fb      	ldr	r3, [r7, #12]
 801b524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b526:	b29a      	uxth	r2, r3
 801b528:	68fb      	ldr	r3, [r7, #12]
 801b52a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801b52c:	68fb      	ldr	r3, [r7, #12]
 801b52e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b530:	b2da      	uxtb	r2, r3
 801b532:	8979      	ldrh	r1, [r7, #10]
 801b534:	4b49      	ldr	r3, [pc, #292]	; (801b65c <HAL_I2C_Master_Receive+0x1e4>)
 801b536:	9300      	str	r3, [sp, #0]
 801b538:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801b53c:	68f8      	ldr	r0, [r7, #12]
 801b53e:	f000 faf1 	bl	801bb24 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 801b542:	e05c      	b.n	801b5fe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801b544:	697a      	ldr	r2, [r7, #20]
 801b546:	6a39      	ldr	r1, [r7, #32]
 801b548:	68f8      	ldr	r0, [r7, #12]
 801b54a:	f000 f989 	bl	801b860 <I2C_WaitOnRXNEFlagUntilTimeout>
 801b54e:	4603      	mov	r3, r0
 801b550:	2b00      	cmp	r3, #0
 801b552:	d001      	beq.n	801b558 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 801b554:	2301      	movs	r3, #1
 801b556:	e07c      	b.n	801b652 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801b558:	68fb      	ldr	r3, [r7, #12]
 801b55a:	681b      	ldr	r3, [r3, #0]
 801b55c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b55e:	68fb      	ldr	r3, [r7, #12]
 801b560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b562:	b2d2      	uxtb	r2, r2
 801b564:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801b566:	68fb      	ldr	r3, [r7, #12]
 801b568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b56a:	1c5a      	adds	r2, r3, #1
 801b56c:	68fb      	ldr	r3, [r7, #12]
 801b56e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 801b570:	68fb      	ldr	r3, [r7, #12]
 801b572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b574:	3b01      	subs	r3, #1
 801b576:	b29a      	uxth	r2, r3
 801b578:	68fb      	ldr	r3, [r7, #12]
 801b57a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801b57c:	68fb      	ldr	r3, [r7, #12]
 801b57e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b580:	b29b      	uxth	r3, r3
 801b582:	3b01      	subs	r3, #1
 801b584:	b29a      	uxth	r2, r3
 801b586:	68fb      	ldr	r3, [r7, #12]
 801b588:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801b58a:	68fb      	ldr	r3, [r7, #12]
 801b58c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b58e:	b29b      	uxth	r3, r3
 801b590:	2b00      	cmp	r3, #0
 801b592:	d034      	beq.n	801b5fe <HAL_I2C_Master_Receive+0x186>
 801b594:	68fb      	ldr	r3, [r7, #12]
 801b596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b598:	2b00      	cmp	r3, #0
 801b59a:	d130      	bne.n	801b5fe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801b59c:	697b      	ldr	r3, [r7, #20]
 801b59e:	9300      	str	r3, [sp, #0]
 801b5a0:	6a3b      	ldr	r3, [r7, #32]
 801b5a2:	2200      	movs	r2, #0
 801b5a4:	2180      	movs	r1, #128	; 0x80
 801b5a6:	68f8      	ldr	r0, [r7, #12]
 801b5a8:	f000 f880 	bl	801b6ac <I2C_WaitOnFlagUntilTimeout>
 801b5ac:	4603      	mov	r3, r0
 801b5ae:	2b00      	cmp	r3, #0
 801b5b0:	d001      	beq.n	801b5b6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 801b5b2:	2301      	movs	r3, #1
 801b5b4:	e04d      	b.n	801b652 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801b5b6:	68fb      	ldr	r3, [r7, #12]
 801b5b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b5ba:	b29b      	uxth	r3, r3
 801b5bc:	2bff      	cmp	r3, #255	; 0xff
 801b5be:	d90e      	bls.n	801b5de <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801b5c0:	68fb      	ldr	r3, [r7, #12]
 801b5c2:	22ff      	movs	r2, #255	; 0xff
 801b5c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801b5c6:	68fb      	ldr	r3, [r7, #12]
 801b5c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b5ca:	b2da      	uxtb	r2, r3
 801b5cc:	8979      	ldrh	r1, [r7, #10]
 801b5ce:	2300      	movs	r3, #0
 801b5d0:	9300      	str	r3, [sp, #0]
 801b5d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801b5d6:	68f8      	ldr	r0, [r7, #12]
 801b5d8:	f000 faa4 	bl	801bb24 <I2C_TransferConfig>
 801b5dc:	e00f      	b.n	801b5fe <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801b5de:	68fb      	ldr	r3, [r7, #12]
 801b5e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b5e2:	b29a      	uxth	r2, r3
 801b5e4:	68fb      	ldr	r3, [r7, #12]
 801b5e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801b5e8:	68fb      	ldr	r3, [r7, #12]
 801b5ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b5ec:	b2da      	uxtb	r2, r3
 801b5ee:	8979      	ldrh	r1, [r7, #10]
 801b5f0:	2300      	movs	r3, #0
 801b5f2:	9300      	str	r3, [sp, #0]
 801b5f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801b5f8:	68f8      	ldr	r0, [r7, #12]
 801b5fa:	f000 fa93 	bl	801bb24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801b5fe:	68fb      	ldr	r3, [r7, #12]
 801b600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b602:	b29b      	uxth	r3, r3
 801b604:	2b00      	cmp	r3, #0
 801b606:	d19d      	bne.n	801b544 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801b608:	697a      	ldr	r2, [r7, #20]
 801b60a:	6a39      	ldr	r1, [r7, #32]
 801b60c:	68f8      	ldr	r0, [r7, #12]
 801b60e:	f000 f8e3 	bl	801b7d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 801b612:	4603      	mov	r3, r0
 801b614:	2b00      	cmp	r3, #0
 801b616:	d001      	beq.n	801b61c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 801b618:	2301      	movs	r3, #1
 801b61a:	e01a      	b.n	801b652 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801b61c:	68fb      	ldr	r3, [r7, #12]
 801b61e:	681b      	ldr	r3, [r3, #0]
 801b620:	2220      	movs	r2, #32
 801b622:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801b624:	68fb      	ldr	r3, [r7, #12]
 801b626:	681b      	ldr	r3, [r3, #0]
 801b628:	6859      	ldr	r1, [r3, #4]
 801b62a:	68fb      	ldr	r3, [r7, #12]
 801b62c:	681a      	ldr	r2, [r3, #0]
 801b62e:	4b0c      	ldr	r3, [pc, #48]	; (801b660 <HAL_I2C_Master_Receive+0x1e8>)
 801b630:	400b      	ands	r3, r1
 801b632:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801b634:	68fb      	ldr	r3, [r7, #12]
 801b636:	2220      	movs	r2, #32
 801b638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801b63c:	68fb      	ldr	r3, [r7, #12]
 801b63e:	2200      	movs	r2, #0
 801b640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801b644:	68fb      	ldr	r3, [r7, #12]
 801b646:	2200      	movs	r2, #0
 801b648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801b64c:	2300      	movs	r3, #0
 801b64e:	e000      	b.n	801b652 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 801b650:	2302      	movs	r3, #2
  }
}
 801b652:	4618      	mov	r0, r3
 801b654:	3718      	adds	r7, #24
 801b656:	46bd      	mov	sp, r7
 801b658:	bd80      	pop	{r7, pc}
 801b65a:	bf00      	nop
 801b65c:	80002400 	.word	0x80002400
 801b660:	fe00e800 	.word	0xfe00e800

0801b664 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801b664:	b480      	push	{r7}
 801b666:	b083      	sub	sp, #12
 801b668:	af00      	add	r7, sp, #0
 801b66a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801b66c:	687b      	ldr	r3, [r7, #4]
 801b66e:	681b      	ldr	r3, [r3, #0]
 801b670:	699b      	ldr	r3, [r3, #24]
 801b672:	f003 0302 	and.w	r3, r3, #2
 801b676:	2b02      	cmp	r3, #2
 801b678:	d103      	bne.n	801b682 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801b67a:	687b      	ldr	r3, [r7, #4]
 801b67c:	681b      	ldr	r3, [r3, #0]
 801b67e:	2200      	movs	r2, #0
 801b680:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801b682:	687b      	ldr	r3, [r7, #4]
 801b684:	681b      	ldr	r3, [r3, #0]
 801b686:	699b      	ldr	r3, [r3, #24]
 801b688:	f003 0301 	and.w	r3, r3, #1
 801b68c:	2b01      	cmp	r3, #1
 801b68e:	d007      	beq.n	801b6a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801b690:	687b      	ldr	r3, [r7, #4]
 801b692:	681b      	ldr	r3, [r3, #0]
 801b694:	699a      	ldr	r2, [r3, #24]
 801b696:	687b      	ldr	r3, [r7, #4]
 801b698:	681b      	ldr	r3, [r3, #0]
 801b69a:	f042 0201 	orr.w	r2, r2, #1
 801b69e:	619a      	str	r2, [r3, #24]
  }
}
 801b6a0:	bf00      	nop
 801b6a2:	370c      	adds	r7, #12
 801b6a4:	46bd      	mov	sp, r7
 801b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6aa:	4770      	bx	lr

0801b6ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801b6ac:	b580      	push	{r7, lr}
 801b6ae:	b084      	sub	sp, #16
 801b6b0:	af00      	add	r7, sp, #0
 801b6b2:	60f8      	str	r0, [r7, #12]
 801b6b4:	60b9      	str	r1, [r7, #8]
 801b6b6:	603b      	str	r3, [r7, #0]
 801b6b8:	4613      	mov	r3, r2
 801b6ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801b6bc:	e031      	b.n	801b722 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801b6be:	683b      	ldr	r3, [r7, #0]
 801b6c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b6c4:	d02d      	beq.n	801b722 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801b6c6:	f7fd fac5 	bl	8018c54 <HAL_GetTick>
 801b6ca:	4602      	mov	r2, r0
 801b6cc:	69bb      	ldr	r3, [r7, #24]
 801b6ce:	1ad3      	subs	r3, r2, r3
 801b6d0:	683a      	ldr	r2, [r7, #0]
 801b6d2:	429a      	cmp	r2, r3
 801b6d4:	d302      	bcc.n	801b6dc <I2C_WaitOnFlagUntilTimeout+0x30>
 801b6d6:	683b      	ldr	r3, [r7, #0]
 801b6d8:	2b00      	cmp	r3, #0
 801b6da:	d122      	bne.n	801b722 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801b6dc:	68fb      	ldr	r3, [r7, #12]
 801b6de:	681b      	ldr	r3, [r3, #0]
 801b6e0:	699a      	ldr	r2, [r3, #24]
 801b6e2:	68bb      	ldr	r3, [r7, #8]
 801b6e4:	4013      	ands	r3, r2
 801b6e6:	68ba      	ldr	r2, [r7, #8]
 801b6e8:	429a      	cmp	r2, r3
 801b6ea:	bf0c      	ite	eq
 801b6ec:	2301      	moveq	r3, #1
 801b6ee:	2300      	movne	r3, #0
 801b6f0:	b2db      	uxtb	r3, r3
 801b6f2:	461a      	mov	r2, r3
 801b6f4:	79fb      	ldrb	r3, [r7, #7]
 801b6f6:	429a      	cmp	r2, r3
 801b6f8:	d113      	bne.n	801b722 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801b6fa:	68fb      	ldr	r3, [r7, #12]
 801b6fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b6fe:	f043 0220 	orr.w	r2, r3, #32
 801b702:	68fb      	ldr	r3, [r7, #12]
 801b704:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801b706:	68fb      	ldr	r3, [r7, #12]
 801b708:	2220      	movs	r2, #32
 801b70a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801b70e:	68fb      	ldr	r3, [r7, #12]
 801b710:	2200      	movs	r2, #0
 801b712:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801b716:	68fb      	ldr	r3, [r7, #12]
 801b718:	2200      	movs	r2, #0
 801b71a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 801b71e:	2301      	movs	r3, #1
 801b720:	e00f      	b.n	801b742 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801b722:	68fb      	ldr	r3, [r7, #12]
 801b724:	681b      	ldr	r3, [r3, #0]
 801b726:	699a      	ldr	r2, [r3, #24]
 801b728:	68bb      	ldr	r3, [r7, #8]
 801b72a:	4013      	ands	r3, r2
 801b72c:	68ba      	ldr	r2, [r7, #8]
 801b72e:	429a      	cmp	r2, r3
 801b730:	bf0c      	ite	eq
 801b732:	2301      	moveq	r3, #1
 801b734:	2300      	movne	r3, #0
 801b736:	b2db      	uxtb	r3, r3
 801b738:	461a      	mov	r2, r3
 801b73a:	79fb      	ldrb	r3, [r7, #7]
 801b73c:	429a      	cmp	r2, r3
 801b73e:	d0be      	beq.n	801b6be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801b740:	2300      	movs	r3, #0
}
 801b742:	4618      	mov	r0, r3
 801b744:	3710      	adds	r7, #16
 801b746:	46bd      	mov	sp, r7
 801b748:	bd80      	pop	{r7, pc}

0801b74a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801b74a:	b580      	push	{r7, lr}
 801b74c:	b084      	sub	sp, #16
 801b74e:	af00      	add	r7, sp, #0
 801b750:	60f8      	str	r0, [r7, #12]
 801b752:	60b9      	str	r1, [r7, #8]
 801b754:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801b756:	e033      	b.n	801b7c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801b758:	687a      	ldr	r2, [r7, #4]
 801b75a:	68b9      	ldr	r1, [r7, #8]
 801b75c:	68f8      	ldr	r0, [r7, #12]
 801b75e:	f000 f901 	bl	801b964 <I2C_IsErrorOccurred>
 801b762:	4603      	mov	r3, r0
 801b764:	2b00      	cmp	r3, #0
 801b766:	d001      	beq.n	801b76c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801b768:	2301      	movs	r3, #1
 801b76a:	e031      	b.n	801b7d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801b76c:	68bb      	ldr	r3, [r7, #8]
 801b76e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b772:	d025      	beq.n	801b7c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801b774:	f7fd fa6e 	bl	8018c54 <HAL_GetTick>
 801b778:	4602      	mov	r2, r0
 801b77a:	687b      	ldr	r3, [r7, #4]
 801b77c:	1ad3      	subs	r3, r2, r3
 801b77e:	68ba      	ldr	r2, [r7, #8]
 801b780:	429a      	cmp	r2, r3
 801b782:	d302      	bcc.n	801b78a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 801b784:	68bb      	ldr	r3, [r7, #8]
 801b786:	2b00      	cmp	r3, #0
 801b788:	d11a      	bne.n	801b7c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 801b78a:	68fb      	ldr	r3, [r7, #12]
 801b78c:	681b      	ldr	r3, [r3, #0]
 801b78e:	699b      	ldr	r3, [r3, #24]
 801b790:	f003 0302 	and.w	r3, r3, #2
 801b794:	2b02      	cmp	r3, #2
 801b796:	d013      	beq.n	801b7c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801b798:	68fb      	ldr	r3, [r7, #12]
 801b79a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b79c:	f043 0220 	orr.w	r2, r3, #32
 801b7a0:	68fb      	ldr	r3, [r7, #12]
 801b7a2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801b7a4:	68fb      	ldr	r3, [r7, #12]
 801b7a6:	2220      	movs	r2, #32
 801b7a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801b7ac:	68fb      	ldr	r3, [r7, #12]
 801b7ae:	2200      	movs	r2, #0
 801b7b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801b7b4:	68fb      	ldr	r3, [r7, #12]
 801b7b6:	2200      	movs	r2, #0
 801b7b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 801b7bc:	2301      	movs	r3, #1
 801b7be:	e007      	b.n	801b7d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801b7c0:	68fb      	ldr	r3, [r7, #12]
 801b7c2:	681b      	ldr	r3, [r3, #0]
 801b7c4:	699b      	ldr	r3, [r3, #24]
 801b7c6:	f003 0302 	and.w	r3, r3, #2
 801b7ca:	2b02      	cmp	r3, #2
 801b7cc:	d1c4      	bne.n	801b758 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 801b7ce:	2300      	movs	r3, #0
}
 801b7d0:	4618      	mov	r0, r3
 801b7d2:	3710      	adds	r7, #16
 801b7d4:	46bd      	mov	sp, r7
 801b7d6:	bd80      	pop	{r7, pc}

0801b7d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801b7d8:	b580      	push	{r7, lr}
 801b7da:	b084      	sub	sp, #16
 801b7dc:	af00      	add	r7, sp, #0
 801b7de:	60f8      	str	r0, [r7, #12]
 801b7e0:	60b9      	str	r1, [r7, #8]
 801b7e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801b7e4:	e02f      	b.n	801b846 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801b7e6:	687a      	ldr	r2, [r7, #4]
 801b7e8:	68b9      	ldr	r1, [r7, #8]
 801b7ea:	68f8      	ldr	r0, [r7, #12]
 801b7ec:	f000 f8ba 	bl	801b964 <I2C_IsErrorOccurred>
 801b7f0:	4603      	mov	r3, r0
 801b7f2:	2b00      	cmp	r3, #0
 801b7f4:	d001      	beq.n	801b7fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801b7f6:	2301      	movs	r3, #1
 801b7f8:	e02d      	b.n	801b856 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801b7fa:	f7fd fa2b 	bl	8018c54 <HAL_GetTick>
 801b7fe:	4602      	mov	r2, r0
 801b800:	687b      	ldr	r3, [r7, #4]
 801b802:	1ad3      	subs	r3, r2, r3
 801b804:	68ba      	ldr	r2, [r7, #8]
 801b806:	429a      	cmp	r2, r3
 801b808:	d302      	bcc.n	801b810 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801b80a:	68bb      	ldr	r3, [r7, #8]
 801b80c:	2b00      	cmp	r3, #0
 801b80e:	d11a      	bne.n	801b846 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 801b810:	68fb      	ldr	r3, [r7, #12]
 801b812:	681b      	ldr	r3, [r3, #0]
 801b814:	699b      	ldr	r3, [r3, #24]
 801b816:	f003 0320 	and.w	r3, r3, #32
 801b81a:	2b20      	cmp	r3, #32
 801b81c:	d013      	beq.n	801b846 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801b81e:	68fb      	ldr	r3, [r7, #12]
 801b820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b822:	f043 0220 	orr.w	r2, r3, #32
 801b826:	68fb      	ldr	r3, [r7, #12]
 801b828:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801b82a:	68fb      	ldr	r3, [r7, #12]
 801b82c:	2220      	movs	r2, #32
 801b82e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801b832:	68fb      	ldr	r3, [r7, #12]
 801b834:	2200      	movs	r2, #0
 801b836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801b83a:	68fb      	ldr	r3, [r7, #12]
 801b83c:	2200      	movs	r2, #0
 801b83e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801b842:	2301      	movs	r3, #1
 801b844:	e007      	b.n	801b856 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801b846:	68fb      	ldr	r3, [r7, #12]
 801b848:	681b      	ldr	r3, [r3, #0]
 801b84a:	699b      	ldr	r3, [r3, #24]
 801b84c:	f003 0320 	and.w	r3, r3, #32
 801b850:	2b20      	cmp	r3, #32
 801b852:	d1c8      	bne.n	801b7e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801b854:	2300      	movs	r3, #0
}
 801b856:	4618      	mov	r0, r3
 801b858:	3710      	adds	r7, #16
 801b85a:	46bd      	mov	sp, r7
 801b85c:	bd80      	pop	{r7, pc}
	...

0801b860 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801b860:	b580      	push	{r7, lr}
 801b862:	b084      	sub	sp, #16
 801b864:	af00      	add	r7, sp, #0
 801b866:	60f8      	str	r0, [r7, #12]
 801b868:	60b9      	str	r1, [r7, #8]
 801b86a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801b86c:	e06b      	b.n	801b946 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801b86e:	687a      	ldr	r2, [r7, #4]
 801b870:	68b9      	ldr	r1, [r7, #8]
 801b872:	68f8      	ldr	r0, [r7, #12]
 801b874:	f000 f876 	bl	801b964 <I2C_IsErrorOccurred>
 801b878:	4603      	mov	r3, r0
 801b87a:	2b00      	cmp	r3, #0
 801b87c:	d001      	beq.n	801b882 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801b87e:	2301      	movs	r3, #1
 801b880:	e069      	b.n	801b956 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801b882:	68fb      	ldr	r3, [r7, #12]
 801b884:	681b      	ldr	r3, [r3, #0]
 801b886:	699b      	ldr	r3, [r3, #24]
 801b888:	f003 0320 	and.w	r3, r3, #32
 801b88c:	2b20      	cmp	r3, #32
 801b88e:	d138      	bne.n	801b902 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 801b890:	68fb      	ldr	r3, [r7, #12]
 801b892:	681b      	ldr	r3, [r3, #0]
 801b894:	699b      	ldr	r3, [r3, #24]
 801b896:	f003 0304 	and.w	r3, r3, #4
 801b89a:	2b04      	cmp	r3, #4
 801b89c:	d105      	bne.n	801b8aa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 801b89e:	68fb      	ldr	r3, [r7, #12]
 801b8a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b8a2:	2b00      	cmp	r3, #0
 801b8a4:	d001      	beq.n	801b8aa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 801b8a6:	2300      	movs	r3, #0
 801b8a8:	e055      	b.n	801b956 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801b8aa:	68fb      	ldr	r3, [r7, #12]
 801b8ac:	681b      	ldr	r3, [r3, #0]
 801b8ae:	699b      	ldr	r3, [r3, #24]
 801b8b0:	f003 0310 	and.w	r3, r3, #16
 801b8b4:	2b10      	cmp	r3, #16
 801b8b6:	d107      	bne.n	801b8c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801b8b8:	68fb      	ldr	r3, [r7, #12]
 801b8ba:	681b      	ldr	r3, [r3, #0]
 801b8bc:	2210      	movs	r2, #16
 801b8be:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 801b8c0:	68fb      	ldr	r3, [r7, #12]
 801b8c2:	2204      	movs	r2, #4
 801b8c4:	645a      	str	r2, [r3, #68]	; 0x44
 801b8c6:	e002      	b.n	801b8ce <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801b8c8:	68fb      	ldr	r3, [r7, #12]
 801b8ca:	2200      	movs	r2, #0
 801b8cc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801b8ce:	68fb      	ldr	r3, [r7, #12]
 801b8d0:	681b      	ldr	r3, [r3, #0]
 801b8d2:	2220      	movs	r2, #32
 801b8d4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 801b8d6:	68fb      	ldr	r3, [r7, #12]
 801b8d8:	681b      	ldr	r3, [r3, #0]
 801b8da:	6859      	ldr	r1, [r3, #4]
 801b8dc:	68fb      	ldr	r3, [r7, #12]
 801b8de:	681a      	ldr	r2, [r3, #0]
 801b8e0:	4b1f      	ldr	r3, [pc, #124]	; (801b960 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 801b8e2:	400b      	ands	r3, r1
 801b8e4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 801b8e6:	68fb      	ldr	r3, [r7, #12]
 801b8e8:	2220      	movs	r2, #32
 801b8ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801b8ee:	68fb      	ldr	r3, [r7, #12]
 801b8f0:	2200      	movs	r2, #0
 801b8f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801b8f6:	68fb      	ldr	r3, [r7, #12]
 801b8f8:	2200      	movs	r2, #0
 801b8fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801b8fe:	2301      	movs	r3, #1
 801b900:	e029      	b.n	801b956 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801b902:	f7fd f9a7 	bl	8018c54 <HAL_GetTick>
 801b906:	4602      	mov	r2, r0
 801b908:	687b      	ldr	r3, [r7, #4]
 801b90a:	1ad3      	subs	r3, r2, r3
 801b90c:	68ba      	ldr	r2, [r7, #8]
 801b90e:	429a      	cmp	r2, r3
 801b910:	d302      	bcc.n	801b918 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 801b912:	68bb      	ldr	r3, [r7, #8]
 801b914:	2b00      	cmp	r3, #0
 801b916:	d116      	bne.n	801b946 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 801b918:	68fb      	ldr	r3, [r7, #12]
 801b91a:	681b      	ldr	r3, [r3, #0]
 801b91c:	699b      	ldr	r3, [r3, #24]
 801b91e:	f003 0304 	and.w	r3, r3, #4
 801b922:	2b04      	cmp	r3, #4
 801b924:	d00f      	beq.n	801b946 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801b926:	68fb      	ldr	r3, [r7, #12]
 801b928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b92a:	f043 0220 	orr.w	r2, r3, #32
 801b92e:	68fb      	ldr	r3, [r7, #12]
 801b930:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801b932:	68fb      	ldr	r3, [r7, #12]
 801b934:	2220      	movs	r2, #32
 801b936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801b93a:	68fb      	ldr	r3, [r7, #12]
 801b93c:	2200      	movs	r2, #0
 801b93e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801b942:	2301      	movs	r3, #1
 801b944:	e007      	b.n	801b956 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801b946:	68fb      	ldr	r3, [r7, #12]
 801b948:	681b      	ldr	r3, [r3, #0]
 801b94a:	699b      	ldr	r3, [r3, #24]
 801b94c:	f003 0304 	and.w	r3, r3, #4
 801b950:	2b04      	cmp	r3, #4
 801b952:	d18c      	bne.n	801b86e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801b954:	2300      	movs	r3, #0
}
 801b956:	4618      	mov	r0, r3
 801b958:	3710      	adds	r7, #16
 801b95a:	46bd      	mov	sp, r7
 801b95c:	bd80      	pop	{r7, pc}
 801b95e:	bf00      	nop
 801b960:	fe00e800 	.word	0xfe00e800

0801b964 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801b964:	b580      	push	{r7, lr}
 801b966:	b08a      	sub	sp, #40	; 0x28
 801b968:	af00      	add	r7, sp, #0
 801b96a:	60f8      	str	r0, [r7, #12]
 801b96c:	60b9      	str	r1, [r7, #8]
 801b96e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b970:	2300      	movs	r3, #0
 801b972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 801b976:	68fb      	ldr	r3, [r7, #12]
 801b978:	681b      	ldr	r3, [r3, #0]
 801b97a:	699b      	ldr	r3, [r3, #24]
 801b97c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 801b97e:	2300      	movs	r3, #0
 801b980:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 801b982:	687b      	ldr	r3, [r7, #4]
 801b984:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801b986:	69bb      	ldr	r3, [r7, #24]
 801b988:	f003 0310 	and.w	r3, r3, #16
 801b98c:	2b00      	cmp	r3, #0
 801b98e:	d068      	beq.n	801ba62 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801b990:	68fb      	ldr	r3, [r7, #12]
 801b992:	681b      	ldr	r3, [r3, #0]
 801b994:	2210      	movs	r2, #16
 801b996:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801b998:	e049      	b.n	801ba2e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801b99a:	68bb      	ldr	r3, [r7, #8]
 801b99c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b9a0:	d045      	beq.n	801ba2e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801b9a2:	f7fd f957 	bl	8018c54 <HAL_GetTick>
 801b9a6:	4602      	mov	r2, r0
 801b9a8:	69fb      	ldr	r3, [r7, #28]
 801b9aa:	1ad3      	subs	r3, r2, r3
 801b9ac:	68ba      	ldr	r2, [r7, #8]
 801b9ae:	429a      	cmp	r2, r3
 801b9b0:	d302      	bcc.n	801b9b8 <I2C_IsErrorOccurred+0x54>
 801b9b2:	68bb      	ldr	r3, [r7, #8]
 801b9b4:	2b00      	cmp	r3, #0
 801b9b6:	d13a      	bne.n	801ba2e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 801b9b8:	68fb      	ldr	r3, [r7, #12]
 801b9ba:	681b      	ldr	r3, [r3, #0]
 801b9bc:	685b      	ldr	r3, [r3, #4]
 801b9be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801b9c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 801b9c4:	68fb      	ldr	r3, [r7, #12]
 801b9c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b9ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801b9cc:	68fb      	ldr	r3, [r7, #12]
 801b9ce:	681b      	ldr	r3, [r3, #0]
 801b9d0:	699b      	ldr	r3, [r3, #24]
 801b9d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801b9d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801b9da:	d121      	bne.n	801ba20 <I2C_IsErrorOccurred+0xbc>
 801b9dc:	697b      	ldr	r3, [r7, #20]
 801b9de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801b9e2:	d01d      	beq.n	801ba20 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 801b9e4:	7cfb      	ldrb	r3, [r7, #19]
 801b9e6:	2b20      	cmp	r3, #32
 801b9e8:	d01a      	beq.n	801ba20 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801b9ea:	68fb      	ldr	r3, [r7, #12]
 801b9ec:	681b      	ldr	r3, [r3, #0]
 801b9ee:	685a      	ldr	r2, [r3, #4]
 801b9f0:	68fb      	ldr	r3, [r7, #12]
 801b9f2:	681b      	ldr	r3, [r3, #0]
 801b9f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801b9f8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801b9fa:	f7fd f92b 	bl	8018c54 <HAL_GetTick>
 801b9fe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801ba00:	e00e      	b.n	801ba20 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801ba02:	f7fd f927 	bl	8018c54 <HAL_GetTick>
 801ba06:	4602      	mov	r2, r0
 801ba08:	69fb      	ldr	r3, [r7, #28]
 801ba0a:	1ad3      	subs	r3, r2, r3
 801ba0c:	2b19      	cmp	r3, #25
 801ba0e:	d907      	bls.n	801ba20 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 801ba10:	6a3b      	ldr	r3, [r7, #32]
 801ba12:	f043 0320 	orr.w	r3, r3, #32
 801ba16:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 801ba18:	2301      	movs	r3, #1
 801ba1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 801ba1e:	e006      	b.n	801ba2e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801ba20:	68fb      	ldr	r3, [r7, #12]
 801ba22:	681b      	ldr	r3, [r3, #0]
 801ba24:	699b      	ldr	r3, [r3, #24]
 801ba26:	f003 0320 	and.w	r3, r3, #32
 801ba2a:	2b20      	cmp	r3, #32
 801ba2c:	d1e9      	bne.n	801ba02 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801ba2e:	68fb      	ldr	r3, [r7, #12]
 801ba30:	681b      	ldr	r3, [r3, #0]
 801ba32:	699b      	ldr	r3, [r3, #24]
 801ba34:	f003 0320 	and.w	r3, r3, #32
 801ba38:	2b20      	cmp	r3, #32
 801ba3a:	d003      	beq.n	801ba44 <I2C_IsErrorOccurred+0xe0>
 801ba3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ba40:	2b00      	cmp	r3, #0
 801ba42:	d0aa      	beq.n	801b99a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 801ba44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ba48:	2b00      	cmp	r3, #0
 801ba4a:	d103      	bne.n	801ba54 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801ba4c:	68fb      	ldr	r3, [r7, #12]
 801ba4e:	681b      	ldr	r3, [r3, #0]
 801ba50:	2220      	movs	r2, #32
 801ba52:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 801ba54:	6a3b      	ldr	r3, [r7, #32]
 801ba56:	f043 0304 	orr.w	r3, r3, #4
 801ba5a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 801ba5c:	2301      	movs	r3, #1
 801ba5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801ba62:	68fb      	ldr	r3, [r7, #12]
 801ba64:	681b      	ldr	r3, [r3, #0]
 801ba66:	699b      	ldr	r3, [r3, #24]
 801ba68:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801ba6a:	69bb      	ldr	r3, [r7, #24]
 801ba6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ba70:	2b00      	cmp	r3, #0
 801ba72:	d00b      	beq.n	801ba8c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 801ba74:	6a3b      	ldr	r3, [r7, #32]
 801ba76:	f043 0301 	orr.w	r3, r3, #1
 801ba7a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801ba7c:	68fb      	ldr	r3, [r7, #12]
 801ba7e:	681b      	ldr	r3, [r3, #0]
 801ba80:	f44f 7280 	mov.w	r2, #256	; 0x100
 801ba84:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801ba86:	2301      	movs	r3, #1
 801ba88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801ba8c:	69bb      	ldr	r3, [r7, #24]
 801ba8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ba92:	2b00      	cmp	r3, #0
 801ba94:	d00b      	beq.n	801baae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 801ba96:	6a3b      	ldr	r3, [r7, #32]
 801ba98:	f043 0308 	orr.w	r3, r3, #8
 801ba9c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801ba9e:	68fb      	ldr	r3, [r7, #12]
 801baa0:	681b      	ldr	r3, [r3, #0]
 801baa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801baa6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801baa8:	2301      	movs	r3, #1
 801baaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801baae:	69bb      	ldr	r3, [r7, #24]
 801bab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801bab4:	2b00      	cmp	r3, #0
 801bab6:	d00b      	beq.n	801bad0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 801bab8:	6a3b      	ldr	r3, [r7, #32]
 801baba:	f043 0302 	orr.w	r3, r3, #2
 801babe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801bac0:	68fb      	ldr	r3, [r7, #12]
 801bac2:	681b      	ldr	r3, [r3, #0]
 801bac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 801bac8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801baca:	2301      	movs	r3, #1
 801bacc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 801bad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bad4:	2b00      	cmp	r3, #0
 801bad6:	d01c      	beq.n	801bb12 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801bad8:	68f8      	ldr	r0, [r7, #12]
 801bada:	f7ff fdc3 	bl	801b664 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801bade:	68fb      	ldr	r3, [r7, #12]
 801bae0:	681b      	ldr	r3, [r3, #0]
 801bae2:	6859      	ldr	r1, [r3, #4]
 801bae4:	68fb      	ldr	r3, [r7, #12]
 801bae6:	681a      	ldr	r2, [r3, #0]
 801bae8:	4b0d      	ldr	r3, [pc, #52]	; (801bb20 <I2C_IsErrorOccurred+0x1bc>)
 801baea:	400b      	ands	r3, r1
 801baec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 801baee:	68fb      	ldr	r3, [r7, #12]
 801baf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801baf2:	6a3b      	ldr	r3, [r7, #32]
 801baf4:	431a      	orrs	r2, r3
 801baf6:	68fb      	ldr	r3, [r7, #12]
 801baf8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801bafa:	68fb      	ldr	r3, [r7, #12]
 801bafc:	2220      	movs	r2, #32
 801bafe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801bb02:	68fb      	ldr	r3, [r7, #12]
 801bb04:	2200      	movs	r2, #0
 801bb06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801bb0a:	68fb      	ldr	r3, [r7, #12]
 801bb0c:	2200      	movs	r2, #0
 801bb0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 801bb12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801bb16:	4618      	mov	r0, r3
 801bb18:	3728      	adds	r7, #40	; 0x28
 801bb1a:	46bd      	mov	sp, r7
 801bb1c:	bd80      	pop	{r7, pc}
 801bb1e:	bf00      	nop
 801bb20:	fe00e800 	.word	0xfe00e800

0801bb24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 801bb24:	b480      	push	{r7}
 801bb26:	b087      	sub	sp, #28
 801bb28:	af00      	add	r7, sp, #0
 801bb2a:	60f8      	str	r0, [r7, #12]
 801bb2c:	607b      	str	r3, [r7, #4]
 801bb2e:	460b      	mov	r3, r1
 801bb30:	817b      	strh	r3, [r7, #10]
 801bb32:	4613      	mov	r3, r2
 801bb34:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801bb36:	897b      	ldrh	r3, [r7, #10]
 801bb38:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801bb3c:	7a7b      	ldrb	r3, [r7, #9]
 801bb3e:	041b      	lsls	r3, r3, #16
 801bb40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801bb44:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801bb46:	687b      	ldr	r3, [r7, #4]
 801bb48:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801bb4a:	6a3b      	ldr	r3, [r7, #32]
 801bb4c:	4313      	orrs	r3, r2
 801bb4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801bb52:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 801bb54:	68fb      	ldr	r3, [r7, #12]
 801bb56:	681b      	ldr	r3, [r3, #0]
 801bb58:	685a      	ldr	r2, [r3, #4]
 801bb5a:	6a3b      	ldr	r3, [r7, #32]
 801bb5c:	0d5b      	lsrs	r3, r3, #21
 801bb5e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 801bb62:	4b08      	ldr	r3, [pc, #32]	; (801bb84 <I2C_TransferConfig+0x60>)
 801bb64:	430b      	orrs	r3, r1
 801bb66:	43db      	mvns	r3, r3
 801bb68:	ea02 0103 	and.w	r1, r2, r3
 801bb6c:	68fb      	ldr	r3, [r7, #12]
 801bb6e:	681b      	ldr	r3, [r3, #0]
 801bb70:	697a      	ldr	r2, [r7, #20]
 801bb72:	430a      	orrs	r2, r1
 801bb74:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801bb76:	bf00      	nop
 801bb78:	371c      	adds	r7, #28
 801bb7a:	46bd      	mov	sp, r7
 801bb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb80:	4770      	bx	lr
 801bb82:	bf00      	nop
 801bb84:	03ff63ff 	.word	0x03ff63ff

0801bb88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801bb88:	b480      	push	{r7}
 801bb8a:	b083      	sub	sp, #12
 801bb8c:	af00      	add	r7, sp, #0
 801bb8e:	6078      	str	r0, [r7, #4]
 801bb90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801bb92:	687b      	ldr	r3, [r7, #4]
 801bb94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801bb98:	b2db      	uxtb	r3, r3
 801bb9a:	2b20      	cmp	r3, #32
 801bb9c:	d138      	bne.n	801bc10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801bb9e:	687b      	ldr	r3, [r7, #4]
 801bba0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801bba4:	2b01      	cmp	r3, #1
 801bba6:	d101      	bne.n	801bbac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801bba8:	2302      	movs	r3, #2
 801bbaa:	e032      	b.n	801bc12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801bbac:	687b      	ldr	r3, [r7, #4]
 801bbae:	2201      	movs	r2, #1
 801bbb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801bbb4:	687b      	ldr	r3, [r7, #4]
 801bbb6:	2224      	movs	r2, #36	; 0x24
 801bbb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801bbbc:	687b      	ldr	r3, [r7, #4]
 801bbbe:	681b      	ldr	r3, [r3, #0]
 801bbc0:	681a      	ldr	r2, [r3, #0]
 801bbc2:	687b      	ldr	r3, [r7, #4]
 801bbc4:	681b      	ldr	r3, [r3, #0]
 801bbc6:	f022 0201 	bic.w	r2, r2, #1
 801bbca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801bbcc:	687b      	ldr	r3, [r7, #4]
 801bbce:	681b      	ldr	r3, [r3, #0]
 801bbd0:	681a      	ldr	r2, [r3, #0]
 801bbd2:	687b      	ldr	r3, [r7, #4]
 801bbd4:	681b      	ldr	r3, [r3, #0]
 801bbd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801bbda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801bbdc:	687b      	ldr	r3, [r7, #4]
 801bbde:	681b      	ldr	r3, [r3, #0]
 801bbe0:	6819      	ldr	r1, [r3, #0]
 801bbe2:	687b      	ldr	r3, [r7, #4]
 801bbe4:	681b      	ldr	r3, [r3, #0]
 801bbe6:	683a      	ldr	r2, [r7, #0]
 801bbe8:	430a      	orrs	r2, r1
 801bbea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801bbec:	687b      	ldr	r3, [r7, #4]
 801bbee:	681b      	ldr	r3, [r3, #0]
 801bbf0:	681a      	ldr	r2, [r3, #0]
 801bbf2:	687b      	ldr	r3, [r7, #4]
 801bbf4:	681b      	ldr	r3, [r3, #0]
 801bbf6:	f042 0201 	orr.w	r2, r2, #1
 801bbfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801bbfc:	687b      	ldr	r3, [r7, #4]
 801bbfe:	2220      	movs	r2, #32
 801bc00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801bc04:	687b      	ldr	r3, [r7, #4]
 801bc06:	2200      	movs	r2, #0
 801bc08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801bc0c:	2300      	movs	r3, #0
 801bc0e:	e000      	b.n	801bc12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801bc10:	2302      	movs	r3, #2
  }
}
 801bc12:	4618      	mov	r0, r3
 801bc14:	370c      	adds	r7, #12
 801bc16:	46bd      	mov	sp, r7
 801bc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc1c:	4770      	bx	lr

0801bc1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801bc1e:	b480      	push	{r7}
 801bc20:	b085      	sub	sp, #20
 801bc22:	af00      	add	r7, sp, #0
 801bc24:	6078      	str	r0, [r7, #4]
 801bc26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801bc28:	687b      	ldr	r3, [r7, #4]
 801bc2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801bc2e:	b2db      	uxtb	r3, r3
 801bc30:	2b20      	cmp	r3, #32
 801bc32:	d139      	bne.n	801bca8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801bc34:	687b      	ldr	r3, [r7, #4]
 801bc36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801bc3a:	2b01      	cmp	r3, #1
 801bc3c:	d101      	bne.n	801bc42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801bc3e:	2302      	movs	r3, #2
 801bc40:	e033      	b.n	801bcaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801bc42:	687b      	ldr	r3, [r7, #4]
 801bc44:	2201      	movs	r2, #1
 801bc46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	2224      	movs	r2, #36	; 0x24
 801bc4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801bc52:	687b      	ldr	r3, [r7, #4]
 801bc54:	681b      	ldr	r3, [r3, #0]
 801bc56:	681a      	ldr	r2, [r3, #0]
 801bc58:	687b      	ldr	r3, [r7, #4]
 801bc5a:	681b      	ldr	r3, [r3, #0]
 801bc5c:	f022 0201 	bic.w	r2, r2, #1
 801bc60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	681b      	ldr	r3, [r3, #0]
 801bc66:	681b      	ldr	r3, [r3, #0]
 801bc68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801bc6a:	68fb      	ldr	r3, [r7, #12]
 801bc6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801bc70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801bc72:	683b      	ldr	r3, [r7, #0]
 801bc74:	021b      	lsls	r3, r3, #8
 801bc76:	68fa      	ldr	r2, [r7, #12]
 801bc78:	4313      	orrs	r3, r2
 801bc7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801bc7c:	687b      	ldr	r3, [r7, #4]
 801bc7e:	681b      	ldr	r3, [r3, #0]
 801bc80:	68fa      	ldr	r2, [r7, #12]
 801bc82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801bc84:	687b      	ldr	r3, [r7, #4]
 801bc86:	681b      	ldr	r3, [r3, #0]
 801bc88:	681a      	ldr	r2, [r3, #0]
 801bc8a:	687b      	ldr	r3, [r7, #4]
 801bc8c:	681b      	ldr	r3, [r3, #0]
 801bc8e:	f042 0201 	orr.w	r2, r2, #1
 801bc92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801bc94:	687b      	ldr	r3, [r7, #4]
 801bc96:	2220      	movs	r2, #32
 801bc98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801bc9c:	687b      	ldr	r3, [r7, #4]
 801bc9e:	2200      	movs	r2, #0
 801bca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801bca4:	2300      	movs	r3, #0
 801bca6:	e000      	b.n	801bcaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801bca8:	2302      	movs	r3, #2
  }
}
 801bcaa:	4618      	mov	r0, r3
 801bcac:	3714      	adds	r7, #20
 801bcae:	46bd      	mov	sp, r7
 801bcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcb4:	4770      	bx	lr
	...

0801bcb8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 801bcb8:	b480      	push	{r7}
 801bcba:	b085      	sub	sp, #20
 801bcbc:	af00      	add	r7, sp, #0
 801bcbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801bcc0:	2300      	movs	r3, #0
 801bcc2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 801bcc4:	4b0b      	ldr	r3, [pc, #44]	; (801bcf4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 801bcc6:	681b      	ldr	r3, [r3, #0]
 801bcc8:	f003 0301 	and.w	r3, r3, #1
 801bccc:	2b00      	cmp	r3, #0
 801bcce:	d002      	beq.n	801bcd6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 801bcd0:	2301      	movs	r3, #1
 801bcd2:	73fb      	strb	r3, [r7, #15]
 801bcd4:	e007      	b.n	801bce6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 801bcd6:	4b07      	ldr	r3, [pc, #28]	; (801bcf4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 801bcd8:	681b      	ldr	r3, [r3, #0]
 801bcda:	f023 0204 	bic.w	r2, r3, #4
 801bcde:	4905      	ldr	r1, [pc, #20]	; (801bcf4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	4313      	orrs	r3, r2
 801bce4:	600b      	str	r3, [r1, #0]
  }

  return status;
 801bce6:	7bfb      	ldrb	r3, [r7, #15]
}
 801bce8:	4618      	mov	r0, r3
 801bcea:	3714      	adds	r7, #20
 801bcec:	46bd      	mov	sp, r7
 801bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcf2:	4770      	bx	lr
 801bcf4:	40030400 	.word	0x40030400

0801bcf8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 801bcf8:	b480      	push	{r7}
 801bcfa:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 801bcfc:	4b05      	ldr	r3, [pc, #20]	; (801bd14 <HAL_ICACHE_Enable+0x1c>)
 801bcfe:	681b      	ldr	r3, [r3, #0]
 801bd00:	4a04      	ldr	r2, [pc, #16]	; (801bd14 <HAL_ICACHE_Enable+0x1c>)
 801bd02:	f043 0301 	orr.w	r3, r3, #1
 801bd06:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 801bd08:	2300      	movs	r3, #0
}
 801bd0a:	4618      	mov	r0, r3
 801bd0c:	46bd      	mov	sp, r7
 801bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd12:	4770      	bx	lr
 801bd14:	40030400 	.word	0x40030400

0801bd18 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 801bd18:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bd1a:	b08b      	sub	sp, #44	; 0x2c
 801bd1c:	af06      	add	r7, sp, #24
 801bd1e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 801bd20:	687b      	ldr	r3, [r7, #4]
 801bd22:	2b00      	cmp	r3, #0
 801bd24:	d101      	bne.n	801bd2a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 801bd26:	2301      	movs	r3, #1
 801bd28:	e0cb      	b.n	801bec2 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801bd2a:	687b      	ldr	r3, [r7, #4]
 801bd2c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 801bd30:	b2db      	uxtb	r3, r3
 801bd32:	2b00      	cmp	r3, #0
 801bd34:	d106      	bne.n	801bd44 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801bd36:	687b      	ldr	r3, [r7, #4]
 801bd38:	2200      	movs	r2, #0
 801bd3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 801bd3e:	6878      	ldr	r0, [r7, #4]
 801bd40:	f7fc fcee 	bl	8018720 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 801bd44:	687b      	ldr	r3, [r7, #4]
 801bd46:	2203      	movs	r2, #3
 801bd48:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 801bd4c:	687b      	ldr	r3, [r7, #4]
 801bd4e:	681b      	ldr	r3, [r3, #0]
 801bd50:	4618      	mov	r0, r3
 801bd52:	f007 f9c7 	bl	80230e4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801bd56:	2300      	movs	r3, #0
 801bd58:	73fb      	strb	r3, [r7, #15]
 801bd5a:	e040      	b.n	801bdde <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 801bd5c:	7bfb      	ldrb	r3, [r7, #15]
 801bd5e:	6879      	ldr	r1, [r7, #4]
 801bd60:	1c5a      	adds	r2, r3, #1
 801bd62:	4613      	mov	r3, r2
 801bd64:	009b      	lsls	r3, r3, #2
 801bd66:	4413      	add	r3, r2
 801bd68:	00db      	lsls	r3, r3, #3
 801bd6a:	440b      	add	r3, r1
 801bd6c:	3301      	adds	r3, #1
 801bd6e:	2201      	movs	r2, #1
 801bd70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801bd72:	7bfb      	ldrb	r3, [r7, #15]
 801bd74:	6879      	ldr	r1, [r7, #4]
 801bd76:	1c5a      	adds	r2, r3, #1
 801bd78:	4613      	mov	r3, r2
 801bd7a:	009b      	lsls	r3, r3, #2
 801bd7c:	4413      	add	r3, r2
 801bd7e:	00db      	lsls	r3, r3, #3
 801bd80:	440b      	add	r3, r1
 801bd82:	7bfa      	ldrb	r2, [r7, #15]
 801bd84:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 801bd86:	7bfb      	ldrb	r3, [r7, #15]
 801bd88:	6879      	ldr	r1, [r7, #4]
 801bd8a:	1c5a      	adds	r2, r3, #1
 801bd8c:	4613      	mov	r3, r2
 801bd8e:	009b      	lsls	r3, r3, #2
 801bd90:	4413      	add	r3, r2
 801bd92:	00db      	lsls	r3, r3, #3
 801bd94:	440b      	add	r3, r1
 801bd96:	3303      	adds	r3, #3
 801bd98:	2200      	movs	r2, #0
 801bd9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 801bd9c:	7bfa      	ldrb	r2, [r7, #15]
 801bd9e:	6879      	ldr	r1, [r7, #4]
 801bda0:	4613      	mov	r3, r2
 801bda2:	009b      	lsls	r3, r3, #2
 801bda4:	4413      	add	r3, r2
 801bda6:	00db      	lsls	r3, r3, #3
 801bda8:	440b      	add	r3, r1
 801bdaa:	3338      	adds	r3, #56	; 0x38
 801bdac:	2200      	movs	r2, #0
 801bdae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801bdb0:	7bfa      	ldrb	r2, [r7, #15]
 801bdb2:	6879      	ldr	r1, [r7, #4]
 801bdb4:	4613      	mov	r3, r2
 801bdb6:	009b      	lsls	r3, r3, #2
 801bdb8:	4413      	add	r3, r2
 801bdba:	00db      	lsls	r3, r3, #3
 801bdbc:	440b      	add	r3, r1
 801bdbe:	333c      	adds	r3, #60	; 0x3c
 801bdc0:	2200      	movs	r2, #0
 801bdc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 801bdc4:	7bfa      	ldrb	r2, [r7, #15]
 801bdc6:	6879      	ldr	r1, [r7, #4]
 801bdc8:	4613      	mov	r3, r2
 801bdca:	009b      	lsls	r3, r3, #2
 801bdcc:	4413      	add	r3, r2
 801bdce:	00db      	lsls	r3, r3, #3
 801bdd0:	440b      	add	r3, r1
 801bdd2:	3340      	adds	r3, #64	; 0x40
 801bdd4:	2200      	movs	r2, #0
 801bdd6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801bdd8:	7bfb      	ldrb	r3, [r7, #15]
 801bdda:	3301      	adds	r3, #1
 801bddc:	73fb      	strb	r3, [r7, #15]
 801bdde:	7bfa      	ldrb	r2, [r7, #15]
 801bde0:	687b      	ldr	r3, [r7, #4]
 801bde2:	685b      	ldr	r3, [r3, #4]
 801bde4:	429a      	cmp	r2, r3
 801bde6:	d3b9      	bcc.n	801bd5c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801bde8:	2300      	movs	r3, #0
 801bdea:	73fb      	strb	r3, [r7, #15]
 801bdec:	e044      	b.n	801be78 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801bdee:	7bfa      	ldrb	r2, [r7, #15]
 801bdf0:	6879      	ldr	r1, [r7, #4]
 801bdf2:	4613      	mov	r3, r2
 801bdf4:	009b      	lsls	r3, r3, #2
 801bdf6:	4413      	add	r3, r2
 801bdf8:	00db      	lsls	r3, r3, #3
 801bdfa:	440b      	add	r3, r1
 801bdfc:	f203 1369 	addw	r3, r3, #361	; 0x169
 801be00:	2200      	movs	r2, #0
 801be02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 801be04:	7bfa      	ldrb	r2, [r7, #15]
 801be06:	6879      	ldr	r1, [r7, #4]
 801be08:	4613      	mov	r3, r2
 801be0a:	009b      	lsls	r3, r3, #2
 801be0c:	4413      	add	r3, r2
 801be0e:	00db      	lsls	r3, r3, #3
 801be10:	440b      	add	r3, r1
 801be12:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801be16:	7bfa      	ldrb	r2, [r7, #15]
 801be18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 801be1a:	7bfa      	ldrb	r2, [r7, #15]
 801be1c:	6879      	ldr	r1, [r7, #4]
 801be1e:	4613      	mov	r3, r2
 801be20:	009b      	lsls	r3, r3, #2
 801be22:	4413      	add	r3, r2
 801be24:	00db      	lsls	r3, r3, #3
 801be26:	440b      	add	r3, r1
 801be28:	f203 136b 	addw	r3, r3, #363	; 0x16b
 801be2c:	2200      	movs	r2, #0
 801be2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 801be30:	7bfa      	ldrb	r2, [r7, #15]
 801be32:	6879      	ldr	r1, [r7, #4]
 801be34:	4613      	mov	r3, r2
 801be36:	009b      	lsls	r3, r3, #2
 801be38:	4413      	add	r3, r2
 801be3a:	00db      	lsls	r3, r3, #3
 801be3c:	440b      	add	r3, r1
 801be3e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801be42:	2200      	movs	r2, #0
 801be44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 801be46:	7bfa      	ldrb	r2, [r7, #15]
 801be48:	6879      	ldr	r1, [r7, #4]
 801be4a:	4613      	mov	r3, r2
 801be4c:	009b      	lsls	r3, r3, #2
 801be4e:	4413      	add	r3, r2
 801be50:	00db      	lsls	r3, r3, #3
 801be52:	440b      	add	r3, r1
 801be54:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801be58:	2200      	movs	r2, #0
 801be5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 801be5c:	7bfa      	ldrb	r2, [r7, #15]
 801be5e:	6879      	ldr	r1, [r7, #4]
 801be60:	4613      	mov	r3, r2
 801be62:	009b      	lsls	r3, r3, #2
 801be64:	4413      	add	r3, r2
 801be66:	00db      	lsls	r3, r3, #3
 801be68:	440b      	add	r3, r1
 801be6a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 801be6e:	2200      	movs	r2, #0
 801be70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801be72:	7bfb      	ldrb	r3, [r7, #15]
 801be74:	3301      	adds	r3, #1
 801be76:	73fb      	strb	r3, [r7, #15]
 801be78:	7bfa      	ldrb	r2, [r7, #15]
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	685b      	ldr	r3, [r3, #4]
 801be7e:	429a      	cmp	r2, r3
 801be80:	d3b5      	bcc.n	801bdee <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 801be82:	687b      	ldr	r3, [r7, #4]
 801be84:	681b      	ldr	r3, [r3, #0]
 801be86:	603b      	str	r3, [r7, #0]
 801be88:	687e      	ldr	r6, [r7, #4]
 801be8a:	466d      	mov	r5, sp
 801be8c:	f106 0410 	add.w	r4, r6, #16
 801be90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801be92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801be94:	6823      	ldr	r3, [r4, #0]
 801be96:	602b      	str	r3, [r5, #0]
 801be98:	1d33      	adds	r3, r6, #4
 801be9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801be9c:	6838      	ldr	r0, [r7, #0]
 801be9e:	f007 f93c 	bl	802311a <USB_DevInit>

  hpcd->USB_Address = 0U;
 801bea2:	687b      	ldr	r3, [r7, #4]
 801bea4:	2200      	movs	r2, #0
 801bea6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 801beaa:	687b      	ldr	r3, [r7, #4]
 801beac:	2201      	movs	r2, #1
 801beae:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 801beb2:	687b      	ldr	r3, [r7, #4]
 801beb4:	69db      	ldr	r3, [r3, #28]
 801beb6:	2b01      	cmp	r3, #1
 801beb8:	d102      	bne.n	801bec0 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 801beba:	6878      	ldr	r0, [r7, #4]
 801bebc:	f000 f805 	bl	801beca <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 801bec0:	2300      	movs	r3, #0
}
 801bec2:	4618      	mov	r0, r3
 801bec4:	3714      	adds	r7, #20
 801bec6:	46bd      	mov	sp, r7
 801bec8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801beca <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801beca:	b480      	push	{r7}
 801becc:	b085      	sub	sp, #20
 801bece:	af00      	add	r7, sp, #0
 801bed0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 801bed2:	687b      	ldr	r3, [r7, #4]
 801bed4:	681b      	ldr	r3, [r3, #0]
 801bed6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801bed8:	687b      	ldr	r3, [r7, #4]
 801beda:	2201      	movs	r2, #1
 801bedc:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 801bee0:	687b      	ldr	r3, [r7, #4]
 801bee2:	2200      	movs	r2, #0
 801bee4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801bee8:	68fb      	ldr	r3, [r7, #12]
 801beea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801beee:	b29b      	uxth	r3, r3
 801bef0:	f043 0301 	orr.w	r3, r3, #1
 801bef4:	b29a      	uxth	r2, r3
 801bef6:	68fb      	ldr	r3, [r7, #12]
 801bef8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 801befc:	68fb      	ldr	r3, [r7, #12]
 801befe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801bf02:	b29b      	uxth	r3, r3
 801bf04:	f043 0302 	orr.w	r3, r3, #2
 801bf08:	b29a      	uxth	r2, r3
 801bf0a:	68fb      	ldr	r3, [r7, #12]
 801bf0c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 801bf10:	2300      	movs	r3, #0
}
 801bf12:	4618      	mov	r0, r3
 801bf14:	3714      	adds	r7, #20
 801bf16:	46bd      	mov	sp, r7
 801bf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf1c:	4770      	bx	lr
	...

0801bf20 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801bf20:	b480      	push	{r7}
 801bf22:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801bf24:	4b05      	ldr	r3, [pc, #20]	; (801bf3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 801bf26:	681b      	ldr	r3, [r3, #0]
 801bf28:	4a04      	ldr	r2, [pc, #16]	; (801bf3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 801bf2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801bf2e:	6013      	str	r3, [r2, #0]
}
 801bf30:	bf00      	nop
 801bf32:	46bd      	mov	sp, r7
 801bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf38:	4770      	bx	lr
 801bf3a:	bf00      	nop
 801bf3c:	40007000 	.word	0x40007000

0801bf40 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 801bf40:	b480      	push	{r7}
 801bf42:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 801bf44:	4b04      	ldr	r3, [pc, #16]	; (801bf58 <HAL_PWREx_GetVoltageRange+0x18>)
 801bf46:	681b      	ldr	r3, [r3, #0]
 801bf48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 801bf4c:	4618      	mov	r0, r3
 801bf4e:	46bd      	mov	sp, r7
 801bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf54:	4770      	bx	lr
 801bf56:	bf00      	nop
 801bf58:	40007000 	.word	0x40007000

0801bf5c <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801bf5c:	b580      	push	{r7, lr}
 801bf5e:	b084      	sub	sp, #16
 801bf60:	af00      	add	r7, sp, #0
 801bf62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 801bf64:	4b27      	ldr	r3, [pc, #156]	; (801c004 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 801bf66:	681b      	ldr	r3, [r3, #0]
 801bf68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801bf6c:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 801bf6e:	f000 f861 	bl	801c034 <HAL_PWREx_SMPS_GetEffectiveMode>
 801bf72:	4603      	mov	r3, r0
 801bf74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801bf78:	d101      	bne.n	801bf7e <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 801bf7a:	2301      	movs	r3, #1
 801bf7c:	e03e      	b.n	801bffc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 801bf7e:	4b21      	ldr	r3, [pc, #132]	; (801c004 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 801bf80:	68db      	ldr	r3, [r3, #12]
 801bf82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801bf86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801bf8a:	d101      	bne.n	801bf90 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 801bf8c:	2301      	movs	r3, #1
 801bf8e:	e035      	b.n	801bffc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 801bf90:	68ba      	ldr	r2, [r7, #8]
 801bf92:	687b      	ldr	r3, [r7, #4]
 801bf94:	429a      	cmp	r2, r3
 801bf96:	d101      	bne.n	801bf9c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 801bf98:	2300      	movs	r3, #0
 801bf9a:	e02f      	b.n	801bffc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 801bf9c:	4b19      	ldr	r3, [pc, #100]	; (801c004 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 801bf9e:	681b      	ldr	r3, [r3, #0]
 801bfa0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 801bfa4:	4917      	ldr	r1, [pc, #92]	; (801c004 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 801bfa6:	687b      	ldr	r3, [r7, #4]
 801bfa8:	4313      	orrs	r3, r2
 801bfaa:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 801bfac:	4b16      	ldr	r3, [pc, #88]	; (801c008 <HAL_PWREx_ControlVoltageScaling+0xac>)
 801bfae:	681b      	ldr	r3, [r3, #0]
 801bfb0:	095b      	lsrs	r3, r3, #5
 801bfb2:	4a16      	ldr	r2, [pc, #88]	; (801c00c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 801bfb4:	fba2 2303 	umull	r2, r3, r2, r3
 801bfb8:	09db      	lsrs	r3, r3, #7
 801bfba:	2232      	movs	r2, #50	; 0x32
 801bfbc:	fb02 f303 	mul.w	r3, r2, r3
 801bfc0:	4a13      	ldr	r2, [pc, #76]	; (801c010 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 801bfc2:	fba2 2303 	umull	r2, r3, r2, r3
 801bfc6:	08db      	lsrs	r3, r3, #3
 801bfc8:	3301      	adds	r3, #1
 801bfca:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801bfcc:	e002      	b.n	801bfd4 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 801bfce:	68fb      	ldr	r3, [r7, #12]
 801bfd0:	3b01      	subs	r3, #1
 801bfd2:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801bfd4:	4b0b      	ldr	r3, [pc, #44]	; (801c004 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 801bfd6:	695b      	ldr	r3, [r3, #20]
 801bfd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bfdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bfe0:	d102      	bne.n	801bfe8 <HAL_PWREx_ControlVoltageScaling+0x8c>
 801bfe2:	68fb      	ldr	r3, [r7, #12]
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	d1f2      	bne.n	801bfce <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801bfe8:	4b06      	ldr	r3, [pc, #24]	; (801c004 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 801bfea:	695b      	ldr	r3, [r3, #20]
 801bfec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bff4:	d101      	bne.n	801bffa <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 801bff6:	2303      	movs	r3, #3
 801bff8:	e000      	b.n	801bffc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 801bffa:	2300      	movs	r3, #0
}
 801bffc:	4618      	mov	r0, r3
 801bffe:	3710      	adds	r7, #16
 801c000:	46bd      	mov	sp, r7
 801c002:	bd80      	pop	{r7, pc}
 801c004:	40007000 	.word	0x40007000
 801c008:	20000090 	.word	0x20000090
 801c00c:	0a7c5ac5 	.word	0x0a7c5ac5
 801c010:	cccccccd 	.word	0xcccccccd

0801c014 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 801c014:	b480      	push	{r7}
 801c016:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 801c018:	4b05      	ldr	r3, [pc, #20]	; (801c030 <HAL_PWREx_EnableVddIO2+0x1c>)
 801c01a:	685b      	ldr	r3, [r3, #4]
 801c01c:	4a04      	ldr	r2, [pc, #16]	; (801c030 <HAL_PWREx_EnableVddIO2+0x1c>)
 801c01e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801c022:	6053      	str	r3, [r2, #4]
}
 801c024:	bf00      	nop
 801c026:	46bd      	mov	sp, r7
 801c028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c02c:	4770      	bx	lr
 801c02e:	bf00      	nop
 801c030:	40007000 	.word	0x40007000

0801c034 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 801c034:	b480      	push	{r7}
 801c036:	b083      	sub	sp, #12
 801c038:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 801c03a:	4b0f      	ldr	r3, [pc, #60]	; (801c078 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 801c03c:	691b      	ldr	r3, [r3, #16]
 801c03e:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 801c040:	683b      	ldr	r3, [r7, #0]
 801c042:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801c046:	2b00      	cmp	r3, #0
 801c048:	d003      	beq.n	801c052 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 801c04a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801c04e:	607b      	str	r3, [r7, #4]
 801c050:	e00a      	b.n	801c068 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 801c052:	683b      	ldr	r3, [r7, #0]
 801c054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801c058:	2b00      	cmp	r3, #0
 801c05a:	d103      	bne.n	801c064 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 801c05c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c060:	607b      	str	r3, [r7, #4]
 801c062:	e001      	b.n	801c068 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 801c064:	2300      	movs	r3, #0
 801c066:	607b      	str	r3, [r7, #4]
  }

  return mode;
 801c068:	687b      	ldr	r3, [r7, #4]
}
 801c06a:	4618      	mov	r0, r3
 801c06c:	370c      	adds	r7, #12
 801c06e:	46bd      	mov	sp, r7
 801c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c074:	4770      	bx	lr
 801c076:	bf00      	nop
 801c078:	40007000 	.word	0x40007000

0801c07c <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801c07c:	b580      	push	{r7, lr}
 801c07e:	b088      	sub	sp, #32
 801c080:	af00      	add	r7, sp, #0
 801c082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801c084:	687b      	ldr	r3, [r7, #4]
 801c086:	2b00      	cmp	r3, #0
 801c088:	d102      	bne.n	801c090 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801c08a:	2301      	movs	r3, #1
 801c08c:	f000 bcc2 	b.w	801ca14 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c090:	4b99      	ldr	r3, [pc, #612]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c092:	689b      	ldr	r3, [r3, #8]
 801c094:	f003 030c 	and.w	r3, r3, #12
 801c098:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801c09a:	4b97      	ldr	r3, [pc, #604]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c09c:	68db      	ldr	r3, [r3, #12]
 801c09e:	f003 0303 	and.w	r3, r3, #3
 801c0a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801c0a4:	687b      	ldr	r3, [r7, #4]
 801c0a6:	681b      	ldr	r3, [r3, #0]
 801c0a8:	f003 0310 	and.w	r3, r3, #16
 801c0ac:	2b00      	cmp	r3, #0
 801c0ae:	f000 80e9 	beq.w	801c284 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 801c0b2:	69bb      	ldr	r3, [r7, #24]
 801c0b4:	2b00      	cmp	r3, #0
 801c0b6:	d006      	beq.n	801c0c6 <HAL_RCC_OscConfig+0x4a>
 801c0b8:	69bb      	ldr	r3, [r7, #24]
 801c0ba:	2b0c      	cmp	r3, #12
 801c0bc:	f040 8083 	bne.w	801c1c6 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 801c0c0:	697b      	ldr	r3, [r7, #20]
 801c0c2:	2b01      	cmp	r3, #1
 801c0c4:	d17f      	bne.n	801c1c6 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801c0c6:	4b8c      	ldr	r3, [pc, #560]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c0c8:	681b      	ldr	r3, [r3, #0]
 801c0ca:	f003 0302 	and.w	r3, r3, #2
 801c0ce:	2b00      	cmp	r3, #0
 801c0d0:	d006      	beq.n	801c0e0 <HAL_RCC_OscConfig+0x64>
 801c0d2:	687b      	ldr	r3, [r7, #4]
 801c0d4:	69db      	ldr	r3, [r3, #28]
 801c0d6:	2b00      	cmp	r3, #0
 801c0d8:	d102      	bne.n	801c0e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 801c0da:	2301      	movs	r3, #1
 801c0dc:	f000 bc9a 	b.w	801ca14 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 801c0e0:	687b      	ldr	r3, [r7, #4]
 801c0e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c0e4:	4b84      	ldr	r3, [pc, #528]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c0e6:	681b      	ldr	r3, [r3, #0]
 801c0e8:	f003 0308 	and.w	r3, r3, #8
 801c0ec:	2b00      	cmp	r3, #0
 801c0ee:	d004      	beq.n	801c0fa <HAL_RCC_OscConfig+0x7e>
 801c0f0:	4b81      	ldr	r3, [pc, #516]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c0f2:	681b      	ldr	r3, [r3, #0]
 801c0f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c0f8:	e005      	b.n	801c106 <HAL_RCC_OscConfig+0x8a>
 801c0fa:	4b7f      	ldr	r3, [pc, #508]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c0fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c100:	091b      	lsrs	r3, r3, #4
 801c102:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c106:	4293      	cmp	r3, r2
 801c108:	d224      	bcs.n	801c154 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c10e:	4618      	mov	r0, r3
 801c110:	f000 fece 	bl	801ceb0 <RCC_SetFlashLatencyFromMSIRange>
 801c114:	4603      	mov	r3, r0
 801c116:	2b00      	cmp	r3, #0
 801c118:	d002      	beq.n	801c120 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 801c11a:	2301      	movs	r3, #1
 801c11c:	f000 bc7a 	b.w	801ca14 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801c120:	4b75      	ldr	r3, [pc, #468]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c122:	681b      	ldr	r3, [r3, #0]
 801c124:	4a74      	ldr	r2, [pc, #464]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c126:	f043 0308 	orr.w	r3, r3, #8
 801c12a:	6013      	str	r3, [r2, #0]
 801c12c:	4b72      	ldr	r3, [pc, #456]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c12e:	681b      	ldr	r3, [r3, #0]
 801c130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801c134:	687b      	ldr	r3, [r7, #4]
 801c136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c138:	496f      	ldr	r1, [pc, #444]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c13a:	4313      	orrs	r3, r2
 801c13c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801c13e:	4b6e      	ldr	r3, [pc, #440]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c140:	685b      	ldr	r3, [r3, #4]
 801c142:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 801c146:	687b      	ldr	r3, [r7, #4]
 801c148:	6a1b      	ldr	r3, [r3, #32]
 801c14a:	021b      	lsls	r3, r3, #8
 801c14c:	496a      	ldr	r1, [pc, #424]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c14e:	4313      	orrs	r3, r2
 801c150:	604b      	str	r3, [r1, #4]
 801c152:	e026      	b.n	801c1a2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801c154:	4b68      	ldr	r3, [pc, #416]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c156:	681b      	ldr	r3, [r3, #0]
 801c158:	4a67      	ldr	r2, [pc, #412]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c15a:	f043 0308 	orr.w	r3, r3, #8
 801c15e:	6013      	str	r3, [r2, #0]
 801c160:	4b65      	ldr	r3, [pc, #404]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c162:	681b      	ldr	r3, [r3, #0]
 801c164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801c168:	687b      	ldr	r3, [r7, #4]
 801c16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c16c:	4962      	ldr	r1, [pc, #392]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c16e:	4313      	orrs	r3, r2
 801c170:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801c172:	4b61      	ldr	r3, [pc, #388]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c174:	685b      	ldr	r3, [r3, #4]
 801c176:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	6a1b      	ldr	r3, [r3, #32]
 801c17e:	021b      	lsls	r3, r3, #8
 801c180:	495d      	ldr	r1, [pc, #372]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c182:	4313      	orrs	r3, r2
 801c184:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 801c186:	69bb      	ldr	r3, [r7, #24]
 801c188:	2b00      	cmp	r3, #0
 801c18a:	d10a      	bne.n	801c1a2 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801c18c:	687b      	ldr	r3, [r7, #4]
 801c18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c190:	4618      	mov	r0, r3
 801c192:	f000 fe8d 	bl	801ceb0 <RCC_SetFlashLatencyFromMSIRange>
 801c196:	4603      	mov	r3, r0
 801c198:	2b00      	cmp	r3, #0
 801c19a:	d002      	beq.n	801c1a2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 801c19c:	2301      	movs	r3, #1
 801c19e:	f000 bc39 	b.w	801ca14 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 801c1a2:	f000 fe17 	bl	801cdd4 <HAL_RCC_GetHCLKFreq>
 801c1a6:	4603      	mov	r3, r0
 801c1a8:	4a54      	ldr	r2, [pc, #336]	; (801c2fc <HAL_RCC_OscConfig+0x280>)
 801c1aa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 801c1ac:	4b54      	ldr	r3, [pc, #336]	; (801c300 <HAL_RCC_OscConfig+0x284>)
 801c1ae:	681b      	ldr	r3, [r3, #0]
 801c1b0:	4618      	mov	r0, r3
 801c1b2:	f7fc fb15 	bl	80187e0 <HAL_InitTick>
 801c1b6:	4603      	mov	r3, r0
 801c1b8:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 801c1ba:	7bfb      	ldrb	r3, [r7, #15]
 801c1bc:	2b00      	cmp	r3, #0
 801c1be:	d060      	beq.n	801c282 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 801c1c0:	7bfb      	ldrb	r3, [r7, #15]
 801c1c2:	f000 bc27 	b.w	801ca14 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801c1c6:	687b      	ldr	r3, [r7, #4]
 801c1c8:	69db      	ldr	r3, [r3, #28]
 801c1ca:	2b00      	cmp	r3, #0
 801c1cc:	d039      	beq.n	801c242 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801c1ce:	4b4a      	ldr	r3, [pc, #296]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c1d0:	681b      	ldr	r3, [r3, #0]
 801c1d2:	4a49      	ldr	r2, [pc, #292]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c1d4:	f043 0301 	orr.w	r3, r3, #1
 801c1d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 801c1da:	f7fc fd3b 	bl	8018c54 <HAL_GetTick>
 801c1de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801c1e0:	e00f      	b.n	801c202 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801c1e2:	f7fc fd37 	bl	8018c54 <HAL_GetTick>
 801c1e6:	4602      	mov	r2, r0
 801c1e8:	693b      	ldr	r3, [r7, #16]
 801c1ea:	1ad3      	subs	r3, r2, r3
 801c1ec:	2b02      	cmp	r3, #2
 801c1ee:	d908      	bls.n	801c202 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801c1f0:	4b41      	ldr	r3, [pc, #260]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c1f2:	681b      	ldr	r3, [r3, #0]
 801c1f4:	f003 0302 	and.w	r3, r3, #2
 801c1f8:	2b00      	cmp	r3, #0
 801c1fa:	d102      	bne.n	801c202 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 801c1fc:	2303      	movs	r3, #3
 801c1fe:	f000 bc09 	b.w	801ca14 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801c202:	4b3d      	ldr	r3, [pc, #244]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c204:	681b      	ldr	r3, [r3, #0]
 801c206:	f003 0302 	and.w	r3, r3, #2
 801c20a:	2b00      	cmp	r3, #0
 801c20c:	d0e9      	beq.n	801c1e2 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801c20e:	4b3a      	ldr	r3, [pc, #232]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c210:	681b      	ldr	r3, [r3, #0]
 801c212:	4a39      	ldr	r2, [pc, #228]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c214:	f043 0308 	orr.w	r3, r3, #8
 801c218:	6013      	str	r3, [r2, #0]
 801c21a:	4b37      	ldr	r3, [pc, #220]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c21c:	681b      	ldr	r3, [r3, #0]
 801c21e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801c222:	687b      	ldr	r3, [r7, #4]
 801c224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c226:	4934      	ldr	r1, [pc, #208]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c228:	4313      	orrs	r3, r2
 801c22a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801c22c:	4b32      	ldr	r3, [pc, #200]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c22e:	685b      	ldr	r3, [r3, #4]
 801c230:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 801c234:	687b      	ldr	r3, [r7, #4]
 801c236:	6a1b      	ldr	r3, [r3, #32]
 801c238:	021b      	lsls	r3, r3, #8
 801c23a:	492f      	ldr	r1, [pc, #188]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c23c:	4313      	orrs	r3, r2
 801c23e:	604b      	str	r3, [r1, #4]
 801c240:	e020      	b.n	801c284 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801c242:	4b2d      	ldr	r3, [pc, #180]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c244:	681b      	ldr	r3, [r3, #0]
 801c246:	4a2c      	ldr	r2, [pc, #176]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c248:	f023 0301 	bic.w	r3, r3, #1
 801c24c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 801c24e:	f7fc fd01 	bl	8018c54 <HAL_GetTick>
 801c252:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 801c254:	e00e      	b.n	801c274 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801c256:	f7fc fcfd 	bl	8018c54 <HAL_GetTick>
 801c25a:	4602      	mov	r2, r0
 801c25c:	693b      	ldr	r3, [r7, #16]
 801c25e:	1ad3      	subs	r3, r2, r3
 801c260:	2b02      	cmp	r3, #2
 801c262:	d907      	bls.n	801c274 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 801c264:	4b24      	ldr	r3, [pc, #144]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c266:	681b      	ldr	r3, [r3, #0]
 801c268:	f003 0302 	and.w	r3, r3, #2
 801c26c:	2b00      	cmp	r3, #0
 801c26e:	d001      	beq.n	801c274 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 801c270:	2303      	movs	r3, #3
 801c272:	e3cf      	b.n	801ca14 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 801c274:	4b20      	ldr	r3, [pc, #128]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c276:	681b      	ldr	r3, [r3, #0]
 801c278:	f003 0302 	and.w	r3, r3, #2
 801c27c:	2b00      	cmp	r3, #0
 801c27e:	d1ea      	bne.n	801c256 <HAL_RCC_OscConfig+0x1da>
 801c280:	e000      	b.n	801c284 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801c282:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801c284:	687b      	ldr	r3, [r7, #4]
 801c286:	681b      	ldr	r3, [r3, #0]
 801c288:	f003 0301 	and.w	r3, r3, #1
 801c28c:	2b00      	cmp	r3, #0
 801c28e:	d07e      	beq.n	801c38e <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 801c290:	69bb      	ldr	r3, [r7, #24]
 801c292:	2b08      	cmp	r3, #8
 801c294:	d005      	beq.n	801c2a2 <HAL_RCC_OscConfig+0x226>
 801c296:	69bb      	ldr	r3, [r7, #24]
 801c298:	2b0c      	cmp	r3, #12
 801c29a:	d10e      	bne.n	801c2ba <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 801c29c:	697b      	ldr	r3, [r7, #20]
 801c29e:	2b03      	cmp	r3, #3
 801c2a0:	d10b      	bne.n	801c2ba <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c2a2:	4b15      	ldr	r3, [pc, #84]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c2a4:	681b      	ldr	r3, [r3, #0]
 801c2a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c2aa:	2b00      	cmp	r3, #0
 801c2ac:	d06e      	beq.n	801c38c <HAL_RCC_OscConfig+0x310>
 801c2ae:	687b      	ldr	r3, [r7, #4]
 801c2b0:	685b      	ldr	r3, [r3, #4]
 801c2b2:	2b00      	cmp	r3, #0
 801c2b4:	d16a      	bne.n	801c38c <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 801c2b6:	2301      	movs	r3, #1
 801c2b8:	e3ac      	b.n	801ca14 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801c2ba:	687b      	ldr	r3, [r7, #4]
 801c2bc:	685b      	ldr	r3, [r3, #4]
 801c2be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c2c2:	d106      	bne.n	801c2d2 <HAL_RCC_OscConfig+0x256>
 801c2c4:	4b0c      	ldr	r3, [pc, #48]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c2c6:	681b      	ldr	r3, [r3, #0]
 801c2c8:	4a0b      	ldr	r2, [pc, #44]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c2ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c2ce:	6013      	str	r3, [r2, #0]
 801c2d0:	e024      	b.n	801c31c <HAL_RCC_OscConfig+0x2a0>
 801c2d2:	687b      	ldr	r3, [r7, #4]
 801c2d4:	685b      	ldr	r3, [r3, #4]
 801c2d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801c2da:	d113      	bne.n	801c304 <HAL_RCC_OscConfig+0x288>
 801c2dc:	4b06      	ldr	r3, [pc, #24]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c2de:	681b      	ldr	r3, [r3, #0]
 801c2e0:	4a05      	ldr	r2, [pc, #20]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c2e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801c2e6:	6013      	str	r3, [r2, #0]
 801c2e8:	4b03      	ldr	r3, [pc, #12]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c2ea:	681b      	ldr	r3, [r3, #0]
 801c2ec:	4a02      	ldr	r2, [pc, #8]	; (801c2f8 <HAL_RCC_OscConfig+0x27c>)
 801c2ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c2f2:	6013      	str	r3, [r2, #0]
 801c2f4:	e012      	b.n	801c31c <HAL_RCC_OscConfig+0x2a0>
 801c2f6:	bf00      	nop
 801c2f8:	40021000 	.word	0x40021000
 801c2fc:	20000090 	.word	0x20000090
 801c300:	20000094 	.word	0x20000094
 801c304:	4b8b      	ldr	r3, [pc, #556]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c306:	681b      	ldr	r3, [r3, #0]
 801c308:	4a8a      	ldr	r2, [pc, #552]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c30a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c30e:	6013      	str	r3, [r2, #0]
 801c310:	4b88      	ldr	r3, [pc, #544]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c312:	681b      	ldr	r3, [r3, #0]
 801c314:	4a87      	ldr	r2, [pc, #540]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801c31a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801c31c:	687b      	ldr	r3, [r7, #4]
 801c31e:	685b      	ldr	r3, [r3, #4]
 801c320:	2b00      	cmp	r3, #0
 801c322:	d019      	beq.n	801c358 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c324:	f7fc fc96 	bl	8018c54 <HAL_GetTick>
 801c328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801c32a:	e00e      	b.n	801c34a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c32c:	f7fc fc92 	bl	8018c54 <HAL_GetTick>
 801c330:	4602      	mov	r2, r0
 801c332:	693b      	ldr	r3, [r7, #16]
 801c334:	1ad3      	subs	r3, r2, r3
 801c336:	2b64      	cmp	r3, #100	; 0x64
 801c338:	d907      	bls.n	801c34a <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801c33a:	4b7e      	ldr	r3, [pc, #504]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c33c:	681b      	ldr	r3, [r3, #0]
 801c33e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c342:	2b00      	cmp	r3, #0
 801c344:	d101      	bne.n	801c34a <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 801c346:	2303      	movs	r3, #3
 801c348:	e364      	b.n	801ca14 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801c34a:	4b7a      	ldr	r3, [pc, #488]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c34c:	681b      	ldr	r3, [r3, #0]
 801c34e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c352:	2b00      	cmp	r3, #0
 801c354:	d0ea      	beq.n	801c32c <HAL_RCC_OscConfig+0x2b0>
 801c356:	e01a      	b.n	801c38e <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c358:	f7fc fc7c 	bl	8018c54 <HAL_GetTick>
 801c35c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801c35e:	e00e      	b.n	801c37e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c360:	f7fc fc78 	bl	8018c54 <HAL_GetTick>
 801c364:	4602      	mov	r2, r0
 801c366:	693b      	ldr	r3, [r7, #16]
 801c368:	1ad3      	subs	r3, r2, r3
 801c36a:	2b64      	cmp	r3, #100	; 0x64
 801c36c:	d907      	bls.n	801c37e <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801c36e:	4b71      	ldr	r3, [pc, #452]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c370:	681b      	ldr	r3, [r3, #0]
 801c372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c376:	2b00      	cmp	r3, #0
 801c378:	d001      	beq.n	801c37e <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 801c37a:	2303      	movs	r3, #3
 801c37c:	e34a      	b.n	801ca14 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801c37e:	4b6d      	ldr	r3, [pc, #436]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c380:	681b      	ldr	r3, [r3, #0]
 801c382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c386:	2b00      	cmp	r3, #0
 801c388:	d1ea      	bne.n	801c360 <HAL_RCC_OscConfig+0x2e4>
 801c38a:	e000      	b.n	801c38e <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c38c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801c38e:	687b      	ldr	r3, [r7, #4]
 801c390:	681b      	ldr	r3, [r3, #0]
 801c392:	f003 0302 	and.w	r3, r3, #2
 801c396:	2b00      	cmp	r3, #0
 801c398:	d06c      	beq.n	801c474 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 801c39a:	69bb      	ldr	r3, [r7, #24]
 801c39c:	2b04      	cmp	r3, #4
 801c39e:	d005      	beq.n	801c3ac <HAL_RCC_OscConfig+0x330>
 801c3a0:	69bb      	ldr	r3, [r7, #24]
 801c3a2:	2b0c      	cmp	r3, #12
 801c3a4:	d119      	bne.n	801c3da <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 801c3a6:	697b      	ldr	r3, [r7, #20]
 801c3a8:	2b02      	cmp	r3, #2
 801c3aa:	d116      	bne.n	801c3da <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c3ac:	4b61      	ldr	r3, [pc, #388]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c3ae:	681b      	ldr	r3, [r3, #0]
 801c3b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c3b4:	2b00      	cmp	r3, #0
 801c3b6:	d005      	beq.n	801c3c4 <HAL_RCC_OscConfig+0x348>
 801c3b8:	687b      	ldr	r3, [r7, #4]
 801c3ba:	68db      	ldr	r3, [r3, #12]
 801c3bc:	2b00      	cmp	r3, #0
 801c3be:	d101      	bne.n	801c3c4 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 801c3c0:	2301      	movs	r3, #1
 801c3c2:	e327      	b.n	801ca14 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c3c4:	4b5b      	ldr	r3, [pc, #364]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c3c6:	685b      	ldr	r3, [r3, #4]
 801c3c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801c3cc:	687b      	ldr	r3, [r7, #4]
 801c3ce:	691b      	ldr	r3, [r3, #16]
 801c3d0:	061b      	lsls	r3, r3, #24
 801c3d2:	4958      	ldr	r1, [pc, #352]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c3d4:	4313      	orrs	r3, r2
 801c3d6:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c3d8:	e04c      	b.n	801c474 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801c3da:	687b      	ldr	r3, [r7, #4]
 801c3dc:	68db      	ldr	r3, [r3, #12]
 801c3de:	2b00      	cmp	r3, #0
 801c3e0:	d029      	beq.n	801c436 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801c3e2:	4b54      	ldr	r3, [pc, #336]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c3e4:	681b      	ldr	r3, [r3, #0]
 801c3e6:	4a53      	ldr	r2, [pc, #332]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c3e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c3ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c3ee:	f7fc fc31 	bl	8018c54 <HAL_GetTick>
 801c3f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801c3f4:	e00e      	b.n	801c414 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c3f6:	f7fc fc2d 	bl	8018c54 <HAL_GetTick>
 801c3fa:	4602      	mov	r2, r0
 801c3fc:	693b      	ldr	r3, [r7, #16]
 801c3fe:	1ad3      	subs	r3, r2, r3
 801c400:	2b02      	cmp	r3, #2
 801c402:	d907      	bls.n	801c414 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801c404:	4b4b      	ldr	r3, [pc, #300]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c406:	681b      	ldr	r3, [r3, #0]
 801c408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c40c:	2b00      	cmp	r3, #0
 801c40e:	d101      	bne.n	801c414 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 801c410:	2303      	movs	r3, #3
 801c412:	e2ff      	b.n	801ca14 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801c414:	4b47      	ldr	r3, [pc, #284]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c416:	681b      	ldr	r3, [r3, #0]
 801c418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c41c:	2b00      	cmp	r3, #0
 801c41e:	d0ea      	beq.n	801c3f6 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c420:	4b44      	ldr	r3, [pc, #272]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c422:	685b      	ldr	r3, [r3, #4]
 801c424:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801c428:	687b      	ldr	r3, [r7, #4]
 801c42a:	691b      	ldr	r3, [r3, #16]
 801c42c:	061b      	lsls	r3, r3, #24
 801c42e:	4941      	ldr	r1, [pc, #260]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c430:	4313      	orrs	r3, r2
 801c432:	604b      	str	r3, [r1, #4]
 801c434:	e01e      	b.n	801c474 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801c436:	4b3f      	ldr	r3, [pc, #252]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c438:	681b      	ldr	r3, [r3, #0]
 801c43a:	4a3e      	ldr	r2, [pc, #248]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c43c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c442:	f7fc fc07 	bl	8018c54 <HAL_GetTick>
 801c446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801c448:	e00e      	b.n	801c468 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c44a:	f7fc fc03 	bl	8018c54 <HAL_GetTick>
 801c44e:	4602      	mov	r2, r0
 801c450:	693b      	ldr	r3, [r7, #16]
 801c452:	1ad3      	subs	r3, r2, r3
 801c454:	2b02      	cmp	r3, #2
 801c456:	d907      	bls.n	801c468 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801c458:	4b36      	ldr	r3, [pc, #216]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c45a:	681b      	ldr	r3, [r3, #0]
 801c45c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c460:	2b00      	cmp	r3, #0
 801c462:	d001      	beq.n	801c468 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 801c464:	2303      	movs	r3, #3
 801c466:	e2d5      	b.n	801ca14 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801c468:	4b32      	ldr	r3, [pc, #200]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c46a:	681b      	ldr	r3, [r3, #0]
 801c46c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c470:	2b00      	cmp	r3, #0
 801c472:	d1ea      	bne.n	801c44a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801c474:	687b      	ldr	r3, [r7, #4]
 801c476:	681b      	ldr	r3, [r3, #0]
 801c478:	f003 0308 	and.w	r3, r3, #8
 801c47c:	2b00      	cmp	r3, #0
 801c47e:	d062      	beq.n	801c546 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801c480:	687b      	ldr	r3, [r7, #4]
 801c482:	695b      	ldr	r3, [r3, #20]
 801c484:	2b00      	cmp	r3, #0
 801c486:	d038      	beq.n	801c4fa <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 801c488:	687b      	ldr	r3, [r7, #4]
 801c48a:	699b      	ldr	r3, [r3, #24]
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	d108      	bne.n	801c4a2 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 801c490:	4b28      	ldr	r3, [pc, #160]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c492:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c496:	4a27      	ldr	r2, [pc, #156]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c498:	f023 0310 	bic.w	r3, r3, #16
 801c49c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 801c4a0:	e007      	b.n	801c4b2 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 801c4a2:	4b24      	ldr	r3, [pc, #144]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c4a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c4a8:	4a22      	ldr	r2, [pc, #136]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c4aa:	f043 0310 	orr.w	r3, r3, #16
 801c4ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801c4b2:	4b20      	ldr	r3, [pc, #128]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c4b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c4b8:	4a1e      	ldr	r2, [pc, #120]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c4ba:	f043 0301 	orr.w	r3, r3, #1
 801c4be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c4c2:	f7fc fbc7 	bl	8018c54 <HAL_GetTick>
 801c4c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801c4c8:	e00f      	b.n	801c4ea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c4ca:	f7fc fbc3 	bl	8018c54 <HAL_GetTick>
 801c4ce:	4602      	mov	r2, r0
 801c4d0:	693b      	ldr	r3, [r7, #16]
 801c4d2:	1ad3      	subs	r3, r2, r3
 801c4d4:	2b07      	cmp	r3, #7
 801c4d6:	d908      	bls.n	801c4ea <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801c4d8:	4b16      	ldr	r3, [pc, #88]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c4da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c4de:	f003 0302 	and.w	r3, r3, #2
 801c4e2:	2b00      	cmp	r3, #0
 801c4e4:	d101      	bne.n	801c4ea <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 801c4e6:	2303      	movs	r3, #3
 801c4e8:	e294      	b.n	801ca14 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801c4ea:	4b12      	ldr	r3, [pc, #72]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c4ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c4f0:	f003 0302 	and.w	r3, r3, #2
 801c4f4:	2b00      	cmp	r3, #0
 801c4f6:	d0e8      	beq.n	801c4ca <HAL_RCC_OscConfig+0x44e>
 801c4f8:	e025      	b.n	801c546 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801c4fa:	4b0e      	ldr	r3, [pc, #56]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c4fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c500:	4a0c      	ldr	r2, [pc, #48]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c502:	f023 0301 	bic.w	r3, r3, #1
 801c506:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c50a:	f7fc fba3 	bl	8018c54 <HAL_GetTick>
 801c50e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801c510:	e012      	b.n	801c538 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c512:	f7fc fb9f 	bl	8018c54 <HAL_GetTick>
 801c516:	4602      	mov	r2, r0
 801c518:	693b      	ldr	r3, [r7, #16]
 801c51a:	1ad3      	subs	r3, r2, r3
 801c51c:	2b07      	cmp	r3, #7
 801c51e:	d90b      	bls.n	801c538 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801c520:	4b04      	ldr	r3, [pc, #16]	; (801c534 <HAL_RCC_OscConfig+0x4b8>)
 801c522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c526:	f003 0302 	and.w	r3, r3, #2
 801c52a:	2b00      	cmp	r3, #0
 801c52c:	d004      	beq.n	801c538 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 801c52e:	2303      	movs	r3, #3
 801c530:	e270      	b.n	801ca14 <HAL_RCC_OscConfig+0x998>
 801c532:	bf00      	nop
 801c534:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801c538:	4ba8      	ldr	r3, [pc, #672]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c53a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c53e:	f003 0302 	and.w	r3, r3, #2
 801c542:	2b00      	cmp	r3, #0
 801c544:	d1e5      	bne.n	801c512 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801c546:	687b      	ldr	r3, [r7, #4]
 801c548:	681b      	ldr	r3, [r3, #0]
 801c54a:	f003 0304 	and.w	r3, r3, #4
 801c54e:	2b00      	cmp	r3, #0
 801c550:	f000 812d 	beq.w	801c7ae <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 801c554:	2300      	movs	r3, #0
 801c556:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 801c558:	4ba0      	ldr	r3, [pc, #640]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c55a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c55c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c560:	2b00      	cmp	r3, #0
 801c562:	d10d      	bne.n	801c580 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801c564:	4b9d      	ldr	r3, [pc, #628]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c568:	4a9c      	ldr	r2, [pc, #624]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c56a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c56e:	6593      	str	r3, [r2, #88]	; 0x58
 801c570:	4b9a      	ldr	r3, [pc, #616]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c578:	60bb      	str	r3, [r7, #8]
 801c57a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801c57c:	2301      	movs	r3, #1
 801c57e:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c580:	4b97      	ldr	r3, [pc, #604]	; (801c7e0 <HAL_RCC_OscConfig+0x764>)
 801c582:	681b      	ldr	r3, [r3, #0]
 801c584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c588:	2b00      	cmp	r3, #0
 801c58a:	d11e      	bne.n	801c5ca <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801c58c:	4b94      	ldr	r3, [pc, #592]	; (801c7e0 <HAL_RCC_OscConfig+0x764>)
 801c58e:	681b      	ldr	r3, [r3, #0]
 801c590:	4a93      	ldr	r2, [pc, #588]	; (801c7e0 <HAL_RCC_OscConfig+0x764>)
 801c592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c596:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801c598:	f7fc fb5c 	bl	8018c54 <HAL_GetTick>
 801c59c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c59e:	e00e      	b.n	801c5be <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c5a0:	f7fc fb58 	bl	8018c54 <HAL_GetTick>
 801c5a4:	4602      	mov	r2, r0
 801c5a6:	693b      	ldr	r3, [r7, #16]
 801c5a8:	1ad3      	subs	r3, r2, r3
 801c5aa:	2b02      	cmp	r3, #2
 801c5ac:	d907      	bls.n	801c5be <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c5ae:	4b8c      	ldr	r3, [pc, #560]	; (801c7e0 <HAL_RCC_OscConfig+0x764>)
 801c5b0:	681b      	ldr	r3, [r3, #0]
 801c5b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	d101      	bne.n	801c5be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 801c5ba:	2303      	movs	r3, #3
 801c5bc:	e22a      	b.n	801ca14 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c5be:	4b88      	ldr	r3, [pc, #544]	; (801c7e0 <HAL_RCC_OscConfig+0x764>)
 801c5c0:	681b      	ldr	r3, [r3, #0]
 801c5c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c5c6:	2b00      	cmp	r3, #0
 801c5c8:	d0ea      	beq.n	801c5a0 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 801c5ca:	687b      	ldr	r3, [r7, #4]
 801c5cc:	689b      	ldr	r3, [r3, #8]
 801c5ce:	f003 0301 	and.w	r3, r3, #1
 801c5d2:	2b00      	cmp	r3, #0
 801c5d4:	d01f      	beq.n	801c616 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 801c5d6:	687b      	ldr	r3, [r7, #4]
 801c5d8:	689b      	ldr	r3, [r3, #8]
 801c5da:	f003 0304 	and.w	r3, r3, #4
 801c5de:	2b00      	cmp	r3, #0
 801c5e0:	d010      	beq.n	801c604 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 801c5e2:	4b7e      	ldr	r3, [pc, #504]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c5e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c5e8:	4a7c      	ldr	r2, [pc, #496]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c5ea:	f043 0304 	orr.w	r3, r3, #4
 801c5ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801c5f2:	4b7a      	ldr	r3, [pc, #488]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c5f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c5f8:	4a78      	ldr	r2, [pc, #480]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c5fa:	f043 0301 	orr.w	r3, r3, #1
 801c5fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c602:	e018      	b.n	801c636 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801c604:	4b75      	ldr	r3, [pc, #468]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c60a:	4a74      	ldr	r2, [pc, #464]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c60c:	f043 0301 	orr.w	r3, r3, #1
 801c610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c614:	e00f      	b.n	801c636 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801c616:	4b71      	ldr	r3, [pc, #452]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c61c:	4a6f      	ldr	r2, [pc, #444]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c61e:	f023 0301 	bic.w	r3, r3, #1
 801c622:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 801c626:	4b6d      	ldr	r3, [pc, #436]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c62c:	4a6b      	ldr	r2, [pc, #428]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c62e:	f023 0304 	bic.w	r3, r3, #4
 801c632:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801c636:	687b      	ldr	r3, [r7, #4]
 801c638:	689b      	ldr	r3, [r3, #8]
 801c63a:	2b00      	cmp	r3, #0
 801c63c:	d068      	beq.n	801c710 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c63e:	f7fc fb09 	bl	8018c54 <HAL_GetTick>
 801c642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801c644:	e011      	b.n	801c66a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c646:	f7fc fb05 	bl	8018c54 <HAL_GetTick>
 801c64a:	4602      	mov	r2, r0
 801c64c:	693b      	ldr	r3, [r7, #16]
 801c64e:	1ad3      	subs	r3, r2, r3
 801c650:	f241 3288 	movw	r2, #5000	; 0x1388
 801c654:	4293      	cmp	r3, r2
 801c656:	d908      	bls.n	801c66a <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801c658:	4b60      	ldr	r3, [pc, #384]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c65a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c65e:	f003 0302 	and.w	r3, r3, #2
 801c662:	2b00      	cmp	r3, #0
 801c664:	d101      	bne.n	801c66a <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 801c666:	2303      	movs	r3, #3
 801c668:	e1d4      	b.n	801ca14 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801c66a:	4b5c      	ldr	r3, [pc, #368]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c66c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c670:	f003 0302 	and.w	r3, r3, #2
 801c674:	2b00      	cmp	r3, #0
 801c676:	d0e6      	beq.n	801c646 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 801c678:	687b      	ldr	r3, [r7, #4]
 801c67a:	689b      	ldr	r3, [r3, #8]
 801c67c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c680:	2b00      	cmp	r3, #0
 801c682:	d022      	beq.n	801c6ca <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 801c684:	4b55      	ldr	r3, [pc, #340]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c68a:	4a54      	ldr	r2, [pc, #336]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c68c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 801c694:	e011      	b.n	801c6ba <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c696:	f7fc fadd 	bl	8018c54 <HAL_GetTick>
 801c69a:	4602      	mov	r2, r0
 801c69c:	693b      	ldr	r3, [r7, #16]
 801c69e:	1ad3      	subs	r3, r2, r3
 801c6a0:	f241 3288 	movw	r2, #5000	; 0x1388
 801c6a4:	4293      	cmp	r3, r2
 801c6a6:	d908      	bls.n	801c6ba <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 801c6a8:	4b4c      	ldr	r3, [pc, #304]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c6aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c6ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c6b2:	2b00      	cmp	r3, #0
 801c6b4:	d101      	bne.n	801c6ba <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 801c6b6:	2303      	movs	r3, #3
 801c6b8:	e1ac      	b.n	801ca14 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 801c6ba:	4b48      	ldr	r3, [pc, #288]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c6bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c6c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c6c4:	2b00      	cmp	r3, #0
 801c6c6:	d0e6      	beq.n	801c696 <HAL_RCC_OscConfig+0x61a>
 801c6c8:	e068      	b.n	801c79c <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 801c6ca:	4b44      	ldr	r3, [pc, #272]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c6cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c6d0:	4a42      	ldr	r2, [pc, #264]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c6d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801c6d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 801c6da:	e011      	b.n	801c700 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c6dc:	f7fc faba 	bl	8018c54 <HAL_GetTick>
 801c6e0:	4602      	mov	r2, r0
 801c6e2:	693b      	ldr	r3, [r7, #16]
 801c6e4:	1ad3      	subs	r3, r2, r3
 801c6e6:	f241 3288 	movw	r2, #5000	; 0x1388
 801c6ea:	4293      	cmp	r3, r2
 801c6ec:	d908      	bls.n	801c700 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 801c6ee:	4b3b      	ldr	r3, [pc, #236]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c6f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c6f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c6f8:	2b00      	cmp	r3, #0
 801c6fa:	d001      	beq.n	801c700 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 801c6fc:	2303      	movs	r3, #3
 801c6fe:	e189      	b.n	801ca14 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 801c700:	4b36      	ldr	r3, [pc, #216]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c70a:	2b00      	cmp	r3, #0
 801c70c:	d1e6      	bne.n	801c6dc <HAL_RCC_OscConfig+0x660>
 801c70e:	e045      	b.n	801c79c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c710:	f7fc faa0 	bl	8018c54 <HAL_GetTick>
 801c714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801c716:	e011      	b.n	801c73c <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c718:	f7fc fa9c 	bl	8018c54 <HAL_GetTick>
 801c71c:	4602      	mov	r2, r0
 801c71e:	693b      	ldr	r3, [r7, #16]
 801c720:	1ad3      	subs	r3, r2, r3
 801c722:	f241 3288 	movw	r2, #5000	; 0x1388
 801c726:	4293      	cmp	r3, r2
 801c728:	d908      	bls.n	801c73c <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801c72a:	4b2c      	ldr	r3, [pc, #176]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c72c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c730:	f003 0302 	and.w	r3, r3, #2
 801c734:	2b00      	cmp	r3, #0
 801c736:	d001      	beq.n	801c73c <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 801c738:	2303      	movs	r3, #3
 801c73a:	e16b      	b.n	801ca14 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801c73c:	4b27      	ldr	r3, [pc, #156]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c73e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c742:	f003 0302 	and.w	r3, r3, #2
 801c746:	2b00      	cmp	r3, #0
 801c748:	d1e6      	bne.n	801c718 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 801c74a:	4b24      	ldr	r3, [pc, #144]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c74c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c754:	2b00      	cmp	r3, #0
 801c756:	d021      	beq.n	801c79c <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 801c758:	4b20      	ldr	r3, [pc, #128]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c75a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c75e:	4a1f      	ldr	r2, [pc, #124]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c760:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801c764:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 801c768:	e011      	b.n	801c78e <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c76a:	f7fc fa73 	bl	8018c54 <HAL_GetTick>
 801c76e:	4602      	mov	r2, r0
 801c770:	693b      	ldr	r3, [r7, #16]
 801c772:	1ad3      	subs	r3, r2, r3
 801c774:	f241 3288 	movw	r2, #5000	; 0x1388
 801c778:	4293      	cmp	r3, r2
 801c77a:	d908      	bls.n	801c78e <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 801c77c:	4b17      	ldr	r3, [pc, #92]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c77e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c782:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c786:	2b00      	cmp	r3, #0
 801c788:	d001      	beq.n	801c78e <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 801c78a:	2303      	movs	r3, #3
 801c78c:	e142      	b.n	801ca14 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 801c78e:	4b13      	ldr	r3, [pc, #76]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c798:	2b00      	cmp	r3, #0
 801c79a:	d1e6      	bne.n	801c76a <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801c79c:	7ffb      	ldrb	r3, [r7, #31]
 801c79e:	2b01      	cmp	r3, #1
 801c7a0:	d105      	bne.n	801c7ae <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801c7a2:	4b0e      	ldr	r3, [pc, #56]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c7a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c7a6:	4a0d      	ldr	r2, [pc, #52]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c7a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801c7ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801c7ae:	687b      	ldr	r3, [r7, #4]
 801c7b0:	681b      	ldr	r3, [r3, #0]
 801c7b2:	f003 0320 	and.w	r3, r3, #32
 801c7b6:	2b00      	cmp	r3, #0
 801c7b8:	d04f      	beq.n	801c85a <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801c7ba:	687b      	ldr	r3, [r7, #4]
 801c7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c7be:	2b00      	cmp	r3, #0
 801c7c0:	d028      	beq.n	801c814 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801c7c2:	4b06      	ldr	r3, [pc, #24]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c7c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c7c8:	4a04      	ldr	r2, [pc, #16]	; (801c7dc <HAL_RCC_OscConfig+0x760>)
 801c7ca:	f043 0301 	orr.w	r3, r3, #1
 801c7ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c7d2:	f7fc fa3f 	bl	8018c54 <HAL_GetTick>
 801c7d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801c7d8:	e014      	b.n	801c804 <HAL_RCC_OscConfig+0x788>
 801c7da:	bf00      	nop
 801c7dc:	40021000 	.word	0x40021000
 801c7e0:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c7e4:	f7fc fa36 	bl	8018c54 <HAL_GetTick>
 801c7e8:	4602      	mov	r2, r0
 801c7ea:	693b      	ldr	r3, [r7, #16]
 801c7ec:	1ad3      	subs	r3, r2, r3
 801c7ee:	2b02      	cmp	r3, #2
 801c7f0:	d908      	bls.n	801c804 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801c7f2:	4b8a      	ldr	r3, [pc, #552]	; (801ca1c <HAL_RCC_OscConfig+0x9a0>)
 801c7f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c7f8:	f003 0302 	and.w	r3, r3, #2
 801c7fc:	2b00      	cmp	r3, #0
 801c7fe:	d101      	bne.n	801c804 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 801c800:	2303      	movs	r3, #3
 801c802:	e107      	b.n	801ca14 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801c804:	4b85      	ldr	r3, [pc, #532]	; (801ca1c <HAL_RCC_OscConfig+0x9a0>)
 801c806:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c80a:	f003 0302 	and.w	r3, r3, #2
 801c80e:	2b00      	cmp	r3, #0
 801c810:	d0e8      	beq.n	801c7e4 <HAL_RCC_OscConfig+0x768>
 801c812:	e022      	b.n	801c85a <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801c814:	4b81      	ldr	r3, [pc, #516]	; (801ca1c <HAL_RCC_OscConfig+0x9a0>)
 801c816:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c81a:	4a80      	ldr	r2, [pc, #512]	; (801ca1c <HAL_RCC_OscConfig+0x9a0>)
 801c81c:	f023 0301 	bic.w	r3, r3, #1
 801c820:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c824:	f7fc fa16 	bl	8018c54 <HAL_GetTick>
 801c828:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801c82a:	e00f      	b.n	801c84c <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c82c:	f7fc fa12 	bl	8018c54 <HAL_GetTick>
 801c830:	4602      	mov	r2, r0
 801c832:	693b      	ldr	r3, [r7, #16]
 801c834:	1ad3      	subs	r3, r2, r3
 801c836:	2b02      	cmp	r3, #2
 801c838:	d908      	bls.n	801c84c <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801c83a:	4b78      	ldr	r3, [pc, #480]	; (801ca1c <HAL_RCC_OscConfig+0x9a0>)
 801c83c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c840:	f003 0302 	and.w	r3, r3, #2
 801c844:	2b00      	cmp	r3, #0
 801c846:	d001      	beq.n	801c84c <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 801c848:	2303      	movs	r3, #3
 801c84a:	e0e3      	b.n	801ca14 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801c84c:	4b73      	ldr	r3, [pc, #460]	; (801ca1c <HAL_RCC_OscConfig+0x9a0>)
 801c84e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c852:	f003 0302 	and.w	r3, r3, #2
 801c856:	2b00      	cmp	r3, #0
 801c858:	d1e8      	bne.n	801c82c <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801c85a:	687b      	ldr	r3, [r7, #4]
 801c85c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c85e:	2b00      	cmp	r3, #0
 801c860:	f000 80d7 	beq.w	801ca12 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801c864:	4b6d      	ldr	r3, [pc, #436]	; (801ca1c <HAL_RCC_OscConfig+0x9a0>)
 801c866:	689b      	ldr	r3, [r3, #8]
 801c868:	f003 030c 	and.w	r3, r3, #12
 801c86c:	2b0c      	cmp	r3, #12
 801c86e:	f000 8091 	beq.w	801c994 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801c872:	687b      	ldr	r3, [r7, #4]
 801c874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c876:	2b02      	cmp	r3, #2
 801c878:	d166      	bne.n	801c948 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c87a:	4b68      	ldr	r3, [pc, #416]	; (801ca1c <HAL_RCC_OscConfig+0x9a0>)
 801c87c:	681b      	ldr	r3, [r3, #0]
 801c87e:	4a67      	ldr	r2, [pc, #412]	; (801ca1c <HAL_RCC_OscConfig+0x9a0>)
 801c880:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801c884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c886:	f7fc f9e5 	bl	8018c54 <HAL_GetTick>
 801c88a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c88c:	e00e      	b.n	801c8ac <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c88e:	f7fc f9e1 	bl	8018c54 <HAL_GetTick>
 801c892:	4602      	mov	r2, r0
 801c894:	693b      	ldr	r3, [r7, #16]
 801c896:	1ad3      	subs	r3, r2, r3
 801c898:	2b02      	cmp	r3, #2
 801c89a:	d907      	bls.n	801c8ac <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c89c:	4b5f      	ldr	r3, [pc, #380]	; (801ca1c <HAL_RCC_OscConfig+0x9a0>)
 801c89e:	681b      	ldr	r3, [r3, #0]
 801c8a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c8a4:	2b00      	cmp	r3, #0
 801c8a6:	d001      	beq.n	801c8ac <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 801c8a8:	2303      	movs	r3, #3
 801c8aa:	e0b3      	b.n	801ca14 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c8ac:	4b5b      	ldr	r3, [pc, #364]	; (801ca1c <HAL_RCC_OscConfig+0x9a0>)
 801c8ae:	681b      	ldr	r3, [r3, #0]
 801c8b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c8b4:	2b00      	cmp	r3, #0
 801c8b6:	d1ea      	bne.n	801c88e <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801c8b8:	4b58      	ldr	r3, [pc, #352]	; (801ca1c <HAL_RCC_OscConfig+0x9a0>)
 801c8ba:	68da      	ldr	r2, [r3, #12]
 801c8bc:	4b58      	ldr	r3, [pc, #352]	; (801ca20 <HAL_RCC_OscConfig+0x9a4>)
 801c8be:	4013      	ands	r3, r2
 801c8c0:	687a      	ldr	r2, [r7, #4]
 801c8c2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 801c8c4:	687a      	ldr	r2, [r7, #4]
 801c8c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801c8c8:	3a01      	subs	r2, #1
 801c8ca:	0112      	lsls	r2, r2, #4
 801c8cc:	4311      	orrs	r1, r2
 801c8ce:	687a      	ldr	r2, [r7, #4]
 801c8d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801c8d2:	0212      	lsls	r2, r2, #8
 801c8d4:	4311      	orrs	r1, r2
 801c8d6:	687a      	ldr	r2, [r7, #4]
 801c8d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801c8da:	0852      	lsrs	r2, r2, #1
 801c8dc:	3a01      	subs	r2, #1
 801c8de:	0552      	lsls	r2, r2, #21
 801c8e0:	4311      	orrs	r1, r2
 801c8e2:	687a      	ldr	r2, [r7, #4]
 801c8e4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801c8e6:	0852      	lsrs	r2, r2, #1
 801c8e8:	3a01      	subs	r2, #1
 801c8ea:	0652      	lsls	r2, r2, #25
 801c8ec:	4311      	orrs	r1, r2
 801c8ee:	687a      	ldr	r2, [r7, #4]
 801c8f0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801c8f2:	06d2      	lsls	r2, r2, #27
 801c8f4:	430a      	orrs	r2, r1
 801c8f6:	4949      	ldr	r1, [pc, #292]	; (801ca1c <HAL_RCC_OscConfig+0x9a0>)
 801c8f8:	4313      	orrs	r3, r2
 801c8fa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801c8fc:	4b47      	ldr	r3, [pc, #284]	; (801ca1c <HAL_RCC_OscConfig+0x9a0>)
 801c8fe:	681b      	ldr	r3, [r3, #0]
 801c900:	4a46      	ldr	r2, [pc, #280]	; (801ca1c <HAL_RCC_OscConfig+0x9a0>)
 801c902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c906:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801c908:	4b44      	ldr	r3, [pc, #272]	; (801ca1c <HAL_RCC_OscConfig+0x9a0>)
 801c90a:	68db      	ldr	r3, [r3, #12]
 801c90c:	4a43      	ldr	r2, [pc, #268]	; (801ca1c <HAL_RCC_OscConfig+0x9a0>)
 801c90e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c912:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c914:	f7fc f99e 	bl	8018c54 <HAL_GetTick>
 801c918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c91a:	e00e      	b.n	801c93a <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c91c:	f7fc f99a 	bl	8018c54 <HAL_GetTick>
 801c920:	4602      	mov	r2, r0
 801c922:	693b      	ldr	r3, [r7, #16]
 801c924:	1ad3      	subs	r3, r2, r3
 801c926:	2b02      	cmp	r3, #2
 801c928:	d907      	bls.n	801c93a <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c92a:	4b3c      	ldr	r3, [pc, #240]	; (801ca1c <HAL_RCC_OscConfig+0x9a0>)
 801c92c:	681b      	ldr	r3, [r3, #0]
 801c92e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c932:	2b00      	cmp	r3, #0
 801c934:	d101      	bne.n	801c93a <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 801c936:	2303      	movs	r3, #3
 801c938:	e06c      	b.n	801ca14 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c93a:	4b38      	ldr	r3, [pc, #224]	; (801ca1c <HAL_RCC_OscConfig+0x9a0>)
 801c93c:	681b      	ldr	r3, [r3, #0]
 801c93e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c942:	2b00      	cmp	r3, #0
 801c944:	d0ea      	beq.n	801c91c <HAL_RCC_OscConfig+0x8a0>
 801c946:	e064      	b.n	801ca12 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c948:	4b34      	ldr	r3, [pc, #208]	; (801ca1c <HAL_RCC_OscConfig+0x9a0>)
 801c94a:	681b      	ldr	r3, [r3, #0]
 801c94c:	4a33      	ldr	r2, [pc, #204]	; (801ca1c <HAL_RCC_OscConfig+0x9a0>)
 801c94e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801c952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c954:	f7fc f97e 	bl	8018c54 <HAL_GetTick>
 801c958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c95a:	e00e      	b.n	801c97a <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c95c:	f7fc f97a 	bl	8018c54 <HAL_GetTick>
 801c960:	4602      	mov	r2, r0
 801c962:	693b      	ldr	r3, [r7, #16]
 801c964:	1ad3      	subs	r3, r2, r3
 801c966:	2b02      	cmp	r3, #2
 801c968:	d907      	bls.n	801c97a <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c96a:	4b2c      	ldr	r3, [pc, #176]	; (801ca1c <HAL_RCC_OscConfig+0x9a0>)
 801c96c:	681b      	ldr	r3, [r3, #0]
 801c96e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c972:	2b00      	cmp	r3, #0
 801c974:	d001      	beq.n	801c97a <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 801c976:	2303      	movs	r3, #3
 801c978:	e04c      	b.n	801ca14 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c97a:	4b28      	ldr	r3, [pc, #160]	; (801ca1c <HAL_RCC_OscConfig+0x9a0>)
 801c97c:	681b      	ldr	r3, [r3, #0]
 801c97e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c982:	2b00      	cmp	r3, #0
 801c984:	d1ea      	bne.n	801c95c <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 801c986:	4b25      	ldr	r3, [pc, #148]	; (801ca1c <HAL_RCC_OscConfig+0x9a0>)
 801c988:	68da      	ldr	r2, [r3, #12]
 801c98a:	4924      	ldr	r1, [pc, #144]	; (801ca1c <HAL_RCC_OscConfig+0x9a0>)
 801c98c:	4b25      	ldr	r3, [pc, #148]	; (801ca24 <HAL_RCC_OscConfig+0x9a8>)
 801c98e:	4013      	ands	r3, r2
 801c990:	60cb      	str	r3, [r1, #12]
 801c992:	e03e      	b.n	801ca12 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 801c994:	687b      	ldr	r3, [r7, #4]
 801c996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c998:	2b01      	cmp	r3, #1
 801c99a:	d101      	bne.n	801c9a0 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 801c99c:	2301      	movs	r3, #1
 801c99e:	e039      	b.n	801ca14 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 801c9a0:	4b1e      	ldr	r3, [pc, #120]	; (801ca1c <HAL_RCC_OscConfig+0x9a0>)
 801c9a2:	68db      	ldr	r3, [r3, #12]
 801c9a4:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 801c9a6:	697b      	ldr	r3, [r7, #20]
 801c9a8:	f003 0203 	and.w	r2, r3, #3
 801c9ac:	687b      	ldr	r3, [r7, #4]
 801c9ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c9b0:	429a      	cmp	r2, r3
 801c9b2:	d12c      	bne.n	801ca0e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801c9b4:	697b      	ldr	r3, [r7, #20]
 801c9b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801c9ba:	687b      	ldr	r3, [r7, #4]
 801c9bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c9be:	3b01      	subs	r3, #1
 801c9c0:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 801c9c2:	429a      	cmp	r2, r3
 801c9c4:	d123      	bne.n	801ca0e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801c9c6:	697b      	ldr	r3, [r7, #20]
 801c9c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 801c9cc:	687b      	ldr	r3, [r7, #4]
 801c9ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c9d0:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801c9d2:	429a      	cmp	r2, r3
 801c9d4:	d11b      	bne.n	801ca0e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801c9d6:	697b      	ldr	r3, [r7, #20]
 801c9d8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 801c9dc:	687b      	ldr	r3, [r7, #4]
 801c9de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c9e0:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801c9e2:	429a      	cmp	r2, r3
 801c9e4:	d113      	bne.n	801ca0e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c9e6:	697b      	ldr	r3, [r7, #20]
 801c9e8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 801c9ec:	687b      	ldr	r3, [r7, #4]
 801c9ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c9f0:	085b      	lsrs	r3, r3, #1
 801c9f2:	3b01      	subs	r3, #1
 801c9f4:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801c9f6:	429a      	cmp	r2, r3
 801c9f8:	d109      	bne.n	801ca0e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801c9fa:	697b      	ldr	r3, [r7, #20]
 801c9fc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 801ca00:	687b      	ldr	r3, [r7, #4]
 801ca02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ca04:	085b      	lsrs	r3, r3, #1
 801ca06:	3b01      	subs	r3, #1
 801ca08:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801ca0a:	429a      	cmp	r2, r3
 801ca0c:	d001      	beq.n	801ca12 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 801ca0e:	2301      	movs	r3, #1
 801ca10:	e000      	b.n	801ca14 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 801ca12:	2300      	movs	r3, #0
}
 801ca14:	4618      	mov	r0, r3
 801ca16:	3720      	adds	r7, #32
 801ca18:	46bd      	mov	sp, r7
 801ca1a:	bd80      	pop	{r7, pc}
 801ca1c:	40021000 	.word	0x40021000
 801ca20:	019f800c 	.word	0x019f800c
 801ca24:	feeefffc 	.word	0xfeeefffc

0801ca28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801ca28:	b580      	push	{r7, lr}
 801ca2a:	b086      	sub	sp, #24
 801ca2c:	af00      	add	r7, sp, #0
 801ca2e:	6078      	str	r0, [r7, #4]
 801ca30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 801ca32:	2300      	movs	r3, #0
 801ca34:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801ca36:	687b      	ldr	r3, [r7, #4]
 801ca38:	2b00      	cmp	r3, #0
 801ca3a:	d101      	bne.n	801ca40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 801ca3c:	2301      	movs	r3, #1
 801ca3e:	e11c      	b.n	801cc7a <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801ca40:	4b90      	ldr	r3, [pc, #576]	; (801cc84 <HAL_RCC_ClockConfig+0x25c>)
 801ca42:	681b      	ldr	r3, [r3, #0]
 801ca44:	f003 030f 	and.w	r3, r3, #15
 801ca48:	683a      	ldr	r2, [r7, #0]
 801ca4a:	429a      	cmp	r2, r3
 801ca4c:	d910      	bls.n	801ca70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801ca4e:	4b8d      	ldr	r3, [pc, #564]	; (801cc84 <HAL_RCC_ClockConfig+0x25c>)
 801ca50:	681b      	ldr	r3, [r3, #0]
 801ca52:	f023 020f 	bic.w	r2, r3, #15
 801ca56:	498b      	ldr	r1, [pc, #556]	; (801cc84 <HAL_RCC_ClockConfig+0x25c>)
 801ca58:	683b      	ldr	r3, [r7, #0]
 801ca5a:	4313      	orrs	r3, r2
 801ca5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ca5e:	4b89      	ldr	r3, [pc, #548]	; (801cc84 <HAL_RCC_ClockConfig+0x25c>)
 801ca60:	681b      	ldr	r3, [r3, #0]
 801ca62:	f003 030f 	and.w	r3, r3, #15
 801ca66:	683a      	ldr	r2, [r7, #0]
 801ca68:	429a      	cmp	r2, r3
 801ca6a:	d001      	beq.n	801ca70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 801ca6c:	2301      	movs	r3, #1
 801ca6e:	e104      	b.n	801cc7a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801ca70:	687b      	ldr	r3, [r7, #4]
 801ca72:	681b      	ldr	r3, [r3, #0]
 801ca74:	f003 0302 	and.w	r3, r3, #2
 801ca78:	2b00      	cmp	r3, #0
 801ca7a:	d010      	beq.n	801ca9e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 801ca7c:	687b      	ldr	r3, [r7, #4]
 801ca7e:	689a      	ldr	r2, [r3, #8]
 801ca80:	4b81      	ldr	r3, [pc, #516]	; (801cc88 <HAL_RCC_ClockConfig+0x260>)
 801ca82:	689b      	ldr	r3, [r3, #8]
 801ca84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ca88:	429a      	cmp	r2, r3
 801ca8a:	d908      	bls.n	801ca9e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801ca8c:	4b7e      	ldr	r3, [pc, #504]	; (801cc88 <HAL_RCC_ClockConfig+0x260>)
 801ca8e:	689b      	ldr	r3, [r3, #8]
 801ca90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801ca94:	687b      	ldr	r3, [r7, #4]
 801ca96:	689b      	ldr	r3, [r3, #8]
 801ca98:	497b      	ldr	r1, [pc, #492]	; (801cc88 <HAL_RCC_ClockConfig+0x260>)
 801ca9a:	4313      	orrs	r3, r2
 801ca9c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801ca9e:	687b      	ldr	r3, [r7, #4]
 801caa0:	681b      	ldr	r3, [r3, #0]
 801caa2:	f003 0301 	and.w	r3, r3, #1
 801caa6:	2b00      	cmp	r3, #0
 801caa8:	f000 8085 	beq.w	801cbb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801caac:	687b      	ldr	r3, [r7, #4]
 801caae:	685b      	ldr	r3, [r3, #4]
 801cab0:	2b03      	cmp	r3, #3
 801cab2:	d11f      	bne.n	801caf4 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801cab4:	4b74      	ldr	r3, [pc, #464]	; (801cc88 <HAL_RCC_ClockConfig+0x260>)
 801cab6:	681b      	ldr	r3, [r3, #0]
 801cab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801cabc:	2b00      	cmp	r3, #0
 801cabe:	d101      	bne.n	801cac4 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 801cac0:	2301      	movs	r3, #1
 801cac2:	e0da      	b.n	801cc7a <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 801cac4:	f000 fa58 	bl	801cf78 <RCC_GetSysClockFreqFromPLLSource>
 801cac8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 801caca:	693b      	ldr	r3, [r7, #16]
 801cacc:	4a6f      	ldr	r2, [pc, #444]	; (801cc8c <HAL_RCC_ClockConfig+0x264>)
 801cace:	4293      	cmp	r3, r2
 801cad0:	d947      	bls.n	801cb62 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 801cad2:	4b6d      	ldr	r3, [pc, #436]	; (801cc88 <HAL_RCC_ClockConfig+0x260>)
 801cad4:	689b      	ldr	r3, [r3, #8]
 801cad6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801cada:	2b00      	cmp	r3, #0
 801cadc:	d141      	bne.n	801cb62 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801cade:	4b6a      	ldr	r3, [pc, #424]	; (801cc88 <HAL_RCC_ClockConfig+0x260>)
 801cae0:	689b      	ldr	r3, [r3, #8]
 801cae2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801cae6:	4a68      	ldr	r2, [pc, #416]	; (801cc88 <HAL_RCC_ClockConfig+0x260>)
 801cae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801caec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 801caee:	2380      	movs	r3, #128	; 0x80
 801caf0:	617b      	str	r3, [r7, #20]
 801caf2:	e036      	b.n	801cb62 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801caf4:	687b      	ldr	r3, [r7, #4]
 801caf6:	685b      	ldr	r3, [r3, #4]
 801caf8:	2b02      	cmp	r3, #2
 801cafa:	d107      	bne.n	801cb0c <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801cafc:	4b62      	ldr	r3, [pc, #392]	; (801cc88 <HAL_RCC_ClockConfig+0x260>)
 801cafe:	681b      	ldr	r3, [r3, #0]
 801cb00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801cb04:	2b00      	cmp	r3, #0
 801cb06:	d115      	bne.n	801cb34 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 801cb08:	2301      	movs	r3, #1
 801cb0a:	e0b6      	b.n	801cc7a <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801cb0c:	687b      	ldr	r3, [r7, #4]
 801cb0e:	685b      	ldr	r3, [r3, #4]
 801cb10:	2b00      	cmp	r3, #0
 801cb12:	d107      	bne.n	801cb24 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801cb14:	4b5c      	ldr	r3, [pc, #368]	; (801cc88 <HAL_RCC_ClockConfig+0x260>)
 801cb16:	681b      	ldr	r3, [r3, #0]
 801cb18:	f003 0302 	and.w	r3, r3, #2
 801cb1c:	2b00      	cmp	r3, #0
 801cb1e:	d109      	bne.n	801cb34 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 801cb20:	2301      	movs	r3, #1
 801cb22:	e0aa      	b.n	801cc7a <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801cb24:	4b58      	ldr	r3, [pc, #352]	; (801cc88 <HAL_RCC_ClockConfig+0x260>)
 801cb26:	681b      	ldr	r3, [r3, #0]
 801cb28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801cb2c:	2b00      	cmp	r3, #0
 801cb2e:	d101      	bne.n	801cb34 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 801cb30:	2301      	movs	r3, #1
 801cb32:	e0a2      	b.n	801cc7a <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 801cb34:	f000 f8b0 	bl	801cc98 <HAL_RCC_GetSysClockFreq>
 801cb38:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 801cb3a:	693b      	ldr	r3, [r7, #16]
 801cb3c:	4a53      	ldr	r2, [pc, #332]	; (801cc8c <HAL_RCC_ClockConfig+0x264>)
 801cb3e:	4293      	cmp	r3, r2
 801cb40:	d90f      	bls.n	801cb62 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 801cb42:	4b51      	ldr	r3, [pc, #324]	; (801cc88 <HAL_RCC_ClockConfig+0x260>)
 801cb44:	689b      	ldr	r3, [r3, #8]
 801cb46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801cb4a:	2b00      	cmp	r3, #0
 801cb4c:	d109      	bne.n	801cb62 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801cb4e:	4b4e      	ldr	r3, [pc, #312]	; (801cc88 <HAL_RCC_ClockConfig+0x260>)
 801cb50:	689b      	ldr	r3, [r3, #8]
 801cb52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801cb56:	4a4c      	ldr	r2, [pc, #304]	; (801cc88 <HAL_RCC_ClockConfig+0x260>)
 801cb58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cb5c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 801cb5e:	2380      	movs	r3, #128	; 0x80
 801cb60:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801cb62:	4b49      	ldr	r3, [pc, #292]	; (801cc88 <HAL_RCC_ClockConfig+0x260>)
 801cb64:	689b      	ldr	r3, [r3, #8]
 801cb66:	f023 0203 	bic.w	r2, r3, #3
 801cb6a:	687b      	ldr	r3, [r7, #4]
 801cb6c:	685b      	ldr	r3, [r3, #4]
 801cb6e:	4946      	ldr	r1, [pc, #280]	; (801cc88 <HAL_RCC_ClockConfig+0x260>)
 801cb70:	4313      	orrs	r3, r2
 801cb72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801cb74:	f7fc f86e 	bl	8018c54 <HAL_GetTick>
 801cb78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801cb7a:	e013      	b.n	801cba4 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801cb7c:	f7fc f86a 	bl	8018c54 <HAL_GetTick>
 801cb80:	4602      	mov	r2, r0
 801cb82:	68fb      	ldr	r3, [r7, #12]
 801cb84:	1ad3      	subs	r3, r2, r3
 801cb86:	f241 3288 	movw	r2, #5000	; 0x1388
 801cb8a:	4293      	cmp	r3, r2
 801cb8c:	d90a      	bls.n	801cba4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801cb8e:	4b3e      	ldr	r3, [pc, #248]	; (801cc88 <HAL_RCC_ClockConfig+0x260>)
 801cb90:	689b      	ldr	r3, [r3, #8]
 801cb92:	f003 020c 	and.w	r2, r3, #12
 801cb96:	687b      	ldr	r3, [r7, #4]
 801cb98:	685b      	ldr	r3, [r3, #4]
 801cb9a:	009b      	lsls	r3, r3, #2
 801cb9c:	429a      	cmp	r2, r3
 801cb9e:	d001      	beq.n	801cba4 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 801cba0:	2303      	movs	r3, #3
 801cba2:	e06a      	b.n	801cc7a <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801cba4:	4b38      	ldr	r3, [pc, #224]	; (801cc88 <HAL_RCC_ClockConfig+0x260>)
 801cba6:	689b      	ldr	r3, [r3, #8]
 801cba8:	f003 020c 	and.w	r2, r3, #12
 801cbac:	687b      	ldr	r3, [r7, #4]
 801cbae:	685b      	ldr	r3, [r3, #4]
 801cbb0:	009b      	lsls	r3, r3, #2
 801cbb2:	429a      	cmp	r2, r3
 801cbb4:	d1e2      	bne.n	801cb7c <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 801cbb6:	697b      	ldr	r3, [r7, #20]
 801cbb8:	2b80      	cmp	r3, #128	; 0x80
 801cbba:	d105      	bne.n	801cbc8 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 801cbbc:	4b32      	ldr	r3, [pc, #200]	; (801cc88 <HAL_RCC_ClockConfig+0x260>)
 801cbbe:	689b      	ldr	r3, [r3, #8]
 801cbc0:	4a31      	ldr	r2, [pc, #196]	; (801cc88 <HAL_RCC_ClockConfig+0x260>)
 801cbc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801cbc6:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801cbc8:	687b      	ldr	r3, [r7, #4]
 801cbca:	681b      	ldr	r3, [r3, #0]
 801cbcc:	f003 0302 	and.w	r3, r3, #2
 801cbd0:	2b00      	cmp	r3, #0
 801cbd2:	d010      	beq.n	801cbf6 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 801cbd4:	687b      	ldr	r3, [r7, #4]
 801cbd6:	689a      	ldr	r2, [r3, #8]
 801cbd8:	4b2b      	ldr	r3, [pc, #172]	; (801cc88 <HAL_RCC_ClockConfig+0x260>)
 801cbda:	689b      	ldr	r3, [r3, #8]
 801cbdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801cbe0:	429a      	cmp	r2, r3
 801cbe2:	d208      	bcs.n	801cbf6 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801cbe4:	4b28      	ldr	r3, [pc, #160]	; (801cc88 <HAL_RCC_ClockConfig+0x260>)
 801cbe6:	689b      	ldr	r3, [r3, #8]
 801cbe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801cbec:	687b      	ldr	r3, [r7, #4]
 801cbee:	689b      	ldr	r3, [r3, #8]
 801cbf0:	4925      	ldr	r1, [pc, #148]	; (801cc88 <HAL_RCC_ClockConfig+0x260>)
 801cbf2:	4313      	orrs	r3, r2
 801cbf4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801cbf6:	4b23      	ldr	r3, [pc, #140]	; (801cc84 <HAL_RCC_ClockConfig+0x25c>)
 801cbf8:	681b      	ldr	r3, [r3, #0]
 801cbfa:	f003 030f 	and.w	r3, r3, #15
 801cbfe:	683a      	ldr	r2, [r7, #0]
 801cc00:	429a      	cmp	r2, r3
 801cc02:	d210      	bcs.n	801cc26 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801cc04:	4b1f      	ldr	r3, [pc, #124]	; (801cc84 <HAL_RCC_ClockConfig+0x25c>)
 801cc06:	681b      	ldr	r3, [r3, #0]
 801cc08:	f023 020f 	bic.w	r2, r3, #15
 801cc0c:	491d      	ldr	r1, [pc, #116]	; (801cc84 <HAL_RCC_ClockConfig+0x25c>)
 801cc0e:	683b      	ldr	r3, [r7, #0]
 801cc10:	4313      	orrs	r3, r2
 801cc12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801cc14:	4b1b      	ldr	r3, [pc, #108]	; (801cc84 <HAL_RCC_ClockConfig+0x25c>)
 801cc16:	681b      	ldr	r3, [r3, #0]
 801cc18:	f003 030f 	and.w	r3, r3, #15
 801cc1c:	683a      	ldr	r2, [r7, #0]
 801cc1e:	429a      	cmp	r2, r3
 801cc20:	d001      	beq.n	801cc26 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 801cc22:	2301      	movs	r3, #1
 801cc24:	e029      	b.n	801cc7a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801cc26:	687b      	ldr	r3, [r7, #4]
 801cc28:	681b      	ldr	r3, [r3, #0]
 801cc2a:	f003 0304 	and.w	r3, r3, #4
 801cc2e:	2b00      	cmp	r3, #0
 801cc30:	d008      	beq.n	801cc44 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801cc32:	4b15      	ldr	r3, [pc, #84]	; (801cc88 <HAL_RCC_ClockConfig+0x260>)
 801cc34:	689b      	ldr	r3, [r3, #8]
 801cc36:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801cc3a:	687b      	ldr	r3, [r7, #4]
 801cc3c:	68db      	ldr	r3, [r3, #12]
 801cc3e:	4912      	ldr	r1, [pc, #72]	; (801cc88 <HAL_RCC_ClockConfig+0x260>)
 801cc40:	4313      	orrs	r3, r2
 801cc42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801cc44:	687b      	ldr	r3, [r7, #4]
 801cc46:	681b      	ldr	r3, [r3, #0]
 801cc48:	f003 0308 	and.w	r3, r3, #8
 801cc4c:	2b00      	cmp	r3, #0
 801cc4e:	d009      	beq.n	801cc64 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801cc50:	4b0d      	ldr	r3, [pc, #52]	; (801cc88 <HAL_RCC_ClockConfig+0x260>)
 801cc52:	689b      	ldr	r3, [r3, #8]
 801cc54:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801cc58:	687b      	ldr	r3, [r7, #4]
 801cc5a:	691b      	ldr	r3, [r3, #16]
 801cc5c:	00db      	lsls	r3, r3, #3
 801cc5e:	490a      	ldr	r1, [pc, #40]	; (801cc88 <HAL_RCC_ClockConfig+0x260>)
 801cc60:	4313      	orrs	r3, r2
 801cc62:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 801cc64:	f000 f8b6 	bl	801cdd4 <HAL_RCC_GetHCLKFreq>
 801cc68:	4603      	mov	r3, r0
 801cc6a:	4a09      	ldr	r2, [pc, #36]	; (801cc90 <HAL_RCC_ClockConfig+0x268>)
 801cc6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 801cc6e:	4b09      	ldr	r3, [pc, #36]	; (801cc94 <HAL_RCC_ClockConfig+0x26c>)
 801cc70:	681b      	ldr	r3, [r3, #0]
 801cc72:	4618      	mov	r0, r3
 801cc74:	f7fb fdb4 	bl	80187e0 <HAL_InitTick>
 801cc78:	4603      	mov	r3, r0
}
 801cc7a:	4618      	mov	r0, r3
 801cc7c:	3718      	adds	r7, #24
 801cc7e:	46bd      	mov	sp, r7
 801cc80:	bd80      	pop	{r7, pc}
 801cc82:	bf00      	nop
 801cc84:	40022000 	.word	0x40022000
 801cc88:	40021000 	.word	0x40021000
 801cc8c:	04c4b400 	.word	0x04c4b400
 801cc90:	20000090 	.word	0x20000090
 801cc94:	20000094 	.word	0x20000094

0801cc98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801cc98:	b480      	push	{r7}
 801cc9a:	b089      	sub	sp, #36	; 0x24
 801cc9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 801cc9e:	2300      	movs	r3, #0
 801cca0:	61fb      	str	r3, [r7, #28]
 801cca2:	2300      	movs	r3, #0
 801cca4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801cca6:	4b47      	ldr	r3, [pc, #284]	; (801cdc4 <HAL_RCC_GetSysClockFreq+0x12c>)
 801cca8:	689b      	ldr	r3, [r3, #8]
 801ccaa:	f003 030c 	and.w	r3, r3, #12
 801ccae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 801ccb0:	4b44      	ldr	r3, [pc, #272]	; (801cdc4 <HAL_RCC_GetSysClockFreq+0x12c>)
 801ccb2:	68db      	ldr	r3, [r3, #12]
 801ccb4:	f003 0303 	and.w	r3, r3, #3
 801ccb8:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 801ccba:	693b      	ldr	r3, [r7, #16]
 801ccbc:	2b00      	cmp	r3, #0
 801ccbe:	d005      	beq.n	801cccc <HAL_RCC_GetSysClockFreq+0x34>
 801ccc0:	693b      	ldr	r3, [r7, #16]
 801ccc2:	2b0c      	cmp	r3, #12
 801ccc4:	d121      	bne.n	801cd0a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 801ccc6:	68fb      	ldr	r3, [r7, #12]
 801ccc8:	2b01      	cmp	r3, #1
 801ccca:	d11e      	bne.n	801cd0a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 801cccc:	4b3d      	ldr	r3, [pc, #244]	; (801cdc4 <HAL_RCC_GetSysClockFreq+0x12c>)
 801ccce:	681b      	ldr	r3, [r3, #0]
 801ccd0:	f003 0308 	and.w	r3, r3, #8
 801ccd4:	2b00      	cmp	r3, #0
 801ccd6:	d107      	bne.n	801cce8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 801ccd8:	4b3a      	ldr	r3, [pc, #232]	; (801cdc4 <HAL_RCC_GetSysClockFreq+0x12c>)
 801ccda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801ccde:	0a1b      	lsrs	r3, r3, #8
 801cce0:	f003 030f 	and.w	r3, r3, #15
 801cce4:	61fb      	str	r3, [r7, #28]
 801cce6:	e005      	b.n	801ccf4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 801cce8:	4b36      	ldr	r3, [pc, #216]	; (801cdc4 <HAL_RCC_GetSysClockFreq+0x12c>)
 801ccea:	681b      	ldr	r3, [r3, #0]
 801ccec:	091b      	lsrs	r3, r3, #4
 801ccee:	f003 030f 	and.w	r3, r3, #15
 801ccf2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 801ccf4:	4a34      	ldr	r2, [pc, #208]	; (801cdc8 <HAL_RCC_GetSysClockFreq+0x130>)
 801ccf6:	69fb      	ldr	r3, [r7, #28]
 801ccf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ccfc:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 801ccfe:	693b      	ldr	r3, [r7, #16]
 801cd00:	2b00      	cmp	r3, #0
 801cd02:	d10d      	bne.n	801cd20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 801cd04:	69fb      	ldr	r3, [r7, #28]
 801cd06:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 801cd08:	e00a      	b.n	801cd20 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 801cd0a:	693b      	ldr	r3, [r7, #16]
 801cd0c:	2b04      	cmp	r3, #4
 801cd0e:	d102      	bne.n	801cd16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801cd10:	4b2e      	ldr	r3, [pc, #184]	; (801cdcc <HAL_RCC_GetSysClockFreq+0x134>)
 801cd12:	61bb      	str	r3, [r7, #24]
 801cd14:	e004      	b.n	801cd20 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 801cd16:	693b      	ldr	r3, [r7, #16]
 801cd18:	2b08      	cmp	r3, #8
 801cd1a:	d101      	bne.n	801cd20 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801cd1c:	4b2c      	ldr	r3, [pc, #176]	; (801cdd0 <HAL_RCC_GetSysClockFreq+0x138>)
 801cd1e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801cd20:	693b      	ldr	r3, [r7, #16]
 801cd22:	2b0c      	cmp	r3, #12
 801cd24:	d146      	bne.n	801cdb4 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 801cd26:	4b27      	ldr	r3, [pc, #156]	; (801cdc4 <HAL_RCC_GetSysClockFreq+0x12c>)
 801cd28:	68db      	ldr	r3, [r3, #12]
 801cd2a:	f003 0303 	and.w	r3, r3, #3
 801cd2e:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801cd30:	4b24      	ldr	r3, [pc, #144]	; (801cdc4 <HAL_RCC_GetSysClockFreq+0x12c>)
 801cd32:	68db      	ldr	r3, [r3, #12]
 801cd34:	091b      	lsrs	r3, r3, #4
 801cd36:	f003 030f 	and.w	r3, r3, #15
 801cd3a:	3301      	adds	r3, #1
 801cd3c:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 801cd3e:	68bb      	ldr	r3, [r7, #8]
 801cd40:	2b02      	cmp	r3, #2
 801cd42:	d003      	beq.n	801cd4c <HAL_RCC_GetSysClockFreq+0xb4>
 801cd44:	68bb      	ldr	r3, [r7, #8]
 801cd46:	2b03      	cmp	r3, #3
 801cd48:	d00d      	beq.n	801cd66 <HAL_RCC_GetSysClockFreq+0xce>
 801cd4a:	e019      	b.n	801cd80 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801cd4c:	4a1f      	ldr	r2, [pc, #124]	; (801cdcc <HAL_RCC_GetSysClockFreq+0x134>)
 801cd4e:	687b      	ldr	r3, [r7, #4]
 801cd50:	fbb2 f3f3 	udiv	r3, r2, r3
 801cd54:	4a1b      	ldr	r2, [pc, #108]	; (801cdc4 <HAL_RCC_GetSysClockFreq+0x12c>)
 801cd56:	68d2      	ldr	r2, [r2, #12]
 801cd58:	0a12      	lsrs	r2, r2, #8
 801cd5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801cd5e:	fb02 f303 	mul.w	r3, r2, r3
 801cd62:	617b      	str	r3, [r7, #20]
        break;
 801cd64:	e019      	b.n	801cd9a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801cd66:	4a1a      	ldr	r2, [pc, #104]	; (801cdd0 <HAL_RCC_GetSysClockFreq+0x138>)
 801cd68:	687b      	ldr	r3, [r7, #4]
 801cd6a:	fbb2 f3f3 	udiv	r3, r2, r3
 801cd6e:	4a15      	ldr	r2, [pc, #84]	; (801cdc4 <HAL_RCC_GetSysClockFreq+0x12c>)
 801cd70:	68d2      	ldr	r2, [r2, #12]
 801cd72:	0a12      	lsrs	r2, r2, #8
 801cd74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801cd78:	fb02 f303 	mul.w	r3, r2, r3
 801cd7c:	617b      	str	r3, [r7, #20]
        break;
 801cd7e:	e00c      	b.n	801cd9a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801cd80:	69fa      	ldr	r2, [r7, #28]
 801cd82:	687b      	ldr	r3, [r7, #4]
 801cd84:	fbb2 f3f3 	udiv	r3, r2, r3
 801cd88:	4a0e      	ldr	r2, [pc, #56]	; (801cdc4 <HAL_RCC_GetSysClockFreq+0x12c>)
 801cd8a:	68d2      	ldr	r2, [r2, #12]
 801cd8c:	0a12      	lsrs	r2, r2, #8
 801cd8e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801cd92:	fb02 f303 	mul.w	r3, r2, r3
 801cd96:	617b      	str	r3, [r7, #20]
        break;
 801cd98:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 801cd9a:	4b0a      	ldr	r3, [pc, #40]	; (801cdc4 <HAL_RCC_GetSysClockFreq+0x12c>)
 801cd9c:	68db      	ldr	r3, [r3, #12]
 801cd9e:	0e5b      	lsrs	r3, r3, #25
 801cda0:	f003 0303 	and.w	r3, r3, #3
 801cda4:	3301      	adds	r3, #1
 801cda6:	005b      	lsls	r3, r3, #1
 801cda8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 801cdaa:	697a      	ldr	r2, [r7, #20]
 801cdac:	683b      	ldr	r3, [r7, #0]
 801cdae:	fbb2 f3f3 	udiv	r3, r2, r3
 801cdb2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 801cdb4:	69bb      	ldr	r3, [r7, #24]
}
 801cdb6:	4618      	mov	r0, r3
 801cdb8:	3724      	adds	r7, #36	; 0x24
 801cdba:	46bd      	mov	sp, r7
 801cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdc0:	4770      	bx	lr
 801cdc2:	bf00      	nop
 801cdc4:	40021000 	.word	0x40021000
 801cdc8:	080298c8 	.word	0x080298c8
 801cdcc:	00f42400 	.word	0x00f42400
 801cdd0:	007a1200 	.word	0x007a1200

0801cdd4 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801cdd4:	b580      	push	{r7, lr}
 801cdd6:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 801cdd8:	f7ff ff5e 	bl	801cc98 <HAL_RCC_GetSysClockFreq>
 801cddc:	4602      	mov	r2, r0
 801cdde:	4b05      	ldr	r3, [pc, #20]	; (801cdf4 <HAL_RCC_GetHCLKFreq+0x20>)
 801cde0:	689b      	ldr	r3, [r3, #8]
 801cde2:	091b      	lsrs	r3, r3, #4
 801cde4:	f003 030f 	and.w	r3, r3, #15
 801cde8:	4903      	ldr	r1, [pc, #12]	; (801cdf8 <HAL_RCC_GetHCLKFreq+0x24>)
 801cdea:	5ccb      	ldrb	r3, [r1, r3]
 801cdec:	fa22 f303 	lsr.w	r3, r2, r3
}
 801cdf0:	4618      	mov	r0, r3
 801cdf2:	bd80      	pop	{r7, pc}
 801cdf4:	40021000 	.word	0x40021000
 801cdf8:	080298b0 	.word	0x080298b0

0801cdfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801cdfc:	b580      	push	{r7, lr}
 801cdfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801ce00:	f7ff ffe8 	bl	801cdd4 <HAL_RCC_GetHCLKFreq>
 801ce04:	4602      	mov	r2, r0
 801ce06:	4b05      	ldr	r3, [pc, #20]	; (801ce1c <HAL_RCC_GetPCLK1Freq+0x20>)
 801ce08:	689b      	ldr	r3, [r3, #8]
 801ce0a:	0a1b      	lsrs	r3, r3, #8
 801ce0c:	f003 0307 	and.w	r3, r3, #7
 801ce10:	4903      	ldr	r1, [pc, #12]	; (801ce20 <HAL_RCC_GetPCLK1Freq+0x24>)
 801ce12:	5ccb      	ldrb	r3, [r1, r3]
 801ce14:	fa22 f303 	lsr.w	r3, r2, r3
}
 801ce18:	4618      	mov	r0, r3
 801ce1a:	bd80      	pop	{r7, pc}
 801ce1c:	40021000 	.word	0x40021000
 801ce20:	080298c0 	.word	0x080298c0

0801ce24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801ce24:	b580      	push	{r7, lr}
 801ce26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801ce28:	f7ff ffd4 	bl	801cdd4 <HAL_RCC_GetHCLKFreq>
 801ce2c:	4602      	mov	r2, r0
 801ce2e:	4b05      	ldr	r3, [pc, #20]	; (801ce44 <HAL_RCC_GetPCLK2Freq+0x20>)
 801ce30:	689b      	ldr	r3, [r3, #8]
 801ce32:	0adb      	lsrs	r3, r3, #11
 801ce34:	f003 0307 	and.w	r3, r3, #7
 801ce38:	4903      	ldr	r1, [pc, #12]	; (801ce48 <HAL_RCC_GetPCLK2Freq+0x24>)
 801ce3a:	5ccb      	ldrb	r3, [r1, r3]
 801ce3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 801ce40:	4618      	mov	r0, r3
 801ce42:	bd80      	pop	{r7, pc}
 801ce44:	40021000 	.word	0x40021000
 801ce48:	080298c0 	.word	0x080298c0

0801ce4c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 801ce4c:	b480      	push	{r7}
 801ce4e:	b083      	sub	sp, #12
 801ce50:	af00      	add	r7, sp, #0
 801ce52:	6078      	str	r0, [r7, #4]
 801ce54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801ce56:	687b      	ldr	r3, [r7, #4]
 801ce58:	220f      	movs	r2, #15
 801ce5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801ce5c:	4b12      	ldr	r3, [pc, #72]	; (801cea8 <HAL_RCC_GetClockConfig+0x5c>)
 801ce5e:	689b      	ldr	r3, [r3, #8]
 801ce60:	f003 0203 	and.w	r2, r3, #3
 801ce64:	687b      	ldr	r3, [r7, #4]
 801ce66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 801ce68:	4b0f      	ldr	r3, [pc, #60]	; (801cea8 <HAL_RCC_GetClockConfig+0x5c>)
 801ce6a:	689b      	ldr	r3, [r3, #8]
 801ce6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801ce70:	687b      	ldr	r3, [r7, #4]
 801ce72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 801ce74:	4b0c      	ldr	r3, [pc, #48]	; (801cea8 <HAL_RCC_GetClockConfig+0x5c>)
 801ce76:	689b      	ldr	r3, [r3, #8]
 801ce78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801ce7c:	687b      	ldr	r3, [r7, #4]
 801ce7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 801ce80:	4b09      	ldr	r3, [pc, #36]	; (801cea8 <HAL_RCC_GetClockConfig+0x5c>)
 801ce82:	689b      	ldr	r3, [r3, #8]
 801ce84:	08db      	lsrs	r3, r3, #3
 801ce86:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801ce8a:	687b      	ldr	r3, [r7, #4]
 801ce8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801ce8e:	4b07      	ldr	r3, [pc, #28]	; (801ceac <HAL_RCC_GetClockConfig+0x60>)
 801ce90:	681b      	ldr	r3, [r3, #0]
 801ce92:	f003 020f 	and.w	r2, r3, #15
 801ce96:	683b      	ldr	r3, [r7, #0]
 801ce98:	601a      	str	r2, [r3, #0]
}
 801ce9a:	bf00      	nop
 801ce9c:	370c      	adds	r7, #12
 801ce9e:	46bd      	mov	sp, r7
 801cea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cea4:	4770      	bx	lr
 801cea6:	bf00      	nop
 801cea8:	40021000 	.word	0x40021000
 801ceac:	40022000 	.word	0x40022000

0801ceb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 801ceb0:	b580      	push	{r7, lr}
 801ceb2:	b086      	sub	sp, #24
 801ceb4:	af00      	add	r7, sp, #0
 801ceb6:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 801ceb8:	2300      	movs	r3, #0
 801ceba:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 801cebc:	4b2c      	ldr	r3, [pc, #176]	; (801cf70 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 801cebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801cec4:	2b00      	cmp	r3, #0
 801cec6:	d003      	beq.n	801ced0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 801cec8:	f7ff f83a 	bl	801bf40 <HAL_PWREx_GetVoltageRange>
 801cecc:	6138      	str	r0, [r7, #16]
 801cece:	e014      	b.n	801cefa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 801ced0:	4b27      	ldr	r3, [pc, #156]	; (801cf70 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 801ced2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ced4:	4a26      	ldr	r2, [pc, #152]	; (801cf70 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 801ced6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ceda:	6593      	str	r3, [r2, #88]	; 0x58
 801cedc:	4b24      	ldr	r3, [pc, #144]	; (801cf70 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 801cede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801cee4:	60fb      	str	r3, [r7, #12]
 801cee6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 801cee8:	f7ff f82a 	bl	801bf40 <HAL_PWREx_GetVoltageRange>
 801ceec:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 801ceee:	4b20      	ldr	r3, [pc, #128]	; (801cf70 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 801cef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cef2:	4a1f      	ldr	r2, [pc, #124]	; (801cf70 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 801cef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801cef8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 801cefa:	693b      	ldr	r3, [r7, #16]
 801cefc:	2b00      	cmp	r3, #0
 801cefe:	d003      	beq.n	801cf08 <RCC_SetFlashLatencyFromMSIRange+0x58>
 801cf00:	693b      	ldr	r3, [r7, #16]
 801cf02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cf06:	d10b      	bne.n	801cf20 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 801cf08:	687b      	ldr	r3, [r7, #4]
 801cf0a:	2b80      	cmp	r3, #128	; 0x80
 801cf0c:	d919      	bls.n	801cf42 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 801cf0e:	687b      	ldr	r3, [r7, #4]
 801cf10:	2ba0      	cmp	r3, #160	; 0xa0
 801cf12:	d902      	bls.n	801cf1a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801cf14:	2302      	movs	r3, #2
 801cf16:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 801cf18:	e013      	b.n	801cf42 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 801cf1a:	2301      	movs	r3, #1
 801cf1c:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 801cf1e:	e010      	b.n	801cf42 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 801cf20:	687b      	ldr	r3, [r7, #4]
 801cf22:	2b80      	cmp	r3, #128	; 0x80
 801cf24:	d902      	bls.n	801cf2c <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 801cf26:	2303      	movs	r3, #3
 801cf28:	617b      	str	r3, [r7, #20]
 801cf2a:	e00a      	b.n	801cf42 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 801cf2c:	687b      	ldr	r3, [r7, #4]
 801cf2e:	2b80      	cmp	r3, #128	; 0x80
 801cf30:	d102      	bne.n	801cf38 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801cf32:	2302      	movs	r3, #2
 801cf34:	617b      	str	r3, [r7, #20]
 801cf36:	e004      	b.n	801cf42 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 801cf38:	687b      	ldr	r3, [r7, #4]
 801cf3a:	2b70      	cmp	r3, #112	; 0x70
 801cf3c:	d101      	bne.n	801cf42 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 801cf3e:	2301      	movs	r3, #1
 801cf40:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 801cf42:	4b0c      	ldr	r3, [pc, #48]	; (801cf74 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 801cf44:	681b      	ldr	r3, [r3, #0]
 801cf46:	f023 020f 	bic.w	r2, r3, #15
 801cf4a:	490a      	ldr	r1, [pc, #40]	; (801cf74 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 801cf4c:	697b      	ldr	r3, [r7, #20]
 801cf4e:	4313      	orrs	r3, r2
 801cf50:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 801cf52:	4b08      	ldr	r3, [pc, #32]	; (801cf74 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 801cf54:	681b      	ldr	r3, [r3, #0]
 801cf56:	f003 030f 	and.w	r3, r3, #15
 801cf5a:	697a      	ldr	r2, [r7, #20]
 801cf5c:	429a      	cmp	r2, r3
 801cf5e:	d001      	beq.n	801cf64 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 801cf60:	2301      	movs	r3, #1
 801cf62:	e000      	b.n	801cf66 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 801cf64:	2300      	movs	r3, #0
}
 801cf66:	4618      	mov	r0, r3
 801cf68:	3718      	adds	r7, #24
 801cf6a:	46bd      	mov	sp, r7
 801cf6c:	bd80      	pop	{r7, pc}
 801cf6e:	bf00      	nop
 801cf70:	40021000 	.word	0x40021000
 801cf74:	40022000 	.word	0x40022000

0801cf78 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 801cf78:	b480      	push	{r7}
 801cf7a:	b087      	sub	sp, #28
 801cf7c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801cf7e:	4b31      	ldr	r3, [pc, #196]	; (801d044 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 801cf80:	68db      	ldr	r3, [r3, #12]
 801cf82:	f003 0303 	and.w	r3, r3, #3
 801cf86:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801cf88:	4b2e      	ldr	r3, [pc, #184]	; (801d044 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 801cf8a:	68db      	ldr	r3, [r3, #12]
 801cf8c:	091b      	lsrs	r3, r3, #4
 801cf8e:	f003 030f 	and.w	r3, r3, #15
 801cf92:	3301      	adds	r3, #1
 801cf94:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 801cf96:	68fb      	ldr	r3, [r7, #12]
 801cf98:	2b03      	cmp	r3, #3
 801cf9a:	d015      	beq.n	801cfc8 <RCC_GetSysClockFreqFromPLLSource+0x50>
 801cf9c:	68fb      	ldr	r3, [r7, #12]
 801cf9e:	2b03      	cmp	r3, #3
 801cfa0:	d839      	bhi.n	801d016 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 801cfa2:	68fb      	ldr	r3, [r7, #12]
 801cfa4:	2b01      	cmp	r3, #1
 801cfa6:	d01c      	beq.n	801cfe2 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 801cfa8:	68fb      	ldr	r3, [r7, #12]
 801cfaa:	2b02      	cmp	r3, #2
 801cfac:	d133      	bne.n	801d016 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801cfae:	4a26      	ldr	r2, [pc, #152]	; (801d048 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 801cfb0:	68bb      	ldr	r3, [r7, #8]
 801cfb2:	fbb2 f3f3 	udiv	r3, r2, r3
 801cfb6:	4a23      	ldr	r2, [pc, #140]	; (801d044 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 801cfb8:	68d2      	ldr	r2, [r2, #12]
 801cfba:	0a12      	lsrs	r2, r2, #8
 801cfbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801cfc0:	fb02 f303 	mul.w	r3, r2, r3
 801cfc4:	613b      	str	r3, [r7, #16]
      break;
 801cfc6:	e029      	b.n	801d01c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801cfc8:	4a20      	ldr	r2, [pc, #128]	; (801d04c <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 801cfca:	68bb      	ldr	r3, [r7, #8]
 801cfcc:	fbb2 f3f3 	udiv	r3, r2, r3
 801cfd0:	4a1c      	ldr	r2, [pc, #112]	; (801d044 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 801cfd2:	68d2      	ldr	r2, [r2, #12]
 801cfd4:	0a12      	lsrs	r2, r2, #8
 801cfd6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801cfda:	fb02 f303 	mul.w	r3, r2, r3
 801cfde:	613b      	str	r3, [r7, #16]
      break;
 801cfe0:	e01c      	b.n	801d01c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 801cfe2:	4b18      	ldr	r3, [pc, #96]	; (801d044 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 801cfe4:	681b      	ldr	r3, [r3, #0]
 801cfe6:	f003 0308 	and.w	r3, r3, #8
 801cfea:	2b00      	cmp	r3, #0
 801cfec:	d107      	bne.n	801cffe <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 801cfee:	4b15      	ldr	r3, [pc, #84]	; (801d044 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 801cff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801cff4:	0a1b      	lsrs	r3, r3, #8
 801cff6:	f003 030f 	and.w	r3, r3, #15
 801cffa:	617b      	str	r3, [r7, #20]
 801cffc:	e005      	b.n	801d00a <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 801cffe:	4b11      	ldr	r3, [pc, #68]	; (801d044 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 801d000:	681b      	ldr	r3, [r3, #0]
 801d002:	091b      	lsrs	r3, r3, #4
 801d004:	f003 030f 	and.w	r3, r3, #15
 801d008:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 801d00a:	4a11      	ldr	r2, [pc, #68]	; (801d050 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 801d00c:	697b      	ldr	r3, [r7, #20]
 801d00e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d012:	613b      	str	r3, [r7, #16]
        break;
 801d014:	e002      	b.n	801d01c <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 801d016:	2300      	movs	r3, #0
 801d018:	613b      	str	r3, [r7, #16]
      break;
 801d01a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 801d01c:	4b09      	ldr	r3, [pc, #36]	; (801d044 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 801d01e:	68db      	ldr	r3, [r3, #12]
 801d020:	0e5b      	lsrs	r3, r3, #25
 801d022:	f003 0303 	and.w	r3, r3, #3
 801d026:	3301      	adds	r3, #1
 801d028:	005b      	lsls	r3, r3, #1
 801d02a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 801d02c:	693a      	ldr	r2, [r7, #16]
 801d02e:	687b      	ldr	r3, [r7, #4]
 801d030:	fbb2 f3f3 	udiv	r3, r2, r3
 801d034:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 801d036:	683b      	ldr	r3, [r7, #0]
}
 801d038:	4618      	mov	r0, r3
 801d03a:	371c      	adds	r7, #28
 801d03c:	46bd      	mov	sp, r7
 801d03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d042:	4770      	bx	lr
 801d044:	40021000 	.word	0x40021000
 801d048:	00f42400 	.word	0x00f42400
 801d04c:	007a1200 	.word	0x007a1200
 801d050:	080298c8 	.word	0x080298c8

0801d054 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801d054:	b580      	push	{r7, lr}
 801d056:	b088      	sub	sp, #32
 801d058:	af00      	add	r7, sp, #0
 801d05a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801d05c:	2300      	movs	r3, #0
 801d05e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801d060:	2300      	movs	r3, #0
 801d062:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 801d064:	687b      	ldr	r3, [r7, #4]
 801d066:	681b      	ldr	r3, [r3, #0]
 801d068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d06c:	2b00      	cmp	r3, #0
 801d06e:	d040      	beq.n	801d0f2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 801d070:	687b      	ldr	r3, [r7, #4]
 801d072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d074:	2b80      	cmp	r3, #128	; 0x80
 801d076:	d02a      	beq.n	801d0ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801d078:	2b80      	cmp	r3, #128	; 0x80
 801d07a:	d825      	bhi.n	801d0c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 801d07c:	2b60      	cmp	r3, #96	; 0x60
 801d07e:	d026      	beq.n	801d0ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801d080:	2b60      	cmp	r3, #96	; 0x60
 801d082:	d821      	bhi.n	801d0c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 801d084:	2b40      	cmp	r3, #64	; 0x40
 801d086:	d006      	beq.n	801d096 <HAL_RCCEx_PeriphCLKConfig+0x42>
 801d088:	2b40      	cmp	r3, #64	; 0x40
 801d08a:	d81d      	bhi.n	801d0c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 801d08c:	2b00      	cmp	r3, #0
 801d08e:	d009      	beq.n	801d0a4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 801d090:	2b20      	cmp	r3, #32
 801d092:	d010      	beq.n	801d0b6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 801d094:	e018      	b.n	801d0c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 801d096:	4b8f      	ldr	r3, [pc, #572]	; (801d2d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801d098:	68db      	ldr	r3, [r3, #12]
 801d09a:	4a8e      	ldr	r2, [pc, #568]	; (801d2d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801d09c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801d0a0:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 801d0a2:	e015      	b.n	801d0d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801d0a4:	687b      	ldr	r3, [r7, #4]
 801d0a6:	3304      	adds	r3, #4
 801d0a8:	2100      	movs	r1, #0
 801d0aa:	4618      	mov	r0, r3
 801d0ac:	f000 fb56 	bl	801d75c <RCCEx_PLLSAI1_Config>
 801d0b0:	4603      	mov	r3, r0
 801d0b2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 801d0b4:	e00c      	b.n	801d0d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 801d0b6:	687b      	ldr	r3, [r7, #4]
 801d0b8:	3320      	adds	r3, #32
 801d0ba:	2100      	movs	r1, #0
 801d0bc:	4618      	mov	r0, r3
 801d0be:	f000 fc33 	bl	801d928 <RCCEx_PLLSAI2_Config>
 801d0c2:	4603      	mov	r3, r0
 801d0c4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 801d0c6:	e003      	b.n	801d0d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d0c8:	2301      	movs	r3, #1
 801d0ca:	77fb      	strb	r3, [r7, #31]
        break;
 801d0cc:	e000      	b.n	801d0d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 801d0ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d0d0:	7ffb      	ldrb	r3, [r7, #31]
 801d0d2:	2b00      	cmp	r3, #0
 801d0d4:	d10b      	bne.n	801d0ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801d0d6:	4b7f      	ldr	r3, [pc, #508]	; (801d2d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801d0d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801d0dc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 801d0e0:	687b      	ldr	r3, [r7, #4]
 801d0e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d0e4:	497b      	ldr	r1, [pc, #492]	; (801d2d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801d0e6:	4313      	orrs	r3, r2
 801d0e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 801d0ec:	e001      	b.n	801d0f2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d0ee:	7ffb      	ldrb	r3, [r7, #31]
 801d0f0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 801d0f2:	687b      	ldr	r3, [r7, #4]
 801d0f4:	681b      	ldr	r3, [r3, #0]
 801d0f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801d0fa:	2b00      	cmp	r3, #0
 801d0fc:	d047      	beq.n	801d18e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d106:	d030      	beq.n	801d16a <HAL_RCCEx_PeriphCLKConfig+0x116>
 801d108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d10c:	d82a      	bhi.n	801d164 <HAL_RCCEx_PeriphCLKConfig+0x110>
 801d10e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801d112:	d02a      	beq.n	801d16a <HAL_RCCEx_PeriphCLKConfig+0x116>
 801d114:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801d118:	d824      	bhi.n	801d164 <HAL_RCCEx_PeriphCLKConfig+0x110>
 801d11a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d11e:	d008      	beq.n	801d132 <HAL_RCCEx_PeriphCLKConfig+0xde>
 801d120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d124:	d81e      	bhi.n	801d164 <HAL_RCCEx_PeriphCLKConfig+0x110>
 801d126:	2b00      	cmp	r3, #0
 801d128:	d00a      	beq.n	801d140 <HAL_RCCEx_PeriphCLKConfig+0xec>
 801d12a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d12e:	d010      	beq.n	801d152 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 801d130:	e018      	b.n	801d164 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 801d132:	4b68      	ldr	r3, [pc, #416]	; (801d2d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801d134:	68db      	ldr	r3, [r3, #12]
 801d136:	4a67      	ldr	r2, [pc, #412]	; (801d2d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801d138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801d13c:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 801d13e:	e015      	b.n	801d16c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801d140:	687b      	ldr	r3, [r7, #4]
 801d142:	3304      	adds	r3, #4
 801d144:	2100      	movs	r1, #0
 801d146:	4618      	mov	r0, r3
 801d148:	f000 fb08 	bl	801d75c <RCCEx_PLLSAI1_Config>
 801d14c:	4603      	mov	r3, r0
 801d14e:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 801d150:	e00c      	b.n	801d16c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 801d152:	687b      	ldr	r3, [r7, #4]
 801d154:	3320      	adds	r3, #32
 801d156:	2100      	movs	r1, #0
 801d158:	4618      	mov	r0, r3
 801d15a:	f000 fbe5 	bl	801d928 <RCCEx_PLLSAI2_Config>
 801d15e:	4603      	mov	r3, r0
 801d160:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 801d162:	e003      	b.n	801d16c <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d164:	2301      	movs	r3, #1
 801d166:	77fb      	strb	r3, [r7, #31]
        break;
 801d168:	e000      	b.n	801d16c <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 801d16a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d16c:	7ffb      	ldrb	r3, [r7, #31]
 801d16e:	2b00      	cmp	r3, #0
 801d170:	d10b      	bne.n	801d18a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801d172:	4b58      	ldr	r3, [pc, #352]	; (801d2d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801d174:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801d178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801d17c:	687b      	ldr	r3, [r7, #4]
 801d17e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d180:	4954      	ldr	r1, [pc, #336]	; (801d2d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801d182:	4313      	orrs	r3, r2
 801d184:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 801d188:	e001      	b.n	801d18e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d18a:	7ffb      	ldrb	r3, [r7, #31]
 801d18c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801d18e:	687b      	ldr	r3, [r7, #4]
 801d190:	681b      	ldr	r3, [r3, #0]
 801d192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d196:	2b00      	cmp	r3, #0
 801d198:	f000 80ab 	beq.w	801d2f2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 801d19c:	2300      	movs	r3, #0
 801d19e:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801d1a0:	4b4c      	ldr	r3, [pc, #304]	; (801d2d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801d1a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d1a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801d1a8:	2b00      	cmp	r3, #0
 801d1aa:	d10d      	bne.n	801d1c8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801d1ac:	4b49      	ldr	r3, [pc, #292]	; (801d2d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801d1ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d1b0:	4a48      	ldr	r2, [pc, #288]	; (801d2d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801d1b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801d1b6:	6593      	str	r3, [r2, #88]	; 0x58
 801d1b8:	4b46      	ldr	r3, [pc, #280]	; (801d2d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801d1ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d1bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801d1c0:	60fb      	str	r3, [r7, #12]
 801d1c2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 801d1c4:	2301      	movs	r3, #1
 801d1c6:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801d1c8:	4b43      	ldr	r3, [pc, #268]	; (801d2d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 801d1ca:	681b      	ldr	r3, [r3, #0]
 801d1cc:	4a42      	ldr	r2, [pc, #264]	; (801d2d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 801d1ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801d1d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801d1d4:	f7fb fd3e 	bl	8018c54 <HAL_GetTick>
 801d1d8:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d1da:	e00f      	b.n	801d1fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801d1dc:	f7fb fd3a 	bl	8018c54 <HAL_GetTick>
 801d1e0:	4602      	mov	r2, r0
 801d1e2:	693b      	ldr	r3, [r7, #16]
 801d1e4:	1ad3      	subs	r3, r2, r3
 801d1e6:	2b02      	cmp	r3, #2
 801d1e8:	d908      	bls.n	801d1fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d1ea:	4b3b      	ldr	r3, [pc, #236]	; (801d2d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 801d1ec:	681b      	ldr	r3, [r3, #0]
 801d1ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d1f2:	2b00      	cmp	r3, #0
 801d1f4:	d109      	bne.n	801d20a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 801d1f6:	2303      	movs	r3, #3
 801d1f8:	77fb      	strb	r3, [r7, #31]
        }
        break;
 801d1fa:	e006      	b.n	801d20a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d1fc:	4b36      	ldr	r3, [pc, #216]	; (801d2d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 801d1fe:	681b      	ldr	r3, [r3, #0]
 801d200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d204:	2b00      	cmp	r3, #0
 801d206:	d0e9      	beq.n	801d1dc <HAL_RCCEx_PeriphCLKConfig+0x188>
 801d208:	e000      	b.n	801d20c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 801d20a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 801d20c:	7ffb      	ldrb	r3, [r7, #31]
 801d20e:	2b00      	cmp	r3, #0
 801d210:	d164      	bne.n	801d2dc <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801d212:	4b30      	ldr	r3, [pc, #192]	; (801d2d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801d214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d218:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d21c:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801d21e:	69bb      	ldr	r3, [r7, #24]
 801d220:	2b00      	cmp	r3, #0
 801d222:	d01f      	beq.n	801d264 <HAL_RCCEx_PeriphCLKConfig+0x210>
 801d224:	687b      	ldr	r3, [r7, #4]
 801d226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d22a:	69ba      	ldr	r2, [r7, #24]
 801d22c:	429a      	cmp	r2, r3
 801d22e:	d019      	beq.n	801d264 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801d230:	4b28      	ldr	r3, [pc, #160]	; (801d2d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801d232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d23a:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801d23c:	4b25      	ldr	r3, [pc, #148]	; (801d2d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801d23e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d242:	4a24      	ldr	r2, [pc, #144]	; (801d2d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801d244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801d248:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 801d24c:	4b21      	ldr	r3, [pc, #132]	; (801d2d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801d24e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d252:	4a20      	ldr	r2, [pc, #128]	; (801d2d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801d254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801d258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 801d25c:	4a1d      	ldr	r2, [pc, #116]	; (801d2d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801d25e:	69bb      	ldr	r3, [r7, #24]
 801d260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801d264:	69bb      	ldr	r3, [r7, #24]
 801d266:	f003 0301 	and.w	r3, r3, #1
 801d26a:	2b00      	cmp	r3, #0
 801d26c:	d01f      	beq.n	801d2ae <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d26e:	f7fb fcf1 	bl	8018c54 <HAL_GetTick>
 801d272:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801d274:	e012      	b.n	801d29c <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d276:	f7fb fced 	bl	8018c54 <HAL_GetTick>
 801d27a:	4602      	mov	r2, r0
 801d27c:	693b      	ldr	r3, [r7, #16]
 801d27e:	1ad3      	subs	r3, r2, r3
 801d280:	f241 3288 	movw	r2, #5000	; 0x1388
 801d284:	4293      	cmp	r3, r2
 801d286:	d909      	bls.n	801d29c <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801d288:	4b12      	ldr	r3, [pc, #72]	; (801d2d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801d28a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d28e:	f003 0302 	and.w	r3, r3, #2
 801d292:	2b00      	cmp	r3, #0
 801d294:	d10a      	bne.n	801d2ac <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 801d296:	2303      	movs	r3, #3
 801d298:	77fb      	strb	r3, [r7, #31]
            }
            break;
 801d29a:	e007      	b.n	801d2ac <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801d29c:	4b0d      	ldr	r3, [pc, #52]	; (801d2d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801d29e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d2a2:	f003 0302 	and.w	r3, r3, #2
 801d2a6:	2b00      	cmp	r3, #0
 801d2a8:	d0e5      	beq.n	801d276 <HAL_RCCEx_PeriphCLKConfig+0x222>
 801d2aa:	e000      	b.n	801d2ae <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 801d2ac:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 801d2ae:	7ffb      	ldrb	r3, [r7, #31]
 801d2b0:	2b00      	cmp	r3, #0
 801d2b2:	d10c      	bne.n	801d2ce <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801d2b4:	4b07      	ldr	r3, [pc, #28]	; (801d2d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801d2b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d2ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801d2be:	687b      	ldr	r3, [r7, #4]
 801d2c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d2c4:	4903      	ldr	r1, [pc, #12]	; (801d2d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801d2c6:	4313      	orrs	r3, r2
 801d2c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801d2cc:	e008      	b.n	801d2e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801d2ce:	7ffb      	ldrb	r3, [r7, #31]
 801d2d0:	77bb      	strb	r3, [r7, #30]
 801d2d2:	e005      	b.n	801d2e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 801d2d4:	40021000 	.word	0x40021000
 801d2d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d2dc:	7ffb      	ldrb	r3, [r7, #31]
 801d2de:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801d2e0:	7dfb      	ldrb	r3, [r7, #23]
 801d2e2:	2b01      	cmp	r3, #1
 801d2e4:	d105      	bne.n	801d2f2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801d2e6:	4b9c      	ldr	r3, [pc, #624]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d2e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d2ea:	4a9b      	ldr	r2, [pc, #620]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d2ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801d2f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801d2f2:	687b      	ldr	r3, [r7, #4]
 801d2f4:	681b      	ldr	r3, [r3, #0]
 801d2f6:	f003 0301 	and.w	r3, r3, #1
 801d2fa:	2b00      	cmp	r3, #0
 801d2fc:	d00a      	beq.n	801d314 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801d2fe:	4b96      	ldr	r3, [pc, #600]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d304:	f023 0203 	bic.w	r2, r3, #3
 801d308:	687b      	ldr	r3, [r7, #4]
 801d30a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d30c:	4992      	ldr	r1, [pc, #584]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d30e:	4313      	orrs	r3, r2
 801d310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801d314:	687b      	ldr	r3, [r7, #4]
 801d316:	681b      	ldr	r3, [r3, #0]
 801d318:	f003 0302 	and.w	r3, r3, #2
 801d31c:	2b00      	cmp	r3, #0
 801d31e:	d00a      	beq.n	801d336 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801d320:	4b8d      	ldr	r3, [pc, #564]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d326:	f023 020c 	bic.w	r2, r3, #12
 801d32a:	687b      	ldr	r3, [r7, #4]
 801d32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d32e:	498a      	ldr	r1, [pc, #552]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d330:	4313      	orrs	r3, r2
 801d332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801d336:	687b      	ldr	r3, [r7, #4]
 801d338:	681b      	ldr	r3, [r3, #0]
 801d33a:	f003 0304 	and.w	r3, r3, #4
 801d33e:	2b00      	cmp	r3, #0
 801d340:	d00a      	beq.n	801d358 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801d342:	4b85      	ldr	r3, [pc, #532]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d348:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801d34c:	687b      	ldr	r3, [r7, #4]
 801d34e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d350:	4981      	ldr	r1, [pc, #516]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d352:	4313      	orrs	r3, r2
 801d354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801d358:	687b      	ldr	r3, [r7, #4]
 801d35a:	681b      	ldr	r3, [r3, #0]
 801d35c:	f003 0308 	and.w	r3, r3, #8
 801d360:	2b00      	cmp	r3, #0
 801d362:	d00a      	beq.n	801d37a <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801d364:	4b7c      	ldr	r3, [pc, #496]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d36a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801d36e:	687b      	ldr	r3, [r7, #4]
 801d370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d372:	4979      	ldr	r1, [pc, #484]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d374:	4313      	orrs	r3, r2
 801d376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801d37a:	687b      	ldr	r3, [r7, #4]
 801d37c:	681b      	ldr	r3, [r3, #0]
 801d37e:	f003 0310 	and.w	r3, r3, #16
 801d382:	2b00      	cmp	r3, #0
 801d384:	d00a      	beq.n	801d39c <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801d386:	4b74      	ldr	r3, [pc, #464]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d38c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801d390:	687b      	ldr	r3, [r7, #4]
 801d392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d394:	4970      	ldr	r1, [pc, #448]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d396:	4313      	orrs	r3, r2
 801d398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801d39c:	687b      	ldr	r3, [r7, #4]
 801d39e:	681b      	ldr	r3, [r3, #0]
 801d3a0:	f003 0320 	and.w	r3, r3, #32
 801d3a4:	2b00      	cmp	r3, #0
 801d3a6:	d00a      	beq.n	801d3be <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801d3a8:	4b6b      	ldr	r3, [pc, #428]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d3aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d3ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801d3b2:	687b      	ldr	r3, [r7, #4]
 801d3b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d3b6:	4968      	ldr	r1, [pc, #416]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d3b8:	4313      	orrs	r3, r2
 801d3ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801d3be:	687b      	ldr	r3, [r7, #4]
 801d3c0:	681b      	ldr	r3, [r3, #0]
 801d3c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801d3c6:	2b00      	cmp	r3, #0
 801d3c8:	d00a      	beq.n	801d3e0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801d3ca:	4b63      	ldr	r3, [pc, #396]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d3cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d3d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801d3d4:	687b      	ldr	r3, [r7, #4]
 801d3d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d3d8:	495f      	ldr	r1, [pc, #380]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d3da:	4313      	orrs	r3, r2
 801d3dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 801d3e0:	687b      	ldr	r3, [r7, #4]
 801d3e2:	681b      	ldr	r3, [r3, #0]
 801d3e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801d3e8:	2b00      	cmp	r3, #0
 801d3ea:	d00a      	beq.n	801d402 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801d3ec:	4b5a      	ldr	r3, [pc, #360]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d3ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d3f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801d3f6:	687b      	ldr	r3, [r7, #4]
 801d3f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d3fa:	4957      	ldr	r1, [pc, #348]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d3fc:	4313      	orrs	r3, r2
 801d3fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 801d402:	687b      	ldr	r3, [r7, #4]
 801d404:	681b      	ldr	r3, [r3, #0]
 801d406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801d40a:	2b00      	cmp	r3, #0
 801d40c:	d00a      	beq.n	801d424 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 801d40e:	4b52      	ldr	r3, [pc, #328]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d414:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801d418:	687b      	ldr	r3, [r7, #4]
 801d41a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d41c:	494e      	ldr	r1, [pc, #312]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d41e:	4313      	orrs	r3, r2
 801d420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 801d424:	687b      	ldr	r3, [r7, #4]
 801d426:	681b      	ldr	r3, [r3, #0]
 801d428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d42c:	2b00      	cmp	r3, #0
 801d42e:	d031      	beq.n	801d494 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 801d430:	687b      	ldr	r3, [r7, #4]
 801d432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d434:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d438:	d00e      	beq.n	801d458 <HAL_RCCEx_PeriphCLKConfig+0x404>
 801d43a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d43e:	d814      	bhi.n	801d46a <HAL_RCCEx_PeriphCLKConfig+0x416>
 801d440:	2b00      	cmp	r3, #0
 801d442:	d015      	beq.n	801d470 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 801d444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801d448:	d10f      	bne.n	801d46a <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d44a:	4b43      	ldr	r3, [pc, #268]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d44c:	68db      	ldr	r3, [r3, #12]
 801d44e:	4a42      	ldr	r2, [pc, #264]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d450:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d454:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 801d456:	e00c      	b.n	801d472 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801d458:	687b      	ldr	r3, [r7, #4]
 801d45a:	3304      	adds	r3, #4
 801d45c:	2100      	movs	r1, #0
 801d45e:	4618      	mov	r0, r3
 801d460:	f000 f97c 	bl	801d75c <RCCEx_PLLSAI1_Config>
 801d464:	4603      	mov	r3, r0
 801d466:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 801d468:	e003      	b.n	801d472 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 801d46a:	2301      	movs	r3, #1
 801d46c:	77fb      	strb	r3, [r7, #31]
        break;
 801d46e:	e000      	b.n	801d472 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 801d470:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d472:	7ffb      	ldrb	r3, [r7, #31]
 801d474:	2b00      	cmp	r3, #0
 801d476:	d10b      	bne.n	801d490 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801d478:	4b37      	ldr	r3, [pc, #220]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d47a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d47e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801d482:	687b      	ldr	r3, [r7, #4]
 801d484:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d486:	4934      	ldr	r1, [pc, #208]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d488:	4313      	orrs	r3, r2
 801d48a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 801d48e:	e001      	b.n	801d494 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d490:	7ffb      	ldrb	r3, [r7, #31]
 801d492:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801d494:	687b      	ldr	r3, [r7, #4]
 801d496:	681b      	ldr	r3, [r3, #0]
 801d498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d49c:	2b00      	cmp	r3, #0
 801d49e:	d00a      	beq.n	801d4b6 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801d4a0:	4b2d      	ldr	r3, [pc, #180]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d4a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d4a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801d4aa:	687b      	ldr	r3, [r7, #4]
 801d4ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d4ae:	492a      	ldr	r1, [pc, #168]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d4b0:	4313      	orrs	r3, r2
 801d4b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801d4b6:	687b      	ldr	r3, [r7, #4]
 801d4b8:	681b      	ldr	r3, [r3, #0]
 801d4ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d4be:	2b00      	cmp	r3, #0
 801d4c0:	d00a      	beq.n	801d4d8 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801d4c2:	4b25      	ldr	r3, [pc, #148]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d4c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d4c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801d4cc:	687b      	ldr	r3, [r7, #4]
 801d4ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d4d0:	4921      	ldr	r1, [pc, #132]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d4d2:	4313      	orrs	r3, r2
 801d4d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801d4d8:	687b      	ldr	r3, [r7, #4]
 801d4da:	681b      	ldr	r3, [r3, #0]
 801d4dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d4e0:	2b00      	cmp	r3, #0
 801d4e2:	d00a      	beq.n	801d4fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801d4e4:	4b1c      	ldr	r3, [pc, #112]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d4e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d4ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801d4ee:	687b      	ldr	r3, [r7, #4]
 801d4f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d4f2:	4919      	ldr	r1, [pc, #100]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d4f4:	4313      	orrs	r3, r2
 801d4f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801d4fa:	687b      	ldr	r3, [r7, #4]
 801d4fc:	681b      	ldr	r3, [r3, #0]
 801d4fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801d502:	2b00      	cmp	r3, #0
 801d504:	d00a      	beq.n	801d51c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801d506:	4b14      	ldr	r3, [pc, #80]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d508:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801d50c:	f023 0203 	bic.w	r2, r3, #3
 801d510:	687b      	ldr	r3, [r7, #4]
 801d512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d514:	4910      	ldr	r1, [pc, #64]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d516:	4313      	orrs	r3, r2
 801d518:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801d51c:	687b      	ldr	r3, [r7, #4]
 801d51e:	681b      	ldr	r3, [r3, #0]
 801d520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d524:	2b00      	cmp	r3, #0
 801d526:	d02b      	beq.n	801d580 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801d528:	4b0b      	ldr	r3, [pc, #44]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d52a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d52e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801d532:	687b      	ldr	r3, [r7, #4]
 801d534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d536:	4908      	ldr	r1, [pc, #32]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d538:	4313      	orrs	r3, r2
 801d53a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801d53e:	687b      	ldr	r3, [r7, #4]
 801d540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d542:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d546:	d109      	bne.n	801d55c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d548:	4b03      	ldr	r3, [pc, #12]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d54a:	68db      	ldr	r3, [r3, #12]
 801d54c:	4a02      	ldr	r2, [pc, #8]	; (801d558 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801d54e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d552:	60d3      	str	r3, [r2, #12]
 801d554:	e014      	b.n	801d580 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 801d556:	bf00      	nop
 801d558:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 801d55c:	687b      	ldr	r3, [r7, #4]
 801d55e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d560:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801d564:	d10c      	bne.n	801d580 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801d566:	687b      	ldr	r3, [r7, #4]
 801d568:	3304      	adds	r3, #4
 801d56a:	2101      	movs	r1, #1
 801d56c:	4618      	mov	r0, r3
 801d56e:	f000 f8f5 	bl	801d75c <RCCEx_PLLSAI1_Config>
 801d572:	4603      	mov	r3, r0
 801d574:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 801d576:	7ffb      	ldrb	r3, [r7, #31]
 801d578:	2b00      	cmp	r3, #0
 801d57a:	d001      	beq.n	801d580 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 801d57c:	7ffb      	ldrb	r3, [r7, #31]
 801d57e:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 801d580:	687b      	ldr	r3, [r7, #4]
 801d582:	681b      	ldr	r3, [r3, #0]
 801d584:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801d588:	2b00      	cmp	r3, #0
 801d58a:	d04a      	beq.n	801d622 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 801d58c:	687b      	ldr	r3, [r7, #4]
 801d58e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d590:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d594:	d108      	bne.n	801d5a8 <HAL_RCCEx_PeriphCLKConfig+0x554>
 801d596:	4b70      	ldr	r3, [pc, #448]	; (801d758 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801d598:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801d59c:	4a6e      	ldr	r2, [pc, #440]	; (801d758 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801d59e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801d5a2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 801d5a6:	e012      	b.n	801d5ce <HAL_RCCEx_PeriphCLKConfig+0x57a>
 801d5a8:	4b6b      	ldr	r3, [pc, #428]	; (801d758 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801d5aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d5ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801d5b2:	687b      	ldr	r3, [r7, #4]
 801d5b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d5b6:	4968      	ldr	r1, [pc, #416]	; (801d758 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801d5b8:	4313      	orrs	r3, r2
 801d5ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 801d5be:	4b66      	ldr	r3, [pc, #408]	; (801d758 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801d5c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801d5c4:	4a64      	ldr	r2, [pc, #400]	; (801d758 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801d5c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801d5ca:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 801d5ce:	687b      	ldr	r3, [r7, #4]
 801d5d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d5d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801d5d6:	d10d      	bne.n	801d5f4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801d5d8:	687b      	ldr	r3, [r7, #4]
 801d5da:	3304      	adds	r3, #4
 801d5dc:	2101      	movs	r1, #1
 801d5de:	4618      	mov	r0, r3
 801d5e0:	f000 f8bc 	bl	801d75c <RCCEx_PLLSAI1_Config>
 801d5e4:	4603      	mov	r3, r0
 801d5e6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 801d5e8:	7ffb      	ldrb	r3, [r7, #31]
 801d5ea:	2b00      	cmp	r3, #0
 801d5ec:	d019      	beq.n	801d622 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 801d5ee:	7ffb      	ldrb	r3, [r7, #31]
 801d5f0:	77bb      	strb	r3, [r7, #30]
 801d5f2:	e016      	b.n	801d622 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 801d5f4:	687b      	ldr	r3, [r7, #4]
 801d5f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d5f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d5fc:	d106      	bne.n	801d60c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d5fe:	4b56      	ldr	r3, [pc, #344]	; (801d758 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801d600:	68db      	ldr	r3, [r3, #12]
 801d602:	4a55      	ldr	r2, [pc, #340]	; (801d758 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801d604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d608:	60d3      	str	r3, [r2, #12]
 801d60a:	e00a      	b.n	801d622 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 801d60c:	687b      	ldr	r3, [r7, #4]
 801d60e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d610:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d614:	d105      	bne.n	801d622 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 801d616:	4b50      	ldr	r3, [pc, #320]	; (801d758 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801d618:	68db      	ldr	r3, [r3, #12]
 801d61a:	4a4f      	ldr	r2, [pc, #316]	; (801d758 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801d61c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801d620:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801d622:	687b      	ldr	r3, [r7, #4]
 801d624:	681b      	ldr	r3, [r3, #0]
 801d626:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801d62a:	2b00      	cmp	r3, #0
 801d62c:	d028      	beq.n	801d680 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801d62e:	4b4a      	ldr	r3, [pc, #296]	; (801d758 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801d630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d634:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801d638:	687b      	ldr	r3, [r7, #4]
 801d63a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d63c:	4946      	ldr	r1, [pc, #280]	; (801d758 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801d63e:	4313      	orrs	r3, r2
 801d640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801d644:	687b      	ldr	r3, [r7, #4]
 801d646:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d648:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d64c:	d106      	bne.n	801d65c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d64e:	4b42      	ldr	r3, [pc, #264]	; (801d758 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801d650:	68db      	ldr	r3, [r3, #12]
 801d652:	4a41      	ldr	r2, [pc, #260]	; (801d758 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801d654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d658:	60d3      	str	r3, [r2, #12]
 801d65a:	e011      	b.n	801d680 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 801d65c:	687b      	ldr	r3, [r7, #4]
 801d65e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d660:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801d664:	d10c      	bne.n	801d680 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801d666:	687b      	ldr	r3, [r7, #4]
 801d668:	3304      	adds	r3, #4
 801d66a:	2101      	movs	r1, #1
 801d66c:	4618      	mov	r0, r3
 801d66e:	f000 f875 	bl	801d75c <RCCEx_PLLSAI1_Config>
 801d672:	4603      	mov	r3, r0
 801d674:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 801d676:	7ffb      	ldrb	r3, [r7, #31]
 801d678:	2b00      	cmp	r3, #0
 801d67a:	d001      	beq.n	801d680 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 801d67c:	7ffb      	ldrb	r3, [r7, #31]
 801d67e:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801d680:	687b      	ldr	r3, [r7, #4]
 801d682:	681b      	ldr	r3, [r3, #0]
 801d684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801d688:	2b00      	cmp	r3, #0
 801d68a:	d01e      	beq.n	801d6ca <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801d68c:	4b32      	ldr	r3, [pc, #200]	; (801d758 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801d68e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d692:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801d696:	687b      	ldr	r3, [r7, #4]
 801d698:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801d69c:	492e      	ldr	r1, [pc, #184]	; (801d758 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801d69e:	4313      	orrs	r3, r2
 801d6a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 801d6a4:	687b      	ldr	r3, [r7, #4]
 801d6a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801d6aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d6ae:	d10c      	bne.n	801d6ca <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 801d6b0:	687b      	ldr	r3, [r7, #4]
 801d6b2:	3304      	adds	r3, #4
 801d6b4:	2102      	movs	r1, #2
 801d6b6:	4618      	mov	r0, r3
 801d6b8:	f000 f850 	bl	801d75c <RCCEx_PLLSAI1_Config>
 801d6bc:	4603      	mov	r3, r0
 801d6be:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 801d6c0:	7ffb      	ldrb	r3, [r7, #31]
 801d6c2:	2b00      	cmp	r3, #0
 801d6c4:	d001      	beq.n	801d6ca <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 801d6c6:	7ffb      	ldrb	r3, [r7, #31]
 801d6c8:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801d6ca:	687b      	ldr	r3, [r7, #4]
 801d6cc:	681b      	ldr	r3, [r3, #0]
 801d6ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801d6d2:	2b00      	cmp	r3, #0
 801d6d4:	d00b      	beq.n	801d6ee <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801d6d6:	4b20      	ldr	r3, [pc, #128]	; (801d758 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801d6d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801d6dc:	f023 0204 	bic.w	r2, r3, #4
 801d6e0:	687b      	ldr	r3, [r7, #4]
 801d6e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d6e6:	491c      	ldr	r1, [pc, #112]	; (801d758 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801d6e8:	4313      	orrs	r3, r2
 801d6ea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 801d6ee:	687b      	ldr	r3, [r7, #4]
 801d6f0:	681b      	ldr	r3, [r3, #0]
 801d6f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801d6f6:	2b00      	cmp	r3, #0
 801d6f8:	d00b      	beq.n	801d712 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 801d6fa:	4b17      	ldr	r3, [pc, #92]	; (801d758 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801d6fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801d700:	f023 0218 	bic.w	r2, r3, #24
 801d704:	687b      	ldr	r3, [r7, #4]
 801d706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d70a:	4913      	ldr	r1, [pc, #76]	; (801d758 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801d70c:	4313      	orrs	r3, r2
 801d70e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 801d712:	687b      	ldr	r3, [r7, #4]
 801d714:	681b      	ldr	r3, [r3, #0]
 801d716:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801d71a:	2b00      	cmp	r3, #0
 801d71c:	d017      	beq.n	801d74e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 801d71e:	4b0e      	ldr	r3, [pc, #56]	; (801d758 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801d720:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801d724:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801d728:	687b      	ldr	r3, [r7, #4]
 801d72a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d72e:	490a      	ldr	r1, [pc, #40]	; (801d758 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801d730:	4313      	orrs	r3, r2
 801d732:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 801d736:	687b      	ldr	r3, [r7, #4]
 801d738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d73c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801d740:	d105      	bne.n	801d74e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d742:	4b05      	ldr	r3, [pc, #20]	; (801d758 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801d744:	68db      	ldr	r3, [r3, #12]
 801d746:	4a04      	ldr	r2, [pc, #16]	; (801d758 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801d748:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d74c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 801d74e:	7fbb      	ldrb	r3, [r7, #30]
}
 801d750:	4618      	mov	r0, r3
 801d752:	3720      	adds	r7, #32
 801d754:	46bd      	mov	sp, r7
 801d756:	bd80      	pop	{r7, pc}
 801d758:	40021000 	.word	0x40021000

0801d75c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 801d75c:	b580      	push	{r7, lr}
 801d75e:	b084      	sub	sp, #16
 801d760:	af00      	add	r7, sp, #0
 801d762:	6078      	str	r0, [r7, #4]
 801d764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801d766:	2300      	movs	r3, #0
 801d768:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 801d76a:	687b      	ldr	r3, [r7, #4]
 801d76c:	681b      	ldr	r3, [r3, #0]
 801d76e:	2b03      	cmp	r3, #3
 801d770:	d018      	beq.n	801d7a4 <RCCEx_PLLSAI1_Config+0x48>
 801d772:	2b03      	cmp	r3, #3
 801d774:	d81f      	bhi.n	801d7b6 <RCCEx_PLLSAI1_Config+0x5a>
 801d776:	2b01      	cmp	r3, #1
 801d778:	d002      	beq.n	801d780 <RCCEx_PLLSAI1_Config+0x24>
 801d77a:	2b02      	cmp	r3, #2
 801d77c:	d009      	beq.n	801d792 <RCCEx_PLLSAI1_Config+0x36>
 801d77e:	e01a      	b.n	801d7b6 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801d780:	4b65      	ldr	r3, [pc, #404]	; (801d918 <RCCEx_PLLSAI1_Config+0x1bc>)
 801d782:	681b      	ldr	r3, [r3, #0]
 801d784:	f003 0302 	and.w	r3, r3, #2
 801d788:	2b00      	cmp	r3, #0
 801d78a:	d117      	bne.n	801d7bc <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 801d78c:	2301      	movs	r3, #1
 801d78e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801d790:	e014      	b.n	801d7bc <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 801d792:	4b61      	ldr	r3, [pc, #388]	; (801d918 <RCCEx_PLLSAI1_Config+0x1bc>)
 801d794:	681b      	ldr	r3, [r3, #0]
 801d796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801d79a:	2b00      	cmp	r3, #0
 801d79c:	d110      	bne.n	801d7c0 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 801d79e:	2301      	movs	r3, #1
 801d7a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801d7a2:	e00d      	b.n	801d7c0 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 801d7a4:	4b5c      	ldr	r3, [pc, #368]	; (801d918 <RCCEx_PLLSAI1_Config+0x1bc>)
 801d7a6:	681b      	ldr	r3, [r3, #0]
 801d7a8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 801d7ac:	2b00      	cmp	r3, #0
 801d7ae:	d109      	bne.n	801d7c4 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 801d7b0:	2301      	movs	r3, #1
 801d7b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801d7b4:	e006      	b.n	801d7c4 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 801d7b6:	2301      	movs	r3, #1
 801d7b8:	73fb      	strb	r3, [r7, #15]
      break;
 801d7ba:	e004      	b.n	801d7c6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 801d7bc:	bf00      	nop
 801d7be:	e002      	b.n	801d7c6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 801d7c0:	bf00      	nop
 801d7c2:	e000      	b.n	801d7c6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 801d7c4:	bf00      	nop
  }

  if (status == HAL_OK)
 801d7c6:	7bfb      	ldrb	r3, [r7, #15]
 801d7c8:	2b00      	cmp	r3, #0
 801d7ca:	f040 809f 	bne.w	801d90c <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 801d7ce:	4b52      	ldr	r3, [pc, #328]	; (801d918 <RCCEx_PLLSAI1_Config+0x1bc>)
 801d7d0:	681b      	ldr	r3, [r3, #0]
 801d7d2:	4a51      	ldr	r2, [pc, #324]	; (801d918 <RCCEx_PLLSAI1_Config+0x1bc>)
 801d7d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801d7d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d7da:	f7fb fa3b 	bl	8018c54 <HAL_GetTick>
 801d7de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801d7e0:	e00f      	b.n	801d802 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801d7e2:	f7fb fa37 	bl	8018c54 <HAL_GetTick>
 801d7e6:	4602      	mov	r2, r0
 801d7e8:	68bb      	ldr	r3, [r7, #8]
 801d7ea:	1ad3      	subs	r3, r2, r3
 801d7ec:	2b02      	cmp	r3, #2
 801d7ee:	d908      	bls.n	801d802 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801d7f0:	4b49      	ldr	r3, [pc, #292]	; (801d918 <RCCEx_PLLSAI1_Config+0x1bc>)
 801d7f2:	681b      	ldr	r3, [r3, #0]
 801d7f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d7f8:	2b00      	cmp	r3, #0
 801d7fa:	d009      	beq.n	801d810 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 801d7fc:	2303      	movs	r3, #3
 801d7fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801d800:	e006      	b.n	801d810 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801d802:	4b45      	ldr	r3, [pc, #276]	; (801d918 <RCCEx_PLLSAI1_Config+0x1bc>)
 801d804:	681b      	ldr	r3, [r3, #0]
 801d806:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d80a:	2b00      	cmp	r3, #0
 801d80c:	d1e9      	bne.n	801d7e2 <RCCEx_PLLSAI1_Config+0x86>
 801d80e:	e000      	b.n	801d812 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 801d810:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 801d812:	7bfb      	ldrb	r3, [r7, #15]
 801d814:	2b00      	cmp	r3, #0
 801d816:	d179      	bne.n	801d90c <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 801d818:	683b      	ldr	r3, [r7, #0]
 801d81a:	2b00      	cmp	r3, #0
 801d81c:	d116      	bne.n	801d84c <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801d81e:	4b3e      	ldr	r3, [pc, #248]	; (801d918 <RCCEx_PLLSAI1_Config+0x1bc>)
 801d820:	691a      	ldr	r2, [r3, #16]
 801d822:	4b3e      	ldr	r3, [pc, #248]	; (801d91c <RCCEx_PLLSAI1_Config+0x1c0>)
 801d824:	4013      	ands	r3, r2
 801d826:	687a      	ldr	r2, [r7, #4]
 801d828:	6892      	ldr	r2, [r2, #8]
 801d82a:	0211      	lsls	r1, r2, #8
 801d82c:	687a      	ldr	r2, [r7, #4]
 801d82e:	68d2      	ldr	r2, [r2, #12]
 801d830:	06d2      	lsls	r2, r2, #27
 801d832:	4311      	orrs	r1, r2
 801d834:	687a      	ldr	r2, [r7, #4]
 801d836:	6852      	ldr	r2, [r2, #4]
 801d838:	3a01      	subs	r2, #1
 801d83a:	0112      	lsls	r2, r2, #4
 801d83c:	4311      	orrs	r1, r2
 801d83e:	687a      	ldr	r2, [r7, #4]
 801d840:	6812      	ldr	r2, [r2, #0]
 801d842:	430a      	orrs	r2, r1
 801d844:	4934      	ldr	r1, [pc, #208]	; (801d918 <RCCEx_PLLSAI1_Config+0x1bc>)
 801d846:	4313      	orrs	r3, r2
 801d848:	610b      	str	r3, [r1, #16]
 801d84a:	e033      	b.n	801d8b4 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 801d84c:	683b      	ldr	r3, [r7, #0]
 801d84e:	2b01      	cmp	r3, #1
 801d850:	d118      	bne.n	801d884 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801d852:	4b31      	ldr	r3, [pc, #196]	; (801d918 <RCCEx_PLLSAI1_Config+0x1bc>)
 801d854:	691a      	ldr	r2, [r3, #16]
 801d856:	4b32      	ldr	r3, [pc, #200]	; (801d920 <RCCEx_PLLSAI1_Config+0x1c4>)
 801d858:	4013      	ands	r3, r2
 801d85a:	687a      	ldr	r2, [r7, #4]
 801d85c:	6892      	ldr	r2, [r2, #8]
 801d85e:	0211      	lsls	r1, r2, #8
 801d860:	687a      	ldr	r2, [r7, #4]
 801d862:	6912      	ldr	r2, [r2, #16]
 801d864:	0852      	lsrs	r2, r2, #1
 801d866:	3a01      	subs	r2, #1
 801d868:	0552      	lsls	r2, r2, #21
 801d86a:	4311      	orrs	r1, r2
 801d86c:	687a      	ldr	r2, [r7, #4]
 801d86e:	6852      	ldr	r2, [r2, #4]
 801d870:	3a01      	subs	r2, #1
 801d872:	0112      	lsls	r2, r2, #4
 801d874:	4311      	orrs	r1, r2
 801d876:	687a      	ldr	r2, [r7, #4]
 801d878:	6812      	ldr	r2, [r2, #0]
 801d87a:	430a      	orrs	r2, r1
 801d87c:	4926      	ldr	r1, [pc, #152]	; (801d918 <RCCEx_PLLSAI1_Config+0x1bc>)
 801d87e:	4313      	orrs	r3, r2
 801d880:	610b      	str	r3, [r1, #16]
 801d882:	e017      	b.n	801d8b4 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801d884:	4b24      	ldr	r3, [pc, #144]	; (801d918 <RCCEx_PLLSAI1_Config+0x1bc>)
 801d886:	691a      	ldr	r2, [r3, #16]
 801d888:	4b26      	ldr	r3, [pc, #152]	; (801d924 <RCCEx_PLLSAI1_Config+0x1c8>)
 801d88a:	4013      	ands	r3, r2
 801d88c:	687a      	ldr	r2, [r7, #4]
 801d88e:	6892      	ldr	r2, [r2, #8]
 801d890:	0211      	lsls	r1, r2, #8
 801d892:	687a      	ldr	r2, [r7, #4]
 801d894:	6952      	ldr	r2, [r2, #20]
 801d896:	0852      	lsrs	r2, r2, #1
 801d898:	3a01      	subs	r2, #1
 801d89a:	0652      	lsls	r2, r2, #25
 801d89c:	4311      	orrs	r1, r2
 801d89e:	687a      	ldr	r2, [r7, #4]
 801d8a0:	6852      	ldr	r2, [r2, #4]
 801d8a2:	3a01      	subs	r2, #1
 801d8a4:	0112      	lsls	r2, r2, #4
 801d8a6:	4311      	orrs	r1, r2
 801d8a8:	687a      	ldr	r2, [r7, #4]
 801d8aa:	6812      	ldr	r2, [r2, #0]
 801d8ac:	430a      	orrs	r2, r1
 801d8ae:	491a      	ldr	r1, [pc, #104]	; (801d918 <RCCEx_PLLSAI1_Config+0x1bc>)
 801d8b0:	4313      	orrs	r3, r2
 801d8b2:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 801d8b4:	4b18      	ldr	r3, [pc, #96]	; (801d918 <RCCEx_PLLSAI1_Config+0x1bc>)
 801d8b6:	681b      	ldr	r3, [r3, #0]
 801d8b8:	4a17      	ldr	r2, [pc, #92]	; (801d918 <RCCEx_PLLSAI1_Config+0x1bc>)
 801d8ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801d8be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d8c0:	f7fb f9c8 	bl	8018c54 <HAL_GetTick>
 801d8c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 801d8c6:	e00f      	b.n	801d8e8 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801d8c8:	f7fb f9c4 	bl	8018c54 <HAL_GetTick>
 801d8cc:	4602      	mov	r2, r0
 801d8ce:	68bb      	ldr	r3, [r7, #8]
 801d8d0:	1ad3      	subs	r3, r2, r3
 801d8d2:	2b02      	cmp	r3, #2
 801d8d4:	d908      	bls.n	801d8e8 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 801d8d6:	4b10      	ldr	r3, [pc, #64]	; (801d918 <RCCEx_PLLSAI1_Config+0x1bc>)
 801d8d8:	681b      	ldr	r3, [r3, #0]
 801d8da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d8de:	2b00      	cmp	r3, #0
 801d8e0:	d109      	bne.n	801d8f6 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 801d8e2:	2303      	movs	r3, #3
 801d8e4:	73fb      	strb	r3, [r7, #15]
          }
          break;
 801d8e6:	e006      	b.n	801d8f6 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 801d8e8:	4b0b      	ldr	r3, [pc, #44]	; (801d918 <RCCEx_PLLSAI1_Config+0x1bc>)
 801d8ea:	681b      	ldr	r3, [r3, #0]
 801d8ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d8f0:	2b00      	cmp	r3, #0
 801d8f2:	d0e9      	beq.n	801d8c8 <RCCEx_PLLSAI1_Config+0x16c>
 801d8f4:	e000      	b.n	801d8f8 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 801d8f6:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 801d8f8:	7bfb      	ldrb	r3, [r7, #15]
 801d8fa:	2b00      	cmp	r3, #0
 801d8fc:	d106      	bne.n	801d90c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 801d8fe:	4b06      	ldr	r3, [pc, #24]	; (801d918 <RCCEx_PLLSAI1_Config+0x1bc>)
 801d900:	691a      	ldr	r2, [r3, #16]
 801d902:	687b      	ldr	r3, [r7, #4]
 801d904:	699b      	ldr	r3, [r3, #24]
 801d906:	4904      	ldr	r1, [pc, #16]	; (801d918 <RCCEx_PLLSAI1_Config+0x1bc>)
 801d908:	4313      	orrs	r3, r2
 801d90a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 801d90c:	7bfb      	ldrb	r3, [r7, #15]
}
 801d90e:	4618      	mov	r0, r3
 801d910:	3710      	adds	r7, #16
 801d912:	46bd      	mov	sp, r7
 801d914:	bd80      	pop	{r7, pc}
 801d916:	bf00      	nop
 801d918:	40021000 	.word	0x40021000
 801d91c:	07ff800c 	.word	0x07ff800c
 801d920:	ff9f800c 	.word	0xff9f800c
 801d924:	f9ff800c 	.word	0xf9ff800c

0801d928 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 801d928:	b580      	push	{r7, lr}
 801d92a:	b084      	sub	sp, #16
 801d92c:	af00      	add	r7, sp, #0
 801d92e:	6078      	str	r0, [r7, #4]
 801d930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801d932:	2300      	movs	r3, #0
 801d934:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 801d936:	687b      	ldr	r3, [r7, #4]
 801d938:	681b      	ldr	r3, [r3, #0]
 801d93a:	2b03      	cmp	r3, #3
 801d93c:	d018      	beq.n	801d970 <RCCEx_PLLSAI2_Config+0x48>
 801d93e:	2b03      	cmp	r3, #3
 801d940:	d81f      	bhi.n	801d982 <RCCEx_PLLSAI2_Config+0x5a>
 801d942:	2b01      	cmp	r3, #1
 801d944:	d002      	beq.n	801d94c <RCCEx_PLLSAI2_Config+0x24>
 801d946:	2b02      	cmp	r3, #2
 801d948:	d009      	beq.n	801d95e <RCCEx_PLLSAI2_Config+0x36>
 801d94a:	e01a      	b.n	801d982 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801d94c:	4b4a      	ldr	r3, [pc, #296]	; (801da78 <RCCEx_PLLSAI2_Config+0x150>)
 801d94e:	681b      	ldr	r3, [r3, #0]
 801d950:	f003 0302 	and.w	r3, r3, #2
 801d954:	2b00      	cmp	r3, #0
 801d956:	d117      	bne.n	801d988 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 801d958:	2301      	movs	r3, #1
 801d95a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801d95c:	e014      	b.n	801d988 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 801d95e:	4b46      	ldr	r3, [pc, #280]	; (801da78 <RCCEx_PLLSAI2_Config+0x150>)
 801d960:	681b      	ldr	r3, [r3, #0]
 801d962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801d966:	2b00      	cmp	r3, #0
 801d968:	d110      	bne.n	801d98c <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 801d96a:	2301      	movs	r3, #1
 801d96c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801d96e:	e00d      	b.n	801d98c <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 801d970:	4b41      	ldr	r3, [pc, #260]	; (801da78 <RCCEx_PLLSAI2_Config+0x150>)
 801d972:	681b      	ldr	r3, [r3, #0]
 801d974:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 801d978:	2b00      	cmp	r3, #0
 801d97a:	d109      	bne.n	801d990 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 801d97c:	2301      	movs	r3, #1
 801d97e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801d980:	e006      	b.n	801d990 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 801d982:	2301      	movs	r3, #1
 801d984:	73fb      	strb	r3, [r7, #15]
      break;
 801d986:	e004      	b.n	801d992 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 801d988:	bf00      	nop
 801d98a:	e002      	b.n	801d992 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 801d98c:	bf00      	nop
 801d98e:	e000      	b.n	801d992 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 801d990:	bf00      	nop
  }

  if (status == HAL_OK)
 801d992:	7bfb      	ldrb	r3, [r7, #15]
 801d994:	2b00      	cmp	r3, #0
 801d996:	d169      	bne.n	801da6c <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 801d998:	4b37      	ldr	r3, [pc, #220]	; (801da78 <RCCEx_PLLSAI2_Config+0x150>)
 801d99a:	681b      	ldr	r3, [r3, #0]
 801d99c:	4a36      	ldr	r2, [pc, #216]	; (801da78 <RCCEx_PLLSAI2_Config+0x150>)
 801d99e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801d9a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d9a4:	f7fb f956 	bl	8018c54 <HAL_GetTick>
 801d9a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 801d9aa:	e00f      	b.n	801d9cc <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 801d9ac:	f7fb f952 	bl	8018c54 <HAL_GetTick>
 801d9b0:	4602      	mov	r2, r0
 801d9b2:	68bb      	ldr	r3, [r7, #8]
 801d9b4:	1ad3      	subs	r3, r2, r3
 801d9b6:	2b02      	cmp	r3, #2
 801d9b8:	d908      	bls.n	801d9cc <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 801d9ba:	4b2f      	ldr	r3, [pc, #188]	; (801da78 <RCCEx_PLLSAI2_Config+0x150>)
 801d9bc:	681b      	ldr	r3, [r3, #0]
 801d9be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d9c2:	2b00      	cmp	r3, #0
 801d9c4:	d009      	beq.n	801d9da <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 801d9c6:	2303      	movs	r3, #3
 801d9c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801d9ca:	e006      	b.n	801d9da <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 801d9cc:	4b2a      	ldr	r3, [pc, #168]	; (801da78 <RCCEx_PLLSAI2_Config+0x150>)
 801d9ce:	681b      	ldr	r3, [r3, #0]
 801d9d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d9d4:	2b00      	cmp	r3, #0
 801d9d6:	d1e9      	bne.n	801d9ac <RCCEx_PLLSAI2_Config+0x84>
 801d9d8:	e000      	b.n	801d9dc <RCCEx_PLLSAI2_Config+0xb4>
        break;
 801d9da:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 801d9dc:	7bfb      	ldrb	r3, [r7, #15]
 801d9de:	2b00      	cmp	r3, #0
 801d9e0:	d144      	bne.n	801da6c <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 801d9e2:	683b      	ldr	r3, [r7, #0]
 801d9e4:	2b00      	cmp	r3, #0
 801d9e6:	d115      	bne.n	801da14 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 801d9e8:	4b23      	ldr	r3, [pc, #140]	; (801da78 <RCCEx_PLLSAI2_Config+0x150>)
 801d9ea:	695a      	ldr	r2, [r3, #20]
 801d9ec:	4b23      	ldr	r3, [pc, #140]	; (801da7c <RCCEx_PLLSAI2_Config+0x154>)
 801d9ee:	4013      	ands	r3, r2
 801d9f0:	687a      	ldr	r2, [r7, #4]
 801d9f2:	6892      	ldr	r2, [r2, #8]
 801d9f4:	0211      	lsls	r1, r2, #8
 801d9f6:	687a      	ldr	r2, [r7, #4]
 801d9f8:	68d2      	ldr	r2, [r2, #12]
 801d9fa:	06d2      	lsls	r2, r2, #27
 801d9fc:	4311      	orrs	r1, r2
 801d9fe:	687a      	ldr	r2, [r7, #4]
 801da00:	6852      	ldr	r2, [r2, #4]
 801da02:	3a01      	subs	r2, #1
 801da04:	0112      	lsls	r2, r2, #4
 801da06:	4311      	orrs	r1, r2
 801da08:	687a      	ldr	r2, [r7, #4]
 801da0a:	6812      	ldr	r2, [r2, #0]
 801da0c:	430a      	orrs	r2, r1
 801da0e:	491a      	ldr	r1, [pc, #104]	; (801da78 <RCCEx_PLLSAI2_Config+0x150>)
 801da10:	4313      	orrs	r3, r2
 801da12:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 801da14:	4b18      	ldr	r3, [pc, #96]	; (801da78 <RCCEx_PLLSAI2_Config+0x150>)
 801da16:	681b      	ldr	r3, [r3, #0]
 801da18:	4a17      	ldr	r2, [pc, #92]	; (801da78 <RCCEx_PLLSAI2_Config+0x150>)
 801da1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801da1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801da20:	f7fb f918 	bl	8018c54 <HAL_GetTick>
 801da24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 801da26:	e00f      	b.n	801da48 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 801da28:	f7fb f914 	bl	8018c54 <HAL_GetTick>
 801da2c:	4602      	mov	r2, r0
 801da2e:	68bb      	ldr	r3, [r7, #8]
 801da30:	1ad3      	subs	r3, r2, r3
 801da32:	2b02      	cmp	r3, #2
 801da34:	d908      	bls.n	801da48 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 801da36:	4b10      	ldr	r3, [pc, #64]	; (801da78 <RCCEx_PLLSAI2_Config+0x150>)
 801da38:	681b      	ldr	r3, [r3, #0]
 801da3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801da3e:	2b00      	cmp	r3, #0
 801da40:	d109      	bne.n	801da56 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 801da42:	2303      	movs	r3, #3
 801da44:	73fb      	strb	r3, [r7, #15]
          }
          break;
 801da46:	e006      	b.n	801da56 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 801da48:	4b0b      	ldr	r3, [pc, #44]	; (801da78 <RCCEx_PLLSAI2_Config+0x150>)
 801da4a:	681b      	ldr	r3, [r3, #0]
 801da4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801da50:	2b00      	cmp	r3, #0
 801da52:	d0e9      	beq.n	801da28 <RCCEx_PLLSAI2_Config+0x100>
 801da54:	e000      	b.n	801da58 <RCCEx_PLLSAI2_Config+0x130>
          break;
 801da56:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 801da58:	7bfb      	ldrb	r3, [r7, #15]
 801da5a:	2b00      	cmp	r3, #0
 801da5c:	d106      	bne.n	801da6c <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 801da5e:	4b06      	ldr	r3, [pc, #24]	; (801da78 <RCCEx_PLLSAI2_Config+0x150>)
 801da60:	695a      	ldr	r2, [r3, #20]
 801da62:	687b      	ldr	r3, [r7, #4]
 801da64:	691b      	ldr	r3, [r3, #16]
 801da66:	4904      	ldr	r1, [pc, #16]	; (801da78 <RCCEx_PLLSAI2_Config+0x150>)
 801da68:	4313      	orrs	r3, r2
 801da6a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 801da6c:	7bfb      	ldrb	r3, [r7, #15]
}
 801da6e:	4618      	mov	r0, r3
 801da70:	3710      	adds	r7, #16
 801da72:	46bd      	mov	sp, r7
 801da74:	bd80      	pop	{r7, pc}
 801da76:	bf00      	nop
 801da78:	40021000 	.word	0x40021000
 801da7c:	07ff800c 	.word	0x07ff800c

0801da80 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801da80:	b580      	push	{r7, lr}
 801da82:	b084      	sub	sp, #16
 801da84:	af00      	add	r7, sp, #0
 801da86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801da88:	2301      	movs	r3, #1
 801da8a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 801da8c:	687b      	ldr	r3, [r7, #4]
 801da8e:	2b00      	cmp	r3, #0
 801da90:	d066      	beq.n	801db60 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 801da92:	687b      	ldr	r3, [r7, #4]
 801da94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801da98:	b2db      	uxtb	r3, r3
 801da9a:	2b00      	cmp	r3, #0
 801da9c:	d106      	bne.n	801daac <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 801da9e:	687b      	ldr	r3, [r7, #4]
 801daa0:	2200      	movs	r2, #0
 801daa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 801daa6:	6878      	ldr	r0, [r7, #4]
 801daa8:	f7fa fbb0 	bl	801820c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 801daac:	687b      	ldr	r3, [r7, #4]
 801daae:	2202      	movs	r2, #2
 801dab0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801dab4:	687b      	ldr	r3, [r7, #4]
 801dab6:	681b      	ldr	r3, [r3, #0]
 801dab8:	68db      	ldr	r3, [r3, #12]
 801daba:	f003 0310 	and.w	r3, r3, #16
 801dabe:	2b10      	cmp	r3, #16
 801dac0:	d045      	beq.n	801db4e <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801dac2:	4b2a      	ldr	r3, [pc, #168]	; (801db6c <HAL_RTC_Init+0xec>)
 801dac4:	22ca      	movs	r2, #202	; 0xca
 801dac6:	625a      	str	r2, [r3, #36]	; 0x24
 801dac8:	4b28      	ldr	r3, [pc, #160]	; (801db6c <HAL_RTC_Init+0xec>)
 801daca:	2253      	movs	r2, #83	; 0x53
 801dacc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 801dace:	6878      	ldr	r0, [r7, #4]
 801dad0:	f000 f872 	bl	801dbb8 <RTC_EnterInitMode>
 801dad4:	4603      	mov	r3, r0
 801dad6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 801dad8:	7bfb      	ldrb	r3, [r7, #15]
 801dada:	2b00      	cmp	r3, #0
 801dadc:	d121      	bne.n	801db22 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 801dade:	4b23      	ldr	r3, [pc, #140]	; (801db6c <HAL_RTC_Init+0xec>)
 801dae0:	699b      	ldr	r3, [r3, #24]
 801dae2:	4a22      	ldr	r2, [pc, #136]	; (801db6c <HAL_RTC_Init+0xec>)
 801dae4:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 801dae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801daec:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 801daee:	4b1f      	ldr	r3, [pc, #124]	; (801db6c <HAL_RTC_Init+0xec>)
 801daf0:	699a      	ldr	r2, [r3, #24]
 801daf2:	687b      	ldr	r3, [r7, #4]
 801daf4:	6859      	ldr	r1, [r3, #4]
 801daf6:	687b      	ldr	r3, [r7, #4]
 801daf8:	691b      	ldr	r3, [r3, #16]
 801dafa:	4319      	orrs	r1, r3
 801dafc:	687b      	ldr	r3, [r7, #4]
 801dafe:	699b      	ldr	r3, [r3, #24]
 801db00:	430b      	orrs	r3, r1
 801db02:	491a      	ldr	r1, [pc, #104]	; (801db6c <HAL_RTC_Init+0xec>)
 801db04:	4313      	orrs	r3, r2
 801db06:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 801db08:	687b      	ldr	r3, [r7, #4]
 801db0a:	68da      	ldr	r2, [r3, #12]
 801db0c:	687b      	ldr	r3, [r7, #4]
 801db0e:	689b      	ldr	r3, [r3, #8]
 801db10:	041b      	lsls	r3, r3, #16
 801db12:	4916      	ldr	r1, [pc, #88]	; (801db6c <HAL_RTC_Init+0xec>)
 801db14:	4313      	orrs	r3, r2
 801db16:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 801db18:	6878      	ldr	r0, [r7, #4]
 801db1a:	f000 f881 	bl	801dc20 <RTC_ExitInitMode>
 801db1e:	4603      	mov	r3, r0
 801db20:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 801db22:	7bfb      	ldrb	r3, [r7, #15]
 801db24:	2b00      	cmp	r3, #0
 801db26:	d10e      	bne.n	801db46 <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 801db28:	4b10      	ldr	r3, [pc, #64]	; (801db6c <HAL_RTC_Init+0xec>)
 801db2a:	699b      	ldr	r3, [r3, #24]
 801db2c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 801db30:	687b      	ldr	r3, [r7, #4]
 801db32:	6a19      	ldr	r1, [r3, #32]
 801db34:	687b      	ldr	r3, [r7, #4]
 801db36:	69db      	ldr	r3, [r3, #28]
 801db38:	4319      	orrs	r1, r3
 801db3a:	687b      	ldr	r3, [r7, #4]
 801db3c:	695b      	ldr	r3, [r3, #20]
 801db3e:	430b      	orrs	r3, r1
 801db40:	490a      	ldr	r1, [pc, #40]	; (801db6c <HAL_RTC_Init+0xec>)
 801db42:	4313      	orrs	r3, r2
 801db44:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801db46:	4b09      	ldr	r3, [pc, #36]	; (801db6c <HAL_RTC_Init+0xec>)
 801db48:	22ff      	movs	r2, #255	; 0xff
 801db4a:	625a      	str	r2, [r3, #36]	; 0x24
 801db4c:	e001      	b.n	801db52 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 801db4e:	2300      	movs	r3, #0
 801db50:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 801db52:	7bfb      	ldrb	r3, [r7, #15]
 801db54:	2b00      	cmp	r3, #0
 801db56:	d103      	bne.n	801db60 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 801db58:	687b      	ldr	r3, [r7, #4]
 801db5a:	2201      	movs	r2, #1
 801db5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 801db60:	7bfb      	ldrb	r3, [r7, #15]
}
 801db62:	4618      	mov	r0, r3
 801db64:	3710      	adds	r7, #16
 801db66:	46bd      	mov	sp, r7
 801db68:	bd80      	pop	{r7, pc}
 801db6a:	bf00      	nop
 801db6c:	40002800 	.word	0x40002800

0801db70 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801db70:	b580      	push	{r7, lr}
 801db72:	b084      	sub	sp, #16
 801db74:	af00      	add	r7, sp, #0
 801db76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 801db78:	4b0d      	ldr	r3, [pc, #52]	; (801dbb0 <HAL_RTC_WaitForSynchro+0x40>)
 801db7a:	4a0e      	ldr	r2, [pc, #56]	; (801dbb4 <HAL_RTC_WaitForSynchro+0x44>)
 801db7c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 801db7e:	f7fb f869 	bl	8018c54 <HAL_GetTick>
 801db82:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 801db84:	e009      	b.n	801db9a <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801db86:	f7fb f865 	bl	8018c54 <HAL_GetTick>
 801db8a:	4602      	mov	r2, r0
 801db8c:	68fb      	ldr	r3, [r7, #12]
 801db8e:	1ad3      	subs	r3, r2, r3
 801db90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801db94:	d901      	bls.n	801db9a <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 801db96:	2303      	movs	r3, #3
 801db98:	e006      	b.n	801dba8 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 801db9a:	4b05      	ldr	r3, [pc, #20]	; (801dbb0 <HAL_RTC_WaitForSynchro+0x40>)
 801db9c:	68db      	ldr	r3, [r3, #12]
 801db9e:	f003 0320 	and.w	r3, r3, #32
 801dba2:	2b00      	cmp	r3, #0
 801dba4:	d0ef      	beq.n	801db86 <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 801dba6:	2300      	movs	r3, #0
}
 801dba8:	4618      	mov	r0, r3
 801dbaa:	3710      	adds	r7, #16
 801dbac:	46bd      	mov	sp, r7
 801dbae:	bd80      	pop	{r7, pc}
 801dbb0:	40002800 	.word	0x40002800
 801dbb4:	0001005c 	.word	0x0001005c

0801dbb8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801dbb8:	b580      	push	{r7, lr}
 801dbba:	b084      	sub	sp, #16
 801dbbc:	af00      	add	r7, sp, #0
 801dbbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801dbc0:	2300      	movs	r3, #0
 801dbc2:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 801dbc4:	4b15      	ldr	r3, [pc, #84]	; (801dc1c <RTC_EnterInitMode+0x64>)
 801dbc6:	68db      	ldr	r3, [r3, #12]
 801dbc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801dbcc:	2b00      	cmp	r3, #0
 801dbce:	d120      	bne.n	801dc12 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 801dbd0:	4b12      	ldr	r3, [pc, #72]	; (801dc1c <RTC_EnterInitMode+0x64>)
 801dbd2:	68db      	ldr	r3, [r3, #12]
 801dbd4:	4a11      	ldr	r2, [pc, #68]	; (801dc1c <RTC_EnterInitMode+0x64>)
 801dbd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dbda:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 801dbdc:	f7fb f83a 	bl	8018c54 <HAL_GetTick>
 801dbe0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801dbe2:	e00d      	b.n	801dc00 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 801dbe4:	f7fb f836 	bl	8018c54 <HAL_GetTick>
 801dbe8:	4602      	mov	r2, r0
 801dbea:	68bb      	ldr	r3, [r7, #8]
 801dbec:	1ad3      	subs	r3, r2, r3
 801dbee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801dbf2:	d905      	bls.n	801dc00 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 801dbf4:	2303      	movs	r3, #3
 801dbf6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801dbf8:	687b      	ldr	r3, [r7, #4]
 801dbfa:	2203      	movs	r2, #3
 801dbfc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801dc00:	4b06      	ldr	r3, [pc, #24]	; (801dc1c <RTC_EnterInitMode+0x64>)
 801dc02:	68db      	ldr	r3, [r3, #12]
 801dc04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801dc08:	2b00      	cmp	r3, #0
 801dc0a:	d102      	bne.n	801dc12 <RTC_EnterInitMode+0x5a>
 801dc0c:	7bfb      	ldrb	r3, [r7, #15]
 801dc0e:	2b03      	cmp	r3, #3
 801dc10:	d1e8      	bne.n	801dbe4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 801dc12:	7bfb      	ldrb	r3, [r7, #15]
}
 801dc14:	4618      	mov	r0, r3
 801dc16:	3710      	adds	r7, #16
 801dc18:	46bd      	mov	sp, r7
 801dc1a:	bd80      	pop	{r7, pc}
 801dc1c:	40002800 	.word	0x40002800

0801dc20 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801dc20:	b580      	push	{r7, lr}
 801dc22:	b084      	sub	sp, #16
 801dc24:	af00      	add	r7, sp, #0
 801dc26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801dc28:	2300      	movs	r3, #0
 801dc2a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 801dc2c:	4b1a      	ldr	r3, [pc, #104]	; (801dc98 <RTC_ExitInitMode+0x78>)
 801dc2e:	68db      	ldr	r3, [r3, #12]
 801dc30:	4a19      	ldr	r2, [pc, #100]	; (801dc98 <RTC_ExitInitMode+0x78>)
 801dc32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801dc36:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 801dc38:	4b17      	ldr	r3, [pc, #92]	; (801dc98 <RTC_ExitInitMode+0x78>)
 801dc3a:	699b      	ldr	r3, [r3, #24]
 801dc3c:	f003 0320 	and.w	r3, r3, #32
 801dc40:	2b00      	cmp	r3, #0
 801dc42:	d10c      	bne.n	801dc5e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801dc44:	6878      	ldr	r0, [r7, #4]
 801dc46:	f7ff ff93 	bl	801db70 <HAL_RTC_WaitForSynchro>
 801dc4a:	4603      	mov	r3, r0
 801dc4c:	2b00      	cmp	r3, #0
 801dc4e:	d01e      	beq.n	801dc8e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801dc50:	687b      	ldr	r3, [r7, #4]
 801dc52:	2203      	movs	r2, #3
 801dc54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 801dc58:	2303      	movs	r3, #3
 801dc5a:	73fb      	strb	r3, [r7, #15]
 801dc5c:	e017      	b.n	801dc8e <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801dc5e:	4b0e      	ldr	r3, [pc, #56]	; (801dc98 <RTC_ExitInitMode+0x78>)
 801dc60:	699b      	ldr	r3, [r3, #24]
 801dc62:	4a0d      	ldr	r2, [pc, #52]	; (801dc98 <RTC_ExitInitMode+0x78>)
 801dc64:	f023 0320 	bic.w	r3, r3, #32
 801dc68:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801dc6a:	6878      	ldr	r0, [r7, #4]
 801dc6c:	f7ff ff80 	bl	801db70 <HAL_RTC_WaitForSynchro>
 801dc70:	4603      	mov	r3, r0
 801dc72:	2b00      	cmp	r3, #0
 801dc74:	d005      	beq.n	801dc82 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801dc76:	687b      	ldr	r3, [r7, #4]
 801dc78:	2203      	movs	r2, #3
 801dc7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 801dc7e:	2303      	movs	r3, #3
 801dc80:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801dc82:	4b05      	ldr	r3, [pc, #20]	; (801dc98 <RTC_ExitInitMode+0x78>)
 801dc84:	699b      	ldr	r3, [r3, #24]
 801dc86:	4a04      	ldr	r2, [pc, #16]	; (801dc98 <RTC_ExitInitMode+0x78>)
 801dc88:	f043 0320 	orr.w	r3, r3, #32
 801dc8c:	6193      	str	r3, [r2, #24]
  }

  return status;
 801dc8e:	7bfb      	ldrb	r3, [r7, #15]
}
 801dc90:	4618      	mov	r0, r3
 801dc92:	3710      	adds	r7, #16
 801dc94:	46bd      	mov	sp, r7
 801dc96:	bd80      	pop	{r7, pc}
 801dc98:	40002800 	.word	0x40002800

0801dc9c <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 801dc9c:	b480      	push	{r7}
 801dc9e:	b083      	sub	sp, #12
 801dca0:	af00      	add	r7, sp, #0
 801dca2:	6078      	str	r0, [r7, #4]
 801dca4:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 801dca6:	683b      	ldr	r3, [r7, #0]
 801dca8:	681a      	ldr	r2, [r3, #0]
 801dcaa:	683b      	ldr	r3, [r7, #0]
 801dcac:	685b      	ldr	r3, [r3, #4]
 801dcae:	490f      	ldr	r1, [pc, #60]	; (801dcec <HAL_RTCEx_PrivilegeModeSet+0x50>)
 801dcb0:	4313      	orrs	r3, r2
 801dcb2:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 801dcb4:	683b      	ldr	r3, [r7, #0]
 801dcb6:	689a      	ldr	r2, [r3, #8]
 801dcb8:	683b      	ldr	r3, [r7, #0]
 801dcba:	68db      	ldr	r3, [r3, #12]
 801dcbc:	490c      	ldr	r1, [pc, #48]	; (801dcf0 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 801dcbe:	4313      	orrs	r3, r2
 801dcc0:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 801dcc2:	4b0b      	ldr	r3, [pc, #44]	; (801dcf0 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 801dcc4:	6a1b      	ldr	r3, [r3, #32]
 801dcc6:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 801dcca:	683b      	ldr	r3, [r7, #0]
 801dccc:	6919      	ldr	r1, [r3, #16]
 801dcce:	683b      	ldr	r3, [r7, #0]
 801dcd0:	695b      	ldr	r3, [r3, #20]
 801dcd2:	041b      	lsls	r3, r3, #16
 801dcd4:	430b      	orrs	r3, r1
 801dcd6:	4906      	ldr	r1, [pc, #24]	; (801dcf0 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 801dcd8:	4313      	orrs	r3, r2
 801dcda:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 801dcdc:	2300      	movs	r3, #0
}
 801dcde:	4618      	mov	r0, r3
 801dce0:	370c      	adds	r7, #12
 801dce2:	46bd      	mov	sp, r7
 801dce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dce8:	4770      	bx	lr
 801dcea:	bf00      	nop
 801dcec:	40002800 	.word	0x40002800
 801dcf0:	40003400 	.word	0x40003400

0801dcf4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801dcf4:	b580      	push	{r7, lr}
 801dcf6:	b084      	sub	sp, #16
 801dcf8:	af00      	add	r7, sp, #0
 801dcfa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801dcfc:	687b      	ldr	r3, [r7, #4]
 801dcfe:	2b00      	cmp	r3, #0
 801dd00:	d101      	bne.n	801dd06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801dd02:	2301      	movs	r3, #1
 801dd04:	e095      	b.n	801de32 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801dd06:	687b      	ldr	r3, [r7, #4]
 801dd08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dd0a:	2b00      	cmp	r3, #0
 801dd0c:	d108      	bne.n	801dd20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801dd0e:	687b      	ldr	r3, [r7, #4]
 801dd10:	685b      	ldr	r3, [r3, #4]
 801dd12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801dd16:	d009      	beq.n	801dd2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801dd18:	687b      	ldr	r3, [r7, #4]
 801dd1a:	2200      	movs	r2, #0
 801dd1c:	61da      	str	r2, [r3, #28]
 801dd1e:	e005      	b.n	801dd2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801dd20:	687b      	ldr	r3, [r7, #4]
 801dd22:	2200      	movs	r2, #0
 801dd24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801dd26:	687b      	ldr	r3, [r7, #4]
 801dd28:	2200      	movs	r2, #0
 801dd2a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801dd2c:	687b      	ldr	r3, [r7, #4]
 801dd2e:	2200      	movs	r2, #0
 801dd30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801dd32:	687b      	ldr	r3, [r7, #4]
 801dd34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801dd38:	b2db      	uxtb	r3, r3
 801dd3a:	2b00      	cmp	r3, #0
 801dd3c:	d106      	bne.n	801dd4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801dd3e:	687b      	ldr	r3, [r7, #4]
 801dd40:	2200      	movs	r2, #0
 801dd42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801dd46:	6878      	ldr	r0, [r7, #4]
 801dd48:	f7fa fa9e 	bl	8018288 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801dd4c:	687b      	ldr	r3, [r7, #4]
 801dd4e:	2202      	movs	r2, #2
 801dd50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801dd54:	687b      	ldr	r3, [r7, #4]
 801dd56:	681b      	ldr	r3, [r3, #0]
 801dd58:	681a      	ldr	r2, [r3, #0]
 801dd5a:	687b      	ldr	r3, [r7, #4]
 801dd5c:	681b      	ldr	r3, [r3, #0]
 801dd5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801dd62:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801dd64:	687b      	ldr	r3, [r7, #4]
 801dd66:	68db      	ldr	r3, [r3, #12]
 801dd68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801dd6c:	d902      	bls.n	801dd74 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801dd6e:	2300      	movs	r3, #0
 801dd70:	60fb      	str	r3, [r7, #12]
 801dd72:	e002      	b.n	801dd7a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801dd74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801dd78:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801dd7a:	687b      	ldr	r3, [r7, #4]
 801dd7c:	68db      	ldr	r3, [r3, #12]
 801dd7e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801dd82:	d007      	beq.n	801dd94 <HAL_SPI_Init+0xa0>
 801dd84:	687b      	ldr	r3, [r7, #4]
 801dd86:	68db      	ldr	r3, [r3, #12]
 801dd88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801dd8c:	d002      	beq.n	801dd94 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801dd8e:	687b      	ldr	r3, [r7, #4]
 801dd90:	2200      	movs	r2, #0
 801dd92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801dd94:	687b      	ldr	r3, [r7, #4]
 801dd96:	685b      	ldr	r3, [r3, #4]
 801dd98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801dd9c:	687b      	ldr	r3, [r7, #4]
 801dd9e:	689b      	ldr	r3, [r3, #8]
 801dda0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801dda4:	431a      	orrs	r2, r3
 801dda6:	687b      	ldr	r3, [r7, #4]
 801dda8:	691b      	ldr	r3, [r3, #16]
 801ddaa:	f003 0302 	and.w	r3, r3, #2
 801ddae:	431a      	orrs	r2, r3
 801ddb0:	687b      	ldr	r3, [r7, #4]
 801ddb2:	695b      	ldr	r3, [r3, #20]
 801ddb4:	f003 0301 	and.w	r3, r3, #1
 801ddb8:	431a      	orrs	r2, r3
 801ddba:	687b      	ldr	r3, [r7, #4]
 801ddbc:	699b      	ldr	r3, [r3, #24]
 801ddbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801ddc2:	431a      	orrs	r2, r3
 801ddc4:	687b      	ldr	r3, [r7, #4]
 801ddc6:	69db      	ldr	r3, [r3, #28]
 801ddc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801ddcc:	431a      	orrs	r2, r3
 801ddce:	687b      	ldr	r3, [r7, #4]
 801ddd0:	6a1b      	ldr	r3, [r3, #32]
 801ddd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ddd6:	ea42 0103 	orr.w	r1, r2, r3
 801ddda:	687b      	ldr	r3, [r7, #4]
 801dddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ddde:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801dde2:	687b      	ldr	r3, [r7, #4]
 801dde4:	681b      	ldr	r3, [r3, #0]
 801dde6:	430a      	orrs	r2, r1
 801dde8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801ddea:	687b      	ldr	r3, [r7, #4]
 801ddec:	699b      	ldr	r3, [r3, #24]
 801ddee:	0c1b      	lsrs	r3, r3, #16
 801ddf0:	f003 0204 	and.w	r2, r3, #4
 801ddf4:	687b      	ldr	r3, [r7, #4]
 801ddf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ddf8:	f003 0310 	and.w	r3, r3, #16
 801ddfc:	431a      	orrs	r2, r3
 801ddfe:	687b      	ldr	r3, [r7, #4]
 801de00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801de02:	f003 0308 	and.w	r3, r3, #8
 801de06:	431a      	orrs	r2, r3
 801de08:	687b      	ldr	r3, [r7, #4]
 801de0a:	68db      	ldr	r3, [r3, #12]
 801de0c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801de10:	ea42 0103 	orr.w	r1, r2, r3
 801de14:	68fb      	ldr	r3, [r7, #12]
 801de16:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801de1a:	687b      	ldr	r3, [r7, #4]
 801de1c:	681b      	ldr	r3, [r3, #0]
 801de1e:	430a      	orrs	r2, r1
 801de20:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801de22:	687b      	ldr	r3, [r7, #4]
 801de24:	2200      	movs	r2, #0
 801de26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801de28:	687b      	ldr	r3, [r7, #4]
 801de2a:	2201      	movs	r2, #1
 801de2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801de30:	2300      	movs	r3, #0
}
 801de32:	4618      	mov	r0, r3
 801de34:	3710      	adds	r7, #16
 801de36:	46bd      	mov	sp, r7
 801de38:	bd80      	pop	{r7, pc}

0801de3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801de3a:	b580      	push	{r7, lr}
 801de3c:	b088      	sub	sp, #32
 801de3e:	af00      	add	r7, sp, #0
 801de40:	60f8      	str	r0, [r7, #12]
 801de42:	60b9      	str	r1, [r7, #8]
 801de44:	603b      	str	r3, [r7, #0]
 801de46:	4613      	mov	r3, r2
 801de48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801de4a:	2300      	movs	r3, #0
 801de4c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801de4e:	68fb      	ldr	r3, [r7, #12]
 801de50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801de54:	2b01      	cmp	r3, #1
 801de56:	d101      	bne.n	801de5c <HAL_SPI_Transmit+0x22>
 801de58:	2302      	movs	r3, #2
 801de5a:	e158      	b.n	801e10e <HAL_SPI_Transmit+0x2d4>
 801de5c:	68fb      	ldr	r3, [r7, #12]
 801de5e:	2201      	movs	r2, #1
 801de60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801de64:	f7fa fef6 	bl	8018c54 <HAL_GetTick>
 801de68:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801de6a:	88fb      	ldrh	r3, [r7, #6]
 801de6c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801de6e:	68fb      	ldr	r3, [r7, #12]
 801de70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801de74:	b2db      	uxtb	r3, r3
 801de76:	2b01      	cmp	r3, #1
 801de78:	d002      	beq.n	801de80 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801de7a:	2302      	movs	r3, #2
 801de7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 801de7e:	e13d      	b.n	801e0fc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801de80:	68bb      	ldr	r3, [r7, #8]
 801de82:	2b00      	cmp	r3, #0
 801de84:	d002      	beq.n	801de8c <HAL_SPI_Transmit+0x52>
 801de86:	88fb      	ldrh	r3, [r7, #6]
 801de88:	2b00      	cmp	r3, #0
 801de8a:	d102      	bne.n	801de92 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801de8c:	2301      	movs	r3, #1
 801de8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 801de90:	e134      	b.n	801e0fc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801de92:	68fb      	ldr	r3, [r7, #12]
 801de94:	2203      	movs	r2, #3
 801de96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801de9a:	68fb      	ldr	r3, [r7, #12]
 801de9c:	2200      	movs	r2, #0
 801de9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801dea0:	68fb      	ldr	r3, [r7, #12]
 801dea2:	68ba      	ldr	r2, [r7, #8]
 801dea4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801dea6:	68fb      	ldr	r3, [r7, #12]
 801dea8:	88fa      	ldrh	r2, [r7, #6]
 801deaa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801deac:	68fb      	ldr	r3, [r7, #12]
 801deae:	88fa      	ldrh	r2, [r7, #6]
 801deb0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801deb2:	68fb      	ldr	r3, [r7, #12]
 801deb4:	2200      	movs	r2, #0
 801deb6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801deb8:	68fb      	ldr	r3, [r7, #12]
 801deba:	2200      	movs	r2, #0
 801debc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801dec0:	68fb      	ldr	r3, [r7, #12]
 801dec2:	2200      	movs	r2, #0
 801dec4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 801dec8:	68fb      	ldr	r3, [r7, #12]
 801deca:	2200      	movs	r2, #0
 801decc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801dece:	68fb      	ldr	r3, [r7, #12]
 801ded0:	2200      	movs	r2, #0
 801ded2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801ded4:	68fb      	ldr	r3, [r7, #12]
 801ded6:	689b      	ldr	r3, [r3, #8]
 801ded8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801dedc:	d10f      	bne.n	801defe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801dede:	68fb      	ldr	r3, [r7, #12]
 801dee0:	681b      	ldr	r3, [r3, #0]
 801dee2:	681a      	ldr	r2, [r3, #0]
 801dee4:	68fb      	ldr	r3, [r7, #12]
 801dee6:	681b      	ldr	r3, [r3, #0]
 801dee8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801deec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801deee:	68fb      	ldr	r3, [r7, #12]
 801def0:	681b      	ldr	r3, [r3, #0]
 801def2:	681a      	ldr	r2, [r3, #0]
 801def4:	68fb      	ldr	r3, [r7, #12]
 801def6:	681b      	ldr	r3, [r3, #0]
 801def8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801defc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801defe:	68fb      	ldr	r3, [r7, #12]
 801df00:	681b      	ldr	r3, [r3, #0]
 801df02:	681b      	ldr	r3, [r3, #0]
 801df04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801df08:	2b40      	cmp	r3, #64	; 0x40
 801df0a:	d007      	beq.n	801df1c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801df0c:	68fb      	ldr	r3, [r7, #12]
 801df0e:	681b      	ldr	r3, [r3, #0]
 801df10:	681a      	ldr	r2, [r3, #0]
 801df12:	68fb      	ldr	r3, [r7, #12]
 801df14:	681b      	ldr	r3, [r3, #0]
 801df16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801df1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801df1c:	68fb      	ldr	r3, [r7, #12]
 801df1e:	68db      	ldr	r3, [r3, #12]
 801df20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801df24:	d94b      	bls.n	801dfbe <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801df26:	68fb      	ldr	r3, [r7, #12]
 801df28:	685b      	ldr	r3, [r3, #4]
 801df2a:	2b00      	cmp	r3, #0
 801df2c:	d002      	beq.n	801df34 <HAL_SPI_Transmit+0xfa>
 801df2e:	8afb      	ldrh	r3, [r7, #22]
 801df30:	2b01      	cmp	r3, #1
 801df32:	d13e      	bne.n	801dfb2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801df34:	68fb      	ldr	r3, [r7, #12]
 801df36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801df38:	881a      	ldrh	r2, [r3, #0]
 801df3a:	68fb      	ldr	r3, [r7, #12]
 801df3c:	681b      	ldr	r3, [r3, #0]
 801df3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801df40:	68fb      	ldr	r3, [r7, #12]
 801df42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801df44:	1c9a      	adds	r2, r3, #2
 801df46:	68fb      	ldr	r3, [r7, #12]
 801df48:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801df4a:	68fb      	ldr	r3, [r7, #12]
 801df4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801df4e:	b29b      	uxth	r3, r3
 801df50:	3b01      	subs	r3, #1
 801df52:	b29a      	uxth	r2, r3
 801df54:	68fb      	ldr	r3, [r7, #12]
 801df56:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801df58:	e02b      	b.n	801dfb2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801df5a:	68fb      	ldr	r3, [r7, #12]
 801df5c:	681b      	ldr	r3, [r3, #0]
 801df5e:	689b      	ldr	r3, [r3, #8]
 801df60:	f003 0302 	and.w	r3, r3, #2
 801df64:	2b02      	cmp	r3, #2
 801df66:	d112      	bne.n	801df8e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801df68:	68fb      	ldr	r3, [r7, #12]
 801df6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801df6c:	881a      	ldrh	r2, [r3, #0]
 801df6e:	68fb      	ldr	r3, [r7, #12]
 801df70:	681b      	ldr	r3, [r3, #0]
 801df72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801df74:	68fb      	ldr	r3, [r7, #12]
 801df76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801df78:	1c9a      	adds	r2, r3, #2
 801df7a:	68fb      	ldr	r3, [r7, #12]
 801df7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801df7e:	68fb      	ldr	r3, [r7, #12]
 801df80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801df82:	b29b      	uxth	r3, r3
 801df84:	3b01      	subs	r3, #1
 801df86:	b29a      	uxth	r2, r3
 801df88:	68fb      	ldr	r3, [r7, #12]
 801df8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801df8c:	e011      	b.n	801dfb2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801df8e:	f7fa fe61 	bl	8018c54 <HAL_GetTick>
 801df92:	4602      	mov	r2, r0
 801df94:	69bb      	ldr	r3, [r7, #24]
 801df96:	1ad3      	subs	r3, r2, r3
 801df98:	683a      	ldr	r2, [r7, #0]
 801df9a:	429a      	cmp	r2, r3
 801df9c:	d803      	bhi.n	801dfa6 <HAL_SPI_Transmit+0x16c>
 801df9e:	683b      	ldr	r3, [r7, #0]
 801dfa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dfa4:	d102      	bne.n	801dfac <HAL_SPI_Transmit+0x172>
 801dfa6:	683b      	ldr	r3, [r7, #0]
 801dfa8:	2b00      	cmp	r3, #0
 801dfaa:	d102      	bne.n	801dfb2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801dfac:	2303      	movs	r3, #3
 801dfae:	77fb      	strb	r3, [r7, #31]
          goto error;
 801dfb0:	e0a4      	b.n	801e0fc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801dfb2:	68fb      	ldr	r3, [r7, #12]
 801dfb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dfb6:	b29b      	uxth	r3, r3
 801dfb8:	2b00      	cmp	r3, #0
 801dfba:	d1ce      	bne.n	801df5a <HAL_SPI_Transmit+0x120>
 801dfbc:	e07c      	b.n	801e0b8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801dfbe:	68fb      	ldr	r3, [r7, #12]
 801dfc0:	685b      	ldr	r3, [r3, #4]
 801dfc2:	2b00      	cmp	r3, #0
 801dfc4:	d002      	beq.n	801dfcc <HAL_SPI_Transmit+0x192>
 801dfc6:	8afb      	ldrh	r3, [r7, #22]
 801dfc8:	2b01      	cmp	r3, #1
 801dfca:	d170      	bne.n	801e0ae <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801dfcc:	68fb      	ldr	r3, [r7, #12]
 801dfce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dfd0:	b29b      	uxth	r3, r3
 801dfd2:	2b01      	cmp	r3, #1
 801dfd4:	d912      	bls.n	801dffc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801dfd6:	68fb      	ldr	r3, [r7, #12]
 801dfd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dfda:	881a      	ldrh	r2, [r3, #0]
 801dfdc:	68fb      	ldr	r3, [r7, #12]
 801dfde:	681b      	ldr	r3, [r3, #0]
 801dfe0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801dfe2:	68fb      	ldr	r3, [r7, #12]
 801dfe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dfe6:	1c9a      	adds	r2, r3, #2
 801dfe8:	68fb      	ldr	r3, [r7, #12]
 801dfea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801dfec:	68fb      	ldr	r3, [r7, #12]
 801dfee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dff0:	b29b      	uxth	r3, r3
 801dff2:	3b02      	subs	r3, #2
 801dff4:	b29a      	uxth	r2, r3
 801dff6:	68fb      	ldr	r3, [r7, #12]
 801dff8:	87da      	strh	r2, [r3, #62]	; 0x3e
 801dffa:	e058      	b.n	801e0ae <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801dffc:	68fb      	ldr	r3, [r7, #12]
 801dffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e000:	68fb      	ldr	r3, [r7, #12]
 801e002:	681b      	ldr	r3, [r3, #0]
 801e004:	330c      	adds	r3, #12
 801e006:	7812      	ldrb	r2, [r2, #0]
 801e008:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801e00a:	68fb      	ldr	r3, [r7, #12]
 801e00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e00e:	1c5a      	adds	r2, r3, #1
 801e010:	68fb      	ldr	r3, [r7, #12]
 801e012:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801e014:	68fb      	ldr	r3, [r7, #12]
 801e016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e018:	b29b      	uxth	r3, r3
 801e01a:	3b01      	subs	r3, #1
 801e01c:	b29a      	uxth	r2, r3
 801e01e:	68fb      	ldr	r3, [r7, #12]
 801e020:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801e022:	e044      	b.n	801e0ae <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801e024:	68fb      	ldr	r3, [r7, #12]
 801e026:	681b      	ldr	r3, [r3, #0]
 801e028:	689b      	ldr	r3, [r3, #8]
 801e02a:	f003 0302 	and.w	r3, r3, #2
 801e02e:	2b02      	cmp	r3, #2
 801e030:	d12b      	bne.n	801e08a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801e032:	68fb      	ldr	r3, [r7, #12]
 801e034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e036:	b29b      	uxth	r3, r3
 801e038:	2b01      	cmp	r3, #1
 801e03a:	d912      	bls.n	801e062 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e03c:	68fb      	ldr	r3, [r7, #12]
 801e03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e040:	881a      	ldrh	r2, [r3, #0]
 801e042:	68fb      	ldr	r3, [r7, #12]
 801e044:	681b      	ldr	r3, [r3, #0]
 801e046:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801e048:	68fb      	ldr	r3, [r7, #12]
 801e04a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e04c:	1c9a      	adds	r2, r3, #2
 801e04e:	68fb      	ldr	r3, [r7, #12]
 801e050:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801e052:	68fb      	ldr	r3, [r7, #12]
 801e054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e056:	b29b      	uxth	r3, r3
 801e058:	3b02      	subs	r3, #2
 801e05a:	b29a      	uxth	r2, r3
 801e05c:	68fb      	ldr	r3, [r7, #12]
 801e05e:	87da      	strh	r2, [r3, #62]	; 0x3e
 801e060:	e025      	b.n	801e0ae <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801e062:	68fb      	ldr	r3, [r7, #12]
 801e064:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e066:	68fb      	ldr	r3, [r7, #12]
 801e068:	681b      	ldr	r3, [r3, #0]
 801e06a:	330c      	adds	r3, #12
 801e06c:	7812      	ldrb	r2, [r2, #0]
 801e06e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801e070:	68fb      	ldr	r3, [r7, #12]
 801e072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e074:	1c5a      	adds	r2, r3, #1
 801e076:	68fb      	ldr	r3, [r7, #12]
 801e078:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801e07a:	68fb      	ldr	r3, [r7, #12]
 801e07c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e07e:	b29b      	uxth	r3, r3
 801e080:	3b01      	subs	r3, #1
 801e082:	b29a      	uxth	r2, r3
 801e084:	68fb      	ldr	r3, [r7, #12]
 801e086:	87da      	strh	r2, [r3, #62]	; 0x3e
 801e088:	e011      	b.n	801e0ae <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801e08a:	f7fa fde3 	bl	8018c54 <HAL_GetTick>
 801e08e:	4602      	mov	r2, r0
 801e090:	69bb      	ldr	r3, [r7, #24]
 801e092:	1ad3      	subs	r3, r2, r3
 801e094:	683a      	ldr	r2, [r7, #0]
 801e096:	429a      	cmp	r2, r3
 801e098:	d803      	bhi.n	801e0a2 <HAL_SPI_Transmit+0x268>
 801e09a:	683b      	ldr	r3, [r7, #0]
 801e09c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e0a0:	d102      	bne.n	801e0a8 <HAL_SPI_Transmit+0x26e>
 801e0a2:	683b      	ldr	r3, [r7, #0]
 801e0a4:	2b00      	cmp	r3, #0
 801e0a6:	d102      	bne.n	801e0ae <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 801e0a8:	2303      	movs	r3, #3
 801e0aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 801e0ac:	e026      	b.n	801e0fc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801e0ae:	68fb      	ldr	r3, [r7, #12]
 801e0b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e0b2:	b29b      	uxth	r3, r3
 801e0b4:	2b00      	cmp	r3, #0
 801e0b6:	d1b5      	bne.n	801e024 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801e0b8:	69ba      	ldr	r2, [r7, #24]
 801e0ba:	6839      	ldr	r1, [r7, #0]
 801e0bc:	68f8      	ldr	r0, [r7, #12]
 801e0be:	f000 fce3 	bl	801ea88 <SPI_EndRxTxTransaction>
 801e0c2:	4603      	mov	r3, r0
 801e0c4:	2b00      	cmp	r3, #0
 801e0c6:	d002      	beq.n	801e0ce <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801e0c8:	68fb      	ldr	r3, [r7, #12]
 801e0ca:	2220      	movs	r2, #32
 801e0cc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801e0ce:	68fb      	ldr	r3, [r7, #12]
 801e0d0:	689b      	ldr	r3, [r3, #8]
 801e0d2:	2b00      	cmp	r3, #0
 801e0d4:	d10a      	bne.n	801e0ec <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801e0d6:	2300      	movs	r3, #0
 801e0d8:	613b      	str	r3, [r7, #16]
 801e0da:	68fb      	ldr	r3, [r7, #12]
 801e0dc:	681b      	ldr	r3, [r3, #0]
 801e0de:	68db      	ldr	r3, [r3, #12]
 801e0e0:	613b      	str	r3, [r7, #16]
 801e0e2:	68fb      	ldr	r3, [r7, #12]
 801e0e4:	681b      	ldr	r3, [r3, #0]
 801e0e6:	689b      	ldr	r3, [r3, #8]
 801e0e8:	613b      	str	r3, [r7, #16]
 801e0ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801e0ec:	68fb      	ldr	r3, [r7, #12]
 801e0ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e0f0:	2b00      	cmp	r3, #0
 801e0f2:	d002      	beq.n	801e0fa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801e0f4:	2301      	movs	r3, #1
 801e0f6:	77fb      	strb	r3, [r7, #31]
 801e0f8:	e000      	b.n	801e0fc <HAL_SPI_Transmit+0x2c2>
  }

error:
 801e0fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801e0fc:	68fb      	ldr	r3, [r7, #12]
 801e0fe:	2201      	movs	r2, #1
 801e100:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801e104:	68fb      	ldr	r3, [r7, #12]
 801e106:	2200      	movs	r2, #0
 801e108:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801e10c:	7ffb      	ldrb	r3, [r7, #31]
}
 801e10e:	4618      	mov	r0, r3
 801e110:	3720      	adds	r7, #32
 801e112:	46bd      	mov	sp, r7
 801e114:	bd80      	pop	{r7, pc}

0801e116 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801e116:	b580      	push	{r7, lr}
 801e118:	b088      	sub	sp, #32
 801e11a:	af02      	add	r7, sp, #8
 801e11c:	60f8      	str	r0, [r7, #12]
 801e11e:	60b9      	str	r1, [r7, #8]
 801e120:	603b      	str	r3, [r7, #0]
 801e122:	4613      	mov	r3, r2
 801e124:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801e126:	2300      	movs	r3, #0
 801e128:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801e12a:	68fb      	ldr	r3, [r7, #12]
 801e12c:	685b      	ldr	r3, [r3, #4]
 801e12e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e132:	d112      	bne.n	801e15a <HAL_SPI_Receive+0x44>
 801e134:	68fb      	ldr	r3, [r7, #12]
 801e136:	689b      	ldr	r3, [r3, #8]
 801e138:	2b00      	cmp	r3, #0
 801e13a:	d10e      	bne.n	801e15a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801e13c:	68fb      	ldr	r3, [r7, #12]
 801e13e:	2204      	movs	r2, #4
 801e140:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801e144:	88fa      	ldrh	r2, [r7, #6]
 801e146:	683b      	ldr	r3, [r7, #0]
 801e148:	9300      	str	r3, [sp, #0]
 801e14a:	4613      	mov	r3, r2
 801e14c:	68ba      	ldr	r2, [r7, #8]
 801e14e:	68b9      	ldr	r1, [r7, #8]
 801e150:	68f8      	ldr	r0, [r7, #12]
 801e152:	f000 f910 	bl	801e376 <HAL_SPI_TransmitReceive>
 801e156:	4603      	mov	r3, r0
 801e158:	e109      	b.n	801e36e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801e15a:	68fb      	ldr	r3, [r7, #12]
 801e15c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801e160:	2b01      	cmp	r3, #1
 801e162:	d101      	bne.n	801e168 <HAL_SPI_Receive+0x52>
 801e164:	2302      	movs	r3, #2
 801e166:	e102      	b.n	801e36e <HAL_SPI_Receive+0x258>
 801e168:	68fb      	ldr	r3, [r7, #12]
 801e16a:	2201      	movs	r2, #1
 801e16c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801e170:	f7fa fd70 	bl	8018c54 <HAL_GetTick>
 801e174:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801e176:	68fb      	ldr	r3, [r7, #12]
 801e178:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801e17c:	b2db      	uxtb	r3, r3
 801e17e:	2b01      	cmp	r3, #1
 801e180:	d002      	beq.n	801e188 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801e182:	2302      	movs	r3, #2
 801e184:	75fb      	strb	r3, [r7, #23]
    goto error;
 801e186:	e0e9      	b.n	801e35c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801e188:	68bb      	ldr	r3, [r7, #8]
 801e18a:	2b00      	cmp	r3, #0
 801e18c:	d002      	beq.n	801e194 <HAL_SPI_Receive+0x7e>
 801e18e:	88fb      	ldrh	r3, [r7, #6]
 801e190:	2b00      	cmp	r3, #0
 801e192:	d102      	bne.n	801e19a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801e194:	2301      	movs	r3, #1
 801e196:	75fb      	strb	r3, [r7, #23]
    goto error;
 801e198:	e0e0      	b.n	801e35c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801e19a:	68fb      	ldr	r3, [r7, #12]
 801e19c:	2204      	movs	r2, #4
 801e19e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801e1a2:	68fb      	ldr	r3, [r7, #12]
 801e1a4:	2200      	movs	r2, #0
 801e1a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801e1a8:	68fb      	ldr	r3, [r7, #12]
 801e1aa:	68ba      	ldr	r2, [r7, #8]
 801e1ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801e1ae:	68fb      	ldr	r3, [r7, #12]
 801e1b0:	88fa      	ldrh	r2, [r7, #6]
 801e1b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801e1b6:	68fb      	ldr	r3, [r7, #12]
 801e1b8:	88fa      	ldrh	r2, [r7, #6]
 801e1ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801e1be:	68fb      	ldr	r3, [r7, #12]
 801e1c0:	2200      	movs	r2, #0
 801e1c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801e1c4:	68fb      	ldr	r3, [r7, #12]
 801e1c6:	2200      	movs	r2, #0
 801e1c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801e1ca:	68fb      	ldr	r3, [r7, #12]
 801e1cc:	2200      	movs	r2, #0
 801e1ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801e1d0:	68fb      	ldr	r3, [r7, #12]
 801e1d2:	2200      	movs	r2, #0
 801e1d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801e1d6:	68fb      	ldr	r3, [r7, #12]
 801e1d8:	2200      	movs	r2, #0
 801e1da:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801e1dc:	68fb      	ldr	r3, [r7, #12]
 801e1de:	68db      	ldr	r3, [r3, #12]
 801e1e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801e1e4:	d908      	bls.n	801e1f8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801e1e6:	68fb      	ldr	r3, [r7, #12]
 801e1e8:	681b      	ldr	r3, [r3, #0]
 801e1ea:	685a      	ldr	r2, [r3, #4]
 801e1ec:	68fb      	ldr	r3, [r7, #12]
 801e1ee:	681b      	ldr	r3, [r3, #0]
 801e1f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801e1f4:	605a      	str	r2, [r3, #4]
 801e1f6:	e007      	b.n	801e208 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801e1f8:	68fb      	ldr	r3, [r7, #12]
 801e1fa:	681b      	ldr	r3, [r3, #0]
 801e1fc:	685a      	ldr	r2, [r3, #4]
 801e1fe:	68fb      	ldr	r3, [r7, #12]
 801e200:	681b      	ldr	r3, [r3, #0]
 801e202:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801e206:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e208:	68fb      	ldr	r3, [r7, #12]
 801e20a:	689b      	ldr	r3, [r3, #8]
 801e20c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e210:	d10f      	bne.n	801e232 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801e212:	68fb      	ldr	r3, [r7, #12]
 801e214:	681b      	ldr	r3, [r3, #0]
 801e216:	681a      	ldr	r2, [r3, #0]
 801e218:	68fb      	ldr	r3, [r7, #12]
 801e21a:	681b      	ldr	r3, [r3, #0]
 801e21c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e220:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801e222:	68fb      	ldr	r3, [r7, #12]
 801e224:	681b      	ldr	r3, [r3, #0]
 801e226:	681a      	ldr	r2, [r3, #0]
 801e228:	68fb      	ldr	r3, [r7, #12]
 801e22a:	681b      	ldr	r3, [r3, #0]
 801e22c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801e230:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801e232:	68fb      	ldr	r3, [r7, #12]
 801e234:	681b      	ldr	r3, [r3, #0]
 801e236:	681b      	ldr	r3, [r3, #0]
 801e238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e23c:	2b40      	cmp	r3, #64	; 0x40
 801e23e:	d007      	beq.n	801e250 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801e240:	68fb      	ldr	r3, [r7, #12]
 801e242:	681b      	ldr	r3, [r3, #0]
 801e244:	681a      	ldr	r2, [r3, #0]
 801e246:	68fb      	ldr	r3, [r7, #12]
 801e248:	681b      	ldr	r3, [r3, #0]
 801e24a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801e24e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801e250:	68fb      	ldr	r3, [r7, #12]
 801e252:	68db      	ldr	r3, [r3, #12]
 801e254:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801e258:	d867      	bhi.n	801e32a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801e25a:	e030      	b.n	801e2be <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801e25c:	68fb      	ldr	r3, [r7, #12]
 801e25e:	681b      	ldr	r3, [r3, #0]
 801e260:	689b      	ldr	r3, [r3, #8]
 801e262:	f003 0301 	and.w	r3, r3, #1
 801e266:	2b01      	cmp	r3, #1
 801e268:	d117      	bne.n	801e29a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801e26a:	68fb      	ldr	r3, [r7, #12]
 801e26c:	681b      	ldr	r3, [r3, #0]
 801e26e:	f103 020c 	add.w	r2, r3, #12
 801e272:	68fb      	ldr	r3, [r7, #12]
 801e274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e276:	7812      	ldrb	r2, [r2, #0]
 801e278:	b2d2      	uxtb	r2, r2
 801e27a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801e27c:	68fb      	ldr	r3, [r7, #12]
 801e27e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e280:	1c5a      	adds	r2, r3, #1
 801e282:	68fb      	ldr	r3, [r7, #12]
 801e284:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801e286:	68fb      	ldr	r3, [r7, #12]
 801e288:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e28c:	b29b      	uxth	r3, r3
 801e28e:	3b01      	subs	r3, #1
 801e290:	b29a      	uxth	r2, r3
 801e292:	68fb      	ldr	r3, [r7, #12]
 801e294:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801e298:	e011      	b.n	801e2be <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801e29a:	f7fa fcdb 	bl	8018c54 <HAL_GetTick>
 801e29e:	4602      	mov	r2, r0
 801e2a0:	693b      	ldr	r3, [r7, #16]
 801e2a2:	1ad3      	subs	r3, r2, r3
 801e2a4:	683a      	ldr	r2, [r7, #0]
 801e2a6:	429a      	cmp	r2, r3
 801e2a8:	d803      	bhi.n	801e2b2 <HAL_SPI_Receive+0x19c>
 801e2aa:	683b      	ldr	r3, [r7, #0]
 801e2ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e2b0:	d102      	bne.n	801e2b8 <HAL_SPI_Receive+0x1a2>
 801e2b2:	683b      	ldr	r3, [r7, #0]
 801e2b4:	2b00      	cmp	r3, #0
 801e2b6:	d102      	bne.n	801e2be <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801e2b8:	2303      	movs	r3, #3
 801e2ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 801e2bc:	e04e      	b.n	801e35c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801e2be:	68fb      	ldr	r3, [r7, #12]
 801e2c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e2c4:	b29b      	uxth	r3, r3
 801e2c6:	2b00      	cmp	r3, #0
 801e2c8:	d1c8      	bne.n	801e25c <HAL_SPI_Receive+0x146>
 801e2ca:	e034      	b.n	801e336 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801e2cc:	68fb      	ldr	r3, [r7, #12]
 801e2ce:	681b      	ldr	r3, [r3, #0]
 801e2d0:	689b      	ldr	r3, [r3, #8]
 801e2d2:	f003 0301 	and.w	r3, r3, #1
 801e2d6:	2b01      	cmp	r3, #1
 801e2d8:	d115      	bne.n	801e306 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801e2da:	68fb      	ldr	r3, [r7, #12]
 801e2dc:	681b      	ldr	r3, [r3, #0]
 801e2de:	68da      	ldr	r2, [r3, #12]
 801e2e0:	68fb      	ldr	r3, [r7, #12]
 801e2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e2e4:	b292      	uxth	r2, r2
 801e2e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801e2e8:	68fb      	ldr	r3, [r7, #12]
 801e2ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e2ec:	1c9a      	adds	r2, r3, #2
 801e2ee:	68fb      	ldr	r3, [r7, #12]
 801e2f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801e2f2:	68fb      	ldr	r3, [r7, #12]
 801e2f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e2f8:	b29b      	uxth	r3, r3
 801e2fa:	3b01      	subs	r3, #1
 801e2fc:	b29a      	uxth	r2, r3
 801e2fe:	68fb      	ldr	r3, [r7, #12]
 801e300:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801e304:	e011      	b.n	801e32a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801e306:	f7fa fca5 	bl	8018c54 <HAL_GetTick>
 801e30a:	4602      	mov	r2, r0
 801e30c:	693b      	ldr	r3, [r7, #16]
 801e30e:	1ad3      	subs	r3, r2, r3
 801e310:	683a      	ldr	r2, [r7, #0]
 801e312:	429a      	cmp	r2, r3
 801e314:	d803      	bhi.n	801e31e <HAL_SPI_Receive+0x208>
 801e316:	683b      	ldr	r3, [r7, #0]
 801e318:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e31c:	d102      	bne.n	801e324 <HAL_SPI_Receive+0x20e>
 801e31e:	683b      	ldr	r3, [r7, #0]
 801e320:	2b00      	cmp	r3, #0
 801e322:	d102      	bne.n	801e32a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801e324:	2303      	movs	r3, #3
 801e326:	75fb      	strb	r3, [r7, #23]
          goto error;
 801e328:	e018      	b.n	801e35c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801e32a:	68fb      	ldr	r3, [r7, #12]
 801e32c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e330:	b29b      	uxth	r3, r3
 801e332:	2b00      	cmp	r3, #0
 801e334:	d1ca      	bne.n	801e2cc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801e336:	693a      	ldr	r2, [r7, #16]
 801e338:	6839      	ldr	r1, [r7, #0]
 801e33a:	68f8      	ldr	r0, [r7, #12]
 801e33c:	f000 fb4c 	bl	801e9d8 <SPI_EndRxTransaction>
 801e340:	4603      	mov	r3, r0
 801e342:	2b00      	cmp	r3, #0
 801e344:	d002      	beq.n	801e34c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801e346:	68fb      	ldr	r3, [r7, #12]
 801e348:	2220      	movs	r2, #32
 801e34a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801e34c:	68fb      	ldr	r3, [r7, #12]
 801e34e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e350:	2b00      	cmp	r3, #0
 801e352:	d002      	beq.n	801e35a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 801e354:	2301      	movs	r3, #1
 801e356:	75fb      	strb	r3, [r7, #23]
 801e358:	e000      	b.n	801e35c <HAL_SPI_Receive+0x246>
  }

error :
 801e35a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801e35c:	68fb      	ldr	r3, [r7, #12]
 801e35e:	2201      	movs	r2, #1
 801e360:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801e364:	68fb      	ldr	r3, [r7, #12]
 801e366:	2200      	movs	r2, #0
 801e368:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801e36c:	7dfb      	ldrb	r3, [r7, #23]
}
 801e36e:	4618      	mov	r0, r3
 801e370:	3718      	adds	r7, #24
 801e372:	46bd      	mov	sp, r7
 801e374:	bd80      	pop	{r7, pc}

0801e376 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801e376:	b580      	push	{r7, lr}
 801e378:	b08a      	sub	sp, #40	; 0x28
 801e37a:	af00      	add	r7, sp, #0
 801e37c:	60f8      	str	r0, [r7, #12]
 801e37e:	60b9      	str	r1, [r7, #8]
 801e380:	607a      	str	r2, [r7, #4]
 801e382:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801e384:	2301      	movs	r3, #1
 801e386:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801e388:	2300      	movs	r3, #0
 801e38a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801e38e:	68fb      	ldr	r3, [r7, #12]
 801e390:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801e394:	2b01      	cmp	r3, #1
 801e396:	d101      	bne.n	801e39c <HAL_SPI_TransmitReceive+0x26>
 801e398:	2302      	movs	r3, #2
 801e39a:	e1fb      	b.n	801e794 <HAL_SPI_TransmitReceive+0x41e>
 801e39c:	68fb      	ldr	r3, [r7, #12]
 801e39e:	2201      	movs	r2, #1
 801e3a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801e3a4:	f7fa fc56 	bl	8018c54 <HAL_GetTick>
 801e3a8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801e3aa:	68fb      	ldr	r3, [r7, #12]
 801e3ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801e3b0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801e3b2:	68fb      	ldr	r3, [r7, #12]
 801e3b4:	685b      	ldr	r3, [r3, #4]
 801e3b6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801e3b8:	887b      	ldrh	r3, [r7, #2]
 801e3ba:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801e3bc:	887b      	ldrh	r3, [r7, #2]
 801e3be:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801e3c0:	7efb      	ldrb	r3, [r7, #27]
 801e3c2:	2b01      	cmp	r3, #1
 801e3c4:	d00e      	beq.n	801e3e4 <HAL_SPI_TransmitReceive+0x6e>
 801e3c6:	697b      	ldr	r3, [r7, #20]
 801e3c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e3cc:	d106      	bne.n	801e3dc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801e3ce:	68fb      	ldr	r3, [r7, #12]
 801e3d0:	689b      	ldr	r3, [r3, #8]
 801e3d2:	2b00      	cmp	r3, #0
 801e3d4:	d102      	bne.n	801e3dc <HAL_SPI_TransmitReceive+0x66>
 801e3d6:	7efb      	ldrb	r3, [r7, #27]
 801e3d8:	2b04      	cmp	r3, #4
 801e3da:	d003      	beq.n	801e3e4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801e3dc:	2302      	movs	r3, #2
 801e3de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801e3e2:	e1cd      	b.n	801e780 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801e3e4:	68bb      	ldr	r3, [r7, #8]
 801e3e6:	2b00      	cmp	r3, #0
 801e3e8:	d005      	beq.n	801e3f6 <HAL_SPI_TransmitReceive+0x80>
 801e3ea:	687b      	ldr	r3, [r7, #4]
 801e3ec:	2b00      	cmp	r3, #0
 801e3ee:	d002      	beq.n	801e3f6 <HAL_SPI_TransmitReceive+0x80>
 801e3f0:	887b      	ldrh	r3, [r7, #2]
 801e3f2:	2b00      	cmp	r3, #0
 801e3f4:	d103      	bne.n	801e3fe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801e3f6:	2301      	movs	r3, #1
 801e3f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801e3fc:	e1c0      	b.n	801e780 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801e3fe:	68fb      	ldr	r3, [r7, #12]
 801e400:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801e404:	b2db      	uxtb	r3, r3
 801e406:	2b04      	cmp	r3, #4
 801e408:	d003      	beq.n	801e412 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801e40a:	68fb      	ldr	r3, [r7, #12]
 801e40c:	2205      	movs	r2, #5
 801e40e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801e412:	68fb      	ldr	r3, [r7, #12]
 801e414:	2200      	movs	r2, #0
 801e416:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801e418:	68fb      	ldr	r3, [r7, #12]
 801e41a:	687a      	ldr	r2, [r7, #4]
 801e41c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801e41e:	68fb      	ldr	r3, [r7, #12]
 801e420:	887a      	ldrh	r2, [r7, #2]
 801e422:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801e426:	68fb      	ldr	r3, [r7, #12]
 801e428:	887a      	ldrh	r2, [r7, #2]
 801e42a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801e42e:	68fb      	ldr	r3, [r7, #12]
 801e430:	68ba      	ldr	r2, [r7, #8]
 801e432:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801e434:	68fb      	ldr	r3, [r7, #12]
 801e436:	887a      	ldrh	r2, [r7, #2]
 801e438:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801e43a:	68fb      	ldr	r3, [r7, #12]
 801e43c:	887a      	ldrh	r2, [r7, #2]
 801e43e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801e440:	68fb      	ldr	r3, [r7, #12]
 801e442:	2200      	movs	r2, #0
 801e444:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801e446:	68fb      	ldr	r3, [r7, #12]
 801e448:	2200      	movs	r2, #0
 801e44a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801e44c:	68fb      	ldr	r3, [r7, #12]
 801e44e:	68db      	ldr	r3, [r3, #12]
 801e450:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801e454:	d802      	bhi.n	801e45c <HAL_SPI_TransmitReceive+0xe6>
 801e456:	8a3b      	ldrh	r3, [r7, #16]
 801e458:	2b01      	cmp	r3, #1
 801e45a:	d908      	bls.n	801e46e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801e45c:	68fb      	ldr	r3, [r7, #12]
 801e45e:	681b      	ldr	r3, [r3, #0]
 801e460:	685a      	ldr	r2, [r3, #4]
 801e462:	68fb      	ldr	r3, [r7, #12]
 801e464:	681b      	ldr	r3, [r3, #0]
 801e466:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801e46a:	605a      	str	r2, [r3, #4]
 801e46c:	e007      	b.n	801e47e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801e46e:	68fb      	ldr	r3, [r7, #12]
 801e470:	681b      	ldr	r3, [r3, #0]
 801e472:	685a      	ldr	r2, [r3, #4]
 801e474:	68fb      	ldr	r3, [r7, #12]
 801e476:	681b      	ldr	r3, [r3, #0]
 801e478:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801e47c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801e47e:	68fb      	ldr	r3, [r7, #12]
 801e480:	681b      	ldr	r3, [r3, #0]
 801e482:	681b      	ldr	r3, [r3, #0]
 801e484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e488:	2b40      	cmp	r3, #64	; 0x40
 801e48a:	d007      	beq.n	801e49c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801e48c:	68fb      	ldr	r3, [r7, #12]
 801e48e:	681b      	ldr	r3, [r3, #0]
 801e490:	681a      	ldr	r2, [r3, #0]
 801e492:	68fb      	ldr	r3, [r7, #12]
 801e494:	681b      	ldr	r3, [r3, #0]
 801e496:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801e49a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801e49c:	68fb      	ldr	r3, [r7, #12]
 801e49e:	68db      	ldr	r3, [r3, #12]
 801e4a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801e4a4:	d97c      	bls.n	801e5a0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801e4a6:	68fb      	ldr	r3, [r7, #12]
 801e4a8:	685b      	ldr	r3, [r3, #4]
 801e4aa:	2b00      	cmp	r3, #0
 801e4ac:	d002      	beq.n	801e4b4 <HAL_SPI_TransmitReceive+0x13e>
 801e4ae:	8a7b      	ldrh	r3, [r7, #18]
 801e4b0:	2b01      	cmp	r3, #1
 801e4b2:	d169      	bne.n	801e588 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e4b4:	68fb      	ldr	r3, [r7, #12]
 801e4b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e4b8:	881a      	ldrh	r2, [r3, #0]
 801e4ba:	68fb      	ldr	r3, [r7, #12]
 801e4bc:	681b      	ldr	r3, [r3, #0]
 801e4be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801e4c0:	68fb      	ldr	r3, [r7, #12]
 801e4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e4c4:	1c9a      	adds	r2, r3, #2
 801e4c6:	68fb      	ldr	r3, [r7, #12]
 801e4c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801e4ca:	68fb      	ldr	r3, [r7, #12]
 801e4cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e4ce:	b29b      	uxth	r3, r3
 801e4d0:	3b01      	subs	r3, #1
 801e4d2:	b29a      	uxth	r2, r3
 801e4d4:	68fb      	ldr	r3, [r7, #12]
 801e4d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801e4d8:	e056      	b.n	801e588 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801e4da:	68fb      	ldr	r3, [r7, #12]
 801e4dc:	681b      	ldr	r3, [r3, #0]
 801e4de:	689b      	ldr	r3, [r3, #8]
 801e4e0:	f003 0302 	and.w	r3, r3, #2
 801e4e4:	2b02      	cmp	r3, #2
 801e4e6:	d11b      	bne.n	801e520 <HAL_SPI_TransmitReceive+0x1aa>
 801e4e8:	68fb      	ldr	r3, [r7, #12]
 801e4ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e4ec:	b29b      	uxth	r3, r3
 801e4ee:	2b00      	cmp	r3, #0
 801e4f0:	d016      	beq.n	801e520 <HAL_SPI_TransmitReceive+0x1aa>
 801e4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4f4:	2b01      	cmp	r3, #1
 801e4f6:	d113      	bne.n	801e520 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e4f8:	68fb      	ldr	r3, [r7, #12]
 801e4fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e4fc:	881a      	ldrh	r2, [r3, #0]
 801e4fe:	68fb      	ldr	r3, [r7, #12]
 801e500:	681b      	ldr	r3, [r3, #0]
 801e502:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801e504:	68fb      	ldr	r3, [r7, #12]
 801e506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e508:	1c9a      	adds	r2, r3, #2
 801e50a:	68fb      	ldr	r3, [r7, #12]
 801e50c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801e50e:	68fb      	ldr	r3, [r7, #12]
 801e510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e512:	b29b      	uxth	r3, r3
 801e514:	3b01      	subs	r3, #1
 801e516:	b29a      	uxth	r2, r3
 801e518:	68fb      	ldr	r3, [r7, #12]
 801e51a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801e51c:	2300      	movs	r3, #0
 801e51e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801e520:	68fb      	ldr	r3, [r7, #12]
 801e522:	681b      	ldr	r3, [r3, #0]
 801e524:	689b      	ldr	r3, [r3, #8]
 801e526:	f003 0301 	and.w	r3, r3, #1
 801e52a:	2b01      	cmp	r3, #1
 801e52c:	d11c      	bne.n	801e568 <HAL_SPI_TransmitReceive+0x1f2>
 801e52e:	68fb      	ldr	r3, [r7, #12]
 801e530:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e534:	b29b      	uxth	r3, r3
 801e536:	2b00      	cmp	r3, #0
 801e538:	d016      	beq.n	801e568 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801e53a:	68fb      	ldr	r3, [r7, #12]
 801e53c:	681b      	ldr	r3, [r3, #0]
 801e53e:	68da      	ldr	r2, [r3, #12]
 801e540:	68fb      	ldr	r3, [r7, #12]
 801e542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e544:	b292      	uxth	r2, r2
 801e546:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801e548:	68fb      	ldr	r3, [r7, #12]
 801e54a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e54c:	1c9a      	adds	r2, r3, #2
 801e54e:	68fb      	ldr	r3, [r7, #12]
 801e550:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801e552:	68fb      	ldr	r3, [r7, #12]
 801e554:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e558:	b29b      	uxth	r3, r3
 801e55a:	3b01      	subs	r3, #1
 801e55c:	b29a      	uxth	r2, r3
 801e55e:	68fb      	ldr	r3, [r7, #12]
 801e560:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801e564:	2301      	movs	r3, #1
 801e566:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801e568:	f7fa fb74 	bl	8018c54 <HAL_GetTick>
 801e56c:	4602      	mov	r2, r0
 801e56e:	69fb      	ldr	r3, [r7, #28]
 801e570:	1ad3      	subs	r3, r2, r3
 801e572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e574:	429a      	cmp	r2, r3
 801e576:	d807      	bhi.n	801e588 <HAL_SPI_TransmitReceive+0x212>
 801e578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e57e:	d003      	beq.n	801e588 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801e580:	2303      	movs	r3, #3
 801e582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801e586:	e0fb      	b.n	801e780 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801e588:	68fb      	ldr	r3, [r7, #12]
 801e58a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e58c:	b29b      	uxth	r3, r3
 801e58e:	2b00      	cmp	r3, #0
 801e590:	d1a3      	bne.n	801e4da <HAL_SPI_TransmitReceive+0x164>
 801e592:	68fb      	ldr	r3, [r7, #12]
 801e594:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e598:	b29b      	uxth	r3, r3
 801e59a:	2b00      	cmp	r3, #0
 801e59c:	d19d      	bne.n	801e4da <HAL_SPI_TransmitReceive+0x164>
 801e59e:	e0df      	b.n	801e760 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801e5a0:	68fb      	ldr	r3, [r7, #12]
 801e5a2:	685b      	ldr	r3, [r3, #4]
 801e5a4:	2b00      	cmp	r3, #0
 801e5a6:	d003      	beq.n	801e5b0 <HAL_SPI_TransmitReceive+0x23a>
 801e5a8:	8a7b      	ldrh	r3, [r7, #18]
 801e5aa:	2b01      	cmp	r3, #1
 801e5ac:	f040 80cb 	bne.w	801e746 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801e5b0:	68fb      	ldr	r3, [r7, #12]
 801e5b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e5b4:	b29b      	uxth	r3, r3
 801e5b6:	2b01      	cmp	r3, #1
 801e5b8:	d912      	bls.n	801e5e0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e5ba:	68fb      	ldr	r3, [r7, #12]
 801e5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e5be:	881a      	ldrh	r2, [r3, #0]
 801e5c0:	68fb      	ldr	r3, [r7, #12]
 801e5c2:	681b      	ldr	r3, [r3, #0]
 801e5c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801e5c6:	68fb      	ldr	r3, [r7, #12]
 801e5c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e5ca:	1c9a      	adds	r2, r3, #2
 801e5cc:	68fb      	ldr	r3, [r7, #12]
 801e5ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801e5d0:	68fb      	ldr	r3, [r7, #12]
 801e5d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e5d4:	b29b      	uxth	r3, r3
 801e5d6:	3b02      	subs	r3, #2
 801e5d8:	b29a      	uxth	r2, r3
 801e5da:	68fb      	ldr	r3, [r7, #12]
 801e5dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 801e5de:	e0b2      	b.n	801e746 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801e5e0:	68fb      	ldr	r3, [r7, #12]
 801e5e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e5e4:	68fb      	ldr	r3, [r7, #12]
 801e5e6:	681b      	ldr	r3, [r3, #0]
 801e5e8:	330c      	adds	r3, #12
 801e5ea:	7812      	ldrb	r2, [r2, #0]
 801e5ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801e5ee:	68fb      	ldr	r3, [r7, #12]
 801e5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e5f2:	1c5a      	adds	r2, r3, #1
 801e5f4:	68fb      	ldr	r3, [r7, #12]
 801e5f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801e5f8:	68fb      	ldr	r3, [r7, #12]
 801e5fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e5fc:	b29b      	uxth	r3, r3
 801e5fe:	3b01      	subs	r3, #1
 801e600:	b29a      	uxth	r2, r3
 801e602:	68fb      	ldr	r3, [r7, #12]
 801e604:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801e606:	e09e      	b.n	801e746 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801e608:	68fb      	ldr	r3, [r7, #12]
 801e60a:	681b      	ldr	r3, [r3, #0]
 801e60c:	689b      	ldr	r3, [r3, #8]
 801e60e:	f003 0302 	and.w	r3, r3, #2
 801e612:	2b02      	cmp	r3, #2
 801e614:	d134      	bne.n	801e680 <HAL_SPI_TransmitReceive+0x30a>
 801e616:	68fb      	ldr	r3, [r7, #12]
 801e618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e61a:	b29b      	uxth	r3, r3
 801e61c:	2b00      	cmp	r3, #0
 801e61e:	d02f      	beq.n	801e680 <HAL_SPI_TransmitReceive+0x30a>
 801e620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e622:	2b01      	cmp	r3, #1
 801e624:	d12c      	bne.n	801e680 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801e626:	68fb      	ldr	r3, [r7, #12]
 801e628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e62a:	b29b      	uxth	r3, r3
 801e62c:	2b01      	cmp	r3, #1
 801e62e:	d912      	bls.n	801e656 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e630:	68fb      	ldr	r3, [r7, #12]
 801e632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e634:	881a      	ldrh	r2, [r3, #0]
 801e636:	68fb      	ldr	r3, [r7, #12]
 801e638:	681b      	ldr	r3, [r3, #0]
 801e63a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801e63c:	68fb      	ldr	r3, [r7, #12]
 801e63e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e640:	1c9a      	adds	r2, r3, #2
 801e642:	68fb      	ldr	r3, [r7, #12]
 801e644:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801e646:	68fb      	ldr	r3, [r7, #12]
 801e648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e64a:	b29b      	uxth	r3, r3
 801e64c:	3b02      	subs	r3, #2
 801e64e:	b29a      	uxth	r2, r3
 801e650:	68fb      	ldr	r3, [r7, #12]
 801e652:	87da      	strh	r2, [r3, #62]	; 0x3e
 801e654:	e012      	b.n	801e67c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801e656:	68fb      	ldr	r3, [r7, #12]
 801e658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e65a:	68fb      	ldr	r3, [r7, #12]
 801e65c:	681b      	ldr	r3, [r3, #0]
 801e65e:	330c      	adds	r3, #12
 801e660:	7812      	ldrb	r2, [r2, #0]
 801e662:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801e664:	68fb      	ldr	r3, [r7, #12]
 801e666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e668:	1c5a      	adds	r2, r3, #1
 801e66a:	68fb      	ldr	r3, [r7, #12]
 801e66c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801e66e:	68fb      	ldr	r3, [r7, #12]
 801e670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e672:	b29b      	uxth	r3, r3
 801e674:	3b01      	subs	r3, #1
 801e676:	b29a      	uxth	r2, r3
 801e678:	68fb      	ldr	r3, [r7, #12]
 801e67a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801e67c:	2300      	movs	r3, #0
 801e67e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801e680:	68fb      	ldr	r3, [r7, #12]
 801e682:	681b      	ldr	r3, [r3, #0]
 801e684:	689b      	ldr	r3, [r3, #8]
 801e686:	f003 0301 	and.w	r3, r3, #1
 801e68a:	2b01      	cmp	r3, #1
 801e68c:	d148      	bne.n	801e720 <HAL_SPI_TransmitReceive+0x3aa>
 801e68e:	68fb      	ldr	r3, [r7, #12]
 801e690:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e694:	b29b      	uxth	r3, r3
 801e696:	2b00      	cmp	r3, #0
 801e698:	d042      	beq.n	801e720 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801e69a:	68fb      	ldr	r3, [r7, #12]
 801e69c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e6a0:	b29b      	uxth	r3, r3
 801e6a2:	2b01      	cmp	r3, #1
 801e6a4:	d923      	bls.n	801e6ee <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801e6a6:	68fb      	ldr	r3, [r7, #12]
 801e6a8:	681b      	ldr	r3, [r3, #0]
 801e6aa:	68da      	ldr	r2, [r3, #12]
 801e6ac:	68fb      	ldr	r3, [r7, #12]
 801e6ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e6b0:	b292      	uxth	r2, r2
 801e6b2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801e6b4:	68fb      	ldr	r3, [r7, #12]
 801e6b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e6b8:	1c9a      	adds	r2, r3, #2
 801e6ba:	68fb      	ldr	r3, [r7, #12]
 801e6bc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801e6be:	68fb      	ldr	r3, [r7, #12]
 801e6c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e6c4:	b29b      	uxth	r3, r3
 801e6c6:	3b02      	subs	r3, #2
 801e6c8:	b29a      	uxth	r2, r3
 801e6ca:	68fb      	ldr	r3, [r7, #12]
 801e6cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801e6d0:	68fb      	ldr	r3, [r7, #12]
 801e6d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e6d6:	b29b      	uxth	r3, r3
 801e6d8:	2b01      	cmp	r3, #1
 801e6da:	d81f      	bhi.n	801e71c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801e6dc:	68fb      	ldr	r3, [r7, #12]
 801e6de:	681b      	ldr	r3, [r3, #0]
 801e6e0:	685a      	ldr	r2, [r3, #4]
 801e6e2:	68fb      	ldr	r3, [r7, #12]
 801e6e4:	681b      	ldr	r3, [r3, #0]
 801e6e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801e6ea:	605a      	str	r2, [r3, #4]
 801e6ec:	e016      	b.n	801e71c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801e6ee:	68fb      	ldr	r3, [r7, #12]
 801e6f0:	681b      	ldr	r3, [r3, #0]
 801e6f2:	f103 020c 	add.w	r2, r3, #12
 801e6f6:	68fb      	ldr	r3, [r7, #12]
 801e6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e6fa:	7812      	ldrb	r2, [r2, #0]
 801e6fc:	b2d2      	uxtb	r2, r2
 801e6fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801e700:	68fb      	ldr	r3, [r7, #12]
 801e702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e704:	1c5a      	adds	r2, r3, #1
 801e706:	68fb      	ldr	r3, [r7, #12]
 801e708:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801e70a:	68fb      	ldr	r3, [r7, #12]
 801e70c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e710:	b29b      	uxth	r3, r3
 801e712:	3b01      	subs	r3, #1
 801e714:	b29a      	uxth	r2, r3
 801e716:	68fb      	ldr	r3, [r7, #12]
 801e718:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801e71c:	2301      	movs	r3, #1
 801e71e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801e720:	f7fa fa98 	bl	8018c54 <HAL_GetTick>
 801e724:	4602      	mov	r2, r0
 801e726:	69fb      	ldr	r3, [r7, #28]
 801e728:	1ad3      	subs	r3, r2, r3
 801e72a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e72c:	429a      	cmp	r2, r3
 801e72e:	d803      	bhi.n	801e738 <HAL_SPI_TransmitReceive+0x3c2>
 801e730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e732:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e736:	d102      	bne.n	801e73e <HAL_SPI_TransmitReceive+0x3c8>
 801e738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e73a:	2b00      	cmp	r3, #0
 801e73c:	d103      	bne.n	801e746 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801e73e:	2303      	movs	r3, #3
 801e740:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801e744:	e01c      	b.n	801e780 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801e746:	68fb      	ldr	r3, [r7, #12]
 801e748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e74a:	b29b      	uxth	r3, r3
 801e74c:	2b00      	cmp	r3, #0
 801e74e:	f47f af5b 	bne.w	801e608 <HAL_SPI_TransmitReceive+0x292>
 801e752:	68fb      	ldr	r3, [r7, #12]
 801e754:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e758:	b29b      	uxth	r3, r3
 801e75a:	2b00      	cmp	r3, #0
 801e75c:	f47f af54 	bne.w	801e608 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801e760:	69fa      	ldr	r2, [r7, #28]
 801e762:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801e764:	68f8      	ldr	r0, [r7, #12]
 801e766:	f000 f98f 	bl	801ea88 <SPI_EndRxTxTransaction>
 801e76a:	4603      	mov	r3, r0
 801e76c:	2b00      	cmp	r3, #0
 801e76e:	d006      	beq.n	801e77e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801e770:	2301      	movs	r3, #1
 801e772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801e776:	68fb      	ldr	r3, [r7, #12]
 801e778:	2220      	movs	r2, #32
 801e77a:	661a      	str	r2, [r3, #96]	; 0x60
 801e77c:	e000      	b.n	801e780 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801e77e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801e780:	68fb      	ldr	r3, [r7, #12]
 801e782:	2201      	movs	r2, #1
 801e784:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801e788:	68fb      	ldr	r3, [r7, #12]
 801e78a:	2200      	movs	r2, #0
 801e78c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801e790:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801e794:	4618      	mov	r0, r3
 801e796:	3728      	adds	r7, #40	; 0x28
 801e798:	46bd      	mov	sp, r7
 801e79a:	bd80      	pop	{r7, pc}

0801e79c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801e79c:	b580      	push	{r7, lr}
 801e79e:	b088      	sub	sp, #32
 801e7a0:	af00      	add	r7, sp, #0
 801e7a2:	60f8      	str	r0, [r7, #12]
 801e7a4:	60b9      	str	r1, [r7, #8]
 801e7a6:	603b      	str	r3, [r7, #0]
 801e7a8:	4613      	mov	r3, r2
 801e7aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801e7ac:	f7fa fa52 	bl	8018c54 <HAL_GetTick>
 801e7b0:	4602      	mov	r2, r0
 801e7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7b4:	1a9b      	subs	r3, r3, r2
 801e7b6:	683a      	ldr	r2, [r7, #0]
 801e7b8:	4413      	add	r3, r2
 801e7ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801e7bc:	f7fa fa4a 	bl	8018c54 <HAL_GetTick>
 801e7c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801e7c2:	4b39      	ldr	r3, [pc, #228]	; (801e8a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801e7c4:	681b      	ldr	r3, [r3, #0]
 801e7c6:	015b      	lsls	r3, r3, #5
 801e7c8:	0d1b      	lsrs	r3, r3, #20
 801e7ca:	69fa      	ldr	r2, [r7, #28]
 801e7cc:	fb02 f303 	mul.w	r3, r2, r3
 801e7d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801e7d2:	e054      	b.n	801e87e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801e7d4:	683b      	ldr	r3, [r7, #0]
 801e7d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e7da:	d050      	beq.n	801e87e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801e7dc:	f7fa fa3a 	bl	8018c54 <HAL_GetTick>
 801e7e0:	4602      	mov	r2, r0
 801e7e2:	69bb      	ldr	r3, [r7, #24]
 801e7e4:	1ad3      	subs	r3, r2, r3
 801e7e6:	69fa      	ldr	r2, [r7, #28]
 801e7e8:	429a      	cmp	r2, r3
 801e7ea:	d902      	bls.n	801e7f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 801e7ec:	69fb      	ldr	r3, [r7, #28]
 801e7ee:	2b00      	cmp	r3, #0
 801e7f0:	d13d      	bne.n	801e86e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801e7f2:	68fb      	ldr	r3, [r7, #12]
 801e7f4:	681b      	ldr	r3, [r3, #0]
 801e7f6:	685a      	ldr	r2, [r3, #4]
 801e7f8:	68fb      	ldr	r3, [r7, #12]
 801e7fa:	681b      	ldr	r3, [r3, #0]
 801e7fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801e800:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e802:	68fb      	ldr	r3, [r7, #12]
 801e804:	685b      	ldr	r3, [r3, #4]
 801e806:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e80a:	d111      	bne.n	801e830 <SPI_WaitFlagStateUntilTimeout+0x94>
 801e80c:	68fb      	ldr	r3, [r7, #12]
 801e80e:	689b      	ldr	r3, [r3, #8]
 801e810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e814:	d004      	beq.n	801e820 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801e816:	68fb      	ldr	r3, [r7, #12]
 801e818:	689b      	ldr	r3, [r3, #8]
 801e81a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e81e:	d107      	bne.n	801e830 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801e820:	68fb      	ldr	r3, [r7, #12]
 801e822:	681b      	ldr	r3, [r3, #0]
 801e824:	681a      	ldr	r2, [r3, #0]
 801e826:	68fb      	ldr	r3, [r7, #12]
 801e828:	681b      	ldr	r3, [r3, #0]
 801e82a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e82e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801e830:	68fb      	ldr	r3, [r7, #12]
 801e832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801e838:	d10f      	bne.n	801e85a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801e83a:	68fb      	ldr	r3, [r7, #12]
 801e83c:	681b      	ldr	r3, [r3, #0]
 801e83e:	681a      	ldr	r2, [r3, #0]
 801e840:	68fb      	ldr	r3, [r7, #12]
 801e842:	681b      	ldr	r3, [r3, #0]
 801e844:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801e848:	601a      	str	r2, [r3, #0]
 801e84a:	68fb      	ldr	r3, [r7, #12]
 801e84c:	681b      	ldr	r3, [r3, #0]
 801e84e:	681a      	ldr	r2, [r3, #0]
 801e850:	68fb      	ldr	r3, [r7, #12]
 801e852:	681b      	ldr	r3, [r3, #0]
 801e854:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801e858:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801e85a:	68fb      	ldr	r3, [r7, #12]
 801e85c:	2201      	movs	r2, #1
 801e85e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801e862:	68fb      	ldr	r3, [r7, #12]
 801e864:	2200      	movs	r2, #0
 801e866:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801e86a:	2303      	movs	r3, #3
 801e86c:	e017      	b.n	801e89e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801e86e:	697b      	ldr	r3, [r7, #20]
 801e870:	2b00      	cmp	r3, #0
 801e872:	d101      	bne.n	801e878 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801e874:	2300      	movs	r3, #0
 801e876:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801e878:	697b      	ldr	r3, [r7, #20]
 801e87a:	3b01      	subs	r3, #1
 801e87c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801e87e:	68fb      	ldr	r3, [r7, #12]
 801e880:	681b      	ldr	r3, [r3, #0]
 801e882:	689a      	ldr	r2, [r3, #8]
 801e884:	68bb      	ldr	r3, [r7, #8]
 801e886:	4013      	ands	r3, r2
 801e888:	68ba      	ldr	r2, [r7, #8]
 801e88a:	429a      	cmp	r2, r3
 801e88c:	bf0c      	ite	eq
 801e88e:	2301      	moveq	r3, #1
 801e890:	2300      	movne	r3, #0
 801e892:	b2db      	uxtb	r3, r3
 801e894:	461a      	mov	r2, r3
 801e896:	79fb      	ldrb	r3, [r7, #7]
 801e898:	429a      	cmp	r2, r3
 801e89a:	d19b      	bne.n	801e7d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801e89c:	2300      	movs	r3, #0
}
 801e89e:	4618      	mov	r0, r3
 801e8a0:	3720      	adds	r7, #32
 801e8a2:	46bd      	mov	sp, r7
 801e8a4:	bd80      	pop	{r7, pc}
 801e8a6:	bf00      	nop
 801e8a8:	20000090 	.word	0x20000090

0801e8ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801e8ac:	b580      	push	{r7, lr}
 801e8ae:	b08a      	sub	sp, #40	; 0x28
 801e8b0:	af00      	add	r7, sp, #0
 801e8b2:	60f8      	str	r0, [r7, #12]
 801e8b4:	60b9      	str	r1, [r7, #8]
 801e8b6:	607a      	str	r2, [r7, #4]
 801e8b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801e8ba:	2300      	movs	r3, #0
 801e8bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801e8be:	f7fa f9c9 	bl	8018c54 <HAL_GetTick>
 801e8c2:	4602      	mov	r2, r0
 801e8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e8c6:	1a9b      	subs	r3, r3, r2
 801e8c8:	683a      	ldr	r2, [r7, #0]
 801e8ca:	4413      	add	r3, r2
 801e8cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801e8ce:	f7fa f9c1 	bl	8018c54 <HAL_GetTick>
 801e8d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801e8d4:	68fb      	ldr	r3, [r7, #12]
 801e8d6:	681b      	ldr	r3, [r3, #0]
 801e8d8:	330c      	adds	r3, #12
 801e8da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801e8dc:	4b3d      	ldr	r3, [pc, #244]	; (801e9d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801e8de:	681a      	ldr	r2, [r3, #0]
 801e8e0:	4613      	mov	r3, r2
 801e8e2:	009b      	lsls	r3, r3, #2
 801e8e4:	4413      	add	r3, r2
 801e8e6:	00da      	lsls	r2, r3, #3
 801e8e8:	1ad3      	subs	r3, r2, r3
 801e8ea:	0d1b      	lsrs	r3, r3, #20
 801e8ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e8ee:	fb02 f303 	mul.w	r3, r2, r3
 801e8f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801e8f4:	e060      	b.n	801e9b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801e8f6:	68bb      	ldr	r3, [r7, #8]
 801e8f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801e8fc:	d107      	bne.n	801e90e <SPI_WaitFifoStateUntilTimeout+0x62>
 801e8fe:	687b      	ldr	r3, [r7, #4]
 801e900:	2b00      	cmp	r3, #0
 801e902:	d104      	bne.n	801e90e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801e904:	69fb      	ldr	r3, [r7, #28]
 801e906:	781b      	ldrb	r3, [r3, #0]
 801e908:	b2db      	uxtb	r3, r3
 801e90a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801e90c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801e90e:	683b      	ldr	r3, [r7, #0]
 801e910:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e914:	d050      	beq.n	801e9b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801e916:	f7fa f99d 	bl	8018c54 <HAL_GetTick>
 801e91a:	4602      	mov	r2, r0
 801e91c:	6a3b      	ldr	r3, [r7, #32]
 801e91e:	1ad3      	subs	r3, r2, r3
 801e920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e922:	429a      	cmp	r2, r3
 801e924:	d902      	bls.n	801e92c <SPI_WaitFifoStateUntilTimeout+0x80>
 801e926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e928:	2b00      	cmp	r3, #0
 801e92a:	d13d      	bne.n	801e9a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801e92c:	68fb      	ldr	r3, [r7, #12]
 801e92e:	681b      	ldr	r3, [r3, #0]
 801e930:	685a      	ldr	r2, [r3, #4]
 801e932:	68fb      	ldr	r3, [r7, #12]
 801e934:	681b      	ldr	r3, [r3, #0]
 801e936:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801e93a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e93c:	68fb      	ldr	r3, [r7, #12]
 801e93e:	685b      	ldr	r3, [r3, #4]
 801e940:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e944:	d111      	bne.n	801e96a <SPI_WaitFifoStateUntilTimeout+0xbe>
 801e946:	68fb      	ldr	r3, [r7, #12]
 801e948:	689b      	ldr	r3, [r3, #8]
 801e94a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e94e:	d004      	beq.n	801e95a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801e950:	68fb      	ldr	r3, [r7, #12]
 801e952:	689b      	ldr	r3, [r3, #8]
 801e954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e958:	d107      	bne.n	801e96a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801e95a:	68fb      	ldr	r3, [r7, #12]
 801e95c:	681b      	ldr	r3, [r3, #0]
 801e95e:	681a      	ldr	r2, [r3, #0]
 801e960:	68fb      	ldr	r3, [r7, #12]
 801e962:	681b      	ldr	r3, [r3, #0]
 801e964:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e968:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801e96a:	68fb      	ldr	r3, [r7, #12]
 801e96c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e96e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801e972:	d10f      	bne.n	801e994 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801e974:	68fb      	ldr	r3, [r7, #12]
 801e976:	681b      	ldr	r3, [r3, #0]
 801e978:	681a      	ldr	r2, [r3, #0]
 801e97a:	68fb      	ldr	r3, [r7, #12]
 801e97c:	681b      	ldr	r3, [r3, #0]
 801e97e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801e982:	601a      	str	r2, [r3, #0]
 801e984:	68fb      	ldr	r3, [r7, #12]
 801e986:	681b      	ldr	r3, [r3, #0]
 801e988:	681a      	ldr	r2, [r3, #0]
 801e98a:	68fb      	ldr	r3, [r7, #12]
 801e98c:	681b      	ldr	r3, [r3, #0]
 801e98e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801e992:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801e994:	68fb      	ldr	r3, [r7, #12]
 801e996:	2201      	movs	r2, #1
 801e998:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801e99c:	68fb      	ldr	r3, [r7, #12]
 801e99e:	2200      	movs	r2, #0
 801e9a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801e9a4:	2303      	movs	r3, #3
 801e9a6:	e010      	b.n	801e9ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801e9a8:	69bb      	ldr	r3, [r7, #24]
 801e9aa:	2b00      	cmp	r3, #0
 801e9ac:	d101      	bne.n	801e9b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801e9ae:	2300      	movs	r3, #0
 801e9b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801e9b2:	69bb      	ldr	r3, [r7, #24]
 801e9b4:	3b01      	subs	r3, #1
 801e9b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801e9b8:	68fb      	ldr	r3, [r7, #12]
 801e9ba:	681b      	ldr	r3, [r3, #0]
 801e9bc:	689a      	ldr	r2, [r3, #8]
 801e9be:	68bb      	ldr	r3, [r7, #8]
 801e9c0:	4013      	ands	r3, r2
 801e9c2:	687a      	ldr	r2, [r7, #4]
 801e9c4:	429a      	cmp	r2, r3
 801e9c6:	d196      	bne.n	801e8f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801e9c8:	2300      	movs	r3, #0
}
 801e9ca:	4618      	mov	r0, r3
 801e9cc:	3728      	adds	r7, #40	; 0x28
 801e9ce:	46bd      	mov	sp, r7
 801e9d0:	bd80      	pop	{r7, pc}
 801e9d2:	bf00      	nop
 801e9d4:	20000090 	.word	0x20000090

0801e9d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801e9d8:	b580      	push	{r7, lr}
 801e9da:	b086      	sub	sp, #24
 801e9dc:	af02      	add	r7, sp, #8
 801e9de:	60f8      	str	r0, [r7, #12]
 801e9e0:	60b9      	str	r1, [r7, #8]
 801e9e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e9e4:	68fb      	ldr	r3, [r7, #12]
 801e9e6:	685b      	ldr	r3, [r3, #4]
 801e9e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e9ec:	d111      	bne.n	801ea12 <SPI_EndRxTransaction+0x3a>
 801e9ee:	68fb      	ldr	r3, [r7, #12]
 801e9f0:	689b      	ldr	r3, [r3, #8]
 801e9f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e9f6:	d004      	beq.n	801ea02 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801e9f8:	68fb      	ldr	r3, [r7, #12]
 801e9fa:	689b      	ldr	r3, [r3, #8]
 801e9fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ea00:	d107      	bne.n	801ea12 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801ea02:	68fb      	ldr	r3, [r7, #12]
 801ea04:	681b      	ldr	r3, [r3, #0]
 801ea06:	681a      	ldr	r2, [r3, #0]
 801ea08:	68fb      	ldr	r3, [r7, #12]
 801ea0a:	681b      	ldr	r3, [r3, #0]
 801ea0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801ea10:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801ea12:	687b      	ldr	r3, [r7, #4]
 801ea14:	9300      	str	r3, [sp, #0]
 801ea16:	68bb      	ldr	r3, [r7, #8]
 801ea18:	2200      	movs	r2, #0
 801ea1a:	2180      	movs	r1, #128	; 0x80
 801ea1c:	68f8      	ldr	r0, [r7, #12]
 801ea1e:	f7ff febd 	bl	801e79c <SPI_WaitFlagStateUntilTimeout>
 801ea22:	4603      	mov	r3, r0
 801ea24:	2b00      	cmp	r3, #0
 801ea26:	d007      	beq.n	801ea38 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ea28:	68fb      	ldr	r3, [r7, #12]
 801ea2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ea2c:	f043 0220 	orr.w	r2, r3, #32
 801ea30:	68fb      	ldr	r3, [r7, #12]
 801ea32:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801ea34:	2303      	movs	r3, #3
 801ea36:	e023      	b.n	801ea80 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801ea38:	68fb      	ldr	r3, [r7, #12]
 801ea3a:	685b      	ldr	r3, [r3, #4]
 801ea3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ea40:	d11d      	bne.n	801ea7e <SPI_EndRxTransaction+0xa6>
 801ea42:	68fb      	ldr	r3, [r7, #12]
 801ea44:	689b      	ldr	r3, [r3, #8]
 801ea46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ea4a:	d004      	beq.n	801ea56 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801ea4c:	68fb      	ldr	r3, [r7, #12]
 801ea4e:	689b      	ldr	r3, [r3, #8]
 801ea50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ea54:	d113      	bne.n	801ea7e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801ea56:	687b      	ldr	r3, [r7, #4]
 801ea58:	9300      	str	r3, [sp, #0]
 801ea5a:	68bb      	ldr	r3, [r7, #8]
 801ea5c:	2200      	movs	r2, #0
 801ea5e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801ea62:	68f8      	ldr	r0, [r7, #12]
 801ea64:	f7ff ff22 	bl	801e8ac <SPI_WaitFifoStateUntilTimeout>
 801ea68:	4603      	mov	r3, r0
 801ea6a:	2b00      	cmp	r3, #0
 801ea6c:	d007      	beq.n	801ea7e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ea6e:	68fb      	ldr	r3, [r7, #12]
 801ea70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ea72:	f043 0220 	orr.w	r2, r3, #32
 801ea76:	68fb      	ldr	r3, [r7, #12]
 801ea78:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801ea7a:	2303      	movs	r3, #3
 801ea7c:	e000      	b.n	801ea80 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 801ea7e:	2300      	movs	r3, #0
}
 801ea80:	4618      	mov	r0, r3
 801ea82:	3710      	adds	r7, #16
 801ea84:	46bd      	mov	sp, r7
 801ea86:	bd80      	pop	{r7, pc}

0801ea88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801ea88:	b580      	push	{r7, lr}
 801ea8a:	b086      	sub	sp, #24
 801ea8c:	af02      	add	r7, sp, #8
 801ea8e:	60f8      	str	r0, [r7, #12]
 801ea90:	60b9      	str	r1, [r7, #8]
 801ea92:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801ea94:	687b      	ldr	r3, [r7, #4]
 801ea96:	9300      	str	r3, [sp, #0]
 801ea98:	68bb      	ldr	r3, [r7, #8]
 801ea9a:	2200      	movs	r2, #0
 801ea9c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801eaa0:	68f8      	ldr	r0, [r7, #12]
 801eaa2:	f7ff ff03 	bl	801e8ac <SPI_WaitFifoStateUntilTimeout>
 801eaa6:	4603      	mov	r3, r0
 801eaa8:	2b00      	cmp	r3, #0
 801eaaa:	d007      	beq.n	801eabc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801eaac:	68fb      	ldr	r3, [r7, #12]
 801eaae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801eab0:	f043 0220 	orr.w	r2, r3, #32
 801eab4:	68fb      	ldr	r3, [r7, #12]
 801eab6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801eab8:	2303      	movs	r3, #3
 801eaba:	e027      	b.n	801eb0c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801eabc:	687b      	ldr	r3, [r7, #4]
 801eabe:	9300      	str	r3, [sp, #0]
 801eac0:	68bb      	ldr	r3, [r7, #8]
 801eac2:	2200      	movs	r2, #0
 801eac4:	2180      	movs	r1, #128	; 0x80
 801eac6:	68f8      	ldr	r0, [r7, #12]
 801eac8:	f7ff fe68 	bl	801e79c <SPI_WaitFlagStateUntilTimeout>
 801eacc:	4603      	mov	r3, r0
 801eace:	2b00      	cmp	r3, #0
 801ead0:	d007      	beq.n	801eae2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ead2:	68fb      	ldr	r3, [r7, #12]
 801ead4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ead6:	f043 0220 	orr.w	r2, r3, #32
 801eada:	68fb      	ldr	r3, [r7, #12]
 801eadc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801eade:	2303      	movs	r3, #3
 801eae0:	e014      	b.n	801eb0c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801eae2:	687b      	ldr	r3, [r7, #4]
 801eae4:	9300      	str	r3, [sp, #0]
 801eae6:	68bb      	ldr	r3, [r7, #8]
 801eae8:	2200      	movs	r2, #0
 801eaea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801eaee:	68f8      	ldr	r0, [r7, #12]
 801eaf0:	f7ff fedc 	bl	801e8ac <SPI_WaitFifoStateUntilTimeout>
 801eaf4:	4603      	mov	r3, r0
 801eaf6:	2b00      	cmp	r3, #0
 801eaf8:	d007      	beq.n	801eb0a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801eafa:	68fb      	ldr	r3, [r7, #12]
 801eafc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801eafe:	f043 0220 	orr.w	r2, r3, #32
 801eb02:	68fb      	ldr	r3, [r7, #12]
 801eb04:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801eb06:	2303      	movs	r3, #3
 801eb08:	e000      	b.n	801eb0c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801eb0a:	2300      	movs	r3, #0
}
 801eb0c:	4618      	mov	r0, r3
 801eb0e:	3710      	adds	r7, #16
 801eb10:	46bd      	mov	sp, r7
 801eb12:	bd80      	pop	{r7, pc}

0801eb14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801eb14:	b580      	push	{r7, lr}
 801eb16:	b082      	sub	sp, #8
 801eb18:	af00      	add	r7, sp, #0
 801eb1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801eb1c:	687b      	ldr	r3, [r7, #4]
 801eb1e:	2b00      	cmp	r3, #0
 801eb20:	d101      	bne.n	801eb26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801eb22:	2301      	movs	r3, #1
 801eb24:	e049      	b.n	801ebba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801eb26:	687b      	ldr	r3, [r7, #4]
 801eb28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801eb2c:	b2db      	uxtb	r3, r3
 801eb2e:	2b00      	cmp	r3, #0
 801eb30:	d106      	bne.n	801eb40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801eb32:	687b      	ldr	r3, [r7, #4]
 801eb34:	2200      	movs	r2, #0
 801eb36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801eb3a:	6878      	ldr	r0, [r7, #4]
 801eb3c:	f7f9 fc8a 	bl	8018454 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801eb40:	687b      	ldr	r3, [r7, #4]
 801eb42:	2202      	movs	r2, #2
 801eb44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801eb48:	687b      	ldr	r3, [r7, #4]
 801eb4a:	681a      	ldr	r2, [r3, #0]
 801eb4c:	687b      	ldr	r3, [r7, #4]
 801eb4e:	3304      	adds	r3, #4
 801eb50:	4619      	mov	r1, r3
 801eb52:	4610      	mov	r0, r2
 801eb54:	f001 f948 	bl	801fde8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801eb58:	687b      	ldr	r3, [r7, #4]
 801eb5a:	2201      	movs	r2, #1
 801eb5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801eb60:	687b      	ldr	r3, [r7, #4]
 801eb62:	2201      	movs	r2, #1
 801eb64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801eb68:	687b      	ldr	r3, [r7, #4]
 801eb6a:	2201      	movs	r2, #1
 801eb6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801eb70:	687b      	ldr	r3, [r7, #4]
 801eb72:	2201      	movs	r2, #1
 801eb74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801eb78:	687b      	ldr	r3, [r7, #4]
 801eb7a:	2201      	movs	r2, #1
 801eb7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801eb80:	687b      	ldr	r3, [r7, #4]
 801eb82:	2201      	movs	r2, #1
 801eb84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801eb88:	687b      	ldr	r3, [r7, #4]
 801eb8a:	2201      	movs	r2, #1
 801eb8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801eb90:	687b      	ldr	r3, [r7, #4]
 801eb92:	2201      	movs	r2, #1
 801eb94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801eb98:	687b      	ldr	r3, [r7, #4]
 801eb9a:	2201      	movs	r2, #1
 801eb9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801eba0:	687b      	ldr	r3, [r7, #4]
 801eba2:	2201      	movs	r2, #1
 801eba4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801eba8:	687b      	ldr	r3, [r7, #4]
 801ebaa:	2201      	movs	r2, #1
 801ebac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ebb0:	687b      	ldr	r3, [r7, #4]
 801ebb2:	2201      	movs	r2, #1
 801ebb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801ebb8:	2300      	movs	r3, #0
}
 801ebba:	4618      	mov	r0, r3
 801ebbc:	3708      	adds	r7, #8
 801ebbe:	46bd      	mov	sp, r7
 801ebc0:	bd80      	pop	{r7, pc}
	...

0801ebc4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801ebc4:	b480      	push	{r7}
 801ebc6:	b085      	sub	sp, #20
 801ebc8:	af00      	add	r7, sp, #0
 801ebca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801ebcc:	687b      	ldr	r3, [r7, #4]
 801ebce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ebd2:	b2db      	uxtb	r3, r3
 801ebd4:	2b01      	cmp	r3, #1
 801ebd6:	d001      	beq.n	801ebdc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801ebd8:	2301      	movs	r3, #1
 801ebda:	e047      	b.n	801ec6c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ebdc:	687b      	ldr	r3, [r7, #4]
 801ebde:	2202      	movs	r2, #2
 801ebe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ebe4:	687b      	ldr	r3, [r7, #4]
 801ebe6:	681b      	ldr	r3, [r3, #0]
 801ebe8:	4a23      	ldr	r2, [pc, #140]	; (801ec78 <HAL_TIM_Base_Start+0xb4>)
 801ebea:	4293      	cmp	r3, r2
 801ebec:	d01d      	beq.n	801ec2a <HAL_TIM_Base_Start+0x66>
 801ebee:	687b      	ldr	r3, [r7, #4]
 801ebf0:	681b      	ldr	r3, [r3, #0]
 801ebf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ebf6:	d018      	beq.n	801ec2a <HAL_TIM_Base_Start+0x66>
 801ebf8:	687b      	ldr	r3, [r7, #4]
 801ebfa:	681b      	ldr	r3, [r3, #0]
 801ebfc:	4a1f      	ldr	r2, [pc, #124]	; (801ec7c <HAL_TIM_Base_Start+0xb8>)
 801ebfe:	4293      	cmp	r3, r2
 801ec00:	d013      	beq.n	801ec2a <HAL_TIM_Base_Start+0x66>
 801ec02:	687b      	ldr	r3, [r7, #4]
 801ec04:	681b      	ldr	r3, [r3, #0]
 801ec06:	4a1e      	ldr	r2, [pc, #120]	; (801ec80 <HAL_TIM_Base_Start+0xbc>)
 801ec08:	4293      	cmp	r3, r2
 801ec0a:	d00e      	beq.n	801ec2a <HAL_TIM_Base_Start+0x66>
 801ec0c:	687b      	ldr	r3, [r7, #4]
 801ec0e:	681b      	ldr	r3, [r3, #0]
 801ec10:	4a1c      	ldr	r2, [pc, #112]	; (801ec84 <HAL_TIM_Base_Start+0xc0>)
 801ec12:	4293      	cmp	r3, r2
 801ec14:	d009      	beq.n	801ec2a <HAL_TIM_Base_Start+0x66>
 801ec16:	687b      	ldr	r3, [r7, #4]
 801ec18:	681b      	ldr	r3, [r3, #0]
 801ec1a:	4a1b      	ldr	r2, [pc, #108]	; (801ec88 <HAL_TIM_Base_Start+0xc4>)
 801ec1c:	4293      	cmp	r3, r2
 801ec1e:	d004      	beq.n	801ec2a <HAL_TIM_Base_Start+0x66>
 801ec20:	687b      	ldr	r3, [r7, #4]
 801ec22:	681b      	ldr	r3, [r3, #0]
 801ec24:	4a19      	ldr	r2, [pc, #100]	; (801ec8c <HAL_TIM_Base_Start+0xc8>)
 801ec26:	4293      	cmp	r3, r2
 801ec28:	d115      	bne.n	801ec56 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801ec2a:	687b      	ldr	r3, [r7, #4]
 801ec2c:	681b      	ldr	r3, [r3, #0]
 801ec2e:	689a      	ldr	r2, [r3, #8]
 801ec30:	4b17      	ldr	r3, [pc, #92]	; (801ec90 <HAL_TIM_Base_Start+0xcc>)
 801ec32:	4013      	ands	r3, r2
 801ec34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ec36:	68fb      	ldr	r3, [r7, #12]
 801ec38:	2b06      	cmp	r3, #6
 801ec3a:	d015      	beq.n	801ec68 <HAL_TIM_Base_Start+0xa4>
 801ec3c:	68fb      	ldr	r3, [r7, #12]
 801ec3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ec42:	d011      	beq.n	801ec68 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 801ec44:	687b      	ldr	r3, [r7, #4]
 801ec46:	681b      	ldr	r3, [r3, #0]
 801ec48:	681a      	ldr	r2, [r3, #0]
 801ec4a:	687b      	ldr	r3, [r7, #4]
 801ec4c:	681b      	ldr	r3, [r3, #0]
 801ec4e:	f042 0201 	orr.w	r2, r2, #1
 801ec52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ec54:	e008      	b.n	801ec68 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801ec56:	687b      	ldr	r3, [r7, #4]
 801ec58:	681b      	ldr	r3, [r3, #0]
 801ec5a:	681a      	ldr	r2, [r3, #0]
 801ec5c:	687b      	ldr	r3, [r7, #4]
 801ec5e:	681b      	ldr	r3, [r3, #0]
 801ec60:	f042 0201 	orr.w	r2, r2, #1
 801ec64:	601a      	str	r2, [r3, #0]
 801ec66:	e000      	b.n	801ec6a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ec68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801ec6a:	2300      	movs	r3, #0
}
 801ec6c:	4618      	mov	r0, r3
 801ec6e:	3714      	adds	r7, #20
 801ec70:	46bd      	mov	sp, r7
 801ec72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec76:	4770      	bx	lr
 801ec78:	40012c00 	.word	0x40012c00
 801ec7c:	40000400 	.word	0x40000400
 801ec80:	40000800 	.word	0x40000800
 801ec84:	40000c00 	.word	0x40000c00
 801ec88:	40013400 	.word	0x40013400
 801ec8c:	40014000 	.word	0x40014000
 801ec90:	00010007 	.word	0x00010007

0801ec94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801ec94:	b480      	push	{r7}
 801ec96:	b085      	sub	sp, #20
 801ec98:	af00      	add	r7, sp, #0
 801ec9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801ec9c:	687b      	ldr	r3, [r7, #4]
 801ec9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801eca2:	b2db      	uxtb	r3, r3
 801eca4:	2b01      	cmp	r3, #1
 801eca6:	d001      	beq.n	801ecac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801eca8:	2301      	movs	r3, #1
 801ecaa:	e04f      	b.n	801ed4c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ecac:	687b      	ldr	r3, [r7, #4]
 801ecae:	2202      	movs	r2, #2
 801ecb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801ecb4:	687b      	ldr	r3, [r7, #4]
 801ecb6:	681b      	ldr	r3, [r3, #0]
 801ecb8:	68da      	ldr	r2, [r3, #12]
 801ecba:	687b      	ldr	r3, [r7, #4]
 801ecbc:	681b      	ldr	r3, [r3, #0]
 801ecbe:	f042 0201 	orr.w	r2, r2, #1
 801ecc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ecc4:	687b      	ldr	r3, [r7, #4]
 801ecc6:	681b      	ldr	r3, [r3, #0]
 801ecc8:	4a23      	ldr	r2, [pc, #140]	; (801ed58 <HAL_TIM_Base_Start_IT+0xc4>)
 801ecca:	4293      	cmp	r3, r2
 801eccc:	d01d      	beq.n	801ed0a <HAL_TIM_Base_Start_IT+0x76>
 801ecce:	687b      	ldr	r3, [r7, #4]
 801ecd0:	681b      	ldr	r3, [r3, #0]
 801ecd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ecd6:	d018      	beq.n	801ed0a <HAL_TIM_Base_Start_IT+0x76>
 801ecd8:	687b      	ldr	r3, [r7, #4]
 801ecda:	681b      	ldr	r3, [r3, #0]
 801ecdc:	4a1f      	ldr	r2, [pc, #124]	; (801ed5c <HAL_TIM_Base_Start_IT+0xc8>)
 801ecde:	4293      	cmp	r3, r2
 801ece0:	d013      	beq.n	801ed0a <HAL_TIM_Base_Start_IT+0x76>
 801ece2:	687b      	ldr	r3, [r7, #4]
 801ece4:	681b      	ldr	r3, [r3, #0]
 801ece6:	4a1e      	ldr	r2, [pc, #120]	; (801ed60 <HAL_TIM_Base_Start_IT+0xcc>)
 801ece8:	4293      	cmp	r3, r2
 801ecea:	d00e      	beq.n	801ed0a <HAL_TIM_Base_Start_IT+0x76>
 801ecec:	687b      	ldr	r3, [r7, #4]
 801ecee:	681b      	ldr	r3, [r3, #0]
 801ecf0:	4a1c      	ldr	r2, [pc, #112]	; (801ed64 <HAL_TIM_Base_Start_IT+0xd0>)
 801ecf2:	4293      	cmp	r3, r2
 801ecf4:	d009      	beq.n	801ed0a <HAL_TIM_Base_Start_IT+0x76>
 801ecf6:	687b      	ldr	r3, [r7, #4]
 801ecf8:	681b      	ldr	r3, [r3, #0]
 801ecfa:	4a1b      	ldr	r2, [pc, #108]	; (801ed68 <HAL_TIM_Base_Start_IT+0xd4>)
 801ecfc:	4293      	cmp	r3, r2
 801ecfe:	d004      	beq.n	801ed0a <HAL_TIM_Base_Start_IT+0x76>
 801ed00:	687b      	ldr	r3, [r7, #4]
 801ed02:	681b      	ldr	r3, [r3, #0]
 801ed04:	4a19      	ldr	r2, [pc, #100]	; (801ed6c <HAL_TIM_Base_Start_IT+0xd8>)
 801ed06:	4293      	cmp	r3, r2
 801ed08:	d115      	bne.n	801ed36 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801ed0a:	687b      	ldr	r3, [r7, #4]
 801ed0c:	681b      	ldr	r3, [r3, #0]
 801ed0e:	689a      	ldr	r2, [r3, #8]
 801ed10:	4b17      	ldr	r3, [pc, #92]	; (801ed70 <HAL_TIM_Base_Start_IT+0xdc>)
 801ed12:	4013      	ands	r3, r2
 801ed14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ed16:	68fb      	ldr	r3, [r7, #12]
 801ed18:	2b06      	cmp	r3, #6
 801ed1a:	d015      	beq.n	801ed48 <HAL_TIM_Base_Start_IT+0xb4>
 801ed1c:	68fb      	ldr	r3, [r7, #12]
 801ed1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ed22:	d011      	beq.n	801ed48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801ed24:	687b      	ldr	r3, [r7, #4]
 801ed26:	681b      	ldr	r3, [r3, #0]
 801ed28:	681a      	ldr	r2, [r3, #0]
 801ed2a:	687b      	ldr	r3, [r7, #4]
 801ed2c:	681b      	ldr	r3, [r3, #0]
 801ed2e:	f042 0201 	orr.w	r2, r2, #1
 801ed32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ed34:	e008      	b.n	801ed48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801ed36:	687b      	ldr	r3, [r7, #4]
 801ed38:	681b      	ldr	r3, [r3, #0]
 801ed3a:	681a      	ldr	r2, [r3, #0]
 801ed3c:	687b      	ldr	r3, [r7, #4]
 801ed3e:	681b      	ldr	r3, [r3, #0]
 801ed40:	f042 0201 	orr.w	r2, r2, #1
 801ed44:	601a      	str	r2, [r3, #0]
 801ed46:	e000      	b.n	801ed4a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ed48:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801ed4a:	2300      	movs	r3, #0
}
 801ed4c:	4618      	mov	r0, r3
 801ed4e:	3714      	adds	r7, #20
 801ed50:	46bd      	mov	sp, r7
 801ed52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed56:	4770      	bx	lr
 801ed58:	40012c00 	.word	0x40012c00
 801ed5c:	40000400 	.word	0x40000400
 801ed60:	40000800 	.word	0x40000800
 801ed64:	40000c00 	.word	0x40000c00
 801ed68:	40013400 	.word	0x40013400
 801ed6c:	40014000 	.word	0x40014000
 801ed70:	00010007 	.word	0x00010007

0801ed74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801ed74:	b580      	push	{r7, lr}
 801ed76:	b082      	sub	sp, #8
 801ed78:	af00      	add	r7, sp, #0
 801ed7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801ed7c:	687b      	ldr	r3, [r7, #4]
 801ed7e:	2b00      	cmp	r3, #0
 801ed80:	d101      	bne.n	801ed86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801ed82:	2301      	movs	r3, #1
 801ed84:	e049      	b.n	801ee1a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ed86:	687b      	ldr	r3, [r7, #4]
 801ed88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ed8c:	b2db      	uxtb	r3, r3
 801ed8e:	2b00      	cmp	r3, #0
 801ed90:	d106      	bne.n	801eda0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ed92:	687b      	ldr	r3, [r7, #4]
 801ed94:	2200      	movs	r2, #0
 801ed96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801ed9a:	6878      	ldr	r0, [r7, #4]
 801ed9c:	f7f9 fc42 	bl	8018624 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801eda0:	687b      	ldr	r3, [r7, #4]
 801eda2:	2202      	movs	r2, #2
 801eda4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801eda8:	687b      	ldr	r3, [r7, #4]
 801edaa:	681a      	ldr	r2, [r3, #0]
 801edac:	687b      	ldr	r3, [r7, #4]
 801edae:	3304      	adds	r3, #4
 801edb0:	4619      	mov	r1, r3
 801edb2:	4610      	mov	r0, r2
 801edb4:	f001 f818 	bl	801fde8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801edb8:	687b      	ldr	r3, [r7, #4]
 801edba:	2201      	movs	r2, #1
 801edbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801edc0:	687b      	ldr	r3, [r7, #4]
 801edc2:	2201      	movs	r2, #1
 801edc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801edc8:	687b      	ldr	r3, [r7, #4]
 801edca:	2201      	movs	r2, #1
 801edcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801edd0:	687b      	ldr	r3, [r7, #4]
 801edd2:	2201      	movs	r2, #1
 801edd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801edd8:	687b      	ldr	r3, [r7, #4]
 801edda:	2201      	movs	r2, #1
 801eddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801ede0:	687b      	ldr	r3, [r7, #4]
 801ede2:	2201      	movs	r2, #1
 801ede4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ede8:	687b      	ldr	r3, [r7, #4]
 801edea:	2201      	movs	r2, #1
 801edec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801edf0:	687b      	ldr	r3, [r7, #4]
 801edf2:	2201      	movs	r2, #1
 801edf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801edf8:	687b      	ldr	r3, [r7, #4]
 801edfa:	2201      	movs	r2, #1
 801edfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801ee00:	687b      	ldr	r3, [r7, #4]
 801ee02:	2201      	movs	r2, #1
 801ee04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801ee08:	687b      	ldr	r3, [r7, #4]
 801ee0a:	2201      	movs	r2, #1
 801ee0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ee10:	687b      	ldr	r3, [r7, #4]
 801ee12:	2201      	movs	r2, #1
 801ee14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801ee18:	2300      	movs	r3, #0
}
 801ee1a:	4618      	mov	r0, r3
 801ee1c:	3708      	adds	r7, #8
 801ee1e:	46bd      	mov	sp, r7
 801ee20:	bd80      	pop	{r7, pc}
	...

0801ee24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801ee24:	b580      	push	{r7, lr}
 801ee26:	b084      	sub	sp, #16
 801ee28:	af00      	add	r7, sp, #0
 801ee2a:	6078      	str	r0, [r7, #4]
 801ee2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801ee2e:	683b      	ldr	r3, [r7, #0]
 801ee30:	2b00      	cmp	r3, #0
 801ee32:	d109      	bne.n	801ee48 <HAL_TIM_PWM_Start+0x24>
 801ee34:	687b      	ldr	r3, [r7, #4]
 801ee36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ee3a:	b2db      	uxtb	r3, r3
 801ee3c:	2b01      	cmp	r3, #1
 801ee3e:	bf14      	ite	ne
 801ee40:	2301      	movne	r3, #1
 801ee42:	2300      	moveq	r3, #0
 801ee44:	b2db      	uxtb	r3, r3
 801ee46:	e03c      	b.n	801eec2 <HAL_TIM_PWM_Start+0x9e>
 801ee48:	683b      	ldr	r3, [r7, #0]
 801ee4a:	2b04      	cmp	r3, #4
 801ee4c:	d109      	bne.n	801ee62 <HAL_TIM_PWM_Start+0x3e>
 801ee4e:	687b      	ldr	r3, [r7, #4]
 801ee50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801ee54:	b2db      	uxtb	r3, r3
 801ee56:	2b01      	cmp	r3, #1
 801ee58:	bf14      	ite	ne
 801ee5a:	2301      	movne	r3, #1
 801ee5c:	2300      	moveq	r3, #0
 801ee5e:	b2db      	uxtb	r3, r3
 801ee60:	e02f      	b.n	801eec2 <HAL_TIM_PWM_Start+0x9e>
 801ee62:	683b      	ldr	r3, [r7, #0]
 801ee64:	2b08      	cmp	r3, #8
 801ee66:	d109      	bne.n	801ee7c <HAL_TIM_PWM_Start+0x58>
 801ee68:	687b      	ldr	r3, [r7, #4]
 801ee6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801ee6e:	b2db      	uxtb	r3, r3
 801ee70:	2b01      	cmp	r3, #1
 801ee72:	bf14      	ite	ne
 801ee74:	2301      	movne	r3, #1
 801ee76:	2300      	moveq	r3, #0
 801ee78:	b2db      	uxtb	r3, r3
 801ee7a:	e022      	b.n	801eec2 <HAL_TIM_PWM_Start+0x9e>
 801ee7c:	683b      	ldr	r3, [r7, #0]
 801ee7e:	2b0c      	cmp	r3, #12
 801ee80:	d109      	bne.n	801ee96 <HAL_TIM_PWM_Start+0x72>
 801ee82:	687b      	ldr	r3, [r7, #4]
 801ee84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801ee88:	b2db      	uxtb	r3, r3
 801ee8a:	2b01      	cmp	r3, #1
 801ee8c:	bf14      	ite	ne
 801ee8e:	2301      	movne	r3, #1
 801ee90:	2300      	moveq	r3, #0
 801ee92:	b2db      	uxtb	r3, r3
 801ee94:	e015      	b.n	801eec2 <HAL_TIM_PWM_Start+0x9e>
 801ee96:	683b      	ldr	r3, [r7, #0]
 801ee98:	2b10      	cmp	r3, #16
 801ee9a:	d109      	bne.n	801eeb0 <HAL_TIM_PWM_Start+0x8c>
 801ee9c:	687b      	ldr	r3, [r7, #4]
 801ee9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801eea2:	b2db      	uxtb	r3, r3
 801eea4:	2b01      	cmp	r3, #1
 801eea6:	bf14      	ite	ne
 801eea8:	2301      	movne	r3, #1
 801eeaa:	2300      	moveq	r3, #0
 801eeac:	b2db      	uxtb	r3, r3
 801eeae:	e008      	b.n	801eec2 <HAL_TIM_PWM_Start+0x9e>
 801eeb0:	687b      	ldr	r3, [r7, #4]
 801eeb2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801eeb6:	b2db      	uxtb	r3, r3
 801eeb8:	2b01      	cmp	r3, #1
 801eeba:	bf14      	ite	ne
 801eebc:	2301      	movne	r3, #1
 801eebe:	2300      	moveq	r3, #0
 801eec0:	b2db      	uxtb	r3, r3
 801eec2:	2b00      	cmp	r3, #0
 801eec4:	d001      	beq.n	801eeca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801eec6:	2301      	movs	r3, #1
 801eec8:	e09c      	b.n	801f004 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801eeca:	683b      	ldr	r3, [r7, #0]
 801eecc:	2b00      	cmp	r3, #0
 801eece:	d104      	bne.n	801eeda <HAL_TIM_PWM_Start+0xb6>
 801eed0:	687b      	ldr	r3, [r7, #4]
 801eed2:	2202      	movs	r2, #2
 801eed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801eed8:	e023      	b.n	801ef22 <HAL_TIM_PWM_Start+0xfe>
 801eeda:	683b      	ldr	r3, [r7, #0]
 801eedc:	2b04      	cmp	r3, #4
 801eede:	d104      	bne.n	801eeea <HAL_TIM_PWM_Start+0xc6>
 801eee0:	687b      	ldr	r3, [r7, #4]
 801eee2:	2202      	movs	r2, #2
 801eee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801eee8:	e01b      	b.n	801ef22 <HAL_TIM_PWM_Start+0xfe>
 801eeea:	683b      	ldr	r3, [r7, #0]
 801eeec:	2b08      	cmp	r3, #8
 801eeee:	d104      	bne.n	801eefa <HAL_TIM_PWM_Start+0xd6>
 801eef0:	687b      	ldr	r3, [r7, #4]
 801eef2:	2202      	movs	r2, #2
 801eef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801eef8:	e013      	b.n	801ef22 <HAL_TIM_PWM_Start+0xfe>
 801eefa:	683b      	ldr	r3, [r7, #0]
 801eefc:	2b0c      	cmp	r3, #12
 801eefe:	d104      	bne.n	801ef0a <HAL_TIM_PWM_Start+0xe6>
 801ef00:	687b      	ldr	r3, [r7, #4]
 801ef02:	2202      	movs	r2, #2
 801ef04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801ef08:	e00b      	b.n	801ef22 <HAL_TIM_PWM_Start+0xfe>
 801ef0a:	683b      	ldr	r3, [r7, #0]
 801ef0c:	2b10      	cmp	r3, #16
 801ef0e:	d104      	bne.n	801ef1a <HAL_TIM_PWM_Start+0xf6>
 801ef10:	687b      	ldr	r3, [r7, #4]
 801ef12:	2202      	movs	r2, #2
 801ef14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ef18:	e003      	b.n	801ef22 <HAL_TIM_PWM_Start+0xfe>
 801ef1a:	687b      	ldr	r3, [r7, #4]
 801ef1c:	2202      	movs	r2, #2
 801ef1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801ef22:	687b      	ldr	r3, [r7, #4]
 801ef24:	681b      	ldr	r3, [r3, #0]
 801ef26:	2201      	movs	r2, #1
 801ef28:	6839      	ldr	r1, [r7, #0]
 801ef2a:	4618      	mov	r0, r3
 801ef2c:	f001 fc8c 	bl	8020848 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801ef30:	687b      	ldr	r3, [r7, #4]
 801ef32:	681b      	ldr	r3, [r3, #0]
 801ef34:	4a35      	ldr	r2, [pc, #212]	; (801f00c <HAL_TIM_PWM_Start+0x1e8>)
 801ef36:	4293      	cmp	r3, r2
 801ef38:	d013      	beq.n	801ef62 <HAL_TIM_PWM_Start+0x13e>
 801ef3a:	687b      	ldr	r3, [r7, #4]
 801ef3c:	681b      	ldr	r3, [r3, #0]
 801ef3e:	4a34      	ldr	r2, [pc, #208]	; (801f010 <HAL_TIM_PWM_Start+0x1ec>)
 801ef40:	4293      	cmp	r3, r2
 801ef42:	d00e      	beq.n	801ef62 <HAL_TIM_PWM_Start+0x13e>
 801ef44:	687b      	ldr	r3, [r7, #4]
 801ef46:	681b      	ldr	r3, [r3, #0]
 801ef48:	4a32      	ldr	r2, [pc, #200]	; (801f014 <HAL_TIM_PWM_Start+0x1f0>)
 801ef4a:	4293      	cmp	r3, r2
 801ef4c:	d009      	beq.n	801ef62 <HAL_TIM_PWM_Start+0x13e>
 801ef4e:	687b      	ldr	r3, [r7, #4]
 801ef50:	681b      	ldr	r3, [r3, #0]
 801ef52:	4a31      	ldr	r2, [pc, #196]	; (801f018 <HAL_TIM_PWM_Start+0x1f4>)
 801ef54:	4293      	cmp	r3, r2
 801ef56:	d004      	beq.n	801ef62 <HAL_TIM_PWM_Start+0x13e>
 801ef58:	687b      	ldr	r3, [r7, #4]
 801ef5a:	681b      	ldr	r3, [r3, #0]
 801ef5c:	4a2f      	ldr	r2, [pc, #188]	; (801f01c <HAL_TIM_PWM_Start+0x1f8>)
 801ef5e:	4293      	cmp	r3, r2
 801ef60:	d101      	bne.n	801ef66 <HAL_TIM_PWM_Start+0x142>
 801ef62:	2301      	movs	r3, #1
 801ef64:	e000      	b.n	801ef68 <HAL_TIM_PWM_Start+0x144>
 801ef66:	2300      	movs	r3, #0
 801ef68:	2b00      	cmp	r3, #0
 801ef6a:	d007      	beq.n	801ef7c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801ef6c:	687b      	ldr	r3, [r7, #4]
 801ef6e:	681b      	ldr	r3, [r3, #0]
 801ef70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ef72:	687b      	ldr	r3, [r7, #4]
 801ef74:	681b      	ldr	r3, [r3, #0]
 801ef76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801ef7a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ef7c:	687b      	ldr	r3, [r7, #4]
 801ef7e:	681b      	ldr	r3, [r3, #0]
 801ef80:	4a22      	ldr	r2, [pc, #136]	; (801f00c <HAL_TIM_PWM_Start+0x1e8>)
 801ef82:	4293      	cmp	r3, r2
 801ef84:	d01d      	beq.n	801efc2 <HAL_TIM_PWM_Start+0x19e>
 801ef86:	687b      	ldr	r3, [r7, #4]
 801ef88:	681b      	ldr	r3, [r3, #0]
 801ef8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ef8e:	d018      	beq.n	801efc2 <HAL_TIM_PWM_Start+0x19e>
 801ef90:	687b      	ldr	r3, [r7, #4]
 801ef92:	681b      	ldr	r3, [r3, #0]
 801ef94:	4a22      	ldr	r2, [pc, #136]	; (801f020 <HAL_TIM_PWM_Start+0x1fc>)
 801ef96:	4293      	cmp	r3, r2
 801ef98:	d013      	beq.n	801efc2 <HAL_TIM_PWM_Start+0x19e>
 801ef9a:	687b      	ldr	r3, [r7, #4]
 801ef9c:	681b      	ldr	r3, [r3, #0]
 801ef9e:	4a21      	ldr	r2, [pc, #132]	; (801f024 <HAL_TIM_PWM_Start+0x200>)
 801efa0:	4293      	cmp	r3, r2
 801efa2:	d00e      	beq.n	801efc2 <HAL_TIM_PWM_Start+0x19e>
 801efa4:	687b      	ldr	r3, [r7, #4]
 801efa6:	681b      	ldr	r3, [r3, #0]
 801efa8:	4a1f      	ldr	r2, [pc, #124]	; (801f028 <HAL_TIM_PWM_Start+0x204>)
 801efaa:	4293      	cmp	r3, r2
 801efac:	d009      	beq.n	801efc2 <HAL_TIM_PWM_Start+0x19e>
 801efae:	687b      	ldr	r3, [r7, #4]
 801efb0:	681b      	ldr	r3, [r3, #0]
 801efb2:	4a17      	ldr	r2, [pc, #92]	; (801f010 <HAL_TIM_PWM_Start+0x1ec>)
 801efb4:	4293      	cmp	r3, r2
 801efb6:	d004      	beq.n	801efc2 <HAL_TIM_PWM_Start+0x19e>
 801efb8:	687b      	ldr	r3, [r7, #4]
 801efba:	681b      	ldr	r3, [r3, #0]
 801efbc:	4a15      	ldr	r2, [pc, #84]	; (801f014 <HAL_TIM_PWM_Start+0x1f0>)
 801efbe:	4293      	cmp	r3, r2
 801efc0:	d115      	bne.n	801efee <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801efc2:	687b      	ldr	r3, [r7, #4]
 801efc4:	681b      	ldr	r3, [r3, #0]
 801efc6:	689a      	ldr	r2, [r3, #8]
 801efc8:	4b18      	ldr	r3, [pc, #96]	; (801f02c <HAL_TIM_PWM_Start+0x208>)
 801efca:	4013      	ands	r3, r2
 801efcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801efce:	68fb      	ldr	r3, [r7, #12]
 801efd0:	2b06      	cmp	r3, #6
 801efd2:	d015      	beq.n	801f000 <HAL_TIM_PWM_Start+0x1dc>
 801efd4:	68fb      	ldr	r3, [r7, #12]
 801efd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801efda:	d011      	beq.n	801f000 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 801efdc:	687b      	ldr	r3, [r7, #4]
 801efde:	681b      	ldr	r3, [r3, #0]
 801efe0:	681a      	ldr	r2, [r3, #0]
 801efe2:	687b      	ldr	r3, [r7, #4]
 801efe4:	681b      	ldr	r3, [r3, #0]
 801efe6:	f042 0201 	orr.w	r2, r2, #1
 801efea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801efec:	e008      	b.n	801f000 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801efee:	687b      	ldr	r3, [r7, #4]
 801eff0:	681b      	ldr	r3, [r3, #0]
 801eff2:	681a      	ldr	r2, [r3, #0]
 801eff4:	687b      	ldr	r3, [r7, #4]
 801eff6:	681b      	ldr	r3, [r3, #0]
 801eff8:	f042 0201 	orr.w	r2, r2, #1
 801effc:	601a      	str	r2, [r3, #0]
 801effe:	e000      	b.n	801f002 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f000:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801f002:	2300      	movs	r3, #0
}
 801f004:	4618      	mov	r0, r3
 801f006:	3710      	adds	r7, #16
 801f008:	46bd      	mov	sp, r7
 801f00a:	bd80      	pop	{r7, pc}
 801f00c:	40012c00 	.word	0x40012c00
 801f010:	40013400 	.word	0x40013400
 801f014:	40014000 	.word	0x40014000
 801f018:	40014400 	.word	0x40014400
 801f01c:	40014800 	.word	0x40014800
 801f020:	40000400 	.word	0x40000400
 801f024:	40000800 	.word	0x40000800
 801f028:	40000c00 	.word	0x40000c00
 801f02c:	00010007 	.word	0x00010007

0801f030 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 801f030:	b580      	push	{r7, lr}
 801f032:	b082      	sub	sp, #8
 801f034:	af00      	add	r7, sp, #0
 801f036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801f038:	687b      	ldr	r3, [r7, #4]
 801f03a:	2b00      	cmp	r3, #0
 801f03c:	d101      	bne.n	801f042 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 801f03e:	2301      	movs	r3, #1
 801f040:	e049      	b.n	801f0d6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801f042:	687b      	ldr	r3, [r7, #4]
 801f044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f048:	b2db      	uxtb	r3, r3
 801f04a:	2b00      	cmp	r3, #0
 801f04c:	d106      	bne.n	801f05c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801f04e:	687b      	ldr	r3, [r7, #4]
 801f050:	2200      	movs	r2, #0
 801f052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801f056:	6878      	ldr	r0, [r7, #4]
 801f058:	f000 f841 	bl	801f0de <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f05c:	687b      	ldr	r3, [r7, #4]
 801f05e:	2202      	movs	r2, #2
 801f060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801f064:	687b      	ldr	r3, [r7, #4]
 801f066:	681a      	ldr	r2, [r3, #0]
 801f068:	687b      	ldr	r3, [r7, #4]
 801f06a:	3304      	adds	r3, #4
 801f06c:	4619      	mov	r1, r3
 801f06e:	4610      	mov	r0, r2
 801f070:	f000 feba 	bl	801fde8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801f074:	687b      	ldr	r3, [r7, #4]
 801f076:	2201      	movs	r2, #1
 801f078:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f07c:	687b      	ldr	r3, [r7, #4]
 801f07e:	2201      	movs	r2, #1
 801f080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801f084:	687b      	ldr	r3, [r7, #4]
 801f086:	2201      	movs	r2, #1
 801f088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801f08c:	687b      	ldr	r3, [r7, #4]
 801f08e:	2201      	movs	r2, #1
 801f090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801f094:	687b      	ldr	r3, [r7, #4]
 801f096:	2201      	movs	r2, #1
 801f098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801f09c:	687b      	ldr	r3, [r7, #4]
 801f09e:	2201      	movs	r2, #1
 801f0a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801f0a4:	687b      	ldr	r3, [r7, #4]
 801f0a6:	2201      	movs	r2, #1
 801f0a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f0ac:	687b      	ldr	r3, [r7, #4]
 801f0ae:	2201      	movs	r2, #1
 801f0b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801f0b4:	687b      	ldr	r3, [r7, #4]
 801f0b6:	2201      	movs	r2, #1
 801f0b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801f0bc:	687b      	ldr	r3, [r7, #4]
 801f0be:	2201      	movs	r2, #1
 801f0c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801f0c4:	687b      	ldr	r3, [r7, #4]
 801f0c6:	2201      	movs	r2, #1
 801f0c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801f0cc:	687b      	ldr	r3, [r7, #4]
 801f0ce:	2201      	movs	r2, #1
 801f0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801f0d4:	2300      	movs	r3, #0
}
 801f0d6:	4618      	mov	r0, r3
 801f0d8:	3708      	adds	r7, #8
 801f0da:	46bd      	mov	sp, r7
 801f0dc:	bd80      	pop	{r7, pc}

0801f0de <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 801f0de:	b480      	push	{r7}
 801f0e0:	b083      	sub	sp, #12
 801f0e2:	af00      	add	r7, sp, #0
 801f0e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 801f0e6:	bf00      	nop
 801f0e8:	370c      	adds	r7, #12
 801f0ea:	46bd      	mov	sp, r7
 801f0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0f0:	4770      	bx	lr
	...

0801f0f4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801f0f4:	b580      	push	{r7, lr}
 801f0f6:	b084      	sub	sp, #16
 801f0f8:	af00      	add	r7, sp, #0
 801f0fa:	6078      	str	r0, [r7, #4]
 801f0fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801f0fe:	2300      	movs	r3, #0
 801f100:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801f102:	683b      	ldr	r3, [r7, #0]
 801f104:	2b00      	cmp	r3, #0
 801f106:	d104      	bne.n	801f112 <HAL_TIM_IC_Start_IT+0x1e>
 801f108:	687b      	ldr	r3, [r7, #4]
 801f10a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801f10e:	b2db      	uxtb	r3, r3
 801f110:	e023      	b.n	801f15a <HAL_TIM_IC_Start_IT+0x66>
 801f112:	683b      	ldr	r3, [r7, #0]
 801f114:	2b04      	cmp	r3, #4
 801f116:	d104      	bne.n	801f122 <HAL_TIM_IC_Start_IT+0x2e>
 801f118:	687b      	ldr	r3, [r7, #4]
 801f11a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801f11e:	b2db      	uxtb	r3, r3
 801f120:	e01b      	b.n	801f15a <HAL_TIM_IC_Start_IT+0x66>
 801f122:	683b      	ldr	r3, [r7, #0]
 801f124:	2b08      	cmp	r3, #8
 801f126:	d104      	bne.n	801f132 <HAL_TIM_IC_Start_IT+0x3e>
 801f128:	687b      	ldr	r3, [r7, #4]
 801f12a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801f12e:	b2db      	uxtb	r3, r3
 801f130:	e013      	b.n	801f15a <HAL_TIM_IC_Start_IT+0x66>
 801f132:	683b      	ldr	r3, [r7, #0]
 801f134:	2b0c      	cmp	r3, #12
 801f136:	d104      	bne.n	801f142 <HAL_TIM_IC_Start_IT+0x4e>
 801f138:	687b      	ldr	r3, [r7, #4]
 801f13a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801f13e:	b2db      	uxtb	r3, r3
 801f140:	e00b      	b.n	801f15a <HAL_TIM_IC_Start_IT+0x66>
 801f142:	683b      	ldr	r3, [r7, #0]
 801f144:	2b10      	cmp	r3, #16
 801f146:	d104      	bne.n	801f152 <HAL_TIM_IC_Start_IT+0x5e>
 801f148:	687b      	ldr	r3, [r7, #4]
 801f14a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801f14e:	b2db      	uxtb	r3, r3
 801f150:	e003      	b.n	801f15a <HAL_TIM_IC_Start_IT+0x66>
 801f152:	687b      	ldr	r3, [r7, #4]
 801f154:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801f158:	b2db      	uxtb	r3, r3
 801f15a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801f15c:	683b      	ldr	r3, [r7, #0]
 801f15e:	2b00      	cmp	r3, #0
 801f160:	d104      	bne.n	801f16c <HAL_TIM_IC_Start_IT+0x78>
 801f162:	687b      	ldr	r3, [r7, #4]
 801f164:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801f168:	b2db      	uxtb	r3, r3
 801f16a:	e013      	b.n	801f194 <HAL_TIM_IC_Start_IT+0xa0>
 801f16c:	683b      	ldr	r3, [r7, #0]
 801f16e:	2b04      	cmp	r3, #4
 801f170:	d104      	bne.n	801f17c <HAL_TIM_IC_Start_IT+0x88>
 801f172:	687b      	ldr	r3, [r7, #4]
 801f174:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f178:	b2db      	uxtb	r3, r3
 801f17a:	e00b      	b.n	801f194 <HAL_TIM_IC_Start_IT+0xa0>
 801f17c:	683b      	ldr	r3, [r7, #0]
 801f17e:	2b08      	cmp	r3, #8
 801f180:	d104      	bne.n	801f18c <HAL_TIM_IC_Start_IT+0x98>
 801f182:	687b      	ldr	r3, [r7, #4]
 801f184:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801f188:	b2db      	uxtb	r3, r3
 801f18a:	e003      	b.n	801f194 <HAL_TIM_IC_Start_IT+0xa0>
 801f18c:	687b      	ldr	r3, [r7, #4]
 801f18e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801f192:	b2db      	uxtb	r3, r3
 801f194:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 801f196:	7bbb      	ldrb	r3, [r7, #14]
 801f198:	2b01      	cmp	r3, #1
 801f19a:	d102      	bne.n	801f1a2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 801f19c:	7b7b      	ldrb	r3, [r7, #13]
 801f19e:	2b01      	cmp	r3, #1
 801f1a0:	d001      	beq.n	801f1a6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 801f1a2:	2301      	movs	r3, #1
 801f1a4:	e0dd      	b.n	801f362 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801f1a6:	683b      	ldr	r3, [r7, #0]
 801f1a8:	2b00      	cmp	r3, #0
 801f1aa:	d104      	bne.n	801f1b6 <HAL_TIM_IC_Start_IT+0xc2>
 801f1ac:	687b      	ldr	r3, [r7, #4]
 801f1ae:	2202      	movs	r2, #2
 801f1b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801f1b4:	e023      	b.n	801f1fe <HAL_TIM_IC_Start_IT+0x10a>
 801f1b6:	683b      	ldr	r3, [r7, #0]
 801f1b8:	2b04      	cmp	r3, #4
 801f1ba:	d104      	bne.n	801f1c6 <HAL_TIM_IC_Start_IT+0xd2>
 801f1bc:	687b      	ldr	r3, [r7, #4]
 801f1be:	2202      	movs	r2, #2
 801f1c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801f1c4:	e01b      	b.n	801f1fe <HAL_TIM_IC_Start_IT+0x10a>
 801f1c6:	683b      	ldr	r3, [r7, #0]
 801f1c8:	2b08      	cmp	r3, #8
 801f1ca:	d104      	bne.n	801f1d6 <HAL_TIM_IC_Start_IT+0xe2>
 801f1cc:	687b      	ldr	r3, [r7, #4]
 801f1ce:	2202      	movs	r2, #2
 801f1d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801f1d4:	e013      	b.n	801f1fe <HAL_TIM_IC_Start_IT+0x10a>
 801f1d6:	683b      	ldr	r3, [r7, #0]
 801f1d8:	2b0c      	cmp	r3, #12
 801f1da:	d104      	bne.n	801f1e6 <HAL_TIM_IC_Start_IT+0xf2>
 801f1dc:	687b      	ldr	r3, [r7, #4]
 801f1de:	2202      	movs	r2, #2
 801f1e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801f1e4:	e00b      	b.n	801f1fe <HAL_TIM_IC_Start_IT+0x10a>
 801f1e6:	683b      	ldr	r3, [r7, #0]
 801f1e8:	2b10      	cmp	r3, #16
 801f1ea:	d104      	bne.n	801f1f6 <HAL_TIM_IC_Start_IT+0x102>
 801f1ec:	687b      	ldr	r3, [r7, #4]
 801f1ee:	2202      	movs	r2, #2
 801f1f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801f1f4:	e003      	b.n	801f1fe <HAL_TIM_IC_Start_IT+0x10a>
 801f1f6:	687b      	ldr	r3, [r7, #4]
 801f1f8:	2202      	movs	r2, #2
 801f1fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801f1fe:	683b      	ldr	r3, [r7, #0]
 801f200:	2b00      	cmp	r3, #0
 801f202:	d104      	bne.n	801f20e <HAL_TIM_IC_Start_IT+0x11a>
 801f204:	687b      	ldr	r3, [r7, #4]
 801f206:	2202      	movs	r2, #2
 801f208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801f20c:	e013      	b.n	801f236 <HAL_TIM_IC_Start_IT+0x142>
 801f20e:	683b      	ldr	r3, [r7, #0]
 801f210:	2b04      	cmp	r3, #4
 801f212:	d104      	bne.n	801f21e <HAL_TIM_IC_Start_IT+0x12a>
 801f214:	687b      	ldr	r3, [r7, #4]
 801f216:	2202      	movs	r2, #2
 801f218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801f21c:	e00b      	b.n	801f236 <HAL_TIM_IC_Start_IT+0x142>
 801f21e:	683b      	ldr	r3, [r7, #0]
 801f220:	2b08      	cmp	r3, #8
 801f222:	d104      	bne.n	801f22e <HAL_TIM_IC_Start_IT+0x13a>
 801f224:	687b      	ldr	r3, [r7, #4]
 801f226:	2202      	movs	r2, #2
 801f228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801f22c:	e003      	b.n	801f236 <HAL_TIM_IC_Start_IT+0x142>
 801f22e:	687b      	ldr	r3, [r7, #4]
 801f230:	2202      	movs	r2, #2
 801f232:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 801f236:	683b      	ldr	r3, [r7, #0]
 801f238:	2b0c      	cmp	r3, #12
 801f23a:	d841      	bhi.n	801f2c0 <HAL_TIM_IC_Start_IT+0x1cc>
 801f23c:	a201      	add	r2, pc, #4	; (adr r2, 801f244 <HAL_TIM_IC_Start_IT+0x150>)
 801f23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f242:	bf00      	nop
 801f244:	0801f279 	.word	0x0801f279
 801f248:	0801f2c1 	.word	0x0801f2c1
 801f24c:	0801f2c1 	.word	0x0801f2c1
 801f250:	0801f2c1 	.word	0x0801f2c1
 801f254:	0801f28b 	.word	0x0801f28b
 801f258:	0801f2c1 	.word	0x0801f2c1
 801f25c:	0801f2c1 	.word	0x0801f2c1
 801f260:	0801f2c1 	.word	0x0801f2c1
 801f264:	0801f29d 	.word	0x0801f29d
 801f268:	0801f2c1 	.word	0x0801f2c1
 801f26c:	0801f2c1 	.word	0x0801f2c1
 801f270:	0801f2c1 	.word	0x0801f2c1
 801f274:	0801f2af 	.word	0x0801f2af
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 801f278:	687b      	ldr	r3, [r7, #4]
 801f27a:	681b      	ldr	r3, [r3, #0]
 801f27c:	68da      	ldr	r2, [r3, #12]
 801f27e:	687b      	ldr	r3, [r7, #4]
 801f280:	681b      	ldr	r3, [r3, #0]
 801f282:	f042 0202 	orr.w	r2, r2, #2
 801f286:	60da      	str	r2, [r3, #12]
      break;
 801f288:	e01d      	b.n	801f2c6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801f28a:	687b      	ldr	r3, [r7, #4]
 801f28c:	681b      	ldr	r3, [r3, #0]
 801f28e:	68da      	ldr	r2, [r3, #12]
 801f290:	687b      	ldr	r3, [r7, #4]
 801f292:	681b      	ldr	r3, [r3, #0]
 801f294:	f042 0204 	orr.w	r2, r2, #4
 801f298:	60da      	str	r2, [r3, #12]
      break;
 801f29a:	e014      	b.n	801f2c6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 801f29c:	687b      	ldr	r3, [r7, #4]
 801f29e:	681b      	ldr	r3, [r3, #0]
 801f2a0:	68da      	ldr	r2, [r3, #12]
 801f2a2:	687b      	ldr	r3, [r7, #4]
 801f2a4:	681b      	ldr	r3, [r3, #0]
 801f2a6:	f042 0208 	orr.w	r2, r2, #8
 801f2aa:	60da      	str	r2, [r3, #12]
      break;
 801f2ac:	e00b      	b.n	801f2c6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801f2ae:	687b      	ldr	r3, [r7, #4]
 801f2b0:	681b      	ldr	r3, [r3, #0]
 801f2b2:	68da      	ldr	r2, [r3, #12]
 801f2b4:	687b      	ldr	r3, [r7, #4]
 801f2b6:	681b      	ldr	r3, [r3, #0]
 801f2b8:	f042 0210 	orr.w	r2, r2, #16
 801f2bc:	60da      	str	r2, [r3, #12]
      break;
 801f2be:	e002      	b.n	801f2c6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 801f2c0:	2301      	movs	r3, #1
 801f2c2:	73fb      	strb	r3, [r7, #15]
      break;
 801f2c4:	bf00      	nop
  }

  if (status == HAL_OK)
 801f2c6:	7bfb      	ldrb	r3, [r7, #15]
 801f2c8:	2b00      	cmp	r3, #0
 801f2ca:	d149      	bne.n	801f360 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801f2cc:	687b      	ldr	r3, [r7, #4]
 801f2ce:	681b      	ldr	r3, [r3, #0]
 801f2d0:	2201      	movs	r2, #1
 801f2d2:	6839      	ldr	r1, [r7, #0]
 801f2d4:	4618      	mov	r0, r3
 801f2d6:	f001 fab7 	bl	8020848 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801f2da:	687b      	ldr	r3, [r7, #4]
 801f2dc:	681b      	ldr	r3, [r3, #0]
 801f2de:	4a23      	ldr	r2, [pc, #140]	; (801f36c <HAL_TIM_IC_Start_IT+0x278>)
 801f2e0:	4293      	cmp	r3, r2
 801f2e2:	d01d      	beq.n	801f320 <HAL_TIM_IC_Start_IT+0x22c>
 801f2e4:	687b      	ldr	r3, [r7, #4]
 801f2e6:	681b      	ldr	r3, [r3, #0]
 801f2e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f2ec:	d018      	beq.n	801f320 <HAL_TIM_IC_Start_IT+0x22c>
 801f2ee:	687b      	ldr	r3, [r7, #4]
 801f2f0:	681b      	ldr	r3, [r3, #0]
 801f2f2:	4a1f      	ldr	r2, [pc, #124]	; (801f370 <HAL_TIM_IC_Start_IT+0x27c>)
 801f2f4:	4293      	cmp	r3, r2
 801f2f6:	d013      	beq.n	801f320 <HAL_TIM_IC_Start_IT+0x22c>
 801f2f8:	687b      	ldr	r3, [r7, #4]
 801f2fa:	681b      	ldr	r3, [r3, #0]
 801f2fc:	4a1d      	ldr	r2, [pc, #116]	; (801f374 <HAL_TIM_IC_Start_IT+0x280>)
 801f2fe:	4293      	cmp	r3, r2
 801f300:	d00e      	beq.n	801f320 <HAL_TIM_IC_Start_IT+0x22c>
 801f302:	687b      	ldr	r3, [r7, #4]
 801f304:	681b      	ldr	r3, [r3, #0]
 801f306:	4a1c      	ldr	r2, [pc, #112]	; (801f378 <HAL_TIM_IC_Start_IT+0x284>)
 801f308:	4293      	cmp	r3, r2
 801f30a:	d009      	beq.n	801f320 <HAL_TIM_IC_Start_IT+0x22c>
 801f30c:	687b      	ldr	r3, [r7, #4]
 801f30e:	681b      	ldr	r3, [r3, #0]
 801f310:	4a1a      	ldr	r2, [pc, #104]	; (801f37c <HAL_TIM_IC_Start_IT+0x288>)
 801f312:	4293      	cmp	r3, r2
 801f314:	d004      	beq.n	801f320 <HAL_TIM_IC_Start_IT+0x22c>
 801f316:	687b      	ldr	r3, [r7, #4]
 801f318:	681b      	ldr	r3, [r3, #0]
 801f31a:	4a19      	ldr	r2, [pc, #100]	; (801f380 <HAL_TIM_IC_Start_IT+0x28c>)
 801f31c:	4293      	cmp	r3, r2
 801f31e:	d115      	bne.n	801f34c <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801f320:	687b      	ldr	r3, [r7, #4]
 801f322:	681b      	ldr	r3, [r3, #0]
 801f324:	689a      	ldr	r2, [r3, #8]
 801f326:	4b17      	ldr	r3, [pc, #92]	; (801f384 <HAL_TIM_IC_Start_IT+0x290>)
 801f328:	4013      	ands	r3, r2
 801f32a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f32c:	68bb      	ldr	r3, [r7, #8]
 801f32e:	2b06      	cmp	r3, #6
 801f330:	d015      	beq.n	801f35e <HAL_TIM_IC_Start_IT+0x26a>
 801f332:	68bb      	ldr	r3, [r7, #8]
 801f334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f338:	d011      	beq.n	801f35e <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 801f33a:	687b      	ldr	r3, [r7, #4]
 801f33c:	681b      	ldr	r3, [r3, #0]
 801f33e:	681a      	ldr	r2, [r3, #0]
 801f340:	687b      	ldr	r3, [r7, #4]
 801f342:	681b      	ldr	r3, [r3, #0]
 801f344:	f042 0201 	orr.w	r2, r2, #1
 801f348:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f34a:	e008      	b.n	801f35e <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 801f34c:	687b      	ldr	r3, [r7, #4]
 801f34e:	681b      	ldr	r3, [r3, #0]
 801f350:	681a      	ldr	r2, [r3, #0]
 801f352:	687b      	ldr	r3, [r7, #4]
 801f354:	681b      	ldr	r3, [r3, #0]
 801f356:	f042 0201 	orr.w	r2, r2, #1
 801f35a:	601a      	str	r2, [r3, #0]
 801f35c:	e000      	b.n	801f360 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f35e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 801f360:	7bfb      	ldrb	r3, [r7, #15]
}
 801f362:	4618      	mov	r0, r3
 801f364:	3710      	adds	r7, #16
 801f366:	46bd      	mov	sp, r7
 801f368:	bd80      	pop	{r7, pc}
 801f36a:	bf00      	nop
 801f36c:	40012c00 	.word	0x40012c00
 801f370:	40000400 	.word	0x40000400
 801f374:	40000800 	.word	0x40000800
 801f378:	40000c00 	.word	0x40000c00
 801f37c:	40013400 	.word	0x40013400
 801f380:	40014000 	.word	0x40014000
 801f384:	00010007 	.word	0x00010007

0801f388 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 801f388:	b580      	push	{r7, lr}
 801f38a:	b086      	sub	sp, #24
 801f38c:	af00      	add	r7, sp, #0
 801f38e:	6078      	str	r0, [r7, #4]
 801f390:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 801f392:	687b      	ldr	r3, [r7, #4]
 801f394:	2b00      	cmp	r3, #0
 801f396:	d101      	bne.n	801f39c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 801f398:	2301      	movs	r3, #1
 801f39a:	e097      	b.n	801f4cc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 801f39c:	687b      	ldr	r3, [r7, #4]
 801f39e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f3a2:	b2db      	uxtb	r3, r3
 801f3a4:	2b00      	cmp	r3, #0
 801f3a6:	d106      	bne.n	801f3b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801f3a8:	687b      	ldr	r3, [r7, #4]
 801f3aa:	2200      	movs	r2, #0
 801f3ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 801f3b0:	6878      	ldr	r0, [r7, #4]
 801f3b2:	f7f9 f8eb 	bl	801858c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f3b6:	687b      	ldr	r3, [r7, #4]
 801f3b8:	2202      	movs	r2, #2
 801f3ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 801f3be:	687b      	ldr	r3, [r7, #4]
 801f3c0:	681b      	ldr	r3, [r3, #0]
 801f3c2:	689b      	ldr	r3, [r3, #8]
 801f3c4:	687a      	ldr	r2, [r7, #4]
 801f3c6:	6812      	ldr	r2, [r2, #0]
 801f3c8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 801f3cc:	f023 0307 	bic.w	r3, r3, #7
 801f3d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801f3d2:	687b      	ldr	r3, [r7, #4]
 801f3d4:	681a      	ldr	r2, [r3, #0]
 801f3d6:	687b      	ldr	r3, [r7, #4]
 801f3d8:	3304      	adds	r3, #4
 801f3da:	4619      	mov	r1, r3
 801f3dc:	4610      	mov	r0, r2
 801f3de:	f000 fd03 	bl	801fde8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801f3e2:	687b      	ldr	r3, [r7, #4]
 801f3e4:	681b      	ldr	r3, [r3, #0]
 801f3e6:	689b      	ldr	r3, [r3, #8]
 801f3e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 801f3ea:	687b      	ldr	r3, [r7, #4]
 801f3ec:	681b      	ldr	r3, [r3, #0]
 801f3ee:	699b      	ldr	r3, [r3, #24]
 801f3f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 801f3f2:	687b      	ldr	r3, [r7, #4]
 801f3f4:	681b      	ldr	r3, [r3, #0]
 801f3f6:	6a1b      	ldr	r3, [r3, #32]
 801f3f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 801f3fa:	683b      	ldr	r3, [r7, #0]
 801f3fc:	681b      	ldr	r3, [r3, #0]
 801f3fe:	697a      	ldr	r2, [r7, #20]
 801f400:	4313      	orrs	r3, r2
 801f402:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 801f404:	693b      	ldr	r3, [r7, #16]
 801f406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801f40a:	f023 0303 	bic.w	r3, r3, #3
 801f40e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 801f410:	683b      	ldr	r3, [r7, #0]
 801f412:	689a      	ldr	r2, [r3, #8]
 801f414:	683b      	ldr	r3, [r7, #0]
 801f416:	699b      	ldr	r3, [r3, #24]
 801f418:	021b      	lsls	r3, r3, #8
 801f41a:	4313      	orrs	r3, r2
 801f41c:	693a      	ldr	r2, [r7, #16]
 801f41e:	4313      	orrs	r3, r2
 801f420:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 801f422:	693b      	ldr	r3, [r7, #16]
 801f424:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 801f428:	f023 030c 	bic.w	r3, r3, #12
 801f42c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 801f42e:	693b      	ldr	r3, [r7, #16]
 801f430:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801f434:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801f438:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 801f43a:	683b      	ldr	r3, [r7, #0]
 801f43c:	68da      	ldr	r2, [r3, #12]
 801f43e:	683b      	ldr	r3, [r7, #0]
 801f440:	69db      	ldr	r3, [r3, #28]
 801f442:	021b      	lsls	r3, r3, #8
 801f444:	4313      	orrs	r3, r2
 801f446:	693a      	ldr	r2, [r7, #16]
 801f448:	4313      	orrs	r3, r2
 801f44a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 801f44c:	683b      	ldr	r3, [r7, #0]
 801f44e:	691b      	ldr	r3, [r3, #16]
 801f450:	011a      	lsls	r2, r3, #4
 801f452:	683b      	ldr	r3, [r7, #0]
 801f454:	6a1b      	ldr	r3, [r3, #32]
 801f456:	031b      	lsls	r3, r3, #12
 801f458:	4313      	orrs	r3, r2
 801f45a:	693a      	ldr	r2, [r7, #16]
 801f45c:	4313      	orrs	r3, r2
 801f45e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 801f460:	68fb      	ldr	r3, [r7, #12]
 801f462:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 801f466:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 801f468:	68fb      	ldr	r3, [r7, #12]
 801f46a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 801f46e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 801f470:	683b      	ldr	r3, [r7, #0]
 801f472:	685a      	ldr	r2, [r3, #4]
 801f474:	683b      	ldr	r3, [r7, #0]
 801f476:	695b      	ldr	r3, [r3, #20]
 801f478:	011b      	lsls	r3, r3, #4
 801f47a:	4313      	orrs	r3, r2
 801f47c:	68fa      	ldr	r2, [r7, #12]
 801f47e:	4313      	orrs	r3, r2
 801f480:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801f482:	687b      	ldr	r3, [r7, #4]
 801f484:	681b      	ldr	r3, [r3, #0]
 801f486:	697a      	ldr	r2, [r7, #20]
 801f488:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 801f48a:	687b      	ldr	r3, [r7, #4]
 801f48c:	681b      	ldr	r3, [r3, #0]
 801f48e:	693a      	ldr	r2, [r7, #16]
 801f490:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 801f492:	687b      	ldr	r3, [r7, #4]
 801f494:	681b      	ldr	r3, [r3, #0]
 801f496:	68fa      	ldr	r2, [r7, #12]
 801f498:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801f49a:	687b      	ldr	r3, [r7, #4]
 801f49c:	2201      	movs	r2, #1
 801f49e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801f4a2:	687b      	ldr	r3, [r7, #4]
 801f4a4:	2201      	movs	r2, #1
 801f4a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801f4aa:	687b      	ldr	r3, [r7, #4]
 801f4ac:	2201      	movs	r2, #1
 801f4ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801f4b2:	687b      	ldr	r3, [r7, #4]
 801f4b4:	2201      	movs	r2, #1
 801f4b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801f4ba:	687b      	ldr	r3, [r7, #4]
 801f4bc:	2201      	movs	r2, #1
 801f4be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801f4c2:	687b      	ldr	r3, [r7, #4]
 801f4c4:	2201      	movs	r2, #1
 801f4c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801f4ca:	2300      	movs	r3, #0
}
 801f4cc:	4618      	mov	r0, r3
 801f4ce:	3718      	adds	r7, #24
 801f4d0:	46bd      	mov	sp, r7
 801f4d2:	bd80      	pop	{r7, pc}

0801f4d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801f4d4:	b580      	push	{r7, lr}
 801f4d6:	b084      	sub	sp, #16
 801f4d8:	af00      	add	r7, sp, #0
 801f4da:	6078      	str	r0, [r7, #4]
 801f4dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 801f4de:	687b      	ldr	r3, [r7, #4]
 801f4e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801f4e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 801f4e6:	687b      	ldr	r3, [r7, #4]
 801f4e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801f4ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 801f4ee:	687b      	ldr	r3, [r7, #4]
 801f4f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801f4f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 801f4f6:	687b      	ldr	r3, [r7, #4]
 801f4f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f4fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 801f4fe:	683b      	ldr	r3, [r7, #0]
 801f500:	2b00      	cmp	r3, #0
 801f502:	d110      	bne.n	801f526 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 801f504:	7bfb      	ldrb	r3, [r7, #15]
 801f506:	2b01      	cmp	r3, #1
 801f508:	d102      	bne.n	801f510 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 801f50a:	7b7b      	ldrb	r3, [r7, #13]
 801f50c:	2b01      	cmp	r3, #1
 801f50e:	d001      	beq.n	801f514 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 801f510:	2301      	movs	r3, #1
 801f512:	e069      	b.n	801f5e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801f514:	687b      	ldr	r3, [r7, #4]
 801f516:	2202      	movs	r2, #2
 801f518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801f51c:	687b      	ldr	r3, [r7, #4]
 801f51e:	2202      	movs	r2, #2
 801f520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801f524:	e031      	b.n	801f58a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 801f526:	683b      	ldr	r3, [r7, #0]
 801f528:	2b04      	cmp	r3, #4
 801f52a:	d110      	bne.n	801f54e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 801f52c:	7bbb      	ldrb	r3, [r7, #14]
 801f52e:	2b01      	cmp	r3, #1
 801f530:	d102      	bne.n	801f538 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 801f532:	7b3b      	ldrb	r3, [r7, #12]
 801f534:	2b01      	cmp	r3, #1
 801f536:	d001      	beq.n	801f53c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 801f538:	2301      	movs	r3, #1
 801f53a:	e055      	b.n	801f5e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 801f53c:	687b      	ldr	r3, [r7, #4]
 801f53e:	2202      	movs	r2, #2
 801f540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 801f544:	687b      	ldr	r3, [r7, #4]
 801f546:	2202      	movs	r2, #2
 801f548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801f54c:	e01d      	b.n	801f58a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 801f54e:	7bfb      	ldrb	r3, [r7, #15]
 801f550:	2b01      	cmp	r3, #1
 801f552:	d108      	bne.n	801f566 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 801f554:	7bbb      	ldrb	r3, [r7, #14]
 801f556:	2b01      	cmp	r3, #1
 801f558:	d105      	bne.n	801f566 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 801f55a:	7b7b      	ldrb	r3, [r7, #13]
 801f55c:	2b01      	cmp	r3, #1
 801f55e:	d102      	bne.n	801f566 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 801f560:	7b3b      	ldrb	r3, [r7, #12]
 801f562:	2b01      	cmp	r3, #1
 801f564:	d001      	beq.n	801f56a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 801f566:	2301      	movs	r3, #1
 801f568:	e03e      	b.n	801f5e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801f56a:	687b      	ldr	r3, [r7, #4]
 801f56c:	2202      	movs	r2, #2
 801f56e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 801f572:	687b      	ldr	r3, [r7, #4]
 801f574:	2202      	movs	r2, #2
 801f576:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801f57a:	687b      	ldr	r3, [r7, #4]
 801f57c:	2202      	movs	r2, #2
 801f57e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 801f582:	687b      	ldr	r3, [r7, #4]
 801f584:	2202      	movs	r2, #2
 801f586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 801f58a:	683b      	ldr	r3, [r7, #0]
 801f58c:	2b00      	cmp	r3, #0
 801f58e:	d003      	beq.n	801f598 <HAL_TIM_Encoder_Start+0xc4>
 801f590:	683b      	ldr	r3, [r7, #0]
 801f592:	2b04      	cmp	r3, #4
 801f594:	d008      	beq.n	801f5a8 <HAL_TIM_Encoder_Start+0xd4>
 801f596:	e00f      	b.n	801f5b8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801f598:	687b      	ldr	r3, [r7, #4]
 801f59a:	681b      	ldr	r3, [r3, #0]
 801f59c:	2201      	movs	r2, #1
 801f59e:	2100      	movs	r1, #0
 801f5a0:	4618      	mov	r0, r3
 801f5a2:	f001 f951 	bl	8020848 <TIM_CCxChannelCmd>
      break;
 801f5a6:	e016      	b.n	801f5d6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801f5a8:	687b      	ldr	r3, [r7, #4]
 801f5aa:	681b      	ldr	r3, [r3, #0]
 801f5ac:	2201      	movs	r2, #1
 801f5ae:	2104      	movs	r1, #4
 801f5b0:	4618      	mov	r0, r3
 801f5b2:	f001 f949 	bl	8020848 <TIM_CCxChannelCmd>
      break;
 801f5b6:	e00e      	b.n	801f5d6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801f5b8:	687b      	ldr	r3, [r7, #4]
 801f5ba:	681b      	ldr	r3, [r3, #0]
 801f5bc:	2201      	movs	r2, #1
 801f5be:	2100      	movs	r1, #0
 801f5c0:	4618      	mov	r0, r3
 801f5c2:	f001 f941 	bl	8020848 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801f5c6:	687b      	ldr	r3, [r7, #4]
 801f5c8:	681b      	ldr	r3, [r3, #0]
 801f5ca:	2201      	movs	r2, #1
 801f5cc:	2104      	movs	r1, #4
 801f5ce:	4618      	mov	r0, r3
 801f5d0:	f001 f93a 	bl	8020848 <TIM_CCxChannelCmd>
      break;
 801f5d4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 801f5d6:	687b      	ldr	r3, [r7, #4]
 801f5d8:	681b      	ldr	r3, [r3, #0]
 801f5da:	681a      	ldr	r2, [r3, #0]
 801f5dc:	687b      	ldr	r3, [r7, #4]
 801f5de:	681b      	ldr	r3, [r3, #0]
 801f5e0:	f042 0201 	orr.w	r2, r2, #1
 801f5e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801f5e6:	2300      	movs	r3, #0
}
 801f5e8:	4618      	mov	r0, r3
 801f5ea:	3710      	adds	r7, #16
 801f5ec:	46bd      	mov	sp, r7
 801f5ee:	bd80      	pop	{r7, pc}

0801f5f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801f5f0:	b580      	push	{r7, lr}
 801f5f2:	b082      	sub	sp, #8
 801f5f4:	af00      	add	r7, sp, #0
 801f5f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801f5f8:	687b      	ldr	r3, [r7, #4]
 801f5fa:	681b      	ldr	r3, [r3, #0]
 801f5fc:	691b      	ldr	r3, [r3, #16]
 801f5fe:	f003 0302 	and.w	r3, r3, #2
 801f602:	2b02      	cmp	r3, #2
 801f604:	d122      	bne.n	801f64c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801f606:	687b      	ldr	r3, [r7, #4]
 801f608:	681b      	ldr	r3, [r3, #0]
 801f60a:	68db      	ldr	r3, [r3, #12]
 801f60c:	f003 0302 	and.w	r3, r3, #2
 801f610:	2b02      	cmp	r3, #2
 801f612:	d11b      	bne.n	801f64c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801f614:	687b      	ldr	r3, [r7, #4]
 801f616:	681b      	ldr	r3, [r3, #0]
 801f618:	f06f 0202 	mvn.w	r2, #2
 801f61c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801f61e:	687b      	ldr	r3, [r7, #4]
 801f620:	2201      	movs	r2, #1
 801f622:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801f624:	687b      	ldr	r3, [r7, #4]
 801f626:	681b      	ldr	r3, [r3, #0]
 801f628:	699b      	ldr	r3, [r3, #24]
 801f62a:	f003 0303 	and.w	r3, r3, #3
 801f62e:	2b00      	cmp	r3, #0
 801f630:	d003      	beq.n	801f63a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801f632:	6878      	ldr	r0, [r7, #4]
 801f634:	f7e4 ff7a 	bl	800452c <HAL_TIM_IC_CaptureCallback>
 801f638:	e005      	b.n	801f646 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801f63a:	6878      	ldr	r0, [r7, #4]
 801f63c:	f000 fbb6 	bl	801fdac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f640:	6878      	ldr	r0, [r7, #4]
 801f642:	f000 fbbd 	bl	801fdc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f646:	687b      	ldr	r3, [r7, #4]
 801f648:	2200      	movs	r2, #0
 801f64a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801f64c:	687b      	ldr	r3, [r7, #4]
 801f64e:	681b      	ldr	r3, [r3, #0]
 801f650:	691b      	ldr	r3, [r3, #16]
 801f652:	f003 0304 	and.w	r3, r3, #4
 801f656:	2b04      	cmp	r3, #4
 801f658:	d122      	bne.n	801f6a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801f65a:	687b      	ldr	r3, [r7, #4]
 801f65c:	681b      	ldr	r3, [r3, #0]
 801f65e:	68db      	ldr	r3, [r3, #12]
 801f660:	f003 0304 	and.w	r3, r3, #4
 801f664:	2b04      	cmp	r3, #4
 801f666:	d11b      	bne.n	801f6a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801f668:	687b      	ldr	r3, [r7, #4]
 801f66a:	681b      	ldr	r3, [r3, #0]
 801f66c:	f06f 0204 	mvn.w	r2, #4
 801f670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801f672:	687b      	ldr	r3, [r7, #4]
 801f674:	2202      	movs	r2, #2
 801f676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801f678:	687b      	ldr	r3, [r7, #4]
 801f67a:	681b      	ldr	r3, [r3, #0]
 801f67c:	699b      	ldr	r3, [r3, #24]
 801f67e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801f682:	2b00      	cmp	r3, #0
 801f684:	d003      	beq.n	801f68e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801f686:	6878      	ldr	r0, [r7, #4]
 801f688:	f7e4 ff50 	bl	800452c <HAL_TIM_IC_CaptureCallback>
 801f68c:	e005      	b.n	801f69a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801f68e:	6878      	ldr	r0, [r7, #4]
 801f690:	f000 fb8c 	bl	801fdac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f694:	6878      	ldr	r0, [r7, #4]
 801f696:	f000 fb93 	bl	801fdc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f69a:	687b      	ldr	r3, [r7, #4]
 801f69c:	2200      	movs	r2, #0
 801f69e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801f6a0:	687b      	ldr	r3, [r7, #4]
 801f6a2:	681b      	ldr	r3, [r3, #0]
 801f6a4:	691b      	ldr	r3, [r3, #16]
 801f6a6:	f003 0308 	and.w	r3, r3, #8
 801f6aa:	2b08      	cmp	r3, #8
 801f6ac:	d122      	bne.n	801f6f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801f6ae:	687b      	ldr	r3, [r7, #4]
 801f6b0:	681b      	ldr	r3, [r3, #0]
 801f6b2:	68db      	ldr	r3, [r3, #12]
 801f6b4:	f003 0308 	and.w	r3, r3, #8
 801f6b8:	2b08      	cmp	r3, #8
 801f6ba:	d11b      	bne.n	801f6f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801f6bc:	687b      	ldr	r3, [r7, #4]
 801f6be:	681b      	ldr	r3, [r3, #0]
 801f6c0:	f06f 0208 	mvn.w	r2, #8
 801f6c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801f6c6:	687b      	ldr	r3, [r7, #4]
 801f6c8:	2204      	movs	r2, #4
 801f6ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801f6cc:	687b      	ldr	r3, [r7, #4]
 801f6ce:	681b      	ldr	r3, [r3, #0]
 801f6d0:	69db      	ldr	r3, [r3, #28]
 801f6d2:	f003 0303 	and.w	r3, r3, #3
 801f6d6:	2b00      	cmp	r3, #0
 801f6d8:	d003      	beq.n	801f6e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801f6da:	6878      	ldr	r0, [r7, #4]
 801f6dc:	f7e4 ff26 	bl	800452c <HAL_TIM_IC_CaptureCallback>
 801f6e0:	e005      	b.n	801f6ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801f6e2:	6878      	ldr	r0, [r7, #4]
 801f6e4:	f000 fb62 	bl	801fdac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f6e8:	6878      	ldr	r0, [r7, #4]
 801f6ea:	f000 fb69 	bl	801fdc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f6ee:	687b      	ldr	r3, [r7, #4]
 801f6f0:	2200      	movs	r2, #0
 801f6f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801f6f4:	687b      	ldr	r3, [r7, #4]
 801f6f6:	681b      	ldr	r3, [r3, #0]
 801f6f8:	691b      	ldr	r3, [r3, #16]
 801f6fa:	f003 0310 	and.w	r3, r3, #16
 801f6fe:	2b10      	cmp	r3, #16
 801f700:	d122      	bne.n	801f748 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801f702:	687b      	ldr	r3, [r7, #4]
 801f704:	681b      	ldr	r3, [r3, #0]
 801f706:	68db      	ldr	r3, [r3, #12]
 801f708:	f003 0310 	and.w	r3, r3, #16
 801f70c:	2b10      	cmp	r3, #16
 801f70e:	d11b      	bne.n	801f748 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801f710:	687b      	ldr	r3, [r7, #4]
 801f712:	681b      	ldr	r3, [r3, #0]
 801f714:	f06f 0210 	mvn.w	r2, #16
 801f718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801f71a:	687b      	ldr	r3, [r7, #4]
 801f71c:	2208      	movs	r2, #8
 801f71e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801f720:	687b      	ldr	r3, [r7, #4]
 801f722:	681b      	ldr	r3, [r3, #0]
 801f724:	69db      	ldr	r3, [r3, #28]
 801f726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801f72a:	2b00      	cmp	r3, #0
 801f72c:	d003      	beq.n	801f736 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801f72e:	6878      	ldr	r0, [r7, #4]
 801f730:	f7e4 fefc 	bl	800452c <HAL_TIM_IC_CaptureCallback>
 801f734:	e005      	b.n	801f742 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801f736:	6878      	ldr	r0, [r7, #4]
 801f738:	f000 fb38 	bl	801fdac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f73c:	6878      	ldr	r0, [r7, #4]
 801f73e:	f000 fb3f 	bl	801fdc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f742:	687b      	ldr	r3, [r7, #4]
 801f744:	2200      	movs	r2, #0
 801f746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801f748:	687b      	ldr	r3, [r7, #4]
 801f74a:	681b      	ldr	r3, [r3, #0]
 801f74c:	691b      	ldr	r3, [r3, #16]
 801f74e:	f003 0301 	and.w	r3, r3, #1
 801f752:	2b01      	cmp	r3, #1
 801f754:	d10e      	bne.n	801f774 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801f756:	687b      	ldr	r3, [r7, #4]
 801f758:	681b      	ldr	r3, [r3, #0]
 801f75a:	68db      	ldr	r3, [r3, #12]
 801f75c:	f003 0301 	and.w	r3, r3, #1
 801f760:	2b01      	cmp	r3, #1
 801f762:	d107      	bne.n	801f774 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801f764:	687b      	ldr	r3, [r7, #4]
 801f766:	681b      	ldr	r3, [r3, #0]
 801f768:	f06f 0201 	mvn.w	r2, #1
 801f76c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801f76e:	6878      	ldr	r0, [r7, #4]
 801f770:	f7f8 fb0c 	bl	8017d8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801f774:	687b      	ldr	r3, [r7, #4]
 801f776:	681b      	ldr	r3, [r3, #0]
 801f778:	691b      	ldr	r3, [r3, #16]
 801f77a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f77e:	2b80      	cmp	r3, #128	; 0x80
 801f780:	d10e      	bne.n	801f7a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801f782:	687b      	ldr	r3, [r7, #4]
 801f784:	681b      	ldr	r3, [r3, #0]
 801f786:	68db      	ldr	r3, [r3, #12]
 801f788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f78c:	2b80      	cmp	r3, #128	; 0x80
 801f78e:	d107      	bne.n	801f7a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801f790:	687b      	ldr	r3, [r7, #4]
 801f792:	681b      	ldr	r3, [r3, #0]
 801f794:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801f798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801f79a:	6878      	ldr	r0, [r7, #4]
 801f79c:	f001 f9ac 	bl	8020af8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801f7a0:	687b      	ldr	r3, [r7, #4]
 801f7a2:	681b      	ldr	r3, [r3, #0]
 801f7a4:	691b      	ldr	r3, [r3, #16]
 801f7a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f7aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f7ae:	d10e      	bne.n	801f7ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801f7b0:	687b      	ldr	r3, [r7, #4]
 801f7b2:	681b      	ldr	r3, [r3, #0]
 801f7b4:	68db      	ldr	r3, [r3, #12]
 801f7b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f7ba:	2b80      	cmp	r3, #128	; 0x80
 801f7bc:	d107      	bne.n	801f7ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801f7be:	687b      	ldr	r3, [r7, #4]
 801f7c0:	681b      	ldr	r3, [r3, #0]
 801f7c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801f7c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801f7c8:	6878      	ldr	r0, [r7, #4]
 801f7ca:	f001 f99f 	bl	8020b0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801f7ce:	687b      	ldr	r3, [r7, #4]
 801f7d0:	681b      	ldr	r3, [r3, #0]
 801f7d2:	691b      	ldr	r3, [r3, #16]
 801f7d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f7d8:	2b40      	cmp	r3, #64	; 0x40
 801f7da:	d10e      	bne.n	801f7fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801f7dc:	687b      	ldr	r3, [r7, #4]
 801f7de:	681b      	ldr	r3, [r3, #0]
 801f7e0:	68db      	ldr	r3, [r3, #12]
 801f7e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f7e6:	2b40      	cmp	r3, #64	; 0x40
 801f7e8:	d107      	bne.n	801f7fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801f7ea:	687b      	ldr	r3, [r7, #4]
 801f7ec:	681b      	ldr	r3, [r3, #0]
 801f7ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801f7f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801f7f4:	6878      	ldr	r0, [r7, #4]
 801f7f6:	f000 faed 	bl	801fdd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801f7fa:	687b      	ldr	r3, [r7, #4]
 801f7fc:	681b      	ldr	r3, [r3, #0]
 801f7fe:	691b      	ldr	r3, [r3, #16]
 801f800:	f003 0320 	and.w	r3, r3, #32
 801f804:	2b20      	cmp	r3, #32
 801f806:	d10e      	bne.n	801f826 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801f808:	687b      	ldr	r3, [r7, #4]
 801f80a:	681b      	ldr	r3, [r3, #0]
 801f80c:	68db      	ldr	r3, [r3, #12]
 801f80e:	f003 0320 	and.w	r3, r3, #32
 801f812:	2b20      	cmp	r3, #32
 801f814:	d107      	bne.n	801f826 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801f816:	687b      	ldr	r3, [r7, #4]
 801f818:	681b      	ldr	r3, [r3, #0]
 801f81a:	f06f 0220 	mvn.w	r2, #32
 801f81e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801f820:	6878      	ldr	r0, [r7, #4]
 801f822:	f001 f95f 	bl	8020ae4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801f826:	bf00      	nop
 801f828:	3708      	adds	r7, #8
 801f82a:	46bd      	mov	sp, r7
 801f82c:	bd80      	pop	{r7, pc}

0801f82e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 801f82e:	b580      	push	{r7, lr}
 801f830:	b086      	sub	sp, #24
 801f832:	af00      	add	r7, sp, #0
 801f834:	60f8      	str	r0, [r7, #12]
 801f836:	60b9      	str	r1, [r7, #8]
 801f838:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801f83a:	2300      	movs	r3, #0
 801f83c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 801f83e:	68fb      	ldr	r3, [r7, #12]
 801f840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f844:	2b01      	cmp	r3, #1
 801f846:	d101      	bne.n	801f84c <HAL_TIM_IC_ConfigChannel+0x1e>
 801f848:	2302      	movs	r3, #2
 801f84a:	e088      	b.n	801f95e <HAL_TIM_IC_ConfigChannel+0x130>
 801f84c:	68fb      	ldr	r3, [r7, #12]
 801f84e:	2201      	movs	r2, #1
 801f850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 801f854:	687b      	ldr	r3, [r7, #4]
 801f856:	2b00      	cmp	r3, #0
 801f858:	d11b      	bne.n	801f892 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 801f85a:	68fb      	ldr	r3, [r7, #12]
 801f85c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801f85e:	68bb      	ldr	r3, [r7, #8]
 801f860:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801f862:	68bb      	ldr	r3, [r7, #8]
 801f864:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801f866:	68bb      	ldr	r3, [r7, #8]
 801f868:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 801f86a:	f000 fe2d 	bl	80204c8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801f86e:	68fb      	ldr	r3, [r7, #12]
 801f870:	681b      	ldr	r3, [r3, #0]
 801f872:	699a      	ldr	r2, [r3, #24]
 801f874:	68fb      	ldr	r3, [r7, #12]
 801f876:	681b      	ldr	r3, [r3, #0]
 801f878:	f022 020c 	bic.w	r2, r2, #12
 801f87c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 801f87e:	68fb      	ldr	r3, [r7, #12]
 801f880:	681b      	ldr	r3, [r3, #0]
 801f882:	6999      	ldr	r1, [r3, #24]
 801f884:	68bb      	ldr	r3, [r7, #8]
 801f886:	689a      	ldr	r2, [r3, #8]
 801f888:	68fb      	ldr	r3, [r7, #12]
 801f88a:	681b      	ldr	r3, [r3, #0]
 801f88c:	430a      	orrs	r2, r1
 801f88e:	619a      	str	r2, [r3, #24]
 801f890:	e060      	b.n	801f954 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 801f892:	687b      	ldr	r3, [r7, #4]
 801f894:	2b04      	cmp	r3, #4
 801f896:	d11c      	bne.n	801f8d2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 801f898:	68fb      	ldr	r3, [r7, #12]
 801f89a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801f89c:	68bb      	ldr	r3, [r7, #8]
 801f89e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801f8a0:	68bb      	ldr	r3, [r7, #8]
 801f8a2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801f8a4:	68bb      	ldr	r3, [r7, #8]
 801f8a6:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 801f8a8:	f000 feab 	bl	8020602 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801f8ac:	68fb      	ldr	r3, [r7, #12]
 801f8ae:	681b      	ldr	r3, [r3, #0]
 801f8b0:	699a      	ldr	r2, [r3, #24]
 801f8b2:	68fb      	ldr	r3, [r7, #12]
 801f8b4:	681b      	ldr	r3, [r3, #0]
 801f8b6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801f8ba:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801f8bc:	68fb      	ldr	r3, [r7, #12]
 801f8be:	681b      	ldr	r3, [r3, #0]
 801f8c0:	6999      	ldr	r1, [r3, #24]
 801f8c2:	68bb      	ldr	r3, [r7, #8]
 801f8c4:	689b      	ldr	r3, [r3, #8]
 801f8c6:	021a      	lsls	r2, r3, #8
 801f8c8:	68fb      	ldr	r3, [r7, #12]
 801f8ca:	681b      	ldr	r3, [r3, #0]
 801f8cc:	430a      	orrs	r2, r1
 801f8ce:	619a      	str	r2, [r3, #24]
 801f8d0:	e040      	b.n	801f954 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 801f8d2:	687b      	ldr	r3, [r7, #4]
 801f8d4:	2b08      	cmp	r3, #8
 801f8d6:	d11b      	bne.n	801f910 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801f8d8:	68fb      	ldr	r3, [r7, #12]
 801f8da:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801f8dc:	68bb      	ldr	r3, [r7, #8]
 801f8de:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801f8e0:	68bb      	ldr	r3, [r7, #8]
 801f8e2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801f8e4:	68bb      	ldr	r3, [r7, #8]
 801f8e6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 801f8e8:	f000 fef8 	bl	80206dc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801f8ec:	68fb      	ldr	r3, [r7, #12]
 801f8ee:	681b      	ldr	r3, [r3, #0]
 801f8f0:	69da      	ldr	r2, [r3, #28]
 801f8f2:	68fb      	ldr	r3, [r7, #12]
 801f8f4:	681b      	ldr	r3, [r3, #0]
 801f8f6:	f022 020c 	bic.w	r2, r2, #12
 801f8fa:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801f8fc:	68fb      	ldr	r3, [r7, #12]
 801f8fe:	681b      	ldr	r3, [r3, #0]
 801f900:	69d9      	ldr	r1, [r3, #28]
 801f902:	68bb      	ldr	r3, [r7, #8]
 801f904:	689a      	ldr	r2, [r3, #8]
 801f906:	68fb      	ldr	r3, [r7, #12]
 801f908:	681b      	ldr	r3, [r3, #0]
 801f90a:	430a      	orrs	r2, r1
 801f90c:	61da      	str	r2, [r3, #28]
 801f90e:	e021      	b.n	801f954 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 801f910:	687b      	ldr	r3, [r7, #4]
 801f912:	2b0c      	cmp	r3, #12
 801f914:	d11c      	bne.n	801f950 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 801f916:	68fb      	ldr	r3, [r7, #12]
 801f918:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801f91a:	68bb      	ldr	r3, [r7, #8]
 801f91c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801f91e:	68bb      	ldr	r3, [r7, #8]
 801f920:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801f922:	68bb      	ldr	r3, [r7, #8]
 801f924:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 801f926:	f000 ff15 	bl	8020754 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 801f92a:	68fb      	ldr	r3, [r7, #12]
 801f92c:	681b      	ldr	r3, [r3, #0]
 801f92e:	69da      	ldr	r2, [r3, #28]
 801f930:	68fb      	ldr	r3, [r7, #12]
 801f932:	681b      	ldr	r3, [r3, #0]
 801f934:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801f938:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801f93a:	68fb      	ldr	r3, [r7, #12]
 801f93c:	681b      	ldr	r3, [r3, #0]
 801f93e:	69d9      	ldr	r1, [r3, #28]
 801f940:	68bb      	ldr	r3, [r7, #8]
 801f942:	689b      	ldr	r3, [r3, #8]
 801f944:	021a      	lsls	r2, r3, #8
 801f946:	68fb      	ldr	r3, [r7, #12]
 801f948:	681b      	ldr	r3, [r3, #0]
 801f94a:	430a      	orrs	r2, r1
 801f94c:	61da      	str	r2, [r3, #28]
 801f94e:	e001      	b.n	801f954 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 801f950:	2301      	movs	r3, #1
 801f952:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 801f954:	68fb      	ldr	r3, [r7, #12]
 801f956:	2200      	movs	r2, #0
 801f958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801f95c:	7dfb      	ldrb	r3, [r7, #23]
}
 801f95e:	4618      	mov	r0, r3
 801f960:	3718      	adds	r7, #24
 801f962:	46bd      	mov	sp, r7
 801f964:	bd80      	pop	{r7, pc}
	...

0801f968 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801f968:	b580      	push	{r7, lr}
 801f96a:	b086      	sub	sp, #24
 801f96c:	af00      	add	r7, sp, #0
 801f96e:	60f8      	str	r0, [r7, #12]
 801f970:	60b9      	str	r1, [r7, #8]
 801f972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801f974:	2300      	movs	r3, #0
 801f976:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801f978:	68fb      	ldr	r3, [r7, #12]
 801f97a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f97e:	2b01      	cmp	r3, #1
 801f980:	d101      	bne.n	801f986 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801f982:	2302      	movs	r3, #2
 801f984:	e0ff      	b.n	801fb86 <HAL_TIM_PWM_ConfigChannel+0x21e>
 801f986:	68fb      	ldr	r3, [r7, #12]
 801f988:	2201      	movs	r2, #1
 801f98a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801f98e:	687b      	ldr	r3, [r7, #4]
 801f990:	2b14      	cmp	r3, #20
 801f992:	f200 80f0 	bhi.w	801fb76 <HAL_TIM_PWM_ConfigChannel+0x20e>
 801f996:	a201      	add	r2, pc, #4	; (adr r2, 801f99c <HAL_TIM_PWM_ConfigChannel+0x34>)
 801f998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f99c:	0801f9f1 	.word	0x0801f9f1
 801f9a0:	0801fb77 	.word	0x0801fb77
 801f9a4:	0801fb77 	.word	0x0801fb77
 801f9a8:	0801fb77 	.word	0x0801fb77
 801f9ac:	0801fa31 	.word	0x0801fa31
 801f9b0:	0801fb77 	.word	0x0801fb77
 801f9b4:	0801fb77 	.word	0x0801fb77
 801f9b8:	0801fb77 	.word	0x0801fb77
 801f9bc:	0801fa73 	.word	0x0801fa73
 801f9c0:	0801fb77 	.word	0x0801fb77
 801f9c4:	0801fb77 	.word	0x0801fb77
 801f9c8:	0801fb77 	.word	0x0801fb77
 801f9cc:	0801fab3 	.word	0x0801fab3
 801f9d0:	0801fb77 	.word	0x0801fb77
 801f9d4:	0801fb77 	.word	0x0801fb77
 801f9d8:	0801fb77 	.word	0x0801fb77
 801f9dc:	0801faf5 	.word	0x0801faf5
 801f9e0:	0801fb77 	.word	0x0801fb77
 801f9e4:	0801fb77 	.word	0x0801fb77
 801f9e8:	0801fb77 	.word	0x0801fb77
 801f9ec:	0801fb35 	.word	0x0801fb35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801f9f0:	68fb      	ldr	r3, [r7, #12]
 801f9f2:	681b      	ldr	r3, [r3, #0]
 801f9f4:	68b9      	ldr	r1, [r7, #8]
 801f9f6:	4618      	mov	r0, r3
 801f9f8:	f000 fa90 	bl	801ff1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801f9fc:	68fb      	ldr	r3, [r7, #12]
 801f9fe:	681b      	ldr	r3, [r3, #0]
 801fa00:	699a      	ldr	r2, [r3, #24]
 801fa02:	68fb      	ldr	r3, [r7, #12]
 801fa04:	681b      	ldr	r3, [r3, #0]
 801fa06:	f042 0208 	orr.w	r2, r2, #8
 801fa0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801fa0c:	68fb      	ldr	r3, [r7, #12]
 801fa0e:	681b      	ldr	r3, [r3, #0]
 801fa10:	699a      	ldr	r2, [r3, #24]
 801fa12:	68fb      	ldr	r3, [r7, #12]
 801fa14:	681b      	ldr	r3, [r3, #0]
 801fa16:	f022 0204 	bic.w	r2, r2, #4
 801fa1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801fa1c:	68fb      	ldr	r3, [r7, #12]
 801fa1e:	681b      	ldr	r3, [r3, #0]
 801fa20:	6999      	ldr	r1, [r3, #24]
 801fa22:	68bb      	ldr	r3, [r7, #8]
 801fa24:	691a      	ldr	r2, [r3, #16]
 801fa26:	68fb      	ldr	r3, [r7, #12]
 801fa28:	681b      	ldr	r3, [r3, #0]
 801fa2a:	430a      	orrs	r2, r1
 801fa2c:	619a      	str	r2, [r3, #24]
      break;
 801fa2e:	e0a5      	b.n	801fb7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801fa30:	68fb      	ldr	r3, [r7, #12]
 801fa32:	681b      	ldr	r3, [r3, #0]
 801fa34:	68b9      	ldr	r1, [r7, #8]
 801fa36:	4618      	mov	r0, r3
 801fa38:	f000 fb00 	bl	802003c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801fa3c:	68fb      	ldr	r3, [r7, #12]
 801fa3e:	681b      	ldr	r3, [r3, #0]
 801fa40:	699a      	ldr	r2, [r3, #24]
 801fa42:	68fb      	ldr	r3, [r7, #12]
 801fa44:	681b      	ldr	r3, [r3, #0]
 801fa46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801fa4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801fa4c:	68fb      	ldr	r3, [r7, #12]
 801fa4e:	681b      	ldr	r3, [r3, #0]
 801fa50:	699a      	ldr	r2, [r3, #24]
 801fa52:	68fb      	ldr	r3, [r7, #12]
 801fa54:	681b      	ldr	r3, [r3, #0]
 801fa56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801fa5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801fa5c:	68fb      	ldr	r3, [r7, #12]
 801fa5e:	681b      	ldr	r3, [r3, #0]
 801fa60:	6999      	ldr	r1, [r3, #24]
 801fa62:	68bb      	ldr	r3, [r7, #8]
 801fa64:	691b      	ldr	r3, [r3, #16]
 801fa66:	021a      	lsls	r2, r3, #8
 801fa68:	68fb      	ldr	r3, [r7, #12]
 801fa6a:	681b      	ldr	r3, [r3, #0]
 801fa6c:	430a      	orrs	r2, r1
 801fa6e:	619a      	str	r2, [r3, #24]
      break;
 801fa70:	e084      	b.n	801fb7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801fa72:	68fb      	ldr	r3, [r7, #12]
 801fa74:	681b      	ldr	r3, [r3, #0]
 801fa76:	68b9      	ldr	r1, [r7, #8]
 801fa78:	4618      	mov	r0, r3
 801fa7a:	f000 fb69 	bl	8020150 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801fa7e:	68fb      	ldr	r3, [r7, #12]
 801fa80:	681b      	ldr	r3, [r3, #0]
 801fa82:	69da      	ldr	r2, [r3, #28]
 801fa84:	68fb      	ldr	r3, [r7, #12]
 801fa86:	681b      	ldr	r3, [r3, #0]
 801fa88:	f042 0208 	orr.w	r2, r2, #8
 801fa8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801fa8e:	68fb      	ldr	r3, [r7, #12]
 801fa90:	681b      	ldr	r3, [r3, #0]
 801fa92:	69da      	ldr	r2, [r3, #28]
 801fa94:	68fb      	ldr	r3, [r7, #12]
 801fa96:	681b      	ldr	r3, [r3, #0]
 801fa98:	f022 0204 	bic.w	r2, r2, #4
 801fa9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801fa9e:	68fb      	ldr	r3, [r7, #12]
 801faa0:	681b      	ldr	r3, [r3, #0]
 801faa2:	69d9      	ldr	r1, [r3, #28]
 801faa4:	68bb      	ldr	r3, [r7, #8]
 801faa6:	691a      	ldr	r2, [r3, #16]
 801faa8:	68fb      	ldr	r3, [r7, #12]
 801faaa:	681b      	ldr	r3, [r3, #0]
 801faac:	430a      	orrs	r2, r1
 801faae:	61da      	str	r2, [r3, #28]
      break;
 801fab0:	e064      	b.n	801fb7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801fab2:	68fb      	ldr	r3, [r7, #12]
 801fab4:	681b      	ldr	r3, [r3, #0]
 801fab6:	68b9      	ldr	r1, [r7, #8]
 801fab8:	4618      	mov	r0, r3
 801faba:	f000 fbd1 	bl	8020260 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801fabe:	68fb      	ldr	r3, [r7, #12]
 801fac0:	681b      	ldr	r3, [r3, #0]
 801fac2:	69da      	ldr	r2, [r3, #28]
 801fac4:	68fb      	ldr	r3, [r7, #12]
 801fac6:	681b      	ldr	r3, [r3, #0]
 801fac8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801facc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801face:	68fb      	ldr	r3, [r7, #12]
 801fad0:	681b      	ldr	r3, [r3, #0]
 801fad2:	69da      	ldr	r2, [r3, #28]
 801fad4:	68fb      	ldr	r3, [r7, #12]
 801fad6:	681b      	ldr	r3, [r3, #0]
 801fad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801fadc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801fade:	68fb      	ldr	r3, [r7, #12]
 801fae0:	681b      	ldr	r3, [r3, #0]
 801fae2:	69d9      	ldr	r1, [r3, #28]
 801fae4:	68bb      	ldr	r3, [r7, #8]
 801fae6:	691b      	ldr	r3, [r3, #16]
 801fae8:	021a      	lsls	r2, r3, #8
 801faea:	68fb      	ldr	r3, [r7, #12]
 801faec:	681b      	ldr	r3, [r3, #0]
 801faee:	430a      	orrs	r2, r1
 801faf0:	61da      	str	r2, [r3, #28]
      break;
 801faf2:	e043      	b.n	801fb7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801faf4:	68fb      	ldr	r3, [r7, #12]
 801faf6:	681b      	ldr	r3, [r3, #0]
 801faf8:	68b9      	ldr	r1, [r7, #8]
 801fafa:	4618      	mov	r0, r3
 801fafc:	f000 fc1a 	bl	8020334 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801fb00:	68fb      	ldr	r3, [r7, #12]
 801fb02:	681b      	ldr	r3, [r3, #0]
 801fb04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801fb06:	68fb      	ldr	r3, [r7, #12]
 801fb08:	681b      	ldr	r3, [r3, #0]
 801fb0a:	f042 0208 	orr.w	r2, r2, #8
 801fb0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801fb10:	68fb      	ldr	r3, [r7, #12]
 801fb12:	681b      	ldr	r3, [r3, #0]
 801fb14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801fb16:	68fb      	ldr	r3, [r7, #12]
 801fb18:	681b      	ldr	r3, [r3, #0]
 801fb1a:	f022 0204 	bic.w	r2, r2, #4
 801fb1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801fb20:	68fb      	ldr	r3, [r7, #12]
 801fb22:	681b      	ldr	r3, [r3, #0]
 801fb24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801fb26:	68bb      	ldr	r3, [r7, #8]
 801fb28:	691a      	ldr	r2, [r3, #16]
 801fb2a:	68fb      	ldr	r3, [r7, #12]
 801fb2c:	681b      	ldr	r3, [r3, #0]
 801fb2e:	430a      	orrs	r2, r1
 801fb30:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801fb32:	e023      	b.n	801fb7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801fb34:	68fb      	ldr	r3, [r7, #12]
 801fb36:	681b      	ldr	r3, [r3, #0]
 801fb38:	68b9      	ldr	r1, [r7, #8]
 801fb3a:	4618      	mov	r0, r3
 801fb3c:	f000 fc5e 	bl	80203fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801fb40:	68fb      	ldr	r3, [r7, #12]
 801fb42:	681b      	ldr	r3, [r3, #0]
 801fb44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801fb46:	68fb      	ldr	r3, [r7, #12]
 801fb48:	681b      	ldr	r3, [r3, #0]
 801fb4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801fb4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801fb50:	68fb      	ldr	r3, [r7, #12]
 801fb52:	681b      	ldr	r3, [r3, #0]
 801fb54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801fb56:	68fb      	ldr	r3, [r7, #12]
 801fb58:	681b      	ldr	r3, [r3, #0]
 801fb5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801fb5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801fb60:	68fb      	ldr	r3, [r7, #12]
 801fb62:	681b      	ldr	r3, [r3, #0]
 801fb64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801fb66:	68bb      	ldr	r3, [r7, #8]
 801fb68:	691b      	ldr	r3, [r3, #16]
 801fb6a:	021a      	lsls	r2, r3, #8
 801fb6c:	68fb      	ldr	r3, [r7, #12]
 801fb6e:	681b      	ldr	r3, [r3, #0]
 801fb70:	430a      	orrs	r2, r1
 801fb72:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801fb74:	e002      	b.n	801fb7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801fb76:	2301      	movs	r3, #1
 801fb78:	75fb      	strb	r3, [r7, #23]
      break;
 801fb7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801fb7c:	68fb      	ldr	r3, [r7, #12]
 801fb7e:	2200      	movs	r2, #0
 801fb80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801fb84:	7dfb      	ldrb	r3, [r7, #23]
}
 801fb86:	4618      	mov	r0, r3
 801fb88:	3718      	adds	r7, #24
 801fb8a:	46bd      	mov	sp, r7
 801fb8c:	bd80      	pop	{r7, pc}
 801fb8e:	bf00      	nop

0801fb90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801fb90:	b580      	push	{r7, lr}
 801fb92:	b084      	sub	sp, #16
 801fb94:	af00      	add	r7, sp, #0
 801fb96:	6078      	str	r0, [r7, #4]
 801fb98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801fb9a:	2300      	movs	r3, #0
 801fb9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801fb9e:	687b      	ldr	r3, [r7, #4]
 801fba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801fba4:	2b01      	cmp	r3, #1
 801fba6:	d101      	bne.n	801fbac <HAL_TIM_ConfigClockSource+0x1c>
 801fba8:	2302      	movs	r3, #2
 801fbaa:	e0b6      	b.n	801fd1a <HAL_TIM_ConfigClockSource+0x18a>
 801fbac:	687b      	ldr	r3, [r7, #4]
 801fbae:	2201      	movs	r2, #1
 801fbb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801fbb4:	687b      	ldr	r3, [r7, #4]
 801fbb6:	2202      	movs	r2, #2
 801fbb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801fbbc:	687b      	ldr	r3, [r7, #4]
 801fbbe:	681b      	ldr	r3, [r3, #0]
 801fbc0:	689b      	ldr	r3, [r3, #8]
 801fbc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801fbc4:	68bb      	ldr	r3, [r7, #8]
 801fbc6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 801fbca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801fbce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801fbd0:	68bb      	ldr	r3, [r7, #8]
 801fbd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801fbd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801fbd8:	687b      	ldr	r3, [r7, #4]
 801fbda:	681b      	ldr	r3, [r3, #0]
 801fbdc:	68ba      	ldr	r2, [r7, #8]
 801fbde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801fbe0:	683b      	ldr	r3, [r7, #0]
 801fbe2:	681b      	ldr	r3, [r3, #0]
 801fbe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801fbe8:	d03e      	beq.n	801fc68 <HAL_TIM_ConfigClockSource+0xd8>
 801fbea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801fbee:	f200 8087 	bhi.w	801fd00 <HAL_TIM_ConfigClockSource+0x170>
 801fbf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801fbf6:	f000 8086 	beq.w	801fd06 <HAL_TIM_ConfigClockSource+0x176>
 801fbfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801fbfe:	d87f      	bhi.n	801fd00 <HAL_TIM_ConfigClockSource+0x170>
 801fc00:	2b70      	cmp	r3, #112	; 0x70
 801fc02:	d01a      	beq.n	801fc3a <HAL_TIM_ConfigClockSource+0xaa>
 801fc04:	2b70      	cmp	r3, #112	; 0x70
 801fc06:	d87b      	bhi.n	801fd00 <HAL_TIM_ConfigClockSource+0x170>
 801fc08:	2b60      	cmp	r3, #96	; 0x60
 801fc0a:	d050      	beq.n	801fcae <HAL_TIM_ConfigClockSource+0x11e>
 801fc0c:	2b60      	cmp	r3, #96	; 0x60
 801fc0e:	d877      	bhi.n	801fd00 <HAL_TIM_ConfigClockSource+0x170>
 801fc10:	2b50      	cmp	r3, #80	; 0x50
 801fc12:	d03c      	beq.n	801fc8e <HAL_TIM_ConfigClockSource+0xfe>
 801fc14:	2b50      	cmp	r3, #80	; 0x50
 801fc16:	d873      	bhi.n	801fd00 <HAL_TIM_ConfigClockSource+0x170>
 801fc18:	2b40      	cmp	r3, #64	; 0x40
 801fc1a:	d058      	beq.n	801fcce <HAL_TIM_ConfigClockSource+0x13e>
 801fc1c:	2b40      	cmp	r3, #64	; 0x40
 801fc1e:	d86f      	bhi.n	801fd00 <HAL_TIM_ConfigClockSource+0x170>
 801fc20:	2b30      	cmp	r3, #48	; 0x30
 801fc22:	d064      	beq.n	801fcee <HAL_TIM_ConfigClockSource+0x15e>
 801fc24:	2b30      	cmp	r3, #48	; 0x30
 801fc26:	d86b      	bhi.n	801fd00 <HAL_TIM_ConfigClockSource+0x170>
 801fc28:	2b20      	cmp	r3, #32
 801fc2a:	d060      	beq.n	801fcee <HAL_TIM_ConfigClockSource+0x15e>
 801fc2c:	2b20      	cmp	r3, #32
 801fc2e:	d867      	bhi.n	801fd00 <HAL_TIM_ConfigClockSource+0x170>
 801fc30:	2b00      	cmp	r3, #0
 801fc32:	d05c      	beq.n	801fcee <HAL_TIM_ConfigClockSource+0x15e>
 801fc34:	2b10      	cmp	r3, #16
 801fc36:	d05a      	beq.n	801fcee <HAL_TIM_ConfigClockSource+0x15e>
 801fc38:	e062      	b.n	801fd00 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801fc3a:	687b      	ldr	r3, [r7, #4]
 801fc3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801fc3e:	683b      	ldr	r3, [r7, #0]
 801fc40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801fc42:	683b      	ldr	r3, [r7, #0]
 801fc44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801fc46:	683b      	ldr	r3, [r7, #0]
 801fc48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801fc4a:	f000 fddd 	bl	8020808 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801fc4e:	687b      	ldr	r3, [r7, #4]
 801fc50:	681b      	ldr	r3, [r3, #0]
 801fc52:	689b      	ldr	r3, [r3, #8]
 801fc54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801fc56:	68bb      	ldr	r3, [r7, #8]
 801fc58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801fc5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801fc5e:	687b      	ldr	r3, [r7, #4]
 801fc60:	681b      	ldr	r3, [r3, #0]
 801fc62:	68ba      	ldr	r2, [r7, #8]
 801fc64:	609a      	str	r2, [r3, #8]
      break;
 801fc66:	e04f      	b.n	801fd08 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801fc68:	687b      	ldr	r3, [r7, #4]
 801fc6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801fc6c:	683b      	ldr	r3, [r7, #0]
 801fc6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801fc70:	683b      	ldr	r3, [r7, #0]
 801fc72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801fc74:	683b      	ldr	r3, [r7, #0]
 801fc76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801fc78:	f000 fdc6 	bl	8020808 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801fc7c:	687b      	ldr	r3, [r7, #4]
 801fc7e:	681b      	ldr	r3, [r3, #0]
 801fc80:	689a      	ldr	r2, [r3, #8]
 801fc82:	687b      	ldr	r3, [r7, #4]
 801fc84:	681b      	ldr	r3, [r3, #0]
 801fc86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801fc8a:	609a      	str	r2, [r3, #8]
      break;
 801fc8c:	e03c      	b.n	801fd08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801fc8e:	687b      	ldr	r3, [r7, #4]
 801fc90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801fc92:	683b      	ldr	r3, [r7, #0]
 801fc94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801fc96:	683b      	ldr	r3, [r7, #0]
 801fc98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801fc9a:	461a      	mov	r2, r3
 801fc9c:	f000 fc82 	bl	80205a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801fca0:	687b      	ldr	r3, [r7, #4]
 801fca2:	681b      	ldr	r3, [r3, #0]
 801fca4:	2150      	movs	r1, #80	; 0x50
 801fca6:	4618      	mov	r0, r3
 801fca8:	f000 fd91 	bl	80207ce <TIM_ITRx_SetConfig>
      break;
 801fcac:	e02c      	b.n	801fd08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801fcae:	687b      	ldr	r3, [r7, #4]
 801fcb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801fcb2:	683b      	ldr	r3, [r7, #0]
 801fcb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801fcb6:	683b      	ldr	r3, [r7, #0]
 801fcb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801fcba:	461a      	mov	r2, r3
 801fcbc:	f000 fcde 	bl	802067c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801fcc0:	687b      	ldr	r3, [r7, #4]
 801fcc2:	681b      	ldr	r3, [r3, #0]
 801fcc4:	2160      	movs	r1, #96	; 0x60
 801fcc6:	4618      	mov	r0, r3
 801fcc8:	f000 fd81 	bl	80207ce <TIM_ITRx_SetConfig>
      break;
 801fccc:	e01c      	b.n	801fd08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801fcce:	687b      	ldr	r3, [r7, #4]
 801fcd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801fcd2:	683b      	ldr	r3, [r7, #0]
 801fcd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801fcd6:	683b      	ldr	r3, [r7, #0]
 801fcd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801fcda:	461a      	mov	r2, r3
 801fcdc:	f000 fc62 	bl	80205a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801fce0:	687b      	ldr	r3, [r7, #4]
 801fce2:	681b      	ldr	r3, [r3, #0]
 801fce4:	2140      	movs	r1, #64	; 0x40
 801fce6:	4618      	mov	r0, r3
 801fce8:	f000 fd71 	bl	80207ce <TIM_ITRx_SetConfig>
      break;
 801fcec:	e00c      	b.n	801fd08 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801fcee:	687b      	ldr	r3, [r7, #4]
 801fcf0:	681a      	ldr	r2, [r3, #0]
 801fcf2:	683b      	ldr	r3, [r7, #0]
 801fcf4:	681b      	ldr	r3, [r3, #0]
 801fcf6:	4619      	mov	r1, r3
 801fcf8:	4610      	mov	r0, r2
 801fcfa:	f000 fd68 	bl	80207ce <TIM_ITRx_SetConfig>
      break;
 801fcfe:	e003      	b.n	801fd08 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 801fd00:	2301      	movs	r3, #1
 801fd02:	73fb      	strb	r3, [r7, #15]
      break;
 801fd04:	e000      	b.n	801fd08 <HAL_TIM_ConfigClockSource+0x178>
      break;
 801fd06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801fd08:	687b      	ldr	r3, [r7, #4]
 801fd0a:	2201      	movs	r2, #1
 801fd0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801fd10:	687b      	ldr	r3, [r7, #4]
 801fd12:	2200      	movs	r2, #0
 801fd14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801fd18:	7bfb      	ldrb	r3, [r7, #15]
}
 801fd1a:	4618      	mov	r0, r3
 801fd1c:	3710      	adds	r7, #16
 801fd1e:	46bd      	mov	sp, r7
 801fd20:	bd80      	pop	{r7, pc}
	...

0801fd24 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801fd24:	b480      	push	{r7}
 801fd26:	b085      	sub	sp, #20
 801fd28:	af00      	add	r7, sp, #0
 801fd2a:	6078      	str	r0, [r7, #4]
 801fd2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 801fd2e:	2300      	movs	r3, #0
 801fd30:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 801fd32:	683b      	ldr	r3, [r7, #0]
 801fd34:	2b0c      	cmp	r3, #12
 801fd36:	d831      	bhi.n	801fd9c <HAL_TIM_ReadCapturedValue+0x78>
 801fd38:	a201      	add	r2, pc, #4	; (adr r2, 801fd40 <HAL_TIM_ReadCapturedValue+0x1c>)
 801fd3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fd3e:	bf00      	nop
 801fd40:	0801fd75 	.word	0x0801fd75
 801fd44:	0801fd9d 	.word	0x0801fd9d
 801fd48:	0801fd9d 	.word	0x0801fd9d
 801fd4c:	0801fd9d 	.word	0x0801fd9d
 801fd50:	0801fd7f 	.word	0x0801fd7f
 801fd54:	0801fd9d 	.word	0x0801fd9d
 801fd58:	0801fd9d 	.word	0x0801fd9d
 801fd5c:	0801fd9d 	.word	0x0801fd9d
 801fd60:	0801fd89 	.word	0x0801fd89
 801fd64:	0801fd9d 	.word	0x0801fd9d
 801fd68:	0801fd9d 	.word	0x0801fd9d
 801fd6c:	0801fd9d 	.word	0x0801fd9d
 801fd70:	0801fd93 	.word	0x0801fd93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 801fd74:	687b      	ldr	r3, [r7, #4]
 801fd76:	681b      	ldr	r3, [r3, #0]
 801fd78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fd7a:	60fb      	str	r3, [r7, #12]

      break;
 801fd7c:	e00f      	b.n	801fd9e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 801fd7e:	687b      	ldr	r3, [r7, #4]
 801fd80:	681b      	ldr	r3, [r3, #0]
 801fd82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fd84:	60fb      	str	r3, [r7, #12]

      break;
 801fd86:	e00a      	b.n	801fd9e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 801fd88:	687b      	ldr	r3, [r7, #4]
 801fd8a:	681b      	ldr	r3, [r3, #0]
 801fd8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fd8e:	60fb      	str	r3, [r7, #12]

      break;
 801fd90:	e005      	b.n	801fd9e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 801fd92:	687b      	ldr	r3, [r7, #4]
 801fd94:	681b      	ldr	r3, [r3, #0]
 801fd96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fd98:	60fb      	str	r3, [r7, #12]

      break;
 801fd9a:	e000      	b.n	801fd9e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 801fd9c:	bf00      	nop
  }

  return tmpreg;
 801fd9e:	68fb      	ldr	r3, [r7, #12]
}
 801fda0:	4618      	mov	r0, r3
 801fda2:	3714      	adds	r7, #20
 801fda4:	46bd      	mov	sp, r7
 801fda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fdaa:	4770      	bx	lr

0801fdac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801fdac:	b480      	push	{r7}
 801fdae:	b083      	sub	sp, #12
 801fdb0:	af00      	add	r7, sp, #0
 801fdb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801fdb4:	bf00      	nop
 801fdb6:	370c      	adds	r7, #12
 801fdb8:	46bd      	mov	sp, r7
 801fdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fdbe:	4770      	bx	lr

0801fdc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801fdc0:	b480      	push	{r7}
 801fdc2:	b083      	sub	sp, #12
 801fdc4:	af00      	add	r7, sp, #0
 801fdc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801fdc8:	bf00      	nop
 801fdca:	370c      	adds	r7, #12
 801fdcc:	46bd      	mov	sp, r7
 801fdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fdd2:	4770      	bx	lr

0801fdd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801fdd4:	b480      	push	{r7}
 801fdd6:	b083      	sub	sp, #12
 801fdd8:	af00      	add	r7, sp, #0
 801fdda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801fddc:	bf00      	nop
 801fdde:	370c      	adds	r7, #12
 801fde0:	46bd      	mov	sp, r7
 801fde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fde6:	4770      	bx	lr

0801fde8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801fde8:	b480      	push	{r7}
 801fdea:	b085      	sub	sp, #20
 801fdec:	af00      	add	r7, sp, #0
 801fdee:	6078      	str	r0, [r7, #4]
 801fdf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801fdf2:	687b      	ldr	r3, [r7, #4]
 801fdf4:	681b      	ldr	r3, [r3, #0]
 801fdf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801fdf8:	687b      	ldr	r3, [r7, #4]
 801fdfa:	4a40      	ldr	r2, [pc, #256]	; (801fefc <TIM_Base_SetConfig+0x114>)
 801fdfc:	4293      	cmp	r3, r2
 801fdfe:	d013      	beq.n	801fe28 <TIM_Base_SetConfig+0x40>
 801fe00:	687b      	ldr	r3, [r7, #4]
 801fe02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801fe06:	d00f      	beq.n	801fe28 <TIM_Base_SetConfig+0x40>
 801fe08:	687b      	ldr	r3, [r7, #4]
 801fe0a:	4a3d      	ldr	r2, [pc, #244]	; (801ff00 <TIM_Base_SetConfig+0x118>)
 801fe0c:	4293      	cmp	r3, r2
 801fe0e:	d00b      	beq.n	801fe28 <TIM_Base_SetConfig+0x40>
 801fe10:	687b      	ldr	r3, [r7, #4]
 801fe12:	4a3c      	ldr	r2, [pc, #240]	; (801ff04 <TIM_Base_SetConfig+0x11c>)
 801fe14:	4293      	cmp	r3, r2
 801fe16:	d007      	beq.n	801fe28 <TIM_Base_SetConfig+0x40>
 801fe18:	687b      	ldr	r3, [r7, #4]
 801fe1a:	4a3b      	ldr	r2, [pc, #236]	; (801ff08 <TIM_Base_SetConfig+0x120>)
 801fe1c:	4293      	cmp	r3, r2
 801fe1e:	d003      	beq.n	801fe28 <TIM_Base_SetConfig+0x40>
 801fe20:	687b      	ldr	r3, [r7, #4]
 801fe22:	4a3a      	ldr	r2, [pc, #232]	; (801ff0c <TIM_Base_SetConfig+0x124>)
 801fe24:	4293      	cmp	r3, r2
 801fe26:	d108      	bne.n	801fe3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801fe28:	68fb      	ldr	r3, [r7, #12]
 801fe2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801fe2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801fe30:	683b      	ldr	r3, [r7, #0]
 801fe32:	685b      	ldr	r3, [r3, #4]
 801fe34:	68fa      	ldr	r2, [r7, #12]
 801fe36:	4313      	orrs	r3, r2
 801fe38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801fe3a:	687b      	ldr	r3, [r7, #4]
 801fe3c:	4a2f      	ldr	r2, [pc, #188]	; (801fefc <TIM_Base_SetConfig+0x114>)
 801fe3e:	4293      	cmp	r3, r2
 801fe40:	d01f      	beq.n	801fe82 <TIM_Base_SetConfig+0x9a>
 801fe42:	687b      	ldr	r3, [r7, #4]
 801fe44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801fe48:	d01b      	beq.n	801fe82 <TIM_Base_SetConfig+0x9a>
 801fe4a:	687b      	ldr	r3, [r7, #4]
 801fe4c:	4a2c      	ldr	r2, [pc, #176]	; (801ff00 <TIM_Base_SetConfig+0x118>)
 801fe4e:	4293      	cmp	r3, r2
 801fe50:	d017      	beq.n	801fe82 <TIM_Base_SetConfig+0x9a>
 801fe52:	687b      	ldr	r3, [r7, #4]
 801fe54:	4a2b      	ldr	r2, [pc, #172]	; (801ff04 <TIM_Base_SetConfig+0x11c>)
 801fe56:	4293      	cmp	r3, r2
 801fe58:	d013      	beq.n	801fe82 <TIM_Base_SetConfig+0x9a>
 801fe5a:	687b      	ldr	r3, [r7, #4]
 801fe5c:	4a2a      	ldr	r2, [pc, #168]	; (801ff08 <TIM_Base_SetConfig+0x120>)
 801fe5e:	4293      	cmp	r3, r2
 801fe60:	d00f      	beq.n	801fe82 <TIM_Base_SetConfig+0x9a>
 801fe62:	687b      	ldr	r3, [r7, #4]
 801fe64:	4a29      	ldr	r2, [pc, #164]	; (801ff0c <TIM_Base_SetConfig+0x124>)
 801fe66:	4293      	cmp	r3, r2
 801fe68:	d00b      	beq.n	801fe82 <TIM_Base_SetConfig+0x9a>
 801fe6a:	687b      	ldr	r3, [r7, #4]
 801fe6c:	4a28      	ldr	r2, [pc, #160]	; (801ff10 <TIM_Base_SetConfig+0x128>)
 801fe6e:	4293      	cmp	r3, r2
 801fe70:	d007      	beq.n	801fe82 <TIM_Base_SetConfig+0x9a>
 801fe72:	687b      	ldr	r3, [r7, #4]
 801fe74:	4a27      	ldr	r2, [pc, #156]	; (801ff14 <TIM_Base_SetConfig+0x12c>)
 801fe76:	4293      	cmp	r3, r2
 801fe78:	d003      	beq.n	801fe82 <TIM_Base_SetConfig+0x9a>
 801fe7a:	687b      	ldr	r3, [r7, #4]
 801fe7c:	4a26      	ldr	r2, [pc, #152]	; (801ff18 <TIM_Base_SetConfig+0x130>)
 801fe7e:	4293      	cmp	r3, r2
 801fe80:	d108      	bne.n	801fe94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801fe82:	68fb      	ldr	r3, [r7, #12]
 801fe84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801fe88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801fe8a:	683b      	ldr	r3, [r7, #0]
 801fe8c:	68db      	ldr	r3, [r3, #12]
 801fe8e:	68fa      	ldr	r2, [r7, #12]
 801fe90:	4313      	orrs	r3, r2
 801fe92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801fe94:	68fb      	ldr	r3, [r7, #12]
 801fe96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801fe9a:	683b      	ldr	r3, [r7, #0]
 801fe9c:	695b      	ldr	r3, [r3, #20]
 801fe9e:	4313      	orrs	r3, r2
 801fea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801fea2:	687b      	ldr	r3, [r7, #4]
 801fea4:	68fa      	ldr	r2, [r7, #12]
 801fea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801fea8:	683b      	ldr	r3, [r7, #0]
 801feaa:	689a      	ldr	r2, [r3, #8]
 801feac:	687b      	ldr	r3, [r7, #4]
 801feae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801feb0:	683b      	ldr	r3, [r7, #0]
 801feb2:	681a      	ldr	r2, [r3, #0]
 801feb4:	687b      	ldr	r3, [r7, #4]
 801feb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801feb8:	687b      	ldr	r3, [r7, #4]
 801feba:	4a10      	ldr	r2, [pc, #64]	; (801fefc <TIM_Base_SetConfig+0x114>)
 801febc:	4293      	cmp	r3, r2
 801febe:	d00f      	beq.n	801fee0 <TIM_Base_SetConfig+0xf8>
 801fec0:	687b      	ldr	r3, [r7, #4]
 801fec2:	4a12      	ldr	r2, [pc, #72]	; (801ff0c <TIM_Base_SetConfig+0x124>)
 801fec4:	4293      	cmp	r3, r2
 801fec6:	d00b      	beq.n	801fee0 <TIM_Base_SetConfig+0xf8>
 801fec8:	687b      	ldr	r3, [r7, #4]
 801feca:	4a11      	ldr	r2, [pc, #68]	; (801ff10 <TIM_Base_SetConfig+0x128>)
 801fecc:	4293      	cmp	r3, r2
 801fece:	d007      	beq.n	801fee0 <TIM_Base_SetConfig+0xf8>
 801fed0:	687b      	ldr	r3, [r7, #4]
 801fed2:	4a10      	ldr	r2, [pc, #64]	; (801ff14 <TIM_Base_SetConfig+0x12c>)
 801fed4:	4293      	cmp	r3, r2
 801fed6:	d003      	beq.n	801fee0 <TIM_Base_SetConfig+0xf8>
 801fed8:	687b      	ldr	r3, [r7, #4]
 801feda:	4a0f      	ldr	r2, [pc, #60]	; (801ff18 <TIM_Base_SetConfig+0x130>)
 801fedc:	4293      	cmp	r3, r2
 801fede:	d103      	bne.n	801fee8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801fee0:	683b      	ldr	r3, [r7, #0]
 801fee2:	691a      	ldr	r2, [r3, #16]
 801fee4:	687b      	ldr	r3, [r7, #4]
 801fee6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801fee8:	687b      	ldr	r3, [r7, #4]
 801feea:	2201      	movs	r2, #1
 801feec:	615a      	str	r2, [r3, #20]
}
 801feee:	bf00      	nop
 801fef0:	3714      	adds	r7, #20
 801fef2:	46bd      	mov	sp, r7
 801fef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fef8:	4770      	bx	lr
 801fefa:	bf00      	nop
 801fefc:	40012c00 	.word	0x40012c00
 801ff00:	40000400 	.word	0x40000400
 801ff04:	40000800 	.word	0x40000800
 801ff08:	40000c00 	.word	0x40000c00
 801ff0c:	40013400 	.word	0x40013400
 801ff10:	40014000 	.word	0x40014000
 801ff14:	40014400 	.word	0x40014400
 801ff18:	40014800 	.word	0x40014800

0801ff1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801ff1c:	b480      	push	{r7}
 801ff1e:	b087      	sub	sp, #28
 801ff20:	af00      	add	r7, sp, #0
 801ff22:	6078      	str	r0, [r7, #4]
 801ff24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801ff26:	687b      	ldr	r3, [r7, #4]
 801ff28:	6a1b      	ldr	r3, [r3, #32]
 801ff2a:	f023 0201 	bic.w	r2, r3, #1
 801ff2e:	687b      	ldr	r3, [r7, #4]
 801ff30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ff32:	687b      	ldr	r3, [r7, #4]
 801ff34:	6a1b      	ldr	r3, [r3, #32]
 801ff36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ff38:	687b      	ldr	r3, [r7, #4]
 801ff3a:	685b      	ldr	r3, [r3, #4]
 801ff3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801ff3e:	687b      	ldr	r3, [r7, #4]
 801ff40:	699b      	ldr	r3, [r3, #24]
 801ff42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801ff44:	68fb      	ldr	r3, [r7, #12]
 801ff46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ff4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ff4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801ff50:	68fb      	ldr	r3, [r7, #12]
 801ff52:	f023 0303 	bic.w	r3, r3, #3
 801ff56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801ff58:	683b      	ldr	r3, [r7, #0]
 801ff5a:	681b      	ldr	r3, [r3, #0]
 801ff5c:	68fa      	ldr	r2, [r7, #12]
 801ff5e:	4313      	orrs	r3, r2
 801ff60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801ff62:	697b      	ldr	r3, [r7, #20]
 801ff64:	f023 0302 	bic.w	r3, r3, #2
 801ff68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801ff6a:	683b      	ldr	r3, [r7, #0]
 801ff6c:	689b      	ldr	r3, [r3, #8]
 801ff6e:	697a      	ldr	r2, [r7, #20]
 801ff70:	4313      	orrs	r3, r2
 801ff72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801ff74:	687b      	ldr	r3, [r7, #4]
 801ff76:	4a2c      	ldr	r2, [pc, #176]	; (8020028 <TIM_OC1_SetConfig+0x10c>)
 801ff78:	4293      	cmp	r3, r2
 801ff7a:	d00f      	beq.n	801ff9c <TIM_OC1_SetConfig+0x80>
 801ff7c:	687b      	ldr	r3, [r7, #4]
 801ff7e:	4a2b      	ldr	r2, [pc, #172]	; (802002c <TIM_OC1_SetConfig+0x110>)
 801ff80:	4293      	cmp	r3, r2
 801ff82:	d00b      	beq.n	801ff9c <TIM_OC1_SetConfig+0x80>
 801ff84:	687b      	ldr	r3, [r7, #4]
 801ff86:	4a2a      	ldr	r2, [pc, #168]	; (8020030 <TIM_OC1_SetConfig+0x114>)
 801ff88:	4293      	cmp	r3, r2
 801ff8a:	d007      	beq.n	801ff9c <TIM_OC1_SetConfig+0x80>
 801ff8c:	687b      	ldr	r3, [r7, #4]
 801ff8e:	4a29      	ldr	r2, [pc, #164]	; (8020034 <TIM_OC1_SetConfig+0x118>)
 801ff90:	4293      	cmp	r3, r2
 801ff92:	d003      	beq.n	801ff9c <TIM_OC1_SetConfig+0x80>
 801ff94:	687b      	ldr	r3, [r7, #4]
 801ff96:	4a28      	ldr	r2, [pc, #160]	; (8020038 <TIM_OC1_SetConfig+0x11c>)
 801ff98:	4293      	cmp	r3, r2
 801ff9a:	d10c      	bne.n	801ffb6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801ff9c:	697b      	ldr	r3, [r7, #20]
 801ff9e:	f023 0308 	bic.w	r3, r3, #8
 801ffa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801ffa4:	683b      	ldr	r3, [r7, #0]
 801ffa6:	68db      	ldr	r3, [r3, #12]
 801ffa8:	697a      	ldr	r2, [r7, #20]
 801ffaa:	4313      	orrs	r3, r2
 801ffac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801ffae:	697b      	ldr	r3, [r7, #20]
 801ffb0:	f023 0304 	bic.w	r3, r3, #4
 801ffb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ffb6:	687b      	ldr	r3, [r7, #4]
 801ffb8:	4a1b      	ldr	r2, [pc, #108]	; (8020028 <TIM_OC1_SetConfig+0x10c>)
 801ffba:	4293      	cmp	r3, r2
 801ffbc:	d00f      	beq.n	801ffde <TIM_OC1_SetConfig+0xc2>
 801ffbe:	687b      	ldr	r3, [r7, #4]
 801ffc0:	4a1a      	ldr	r2, [pc, #104]	; (802002c <TIM_OC1_SetConfig+0x110>)
 801ffc2:	4293      	cmp	r3, r2
 801ffc4:	d00b      	beq.n	801ffde <TIM_OC1_SetConfig+0xc2>
 801ffc6:	687b      	ldr	r3, [r7, #4]
 801ffc8:	4a19      	ldr	r2, [pc, #100]	; (8020030 <TIM_OC1_SetConfig+0x114>)
 801ffca:	4293      	cmp	r3, r2
 801ffcc:	d007      	beq.n	801ffde <TIM_OC1_SetConfig+0xc2>
 801ffce:	687b      	ldr	r3, [r7, #4]
 801ffd0:	4a18      	ldr	r2, [pc, #96]	; (8020034 <TIM_OC1_SetConfig+0x118>)
 801ffd2:	4293      	cmp	r3, r2
 801ffd4:	d003      	beq.n	801ffde <TIM_OC1_SetConfig+0xc2>
 801ffd6:	687b      	ldr	r3, [r7, #4]
 801ffd8:	4a17      	ldr	r2, [pc, #92]	; (8020038 <TIM_OC1_SetConfig+0x11c>)
 801ffda:	4293      	cmp	r3, r2
 801ffdc:	d111      	bne.n	8020002 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801ffde:	693b      	ldr	r3, [r7, #16]
 801ffe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ffe4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801ffe6:	693b      	ldr	r3, [r7, #16]
 801ffe8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801ffec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801ffee:	683b      	ldr	r3, [r7, #0]
 801fff0:	695b      	ldr	r3, [r3, #20]
 801fff2:	693a      	ldr	r2, [r7, #16]
 801fff4:	4313      	orrs	r3, r2
 801fff6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801fff8:	683b      	ldr	r3, [r7, #0]
 801fffa:	699b      	ldr	r3, [r3, #24]
 801fffc:	693a      	ldr	r2, [r7, #16]
 801fffe:	4313      	orrs	r3, r2
 8020000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020002:	687b      	ldr	r3, [r7, #4]
 8020004:	693a      	ldr	r2, [r7, #16]
 8020006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8020008:	687b      	ldr	r3, [r7, #4]
 802000a:	68fa      	ldr	r2, [r7, #12]
 802000c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 802000e:	683b      	ldr	r3, [r7, #0]
 8020010:	685a      	ldr	r2, [r3, #4]
 8020012:	687b      	ldr	r3, [r7, #4]
 8020014:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020016:	687b      	ldr	r3, [r7, #4]
 8020018:	697a      	ldr	r2, [r7, #20]
 802001a:	621a      	str	r2, [r3, #32]
}
 802001c:	bf00      	nop
 802001e:	371c      	adds	r7, #28
 8020020:	46bd      	mov	sp, r7
 8020022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020026:	4770      	bx	lr
 8020028:	40012c00 	.word	0x40012c00
 802002c:	40013400 	.word	0x40013400
 8020030:	40014000 	.word	0x40014000
 8020034:	40014400 	.word	0x40014400
 8020038:	40014800 	.word	0x40014800

0802003c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 802003c:	b480      	push	{r7}
 802003e:	b087      	sub	sp, #28
 8020040:	af00      	add	r7, sp, #0
 8020042:	6078      	str	r0, [r7, #4]
 8020044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8020046:	687b      	ldr	r3, [r7, #4]
 8020048:	6a1b      	ldr	r3, [r3, #32]
 802004a:	f023 0210 	bic.w	r2, r3, #16
 802004e:	687b      	ldr	r3, [r7, #4]
 8020050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020052:	687b      	ldr	r3, [r7, #4]
 8020054:	6a1b      	ldr	r3, [r3, #32]
 8020056:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020058:	687b      	ldr	r3, [r7, #4]
 802005a:	685b      	ldr	r3, [r3, #4]
 802005c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 802005e:	687b      	ldr	r3, [r7, #4]
 8020060:	699b      	ldr	r3, [r3, #24]
 8020062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8020064:	68fb      	ldr	r3, [r7, #12]
 8020066:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 802006a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802006e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8020070:	68fb      	ldr	r3, [r7, #12]
 8020072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020078:	683b      	ldr	r3, [r7, #0]
 802007a:	681b      	ldr	r3, [r3, #0]
 802007c:	021b      	lsls	r3, r3, #8
 802007e:	68fa      	ldr	r2, [r7, #12]
 8020080:	4313      	orrs	r3, r2
 8020082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8020084:	697b      	ldr	r3, [r7, #20]
 8020086:	f023 0320 	bic.w	r3, r3, #32
 802008a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 802008c:	683b      	ldr	r3, [r7, #0]
 802008e:	689b      	ldr	r3, [r3, #8]
 8020090:	011b      	lsls	r3, r3, #4
 8020092:	697a      	ldr	r2, [r7, #20]
 8020094:	4313      	orrs	r3, r2
 8020096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8020098:	687b      	ldr	r3, [r7, #4]
 802009a:	4a28      	ldr	r2, [pc, #160]	; (802013c <TIM_OC2_SetConfig+0x100>)
 802009c:	4293      	cmp	r3, r2
 802009e:	d003      	beq.n	80200a8 <TIM_OC2_SetConfig+0x6c>
 80200a0:	687b      	ldr	r3, [r7, #4]
 80200a2:	4a27      	ldr	r2, [pc, #156]	; (8020140 <TIM_OC2_SetConfig+0x104>)
 80200a4:	4293      	cmp	r3, r2
 80200a6:	d10d      	bne.n	80200c4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80200a8:	697b      	ldr	r3, [r7, #20]
 80200aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80200ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80200b0:	683b      	ldr	r3, [r7, #0]
 80200b2:	68db      	ldr	r3, [r3, #12]
 80200b4:	011b      	lsls	r3, r3, #4
 80200b6:	697a      	ldr	r2, [r7, #20]
 80200b8:	4313      	orrs	r3, r2
 80200ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80200bc:	697b      	ldr	r3, [r7, #20]
 80200be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80200c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80200c4:	687b      	ldr	r3, [r7, #4]
 80200c6:	4a1d      	ldr	r2, [pc, #116]	; (802013c <TIM_OC2_SetConfig+0x100>)
 80200c8:	4293      	cmp	r3, r2
 80200ca:	d00f      	beq.n	80200ec <TIM_OC2_SetConfig+0xb0>
 80200cc:	687b      	ldr	r3, [r7, #4]
 80200ce:	4a1c      	ldr	r2, [pc, #112]	; (8020140 <TIM_OC2_SetConfig+0x104>)
 80200d0:	4293      	cmp	r3, r2
 80200d2:	d00b      	beq.n	80200ec <TIM_OC2_SetConfig+0xb0>
 80200d4:	687b      	ldr	r3, [r7, #4]
 80200d6:	4a1b      	ldr	r2, [pc, #108]	; (8020144 <TIM_OC2_SetConfig+0x108>)
 80200d8:	4293      	cmp	r3, r2
 80200da:	d007      	beq.n	80200ec <TIM_OC2_SetConfig+0xb0>
 80200dc:	687b      	ldr	r3, [r7, #4]
 80200de:	4a1a      	ldr	r2, [pc, #104]	; (8020148 <TIM_OC2_SetConfig+0x10c>)
 80200e0:	4293      	cmp	r3, r2
 80200e2:	d003      	beq.n	80200ec <TIM_OC2_SetConfig+0xb0>
 80200e4:	687b      	ldr	r3, [r7, #4]
 80200e6:	4a19      	ldr	r2, [pc, #100]	; (802014c <TIM_OC2_SetConfig+0x110>)
 80200e8:	4293      	cmp	r3, r2
 80200ea:	d113      	bne.n	8020114 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80200ec:	693b      	ldr	r3, [r7, #16]
 80200ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80200f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80200f4:	693b      	ldr	r3, [r7, #16]
 80200f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80200fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80200fc:	683b      	ldr	r3, [r7, #0]
 80200fe:	695b      	ldr	r3, [r3, #20]
 8020100:	009b      	lsls	r3, r3, #2
 8020102:	693a      	ldr	r2, [r7, #16]
 8020104:	4313      	orrs	r3, r2
 8020106:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8020108:	683b      	ldr	r3, [r7, #0]
 802010a:	699b      	ldr	r3, [r3, #24]
 802010c:	009b      	lsls	r3, r3, #2
 802010e:	693a      	ldr	r2, [r7, #16]
 8020110:	4313      	orrs	r3, r2
 8020112:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020114:	687b      	ldr	r3, [r7, #4]
 8020116:	693a      	ldr	r2, [r7, #16]
 8020118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 802011a:	687b      	ldr	r3, [r7, #4]
 802011c:	68fa      	ldr	r2, [r7, #12]
 802011e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8020120:	683b      	ldr	r3, [r7, #0]
 8020122:	685a      	ldr	r2, [r3, #4]
 8020124:	687b      	ldr	r3, [r7, #4]
 8020126:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020128:	687b      	ldr	r3, [r7, #4]
 802012a:	697a      	ldr	r2, [r7, #20]
 802012c:	621a      	str	r2, [r3, #32]
}
 802012e:	bf00      	nop
 8020130:	371c      	adds	r7, #28
 8020132:	46bd      	mov	sp, r7
 8020134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020138:	4770      	bx	lr
 802013a:	bf00      	nop
 802013c:	40012c00 	.word	0x40012c00
 8020140:	40013400 	.word	0x40013400
 8020144:	40014000 	.word	0x40014000
 8020148:	40014400 	.word	0x40014400
 802014c:	40014800 	.word	0x40014800

08020150 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8020150:	b480      	push	{r7}
 8020152:	b087      	sub	sp, #28
 8020154:	af00      	add	r7, sp, #0
 8020156:	6078      	str	r0, [r7, #4]
 8020158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 802015a:	687b      	ldr	r3, [r7, #4]
 802015c:	6a1b      	ldr	r3, [r3, #32]
 802015e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8020162:	687b      	ldr	r3, [r7, #4]
 8020164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020166:	687b      	ldr	r3, [r7, #4]
 8020168:	6a1b      	ldr	r3, [r3, #32]
 802016a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802016c:	687b      	ldr	r3, [r7, #4]
 802016e:	685b      	ldr	r3, [r3, #4]
 8020170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8020172:	687b      	ldr	r3, [r7, #4]
 8020174:	69db      	ldr	r3, [r3, #28]
 8020176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8020178:	68fb      	ldr	r3, [r7, #12]
 802017a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802017e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8020184:	68fb      	ldr	r3, [r7, #12]
 8020186:	f023 0303 	bic.w	r3, r3, #3
 802018a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 802018c:	683b      	ldr	r3, [r7, #0]
 802018e:	681b      	ldr	r3, [r3, #0]
 8020190:	68fa      	ldr	r2, [r7, #12]
 8020192:	4313      	orrs	r3, r2
 8020194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8020196:	697b      	ldr	r3, [r7, #20]
 8020198:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 802019c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 802019e:	683b      	ldr	r3, [r7, #0]
 80201a0:	689b      	ldr	r3, [r3, #8]
 80201a2:	021b      	lsls	r3, r3, #8
 80201a4:	697a      	ldr	r2, [r7, #20]
 80201a6:	4313      	orrs	r3, r2
 80201a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80201aa:	687b      	ldr	r3, [r7, #4]
 80201ac:	4a27      	ldr	r2, [pc, #156]	; (802024c <TIM_OC3_SetConfig+0xfc>)
 80201ae:	4293      	cmp	r3, r2
 80201b0:	d003      	beq.n	80201ba <TIM_OC3_SetConfig+0x6a>
 80201b2:	687b      	ldr	r3, [r7, #4]
 80201b4:	4a26      	ldr	r2, [pc, #152]	; (8020250 <TIM_OC3_SetConfig+0x100>)
 80201b6:	4293      	cmp	r3, r2
 80201b8:	d10d      	bne.n	80201d6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80201ba:	697b      	ldr	r3, [r7, #20]
 80201bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80201c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80201c2:	683b      	ldr	r3, [r7, #0]
 80201c4:	68db      	ldr	r3, [r3, #12]
 80201c6:	021b      	lsls	r3, r3, #8
 80201c8:	697a      	ldr	r2, [r7, #20]
 80201ca:	4313      	orrs	r3, r2
 80201cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80201ce:	697b      	ldr	r3, [r7, #20]
 80201d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80201d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80201d6:	687b      	ldr	r3, [r7, #4]
 80201d8:	4a1c      	ldr	r2, [pc, #112]	; (802024c <TIM_OC3_SetConfig+0xfc>)
 80201da:	4293      	cmp	r3, r2
 80201dc:	d00f      	beq.n	80201fe <TIM_OC3_SetConfig+0xae>
 80201de:	687b      	ldr	r3, [r7, #4]
 80201e0:	4a1b      	ldr	r2, [pc, #108]	; (8020250 <TIM_OC3_SetConfig+0x100>)
 80201e2:	4293      	cmp	r3, r2
 80201e4:	d00b      	beq.n	80201fe <TIM_OC3_SetConfig+0xae>
 80201e6:	687b      	ldr	r3, [r7, #4]
 80201e8:	4a1a      	ldr	r2, [pc, #104]	; (8020254 <TIM_OC3_SetConfig+0x104>)
 80201ea:	4293      	cmp	r3, r2
 80201ec:	d007      	beq.n	80201fe <TIM_OC3_SetConfig+0xae>
 80201ee:	687b      	ldr	r3, [r7, #4]
 80201f0:	4a19      	ldr	r2, [pc, #100]	; (8020258 <TIM_OC3_SetConfig+0x108>)
 80201f2:	4293      	cmp	r3, r2
 80201f4:	d003      	beq.n	80201fe <TIM_OC3_SetConfig+0xae>
 80201f6:	687b      	ldr	r3, [r7, #4]
 80201f8:	4a18      	ldr	r2, [pc, #96]	; (802025c <TIM_OC3_SetConfig+0x10c>)
 80201fa:	4293      	cmp	r3, r2
 80201fc:	d113      	bne.n	8020226 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80201fe:	693b      	ldr	r3, [r7, #16]
 8020200:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8020206:	693b      	ldr	r3, [r7, #16]
 8020208:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802020c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 802020e:	683b      	ldr	r3, [r7, #0]
 8020210:	695b      	ldr	r3, [r3, #20]
 8020212:	011b      	lsls	r3, r3, #4
 8020214:	693a      	ldr	r2, [r7, #16]
 8020216:	4313      	orrs	r3, r2
 8020218:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 802021a:	683b      	ldr	r3, [r7, #0]
 802021c:	699b      	ldr	r3, [r3, #24]
 802021e:	011b      	lsls	r3, r3, #4
 8020220:	693a      	ldr	r2, [r7, #16]
 8020222:	4313      	orrs	r3, r2
 8020224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020226:	687b      	ldr	r3, [r7, #4]
 8020228:	693a      	ldr	r2, [r7, #16]
 802022a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802022c:	687b      	ldr	r3, [r7, #4]
 802022e:	68fa      	ldr	r2, [r7, #12]
 8020230:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8020232:	683b      	ldr	r3, [r7, #0]
 8020234:	685a      	ldr	r2, [r3, #4]
 8020236:	687b      	ldr	r3, [r7, #4]
 8020238:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802023a:	687b      	ldr	r3, [r7, #4]
 802023c:	697a      	ldr	r2, [r7, #20]
 802023e:	621a      	str	r2, [r3, #32]
}
 8020240:	bf00      	nop
 8020242:	371c      	adds	r7, #28
 8020244:	46bd      	mov	sp, r7
 8020246:	f85d 7b04 	ldr.w	r7, [sp], #4
 802024a:	4770      	bx	lr
 802024c:	40012c00 	.word	0x40012c00
 8020250:	40013400 	.word	0x40013400
 8020254:	40014000 	.word	0x40014000
 8020258:	40014400 	.word	0x40014400
 802025c:	40014800 	.word	0x40014800

08020260 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8020260:	b480      	push	{r7}
 8020262:	b087      	sub	sp, #28
 8020264:	af00      	add	r7, sp, #0
 8020266:	6078      	str	r0, [r7, #4]
 8020268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 802026a:	687b      	ldr	r3, [r7, #4]
 802026c:	6a1b      	ldr	r3, [r3, #32]
 802026e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8020272:	687b      	ldr	r3, [r7, #4]
 8020274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020276:	687b      	ldr	r3, [r7, #4]
 8020278:	6a1b      	ldr	r3, [r3, #32]
 802027a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802027c:	687b      	ldr	r3, [r7, #4]
 802027e:	685b      	ldr	r3, [r3, #4]
 8020280:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8020282:	687b      	ldr	r3, [r7, #4]
 8020284:	69db      	ldr	r3, [r3, #28]
 8020286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8020288:	68fb      	ldr	r3, [r7, #12]
 802028a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 802028e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8020292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8020294:	68fb      	ldr	r3, [r7, #12]
 8020296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802029a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 802029c:	683b      	ldr	r3, [r7, #0]
 802029e:	681b      	ldr	r3, [r3, #0]
 80202a0:	021b      	lsls	r3, r3, #8
 80202a2:	68fa      	ldr	r2, [r7, #12]
 80202a4:	4313      	orrs	r3, r2
 80202a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80202a8:	693b      	ldr	r3, [r7, #16]
 80202aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80202ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80202b0:	683b      	ldr	r3, [r7, #0]
 80202b2:	689b      	ldr	r3, [r3, #8]
 80202b4:	031b      	lsls	r3, r3, #12
 80202b6:	693a      	ldr	r2, [r7, #16]
 80202b8:	4313      	orrs	r3, r2
 80202ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80202bc:	687b      	ldr	r3, [r7, #4]
 80202be:	4a18      	ldr	r2, [pc, #96]	; (8020320 <TIM_OC4_SetConfig+0xc0>)
 80202c0:	4293      	cmp	r3, r2
 80202c2:	d00f      	beq.n	80202e4 <TIM_OC4_SetConfig+0x84>
 80202c4:	687b      	ldr	r3, [r7, #4]
 80202c6:	4a17      	ldr	r2, [pc, #92]	; (8020324 <TIM_OC4_SetConfig+0xc4>)
 80202c8:	4293      	cmp	r3, r2
 80202ca:	d00b      	beq.n	80202e4 <TIM_OC4_SetConfig+0x84>
 80202cc:	687b      	ldr	r3, [r7, #4]
 80202ce:	4a16      	ldr	r2, [pc, #88]	; (8020328 <TIM_OC4_SetConfig+0xc8>)
 80202d0:	4293      	cmp	r3, r2
 80202d2:	d007      	beq.n	80202e4 <TIM_OC4_SetConfig+0x84>
 80202d4:	687b      	ldr	r3, [r7, #4]
 80202d6:	4a15      	ldr	r2, [pc, #84]	; (802032c <TIM_OC4_SetConfig+0xcc>)
 80202d8:	4293      	cmp	r3, r2
 80202da:	d003      	beq.n	80202e4 <TIM_OC4_SetConfig+0x84>
 80202dc:	687b      	ldr	r3, [r7, #4]
 80202de:	4a14      	ldr	r2, [pc, #80]	; (8020330 <TIM_OC4_SetConfig+0xd0>)
 80202e0:	4293      	cmp	r3, r2
 80202e2:	d109      	bne.n	80202f8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80202e4:	697b      	ldr	r3, [r7, #20]
 80202e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80202ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80202ec:	683b      	ldr	r3, [r7, #0]
 80202ee:	695b      	ldr	r3, [r3, #20]
 80202f0:	019b      	lsls	r3, r3, #6
 80202f2:	697a      	ldr	r2, [r7, #20]
 80202f4:	4313      	orrs	r3, r2
 80202f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80202f8:	687b      	ldr	r3, [r7, #4]
 80202fa:	697a      	ldr	r2, [r7, #20]
 80202fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80202fe:	687b      	ldr	r3, [r7, #4]
 8020300:	68fa      	ldr	r2, [r7, #12]
 8020302:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8020304:	683b      	ldr	r3, [r7, #0]
 8020306:	685a      	ldr	r2, [r3, #4]
 8020308:	687b      	ldr	r3, [r7, #4]
 802030a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802030c:	687b      	ldr	r3, [r7, #4]
 802030e:	693a      	ldr	r2, [r7, #16]
 8020310:	621a      	str	r2, [r3, #32]
}
 8020312:	bf00      	nop
 8020314:	371c      	adds	r7, #28
 8020316:	46bd      	mov	sp, r7
 8020318:	f85d 7b04 	ldr.w	r7, [sp], #4
 802031c:	4770      	bx	lr
 802031e:	bf00      	nop
 8020320:	40012c00 	.word	0x40012c00
 8020324:	40013400 	.word	0x40013400
 8020328:	40014000 	.word	0x40014000
 802032c:	40014400 	.word	0x40014400
 8020330:	40014800 	.word	0x40014800

08020334 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8020334:	b480      	push	{r7}
 8020336:	b087      	sub	sp, #28
 8020338:	af00      	add	r7, sp, #0
 802033a:	6078      	str	r0, [r7, #4]
 802033c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 802033e:	687b      	ldr	r3, [r7, #4]
 8020340:	6a1b      	ldr	r3, [r3, #32]
 8020342:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8020346:	687b      	ldr	r3, [r7, #4]
 8020348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802034a:	687b      	ldr	r3, [r7, #4]
 802034c:	6a1b      	ldr	r3, [r3, #32]
 802034e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020350:	687b      	ldr	r3, [r7, #4]
 8020352:	685b      	ldr	r3, [r3, #4]
 8020354:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8020356:	687b      	ldr	r3, [r7, #4]
 8020358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802035a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 802035c:	68fb      	ldr	r3, [r7, #12]
 802035e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8020362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020368:	683b      	ldr	r3, [r7, #0]
 802036a:	681b      	ldr	r3, [r3, #0]
 802036c:	68fa      	ldr	r2, [r7, #12]
 802036e:	4313      	orrs	r3, r2
 8020370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8020372:	693b      	ldr	r3, [r7, #16]
 8020374:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8020378:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 802037a:	683b      	ldr	r3, [r7, #0]
 802037c:	689b      	ldr	r3, [r3, #8]
 802037e:	041b      	lsls	r3, r3, #16
 8020380:	693a      	ldr	r2, [r7, #16]
 8020382:	4313      	orrs	r3, r2
 8020384:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020386:	687b      	ldr	r3, [r7, #4]
 8020388:	4a17      	ldr	r2, [pc, #92]	; (80203e8 <TIM_OC5_SetConfig+0xb4>)
 802038a:	4293      	cmp	r3, r2
 802038c:	d00f      	beq.n	80203ae <TIM_OC5_SetConfig+0x7a>
 802038e:	687b      	ldr	r3, [r7, #4]
 8020390:	4a16      	ldr	r2, [pc, #88]	; (80203ec <TIM_OC5_SetConfig+0xb8>)
 8020392:	4293      	cmp	r3, r2
 8020394:	d00b      	beq.n	80203ae <TIM_OC5_SetConfig+0x7a>
 8020396:	687b      	ldr	r3, [r7, #4]
 8020398:	4a15      	ldr	r2, [pc, #84]	; (80203f0 <TIM_OC5_SetConfig+0xbc>)
 802039a:	4293      	cmp	r3, r2
 802039c:	d007      	beq.n	80203ae <TIM_OC5_SetConfig+0x7a>
 802039e:	687b      	ldr	r3, [r7, #4]
 80203a0:	4a14      	ldr	r2, [pc, #80]	; (80203f4 <TIM_OC5_SetConfig+0xc0>)
 80203a2:	4293      	cmp	r3, r2
 80203a4:	d003      	beq.n	80203ae <TIM_OC5_SetConfig+0x7a>
 80203a6:	687b      	ldr	r3, [r7, #4]
 80203a8:	4a13      	ldr	r2, [pc, #76]	; (80203f8 <TIM_OC5_SetConfig+0xc4>)
 80203aa:	4293      	cmp	r3, r2
 80203ac:	d109      	bne.n	80203c2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80203ae:	697b      	ldr	r3, [r7, #20]
 80203b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80203b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80203b6:	683b      	ldr	r3, [r7, #0]
 80203b8:	695b      	ldr	r3, [r3, #20]
 80203ba:	021b      	lsls	r3, r3, #8
 80203bc:	697a      	ldr	r2, [r7, #20]
 80203be:	4313      	orrs	r3, r2
 80203c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80203c2:	687b      	ldr	r3, [r7, #4]
 80203c4:	697a      	ldr	r2, [r7, #20]
 80203c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80203c8:	687b      	ldr	r3, [r7, #4]
 80203ca:	68fa      	ldr	r2, [r7, #12]
 80203cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80203ce:	683b      	ldr	r3, [r7, #0]
 80203d0:	685a      	ldr	r2, [r3, #4]
 80203d2:	687b      	ldr	r3, [r7, #4]
 80203d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80203d6:	687b      	ldr	r3, [r7, #4]
 80203d8:	693a      	ldr	r2, [r7, #16]
 80203da:	621a      	str	r2, [r3, #32]
}
 80203dc:	bf00      	nop
 80203de:	371c      	adds	r7, #28
 80203e0:	46bd      	mov	sp, r7
 80203e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203e6:	4770      	bx	lr
 80203e8:	40012c00 	.word	0x40012c00
 80203ec:	40013400 	.word	0x40013400
 80203f0:	40014000 	.word	0x40014000
 80203f4:	40014400 	.word	0x40014400
 80203f8:	40014800 	.word	0x40014800

080203fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80203fc:	b480      	push	{r7}
 80203fe:	b087      	sub	sp, #28
 8020400:	af00      	add	r7, sp, #0
 8020402:	6078      	str	r0, [r7, #4]
 8020404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8020406:	687b      	ldr	r3, [r7, #4]
 8020408:	6a1b      	ldr	r3, [r3, #32]
 802040a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 802040e:	687b      	ldr	r3, [r7, #4]
 8020410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020412:	687b      	ldr	r3, [r7, #4]
 8020414:	6a1b      	ldr	r3, [r3, #32]
 8020416:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020418:	687b      	ldr	r3, [r7, #4]
 802041a:	685b      	ldr	r3, [r3, #4]
 802041c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 802041e:	687b      	ldr	r3, [r7, #4]
 8020420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8020424:	68fb      	ldr	r3, [r7, #12]
 8020426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 802042a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802042e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020430:	683b      	ldr	r3, [r7, #0]
 8020432:	681b      	ldr	r3, [r3, #0]
 8020434:	021b      	lsls	r3, r3, #8
 8020436:	68fa      	ldr	r2, [r7, #12]
 8020438:	4313      	orrs	r3, r2
 802043a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 802043c:	693b      	ldr	r3, [r7, #16]
 802043e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8020442:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8020444:	683b      	ldr	r3, [r7, #0]
 8020446:	689b      	ldr	r3, [r3, #8]
 8020448:	051b      	lsls	r3, r3, #20
 802044a:	693a      	ldr	r2, [r7, #16]
 802044c:	4313      	orrs	r3, r2
 802044e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020450:	687b      	ldr	r3, [r7, #4]
 8020452:	4a18      	ldr	r2, [pc, #96]	; (80204b4 <TIM_OC6_SetConfig+0xb8>)
 8020454:	4293      	cmp	r3, r2
 8020456:	d00f      	beq.n	8020478 <TIM_OC6_SetConfig+0x7c>
 8020458:	687b      	ldr	r3, [r7, #4]
 802045a:	4a17      	ldr	r2, [pc, #92]	; (80204b8 <TIM_OC6_SetConfig+0xbc>)
 802045c:	4293      	cmp	r3, r2
 802045e:	d00b      	beq.n	8020478 <TIM_OC6_SetConfig+0x7c>
 8020460:	687b      	ldr	r3, [r7, #4]
 8020462:	4a16      	ldr	r2, [pc, #88]	; (80204bc <TIM_OC6_SetConfig+0xc0>)
 8020464:	4293      	cmp	r3, r2
 8020466:	d007      	beq.n	8020478 <TIM_OC6_SetConfig+0x7c>
 8020468:	687b      	ldr	r3, [r7, #4]
 802046a:	4a15      	ldr	r2, [pc, #84]	; (80204c0 <TIM_OC6_SetConfig+0xc4>)
 802046c:	4293      	cmp	r3, r2
 802046e:	d003      	beq.n	8020478 <TIM_OC6_SetConfig+0x7c>
 8020470:	687b      	ldr	r3, [r7, #4]
 8020472:	4a14      	ldr	r2, [pc, #80]	; (80204c4 <TIM_OC6_SetConfig+0xc8>)
 8020474:	4293      	cmp	r3, r2
 8020476:	d109      	bne.n	802048c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8020478:	697b      	ldr	r3, [r7, #20]
 802047a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802047e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8020480:	683b      	ldr	r3, [r7, #0]
 8020482:	695b      	ldr	r3, [r3, #20]
 8020484:	029b      	lsls	r3, r3, #10
 8020486:	697a      	ldr	r2, [r7, #20]
 8020488:	4313      	orrs	r3, r2
 802048a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802048c:	687b      	ldr	r3, [r7, #4]
 802048e:	697a      	ldr	r2, [r7, #20]
 8020490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8020492:	687b      	ldr	r3, [r7, #4]
 8020494:	68fa      	ldr	r2, [r7, #12]
 8020496:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8020498:	683b      	ldr	r3, [r7, #0]
 802049a:	685a      	ldr	r2, [r3, #4]
 802049c:	687b      	ldr	r3, [r7, #4]
 802049e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80204a0:	687b      	ldr	r3, [r7, #4]
 80204a2:	693a      	ldr	r2, [r7, #16]
 80204a4:	621a      	str	r2, [r3, #32]
}
 80204a6:	bf00      	nop
 80204a8:	371c      	adds	r7, #28
 80204aa:	46bd      	mov	sp, r7
 80204ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204b0:	4770      	bx	lr
 80204b2:	bf00      	nop
 80204b4:	40012c00 	.word	0x40012c00
 80204b8:	40013400 	.word	0x40013400
 80204bc:	40014000 	.word	0x40014000
 80204c0:	40014400 	.word	0x40014400
 80204c4:	40014800 	.word	0x40014800

080204c8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80204c8:	b480      	push	{r7}
 80204ca:	b087      	sub	sp, #28
 80204cc:	af00      	add	r7, sp, #0
 80204ce:	60f8      	str	r0, [r7, #12]
 80204d0:	60b9      	str	r1, [r7, #8]
 80204d2:	607a      	str	r2, [r7, #4]
 80204d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80204d6:	68fb      	ldr	r3, [r7, #12]
 80204d8:	6a1b      	ldr	r3, [r3, #32]
 80204da:	f023 0201 	bic.w	r2, r3, #1
 80204de:	68fb      	ldr	r3, [r7, #12]
 80204e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80204e2:	68fb      	ldr	r3, [r7, #12]
 80204e4:	699b      	ldr	r3, [r3, #24]
 80204e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80204e8:	68fb      	ldr	r3, [r7, #12]
 80204ea:	6a1b      	ldr	r3, [r3, #32]
 80204ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80204ee:	68fb      	ldr	r3, [r7, #12]
 80204f0:	4a26      	ldr	r2, [pc, #152]	; (802058c <TIM_TI1_SetConfig+0xc4>)
 80204f2:	4293      	cmp	r3, r2
 80204f4:	d017      	beq.n	8020526 <TIM_TI1_SetConfig+0x5e>
 80204f6:	68fb      	ldr	r3, [r7, #12]
 80204f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80204fc:	d013      	beq.n	8020526 <TIM_TI1_SetConfig+0x5e>
 80204fe:	68fb      	ldr	r3, [r7, #12]
 8020500:	4a23      	ldr	r2, [pc, #140]	; (8020590 <TIM_TI1_SetConfig+0xc8>)
 8020502:	4293      	cmp	r3, r2
 8020504:	d00f      	beq.n	8020526 <TIM_TI1_SetConfig+0x5e>
 8020506:	68fb      	ldr	r3, [r7, #12]
 8020508:	4a22      	ldr	r2, [pc, #136]	; (8020594 <TIM_TI1_SetConfig+0xcc>)
 802050a:	4293      	cmp	r3, r2
 802050c:	d00b      	beq.n	8020526 <TIM_TI1_SetConfig+0x5e>
 802050e:	68fb      	ldr	r3, [r7, #12]
 8020510:	4a21      	ldr	r2, [pc, #132]	; (8020598 <TIM_TI1_SetConfig+0xd0>)
 8020512:	4293      	cmp	r3, r2
 8020514:	d007      	beq.n	8020526 <TIM_TI1_SetConfig+0x5e>
 8020516:	68fb      	ldr	r3, [r7, #12]
 8020518:	4a20      	ldr	r2, [pc, #128]	; (802059c <TIM_TI1_SetConfig+0xd4>)
 802051a:	4293      	cmp	r3, r2
 802051c:	d003      	beq.n	8020526 <TIM_TI1_SetConfig+0x5e>
 802051e:	68fb      	ldr	r3, [r7, #12]
 8020520:	4a1f      	ldr	r2, [pc, #124]	; (80205a0 <TIM_TI1_SetConfig+0xd8>)
 8020522:	4293      	cmp	r3, r2
 8020524:	d101      	bne.n	802052a <TIM_TI1_SetConfig+0x62>
 8020526:	2301      	movs	r3, #1
 8020528:	e000      	b.n	802052c <TIM_TI1_SetConfig+0x64>
 802052a:	2300      	movs	r3, #0
 802052c:	2b00      	cmp	r3, #0
 802052e:	d008      	beq.n	8020542 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8020530:	697b      	ldr	r3, [r7, #20]
 8020532:	f023 0303 	bic.w	r3, r3, #3
 8020536:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8020538:	697a      	ldr	r2, [r7, #20]
 802053a:	687b      	ldr	r3, [r7, #4]
 802053c:	4313      	orrs	r3, r2
 802053e:	617b      	str	r3, [r7, #20]
 8020540:	e003      	b.n	802054a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8020542:	697b      	ldr	r3, [r7, #20]
 8020544:	f043 0301 	orr.w	r3, r3, #1
 8020548:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 802054a:	697b      	ldr	r3, [r7, #20]
 802054c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8020550:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8020552:	683b      	ldr	r3, [r7, #0]
 8020554:	011b      	lsls	r3, r3, #4
 8020556:	b2db      	uxtb	r3, r3
 8020558:	697a      	ldr	r2, [r7, #20]
 802055a:	4313      	orrs	r3, r2
 802055c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802055e:	693b      	ldr	r3, [r7, #16]
 8020560:	f023 030a 	bic.w	r3, r3, #10
 8020564:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8020566:	68bb      	ldr	r3, [r7, #8]
 8020568:	f003 030a 	and.w	r3, r3, #10
 802056c:	693a      	ldr	r2, [r7, #16]
 802056e:	4313      	orrs	r3, r2
 8020570:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8020572:	68fb      	ldr	r3, [r7, #12]
 8020574:	697a      	ldr	r2, [r7, #20]
 8020576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8020578:	68fb      	ldr	r3, [r7, #12]
 802057a:	693a      	ldr	r2, [r7, #16]
 802057c:	621a      	str	r2, [r3, #32]
}
 802057e:	bf00      	nop
 8020580:	371c      	adds	r7, #28
 8020582:	46bd      	mov	sp, r7
 8020584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020588:	4770      	bx	lr
 802058a:	bf00      	nop
 802058c:	40012c00 	.word	0x40012c00
 8020590:	40000400 	.word	0x40000400
 8020594:	40000800 	.word	0x40000800
 8020598:	40000c00 	.word	0x40000c00
 802059c:	40013400 	.word	0x40013400
 80205a0:	40014000 	.word	0x40014000

080205a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80205a4:	b480      	push	{r7}
 80205a6:	b087      	sub	sp, #28
 80205a8:	af00      	add	r7, sp, #0
 80205aa:	60f8      	str	r0, [r7, #12]
 80205ac:	60b9      	str	r1, [r7, #8]
 80205ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80205b0:	68fb      	ldr	r3, [r7, #12]
 80205b2:	6a1b      	ldr	r3, [r3, #32]
 80205b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80205b6:	68fb      	ldr	r3, [r7, #12]
 80205b8:	6a1b      	ldr	r3, [r3, #32]
 80205ba:	f023 0201 	bic.w	r2, r3, #1
 80205be:	68fb      	ldr	r3, [r7, #12]
 80205c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80205c2:	68fb      	ldr	r3, [r7, #12]
 80205c4:	699b      	ldr	r3, [r3, #24]
 80205c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80205c8:	693b      	ldr	r3, [r7, #16]
 80205ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80205ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80205d0:	687b      	ldr	r3, [r7, #4]
 80205d2:	011b      	lsls	r3, r3, #4
 80205d4:	693a      	ldr	r2, [r7, #16]
 80205d6:	4313      	orrs	r3, r2
 80205d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80205da:	697b      	ldr	r3, [r7, #20]
 80205dc:	f023 030a 	bic.w	r3, r3, #10
 80205e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80205e2:	697a      	ldr	r2, [r7, #20]
 80205e4:	68bb      	ldr	r3, [r7, #8]
 80205e6:	4313      	orrs	r3, r2
 80205e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80205ea:	68fb      	ldr	r3, [r7, #12]
 80205ec:	693a      	ldr	r2, [r7, #16]
 80205ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80205f0:	68fb      	ldr	r3, [r7, #12]
 80205f2:	697a      	ldr	r2, [r7, #20]
 80205f4:	621a      	str	r2, [r3, #32]
}
 80205f6:	bf00      	nop
 80205f8:	371c      	adds	r7, #28
 80205fa:	46bd      	mov	sp, r7
 80205fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020600:	4770      	bx	lr

08020602 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8020602:	b480      	push	{r7}
 8020604:	b087      	sub	sp, #28
 8020606:	af00      	add	r7, sp, #0
 8020608:	60f8      	str	r0, [r7, #12]
 802060a:	60b9      	str	r1, [r7, #8]
 802060c:	607a      	str	r2, [r7, #4]
 802060e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8020610:	68fb      	ldr	r3, [r7, #12]
 8020612:	6a1b      	ldr	r3, [r3, #32]
 8020614:	f023 0210 	bic.w	r2, r3, #16
 8020618:	68fb      	ldr	r3, [r7, #12]
 802061a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802061c:	68fb      	ldr	r3, [r7, #12]
 802061e:	699b      	ldr	r3, [r3, #24]
 8020620:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8020622:	68fb      	ldr	r3, [r7, #12]
 8020624:	6a1b      	ldr	r3, [r3, #32]
 8020626:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8020628:	697b      	ldr	r3, [r7, #20]
 802062a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802062e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8020630:	687b      	ldr	r3, [r7, #4]
 8020632:	021b      	lsls	r3, r3, #8
 8020634:	697a      	ldr	r2, [r7, #20]
 8020636:	4313      	orrs	r3, r2
 8020638:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 802063a:	697b      	ldr	r3, [r7, #20]
 802063c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8020640:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8020642:	683b      	ldr	r3, [r7, #0]
 8020644:	031b      	lsls	r3, r3, #12
 8020646:	b29b      	uxth	r3, r3
 8020648:	697a      	ldr	r2, [r7, #20]
 802064a:	4313      	orrs	r3, r2
 802064c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 802064e:	693b      	ldr	r3, [r7, #16]
 8020650:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8020654:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8020656:	68bb      	ldr	r3, [r7, #8]
 8020658:	011b      	lsls	r3, r3, #4
 802065a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 802065e:	693a      	ldr	r2, [r7, #16]
 8020660:	4313      	orrs	r3, r2
 8020662:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8020664:	68fb      	ldr	r3, [r7, #12]
 8020666:	697a      	ldr	r2, [r7, #20]
 8020668:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802066a:	68fb      	ldr	r3, [r7, #12]
 802066c:	693a      	ldr	r2, [r7, #16]
 802066e:	621a      	str	r2, [r3, #32]
}
 8020670:	bf00      	nop
 8020672:	371c      	adds	r7, #28
 8020674:	46bd      	mov	sp, r7
 8020676:	f85d 7b04 	ldr.w	r7, [sp], #4
 802067a:	4770      	bx	lr

0802067c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802067c:	b480      	push	{r7}
 802067e:	b087      	sub	sp, #28
 8020680:	af00      	add	r7, sp, #0
 8020682:	60f8      	str	r0, [r7, #12]
 8020684:	60b9      	str	r1, [r7, #8]
 8020686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8020688:	68fb      	ldr	r3, [r7, #12]
 802068a:	6a1b      	ldr	r3, [r3, #32]
 802068c:	f023 0210 	bic.w	r2, r3, #16
 8020690:	68fb      	ldr	r3, [r7, #12]
 8020692:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8020694:	68fb      	ldr	r3, [r7, #12]
 8020696:	699b      	ldr	r3, [r3, #24]
 8020698:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802069a:	68fb      	ldr	r3, [r7, #12]
 802069c:	6a1b      	ldr	r3, [r3, #32]
 802069e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80206a0:	697b      	ldr	r3, [r7, #20]
 80206a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80206a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80206a8:	687b      	ldr	r3, [r7, #4]
 80206aa:	031b      	lsls	r3, r3, #12
 80206ac:	697a      	ldr	r2, [r7, #20]
 80206ae:	4313      	orrs	r3, r2
 80206b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80206b2:	693b      	ldr	r3, [r7, #16]
 80206b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80206b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80206ba:	68bb      	ldr	r3, [r7, #8]
 80206bc:	011b      	lsls	r3, r3, #4
 80206be:	693a      	ldr	r2, [r7, #16]
 80206c0:	4313      	orrs	r3, r2
 80206c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80206c4:	68fb      	ldr	r3, [r7, #12]
 80206c6:	697a      	ldr	r2, [r7, #20]
 80206c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80206ca:	68fb      	ldr	r3, [r7, #12]
 80206cc:	693a      	ldr	r2, [r7, #16]
 80206ce:	621a      	str	r2, [r3, #32]
}
 80206d0:	bf00      	nop
 80206d2:	371c      	adds	r7, #28
 80206d4:	46bd      	mov	sp, r7
 80206d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206da:	4770      	bx	lr

080206dc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80206dc:	b480      	push	{r7}
 80206de:	b087      	sub	sp, #28
 80206e0:	af00      	add	r7, sp, #0
 80206e2:	60f8      	str	r0, [r7, #12]
 80206e4:	60b9      	str	r1, [r7, #8]
 80206e6:	607a      	str	r2, [r7, #4]
 80206e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80206ea:	68fb      	ldr	r3, [r7, #12]
 80206ec:	6a1b      	ldr	r3, [r3, #32]
 80206ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80206f2:	68fb      	ldr	r3, [r7, #12]
 80206f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80206f6:	68fb      	ldr	r3, [r7, #12]
 80206f8:	69db      	ldr	r3, [r3, #28]
 80206fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80206fc:	68fb      	ldr	r3, [r7, #12]
 80206fe:	6a1b      	ldr	r3, [r3, #32]
 8020700:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8020702:	697b      	ldr	r3, [r7, #20]
 8020704:	f023 0303 	bic.w	r3, r3, #3
 8020708:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 802070a:	697a      	ldr	r2, [r7, #20]
 802070c:	687b      	ldr	r3, [r7, #4]
 802070e:	4313      	orrs	r3, r2
 8020710:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8020712:	697b      	ldr	r3, [r7, #20]
 8020714:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8020718:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 802071a:	683b      	ldr	r3, [r7, #0]
 802071c:	011b      	lsls	r3, r3, #4
 802071e:	b2db      	uxtb	r3, r3
 8020720:	697a      	ldr	r2, [r7, #20]
 8020722:	4313      	orrs	r3, r2
 8020724:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8020726:	693b      	ldr	r3, [r7, #16]
 8020728:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 802072c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 802072e:	68bb      	ldr	r3, [r7, #8]
 8020730:	021b      	lsls	r3, r3, #8
 8020732:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8020736:	693a      	ldr	r2, [r7, #16]
 8020738:	4313      	orrs	r3, r2
 802073a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 802073c:	68fb      	ldr	r3, [r7, #12]
 802073e:	697a      	ldr	r2, [r7, #20]
 8020740:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8020742:	68fb      	ldr	r3, [r7, #12]
 8020744:	693a      	ldr	r2, [r7, #16]
 8020746:	621a      	str	r2, [r3, #32]
}
 8020748:	bf00      	nop
 802074a:	371c      	adds	r7, #28
 802074c:	46bd      	mov	sp, r7
 802074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020752:	4770      	bx	lr

08020754 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8020754:	b480      	push	{r7}
 8020756:	b087      	sub	sp, #28
 8020758:	af00      	add	r7, sp, #0
 802075a:	60f8      	str	r0, [r7, #12]
 802075c:	60b9      	str	r1, [r7, #8]
 802075e:	607a      	str	r2, [r7, #4]
 8020760:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8020762:	68fb      	ldr	r3, [r7, #12]
 8020764:	6a1b      	ldr	r3, [r3, #32]
 8020766:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802076a:	68fb      	ldr	r3, [r7, #12]
 802076c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 802076e:	68fb      	ldr	r3, [r7, #12]
 8020770:	69db      	ldr	r3, [r3, #28]
 8020772:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8020774:	68fb      	ldr	r3, [r7, #12]
 8020776:	6a1b      	ldr	r3, [r3, #32]
 8020778:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 802077a:	697b      	ldr	r3, [r7, #20]
 802077c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020780:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8020782:	687b      	ldr	r3, [r7, #4]
 8020784:	021b      	lsls	r3, r3, #8
 8020786:	697a      	ldr	r2, [r7, #20]
 8020788:	4313      	orrs	r3, r2
 802078a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 802078c:	697b      	ldr	r3, [r7, #20]
 802078e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8020792:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8020794:	683b      	ldr	r3, [r7, #0]
 8020796:	031b      	lsls	r3, r3, #12
 8020798:	b29b      	uxth	r3, r3
 802079a:	697a      	ldr	r2, [r7, #20]
 802079c:	4313      	orrs	r3, r2
 802079e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80207a0:	693b      	ldr	r3, [r7, #16]
 80207a2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80207a6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80207a8:	68bb      	ldr	r3, [r7, #8]
 80207aa:	031b      	lsls	r3, r3, #12
 80207ac:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80207b0:	693a      	ldr	r2, [r7, #16]
 80207b2:	4313      	orrs	r3, r2
 80207b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80207b6:	68fb      	ldr	r3, [r7, #12]
 80207b8:	697a      	ldr	r2, [r7, #20]
 80207ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80207bc:	68fb      	ldr	r3, [r7, #12]
 80207be:	693a      	ldr	r2, [r7, #16]
 80207c0:	621a      	str	r2, [r3, #32]
}
 80207c2:	bf00      	nop
 80207c4:	371c      	adds	r7, #28
 80207c6:	46bd      	mov	sp, r7
 80207c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207cc:	4770      	bx	lr

080207ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80207ce:	b480      	push	{r7}
 80207d0:	b085      	sub	sp, #20
 80207d2:	af00      	add	r7, sp, #0
 80207d4:	6078      	str	r0, [r7, #4]
 80207d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80207d8:	687b      	ldr	r3, [r7, #4]
 80207da:	689b      	ldr	r3, [r3, #8]
 80207dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80207de:	68fb      	ldr	r3, [r7, #12]
 80207e0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80207e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80207e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80207ea:	683a      	ldr	r2, [r7, #0]
 80207ec:	68fb      	ldr	r3, [r7, #12]
 80207ee:	4313      	orrs	r3, r2
 80207f0:	f043 0307 	orr.w	r3, r3, #7
 80207f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80207f6:	687b      	ldr	r3, [r7, #4]
 80207f8:	68fa      	ldr	r2, [r7, #12]
 80207fa:	609a      	str	r2, [r3, #8]
}
 80207fc:	bf00      	nop
 80207fe:	3714      	adds	r7, #20
 8020800:	46bd      	mov	sp, r7
 8020802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020806:	4770      	bx	lr

08020808 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8020808:	b480      	push	{r7}
 802080a:	b087      	sub	sp, #28
 802080c:	af00      	add	r7, sp, #0
 802080e:	60f8      	str	r0, [r7, #12]
 8020810:	60b9      	str	r1, [r7, #8]
 8020812:	607a      	str	r2, [r7, #4]
 8020814:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8020816:	68fb      	ldr	r3, [r7, #12]
 8020818:	689b      	ldr	r3, [r3, #8]
 802081a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802081c:	697b      	ldr	r3, [r7, #20]
 802081e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8020822:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8020824:	683b      	ldr	r3, [r7, #0]
 8020826:	021a      	lsls	r2, r3, #8
 8020828:	687b      	ldr	r3, [r7, #4]
 802082a:	431a      	orrs	r2, r3
 802082c:	68bb      	ldr	r3, [r7, #8]
 802082e:	4313      	orrs	r3, r2
 8020830:	697a      	ldr	r2, [r7, #20]
 8020832:	4313      	orrs	r3, r2
 8020834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8020836:	68fb      	ldr	r3, [r7, #12]
 8020838:	697a      	ldr	r2, [r7, #20]
 802083a:	609a      	str	r2, [r3, #8]
}
 802083c:	bf00      	nop
 802083e:	371c      	adds	r7, #28
 8020840:	46bd      	mov	sp, r7
 8020842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020846:	4770      	bx	lr

08020848 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8020848:	b480      	push	{r7}
 802084a:	b087      	sub	sp, #28
 802084c:	af00      	add	r7, sp, #0
 802084e:	60f8      	str	r0, [r7, #12]
 8020850:	60b9      	str	r1, [r7, #8]
 8020852:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8020854:	68bb      	ldr	r3, [r7, #8]
 8020856:	f003 031f 	and.w	r3, r3, #31
 802085a:	2201      	movs	r2, #1
 802085c:	fa02 f303 	lsl.w	r3, r2, r3
 8020860:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8020862:	68fb      	ldr	r3, [r7, #12]
 8020864:	6a1a      	ldr	r2, [r3, #32]
 8020866:	697b      	ldr	r3, [r7, #20]
 8020868:	43db      	mvns	r3, r3
 802086a:	401a      	ands	r2, r3
 802086c:	68fb      	ldr	r3, [r7, #12]
 802086e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8020870:	68fb      	ldr	r3, [r7, #12]
 8020872:	6a1a      	ldr	r2, [r3, #32]
 8020874:	68bb      	ldr	r3, [r7, #8]
 8020876:	f003 031f 	and.w	r3, r3, #31
 802087a:	6879      	ldr	r1, [r7, #4]
 802087c:	fa01 f303 	lsl.w	r3, r1, r3
 8020880:	431a      	orrs	r2, r3
 8020882:	68fb      	ldr	r3, [r7, #12]
 8020884:	621a      	str	r2, [r3, #32]
}
 8020886:	bf00      	nop
 8020888:	371c      	adds	r7, #28
 802088a:	46bd      	mov	sp, r7
 802088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020890:	4770      	bx	lr
	...

08020894 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8020894:	b480      	push	{r7}
 8020896:	b085      	sub	sp, #20
 8020898:	af00      	add	r7, sp, #0
 802089a:	6078      	str	r0, [r7, #4]
 802089c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 802089e:	687b      	ldr	r3, [r7, #4]
 80208a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80208a4:	2b01      	cmp	r3, #1
 80208a6:	d101      	bne.n	80208ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80208a8:	2302      	movs	r3, #2
 80208aa:	e068      	b.n	802097e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80208ac:	687b      	ldr	r3, [r7, #4]
 80208ae:	2201      	movs	r2, #1
 80208b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80208b4:	687b      	ldr	r3, [r7, #4]
 80208b6:	2202      	movs	r2, #2
 80208b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80208bc:	687b      	ldr	r3, [r7, #4]
 80208be:	681b      	ldr	r3, [r3, #0]
 80208c0:	685b      	ldr	r3, [r3, #4]
 80208c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80208c4:	687b      	ldr	r3, [r7, #4]
 80208c6:	681b      	ldr	r3, [r3, #0]
 80208c8:	689b      	ldr	r3, [r3, #8]
 80208ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80208cc:	687b      	ldr	r3, [r7, #4]
 80208ce:	681b      	ldr	r3, [r3, #0]
 80208d0:	4a2e      	ldr	r2, [pc, #184]	; (802098c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80208d2:	4293      	cmp	r3, r2
 80208d4:	d004      	beq.n	80208e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80208d6:	687b      	ldr	r3, [r7, #4]
 80208d8:	681b      	ldr	r3, [r3, #0]
 80208da:	4a2d      	ldr	r2, [pc, #180]	; (8020990 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80208dc:	4293      	cmp	r3, r2
 80208de:	d108      	bne.n	80208f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80208e0:	68fb      	ldr	r3, [r7, #12]
 80208e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80208e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80208e8:	683b      	ldr	r3, [r7, #0]
 80208ea:	685b      	ldr	r3, [r3, #4]
 80208ec:	68fa      	ldr	r2, [r7, #12]
 80208ee:	4313      	orrs	r3, r2
 80208f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80208f2:	68fb      	ldr	r3, [r7, #12]
 80208f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80208f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80208fa:	683b      	ldr	r3, [r7, #0]
 80208fc:	681b      	ldr	r3, [r3, #0]
 80208fe:	68fa      	ldr	r2, [r7, #12]
 8020900:	4313      	orrs	r3, r2
 8020902:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8020904:	687b      	ldr	r3, [r7, #4]
 8020906:	681b      	ldr	r3, [r3, #0]
 8020908:	68fa      	ldr	r2, [r7, #12]
 802090a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802090c:	687b      	ldr	r3, [r7, #4]
 802090e:	681b      	ldr	r3, [r3, #0]
 8020910:	4a1e      	ldr	r2, [pc, #120]	; (802098c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8020912:	4293      	cmp	r3, r2
 8020914:	d01d      	beq.n	8020952 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8020916:	687b      	ldr	r3, [r7, #4]
 8020918:	681b      	ldr	r3, [r3, #0]
 802091a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802091e:	d018      	beq.n	8020952 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8020920:	687b      	ldr	r3, [r7, #4]
 8020922:	681b      	ldr	r3, [r3, #0]
 8020924:	4a1b      	ldr	r2, [pc, #108]	; (8020994 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8020926:	4293      	cmp	r3, r2
 8020928:	d013      	beq.n	8020952 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 802092a:	687b      	ldr	r3, [r7, #4]
 802092c:	681b      	ldr	r3, [r3, #0]
 802092e:	4a1a      	ldr	r2, [pc, #104]	; (8020998 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8020930:	4293      	cmp	r3, r2
 8020932:	d00e      	beq.n	8020952 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8020934:	687b      	ldr	r3, [r7, #4]
 8020936:	681b      	ldr	r3, [r3, #0]
 8020938:	4a18      	ldr	r2, [pc, #96]	; (802099c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 802093a:	4293      	cmp	r3, r2
 802093c:	d009      	beq.n	8020952 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 802093e:	687b      	ldr	r3, [r7, #4]
 8020940:	681b      	ldr	r3, [r3, #0]
 8020942:	4a13      	ldr	r2, [pc, #76]	; (8020990 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8020944:	4293      	cmp	r3, r2
 8020946:	d004      	beq.n	8020952 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8020948:	687b      	ldr	r3, [r7, #4]
 802094a:	681b      	ldr	r3, [r3, #0]
 802094c:	4a14      	ldr	r2, [pc, #80]	; (80209a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 802094e:	4293      	cmp	r3, r2
 8020950:	d10c      	bne.n	802096c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8020952:	68bb      	ldr	r3, [r7, #8]
 8020954:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8020958:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802095a:	683b      	ldr	r3, [r7, #0]
 802095c:	689b      	ldr	r3, [r3, #8]
 802095e:	68ba      	ldr	r2, [r7, #8]
 8020960:	4313      	orrs	r3, r2
 8020962:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8020964:	687b      	ldr	r3, [r7, #4]
 8020966:	681b      	ldr	r3, [r3, #0]
 8020968:	68ba      	ldr	r2, [r7, #8]
 802096a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802096c:	687b      	ldr	r3, [r7, #4]
 802096e:	2201      	movs	r2, #1
 8020970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8020974:	687b      	ldr	r3, [r7, #4]
 8020976:	2200      	movs	r2, #0
 8020978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802097c:	2300      	movs	r3, #0
}
 802097e:	4618      	mov	r0, r3
 8020980:	3714      	adds	r7, #20
 8020982:	46bd      	mov	sp, r7
 8020984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020988:	4770      	bx	lr
 802098a:	bf00      	nop
 802098c:	40012c00 	.word	0x40012c00
 8020990:	40013400 	.word	0x40013400
 8020994:	40000400 	.word	0x40000400
 8020998:	40000800 	.word	0x40000800
 802099c:	40000c00 	.word	0x40000c00
 80209a0:	40014000 	.word	0x40014000

080209a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80209a4:	b480      	push	{r7}
 80209a6:	b085      	sub	sp, #20
 80209a8:	af00      	add	r7, sp, #0
 80209aa:	6078      	str	r0, [r7, #4]
 80209ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80209ae:	2300      	movs	r3, #0
 80209b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80209b2:	687b      	ldr	r3, [r7, #4]
 80209b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80209b8:	2b01      	cmp	r3, #1
 80209ba:	d101      	bne.n	80209c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80209bc:	2302      	movs	r3, #2
 80209be:	e087      	b.n	8020ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80209c0:	687b      	ldr	r3, [r7, #4]
 80209c2:	2201      	movs	r2, #1
 80209c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80209c8:	68fb      	ldr	r3, [r7, #12]
 80209ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80209ce:	683b      	ldr	r3, [r7, #0]
 80209d0:	68db      	ldr	r3, [r3, #12]
 80209d2:	4313      	orrs	r3, r2
 80209d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80209d6:	68fb      	ldr	r3, [r7, #12]
 80209d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80209dc:	683b      	ldr	r3, [r7, #0]
 80209de:	689b      	ldr	r3, [r3, #8]
 80209e0:	4313      	orrs	r3, r2
 80209e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80209e4:	68fb      	ldr	r3, [r7, #12]
 80209e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80209ea:	683b      	ldr	r3, [r7, #0]
 80209ec:	685b      	ldr	r3, [r3, #4]
 80209ee:	4313      	orrs	r3, r2
 80209f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80209f2:	68fb      	ldr	r3, [r7, #12]
 80209f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80209f8:	683b      	ldr	r3, [r7, #0]
 80209fa:	681b      	ldr	r3, [r3, #0]
 80209fc:	4313      	orrs	r3, r2
 80209fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8020a00:	68fb      	ldr	r3, [r7, #12]
 8020a02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8020a06:	683b      	ldr	r3, [r7, #0]
 8020a08:	691b      	ldr	r3, [r3, #16]
 8020a0a:	4313      	orrs	r3, r2
 8020a0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8020a0e:	68fb      	ldr	r3, [r7, #12]
 8020a10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8020a14:	683b      	ldr	r3, [r7, #0]
 8020a16:	695b      	ldr	r3, [r3, #20]
 8020a18:	4313      	orrs	r3, r2
 8020a1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8020a1c:	68fb      	ldr	r3, [r7, #12]
 8020a1e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8020a22:	683b      	ldr	r3, [r7, #0]
 8020a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020a26:	4313      	orrs	r3, r2
 8020a28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8020a2a:	68fb      	ldr	r3, [r7, #12]
 8020a2c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8020a30:	683b      	ldr	r3, [r7, #0]
 8020a32:	699b      	ldr	r3, [r3, #24]
 8020a34:	041b      	lsls	r3, r3, #16
 8020a36:	4313      	orrs	r3, r2
 8020a38:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8020a3a:	687b      	ldr	r3, [r7, #4]
 8020a3c:	681b      	ldr	r3, [r3, #0]
 8020a3e:	4a27      	ldr	r2, [pc, #156]	; (8020adc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8020a40:	4293      	cmp	r3, r2
 8020a42:	d004      	beq.n	8020a4e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8020a44:	687b      	ldr	r3, [r7, #4]
 8020a46:	681b      	ldr	r3, [r3, #0]
 8020a48:	4a25      	ldr	r2, [pc, #148]	; (8020ae0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8020a4a:	4293      	cmp	r3, r2
 8020a4c:	d106      	bne.n	8020a5c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8020a4e:	68fb      	ldr	r3, [r7, #12]
 8020a50:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8020a54:	683b      	ldr	r3, [r7, #0]
 8020a56:	69db      	ldr	r3, [r3, #28]
 8020a58:	4313      	orrs	r3, r2
 8020a5a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8020a5c:	687b      	ldr	r3, [r7, #4]
 8020a5e:	681b      	ldr	r3, [r3, #0]
 8020a60:	4a1e      	ldr	r2, [pc, #120]	; (8020adc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8020a62:	4293      	cmp	r3, r2
 8020a64:	d004      	beq.n	8020a70 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8020a66:	687b      	ldr	r3, [r7, #4]
 8020a68:	681b      	ldr	r3, [r3, #0]
 8020a6a:	4a1d      	ldr	r2, [pc, #116]	; (8020ae0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8020a6c:	4293      	cmp	r3, r2
 8020a6e:	d126      	bne.n	8020abe <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8020a70:	68fb      	ldr	r3, [r7, #12]
 8020a72:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8020a76:	683b      	ldr	r3, [r7, #0]
 8020a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020a7a:	051b      	lsls	r3, r3, #20
 8020a7c:	4313      	orrs	r3, r2
 8020a7e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8020a80:	68fb      	ldr	r3, [r7, #12]
 8020a82:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8020a86:	683b      	ldr	r3, [r7, #0]
 8020a88:	6a1b      	ldr	r3, [r3, #32]
 8020a8a:	4313      	orrs	r3, r2
 8020a8c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8020a8e:	68fb      	ldr	r3, [r7, #12]
 8020a90:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8020a94:	683b      	ldr	r3, [r7, #0]
 8020a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020a98:	4313      	orrs	r3, r2
 8020a9a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8020a9c:	687b      	ldr	r3, [r7, #4]
 8020a9e:	681b      	ldr	r3, [r3, #0]
 8020aa0:	4a0e      	ldr	r2, [pc, #56]	; (8020adc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8020aa2:	4293      	cmp	r3, r2
 8020aa4:	d004      	beq.n	8020ab0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8020aa6:	687b      	ldr	r3, [r7, #4]
 8020aa8:	681b      	ldr	r3, [r3, #0]
 8020aaa:	4a0d      	ldr	r2, [pc, #52]	; (8020ae0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8020aac:	4293      	cmp	r3, r2
 8020aae:	d106      	bne.n	8020abe <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8020ab0:	68fb      	ldr	r3, [r7, #12]
 8020ab2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8020ab6:	683b      	ldr	r3, [r7, #0]
 8020ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020aba:	4313      	orrs	r3, r2
 8020abc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8020abe:	687b      	ldr	r3, [r7, #4]
 8020ac0:	681b      	ldr	r3, [r3, #0]
 8020ac2:	68fa      	ldr	r2, [r7, #12]
 8020ac4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8020ac6:	687b      	ldr	r3, [r7, #4]
 8020ac8:	2200      	movs	r2, #0
 8020aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8020ace:	2300      	movs	r3, #0
}
 8020ad0:	4618      	mov	r0, r3
 8020ad2:	3714      	adds	r7, #20
 8020ad4:	46bd      	mov	sp, r7
 8020ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ada:	4770      	bx	lr
 8020adc:	40012c00 	.word	0x40012c00
 8020ae0:	40013400 	.word	0x40013400

08020ae4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8020ae4:	b480      	push	{r7}
 8020ae6:	b083      	sub	sp, #12
 8020ae8:	af00      	add	r7, sp, #0
 8020aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8020aec:	bf00      	nop
 8020aee:	370c      	adds	r7, #12
 8020af0:	46bd      	mov	sp, r7
 8020af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020af6:	4770      	bx	lr

08020af8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8020af8:	b480      	push	{r7}
 8020afa:	b083      	sub	sp, #12
 8020afc:	af00      	add	r7, sp, #0
 8020afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8020b00:	bf00      	nop
 8020b02:	370c      	adds	r7, #12
 8020b04:	46bd      	mov	sp, r7
 8020b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b0a:	4770      	bx	lr

08020b0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8020b0c:	b480      	push	{r7}
 8020b0e:	b083      	sub	sp, #12
 8020b10:	af00      	add	r7, sp, #0
 8020b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8020b14:	bf00      	nop
 8020b16:	370c      	adds	r7, #12
 8020b18:	46bd      	mov	sp, r7
 8020b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b1e:	4770      	bx	lr

08020b20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8020b20:	b580      	push	{r7, lr}
 8020b22:	b082      	sub	sp, #8
 8020b24:	af00      	add	r7, sp, #0
 8020b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8020b28:	687b      	ldr	r3, [r7, #4]
 8020b2a:	2b00      	cmp	r3, #0
 8020b2c:	d101      	bne.n	8020b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8020b2e:	2301      	movs	r3, #1
 8020b30:	e042      	b.n	8020bb8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8020b32:	687b      	ldr	r3, [r7, #4]
 8020b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020b38:	2b00      	cmp	r3, #0
 8020b3a:	d106      	bne.n	8020b4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8020b3c:	687b      	ldr	r3, [r7, #4]
 8020b3e:	2200      	movs	r2, #0
 8020b40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8020b44:	6878      	ldr	r0, [r7, #4]
 8020b46:	f7f7 fa6f 	bl	8018028 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8020b4a:	687b      	ldr	r3, [r7, #4]
 8020b4c:	2224      	movs	r2, #36	; 0x24
 8020b4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8020b52:	687b      	ldr	r3, [r7, #4]
 8020b54:	681b      	ldr	r3, [r3, #0]
 8020b56:	681a      	ldr	r2, [r3, #0]
 8020b58:	687b      	ldr	r3, [r7, #4]
 8020b5a:	681b      	ldr	r3, [r3, #0]
 8020b5c:	f022 0201 	bic.w	r2, r2, #1
 8020b60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8020b62:	6878      	ldr	r0, [r7, #4]
 8020b64:	f000 fc4a 	bl	80213fc <UART_SetConfig>
 8020b68:	4603      	mov	r3, r0
 8020b6a:	2b01      	cmp	r3, #1
 8020b6c:	d101      	bne.n	8020b72 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8020b6e:	2301      	movs	r3, #1
 8020b70:	e022      	b.n	8020bb8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8020b72:	687b      	ldr	r3, [r7, #4]
 8020b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020b76:	2b00      	cmp	r3, #0
 8020b78:	d002      	beq.n	8020b80 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8020b7a:	6878      	ldr	r0, [r7, #4]
 8020b7c:	f000 ff3e 	bl	80219fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8020b80:	687b      	ldr	r3, [r7, #4]
 8020b82:	681b      	ldr	r3, [r3, #0]
 8020b84:	685a      	ldr	r2, [r3, #4]
 8020b86:	687b      	ldr	r3, [r7, #4]
 8020b88:	681b      	ldr	r3, [r3, #0]
 8020b8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8020b8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8020b90:	687b      	ldr	r3, [r7, #4]
 8020b92:	681b      	ldr	r3, [r3, #0]
 8020b94:	689a      	ldr	r2, [r3, #8]
 8020b96:	687b      	ldr	r3, [r7, #4]
 8020b98:	681b      	ldr	r3, [r3, #0]
 8020b9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8020b9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8020ba0:	687b      	ldr	r3, [r7, #4]
 8020ba2:	681b      	ldr	r3, [r3, #0]
 8020ba4:	681a      	ldr	r2, [r3, #0]
 8020ba6:	687b      	ldr	r3, [r7, #4]
 8020ba8:	681b      	ldr	r3, [r3, #0]
 8020baa:	f042 0201 	orr.w	r2, r2, #1
 8020bae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8020bb0:	6878      	ldr	r0, [r7, #4]
 8020bb2:	f000 ffc5 	bl	8021b40 <UART_CheckIdleState>
 8020bb6:	4603      	mov	r3, r0
}
 8020bb8:	4618      	mov	r0, r3
 8020bba:	3708      	adds	r7, #8
 8020bbc:	46bd      	mov	sp, r7
 8020bbe:	bd80      	pop	{r7, pc}

08020bc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8020bc0:	b580      	push	{r7, lr}
 8020bc2:	b08a      	sub	sp, #40	; 0x28
 8020bc4:	af02      	add	r7, sp, #8
 8020bc6:	60f8      	str	r0, [r7, #12]
 8020bc8:	60b9      	str	r1, [r7, #8]
 8020bca:	603b      	str	r3, [r7, #0]
 8020bcc:	4613      	mov	r3, r2
 8020bce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8020bd0:	68fb      	ldr	r3, [r7, #12]
 8020bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020bd6:	2b20      	cmp	r3, #32
 8020bd8:	d17b      	bne.n	8020cd2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8020bda:	68bb      	ldr	r3, [r7, #8]
 8020bdc:	2b00      	cmp	r3, #0
 8020bde:	d002      	beq.n	8020be6 <HAL_UART_Transmit+0x26>
 8020be0:	88fb      	ldrh	r3, [r7, #6]
 8020be2:	2b00      	cmp	r3, #0
 8020be4:	d101      	bne.n	8020bea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8020be6:	2301      	movs	r3, #1
 8020be8:	e074      	b.n	8020cd4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8020bea:	68fb      	ldr	r3, [r7, #12]
 8020bec:	2200      	movs	r2, #0
 8020bee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8020bf2:	68fb      	ldr	r3, [r7, #12]
 8020bf4:	2221      	movs	r2, #33	; 0x21
 8020bf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8020bfa:	f7f8 f82b 	bl	8018c54 <HAL_GetTick>
 8020bfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8020c00:	68fb      	ldr	r3, [r7, #12]
 8020c02:	88fa      	ldrh	r2, [r7, #6]
 8020c04:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8020c08:	68fb      	ldr	r3, [r7, #12]
 8020c0a:	88fa      	ldrh	r2, [r7, #6]
 8020c0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8020c10:	68fb      	ldr	r3, [r7, #12]
 8020c12:	689b      	ldr	r3, [r3, #8]
 8020c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8020c18:	d108      	bne.n	8020c2c <HAL_UART_Transmit+0x6c>
 8020c1a:	68fb      	ldr	r3, [r7, #12]
 8020c1c:	691b      	ldr	r3, [r3, #16]
 8020c1e:	2b00      	cmp	r3, #0
 8020c20:	d104      	bne.n	8020c2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8020c22:	2300      	movs	r3, #0
 8020c24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8020c26:	68bb      	ldr	r3, [r7, #8]
 8020c28:	61bb      	str	r3, [r7, #24]
 8020c2a:	e003      	b.n	8020c34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8020c2c:	68bb      	ldr	r3, [r7, #8]
 8020c2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8020c30:	2300      	movs	r3, #0
 8020c32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8020c34:	e030      	b.n	8020c98 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8020c36:	683b      	ldr	r3, [r7, #0]
 8020c38:	9300      	str	r3, [sp, #0]
 8020c3a:	697b      	ldr	r3, [r7, #20]
 8020c3c:	2200      	movs	r2, #0
 8020c3e:	2180      	movs	r1, #128	; 0x80
 8020c40:	68f8      	ldr	r0, [r7, #12]
 8020c42:	f001 f827 	bl	8021c94 <UART_WaitOnFlagUntilTimeout>
 8020c46:	4603      	mov	r3, r0
 8020c48:	2b00      	cmp	r3, #0
 8020c4a:	d005      	beq.n	8020c58 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8020c4c:	68fb      	ldr	r3, [r7, #12]
 8020c4e:	2220      	movs	r2, #32
 8020c50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8020c54:	2303      	movs	r3, #3
 8020c56:	e03d      	b.n	8020cd4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8020c58:	69fb      	ldr	r3, [r7, #28]
 8020c5a:	2b00      	cmp	r3, #0
 8020c5c:	d10b      	bne.n	8020c76 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8020c5e:	69bb      	ldr	r3, [r7, #24]
 8020c60:	881b      	ldrh	r3, [r3, #0]
 8020c62:	461a      	mov	r2, r3
 8020c64:	68fb      	ldr	r3, [r7, #12]
 8020c66:	681b      	ldr	r3, [r3, #0]
 8020c68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8020c6c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8020c6e:	69bb      	ldr	r3, [r7, #24]
 8020c70:	3302      	adds	r3, #2
 8020c72:	61bb      	str	r3, [r7, #24]
 8020c74:	e007      	b.n	8020c86 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8020c76:	69fb      	ldr	r3, [r7, #28]
 8020c78:	781a      	ldrb	r2, [r3, #0]
 8020c7a:	68fb      	ldr	r3, [r7, #12]
 8020c7c:	681b      	ldr	r3, [r3, #0]
 8020c7e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8020c80:	69fb      	ldr	r3, [r7, #28]
 8020c82:	3301      	adds	r3, #1
 8020c84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8020c86:	68fb      	ldr	r3, [r7, #12]
 8020c88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8020c8c:	b29b      	uxth	r3, r3
 8020c8e:	3b01      	subs	r3, #1
 8020c90:	b29a      	uxth	r2, r3
 8020c92:	68fb      	ldr	r3, [r7, #12]
 8020c94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8020c98:	68fb      	ldr	r3, [r7, #12]
 8020c9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8020c9e:	b29b      	uxth	r3, r3
 8020ca0:	2b00      	cmp	r3, #0
 8020ca2:	d1c8      	bne.n	8020c36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8020ca4:	683b      	ldr	r3, [r7, #0]
 8020ca6:	9300      	str	r3, [sp, #0]
 8020ca8:	697b      	ldr	r3, [r7, #20]
 8020caa:	2200      	movs	r2, #0
 8020cac:	2140      	movs	r1, #64	; 0x40
 8020cae:	68f8      	ldr	r0, [r7, #12]
 8020cb0:	f000 fff0 	bl	8021c94 <UART_WaitOnFlagUntilTimeout>
 8020cb4:	4603      	mov	r3, r0
 8020cb6:	2b00      	cmp	r3, #0
 8020cb8:	d005      	beq.n	8020cc6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8020cba:	68fb      	ldr	r3, [r7, #12]
 8020cbc:	2220      	movs	r2, #32
 8020cbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8020cc2:	2303      	movs	r3, #3
 8020cc4:	e006      	b.n	8020cd4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8020cc6:	68fb      	ldr	r3, [r7, #12]
 8020cc8:	2220      	movs	r2, #32
 8020cca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8020cce:	2300      	movs	r3, #0
 8020cd0:	e000      	b.n	8020cd4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8020cd2:	2302      	movs	r3, #2
  }
}
 8020cd4:	4618      	mov	r0, r3
 8020cd6:	3720      	adds	r7, #32
 8020cd8:	46bd      	mov	sp, r7
 8020cda:	bd80      	pop	{r7, pc}

08020cdc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8020cdc:	b580      	push	{r7, lr}
 8020cde:	b08a      	sub	sp, #40	; 0x28
 8020ce0:	af00      	add	r7, sp, #0
 8020ce2:	60f8      	str	r0, [r7, #12]
 8020ce4:	60b9      	str	r1, [r7, #8]
 8020ce6:	4613      	mov	r3, r2
 8020ce8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8020cea:	68fb      	ldr	r3, [r7, #12]
 8020cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8020cf0:	2b20      	cmp	r3, #32
 8020cf2:	d137      	bne.n	8020d64 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8020cf4:	68bb      	ldr	r3, [r7, #8]
 8020cf6:	2b00      	cmp	r3, #0
 8020cf8:	d002      	beq.n	8020d00 <HAL_UART_Receive_IT+0x24>
 8020cfa:	88fb      	ldrh	r3, [r7, #6]
 8020cfc:	2b00      	cmp	r3, #0
 8020cfe:	d101      	bne.n	8020d04 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8020d00:	2301      	movs	r3, #1
 8020d02:	e030      	b.n	8020d66 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8020d04:	68fb      	ldr	r3, [r7, #12]
 8020d06:	2200      	movs	r2, #0
 8020d08:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8020d0a:	68fb      	ldr	r3, [r7, #12]
 8020d0c:	681b      	ldr	r3, [r3, #0]
 8020d0e:	4a18      	ldr	r2, [pc, #96]	; (8020d70 <HAL_UART_Receive_IT+0x94>)
 8020d10:	4293      	cmp	r3, r2
 8020d12:	d01f      	beq.n	8020d54 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8020d14:	68fb      	ldr	r3, [r7, #12]
 8020d16:	681b      	ldr	r3, [r3, #0]
 8020d18:	685b      	ldr	r3, [r3, #4]
 8020d1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8020d1e:	2b00      	cmp	r3, #0
 8020d20:	d018      	beq.n	8020d54 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8020d22:	68fb      	ldr	r3, [r7, #12]
 8020d24:	681b      	ldr	r3, [r3, #0]
 8020d26:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020d28:	697b      	ldr	r3, [r7, #20]
 8020d2a:	e853 3f00 	ldrex	r3, [r3]
 8020d2e:	613b      	str	r3, [r7, #16]
   return(result);
 8020d30:	693b      	ldr	r3, [r7, #16]
 8020d32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8020d36:	627b      	str	r3, [r7, #36]	; 0x24
 8020d38:	68fb      	ldr	r3, [r7, #12]
 8020d3a:	681b      	ldr	r3, [r3, #0]
 8020d3c:	461a      	mov	r2, r3
 8020d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d40:	623b      	str	r3, [r7, #32]
 8020d42:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020d44:	69f9      	ldr	r1, [r7, #28]
 8020d46:	6a3a      	ldr	r2, [r7, #32]
 8020d48:	e841 2300 	strex	r3, r2, [r1]
 8020d4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8020d4e:	69bb      	ldr	r3, [r7, #24]
 8020d50:	2b00      	cmp	r3, #0
 8020d52:	d1e6      	bne.n	8020d22 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8020d54:	88fb      	ldrh	r3, [r7, #6]
 8020d56:	461a      	mov	r2, r3
 8020d58:	68b9      	ldr	r1, [r7, #8]
 8020d5a:	68f8      	ldr	r0, [r7, #12]
 8020d5c:	f001 f802 	bl	8021d64 <UART_Start_Receive_IT>
 8020d60:	4603      	mov	r3, r0
 8020d62:	e000      	b.n	8020d66 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8020d64:	2302      	movs	r3, #2
  }
}
 8020d66:	4618      	mov	r0, r3
 8020d68:	3728      	adds	r7, #40	; 0x28
 8020d6a:	46bd      	mov	sp, r7
 8020d6c:	bd80      	pop	{r7, pc}
 8020d6e:	bf00      	nop
 8020d70:	40008000 	.word	0x40008000

08020d74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8020d74:	b580      	push	{r7, lr}
 8020d76:	b0ba      	sub	sp, #232	; 0xe8
 8020d78:	af00      	add	r7, sp, #0
 8020d7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8020d7c:	687b      	ldr	r3, [r7, #4]
 8020d7e:	681b      	ldr	r3, [r3, #0]
 8020d80:	69db      	ldr	r3, [r3, #28]
 8020d82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8020d86:	687b      	ldr	r3, [r7, #4]
 8020d88:	681b      	ldr	r3, [r3, #0]
 8020d8a:	681b      	ldr	r3, [r3, #0]
 8020d8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8020d90:	687b      	ldr	r3, [r7, #4]
 8020d92:	681b      	ldr	r3, [r3, #0]
 8020d94:	689b      	ldr	r3, [r3, #8]
 8020d96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8020d9a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8020d9e:	f640 030f 	movw	r3, #2063	; 0x80f
 8020da2:	4013      	ands	r3, r2
 8020da4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8020da8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8020dac:	2b00      	cmp	r3, #0
 8020dae:	d11b      	bne.n	8020de8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8020db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8020db4:	f003 0320 	and.w	r3, r3, #32
 8020db8:	2b00      	cmp	r3, #0
 8020dba:	d015      	beq.n	8020de8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8020dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8020dc0:	f003 0320 	and.w	r3, r3, #32
 8020dc4:	2b00      	cmp	r3, #0
 8020dc6:	d105      	bne.n	8020dd4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8020dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8020dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020dd0:	2b00      	cmp	r3, #0
 8020dd2:	d009      	beq.n	8020de8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8020dd4:	687b      	ldr	r3, [r7, #4]
 8020dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8020dd8:	2b00      	cmp	r3, #0
 8020dda:	f000 82e3 	beq.w	80213a4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8020dde:	687b      	ldr	r3, [r7, #4]
 8020de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8020de2:	6878      	ldr	r0, [r7, #4]
 8020de4:	4798      	blx	r3
      }
      return;
 8020de6:	e2dd      	b.n	80213a4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8020de8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8020dec:	2b00      	cmp	r3, #0
 8020dee:	f000 8123 	beq.w	8021038 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8020df2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8020df6:	4b8d      	ldr	r3, [pc, #564]	; (802102c <HAL_UART_IRQHandler+0x2b8>)
 8020df8:	4013      	ands	r3, r2
 8020dfa:	2b00      	cmp	r3, #0
 8020dfc:	d106      	bne.n	8020e0c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8020dfe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8020e02:	4b8b      	ldr	r3, [pc, #556]	; (8021030 <HAL_UART_IRQHandler+0x2bc>)
 8020e04:	4013      	ands	r3, r2
 8020e06:	2b00      	cmp	r3, #0
 8020e08:	f000 8116 	beq.w	8021038 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8020e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8020e10:	f003 0301 	and.w	r3, r3, #1
 8020e14:	2b00      	cmp	r3, #0
 8020e16:	d011      	beq.n	8020e3c <HAL_UART_IRQHandler+0xc8>
 8020e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8020e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8020e20:	2b00      	cmp	r3, #0
 8020e22:	d00b      	beq.n	8020e3c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8020e24:	687b      	ldr	r3, [r7, #4]
 8020e26:	681b      	ldr	r3, [r3, #0]
 8020e28:	2201      	movs	r2, #1
 8020e2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8020e2c:	687b      	ldr	r3, [r7, #4]
 8020e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8020e32:	f043 0201 	orr.w	r2, r3, #1
 8020e36:	687b      	ldr	r3, [r7, #4]
 8020e38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8020e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8020e40:	f003 0302 	and.w	r3, r3, #2
 8020e44:	2b00      	cmp	r3, #0
 8020e46:	d011      	beq.n	8020e6c <HAL_UART_IRQHandler+0xf8>
 8020e48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8020e4c:	f003 0301 	and.w	r3, r3, #1
 8020e50:	2b00      	cmp	r3, #0
 8020e52:	d00b      	beq.n	8020e6c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8020e54:	687b      	ldr	r3, [r7, #4]
 8020e56:	681b      	ldr	r3, [r3, #0]
 8020e58:	2202      	movs	r2, #2
 8020e5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8020e5c:	687b      	ldr	r3, [r7, #4]
 8020e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8020e62:	f043 0204 	orr.w	r2, r3, #4
 8020e66:	687b      	ldr	r3, [r7, #4]
 8020e68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8020e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8020e70:	f003 0304 	and.w	r3, r3, #4
 8020e74:	2b00      	cmp	r3, #0
 8020e76:	d011      	beq.n	8020e9c <HAL_UART_IRQHandler+0x128>
 8020e78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8020e7c:	f003 0301 	and.w	r3, r3, #1
 8020e80:	2b00      	cmp	r3, #0
 8020e82:	d00b      	beq.n	8020e9c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8020e84:	687b      	ldr	r3, [r7, #4]
 8020e86:	681b      	ldr	r3, [r3, #0]
 8020e88:	2204      	movs	r2, #4
 8020e8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8020e8c:	687b      	ldr	r3, [r7, #4]
 8020e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8020e92:	f043 0202 	orr.w	r2, r3, #2
 8020e96:	687b      	ldr	r3, [r7, #4]
 8020e98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8020e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8020ea0:	f003 0308 	and.w	r3, r3, #8
 8020ea4:	2b00      	cmp	r3, #0
 8020ea6:	d017      	beq.n	8020ed8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8020ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8020eac:	f003 0320 	and.w	r3, r3, #32
 8020eb0:	2b00      	cmp	r3, #0
 8020eb2:	d105      	bne.n	8020ec0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8020eb4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8020eb8:	4b5c      	ldr	r3, [pc, #368]	; (802102c <HAL_UART_IRQHandler+0x2b8>)
 8020eba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8020ebc:	2b00      	cmp	r3, #0
 8020ebe:	d00b      	beq.n	8020ed8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8020ec0:	687b      	ldr	r3, [r7, #4]
 8020ec2:	681b      	ldr	r3, [r3, #0]
 8020ec4:	2208      	movs	r2, #8
 8020ec6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8020ec8:	687b      	ldr	r3, [r7, #4]
 8020eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8020ece:	f043 0208 	orr.w	r2, r3, #8
 8020ed2:	687b      	ldr	r3, [r7, #4]
 8020ed4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8020ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8020edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8020ee0:	2b00      	cmp	r3, #0
 8020ee2:	d012      	beq.n	8020f0a <HAL_UART_IRQHandler+0x196>
 8020ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8020ee8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8020eec:	2b00      	cmp	r3, #0
 8020eee:	d00c      	beq.n	8020f0a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8020ef0:	687b      	ldr	r3, [r7, #4]
 8020ef2:	681b      	ldr	r3, [r3, #0]
 8020ef4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020ef8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8020efa:	687b      	ldr	r3, [r7, #4]
 8020efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8020f00:	f043 0220 	orr.w	r2, r3, #32
 8020f04:	687b      	ldr	r3, [r7, #4]
 8020f06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8020f0a:	687b      	ldr	r3, [r7, #4]
 8020f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8020f10:	2b00      	cmp	r3, #0
 8020f12:	f000 8249 	beq.w	80213a8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8020f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8020f1a:	f003 0320 	and.w	r3, r3, #32
 8020f1e:	2b00      	cmp	r3, #0
 8020f20:	d013      	beq.n	8020f4a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8020f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8020f26:	f003 0320 	and.w	r3, r3, #32
 8020f2a:	2b00      	cmp	r3, #0
 8020f2c:	d105      	bne.n	8020f3a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8020f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8020f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020f36:	2b00      	cmp	r3, #0
 8020f38:	d007      	beq.n	8020f4a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8020f3a:	687b      	ldr	r3, [r7, #4]
 8020f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8020f3e:	2b00      	cmp	r3, #0
 8020f40:	d003      	beq.n	8020f4a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8020f42:	687b      	ldr	r3, [r7, #4]
 8020f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8020f46:	6878      	ldr	r0, [r7, #4]
 8020f48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8020f4a:	687b      	ldr	r3, [r7, #4]
 8020f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8020f50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8020f54:	687b      	ldr	r3, [r7, #4]
 8020f56:	681b      	ldr	r3, [r3, #0]
 8020f58:	689b      	ldr	r3, [r3, #8]
 8020f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020f5e:	2b40      	cmp	r3, #64	; 0x40
 8020f60:	d005      	beq.n	8020f6e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8020f62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8020f66:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8020f6a:	2b00      	cmp	r3, #0
 8020f6c:	d054      	beq.n	8021018 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8020f6e:	6878      	ldr	r0, [r7, #4]
 8020f70:	f001 f81a 	bl	8021fa8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8020f74:	687b      	ldr	r3, [r7, #4]
 8020f76:	681b      	ldr	r3, [r3, #0]
 8020f78:	689b      	ldr	r3, [r3, #8]
 8020f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020f7e:	2b40      	cmp	r3, #64	; 0x40
 8020f80:	d146      	bne.n	8021010 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8020f82:	687b      	ldr	r3, [r7, #4]
 8020f84:	681b      	ldr	r3, [r3, #0]
 8020f86:	3308      	adds	r3, #8
 8020f88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020f8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8020f90:	e853 3f00 	ldrex	r3, [r3]
 8020f94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8020f98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8020f9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8020fa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8020fa4:	687b      	ldr	r3, [r7, #4]
 8020fa6:	681b      	ldr	r3, [r3, #0]
 8020fa8:	3308      	adds	r3, #8
 8020faa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8020fae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8020fb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020fb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8020fba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8020fbe:	e841 2300 	strex	r3, r2, [r1]
 8020fc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8020fc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8020fca:	2b00      	cmp	r3, #0
 8020fcc:	d1d9      	bne.n	8020f82 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8020fce:	687b      	ldr	r3, [r7, #4]
 8020fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8020fd4:	2b00      	cmp	r3, #0
 8020fd6:	d017      	beq.n	8021008 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8020fd8:	687b      	ldr	r3, [r7, #4]
 8020fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8020fde:	4a15      	ldr	r2, [pc, #84]	; (8021034 <HAL_UART_IRQHandler+0x2c0>)
 8020fe0:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8020fe2:	687b      	ldr	r3, [r7, #4]
 8020fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8020fe8:	4618      	mov	r0, r3
 8020fea:	f7f9 fce0 	bl	801a9ae <HAL_DMA_Abort_IT>
 8020fee:	4603      	mov	r3, r0
 8020ff0:	2b00      	cmp	r3, #0
 8020ff2:	d019      	beq.n	8021028 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8020ff4:	687b      	ldr	r3, [r7, #4]
 8020ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8020ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020ffc:	687a      	ldr	r2, [r7, #4]
 8020ffe:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8021002:	4610      	mov	r0, r2
 8021004:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021006:	e00f      	b.n	8021028 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8021008:	6878      	ldr	r0, [r7, #4]
 802100a:	f000 f9e1 	bl	80213d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802100e:	e00b      	b.n	8021028 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8021010:	6878      	ldr	r0, [r7, #4]
 8021012:	f000 f9dd 	bl	80213d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021016:	e007      	b.n	8021028 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8021018:	6878      	ldr	r0, [r7, #4]
 802101a:	f000 f9d9 	bl	80213d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 802101e:	687b      	ldr	r3, [r7, #4]
 8021020:	2200      	movs	r2, #0
 8021022:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8021026:	e1bf      	b.n	80213a8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021028:	bf00      	nop
    return;
 802102a:	e1bd      	b.n	80213a8 <HAL_UART_IRQHandler+0x634>
 802102c:	10000001 	.word	0x10000001
 8021030:	04000120 	.word	0x04000120
 8021034:	08022075 	.word	0x08022075

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8021038:	687b      	ldr	r3, [r7, #4]
 802103a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802103c:	2b01      	cmp	r3, #1
 802103e:	f040 8153 	bne.w	80212e8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8021042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8021046:	f003 0310 	and.w	r3, r3, #16
 802104a:	2b00      	cmp	r3, #0
 802104c:	f000 814c 	beq.w	80212e8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8021050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8021054:	f003 0310 	and.w	r3, r3, #16
 8021058:	2b00      	cmp	r3, #0
 802105a:	f000 8145 	beq.w	80212e8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 802105e:	687b      	ldr	r3, [r7, #4]
 8021060:	681b      	ldr	r3, [r3, #0]
 8021062:	2210      	movs	r2, #16
 8021064:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021066:	687b      	ldr	r3, [r7, #4]
 8021068:	681b      	ldr	r3, [r3, #0]
 802106a:	689b      	ldr	r3, [r3, #8]
 802106c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021070:	2b40      	cmp	r3, #64	; 0x40
 8021072:	f040 80bb 	bne.w	80211ec <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8021076:	687b      	ldr	r3, [r7, #4]
 8021078:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 802107c:	681b      	ldr	r3, [r3, #0]
 802107e:	685b      	ldr	r3, [r3, #4]
 8021080:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8021084:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8021088:	2b00      	cmp	r3, #0
 802108a:	f000 818f 	beq.w	80213ac <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 802108e:	687b      	ldr	r3, [r7, #4]
 8021090:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8021094:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8021098:	429a      	cmp	r2, r3
 802109a:	f080 8187 	bcs.w	80213ac <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 802109e:	687b      	ldr	r3, [r7, #4]
 80210a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80210a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80210a8:	687b      	ldr	r3, [r7, #4]
 80210aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80210ae:	681b      	ldr	r3, [r3, #0]
 80210b0:	681b      	ldr	r3, [r3, #0]
 80210b2:	f003 0320 	and.w	r3, r3, #32
 80210b6:	2b00      	cmp	r3, #0
 80210b8:	f040 8087 	bne.w	80211ca <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80210bc:	687b      	ldr	r3, [r7, #4]
 80210be:	681b      	ldr	r3, [r3, #0]
 80210c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80210c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80210c8:	e853 3f00 	ldrex	r3, [r3]
 80210cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80210d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80210d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80210d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80210dc:	687b      	ldr	r3, [r7, #4]
 80210de:	681b      	ldr	r3, [r3, #0]
 80210e0:	461a      	mov	r2, r3
 80210e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80210e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80210ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80210ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80210f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80210f6:	e841 2300 	strex	r3, r2, [r1]
 80210fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80210fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021102:	2b00      	cmp	r3, #0
 8021104:	d1da      	bne.n	80210bc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021106:	687b      	ldr	r3, [r7, #4]
 8021108:	681b      	ldr	r3, [r3, #0]
 802110a:	3308      	adds	r3, #8
 802110c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802110e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021110:	e853 3f00 	ldrex	r3, [r3]
 8021114:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8021116:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021118:	f023 0301 	bic.w	r3, r3, #1
 802111c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8021120:	687b      	ldr	r3, [r7, #4]
 8021122:	681b      	ldr	r3, [r3, #0]
 8021124:	3308      	adds	r3, #8
 8021126:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 802112a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 802112e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021130:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8021132:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8021136:	e841 2300 	strex	r3, r2, [r1]
 802113a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 802113c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802113e:	2b00      	cmp	r3, #0
 8021140:	d1e1      	bne.n	8021106 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8021142:	687b      	ldr	r3, [r7, #4]
 8021144:	681b      	ldr	r3, [r3, #0]
 8021146:	3308      	adds	r3, #8
 8021148:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802114a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802114c:	e853 3f00 	ldrex	r3, [r3]
 8021150:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8021152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021154:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8021158:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 802115c:	687b      	ldr	r3, [r7, #4]
 802115e:	681b      	ldr	r3, [r3, #0]
 8021160:	3308      	adds	r3, #8
 8021162:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8021166:	66fa      	str	r2, [r7, #108]	; 0x6c
 8021168:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802116a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 802116c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 802116e:	e841 2300 	strex	r3, r2, [r1]
 8021172:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8021174:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8021176:	2b00      	cmp	r3, #0
 8021178:	d1e3      	bne.n	8021142 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 802117a:	687b      	ldr	r3, [r7, #4]
 802117c:	2220      	movs	r2, #32
 802117e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021182:	687b      	ldr	r3, [r7, #4]
 8021184:	2200      	movs	r2, #0
 8021186:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8021188:	687b      	ldr	r3, [r7, #4]
 802118a:	681b      	ldr	r3, [r3, #0]
 802118c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802118e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021190:	e853 3f00 	ldrex	r3, [r3]
 8021194:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8021196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021198:	f023 0310 	bic.w	r3, r3, #16
 802119c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80211a0:	687b      	ldr	r3, [r7, #4]
 80211a2:	681b      	ldr	r3, [r3, #0]
 80211a4:	461a      	mov	r2, r3
 80211a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80211aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80211ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80211ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80211b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80211b2:	e841 2300 	strex	r3, r2, [r1]
 80211b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80211b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80211ba:	2b00      	cmp	r3, #0
 80211bc:	d1e4      	bne.n	8021188 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80211be:	687b      	ldr	r3, [r7, #4]
 80211c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80211c4:	4618      	mov	r0, r3
 80211c6:	f7f9 fb96 	bl	801a8f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80211ca:	687b      	ldr	r3, [r7, #4]
 80211cc:	2202      	movs	r2, #2
 80211ce:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80211d0:	687b      	ldr	r3, [r7, #4]
 80211d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80211d6:	687b      	ldr	r3, [r7, #4]
 80211d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80211dc:	b29b      	uxth	r3, r3
 80211de:	1ad3      	subs	r3, r2, r3
 80211e0:	b29b      	uxth	r3, r3
 80211e2:	4619      	mov	r1, r3
 80211e4:	6878      	ldr	r0, [r7, #4]
 80211e6:	f000 f8fd 	bl	80213e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80211ea:	e0df      	b.n	80213ac <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80211ec:	687b      	ldr	r3, [r7, #4]
 80211ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80211f2:	687b      	ldr	r3, [r7, #4]
 80211f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80211f8:	b29b      	uxth	r3, r3
 80211fa:	1ad3      	subs	r3, r2, r3
 80211fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8021200:	687b      	ldr	r3, [r7, #4]
 8021202:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8021206:	b29b      	uxth	r3, r3
 8021208:	2b00      	cmp	r3, #0
 802120a:	f000 80d1 	beq.w	80213b0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 802120e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8021212:	2b00      	cmp	r3, #0
 8021214:	f000 80cc 	beq.w	80213b0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8021218:	687b      	ldr	r3, [r7, #4]
 802121a:	681b      	ldr	r3, [r3, #0]
 802121c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802121e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021220:	e853 3f00 	ldrex	r3, [r3]
 8021224:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8021226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021228:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802122c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8021230:	687b      	ldr	r3, [r7, #4]
 8021232:	681b      	ldr	r3, [r3, #0]
 8021234:	461a      	mov	r2, r3
 8021236:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 802123a:	647b      	str	r3, [r7, #68]	; 0x44
 802123c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802123e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8021240:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8021242:	e841 2300 	strex	r3, r2, [r1]
 8021246:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8021248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802124a:	2b00      	cmp	r3, #0
 802124c:	d1e4      	bne.n	8021218 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 802124e:	687b      	ldr	r3, [r7, #4]
 8021250:	681b      	ldr	r3, [r3, #0]
 8021252:	3308      	adds	r3, #8
 8021254:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021258:	e853 3f00 	ldrex	r3, [r3]
 802125c:	623b      	str	r3, [r7, #32]
   return(result);
 802125e:	6a3b      	ldr	r3, [r7, #32]
 8021260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8021264:	f023 0301 	bic.w	r3, r3, #1
 8021268:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 802126c:	687b      	ldr	r3, [r7, #4]
 802126e:	681b      	ldr	r3, [r3, #0]
 8021270:	3308      	adds	r3, #8
 8021272:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8021276:	633a      	str	r2, [r7, #48]	; 0x30
 8021278:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802127a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802127c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802127e:	e841 2300 	strex	r3, r2, [r1]
 8021282:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8021284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021286:	2b00      	cmp	r3, #0
 8021288:	d1e1      	bne.n	802124e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 802128a:	687b      	ldr	r3, [r7, #4]
 802128c:	2220      	movs	r2, #32
 802128e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021292:	687b      	ldr	r3, [r7, #4]
 8021294:	2200      	movs	r2, #0
 8021296:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8021298:	687b      	ldr	r3, [r7, #4]
 802129a:	2200      	movs	r2, #0
 802129c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802129e:	687b      	ldr	r3, [r7, #4]
 80212a0:	681b      	ldr	r3, [r3, #0]
 80212a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80212a4:	693b      	ldr	r3, [r7, #16]
 80212a6:	e853 3f00 	ldrex	r3, [r3]
 80212aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80212ac:	68fb      	ldr	r3, [r7, #12]
 80212ae:	f023 0310 	bic.w	r3, r3, #16
 80212b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80212b6:	687b      	ldr	r3, [r7, #4]
 80212b8:	681b      	ldr	r3, [r3, #0]
 80212ba:	461a      	mov	r2, r3
 80212bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80212c0:	61fb      	str	r3, [r7, #28]
 80212c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80212c4:	69b9      	ldr	r1, [r7, #24]
 80212c6:	69fa      	ldr	r2, [r7, #28]
 80212c8:	e841 2300 	strex	r3, r2, [r1]
 80212cc:	617b      	str	r3, [r7, #20]
   return(result);
 80212ce:	697b      	ldr	r3, [r7, #20]
 80212d0:	2b00      	cmp	r3, #0
 80212d2:	d1e4      	bne.n	802129e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80212d4:	687b      	ldr	r3, [r7, #4]
 80212d6:	2202      	movs	r2, #2
 80212d8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80212da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80212de:	4619      	mov	r1, r3
 80212e0:	6878      	ldr	r0, [r7, #4]
 80212e2:	f000 f87f 	bl	80213e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80212e6:	e063      	b.n	80213b0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80212e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80212ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80212f0:	2b00      	cmp	r3, #0
 80212f2:	d00e      	beq.n	8021312 <HAL_UART_IRQHandler+0x59e>
 80212f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80212f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80212fc:	2b00      	cmp	r3, #0
 80212fe:	d008      	beq.n	8021312 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8021300:	687b      	ldr	r3, [r7, #4]
 8021302:	681b      	ldr	r3, [r3, #0]
 8021304:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8021308:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 802130a:	6878      	ldr	r0, [r7, #4]
 802130c:	f001 fc10 	bl	8022b30 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8021310:	e051      	b.n	80213b6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8021312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8021316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802131a:	2b00      	cmp	r3, #0
 802131c:	d014      	beq.n	8021348 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 802131e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8021322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021326:	2b00      	cmp	r3, #0
 8021328:	d105      	bne.n	8021336 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 802132a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802132e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8021332:	2b00      	cmp	r3, #0
 8021334:	d008      	beq.n	8021348 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8021336:	687b      	ldr	r3, [r7, #4]
 8021338:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802133a:	2b00      	cmp	r3, #0
 802133c:	d03a      	beq.n	80213b4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 802133e:	687b      	ldr	r3, [r7, #4]
 8021340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8021342:	6878      	ldr	r0, [r7, #4]
 8021344:	4798      	blx	r3
    }
    return;
 8021346:	e035      	b.n	80213b4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8021348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802134c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021350:	2b00      	cmp	r3, #0
 8021352:	d009      	beq.n	8021368 <HAL_UART_IRQHandler+0x5f4>
 8021354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8021358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802135c:	2b00      	cmp	r3, #0
 802135e:	d003      	beq.n	8021368 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8021360:	6878      	ldr	r0, [r7, #4]
 8021362:	f000 fe9d 	bl	80220a0 <UART_EndTransmit_IT>
    return;
 8021366:	e026      	b.n	80213b6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8021368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802136c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8021370:	2b00      	cmp	r3, #0
 8021372:	d009      	beq.n	8021388 <HAL_UART_IRQHandler+0x614>
 8021374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8021378:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 802137c:	2b00      	cmp	r3, #0
 802137e:	d003      	beq.n	8021388 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8021380:	6878      	ldr	r0, [r7, #4]
 8021382:	f001 fbe9 	bl	8022b58 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8021386:	e016      	b.n	80213b6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8021388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802138c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8021390:	2b00      	cmp	r3, #0
 8021392:	d010      	beq.n	80213b6 <HAL_UART_IRQHandler+0x642>
 8021394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8021398:	2b00      	cmp	r3, #0
 802139a:	da0c      	bge.n	80213b6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 802139c:	6878      	ldr	r0, [r7, #4]
 802139e:	f001 fbd1 	bl	8022b44 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80213a2:	e008      	b.n	80213b6 <HAL_UART_IRQHandler+0x642>
      return;
 80213a4:	bf00      	nop
 80213a6:	e006      	b.n	80213b6 <HAL_UART_IRQHandler+0x642>
    return;
 80213a8:	bf00      	nop
 80213aa:	e004      	b.n	80213b6 <HAL_UART_IRQHandler+0x642>
      return;
 80213ac:	bf00      	nop
 80213ae:	e002      	b.n	80213b6 <HAL_UART_IRQHandler+0x642>
      return;
 80213b0:	bf00      	nop
 80213b2:	e000      	b.n	80213b6 <HAL_UART_IRQHandler+0x642>
    return;
 80213b4:	bf00      	nop
  }
}
 80213b6:	37e8      	adds	r7, #232	; 0xe8
 80213b8:	46bd      	mov	sp, r7
 80213ba:	bd80      	pop	{r7, pc}

080213bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80213bc:	b480      	push	{r7}
 80213be:	b083      	sub	sp, #12
 80213c0:	af00      	add	r7, sp, #0
 80213c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80213c4:	bf00      	nop
 80213c6:	370c      	adds	r7, #12
 80213c8:	46bd      	mov	sp, r7
 80213ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213ce:	4770      	bx	lr

080213d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80213d0:	b480      	push	{r7}
 80213d2:	b083      	sub	sp, #12
 80213d4:	af00      	add	r7, sp, #0
 80213d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80213d8:	bf00      	nop
 80213da:	370c      	adds	r7, #12
 80213dc:	46bd      	mov	sp, r7
 80213de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213e2:	4770      	bx	lr

080213e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80213e4:	b480      	push	{r7}
 80213e6:	b083      	sub	sp, #12
 80213e8:	af00      	add	r7, sp, #0
 80213ea:	6078      	str	r0, [r7, #4]
 80213ec:	460b      	mov	r3, r1
 80213ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80213f0:	bf00      	nop
 80213f2:	370c      	adds	r7, #12
 80213f4:	46bd      	mov	sp, r7
 80213f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213fa:	4770      	bx	lr

080213fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80213fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8021400:	b08c      	sub	sp, #48	; 0x30
 8021402:	af00      	add	r7, sp, #0
 8021404:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8021406:	2300      	movs	r3, #0
 8021408:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 802140c:	697b      	ldr	r3, [r7, #20]
 802140e:	689a      	ldr	r2, [r3, #8]
 8021410:	697b      	ldr	r3, [r7, #20]
 8021412:	691b      	ldr	r3, [r3, #16]
 8021414:	431a      	orrs	r2, r3
 8021416:	697b      	ldr	r3, [r7, #20]
 8021418:	695b      	ldr	r3, [r3, #20]
 802141a:	431a      	orrs	r2, r3
 802141c:	697b      	ldr	r3, [r7, #20]
 802141e:	69db      	ldr	r3, [r3, #28]
 8021420:	4313      	orrs	r3, r2
 8021422:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8021424:	697b      	ldr	r3, [r7, #20]
 8021426:	681b      	ldr	r3, [r3, #0]
 8021428:	681a      	ldr	r2, [r3, #0]
 802142a:	4baa      	ldr	r3, [pc, #680]	; (80216d4 <UART_SetConfig+0x2d8>)
 802142c:	4013      	ands	r3, r2
 802142e:	697a      	ldr	r2, [r7, #20]
 8021430:	6812      	ldr	r2, [r2, #0]
 8021432:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8021434:	430b      	orrs	r3, r1
 8021436:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8021438:	697b      	ldr	r3, [r7, #20]
 802143a:	681b      	ldr	r3, [r3, #0]
 802143c:	685b      	ldr	r3, [r3, #4]
 802143e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8021442:	697b      	ldr	r3, [r7, #20]
 8021444:	68da      	ldr	r2, [r3, #12]
 8021446:	697b      	ldr	r3, [r7, #20]
 8021448:	681b      	ldr	r3, [r3, #0]
 802144a:	430a      	orrs	r2, r1
 802144c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 802144e:	697b      	ldr	r3, [r7, #20]
 8021450:	699b      	ldr	r3, [r3, #24]
 8021452:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8021454:	697b      	ldr	r3, [r7, #20]
 8021456:	681b      	ldr	r3, [r3, #0]
 8021458:	4a9f      	ldr	r2, [pc, #636]	; (80216d8 <UART_SetConfig+0x2dc>)
 802145a:	4293      	cmp	r3, r2
 802145c:	d004      	beq.n	8021468 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 802145e:	697b      	ldr	r3, [r7, #20]
 8021460:	6a1b      	ldr	r3, [r3, #32]
 8021462:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021464:	4313      	orrs	r3, r2
 8021466:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8021468:	697b      	ldr	r3, [r7, #20]
 802146a:	681b      	ldr	r3, [r3, #0]
 802146c:	689b      	ldr	r3, [r3, #8]
 802146e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8021472:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8021476:	697a      	ldr	r2, [r7, #20]
 8021478:	6812      	ldr	r2, [r2, #0]
 802147a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802147c:	430b      	orrs	r3, r1
 802147e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8021480:	697b      	ldr	r3, [r7, #20]
 8021482:	681b      	ldr	r3, [r3, #0]
 8021484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021486:	f023 010f 	bic.w	r1, r3, #15
 802148a:	697b      	ldr	r3, [r7, #20]
 802148c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802148e:	697b      	ldr	r3, [r7, #20]
 8021490:	681b      	ldr	r3, [r3, #0]
 8021492:	430a      	orrs	r2, r1
 8021494:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8021496:	697b      	ldr	r3, [r7, #20]
 8021498:	681b      	ldr	r3, [r3, #0]
 802149a:	4a90      	ldr	r2, [pc, #576]	; (80216dc <UART_SetConfig+0x2e0>)
 802149c:	4293      	cmp	r3, r2
 802149e:	d125      	bne.n	80214ec <UART_SetConfig+0xf0>
 80214a0:	4b8f      	ldr	r3, [pc, #572]	; (80216e0 <UART_SetConfig+0x2e4>)
 80214a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80214a6:	f003 0303 	and.w	r3, r3, #3
 80214aa:	2b03      	cmp	r3, #3
 80214ac:	d81a      	bhi.n	80214e4 <UART_SetConfig+0xe8>
 80214ae:	a201      	add	r2, pc, #4	; (adr r2, 80214b4 <UART_SetConfig+0xb8>)
 80214b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80214b4:	080214c5 	.word	0x080214c5
 80214b8:	080214d5 	.word	0x080214d5
 80214bc:	080214cd 	.word	0x080214cd
 80214c0:	080214dd 	.word	0x080214dd
 80214c4:	2301      	movs	r3, #1
 80214c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80214ca:	e116      	b.n	80216fa <UART_SetConfig+0x2fe>
 80214cc:	2302      	movs	r3, #2
 80214ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80214d2:	e112      	b.n	80216fa <UART_SetConfig+0x2fe>
 80214d4:	2304      	movs	r3, #4
 80214d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80214da:	e10e      	b.n	80216fa <UART_SetConfig+0x2fe>
 80214dc:	2308      	movs	r3, #8
 80214de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80214e2:	e10a      	b.n	80216fa <UART_SetConfig+0x2fe>
 80214e4:	2310      	movs	r3, #16
 80214e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80214ea:	e106      	b.n	80216fa <UART_SetConfig+0x2fe>
 80214ec:	697b      	ldr	r3, [r7, #20]
 80214ee:	681b      	ldr	r3, [r3, #0]
 80214f0:	4a7c      	ldr	r2, [pc, #496]	; (80216e4 <UART_SetConfig+0x2e8>)
 80214f2:	4293      	cmp	r3, r2
 80214f4:	d138      	bne.n	8021568 <UART_SetConfig+0x16c>
 80214f6:	4b7a      	ldr	r3, [pc, #488]	; (80216e0 <UART_SetConfig+0x2e4>)
 80214f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80214fc:	f003 030c 	and.w	r3, r3, #12
 8021500:	2b0c      	cmp	r3, #12
 8021502:	d82d      	bhi.n	8021560 <UART_SetConfig+0x164>
 8021504:	a201      	add	r2, pc, #4	; (adr r2, 802150c <UART_SetConfig+0x110>)
 8021506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802150a:	bf00      	nop
 802150c:	08021541 	.word	0x08021541
 8021510:	08021561 	.word	0x08021561
 8021514:	08021561 	.word	0x08021561
 8021518:	08021561 	.word	0x08021561
 802151c:	08021551 	.word	0x08021551
 8021520:	08021561 	.word	0x08021561
 8021524:	08021561 	.word	0x08021561
 8021528:	08021561 	.word	0x08021561
 802152c:	08021549 	.word	0x08021549
 8021530:	08021561 	.word	0x08021561
 8021534:	08021561 	.word	0x08021561
 8021538:	08021561 	.word	0x08021561
 802153c:	08021559 	.word	0x08021559
 8021540:	2300      	movs	r3, #0
 8021542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8021546:	e0d8      	b.n	80216fa <UART_SetConfig+0x2fe>
 8021548:	2302      	movs	r3, #2
 802154a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802154e:	e0d4      	b.n	80216fa <UART_SetConfig+0x2fe>
 8021550:	2304      	movs	r3, #4
 8021552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8021556:	e0d0      	b.n	80216fa <UART_SetConfig+0x2fe>
 8021558:	2308      	movs	r3, #8
 802155a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802155e:	e0cc      	b.n	80216fa <UART_SetConfig+0x2fe>
 8021560:	2310      	movs	r3, #16
 8021562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8021566:	e0c8      	b.n	80216fa <UART_SetConfig+0x2fe>
 8021568:	697b      	ldr	r3, [r7, #20]
 802156a:	681b      	ldr	r3, [r3, #0]
 802156c:	4a5e      	ldr	r2, [pc, #376]	; (80216e8 <UART_SetConfig+0x2ec>)
 802156e:	4293      	cmp	r3, r2
 8021570:	d125      	bne.n	80215be <UART_SetConfig+0x1c2>
 8021572:	4b5b      	ldr	r3, [pc, #364]	; (80216e0 <UART_SetConfig+0x2e4>)
 8021574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8021578:	f003 0330 	and.w	r3, r3, #48	; 0x30
 802157c:	2b30      	cmp	r3, #48	; 0x30
 802157e:	d016      	beq.n	80215ae <UART_SetConfig+0x1b2>
 8021580:	2b30      	cmp	r3, #48	; 0x30
 8021582:	d818      	bhi.n	80215b6 <UART_SetConfig+0x1ba>
 8021584:	2b20      	cmp	r3, #32
 8021586:	d00a      	beq.n	802159e <UART_SetConfig+0x1a2>
 8021588:	2b20      	cmp	r3, #32
 802158a:	d814      	bhi.n	80215b6 <UART_SetConfig+0x1ba>
 802158c:	2b00      	cmp	r3, #0
 802158e:	d002      	beq.n	8021596 <UART_SetConfig+0x19a>
 8021590:	2b10      	cmp	r3, #16
 8021592:	d008      	beq.n	80215a6 <UART_SetConfig+0x1aa>
 8021594:	e00f      	b.n	80215b6 <UART_SetConfig+0x1ba>
 8021596:	2300      	movs	r3, #0
 8021598:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802159c:	e0ad      	b.n	80216fa <UART_SetConfig+0x2fe>
 802159e:	2302      	movs	r3, #2
 80215a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80215a4:	e0a9      	b.n	80216fa <UART_SetConfig+0x2fe>
 80215a6:	2304      	movs	r3, #4
 80215a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80215ac:	e0a5      	b.n	80216fa <UART_SetConfig+0x2fe>
 80215ae:	2308      	movs	r3, #8
 80215b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80215b4:	e0a1      	b.n	80216fa <UART_SetConfig+0x2fe>
 80215b6:	2310      	movs	r3, #16
 80215b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80215bc:	e09d      	b.n	80216fa <UART_SetConfig+0x2fe>
 80215be:	697b      	ldr	r3, [r7, #20]
 80215c0:	681b      	ldr	r3, [r3, #0]
 80215c2:	4a4a      	ldr	r2, [pc, #296]	; (80216ec <UART_SetConfig+0x2f0>)
 80215c4:	4293      	cmp	r3, r2
 80215c6:	d125      	bne.n	8021614 <UART_SetConfig+0x218>
 80215c8:	4b45      	ldr	r3, [pc, #276]	; (80216e0 <UART_SetConfig+0x2e4>)
 80215ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80215ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80215d2:	2bc0      	cmp	r3, #192	; 0xc0
 80215d4:	d016      	beq.n	8021604 <UART_SetConfig+0x208>
 80215d6:	2bc0      	cmp	r3, #192	; 0xc0
 80215d8:	d818      	bhi.n	802160c <UART_SetConfig+0x210>
 80215da:	2b80      	cmp	r3, #128	; 0x80
 80215dc:	d00a      	beq.n	80215f4 <UART_SetConfig+0x1f8>
 80215de:	2b80      	cmp	r3, #128	; 0x80
 80215e0:	d814      	bhi.n	802160c <UART_SetConfig+0x210>
 80215e2:	2b00      	cmp	r3, #0
 80215e4:	d002      	beq.n	80215ec <UART_SetConfig+0x1f0>
 80215e6:	2b40      	cmp	r3, #64	; 0x40
 80215e8:	d008      	beq.n	80215fc <UART_SetConfig+0x200>
 80215ea:	e00f      	b.n	802160c <UART_SetConfig+0x210>
 80215ec:	2300      	movs	r3, #0
 80215ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80215f2:	e082      	b.n	80216fa <UART_SetConfig+0x2fe>
 80215f4:	2302      	movs	r3, #2
 80215f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80215fa:	e07e      	b.n	80216fa <UART_SetConfig+0x2fe>
 80215fc:	2304      	movs	r3, #4
 80215fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8021602:	e07a      	b.n	80216fa <UART_SetConfig+0x2fe>
 8021604:	2308      	movs	r3, #8
 8021606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802160a:	e076      	b.n	80216fa <UART_SetConfig+0x2fe>
 802160c:	2310      	movs	r3, #16
 802160e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8021612:	e072      	b.n	80216fa <UART_SetConfig+0x2fe>
 8021614:	697b      	ldr	r3, [r7, #20]
 8021616:	681b      	ldr	r3, [r3, #0]
 8021618:	4a35      	ldr	r2, [pc, #212]	; (80216f0 <UART_SetConfig+0x2f4>)
 802161a:	4293      	cmp	r3, r2
 802161c:	d12a      	bne.n	8021674 <UART_SetConfig+0x278>
 802161e:	4b30      	ldr	r3, [pc, #192]	; (80216e0 <UART_SetConfig+0x2e4>)
 8021620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8021624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8021628:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802162c:	d01a      	beq.n	8021664 <UART_SetConfig+0x268>
 802162e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8021632:	d81b      	bhi.n	802166c <UART_SetConfig+0x270>
 8021634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021638:	d00c      	beq.n	8021654 <UART_SetConfig+0x258>
 802163a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802163e:	d815      	bhi.n	802166c <UART_SetConfig+0x270>
 8021640:	2b00      	cmp	r3, #0
 8021642:	d003      	beq.n	802164c <UART_SetConfig+0x250>
 8021644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8021648:	d008      	beq.n	802165c <UART_SetConfig+0x260>
 802164a:	e00f      	b.n	802166c <UART_SetConfig+0x270>
 802164c:	2300      	movs	r3, #0
 802164e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8021652:	e052      	b.n	80216fa <UART_SetConfig+0x2fe>
 8021654:	2302      	movs	r3, #2
 8021656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802165a:	e04e      	b.n	80216fa <UART_SetConfig+0x2fe>
 802165c:	2304      	movs	r3, #4
 802165e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8021662:	e04a      	b.n	80216fa <UART_SetConfig+0x2fe>
 8021664:	2308      	movs	r3, #8
 8021666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802166a:	e046      	b.n	80216fa <UART_SetConfig+0x2fe>
 802166c:	2310      	movs	r3, #16
 802166e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8021672:	e042      	b.n	80216fa <UART_SetConfig+0x2fe>
 8021674:	697b      	ldr	r3, [r7, #20]
 8021676:	681b      	ldr	r3, [r3, #0]
 8021678:	4a17      	ldr	r2, [pc, #92]	; (80216d8 <UART_SetConfig+0x2dc>)
 802167a:	4293      	cmp	r3, r2
 802167c:	d13a      	bne.n	80216f4 <UART_SetConfig+0x2f8>
 802167e:	4b18      	ldr	r3, [pc, #96]	; (80216e0 <UART_SetConfig+0x2e4>)
 8021680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8021684:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8021688:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 802168c:	d01a      	beq.n	80216c4 <UART_SetConfig+0x2c8>
 802168e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8021692:	d81b      	bhi.n	80216cc <UART_SetConfig+0x2d0>
 8021694:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8021698:	d00c      	beq.n	80216b4 <UART_SetConfig+0x2b8>
 802169a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802169e:	d815      	bhi.n	80216cc <UART_SetConfig+0x2d0>
 80216a0:	2b00      	cmp	r3, #0
 80216a2:	d003      	beq.n	80216ac <UART_SetConfig+0x2b0>
 80216a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80216a8:	d008      	beq.n	80216bc <UART_SetConfig+0x2c0>
 80216aa:	e00f      	b.n	80216cc <UART_SetConfig+0x2d0>
 80216ac:	2300      	movs	r3, #0
 80216ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80216b2:	e022      	b.n	80216fa <UART_SetConfig+0x2fe>
 80216b4:	2302      	movs	r3, #2
 80216b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80216ba:	e01e      	b.n	80216fa <UART_SetConfig+0x2fe>
 80216bc:	2304      	movs	r3, #4
 80216be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80216c2:	e01a      	b.n	80216fa <UART_SetConfig+0x2fe>
 80216c4:	2308      	movs	r3, #8
 80216c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80216ca:	e016      	b.n	80216fa <UART_SetConfig+0x2fe>
 80216cc:	2310      	movs	r3, #16
 80216ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80216d2:	e012      	b.n	80216fa <UART_SetConfig+0x2fe>
 80216d4:	cfff69f3 	.word	0xcfff69f3
 80216d8:	40008000 	.word	0x40008000
 80216dc:	40013800 	.word	0x40013800
 80216e0:	40021000 	.word	0x40021000
 80216e4:	40004400 	.word	0x40004400
 80216e8:	40004800 	.word	0x40004800
 80216ec:	40004c00 	.word	0x40004c00
 80216f0:	40005000 	.word	0x40005000
 80216f4:	2310      	movs	r3, #16
 80216f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80216fa:	697b      	ldr	r3, [r7, #20]
 80216fc:	681b      	ldr	r3, [r3, #0]
 80216fe:	4ab0      	ldr	r2, [pc, #704]	; (80219c0 <UART_SetConfig+0x5c4>)
 8021700:	4293      	cmp	r3, r2
 8021702:	f040 809b 	bne.w	802183c <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8021706:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 802170a:	2b08      	cmp	r3, #8
 802170c:	d827      	bhi.n	802175e <UART_SetConfig+0x362>
 802170e:	a201      	add	r2, pc, #4	; (adr r2, 8021714 <UART_SetConfig+0x318>)
 8021710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021714:	08021739 	.word	0x08021739
 8021718:	08021741 	.word	0x08021741
 802171c:	08021749 	.word	0x08021749
 8021720:	0802175f 	.word	0x0802175f
 8021724:	0802174f 	.word	0x0802174f
 8021728:	0802175f 	.word	0x0802175f
 802172c:	0802175f 	.word	0x0802175f
 8021730:	0802175f 	.word	0x0802175f
 8021734:	08021757 	.word	0x08021757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8021738:	f7fb fb60 	bl	801cdfc <HAL_RCC_GetPCLK1Freq>
 802173c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 802173e:	e014      	b.n	802176a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8021740:	f7fb fb70 	bl	801ce24 <HAL_RCC_GetPCLK2Freq>
 8021744:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8021746:	e010      	b.n	802176a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8021748:	4b9e      	ldr	r3, [pc, #632]	; (80219c4 <UART_SetConfig+0x5c8>)
 802174a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 802174c:	e00d      	b.n	802176a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 802174e:	f7fb faa3 	bl	801cc98 <HAL_RCC_GetSysClockFreq>
 8021752:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8021754:	e009      	b.n	802176a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8021756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802175a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 802175c:	e005      	b.n	802176a <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 802175e:	2300      	movs	r3, #0
 8021760:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8021762:	2301      	movs	r3, #1
 8021764:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8021768:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 802176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802176c:	2b00      	cmp	r3, #0
 802176e:	f000 8130 	beq.w	80219d2 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8021772:	697b      	ldr	r3, [r7, #20]
 8021774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021776:	4a94      	ldr	r2, [pc, #592]	; (80219c8 <UART_SetConfig+0x5cc>)
 8021778:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802177c:	461a      	mov	r2, r3
 802177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021780:	fbb3 f3f2 	udiv	r3, r3, r2
 8021784:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8021786:	697b      	ldr	r3, [r7, #20]
 8021788:	685a      	ldr	r2, [r3, #4]
 802178a:	4613      	mov	r3, r2
 802178c:	005b      	lsls	r3, r3, #1
 802178e:	4413      	add	r3, r2
 8021790:	69ba      	ldr	r2, [r7, #24]
 8021792:	429a      	cmp	r2, r3
 8021794:	d305      	bcc.n	80217a2 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8021796:	697b      	ldr	r3, [r7, #20]
 8021798:	685b      	ldr	r3, [r3, #4]
 802179a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 802179c:	69ba      	ldr	r2, [r7, #24]
 802179e:	429a      	cmp	r2, r3
 80217a0:	d903      	bls.n	80217aa <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 80217a2:	2301      	movs	r3, #1
 80217a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80217a8:	e113      	b.n	80219d2 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80217aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80217ac:	2200      	movs	r2, #0
 80217ae:	60bb      	str	r3, [r7, #8]
 80217b0:	60fa      	str	r2, [r7, #12]
 80217b2:	697b      	ldr	r3, [r7, #20]
 80217b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80217b6:	4a84      	ldr	r2, [pc, #528]	; (80219c8 <UART_SetConfig+0x5cc>)
 80217b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80217bc:	b29b      	uxth	r3, r3
 80217be:	2200      	movs	r2, #0
 80217c0:	603b      	str	r3, [r7, #0]
 80217c2:	607a      	str	r2, [r7, #4]
 80217c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80217c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80217cc:	f7df fa4e 	bl	8000c6c <__aeabi_uldivmod>
 80217d0:	4602      	mov	r2, r0
 80217d2:	460b      	mov	r3, r1
 80217d4:	4610      	mov	r0, r2
 80217d6:	4619      	mov	r1, r3
 80217d8:	f04f 0200 	mov.w	r2, #0
 80217dc:	f04f 0300 	mov.w	r3, #0
 80217e0:	020b      	lsls	r3, r1, #8
 80217e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80217e6:	0202      	lsls	r2, r0, #8
 80217e8:	6979      	ldr	r1, [r7, #20]
 80217ea:	6849      	ldr	r1, [r1, #4]
 80217ec:	0849      	lsrs	r1, r1, #1
 80217ee:	2000      	movs	r0, #0
 80217f0:	460c      	mov	r4, r1
 80217f2:	4605      	mov	r5, r0
 80217f4:	eb12 0804 	adds.w	r8, r2, r4
 80217f8:	eb43 0905 	adc.w	r9, r3, r5
 80217fc:	697b      	ldr	r3, [r7, #20]
 80217fe:	685b      	ldr	r3, [r3, #4]
 8021800:	2200      	movs	r2, #0
 8021802:	469a      	mov	sl, r3
 8021804:	4693      	mov	fp, r2
 8021806:	4652      	mov	r2, sl
 8021808:	465b      	mov	r3, fp
 802180a:	4640      	mov	r0, r8
 802180c:	4649      	mov	r1, r9
 802180e:	f7df fa2d 	bl	8000c6c <__aeabi_uldivmod>
 8021812:	4602      	mov	r2, r0
 8021814:	460b      	mov	r3, r1
 8021816:	4613      	mov	r3, r2
 8021818:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 802181a:	6a3b      	ldr	r3, [r7, #32]
 802181c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8021820:	d308      	bcc.n	8021834 <UART_SetConfig+0x438>
 8021822:	6a3b      	ldr	r3, [r7, #32]
 8021824:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8021828:	d204      	bcs.n	8021834 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 802182a:	697b      	ldr	r3, [r7, #20]
 802182c:	681b      	ldr	r3, [r3, #0]
 802182e:	6a3a      	ldr	r2, [r7, #32]
 8021830:	60da      	str	r2, [r3, #12]
 8021832:	e0ce      	b.n	80219d2 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8021834:	2301      	movs	r3, #1
 8021836:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 802183a:	e0ca      	b.n	80219d2 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802183c:	697b      	ldr	r3, [r7, #20]
 802183e:	69db      	ldr	r3, [r3, #28]
 8021840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8021844:	d166      	bne.n	8021914 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8021846:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 802184a:	2b08      	cmp	r3, #8
 802184c:	d827      	bhi.n	802189e <UART_SetConfig+0x4a2>
 802184e:	a201      	add	r2, pc, #4	; (adr r2, 8021854 <UART_SetConfig+0x458>)
 8021850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021854:	08021879 	.word	0x08021879
 8021858:	08021881 	.word	0x08021881
 802185c:	08021889 	.word	0x08021889
 8021860:	0802189f 	.word	0x0802189f
 8021864:	0802188f 	.word	0x0802188f
 8021868:	0802189f 	.word	0x0802189f
 802186c:	0802189f 	.word	0x0802189f
 8021870:	0802189f 	.word	0x0802189f
 8021874:	08021897 	.word	0x08021897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8021878:	f7fb fac0 	bl	801cdfc <HAL_RCC_GetPCLK1Freq>
 802187c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 802187e:	e014      	b.n	80218aa <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8021880:	f7fb fad0 	bl	801ce24 <HAL_RCC_GetPCLK2Freq>
 8021884:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8021886:	e010      	b.n	80218aa <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8021888:	4b4e      	ldr	r3, [pc, #312]	; (80219c4 <UART_SetConfig+0x5c8>)
 802188a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 802188c:	e00d      	b.n	80218aa <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 802188e:	f7fb fa03 	bl	801cc98 <HAL_RCC_GetSysClockFreq>
 8021892:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8021894:	e009      	b.n	80218aa <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8021896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802189a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 802189c:	e005      	b.n	80218aa <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 802189e:	2300      	movs	r3, #0
 80218a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80218a2:	2301      	movs	r3, #1
 80218a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80218a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80218aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218ac:	2b00      	cmp	r3, #0
 80218ae:	f000 8090 	beq.w	80219d2 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80218b2:	697b      	ldr	r3, [r7, #20]
 80218b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80218b6:	4a44      	ldr	r2, [pc, #272]	; (80219c8 <UART_SetConfig+0x5cc>)
 80218b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80218bc:	461a      	mov	r2, r3
 80218be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80218c4:	005a      	lsls	r2, r3, #1
 80218c6:	697b      	ldr	r3, [r7, #20]
 80218c8:	685b      	ldr	r3, [r3, #4]
 80218ca:	085b      	lsrs	r3, r3, #1
 80218cc:	441a      	add	r2, r3
 80218ce:	697b      	ldr	r3, [r7, #20]
 80218d0:	685b      	ldr	r3, [r3, #4]
 80218d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80218d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80218d8:	6a3b      	ldr	r3, [r7, #32]
 80218da:	2b0f      	cmp	r3, #15
 80218dc:	d916      	bls.n	802190c <UART_SetConfig+0x510>
 80218de:	6a3b      	ldr	r3, [r7, #32]
 80218e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80218e4:	d212      	bcs.n	802190c <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80218e6:	6a3b      	ldr	r3, [r7, #32]
 80218e8:	b29b      	uxth	r3, r3
 80218ea:	f023 030f 	bic.w	r3, r3, #15
 80218ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80218f0:	6a3b      	ldr	r3, [r7, #32]
 80218f2:	085b      	lsrs	r3, r3, #1
 80218f4:	b29b      	uxth	r3, r3
 80218f6:	f003 0307 	and.w	r3, r3, #7
 80218fa:	b29a      	uxth	r2, r3
 80218fc:	8bfb      	ldrh	r3, [r7, #30]
 80218fe:	4313      	orrs	r3, r2
 8021900:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8021902:	697b      	ldr	r3, [r7, #20]
 8021904:	681b      	ldr	r3, [r3, #0]
 8021906:	8bfa      	ldrh	r2, [r7, #30]
 8021908:	60da      	str	r2, [r3, #12]
 802190a:	e062      	b.n	80219d2 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 802190c:	2301      	movs	r3, #1
 802190e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8021912:	e05e      	b.n	80219d2 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8021914:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8021918:	2b08      	cmp	r3, #8
 802191a:	d828      	bhi.n	802196e <UART_SetConfig+0x572>
 802191c:	a201      	add	r2, pc, #4	; (adr r2, 8021924 <UART_SetConfig+0x528>)
 802191e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021922:	bf00      	nop
 8021924:	08021949 	.word	0x08021949
 8021928:	08021951 	.word	0x08021951
 802192c:	08021959 	.word	0x08021959
 8021930:	0802196f 	.word	0x0802196f
 8021934:	0802195f 	.word	0x0802195f
 8021938:	0802196f 	.word	0x0802196f
 802193c:	0802196f 	.word	0x0802196f
 8021940:	0802196f 	.word	0x0802196f
 8021944:	08021967 	.word	0x08021967
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8021948:	f7fb fa58 	bl	801cdfc <HAL_RCC_GetPCLK1Freq>
 802194c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 802194e:	e014      	b.n	802197a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8021950:	f7fb fa68 	bl	801ce24 <HAL_RCC_GetPCLK2Freq>
 8021954:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8021956:	e010      	b.n	802197a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8021958:	4b1a      	ldr	r3, [pc, #104]	; (80219c4 <UART_SetConfig+0x5c8>)
 802195a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 802195c:	e00d      	b.n	802197a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 802195e:	f7fb f99b 	bl	801cc98 <HAL_RCC_GetSysClockFreq>
 8021962:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8021964:	e009      	b.n	802197a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8021966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802196a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 802196c:	e005      	b.n	802197a <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 802196e:	2300      	movs	r3, #0
 8021970:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8021972:	2301      	movs	r3, #1
 8021974:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8021978:	bf00      	nop
    }

    if (pclk != 0U)
 802197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802197c:	2b00      	cmp	r3, #0
 802197e:	d028      	beq.n	80219d2 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8021980:	697b      	ldr	r3, [r7, #20]
 8021982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021984:	4a10      	ldr	r2, [pc, #64]	; (80219c8 <UART_SetConfig+0x5cc>)
 8021986:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802198a:	461a      	mov	r2, r3
 802198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802198e:	fbb3 f2f2 	udiv	r2, r3, r2
 8021992:	697b      	ldr	r3, [r7, #20]
 8021994:	685b      	ldr	r3, [r3, #4]
 8021996:	085b      	lsrs	r3, r3, #1
 8021998:	441a      	add	r2, r3
 802199a:	697b      	ldr	r3, [r7, #20]
 802199c:	685b      	ldr	r3, [r3, #4]
 802199e:	fbb2 f3f3 	udiv	r3, r2, r3
 80219a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80219a4:	6a3b      	ldr	r3, [r7, #32]
 80219a6:	2b0f      	cmp	r3, #15
 80219a8:	d910      	bls.n	80219cc <UART_SetConfig+0x5d0>
 80219aa:	6a3b      	ldr	r3, [r7, #32]
 80219ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80219b0:	d20c      	bcs.n	80219cc <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80219b2:	6a3b      	ldr	r3, [r7, #32]
 80219b4:	b29a      	uxth	r2, r3
 80219b6:	697b      	ldr	r3, [r7, #20]
 80219b8:	681b      	ldr	r3, [r3, #0]
 80219ba:	60da      	str	r2, [r3, #12]
 80219bc:	e009      	b.n	80219d2 <UART_SetConfig+0x5d6>
 80219be:	bf00      	nop
 80219c0:	40008000 	.word	0x40008000
 80219c4:	00f42400 	.word	0x00f42400
 80219c8:	08029908 	.word	0x08029908
      }
      else
      {
        ret = HAL_ERROR;
 80219cc:	2301      	movs	r3, #1
 80219ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80219d2:	697b      	ldr	r3, [r7, #20]
 80219d4:	2201      	movs	r2, #1
 80219d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80219da:	697b      	ldr	r3, [r7, #20]
 80219dc:	2201      	movs	r2, #1
 80219de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80219e2:	697b      	ldr	r3, [r7, #20]
 80219e4:	2200      	movs	r2, #0
 80219e6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80219e8:	697b      	ldr	r3, [r7, #20]
 80219ea:	2200      	movs	r2, #0
 80219ec:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80219ee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80219f2:	4618      	mov	r0, r3
 80219f4:	3730      	adds	r7, #48	; 0x30
 80219f6:	46bd      	mov	sp, r7
 80219f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080219fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80219fc:	b480      	push	{r7}
 80219fe:	b083      	sub	sp, #12
 8021a00:	af00      	add	r7, sp, #0
 8021a02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8021a04:	687b      	ldr	r3, [r7, #4]
 8021a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021a08:	f003 0301 	and.w	r3, r3, #1
 8021a0c:	2b00      	cmp	r3, #0
 8021a0e:	d00a      	beq.n	8021a26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8021a10:	687b      	ldr	r3, [r7, #4]
 8021a12:	681b      	ldr	r3, [r3, #0]
 8021a14:	685b      	ldr	r3, [r3, #4]
 8021a16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8021a1a:	687b      	ldr	r3, [r7, #4]
 8021a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021a1e:	687b      	ldr	r3, [r7, #4]
 8021a20:	681b      	ldr	r3, [r3, #0]
 8021a22:	430a      	orrs	r2, r1
 8021a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8021a26:	687b      	ldr	r3, [r7, #4]
 8021a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021a2a:	f003 0302 	and.w	r3, r3, #2
 8021a2e:	2b00      	cmp	r3, #0
 8021a30:	d00a      	beq.n	8021a48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8021a32:	687b      	ldr	r3, [r7, #4]
 8021a34:	681b      	ldr	r3, [r3, #0]
 8021a36:	685b      	ldr	r3, [r3, #4]
 8021a38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8021a3c:	687b      	ldr	r3, [r7, #4]
 8021a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8021a40:	687b      	ldr	r3, [r7, #4]
 8021a42:	681b      	ldr	r3, [r3, #0]
 8021a44:	430a      	orrs	r2, r1
 8021a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8021a48:	687b      	ldr	r3, [r7, #4]
 8021a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021a4c:	f003 0304 	and.w	r3, r3, #4
 8021a50:	2b00      	cmp	r3, #0
 8021a52:	d00a      	beq.n	8021a6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8021a54:	687b      	ldr	r3, [r7, #4]
 8021a56:	681b      	ldr	r3, [r3, #0]
 8021a58:	685b      	ldr	r3, [r3, #4]
 8021a5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8021a5e:	687b      	ldr	r3, [r7, #4]
 8021a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8021a62:	687b      	ldr	r3, [r7, #4]
 8021a64:	681b      	ldr	r3, [r3, #0]
 8021a66:	430a      	orrs	r2, r1
 8021a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8021a6a:	687b      	ldr	r3, [r7, #4]
 8021a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021a6e:	f003 0308 	and.w	r3, r3, #8
 8021a72:	2b00      	cmp	r3, #0
 8021a74:	d00a      	beq.n	8021a8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8021a76:	687b      	ldr	r3, [r7, #4]
 8021a78:	681b      	ldr	r3, [r3, #0]
 8021a7a:	685b      	ldr	r3, [r3, #4]
 8021a7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8021a80:	687b      	ldr	r3, [r7, #4]
 8021a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8021a84:	687b      	ldr	r3, [r7, #4]
 8021a86:	681b      	ldr	r3, [r3, #0]
 8021a88:	430a      	orrs	r2, r1
 8021a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8021a8c:	687b      	ldr	r3, [r7, #4]
 8021a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021a90:	f003 0310 	and.w	r3, r3, #16
 8021a94:	2b00      	cmp	r3, #0
 8021a96:	d00a      	beq.n	8021aae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8021a98:	687b      	ldr	r3, [r7, #4]
 8021a9a:	681b      	ldr	r3, [r3, #0]
 8021a9c:	689b      	ldr	r3, [r3, #8]
 8021a9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8021aa2:	687b      	ldr	r3, [r7, #4]
 8021aa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8021aa6:	687b      	ldr	r3, [r7, #4]
 8021aa8:	681b      	ldr	r3, [r3, #0]
 8021aaa:	430a      	orrs	r2, r1
 8021aac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8021aae:	687b      	ldr	r3, [r7, #4]
 8021ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021ab2:	f003 0320 	and.w	r3, r3, #32
 8021ab6:	2b00      	cmp	r3, #0
 8021ab8:	d00a      	beq.n	8021ad0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8021aba:	687b      	ldr	r3, [r7, #4]
 8021abc:	681b      	ldr	r3, [r3, #0]
 8021abe:	689b      	ldr	r3, [r3, #8]
 8021ac0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8021ac4:	687b      	ldr	r3, [r7, #4]
 8021ac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8021ac8:	687b      	ldr	r3, [r7, #4]
 8021aca:	681b      	ldr	r3, [r3, #0]
 8021acc:	430a      	orrs	r2, r1
 8021ace:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8021ad0:	687b      	ldr	r3, [r7, #4]
 8021ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021ad8:	2b00      	cmp	r3, #0
 8021ada:	d01a      	beq.n	8021b12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8021adc:	687b      	ldr	r3, [r7, #4]
 8021ade:	681b      	ldr	r3, [r3, #0]
 8021ae0:	685b      	ldr	r3, [r3, #4]
 8021ae2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8021ae6:	687b      	ldr	r3, [r7, #4]
 8021ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8021aea:	687b      	ldr	r3, [r7, #4]
 8021aec:	681b      	ldr	r3, [r3, #0]
 8021aee:	430a      	orrs	r2, r1
 8021af0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8021af2:	687b      	ldr	r3, [r7, #4]
 8021af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8021afa:	d10a      	bne.n	8021b12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8021afc:	687b      	ldr	r3, [r7, #4]
 8021afe:	681b      	ldr	r3, [r3, #0]
 8021b00:	685b      	ldr	r3, [r3, #4]
 8021b02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8021b06:	687b      	ldr	r3, [r7, #4]
 8021b08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8021b0a:	687b      	ldr	r3, [r7, #4]
 8021b0c:	681b      	ldr	r3, [r3, #0]
 8021b0e:	430a      	orrs	r2, r1
 8021b10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8021b12:	687b      	ldr	r3, [r7, #4]
 8021b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021b1a:	2b00      	cmp	r3, #0
 8021b1c:	d00a      	beq.n	8021b34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8021b1e:	687b      	ldr	r3, [r7, #4]
 8021b20:	681b      	ldr	r3, [r3, #0]
 8021b22:	685b      	ldr	r3, [r3, #4]
 8021b24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8021b28:	687b      	ldr	r3, [r7, #4]
 8021b2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021b2c:	687b      	ldr	r3, [r7, #4]
 8021b2e:	681b      	ldr	r3, [r3, #0]
 8021b30:	430a      	orrs	r2, r1
 8021b32:	605a      	str	r2, [r3, #4]
  }
}
 8021b34:	bf00      	nop
 8021b36:	370c      	adds	r7, #12
 8021b38:	46bd      	mov	sp, r7
 8021b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b3e:	4770      	bx	lr

08021b40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8021b40:	b580      	push	{r7, lr}
 8021b42:	b098      	sub	sp, #96	; 0x60
 8021b44:	af02      	add	r7, sp, #8
 8021b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021b48:	687b      	ldr	r3, [r7, #4]
 8021b4a:	2200      	movs	r2, #0
 8021b4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8021b50:	f7f7 f880 	bl	8018c54 <HAL_GetTick>
 8021b54:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8021b56:	687b      	ldr	r3, [r7, #4]
 8021b58:	681b      	ldr	r3, [r3, #0]
 8021b5a:	681b      	ldr	r3, [r3, #0]
 8021b5c:	f003 0308 	and.w	r3, r3, #8
 8021b60:	2b08      	cmp	r3, #8
 8021b62:	d12f      	bne.n	8021bc4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8021b64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8021b68:	9300      	str	r3, [sp, #0]
 8021b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021b6c:	2200      	movs	r2, #0
 8021b6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8021b72:	6878      	ldr	r0, [r7, #4]
 8021b74:	f000 f88e 	bl	8021c94 <UART_WaitOnFlagUntilTimeout>
 8021b78:	4603      	mov	r3, r0
 8021b7a:	2b00      	cmp	r3, #0
 8021b7c:	d022      	beq.n	8021bc4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8021b7e:	687b      	ldr	r3, [r7, #4]
 8021b80:	681b      	ldr	r3, [r3, #0]
 8021b82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021b86:	e853 3f00 	ldrex	r3, [r3]
 8021b8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8021b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021b8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8021b92:	653b      	str	r3, [r7, #80]	; 0x50
 8021b94:	687b      	ldr	r3, [r7, #4]
 8021b96:	681b      	ldr	r3, [r3, #0]
 8021b98:	461a      	mov	r2, r3
 8021b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021b9c:	647b      	str	r3, [r7, #68]	; 0x44
 8021b9e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021ba0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8021ba2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8021ba4:	e841 2300 	strex	r3, r2, [r1]
 8021ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8021baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021bac:	2b00      	cmp	r3, #0
 8021bae:	d1e6      	bne.n	8021b7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8021bb0:	687b      	ldr	r3, [r7, #4]
 8021bb2:	2220      	movs	r2, #32
 8021bb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8021bb8:	687b      	ldr	r3, [r7, #4]
 8021bba:	2200      	movs	r2, #0
 8021bbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8021bc0:	2303      	movs	r3, #3
 8021bc2:	e063      	b.n	8021c8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8021bc4:	687b      	ldr	r3, [r7, #4]
 8021bc6:	681b      	ldr	r3, [r3, #0]
 8021bc8:	681b      	ldr	r3, [r3, #0]
 8021bca:	f003 0304 	and.w	r3, r3, #4
 8021bce:	2b04      	cmp	r3, #4
 8021bd0:	d149      	bne.n	8021c66 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8021bd2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8021bd6:	9300      	str	r3, [sp, #0]
 8021bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021bda:	2200      	movs	r2, #0
 8021bdc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8021be0:	6878      	ldr	r0, [r7, #4]
 8021be2:	f000 f857 	bl	8021c94 <UART_WaitOnFlagUntilTimeout>
 8021be6:	4603      	mov	r3, r0
 8021be8:	2b00      	cmp	r3, #0
 8021bea:	d03c      	beq.n	8021c66 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8021bec:	687b      	ldr	r3, [r7, #4]
 8021bee:	681b      	ldr	r3, [r3, #0]
 8021bf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021bf4:	e853 3f00 	ldrex	r3, [r3]
 8021bf8:	623b      	str	r3, [r7, #32]
   return(result);
 8021bfa:	6a3b      	ldr	r3, [r7, #32]
 8021bfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8021c00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8021c02:	687b      	ldr	r3, [r7, #4]
 8021c04:	681b      	ldr	r3, [r3, #0]
 8021c06:	461a      	mov	r2, r3
 8021c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021c0a:	633b      	str	r3, [r7, #48]	; 0x30
 8021c0c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021c0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8021c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021c12:	e841 2300 	strex	r3, r2, [r1]
 8021c16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8021c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c1a:	2b00      	cmp	r3, #0
 8021c1c:	d1e6      	bne.n	8021bec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021c1e:	687b      	ldr	r3, [r7, #4]
 8021c20:	681b      	ldr	r3, [r3, #0]
 8021c22:	3308      	adds	r3, #8
 8021c24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021c26:	693b      	ldr	r3, [r7, #16]
 8021c28:	e853 3f00 	ldrex	r3, [r3]
 8021c2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8021c2e:	68fb      	ldr	r3, [r7, #12]
 8021c30:	f023 0301 	bic.w	r3, r3, #1
 8021c34:	64bb      	str	r3, [r7, #72]	; 0x48
 8021c36:	687b      	ldr	r3, [r7, #4]
 8021c38:	681b      	ldr	r3, [r3, #0]
 8021c3a:	3308      	adds	r3, #8
 8021c3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8021c3e:	61fa      	str	r2, [r7, #28]
 8021c40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021c42:	69b9      	ldr	r1, [r7, #24]
 8021c44:	69fa      	ldr	r2, [r7, #28]
 8021c46:	e841 2300 	strex	r3, r2, [r1]
 8021c4a:	617b      	str	r3, [r7, #20]
   return(result);
 8021c4c:	697b      	ldr	r3, [r7, #20]
 8021c4e:	2b00      	cmp	r3, #0
 8021c50:	d1e5      	bne.n	8021c1e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8021c52:	687b      	ldr	r3, [r7, #4]
 8021c54:	2220      	movs	r2, #32
 8021c56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8021c5a:	687b      	ldr	r3, [r7, #4]
 8021c5c:	2200      	movs	r2, #0
 8021c5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8021c62:	2303      	movs	r3, #3
 8021c64:	e012      	b.n	8021c8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8021c66:	687b      	ldr	r3, [r7, #4]
 8021c68:	2220      	movs	r2, #32
 8021c6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8021c6e:	687b      	ldr	r3, [r7, #4]
 8021c70:	2220      	movs	r2, #32
 8021c72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021c76:	687b      	ldr	r3, [r7, #4]
 8021c78:	2200      	movs	r2, #0
 8021c7a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8021c7c:	687b      	ldr	r3, [r7, #4]
 8021c7e:	2200      	movs	r2, #0
 8021c80:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8021c82:	687b      	ldr	r3, [r7, #4]
 8021c84:	2200      	movs	r2, #0
 8021c86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8021c8a:	2300      	movs	r3, #0
}
 8021c8c:	4618      	mov	r0, r3
 8021c8e:	3758      	adds	r7, #88	; 0x58
 8021c90:	46bd      	mov	sp, r7
 8021c92:	bd80      	pop	{r7, pc}

08021c94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8021c94:	b580      	push	{r7, lr}
 8021c96:	b084      	sub	sp, #16
 8021c98:	af00      	add	r7, sp, #0
 8021c9a:	60f8      	str	r0, [r7, #12]
 8021c9c:	60b9      	str	r1, [r7, #8]
 8021c9e:	603b      	str	r3, [r7, #0]
 8021ca0:	4613      	mov	r3, r2
 8021ca2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8021ca4:	e049      	b.n	8021d3a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8021ca6:	69bb      	ldr	r3, [r7, #24]
 8021ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021cac:	d045      	beq.n	8021d3a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8021cae:	f7f6 ffd1 	bl	8018c54 <HAL_GetTick>
 8021cb2:	4602      	mov	r2, r0
 8021cb4:	683b      	ldr	r3, [r7, #0]
 8021cb6:	1ad3      	subs	r3, r2, r3
 8021cb8:	69ba      	ldr	r2, [r7, #24]
 8021cba:	429a      	cmp	r2, r3
 8021cbc:	d302      	bcc.n	8021cc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8021cbe:	69bb      	ldr	r3, [r7, #24]
 8021cc0:	2b00      	cmp	r3, #0
 8021cc2:	d101      	bne.n	8021cc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8021cc4:	2303      	movs	r3, #3
 8021cc6:	e048      	b.n	8021d5a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8021cc8:	68fb      	ldr	r3, [r7, #12]
 8021cca:	681b      	ldr	r3, [r3, #0]
 8021ccc:	681b      	ldr	r3, [r3, #0]
 8021cce:	f003 0304 	and.w	r3, r3, #4
 8021cd2:	2b00      	cmp	r3, #0
 8021cd4:	d031      	beq.n	8021d3a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8021cd6:	68fb      	ldr	r3, [r7, #12]
 8021cd8:	681b      	ldr	r3, [r3, #0]
 8021cda:	69db      	ldr	r3, [r3, #28]
 8021cdc:	f003 0308 	and.w	r3, r3, #8
 8021ce0:	2b08      	cmp	r3, #8
 8021ce2:	d110      	bne.n	8021d06 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8021ce4:	68fb      	ldr	r3, [r7, #12]
 8021ce6:	681b      	ldr	r3, [r3, #0]
 8021ce8:	2208      	movs	r2, #8
 8021cea:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8021cec:	68f8      	ldr	r0, [r7, #12]
 8021cee:	f000 f95b 	bl	8021fa8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8021cf2:	68fb      	ldr	r3, [r7, #12]
 8021cf4:	2208      	movs	r2, #8
 8021cf6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8021cfa:	68fb      	ldr	r3, [r7, #12]
 8021cfc:	2200      	movs	r2, #0
 8021cfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8021d02:	2301      	movs	r3, #1
 8021d04:	e029      	b.n	8021d5a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8021d06:	68fb      	ldr	r3, [r7, #12]
 8021d08:	681b      	ldr	r3, [r3, #0]
 8021d0a:	69db      	ldr	r3, [r3, #28]
 8021d0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8021d10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8021d14:	d111      	bne.n	8021d3a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8021d16:	68fb      	ldr	r3, [r7, #12]
 8021d18:	681b      	ldr	r3, [r3, #0]
 8021d1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8021d1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8021d20:	68f8      	ldr	r0, [r7, #12]
 8021d22:	f000 f941 	bl	8021fa8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8021d26:	68fb      	ldr	r3, [r7, #12]
 8021d28:	2220      	movs	r2, #32
 8021d2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8021d2e:	68fb      	ldr	r3, [r7, #12]
 8021d30:	2200      	movs	r2, #0
 8021d32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8021d36:	2303      	movs	r3, #3
 8021d38:	e00f      	b.n	8021d5a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8021d3a:	68fb      	ldr	r3, [r7, #12]
 8021d3c:	681b      	ldr	r3, [r3, #0]
 8021d3e:	69da      	ldr	r2, [r3, #28]
 8021d40:	68bb      	ldr	r3, [r7, #8]
 8021d42:	4013      	ands	r3, r2
 8021d44:	68ba      	ldr	r2, [r7, #8]
 8021d46:	429a      	cmp	r2, r3
 8021d48:	bf0c      	ite	eq
 8021d4a:	2301      	moveq	r3, #1
 8021d4c:	2300      	movne	r3, #0
 8021d4e:	b2db      	uxtb	r3, r3
 8021d50:	461a      	mov	r2, r3
 8021d52:	79fb      	ldrb	r3, [r7, #7]
 8021d54:	429a      	cmp	r2, r3
 8021d56:	d0a6      	beq.n	8021ca6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8021d58:	2300      	movs	r3, #0
}
 8021d5a:	4618      	mov	r0, r3
 8021d5c:	3710      	adds	r7, #16
 8021d5e:	46bd      	mov	sp, r7
 8021d60:	bd80      	pop	{r7, pc}
	...

08021d64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8021d64:	b480      	push	{r7}
 8021d66:	b0a3      	sub	sp, #140	; 0x8c
 8021d68:	af00      	add	r7, sp, #0
 8021d6a:	60f8      	str	r0, [r7, #12]
 8021d6c:	60b9      	str	r1, [r7, #8]
 8021d6e:	4613      	mov	r3, r2
 8021d70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8021d72:	68fb      	ldr	r3, [r7, #12]
 8021d74:	68ba      	ldr	r2, [r7, #8]
 8021d76:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8021d78:	68fb      	ldr	r3, [r7, #12]
 8021d7a:	88fa      	ldrh	r2, [r7, #6]
 8021d7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8021d80:	68fb      	ldr	r3, [r7, #12]
 8021d82:	88fa      	ldrh	r2, [r7, #6]
 8021d84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8021d88:	68fb      	ldr	r3, [r7, #12]
 8021d8a:	2200      	movs	r2, #0
 8021d8c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8021d8e:	68fb      	ldr	r3, [r7, #12]
 8021d90:	689b      	ldr	r3, [r3, #8]
 8021d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021d96:	d10e      	bne.n	8021db6 <UART_Start_Receive_IT+0x52>
 8021d98:	68fb      	ldr	r3, [r7, #12]
 8021d9a:	691b      	ldr	r3, [r3, #16]
 8021d9c:	2b00      	cmp	r3, #0
 8021d9e:	d105      	bne.n	8021dac <UART_Start_Receive_IT+0x48>
 8021da0:	68fb      	ldr	r3, [r7, #12]
 8021da2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8021da6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8021daa:	e02d      	b.n	8021e08 <UART_Start_Receive_IT+0xa4>
 8021dac:	68fb      	ldr	r3, [r7, #12]
 8021dae:	22ff      	movs	r2, #255	; 0xff
 8021db0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8021db4:	e028      	b.n	8021e08 <UART_Start_Receive_IT+0xa4>
 8021db6:	68fb      	ldr	r3, [r7, #12]
 8021db8:	689b      	ldr	r3, [r3, #8]
 8021dba:	2b00      	cmp	r3, #0
 8021dbc:	d10d      	bne.n	8021dda <UART_Start_Receive_IT+0x76>
 8021dbe:	68fb      	ldr	r3, [r7, #12]
 8021dc0:	691b      	ldr	r3, [r3, #16]
 8021dc2:	2b00      	cmp	r3, #0
 8021dc4:	d104      	bne.n	8021dd0 <UART_Start_Receive_IT+0x6c>
 8021dc6:	68fb      	ldr	r3, [r7, #12]
 8021dc8:	22ff      	movs	r2, #255	; 0xff
 8021dca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8021dce:	e01b      	b.n	8021e08 <UART_Start_Receive_IT+0xa4>
 8021dd0:	68fb      	ldr	r3, [r7, #12]
 8021dd2:	227f      	movs	r2, #127	; 0x7f
 8021dd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8021dd8:	e016      	b.n	8021e08 <UART_Start_Receive_IT+0xa4>
 8021dda:	68fb      	ldr	r3, [r7, #12]
 8021ddc:	689b      	ldr	r3, [r3, #8]
 8021dde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8021de2:	d10d      	bne.n	8021e00 <UART_Start_Receive_IT+0x9c>
 8021de4:	68fb      	ldr	r3, [r7, #12]
 8021de6:	691b      	ldr	r3, [r3, #16]
 8021de8:	2b00      	cmp	r3, #0
 8021dea:	d104      	bne.n	8021df6 <UART_Start_Receive_IT+0x92>
 8021dec:	68fb      	ldr	r3, [r7, #12]
 8021dee:	227f      	movs	r2, #127	; 0x7f
 8021df0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8021df4:	e008      	b.n	8021e08 <UART_Start_Receive_IT+0xa4>
 8021df6:	68fb      	ldr	r3, [r7, #12]
 8021df8:	223f      	movs	r2, #63	; 0x3f
 8021dfa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8021dfe:	e003      	b.n	8021e08 <UART_Start_Receive_IT+0xa4>
 8021e00:	68fb      	ldr	r3, [r7, #12]
 8021e02:	2200      	movs	r2, #0
 8021e04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021e08:	68fb      	ldr	r3, [r7, #12]
 8021e0a:	2200      	movs	r2, #0
 8021e0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8021e10:	68fb      	ldr	r3, [r7, #12]
 8021e12:	2222      	movs	r2, #34	; 0x22
 8021e14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021e18:	68fb      	ldr	r3, [r7, #12]
 8021e1a:	681b      	ldr	r3, [r3, #0]
 8021e1c:	3308      	adds	r3, #8
 8021e1e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021e20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8021e22:	e853 3f00 	ldrex	r3, [r3]
 8021e26:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8021e28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021e2a:	f043 0301 	orr.w	r3, r3, #1
 8021e2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8021e32:	68fb      	ldr	r3, [r7, #12]
 8021e34:	681b      	ldr	r3, [r3, #0]
 8021e36:	3308      	adds	r3, #8
 8021e38:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8021e3c:	673a      	str	r2, [r7, #112]	; 0x70
 8021e3e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021e40:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8021e42:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8021e44:	e841 2300 	strex	r3, r2, [r1]
 8021e48:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8021e4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8021e4c:	2b00      	cmp	r3, #0
 8021e4e:	d1e3      	bne.n	8021e18 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8021e50:	68fb      	ldr	r3, [r7, #12]
 8021e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8021e54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8021e58:	d14f      	bne.n	8021efa <UART_Start_Receive_IT+0x196>
 8021e5a:	68fb      	ldr	r3, [r7, #12]
 8021e5c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8021e60:	88fa      	ldrh	r2, [r7, #6]
 8021e62:	429a      	cmp	r2, r3
 8021e64:	d349      	bcc.n	8021efa <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8021e66:	68fb      	ldr	r3, [r7, #12]
 8021e68:	689b      	ldr	r3, [r3, #8]
 8021e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021e6e:	d107      	bne.n	8021e80 <UART_Start_Receive_IT+0x11c>
 8021e70:	68fb      	ldr	r3, [r7, #12]
 8021e72:	691b      	ldr	r3, [r3, #16]
 8021e74:	2b00      	cmp	r3, #0
 8021e76:	d103      	bne.n	8021e80 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8021e78:	68fb      	ldr	r3, [r7, #12]
 8021e7a:	4a47      	ldr	r2, [pc, #284]	; (8021f98 <UART_Start_Receive_IT+0x234>)
 8021e7c:	675a      	str	r2, [r3, #116]	; 0x74
 8021e7e:	e002      	b.n	8021e86 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8021e80:	68fb      	ldr	r3, [r7, #12]
 8021e82:	4a46      	ldr	r2, [pc, #280]	; (8021f9c <UART_Start_Receive_IT+0x238>)
 8021e84:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8021e86:	68fb      	ldr	r3, [r7, #12]
 8021e88:	691b      	ldr	r3, [r3, #16]
 8021e8a:	2b00      	cmp	r3, #0
 8021e8c:	d01a      	beq.n	8021ec4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8021e8e:	68fb      	ldr	r3, [r7, #12]
 8021e90:	681b      	ldr	r3, [r3, #0]
 8021e92:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021e96:	e853 3f00 	ldrex	r3, [r3]
 8021e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8021e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021ea2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8021ea6:	68fb      	ldr	r3, [r7, #12]
 8021ea8:	681b      	ldr	r3, [r3, #0]
 8021eaa:	461a      	mov	r2, r3
 8021eac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8021eb2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021eb4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8021eb6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8021eb8:	e841 2300 	strex	r3, r2, [r1]
 8021ebc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8021ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021ec0:	2b00      	cmp	r3, #0
 8021ec2:	d1e4      	bne.n	8021e8e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8021ec4:	68fb      	ldr	r3, [r7, #12]
 8021ec6:	681b      	ldr	r3, [r3, #0]
 8021ec8:	3308      	adds	r3, #8
 8021eca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021ece:	e853 3f00 	ldrex	r3, [r3]
 8021ed2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8021ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021eda:	67fb      	str	r3, [r7, #124]	; 0x7c
 8021edc:	68fb      	ldr	r3, [r7, #12]
 8021ede:	681b      	ldr	r3, [r3, #0]
 8021ee0:	3308      	adds	r3, #8
 8021ee2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8021ee4:	64ba      	str	r2, [r7, #72]	; 0x48
 8021ee6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021ee8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8021eea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8021eec:	e841 2300 	strex	r3, r2, [r1]
 8021ef0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8021ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021ef4:	2b00      	cmp	r3, #0
 8021ef6:	d1e5      	bne.n	8021ec4 <UART_Start_Receive_IT+0x160>
 8021ef8:	e046      	b.n	8021f88 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8021efa:	68fb      	ldr	r3, [r7, #12]
 8021efc:	689b      	ldr	r3, [r3, #8]
 8021efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021f02:	d107      	bne.n	8021f14 <UART_Start_Receive_IT+0x1b0>
 8021f04:	68fb      	ldr	r3, [r7, #12]
 8021f06:	691b      	ldr	r3, [r3, #16]
 8021f08:	2b00      	cmp	r3, #0
 8021f0a:	d103      	bne.n	8021f14 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8021f0c:	68fb      	ldr	r3, [r7, #12]
 8021f0e:	4a24      	ldr	r2, [pc, #144]	; (8021fa0 <UART_Start_Receive_IT+0x23c>)
 8021f10:	675a      	str	r2, [r3, #116]	; 0x74
 8021f12:	e002      	b.n	8021f1a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8021f14:	68fb      	ldr	r3, [r7, #12]
 8021f16:	4a23      	ldr	r2, [pc, #140]	; (8021fa4 <UART_Start_Receive_IT+0x240>)
 8021f18:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8021f1a:	68fb      	ldr	r3, [r7, #12]
 8021f1c:	691b      	ldr	r3, [r3, #16]
 8021f1e:	2b00      	cmp	r3, #0
 8021f20:	d019      	beq.n	8021f56 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8021f22:	68fb      	ldr	r3, [r7, #12]
 8021f24:	681b      	ldr	r3, [r3, #0]
 8021f26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021f2a:	e853 3f00 	ldrex	r3, [r3]
 8021f2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8021f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f32:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8021f36:	677b      	str	r3, [r7, #116]	; 0x74
 8021f38:	68fb      	ldr	r3, [r7, #12]
 8021f3a:	681b      	ldr	r3, [r3, #0]
 8021f3c:	461a      	mov	r2, r3
 8021f3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021f40:	637b      	str	r3, [r7, #52]	; 0x34
 8021f42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021f44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8021f46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021f48:	e841 2300 	strex	r3, r2, [r1]
 8021f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8021f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021f50:	2b00      	cmp	r3, #0
 8021f52:	d1e6      	bne.n	8021f22 <UART_Start_Receive_IT+0x1be>
 8021f54:	e018      	b.n	8021f88 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8021f56:	68fb      	ldr	r3, [r7, #12]
 8021f58:	681b      	ldr	r3, [r3, #0]
 8021f5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021f5c:	697b      	ldr	r3, [r7, #20]
 8021f5e:	e853 3f00 	ldrex	r3, [r3]
 8021f62:	613b      	str	r3, [r7, #16]
   return(result);
 8021f64:	693b      	ldr	r3, [r7, #16]
 8021f66:	f043 0320 	orr.w	r3, r3, #32
 8021f6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8021f6c:	68fb      	ldr	r3, [r7, #12]
 8021f6e:	681b      	ldr	r3, [r3, #0]
 8021f70:	461a      	mov	r2, r3
 8021f72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8021f74:	623b      	str	r3, [r7, #32]
 8021f76:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021f78:	69f9      	ldr	r1, [r7, #28]
 8021f7a:	6a3a      	ldr	r2, [r7, #32]
 8021f7c:	e841 2300 	strex	r3, r2, [r1]
 8021f80:	61bb      	str	r3, [r7, #24]
   return(result);
 8021f82:	69bb      	ldr	r3, [r7, #24]
 8021f84:	2b00      	cmp	r3, #0
 8021f86:	d1e6      	bne.n	8021f56 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8021f88:	2300      	movs	r3, #0
}
 8021f8a:	4618      	mov	r0, r3
 8021f8c:	378c      	adds	r7, #140	; 0x8c
 8021f8e:	46bd      	mov	sp, r7
 8021f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f94:	4770      	bx	lr
 8021f96:	bf00      	nop
 8021f98:	080227c9 	.word	0x080227c9
 8021f9c:	08022469 	.word	0x08022469
 8021fa0:	080222b1 	.word	0x080222b1
 8021fa4:	080220f9 	.word	0x080220f9

08021fa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8021fa8:	b480      	push	{r7}
 8021faa:	b095      	sub	sp, #84	; 0x54
 8021fac:	af00      	add	r7, sp, #0
 8021fae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8021fb0:	687b      	ldr	r3, [r7, #4]
 8021fb2:	681b      	ldr	r3, [r3, #0]
 8021fb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021fb8:	e853 3f00 	ldrex	r3, [r3]
 8021fbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8021fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021fc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8021fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8021fc6:	687b      	ldr	r3, [r7, #4]
 8021fc8:	681b      	ldr	r3, [r3, #0]
 8021fca:	461a      	mov	r2, r3
 8021fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021fce:	643b      	str	r3, [r7, #64]	; 0x40
 8021fd0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021fd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8021fd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8021fd6:	e841 2300 	strex	r3, r2, [r1]
 8021fda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8021fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021fde:	2b00      	cmp	r3, #0
 8021fe0:	d1e6      	bne.n	8021fb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8021fe2:	687b      	ldr	r3, [r7, #4]
 8021fe4:	681b      	ldr	r3, [r3, #0]
 8021fe6:	3308      	adds	r3, #8
 8021fe8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021fea:	6a3b      	ldr	r3, [r7, #32]
 8021fec:	e853 3f00 	ldrex	r3, [r3]
 8021ff0:	61fb      	str	r3, [r7, #28]
   return(result);
 8021ff2:	69fb      	ldr	r3, [r7, #28]
 8021ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8021ff8:	f023 0301 	bic.w	r3, r3, #1
 8021ffc:	64bb      	str	r3, [r7, #72]	; 0x48
 8021ffe:	687b      	ldr	r3, [r7, #4]
 8022000:	681b      	ldr	r3, [r3, #0]
 8022002:	3308      	adds	r3, #8
 8022004:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8022006:	62fa      	str	r2, [r7, #44]	; 0x2c
 8022008:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802200a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802200c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802200e:	e841 2300 	strex	r3, r2, [r1]
 8022012:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8022014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022016:	2b00      	cmp	r3, #0
 8022018:	d1e3      	bne.n	8021fe2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802201a:	687b      	ldr	r3, [r7, #4]
 802201c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802201e:	2b01      	cmp	r3, #1
 8022020:	d118      	bne.n	8022054 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8022022:	687b      	ldr	r3, [r7, #4]
 8022024:	681b      	ldr	r3, [r3, #0]
 8022026:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022028:	68fb      	ldr	r3, [r7, #12]
 802202a:	e853 3f00 	ldrex	r3, [r3]
 802202e:	60bb      	str	r3, [r7, #8]
   return(result);
 8022030:	68bb      	ldr	r3, [r7, #8]
 8022032:	f023 0310 	bic.w	r3, r3, #16
 8022036:	647b      	str	r3, [r7, #68]	; 0x44
 8022038:	687b      	ldr	r3, [r7, #4]
 802203a:	681b      	ldr	r3, [r3, #0]
 802203c:	461a      	mov	r2, r3
 802203e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8022040:	61bb      	str	r3, [r7, #24]
 8022042:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022044:	6979      	ldr	r1, [r7, #20]
 8022046:	69ba      	ldr	r2, [r7, #24]
 8022048:	e841 2300 	strex	r3, r2, [r1]
 802204c:	613b      	str	r3, [r7, #16]
   return(result);
 802204e:	693b      	ldr	r3, [r7, #16]
 8022050:	2b00      	cmp	r3, #0
 8022052:	d1e6      	bne.n	8022022 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8022054:	687b      	ldr	r3, [r7, #4]
 8022056:	2220      	movs	r2, #32
 8022058:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802205c:	687b      	ldr	r3, [r7, #4]
 802205e:	2200      	movs	r2, #0
 8022060:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8022062:	687b      	ldr	r3, [r7, #4]
 8022064:	2200      	movs	r2, #0
 8022066:	675a      	str	r2, [r3, #116]	; 0x74
}
 8022068:	bf00      	nop
 802206a:	3754      	adds	r7, #84	; 0x54
 802206c:	46bd      	mov	sp, r7
 802206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022072:	4770      	bx	lr

08022074 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8022074:	b580      	push	{r7, lr}
 8022076:	b084      	sub	sp, #16
 8022078:	af00      	add	r7, sp, #0
 802207a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 802207c:	687b      	ldr	r3, [r7, #4]
 802207e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022080:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8022082:	68fb      	ldr	r3, [r7, #12]
 8022084:	2200      	movs	r2, #0
 8022086:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 802208a:	68fb      	ldr	r3, [r7, #12]
 802208c:	2200      	movs	r2, #0
 802208e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8022092:	68f8      	ldr	r0, [r7, #12]
 8022094:	f7ff f99c 	bl	80213d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8022098:	bf00      	nop
 802209a:	3710      	adds	r7, #16
 802209c:	46bd      	mov	sp, r7
 802209e:	bd80      	pop	{r7, pc}

080220a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80220a0:	b580      	push	{r7, lr}
 80220a2:	b088      	sub	sp, #32
 80220a4:	af00      	add	r7, sp, #0
 80220a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80220a8:	687b      	ldr	r3, [r7, #4]
 80220aa:	681b      	ldr	r3, [r3, #0]
 80220ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80220ae:	68fb      	ldr	r3, [r7, #12]
 80220b0:	e853 3f00 	ldrex	r3, [r3]
 80220b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80220b6:	68bb      	ldr	r3, [r7, #8]
 80220b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80220bc:	61fb      	str	r3, [r7, #28]
 80220be:	687b      	ldr	r3, [r7, #4]
 80220c0:	681b      	ldr	r3, [r3, #0]
 80220c2:	461a      	mov	r2, r3
 80220c4:	69fb      	ldr	r3, [r7, #28]
 80220c6:	61bb      	str	r3, [r7, #24]
 80220c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80220ca:	6979      	ldr	r1, [r7, #20]
 80220cc:	69ba      	ldr	r2, [r7, #24]
 80220ce:	e841 2300 	strex	r3, r2, [r1]
 80220d2:	613b      	str	r3, [r7, #16]
   return(result);
 80220d4:	693b      	ldr	r3, [r7, #16]
 80220d6:	2b00      	cmp	r3, #0
 80220d8:	d1e6      	bne.n	80220a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80220da:	687b      	ldr	r3, [r7, #4]
 80220dc:	2220      	movs	r2, #32
 80220de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80220e2:	687b      	ldr	r3, [r7, #4]
 80220e4:	2200      	movs	r2, #0
 80220e6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80220e8:	6878      	ldr	r0, [r7, #4]
 80220ea:	f7ff f967 	bl	80213bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80220ee:	bf00      	nop
 80220f0:	3720      	adds	r7, #32
 80220f2:	46bd      	mov	sp, r7
 80220f4:	bd80      	pop	{r7, pc}
	...

080220f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80220f8:	b580      	push	{r7, lr}
 80220fa:	b09c      	sub	sp, #112	; 0x70
 80220fc:	af00      	add	r7, sp, #0
 80220fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8022100:	687b      	ldr	r3, [r7, #4]
 8022102:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8022106:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 802210a:	687b      	ldr	r3, [r7, #4]
 802210c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8022110:	2b22      	cmp	r3, #34	; 0x22
 8022112:	f040 80be 	bne.w	8022292 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8022116:	687b      	ldr	r3, [r7, #4]
 8022118:	681b      	ldr	r3, [r3, #0]
 802211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802211c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8022120:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8022124:	b2d9      	uxtb	r1, r3
 8022126:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 802212a:	b2da      	uxtb	r2, r3
 802212c:	687b      	ldr	r3, [r7, #4]
 802212e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8022130:	400a      	ands	r2, r1
 8022132:	b2d2      	uxtb	r2, r2
 8022134:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8022136:	687b      	ldr	r3, [r7, #4]
 8022138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802213a:	1c5a      	adds	r2, r3, #1
 802213c:	687b      	ldr	r3, [r7, #4]
 802213e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8022140:	687b      	ldr	r3, [r7, #4]
 8022142:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8022146:	b29b      	uxth	r3, r3
 8022148:	3b01      	subs	r3, #1
 802214a:	b29a      	uxth	r2, r3
 802214c:	687b      	ldr	r3, [r7, #4]
 802214e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8022152:	687b      	ldr	r3, [r7, #4]
 8022154:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8022158:	b29b      	uxth	r3, r3
 802215a:	2b00      	cmp	r3, #0
 802215c:	f040 80a1 	bne.w	80222a2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8022160:	687b      	ldr	r3, [r7, #4]
 8022162:	681b      	ldr	r3, [r3, #0]
 8022164:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022168:	e853 3f00 	ldrex	r3, [r3]
 802216c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 802216e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8022170:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8022174:	66bb      	str	r3, [r7, #104]	; 0x68
 8022176:	687b      	ldr	r3, [r7, #4]
 8022178:	681b      	ldr	r3, [r3, #0]
 802217a:	461a      	mov	r2, r3
 802217c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802217e:	65bb      	str	r3, [r7, #88]	; 0x58
 8022180:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022182:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8022184:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8022186:	e841 2300 	strex	r3, r2, [r1]
 802218a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 802218c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802218e:	2b00      	cmp	r3, #0
 8022190:	d1e6      	bne.n	8022160 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8022192:	687b      	ldr	r3, [r7, #4]
 8022194:	681b      	ldr	r3, [r3, #0]
 8022196:	3308      	adds	r3, #8
 8022198:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802219a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802219c:	e853 3f00 	ldrex	r3, [r3]
 80221a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80221a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80221a4:	f023 0301 	bic.w	r3, r3, #1
 80221a8:	667b      	str	r3, [r7, #100]	; 0x64
 80221aa:	687b      	ldr	r3, [r7, #4]
 80221ac:	681b      	ldr	r3, [r3, #0]
 80221ae:	3308      	adds	r3, #8
 80221b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80221b2:	647a      	str	r2, [r7, #68]	; 0x44
 80221b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80221b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80221b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80221ba:	e841 2300 	strex	r3, r2, [r1]
 80221be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80221c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80221c2:	2b00      	cmp	r3, #0
 80221c4:	d1e5      	bne.n	8022192 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80221c6:	687b      	ldr	r3, [r7, #4]
 80221c8:	2220      	movs	r2, #32
 80221ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80221ce:	687b      	ldr	r3, [r7, #4]
 80221d0:	2200      	movs	r2, #0
 80221d2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80221d4:	687b      	ldr	r3, [r7, #4]
 80221d6:	2200      	movs	r2, #0
 80221d8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80221da:	687b      	ldr	r3, [r7, #4]
 80221dc:	681b      	ldr	r3, [r3, #0]
 80221de:	4a33      	ldr	r2, [pc, #204]	; (80222ac <UART_RxISR_8BIT+0x1b4>)
 80221e0:	4293      	cmp	r3, r2
 80221e2:	d01f      	beq.n	8022224 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80221e4:	687b      	ldr	r3, [r7, #4]
 80221e6:	681b      	ldr	r3, [r3, #0]
 80221e8:	685b      	ldr	r3, [r3, #4]
 80221ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80221ee:	2b00      	cmp	r3, #0
 80221f0:	d018      	beq.n	8022224 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80221f2:	687b      	ldr	r3, [r7, #4]
 80221f4:	681b      	ldr	r3, [r3, #0]
 80221f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80221f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221fa:	e853 3f00 	ldrex	r3, [r3]
 80221fe:	623b      	str	r3, [r7, #32]
   return(result);
 8022200:	6a3b      	ldr	r3, [r7, #32]
 8022202:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8022206:	663b      	str	r3, [r7, #96]	; 0x60
 8022208:	687b      	ldr	r3, [r7, #4]
 802220a:	681b      	ldr	r3, [r3, #0]
 802220c:	461a      	mov	r2, r3
 802220e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8022210:	633b      	str	r3, [r7, #48]	; 0x30
 8022212:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022214:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8022216:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022218:	e841 2300 	strex	r3, r2, [r1]
 802221c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 802221e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022220:	2b00      	cmp	r3, #0
 8022222:	d1e6      	bne.n	80221f2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8022224:	687b      	ldr	r3, [r7, #4]
 8022226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022228:	2b01      	cmp	r3, #1
 802222a:	d12e      	bne.n	802228a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802222c:	687b      	ldr	r3, [r7, #4]
 802222e:	2200      	movs	r2, #0
 8022230:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8022232:	687b      	ldr	r3, [r7, #4]
 8022234:	681b      	ldr	r3, [r3, #0]
 8022236:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022238:	693b      	ldr	r3, [r7, #16]
 802223a:	e853 3f00 	ldrex	r3, [r3]
 802223e:	60fb      	str	r3, [r7, #12]
   return(result);
 8022240:	68fb      	ldr	r3, [r7, #12]
 8022242:	f023 0310 	bic.w	r3, r3, #16
 8022246:	65fb      	str	r3, [r7, #92]	; 0x5c
 8022248:	687b      	ldr	r3, [r7, #4]
 802224a:	681b      	ldr	r3, [r3, #0]
 802224c:	461a      	mov	r2, r3
 802224e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8022250:	61fb      	str	r3, [r7, #28]
 8022252:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022254:	69b9      	ldr	r1, [r7, #24]
 8022256:	69fa      	ldr	r2, [r7, #28]
 8022258:	e841 2300 	strex	r3, r2, [r1]
 802225c:	617b      	str	r3, [r7, #20]
   return(result);
 802225e:	697b      	ldr	r3, [r7, #20]
 8022260:	2b00      	cmp	r3, #0
 8022262:	d1e6      	bne.n	8022232 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8022264:	687b      	ldr	r3, [r7, #4]
 8022266:	681b      	ldr	r3, [r3, #0]
 8022268:	69db      	ldr	r3, [r3, #28]
 802226a:	f003 0310 	and.w	r3, r3, #16
 802226e:	2b10      	cmp	r3, #16
 8022270:	d103      	bne.n	802227a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8022272:	687b      	ldr	r3, [r7, #4]
 8022274:	681b      	ldr	r3, [r3, #0]
 8022276:	2210      	movs	r2, #16
 8022278:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 802227a:	687b      	ldr	r3, [r7, #4]
 802227c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8022280:	4619      	mov	r1, r3
 8022282:	6878      	ldr	r0, [r7, #4]
 8022284:	f7ff f8ae 	bl	80213e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8022288:	e00b      	b.n	80222a2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 802228a:	6878      	ldr	r0, [r7, #4]
 802228c:	f7e2 f8b2 	bl	80043f4 <HAL_UART_RxCpltCallback>
}
 8022290:	e007      	b.n	80222a2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8022292:	687b      	ldr	r3, [r7, #4]
 8022294:	681b      	ldr	r3, [r3, #0]
 8022296:	699a      	ldr	r2, [r3, #24]
 8022298:	687b      	ldr	r3, [r7, #4]
 802229a:	681b      	ldr	r3, [r3, #0]
 802229c:	f042 0208 	orr.w	r2, r2, #8
 80222a0:	619a      	str	r2, [r3, #24]
}
 80222a2:	bf00      	nop
 80222a4:	3770      	adds	r7, #112	; 0x70
 80222a6:	46bd      	mov	sp, r7
 80222a8:	bd80      	pop	{r7, pc}
 80222aa:	bf00      	nop
 80222ac:	40008000 	.word	0x40008000

080222b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80222b0:	b580      	push	{r7, lr}
 80222b2:	b09c      	sub	sp, #112	; 0x70
 80222b4:	af00      	add	r7, sp, #0
 80222b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80222b8:	687b      	ldr	r3, [r7, #4]
 80222ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80222be:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80222c2:	687b      	ldr	r3, [r7, #4]
 80222c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80222c8:	2b22      	cmp	r3, #34	; 0x22
 80222ca:	f040 80be 	bne.w	802244a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80222ce:	687b      	ldr	r3, [r7, #4]
 80222d0:	681b      	ldr	r3, [r3, #0]
 80222d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80222d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80222d8:	687b      	ldr	r3, [r7, #4]
 80222da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80222dc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80222de:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80222e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80222e6:	4013      	ands	r3, r2
 80222e8:	b29a      	uxth	r2, r3
 80222ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80222ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80222ee:	687b      	ldr	r3, [r7, #4]
 80222f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80222f2:	1c9a      	adds	r2, r3, #2
 80222f4:	687b      	ldr	r3, [r7, #4]
 80222f6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80222f8:	687b      	ldr	r3, [r7, #4]
 80222fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80222fe:	b29b      	uxth	r3, r3
 8022300:	3b01      	subs	r3, #1
 8022302:	b29a      	uxth	r2, r3
 8022304:	687b      	ldr	r3, [r7, #4]
 8022306:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 802230a:	687b      	ldr	r3, [r7, #4]
 802230c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8022310:	b29b      	uxth	r3, r3
 8022312:	2b00      	cmp	r3, #0
 8022314:	f040 80a1 	bne.w	802245a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8022318:	687b      	ldr	r3, [r7, #4]
 802231a:	681b      	ldr	r3, [r3, #0]
 802231c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802231e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8022320:	e853 3f00 	ldrex	r3, [r3]
 8022324:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8022326:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8022328:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802232c:	667b      	str	r3, [r7, #100]	; 0x64
 802232e:	687b      	ldr	r3, [r7, #4]
 8022330:	681b      	ldr	r3, [r3, #0]
 8022332:	461a      	mov	r2, r3
 8022334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8022336:	657b      	str	r3, [r7, #84]	; 0x54
 8022338:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802233a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 802233c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802233e:	e841 2300 	strex	r3, r2, [r1]
 8022342:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8022344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022346:	2b00      	cmp	r3, #0
 8022348:	d1e6      	bne.n	8022318 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802234a:	687b      	ldr	r3, [r7, #4]
 802234c:	681b      	ldr	r3, [r3, #0]
 802234e:	3308      	adds	r3, #8
 8022350:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022354:	e853 3f00 	ldrex	r3, [r3]
 8022358:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 802235a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802235c:	f023 0301 	bic.w	r3, r3, #1
 8022360:	663b      	str	r3, [r7, #96]	; 0x60
 8022362:	687b      	ldr	r3, [r7, #4]
 8022364:	681b      	ldr	r3, [r3, #0]
 8022366:	3308      	adds	r3, #8
 8022368:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802236a:	643a      	str	r2, [r7, #64]	; 0x40
 802236c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802236e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8022370:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8022372:	e841 2300 	strex	r3, r2, [r1]
 8022376:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8022378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802237a:	2b00      	cmp	r3, #0
 802237c:	d1e5      	bne.n	802234a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 802237e:	687b      	ldr	r3, [r7, #4]
 8022380:	2220      	movs	r2, #32
 8022382:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8022386:	687b      	ldr	r3, [r7, #4]
 8022388:	2200      	movs	r2, #0
 802238a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 802238c:	687b      	ldr	r3, [r7, #4]
 802238e:	2200      	movs	r2, #0
 8022390:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8022392:	687b      	ldr	r3, [r7, #4]
 8022394:	681b      	ldr	r3, [r3, #0]
 8022396:	4a33      	ldr	r2, [pc, #204]	; (8022464 <UART_RxISR_16BIT+0x1b4>)
 8022398:	4293      	cmp	r3, r2
 802239a:	d01f      	beq.n	80223dc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 802239c:	687b      	ldr	r3, [r7, #4]
 802239e:	681b      	ldr	r3, [r3, #0]
 80223a0:	685b      	ldr	r3, [r3, #4]
 80223a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80223a6:	2b00      	cmp	r3, #0
 80223a8:	d018      	beq.n	80223dc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80223aa:	687b      	ldr	r3, [r7, #4]
 80223ac:	681b      	ldr	r3, [r3, #0]
 80223ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80223b0:	6a3b      	ldr	r3, [r7, #32]
 80223b2:	e853 3f00 	ldrex	r3, [r3]
 80223b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80223b8:	69fb      	ldr	r3, [r7, #28]
 80223ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80223be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80223c0:	687b      	ldr	r3, [r7, #4]
 80223c2:	681b      	ldr	r3, [r3, #0]
 80223c4:	461a      	mov	r2, r3
 80223c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80223c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80223ca:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80223cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80223ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80223d0:	e841 2300 	strex	r3, r2, [r1]
 80223d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80223d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80223d8:	2b00      	cmp	r3, #0
 80223da:	d1e6      	bne.n	80223aa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80223dc:	687b      	ldr	r3, [r7, #4]
 80223de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80223e0:	2b01      	cmp	r3, #1
 80223e2:	d12e      	bne.n	8022442 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80223e4:	687b      	ldr	r3, [r7, #4]
 80223e6:	2200      	movs	r2, #0
 80223e8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80223ea:	687b      	ldr	r3, [r7, #4]
 80223ec:	681b      	ldr	r3, [r3, #0]
 80223ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80223f0:	68fb      	ldr	r3, [r7, #12]
 80223f2:	e853 3f00 	ldrex	r3, [r3]
 80223f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80223f8:	68bb      	ldr	r3, [r7, #8]
 80223fa:	f023 0310 	bic.w	r3, r3, #16
 80223fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8022400:	687b      	ldr	r3, [r7, #4]
 8022402:	681b      	ldr	r3, [r3, #0]
 8022404:	461a      	mov	r2, r3
 8022406:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8022408:	61bb      	str	r3, [r7, #24]
 802240a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802240c:	6979      	ldr	r1, [r7, #20]
 802240e:	69ba      	ldr	r2, [r7, #24]
 8022410:	e841 2300 	strex	r3, r2, [r1]
 8022414:	613b      	str	r3, [r7, #16]
   return(result);
 8022416:	693b      	ldr	r3, [r7, #16]
 8022418:	2b00      	cmp	r3, #0
 802241a:	d1e6      	bne.n	80223ea <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 802241c:	687b      	ldr	r3, [r7, #4]
 802241e:	681b      	ldr	r3, [r3, #0]
 8022420:	69db      	ldr	r3, [r3, #28]
 8022422:	f003 0310 	and.w	r3, r3, #16
 8022426:	2b10      	cmp	r3, #16
 8022428:	d103      	bne.n	8022432 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 802242a:	687b      	ldr	r3, [r7, #4]
 802242c:	681b      	ldr	r3, [r3, #0]
 802242e:	2210      	movs	r2, #16
 8022430:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8022432:	687b      	ldr	r3, [r7, #4]
 8022434:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8022438:	4619      	mov	r1, r3
 802243a:	6878      	ldr	r0, [r7, #4]
 802243c:	f7fe ffd2 	bl	80213e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8022440:	e00b      	b.n	802245a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8022442:	6878      	ldr	r0, [r7, #4]
 8022444:	f7e1 ffd6 	bl	80043f4 <HAL_UART_RxCpltCallback>
}
 8022448:	e007      	b.n	802245a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 802244a:	687b      	ldr	r3, [r7, #4]
 802244c:	681b      	ldr	r3, [r3, #0]
 802244e:	699a      	ldr	r2, [r3, #24]
 8022450:	687b      	ldr	r3, [r7, #4]
 8022452:	681b      	ldr	r3, [r3, #0]
 8022454:	f042 0208 	orr.w	r2, r2, #8
 8022458:	619a      	str	r2, [r3, #24]
}
 802245a:	bf00      	nop
 802245c:	3770      	adds	r7, #112	; 0x70
 802245e:	46bd      	mov	sp, r7
 8022460:	bd80      	pop	{r7, pc}
 8022462:	bf00      	nop
 8022464:	40008000 	.word	0x40008000

08022468 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8022468:	b580      	push	{r7, lr}
 802246a:	b0ac      	sub	sp, #176	; 0xb0
 802246c:	af00      	add	r7, sp, #0
 802246e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8022470:	687b      	ldr	r3, [r7, #4]
 8022472:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8022476:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 802247a:	687b      	ldr	r3, [r7, #4]
 802247c:	681b      	ldr	r3, [r3, #0]
 802247e:	69db      	ldr	r3, [r3, #28]
 8022480:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8022484:	687b      	ldr	r3, [r7, #4]
 8022486:	681b      	ldr	r3, [r3, #0]
 8022488:	681b      	ldr	r3, [r3, #0]
 802248a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 802248e:	687b      	ldr	r3, [r7, #4]
 8022490:	681b      	ldr	r3, [r3, #0]
 8022492:	689b      	ldr	r3, [r3, #8]
 8022494:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8022498:	687b      	ldr	r3, [r7, #4]
 802249a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802249e:	2b22      	cmp	r3, #34	; 0x22
 80224a0:	f040 8182 	bne.w	80227a8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80224a4:	687b      	ldr	r3, [r7, #4]
 80224a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80224aa:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80224ae:	e125      	b.n	80226fc <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80224b0:	687b      	ldr	r3, [r7, #4]
 80224b2:	681b      	ldr	r3, [r3, #0]
 80224b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80224b6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80224ba:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80224be:	b2d9      	uxtb	r1, r3
 80224c0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80224c4:	b2da      	uxtb	r2, r3
 80224c6:	687b      	ldr	r3, [r7, #4]
 80224c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80224ca:	400a      	ands	r2, r1
 80224cc:	b2d2      	uxtb	r2, r2
 80224ce:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80224d0:	687b      	ldr	r3, [r7, #4]
 80224d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80224d4:	1c5a      	adds	r2, r3, #1
 80224d6:	687b      	ldr	r3, [r7, #4]
 80224d8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80224da:	687b      	ldr	r3, [r7, #4]
 80224dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80224e0:	b29b      	uxth	r3, r3
 80224e2:	3b01      	subs	r3, #1
 80224e4:	b29a      	uxth	r2, r3
 80224e6:	687b      	ldr	r3, [r7, #4]
 80224e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80224ec:	687b      	ldr	r3, [r7, #4]
 80224ee:	681b      	ldr	r3, [r3, #0]
 80224f0:	69db      	ldr	r3, [r3, #28]
 80224f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80224f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80224fa:	f003 0307 	and.w	r3, r3, #7
 80224fe:	2b00      	cmp	r3, #0
 8022500:	d053      	beq.n	80225aa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8022502:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8022506:	f003 0301 	and.w	r3, r3, #1
 802250a:	2b00      	cmp	r3, #0
 802250c:	d011      	beq.n	8022532 <UART_RxISR_8BIT_FIFOEN+0xca>
 802250e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8022512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022516:	2b00      	cmp	r3, #0
 8022518:	d00b      	beq.n	8022532 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 802251a:	687b      	ldr	r3, [r7, #4]
 802251c:	681b      	ldr	r3, [r3, #0]
 802251e:	2201      	movs	r2, #1
 8022520:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8022522:	687b      	ldr	r3, [r7, #4]
 8022524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8022528:	f043 0201 	orr.w	r2, r3, #1
 802252c:	687b      	ldr	r3, [r7, #4]
 802252e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8022532:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8022536:	f003 0302 	and.w	r3, r3, #2
 802253a:	2b00      	cmp	r3, #0
 802253c:	d011      	beq.n	8022562 <UART_RxISR_8BIT_FIFOEN+0xfa>
 802253e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8022542:	f003 0301 	and.w	r3, r3, #1
 8022546:	2b00      	cmp	r3, #0
 8022548:	d00b      	beq.n	8022562 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 802254a:	687b      	ldr	r3, [r7, #4]
 802254c:	681b      	ldr	r3, [r3, #0]
 802254e:	2202      	movs	r2, #2
 8022550:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8022552:	687b      	ldr	r3, [r7, #4]
 8022554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8022558:	f043 0204 	orr.w	r2, r3, #4
 802255c:	687b      	ldr	r3, [r7, #4]
 802255e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8022562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8022566:	f003 0304 	and.w	r3, r3, #4
 802256a:	2b00      	cmp	r3, #0
 802256c:	d011      	beq.n	8022592 <UART_RxISR_8BIT_FIFOEN+0x12a>
 802256e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8022572:	f003 0301 	and.w	r3, r3, #1
 8022576:	2b00      	cmp	r3, #0
 8022578:	d00b      	beq.n	8022592 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 802257a:	687b      	ldr	r3, [r7, #4]
 802257c:	681b      	ldr	r3, [r3, #0]
 802257e:	2204      	movs	r2, #4
 8022580:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8022582:	687b      	ldr	r3, [r7, #4]
 8022584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8022588:	f043 0202 	orr.w	r2, r3, #2
 802258c:	687b      	ldr	r3, [r7, #4]
 802258e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8022592:	687b      	ldr	r3, [r7, #4]
 8022594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8022598:	2b00      	cmp	r3, #0
 802259a:	d006      	beq.n	80225aa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 802259c:	6878      	ldr	r0, [r7, #4]
 802259e:	f7fe ff17 	bl	80213d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80225a2:	687b      	ldr	r3, [r7, #4]
 80225a4:	2200      	movs	r2, #0
 80225a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80225aa:	687b      	ldr	r3, [r7, #4]
 80225ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80225b0:	b29b      	uxth	r3, r3
 80225b2:	2b00      	cmp	r3, #0
 80225b4:	f040 80a2 	bne.w	80226fc <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80225b8:	687b      	ldr	r3, [r7, #4]
 80225ba:	681b      	ldr	r3, [r3, #0]
 80225bc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80225be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80225c0:	e853 3f00 	ldrex	r3, [r3]
 80225c4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80225c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80225c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80225cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80225d0:	687b      	ldr	r3, [r7, #4]
 80225d2:	681b      	ldr	r3, [r3, #0]
 80225d4:	461a      	mov	r2, r3
 80225d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80225da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80225dc:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80225de:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80225e0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80225e2:	e841 2300 	strex	r3, r2, [r1]
 80225e6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80225e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80225ea:	2b00      	cmp	r3, #0
 80225ec:	d1e4      	bne.n	80225b8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80225ee:	687b      	ldr	r3, [r7, #4]
 80225f0:	681b      	ldr	r3, [r3, #0]
 80225f2:	3308      	adds	r3, #8
 80225f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80225f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80225f8:	e853 3f00 	ldrex	r3, [r3]
 80225fc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80225fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8022600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8022604:	f023 0301 	bic.w	r3, r3, #1
 8022608:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 802260c:	687b      	ldr	r3, [r7, #4]
 802260e:	681b      	ldr	r3, [r3, #0]
 8022610:	3308      	adds	r3, #8
 8022612:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8022616:	66ba      	str	r2, [r7, #104]	; 0x68
 8022618:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802261a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 802261c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 802261e:	e841 2300 	strex	r3, r2, [r1]
 8022622:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8022624:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8022626:	2b00      	cmp	r3, #0
 8022628:	d1e1      	bne.n	80225ee <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 802262a:	687b      	ldr	r3, [r7, #4]
 802262c:	2220      	movs	r2, #32
 802262e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8022632:	687b      	ldr	r3, [r7, #4]
 8022634:	2200      	movs	r2, #0
 8022636:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8022638:	687b      	ldr	r3, [r7, #4]
 802263a:	2200      	movs	r2, #0
 802263c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 802263e:	687b      	ldr	r3, [r7, #4]
 8022640:	681b      	ldr	r3, [r3, #0]
 8022642:	4a5f      	ldr	r2, [pc, #380]	; (80227c0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8022644:	4293      	cmp	r3, r2
 8022646:	d021      	beq.n	802268c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8022648:	687b      	ldr	r3, [r7, #4]
 802264a:	681b      	ldr	r3, [r3, #0]
 802264c:	685b      	ldr	r3, [r3, #4]
 802264e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8022652:	2b00      	cmp	r3, #0
 8022654:	d01a      	beq.n	802268c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8022656:	687b      	ldr	r3, [r7, #4]
 8022658:	681b      	ldr	r3, [r3, #0]
 802265a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802265c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802265e:	e853 3f00 	ldrex	r3, [r3]
 8022662:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8022664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8022666:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 802266a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 802266e:	687b      	ldr	r3, [r7, #4]
 8022670:	681b      	ldr	r3, [r3, #0]
 8022672:	461a      	mov	r2, r3
 8022674:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8022678:	657b      	str	r3, [r7, #84]	; 0x54
 802267a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802267c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 802267e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8022680:	e841 2300 	strex	r3, r2, [r1]
 8022684:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8022686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022688:	2b00      	cmp	r3, #0
 802268a:	d1e4      	bne.n	8022656 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802268c:	687b      	ldr	r3, [r7, #4]
 802268e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022690:	2b01      	cmp	r3, #1
 8022692:	d130      	bne.n	80226f6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022694:	687b      	ldr	r3, [r7, #4]
 8022696:	2200      	movs	r2, #0
 8022698:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802269a:	687b      	ldr	r3, [r7, #4]
 802269c:	681b      	ldr	r3, [r3, #0]
 802269e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80226a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80226a2:	e853 3f00 	ldrex	r3, [r3]
 80226a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80226a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80226aa:	f023 0310 	bic.w	r3, r3, #16
 80226ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80226b2:	687b      	ldr	r3, [r7, #4]
 80226b4:	681b      	ldr	r3, [r3, #0]
 80226b6:	461a      	mov	r2, r3
 80226b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80226bc:	643b      	str	r3, [r7, #64]	; 0x40
 80226be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80226c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80226c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80226c4:	e841 2300 	strex	r3, r2, [r1]
 80226c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80226ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80226cc:	2b00      	cmp	r3, #0
 80226ce:	d1e4      	bne.n	802269a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80226d0:	687b      	ldr	r3, [r7, #4]
 80226d2:	681b      	ldr	r3, [r3, #0]
 80226d4:	69db      	ldr	r3, [r3, #28]
 80226d6:	f003 0310 	and.w	r3, r3, #16
 80226da:	2b10      	cmp	r3, #16
 80226dc:	d103      	bne.n	80226e6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80226de:	687b      	ldr	r3, [r7, #4]
 80226e0:	681b      	ldr	r3, [r3, #0]
 80226e2:	2210      	movs	r2, #16
 80226e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80226e6:	687b      	ldr	r3, [r7, #4]
 80226e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80226ec:	4619      	mov	r1, r3
 80226ee:	6878      	ldr	r0, [r7, #4]
 80226f0:	f7fe fe78 	bl	80213e4 <HAL_UARTEx_RxEventCallback>
 80226f4:	e002      	b.n	80226fc <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80226f6:	6878      	ldr	r0, [r7, #4]
 80226f8:	f7e1 fe7c 	bl	80043f4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80226fc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8022700:	2b00      	cmp	r3, #0
 8022702:	d006      	beq.n	8022712 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8022704:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8022708:	f003 0320 	and.w	r3, r3, #32
 802270c:	2b00      	cmp	r3, #0
 802270e:	f47f aecf 	bne.w	80224b0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8022712:	687b      	ldr	r3, [r7, #4]
 8022714:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8022718:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 802271c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8022720:	2b00      	cmp	r3, #0
 8022722:	d049      	beq.n	80227b8 <UART_RxISR_8BIT_FIFOEN+0x350>
 8022724:	687b      	ldr	r3, [r7, #4]
 8022726:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 802272a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 802272e:	429a      	cmp	r2, r3
 8022730:	d242      	bcs.n	80227b8 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8022732:	687b      	ldr	r3, [r7, #4]
 8022734:	681b      	ldr	r3, [r3, #0]
 8022736:	3308      	adds	r3, #8
 8022738:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802273a:	6a3b      	ldr	r3, [r7, #32]
 802273c:	e853 3f00 	ldrex	r3, [r3]
 8022740:	61fb      	str	r3, [r7, #28]
   return(result);
 8022742:	69fb      	ldr	r3, [r7, #28]
 8022744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8022748:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802274c:	687b      	ldr	r3, [r7, #4]
 802274e:	681b      	ldr	r3, [r3, #0]
 8022750:	3308      	adds	r3, #8
 8022752:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8022756:	62fa      	str	r2, [r7, #44]	; 0x2c
 8022758:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802275a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802275c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802275e:	e841 2300 	strex	r3, r2, [r1]
 8022762:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8022764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022766:	2b00      	cmp	r3, #0
 8022768:	d1e3      	bne.n	8022732 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 802276a:	687b      	ldr	r3, [r7, #4]
 802276c:	4a15      	ldr	r2, [pc, #84]	; (80227c4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 802276e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8022770:	687b      	ldr	r3, [r7, #4]
 8022772:	681b      	ldr	r3, [r3, #0]
 8022774:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022776:	68fb      	ldr	r3, [r7, #12]
 8022778:	e853 3f00 	ldrex	r3, [r3]
 802277c:	60bb      	str	r3, [r7, #8]
   return(result);
 802277e:	68bb      	ldr	r3, [r7, #8]
 8022780:	f043 0320 	orr.w	r3, r3, #32
 8022784:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8022788:	687b      	ldr	r3, [r7, #4]
 802278a:	681b      	ldr	r3, [r3, #0]
 802278c:	461a      	mov	r2, r3
 802278e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8022792:	61bb      	str	r3, [r7, #24]
 8022794:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022796:	6979      	ldr	r1, [r7, #20]
 8022798:	69ba      	ldr	r2, [r7, #24]
 802279a:	e841 2300 	strex	r3, r2, [r1]
 802279e:	613b      	str	r3, [r7, #16]
   return(result);
 80227a0:	693b      	ldr	r3, [r7, #16]
 80227a2:	2b00      	cmp	r3, #0
 80227a4:	d1e4      	bne.n	8022770 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80227a6:	e007      	b.n	80227b8 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80227a8:	687b      	ldr	r3, [r7, #4]
 80227aa:	681b      	ldr	r3, [r3, #0]
 80227ac:	699a      	ldr	r2, [r3, #24]
 80227ae:	687b      	ldr	r3, [r7, #4]
 80227b0:	681b      	ldr	r3, [r3, #0]
 80227b2:	f042 0208 	orr.w	r2, r2, #8
 80227b6:	619a      	str	r2, [r3, #24]
}
 80227b8:	bf00      	nop
 80227ba:	37b0      	adds	r7, #176	; 0xb0
 80227bc:	46bd      	mov	sp, r7
 80227be:	bd80      	pop	{r7, pc}
 80227c0:	40008000 	.word	0x40008000
 80227c4:	080220f9 	.word	0x080220f9

080227c8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80227c8:	b580      	push	{r7, lr}
 80227ca:	b0ae      	sub	sp, #184	; 0xb8
 80227cc:	af00      	add	r7, sp, #0
 80227ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80227d0:	687b      	ldr	r3, [r7, #4]
 80227d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80227d6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80227da:	687b      	ldr	r3, [r7, #4]
 80227dc:	681b      	ldr	r3, [r3, #0]
 80227de:	69db      	ldr	r3, [r3, #28]
 80227e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80227e4:	687b      	ldr	r3, [r7, #4]
 80227e6:	681b      	ldr	r3, [r3, #0]
 80227e8:	681b      	ldr	r3, [r3, #0]
 80227ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80227ee:	687b      	ldr	r3, [r7, #4]
 80227f0:	681b      	ldr	r3, [r3, #0]
 80227f2:	689b      	ldr	r3, [r3, #8]
 80227f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80227f8:	687b      	ldr	r3, [r7, #4]
 80227fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80227fe:	2b22      	cmp	r3, #34	; 0x22
 8022800:	f040 8186 	bne.w	8022b10 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8022804:	687b      	ldr	r3, [r7, #4]
 8022806:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 802280a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 802280e:	e129      	b.n	8022a64 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8022810:	687b      	ldr	r3, [r7, #4]
 8022812:	681b      	ldr	r3, [r3, #0]
 8022814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022816:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 802281a:	687b      	ldr	r3, [r7, #4]
 802281c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802281e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8022822:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8022826:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 802282a:	4013      	ands	r3, r2
 802282c:	b29a      	uxth	r2, r3
 802282e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8022832:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8022834:	687b      	ldr	r3, [r7, #4]
 8022836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8022838:	1c9a      	adds	r2, r3, #2
 802283a:	687b      	ldr	r3, [r7, #4]
 802283c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 802283e:	687b      	ldr	r3, [r7, #4]
 8022840:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8022844:	b29b      	uxth	r3, r3
 8022846:	3b01      	subs	r3, #1
 8022848:	b29a      	uxth	r2, r3
 802284a:	687b      	ldr	r3, [r7, #4]
 802284c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8022850:	687b      	ldr	r3, [r7, #4]
 8022852:	681b      	ldr	r3, [r3, #0]
 8022854:	69db      	ldr	r3, [r3, #28]
 8022856:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 802285a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 802285e:	f003 0307 	and.w	r3, r3, #7
 8022862:	2b00      	cmp	r3, #0
 8022864:	d053      	beq.n	802290e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8022866:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 802286a:	f003 0301 	and.w	r3, r3, #1
 802286e:	2b00      	cmp	r3, #0
 8022870:	d011      	beq.n	8022896 <UART_RxISR_16BIT_FIFOEN+0xce>
 8022872:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8022876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802287a:	2b00      	cmp	r3, #0
 802287c:	d00b      	beq.n	8022896 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 802287e:	687b      	ldr	r3, [r7, #4]
 8022880:	681b      	ldr	r3, [r3, #0]
 8022882:	2201      	movs	r2, #1
 8022884:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8022886:	687b      	ldr	r3, [r7, #4]
 8022888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802288c:	f043 0201 	orr.w	r2, r3, #1
 8022890:	687b      	ldr	r3, [r7, #4]
 8022892:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8022896:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 802289a:	f003 0302 	and.w	r3, r3, #2
 802289e:	2b00      	cmp	r3, #0
 80228a0:	d011      	beq.n	80228c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80228a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80228a6:	f003 0301 	and.w	r3, r3, #1
 80228aa:	2b00      	cmp	r3, #0
 80228ac:	d00b      	beq.n	80228c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80228ae:	687b      	ldr	r3, [r7, #4]
 80228b0:	681b      	ldr	r3, [r3, #0]
 80228b2:	2202      	movs	r2, #2
 80228b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80228b6:	687b      	ldr	r3, [r7, #4]
 80228b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80228bc:	f043 0204 	orr.w	r2, r3, #4
 80228c0:	687b      	ldr	r3, [r7, #4]
 80228c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80228c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80228ca:	f003 0304 	and.w	r3, r3, #4
 80228ce:	2b00      	cmp	r3, #0
 80228d0:	d011      	beq.n	80228f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80228d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80228d6:	f003 0301 	and.w	r3, r3, #1
 80228da:	2b00      	cmp	r3, #0
 80228dc:	d00b      	beq.n	80228f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80228de:	687b      	ldr	r3, [r7, #4]
 80228e0:	681b      	ldr	r3, [r3, #0]
 80228e2:	2204      	movs	r2, #4
 80228e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80228e6:	687b      	ldr	r3, [r7, #4]
 80228e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80228ec:	f043 0202 	orr.w	r2, r3, #2
 80228f0:	687b      	ldr	r3, [r7, #4]
 80228f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80228f6:	687b      	ldr	r3, [r7, #4]
 80228f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80228fc:	2b00      	cmp	r3, #0
 80228fe:	d006      	beq.n	802290e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8022900:	6878      	ldr	r0, [r7, #4]
 8022902:	f7fe fd65 	bl	80213d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022906:	687b      	ldr	r3, [r7, #4]
 8022908:	2200      	movs	r2, #0
 802290a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 802290e:	687b      	ldr	r3, [r7, #4]
 8022910:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8022914:	b29b      	uxth	r3, r3
 8022916:	2b00      	cmp	r3, #0
 8022918:	f040 80a4 	bne.w	8022a64 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802291c:	687b      	ldr	r3, [r7, #4]
 802291e:	681b      	ldr	r3, [r3, #0]
 8022920:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8022924:	e853 3f00 	ldrex	r3, [r3]
 8022928:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 802292a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802292c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8022930:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8022934:	687b      	ldr	r3, [r7, #4]
 8022936:	681b      	ldr	r3, [r3, #0]
 8022938:	461a      	mov	r2, r3
 802293a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802293e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8022942:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022944:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8022946:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 802294a:	e841 2300 	strex	r3, r2, [r1]
 802294e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8022950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8022952:	2b00      	cmp	r3, #0
 8022954:	d1e2      	bne.n	802291c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8022956:	687b      	ldr	r3, [r7, #4]
 8022958:	681b      	ldr	r3, [r3, #0]
 802295a:	3308      	adds	r3, #8
 802295c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802295e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8022960:	e853 3f00 	ldrex	r3, [r3]
 8022964:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8022966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8022968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802296c:	f023 0301 	bic.w	r3, r3, #1
 8022970:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8022974:	687b      	ldr	r3, [r7, #4]
 8022976:	681b      	ldr	r3, [r3, #0]
 8022978:	3308      	adds	r3, #8
 802297a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 802297e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8022980:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022982:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8022984:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8022986:	e841 2300 	strex	r3, r2, [r1]
 802298a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 802298c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802298e:	2b00      	cmp	r3, #0
 8022990:	d1e1      	bne.n	8022956 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8022992:	687b      	ldr	r3, [r7, #4]
 8022994:	2220      	movs	r2, #32
 8022996:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 802299a:	687b      	ldr	r3, [r7, #4]
 802299c:	2200      	movs	r2, #0
 802299e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80229a0:	687b      	ldr	r3, [r7, #4]
 80229a2:	2200      	movs	r2, #0
 80229a4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80229a6:	687b      	ldr	r3, [r7, #4]
 80229a8:	681b      	ldr	r3, [r3, #0]
 80229aa:	4a5f      	ldr	r2, [pc, #380]	; (8022b28 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80229ac:	4293      	cmp	r3, r2
 80229ae:	d021      	beq.n	80229f4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80229b0:	687b      	ldr	r3, [r7, #4]
 80229b2:	681b      	ldr	r3, [r3, #0]
 80229b4:	685b      	ldr	r3, [r3, #4]
 80229b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80229ba:	2b00      	cmp	r3, #0
 80229bc:	d01a      	beq.n	80229f4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80229be:	687b      	ldr	r3, [r7, #4]
 80229c0:	681b      	ldr	r3, [r3, #0]
 80229c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80229c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80229c6:	e853 3f00 	ldrex	r3, [r3]
 80229ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80229cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80229ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80229d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80229d6:	687b      	ldr	r3, [r7, #4]
 80229d8:	681b      	ldr	r3, [r3, #0]
 80229da:	461a      	mov	r2, r3
 80229dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80229e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80229e2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80229e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80229e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80229e8:	e841 2300 	strex	r3, r2, [r1]
 80229ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80229ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80229f0:	2b00      	cmp	r3, #0
 80229f2:	d1e4      	bne.n	80229be <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80229f4:	687b      	ldr	r3, [r7, #4]
 80229f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80229f8:	2b01      	cmp	r3, #1
 80229fa:	d130      	bne.n	8022a5e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80229fc:	687b      	ldr	r3, [r7, #4]
 80229fe:	2200      	movs	r2, #0
 8022a00:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8022a02:	687b      	ldr	r3, [r7, #4]
 8022a04:	681b      	ldr	r3, [r3, #0]
 8022a06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022a0a:	e853 3f00 	ldrex	r3, [r3]
 8022a0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8022a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022a12:	f023 0310 	bic.w	r3, r3, #16
 8022a16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8022a1a:	687b      	ldr	r3, [r7, #4]
 8022a1c:	681b      	ldr	r3, [r3, #0]
 8022a1e:	461a      	mov	r2, r3
 8022a20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8022a24:	647b      	str	r3, [r7, #68]	; 0x44
 8022a26:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022a28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8022a2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8022a2c:	e841 2300 	strex	r3, r2, [r1]
 8022a30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8022a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022a34:	2b00      	cmp	r3, #0
 8022a36:	d1e4      	bne.n	8022a02 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8022a38:	687b      	ldr	r3, [r7, #4]
 8022a3a:	681b      	ldr	r3, [r3, #0]
 8022a3c:	69db      	ldr	r3, [r3, #28]
 8022a3e:	f003 0310 	and.w	r3, r3, #16
 8022a42:	2b10      	cmp	r3, #16
 8022a44:	d103      	bne.n	8022a4e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8022a46:	687b      	ldr	r3, [r7, #4]
 8022a48:	681b      	ldr	r3, [r3, #0]
 8022a4a:	2210      	movs	r2, #16
 8022a4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8022a4e:	687b      	ldr	r3, [r7, #4]
 8022a50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8022a54:	4619      	mov	r1, r3
 8022a56:	6878      	ldr	r0, [r7, #4]
 8022a58:	f7fe fcc4 	bl	80213e4 <HAL_UARTEx_RxEventCallback>
 8022a5c:	e002      	b.n	8022a64 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8022a5e:	6878      	ldr	r0, [r7, #4]
 8022a60:	f7e1 fcc8 	bl	80043f4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8022a64:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8022a68:	2b00      	cmp	r3, #0
 8022a6a:	d006      	beq.n	8022a7a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8022a6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8022a70:	f003 0320 	and.w	r3, r3, #32
 8022a74:	2b00      	cmp	r3, #0
 8022a76:	f47f aecb 	bne.w	8022810 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8022a7a:	687b      	ldr	r3, [r7, #4]
 8022a7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8022a80:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8022a84:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8022a88:	2b00      	cmp	r3, #0
 8022a8a:	d049      	beq.n	8022b20 <UART_RxISR_16BIT_FIFOEN+0x358>
 8022a8c:	687b      	ldr	r3, [r7, #4]
 8022a8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8022a92:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8022a96:	429a      	cmp	r2, r3
 8022a98:	d242      	bcs.n	8022b20 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8022a9a:	687b      	ldr	r3, [r7, #4]
 8022a9c:	681b      	ldr	r3, [r3, #0]
 8022a9e:	3308      	adds	r3, #8
 8022aa0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022aa4:	e853 3f00 	ldrex	r3, [r3]
 8022aa8:	623b      	str	r3, [r7, #32]
   return(result);
 8022aaa:	6a3b      	ldr	r3, [r7, #32]
 8022aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8022ab0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8022ab4:	687b      	ldr	r3, [r7, #4]
 8022ab6:	681b      	ldr	r3, [r3, #0]
 8022ab8:	3308      	adds	r3, #8
 8022aba:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8022abe:	633a      	str	r2, [r7, #48]	; 0x30
 8022ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022ac2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8022ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022ac6:	e841 2300 	strex	r3, r2, [r1]
 8022aca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8022acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022ace:	2b00      	cmp	r3, #0
 8022ad0:	d1e3      	bne.n	8022a9a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8022ad2:	687b      	ldr	r3, [r7, #4]
 8022ad4:	4a15      	ldr	r2, [pc, #84]	; (8022b2c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8022ad6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8022ad8:	687b      	ldr	r3, [r7, #4]
 8022ada:	681b      	ldr	r3, [r3, #0]
 8022adc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022ade:	693b      	ldr	r3, [r7, #16]
 8022ae0:	e853 3f00 	ldrex	r3, [r3]
 8022ae4:	60fb      	str	r3, [r7, #12]
   return(result);
 8022ae6:	68fb      	ldr	r3, [r7, #12]
 8022ae8:	f043 0320 	orr.w	r3, r3, #32
 8022aec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8022af0:	687b      	ldr	r3, [r7, #4]
 8022af2:	681b      	ldr	r3, [r3, #0]
 8022af4:	461a      	mov	r2, r3
 8022af6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8022afa:	61fb      	str	r3, [r7, #28]
 8022afc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022afe:	69b9      	ldr	r1, [r7, #24]
 8022b00:	69fa      	ldr	r2, [r7, #28]
 8022b02:	e841 2300 	strex	r3, r2, [r1]
 8022b06:	617b      	str	r3, [r7, #20]
   return(result);
 8022b08:	697b      	ldr	r3, [r7, #20]
 8022b0a:	2b00      	cmp	r3, #0
 8022b0c:	d1e4      	bne.n	8022ad8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8022b0e:	e007      	b.n	8022b20 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8022b10:	687b      	ldr	r3, [r7, #4]
 8022b12:	681b      	ldr	r3, [r3, #0]
 8022b14:	699a      	ldr	r2, [r3, #24]
 8022b16:	687b      	ldr	r3, [r7, #4]
 8022b18:	681b      	ldr	r3, [r3, #0]
 8022b1a:	f042 0208 	orr.w	r2, r2, #8
 8022b1e:	619a      	str	r2, [r3, #24]
}
 8022b20:	bf00      	nop
 8022b22:	37b8      	adds	r7, #184	; 0xb8
 8022b24:	46bd      	mov	sp, r7
 8022b26:	bd80      	pop	{r7, pc}
 8022b28:	40008000 	.word	0x40008000
 8022b2c:	080222b1 	.word	0x080222b1

08022b30 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8022b30:	b480      	push	{r7}
 8022b32:	b083      	sub	sp, #12
 8022b34:	af00      	add	r7, sp, #0
 8022b36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8022b38:	bf00      	nop
 8022b3a:	370c      	adds	r7, #12
 8022b3c:	46bd      	mov	sp, r7
 8022b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b42:	4770      	bx	lr

08022b44 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8022b44:	b480      	push	{r7}
 8022b46:	b083      	sub	sp, #12
 8022b48:	af00      	add	r7, sp, #0
 8022b4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8022b4c:	bf00      	nop
 8022b4e:	370c      	adds	r7, #12
 8022b50:	46bd      	mov	sp, r7
 8022b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b56:	4770      	bx	lr

08022b58 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8022b58:	b480      	push	{r7}
 8022b5a:	b083      	sub	sp, #12
 8022b5c:	af00      	add	r7, sp, #0
 8022b5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8022b60:	bf00      	nop
 8022b62:	370c      	adds	r7, #12
 8022b64:	46bd      	mov	sp, r7
 8022b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b6a:	4770      	bx	lr

08022b6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8022b6c:	b480      	push	{r7}
 8022b6e:	b085      	sub	sp, #20
 8022b70:	af00      	add	r7, sp, #0
 8022b72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8022b74:	687b      	ldr	r3, [r7, #4]
 8022b76:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8022b7a:	2b01      	cmp	r3, #1
 8022b7c:	d101      	bne.n	8022b82 <HAL_UARTEx_DisableFifoMode+0x16>
 8022b7e:	2302      	movs	r3, #2
 8022b80:	e027      	b.n	8022bd2 <HAL_UARTEx_DisableFifoMode+0x66>
 8022b82:	687b      	ldr	r3, [r7, #4]
 8022b84:	2201      	movs	r2, #1
 8022b86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8022b8a:	687b      	ldr	r3, [r7, #4]
 8022b8c:	2224      	movs	r2, #36	; 0x24
 8022b8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8022b92:	687b      	ldr	r3, [r7, #4]
 8022b94:	681b      	ldr	r3, [r3, #0]
 8022b96:	681b      	ldr	r3, [r3, #0]
 8022b98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8022b9a:	687b      	ldr	r3, [r7, #4]
 8022b9c:	681b      	ldr	r3, [r3, #0]
 8022b9e:	681a      	ldr	r2, [r3, #0]
 8022ba0:	687b      	ldr	r3, [r7, #4]
 8022ba2:	681b      	ldr	r3, [r3, #0]
 8022ba4:	f022 0201 	bic.w	r2, r2, #1
 8022ba8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8022baa:	68fb      	ldr	r3, [r7, #12]
 8022bac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8022bb0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8022bb2:	687b      	ldr	r3, [r7, #4]
 8022bb4:	2200      	movs	r2, #0
 8022bb6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8022bb8:	687b      	ldr	r3, [r7, #4]
 8022bba:	681b      	ldr	r3, [r3, #0]
 8022bbc:	68fa      	ldr	r2, [r7, #12]
 8022bbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8022bc0:	687b      	ldr	r3, [r7, #4]
 8022bc2:	2220      	movs	r2, #32
 8022bc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8022bc8:	687b      	ldr	r3, [r7, #4]
 8022bca:	2200      	movs	r2, #0
 8022bcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8022bd0:	2300      	movs	r3, #0
}
 8022bd2:	4618      	mov	r0, r3
 8022bd4:	3714      	adds	r7, #20
 8022bd6:	46bd      	mov	sp, r7
 8022bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bdc:	4770      	bx	lr

08022bde <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8022bde:	b580      	push	{r7, lr}
 8022be0:	b084      	sub	sp, #16
 8022be2:	af00      	add	r7, sp, #0
 8022be4:	6078      	str	r0, [r7, #4]
 8022be6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8022be8:	687b      	ldr	r3, [r7, #4]
 8022bea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8022bee:	2b01      	cmp	r3, #1
 8022bf0:	d101      	bne.n	8022bf6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8022bf2:	2302      	movs	r3, #2
 8022bf4:	e02d      	b.n	8022c52 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8022bf6:	687b      	ldr	r3, [r7, #4]
 8022bf8:	2201      	movs	r2, #1
 8022bfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8022bfe:	687b      	ldr	r3, [r7, #4]
 8022c00:	2224      	movs	r2, #36	; 0x24
 8022c02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8022c06:	687b      	ldr	r3, [r7, #4]
 8022c08:	681b      	ldr	r3, [r3, #0]
 8022c0a:	681b      	ldr	r3, [r3, #0]
 8022c0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8022c0e:	687b      	ldr	r3, [r7, #4]
 8022c10:	681b      	ldr	r3, [r3, #0]
 8022c12:	681a      	ldr	r2, [r3, #0]
 8022c14:	687b      	ldr	r3, [r7, #4]
 8022c16:	681b      	ldr	r3, [r3, #0]
 8022c18:	f022 0201 	bic.w	r2, r2, #1
 8022c1c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8022c1e:	687b      	ldr	r3, [r7, #4]
 8022c20:	681b      	ldr	r3, [r3, #0]
 8022c22:	689b      	ldr	r3, [r3, #8]
 8022c24:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8022c28:	687b      	ldr	r3, [r7, #4]
 8022c2a:	681b      	ldr	r3, [r3, #0]
 8022c2c:	683a      	ldr	r2, [r7, #0]
 8022c2e:	430a      	orrs	r2, r1
 8022c30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8022c32:	6878      	ldr	r0, [r7, #4]
 8022c34:	f000 f850 	bl	8022cd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8022c38:	687b      	ldr	r3, [r7, #4]
 8022c3a:	681b      	ldr	r3, [r3, #0]
 8022c3c:	68fa      	ldr	r2, [r7, #12]
 8022c3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8022c40:	687b      	ldr	r3, [r7, #4]
 8022c42:	2220      	movs	r2, #32
 8022c44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8022c48:	687b      	ldr	r3, [r7, #4]
 8022c4a:	2200      	movs	r2, #0
 8022c4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8022c50:	2300      	movs	r3, #0
}
 8022c52:	4618      	mov	r0, r3
 8022c54:	3710      	adds	r7, #16
 8022c56:	46bd      	mov	sp, r7
 8022c58:	bd80      	pop	{r7, pc}

08022c5a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8022c5a:	b580      	push	{r7, lr}
 8022c5c:	b084      	sub	sp, #16
 8022c5e:	af00      	add	r7, sp, #0
 8022c60:	6078      	str	r0, [r7, #4]
 8022c62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8022c64:	687b      	ldr	r3, [r7, #4]
 8022c66:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8022c6a:	2b01      	cmp	r3, #1
 8022c6c:	d101      	bne.n	8022c72 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8022c6e:	2302      	movs	r3, #2
 8022c70:	e02d      	b.n	8022cce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8022c72:	687b      	ldr	r3, [r7, #4]
 8022c74:	2201      	movs	r2, #1
 8022c76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8022c7a:	687b      	ldr	r3, [r7, #4]
 8022c7c:	2224      	movs	r2, #36	; 0x24
 8022c7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8022c82:	687b      	ldr	r3, [r7, #4]
 8022c84:	681b      	ldr	r3, [r3, #0]
 8022c86:	681b      	ldr	r3, [r3, #0]
 8022c88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8022c8a:	687b      	ldr	r3, [r7, #4]
 8022c8c:	681b      	ldr	r3, [r3, #0]
 8022c8e:	681a      	ldr	r2, [r3, #0]
 8022c90:	687b      	ldr	r3, [r7, #4]
 8022c92:	681b      	ldr	r3, [r3, #0]
 8022c94:	f022 0201 	bic.w	r2, r2, #1
 8022c98:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8022c9a:	687b      	ldr	r3, [r7, #4]
 8022c9c:	681b      	ldr	r3, [r3, #0]
 8022c9e:	689b      	ldr	r3, [r3, #8]
 8022ca0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8022ca4:	687b      	ldr	r3, [r7, #4]
 8022ca6:	681b      	ldr	r3, [r3, #0]
 8022ca8:	683a      	ldr	r2, [r7, #0]
 8022caa:	430a      	orrs	r2, r1
 8022cac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8022cae:	6878      	ldr	r0, [r7, #4]
 8022cb0:	f000 f812 	bl	8022cd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8022cb4:	687b      	ldr	r3, [r7, #4]
 8022cb6:	681b      	ldr	r3, [r3, #0]
 8022cb8:	68fa      	ldr	r2, [r7, #12]
 8022cba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8022cbc:	687b      	ldr	r3, [r7, #4]
 8022cbe:	2220      	movs	r2, #32
 8022cc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8022cc4:	687b      	ldr	r3, [r7, #4]
 8022cc6:	2200      	movs	r2, #0
 8022cc8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8022ccc:	2300      	movs	r3, #0
}
 8022cce:	4618      	mov	r0, r3
 8022cd0:	3710      	adds	r7, #16
 8022cd2:	46bd      	mov	sp, r7
 8022cd4:	bd80      	pop	{r7, pc}
	...

08022cd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8022cd8:	b480      	push	{r7}
 8022cda:	b085      	sub	sp, #20
 8022cdc:	af00      	add	r7, sp, #0
 8022cde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8022ce0:	687b      	ldr	r3, [r7, #4]
 8022ce2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8022ce4:	2b00      	cmp	r3, #0
 8022ce6:	d108      	bne.n	8022cfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8022ce8:	687b      	ldr	r3, [r7, #4]
 8022cea:	2201      	movs	r2, #1
 8022cec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8022cf0:	687b      	ldr	r3, [r7, #4]
 8022cf2:	2201      	movs	r2, #1
 8022cf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8022cf8:	e031      	b.n	8022d5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8022cfa:	2308      	movs	r3, #8
 8022cfc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8022cfe:	2308      	movs	r3, #8
 8022d00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8022d02:	687b      	ldr	r3, [r7, #4]
 8022d04:	681b      	ldr	r3, [r3, #0]
 8022d06:	689b      	ldr	r3, [r3, #8]
 8022d08:	0e5b      	lsrs	r3, r3, #25
 8022d0a:	b2db      	uxtb	r3, r3
 8022d0c:	f003 0307 	and.w	r3, r3, #7
 8022d10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8022d12:	687b      	ldr	r3, [r7, #4]
 8022d14:	681b      	ldr	r3, [r3, #0]
 8022d16:	689b      	ldr	r3, [r3, #8]
 8022d18:	0f5b      	lsrs	r3, r3, #29
 8022d1a:	b2db      	uxtb	r3, r3
 8022d1c:	f003 0307 	and.w	r3, r3, #7
 8022d20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8022d22:	7bbb      	ldrb	r3, [r7, #14]
 8022d24:	7b3a      	ldrb	r2, [r7, #12]
 8022d26:	4911      	ldr	r1, [pc, #68]	; (8022d6c <UARTEx_SetNbDataToProcess+0x94>)
 8022d28:	5c8a      	ldrb	r2, [r1, r2]
 8022d2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8022d2e:	7b3a      	ldrb	r2, [r7, #12]
 8022d30:	490f      	ldr	r1, [pc, #60]	; (8022d70 <UARTEx_SetNbDataToProcess+0x98>)
 8022d32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8022d34:	fb93 f3f2 	sdiv	r3, r3, r2
 8022d38:	b29a      	uxth	r2, r3
 8022d3a:	687b      	ldr	r3, [r7, #4]
 8022d3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8022d40:	7bfb      	ldrb	r3, [r7, #15]
 8022d42:	7b7a      	ldrb	r2, [r7, #13]
 8022d44:	4909      	ldr	r1, [pc, #36]	; (8022d6c <UARTEx_SetNbDataToProcess+0x94>)
 8022d46:	5c8a      	ldrb	r2, [r1, r2]
 8022d48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8022d4c:	7b7a      	ldrb	r2, [r7, #13]
 8022d4e:	4908      	ldr	r1, [pc, #32]	; (8022d70 <UARTEx_SetNbDataToProcess+0x98>)
 8022d50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8022d52:	fb93 f3f2 	sdiv	r3, r3, r2
 8022d56:	b29a      	uxth	r2, r3
 8022d58:	687b      	ldr	r3, [r7, #4]
 8022d5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8022d5e:	bf00      	nop
 8022d60:	3714      	adds	r7, #20
 8022d62:	46bd      	mov	sp, r7
 8022d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d68:	4770      	bx	lr
 8022d6a:	bf00      	nop
 8022d6c:	08029920 	.word	0x08029920
 8022d70:	08029928 	.word	0x08029928

08022d74 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8022d74:	b480      	push	{r7}
 8022d76:	b08b      	sub	sp, #44	; 0x2c
 8022d78:	af00      	add	r7, sp, #0
 8022d7a:	60f8      	str	r0, [r7, #12]
 8022d7c:	60b9      	str	r1, [r7, #8]
 8022d7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8022d80:	68fb      	ldr	r3, [r7, #12]
 8022d82:	681a      	ldr	r2, [r3, #0]
 8022d84:	68bb      	ldr	r3, [r7, #8]
 8022d86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8022d88:	697b      	ldr	r3, [r7, #20]
 8022d8a:	fa93 f3a3 	rbit	r3, r3
 8022d8e:	613b      	str	r3, [r7, #16]
  return result;
 8022d90:	693b      	ldr	r3, [r7, #16]
 8022d92:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8022d94:	69bb      	ldr	r3, [r7, #24]
 8022d96:	2b00      	cmp	r3, #0
 8022d98:	d101      	bne.n	8022d9e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8022d9a:	2320      	movs	r3, #32
 8022d9c:	e003      	b.n	8022da6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8022d9e:	69bb      	ldr	r3, [r7, #24]
 8022da0:	fab3 f383 	clz	r3, r3
 8022da4:	b2db      	uxtb	r3, r3
 8022da6:	005b      	lsls	r3, r3, #1
 8022da8:	2103      	movs	r1, #3
 8022daa:	fa01 f303 	lsl.w	r3, r1, r3
 8022dae:	43db      	mvns	r3, r3
 8022db0:	401a      	ands	r2, r3
 8022db2:	68bb      	ldr	r3, [r7, #8]
 8022db4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8022db6:	6a3b      	ldr	r3, [r7, #32]
 8022db8:	fa93 f3a3 	rbit	r3, r3
 8022dbc:	61fb      	str	r3, [r7, #28]
  return result;
 8022dbe:	69fb      	ldr	r3, [r7, #28]
 8022dc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8022dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022dc4:	2b00      	cmp	r3, #0
 8022dc6:	d101      	bne.n	8022dcc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8022dc8:	2320      	movs	r3, #32
 8022dca:	e003      	b.n	8022dd4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8022dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022dce:	fab3 f383 	clz	r3, r3
 8022dd2:	b2db      	uxtb	r3, r3
 8022dd4:	005b      	lsls	r3, r3, #1
 8022dd6:	6879      	ldr	r1, [r7, #4]
 8022dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8022ddc:	431a      	orrs	r2, r3
 8022dde:	68fb      	ldr	r3, [r7, #12]
 8022de0:	601a      	str	r2, [r3, #0]
}
 8022de2:	bf00      	nop
 8022de4:	372c      	adds	r7, #44	; 0x2c
 8022de6:	46bd      	mov	sp, r7
 8022de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022dec:	4770      	bx	lr

08022dee <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8022dee:	b480      	push	{r7}
 8022df0:	b085      	sub	sp, #20
 8022df2:	af00      	add	r7, sp, #0
 8022df4:	60f8      	str	r0, [r7, #12]
 8022df6:	60b9      	str	r1, [r7, #8]
 8022df8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8022dfa:	68fb      	ldr	r3, [r7, #12]
 8022dfc:	685a      	ldr	r2, [r3, #4]
 8022dfe:	68bb      	ldr	r3, [r7, #8]
 8022e00:	43db      	mvns	r3, r3
 8022e02:	401a      	ands	r2, r3
 8022e04:	68bb      	ldr	r3, [r7, #8]
 8022e06:	6879      	ldr	r1, [r7, #4]
 8022e08:	fb01 f303 	mul.w	r3, r1, r3
 8022e0c:	431a      	orrs	r2, r3
 8022e0e:	68fb      	ldr	r3, [r7, #12]
 8022e10:	605a      	str	r2, [r3, #4]
}
 8022e12:	bf00      	nop
 8022e14:	3714      	adds	r7, #20
 8022e16:	46bd      	mov	sp, r7
 8022e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e1c:	4770      	bx	lr

08022e1e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8022e1e:	b480      	push	{r7}
 8022e20:	b08b      	sub	sp, #44	; 0x2c
 8022e22:	af00      	add	r7, sp, #0
 8022e24:	60f8      	str	r0, [r7, #12]
 8022e26:	60b9      	str	r1, [r7, #8]
 8022e28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8022e2a:	68fb      	ldr	r3, [r7, #12]
 8022e2c:	689a      	ldr	r2, [r3, #8]
 8022e2e:	68bb      	ldr	r3, [r7, #8]
 8022e30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8022e32:	697b      	ldr	r3, [r7, #20]
 8022e34:	fa93 f3a3 	rbit	r3, r3
 8022e38:	613b      	str	r3, [r7, #16]
  return result;
 8022e3a:	693b      	ldr	r3, [r7, #16]
 8022e3c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8022e3e:	69bb      	ldr	r3, [r7, #24]
 8022e40:	2b00      	cmp	r3, #0
 8022e42:	d101      	bne.n	8022e48 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8022e44:	2320      	movs	r3, #32
 8022e46:	e003      	b.n	8022e50 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8022e48:	69bb      	ldr	r3, [r7, #24]
 8022e4a:	fab3 f383 	clz	r3, r3
 8022e4e:	b2db      	uxtb	r3, r3
 8022e50:	005b      	lsls	r3, r3, #1
 8022e52:	2103      	movs	r1, #3
 8022e54:	fa01 f303 	lsl.w	r3, r1, r3
 8022e58:	43db      	mvns	r3, r3
 8022e5a:	401a      	ands	r2, r3
 8022e5c:	68bb      	ldr	r3, [r7, #8]
 8022e5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8022e60:	6a3b      	ldr	r3, [r7, #32]
 8022e62:	fa93 f3a3 	rbit	r3, r3
 8022e66:	61fb      	str	r3, [r7, #28]
  return result;
 8022e68:	69fb      	ldr	r3, [r7, #28]
 8022e6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8022e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022e6e:	2b00      	cmp	r3, #0
 8022e70:	d101      	bne.n	8022e76 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8022e72:	2320      	movs	r3, #32
 8022e74:	e003      	b.n	8022e7e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8022e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022e78:	fab3 f383 	clz	r3, r3
 8022e7c:	b2db      	uxtb	r3, r3
 8022e7e:	005b      	lsls	r3, r3, #1
 8022e80:	6879      	ldr	r1, [r7, #4]
 8022e82:	fa01 f303 	lsl.w	r3, r1, r3
 8022e86:	431a      	orrs	r2, r3
 8022e88:	68fb      	ldr	r3, [r7, #12]
 8022e8a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8022e8c:	bf00      	nop
 8022e8e:	372c      	adds	r7, #44	; 0x2c
 8022e90:	46bd      	mov	sp, r7
 8022e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e96:	4770      	bx	lr

08022e98 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8022e98:	b480      	push	{r7}
 8022e9a:	b08b      	sub	sp, #44	; 0x2c
 8022e9c:	af00      	add	r7, sp, #0
 8022e9e:	60f8      	str	r0, [r7, #12]
 8022ea0:	60b9      	str	r1, [r7, #8]
 8022ea2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8022ea4:	68fb      	ldr	r3, [r7, #12]
 8022ea6:	68da      	ldr	r2, [r3, #12]
 8022ea8:	68bb      	ldr	r3, [r7, #8]
 8022eaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8022eac:	697b      	ldr	r3, [r7, #20]
 8022eae:	fa93 f3a3 	rbit	r3, r3
 8022eb2:	613b      	str	r3, [r7, #16]
  return result;
 8022eb4:	693b      	ldr	r3, [r7, #16]
 8022eb6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8022eb8:	69bb      	ldr	r3, [r7, #24]
 8022eba:	2b00      	cmp	r3, #0
 8022ebc:	d101      	bne.n	8022ec2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8022ebe:	2320      	movs	r3, #32
 8022ec0:	e003      	b.n	8022eca <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8022ec2:	69bb      	ldr	r3, [r7, #24]
 8022ec4:	fab3 f383 	clz	r3, r3
 8022ec8:	b2db      	uxtb	r3, r3
 8022eca:	005b      	lsls	r3, r3, #1
 8022ecc:	2103      	movs	r1, #3
 8022ece:	fa01 f303 	lsl.w	r3, r1, r3
 8022ed2:	43db      	mvns	r3, r3
 8022ed4:	401a      	ands	r2, r3
 8022ed6:	68bb      	ldr	r3, [r7, #8]
 8022ed8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8022eda:	6a3b      	ldr	r3, [r7, #32]
 8022edc:	fa93 f3a3 	rbit	r3, r3
 8022ee0:	61fb      	str	r3, [r7, #28]
  return result;
 8022ee2:	69fb      	ldr	r3, [r7, #28]
 8022ee4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8022ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022ee8:	2b00      	cmp	r3, #0
 8022eea:	d101      	bne.n	8022ef0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8022eec:	2320      	movs	r3, #32
 8022eee:	e003      	b.n	8022ef8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8022ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022ef2:	fab3 f383 	clz	r3, r3
 8022ef6:	b2db      	uxtb	r3, r3
 8022ef8:	005b      	lsls	r3, r3, #1
 8022efa:	6879      	ldr	r1, [r7, #4]
 8022efc:	fa01 f303 	lsl.w	r3, r1, r3
 8022f00:	431a      	orrs	r2, r3
 8022f02:	68fb      	ldr	r3, [r7, #12]
 8022f04:	60da      	str	r2, [r3, #12]
}
 8022f06:	bf00      	nop
 8022f08:	372c      	adds	r7, #44	; 0x2c
 8022f0a:	46bd      	mov	sp, r7
 8022f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f10:	4770      	bx	lr

08022f12 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8022f12:	b480      	push	{r7}
 8022f14:	b08b      	sub	sp, #44	; 0x2c
 8022f16:	af00      	add	r7, sp, #0
 8022f18:	60f8      	str	r0, [r7, #12]
 8022f1a:	60b9      	str	r1, [r7, #8]
 8022f1c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8022f1e:	68fb      	ldr	r3, [r7, #12]
 8022f20:	6a1a      	ldr	r2, [r3, #32]
 8022f22:	68bb      	ldr	r3, [r7, #8]
 8022f24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8022f26:	697b      	ldr	r3, [r7, #20]
 8022f28:	fa93 f3a3 	rbit	r3, r3
 8022f2c:	613b      	str	r3, [r7, #16]
  return result;
 8022f2e:	693b      	ldr	r3, [r7, #16]
 8022f30:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8022f32:	69bb      	ldr	r3, [r7, #24]
 8022f34:	2b00      	cmp	r3, #0
 8022f36:	d101      	bne.n	8022f3c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8022f38:	2320      	movs	r3, #32
 8022f3a:	e003      	b.n	8022f44 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8022f3c:	69bb      	ldr	r3, [r7, #24]
 8022f3e:	fab3 f383 	clz	r3, r3
 8022f42:	b2db      	uxtb	r3, r3
 8022f44:	009b      	lsls	r3, r3, #2
 8022f46:	210f      	movs	r1, #15
 8022f48:	fa01 f303 	lsl.w	r3, r1, r3
 8022f4c:	43db      	mvns	r3, r3
 8022f4e:	401a      	ands	r2, r3
 8022f50:	68bb      	ldr	r3, [r7, #8]
 8022f52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8022f54:	6a3b      	ldr	r3, [r7, #32]
 8022f56:	fa93 f3a3 	rbit	r3, r3
 8022f5a:	61fb      	str	r3, [r7, #28]
  return result;
 8022f5c:	69fb      	ldr	r3, [r7, #28]
 8022f5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8022f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022f62:	2b00      	cmp	r3, #0
 8022f64:	d101      	bne.n	8022f6a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8022f66:	2320      	movs	r3, #32
 8022f68:	e003      	b.n	8022f72 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8022f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022f6c:	fab3 f383 	clz	r3, r3
 8022f70:	b2db      	uxtb	r3, r3
 8022f72:	009b      	lsls	r3, r3, #2
 8022f74:	6879      	ldr	r1, [r7, #4]
 8022f76:	fa01 f303 	lsl.w	r3, r1, r3
 8022f7a:	431a      	orrs	r2, r3
 8022f7c:	68fb      	ldr	r3, [r7, #12]
 8022f7e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8022f80:	bf00      	nop
 8022f82:	372c      	adds	r7, #44	; 0x2c
 8022f84:	46bd      	mov	sp, r7
 8022f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f8a:	4770      	bx	lr

08022f8c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8022f8c:	b480      	push	{r7}
 8022f8e:	b08b      	sub	sp, #44	; 0x2c
 8022f90:	af00      	add	r7, sp, #0
 8022f92:	60f8      	str	r0, [r7, #12]
 8022f94:	60b9      	str	r1, [r7, #8]
 8022f96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8022f98:	68fb      	ldr	r3, [r7, #12]
 8022f9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8022f9c:	68bb      	ldr	r3, [r7, #8]
 8022f9e:	0a1b      	lsrs	r3, r3, #8
 8022fa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8022fa2:	697b      	ldr	r3, [r7, #20]
 8022fa4:	fa93 f3a3 	rbit	r3, r3
 8022fa8:	613b      	str	r3, [r7, #16]
  return result;
 8022faa:	693b      	ldr	r3, [r7, #16]
 8022fac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8022fae:	69bb      	ldr	r3, [r7, #24]
 8022fb0:	2b00      	cmp	r3, #0
 8022fb2:	d101      	bne.n	8022fb8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8022fb4:	2320      	movs	r3, #32
 8022fb6:	e003      	b.n	8022fc0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8022fb8:	69bb      	ldr	r3, [r7, #24]
 8022fba:	fab3 f383 	clz	r3, r3
 8022fbe:	b2db      	uxtb	r3, r3
 8022fc0:	009b      	lsls	r3, r3, #2
 8022fc2:	210f      	movs	r1, #15
 8022fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8022fc8:	43db      	mvns	r3, r3
 8022fca:	401a      	ands	r2, r3
 8022fcc:	68bb      	ldr	r3, [r7, #8]
 8022fce:	0a1b      	lsrs	r3, r3, #8
 8022fd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8022fd2:	6a3b      	ldr	r3, [r7, #32]
 8022fd4:	fa93 f3a3 	rbit	r3, r3
 8022fd8:	61fb      	str	r3, [r7, #28]
  return result;
 8022fda:	69fb      	ldr	r3, [r7, #28]
 8022fdc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8022fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022fe0:	2b00      	cmp	r3, #0
 8022fe2:	d101      	bne.n	8022fe8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8022fe4:	2320      	movs	r3, #32
 8022fe6:	e003      	b.n	8022ff0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8022fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022fea:	fab3 f383 	clz	r3, r3
 8022fee:	b2db      	uxtb	r3, r3
 8022ff0:	009b      	lsls	r3, r3, #2
 8022ff2:	6879      	ldr	r1, [r7, #4]
 8022ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8022ff8:	431a      	orrs	r2, r3
 8022ffa:	68fb      	ldr	r3, [r7, #12]
 8022ffc:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8022ffe:	bf00      	nop
 8023000:	372c      	adds	r7, #44	; 0x2c
 8023002:	46bd      	mov	sp, r7
 8023004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023008:	4770      	bx	lr

0802300a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 802300a:	b580      	push	{r7, lr}
 802300c:	b088      	sub	sp, #32
 802300e:	af00      	add	r7, sp, #0
 8023010:	6078      	str	r0, [r7, #4]
 8023012:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8023014:	683b      	ldr	r3, [r7, #0]
 8023016:	681b      	ldr	r3, [r3, #0]
 8023018:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 802301a:	693b      	ldr	r3, [r7, #16]
 802301c:	fa93 f3a3 	rbit	r3, r3
 8023020:	60fb      	str	r3, [r7, #12]
  return result;
 8023022:	68fb      	ldr	r3, [r7, #12]
 8023024:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8023026:	697b      	ldr	r3, [r7, #20]
 8023028:	2b00      	cmp	r3, #0
 802302a:	d101      	bne.n	8023030 <LL_GPIO_Init+0x26>
    return 32U;
 802302c:	2320      	movs	r3, #32
 802302e:	e003      	b.n	8023038 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8023030:	697b      	ldr	r3, [r7, #20]
 8023032:	fab3 f383 	clz	r3, r3
 8023036:	b2db      	uxtb	r3, r3
 8023038:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 802303a:	e047      	b.n	80230cc <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 802303c:	683b      	ldr	r3, [r7, #0]
 802303e:	681a      	ldr	r2, [r3, #0]
 8023040:	2101      	movs	r1, #1
 8023042:	69fb      	ldr	r3, [r7, #28]
 8023044:	fa01 f303 	lsl.w	r3, r1, r3
 8023048:	4013      	ands	r3, r2
 802304a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 802304c:	69bb      	ldr	r3, [r7, #24]
 802304e:	2b00      	cmp	r3, #0
 8023050:	d039      	beq.n	80230c6 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8023052:	683b      	ldr	r3, [r7, #0]
 8023054:	685b      	ldr	r3, [r3, #4]
 8023056:	2b01      	cmp	r3, #1
 8023058:	d003      	beq.n	8023062 <LL_GPIO_Init+0x58>
 802305a:	683b      	ldr	r3, [r7, #0]
 802305c:	685b      	ldr	r3, [r3, #4]
 802305e:	2b02      	cmp	r3, #2
 8023060:	d10d      	bne.n	802307e <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8023062:	683b      	ldr	r3, [r7, #0]
 8023064:	689b      	ldr	r3, [r3, #8]
 8023066:	461a      	mov	r2, r3
 8023068:	69b9      	ldr	r1, [r7, #24]
 802306a:	6878      	ldr	r0, [r7, #4]
 802306c:	f7ff fed7 	bl	8022e1e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8023070:	683b      	ldr	r3, [r7, #0]
 8023072:	68db      	ldr	r3, [r3, #12]
 8023074:	461a      	mov	r2, r3
 8023076:	69b9      	ldr	r1, [r7, #24]
 8023078:	6878      	ldr	r0, [r7, #4]
 802307a:	f7ff feb8 	bl	8022dee <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 802307e:	683b      	ldr	r3, [r7, #0]
 8023080:	691b      	ldr	r3, [r3, #16]
 8023082:	461a      	mov	r2, r3
 8023084:	69b9      	ldr	r1, [r7, #24]
 8023086:	6878      	ldr	r0, [r7, #4]
 8023088:	f7ff ff06 	bl	8022e98 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 802308c:	683b      	ldr	r3, [r7, #0]
 802308e:	685b      	ldr	r3, [r3, #4]
 8023090:	2b02      	cmp	r3, #2
 8023092:	d111      	bne.n	80230b8 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8023094:	69bb      	ldr	r3, [r7, #24]
 8023096:	2bff      	cmp	r3, #255	; 0xff
 8023098:	d807      	bhi.n	80230aa <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 802309a:	683b      	ldr	r3, [r7, #0]
 802309c:	695b      	ldr	r3, [r3, #20]
 802309e:	461a      	mov	r2, r3
 80230a0:	69b9      	ldr	r1, [r7, #24]
 80230a2:	6878      	ldr	r0, [r7, #4]
 80230a4:	f7ff ff35 	bl	8022f12 <LL_GPIO_SetAFPin_0_7>
 80230a8:	e006      	b.n	80230b8 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80230aa:	683b      	ldr	r3, [r7, #0]
 80230ac:	695b      	ldr	r3, [r3, #20]
 80230ae:	461a      	mov	r2, r3
 80230b0:	69b9      	ldr	r1, [r7, #24]
 80230b2:	6878      	ldr	r0, [r7, #4]
 80230b4:	f7ff ff6a 	bl	8022f8c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80230b8:	683b      	ldr	r3, [r7, #0]
 80230ba:	685b      	ldr	r3, [r3, #4]
 80230bc:	461a      	mov	r2, r3
 80230be:	69b9      	ldr	r1, [r7, #24]
 80230c0:	6878      	ldr	r0, [r7, #4]
 80230c2:	f7ff fe57 	bl	8022d74 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80230c6:	69fb      	ldr	r3, [r7, #28]
 80230c8:	3301      	adds	r3, #1
 80230ca:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80230cc:	683b      	ldr	r3, [r7, #0]
 80230ce:	681a      	ldr	r2, [r3, #0]
 80230d0:	69fb      	ldr	r3, [r7, #28]
 80230d2:	fa22 f303 	lsr.w	r3, r2, r3
 80230d6:	2b00      	cmp	r3, #0
 80230d8:	d1b0      	bne.n	802303c <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80230da:	2300      	movs	r3, #0
}
 80230dc:	4618      	mov	r0, r3
 80230de:	3720      	adds	r7, #32
 80230e0:	46bd      	mov	sp, r7
 80230e2:	bd80      	pop	{r7, pc}

080230e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80230e4:	b480      	push	{r7}
 80230e6:	b085      	sub	sp, #20
 80230e8:	af00      	add	r7, sp, #0
 80230ea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80230ec:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80230f0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80230f2:	687b      	ldr	r3, [r7, #4]
 80230f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80230f8:	b29a      	uxth	r2, r3
 80230fa:	68fb      	ldr	r3, [r7, #12]
 80230fc:	b29b      	uxth	r3, r3
 80230fe:	43db      	mvns	r3, r3
 8023100:	b29b      	uxth	r3, r3
 8023102:	4013      	ands	r3, r2
 8023104:	b29a      	uxth	r2, r3
 8023106:	687b      	ldr	r3, [r7, #4]
 8023108:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 802310c:	2300      	movs	r3, #0
}
 802310e:	4618      	mov	r0, r3
 8023110:	3714      	adds	r7, #20
 8023112:	46bd      	mov	sp, r7
 8023114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023118:	4770      	bx	lr

0802311a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 802311a:	b084      	sub	sp, #16
 802311c:	b480      	push	{r7}
 802311e:	b083      	sub	sp, #12
 8023120:	af00      	add	r7, sp, #0
 8023122:	6078      	str	r0, [r7, #4]
 8023124:	f107 0014 	add.w	r0, r7, #20
 8023128:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 802312c:	687b      	ldr	r3, [r7, #4]
 802312e:	2201      	movs	r2, #1
 8023130:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8023134:	687b      	ldr	r3, [r7, #4]
 8023136:	2200      	movs	r2, #0
 8023138:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 802313c:	687b      	ldr	r3, [r7, #4]
 802313e:	2200      	movs	r2, #0
 8023140:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8023144:	687b      	ldr	r3, [r7, #4]
 8023146:	2200      	movs	r2, #0
 8023148:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 802314c:	2300      	movs	r3, #0
}
 802314e:	4618      	mov	r0, r3
 8023150:	370c      	adds	r7, #12
 8023152:	46bd      	mov	sp, r7
 8023154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023158:	b004      	add	sp, #16
 802315a:	4770      	bx	lr

0802315c <__NVIC_SetPriority>:
{
 802315c:	b480      	push	{r7}
 802315e:	b083      	sub	sp, #12
 8023160:	af00      	add	r7, sp, #0
 8023162:	4603      	mov	r3, r0
 8023164:	6039      	str	r1, [r7, #0]
 8023166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8023168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802316c:	2b00      	cmp	r3, #0
 802316e:	db0a      	blt.n	8023186 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8023170:	683b      	ldr	r3, [r7, #0]
 8023172:	b2da      	uxtb	r2, r3
 8023174:	490c      	ldr	r1, [pc, #48]	; (80231a8 <__NVIC_SetPriority+0x4c>)
 8023176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802317a:	0152      	lsls	r2, r2, #5
 802317c:	b2d2      	uxtb	r2, r2
 802317e:	440b      	add	r3, r1
 8023180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8023184:	e00a      	b.n	802319c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8023186:	683b      	ldr	r3, [r7, #0]
 8023188:	b2da      	uxtb	r2, r3
 802318a:	4908      	ldr	r1, [pc, #32]	; (80231ac <__NVIC_SetPriority+0x50>)
 802318c:	79fb      	ldrb	r3, [r7, #7]
 802318e:	f003 030f 	and.w	r3, r3, #15
 8023192:	3b04      	subs	r3, #4
 8023194:	0152      	lsls	r2, r2, #5
 8023196:	b2d2      	uxtb	r2, r2
 8023198:	440b      	add	r3, r1
 802319a:	761a      	strb	r2, [r3, #24]
}
 802319c:	bf00      	nop
 802319e:	370c      	adds	r7, #12
 80231a0:	46bd      	mov	sp, r7
 80231a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80231a6:	4770      	bx	lr
 80231a8:	e000e100 	.word	0xe000e100
 80231ac:	e000ed00 	.word	0xe000ed00

080231b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80231b0:	b580      	push	{r7, lr}
 80231b2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80231b4:	4b05      	ldr	r3, [pc, #20]	; (80231cc <SysTick_Handler+0x1c>)
 80231b6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80231b8:	f001 fbe0 	bl	802497c <xTaskGetSchedulerState>
 80231bc:	4603      	mov	r3, r0
 80231be:	2b01      	cmp	r3, #1
 80231c0:	d001      	beq.n	80231c6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80231c2:	f002 f835 	bl	8025230 <xPortSysTickHandler>
  }
}
 80231c6:	bf00      	nop
 80231c8:	bd80      	pop	{r7, pc}
 80231ca:	bf00      	nop
 80231cc:	e000e010 	.word	0xe000e010

080231d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80231d0:	b580      	push	{r7, lr}
 80231d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80231d4:	2100      	movs	r1, #0
 80231d6:	f06f 0004 	mvn.w	r0, #4
 80231da:	f7ff ffbf 	bl	802315c <__NVIC_SetPriority>
#endif
}
 80231de:	bf00      	nop
 80231e0:	bd80      	pop	{r7, pc}
	...

080231e4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80231e4:	b480      	push	{r7}
 80231e6:	b083      	sub	sp, #12
 80231e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80231ea:	f3ef 8305 	mrs	r3, IPSR
 80231ee:	603b      	str	r3, [r7, #0]
  return(result);
 80231f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80231f2:	2b00      	cmp	r3, #0
 80231f4:	d003      	beq.n	80231fe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80231f6:	f06f 0305 	mvn.w	r3, #5
 80231fa:	607b      	str	r3, [r7, #4]
 80231fc:	e00c      	b.n	8023218 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80231fe:	4b0a      	ldr	r3, [pc, #40]	; (8023228 <osKernelInitialize+0x44>)
 8023200:	681b      	ldr	r3, [r3, #0]
 8023202:	2b00      	cmp	r3, #0
 8023204:	d105      	bne.n	8023212 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8023206:	4b08      	ldr	r3, [pc, #32]	; (8023228 <osKernelInitialize+0x44>)
 8023208:	2201      	movs	r2, #1
 802320a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 802320c:	2300      	movs	r3, #0
 802320e:	607b      	str	r3, [r7, #4]
 8023210:	e002      	b.n	8023218 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8023212:	f04f 33ff 	mov.w	r3, #4294967295
 8023216:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8023218:	687b      	ldr	r3, [r7, #4]
}
 802321a:	4618      	mov	r0, r3
 802321c:	370c      	adds	r7, #12
 802321e:	46bd      	mov	sp, r7
 8023220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023224:	4770      	bx	lr
 8023226:	bf00      	nop
 8023228:	20000fe0 	.word	0x20000fe0

0802322c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 802322c:	b580      	push	{r7, lr}
 802322e:	b082      	sub	sp, #8
 8023230:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8023232:	f3ef 8305 	mrs	r3, IPSR
 8023236:	603b      	str	r3, [r7, #0]
  return(result);
 8023238:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 802323a:	2b00      	cmp	r3, #0
 802323c:	d003      	beq.n	8023246 <osKernelStart+0x1a>
    stat = osErrorISR;
 802323e:	f06f 0305 	mvn.w	r3, #5
 8023242:	607b      	str	r3, [r7, #4]
 8023244:	e010      	b.n	8023268 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8023246:	4b0b      	ldr	r3, [pc, #44]	; (8023274 <osKernelStart+0x48>)
 8023248:	681b      	ldr	r3, [r3, #0]
 802324a:	2b01      	cmp	r3, #1
 802324c:	d109      	bne.n	8023262 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 802324e:	f7ff ffbf 	bl	80231d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8023252:	4b08      	ldr	r3, [pc, #32]	; (8023274 <osKernelStart+0x48>)
 8023254:	2202      	movs	r2, #2
 8023256:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8023258:	f000 ffb2 	bl	80241c0 <vTaskStartScheduler>
      stat = osOK;
 802325c:	2300      	movs	r3, #0
 802325e:	607b      	str	r3, [r7, #4]
 8023260:	e002      	b.n	8023268 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8023262:	f04f 33ff 	mov.w	r3, #4294967295
 8023266:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8023268:	687b      	ldr	r3, [r7, #4]
}
 802326a:	4618      	mov	r0, r3
 802326c:	3708      	adds	r7, #8
 802326e:	46bd      	mov	sp, r7
 8023270:	bd80      	pop	{r7, pc}
 8023272:	bf00      	nop
 8023274:	20000fe0 	.word	0x20000fe0

08023278 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8023278:	b580      	push	{r7, lr}
 802327a:	b08e      	sub	sp, #56	; 0x38
 802327c:	af04      	add	r7, sp, #16
 802327e:	60f8      	str	r0, [r7, #12]
 8023280:	60b9      	str	r1, [r7, #8]
 8023282:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8023284:	2300      	movs	r3, #0
 8023286:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8023288:	f3ef 8305 	mrs	r3, IPSR
 802328c:	617b      	str	r3, [r7, #20]
  return(result);
 802328e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8023290:	2b00      	cmp	r3, #0
 8023292:	d17e      	bne.n	8023392 <osThreadNew+0x11a>
 8023294:	68fb      	ldr	r3, [r7, #12]
 8023296:	2b00      	cmp	r3, #0
 8023298:	d07b      	beq.n	8023392 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 802329a:	2380      	movs	r3, #128	; 0x80
 802329c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 802329e:	2318      	movs	r3, #24
 80232a0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80232a2:	2300      	movs	r3, #0
 80232a4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80232a6:	f04f 33ff 	mov.w	r3, #4294967295
 80232aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80232ac:	687b      	ldr	r3, [r7, #4]
 80232ae:	2b00      	cmp	r3, #0
 80232b0:	d045      	beq.n	802333e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80232b2:	687b      	ldr	r3, [r7, #4]
 80232b4:	681b      	ldr	r3, [r3, #0]
 80232b6:	2b00      	cmp	r3, #0
 80232b8:	d002      	beq.n	80232c0 <osThreadNew+0x48>
        name = attr->name;
 80232ba:	687b      	ldr	r3, [r7, #4]
 80232bc:	681b      	ldr	r3, [r3, #0]
 80232be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80232c0:	687b      	ldr	r3, [r7, #4]
 80232c2:	699b      	ldr	r3, [r3, #24]
 80232c4:	2b00      	cmp	r3, #0
 80232c6:	d002      	beq.n	80232ce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80232c8:	687b      	ldr	r3, [r7, #4]
 80232ca:	699b      	ldr	r3, [r3, #24]
 80232cc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80232ce:	69fb      	ldr	r3, [r7, #28]
 80232d0:	2b00      	cmp	r3, #0
 80232d2:	d008      	beq.n	80232e6 <osThreadNew+0x6e>
 80232d4:	69fb      	ldr	r3, [r7, #28]
 80232d6:	2b38      	cmp	r3, #56	; 0x38
 80232d8:	d805      	bhi.n	80232e6 <osThreadNew+0x6e>
 80232da:	687b      	ldr	r3, [r7, #4]
 80232dc:	685b      	ldr	r3, [r3, #4]
 80232de:	f003 0301 	and.w	r3, r3, #1
 80232e2:	2b00      	cmp	r3, #0
 80232e4:	d001      	beq.n	80232ea <osThreadNew+0x72>
        return (NULL);
 80232e6:	2300      	movs	r3, #0
 80232e8:	e054      	b.n	8023394 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80232ea:	687b      	ldr	r3, [r7, #4]
 80232ec:	695b      	ldr	r3, [r3, #20]
 80232ee:	2b00      	cmp	r3, #0
 80232f0:	d003      	beq.n	80232fa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80232f2:	687b      	ldr	r3, [r7, #4]
 80232f4:	695b      	ldr	r3, [r3, #20]
 80232f6:	089b      	lsrs	r3, r3, #2
 80232f8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80232fa:	687b      	ldr	r3, [r7, #4]
 80232fc:	689b      	ldr	r3, [r3, #8]
 80232fe:	2b00      	cmp	r3, #0
 8023300:	d00e      	beq.n	8023320 <osThreadNew+0xa8>
 8023302:	687b      	ldr	r3, [r7, #4]
 8023304:	68db      	ldr	r3, [r3, #12]
 8023306:	2b5b      	cmp	r3, #91	; 0x5b
 8023308:	d90a      	bls.n	8023320 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 802330a:	687b      	ldr	r3, [r7, #4]
 802330c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 802330e:	2b00      	cmp	r3, #0
 8023310:	d006      	beq.n	8023320 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8023312:	687b      	ldr	r3, [r7, #4]
 8023314:	695b      	ldr	r3, [r3, #20]
 8023316:	2b00      	cmp	r3, #0
 8023318:	d002      	beq.n	8023320 <osThreadNew+0xa8>
        mem = 1;
 802331a:	2301      	movs	r3, #1
 802331c:	61bb      	str	r3, [r7, #24]
 802331e:	e010      	b.n	8023342 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8023320:	687b      	ldr	r3, [r7, #4]
 8023322:	689b      	ldr	r3, [r3, #8]
 8023324:	2b00      	cmp	r3, #0
 8023326:	d10c      	bne.n	8023342 <osThreadNew+0xca>
 8023328:	687b      	ldr	r3, [r7, #4]
 802332a:	68db      	ldr	r3, [r3, #12]
 802332c:	2b00      	cmp	r3, #0
 802332e:	d108      	bne.n	8023342 <osThreadNew+0xca>
 8023330:	687b      	ldr	r3, [r7, #4]
 8023332:	691b      	ldr	r3, [r3, #16]
 8023334:	2b00      	cmp	r3, #0
 8023336:	d104      	bne.n	8023342 <osThreadNew+0xca>
          mem = 0;
 8023338:	2300      	movs	r3, #0
 802333a:	61bb      	str	r3, [r7, #24]
 802333c:	e001      	b.n	8023342 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 802333e:	2300      	movs	r3, #0
 8023340:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8023342:	69bb      	ldr	r3, [r7, #24]
 8023344:	2b01      	cmp	r3, #1
 8023346:	d110      	bne.n	802336a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8023348:	687b      	ldr	r3, [r7, #4]
 802334a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 802334c:	687a      	ldr	r2, [r7, #4]
 802334e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8023350:	9202      	str	r2, [sp, #8]
 8023352:	9301      	str	r3, [sp, #4]
 8023354:	69fb      	ldr	r3, [r7, #28]
 8023356:	9300      	str	r3, [sp, #0]
 8023358:	68bb      	ldr	r3, [r7, #8]
 802335a:	6a3a      	ldr	r2, [r7, #32]
 802335c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802335e:	68f8      	ldr	r0, [r7, #12]
 8023360:	f000 fd30 	bl	8023dc4 <xTaskCreateStatic>
 8023364:	4603      	mov	r3, r0
 8023366:	613b      	str	r3, [r7, #16]
 8023368:	e013      	b.n	8023392 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 802336a:	69bb      	ldr	r3, [r7, #24]
 802336c:	2b00      	cmp	r3, #0
 802336e:	d110      	bne.n	8023392 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8023370:	6a3b      	ldr	r3, [r7, #32]
 8023372:	b29a      	uxth	r2, r3
 8023374:	f107 0310 	add.w	r3, r7, #16
 8023378:	9301      	str	r3, [sp, #4]
 802337a:	69fb      	ldr	r3, [r7, #28]
 802337c:	9300      	str	r3, [sp, #0]
 802337e:	68bb      	ldr	r3, [r7, #8]
 8023380:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8023382:	68f8      	ldr	r0, [r7, #12]
 8023384:	f000 fd63 	bl	8023e4e <xTaskCreate>
 8023388:	4603      	mov	r3, r0
 802338a:	2b01      	cmp	r3, #1
 802338c:	d001      	beq.n	8023392 <osThreadNew+0x11a>
            hTask = NULL;
 802338e:	2300      	movs	r3, #0
 8023390:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8023392:	693b      	ldr	r3, [r7, #16]
}
 8023394:	4618      	mov	r0, r3
 8023396:	3728      	adds	r7, #40	; 0x28
 8023398:	46bd      	mov	sp, r7
 802339a:	bd80      	pop	{r7, pc}

0802339c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 802339c:	b480      	push	{r7}
 802339e:	b085      	sub	sp, #20
 80233a0:	af00      	add	r7, sp, #0
 80233a2:	60f8      	str	r0, [r7, #12]
 80233a4:	60b9      	str	r1, [r7, #8]
 80233a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80233a8:	68fb      	ldr	r3, [r7, #12]
 80233aa:	4a07      	ldr	r2, [pc, #28]	; (80233c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80233ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80233ae:	68bb      	ldr	r3, [r7, #8]
 80233b0:	4a06      	ldr	r2, [pc, #24]	; (80233cc <vApplicationGetIdleTaskMemory+0x30>)
 80233b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80233b4:	687b      	ldr	r3, [r7, #4]
 80233b6:	2280      	movs	r2, #128	; 0x80
 80233b8:	601a      	str	r2, [r3, #0]
}
 80233ba:	bf00      	nop
 80233bc:	3714      	adds	r7, #20
 80233be:	46bd      	mov	sp, r7
 80233c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233c4:	4770      	bx	lr
 80233c6:	bf00      	nop
 80233c8:	20000fe4 	.word	0x20000fe4
 80233cc:	20001040 	.word	0x20001040

080233d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80233d0:	b480      	push	{r7}
 80233d2:	b085      	sub	sp, #20
 80233d4:	af00      	add	r7, sp, #0
 80233d6:	60f8      	str	r0, [r7, #12]
 80233d8:	60b9      	str	r1, [r7, #8]
 80233da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80233dc:	68fb      	ldr	r3, [r7, #12]
 80233de:	4a07      	ldr	r2, [pc, #28]	; (80233fc <vApplicationGetTimerTaskMemory+0x2c>)
 80233e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80233e2:	68bb      	ldr	r3, [r7, #8]
 80233e4:	4a06      	ldr	r2, [pc, #24]	; (8023400 <vApplicationGetTimerTaskMemory+0x30>)
 80233e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80233e8:	687b      	ldr	r3, [r7, #4]
 80233ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80233ee:	601a      	str	r2, [r3, #0]
}
 80233f0:	bf00      	nop
 80233f2:	3714      	adds	r7, #20
 80233f4:	46bd      	mov	sp, r7
 80233f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233fa:	4770      	bx	lr
 80233fc:	20001240 	.word	0x20001240
 8023400:	2000129c 	.word	0x2000129c

08023404 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8023404:	b480      	push	{r7}
 8023406:	b083      	sub	sp, #12
 8023408:	af00      	add	r7, sp, #0
 802340a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 802340c:	687b      	ldr	r3, [r7, #4]
 802340e:	f103 0208 	add.w	r2, r3, #8
 8023412:	687b      	ldr	r3, [r7, #4]
 8023414:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8023416:	687b      	ldr	r3, [r7, #4]
 8023418:	f04f 32ff 	mov.w	r2, #4294967295
 802341c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 802341e:	687b      	ldr	r3, [r7, #4]
 8023420:	f103 0208 	add.w	r2, r3, #8
 8023424:	687b      	ldr	r3, [r7, #4]
 8023426:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8023428:	687b      	ldr	r3, [r7, #4]
 802342a:	f103 0208 	add.w	r2, r3, #8
 802342e:	687b      	ldr	r3, [r7, #4]
 8023430:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8023432:	687b      	ldr	r3, [r7, #4]
 8023434:	2200      	movs	r2, #0
 8023436:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8023438:	bf00      	nop
 802343a:	370c      	adds	r7, #12
 802343c:	46bd      	mov	sp, r7
 802343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023442:	4770      	bx	lr

08023444 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8023444:	b480      	push	{r7}
 8023446:	b083      	sub	sp, #12
 8023448:	af00      	add	r7, sp, #0
 802344a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 802344c:	687b      	ldr	r3, [r7, #4]
 802344e:	2200      	movs	r2, #0
 8023450:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8023452:	bf00      	nop
 8023454:	370c      	adds	r7, #12
 8023456:	46bd      	mov	sp, r7
 8023458:	f85d 7b04 	ldr.w	r7, [sp], #4
 802345c:	4770      	bx	lr

0802345e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 802345e:	b480      	push	{r7}
 8023460:	b085      	sub	sp, #20
 8023462:	af00      	add	r7, sp, #0
 8023464:	6078      	str	r0, [r7, #4]
 8023466:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8023468:	687b      	ldr	r3, [r7, #4]
 802346a:	685b      	ldr	r3, [r3, #4]
 802346c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 802346e:	683b      	ldr	r3, [r7, #0]
 8023470:	68fa      	ldr	r2, [r7, #12]
 8023472:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8023474:	68fb      	ldr	r3, [r7, #12]
 8023476:	689a      	ldr	r2, [r3, #8]
 8023478:	683b      	ldr	r3, [r7, #0]
 802347a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 802347c:	68fb      	ldr	r3, [r7, #12]
 802347e:	689b      	ldr	r3, [r3, #8]
 8023480:	683a      	ldr	r2, [r7, #0]
 8023482:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8023484:	68fb      	ldr	r3, [r7, #12]
 8023486:	683a      	ldr	r2, [r7, #0]
 8023488:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 802348a:	683b      	ldr	r3, [r7, #0]
 802348c:	687a      	ldr	r2, [r7, #4]
 802348e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8023490:	687b      	ldr	r3, [r7, #4]
 8023492:	681b      	ldr	r3, [r3, #0]
 8023494:	1c5a      	adds	r2, r3, #1
 8023496:	687b      	ldr	r3, [r7, #4]
 8023498:	601a      	str	r2, [r3, #0]
}
 802349a:	bf00      	nop
 802349c:	3714      	adds	r7, #20
 802349e:	46bd      	mov	sp, r7
 80234a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234a4:	4770      	bx	lr

080234a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80234a6:	b480      	push	{r7}
 80234a8:	b085      	sub	sp, #20
 80234aa:	af00      	add	r7, sp, #0
 80234ac:	6078      	str	r0, [r7, #4]
 80234ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80234b0:	683b      	ldr	r3, [r7, #0]
 80234b2:	681b      	ldr	r3, [r3, #0]
 80234b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80234b6:	68bb      	ldr	r3, [r7, #8]
 80234b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80234bc:	d103      	bne.n	80234c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80234be:	687b      	ldr	r3, [r7, #4]
 80234c0:	691b      	ldr	r3, [r3, #16]
 80234c2:	60fb      	str	r3, [r7, #12]
 80234c4:	e00c      	b.n	80234e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80234c6:	687b      	ldr	r3, [r7, #4]
 80234c8:	3308      	adds	r3, #8
 80234ca:	60fb      	str	r3, [r7, #12]
 80234cc:	e002      	b.n	80234d4 <vListInsert+0x2e>
 80234ce:	68fb      	ldr	r3, [r7, #12]
 80234d0:	685b      	ldr	r3, [r3, #4]
 80234d2:	60fb      	str	r3, [r7, #12]
 80234d4:	68fb      	ldr	r3, [r7, #12]
 80234d6:	685b      	ldr	r3, [r3, #4]
 80234d8:	681b      	ldr	r3, [r3, #0]
 80234da:	68ba      	ldr	r2, [r7, #8]
 80234dc:	429a      	cmp	r2, r3
 80234de:	d2f6      	bcs.n	80234ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80234e0:	68fb      	ldr	r3, [r7, #12]
 80234e2:	685a      	ldr	r2, [r3, #4]
 80234e4:	683b      	ldr	r3, [r7, #0]
 80234e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80234e8:	683b      	ldr	r3, [r7, #0]
 80234ea:	685b      	ldr	r3, [r3, #4]
 80234ec:	683a      	ldr	r2, [r7, #0]
 80234ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80234f0:	683b      	ldr	r3, [r7, #0]
 80234f2:	68fa      	ldr	r2, [r7, #12]
 80234f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80234f6:	68fb      	ldr	r3, [r7, #12]
 80234f8:	683a      	ldr	r2, [r7, #0]
 80234fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80234fc:	683b      	ldr	r3, [r7, #0]
 80234fe:	687a      	ldr	r2, [r7, #4]
 8023500:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8023502:	687b      	ldr	r3, [r7, #4]
 8023504:	681b      	ldr	r3, [r3, #0]
 8023506:	1c5a      	adds	r2, r3, #1
 8023508:	687b      	ldr	r3, [r7, #4]
 802350a:	601a      	str	r2, [r3, #0]
}
 802350c:	bf00      	nop
 802350e:	3714      	adds	r7, #20
 8023510:	46bd      	mov	sp, r7
 8023512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023516:	4770      	bx	lr

08023518 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8023518:	b480      	push	{r7}
 802351a:	b085      	sub	sp, #20
 802351c:	af00      	add	r7, sp, #0
 802351e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8023520:	687b      	ldr	r3, [r7, #4]
 8023522:	691b      	ldr	r3, [r3, #16]
 8023524:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8023526:	687b      	ldr	r3, [r7, #4]
 8023528:	685b      	ldr	r3, [r3, #4]
 802352a:	687a      	ldr	r2, [r7, #4]
 802352c:	6892      	ldr	r2, [r2, #8]
 802352e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8023530:	687b      	ldr	r3, [r7, #4]
 8023532:	689b      	ldr	r3, [r3, #8]
 8023534:	687a      	ldr	r2, [r7, #4]
 8023536:	6852      	ldr	r2, [r2, #4]
 8023538:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 802353a:	68fb      	ldr	r3, [r7, #12]
 802353c:	685b      	ldr	r3, [r3, #4]
 802353e:	687a      	ldr	r2, [r7, #4]
 8023540:	429a      	cmp	r2, r3
 8023542:	d103      	bne.n	802354c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8023544:	687b      	ldr	r3, [r7, #4]
 8023546:	689a      	ldr	r2, [r3, #8]
 8023548:	68fb      	ldr	r3, [r7, #12]
 802354a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 802354c:	687b      	ldr	r3, [r7, #4]
 802354e:	2200      	movs	r2, #0
 8023550:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8023552:	68fb      	ldr	r3, [r7, #12]
 8023554:	681b      	ldr	r3, [r3, #0]
 8023556:	1e5a      	subs	r2, r3, #1
 8023558:	68fb      	ldr	r3, [r7, #12]
 802355a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 802355c:	68fb      	ldr	r3, [r7, #12]
 802355e:	681b      	ldr	r3, [r3, #0]
}
 8023560:	4618      	mov	r0, r3
 8023562:	3714      	adds	r7, #20
 8023564:	46bd      	mov	sp, r7
 8023566:	f85d 7b04 	ldr.w	r7, [sp], #4
 802356a:	4770      	bx	lr

0802356c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 802356c:	b580      	push	{r7, lr}
 802356e:	b084      	sub	sp, #16
 8023570:	af00      	add	r7, sp, #0
 8023572:	6078      	str	r0, [r7, #4]
 8023574:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8023576:	687b      	ldr	r3, [r7, #4]
 8023578:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 802357a:	68fb      	ldr	r3, [r7, #12]
 802357c:	2b00      	cmp	r3, #0
 802357e:	d102      	bne.n	8023586 <xQueueGenericReset+0x1a>
 8023580:	f001 ff62 	bl	8025448 <ulSetInterruptMask>
 8023584:	e7fe      	b.n	8023584 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 8023586:	f001 fe27 	bl	80251d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 802358a:	68fb      	ldr	r3, [r7, #12]
 802358c:	681a      	ldr	r2, [r3, #0]
 802358e:	68fb      	ldr	r3, [r7, #12]
 8023590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023592:	68f9      	ldr	r1, [r7, #12]
 8023594:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8023596:	fb01 f303 	mul.w	r3, r1, r3
 802359a:	441a      	add	r2, r3
 802359c:	68fb      	ldr	r3, [r7, #12]
 802359e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80235a0:	68fb      	ldr	r3, [r7, #12]
 80235a2:	2200      	movs	r2, #0
 80235a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80235a6:	68fb      	ldr	r3, [r7, #12]
 80235a8:	681a      	ldr	r2, [r3, #0]
 80235aa:	68fb      	ldr	r3, [r7, #12]
 80235ac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80235ae:	68fb      	ldr	r3, [r7, #12]
 80235b0:	681a      	ldr	r2, [r3, #0]
 80235b2:	68fb      	ldr	r3, [r7, #12]
 80235b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80235b6:	3b01      	subs	r3, #1
 80235b8:	68f9      	ldr	r1, [r7, #12]
 80235ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80235bc:	fb01 f303 	mul.w	r3, r1, r3
 80235c0:	441a      	add	r2, r3
 80235c2:	68fb      	ldr	r3, [r7, #12]
 80235c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80235c6:	68fb      	ldr	r3, [r7, #12]
 80235c8:	22ff      	movs	r2, #255	; 0xff
 80235ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80235ce:	68fb      	ldr	r3, [r7, #12]
 80235d0:	22ff      	movs	r2, #255	; 0xff
 80235d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80235d6:	683b      	ldr	r3, [r7, #0]
 80235d8:	2b00      	cmp	r3, #0
 80235da:	d10e      	bne.n	80235fa <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80235dc:	68fb      	ldr	r3, [r7, #12]
 80235de:	691b      	ldr	r3, [r3, #16]
 80235e0:	2b00      	cmp	r3, #0
 80235e2:	d014      	beq.n	802360e <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80235e4:	68fb      	ldr	r3, [r7, #12]
 80235e6:	3310      	adds	r3, #16
 80235e8:	4618      	mov	r0, r3
 80235ea:	f001 f831 	bl	8024650 <xTaskRemoveFromEventList>
 80235ee:	4603      	mov	r3, r0
 80235f0:	2b00      	cmp	r3, #0
 80235f2:	d00c      	beq.n	802360e <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80235f4:	f001 fdde 	bl	80251b4 <vPortYield>
 80235f8:	e009      	b.n	802360e <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80235fa:	68fb      	ldr	r3, [r7, #12]
 80235fc:	3310      	adds	r3, #16
 80235fe:	4618      	mov	r0, r3
 8023600:	f7ff ff00 	bl	8023404 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8023604:	68fb      	ldr	r3, [r7, #12]
 8023606:	3324      	adds	r3, #36	; 0x24
 8023608:	4618      	mov	r0, r3
 802360a:	f7ff fefb 	bl	8023404 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 802360e:	f001 fdf5 	bl	80251fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8023612:	2301      	movs	r3, #1
}
 8023614:	4618      	mov	r0, r3
 8023616:	3710      	adds	r7, #16
 8023618:	46bd      	mov	sp, r7
 802361a:	bd80      	pop	{r7, pc}

0802361c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 802361c:	b580      	push	{r7, lr}
 802361e:	b088      	sub	sp, #32
 8023620:	af02      	add	r7, sp, #8
 8023622:	60f8      	str	r0, [r7, #12]
 8023624:	60b9      	str	r1, [r7, #8]
 8023626:	607a      	str	r2, [r7, #4]
 8023628:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 802362a:	68fb      	ldr	r3, [r7, #12]
 802362c:	2b00      	cmp	r3, #0
 802362e:	d102      	bne.n	8023636 <xQueueGenericCreateStatic+0x1a>
 8023630:	f001 ff0a 	bl	8025448 <ulSetInterruptMask>
 8023634:	e7fe      	b.n	8023634 <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8023636:	683b      	ldr	r3, [r7, #0]
 8023638:	2b00      	cmp	r3, #0
 802363a:	d102      	bne.n	8023642 <xQueueGenericCreateStatic+0x26>
 802363c:	f001 ff04 	bl	8025448 <ulSetInterruptMask>
 8023640:	e7fe      	b.n	8023640 <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8023642:	687b      	ldr	r3, [r7, #4]
 8023644:	2b00      	cmp	r3, #0
 8023646:	d002      	beq.n	802364e <xQueueGenericCreateStatic+0x32>
 8023648:	68bb      	ldr	r3, [r7, #8]
 802364a:	2b00      	cmp	r3, #0
 802364c:	d001      	beq.n	8023652 <xQueueGenericCreateStatic+0x36>
 802364e:	2301      	movs	r3, #1
 8023650:	e000      	b.n	8023654 <xQueueGenericCreateStatic+0x38>
 8023652:	2300      	movs	r3, #0
 8023654:	2b00      	cmp	r3, #0
 8023656:	d102      	bne.n	802365e <xQueueGenericCreateStatic+0x42>
 8023658:	f001 fef6 	bl	8025448 <ulSetInterruptMask>
 802365c:	e7fe      	b.n	802365c <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 802365e:	687b      	ldr	r3, [r7, #4]
 8023660:	2b00      	cmp	r3, #0
 8023662:	d102      	bne.n	802366a <xQueueGenericCreateStatic+0x4e>
 8023664:	68bb      	ldr	r3, [r7, #8]
 8023666:	2b00      	cmp	r3, #0
 8023668:	d101      	bne.n	802366e <xQueueGenericCreateStatic+0x52>
 802366a:	2301      	movs	r3, #1
 802366c:	e000      	b.n	8023670 <xQueueGenericCreateStatic+0x54>
 802366e:	2300      	movs	r3, #0
 8023670:	2b00      	cmp	r3, #0
 8023672:	d102      	bne.n	802367a <xQueueGenericCreateStatic+0x5e>
 8023674:	f001 fee8 	bl	8025448 <ulSetInterruptMask>
 8023678:	e7fe      	b.n	8023678 <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 802367a:	2350      	movs	r3, #80	; 0x50
 802367c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 802367e:	693b      	ldr	r3, [r7, #16]
 8023680:	2b50      	cmp	r3, #80	; 0x50
 8023682:	d002      	beq.n	802368a <xQueueGenericCreateStatic+0x6e>
 8023684:	f001 fee0 	bl	8025448 <ulSetInterruptMask>
 8023688:	e7fe      	b.n	8023688 <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 802368a:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 802368c:	683b      	ldr	r3, [r7, #0]
 802368e:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8023690:	697b      	ldr	r3, [r7, #20]
 8023692:	2b00      	cmp	r3, #0
 8023694:	d00d      	beq.n	80236b2 <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8023696:	697b      	ldr	r3, [r7, #20]
 8023698:	2201      	movs	r2, #1
 802369a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 802369e:	f897 2020 	ldrb.w	r2, [r7, #32]
 80236a2:	697b      	ldr	r3, [r7, #20]
 80236a4:	9300      	str	r3, [sp, #0]
 80236a6:	4613      	mov	r3, r2
 80236a8:	687a      	ldr	r2, [r7, #4]
 80236aa:	68b9      	ldr	r1, [r7, #8]
 80236ac:	68f8      	ldr	r0, [r7, #12]
 80236ae:	f000 f805 	bl	80236bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80236b2:	697b      	ldr	r3, [r7, #20]
	}
 80236b4:	4618      	mov	r0, r3
 80236b6:	3718      	adds	r7, #24
 80236b8:	46bd      	mov	sp, r7
 80236ba:	bd80      	pop	{r7, pc}

080236bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80236bc:	b580      	push	{r7, lr}
 80236be:	b084      	sub	sp, #16
 80236c0:	af00      	add	r7, sp, #0
 80236c2:	60f8      	str	r0, [r7, #12]
 80236c4:	60b9      	str	r1, [r7, #8]
 80236c6:	607a      	str	r2, [r7, #4]
 80236c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80236ca:	68bb      	ldr	r3, [r7, #8]
 80236cc:	2b00      	cmp	r3, #0
 80236ce:	d103      	bne.n	80236d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80236d0:	69bb      	ldr	r3, [r7, #24]
 80236d2:	69ba      	ldr	r2, [r7, #24]
 80236d4:	601a      	str	r2, [r3, #0]
 80236d6:	e002      	b.n	80236de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80236d8:	69bb      	ldr	r3, [r7, #24]
 80236da:	687a      	ldr	r2, [r7, #4]
 80236dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80236de:	69bb      	ldr	r3, [r7, #24]
 80236e0:	68fa      	ldr	r2, [r7, #12]
 80236e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80236e4:	69bb      	ldr	r3, [r7, #24]
 80236e6:	68ba      	ldr	r2, [r7, #8]
 80236e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80236ea:	2101      	movs	r1, #1
 80236ec:	69b8      	ldr	r0, [r7, #24]
 80236ee:	f7ff ff3d 	bl	802356c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80236f2:	69bb      	ldr	r3, [r7, #24]
 80236f4:	78fa      	ldrb	r2, [r7, #3]
 80236f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80236fa:	bf00      	nop
 80236fc:	3710      	adds	r7, #16
 80236fe:	46bd      	mov	sp, r7
 8023700:	bd80      	pop	{r7, pc}

08023702 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8023702:	b580      	push	{r7, lr}
 8023704:	b08a      	sub	sp, #40	; 0x28
 8023706:	af00      	add	r7, sp, #0
 8023708:	60f8      	str	r0, [r7, #12]
 802370a:	60b9      	str	r1, [r7, #8]
 802370c:	607a      	str	r2, [r7, #4]
 802370e:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8023710:	2300      	movs	r3, #0
 8023712:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8023714:	68fb      	ldr	r3, [r7, #12]
 8023716:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8023718:	6a3b      	ldr	r3, [r7, #32]
 802371a:	2b00      	cmp	r3, #0
 802371c:	d102      	bne.n	8023724 <xQueueGenericSend+0x22>
 802371e:	f001 fe93 	bl	8025448 <ulSetInterruptMask>
 8023722:	e7fe      	b.n	8023722 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8023724:	68bb      	ldr	r3, [r7, #8]
 8023726:	2b00      	cmp	r3, #0
 8023728:	d103      	bne.n	8023732 <xQueueGenericSend+0x30>
 802372a:	6a3b      	ldr	r3, [r7, #32]
 802372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802372e:	2b00      	cmp	r3, #0
 8023730:	d101      	bne.n	8023736 <xQueueGenericSend+0x34>
 8023732:	2301      	movs	r3, #1
 8023734:	e000      	b.n	8023738 <xQueueGenericSend+0x36>
 8023736:	2300      	movs	r3, #0
 8023738:	2b00      	cmp	r3, #0
 802373a:	d102      	bne.n	8023742 <xQueueGenericSend+0x40>
 802373c:	f001 fe84 	bl	8025448 <ulSetInterruptMask>
 8023740:	e7fe      	b.n	8023740 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8023742:	683b      	ldr	r3, [r7, #0]
 8023744:	2b02      	cmp	r3, #2
 8023746:	d103      	bne.n	8023750 <xQueueGenericSend+0x4e>
 8023748:	6a3b      	ldr	r3, [r7, #32]
 802374a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802374c:	2b01      	cmp	r3, #1
 802374e:	d101      	bne.n	8023754 <xQueueGenericSend+0x52>
 8023750:	2301      	movs	r3, #1
 8023752:	e000      	b.n	8023756 <xQueueGenericSend+0x54>
 8023754:	2300      	movs	r3, #0
 8023756:	2b00      	cmp	r3, #0
 8023758:	d102      	bne.n	8023760 <xQueueGenericSend+0x5e>
 802375a:	f001 fe75 	bl	8025448 <ulSetInterruptMask>
 802375e:	e7fe      	b.n	802375e <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8023760:	f001 f90c 	bl	802497c <xTaskGetSchedulerState>
 8023764:	4603      	mov	r3, r0
 8023766:	2b00      	cmp	r3, #0
 8023768:	d102      	bne.n	8023770 <xQueueGenericSend+0x6e>
 802376a:	687b      	ldr	r3, [r7, #4]
 802376c:	2b00      	cmp	r3, #0
 802376e:	d101      	bne.n	8023774 <xQueueGenericSend+0x72>
 8023770:	2301      	movs	r3, #1
 8023772:	e000      	b.n	8023776 <xQueueGenericSend+0x74>
 8023774:	2300      	movs	r3, #0
 8023776:	2b00      	cmp	r3, #0
 8023778:	d102      	bne.n	8023780 <xQueueGenericSend+0x7e>
 802377a:	f001 fe65 	bl	8025448 <ulSetInterruptMask>
 802377e:	e7fe      	b.n	802377e <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8023780:	f001 fd2a 	bl	80251d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8023784:	6a3b      	ldr	r3, [r7, #32]
 8023786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8023788:	6a3b      	ldr	r3, [r7, #32]
 802378a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802378c:	429a      	cmp	r2, r3
 802378e:	d302      	bcc.n	8023796 <xQueueGenericSend+0x94>
 8023790:	683b      	ldr	r3, [r7, #0]
 8023792:	2b02      	cmp	r3, #2
 8023794:	d11d      	bne.n	80237d2 <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8023796:	683a      	ldr	r2, [r7, #0]
 8023798:	68b9      	ldr	r1, [r7, #8]
 802379a:	6a38      	ldr	r0, [r7, #32]
 802379c:	f000 f9a4 	bl	8023ae8 <prvCopyDataToQueue>
 80237a0:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80237a2:	6a3b      	ldr	r3, [r7, #32]
 80237a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80237a6:	2b00      	cmp	r3, #0
 80237a8:	d00a      	beq.n	80237c0 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80237aa:	6a3b      	ldr	r3, [r7, #32]
 80237ac:	3324      	adds	r3, #36	; 0x24
 80237ae:	4618      	mov	r0, r3
 80237b0:	f000 ff4e 	bl	8024650 <xTaskRemoveFromEventList>
 80237b4:	4603      	mov	r3, r0
 80237b6:	2b00      	cmp	r3, #0
 80237b8:	d007      	beq.n	80237ca <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80237ba:	f001 fcfb 	bl	80251b4 <vPortYield>
 80237be:	e004      	b.n	80237ca <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80237c0:	69fb      	ldr	r3, [r7, #28]
 80237c2:	2b00      	cmp	r3, #0
 80237c4:	d001      	beq.n	80237ca <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80237c6:	f001 fcf5 	bl	80251b4 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80237ca:	f001 fd17 	bl	80251fc <vPortExitCritical>
				return pdPASS;
 80237ce:	2301      	movs	r3, #1
 80237d0:	e05c      	b.n	802388c <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80237d2:	687b      	ldr	r3, [r7, #4]
 80237d4:	2b00      	cmp	r3, #0
 80237d6:	d103      	bne.n	80237e0 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80237d8:	f001 fd10 	bl	80251fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80237dc:	2300      	movs	r3, #0
 80237de:	e055      	b.n	802388c <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80237e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80237e2:	2b00      	cmp	r3, #0
 80237e4:	d106      	bne.n	80237f4 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80237e6:	f107 0314 	add.w	r3, r7, #20
 80237ea:	4618      	mov	r0, r3
 80237ec:	f000 ff8c 	bl	8024708 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80237f0:	2301      	movs	r3, #1
 80237f2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80237f4:	f001 fd02 	bl	80251fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80237f8:	f000 fd38 	bl	802426c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80237fc:	f001 fcec 	bl	80251d8 <vPortEnterCritical>
 8023800:	6a3b      	ldr	r3, [r7, #32]
 8023802:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8023806:	b25b      	sxtb	r3, r3
 8023808:	f1b3 3fff 	cmp.w	r3, #4294967295
 802380c:	d103      	bne.n	8023816 <xQueueGenericSend+0x114>
 802380e:	6a3b      	ldr	r3, [r7, #32]
 8023810:	2200      	movs	r2, #0
 8023812:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8023816:	6a3b      	ldr	r3, [r7, #32]
 8023818:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802381c:	b25b      	sxtb	r3, r3
 802381e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023822:	d103      	bne.n	802382c <xQueueGenericSend+0x12a>
 8023824:	6a3b      	ldr	r3, [r7, #32]
 8023826:	2200      	movs	r2, #0
 8023828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 802382c:	f001 fce6 	bl	80251fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8023830:	1d3a      	adds	r2, r7, #4
 8023832:	f107 0314 	add.w	r3, r7, #20
 8023836:	4611      	mov	r1, r2
 8023838:	4618      	mov	r0, r3
 802383a:	f000 ff7b 	bl	8024734 <xTaskCheckForTimeOut>
 802383e:	4603      	mov	r3, r0
 8023840:	2b00      	cmp	r3, #0
 8023842:	d11d      	bne.n	8023880 <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8023844:	6a38      	ldr	r0, [r7, #32]
 8023846:	f000 fa47 	bl	8023cd8 <prvIsQueueFull>
 802384a:	4603      	mov	r3, r0
 802384c:	2b00      	cmp	r3, #0
 802384e:	d011      	beq.n	8023874 <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8023850:	6a3b      	ldr	r3, [r7, #32]
 8023852:	3310      	adds	r3, #16
 8023854:	687a      	ldr	r2, [r7, #4]
 8023856:	4611      	mov	r1, r2
 8023858:	4618      	mov	r0, r3
 802385a:	f000 feb9 	bl	80245d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 802385e:	6a38      	ldr	r0, [r7, #32]
 8023860:	f000 f9d2 	bl	8023c08 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8023864:	f000 fd10 	bl	8024288 <xTaskResumeAll>
 8023868:	4603      	mov	r3, r0
 802386a:	2b00      	cmp	r3, #0
 802386c:	d188      	bne.n	8023780 <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 802386e:	f001 fca1 	bl	80251b4 <vPortYield>
 8023872:	e785      	b.n	8023780 <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8023874:	6a38      	ldr	r0, [r7, #32]
 8023876:	f000 f9c7 	bl	8023c08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 802387a:	f000 fd05 	bl	8024288 <xTaskResumeAll>
 802387e:	e77f      	b.n	8023780 <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8023880:	6a38      	ldr	r0, [r7, #32]
 8023882:	f000 f9c1 	bl	8023c08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8023886:	f000 fcff 	bl	8024288 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 802388a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 802388c:	4618      	mov	r0, r3
 802388e:	3728      	adds	r7, #40	; 0x28
 8023890:	46bd      	mov	sp, r7
 8023892:	bd80      	pop	{r7, pc}

08023894 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8023894:	b580      	push	{r7, lr}
 8023896:	b08a      	sub	sp, #40	; 0x28
 8023898:	af00      	add	r7, sp, #0
 802389a:	60f8      	str	r0, [r7, #12]
 802389c:	60b9      	str	r1, [r7, #8]
 802389e:	607a      	str	r2, [r7, #4]
 80238a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80238a2:	68fb      	ldr	r3, [r7, #12]
 80238a4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80238a6:	6a3b      	ldr	r3, [r7, #32]
 80238a8:	2b00      	cmp	r3, #0
 80238aa:	d102      	bne.n	80238b2 <xQueueGenericSendFromISR+0x1e>
 80238ac:	f001 fdcc 	bl	8025448 <ulSetInterruptMask>
 80238b0:	e7fe      	b.n	80238b0 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80238b2:	68bb      	ldr	r3, [r7, #8]
 80238b4:	2b00      	cmp	r3, #0
 80238b6:	d103      	bne.n	80238c0 <xQueueGenericSendFromISR+0x2c>
 80238b8:	6a3b      	ldr	r3, [r7, #32]
 80238ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80238bc:	2b00      	cmp	r3, #0
 80238be:	d101      	bne.n	80238c4 <xQueueGenericSendFromISR+0x30>
 80238c0:	2301      	movs	r3, #1
 80238c2:	e000      	b.n	80238c6 <xQueueGenericSendFromISR+0x32>
 80238c4:	2300      	movs	r3, #0
 80238c6:	2b00      	cmp	r3, #0
 80238c8:	d102      	bne.n	80238d0 <xQueueGenericSendFromISR+0x3c>
 80238ca:	f001 fdbd 	bl	8025448 <ulSetInterruptMask>
 80238ce:	e7fe      	b.n	80238ce <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80238d0:	683b      	ldr	r3, [r7, #0]
 80238d2:	2b02      	cmp	r3, #2
 80238d4:	d103      	bne.n	80238de <xQueueGenericSendFromISR+0x4a>
 80238d6:	6a3b      	ldr	r3, [r7, #32]
 80238d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80238da:	2b01      	cmp	r3, #1
 80238dc:	d101      	bne.n	80238e2 <xQueueGenericSendFromISR+0x4e>
 80238de:	2301      	movs	r3, #1
 80238e0:	e000      	b.n	80238e4 <xQueueGenericSendFromISR+0x50>
 80238e2:	2300      	movs	r3, #0
 80238e4:	2b00      	cmp	r3, #0
 80238e6:	d102      	bne.n	80238ee <xQueueGenericSendFromISR+0x5a>
 80238e8:	f001 fdae 	bl	8025448 <ulSetInterruptMask>
 80238ec:	e7fe      	b.n	80238ec <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80238ee:	f001 fdab 	bl	8025448 <ulSetInterruptMask>
 80238f2:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80238f4:	6a3b      	ldr	r3, [r7, #32]
 80238f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80238f8:	6a3b      	ldr	r3, [r7, #32]
 80238fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80238fc:	429a      	cmp	r2, r3
 80238fe:	d302      	bcc.n	8023906 <xQueueGenericSendFromISR+0x72>
 8023900:	683b      	ldr	r3, [r7, #0]
 8023902:	2b02      	cmp	r3, #2
 8023904:	d12d      	bne.n	8023962 <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8023906:	6a3b      	ldr	r3, [r7, #32]
 8023908:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802390c:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 802390e:	6a3b      	ldr	r3, [r7, #32]
 8023910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023912:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8023914:	683a      	ldr	r2, [r7, #0]
 8023916:	68b9      	ldr	r1, [r7, #8]
 8023918:	6a38      	ldr	r0, [r7, #32]
 802391a:	f000 f8e5 	bl	8023ae8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 802391e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8023922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023926:	d112      	bne.n	802394e <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8023928:	6a3b      	ldr	r3, [r7, #32]
 802392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802392c:	2b00      	cmp	r3, #0
 802392e:	d015      	beq.n	802395c <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8023930:	6a3b      	ldr	r3, [r7, #32]
 8023932:	3324      	adds	r3, #36	; 0x24
 8023934:	4618      	mov	r0, r3
 8023936:	f000 fe8b 	bl	8024650 <xTaskRemoveFromEventList>
 802393a:	4603      	mov	r3, r0
 802393c:	2b00      	cmp	r3, #0
 802393e:	d00d      	beq.n	802395c <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8023940:	687b      	ldr	r3, [r7, #4]
 8023942:	2b00      	cmp	r3, #0
 8023944:	d00a      	beq.n	802395c <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8023946:	687b      	ldr	r3, [r7, #4]
 8023948:	2201      	movs	r2, #1
 802394a:	601a      	str	r2, [r3, #0]
 802394c:	e006      	b.n	802395c <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 802394e:	7efb      	ldrb	r3, [r7, #27]
 8023950:	3301      	adds	r3, #1
 8023952:	b2db      	uxtb	r3, r3
 8023954:	b25a      	sxtb	r2, r3
 8023956:	6a3b      	ldr	r3, [r7, #32]
 8023958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 802395c:	2301      	movs	r3, #1
 802395e:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8023960:	e001      	b.n	8023966 <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8023962:	2300      	movs	r3, #0
 8023964:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8023966:	69f8      	ldr	r0, [r7, #28]
 8023968:	f001 fd7b 	bl	8025462 <vClearInterruptMask>

	return xReturn;
 802396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802396e:	4618      	mov	r0, r3
 8023970:	3728      	adds	r7, #40	; 0x28
 8023972:	46bd      	mov	sp, r7
 8023974:	bd80      	pop	{r7, pc}

08023976 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8023976:	b580      	push	{r7, lr}
 8023978:	b08a      	sub	sp, #40	; 0x28
 802397a:	af00      	add	r7, sp, #0
 802397c:	60f8      	str	r0, [r7, #12]
 802397e:	60b9      	str	r1, [r7, #8]
 8023980:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8023982:	2300      	movs	r3, #0
 8023984:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8023986:	68fb      	ldr	r3, [r7, #12]
 8023988:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 802398a:	6a3b      	ldr	r3, [r7, #32]
 802398c:	2b00      	cmp	r3, #0
 802398e:	d102      	bne.n	8023996 <xQueueReceive+0x20>
 8023990:	f001 fd5a 	bl	8025448 <ulSetInterruptMask>
 8023994:	e7fe      	b.n	8023994 <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8023996:	68bb      	ldr	r3, [r7, #8]
 8023998:	2b00      	cmp	r3, #0
 802399a:	d103      	bne.n	80239a4 <xQueueReceive+0x2e>
 802399c:	6a3b      	ldr	r3, [r7, #32]
 802399e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80239a0:	2b00      	cmp	r3, #0
 80239a2:	d101      	bne.n	80239a8 <xQueueReceive+0x32>
 80239a4:	2301      	movs	r3, #1
 80239a6:	e000      	b.n	80239aa <xQueueReceive+0x34>
 80239a8:	2300      	movs	r3, #0
 80239aa:	2b00      	cmp	r3, #0
 80239ac:	d102      	bne.n	80239b4 <xQueueReceive+0x3e>
 80239ae:	f001 fd4b 	bl	8025448 <ulSetInterruptMask>
 80239b2:	e7fe      	b.n	80239b2 <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80239b4:	f000 ffe2 	bl	802497c <xTaskGetSchedulerState>
 80239b8:	4603      	mov	r3, r0
 80239ba:	2b00      	cmp	r3, #0
 80239bc:	d102      	bne.n	80239c4 <xQueueReceive+0x4e>
 80239be:	687b      	ldr	r3, [r7, #4]
 80239c0:	2b00      	cmp	r3, #0
 80239c2:	d101      	bne.n	80239c8 <xQueueReceive+0x52>
 80239c4:	2301      	movs	r3, #1
 80239c6:	e000      	b.n	80239ca <xQueueReceive+0x54>
 80239c8:	2300      	movs	r3, #0
 80239ca:	2b00      	cmp	r3, #0
 80239cc:	d102      	bne.n	80239d4 <xQueueReceive+0x5e>
 80239ce:	f001 fd3b 	bl	8025448 <ulSetInterruptMask>
 80239d2:	e7fe      	b.n	80239d2 <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80239d4:	f001 fc00 	bl	80251d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80239d8:	6a3b      	ldr	r3, [r7, #32]
 80239da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80239dc:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80239de:	69fb      	ldr	r3, [r7, #28]
 80239e0:	2b00      	cmp	r3, #0
 80239e2:	d019      	beq.n	8023a18 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80239e4:	68b9      	ldr	r1, [r7, #8]
 80239e6:	6a38      	ldr	r0, [r7, #32]
 80239e8:	f000 f8e8 	bl	8023bbc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80239ec:	69fb      	ldr	r3, [r7, #28]
 80239ee:	1e5a      	subs	r2, r3, #1
 80239f0:	6a3b      	ldr	r3, [r7, #32]
 80239f2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80239f4:	6a3b      	ldr	r3, [r7, #32]
 80239f6:	691b      	ldr	r3, [r3, #16]
 80239f8:	2b00      	cmp	r3, #0
 80239fa:	d009      	beq.n	8023a10 <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80239fc:	6a3b      	ldr	r3, [r7, #32]
 80239fe:	3310      	adds	r3, #16
 8023a00:	4618      	mov	r0, r3
 8023a02:	f000 fe25 	bl	8024650 <xTaskRemoveFromEventList>
 8023a06:	4603      	mov	r3, r0
 8023a08:	2b00      	cmp	r3, #0
 8023a0a:	d001      	beq.n	8023a10 <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8023a0c:	f001 fbd2 	bl	80251b4 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8023a10:	f001 fbf4 	bl	80251fc <vPortExitCritical>
				return pdPASS;
 8023a14:	2301      	movs	r3, #1
 8023a16:	e063      	b.n	8023ae0 <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8023a18:	687b      	ldr	r3, [r7, #4]
 8023a1a:	2b00      	cmp	r3, #0
 8023a1c:	d103      	bne.n	8023a26 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8023a1e:	f001 fbed 	bl	80251fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8023a22:	2300      	movs	r3, #0
 8023a24:	e05c      	b.n	8023ae0 <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8023a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023a28:	2b00      	cmp	r3, #0
 8023a2a:	d106      	bne.n	8023a3a <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8023a2c:	f107 0314 	add.w	r3, r7, #20
 8023a30:	4618      	mov	r0, r3
 8023a32:	f000 fe69 	bl	8024708 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8023a36:	2301      	movs	r3, #1
 8023a38:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8023a3a:	f001 fbdf 	bl	80251fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8023a3e:	f000 fc15 	bl	802426c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8023a42:	f001 fbc9 	bl	80251d8 <vPortEnterCritical>
 8023a46:	6a3b      	ldr	r3, [r7, #32]
 8023a48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8023a4c:	b25b      	sxtb	r3, r3
 8023a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023a52:	d103      	bne.n	8023a5c <xQueueReceive+0xe6>
 8023a54:	6a3b      	ldr	r3, [r7, #32]
 8023a56:	2200      	movs	r2, #0
 8023a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8023a5c:	6a3b      	ldr	r3, [r7, #32]
 8023a5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8023a62:	b25b      	sxtb	r3, r3
 8023a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023a68:	d103      	bne.n	8023a72 <xQueueReceive+0xfc>
 8023a6a:	6a3b      	ldr	r3, [r7, #32]
 8023a6c:	2200      	movs	r2, #0
 8023a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8023a72:	f001 fbc3 	bl	80251fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8023a76:	1d3a      	adds	r2, r7, #4
 8023a78:	f107 0314 	add.w	r3, r7, #20
 8023a7c:	4611      	mov	r1, r2
 8023a7e:	4618      	mov	r0, r3
 8023a80:	f000 fe58 	bl	8024734 <xTaskCheckForTimeOut>
 8023a84:	4603      	mov	r3, r0
 8023a86:	2b00      	cmp	r3, #0
 8023a88:	d11d      	bne.n	8023ac6 <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8023a8a:	6a38      	ldr	r0, [r7, #32]
 8023a8c:	f000 f90e 	bl	8023cac <prvIsQueueEmpty>
 8023a90:	4603      	mov	r3, r0
 8023a92:	2b00      	cmp	r3, #0
 8023a94:	d011      	beq.n	8023aba <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8023a96:	6a3b      	ldr	r3, [r7, #32]
 8023a98:	3324      	adds	r3, #36	; 0x24
 8023a9a:	687a      	ldr	r2, [r7, #4]
 8023a9c:	4611      	mov	r1, r2
 8023a9e:	4618      	mov	r0, r3
 8023aa0:	f000 fd96 	bl	80245d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8023aa4:	6a38      	ldr	r0, [r7, #32]
 8023aa6:	f000 f8af 	bl	8023c08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8023aaa:	f000 fbed 	bl	8024288 <xTaskResumeAll>
 8023aae:	4603      	mov	r3, r0
 8023ab0:	2b00      	cmp	r3, #0
 8023ab2:	d18f      	bne.n	80239d4 <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 8023ab4:	f001 fb7e 	bl	80251b4 <vPortYield>
 8023ab8:	e78c      	b.n	80239d4 <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8023aba:	6a38      	ldr	r0, [r7, #32]
 8023abc:	f000 f8a4 	bl	8023c08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8023ac0:	f000 fbe2 	bl	8024288 <xTaskResumeAll>
 8023ac4:	e786      	b.n	80239d4 <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8023ac6:	6a38      	ldr	r0, [r7, #32]
 8023ac8:	f000 f89e 	bl	8023c08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8023acc:	f000 fbdc 	bl	8024288 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8023ad0:	6a38      	ldr	r0, [r7, #32]
 8023ad2:	f000 f8eb 	bl	8023cac <prvIsQueueEmpty>
 8023ad6:	4603      	mov	r3, r0
 8023ad8:	2b00      	cmp	r3, #0
 8023ada:	f43f af7b 	beq.w	80239d4 <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8023ade:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8023ae0:	4618      	mov	r0, r3
 8023ae2:	3728      	adds	r7, #40	; 0x28
 8023ae4:	46bd      	mov	sp, r7
 8023ae6:	bd80      	pop	{r7, pc}

08023ae8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8023ae8:	b580      	push	{r7, lr}
 8023aea:	b086      	sub	sp, #24
 8023aec:	af00      	add	r7, sp, #0
 8023aee:	60f8      	str	r0, [r7, #12]
 8023af0:	60b9      	str	r1, [r7, #8]
 8023af2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8023af4:	2300      	movs	r3, #0
 8023af6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8023af8:	68fb      	ldr	r3, [r7, #12]
 8023afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023afc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8023afe:	68fb      	ldr	r3, [r7, #12]
 8023b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023b02:	2b00      	cmp	r3, #0
 8023b04:	d10d      	bne.n	8023b22 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8023b06:	68fb      	ldr	r3, [r7, #12]
 8023b08:	681b      	ldr	r3, [r3, #0]
 8023b0a:	2b00      	cmp	r3, #0
 8023b0c:	d14d      	bne.n	8023baa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8023b0e:	68fb      	ldr	r3, [r7, #12]
 8023b10:	689b      	ldr	r3, [r3, #8]
 8023b12:	4618      	mov	r0, r3
 8023b14:	f000 ff50 	bl	80249b8 <xTaskPriorityDisinherit>
 8023b18:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8023b1a:	68fb      	ldr	r3, [r7, #12]
 8023b1c:	2200      	movs	r2, #0
 8023b1e:	609a      	str	r2, [r3, #8]
 8023b20:	e043      	b.n	8023baa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8023b22:	687b      	ldr	r3, [r7, #4]
 8023b24:	2b00      	cmp	r3, #0
 8023b26:	d119      	bne.n	8023b5c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8023b28:	68fb      	ldr	r3, [r7, #12]
 8023b2a:	6858      	ldr	r0, [r3, #4]
 8023b2c:	68fb      	ldr	r3, [r7, #12]
 8023b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023b30:	461a      	mov	r2, r3
 8023b32:	68b9      	ldr	r1, [r7, #8]
 8023b34:	f005 f86a 	bl	8028c0c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8023b38:	68fb      	ldr	r3, [r7, #12]
 8023b3a:	685a      	ldr	r2, [r3, #4]
 8023b3c:	68fb      	ldr	r3, [r7, #12]
 8023b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023b40:	441a      	add	r2, r3
 8023b42:	68fb      	ldr	r3, [r7, #12]
 8023b44:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8023b46:	68fb      	ldr	r3, [r7, #12]
 8023b48:	685a      	ldr	r2, [r3, #4]
 8023b4a:	68fb      	ldr	r3, [r7, #12]
 8023b4c:	689b      	ldr	r3, [r3, #8]
 8023b4e:	429a      	cmp	r2, r3
 8023b50:	d32b      	bcc.n	8023baa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8023b52:	68fb      	ldr	r3, [r7, #12]
 8023b54:	681a      	ldr	r2, [r3, #0]
 8023b56:	68fb      	ldr	r3, [r7, #12]
 8023b58:	605a      	str	r2, [r3, #4]
 8023b5a:	e026      	b.n	8023baa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8023b5c:	68fb      	ldr	r3, [r7, #12]
 8023b5e:	68d8      	ldr	r0, [r3, #12]
 8023b60:	68fb      	ldr	r3, [r7, #12]
 8023b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023b64:	461a      	mov	r2, r3
 8023b66:	68b9      	ldr	r1, [r7, #8]
 8023b68:	f005 f850 	bl	8028c0c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8023b6c:	68fb      	ldr	r3, [r7, #12]
 8023b6e:	68da      	ldr	r2, [r3, #12]
 8023b70:	68fb      	ldr	r3, [r7, #12]
 8023b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023b74:	425b      	negs	r3, r3
 8023b76:	441a      	add	r2, r3
 8023b78:	68fb      	ldr	r3, [r7, #12]
 8023b7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8023b7c:	68fb      	ldr	r3, [r7, #12]
 8023b7e:	68da      	ldr	r2, [r3, #12]
 8023b80:	68fb      	ldr	r3, [r7, #12]
 8023b82:	681b      	ldr	r3, [r3, #0]
 8023b84:	429a      	cmp	r2, r3
 8023b86:	d207      	bcs.n	8023b98 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8023b88:	68fb      	ldr	r3, [r7, #12]
 8023b8a:	689a      	ldr	r2, [r3, #8]
 8023b8c:	68fb      	ldr	r3, [r7, #12]
 8023b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023b90:	425b      	negs	r3, r3
 8023b92:	441a      	add	r2, r3
 8023b94:	68fb      	ldr	r3, [r7, #12]
 8023b96:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8023b98:	687b      	ldr	r3, [r7, #4]
 8023b9a:	2b02      	cmp	r3, #2
 8023b9c:	d105      	bne.n	8023baa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8023b9e:	693b      	ldr	r3, [r7, #16]
 8023ba0:	2b00      	cmp	r3, #0
 8023ba2:	d002      	beq.n	8023baa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8023ba4:	693b      	ldr	r3, [r7, #16]
 8023ba6:	3b01      	subs	r3, #1
 8023ba8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8023baa:	693b      	ldr	r3, [r7, #16]
 8023bac:	1c5a      	adds	r2, r3, #1
 8023bae:	68fb      	ldr	r3, [r7, #12]
 8023bb0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8023bb2:	697b      	ldr	r3, [r7, #20]
}
 8023bb4:	4618      	mov	r0, r3
 8023bb6:	3718      	adds	r7, #24
 8023bb8:	46bd      	mov	sp, r7
 8023bba:	bd80      	pop	{r7, pc}

08023bbc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8023bbc:	b580      	push	{r7, lr}
 8023bbe:	b082      	sub	sp, #8
 8023bc0:	af00      	add	r7, sp, #0
 8023bc2:	6078      	str	r0, [r7, #4]
 8023bc4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8023bc6:	687b      	ldr	r3, [r7, #4]
 8023bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023bca:	2b00      	cmp	r3, #0
 8023bcc:	d018      	beq.n	8023c00 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8023bce:	687b      	ldr	r3, [r7, #4]
 8023bd0:	68da      	ldr	r2, [r3, #12]
 8023bd2:	687b      	ldr	r3, [r7, #4]
 8023bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023bd6:	441a      	add	r2, r3
 8023bd8:	687b      	ldr	r3, [r7, #4]
 8023bda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8023bdc:	687b      	ldr	r3, [r7, #4]
 8023bde:	68da      	ldr	r2, [r3, #12]
 8023be0:	687b      	ldr	r3, [r7, #4]
 8023be2:	689b      	ldr	r3, [r3, #8]
 8023be4:	429a      	cmp	r2, r3
 8023be6:	d303      	bcc.n	8023bf0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8023be8:	687b      	ldr	r3, [r7, #4]
 8023bea:	681a      	ldr	r2, [r3, #0]
 8023bec:	687b      	ldr	r3, [r7, #4]
 8023bee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8023bf0:	687b      	ldr	r3, [r7, #4]
 8023bf2:	68d9      	ldr	r1, [r3, #12]
 8023bf4:	687b      	ldr	r3, [r7, #4]
 8023bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023bf8:	461a      	mov	r2, r3
 8023bfa:	6838      	ldr	r0, [r7, #0]
 8023bfc:	f005 f806 	bl	8028c0c <memcpy>
	}
}
 8023c00:	bf00      	nop
 8023c02:	3708      	adds	r7, #8
 8023c04:	46bd      	mov	sp, r7
 8023c06:	bd80      	pop	{r7, pc}

08023c08 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8023c08:	b580      	push	{r7, lr}
 8023c0a:	b084      	sub	sp, #16
 8023c0c:	af00      	add	r7, sp, #0
 8023c0e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8023c10:	f001 fae2 	bl	80251d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8023c14:	687b      	ldr	r3, [r7, #4]
 8023c16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8023c1a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8023c1c:	e011      	b.n	8023c42 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8023c1e:	687b      	ldr	r3, [r7, #4]
 8023c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023c22:	2b00      	cmp	r3, #0
 8023c24:	d012      	beq.n	8023c4c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8023c26:	687b      	ldr	r3, [r7, #4]
 8023c28:	3324      	adds	r3, #36	; 0x24
 8023c2a:	4618      	mov	r0, r3
 8023c2c:	f000 fd10 	bl	8024650 <xTaskRemoveFromEventList>
 8023c30:	4603      	mov	r3, r0
 8023c32:	2b00      	cmp	r3, #0
 8023c34:	d001      	beq.n	8023c3a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8023c36:	f000 fdcf 	bl	80247d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8023c3a:	7bfb      	ldrb	r3, [r7, #15]
 8023c3c:	3b01      	subs	r3, #1
 8023c3e:	b2db      	uxtb	r3, r3
 8023c40:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8023c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8023c46:	2b00      	cmp	r3, #0
 8023c48:	dce9      	bgt.n	8023c1e <prvUnlockQueue+0x16>
 8023c4a:	e000      	b.n	8023c4e <prvUnlockQueue+0x46>
					break;
 8023c4c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8023c4e:	687b      	ldr	r3, [r7, #4]
 8023c50:	22ff      	movs	r2, #255	; 0xff
 8023c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8023c56:	f001 fad1 	bl	80251fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8023c5a:	f001 fabd 	bl	80251d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8023c5e:	687b      	ldr	r3, [r7, #4]
 8023c60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8023c64:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8023c66:	e011      	b.n	8023c8c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8023c68:	687b      	ldr	r3, [r7, #4]
 8023c6a:	691b      	ldr	r3, [r3, #16]
 8023c6c:	2b00      	cmp	r3, #0
 8023c6e:	d012      	beq.n	8023c96 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8023c70:	687b      	ldr	r3, [r7, #4]
 8023c72:	3310      	adds	r3, #16
 8023c74:	4618      	mov	r0, r3
 8023c76:	f000 fceb 	bl	8024650 <xTaskRemoveFromEventList>
 8023c7a:	4603      	mov	r3, r0
 8023c7c:	2b00      	cmp	r3, #0
 8023c7e:	d001      	beq.n	8023c84 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8023c80:	f000 fdaa 	bl	80247d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8023c84:	7bbb      	ldrb	r3, [r7, #14]
 8023c86:	3b01      	subs	r3, #1
 8023c88:	b2db      	uxtb	r3, r3
 8023c8a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8023c8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8023c90:	2b00      	cmp	r3, #0
 8023c92:	dce9      	bgt.n	8023c68 <prvUnlockQueue+0x60>
 8023c94:	e000      	b.n	8023c98 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8023c96:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8023c98:	687b      	ldr	r3, [r7, #4]
 8023c9a:	22ff      	movs	r2, #255	; 0xff
 8023c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8023ca0:	f001 faac 	bl	80251fc <vPortExitCritical>
}
 8023ca4:	bf00      	nop
 8023ca6:	3710      	adds	r7, #16
 8023ca8:	46bd      	mov	sp, r7
 8023caa:	bd80      	pop	{r7, pc}

08023cac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8023cac:	b580      	push	{r7, lr}
 8023cae:	b084      	sub	sp, #16
 8023cb0:	af00      	add	r7, sp, #0
 8023cb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8023cb4:	f001 fa90 	bl	80251d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8023cb8:	687b      	ldr	r3, [r7, #4]
 8023cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023cbc:	2b00      	cmp	r3, #0
 8023cbe:	d102      	bne.n	8023cc6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8023cc0:	2301      	movs	r3, #1
 8023cc2:	60fb      	str	r3, [r7, #12]
 8023cc4:	e001      	b.n	8023cca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8023cc6:	2300      	movs	r3, #0
 8023cc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8023cca:	f001 fa97 	bl	80251fc <vPortExitCritical>

	return xReturn;
 8023cce:	68fb      	ldr	r3, [r7, #12]
}
 8023cd0:	4618      	mov	r0, r3
 8023cd2:	3710      	adds	r7, #16
 8023cd4:	46bd      	mov	sp, r7
 8023cd6:	bd80      	pop	{r7, pc}

08023cd8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8023cd8:	b580      	push	{r7, lr}
 8023cda:	b084      	sub	sp, #16
 8023cdc:	af00      	add	r7, sp, #0
 8023cde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8023ce0:	f001 fa7a 	bl	80251d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8023ce4:	687b      	ldr	r3, [r7, #4]
 8023ce6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8023ce8:	687b      	ldr	r3, [r7, #4]
 8023cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023cec:	429a      	cmp	r2, r3
 8023cee:	d102      	bne.n	8023cf6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8023cf0:	2301      	movs	r3, #1
 8023cf2:	60fb      	str	r3, [r7, #12]
 8023cf4:	e001      	b.n	8023cfa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8023cf6:	2300      	movs	r3, #0
 8023cf8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8023cfa:	f001 fa7f 	bl	80251fc <vPortExitCritical>

	return xReturn;
 8023cfe:	68fb      	ldr	r3, [r7, #12]
}
 8023d00:	4618      	mov	r0, r3
 8023d02:	3710      	adds	r7, #16
 8023d04:	46bd      	mov	sp, r7
 8023d06:	bd80      	pop	{r7, pc}

08023d08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8023d08:	b480      	push	{r7}
 8023d0a:	b085      	sub	sp, #20
 8023d0c:	af00      	add	r7, sp, #0
 8023d0e:	6078      	str	r0, [r7, #4]
 8023d10:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8023d12:	2300      	movs	r3, #0
 8023d14:	60fb      	str	r3, [r7, #12]
 8023d16:	e014      	b.n	8023d42 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8023d18:	4a0f      	ldr	r2, [pc, #60]	; (8023d58 <vQueueAddToRegistry+0x50>)
 8023d1a:	68fb      	ldr	r3, [r7, #12]
 8023d1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8023d20:	2b00      	cmp	r3, #0
 8023d22:	d10b      	bne.n	8023d3c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8023d24:	490c      	ldr	r1, [pc, #48]	; (8023d58 <vQueueAddToRegistry+0x50>)
 8023d26:	68fb      	ldr	r3, [r7, #12]
 8023d28:	683a      	ldr	r2, [r7, #0]
 8023d2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8023d2e:	4a0a      	ldr	r2, [pc, #40]	; (8023d58 <vQueueAddToRegistry+0x50>)
 8023d30:	68fb      	ldr	r3, [r7, #12]
 8023d32:	00db      	lsls	r3, r3, #3
 8023d34:	4413      	add	r3, r2
 8023d36:	687a      	ldr	r2, [r7, #4]
 8023d38:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8023d3a:	e006      	b.n	8023d4a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8023d3c:	68fb      	ldr	r3, [r7, #12]
 8023d3e:	3301      	adds	r3, #1
 8023d40:	60fb      	str	r3, [r7, #12]
 8023d42:	68fb      	ldr	r3, [r7, #12]
 8023d44:	2b07      	cmp	r3, #7
 8023d46:	d9e7      	bls.n	8023d18 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8023d48:	bf00      	nop
 8023d4a:	bf00      	nop
 8023d4c:	3714      	adds	r7, #20
 8023d4e:	46bd      	mov	sp, r7
 8023d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d54:	4770      	bx	lr
 8023d56:	bf00      	nop
 8023d58:	2000169c 	.word	0x2000169c

08023d5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8023d5c:	b580      	push	{r7, lr}
 8023d5e:	b086      	sub	sp, #24
 8023d60:	af00      	add	r7, sp, #0
 8023d62:	60f8      	str	r0, [r7, #12]
 8023d64:	60b9      	str	r1, [r7, #8]
 8023d66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8023d68:	68fb      	ldr	r3, [r7, #12]
 8023d6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8023d6c:	f001 fa34 	bl	80251d8 <vPortEnterCritical>
 8023d70:	697b      	ldr	r3, [r7, #20]
 8023d72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8023d76:	b25b      	sxtb	r3, r3
 8023d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023d7c:	d103      	bne.n	8023d86 <vQueueWaitForMessageRestricted+0x2a>
 8023d7e:	697b      	ldr	r3, [r7, #20]
 8023d80:	2200      	movs	r2, #0
 8023d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8023d86:	697b      	ldr	r3, [r7, #20]
 8023d88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8023d8c:	b25b      	sxtb	r3, r3
 8023d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023d92:	d103      	bne.n	8023d9c <vQueueWaitForMessageRestricted+0x40>
 8023d94:	697b      	ldr	r3, [r7, #20]
 8023d96:	2200      	movs	r2, #0
 8023d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8023d9c:	f001 fa2e 	bl	80251fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8023da0:	697b      	ldr	r3, [r7, #20]
 8023da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023da4:	2b00      	cmp	r3, #0
 8023da6:	d106      	bne.n	8023db6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8023da8:	697b      	ldr	r3, [r7, #20]
 8023daa:	3324      	adds	r3, #36	; 0x24
 8023dac:	687a      	ldr	r2, [r7, #4]
 8023dae:	68b9      	ldr	r1, [r7, #8]
 8023db0:	4618      	mov	r0, r3
 8023db2:	f000 fc29 	bl	8024608 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8023db6:	6978      	ldr	r0, [r7, #20]
 8023db8:	f7ff ff26 	bl	8023c08 <prvUnlockQueue>
	}
 8023dbc:	bf00      	nop
 8023dbe:	3718      	adds	r7, #24
 8023dc0:	46bd      	mov	sp, r7
 8023dc2:	bd80      	pop	{r7, pc}

08023dc4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8023dc4:	b580      	push	{r7, lr}
 8023dc6:	b08c      	sub	sp, #48	; 0x30
 8023dc8:	af04      	add	r7, sp, #16
 8023dca:	60f8      	str	r0, [r7, #12]
 8023dcc:	60b9      	str	r1, [r7, #8]
 8023dce:	607a      	str	r2, [r7, #4]
 8023dd0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8023dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023dd4:	2b00      	cmp	r3, #0
 8023dd6:	d102      	bne.n	8023dde <xTaskCreateStatic+0x1a>
 8023dd8:	f001 fb36 	bl	8025448 <ulSetInterruptMask>
 8023ddc:	e7fe      	b.n	8023ddc <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 8023dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023de0:	2b00      	cmp	r3, #0
 8023de2:	d102      	bne.n	8023dea <xTaskCreateStatic+0x26>
 8023de4:	f001 fb30 	bl	8025448 <ulSetInterruptMask>
 8023de8:	e7fe      	b.n	8023de8 <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8023dea:	235c      	movs	r3, #92	; 0x5c
 8023dec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8023dee:	697b      	ldr	r3, [r7, #20]
 8023df0:	2b5c      	cmp	r3, #92	; 0x5c
 8023df2:	d002      	beq.n	8023dfa <xTaskCreateStatic+0x36>
 8023df4:	f001 fb28 	bl	8025448 <ulSetInterruptMask>
 8023df8:	e7fe      	b.n	8023df8 <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8023dfa:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8023dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023dfe:	2b00      	cmp	r3, #0
 8023e00:	d01e      	beq.n	8023e40 <xTaskCreateStatic+0x7c>
 8023e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023e04:	2b00      	cmp	r3, #0
 8023e06:	d01b      	beq.n	8023e40 <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8023e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023e0a:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8023e0c:	69fb      	ldr	r3, [r7, #28]
 8023e0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023e10:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8023e12:	69fb      	ldr	r3, [r7, #28]
 8023e14:	2202      	movs	r2, #2
 8023e16:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8023e1a:	2300      	movs	r3, #0
 8023e1c:	9303      	str	r3, [sp, #12]
 8023e1e:	69fb      	ldr	r3, [r7, #28]
 8023e20:	9302      	str	r3, [sp, #8]
 8023e22:	f107 0318 	add.w	r3, r7, #24
 8023e26:	9301      	str	r3, [sp, #4]
 8023e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023e2a:	9300      	str	r3, [sp, #0]
 8023e2c:	683b      	ldr	r3, [r7, #0]
 8023e2e:	687a      	ldr	r2, [r7, #4]
 8023e30:	68b9      	ldr	r1, [r7, #8]
 8023e32:	68f8      	ldr	r0, [r7, #12]
 8023e34:	f000 f850 	bl	8023ed8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8023e38:	69f8      	ldr	r0, [r7, #28]
 8023e3a:	f000 f8d7 	bl	8023fec <prvAddNewTaskToReadyList>
 8023e3e:	e001      	b.n	8023e44 <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 8023e40:	2300      	movs	r3, #0
 8023e42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8023e44:	69bb      	ldr	r3, [r7, #24]
	}
 8023e46:	4618      	mov	r0, r3
 8023e48:	3720      	adds	r7, #32
 8023e4a:	46bd      	mov	sp, r7
 8023e4c:	bd80      	pop	{r7, pc}

08023e4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8023e4e:	b580      	push	{r7, lr}
 8023e50:	b08c      	sub	sp, #48	; 0x30
 8023e52:	af04      	add	r7, sp, #16
 8023e54:	60f8      	str	r0, [r7, #12]
 8023e56:	60b9      	str	r1, [r7, #8]
 8023e58:	603b      	str	r3, [r7, #0]
 8023e5a:	4613      	mov	r3, r2
 8023e5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8023e5e:	88fb      	ldrh	r3, [r7, #6]
 8023e60:	009b      	lsls	r3, r3, #2
 8023e62:	4618      	mov	r0, r3
 8023e64:	f001 fb50 	bl	8025508 <pvPortMalloc>
 8023e68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8023e6a:	697b      	ldr	r3, [r7, #20]
 8023e6c:	2b00      	cmp	r3, #0
 8023e6e:	d00e      	beq.n	8023e8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8023e70:	205c      	movs	r0, #92	; 0x5c
 8023e72:	f001 fb49 	bl	8025508 <pvPortMalloc>
 8023e76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8023e78:	69fb      	ldr	r3, [r7, #28]
 8023e7a:	2b00      	cmp	r3, #0
 8023e7c:	d003      	beq.n	8023e86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8023e7e:	69fb      	ldr	r3, [r7, #28]
 8023e80:	697a      	ldr	r2, [r7, #20]
 8023e82:	631a      	str	r2, [r3, #48]	; 0x30
 8023e84:	e005      	b.n	8023e92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8023e86:	6978      	ldr	r0, [r7, #20]
 8023e88:	f001 fbf2 	bl	8025670 <vPortFree>
 8023e8c:	e001      	b.n	8023e92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8023e8e:	2300      	movs	r3, #0
 8023e90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8023e92:	69fb      	ldr	r3, [r7, #28]
 8023e94:	2b00      	cmp	r3, #0
 8023e96:	d017      	beq.n	8023ec8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8023e98:	69fb      	ldr	r3, [r7, #28]
 8023e9a:	2200      	movs	r2, #0
 8023e9c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8023ea0:	88fa      	ldrh	r2, [r7, #6]
 8023ea2:	2300      	movs	r3, #0
 8023ea4:	9303      	str	r3, [sp, #12]
 8023ea6:	69fb      	ldr	r3, [r7, #28]
 8023ea8:	9302      	str	r3, [sp, #8]
 8023eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023eac:	9301      	str	r3, [sp, #4]
 8023eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023eb0:	9300      	str	r3, [sp, #0]
 8023eb2:	683b      	ldr	r3, [r7, #0]
 8023eb4:	68b9      	ldr	r1, [r7, #8]
 8023eb6:	68f8      	ldr	r0, [r7, #12]
 8023eb8:	f000 f80e 	bl	8023ed8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8023ebc:	69f8      	ldr	r0, [r7, #28]
 8023ebe:	f000 f895 	bl	8023fec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8023ec2:	2301      	movs	r3, #1
 8023ec4:	61bb      	str	r3, [r7, #24]
 8023ec6:	e002      	b.n	8023ece <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8023ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8023ecc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8023ece:	69bb      	ldr	r3, [r7, #24]
	}
 8023ed0:	4618      	mov	r0, r3
 8023ed2:	3720      	adds	r7, #32
 8023ed4:	46bd      	mov	sp, r7
 8023ed6:	bd80      	pop	{r7, pc}

08023ed8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8023ed8:	b580      	push	{r7, lr}
 8023eda:	b086      	sub	sp, #24
 8023edc:	af00      	add	r7, sp, #0
 8023ede:	60f8      	str	r0, [r7, #12]
 8023ee0:	60b9      	str	r1, [r7, #8]
 8023ee2:	607a      	str	r2, [r7, #4]
 8023ee4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8023ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023ee8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8023eea:	687b      	ldr	r3, [r7, #4]
 8023eec:	009b      	lsls	r3, r3, #2
 8023eee:	461a      	mov	r2, r3
 8023ef0:	21a5      	movs	r1, #165	; 0xa5
 8023ef2:	f004 fe03 	bl	8028afc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8023ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023ef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8023efa:	687b      	ldr	r3, [r7, #4]
 8023efc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8023f00:	3b01      	subs	r3, #1
 8023f02:	009b      	lsls	r3, r3, #2
 8023f04:	4413      	add	r3, r2
 8023f06:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8023f08:	693b      	ldr	r3, [r7, #16]
 8023f0a:	f023 0307 	bic.w	r3, r3, #7
 8023f0e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8023f10:	693b      	ldr	r3, [r7, #16]
 8023f12:	f003 0307 	and.w	r3, r3, #7
 8023f16:	2b00      	cmp	r3, #0
 8023f18:	d002      	beq.n	8023f20 <prvInitialiseNewTask+0x48>
 8023f1a:	f001 fa95 	bl	8025448 <ulSetInterruptMask>
 8023f1e:	e7fe      	b.n	8023f1e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8023f20:	68bb      	ldr	r3, [r7, #8]
 8023f22:	2b00      	cmp	r3, #0
 8023f24:	d01f      	beq.n	8023f66 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8023f26:	2300      	movs	r3, #0
 8023f28:	617b      	str	r3, [r7, #20]
 8023f2a:	e012      	b.n	8023f52 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8023f2c:	68ba      	ldr	r2, [r7, #8]
 8023f2e:	697b      	ldr	r3, [r7, #20]
 8023f30:	4413      	add	r3, r2
 8023f32:	7819      	ldrb	r1, [r3, #0]
 8023f34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023f36:	697b      	ldr	r3, [r7, #20]
 8023f38:	4413      	add	r3, r2
 8023f3a:	3334      	adds	r3, #52	; 0x34
 8023f3c:	460a      	mov	r2, r1
 8023f3e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8023f40:	68ba      	ldr	r2, [r7, #8]
 8023f42:	697b      	ldr	r3, [r7, #20]
 8023f44:	4413      	add	r3, r2
 8023f46:	781b      	ldrb	r3, [r3, #0]
 8023f48:	2b00      	cmp	r3, #0
 8023f4a:	d006      	beq.n	8023f5a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8023f4c:	697b      	ldr	r3, [r7, #20]
 8023f4e:	3301      	adds	r3, #1
 8023f50:	617b      	str	r3, [r7, #20]
 8023f52:	697b      	ldr	r3, [r7, #20]
 8023f54:	2b0f      	cmp	r3, #15
 8023f56:	d9e9      	bls.n	8023f2c <prvInitialiseNewTask+0x54>
 8023f58:	e000      	b.n	8023f5c <prvInitialiseNewTask+0x84>
			{
				break;
 8023f5a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8023f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023f5e:	2200      	movs	r2, #0
 8023f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8023f64:	e003      	b.n	8023f6e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8023f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023f68:	2200      	movs	r2, #0
 8023f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8023f6e:	6a3b      	ldr	r3, [r7, #32]
 8023f70:	2b37      	cmp	r3, #55	; 0x37
 8023f72:	d901      	bls.n	8023f78 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8023f74:	2337      	movs	r3, #55	; 0x37
 8023f76:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8023f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023f7a:	6a3a      	ldr	r2, [r7, #32]
 8023f7c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8023f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023f80:	6a3a      	ldr	r2, [r7, #32]
 8023f82:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8023f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023f86:	2200      	movs	r2, #0
 8023f88:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8023f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023f8c:	3304      	adds	r3, #4
 8023f8e:	4618      	mov	r0, r3
 8023f90:	f7ff fa58 	bl	8023444 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8023f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023f96:	3318      	adds	r3, #24
 8023f98:	4618      	mov	r0, r3
 8023f9a:	f7ff fa53 	bl	8023444 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8023f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023fa2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8023fa4:	6a3b      	ldr	r3, [r7, #32]
 8023fa6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8023faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023fac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8023fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023fb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023fb2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8023fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023fb6:	2200      	movs	r2, #0
 8023fb8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8023fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023fbc:	2200      	movs	r2, #0
 8023fbe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8023fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023fc4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8023fc6:	683b      	ldr	r3, [r7, #0]
 8023fc8:	68fa      	ldr	r2, [r7, #12]
 8023fca:	6938      	ldr	r0, [r7, #16]
 8023fcc:	f001 f960 	bl	8025290 <pxPortInitialiseStack>
 8023fd0:	4602      	mov	r2, r0
 8023fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023fd4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8023fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023fd8:	2b00      	cmp	r3, #0
 8023fda:	d002      	beq.n	8023fe2 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8023fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023fde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023fe0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8023fe2:	bf00      	nop
 8023fe4:	3718      	adds	r7, #24
 8023fe6:	46bd      	mov	sp, r7
 8023fe8:	bd80      	pop	{r7, pc}
	...

08023fec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8023fec:	b580      	push	{r7, lr}
 8023fee:	b082      	sub	sp, #8
 8023ff0:	af00      	add	r7, sp, #0
 8023ff2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8023ff4:	f001 f8f0 	bl	80251d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8023ff8:	4b2a      	ldr	r3, [pc, #168]	; (80240a4 <prvAddNewTaskToReadyList+0xb8>)
 8023ffa:	681b      	ldr	r3, [r3, #0]
 8023ffc:	3301      	adds	r3, #1
 8023ffe:	4a29      	ldr	r2, [pc, #164]	; (80240a4 <prvAddNewTaskToReadyList+0xb8>)
 8024000:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8024002:	4b29      	ldr	r3, [pc, #164]	; (80240a8 <prvAddNewTaskToReadyList+0xbc>)
 8024004:	681b      	ldr	r3, [r3, #0]
 8024006:	2b00      	cmp	r3, #0
 8024008:	d109      	bne.n	802401e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 802400a:	4a27      	ldr	r2, [pc, #156]	; (80240a8 <prvAddNewTaskToReadyList+0xbc>)
 802400c:	687b      	ldr	r3, [r7, #4]
 802400e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8024010:	4b24      	ldr	r3, [pc, #144]	; (80240a4 <prvAddNewTaskToReadyList+0xb8>)
 8024012:	681b      	ldr	r3, [r3, #0]
 8024014:	2b01      	cmp	r3, #1
 8024016:	d110      	bne.n	802403a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8024018:	f000 fbfa 	bl	8024810 <prvInitialiseTaskLists>
 802401c:	e00d      	b.n	802403a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 802401e:	4b23      	ldr	r3, [pc, #140]	; (80240ac <prvAddNewTaskToReadyList+0xc0>)
 8024020:	681b      	ldr	r3, [r3, #0]
 8024022:	2b00      	cmp	r3, #0
 8024024:	d109      	bne.n	802403a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8024026:	4b20      	ldr	r3, [pc, #128]	; (80240a8 <prvAddNewTaskToReadyList+0xbc>)
 8024028:	681b      	ldr	r3, [r3, #0]
 802402a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802402c:	687b      	ldr	r3, [r7, #4]
 802402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024030:	429a      	cmp	r2, r3
 8024032:	d802      	bhi.n	802403a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8024034:	4a1c      	ldr	r2, [pc, #112]	; (80240a8 <prvAddNewTaskToReadyList+0xbc>)
 8024036:	687b      	ldr	r3, [r7, #4]
 8024038:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 802403a:	4b1d      	ldr	r3, [pc, #116]	; (80240b0 <prvAddNewTaskToReadyList+0xc4>)
 802403c:	681b      	ldr	r3, [r3, #0]
 802403e:	3301      	adds	r3, #1
 8024040:	4a1b      	ldr	r2, [pc, #108]	; (80240b0 <prvAddNewTaskToReadyList+0xc4>)
 8024042:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8024044:	4b1a      	ldr	r3, [pc, #104]	; (80240b0 <prvAddNewTaskToReadyList+0xc4>)
 8024046:	681a      	ldr	r2, [r3, #0]
 8024048:	687b      	ldr	r3, [r7, #4]
 802404a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 802404c:	687b      	ldr	r3, [r7, #4]
 802404e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8024050:	4b18      	ldr	r3, [pc, #96]	; (80240b4 <prvAddNewTaskToReadyList+0xc8>)
 8024052:	681b      	ldr	r3, [r3, #0]
 8024054:	429a      	cmp	r2, r3
 8024056:	d903      	bls.n	8024060 <prvAddNewTaskToReadyList+0x74>
 8024058:	687b      	ldr	r3, [r7, #4]
 802405a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802405c:	4a15      	ldr	r2, [pc, #84]	; (80240b4 <prvAddNewTaskToReadyList+0xc8>)
 802405e:	6013      	str	r3, [r2, #0]
 8024060:	687b      	ldr	r3, [r7, #4]
 8024062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8024064:	4613      	mov	r3, r2
 8024066:	009b      	lsls	r3, r3, #2
 8024068:	4413      	add	r3, r2
 802406a:	009b      	lsls	r3, r3, #2
 802406c:	4a12      	ldr	r2, [pc, #72]	; (80240b8 <prvAddNewTaskToReadyList+0xcc>)
 802406e:	441a      	add	r2, r3
 8024070:	687b      	ldr	r3, [r7, #4]
 8024072:	3304      	adds	r3, #4
 8024074:	4619      	mov	r1, r3
 8024076:	4610      	mov	r0, r2
 8024078:	f7ff f9f1 	bl	802345e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 802407c:	f001 f8be 	bl	80251fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8024080:	4b0a      	ldr	r3, [pc, #40]	; (80240ac <prvAddNewTaskToReadyList+0xc0>)
 8024082:	681b      	ldr	r3, [r3, #0]
 8024084:	2b00      	cmp	r3, #0
 8024086:	d008      	beq.n	802409a <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8024088:	4b07      	ldr	r3, [pc, #28]	; (80240a8 <prvAddNewTaskToReadyList+0xbc>)
 802408a:	681b      	ldr	r3, [r3, #0]
 802408c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802408e:	687b      	ldr	r3, [r7, #4]
 8024090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024092:	429a      	cmp	r2, r3
 8024094:	d201      	bcs.n	802409a <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8024096:	f001 f88d 	bl	80251b4 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 802409a:	bf00      	nop
 802409c:	3708      	adds	r7, #8
 802409e:	46bd      	mov	sp, r7
 80240a0:	bd80      	pop	{r7, pc}
 80240a2:	bf00      	nop
 80240a4:	20001bb0 	.word	0x20001bb0
 80240a8:	200016dc 	.word	0x200016dc
 80240ac:	20001bbc 	.word	0x20001bbc
 80240b0:	20001bcc 	.word	0x20001bcc
 80240b4:	20001bb8 	.word	0x20001bb8
 80240b8:	200016e0 	.word	0x200016e0

080240bc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80240bc:	b580      	push	{r7, lr}
 80240be:	b086      	sub	sp, #24
 80240c0:	af00      	add	r7, sp, #0
 80240c2:	6078      	str	r0, [r7, #4]
 80240c4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80240c6:	2300      	movs	r3, #0
 80240c8:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 80240ca:	687b      	ldr	r3, [r7, #4]
 80240cc:	2b00      	cmp	r3, #0
 80240ce:	d102      	bne.n	80240d6 <vTaskDelayUntil+0x1a>
 80240d0:	f001 f9ba 	bl	8025448 <ulSetInterruptMask>
 80240d4:	e7fe      	b.n	80240d4 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
 80240d6:	683b      	ldr	r3, [r7, #0]
 80240d8:	2b00      	cmp	r3, #0
 80240da:	d102      	bne.n	80240e2 <vTaskDelayUntil+0x26>
 80240dc:	f001 f9b4 	bl	8025448 <ulSetInterruptMask>
 80240e0:	e7fe      	b.n	80240e0 <vTaskDelayUntil+0x24>
		configASSERT( uxSchedulerSuspended == 0 );
 80240e2:	4b23      	ldr	r3, [pc, #140]	; (8024170 <vTaskDelayUntil+0xb4>)
 80240e4:	681b      	ldr	r3, [r3, #0]
 80240e6:	2b00      	cmp	r3, #0
 80240e8:	d002      	beq.n	80240f0 <vTaskDelayUntil+0x34>
 80240ea:	f001 f9ad 	bl	8025448 <ulSetInterruptMask>
 80240ee:	e7fe      	b.n	80240ee <vTaskDelayUntil+0x32>

		vTaskSuspendAll();
 80240f0:	f000 f8bc 	bl	802426c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80240f4:	4b1f      	ldr	r3, [pc, #124]	; (8024174 <vTaskDelayUntil+0xb8>)
 80240f6:	681b      	ldr	r3, [r3, #0]
 80240f8:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80240fa:	687b      	ldr	r3, [r7, #4]
 80240fc:	681b      	ldr	r3, [r3, #0]
 80240fe:	683a      	ldr	r2, [r7, #0]
 8024100:	4413      	add	r3, r2
 8024102:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 8024104:	687b      	ldr	r3, [r7, #4]
 8024106:	681b      	ldr	r3, [r3, #0]
 8024108:	693a      	ldr	r2, [r7, #16]
 802410a:	429a      	cmp	r2, r3
 802410c:	d20b      	bcs.n	8024126 <vTaskDelayUntil+0x6a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 802410e:	687b      	ldr	r3, [r7, #4]
 8024110:	681b      	ldr	r3, [r3, #0]
 8024112:	68fa      	ldr	r2, [r7, #12]
 8024114:	429a      	cmp	r2, r3
 8024116:	d211      	bcs.n	802413c <vTaskDelayUntil+0x80>
 8024118:	68fa      	ldr	r2, [r7, #12]
 802411a:	693b      	ldr	r3, [r7, #16]
 802411c:	429a      	cmp	r2, r3
 802411e:	d90d      	bls.n	802413c <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
 8024120:	2301      	movs	r3, #1
 8024122:	617b      	str	r3, [r7, #20]
 8024124:	e00a      	b.n	802413c <vTaskDelayUntil+0x80>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8024126:	687b      	ldr	r3, [r7, #4]
 8024128:	681b      	ldr	r3, [r3, #0]
 802412a:	68fa      	ldr	r2, [r7, #12]
 802412c:	429a      	cmp	r2, r3
 802412e:	d303      	bcc.n	8024138 <vTaskDelayUntil+0x7c>
 8024130:	68fa      	ldr	r2, [r7, #12]
 8024132:	693b      	ldr	r3, [r7, #16]
 8024134:	429a      	cmp	r2, r3
 8024136:	d901      	bls.n	802413c <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
 8024138:	2301      	movs	r3, #1
 802413a:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 802413c:	687b      	ldr	r3, [r7, #4]
 802413e:	68fa      	ldr	r2, [r7, #12]
 8024140:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8024142:	697b      	ldr	r3, [r7, #20]
 8024144:	2b00      	cmp	r3, #0
 8024146:	d006      	beq.n	8024156 <vTaskDelayUntil+0x9a>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8024148:	68fa      	ldr	r2, [r7, #12]
 802414a:	693b      	ldr	r3, [r7, #16]
 802414c:	1ad3      	subs	r3, r2, r3
 802414e:	2100      	movs	r1, #0
 8024150:	4618      	mov	r0, r3
 8024152:	f000 fc8f 	bl	8024a74 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8024156:	f000 f897 	bl	8024288 <xTaskResumeAll>
 802415a:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 802415c:	68bb      	ldr	r3, [r7, #8]
 802415e:	2b00      	cmp	r3, #0
 8024160:	d101      	bne.n	8024166 <vTaskDelayUntil+0xaa>
		{
			portYIELD_WITHIN_API();
 8024162:	f001 f827 	bl	80251b4 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8024166:	bf00      	nop
 8024168:	3718      	adds	r7, #24
 802416a:	46bd      	mov	sp, r7
 802416c:	bd80      	pop	{r7, pc}
 802416e:	bf00      	nop
 8024170:	20001bd8 	.word	0x20001bd8
 8024174:	20001bb4 	.word	0x20001bb4

08024178 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8024178:	b580      	push	{r7, lr}
 802417a:	b084      	sub	sp, #16
 802417c:	af00      	add	r7, sp, #0
 802417e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8024180:	2300      	movs	r3, #0
 8024182:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8024184:	687b      	ldr	r3, [r7, #4]
 8024186:	2b00      	cmp	r3, #0
 8024188:	d00f      	beq.n	80241aa <vTaskDelay+0x32>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 802418a:	4b0c      	ldr	r3, [pc, #48]	; (80241bc <vTaskDelay+0x44>)
 802418c:	681b      	ldr	r3, [r3, #0]
 802418e:	2b00      	cmp	r3, #0
 8024190:	d002      	beq.n	8024198 <vTaskDelay+0x20>
 8024192:	f001 f959 	bl	8025448 <ulSetInterruptMask>
 8024196:	e7fe      	b.n	8024196 <vTaskDelay+0x1e>
			vTaskSuspendAll();
 8024198:	f000 f868 	bl	802426c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 802419c:	2100      	movs	r1, #0
 802419e:	6878      	ldr	r0, [r7, #4]
 80241a0:	f000 fc68 	bl	8024a74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80241a4:	f000 f870 	bl	8024288 <xTaskResumeAll>
 80241a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80241aa:	68fb      	ldr	r3, [r7, #12]
 80241ac:	2b00      	cmp	r3, #0
 80241ae:	d101      	bne.n	80241b4 <vTaskDelay+0x3c>
		{
			portYIELD_WITHIN_API();
 80241b0:	f001 f800 	bl	80251b4 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80241b4:	bf00      	nop
 80241b6:	3710      	adds	r7, #16
 80241b8:	46bd      	mov	sp, r7
 80241ba:	bd80      	pop	{r7, pc}
 80241bc:	20001bd8 	.word	0x20001bd8

080241c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80241c0:	b580      	push	{r7, lr}
 80241c2:	b088      	sub	sp, #32
 80241c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80241c6:	2300      	movs	r3, #0
 80241c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80241ca:	2300      	movs	r3, #0
 80241cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80241ce:	463a      	mov	r2, r7
 80241d0:	1d39      	adds	r1, r7, #4
 80241d2:	f107 0308 	add.w	r3, r7, #8
 80241d6:	4618      	mov	r0, r3
 80241d8:	f7ff f8e0 	bl	802339c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80241dc:	6839      	ldr	r1, [r7, #0]
 80241de:	687b      	ldr	r3, [r7, #4]
 80241e0:	68ba      	ldr	r2, [r7, #8]
 80241e2:	9202      	str	r2, [sp, #8]
 80241e4:	9301      	str	r3, [sp, #4]
 80241e6:	2300      	movs	r3, #0
 80241e8:	9300      	str	r3, [sp, #0]
 80241ea:	2300      	movs	r3, #0
 80241ec:	460a      	mov	r2, r1
 80241ee:	4919      	ldr	r1, [pc, #100]	; (8024254 <vTaskStartScheduler+0x94>)
 80241f0:	4819      	ldr	r0, [pc, #100]	; (8024258 <vTaskStartScheduler+0x98>)
 80241f2:	f7ff fde7 	bl	8023dc4 <xTaskCreateStatic>
 80241f6:	4603      	mov	r3, r0
 80241f8:	4a18      	ldr	r2, [pc, #96]	; (802425c <vTaskStartScheduler+0x9c>)
 80241fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80241fc:	4b17      	ldr	r3, [pc, #92]	; (802425c <vTaskStartScheduler+0x9c>)
 80241fe:	681b      	ldr	r3, [r3, #0]
 8024200:	2b00      	cmp	r3, #0
 8024202:	d002      	beq.n	802420a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8024204:	2301      	movs	r3, #1
 8024206:	60fb      	str	r3, [r7, #12]
 8024208:	e001      	b.n	802420e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 802420a:	2300      	movs	r3, #0
 802420c:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 802420e:	68fb      	ldr	r3, [r7, #12]
 8024210:	2b01      	cmp	r3, #1
 8024212:	d102      	bne.n	802421a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8024214:	f000 fc82 	bl	8024b1c <xTimerCreateTimerTask>
 8024218:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 802421a:	68fb      	ldr	r3, [r7, #12]
 802421c:	2b01      	cmp	r3, #1
 802421e:	d10e      	bne.n	802423e <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8024220:	f001 f912 	bl	8025448 <ulSetInterruptMask>
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8024224:	4b0e      	ldr	r3, [pc, #56]	; (8024260 <vTaskStartScheduler+0xa0>)
 8024226:	f04f 32ff 	mov.w	r2, #4294967295
 802422a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 802422c:	4b0d      	ldr	r3, [pc, #52]	; (8024264 <vTaskStartScheduler+0xa4>)
 802422e:	2201      	movs	r2, #1
 8024230:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8024232:	4b0d      	ldr	r3, [pc, #52]	; (8024268 <vTaskStartScheduler+0xa8>)
 8024234:	2200      	movs	r2, #0
 8024236:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8024238:	f001 f8b4 	bl	80253a4 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 802423c:	e006      	b.n	802424c <vTaskStartScheduler+0x8c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 802423e:	68fb      	ldr	r3, [r7, #12]
 8024240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024244:	d102      	bne.n	802424c <vTaskStartScheduler+0x8c>
 8024246:	f001 f8ff 	bl	8025448 <ulSetInterruptMask>
 802424a:	e7fe      	b.n	802424a <vTaskStartScheduler+0x8a>
}
 802424c:	bf00      	nop
 802424e:	3710      	adds	r7, #16
 8024250:	46bd      	mov	sp, r7
 8024252:	bd80      	pop	{r7, pc}
 8024254:	080297f4 	.word	0x080297f4
 8024258:	080247f1 	.word	0x080247f1
 802425c:	20001bd4 	.word	0x20001bd4
 8024260:	20001bd0 	.word	0x20001bd0
 8024264:	20001bbc 	.word	0x20001bbc
 8024268:	20001bb4 	.word	0x20001bb4

0802426c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 802426c:	b480      	push	{r7}
 802426e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8024270:	4b04      	ldr	r3, [pc, #16]	; (8024284 <vTaskSuspendAll+0x18>)
 8024272:	681b      	ldr	r3, [r3, #0]
 8024274:	3301      	adds	r3, #1
 8024276:	4a03      	ldr	r2, [pc, #12]	; (8024284 <vTaskSuspendAll+0x18>)
 8024278:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 802427a:	bf00      	nop
 802427c:	46bd      	mov	sp, r7
 802427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024282:	4770      	bx	lr
 8024284:	20001bd8 	.word	0x20001bd8

08024288 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8024288:	b580      	push	{r7, lr}
 802428a:	b084      	sub	sp, #16
 802428c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 802428e:	2300      	movs	r3, #0
 8024290:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8024292:	2300      	movs	r3, #0
 8024294:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8024296:	4b3b      	ldr	r3, [pc, #236]	; (8024384 <xTaskResumeAll+0xfc>)
 8024298:	681b      	ldr	r3, [r3, #0]
 802429a:	2b00      	cmp	r3, #0
 802429c:	d102      	bne.n	80242a4 <xTaskResumeAll+0x1c>
 802429e:	f001 f8d3 	bl	8025448 <ulSetInterruptMask>
 80242a2:	e7fe      	b.n	80242a2 <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80242a4:	f000 ff98 	bl	80251d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80242a8:	4b36      	ldr	r3, [pc, #216]	; (8024384 <xTaskResumeAll+0xfc>)
 80242aa:	681b      	ldr	r3, [r3, #0]
 80242ac:	3b01      	subs	r3, #1
 80242ae:	4a35      	ldr	r2, [pc, #212]	; (8024384 <xTaskResumeAll+0xfc>)
 80242b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80242b2:	4b34      	ldr	r3, [pc, #208]	; (8024384 <xTaskResumeAll+0xfc>)
 80242b4:	681b      	ldr	r3, [r3, #0]
 80242b6:	2b00      	cmp	r3, #0
 80242b8:	d15c      	bne.n	8024374 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80242ba:	4b33      	ldr	r3, [pc, #204]	; (8024388 <xTaskResumeAll+0x100>)
 80242bc:	681b      	ldr	r3, [r3, #0]
 80242be:	2b00      	cmp	r3, #0
 80242c0:	d058      	beq.n	8024374 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80242c2:	e02f      	b.n	8024324 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80242c4:	4b31      	ldr	r3, [pc, #196]	; (802438c <xTaskResumeAll+0x104>)
 80242c6:	68db      	ldr	r3, [r3, #12]
 80242c8:	68db      	ldr	r3, [r3, #12]
 80242ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80242cc:	68fb      	ldr	r3, [r7, #12]
 80242ce:	3318      	adds	r3, #24
 80242d0:	4618      	mov	r0, r3
 80242d2:	f7ff f921 	bl	8023518 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80242d6:	68fb      	ldr	r3, [r7, #12]
 80242d8:	3304      	adds	r3, #4
 80242da:	4618      	mov	r0, r3
 80242dc:	f7ff f91c 	bl	8023518 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80242e0:	68fb      	ldr	r3, [r7, #12]
 80242e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80242e4:	4b2a      	ldr	r3, [pc, #168]	; (8024390 <xTaskResumeAll+0x108>)
 80242e6:	681b      	ldr	r3, [r3, #0]
 80242e8:	429a      	cmp	r2, r3
 80242ea:	d903      	bls.n	80242f4 <xTaskResumeAll+0x6c>
 80242ec:	68fb      	ldr	r3, [r7, #12]
 80242ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80242f0:	4a27      	ldr	r2, [pc, #156]	; (8024390 <xTaskResumeAll+0x108>)
 80242f2:	6013      	str	r3, [r2, #0]
 80242f4:	68fb      	ldr	r3, [r7, #12]
 80242f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80242f8:	4613      	mov	r3, r2
 80242fa:	009b      	lsls	r3, r3, #2
 80242fc:	4413      	add	r3, r2
 80242fe:	009b      	lsls	r3, r3, #2
 8024300:	4a24      	ldr	r2, [pc, #144]	; (8024394 <xTaskResumeAll+0x10c>)
 8024302:	441a      	add	r2, r3
 8024304:	68fb      	ldr	r3, [r7, #12]
 8024306:	3304      	adds	r3, #4
 8024308:	4619      	mov	r1, r3
 802430a:	4610      	mov	r0, r2
 802430c:	f7ff f8a7 	bl	802345e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8024310:	68fb      	ldr	r3, [r7, #12]
 8024312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8024314:	4b20      	ldr	r3, [pc, #128]	; (8024398 <xTaskResumeAll+0x110>)
 8024316:	681b      	ldr	r3, [r3, #0]
 8024318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802431a:	429a      	cmp	r2, r3
 802431c:	d302      	bcc.n	8024324 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 802431e:	4b1f      	ldr	r3, [pc, #124]	; (802439c <xTaskResumeAll+0x114>)
 8024320:	2201      	movs	r2, #1
 8024322:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8024324:	4b19      	ldr	r3, [pc, #100]	; (802438c <xTaskResumeAll+0x104>)
 8024326:	681b      	ldr	r3, [r3, #0]
 8024328:	2b00      	cmp	r3, #0
 802432a:	d1cb      	bne.n	80242c4 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 802432c:	68fb      	ldr	r3, [r7, #12]
 802432e:	2b00      	cmp	r3, #0
 8024330:	d001      	beq.n	8024336 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8024332:	f000 fb03 	bl	802493c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8024336:	4b1a      	ldr	r3, [pc, #104]	; (80243a0 <xTaskResumeAll+0x118>)
 8024338:	681b      	ldr	r3, [r3, #0]
 802433a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 802433c:	687b      	ldr	r3, [r7, #4]
 802433e:	2b00      	cmp	r3, #0
 8024340:	d010      	beq.n	8024364 <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8024342:	f000 f83f 	bl	80243c4 <xTaskIncrementTick>
 8024346:	4603      	mov	r3, r0
 8024348:	2b00      	cmp	r3, #0
 802434a:	d002      	beq.n	8024352 <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 802434c:	4b13      	ldr	r3, [pc, #76]	; (802439c <xTaskResumeAll+0x114>)
 802434e:	2201      	movs	r2, #1
 8024350:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8024352:	687b      	ldr	r3, [r7, #4]
 8024354:	3b01      	subs	r3, #1
 8024356:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8024358:	687b      	ldr	r3, [r7, #4]
 802435a:	2b00      	cmp	r3, #0
 802435c:	d1f1      	bne.n	8024342 <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 802435e:	4b10      	ldr	r3, [pc, #64]	; (80243a0 <xTaskResumeAll+0x118>)
 8024360:	2200      	movs	r2, #0
 8024362:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8024364:	4b0d      	ldr	r3, [pc, #52]	; (802439c <xTaskResumeAll+0x114>)
 8024366:	681b      	ldr	r3, [r3, #0]
 8024368:	2b00      	cmp	r3, #0
 802436a:	d003      	beq.n	8024374 <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 802436c:	2301      	movs	r3, #1
 802436e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8024370:	f000 ff20 	bl	80251b4 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8024374:	f000 ff42 	bl	80251fc <vPortExitCritical>

	return xAlreadyYielded;
 8024378:	68bb      	ldr	r3, [r7, #8]
}
 802437a:	4618      	mov	r0, r3
 802437c:	3710      	adds	r7, #16
 802437e:	46bd      	mov	sp, r7
 8024380:	bd80      	pop	{r7, pc}
 8024382:	bf00      	nop
 8024384:	20001bd8 	.word	0x20001bd8
 8024388:	20001bb0 	.word	0x20001bb0
 802438c:	20001b70 	.word	0x20001b70
 8024390:	20001bb8 	.word	0x20001bb8
 8024394:	200016e0 	.word	0x200016e0
 8024398:	200016dc 	.word	0x200016dc
 802439c:	20001bc4 	.word	0x20001bc4
 80243a0:	20001bc0 	.word	0x20001bc0

080243a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80243a4:	b480      	push	{r7}
 80243a6:	b083      	sub	sp, #12
 80243a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80243aa:	4b05      	ldr	r3, [pc, #20]	; (80243c0 <xTaskGetTickCount+0x1c>)
 80243ac:	681b      	ldr	r3, [r3, #0]
 80243ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80243b0:	687b      	ldr	r3, [r7, #4]
}
 80243b2:	4618      	mov	r0, r3
 80243b4:	370c      	adds	r7, #12
 80243b6:	46bd      	mov	sp, r7
 80243b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243bc:	4770      	bx	lr
 80243be:	bf00      	nop
 80243c0:	20001bb4 	.word	0x20001bb4

080243c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80243c4:	b580      	push	{r7, lr}
 80243c6:	b086      	sub	sp, #24
 80243c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80243ca:	2300      	movs	r3, #0
 80243cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80243ce:	4b4b      	ldr	r3, [pc, #300]	; (80244fc <xTaskIncrementTick+0x138>)
 80243d0:	681b      	ldr	r3, [r3, #0]
 80243d2:	2b00      	cmp	r3, #0
 80243d4:	f040 8087 	bne.w	80244e6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80243d8:	4b49      	ldr	r3, [pc, #292]	; (8024500 <xTaskIncrementTick+0x13c>)
 80243da:	681b      	ldr	r3, [r3, #0]
 80243dc:	3301      	adds	r3, #1
 80243de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80243e0:	4a47      	ldr	r2, [pc, #284]	; (8024500 <xTaskIncrementTick+0x13c>)
 80243e2:	693b      	ldr	r3, [r7, #16]
 80243e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80243e6:	693b      	ldr	r3, [r7, #16]
 80243e8:	2b00      	cmp	r3, #0
 80243ea:	d118      	bne.n	802441e <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 80243ec:	4b45      	ldr	r3, [pc, #276]	; (8024504 <xTaskIncrementTick+0x140>)
 80243ee:	681b      	ldr	r3, [r3, #0]
 80243f0:	681b      	ldr	r3, [r3, #0]
 80243f2:	2b00      	cmp	r3, #0
 80243f4:	d002      	beq.n	80243fc <xTaskIncrementTick+0x38>
 80243f6:	f001 f827 	bl	8025448 <ulSetInterruptMask>
 80243fa:	e7fe      	b.n	80243fa <xTaskIncrementTick+0x36>
 80243fc:	4b41      	ldr	r3, [pc, #260]	; (8024504 <xTaskIncrementTick+0x140>)
 80243fe:	681b      	ldr	r3, [r3, #0]
 8024400:	60fb      	str	r3, [r7, #12]
 8024402:	4b41      	ldr	r3, [pc, #260]	; (8024508 <xTaskIncrementTick+0x144>)
 8024404:	681b      	ldr	r3, [r3, #0]
 8024406:	4a3f      	ldr	r2, [pc, #252]	; (8024504 <xTaskIncrementTick+0x140>)
 8024408:	6013      	str	r3, [r2, #0]
 802440a:	4a3f      	ldr	r2, [pc, #252]	; (8024508 <xTaskIncrementTick+0x144>)
 802440c:	68fb      	ldr	r3, [r7, #12]
 802440e:	6013      	str	r3, [r2, #0]
 8024410:	4b3e      	ldr	r3, [pc, #248]	; (802450c <xTaskIncrementTick+0x148>)
 8024412:	681b      	ldr	r3, [r3, #0]
 8024414:	3301      	adds	r3, #1
 8024416:	4a3d      	ldr	r2, [pc, #244]	; (802450c <xTaskIncrementTick+0x148>)
 8024418:	6013      	str	r3, [r2, #0]
 802441a:	f000 fa8f 	bl	802493c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 802441e:	4b3c      	ldr	r3, [pc, #240]	; (8024510 <xTaskIncrementTick+0x14c>)
 8024420:	681b      	ldr	r3, [r3, #0]
 8024422:	693a      	ldr	r2, [r7, #16]
 8024424:	429a      	cmp	r2, r3
 8024426:	d349      	bcc.n	80244bc <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8024428:	4b36      	ldr	r3, [pc, #216]	; (8024504 <xTaskIncrementTick+0x140>)
 802442a:	681b      	ldr	r3, [r3, #0]
 802442c:	681b      	ldr	r3, [r3, #0]
 802442e:	2b00      	cmp	r3, #0
 8024430:	d104      	bne.n	802443c <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8024432:	4b37      	ldr	r3, [pc, #220]	; (8024510 <xTaskIncrementTick+0x14c>)
 8024434:	f04f 32ff 	mov.w	r2, #4294967295
 8024438:	601a      	str	r2, [r3, #0]
					break;
 802443a:	e03f      	b.n	80244bc <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802443c:	4b31      	ldr	r3, [pc, #196]	; (8024504 <xTaskIncrementTick+0x140>)
 802443e:	681b      	ldr	r3, [r3, #0]
 8024440:	68db      	ldr	r3, [r3, #12]
 8024442:	68db      	ldr	r3, [r3, #12]
 8024444:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8024446:	68bb      	ldr	r3, [r7, #8]
 8024448:	685b      	ldr	r3, [r3, #4]
 802444a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 802444c:	693a      	ldr	r2, [r7, #16]
 802444e:	687b      	ldr	r3, [r7, #4]
 8024450:	429a      	cmp	r2, r3
 8024452:	d203      	bcs.n	802445c <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8024454:	4a2e      	ldr	r2, [pc, #184]	; (8024510 <xTaskIncrementTick+0x14c>)
 8024456:	687b      	ldr	r3, [r7, #4]
 8024458:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 802445a:	e02f      	b.n	80244bc <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 802445c:	68bb      	ldr	r3, [r7, #8]
 802445e:	3304      	adds	r3, #4
 8024460:	4618      	mov	r0, r3
 8024462:	f7ff f859 	bl	8023518 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8024466:	68bb      	ldr	r3, [r7, #8]
 8024468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802446a:	2b00      	cmp	r3, #0
 802446c:	d004      	beq.n	8024478 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 802446e:	68bb      	ldr	r3, [r7, #8]
 8024470:	3318      	adds	r3, #24
 8024472:	4618      	mov	r0, r3
 8024474:	f7ff f850 	bl	8023518 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8024478:	68bb      	ldr	r3, [r7, #8]
 802447a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802447c:	4b25      	ldr	r3, [pc, #148]	; (8024514 <xTaskIncrementTick+0x150>)
 802447e:	681b      	ldr	r3, [r3, #0]
 8024480:	429a      	cmp	r2, r3
 8024482:	d903      	bls.n	802448c <xTaskIncrementTick+0xc8>
 8024484:	68bb      	ldr	r3, [r7, #8]
 8024486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024488:	4a22      	ldr	r2, [pc, #136]	; (8024514 <xTaskIncrementTick+0x150>)
 802448a:	6013      	str	r3, [r2, #0]
 802448c:	68bb      	ldr	r3, [r7, #8]
 802448e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8024490:	4613      	mov	r3, r2
 8024492:	009b      	lsls	r3, r3, #2
 8024494:	4413      	add	r3, r2
 8024496:	009b      	lsls	r3, r3, #2
 8024498:	4a1f      	ldr	r2, [pc, #124]	; (8024518 <xTaskIncrementTick+0x154>)
 802449a:	441a      	add	r2, r3
 802449c:	68bb      	ldr	r3, [r7, #8]
 802449e:	3304      	adds	r3, #4
 80244a0:	4619      	mov	r1, r3
 80244a2:	4610      	mov	r0, r2
 80244a4:	f7fe ffdb 	bl	802345e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80244a8:	68bb      	ldr	r3, [r7, #8]
 80244aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80244ac:	4b1b      	ldr	r3, [pc, #108]	; (802451c <xTaskIncrementTick+0x158>)
 80244ae:	681b      	ldr	r3, [r3, #0]
 80244b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80244b2:	429a      	cmp	r2, r3
 80244b4:	d3b8      	bcc.n	8024428 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 80244b6:	2301      	movs	r3, #1
 80244b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80244ba:	e7b5      	b.n	8024428 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80244bc:	4b17      	ldr	r3, [pc, #92]	; (802451c <xTaskIncrementTick+0x158>)
 80244be:	681b      	ldr	r3, [r3, #0]
 80244c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80244c2:	4915      	ldr	r1, [pc, #84]	; (8024518 <xTaskIncrementTick+0x154>)
 80244c4:	4613      	mov	r3, r2
 80244c6:	009b      	lsls	r3, r3, #2
 80244c8:	4413      	add	r3, r2
 80244ca:	009b      	lsls	r3, r3, #2
 80244cc:	440b      	add	r3, r1
 80244ce:	681b      	ldr	r3, [r3, #0]
 80244d0:	2b01      	cmp	r3, #1
 80244d2:	d901      	bls.n	80244d8 <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 80244d4:	2301      	movs	r3, #1
 80244d6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80244d8:	4b11      	ldr	r3, [pc, #68]	; (8024520 <xTaskIncrementTick+0x15c>)
 80244da:	681b      	ldr	r3, [r3, #0]
 80244dc:	2b00      	cmp	r3, #0
 80244de:	d007      	beq.n	80244f0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80244e0:	2301      	movs	r3, #1
 80244e2:	617b      	str	r3, [r7, #20]
 80244e4:	e004      	b.n	80244f0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80244e6:	4b0f      	ldr	r3, [pc, #60]	; (8024524 <xTaskIncrementTick+0x160>)
 80244e8:	681b      	ldr	r3, [r3, #0]
 80244ea:	3301      	adds	r3, #1
 80244ec:	4a0d      	ldr	r2, [pc, #52]	; (8024524 <xTaskIncrementTick+0x160>)
 80244ee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80244f0:	697b      	ldr	r3, [r7, #20]
}
 80244f2:	4618      	mov	r0, r3
 80244f4:	3718      	adds	r7, #24
 80244f6:	46bd      	mov	sp, r7
 80244f8:	bd80      	pop	{r7, pc}
 80244fa:	bf00      	nop
 80244fc:	20001bd8 	.word	0x20001bd8
 8024500:	20001bb4 	.word	0x20001bb4
 8024504:	20001b68 	.word	0x20001b68
 8024508:	20001b6c 	.word	0x20001b6c
 802450c:	20001bc8 	.word	0x20001bc8
 8024510:	20001bd0 	.word	0x20001bd0
 8024514:	20001bb8 	.word	0x20001bb8
 8024518:	200016e0 	.word	0x200016e0
 802451c:	200016dc 	.word	0x200016dc
 8024520:	20001bc4 	.word	0x20001bc4
 8024524:	20001bc0 	.word	0x20001bc0

08024528 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8024528:	b580      	push	{r7, lr}
 802452a:	b082      	sub	sp, #8
 802452c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 802452e:	4b23      	ldr	r3, [pc, #140]	; (80245bc <vTaskSwitchContext+0x94>)
 8024530:	681b      	ldr	r3, [r3, #0]
 8024532:	2b00      	cmp	r3, #0
 8024534:	d003      	beq.n	802453e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8024536:	4b22      	ldr	r3, [pc, #136]	; (80245c0 <vTaskSwitchContext+0x98>)
 8024538:	2201      	movs	r2, #1
 802453a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 802453c:	e039      	b.n	80245b2 <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 802453e:	4b20      	ldr	r3, [pc, #128]	; (80245c0 <vTaskSwitchContext+0x98>)
 8024540:	2200      	movs	r2, #0
 8024542:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8024544:	4b1f      	ldr	r3, [pc, #124]	; (80245c4 <vTaskSwitchContext+0x9c>)
 8024546:	681b      	ldr	r3, [r3, #0]
 8024548:	607b      	str	r3, [r7, #4]
 802454a:	e008      	b.n	802455e <vTaskSwitchContext+0x36>
 802454c:	687b      	ldr	r3, [r7, #4]
 802454e:	2b00      	cmp	r3, #0
 8024550:	d102      	bne.n	8024558 <vTaskSwitchContext+0x30>
 8024552:	f000 ff79 	bl	8025448 <ulSetInterruptMask>
 8024556:	e7fe      	b.n	8024556 <vTaskSwitchContext+0x2e>
 8024558:	687b      	ldr	r3, [r7, #4]
 802455a:	3b01      	subs	r3, #1
 802455c:	607b      	str	r3, [r7, #4]
 802455e:	491a      	ldr	r1, [pc, #104]	; (80245c8 <vTaskSwitchContext+0xa0>)
 8024560:	687a      	ldr	r2, [r7, #4]
 8024562:	4613      	mov	r3, r2
 8024564:	009b      	lsls	r3, r3, #2
 8024566:	4413      	add	r3, r2
 8024568:	009b      	lsls	r3, r3, #2
 802456a:	440b      	add	r3, r1
 802456c:	681b      	ldr	r3, [r3, #0]
 802456e:	2b00      	cmp	r3, #0
 8024570:	d0ec      	beq.n	802454c <vTaskSwitchContext+0x24>
 8024572:	687a      	ldr	r2, [r7, #4]
 8024574:	4613      	mov	r3, r2
 8024576:	009b      	lsls	r3, r3, #2
 8024578:	4413      	add	r3, r2
 802457a:	009b      	lsls	r3, r3, #2
 802457c:	4a12      	ldr	r2, [pc, #72]	; (80245c8 <vTaskSwitchContext+0xa0>)
 802457e:	4413      	add	r3, r2
 8024580:	603b      	str	r3, [r7, #0]
 8024582:	683b      	ldr	r3, [r7, #0]
 8024584:	685b      	ldr	r3, [r3, #4]
 8024586:	685a      	ldr	r2, [r3, #4]
 8024588:	683b      	ldr	r3, [r7, #0]
 802458a:	605a      	str	r2, [r3, #4]
 802458c:	683b      	ldr	r3, [r7, #0]
 802458e:	685a      	ldr	r2, [r3, #4]
 8024590:	683b      	ldr	r3, [r7, #0]
 8024592:	3308      	adds	r3, #8
 8024594:	429a      	cmp	r2, r3
 8024596:	d104      	bne.n	80245a2 <vTaskSwitchContext+0x7a>
 8024598:	683b      	ldr	r3, [r7, #0]
 802459a:	685b      	ldr	r3, [r3, #4]
 802459c:	685a      	ldr	r2, [r3, #4]
 802459e:	683b      	ldr	r3, [r7, #0]
 80245a0:	605a      	str	r2, [r3, #4]
 80245a2:	683b      	ldr	r3, [r7, #0]
 80245a4:	685b      	ldr	r3, [r3, #4]
 80245a6:	68db      	ldr	r3, [r3, #12]
 80245a8:	4a08      	ldr	r2, [pc, #32]	; (80245cc <vTaskSwitchContext+0xa4>)
 80245aa:	6013      	str	r3, [r2, #0]
 80245ac:	4a05      	ldr	r2, [pc, #20]	; (80245c4 <vTaskSwitchContext+0x9c>)
 80245ae:	687b      	ldr	r3, [r7, #4]
 80245b0:	6013      	str	r3, [r2, #0]
}
 80245b2:	bf00      	nop
 80245b4:	3708      	adds	r7, #8
 80245b6:	46bd      	mov	sp, r7
 80245b8:	bd80      	pop	{r7, pc}
 80245ba:	bf00      	nop
 80245bc:	20001bd8 	.word	0x20001bd8
 80245c0:	20001bc4 	.word	0x20001bc4
 80245c4:	20001bb8 	.word	0x20001bb8
 80245c8:	200016e0 	.word	0x200016e0
 80245cc:	200016dc 	.word	0x200016dc

080245d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80245d0:	b580      	push	{r7, lr}
 80245d2:	b082      	sub	sp, #8
 80245d4:	af00      	add	r7, sp, #0
 80245d6:	6078      	str	r0, [r7, #4]
 80245d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80245da:	687b      	ldr	r3, [r7, #4]
 80245dc:	2b00      	cmp	r3, #0
 80245de:	d102      	bne.n	80245e6 <vTaskPlaceOnEventList+0x16>
 80245e0:	f000 ff32 	bl	8025448 <ulSetInterruptMask>
 80245e4:	e7fe      	b.n	80245e4 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80245e6:	4b07      	ldr	r3, [pc, #28]	; (8024604 <vTaskPlaceOnEventList+0x34>)
 80245e8:	681b      	ldr	r3, [r3, #0]
 80245ea:	3318      	adds	r3, #24
 80245ec:	4619      	mov	r1, r3
 80245ee:	6878      	ldr	r0, [r7, #4]
 80245f0:	f7fe ff59 	bl	80234a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80245f4:	2101      	movs	r1, #1
 80245f6:	6838      	ldr	r0, [r7, #0]
 80245f8:	f000 fa3c 	bl	8024a74 <prvAddCurrentTaskToDelayedList>
}
 80245fc:	bf00      	nop
 80245fe:	3708      	adds	r7, #8
 8024600:	46bd      	mov	sp, r7
 8024602:	bd80      	pop	{r7, pc}
 8024604:	200016dc 	.word	0x200016dc

08024608 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8024608:	b580      	push	{r7, lr}
 802460a:	b084      	sub	sp, #16
 802460c:	af00      	add	r7, sp, #0
 802460e:	60f8      	str	r0, [r7, #12]
 8024610:	60b9      	str	r1, [r7, #8]
 8024612:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8024614:	68fb      	ldr	r3, [r7, #12]
 8024616:	2b00      	cmp	r3, #0
 8024618:	d102      	bne.n	8024620 <vTaskPlaceOnEventListRestricted+0x18>
 802461a:	f000 ff15 	bl	8025448 <ulSetInterruptMask>
 802461e:	e7fe      	b.n	802461e <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8024620:	4b0a      	ldr	r3, [pc, #40]	; (802464c <vTaskPlaceOnEventListRestricted+0x44>)
 8024622:	681b      	ldr	r3, [r3, #0]
 8024624:	3318      	adds	r3, #24
 8024626:	4619      	mov	r1, r3
 8024628:	68f8      	ldr	r0, [r7, #12]
 802462a:	f7fe ff18 	bl	802345e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 802462e:	687b      	ldr	r3, [r7, #4]
 8024630:	2b00      	cmp	r3, #0
 8024632:	d002      	beq.n	802463a <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 8024634:	f04f 33ff 	mov.w	r3, #4294967295
 8024638:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 802463a:	6879      	ldr	r1, [r7, #4]
 802463c:	68b8      	ldr	r0, [r7, #8]
 802463e:	f000 fa19 	bl	8024a74 <prvAddCurrentTaskToDelayedList>
	}
 8024642:	bf00      	nop
 8024644:	3710      	adds	r7, #16
 8024646:	46bd      	mov	sp, r7
 8024648:	bd80      	pop	{r7, pc}
 802464a:	bf00      	nop
 802464c:	200016dc 	.word	0x200016dc

08024650 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8024650:	b580      	push	{r7, lr}
 8024652:	b084      	sub	sp, #16
 8024654:	af00      	add	r7, sp, #0
 8024656:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8024658:	687b      	ldr	r3, [r7, #4]
 802465a:	68db      	ldr	r3, [r3, #12]
 802465c:	68db      	ldr	r3, [r3, #12]
 802465e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8024660:	68bb      	ldr	r3, [r7, #8]
 8024662:	2b00      	cmp	r3, #0
 8024664:	d102      	bne.n	802466c <xTaskRemoveFromEventList+0x1c>
 8024666:	f000 feef 	bl	8025448 <ulSetInterruptMask>
 802466a:	e7fe      	b.n	802466a <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 802466c:	68bb      	ldr	r3, [r7, #8]
 802466e:	3318      	adds	r3, #24
 8024670:	4618      	mov	r0, r3
 8024672:	f7fe ff51 	bl	8023518 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8024676:	4b1e      	ldr	r3, [pc, #120]	; (80246f0 <xTaskRemoveFromEventList+0xa0>)
 8024678:	681b      	ldr	r3, [r3, #0]
 802467a:	2b00      	cmp	r3, #0
 802467c:	d11d      	bne.n	80246ba <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 802467e:	68bb      	ldr	r3, [r7, #8]
 8024680:	3304      	adds	r3, #4
 8024682:	4618      	mov	r0, r3
 8024684:	f7fe ff48 	bl	8023518 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8024688:	68bb      	ldr	r3, [r7, #8]
 802468a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802468c:	4b19      	ldr	r3, [pc, #100]	; (80246f4 <xTaskRemoveFromEventList+0xa4>)
 802468e:	681b      	ldr	r3, [r3, #0]
 8024690:	429a      	cmp	r2, r3
 8024692:	d903      	bls.n	802469c <xTaskRemoveFromEventList+0x4c>
 8024694:	68bb      	ldr	r3, [r7, #8]
 8024696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024698:	4a16      	ldr	r2, [pc, #88]	; (80246f4 <xTaskRemoveFromEventList+0xa4>)
 802469a:	6013      	str	r3, [r2, #0]
 802469c:	68bb      	ldr	r3, [r7, #8]
 802469e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80246a0:	4613      	mov	r3, r2
 80246a2:	009b      	lsls	r3, r3, #2
 80246a4:	4413      	add	r3, r2
 80246a6:	009b      	lsls	r3, r3, #2
 80246a8:	4a13      	ldr	r2, [pc, #76]	; (80246f8 <xTaskRemoveFromEventList+0xa8>)
 80246aa:	441a      	add	r2, r3
 80246ac:	68bb      	ldr	r3, [r7, #8]
 80246ae:	3304      	adds	r3, #4
 80246b0:	4619      	mov	r1, r3
 80246b2:	4610      	mov	r0, r2
 80246b4:	f7fe fed3 	bl	802345e <vListInsertEnd>
 80246b8:	e005      	b.n	80246c6 <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80246ba:	68bb      	ldr	r3, [r7, #8]
 80246bc:	3318      	adds	r3, #24
 80246be:	4619      	mov	r1, r3
 80246c0:	480e      	ldr	r0, [pc, #56]	; (80246fc <xTaskRemoveFromEventList+0xac>)
 80246c2:	f7fe fecc 	bl	802345e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80246c6:	68bb      	ldr	r3, [r7, #8]
 80246c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80246ca:	4b0d      	ldr	r3, [pc, #52]	; (8024700 <xTaskRemoveFromEventList+0xb0>)
 80246cc:	681b      	ldr	r3, [r3, #0]
 80246ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80246d0:	429a      	cmp	r2, r3
 80246d2:	d905      	bls.n	80246e0 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80246d4:	2301      	movs	r3, #1
 80246d6:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80246d8:	4b0a      	ldr	r3, [pc, #40]	; (8024704 <xTaskRemoveFromEventList+0xb4>)
 80246da:	2201      	movs	r2, #1
 80246dc:	601a      	str	r2, [r3, #0]
 80246de:	e001      	b.n	80246e4 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 80246e0:	2300      	movs	r3, #0
 80246e2:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80246e4:	68fb      	ldr	r3, [r7, #12]
}
 80246e6:	4618      	mov	r0, r3
 80246e8:	3710      	adds	r7, #16
 80246ea:	46bd      	mov	sp, r7
 80246ec:	bd80      	pop	{r7, pc}
 80246ee:	bf00      	nop
 80246f0:	20001bd8 	.word	0x20001bd8
 80246f4:	20001bb8 	.word	0x20001bb8
 80246f8:	200016e0 	.word	0x200016e0
 80246fc:	20001b70 	.word	0x20001b70
 8024700:	200016dc 	.word	0x200016dc
 8024704:	20001bc4 	.word	0x20001bc4

08024708 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8024708:	b480      	push	{r7}
 802470a:	b083      	sub	sp, #12
 802470c:	af00      	add	r7, sp, #0
 802470e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8024710:	4b06      	ldr	r3, [pc, #24]	; (802472c <vTaskInternalSetTimeOutState+0x24>)
 8024712:	681a      	ldr	r2, [r3, #0]
 8024714:	687b      	ldr	r3, [r7, #4]
 8024716:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8024718:	4b05      	ldr	r3, [pc, #20]	; (8024730 <vTaskInternalSetTimeOutState+0x28>)
 802471a:	681a      	ldr	r2, [r3, #0]
 802471c:	687b      	ldr	r3, [r7, #4]
 802471e:	605a      	str	r2, [r3, #4]
}
 8024720:	bf00      	nop
 8024722:	370c      	adds	r7, #12
 8024724:	46bd      	mov	sp, r7
 8024726:	f85d 7b04 	ldr.w	r7, [sp], #4
 802472a:	4770      	bx	lr
 802472c:	20001bc8 	.word	0x20001bc8
 8024730:	20001bb4 	.word	0x20001bb4

08024734 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8024734:	b580      	push	{r7, lr}
 8024736:	b086      	sub	sp, #24
 8024738:	af00      	add	r7, sp, #0
 802473a:	6078      	str	r0, [r7, #4]
 802473c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 802473e:	687b      	ldr	r3, [r7, #4]
 8024740:	2b00      	cmp	r3, #0
 8024742:	d102      	bne.n	802474a <xTaskCheckForTimeOut+0x16>
 8024744:	f000 fe80 	bl	8025448 <ulSetInterruptMask>
 8024748:	e7fe      	b.n	8024748 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 802474a:	683b      	ldr	r3, [r7, #0]
 802474c:	2b00      	cmp	r3, #0
 802474e:	d102      	bne.n	8024756 <xTaskCheckForTimeOut+0x22>
 8024750:	f000 fe7a 	bl	8025448 <ulSetInterruptMask>
 8024754:	e7fe      	b.n	8024754 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 8024756:	f000 fd3f 	bl	80251d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 802475a:	4b1d      	ldr	r3, [pc, #116]	; (80247d0 <xTaskCheckForTimeOut+0x9c>)
 802475c:	681b      	ldr	r3, [r3, #0]
 802475e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8024760:	687b      	ldr	r3, [r7, #4]
 8024762:	685b      	ldr	r3, [r3, #4]
 8024764:	693a      	ldr	r2, [r7, #16]
 8024766:	1ad3      	subs	r3, r2, r3
 8024768:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 802476a:	683b      	ldr	r3, [r7, #0]
 802476c:	681b      	ldr	r3, [r3, #0]
 802476e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024772:	d102      	bne.n	802477a <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8024774:	2300      	movs	r3, #0
 8024776:	617b      	str	r3, [r7, #20]
 8024778:	e023      	b.n	80247c2 <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 802477a:	687b      	ldr	r3, [r7, #4]
 802477c:	681a      	ldr	r2, [r3, #0]
 802477e:	4b15      	ldr	r3, [pc, #84]	; (80247d4 <xTaskCheckForTimeOut+0xa0>)
 8024780:	681b      	ldr	r3, [r3, #0]
 8024782:	429a      	cmp	r2, r3
 8024784:	d007      	beq.n	8024796 <xTaskCheckForTimeOut+0x62>
 8024786:	687b      	ldr	r3, [r7, #4]
 8024788:	685b      	ldr	r3, [r3, #4]
 802478a:	693a      	ldr	r2, [r7, #16]
 802478c:	429a      	cmp	r2, r3
 802478e:	d302      	bcc.n	8024796 <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8024790:	2301      	movs	r3, #1
 8024792:	617b      	str	r3, [r7, #20]
 8024794:	e015      	b.n	80247c2 <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8024796:	683b      	ldr	r3, [r7, #0]
 8024798:	681b      	ldr	r3, [r3, #0]
 802479a:	68fa      	ldr	r2, [r7, #12]
 802479c:	429a      	cmp	r2, r3
 802479e:	d20b      	bcs.n	80247b8 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80247a0:	683b      	ldr	r3, [r7, #0]
 80247a2:	681a      	ldr	r2, [r3, #0]
 80247a4:	68fb      	ldr	r3, [r7, #12]
 80247a6:	1ad2      	subs	r2, r2, r3
 80247a8:	683b      	ldr	r3, [r7, #0]
 80247aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80247ac:	6878      	ldr	r0, [r7, #4]
 80247ae:	f7ff ffab 	bl	8024708 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80247b2:	2300      	movs	r3, #0
 80247b4:	617b      	str	r3, [r7, #20]
 80247b6:	e004      	b.n	80247c2 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 80247b8:	683b      	ldr	r3, [r7, #0]
 80247ba:	2200      	movs	r2, #0
 80247bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80247be:	2301      	movs	r3, #1
 80247c0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80247c2:	f000 fd1b 	bl	80251fc <vPortExitCritical>

	return xReturn;
 80247c6:	697b      	ldr	r3, [r7, #20]
}
 80247c8:	4618      	mov	r0, r3
 80247ca:	3718      	adds	r7, #24
 80247cc:	46bd      	mov	sp, r7
 80247ce:	bd80      	pop	{r7, pc}
 80247d0:	20001bb4 	.word	0x20001bb4
 80247d4:	20001bc8 	.word	0x20001bc8

080247d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80247d8:	b480      	push	{r7}
 80247da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80247dc:	4b03      	ldr	r3, [pc, #12]	; (80247ec <vTaskMissedYield+0x14>)
 80247de:	2201      	movs	r2, #1
 80247e0:	601a      	str	r2, [r3, #0]
}
 80247e2:	bf00      	nop
 80247e4:	46bd      	mov	sp, r7
 80247e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80247ea:	4770      	bx	lr
 80247ec:	20001bc4 	.word	0x20001bc4

080247f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80247f0:	b580      	push	{r7, lr}
 80247f2:	b082      	sub	sp, #8
 80247f4:	af00      	add	r7, sp, #0
 80247f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80247f8:	f000 f84a 	bl	8024890 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80247fc:	4b03      	ldr	r3, [pc, #12]	; (802480c <prvIdleTask+0x1c>)
 80247fe:	681b      	ldr	r3, [r3, #0]
 8024800:	2b01      	cmp	r3, #1
 8024802:	d9f9      	bls.n	80247f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8024804:	f000 fcd6 	bl	80251b4 <vPortYield>
		prvCheckTasksWaitingTermination();
 8024808:	e7f6      	b.n	80247f8 <prvIdleTask+0x8>
 802480a:	bf00      	nop
 802480c:	200016e0 	.word	0x200016e0

08024810 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8024810:	b580      	push	{r7, lr}
 8024812:	b082      	sub	sp, #8
 8024814:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8024816:	2300      	movs	r3, #0
 8024818:	607b      	str	r3, [r7, #4]
 802481a:	e00c      	b.n	8024836 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 802481c:	687a      	ldr	r2, [r7, #4]
 802481e:	4613      	mov	r3, r2
 8024820:	009b      	lsls	r3, r3, #2
 8024822:	4413      	add	r3, r2
 8024824:	009b      	lsls	r3, r3, #2
 8024826:	4a12      	ldr	r2, [pc, #72]	; (8024870 <prvInitialiseTaskLists+0x60>)
 8024828:	4413      	add	r3, r2
 802482a:	4618      	mov	r0, r3
 802482c:	f7fe fdea 	bl	8023404 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8024830:	687b      	ldr	r3, [r7, #4]
 8024832:	3301      	adds	r3, #1
 8024834:	607b      	str	r3, [r7, #4]
 8024836:	687b      	ldr	r3, [r7, #4]
 8024838:	2b37      	cmp	r3, #55	; 0x37
 802483a:	d9ef      	bls.n	802481c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 802483c:	480d      	ldr	r0, [pc, #52]	; (8024874 <prvInitialiseTaskLists+0x64>)
 802483e:	f7fe fde1 	bl	8023404 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8024842:	480d      	ldr	r0, [pc, #52]	; (8024878 <prvInitialiseTaskLists+0x68>)
 8024844:	f7fe fdde 	bl	8023404 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8024848:	480c      	ldr	r0, [pc, #48]	; (802487c <prvInitialiseTaskLists+0x6c>)
 802484a:	f7fe fddb 	bl	8023404 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 802484e:	480c      	ldr	r0, [pc, #48]	; (8024880 <prvInitialiseTaskLists+0x70>)
 8024850:	f7fe fdd8 	bl	8023404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8024854:	480b      	ldr	r0, [pc, #44]	; (8024884 <prvInitialiseTaskLists+0x74>)
 8024856:	f7fe fdd5 	bl	8023404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 802485a:	4b0b      	ldr	r3, [pc, #44]	; (8024888 <prvInitialiseTaskLists+0x78>)
 802485c:	4a05      	ldr	r2, [pc, #20]	; (8024874 <prvInitialiseTaskLists+0x64>)
 802485e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8024860:	4b0a      	ldr	r3, [pc, #40]	; (802488c <prvInitialiseTaskLists+0x7c>)
 8024862:	4a05      	ldr	r2, [pc, #20]	; (8024878 <prvInitialiseTaskLists+0x68>)
 8024864:	601a      	str	r2, [r3, #0]
}
 8024866:	bf00      	nop
 8024868:	3708      	adds	r7, #8
 802486a:	46bd      	mov	sp, r7
 802486c:	bd80      	pop	{r7, pc}
 802486e:	bf00      	nop
 8024870:	200016e0 	.word	0x200016e0
 8024874:	20001b40 	.word	0x20001b40
 8024878:	20001b54 	.word	0x20001b54
 802487c:	20001b70 	.word	0x20001b70
 8024880:	20001b84 	.word	0x20001b84
 8024884:	20001b9c 	.word	0x20001b9c
 8024888:	20001b68 	.word	0x20001b68
 802488c:	20001b6c 	.word	0x20001b6c

08024890 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8024890:	b580      	push	{r7, lr}
 8024892:	b082      	sub	sp, #8
 8024894:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8024896:	e019      	b.n	80248cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8024898:	f000 fc9e 	bl	80251d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802489c:	4b10      	ldr	r3, [pc, #64]	; (80248e0 <prvCheckTasksWaitingTermination+0x50>)
 802489e:	68db      	ldr	r3, [r3, #12]
 80248a0:	68db      	ldr	r3, [r3, #12]
 80248a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80248a4:	687b      	ldr	r3, [r7, #4]
 80248a6:	3304      	adds	r3, #4
 80248a8:	4618      	mov	r0, r3
 80248aa:	f7fe fe35 	bl	8023518 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80248ae:	4b0d      	ldr	r3, [pc, #52]	; (80248e4 <prvCheckTasksWaitingTermination+0x54>)
 80248b0:	681b      	ldr	r3, [r3, #0]
 80248b2:	3b01      	subs	r3, #1
 80248b4:	4a0b      	ldr	r2, [pc, #44]	; (80248e4 <prvCheckTasksWaitingTermination+0x54>)
 80248b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80248b8:	4b0b      	ldr	r3, [pc, #44]	; (80248e8 <prvCheckTasksWaitingTermination+0x58>)
 80248ba:	681b      	ldr	r3, [r3, #0]
 80248bc:	3b01      	subs	r3, #1
 80248be:	4a0a      	ldr	r2, [pc, #40]	; (80248e8 <prvCheckTasksWaitingTermination+0x58>)
 80248c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80248c2:	f000 fc9b 	bl	80251fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80248c6:	6878      	ldr	r0, [r7, #4]
 80248c8:	f000 f810 	bl	80248ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80248cc:	4b06      	ldr	r3, [pc, #24]	; (80248e8 <prvCheckTasksWaitingTermination+0x58>)
 80248ce:	681b      	ldr	r3, [r3, #0]
 80248d0:	2b00      	cmp	r3, #0
 80248d2:	d1e1      	bne.n	8024898 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80248d4:	bf00      	nop
 80248d6:	bf00      	nop
 80248d8:	3708      	adds	r7, #8
 80248da:	46bd      	mov	sp, r7
 80248dc:	bd80      	pop	{r7, pc}
 80248de:	bf00      	nop
 80248e0:	20001b84 	.word	0x20001b84
 80248e4:	20001bb0 	.word	0x20001bb0
 80248e8:	20001b98 	.word	0x20001b98

080248ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80248ec:	b580      	push	{r7, lr}
 80248ee:	b082      	sub	sp, #8
 80248f0:	af00      	add	r7, sp, #0
 80248f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80248f4:	687b      	ldr	r3, [r7, #4]
 80248f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80248fa:	2b00      	cmp	r3, #0
 80248fc:	d108      	bne.n	8024910 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80248fe:	687b      	ldr	r3, [r7, #4]
 8024900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024902:	4618      	mov	r0, r3
 8024904:	f000 feb4 	bl	8025670 <vPortFree>
				vPortFree( pxTCB );
 8024908:	6878      	ldr	r0, [r7, #4]
 802490a:	f000 feb1 	bl	8025670 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 802490e:	e010      	b.n	8024932 <prvDeleteTCB+0x46>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8024910:	687b      	ldr	r3, [r7, #4]
 8024912:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8024916:	2b01      	cmp	r3, #1
 8024918:	d103      	bne.n	8024922 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 802491a:	6878      	ldr	r0, [r7, #4]
 802491c:	f000 fea8 	bl	8025670 <vPortFree>
	}
 8024920:	e007      	b.n	8024932 <prvDeleteTCB+0x46>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8024922:	687b      	ldr	r3, [r7, #4]
 8024924:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8024928:	2b02      	cmp	r3, #2
 802492a:	d002      	beq.n	8024932 <prvDeleteTCB+0x46>
 802492c:	f000 fd8c 	bl	8025448 <ulSetInterruptMask>
 8024930:	e7fe      	b.n	8024930 <prvDeleteTCB+0x44>
	}
 8024932:	bf00      	nop
 8024934:	3708      	adds	r7, #8
 8024936:	46bd      	mov	sp, r7
 8024938:	bd80      	pop	{r7, pc}
	...

0802493c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 802493c:	b480      	push	{r7}
 802493e:	b083      	sub	sp, #12
 8024940:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8024942:	4b0c      	ldr	r3, [pc, #48]	; (8024974 <prvResetNextTaskUnblockTime+0x38>)
 8024944:	681b      	ldr	r3, [r3, #0]
 8024946:	681b      	ldr	r3, [r3, #0]
 8024948:	2b00      	cmp	r3, #0
 802494a:	d104      	bne.n	8024956 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 802494c:	4b0a      	ldr	r3, [pc, #40]	; (8024978 <prvResetNextTaskUnblockTime+0x3c>)
 802494e:	f04f 32ff 	mov.w	r2, #4294967295
 8024952:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8024954:	e008      	b.n	8024968 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8024956:	4b07      	ldr	r3, [pc, #28]	; (8024974 <prvResetNextTaskUnblockTime+0x38>)
 8024958:	681b      	ldr	r3, [r3, #0]
 802495a:	68db      	ldr	r3, [r3, #12]
 802495c:	68db      	ldr	r3, [r3, #12]
 802495e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8024960:	687b      	ldr	r3, [r7, #4]
 8024962:	685b      	ldr	r3, [r3, #4]
 8024964:	4a04      	ldr	r2, [pc, #16]	; (8024978 <prvResetNextTaskUnblockTime+0x3c>)
 8024966:	6013      	str	r3, [r2, #0]
}
 8024968:	bf00      	nop
 802496a:	370c      	adds	r7, #12
 802496c:	46bd      	mov	sp, r7
 802496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024972:	4770      	bx	lr
 8024974:	20001b68 	.word	0x20001b68
 8024978:	20001bd0 	.word	0x20001bd0

0802497c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 802497c:	b480      	push	{r7}
 802497e:	b083      	sub	sp, #12
 8024980:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8024982:	4b0b      	ldr	r3, [pc, #44]	; (80249b0 <xTaskGetSchedulerState+0x34>)
 8024984:	681b      	ldr	r3, [r3, #0]
 8024986:	2b00      	cmp	r3, #0
 8024988:	d102      	bne.n	8024990 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 802498a:	2301      	movs	r3, #1
 802498c:	607b      	str	r3, [r7, #4]
 802498e:	e008      	b.n	80249a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8024990:	4b08      	ldr	r3, [pc, #32]	; (80249b4 <xTaskGetSchedulerState+0x38>)
 8024992:	681b      	ldr	r3, [r3, #0]
 8024994:	2b00      	cmp	r3, #0
 8024996:	d102      	bne.n	802499e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8024998:	2302      	movs	r3, #2
 802499a:	607b      	str	r3, [r7, #4]
 802499c:	e001      	b.n	80249a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 802499e:	2300      	movs	r3, #0
 80249a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80249a2:	687b      	ldr	r3, [r7, #4]
	}
 80249a4:	4618      	mov	r0, r3
 80249a6:	370c      	adds	r7, #12
 80249a8:	46bd      	mov	sp, r7
 80249aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80249ae:	4770      	bx	lr
 80249b0:	20001bbc 	.word	0x20001bbc
 80249b4:	20001bd8 	.word	0x20001bd8

080249b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80249b8:	b580      	push	{r7, lr}
 80249ba:	b084      	sub	sp, #16
 80249bc:	af00      	add	r7, sp, #0
 80249be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80249c0:	687b      	ldr	r3, [r7, #4]
 80249c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80249c4:	2300      	movs	r3, #0
 80249c6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80249c8:	687b      	ldr	r3, [r7, #4]
 80249ca:	2b00      	cmp	r3, #0
 80249cc:	d046      	beq.n	8024a5c <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80249ce:	4b26      	ldr	r3, [pc, #152]	; (8024a68 <xTaskPriorityDisinherit+0xb0>)
 80249d0:	681b      	ldr	r3, [r3, #0]
 80249d2:	68ba      	ldr	r2, [r7, #8]
 80249d4:	429a      	cmp	r2, r3
 80249d6:	d002      	beq.n	80249de <xTaskPriorityDisinherit+0x26>
 80249d8:	f000 fd36 	bl	8025448 <ulSetInterruptMask>
 80249dc:	e7fe      	b.n	80249dc <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 80249de:	68bb      	ldr	r3, [r7, #8]
 80249e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80249e2:	2b00      	cmp	r3, #0
 80249e4:	d102      	bne.n	80249ec <xTaskPriorityDisinherit+0x34>
 80249e6:	f000 fd2f 	bl	8025448 <ulSetInterruptMask>
 80249ea:	e7fe      	b.n	80249ea <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 80249ec:	68bb      	ldr	r3, [r7, #8]
 80249ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80249f0:	1e5a      	subs	r2, r3, #1
 80249f2:	68bb      	ldr	r3, [r7, #8]
 80249f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80249f6:	68bb      	ldr	r3, [r7, #8]
 80249f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80249fa:	68bb      	ldr	r3, [r7, #8]
 80249fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80249fe:	429a      	cmp	r2, r3
 8024a00:	d02c      	beq.n	8024a5c <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8024a02:	68bb      	ldr	r3, [r7, #8]
 8024a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8024a06:	2b00      	cmp	r3, #0
 8024a08:	d128      	bne.n	8024a5c <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8024a0a:	68bb      	ldr	r3, [r7, #8]
 8024a0c:	3304      	adds	r3, #4
 8024a0e:	4618      	mov	r0, r3
 8024a10:	f7fe fd82 	bl	8023518 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8024a14:	68bb      	ldr	r3, [r7, #8]
 8024a16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8024a18:	68bb      	ldr	r3, [r7, #8]
 8024a1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8024a1c:	68bb      	ldr	r3, [r7, #8]
 8024a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024a20:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8024a24:	68bb      	ldr	r3, [r7, #8]
 8024a26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8024a28:	68bb      	ldr	r3, [r7, #8]
 8024a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8024a2c:	4b0f      	ldr	r3, [pc, #60]	; (8024a6c <xTaskPriorityDisinherit+0xb4>)
 8024a2e:	681b      	ldr	r3, [r3, #0]
 8024a30:	429a      	cmp	r2, r3
 8024a32:	d903      	bls.n	8024a3c <xTaskPriorityDisinherit+0x84>
 8024a34:	68bb      	ldr	r3, [r7, #8]
 8024a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024a38:	4a0c      	ldr	r2, [pc, #48]	; (8024a6c <xTaskPriorityDisinherit+0xb4>)
 8024a3a:	6013      	str	r3, [r2, #0]
 8024a3c:	68bb      	ldr	r3, [r7, #8]
 8024a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8024a40:	4613      	mov	r3, r2
 8024a42:	009b      	lsls	r3, r3, #2
 8024a44:	4413      	add	r3, r2
 8024a46:	009b      	lsls	r3, r3, #2
 8024a48:	4a09      	ldr	r2, [pc, #36]	; (8024a70 <xTaskPriorityDisinherit+0xb8>)
 8024a4a:	441a      	add	r2, r3
 8024a4c:	68bb      	ldr	r3, [r7, #8]
 8024a4e:	3304      	adds	r3, #4
 8024a50:	4619      	mov	r1, r3
 8024a52:	4610      	mov	r0, r2
 8024a54:	f7fe fd03 	bl	802345e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8024a58:	2301      	movs	r3, #1
 8024a5a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8024a5c:	68fb      	ldr	r3, [r7, #12]
	}
 8024a5e:	4618      	mov	r0, r3
 8024a60:	3710      	adds	r7, #16
 8024a62:	46bd      	mov	sp, r7
 8024a64:	bd80      	pop	{r7, pc}
 8024a66:	bf00      	nop
 8024a68:	200016dc 	.word	0x200016dc
 8024a6c:	20001bb8 	.word	0x20001bb8
 8024a70:	200016e0 	.word	0x200016e0

08024a74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8024a74:	b580      	push	{r7, lr}
 8024a76:	b084      	sub	sp, #16
 8024a78:	af00      	add	r7, sp, #0
 8024a7a:	6078      	str	r0, [r7, #4]
 8024a7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8024a7e:	4b21      	ldr	r3, [pc, #132]	; (8024b04 <prvAddCurrentTaskToDelayedList+0x90>)
 8024a80:	681b      	ldr	r3, [r3, #0]
 8024a82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8024a84:	4b20      	ldr	r3, [pc, #128]	; (8024b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8024a86:	681b      	ldr	r3, [r3, #0]
 8024a88:	3304      	adds	r3, #4
 8024a8a:	4618      	mov	r0, r3
 8024a8c:	f7fe fd44 	bl	8023518 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8024a90:	687b      	ldr	r3, [r7, #4]
 8024a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024a96:	d10a      	bne.n	8024aae <prvAddCurrentTaskToDelayedList+0x3a>
 8024a98:	683b      	ldr	r3, [r7, #0]
 8024a9a:	2b00      	cmp	r3, #0
 8024a9c:	d007      	beq.n	8024aae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8024a9e:	4b1a      	ldr	r3, [pc, #104]	; (8024b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8024aa0:	681b      	ldr	r3, [r3, #0]
 8024aa2:	3304      	adds	r3, #4
 8024aa4:	4619      	mov	r1, r3
 8024aa6:	4819      	ldr	r0, [pc, #100]	; (8024b0c <prvAddCurrentTaskToDelayedList+0x98>)
 8024aa8:	f7fe fcd9 	bl	802345e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8024aac:	e026      	b.n	8024afc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8024aae:	68fa      	ldr	r2, [r7, #12]
 8024ab0:	687b      	ldr	r3, [r7, #4]
 8024ab2:	4413      	add	r3, r2
 8024ab4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8024ab6:	4b14      	ldr	r3, [pc, #80]	; (8024b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8024ab8:	681b      	ldr	r3, [r3, #0]
 8024aba:	68ba      	ldr	r2, [r7, #8]
 8024abc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8024abe:	68ba      	ldr	r2, [r7, #8]
 8024ac0:	68fb      	ldr	r3, [r7, #12]
 8024ac2:	429a      	cmp	r2, r3
 8024ac4:	d209      	bcs.n	8024ada <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8024ac6:	4b12      	ldr	r3, [pc, #72]	; (8024b10 <prvAddCurrentTaskToDelayedList+0x9c>)
 8024ac8:	681a      	ldr	r2, [r3, #0]
 8024aca:	4b0f      	ldr	r3, [pc, #60]	; (8024b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8024acc:	681b      	ldr	r3, [r3, #0]
 8024ace:	3304      	adds	r3, #4
 8024ad0:	4619      	mov	r1, r3
 8024ad2:	4610      	mov	r0, r2
 8024ad4:	f7fe fce7 	bl	80234a6 <vListInsert>
}
 8024ad8:	e010      	b.n	8024afc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8024ada:	4b0e      	ldr	r3, [pc, #56]	; (8024b14 <prvAddCurrentTaskToDelayedList+0xa0>)
 8024adc:	681a      	ldr	r2, [r3, #0]
 8024ade:	4b0a      	ldr	r3, [pc, #40]	; (8024b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8024ae0:	681b      	ldr	r3, [r3, #0]
 8024ae2:	3304      	adds	r3, #4
 8024ae4:	4619      	mov	r1, r3
 8024ae6:	4610      	mov	r0, r2
 8024ae8:	f7fe fcdd 	bl	80234a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8024aec:	4b0a      	ldr	r3, [pc, #40]	; (8024b18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8024aee:	681b      	ldr	r3, [r3, #0]
 8024af0:	68ba      	ldr	r2, [r7, #8]
 8024af2:	429a      	cmp	r2, r3
 8024af4:	d202      	bcs.n	8024afc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8024af6:	4a08      	ldr	r2, [pc, #32]	; (8024b18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8024af8:	68bb      	ldr	r3, [r7, #8]
 8024afa:	6013      	str	r3, [r2, #0]
}
 8024afc:	bf00      	nop
 8024afe:	3710      	adds	r7, #16
 8024b00:	46bd      	mov	sp, r7
 8024b02:	bd80      	pop	{r7, pc}
 8024b04:	20001bb4 	.word	0x20001bb4
 8024b08:	200016dc 	.word	0x200016dc
 8024b0c:	20001b9c 	.word	0x20001b9c
 8024b10:	20001b6c 	.word	0x20001b6c
 8024b14:	20001b68 	.word	0x20001b68
 8024b18:	20001bd0 	.word	0x20001bd0

08024b1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8024b1c:	b580      	push	{r7, lr}
 8024b1e:	b088      	sub	sp, #32
 8024b20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8024b22:	2300      	movs	r3, #0
 8024b24:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8024b26:	f000 fac7 	bl	80250b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8024b2a:	4b18      	ldr	r3, [pc, #96]	; (8024b8c <xTimerCreateTimerTask+0x70>)
 8024b2c:	681b      	ldr	r3, [r3, #0]
 8024b2e:	2b00      	cmp	r3, #0
 8024b30:	d020      	beq.n	8024b74 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8024b32:	2300      	movs	r3, #0
 8024b34:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8024b36:	2300      	movs	r3, #0
 8024b38:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8024b3a:	463a      	mov	r2, r7
 8024b3c:	1d39      	adds	r1, r7, #4
 8024b3e:	f107 0308 	add.w	r3, r7, #8
 8024b42:	4618      	mov	r0, r3
 8024b44:	f7fe fc44 	bl	80233d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8024b48:	6839      	ldr	r1, [r7, #0]
 8024b4a:	687b      	ldr	r3, [r7, #4]
 8024b4c:	68ba      	ldr	r2, [r7, #8]
 8024b4e:	9202      	str	r2, [sp, #8]
 8024b50:	9301      	str	r3, [sp, #4]
 8024b52:	2302      	movs	r3, #2
 8024b54:	9300      	str	r3, [sp, #0]
 8024b56:	2300      	movs	r3, #0
 8024b58:	460a      	mov	r2, r1
 8024b5a:	490d      	ldr	r1, [pc, #52]	; (8024b90 <xTimerCreateTimerTask+0x74>)
 8024b5c:	480d      	ldr	r0, [pc, #52]	; (8024b94 <xTimerCreateTimerTask+0x78>)
 8024b5e:	f7ff f931 	bl	8023dc4 <xTaskCreateStatic>
 8024b62:	4603      	mov	r3, r0
 8024b64:	4a0c      	ldr	r2, [pc, #48]	; (8024b98 <xTimerCreateTimerTask+0x7c>)
 8024b66:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8024b68:	4b0b      	ldr	r3, [pc, #44]	; (8024b98 <xTimerCreateTimerTask+0x7c>)
 8024b6a:	681b      	ldr	r3, [r3, #0]
 8024b6c:	2b00      	cmp	r3, #0
 8024b6e:	d001      	beq.n	8024b74 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8024b70:	2301      	movs	r3, #1
 8024b72:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8024b74:	68fb      	ldr	r3, [r7, #12]
 8024b76:	2b00      	cmp	r3, #0
 8024b78:	d102      	bne.n	8024b80 <xTimerCreateTimerTask+0x64>
 8024b7a:	f000 fc65 	bl	8025448 <ulSetInterruptMask>
 8024b7e:	e7fe      	b.n	8024b7e <xTimerCreateTimerTask+0x62>
	return xReturn;
 8024b80:	68fb      	ldr	r3, [r7, #12]
}
 8024b82:	4618      	mov	r0, r3
 8024b84:	3710      	adds	r7, #16
 8024b86:	46bd      	mov	sp, r7
 8024b88:	bd80      	pop	{r7, pc}
 8024b8a:	bf00      	nop
 8024b8c:	20001c0c 	.word	0x20001c0c
 8024b90:	080297fc 	.word	0x080297fc
 8024b94:	08024cb1 	.word	0x08024cb1
 8024b98:	20001c10 	.word	0x20001c10

08024b9c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8024b9c:	b580      	push	{r7, lr}
 8024b9e:	b08a      	sub	sp, #40	; 0x28
 8024ba0:	af00      	add	r7, sp, #0
 8024ba2:	60f8      	str	r0, [r7, #12]
 8024ba4:	60b9      	str	r1, [r7, #8]
 8024ba6:	607a      	str	r2, [r7, #4]
 8024ba8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8024baa:	2300      	movs	r3, #0
 8024bac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8024bae:	68fb      	ldr	r3, [r7, #12]
 8024bb0:	2b00      	cmp	r3, #0
 8024bb2:	d102      	bne.n	8024bba <xTimerGenericCommand+0x1e>
 8024bb4:	f000 fc48 	bl	8025448 <ulSetInterruptMask>
 8024bb8:	e7fe      	b.n	8024bb8 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8024bba:	4b1a      	ldr	r3, [pc, #104]	; (8024c24 <xTimerGenericCommand+0x88>)
 8024bbc:	681b      	ldr	r3, [r3, #0]
 8024bbe:	2b00      	cmp	r3, #0
 8024bc0:	d02a      	beq.n	8024c18 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8024bc2:	68bb      	ldr	r3, [r7, #8]
 8024bc4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8024bc6:	687b      	ldr	r3, [r7, #4]
 8024bc8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8024bca:	68fb      	ldr	r3, [r7, #12]
 8024bcc:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8024bce:	68bb      	ldr	r3, [r7, #8]
 8024bd0:	2b05      	cmp	r3, #5
 8024bd2:	dc18      	bgt.n	8024c06 <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8024bd4:	f7ff fed2 	bl	802497c <xTaskGetSchedulerState>
 8024bd8:	4603      	mov	r3, r0
 8024bda:	2b02      	cmp	r3, #2
 8024bdc:	d109      	bne.n	8024bf2 <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8024bde:	4b11      	ldr	r3, [pc, #68]	; (8024c24 <xTimerGenericCommand+0x88>)
 8024be0:	6818      	ldr	r0, [r3, #0]
 8024be2:	f107 0114 	add.w	r1, r7, #20
 8024be6:	2300      	movs	r3, #0
 8024be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8024bea:	f7fe fd8a 	bl	8023702 <xQueueGenericSend>
 8024bee:	6278      	str	r0, [r7, #36]	; 0x24
 8024bf0:	e012      	b.n	8024c18 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8024bf2:	4b0c      	ldr	r3, [pc, #48]	; (8024c24 <xTimerGenericCommand+0x88>)
 8024bf4:	6818      	ldr	r0, [r3, #0]
 8024bf6:	f107 0114 	add.w	r1, r7, #20
 8024bfa:	2300      	movs	r3, #0
 8024bfc:	2200      	movs	r2, #0
 8024bfe:	f7fe fd80 	bl	8023702 <xQueueGenericSend>
 8024c02:	6278      	str	r0, [r7, #36]	; 0x24
 8024c04:	e008      	b.n	8024c18 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8024c06:	4b07      	ldr	r3, [pc, #28]	; (8024c24 <xTimerGenericCommand+0x88>)
 8024c08:	6818      	ldr	r0, [r3, #0]
 8024c0a:	f107 0114 	add.w	r1, r7, #20
 8024c0e:	2300      	movs	r3, #0
 8024c10:	683a      	ldr	r2, [r7, #0]
 8024c12:	f7fe fe3f 	bl	8023894 <xQueueGenericSendFromISR>
 8024c16:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8024c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8024c1a:	4618      	mov	r0, r3
 8024c1c:	3728      	adds	r7, #40	; 0x28
 8024c1e:	46bd      	mov	sp, r7
 8024c20:	bd80      	pop	{r7, pc}
 8024c22:	bf00      	nop
 8024c24:	20001c0c 	.word	0x20001c0c

08024c28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8024c28:	b580      	push	{r7, lr}
 8024c2a:	b086      	sub	sp, #24
 8024c2c:	af02      	add	r7, sp, #8
 8024c2e:	6078      	str	r0, [r7, #4]
 8024c30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8024c32:	4b1e      	ldr	r3, [pc, #120]	; (8024cac <prvProcessExpiredTimer+0x84>)
 8024c34:	681b      	ldr	r3, [r3, #0]
 8024c36:	68db      	ldr	r3, [r3, #12]
 8024c38:	68db      	ldr	r3, [r3, #12]
 8024c3a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8024c3c:	68fb      	ldr	r3, [r7, #12]
 8024c3e:	3304      	adds	r3, #4
 8024c40:	4618      	mov	r0, r3
 8024c42:	f7fe fc69 	bl	8023518 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8024c46:	68fb      	ldr	r3, [r7, #12]
 8024c48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8024c4c:	f003 0304 	and.w	r3, r3, #4
 8024c50:	2b00      	cmp	r3, #0
 8024c52:	d01a      	beq.n	8024c8a <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8024c54:	68fb      	ldr	r3, [r7, #12]
 8024c56:	699a      	ldr	r2, [r3, #24]
 8024c58:	687b      	ldr	r3, [r7, #4]
 8024c5a:	18d1      	adds	r1, r2, r3
 8024c5c:	687b      	ldr	r3, [r7, #4]
 8024c5e:	683a      	ldr	r2, [r7, #0]
 8024c60:	68f8      	ldr	r0, [r7, #12]
 8024c62:	f000 f8c1 	bl	8024de8 <prvInsertTimerInActiveList>
 8024c66:	4603      	mov	r3, r0
 8024c68:	2b00      	cmp	r3, #0
 8024c6a:	d017      	beq.n	8024c9c <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8024c6c:	2300      	movs	r3, #0
 8024c6e:	9300      	str	r3, [sp, #0]
 8024c70:	2300      	movs	r3, #0
 8024c72:	687a      	ldr	r2, [r7, #4]
 8024c74:	2100      	movs	r1, #0
 8024c76:	68f8      	ldr	r0, [r7, #12]
 8024c78:	f7ff ff90 	bl	8024b9c <xTimerGenericCommand>
 8024c7c:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8024c7e:	68bb      	ldr	r3, [r7, #8]
 8024c80:	2b00      	cmp	r3, #0
 8024c82:	d10b      	bne.n	8024c9c <prvProcessExpiredTimer+0x74>
 8024c84:	f000 fbe0 	bl	8025448 <ulSetInterruptMask>
 8024c88:	e7fe      	b.n	8024c88 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8024c8a:	68fb      	ldr	r3, [r7, #12]
 8024c8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8024c90:	f023 0301 	bic.w	r3, r3, #1
 8024c94:	b2da      	uxtb	r2, r3
 8024c96:	68fb      	ldr	r3, [r7, #12]
 8024c98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8024c9c:	68fb      	ldr	r3, [r7, #12]
 8024c9e:	6a1b      	ldr	r3, [r3, #32]
 8024ca0:	68f8      	ldr	r0, [r7, #12]
 8024ca2:	4798      	blx	r3
}
 8024ca4:	bf00      	nop
 8024ca6:	3710      	adds	r7, #16
 8024ca8:	46bd      	mov	sp, r7
 8024caa:	bd80      	pop	{r7, pc}
 8024cac:	20001c04 	.word	0x20001c04

08024cb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8024cb0:	b580      	push	{r7, lr}
 8024cb2:	b084      	sub	sp, #16
 8024cb4:	af00      	add	r7, sp, #0
 8024cb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8024cb8:	f107 0308 	add.w	r3, r7, #8
 8024cbc:	4618      	mov	r0, r3
 8024cbe:	f000 f84f 	bl	8024d60 <prvGetNextExpireTime>
 8024cc2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8024cc4:	68bb      	ldr	r3, [r7, #8]
 8024cc6:	4619      	mov	r1, r3
 8024cc8:	68f8      	ldr	r0, [r7, #12]
 8024cca:	f000 f803 	bl	8024cd4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8024cce:	f000 f8cd 	bl	8024e6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8024cd2:	e7f1      	b.n	8024cb8 <prvTimerTask+0x8>

08024cd4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8024cd4:	b580      	push	{r7, lr}
 8024cd6:	b084      	sub	sp, #16
 8024cd8:	af00      	add	r7, sp, #0
 8024cda:	6078      	str	r0, [r7, #4]
 8024cdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8024cde:	f7ff fac5 	bl	802426c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8024ce2:	f107 0308 	add.w	r3, r7, #8
 8024ce6:	4618      	mov	r0, r3
 8024ce8:	f000 f85e 	bl	8024da8 <prvSampleTimeNow>
 8024cec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8024cee:	68bb      	ldr	r3, [r7, #8]
 8024cf0:	2b00      	cmp	r3, #0
 8024cf2:	d12a      	bne.n	8024d4a <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8024cf4:	683b      	ldr	r3, [r7, #0]
 8024cf6:	2b00      	cmp	r3, #0
 8024cf8:	d10a      	bne.n	8024d10 <prvProcessTimerOrBlockTask+0x3c>
 8024cfa:	687a      	ldr	r2, [r7, #4]
 8024cfc:	68fb      	ldr	r3, [r7, #12]
 8024cfe:	429a      	cmp	r2, r3
 8024d00:	d806      	bhi.n	8024d10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8024d02:	f7ff fac1 	bl	8024288 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8024d06:	68f9      	ldr	r1, [r7, #12]
 8024d08:	6878      	ldr	r0, [r7, #4]
 8024d0a:	f7ff ff8d 	bl	8024c28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8024d0e:	e01e      	b.n	8024d4e <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8024d10:	683b      	ldr	r3, [r7, #0]
 8024d12:	2b00      	cmp	r3, #0
 8024d14:	d008      	beq.n	8024d28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8024d16:	4b10      	ldr	r3, [pc, #64]	; (8024d58 <prvProcessTimerOrBlockTask+0x84>)
 8024d18:	681b      	ldr	r3, [r3, #0]
 8024d1a:	681b      	ldr	r3, [r3, #0]
 8024d1c:	2b00      	cmp	r3, #0
 8024d1e:	d101      	bne.n	8024d24 <prvProcessTimerOrBlockTask+0x50>
 8024d20:	2301      	movs	r3, #1
 8024d22:	e000      	b.n	8024d26 <prvProcessTimerOrBlockTask+0x52>
 8024d24:	2300      	movs	r3, #0
 8024d26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8024d28:	4b0c      	ldr	r3, [pc, #48]	; (8024d5c <prvProcessTimerOrBlockTask+0x88>)
 8024d2a:	6818      	ldr	r0, [r3, #0]
 8024d2c:	687a      	ldr	r2, [r7, #4]
 8024d2e:	68fb      	ldr	r3, [r7, #12]
 8024d30:	1ad3      	subs	r3, r2, r3
 8024d32:	683a      	ldr	r2, [r7, #0]
 8024d34:	4619      	mov	r1, r3
 8024d36:	f7ff f811 	bl	8023d5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8024d3a:	f7ff faa5 	bl	8024288 <xTaskResumeAll>
 8024d3e:	4603      	mov	r3, r0
 8024d40:	2b00      	cmp	r3, #0
 8024d42:	d104      	bne.n	8024d4e <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8024d44:	f000 fa36 	bl	80251b4 <vPortYield>
}
 8024d48:	e001      	b.n	8024d4e <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8024d4a:	f7ff fa9d 	bl	8024288 <xTaskResumeAll>
}
 8024d4e:	bf00      	nop
 8024d50:	3710      	adds	r7, #16
 8024d52:	46bd      	mov	sp, r7
 8024d54:	bd80      	pop	{r7, pc}
 8024d56:	bf00      	nop
 8024d58:	20001c08 	.word	0x20001c08
 8024d5c:	20001c0c 	.word	0x20001c0c

08024d60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8024d60:	b480      	push	{r7}
 8024d62:	b085      	sub	sp, #20
 8024d64:	af00      	add	r7, sp, #0
 8024d66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8024d68:	4b0e      	ldr	r3, [pc, #56]	; (8024da4 <prvGetNextExpireTime+0x44>)
 8024d6a:	681b      	ldr	r3, [r3, #0]
 8024d6c:	681b      	ldr	r3, [r3, #0]
 8024d6e:	2b00      	cmp	r3, #0
 8024d70:	d101      	bne.n	8024d76 <prvGetNextExpireTime+0x16>
 8024d72:	2201      	movs	r2, #1
 8024d74:	e000      	b.n	8024d78 <prvGetNextExpireTime+0x18>
 8024d76:	2200      	movs	r2, #0
 8024d78:	687b      	ldr	r3, [r7, #4]
 8024d7a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8024d7c:	687b      	ldr	r3, [r7, #4]
 8024d7e:	681b      	ldr	r3, [r3, #0]
 8024d80:	2b00      	cmp	r3, #0
 8024d82:	d105      	bne.n	8024d90 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8024d84:	4b07      	ldr	r3, [pc, #28]	; (8024da4 <prvGetNextExpireTime+0x44>)
 8024d86:	681b      	ldr	r3, [r3, #0]
 8024d88:	68db      	ldr	r3, [r3, #12]
 8024d8a:	681b      	ldr	r3, [r3, #0]
 8024d8c:	60fb      	str	r3, [r7, #12]
 8024d8e:	e001      	b.n	8024d94 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8024d90:	2300      	movs	r3, #0
 8024d92:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8024d94:	68fb      	ldr	r3, [r7, #12]
}
 8024d96:	4618      	mov	r0, r3
 8024d98:	3714      	adds	r7, #20
 8024d9a:	46bd      	mov	sp, r7
 8024d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024da0:	4770      	bx	lr
 8024da2:	bf00      	nop
 8024da4:	20001c04 	.word	0x20001c04

08024da8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8024da8:	b580      	push	{r7, lr}
 8024daa:	b084      	sub	sp, #16
 8024dac:	af00      	add	r7, sp, #0
 8024dae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8024db0:	f7ff faf8 	bl	80243a4 <xTaskGetTickCount>
 8024db4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8024db6:	4b0b      	ldr	r3, [pc, #44]	; (8024de4 <prvSampleTimeNow+0x3c>)
 8024db8:	681b      	ldr	r3, [r3, #0]
 8024dba:	68fa      	ldr	r2, [r7, #12]
 8024dbc:	429a      	cmp	r2, r3
 8024dbe:	d205      	bcs.n	8024dcc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8024dc0:	f000 f91e 	bl	8025000 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8024dc4:	687b      	ldr	r3, [r7, #4]
 8024dc6:	2201      	movs	r2, #1
 8024dc8:	601a      	str	r2, [r3, #0]
 8024dca:	e002      	b.n	8024dd2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8024dcc:	687b      	ldr	r3, [r7, #4]
 8024dce:	2200      	movs	r2, #0
 8024dd0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8024dd2:	4a04      	ldr	r2, [pc, #16]	; (8024de4 <prvSampleTimeNow+0x3c>)
 8024dd4:	68fb      	ldr	r3, [r7, #12]
 8024dd6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8024dd8:	68fb      	ldr	r3, [r7, #12]
}
 8024dda:	4618      	mov	r0, r3
 8024ddc:	3710      	adds	r7, #16
 8024dde:	46bd      	mov	sp, r7
 8024de0:	bd80      	pop	{r7, pc}
 8024de2:	bf00      	nop
 8024de4:	20001c14 	.word	0x20001c14

08024de8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8024de8:	b580      	push	{r7, lr}
 8024dea:	b086      	sub	sp, #24
 8024dec:	af00      	add	r7, sp, #0
 8024dee:	60f8      	str	r0, [r7, #12]
 8024df0:	60b9      	str	r1, [r7, #8]
 8024df2:	607a      	str	r2, [r7, #4]
 8024df4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8024df6:	2300      	movs	r3, #0
 8024df8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8024dfa:	68fb      	ldr	r3, [r7, #12]
 8024dfc:	68ba      	ldr	r2, [r7, #8]
 8024dfe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8024e00:	68fb      	ldr	r3, [r7, #12]
 8024e02:	68fa      	ldr	r2, [r7, #12]
 8024e04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8024e06:	68ba      	ldr	r2, [r7, #8]
 8024e08:	687b      	ldr	r3, [r7, #4]
 8024e0a:	429a      	cmp	r2, r3
 8024e0c:	d812      	bhi.n	8024e34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8024e0e:	687a      	ldr	r2, [r7, #4]
 8024e10:	683b      	ldr	r3, [r7, #0]
 8024e12:	1ad2      	subs	r2, r2, r3
 8024e14:	68fb      	ldr	r3, [r7, #12]
 8024e16:	699b      	ldr	r3, [r3, #24]
 8024e18:	429a      	cmp	r2, r3
 8024e1a:	d302      	bcc.n	8024e22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8024e1c:	2301      	movs	r3, #1
 8024e1e:	617b      	str	r3, [r7, #20]
 8024e20:	e01b      	b.n	8024e5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8024e22:	4b10      	ldr	r3, [pc, #64]	; (8024e64 <prvInsertTimerInActiveList+0x7c>)
 8024e24:	681a      	ldr	r2, [r3, #0]
 8024e26:	68fb      	ldr	r3, [r7, #12]
 8024e28:	3304      	adds	r3, #4
 8024e2a:	4619      	mov	r1, r3
 8024e2c:	4610      	mov	r0, r2
 8024e2e:	f7fe fb3a 	bl	80234a6 <vListInsert>
 8024e32:	e012      	b.n	8024e5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8024e34:	687a      	ldr	r2, [r7, #4]
 8024e36:	683b      	ldr	r3, [r7, #0]
 8024e38:	429a      	cmp	r2, r3
 8024e3a:	d206      	bcs.n	8024e4a <prvInsertTimerInActiveList+0x62>
 8024e3c:	68ba      	ldr	r2, [r7, #8]
 8024e3e:	683b      	ldr	r3, [r7, #0]
 8024e40:	429a      	cmp	r2, r3
 8024e42:	d302      	bcc.n	8024e4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8024e44:	2301      	movs	r3, #1
 8024e46:	617b      	str	r3, [r7, #20]
 8024e48:	e007      	b.n	8024e5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8024e4a:	4b07      	ldr	r3, [pc, #28]	; (8024e68 <prvInsertTimerInActiveList+0x80>)
 8024e4c:	681a      	ldr	r2, [r3, #0]
 8024e4e:	68fb      	ldr	r3, [r7, #12]
 8024e50:	3304      	adds	r3, #4
 8024e52:	4619      	mov	r1, r3
 8024e54:	4610      	mov	r0, r2
 8024e56:	f7fe fb26 	bl	80234a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8024e5a:	697b      	ldr	r3, [r7, #20]
}
 8024e5c:	4618      	mov	r0, r3
 8024e5e:	3718      	adds	r7, #24
 8024e60:	46bd      	mov	sp, r7
 8024e62:	bd80      	pop	{r7, pc}
 8024e64:	20001c08 	.word	0x20001c08
 8024e68:	20001c04 	.word	0x20001c04

08024e6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8024e6c:	b580      	push	{r7, lr}
 8024e6e:	b08c      	sub	sp, #48	; 0x30
 8024e70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8024e72:	e0b2      	b.n	8024fda <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8024e74:	68bb      	ldr	r3, [r7, #8]
 8024e76:	2b00      	cmp	r3, #0
 8024e78:	da11      	bge.n	8024e9e <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8024e7a:	f107 0308 	add.w	r3, r7, #8
 8024e7e:	3304      	adds	r3, #4
 8024e80:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8024e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024e84:	2b00      	cmp	r3, #0
 8024e86:	d102      	bne.n	8024e8e <prvProcessReceivedCommands+0x22>
 8024e88:	f000 fade 	bl	8025448 <ulSetInterruptMask>
 8024e8c:	e7fe      	b.n	8024e8c <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8024e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024e90:	681b      	ldr	r3, [r3, #0]
 8024e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024e94:	6850      	ldr	r0, [r2, #4]
 8024e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024e98:	6892      	ldr	r2, [r2, #8]
 8024e9a:	4611      	mov	r1, r2
 8024e9c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8024e9e:	68bb      	ldr	r3, [r7, #8]
 8024ea0:	2b00      	cmp	r3, #0
 8024ea2:	f2c0 809a 	blt.w	8024fda <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8024ea6:	693b      	ldr	r3, [r7, #16]
 8024ea8:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8024eaa:	6a3b      	ldr	r3, [r7, #32]
 8024eac:	695b      	ldr	r3, [r3, #20]
 8024eae:	2b00      	cmp	r3, #0
 8024eb0:	d004      	beq.n	8024ebc <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8024eb2:	6a3b      	ldr	r3, [r7, #32]
 8024eb4:	3304      	adds	r3, #4
 8024eb6:	4618      	mov	r0, r3
 8024eb8:	f7fe fb2e 	bl	8023518 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8024ebc:	1d3b      	adds	r3, r7, #4
 8024ebe:	4618      	mov	r0, r3
 8024ec0:	f7ff ff72 	bl	8024da8 <prvSampleTimeNow>
 8024ec4:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8024ec6:	68bb      	ldr	r3, [r7, #8]
 8024ec8:	2b09      	cmp	r3, #9
 8024eca:	f200 8085 	bhi.w	8024fd8 <prvProcessReceivedCommands+0x16c>
 8024ece:	a201      	add	r2, pc, #4	; (adr r2, 8024ed4 <prvProcessReceivedCommands+0x68>)
 8024ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024ed4:	08024efd 	.word	0x08024efd
 8024ed8:	08024efd 	.word	0x08024efd
 8024edc:	08024efd 	.word	0x08024efd
 8024ee0:	08024f61 	.word	0x08024f61
 8024ee4:	08024f75 	.word	0x08024f75
 8024ee8:	08024faf 	.word	0x08024faf
 8024eec:	08024efd 	.word	0x08024efd
 8024ef0:	08024efd 	.word	0x08024efd
 8024ef4:	08024f61 	.word	0x08024f61
 8024ef8:	08024f75 	.word	0x08024f75
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8024efc:	6a3b      	ldr	r3, [r7, #32]
 8024efe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8024f02:	f043 0301 	orr.w	r3, r3, #1
 8024f06:	b2da      	uxtb	r2, r3
 8024f08:	6a3b      	ldr	r3, [r7, #32]
 8024f0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8024f0e:	68fa      	ldr	r2, [r7, #12]
 8024f10:	6a3b      	ldr	r3, [r7, #32]
 8024f12:	699b      	ldr	r3, [r3, #24]
 8024f14:	18d1      	adds	r1, r2, r3
 8024f16:	68fb      	ldr	r3, [r7, #12]
 8024f18:	69fa      	ldr	r2, [r7, #28]
 8024f1a:	6a38      	ldr	r0, [r7, #32]
 8024f1c:	f7ff ff64 	bl	8024de8 <prvInsertTimerInActiveList>
 8024f20:	4603      	mov	r3, r0
 8024f22:	2b00      	cmp	r3, #0
 8024f24:	d059      	beq.n	8024fda <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8024f26:	6a3b      	ldr	r3, [r7, #32]
 8024f28:	6a1b      	ldr	r3, [r3, #32]
 8024f2a:	6a38      	ldr	r0, [r7, #32]
 8024f2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8024f2e:	6a3b      	ldr	r3, [r7, #32]
 8024f30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8024f34:	f003 0304 	and.w	r3, r3, #4
 8024f38:	2b00      	cmp	r3, #0
 8024f3a:	d04e      	beq.n	8024fda <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8024f3c:	68fa      	ldr	r2, [r7, #12]
 8024f3e:	6a3b      	ldr	r3, [r7, #32]
 8024f40:	699b      	ldr	r3, [r3, #24]
 8024f42:	441a      	add	r2, r3
 8024f44:	2300      	movs	r3, #0
 8024f46:	9300      	str	r3, [sp, #0]
 8024f48:	2300      	movs	r3, #0
 8024f4a:	2100      	movs	r1, #0
 8024f4c:	6a38      	ldr	r0, [r7, #32]
 8024f4e:	f7ff fe25 	bl	8024b9c <xTimerGenericCommand>
 8024f52:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 8024f54:	69bb      	ldr	r3, [r7, #24]
 8024f56:	2b00      	cmp	r3, #0
 8024f58:	d13f      	bne.n	8024fda <prvProcessReceivedCommands+0x16e>
 8024f5a:	f000 fa75 	bl	8025448 <ulSetInterruptMask>
 8024f5e:	e7fe      	b.n	8024f5e <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8024f60:	6a3b      	ldr	r3, [r7, #32]
 8024f62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8024f66:	f023 0301 	bic.w	r3, r3, #1
 8024f6a:	b2da      	uxtb	r2, r3
 8024f6c:	6a3b      	ldr	r3, [r7, #32]
 8024f6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8024f72:	e032      	b.n	8024fda <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8024f74:	6a3b      	ldr	r3, [r7, #32]
 8024f76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8024f7a:	f043 0301 	orr.w	r3, r3, #1
 8024f7e:	b2da      	uxtb	r2, r3
 8024f80:	6a3b      	ldr	r3, [r7, #32]
 8024f82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8024f86:	68fa      	ldr	r2, [r7, #12]
 8024f88:	6a3b      	ldr	r3, [r7, #32]
 8024f8a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8024f8c:	6a3b      	ldr	r3, [r7, #32]
 8024f8e:	699b      	ldr	r3, [r3, #24]
 8024f90:	2b00      	cmp	r3, #0
 8024f92:	d102      	bne.n	8024f9a <prvProcessReceivedCommands+0x12e>
 8024f94:	f000 fa58 	bl	8025448 <ulSetInterruptMask>
 8024f98:	e7fe      	b.n	8024f98 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8024f9a:	6a3b      	ldr	r3, [r7, #32]
 8024f9c:	699a      	ldr	r2, [r3, #24]
 8024f9e:	69fb      	ldr	r3, [r7, #28]
 8024fa0:	18d1      	adds	r1, r2, r3
 8024fa2:	69fb      	ldr	r3, [r7, #28]
 8024fa4:	69fa      	ldr	r2, [r7, #28]
 8024fa6:	6a38      	ldr	r0, [r7, #32]
 8024fa8:	f7ff ff1e 	bl	8024de8 <prvInsertTimerInActiveList>
					break;
 8024fac:	e015      	b.n	8024fda <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8024fae:	6a3b      	ldr	r3, [r7, #32]
 8024fb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8024fb4:	f003 0302 	and.w	r3, r3, #2
 8024fb8:	2b00      	cmp	r3, #0
 8024fba:	d103      	bne.n	8024fc4 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 8024fbc:	6a38      	ldr	r0, [r7, #32]
 8024fbe:	f000 fb57 	bl	8025670 <vPortFree>
 8024fc2:	e00a      	b.n	8024fda <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8024fc4:	6a3b      	ldr	r3, [r7, #32]
 8024fc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8024fca:	f023 0301 	bic.w	r3, r3, #1
 8024fce:	b2da      	uxtb	r2, r3
 8024fd0:	6a3b      	ldr	r3, [r7, #32]
 8024fd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8024fd6:	e000      	b.n	8024fda <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8024fd8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8024fda:	4b08      	ldr	r3, [pc, #32]	; (8024ffc <prvProcessReceivedCommands+0x190>)
 8024fdc:	681b      	ldr	r3, [r3, #0]
 8024fde:	f107 0108 	add.w	r1, r7, #8
 8024fe2:	2200      	movs	r2, #0
 8024fe4:	4618      	mov	r0, r3
 8024fe6:	f7fe fcc6 	bl	8023976 <xQueueReceive>
 8024fea:	4603      	mov	r3, r0
 8024fec:	2b00      	cmp	r3, #0
 8024fee:	f47f af41 	bne.w	8024e74 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8024ff2:	bf00      	nop
 8024ff4:	bf00      	nop
 8024ff6:	3728      	adds	r7, #40	; 0x28
 8024ff8:	46bd      	mov	sp, r7
 8024ffa:	bd80      	pop	{r7, pc}
 8024ffc:	20001c0c 	.word	0x20001c0c

08025000 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8025000:	b580      	push	{r7, lr}
 8025002:	b088      	sub	sp, #32
 8025004:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8025006:	e040      	b.n	802508a <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8025008:	4b29      	ldr	r3, [pc, #164]	; (80250b0 <prvSwitchTimerLists+0xb0>)
 802500a:	681b      	ldr	r3, [r3, #0]
 802500c:	68db      	ldr	r3, [r3, #12]
 802500e:	681b      	ldr	r3, [r3, #0]
 8025010:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8025012:	4b27      	ldr	r3, [pc, #156]	; (80250b0 <prvSwitchTimerLists+0xb0>)
 8025014:	681b      	ldr	r3, [r3, #0]
 8025016:	68db      	ldr	r3, [r3, #12]
 8025018:	68db      	ldr	r3, [r3, #12]
 802501a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 802501c:	68fb      	ldr	r3, [r7, #12]
 802501e:	3304      	adds	r3, #4
 8025020:	4618      	mov	r0, r3
 8025022:	f7fe fa79 	bl	8023518 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8025026:	68fb      	ldr	r3, [r7, #12]
 8025028:	6a1b      	ldr	r3, [r3, #32]
 802502a:	68f8      	ldr	r0, [r7, #12]
 802502c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802502e:	68fb      	ldr	r3, [r7, #12]
 8025030:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8025034:	f003 0304 	and.w	r3, r3, #4
 8025038:	2b00      	cmp	r3, #0
 802503a:	d026      	beq.n	802508a <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 802503c:	68fb      	ldr	r3, [r7, #12]
 802503e:	699b      	ldr	r3, [r3, #24]
 8025040:	693a      	ldr	r2, [r7, #16]
 8025042:	4413      	add	r3, r2
 8025044:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8025046:	68ba      	ldr	r2, [r7, #8]
 8025048:	693b      	ldr	r3, [r7, #16]
 802504a:	429a      	cmp	r2, r3
 802504c:	d90e      	bls.n	802506c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 802504e:	68fb      	ldr	r3, [r7, #12]
 8025050:	68ba      	ldr	r2, [r7, #8]
 8025052:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8025054:	68fb      	ldr	r3, [r7, #12]
 8025056:	68fa      	ldr	r2, [r7, #12]
 8025058:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 802505a:	4b15      	ldr	r3, [pc, #84]	; (80250b0 <prvSwitchTimerLists+0xb0>)
 802505c:	681a      	ldr	r2, [r3, #0]
 802505e:	68fb      	ldr	r3, [r7, #12]
 8025060:	3304      	adds	r3, #4
 8025062:	4619      	mov	r1, r3
 8025064:	4610      	mov	r0, r2
 8025066:	f7fe fa1e 	bl	80234a6 <vListInsert>
 802506a:	e00e      	b.n	802508a <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 802506c:	2300      	movs	r3, #0
 802506e:	9300      	str	r3, [sp, #0]
 8025070:	2300      	movs	r3, #0
 8025072:	693a      	ldr	r2, [r7, #16]
 8025074:	2100      	movs	r1, #0
 8025076:	68f8      	ldr	r0, [r7, #12]
 8025078:	f7ff fd90 	bl	8024b9c <xTimerGenericCommand>
 802507c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 802507e:	687b      	ldr	r3, [r7, #4]
 8025080:	2b00      	cmp	r3, #0
 8025082:	d102      	bne.n	802508a <prvSwitchTimerLists+0x8a>
 8025084:	f000 f9e0 	bl	8025448 <ulSetInterruptMask>
 8025088:	e7fe      	b.n	8025088 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 802508a:	4b09      	ldr	r3, [pc, #36]	; (80250b0 <prvSwitchTimerLists+0xb0>)
 802508c:	681b      	ldr	r3, [r3, #0]
 802508e:	681b      	ldr	r3, [r3, #0]
 8025090:	2b00      	cmp	r3, #0
 8025092:	d1b9      	bne.n	8025008 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8025094:	4b06      	ldr	r3, [pc, #24]	; (80250b0 <prvSwitchTimerLists+0xb0>)
 8025096:	681b      	ldr	r3, [r3, #0]
 8025098:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 802509a:	4b06      	ldr	r3, [pc, #24]	; (80250b4 <prvSwitchTimerLists+0xb4>)
 802509c:	681b      	ldr	r3, [r3, #0]
 802509e:	4a04      	ldr	r2, [pc, #16]	; (80250b0 <prvSwitchTimerLists+0xb0>)
 80250a0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80250a2:	4a04      	ldr	r2, [pc, #16]	; (80250b4 <prvSwitchTimerLists+0xb4>)
 80250a4:	697b      	ldr	r3, [r7, #20]
 80250a6:	6013      	str	r3, [r2, #0]
}
 80250a8:	bf00      	nop
 80250aa:	3718      	adds	r7, #24
 80250ac:	46bd      	mov	sp, r7
 80250ae:	bd80      	pop	{r7, pc}
 80250b0:	20001c04 	.word	0x20001c04
 80250b4:	20001c08 	.word	0x20001c08

080250b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80250b8:	b580      	push	{r7, lr}
 80250ba:	b082      	sub	sp, #8
 80250bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80250be:	f000 f88b 	bl	80251d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80250c2:	4b15      	ldr	r3, [pc, #84]	; (8025118 <prvCheckForValidListAndQueue+0x60>)
 80250c4:	681b      	ldr	r3, [r3, #0]
 80250c6:	2b00      	cmp	r3, #0
 80250c8:	d120      	bne.n	802510c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80250ca:	4814      	ldr	r0, [pc, #80]	; (802511c <prvCheckForValidListAndQueue+0x64>)
 80250cc:	f7fe f99a 	bl	8023404 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80250d0:	4813      	ldr	r0, [pc, #76]	; (8025120 <prvCheckForValidListAndQueue+0x68>)
 80250d2:	f7fe f997 	bl	8023404 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80250d6:	4b13      	ldr	r3, [pc, #76]	; (8025124 <prvCheckForValidListAndQueue+0x6c>)
 80250d8:	4a10      	ldr	r2, [pc, #64]	; (802511c <prvCheckForValidListAndQueue+0x64>)
 80250da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80250dc:	4b12      	ldr	r3, [pc, #72]	; (8025128 <prvCheckForValidListAndQueue+0x70>)
 80250de:	4a10      	ldr	r2, [pc, #64]	; (8025120 <prvCheckForValidListAndQueue+0x68>)
 80250e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80250e2:	2300      	movs	r3, #0
 80250e4:	9300      	str	r3, [sp, #0]
 80250e6:	4b11      	ldr	r3, [pc, #68]	; (802512c <prvCheckForValidListAndQueue+0x74>)
 80250e8:	4a11      	ldr	r2, [pc, #68]	; (8025130 <prvCheckForValidListAndQueue+0x78>)
 80250ea:	2110      	movs	r1, #16
 80250ec:	200a      	movs	r0, #10
 80250ee:	f7fe fa95 	bl	802361c <xQueueGenericCreateStatic>
 80250f2:	4603      	mov	r3, r0
 80250f4:	4a08      	ldr	r2, [pc, #32]	; (8025118 <prvCheckForValidListAndQueue+0x60>)
 80250f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80250f8:	4b07      	ldr	r3, [pc, #28]	; (8025118 <prvCheckForValidListAndQueue+0x60>)
 80250fa:	681b      	ldr	r3, [r3, #0]
 80250fc:	2b00      	cmp	r3, #0
 80250fe:	d005      	beq.n	802510c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8025100:	4b05      	ldr	r3, [pc, #20]	; (8025118 <prvCheckForValidListAndQueue+0x60>)
 8025102:	681b      	ldr	r3, [r3, #0]
 8025104:	490b      	ldr	r1, [pc, #44]	; (8025134 <prvCheckForValidListAndQueue+0x7c>)
 8025106:	4618      	mov	r0, r3
 8025108:	f7fe fdfe 	bl	8023d08 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 802510c:	f000 f876 	bl	80251fc <vPortExitCritical>
}
 8025110:	bf00      	nop
 8025112:	46bd      	mov	sp, r7
 8025114:	bd80      	pop	{r7, pc}
 8025116:	bf00      	nop
 8025118:	20001c0c 	.word	0x20001c0c
 802511c:	20001bdc 	.word	0x20001bdc
 8025120:	20001bf0 	.word	0x20001bf0
 8025124:	20001c04 	.word	0x20001c04
 8025128:	20001c08 	.word	0x20001c08
 802512c:	20001cb8 	.word	0x20001cb8
 8025130:	20001c18 	.word	0x20001c18
 8025134:	08029804 	.word	0x08029804

08025138 <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 8025138:	b480      	push	{r7}
 802513a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 802513c:	4b0b      	ldr	r3, [pc, #44]	; (802516c <vPortSetupTimerInterrupt+0x34>)
 802513e:	2200      	movs	r2, #0
 8025140:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8025142:	4b0b      	ldr	r3, [pc, #44]	; (8025170 <vPortSetupTimerInterrupt+0x38>)
 8025144:	2200      	movs	r2, #0
 8025146:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8025148:	4b0a      	ldr	r3, [pc, #40]	; (8025174 <vPortSetupTimerInterrupt+0x3c>)
 802514a:	681b      	ldr	r3, [r3, #0]
 802514c:	4a0a      	ldr	r2, [pc, #40]	; (8025178 <vPortSetupTimerInterrupt+0x40>)
 802514e:	fba2 2303 	umull	r2, r3, r2, r3
 8025152:	099b      	lsrs	r3, r3, #6
 8025154:	4a09      	ldr	r2, [pc, #36]	; (802517c <vPortSetupTimerInterrupt+0x44>)
 8025156:	3b01      	subs	r3, #1
 8025158:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 802515a:	4b04      	ldr	r3, [pc, #16]	; (802516c <vPortSetupTimerInterrupt+0x34>)
 802515c:	2207      	movs	r2, #7
 802515e:	601a      	str	r2, [r3, #0]
}
 8025160:	bf00      	nop
 8025162:	46bd      	mov	sp, r7
 8025164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025168:	4770      	bx	lr
 802516a:	bf00      	nop
 802516c:	e000e010 	.word	0xe000e010
 8025170:	e000e018 	.word	0xe000e018
 8025174:	20000090 	.word	0x20000090
 8025178:	10624dd3 	.word	0x10624dd3
 802517c:	e000e014 	.word	0xe000e014

08025180 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8025180:	b580      	push	{r7, lr}
 8025182:	b082      	sub	sp, #8
 8025184:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8025186:	2300      	movs	r3, #0
 8025188:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 802518a:	4b09      	ldr	r3, [pc, #36]	; (80251b0 <prvTaskExitError+0x30>)
 802518c:	681b      	ldr	r3, [r3, #0]
 802518e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025192:	d002      	beq.n	802519a <prvTaskExitError+0x1a>
 8025194:	f000 f958 	bl	8025448 <ulSetInterruptMask>
 8025198:	e7fe      	b.n	8025198 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 802519a:	f000 f955 	bl	8025448 <ulSetInterruptMask>

	while( ulDummy == 0 )
 802519e:	bf00      	nop
 80251a0:	687b      	ldr	r3, [r7, #4]
 80251a2:	2b00      	cmp	r3, #0
 80251a4:	d0fc      	beq.n	80251a0 <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 80251a6:	bf00      	nop
 80251a8:	bf00      	nop
 80251aa:	3708      	adds	r7, #8
 80251ac:	46bd      	mov	sp, r7
 80251ae:	bd80      	pop	{r7, pc}
 80251b0:	2000009c 	.word	0x2000009c

080251b4 <vPortYield>:
	}
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 80251b4:	b480      	push	{r7}
 80251b6:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80251b8:	4b06      	ldr	r3, [pc, #24]	; (80251d4 <vPortYield+0x20>)
 80251ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80251be:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80251c0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80251c4:	f3bf 8f6f 	isb	sy
}
 80251c8:	bf00      	nop
 80251ca:	46bd      	mov	sp, r7
 80251cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251d0:	4770      	bx	lr
 80251d2:	bf00      	nop
 80251d4:	e000ed04 	.word	0xe000ed04

080251d8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 80251d8:	b580      	push	{r7, lr}
 80251da:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80251dc:	f000 f934 	bl	8025448 <ulSetInterruptMask>
	ulCriticalNesting++;
 80251e0:	4b05      	ldr	r3, [pc, #20]	; (80251f8 <vPortEnterCritical+0x20>)
 80251e2:	681b      	ldr	r3, [r3, #0]
 80251e4:	3301      	adds	r3, #1
 80251e6:	4a04      	ldr	r2, [pc, #16]	; (80251f8 <vPortEnterCritical+0x20>)
 80251e8:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80251ea:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80251ee:	f3bf 8f6f 	isb	sy
}
 80251f2:	bf00      	nop
 80251f4:	bd80      	pop	{r7, pc}
 80251f6:	bf00      	nop
 80251f8:	2000009c 	.word	0x2000009c

080251fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 80251fc:	b580      	push	{r7, lr}
 80251fe:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 8025200:	4b0a      	ldr	r3, [pc, #40]	; (802522c <vPortExitCritical+0x30>)
 8025202:	681b      	ldr	r3, [r3, #0]
 8025204:	2b00      	cmp	r3, #0
 8025206:	d102      	bne.n	802520e <vPortExitCritical+0x12>
 8025208:	f000 f91e 	bl	8025448 <ulSetInterruptMask>
 802520c:	e7fe      	b.n	802520c <vPortExitCritical+0x10>
	ulCriticalNesting--;
 802520e:	4b07      	ldr	r3, [pc, #28]	; (802522c <vPortExitCritical+0x30>)
 8025210:	681b      	ldr	r3, [r3, #0]
 8025212:	3b01      	subs	r3, #1
 8025214:	4a05      	ldr	r2, [pc, #20]	; (802522c <vPortExitCritical+0x30>)
 8025216:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 8025218:	4b04      	ldr	r3, [pc, #16]	; (802522c <vPortExitCritical+0x30>)
 802521a:	681b      	ldr	r3, [r3, #0]
 802521c:	2b00      	cmp	r3, #0
 802521e:	d102      	bne.n	8025226 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 8025220:	2000      	movs	r0, #0
 8025222:	f000 f91e 	bl	8025462 <vClearInterruptMask>
	}
}
 8025226:	bf00      	nop
 8025228:	bd80      	pop	{r7, pc}
 802522a:	bf00      	nop
 802522c:	2000009c 	.word	0x2000009c

08025230 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8025230:	b580      	push	{r7, lr}
 8025232:	b082      	sub	sp, #8
 8025234:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8025236:	f000 f907 	bl	8025448 <ulSetInterruptMask>
 802523a:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 802523c:	f7ff f8c2 	bl	80243c4 <xTaskIncrementTick>
 8025240:	4603      	mov	r3, r0
 8025242:	2b00      	cmp	r3, #0
 8025244:	d003      	beq.n	802524e <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8025246:	4b05      	ldr	r3, [pc, #20]	; (802525c <xPortSysTickHandler+0x2c>)
 8025248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802524c:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 802524e:	6878      	ldr	r0, [r7, #4]
 8025250:	f000 f907 	bl	8025462 <vClearInterruptMask>
}
 8025254:	bf00      	nop
 8025256:	3708      	adds	r7, #8
 8025258:	46bd      	mov	sp, r7
 802525a:	bd80      	pop	{r7, pc}
 802525c:	e000ed04 	.word	0xe000ed04

08025260 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8025260:	b580      	push	{r7, lr}
 8025262:	b084      	sub	sp, #16
 8025264:	af00      	add	r7, sp, #0
 8025266:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 8025268:	687b      	ldr	r3, [r7, #4]
 802526a:	699b      	ldr	r3, [r3, #24]
 802526c:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 802526e:	68fb      	ldr	r3, [r7, #12]
 8025270:	3b02      	subs	r3, #2
 8025272:	781b      	ldrb	r3, [r3, #0]
 8025274:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 8025276:	7afb      	ldrb	r3, [r7, #11]
 8025278:	2b02      	cmp	r3, #2
 802527a:	d102      	bne.n	8025282 <vPortSVCHandler_C+0x22>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 802527c:	f000 f8b8 	bl	80253f0 <vRestoreContextOfFirstTask>
		}
		break;
 8025280:	e002      	b.n	8025288 <vPortSVCHandler_C+0x28>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 8025282:	f000 f8e1 	bl	8025448 <ulSetInterruptMask>
 8025286:	e7fe      	b.n	8025286 <vPortSVCHandler_C+0x26>
		}
	}
}
 8025288:	bf00      	nop
 802528a:	3710      	adds	r7, #16
 802528c:	46bd      	mov	sp, r7
 802528e:	bd80      	pop	{r7, pc}

08025290 <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 8025290:	b480      	push	{r7}
 8025292:	b085      	sub	sp, #20
 8025294:	af00      	add	r7, sp, #0
 8025296:	60f8      	str	r0, [r7, #12]
 8025298:	60b9      	str	r1, [r7, #8]
 802529a:	607a      	str	r2, [r7, #4]
 802529c:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 802529e:	68fb      	ldr	r3, [r7, #12]
 80252a0:	3b04      	subs	r3, #4
 80252a2:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 80252a4:	68fb      	ldr	r3, [r7, #12]
 80252a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80252aa:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80252ac:	68fb      	ldr	r3, [r7, #12]
 80252ae:	3b04      	subs	r3, #4
 80252b0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 80252b2:	687a      	ldr	r2, [r7, #4]
 80252b4:	68fb      	ldr	r3, [r7, #12]
 80252b6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80252b8:	68fb      	ldr	r3, [r7, #12]
 80252ba:	3b04      	subs	r3, #4
 80252bc:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80252be:	4a38      	ldr	r2, [pc, #224]	; (80253a0 <pxPortInitialiseStack+0x110>)
 80252c0:	68fb      	ldr	r3, [r7, #12]
 80252c2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80252c4:	68fb      	ldr	r3, [r7, #12]
 80252c6:	3b04      	subs	r3, #4
 80252c8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 80252ca:	68fb      	ldr	r3, [r7, #12]
 80252cc:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 80252d0:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80252d2:	68fb      	ldr	r3, [r7, #12]
 80252d4:	3b04      	subs	r3, #4
 80252d6:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 80252d8:	68fb      	ldr	r3, [r7, #12]
 80252da:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 80252de:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80252e0:	68fb      	ldr	r3, [r7, #12]
 80252e2:	3b04      	subs	r3, #4
 80252e4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 80252e6:	68fb      	ldr	r3, [r7, #12]
 80252e8:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 80252ec:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80252ee:	68fb      	ldr	r3, [r7, #12]
 80252f0:	3b04      	subs	r3, #4
 80252f2:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 80252f4:	68fb      	ldr	r3, [r7, #12]
 80252f6:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 80252fa:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80252fc:	68fb      	ldr	r3, [r7, #12]
 80252fe:	3b04      	subs	r3, #4
 8025300:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 8025302:	683a      	ldr	r2, [r7, #0]
 8025304:	68fb      	ldr	r3, [r7, #12]
 8025306:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8025308:	68fb      	ldr	r3, [r7, #12]
 802530a:	3b04      	subs	r3, #4
 802530c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 802530e:	68fb      	ldr	r3, [r7, #12]
 8025310:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8025314:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8025316:	68fb      	ldr	r3, [r7, #12]
 8025318:	3b04      	subs	r3, #4
 802531a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 802531c:	68fb      	ldr	r3, [r7, #12]
 802531e:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8025322:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8025324:	68fb      	ldr	r3, [r7, #12]
 8025326:	3b04      	subs	r3, #4
 8025328:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 802532a:	68fb      	ldr	r3, [r7, #12]
 802532c:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8025330:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8025332:	68fb      	ldr	r3, [r7, #12]
 8025334:	3b04      	subs	r3, #4
 8025336:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 8025338:	68fb      	ldr	r3, [r7, #12]
 802533a:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 802533e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8025340:	68fb      	ldr	r3, [r7, #12]
 8025342:	3b04      	subs	r3, #4
 8025344:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 8025346:	68fb      	ldr	r3, [r7, #12]
 8025348:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 802534c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 802534e:	68fb      	ldr	r3, [r7, #12]
 8025350:	3b04      	subs	r3, #4
 8025352:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 8025354:	68fb      	ldr	r3, [r7, #12]
 8025356:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 802535a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 802535c:	68fb      	ldr	r3, [r7, #12]
 802535e:	3b04      	subs	r3, #4
 8025360:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 8025362:	68fb      	ldr	r3, [r7, #12]
 8025364:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8025368:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 802536a:	68fb      	ldr	r3, [r7, #12]
 802536c:	3b04      	subs	r3, #4
 802536e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 8025370:	68fb      	ldr	r3, [r7, #12]
 8025372:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8025376:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8025378:	68fb      	ldr	r3, [r7, #12]
 802537a:	3b04      	subs	r3, #4
 802537c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 802537e:	68fb      	ldr	r3, [r7, #12]
 8025380:	f06f 0243 	mvn.w	r2, #67	; 0x43
 8025384:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 8025386:	68fb      	ldr	r3, [r7, #12]
 8025388:	3b04      	subs	r3, #4
 802538a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 802538c:	68ba      	ldr	r2, [r7, #8]
 802538e:	68fb      	ldr	r3, [r7, #12]
 8025390:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 8025392:	68fb      	ldr	r3, [r7, #12]
}
 8025394:	4618      	mov	r0, r3
 8025396:	3714      	adds	r7, #20
 8025398:	46bd      	mov	sp, r7
 802539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802539e:	4770      	bx	lr
 80253a0:	08025181 	.word	0x08025181

080253a4 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 80253a4:	b580      	push	{r7, lr}
 80253a6:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80253a8:	4b0c      	ldr	r3, [pc, #48]	; (80253dc <xPortStartScheduler+0x38>)
 80253aa:	681b      	ldr	r3, [r3, #0]
 80253ac:	4a0b      	ldr	r2, [pc, #44]	; (80253dc <xPortStartScheduler+0x38>)
 80253ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80253b2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80253b4:	4b09      	ldr	r3, [pc, #36]	; (80253dc <xPortStartScheduler+0x38>)
 80253b6:	681b      	ldr	r3, [r3, #0]
 80253b8:	4a08      	ldr	r2, [pc, #32]	; (80253dc <xPortStartScheduler+0x38>)
 80253ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80253be:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 80253c0:	f7ff feba 	bl	8025138 <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 80253c4:	4b06      	ldr	r3, [pc, #24]	; (80253e0 <xPortStartScheduler+0x3c>)
 80253c6:	2200      	movs	r2, #0
 80253c8:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 80253ca:	f000 f829 	bl	8025420 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 80253ce:	f7ff f8ab 	bl	8024528 <vTaskSwitchContext>
	prvTaskExitError();
 80253d2:	f7ff fed5 	bl	8025180 <prvTaskExitError>

	/* Should not get here. */
	return 0;
 80253d6:	2300      	movs	r3, #0
}
 80253d8:	4618      	mov	r0, r3
 80253da:	bd80      	pop	{r7, pc}
 80253dc:	e000ed20 	.word	0xe000ed20
 80253e0:	2000009c 	.word	0x2000009c
	...

080253f0 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80253f0:	4a07      	ldr	r2, [pc, #28]	; (8025410 <pxCurrentTCBConst2>)
 80253f2:	6811      	ldr	r1, [r2, #0]
 80253f4:	6808      	ldr	r0, [r1, #0]
 80253f6:	c806      	ldmia	r0!, {r1, r2}
 80253f8:	f381 880b 	msr	PSPLIM, r1
 80253fc:	2102      	movs	r1, #2
 80253fe:	f381 8814 	msr	CONTROL, r1
 8025402:	3020      	adds	r0, #32
 8025404:	f380 8809 	msr	PSP, r0
 8025408:	f3bf 8f6f 	isb	sy
 802540c:	4710      	bx	r2
 802540e:	bf00      	nop

08025410 <pxCurrentTCBConst2>:
 8025410:	200016dc 	.word	0x200016dc
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 8025414:	bf00      	nop
 8025416:	bf00      	nop
	...

08025420 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8025420:	4807      	ldr	r0, [pc, #28]	; (8025440 <xVTORConst>)
 8025422:	6800      	ldr	r0, [r0, #0]
 8025424:	6800      	ldr	r0, [r0, #0]
 8025426:	f380 8808 	msr	MSP, r0
 802542a:	b662      	cpsie	i
 802542c:	b661      	cpsie	f
 802542e:	f3bf 8f4f 	dsb	sy
 8025432:	f3bf 8f6f 	isb	sy
 8025436:	df02      	svc	2
 8025438:	bf00      	nop
 802543a:	bf00      	nop
 802543c:	f3af 8000 	nop.w

08025440 <xVTORConst>:
 8025440:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 8025444:	bf00      	nop
 8025446:	bf00      	nop

08025448 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8025448:	f3ef 8011 	mrs	r0, BASEPRI
 802544c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 8025450:	f381 8811 	msr	BASEPRI, r1
 8025454:	f3bf 8f4f 	dsb	sy
 8025458:	f3bf 8f6f 	isb	sy
 802545c:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 802545e:	bf00      	nop
 8025460:	4618      	mov	r0, r3

08025462 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8025462:	f380 8811 	msr	BASEPRI, r0
 8025466:	f3bf 8f4f 	dsb	sy
 802546a:	f3bf 8f6f 	isb	sy
 802546e:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 8025470:	bf00      	nop
	...

08025480 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8025480:	f3ef 8009 	mrs	r0, PSP
 8025484:	f3ef 820b 	mrs	r2, PSPLIM
 8025488:	4673      	mov	r3, lr
 802548a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 802548e:	4a10      	ldr	r2, [pc, #64]	; (80254d0 <pxCurrentTCBConst>)
 8025490:	6811      	ldr	r1, [r2, #0]
 8025492:	6008      	str	r0, [r1, #0]
 8025494:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 8025498:	f380 8811 	msr	BASEPRI, r0
 802549c:	f3bf 8f4f 	dsb	sy
 80254a0:	f3bf 8f6f 	isb	sy
 80254a4:	f7ff f840 	bl	8024528 <vTaskSwitchContext>
 80254a8:	f04f 0000 	mov.w	r0, #0
 80254ac:	f380 8811 	msr	BASEPRI, r0
 80254b0:	4a07      	ldr	r2, [pc, #28]	; (80254d0 <pxCurrentTCBConst>)
 80254b2:	6811      	ldr	r1, [r2, #0]
 80254b4:	6808      	ldr	r0, [r1, #0]
 80254b6:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80254ba:	f382 880b 	msr	PSPLIM, r2
 80254be:	f380 8809 	msr	PSP, r0
 80254c2:	4718      	bx	r3
 80254c4:	f3af 8000 	nop.w
 80254c8:	f3af 8000 	nop.w
 80254cc:	f3af 8000 	nop.w

080254d0 <pxCurrentTCBConst>:
 80254d0:	200016dc 	.word	0x200016dc
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 80254d4:	bf00      	nop
 80254d6:	bf00      	nop
	...

080254e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80254e0:	f01e 0f04 	tst.w	lr, #4
 80254e4:	bf0c      	ite	eq
 80254e6:	f3ef 8008 	mrseq	r0, MSP
 80254ea:	f3ef 8009 	mrsne	r0, PSP
 80254ee:	4904      	ldr	r1, [pc, #16]	; (8025500 <svchandler_address_const>)
 80254f0:	4708      	bx	r1
 80254f2:	bf00      	nop
 80254f4:	f3af 8000 	nop.w
 80254f8:	f3af 8000 	nop.w
 80254fc:	f3af 8000 	nop.w

08025500 <svchandler_address_const>:
 8025500:	08025261 	.word	0x08025261
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 8025504:	bf00      	nop
 8025506:	bf00      	nop

08025508 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8025508:	b580      	push	{r7, lr}
 802550a:	b086      	sub	sp, #24
 802550c:	af00      	add	r7, sp, #0
 802550e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8025510:	2300      	movs	r3, #0
 8025512:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8025514:	f7fe feaa 	bl	802426c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8025518:	4b4f      	ldr	r3, [pc, #316]	; (8025658 <pvPortMalloc+0x150>)
 802551a:	681b      	ldr	r3, [r3, #0]
 802551c:	2b00      	cmp	r3, #0
 802551e:	d101      	bne.n	8025524 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8025520:	f000 f8f8 	bl	8025714 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8025524:	4b4d      	ldr	r3, [pc, #308]	; (802565c <pvPortMalloc+0x154>)
 8025526:	681a      	ldr	r2, [r3, #0]
 8025528:	687b      	ldr	r3, [r7, #4]
 802552a:	4013      	ands	r3, r2
 802552c:	2b00      	cmp	r3, #0
 802552e:	f040 8083 	bne.w	8025638 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8025532:	687b      	ldr	r3, [r7, #4]
 8025534:	2b00      	cmp	r3, #0
 8025536:	d015      	beq.n	8025564 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 8025538:	2208      	movs	r2, #8
 802553a:	687b      	ldr	r3, [r7, #4]
 802553c:	4413      	add	r3, r2
 802553e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8025540:	687b      	ldr	r3, [r7, #4]
 8025542:	f003 0307 	and.w	r3, r3, #7
 8025546:	2b00      	cmp	r3, #0
 8025548:	d00c      	beq.n	8025564 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 802554a:	687b      	ldr	r3, [r7, #4]
 802554c:	f023 0307 	bic.w	r3, r3, #7
 8025550:	3308      	adds	r3, #8
 8025552:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8025554:	687b      	ldr	r3, [r7, #4]
 8025556:	f003 0307 	and.w	r3, r3, #7
 802555a:	2b00      	cmp	r3, #0
 802555c:	d002      	beq.n	8025564 <pvPortMalloc+0x5c>
 802555e:	f7ff ff73 	bl	8025448 <ulSetInterruptMask>
 8025562:	e7fe      	b.n	8025562 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8025564:	687b      	ldr	r3, [r7, #4]
 8025566:	2b00      	cmp	r3, #0
 8025568:	d066      	beq.n	8025638 <pvPortMalloc+0x130>
 802556a:	4b3d      	ldr	r3, [pc, #244]	; (8025660 <pvPortMalloc+0x158>)
 802556c:	681b      	ldr	r3, [r3, #0]
 802556e:	687a      	ldr	r2, [r7, #4]
 8025570:	429a      	cmp	r2, r3
 8025572:	d861      	bhi.n	8025638 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8025574:	4b3b      	ldr	r3, [pc, #236]	; (8025664 <pvPortMalloc+0x15c>)
 8025576:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8025578:	4b3a      	ldr	r3, [pc, #232]	; (8025664 <pvPortMalloc+0x15c>)
 802557a:	681b      	ldr	r3, [r3, #0]
 802557c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 802557e:	e004      	b.n	802558a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 8025580:	697b      	ldr	r3, [r7, #20]
 8025582:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8025584:	697b      	ldr	r3, [r7, #20]
 8025586:	681b      	ldr	r3, [r3, #0]
 8025588:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 802558a:	697b      	ldr	r3, [r7, #20]
 802558c:	685b      	ldr	r3, [r3, #4]
 802558e:	687a      	ldr	r2, [r7, #4]
 8025590:	429a      	cmp	r2, r3
 8025592:	d903      	bls.n	802559c <pvPortMalloc+0x94>
 8025594:	697b      	ldr	r3, [r7, #20]
 8025596:	681b      	ldr	r3, [r3, #0]
 8025598:	2b00      	cmp	r3, #0
 802559a:	d1f1      	bne.n	8025580 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 802559c:	4b2e      	ldr	r3, [pc, #184]	; (8025658 <pvPortMalloc+0x150>)
 802559e:	681b      	ldr	r3, [r3, #0]
 80255a0:	697a      	ldr	r2, [r7, #20]
 80255a2:	429a      	cmp	r2, r3
 80255a4:	d048      	beq.n	8025638 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80255a6:	693b      	ldr	r3, [r7, #16]
 80255a8:	681b      	ldr	r3, [r3, #0]
 80255aa:	2208      	movs	r2, #8
 80255ac:	4413      	add	r3, r2
 80255ae:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80255b0:	697b      	ldr	r3, [r7, #20]
 80255b2:	681a      	ldr	r2, [r3, #0]
 80255b4:	693b      	ldr	r3, [r7, #16]
 80255b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80255b8:	697b      	ldr	r3, [r7, #20]
 80255ba:	685a      	ldr	r2, [r3, #4]
 80255bc:	687b      	ldr	r3, [r7, #4]
 80255be:	1ad2      	subs	r2, r2, r3
 80255c0:	2308      	movs	r3, #8
 80255c2:	005b      	lsls	r3, r3, #1
 80255c4:	429a      	cmp	r2, r3
 80255c6:	d917      	bls.n	80255f8 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80255c8:	697a      	ldr	r2, [r7, #20]
 80255ca:	687b      	ldr	r3, [r7, #4]
 80255cc:	4413      	add	r3, r2
 80255ce:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80255d0:	68bb      	ldr	r3, [r7, #8]
 80255d2:	f003 0307 	and.w	r3, r3, #7
 80255d6:	2b00      	cmp	r3, #0
 80255d8:	d002      	beq.n	80255e0 <pvPortMalloc+0xd8>
 80255da:	f7ff ff35 	bl	8025448 <ulSetInterruptMask>
 80255de:	e7fe      	b.n	80255de <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80255e0:	697b      	ldr	r3, [r7, #20]
 80255e2:	685a      	ldr	r2, [r3, #4]
 80255e4:	687b      	ldr	r3, [r7, #4]
 80255e6:	1ad2      	subs	r2, r2, r3
 80255e8:	68bb      	ldr	r3, [r7, #8]
 80255ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80255ec:	697b      	ldr	r3, [r7, #20]
 80255ee:	687a      	ldr	r2, [r7, #4]
 80255f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80255f2:	68b8      	ldr	r0, [r7, #8]
 80255f4:	f000 f8f0 	bl	80257d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80255f8:	4b19      	ldr	r3, [pc, #100]	; (8025660 <pvPortMalloc+0x158>)
 80255fa:	681a      	ldr	r2, [r3, #0]
 80255fc:	697b      	ldr	r3, [r7, #20]
 80255fe:	685b      	ldr	r3, [r3, #4]
 8025600:	1ad3      	subs	r3, r2, r3
 8025602:	4a17      	ldr	r2, [pc, #92]	; (8025660 <pvPortMalloc+0x158>)
 8025604:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8025606:	4b16      	ldr	r3, [pc, #88]	; (8025660 <pvPortMalloc+0x158>)
 8025608:	681a      	ldr	r2, [r3, #0]
 802560a:	4b17      	ldr	r3, [pc, #92]	; (8025668 <pvPortMalloc+0x160>)
 802560c:	681b      	ldr	r3, [r3, #0]
 802560e:	429a      	cmp	r2, r3
 8025610:	d203      	bcs.n	802561a <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8025612:	4b13      	ldr	r3, [pc, #76]	; (8025660 <pvPortMalloc+0x158>)
 8025614:	681b      	ldr	r3, [r3, #0]
 8025616:	4a14      	ldr	r2, [pc, #80]	; (8025668 <pvPortMalloc+0x160>)
 8025618:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 802561a:	697b      	ldr	r3, [r7, #20]
 802561c:	685a      	ldr	r2, [r3, #4]
 802561e:	4b0f      	ldr	r3, [pc, #60]	; (802565c <pvPortMalloc+0x154>)
 8025620:	681b      	ldr	r3, [r3, #0]
 8025622:	431a      	orrs	r2, r3
 8025624:	697b      	ldr	r3, [r7, #20]
 8025626:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8025628:	697b      	ldr	r3, [r7, #20]
 802562a:	2200      	movs	r2, #0
 802562c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 802562e:	4b0f      	ldr	r3, [pc, #60]	; (802566c <pvPortMalloc+0x164>)
 8025630:	681b      	ldr	r3, [r3, #0]
 8025632:	3301      	adds	r3, #1
 8025634:	4a0d      	ldr	r2, [pc, #52]	; (802566c <pvPortMalloc+0x164>)
 8025636:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8025638:	f7fe fe26 	bl	8024288 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 802563c:	68fb      	ldr	r3, [r7, #12]
 802563e:	f003 0307 	and.w	r3, r3, #7
 8025642:	2b00      	cmp	r3, #0
 8025644:	d002      	beq.n	802564c <pvPortMalloc+0x144>
 8025646:	f7ff feff 	bl	8025448 <ulSetInterruptMask>
 802564a:	e7fe      	b.n	802564a <pvPortMalloc+0x142>
	return pvReturn;
 802564c:	68fb      	ldr	r3, [r7, #12]
}
 802564e:	4618      	mov	r0, r3
 8025650:	3718      	adds	r7, #24
 8025652:	46bd      	mov	sp, r7
 8025654:	bd80      	pop	{r7, pc}
 8025656:	bf00      	nop
 8025658:	20005d10 	.word	0x20005d10
 802565c:	20005d24 	.word	0x20005d24
 8025660:	20005d14 	.word	0x20005d14
 8025664:	20005d08 	.word	0x20005d08
 8025668:	20005d18 	.word	0x20005d18
 802566c:	20005d1c 	.word	0x20005d1c

08025670 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8025670:	b580      	push	{r7, lr}
 8025672:	b084      	sub	sp, #16
 8025674:	af00      	add	r7, sp, #0
 8025676:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8025678:	687b      	ldr	r3, [r7, #4]
 802567a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 802567c:	687b      	ldr	r3, [r7, #4]
 802567e:	2b00      	cmp	r3, #0
 8025680:	d03d      	beq.n	80256fe <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8025682:	2308      	movs	r3, #8
 8025684:	425b      	negs	r3, r3
 8025686:	68fa      	ldr	r2, [r7, #12]
 8025688:	4413      	add	r3, r2
 802568a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 802568c:	68fb      	ldr	r3, [r7, #12]
 802568e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8025690:	68bb      	ldr	r3, [r7, #8]
 8025692:	685a      	ldr	r2, [r3, #4]
 8025694:	4b1c      	ldr	r3, [pc, #112]	; (8025708 <vPortFree+0x98>)
 8025696:	681b      	ldr	r3, [r3, #0]
 8025698:	4013      	ands	r3, r2
 802569a:	2b00      	cmp	r3, #0
 802569c:	d102      	bne.n	80256a4 <vPortFree+0x34>
 802569e:	f7ff fed3 	bl	8025448 <ulSetInterruptMask>
 80256a2:	e7fe      	b.n	80256a2 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80256a4:	68bb      	ldr	r3, [r7, #8]
 80256a6:	681b      	ldr	r3, [r3, #0]
 80256a8:	2b00      	cmp	r3, #0
 80256aa:	d002      	beq.n	80256b2 <vPortFree+0x42>
 80256ac:	f7ff fecc 	bl	8025448 <ulSetInterruptMask>
 80256b0:	e7fe      	b.n	80256b0 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80256b2:	68bb      	ldr	r3, [r7, #8]
 80256b4:	685a      	ldr	r2, [r3, #4]
 80256b6:	4b14      	ldr	r3, [pc, #80]	; (8025708 <vPortFree+0x98>)
 80256b8:	681b      	ldr	r3, [r3, #0]
 80256ba:	4013      	ands	r3, r2
 80256bc:	2b00      	cmp	r3, #0
 80256be:	d01e      	beq.n	80256fe <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80256c0:	68bb      	ldr	r3, [r7, #8]
 80256c2:	681b      	ldr	r3, [r3, #0]
 80256c4:	2b00      	cmp	r3, #0
 80256c6:	d11a      	bne.n	80256fe <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80256c8:	68bb      	ldr	r3, [r7, #8]
 80256ca:	685a      	ldr	r2, [r3, #4]
 80256cc:	4b0e      	ldr	r3, [pc, #56]	; (8025708 <vPortFree+0x98>)
 80256ce:	681b      	ldr	r3, [r3, #0]
 80256d0:	43db      	mvns	r3, r3
 80256d2:	401a      	ands	r2, r3
 80256d4:	68bb      	ldr	r3, [r7, #8]
 80256d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80256d8:	f7fe fdc8 	bl	802426c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80256dc:	68bb      	ldr	r3, [r7, #8]
 80256de:	685a      	ldr	r2, [r3, #4]
 80256e0:	4b0a      	ldr	r3, [pc, #40]	; (802570c <vPortFree+0x9c>)
 80256e2:	681b      	ldr	r3, [r3, #0]
 80256e4:	4413      	add	r3, r2
 80256e6:	4a09      	ldr	r2, [pc, #36]	; (802570c <vPortFree+0x9c>)
 80256e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80256ea:	68b8      	ldr	r0, [r7, #8]
 80256ec:	f000 f874 	bl	80257d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80256f0:	4b07      	ldr	r3, [pc, #28]	; (8025710 <vPortFree+0xa0>)
 80256f2:	681b      	ldr	r3, [r3, #0]
 80256f4:	3301      	adds	r3, #1
 80256f6:	4a06      	ldr	r2, [pc, #24]	; (8025710 <vPortFree+0xa0>)
 80256f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80256fa:	f7fe fdc5 	bl	8024288 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80256fe:	bf00      	nop
 8025700:	3710      	adds	r7, #16
 8025702:	46bd      	mov	sp, r7
 8025704:	bd80      	pop	{r7, pc}
 8025706:	bf00      	nop
 8025708:	20005d24 	.word	0x20005d24
 802570c:	20005d14 	.word	0x20005d14
 8025710:	20005d20 	.word	0x20005d20

08025714 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8025714:	b480      	push	{r7}
 8025716:	b085      	sub	sp, #20
 8025718:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 802571a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 802571e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8025720:	4b27      	ldr	r3, [pc, #156]	; (80257c0 <prvHeapInit+0xac>)
 8025722:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8025724:	68fb      	ldr	r3, [r7, #12]
 8025726:	f003 0307 	and.w	r3, r3, #7
 802572a:	2b00      	cmp	r3, #0
 802572c:	d00c      	beq.n	8025748 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 802572e:	68fb      	ldr	r3, [r7, #12]
 8025730:	3307      	adds	r3, #7
 8025732:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8025734:	68fb      	ldr	r3, [r7, #12]
 8025736:	f023 0307 	bic.w	r3, r3, #7
 802573a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 802573c:	68ba      	ldr	r2, [r7, #8]
 802573e:	68fb      	ldr	r3, [r7, #12]
 8025740:	1ad3      	subs	r3, r2, r3
 8025742:	4a1f      	ldr	r2, [pc, #124]	; (80257c0 <prvHeapInit+0xac>)
 8025744:	4413      	add	r3, r2
 8025746:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8025748:	68fb      	ldr	r3, [r7, #12]
 802574a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 802574c:	4a1d      	ldr	r2, [pc, #116]	; (80257c4 <prvHeapInit+0xb0>)
 802574e:	687b      	ldr	r3, [r7, #4]
 8025750:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8025752:	4b1c      	ldr	r3, [pc, #112]	; (80257c4 <prvHeapInit+0xb0>)
 8025754:	2200      	movs	r2, #0
 8025756:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8025758:	687b      	ldr	r3, [r7, #4]
 802575a:	68ba      	ldr	r2, [r7, #8]
 802575c:	4413      	add	r3, r2
 802575e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8025760:	2208      	movs	r2, #8
 8025762:	68fb      	ldr	r3, [r7, #12]
 8025764:	1a9b      	subs	r3, r3, r2
 8025766:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8025768:	68fb      	ldr	r3, [r7, #12]
 802576a:	f023 0307 	bic.w	r3, r3, #7
 802576e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8025770:	68fb      	ldr	r3, [r7, #12]
 8025772:	4a15      	ldr	r2, [pc, #84]	; (80257c8 <prvHeapInit+0xb4>)
 8025774:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8025776:	4b14      	ldr	r3, [pc, #80]	; (80257c8 <prvHeapInit+0xb4>)
 8025778:	681b      	ldr	r3, [r3, #0]
 802577a:	2200      	movs	r2, #0
 802577c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 802577e:	4b12      	ldr	r3, [pc, #72]	; (80257c8 <prvHeapInit+0xb4>)
 8025780:	681b      	ldr	r3, [r3, #0]
 8025782:	2200      	movs	r2, #0
 8025784:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8025786:	687b      	ldr	r3, [r7, #4]
 8025788:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 802578a:	683b      	ldr	r3, [r7, #0]
 802578c:	68fa      	ldr	r2, [r7, #12]
 802578e:	1ad2      	subs	r2, r2, r3
 8025790:	683b      	ldr	r3, [r7, #0]
 8025792:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8025794:	4b0c      	ldr	r3, [pc, #48]	; (80257c8 <prvHeapInit+0xb4>)
 8025796:	681a      	ldr	r2, [r3, #0]
 8025798:	683b      	ldr	r3, [r7, #0]
 802579a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 802579c:	683b      	ldr	r3, [r7, #0]
 802579e:	685b      	ldr	r3, [r3, #4]
 80257a0:	4a0a      	ldr	r2, [pc, #40]	; (80257cc <prvHeapInit+0xb8>)
 80257a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80257a4:	683b      	ldr	r3, [r7, #0]
 80257a6:	685b      	ldr	r3, [r3, #4]
 80257a8:	4a09      	ldr	r2, [pc, #36]	; (80257d0 <prvHeapInit+0xbc>)
 80257aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80257ac:	4b09      	ldr	r3, [pc, #36]	; (80257d4 <prvHeapInit+0xc0>)
 80257ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80257b2:	601a      	str	r2, [r3, #0]
}
 80257b4:	bf00      	nop
 80257b6:	3714      	adds	r7, #20
 80257b8:	46bd      	mov	sp, r7
 80257ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80257be:	4770      	bx	lr
 80257c0:	20001d08 	.word	0x20001d08
 80257c4:	20005d08 	.word	0x20005d08
 80257c8:	20005d10 	.word	0x20005d10
 80257cc:	20005d18 	.word	0x20005d18
 80257d0:	20005d14 	.word	0x20005d14
 80257d4:	20005d24 	.word	0x20005d24

080257d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80257d8:	b480      	push	{r7}
 80257da:	b085      	sub	sp, #20
 80257dc:	af00      	add	r7, sp, #0
 80257de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80257e0:	4b28      	ldr	r3, [pc, #160]	; (8025884 <prvInsertBlockIntoFreeList+0xac>)
 80257e2:	60fb      	str	r3, [r7, #12]
 80257e4:	e002      	b.n	80257ec <prvInsertBlockIntoFreeList+0x14>
 80257e6:	68fb      	ldr	r3, [r7, #12]
 80257e8:	681b      	ldr	r3, [r3, #0]
 80257ea:	60fb      	str	r3, [r7, #12]
 80257ec:	68fb      	ldr	r3, [r7, #12]
 80257ee:	681b      	ldr	r3, [r3, #0]
 80257f0:	687a      	ldr	r2, [r7, #4]
 80257f2:	429a      	cmp	r2, r3
 80257f4:	d8f7      	bhi.n	80257e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80257f6:	68fb      	ldr	r3, [r7, #12]
 80257f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80257fa:	68fb      	ldr	r3, [r7, #12]
 80257fc:	685b      	ldr	r3, [r3, #4]
 80257fe:	68ba      	ldr	r2, [r7, #8]
 8025800:	4413      	add	r3, r2
 8025802:	687a      	ldr	r2, [r7, #4]
 8025804:	429a      	cmp	r2, r3
 8025806:	d108      	bne.n	802581a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8025808:	68fb      	ldr	r3, [r7, #12]
 802580a:	685a      	ldr	r2, [r3, #4]
 802580c:	687b      	ldr	r3, [r7, #4]
 802580e:	685b      	ldr	r3, [r3, #4]
 8025810:	441a      	add	r2, r3
 8025812:	68fb      	ldr	r3, [r7, #12]
 8025814:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8025816:	68fb      	ldr	r3, [r7, #12]
 8025818:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 802581a:	687b      	ldr	r3, [r7, #4]
 802581c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 802581e:	687b      	ldr	r3, [r7, #4]
 8025820:	685b      	ldr	r3, [r3, #4]
 8025822:	68ba      	ldr	r2, [r7, #8]
 8025824:	441a      	add	r2, r3
 8025826:	68fb      	ldr	r3, [r7, #12]
 8025828:	681b      	ldr	r3, [r3, #0]
 802582a:	429a      	cmp	r2, r3
 802582c:	d118      	bne.n	8025860 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 802582e:	68fb      	ldr	r3, [r7, #12]
 8025830:	681a      	ldr	r2, [r3, #0]
 8025832:	4b15      	ldr	r3, [pc, #84]	; (8025888 <prvInsertBlockIntoFreeList+0xb0>)
 8025834:	681b      	ldr	r3, [r3, #0]
 8025836:	429a      	cmp	r2, r3
 8025838:	d00d      	beq.n	8025856 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 802583a:	687b      	ldr	r3, [r7, #4]
 802583c:	685a      	ldr	r2, [r3, #4]
 802583e:	68fb      	ldr	r3, [r7, #12]
 8025840:	681b      	ldr	r3, [r3, #0]
 8025842:	685b      	ldr	r3, [r3, #4]
 8025844:	441a      	add	r2, r3
 8025846:	687b      	ldr	r3, [r7, #4]
 8025848:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 802584a:	68fb      	ldr	r3, [r7, #12]
 802584c:	681b      	ldr	r3, [r3, #0]
 802584e:	681a      	ldr	r2, [r3, #0]
 8025850:	687b      	ldr	r3, [r7, #4]
 8025852:	601a      	str	r2, [r3, #0]
 8025854:	e008      	b.n	8025868 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8025856:	4b0c      	ldr	r3, [pc, #48]	; (8025888 <prvInsertBlockIntoFreeList+0xb0>)
 8025858:	681a      	ldr	r2, [r3, #0]
 802585a:	687b      	ldr	r3, [r7, #4]
 802585c:	601a      	str	r2, [r3, #0]
 802585e:	e003      	b.n	8025868 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8025860:	68fb      	ldr	r3, [r7, #12]
 8025862:	681a      	ldr	r2, [r3, #0]
 8025864:	687b      	ldr	r3, [r7, #4]
 8025866:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8025868:	68fa      	ldr	r2, [r7, #12]
 802586a:	687b      	ldr	r3, [r7, #4]
 802586c:	429a      	cmp	r2, r3
 802586e:	d002      	beq.n	8025876 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8025870:	68fb      	ldr	r3, [r7, #12]
 8025872:	687a      	ldr	r2, [r7, #4]
 8025874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8025876:	bf00      	nop
 8025878:	3714      	adds	r7, #20
 802587a:	46bd      	mov	sp, r7
 802587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025880:	4770      	bx	lr
 8025882:	bf00      	nop
 8025884:	20005d08 	.word	0x20005d08
 8025888:	20005d10 	.word	0x20005d10

0802588c <_ZdlPv>:
 802588c:	f003 b83a 	b.w	8028904 <free>

08025890 <_ZdlPvj>:
 8025890:	f7ff bffc 	b.w	802588c <_ZdlPv>

08025894 <_Znwj>:
 8025894:	2801      	cmp	r0, #1
 8025896:	bf38      	it	cc
 8025898:	2001      	movcc	r0, #1
 802589a:	b510      	push	{r4, lr}
 802589c:	4604      	mov	r4, r0
 802589e:	4620      	mov	r0, r4
 80258a0:	f003 f828 	bl	80288f4 <malloc>
 80258a4:	b100      	cbz	r0, 80258a8 <_Znwj+0x14>
 80258a6:	bd10      	pop	{r4, pc}
 80258a8:	f000 f8ca 	bl	8025a40 <_ZSt15get_new_handlerv>
 80258ac:	b908      	cbnz	r0, 80258b2 <_Znwj+0x1e>
 80258ae:	f003 f81a 	bl	80288e6 <abort>
 80258b2:	4780      	blx	r0
 80258b4:	e7f3      	b.n	802589e <_Znwj+0xa>

080258b6 <_ZNSaIcEC1Ev>:
 80258b6:	4770      	bx	lr

080258b8 <_ZNSaIcEC1ERKS_>:
 80258b8:	4770      	bx	lr

080258ba <_ZNSaIcED1Ev>:
 80258ba:	4770      	bx	lr

080258bc <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 80258bc:	68c3      	ldr	r3, [r0, #12]
 80258be:	689a      	ldr	r2, [r3, #8]
 80258c0:	b510      	push	{r4, lr}
 80258c2:	60c2      	str	r2, [r0, #12]
 80258c4:	b102      	cbz	r2, 80258c8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 80258c6:	6050      	str	r0, [r2, #4]
 80258c8:	6842      	ldr	r2, [r0, #4]
 80258ca:	605a      	str	r2, [r3, #4]
 80258cc:	680c      	ldr	r4, [r1, #0]
 80258ce:	4284      	cmp	r4, r0
 80258d0:	d103      	bne.n	80258da <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 80258d2:	600b      	str	r3, [r1, #0]
 80258d4:	6098      	str	r0, [r3, #8]
 80258d6:	6043      	str	r3, [r0, #4]
 80258d8:	bd10      	pop	{r4, pc}
 80258da:	6891      	ldr	r1, [r2, #8]
 80258dc:	4281      	cmp	r1, r0
 80258de:	bf0c      	ite	eq
 80258e0:	6093      	streq	r3, [r2, #8]
 80258e2:	60d3      	strne	r3, [r2, #12]
 80258e4:	e7f6      	b.n	80258d4 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

080258e6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 80258e6:	6883      	ldr	r3, [r0, #8]
 80258e8:	68da      	ldr	r2, [r3, #12]
 80258ea:	b510      	push	{r4, lr}
 80258ec:	6082      	str	r2, [r0, #8]
 80258ee:	b102      	cbz	r2, 80258f2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 80258f0:	6050      	str	r0, [r2, #4]
 80258f2:	6842      	ldr	r2, [r0, #4]
 80258f4:	605a      	str	r2, [r3, #4]
 80258f6:	680c      	ldr	r4, [r1, #0]
 80258f8:	4284      	cmp	r4, r0
 80258fa:	d103      	bne.n	8025904 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 80258fc:	600b      	str	r3, [r1, #0]
 80258fe:	60d8      	str	r0, [r3, #12]
 8025900:	6043      	str	r3, [r0, #4]
 8025902:	bd10      	pop	{r4, pc}
 8025904:	68d1      	ldr	r1, [r2, #12]
 8025906:	4281      	cmp	r1, r0
 8025908:	bf0c      	ite	eq
 802590a:	60d3      	streq	r3, [r2, #12]
 802590c:	6093      	strne	r3, [r2, #8]
 802590e:	e7f6      	b.n	80258fe <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08025910 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8025910:	68c3      	ldr	r3, [r0, #12]
 8025912:	b123      	cbz	r3, 802591e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 8025914:	4618      	mov	r0, r3
 8025916:	689b      	ldr	r3, [r3, #8]
 8025918:	2b00      	cmp	r3, #0
 802591a:	d1fb      	bne.n	8025914 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 802591c:	4770      	bx	lr
 802591e:	6843      	ldr	r3, [r0, #4]
 8025920:	68da      	ldr	r2, [r3, #12]
 8025922:	4282      	cmp	r2, r0
 8025924:	d004      	beq.n	8025930 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x20>
 8025926:	68c2      	ldr	r2, [r0, #12]
 8025928:	4293      	cmp	r3, r2
 802592a:	bf18      	it	ne
 802592c:	4618      	movne	r0, r3
 802592e:	4770      	bx	lr
 8025930:	4618      	mov	r0, r3
 8025932:	685b      	ldr	r3, [r3, #4]
 8025934:	e7f4      	b.n	8025920 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>

08025936 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8025936:	7803      	ldrb	r3, [r0, #0]
 8025938:	b933      	cbnz	r3, 8025948 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 802593a:	6843      	ldr	r3, [r0, #4]
 802593c:	685b      	ldr	r3, [r3, #4]
 802593e:	4283      	cmp	r3, r0
 8025940:	d102      	bne.n	8025948 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8025942:	68db      	ldr	r3, [r3, #12]
 8025944:	4618      	mov	r0, r3
 8025946:	4770      	bx	lr
 8025948:	6882      	ldr	r2, [r0, #8]
 802594a:	b122      	cbz	r2, 8025956 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 802594c:	4613      	mov	r3, r2
 802594e:	68d2      	ldr	r2, [r2, #12]
 8025950:	2a00      	cmp	r2, #0
 8025952:	d1fb      	bne.n	802594c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8025954:	e7f6      	b.n	8025944 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8025956:	6843      	ldr	r3, [r0, #4]
 8025958:	689a      	ldr	r2, [r3, #8]
 802595a:	4282      	cmp	r2, r0
 802595c:	d1f2      	bne.n	8025944 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 802595e:	4618      	mov	r0, r3
 8025960:	685b      	ldr	r3, [r3, #4]
 8025962:	e7f9      	b.n	8025958 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08025964 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8025964:	f7ff bfd4 	b.w	8025910 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

08025968 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8025968:	f7ff bfe5 	b.w	8025936 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

0802596c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 802596c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025970:	461d      	mov	r5, r3
 8025972:	f103 0804 	add.w	r8, r3, #4
 8025976:	2300      	movs	r3, #0
 8025978:	460c      	mov	r4, r1
 802597a:	604a      	str	r2, [r1, #4]
 802597c:	700b      	strb	r3, [r1, #0]
 802597e:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8025982:	b198      	cbz	r0, 80259ac <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
 8025984:	4295      	cmp	r5, r2
 8025986:	6091      	str	r1, [r2, #8]
 8025988:	d102      	bne.n	8025990 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x24>
 802598a:	6069      	str	r1, [r5, #4]
 802598c:	60ec      	str	r4, [r5, #12]
 802598e:	e003      	b.n	8025998 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2c>
 8025990:	68ab      	ldr	r3, [r5, #8]
 8025992:	4293      	cmp	r3, r2
 8025994:	bf08      	it	eq
 8025996:	60a9      	streq	r1, [r5, #8]
 8025998:	2701      	movs	r7, #1
 802599a:	f04f 0900 	mov.w	r9, #0
 802599e:	686b      	ldr	r3, [r5, #4]
 80259a0:	42a3      	cmp	r3, r4
 80259a2:	d130      	bne.n	8025a06 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9a>
 80259a4:	2201      	movs	r2, #1
 80259a6:	701a      	strb	r2, [r3, #0]
 80259a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80259ac:	60d1      	str	r1, [r2, #12]
 80259ae:	68eb      	ldr	r3, [r5, #12]
 80259b0:	4293      	cmp	r3, r2
 80259b2:	d1f1      	bne.n	8025998 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2c>
 80259b4:	e7ea      	b.n	802598c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 80259b6:	68c3      	ldr	r3, [r0, #12]
 80259b8:	42a3      	cmp	r3, r4
 80259ba:	d103      	bne.n	80259c4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
 80259bc:	4604      	mov	r4, r0
 80259be:	4641      	mov	r1, r8
 80259c0:	f7ff ff7c 	bl	80258bc <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80259c4:	6863      	ldr	r3, [r4, #4]
 80259c6:	4641      	mov	r1, r8
 80259c8:	4630      	mov	r0, r6
 80259ca:	701f      	strb	r7, [r3, #0]
 80259cc:	f886 9000 	strb.w	r9, [r6]
 80259d0:	f7ff ff89 	bl	80258e6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80259d4:	4626      	mov	r6, r4
 80259d6:	e027      	b.n	8025a28 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbc>
 80259d8:	b12b      	cbz	r3, 80259e6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7a>
 80259da:	781a      	ldrb	r2, [r3, #0]
 80259dc:	b91a      	cbnz	r2, 80259e6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7a>
 80259de:	7007      	strb	r7, [r0, #0]
 80259e0:	701f      	strb	r7, [r3, #0]
 80259e2:	7032      	strb	r2, [r6, #0]
 80259e4:	e020      	b.n	8025a28 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbc>
 80259e6:	6883      	ldr	r3, [r0, #8]
 80259e8:	42a3      	cmp	r3, r4
 80259ea:	d103      	bne.n	80259f4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x88>
 80259ec:	4604      	mov	r4, r0
 80259ee:	4641      	mov	r1, r8
 80259f0:	f7ff ff79 	bl	80258e6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80259f4:	6863      	ldr	r3, [r4, #4]
 80259f6:	4641      	mov	r1, r8
 80259f8:	4630      	mov	r0, r6
 80259fa:	701f      	strb	r7, [r3, #0]
 80259fc:	f886 9000 	strb.w	r9, [r6]
 8025a00:	f7ff ff5c 	bl	80258bc <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8025a04:	e7e6      	b.n	80259d4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x68>
 8025a06:	6860      	ldr	r0, [r4, #4]
 8025a08:	7802      	ldrb	r2, [r0, #0]
 8025a0a:	2a00      	cmp	r2, #0
 8025a0c:	d1ca      	bne.n	80259a4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x38>
 8025a0e:	6846      	ldr	r6, [r0, #4]
 8025a10:	68b3      	ldr	r3, [r6, #8]
 8025a12:	4283      	cmp	r3, r0
 8025a14:	d1e0      	bne.n	80259d8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 8025a16:	68f2      	ldr	r2, [r6, #12]
 8025a18:	2a00      	cmp	r2, #0
 8025a1a:	d0cc      	beq.n	80259b6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8025a1c:	7811      	ldrb	r1, [r2, #0]
 8025a1e:	2900      	cmp	r1, #0
 8025a20:	d1c9      	bne.n	80259b6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8025a22:	701f      	strb	r7, [r3, #0]
 8025a24:	7017      	strb	r7, [r2, #0]
 8025a26:	7031      	strb	r1, [r6, #0]
 8025a28:	4634      	mov	r4, r6
 8025a2a:	e7b8      	b.n	802599e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>

08025a2c <_ZSt17__throw_bad_allocv>:
 8025a2c:	b508      	push	{r3, lr}
 8025a2e:	f002 ff5a 	bl	80288e6 <abort>

08025a32 <_ZSt28__throw_bad_array_new_lengthv>:
 8025a32:	b508      	push	{r3, lr}
 8025a34:	f002 ff57 	bl	80288e6 <abort>

08025a38 <_ZSt20__throw_length_errorPKc>:
 8025a38:	b508      	push	{r3, lr}
 8025a3a:	f002 ff54 	bl	80288e6 <abort>
	...

08025a40 <_ZSt15get_new_handlerv>:
 8025a40:	4b01      	ldr	r3, [pc, #4]	; (8025a48 <_ZSt15get_new_handlerv+0x8>)
 8025a42:	e8d3 0faf 	lda	r0, [r3]
 8025a46:	4770      	bx	lr
 8025a48:	20005d28 	.word	0x20005d28

08025a4c <fmod>:
 8025a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025a4e:	ec57 6b10 	vmov	r6, r7, d0
 8025a52:	ec55 4b11 	vmov	r4, r5, d1
 8025a56:	ed2d 8b02 	vpush	{d8}
 8025a5a:	f000 fb6b 	bl	8026134 <__ieee754_fmod>
 8025a5e:	4622      	mov	r2, r4
 8025a60:	462b      	mov	r3, r5
 8025a62:	4630      	mov	r0, r6
 8025a64:	4639      	mov	r1, r7
 8025a66:	eeb0 8a40 	vmov.f32	s16, s0
 8025a6a:	eef0 8a60 	vmov.f32	s17, s1
 8025a6e:	f7db f84f 	bl	8000b10 <__aeabi_dcmpun>
 8025a72:	b990      	cbnz	r0, 8025a9a <fmod+0x4e>
 8025a74:	2200      	movs	r2, #0
 8025a76:	2300      	movs	r3, #0
 8025a78:	4620      	mov	r0, r4
 8025a7a:	4629      	mov	r1, r5
 8025a7c:	f7db f816 	bl	8000aac <__aeabi_dcmpeq>
 8025a80:	b158      	cbz	r0, 8025a9a <fmod+0x4e>
 8025a82:	f003 f897 	bl	8028bb4 <__errno>
 8025a86:	2321      	movs	r3, #33	; 0x21
 8025a88:	2200      	movs	r2, #0
 8025a8a:	6003      	str	r3, [r0, #0]
 8025a8c:	2300      	movs	r3, #0
 8025a8e:	4610      	mov	r0, r2
 8025a90:	4619      	mov	r1, r3
 8025a92:	f7da fecd 	bl	8000830 <__aeabi_ddiv>
 8025a96:	ec41 0b18 	vmov	d8, r0, r1
 8025a9a:	eeb0 0a48 	vmov.f32	s0, s16
 8025a9e:	eef0 0a68 	vmov.f32	s1, s17
 8025aa2:	ecbd 8b02 	vpop	{d8}
 8025aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08025aa8 <pow>:
 8025aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025aaa:	ec55 4b11 	vmov	r4, r5, d1
 8025aae:	ed2d 8b02 	vpush	{d8}
 8025ab2:	eeb0 8a40 	vmov.f32	s16, s0
 8025ab6:	eef0 8a60 	vmov.f32	s17, s1
 8025aba:	f000 fc49 	bl	8026350 <__ieee754_pow>
 8025abe:	4622      	mov	r2, r4
 8025ac0:	462b      	mov	r3, r5
 8025ac2:	4620      	mov	r0, r4
 8025ac4:	4629      	mov	r1, r5
 8025ac6:	ec57 6b10 	vmov	r6, r7, d0
 8025aca:	f7db f821 	bl	8000b10 <__aeabi_dcmpun>
 8025ace:	2800      	cmp	r0, #0
 8025ad0:	d13b      	bne.n	8025b4a <pow+0xa2>
 8025ad2:	2200      	movs	r2, #0
 8025ad4:	2300      	movs	r3, #0
 8025ad6:	ec51 0b18 	vmov	r0, r1, d8
 8025ada:	f7da ffe7 	bl	8000aac <__aeabi_dcmpeq>
 8025ade:	b1b8      	cbz	r0, 8025b10 <pow+0x68>
 8025ae0:	2200      	movs	r2, #0
 8025ae2:	2300      	movs	r3, #0
 8025ae4:	4620      	mov	r0, r4
 8025ae6:	4629      	mov	r1, r5
 8025ae8:	f7da ffe0 	bl	8000aac <__aeabi_dcmpeq>
 8025aec:	2800      	cmp	r0, #0
 8025aee:	d146      	bne.n	8025b7e <pow+0xd6>
 8025af0:	ec45 4b10 	vmov	d0, r4, r5
 8025af4:	f000 f908 	bl	8025d08 <finite>
 8025af8:	b338      	cbz	r0, 8025b4a <pow+0xa2>
 8025afa:	2200      	movs	r2, #0
 8025afc:	2300      	movs	r3, #0
 8025afe:	4620      	mov	r0, r4
 8025b00:	4629      	mov	r1, r5
 8025b02:	f7da ffdd 	bl	8000ac0 <__aeabi_dcmplt>
 8025b06:	b300      	cbz	r0, 8025b4a <pow+0xa2>
 8025b08:	f003 f854 	bl	8028bb4 <__errno>
 8025b0c:	2322      	movs	r3, #34	; 0x22
 8025b0e:	e01b      	b.n	8025b48 <pow+0xa0>
 8025b10:	ec47 6b10 	vmov	d0, r6, r7
 8025b14:	f000 f8f8 	bl	8025d08 <finite>
 8025b18:	b9e0      	cbnz	r0, 8025b54 <pow+0xac>
 8025b1a:	eeb0 0a48 	vmov.f32	s0, s16
 8025b1e:	eef0 0a68 	vmov.f32	s1, s17
 8025b22:	f000 f8f1 	bl	8025d08 <finite>
 8025b26:	b1a8      	cbz	r0, 8025b54 <pow+0xac>
 8025b28:	ec45 4b10 	vmov	d0, r4, r5
 8025b2c:	f000 f8ec 	bl	8025d08 <finite>
 8025b30:	b180      	cbz	r0, 8025b54 <pow+0xac>
 8025b32:	4632      	mov	r2, r6
 8025b34:	463b      	mov	r3, r7
 8025b36:	4630      	mov	r0, r6
 8025b38:	4639      	mov	r1, r7
 8025b3a:	f7da ffe9 	bl	8000b10 <__aeabi_dcmpun>
 8025b3e:	2800      	cmp	r0, #0
 8025b40:	d0e2      	beq.n	8025b08 <pow+0x60>
 8025b42:	f003 f837 	bl	8028bb4 <__errno>
 8025b46:	2321      	movs	r3, #33	; 0x21
 8025b48:	6003      	str	r3, [r0, #0]
 8025b4a:	ecbd 8b02 	vpop	{d8}
 8025b4e:	ec47 6b10 	vmov	d0, r6, r7
 8025b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025b54:	2200      	movs	r2, #0
 8025b56:	2300      	movs	r3, #0
 8025b58:	4630      	mov	r0, r6
 8025b5a:	4639      	mov	r1, r7
 8025b5c:	f7da ffa6 	bl	8000aac <__aeabi_dcmpeq>
 8025b60:	2800      	cmp	r0, #0
 8025b62:	d0f2      	beq.n	8025b4a <pow+0xa2>
 8025b64:	eeb0 0a48 	vmov.f32	s0, s16
 8025b68:	eef0 0a68 	vmov.f32	s1, s17
 8025b6c:	f000 f8cc 	bl	8025d08 <finite>
 8025b70:	2800      	cmp	r0, #0
 8025b72:	d0ea      	beq.n	8025b4a <pow+0xa2>
 8025b74:	ec45 4b10 	vmov	d0, r4, r5
 8025b78:	f000 f8c6 	bl	8025d08 <finite>
 8025b7c:	e7c3      	b.n	8025b06 <pow+0x5e>
 8025b7e:	2600      	movs	r6, #0
 8025b80:	4f00      	ldr	r7, [pc, #0]	; (8025b84 <pow+0xdc>)
 8025b82:	e7e2      	b.n	8025b4a <pow+0xa2>
 8025b84:	3ff00000 	.word	0x3ff00000

08025b88 <tan>:
 8025b88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025b8a:	ec53 2b10 	vmov	r2, r3, d0
 8025b8e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8025b92:	4815      	ldr	r0, [pc, #84]	; (8025be8 <tan+0x60>)
 8025b94:	4281      	cmp	r1, r0
 8025b96:	dc07      	bgt.n	8025ba8 <tan+0x20>
 8025b98:	2001      	movs	r0, #1
 8025b9a:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8025be0 <tan+0x58>
 8025b9e:	b005      	add	sp, #20
 8025ba0:	f85d eb04 	ldr.w	lr, [sp], #4
 8025ba4:	f000 b8bc 	b.w	8025d20 <__kernel_tan>
 8025ba8:	4810      	ldr	r0, [pc, #64]	; (8025bec <tan+0x64>)
 8025baa:	4281      	cmp	r1, r0
 8025bac:	dd09      	ble.n	8025bc2 <tan+0x3a>
 8025bae:	ee10 0a10 	vmov	r0, s0
 8025bb2:	4619      	mov	r1, r3
 8025bb4:	f7da fb5a 	bl	800026c <__aeabi_dsub>
 8025bb8:	ec41 0b10 	vmov	d0, r0, r1
 8025bbc:	b005      	add	sp, #20
 8025bbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8025bc2:	4668      	mov	r0, sp
 8025bc4:	f001 f8f4 	bl	8026db0 <__ieee754_rem_pio2>
 8025bc8:	0040      	lsls	r0, r0, #1
 8025bca:	f000 0002 	and.w	r0, r0, #2
 8025bce:	ed9d 1b02 	vldr	d1, [sp, #8]
 8025bd2:	ed9d 0b00 	vldr	d0, [sp]
 8025bd6:	f1c0 0001 	rsb	r0, r0, #1
 8025bda:	f000 f8a1 	bl	8025d20 <__kernel_tan>
 8025bde:	e7ed      	b.n	8025bbc <tan+0x34>
	...
 8025be8:	3fe921fb 	.word	0x3fe921fb
 8025bec:	7fefffff 	.word	0x7fefffff

08025bf0 <atan2f>:
 8025bf0:	f001 bb94 	b.w	802731c <__ieee754_atan2f>

08025bf4 <cosf>:
 8025bf4:	ee10 3a10 	vmov	r3, s0
 8025bf8:	b507      	push	{r0, r1, r2, lr}
 8025bfa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025bfe:	4a1d      	ldr	r2, [pc, #116]	; (8025c74 <cosf+0x80>)
 8025c00:	4293      	cmp	r3, r2
 8025c02:	dc06      	bgt.n	8025c12 <cosf+0x1e>
 8025c04:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8025c78 <cosf+0x84>
 8025c08:	b003      	add	sp, #12
 8025c0a:	f85d eb04 	ldr.w	lr, [sp], #4
 8025c0e:	f001 badf 	b.w	80271d0 <__kernel_cosf>
 8025c12:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8025c16:	db04      	blt.n	8025c22 <cosf+0x2e>
 8025c18:	ee30 0a40 	vsub.f32	s0, s0, s0
 8025c1c:	b003      	add	sp, #12
 8025c1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8025c22:	4668      	mov	r0, sp
 8025c24:	f001 fc18 	bl	8027458 <__ieee754_rem_pio2f>
 8025c28:	f000 0003 	and.w	r0, r0, #3
 8025c2c:	2801      	cmp	r0, #1
 8025c2e:	d009      	beq.n	8025c44 <cosf+0x50>
 8025c30:	2802      	cmp	r0, #2
 8025c32:	d010      	beq.n	8025c56 <cosf+0x62>
 8025c34:	b9b0      	cbnz	r0, 8025c64 <cosf+0x70>
 8025c36:	eddd 0a01 	vldr	s1, [sp, #4]
 8025c3a:	ed9d 0a00 	vldr	s0, [sp]
 8025c3e:	f001 fac7 	bl	80271d0 <__kernel_cosf>
 8025c42:	e7eb      	b.n	8025c1c <cosf+0x28>
 8025c44:	eddd 0a01 	vldr	s1, [sp, #4]
 8025c48:	ed9d 0a00 	vldr	s0, [sp]
 8025c4c:	f001 fb1e 	bl	802728c <__kernel_sinf>
 8025c50:	eeb1 0a40 	vneg.f32	s0, s0
 8025c54:	e7e2      	b.n	8025c1c <cosf+0x28>
 8025c56:	eddd 0a01 	vldr	s1, [sp, #4]
 8025c5a:	ed9d 0a00 	vldr	s0, [sp]
 8025c5e:	f001 fab7 	bl	80271d0 <__kernel_cosf>
 8025c62:	e7f5      	b.n	8025c50 <cosf+0x5c>
 8025c64:	2001      	movs	r0, #1
 8025c66:	eddd 0a01 	vldr	s1, [sp, #4]
 8025c6a:	ed9d 0a00 	vldr	s0, [sp]
 8025c6e:	f001 fb0d 	bl	802728c <__kernel_sinf>
 8025c72:	e7d3      	b.n	8025c1c <cosf+0x28>
 8025c74:	3f490fd8 	.word	0x3f490fd8
 8025c78:	00000000 	.word	0x00000000

08025c7c <sinf>:
 8025c7c:	ee10 3a10 	vmov	r3, s0
 8025c80:	b507      	push	{r0, r1, r2, lr}
 8025c82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025c86:	4a1e      	ldr	r2, [pc, #120]	; (8025d00 <sinf+0x84>)
 8025c88:	4293      	cmp	r3, r2
 8025c8a:	dc07      	bgt.n	8025c9c <sinf+0x20>
 8025c8c:	2000      	movs	r0, #0
 8025c8e:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8025d04 <sinf+0x88>
 8025c92:	b003      	add	sp, #12
 8025c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8025c98:	f001 baf8 	b.w	802728c <__kernel_sinf>
 8025c9c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8025ca0:	db04      	blt.n	8025cac <sinf+0x30>
 8025ca2:	ee30 0a40 	vsub.f32	s0, s0, s0
 8025ca6:	b003      	add	sp, #12
 8025ca8:	f85d fb04 	ldr.w	pc, [sp], #4
 8025cac:	4668      	mov	r0, sp
 8025cae:	f001 fbd3 	bl	8027458 <__ieee754_rem_pio2f>
 8025cb2:	f000 0003 	and.w	r0, r0, #3
 8025cb6:	2801      	cmp	r0, #1
 8025cb8:	d00a      	beq.n	8025cd0 <sinf+0x54>
 8025cba:	2802      	cmp	r0, #2
 8025cbc:	d00f      	beq.n	8025cde <sinf+0x62>
 8025cbe:	b9c0      	cbnz	r0, 8025cf2 <sinf+0x76>
 8025cc0:	2001      	movs	r0, #1
 8025cc2:	eddd 0a01 	vldr	s1, [sp, #4]
 8025cc6:	ed9d 0a00 	vldr	s0, [sp]
 8025cca:	f001 fadf 	bl	802728c <__kernel_sinf>
 8025cce:	e7ea      	b.n	8025ca6 <sinf+0x2a>
 8025cd0:	eddd 0a01 	vldr	s1, [sp, #4]
 8025cd4:	ed9d 0a00 	vldr	s0, [sp]
 8025cd8:	f001 fa7a 	bl	80271d0 <__kernel_cosf>
 8025cdc:	e7e3      	b.n	8025ca6 <sinf+0x2a>
 8025cde:	2001      	movs	r0, #1
 8025ce0:	eddd 0a01 	vldr	s1, [sp, #4]
 8025ce4:	ed9d 0a00 	vldr	s0, [sp]
 8025ce8:	f001 fad0 	bl	802728c <__kernel_sinf>
 8025cec:	eeb1 0a40 	vneg.f32	s0, s0
 8025cf0:	e7d9      	b.n	8025ca6 <sinf+0x2a>
 8025cf2:	eddd 0a01 	vldr	s1, [sp, #4]
 8025cf6:	ed9d 0a00 	vldr	s0, [sp]
 8025cfa:	f001 fa69 	bl	80271d0 <__kernel_cosf>
 8025cfe:	e7f5      	b.n	8025cec <sinf+0x70>
 8025d00:	3f490fd8 	.word	0x3f490fd8
 8025d04:	00000000 	.word	0x00000000

08025d08 <finite>:
 8025d08:	b082      	sub	sp, #8
 8025d0a:	ed8d 0b00 	vstr	d0, [sp]
 8025d0e:	9801      	ldr	r0, [sp, #4]
 8025d10:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8025d14:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8025d18:	0fc0      	lsrs	r0, r0, #31
 8025d1a:	b002      	add	sp, #8
 8025d1c:	4770      	bx	lr
	...

08025d20 <__kernel_tan>:
 8025d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d24:	ec5b ab10 	vmov	sl, fp, d0
 8025d28:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8025d2c:	4be0      	ldr	r3, [pc, #896]	; (80260b0 <__kernel_tan+0x390>)
 8025d2e:	4606      	mov	r6, r0
 8025d30:	429f      	cmp	r7, r3
 8025d32:	ed2d 8b06 	vpush	{d8-d10}
 8025d36:	b083      	sub	sp, #12
 8025d38:	ec59 8b11 	vmov	r8, r9, d1
 8025d3c:	f8cd b000 	str.w	fp, [sp]
 8025d40:	dc61      	bgt.n	8025e06 <__kernel_tan+0xe6>
 8025d42:	ee10 0a10 	vmov	r0, s0
 8025d46:	4659      	mov	r1, fp
 8025d48:	f7da fef8 	bl	8000b3c <__aeabi_d2iz>
 8025d4c:	4605      	mov	r5, r0
 8025d4e:	2800      	cmp	r0, #0
 8025d50:	f040 8083 	bne.w	8025e5a <__kernel_tan+0x13a>
 8025d54:	1c73      	adds	r3, r6, #1
 8025d56:	4652      	mov	r2, sl
 8025d58:	4313      	orrs	r3, r2
 8025d5a:	433b      	orrs	r3, r7
 8025d5c:	d112      	bne.n	8025d84 <__kernel_tan+0x64>
 8025d5e:	ec4b ab10 	vmov	d0, sl, fp
 8025d62:	f001 fa2b 	bl	80271bc <fabs>
 8025d66:	2000      	movs	r0, #0
 8025d68:	49d2      	ldr	r1, [pc, #840]	; (80260b4 <__kernel_tan+0x394>)
 8025d6a:	ec53 2b10 	vmov	r2, r3, d0
 8025d6e:	f7da fd5f 	bl	8000830 <__aeabi_ddiv>
 8025d72:	4682      	mov	sl, r0
 8025d74:	468b      	mov	fp, r1
 8025d76:	ec4b ab10 	vmov	d0, sl, fp
 8025d7a:	b003      	add	sp, #12
 8025d7c:	ecbd 8b06 	vpop	{d8-d10}
 8025d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025d84:	2e01      	cmp	r6, #1
 8025d86:	d0f6      	beq.n	8025d76 <__kernel_tan+0x56>
 8025d88:	4642      	mov	r2, r8
 8025d8a:	464b      	mov	r3, r9
 8025d8c:	4650      	mov	r0, sl
 8025d8e:	4659      	mov	r1, fp
 8025d90:	f7da fa6e 	bl	8000270 <__adddf3>
 8025d94:	4602      	mov	r2, r0
 8025d96:	460b      	mov	r3, r1
 8025d98:	460f      	mov	r7, r1
 8025d9a:	2000      	movs	r0, #0
 8025d9c:	49c6      	ldr	r1, [pc, #792]	; (80260b8 <__kernel_tan+0x398>)
 8025d9e:	f7da fd47 	bl	8000830 <__aeabi_ddiv>
 8025da2:	462e      	mov	r6, r5
 8025da4:	462c      	mov	r4, r5
 8025da6:	e9cd 0100 	strd	r0, r1, [sp]
 8025daa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8025dae:	4630      	mov	r0, r6
 8025db0:	4652      	mov	r2, sl
 8025db2:	461d      	mov	r5, r3
 8025db4:	4639      	mov	r1, r7
 8025db6:	465b      	mov	r3, fp
 8025db8:	f7da fa58 	bl	800026c <__aeabi_dsub>
 8025dbc:	4602      	mov	r2, r0
 8025dbe:	460b      	mov	r3, r1
 8025dc0:	4640      	mov	r0, r8
 8025dc2:	4649      	mov	r1, r9
 8025dc4:	f7da fa52 	bl	800026c <__aeabi_dsub>
 8025dc8:	4632      	mov	r2, r6
 8025dca:	462b      	mov	r3, r5
 8025dcc:	f7da fc06 	bl	80005dc <__aeabi_dmul>
 8025dd0:	4632      	mov	r2, r6
 8025dd2:	4680      	mov	r8, r0
 8025dd4:	4689      	mov	r9, r1
 8025dd6:	462b      	mov	r3, r5
 8025dd8:	4630      	mov	r0, r6
 8025dda:	4639      	mov	r1, r7
 8025ddc:	f7da fbfe 	bl	80005dc <__aeabi_dmul>
 8025de0:	2200      	movs	r2, #0
 8025de2:	4bb4      	ldr	r3, [pc, #720]	; (80260b4 <__kernel_tan+0x394>)
 8025de4:	f7da fa44 	bl	8000270 <__adddf3>
 8025de8:	4602      	mov	r2, r0
 8025dea:	460b      	mov	r3, r1
 8025dec:	4640      	mov	r0, r8
 8025dee:	4649      	mov	r1, r9
 8025df0:	f7da fa3e 	bl	8000270 <__adddf3>
 8025df4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8025df8:	f7da fbf0 	bl	80005dc <__aeabi_dmul>
 8025dfc:	4622      	mov	r2, r4
 8025dfe:	462b      	mov	r3, r5
 8025e00:	f7da fa36 	bl	8000270 <__adddf3>
 8025e04:	e7b5      	b.n	8025d72 <__kernel_tan+0x52>
 8025e06:	4bad      	ldr	r3, [pc, #692]	; (80260bc <__kernel_tan+0x39c>)
 8025e08:	429f      	cmp	r7, r3
 8025e0a:	dd26      	ble.n	8025e5a <__kernel_tan+0x13a>
 8025e0c:	9b00      	ldr	r3, [sp, #0]
 8025e0e:	2b00      	cmp	r3, #0
 8025e10:	da09      	bge.n	8025e26 <__kernel_tan+0x106>
 8025e12:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8025e16:	ee10 aa10 	vmov	sl, s0
 8025e1a:	ee11 8a10 	vmov	r8, s2
 8025e1e:	469b      	mov	fp, r3
 8025e20:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8025e24:	4699      	mov	r9, r3
 8025e26:	4652      	mov	r2, sl
 8025e28:	465b      	mov	r3, fp
 8025e2a:	a183      	add	r1, pc, #524	; (adr r1, 8026038 <__kernel_tan+0x318>)
 8025e2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025e30:	f7da fa1c 	bl	800026c <__aeabi_dsub>
 8025e34:	4604      	mov	r4, r0
 8025e36:	460d      	mov	r5, r1
 8025e38:	4642      	mov	r2, r8
 8025e3a:	464b      	mov	r3, r9
 8025e3c:	f04f 0800 	mov.w	r8, #0
 8025e40:	f04f 0900 	mov.w	r9, #0
 8025e44:	a17e      	add	r1, pc, #504	; (adr r1, 8026040 <__kernel_tan+0x320>)
 8025e46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025e4a:	f7da fa0f 	bl	800026c <__aeabi_dsub>
 8025e4e:	4622      	mov	r2, r4
 8025e50:	462b      	mov	r3, r5
 8025e52:	f7da fa0d 	bl	8000270 <__adddf3>
 8025e56:	4682      	mov	sl, r0
 8025e58:	468b      	mov	fp, r1
 8025e5a:	4652      	mov	r2, sl
 8025e5c:	465b      	mov	r3, fp
 8025e5e:	4650      	mov	r0, sl
 8025e60:	4659      	mov	r1, fp
 8025e62:	f7da fbbb 	bl	80005dc <__aeabi_dmul>
 8025e66:	4602      	mov	r2, r0
 8025e68:	460b      	mov	r3, r1
 8025e6a:	ec43 2b18 	vmov	d8, r2, r3
 8025e6e:	f7da fbb5 	bl	80005dc <__aeabi_dmul>
 8025e72:	4604      	mov	r4, r0
 8025e74:	460d      	mov	r5, r1
 8025e76:	4650      	mov	r0, sl
 8025e78:	4659      	mov	r1, fp
 8025e7a:	ec53 2b18 	vmov	r2, r3, d8
 8025e7e:	f7da fbad 	bl	80005dc <__aeabi_dmul>
 8025e82:	a371      	add	r3, pc, #452	; (adr r3, 8026048 <__kernel_tan+0x328>)
 8025e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025e88:	ec41 0b19 	vmov	d9, r0, r1
 8025e8c:	4620      	mov	r0, r4
 8025e8e:	4629      	mov	r1, r5
 8025e90:	f7da fba4 	bl	80005dc <__aeabi_dmul>
 8025e94:	a36e      	add	r3, pc, #440	; (adr r3, 8026050 <__kernel_tan+0x330>)
 8025e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025e9a:	f7da f9e9 	bl	8000270 <__adddf3>
 8025e9e:	4622      	mov	r2, r4
 8025ea0:	462b      	mov	r3, r5
 8025ea2:	f7da fb9b 	bl	80005dc <__aeabi_dmul>
 8025ea6:	a36c      	add	r3, pc, #432	; (adr r3, 8026058 <__kernel_tan+0x338>)
 8025ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025eac:	f7da f9e0 	bl	8000270 <__adddf3>
 8025eb0:	4622      	mov	r2, r4
 8025eb2:	462b      	mov	r3, r5
 8025eb4:	f7da fb92 	bl	80005dc <__aeabi_dmul>
 8025eb8:	a369      	add	r3, pc, #420	; (adr r3, 8026060 <__kernel_tan+0x340>)
 8025eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025ebe:	f7da f9d7 	bl	8000270 <__adddf3>
 8025ec2:	4622      	mov	r2, r4
 8025ec4:	462b      	mov	r3, r5
 8025ec6:	f7da fb89 	bl	80005dc <__aeabi_dmul>
 8025eca:	a367      	add	r3, pc, #412	; (adr r3, 8026068 <__kernel_tan+0x348>)
 8025ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025ed0:	f7da f9ce 	bl	8000270 <__adddf3>
 8025ed4:	4622      	mov	r2, r4
 8025ed6:	462b      	mov	r3, r5
 8025ed8:	f7da fb80 	bl	80005dc <__aeabi_dmul>
 8025edc:	a364      	add	r3, pc, #400	; (adr r3, 8026070 <__kernel_tan+0x350>)
 8025ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025ee2:	f7da f9c5 	bl	8000270 <__adddf3>
 8025ee6:	ec53 2b18 	vmov	r2, r3, d8
 8025eea:	f7da fb77 	bl	80005dc <__aeabi_dmul>
 8025eee:	a362      	add	r3, pc, #392	; (adr r3, 8026078 <__kernel_tan+0x358>)
 8025ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025ef4:	ec41 0b1a 	vmov	d10, r0, r1
 8025ef8:	4620      	mov	r0, r4
 8025efa:	4629      	mov	r1, r5
 8025efc:	f7da fb6e 	bl	80005dc <__aeabi_dmul>
 8025f00:	a35f      	add	r3, pc, #380	; (adr r3, 8026080 <__kernel_tan+0x360>)
 8025f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f06:	f7da f9b3 	bl	8000270 <__adddf3>
 8025f0a:	4622      	mov	r2, r4
 8025f0c:	462b      	mov	r3, r5
 8025f0e:	f7da fb65 	bl	80005dc <__aeabi_dmul>
 8025f12:	a35d      	add	r3, pc, #372	; (adr r3, 8026088 <__kernel_tan+0x368>)
 8025f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f18:	f7da f9aa 	bl	8000270 <__adddf3>
 8025f1c:	4622      	mov	r2, r4
 8025f1e:	462b      	mov	r3, r5
 8025f20:	f7da fb5c 	bl	80005dc <__aeabi_dmul>
 8025f24:	a35a      	add	r3, pc, #360	; (adr r3, 8026090 <__kernel_tan+0x370>)
 8025f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f2a:	f7da f9a1 	bl	8000270 <__adddf3>
 8025f2e:	4622      	mov	r2, r4
 8025f30:	462b      	mov	r3, r5
 8025f32:	f7da fb53 	bl	80005dc <__aeabi_dmul>
 8025f36:	a358      	add	r3, pc, #352	; (adr r3, 8026098 <__kernel_tan+0x378>)
 8025f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f3c:	f7da f998 	bl	8000270 <__adddf3>
 8025f40:	4622      	mov	r2, r4
 8025f42:	462b      	mov	r3, r5
 8025f44:	f7da fb4a 	bl	80005dc <__aeabi_dmul>
 8025f48:	a355      	add	r3, pc, #340	; (adr r3, 80260a0 <__kernel_tan+0x380>)
 8025f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f4e:	f7da f98f 	bl	8000270 <__adddf3>
 8025f52:	4602      	mov	r2, r0
 8025f54:	460b      	mov	r3, r1
 8025f56:	ec51 0b1a 	vmov	r0, r1, d10
 8025f5a:	f7da f989 	bl	8000270 <__adddf3>
 8025f5e:	ec53 2b19 	vmov	r2, r3, d9
 8025f62:	f7da fb3b 	bl	80005dc <__aeabi_dmul>
 8025f66:	4642      	mov	r2, r8
 8025f68:	464b      	mov	r3, r9
 8025f6a:	f7da f981 	bl	8000270 <__adddf3>
 8025f6e:	ec53 2b18 	vmov	r2, r3, d8
 8025f72:	f7da fb33 	bl	80005dc <__aeabi_dmul>
 8025f76:	4642      	mov	r2, r8
 8025f78:	464b      	mov	r3, r9
 8025f7a:	f7da f979 	bl	8000270 <__adddf3>
 8025f7e:	4604      	mov	r4, r0
 8025f80:	460d      	mov	r5, r1
 8025f82:	a349      	add	r3, pc, #292	; (adr r3, 80260a8 <__kernel_tan+0x388>)
 8025f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f88:	ec51 0b19 	vmov	r0, r1, d9
 8025f8c:	f7da fb26 	bl	80005dc <__aeabi_dmul>
 8025f90:	4622      	mov	r2, r4
 8025f92:	462b      	mov	r3, r5
 8025f94:	f7da f96c 	bl	8000270 <__adddf3>
 8025f98:	460b      	mov	r3, r1
 8025f9a:	4602      	mov	r2, r0
 8025f9c:	ec41 0b18 	vmov	d8, r0, r1
 8025fa0:	4650      	mov	r0, sl
 8025fa2:	4659      	mov	r1, fp
 8025fa4:	f7da f964 	bl	8000270 <__adddf3>
 8025fa8:	4b44      	ldr	r3, [pc, #272]	; (80260bc <__kernel_tan+0x39c>)
 8025faa:	4604      	mov	r4, r0
 8025fac:	460d      	mov	r5, r1
 8025fae:	429f      	cmp	r7, r3
 8025fb0:	f340 8086 	ble.w	80260c0 <__kernel_tan+0x3a0>
 8025fb4:	4630      	mov	r0, r6
 8025fb6:	f7da faa7 	bl	8000508 <__aeabi_i2d>
 8025fba:	4622      	mov	r2, r4
 8025fbc:	4680      	mov	r8, r0
 8025fbe:	4689      	mov	r9, r1
 8025fc0:	462b      	mov	r3, r5
 8025fc2:	4620      	mov	r0, r4
 8025fc4:	4629      	mov	r1, r5
 8025fc6:	f7da fb09 	bl	80005dc <__aeabi_dmul>
 8025fca:	4606      	mov	r6, r0
 8025fcc:	460f      	mov	r7, r1
 8025fce:	4642      	mov	r2, r8
 8025fd0:	464b      	mov	r3, r9
 8025fd2:	4620      	mov	r0, r4
 8025fd4:	4629      	mov	r1, r5
 8025fd6:	f7da f94b 	bl	8000270 <__adddf3>
 8025fda:	4602      	mov	r2, r0
 8025fdc:	460b      	mov	r3, r1
 8025fde:	4630      	mov	r0, r6
 8025fe0:	4639      	mov	r1, r7
 8025fe2:	f7da fc25 	bl	8000830 <__aeabi_ddiv>
 8025fe6:	ec53 2b18 	vmov	r2, r3, d8
 8025fea:	f7da f93f 	bl	800026c <__aeabi_dsub>
 8025fee:	4602      	mov	r2, r0
 8025ff0:	460b      	mov	r3, r1
 8025ff2:	4650      	mov	r0, sl
 8025ff4:	4659      	mov	r1, fp
 8025ff6:	f7da f939 	bl	800026c <__aeabi_dsub>
 8025ffa:	4602      	mov	r2, r0
 8025ffc:	460b      	mov	r3, r1
 8025ffe:	f7da f937 	bl	8000270 <__adddf3>
 8026002:	4602      	mov	r2, r0
 8026004:	460b      	mov	r3, r1
 8026006:	4640      	mov	r0, r8
 8026008:	4649      	mov	r1, r9
 802600a:	f7da f92f 	bl	800026c <__aeabi_dsub>
 802600e:	9b00      	ldr	r3, [sp, #0]
 8026010:	4604      	mov	r4, r0
 8026012:	460d      	mov	r5, r1
 8026014:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8026018:	f00a 0a02 	and.w	sl, sl, #2
 802601c:	f1ca 0001 	rsb	r0, sl, #1
 8026020:	f7da fa72 	bl	8000508 <__aeabi_i2d>
 8026024:	4602      	mov	r2, r0
 8026026:	460b      	mov	r3, r1
 8026028:	4620      	mov	r0, r4
 802602a:	4629      	mov	r1, r5
 802602c:	f7da fad6 	bl	80005dc <__aeabi_dmul>
 8026030:	e69f      	b.n	8025d72 <__kernel_tan+0x52>
 8026032:	bf00      	nop
 8026034:	f3af 8000 	nop.w
 8026038:	54442d18 	.word	0x54442d18
 802603c:	3fe921fb 	.word	0x3fe921fb
 8026040:	33145c07 	.word	0x33145c07
 8026044:	3c81a626 	.word	0x3c81a626
 8026048:	74bf7ad4 	.word	0x74bf7ad4
 802604c:	3efb2a70 	.word	0x3efb2a70
 8026050:	32f0a7e9 	.word	0x32f0a7e9
 8026054:	3f12b80f 	.word	0x3f12b80f
 8026058:	1a8d1068 	.word	0x1a8d1068
 802605c:	3f3026f7 	.word	0x3f3026f7
 8026060:	fee08315 	.word	0xfee08315
 8026064:	3f57dbc8 	.word	0x3f57dbc8
 8026068:	e96e8493 	.word	0xe96e8493
 802606c:	3f8226e3 	.word	0x3f8226e3
 8026070:	1bb341fe 	.word	0x1bb341fe
 8026074:	3faba1ba 	.word	0x3faba1ba
 8026078:	db605373 	.word	0xdb605373
 802607c:	bef375cb 	.word	0xbef375cb
 8026080:	a03792a6 	.word	0xa03792a6
 8026084:	3f147e88 	.word	0x3f147e88
 8026088:	f2f26501 	.word	0xf2f26501
 802608c:	3f4344d8 	.word	0x3f4344d8
 8026090:	c9560328 	.word	0xc9560328
 8026094:	3f6d6d22 	.word	0x3f6d6d22
 8026098:	8406d637 	.word	0x8406d637
 802609c:	3f9664f4 	.word	0x3f9664f4
 80260a0:	1110fe7a 	.word	0x1110fe7a
 80260a4:	3fc11111 	.word	0x3fc11111
 80260a8:	55555563 	.word	0x55555563
 80260ac:	3fd55555 	.word	0x3fd55555
 80260b0:	3e2fffff 	.word	0x3e2fffff
 80260b4:	3ff00000 	.word	0x3ff00000
 80260b8:	bff00000 	.word	0xbff00000
 80260bc:	3fe59427 	.word	0x3fe59427
 80260c0:	2e01      	cmp	r6, #1
 80260c2:	d02f      	beq.n	8026124 <__kernel_tan+0x404>
 80260c4:	2600      	movs	r6, #0
 80260c6:	460f      	mov	r7, r1
 80260c8:	4602      	mov	r2, r0
 80260ca:	460b      	mov	r3, r1
 80260cc:	4689      	mov	r9, r1
 80260ce:	2000      	movs	r0, #0
 80260d0:	4916      	ldr	r1, [pc, #88]	; (802612c <__kernel_tan+0x40c>)
 80260d2:	46b0      	mov	r8, r6
 80260d4:	f7da fbac 	bl	8000830 <__aeabi_ddiv>
 80260d8:	4652      	mov	r2, sl
 80260da:	465b      	mov	r3, fp
 80260dc:	e9cd 0100 	strd	r0, r1, [sp]
 80260e0:	e9dd 4500 	ldrd	r4, r5, [sp]
 80260e4:	4630      	mov	r0, r6
 80260e6:	4639      	mov	r1, r7
 80260e8:	f7da f8c0 	bl	800026c <__aeabi_dsub>
 80260ec:	4602      	mov	r2, r0
 80260ee:	460b      	mov	r3, r1
 80260f0:	4634      	mov	r4, r6
 80260f2:	ec51 0b18 	vmov	r0, r1, d8
 80260f6:	f7da f8b9 	bl	800026c <__aeabi_dsub>
 80260fa:	4632      	mov	r2, r6
 80260fc:	462b      	mov	r3, r5
 80260fe:	f7da fa6d 	bl	80005dc <__aeabi_dmul>
 8026102:	4642      	mov	r2, r8
 8026104:	4606      	mov	r6, r0
 8026106:	460f      	mov	r7, r1
 8026108:	462b      	mov	r3, r5
 802610a:	4640      	mov	r0, r8
 802610c:	4649      	mov	r1, r9
 802610e:	f7da fa65 	bl	80005dc <__aeabi_dmul>
 8026112:	2200      	movs	r2, #0
 8026114:	4b06      	ldr	r3, [pc, #24]	; (8026130 <__kernel_tan+0x410>)
 8026116:	f7da f8ab 	bl	8000270 <__adddf3>
 802611a:	4602      	mov	r2, r0
 802611c:	460b      	mov	r3, r1
 802611e:	4630      	mov	r0, r6
 8026120:	4639      	mov	r1, r7
 8026122:	e665      	b.n	8025df0 <__kernel_tan+0xd0>
 8026124:	4682      	mov	sl, r0
 8026126:	468b      	mov	fp, r1
 8026128:	e625      	b.n	8025d76 <__kernel_tan+0x56>
 802612a:	bf00      	nop
 802612c:	bff00000 	.word	0xbff00000
 8026130:	3ff00000 	.word	0x3ff00000

08026134 <__ieee754_fmod>:
 8026134:	ec53 2b11 	vmov	r2, r3, d1
 8026138:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 802613c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026140:	ea5c 0402 	orrs.w	r4, ip, r2
 8026144:	461e      	mov	r6, r3
 8026146:	ee11 7a10 	vmov	r7, s2
 802614a:	ee11 ea10 	vmov	lr, s2
 802614e:	ec51 0b10 	vmov	r0, r1, d0
 8026152:	d00c      	beq.n	802616e <__ieee754_fmod+0x3a>
 8026154:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8026158:	4c77      	ldr	r4, [pc, #476]	; (8026338 <__ieee754_fmod+0x204>)
 802615a:	4689      	mov	r9, r1
 802615c:	45a0      	cmp	r8, r4
 802615e:	dc06      	bgt.n	802616e <__ieee754_fmod+0x3a>
 8026160:	4254      	negs	r4, r2
 8026162:	4d76      	ldr	r5, [pc, #472]	; (802633c <__ieee754_fmod+0x208>)
 8026164:	4314      	orrs	r4, r2
 8026166:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 802616a:	42ac      	cmp	r4, r5
 802616c:	d909      	bls.n	8026182 <__ieee754_fmod+0x4e>
 802616e:	f7da fa35 	bl	80005dc <__aeabi_dmul>
 8026172:	4602      	mov	r2, r0
 8026174:	460b      	mov	r3, r1
 8026176:	f7da fb5b 	bl	8000830 <__aeabi_ddiv>
 802617a:	ec41 0b10 	vmov	d0, r0, r1
 802617e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026182:	45e0      	cmp	r8, ip
 8026184:	ee10 aa10 	vmov	sl, s0
 8026188:	ee10 4a10 	vmov	r4, s0
 802618c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8026190:	dc09      	bgt.n	80261a6 <__ieee754_fmod+0x72>
 8026192:	dbf2      	blt.n	802617a <__ieee754_fmod+0x46>
 8026194:	4290      	cmp	r0, r2
 8026196:	d3f0      	bcc.n	802617a <__ieee754_fmod+0x46>
 8026198:	d105      	bne.n	80261a6 <__ieee754_fmod+0x72>
 802619a:	4b69      	ldr	r3, [pc, #420]	; (8026340 <__ieee754_fmod+0x20c>)
 802619c:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 80261a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80261a4:	e7e9      	b.n	802617a <__ieee754_fmod+0x46>
 80261a6:	4a65      	ldr	r2, [pc, #404]	; (802633c <__ieee754_fmod+0x208>)
 80261a8:	ea19 0f02 	tst.w	r9, r2
 80261ac:	d148      	bne.n	8026240 <__ieee754_fmod+0x10c>
 80261ae:	f1b8 0f00 	cmp.w	r8, #0
 80261b2:	d13d      	bne.n	8026230 <__ieee754_fmod+0xfc>
 80261b4:	4653      	mov	r3, sl
 80261b6:	4963      	ldr	r1, [pc, #396]	; (8026344 <__ieee754_fmod+0x210>)
 80261b8:	2b00      	cmp	r3, #0
 80261ba:	dc36      	bgt.n	802622a <__ieee754_fmod+0xf6>
 80261bc:	4216      	tst	r6, r2
 80261be:	d14f      	bne.n	8026260 <__ieee754_fmod+0x12c>
 80261c0:	f1bc 0f00 	cmp.w	ip, #0
 80261c4:	d144      	bne.n	8026250 <__ieee754_fmod+0x11c>
 80261c6:	463b      	mov	r3, r7
 80261c8:	4a5e      	ldr	r2, [pc, #376]	; (8026344 <__ieee754_fmod+0x210>)
 80261ca:	2b00      	cmp	r3, #0
 80261cc:	dc3d      	bgt.n	802624a <__ieee754_fmod+0x116>
 80261ce:	485e      	ldr	r0, [pc, #376]	; (8026348 <__ieee754_fmod+0x214>)
 80261d0:	4281      	cmp	r1, r0
 80261d2:	db4a      	blt.n	802626a <__ieee754_fmod+0x136>
 80261d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80261d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80261dc:	485a      	ldr	r0, [pc, #360]	; (8026348 <__ieee754_fmod+0x214>)
 80261de:	4282      	cmp	r2, r0
 80261e0:	db57      	blt.n	8026292 <__ieee754_fmod+0x15e>
 80261e2:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80261e6:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 80261ea:	1a89      	subs	r1, r1, r2
 80261ec:	1b98      	subs	r0, r3, r6
 80261ee:	eba4 070e 	sub.w	r7, r4, lr
 80261f2:	2900      	cmp	r1, #0
 80261f4:	d162      	bne.n	80262bc <__ieee754_fmod+0x188>
 80261f6:	4574      	cmp	r4, lr
 80261f8:	bf38      	it	cc
 80261fa:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80261fe:	2800      	cmp	r0, #0
 8026200:	bfa4      	itt	ge
 8026202:	463c      	movge	r4, r7
 8026204:	4603      	movge	r3, r0
 8026206:	ea53 0104 	orrs.w	r1, r3, r4
 802620a:	d0c6      	beq.n	802619a <__ieee754_fmod+0x66>
 802620c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8026210:	db69      	blt.n	80262e6 <__ieee754_fmod+0x1b2>
 8026212:	494d      	ldr	r1, [pc, #308]	; (8026348 <__ieee754_fmod+0x214>)
 8026214:	428a      	cmp	r2, r1
 8026216:	db6c      	blt.n	80262f2 <__ieee754_fmod+0x1be>
 8026218:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802621c:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8026220:	4620      	mov	r0, r4
 8026222:	432b      	orrs	r3, r5
 8026224:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8026228:	e7a7      	b.n	802617a <__ieee754_fmod+0x46>
 802622a:	3901      	subs	r1, #1
 802622c:	005b      	lsls	r3, r3, #1
 802622e:	e7c3      	b.n	80261b8 <__ieee754_fmod+0x84>
 8026230:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8026234:	4944      	ldr	r1, [pc, #272]	; (8026348 <__ieee754_fmod+0x214>)
 8026236:	2b00      	cmp	r3, #0
 8026238:	ddc0      	ble.n	80261bc <__ieee754_fmod+0x88>
 802623a:	3901      	subs	r1, #1
 802623c:	005b      	lsls	r3, r3, #1
 802623e:	e7fa      	b.n	8026236 <__ieee754_fmod+0x102>
 8026240:	ea4f 5128 	mov.w	r1, r8, asr #20
 8026244:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8026248:	e7b8      	b.n	80261bc <__ieee754_fmod+0x88>
 802624a:	3a01      	subs	r2, #1
 802624c:	005b      	lsls	r3, r3, #1
 802624e:	e7bc      	b.n	80261ca <__ieee754_fmod+0x96>
 8026250:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8026254:	4a3c      	ldr	r2, [pc, #240]	; (8026348 <__ieee754_fmod+0x214>)
 8026256:	2b00      	cmp	r3, #0
 8026258:	ddb9      	ble.n	80261ce <__ieee754_fmod+0x9a>
 802625a:	3a01      	subs	r2, #1
 802625c:	005b      	lsls	r3, r3, #1
 802625e:	e7fa      	b.n	8026256 <__ieee754_fmod+0x122>
 8026260:	ea4f 522c 	mov.w	r2, ip, asr #20
 8026264:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8026268:	e7b1      	b.n	80261ce <__ieee754_fmod+0x9a>
 802626a:	1a40      	subs	r0, r0, r1
 802626c:	281f      	cmp	r0, #31
 802626e:	dc0a      	bgt.n	8026286 <__ieee754_fmod+0x152>
 8026270:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8026274:	fa08 f800 	lsl.w	r8, r8, r0
 8026278:	fa0a f400 	lsl.w	r4, sl, r0
 802627c:	fa2a f303 	lsr.w	r3, sl, r3
 8026280:	ea43 0308 	orr.w	r3, r3, r8
 8026284:	e7aa      	b.n	80261dc <__ieee754_fmod+0xa8>
 8026286:	4b31      	ldr	r3, [pc, #196]	; (802634c <__ieee754_fmod+0x218>)
 8026288:	2400      	movs	r4, #0
 802628a:	1a5b      	subs	r3, r3, r1
 802628c:	fa0a f303 	lsl.w	r3, sl, r3
 8026290:	e7a4      	b.n	80261dc <__ieee754_fmod+0xa8>
 8026292:	1a80      	subs	r0, r0, r2
 8026294:	281f      	cmp	r0, #31
 8026296:	dc0a      	bgt.n	80262ae <__ieee754_fmod+0x17a>
 8026298:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 802629c:	fa0c fc00 	lsl.w	ip, ip, r0
 80262a0:	fa07 fe00 	lsl.w	lr, r7, r0
 80262a4:	fa27 f606 	lsr.w	r6, r7, r6
 80262a8:	ea46 060c 	orr.w	r6, r6, ip
 80262ac:	e79d      	b.n	80261ea <__ieee754_fmod+0xb6>
 80262ae:	4e27      	ldr	r6, [pc, #156]	; (802634c <__ieee754_fmod+0x218>)
 80262b0:	f04f 0e00 	mov.w	lr, #0
 80262b4:	1ab6      	subs	r6, r6, r2
 80262b6:	fa07 f606 	lsl.w	r6, r7, r6
 80262ba:	e796      	b.n	80261ea <__ieee754_fmod+0xb6>
 80262bc:	4574      	cmp	r4, lr
 80262be:	bf38      	it	cc
 80262c0:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80262c4:	2800      	cmp	r0, #0
 80262c6:	da05      	bge.n	80262d4 <__ieee754_fmod+0x1a0>
 80262c8:	0fe0      	lsrs	r0, r4, #31
 80262ca:	0064      	lsls	r4, r4, #1
 80262cc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80262d0:	3901      	subs	r1, #1
 80262d2:	e78b      	b.n	80261ec <__ieee754_fmod+0xb8>
 80262d4:	ea50 0307 	orrs.w	r3, r0, r7
 80262d8:	f43f af5f 	beq.w	802619a <__ieee754_fmod+0x66>
 80262dc:	0ffb      	lsrs	r3, r7, #31
 80262de:	007c      	lsls	r4, r7, #1
 80262e0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80262e4:	e7f4      	b.n	80262d0 <__ieee754_fmod+0x19c>
 80262e6:	0fe1      	lsrs	r1, r4, #31
 80262e8:	3a01      	subs	r2, #1
 80262ea:	0064      	lsls	r4, r4, #1
 80262ec:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80262f0:	e78c      	b.n	802620c <__ieee754_fmod+0xd8>
 80262f2:	1a89      	subs	r1, r1, r2
 80262f4:	2914      	cmp	r1, #20
 80262f6:	dc0a      	bgt.n	802630e <__ieee754_fmod+0x1da>
 80262f8:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80262fc:	40cc      	lsrs	r4, r1
 80262fe:	fa03 f202 	lsl.w	r2, r3, r2
 8026302:	410b      	asrs	r3, r1
 8026304:	4322      	orrs	r2, r4
 8026306:	ea43 0105 	orr.w	r1, r3, r5
 802630a:	4610      	mov	r0, r2
 802630c:	e735      	b.n	802617a <__ieee754_fmod+0x46>
 802630e:	291f      	cmp	r1, #31
 8026310:	dc07      	bgt.n	8026322 <__ieee754_fmod+0x1ee>
 8026312:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8026316:	40cc      	lsrs	r4, r1
 8026318:	fa03 f202 	lsl.w	r2, r3, r2
 802631c:	4322      	orrs	r2, r4
 802631e:	462b      	mov	r3, r5
 8026320:	e7f1      	b.n	8026306 <__ieee754_fmod+0x1d2>
 8026322:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8026326:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 802632a:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 802632e:	32e2      	adds	r2, #226	; 0xe2
 8026330:	fa43 f202 	asr.w	r2, r3, r2
 8026334:	e7f3      	b.n	802631e <__ieee754_fmod+0x1ea>
 8026336:	bf00      	nop
 8026338:	7fefffff 	.word	0x7fefffff
 802633c:	7ff00000 	.word	0x7ff00000
 8026340:	08029930 	.word	0x08029930
 8026344:	fffffbed 	.word	0xfffffbed
 8026348:	fffffc02 	.word	0xfffffc02
 802634c:	fffffbe2 	.word	0xfffffbe2

08026350 <__ieee754_pow>:
 8026350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026354:	ed2d 8b06 	vpush	{d8-d10}
 8026358:	b089      	sub	sp, #36	; 0x24
 802635a:	ed8d 1b00 	vstr	d1, [sp]
 802635e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8026362:	ec57 6b10 	vmov	r6, r7, d0
 8026366:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 802636a:	ea58 0102 	orrs.w	r1, r8, r2
 802636e:	d115      	bne.n	802639c <__ieee754_pow+0x4c>
 8026370:	19b3      	adds	r3, r6, r6
 8026372:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8026376:	4152      	adcs	r2, r2
 8026378:	4299      	cmp	r1, r3
 802637a:	4b89      	ldr	r3, [pc, #548]	; (80265a0 <__ieee754_pow+0x250>)
 802637c:	4193      	sbcs	r3, r2
 802637e:	f080 84d2 	bcs.w	8026d26 <__ieee754_pow+0x9d6>
 8026382:	4630      	mov	r0, r6
 8026384:	4639      	mov	r1, r7
 8026386:	e9dd 2300 	ldrd	r2, r3, [sp]
 802638a:	f7d9 ff71 	bl	8000270 <__adddf3>
 802638e:	ec41 0b10 	vmov	d0, r0, r1
 8026392:	b009      	add	sp, #36	; 0x24
 8026394:	ecbd 8b06 	vpop	{d8-d10}
 8026398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802639c:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80263a0:	4b80      	ldr	r3, [pc, #512]	; (80265a4 <__ieee754_pow+0x254>)
 80263a2:	463d      	mov	r5, r7
 80263a4:	ee10 aa10 	vmov	sl, s0
 80263a8:	429c      	cmp	r4, r3
 80263aa:	dc06      	bgt.n	80263ba <__ieee754_pow+0x6a>
 80263ac:	d101      	bne.n	80263b2 <__ieee754_pow+0x62>
 80263ae:	2e00      	cmp	r6, #0
 80263b0:	d1e7      	bne.n	8026382 <__ieee754_pow+0x32>
 80263b2:	4598      	cmp	r8, r3
 80263b4:	dc01      	bgt.n	80263ba <__ieee754_pow+0x6a>
 80263b6:	d10f      	bne.n	80263d8 <__ieee754_pow+0x88>
 80263b8:	b172      	cbz	r2, 80263d8 <__ieee754_pow+0x88>
 80263ba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80263be:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80263c2:	ea55 050a 	orrs.w	r5, r5, sl
 80263c6:	d1dc      	bne.n	8026382 <__ieee754_pow+0x32>
 80263c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80263cc:	18db      	adds	r3, r3, r3
 80263ce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80263d2:	4152      	adcs	r2, r2
 80263d4:	429d      	cmp	r5, r3
 80263d6:	e7d0      	b.n	802637a <__ieee754_pow+0x2a>
 80263d8:	2d00      	cmp	r5, #0
 80263da:	da3b      	bge.n	8026454 <__ieee754_pow+0x104>
 80263dc:	4b72      	ldr	r3, [pc, #456]	; (80265a8 <__ieee754_pow+0x258>)
 80263de:	4598      	cmp	r8, r3
 80263e0:	dc51      	bgt.n	8026486 <__ieee754_pow+0x136>
 80263e2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80263e6:	4598      	cmp	r8, r3
 80263e8:	f340 84ac 	ble.w	8026d44 <__ieee754_pow+0x9f4>
 80263ec:	ea4f 5328 	mov.w	r3, r8, asr #20
 80263f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80263f4:	2b14      	cmp	r3, #20
 80263f6:	dd0f      	ble.n	8026418 <__ieee754_pow+0xc8>
 80263f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80263fc:	fa22 f103 	lsr.w	r1, r2, r3
 8026400:	fa01 f303 	lsl.w	r3, r1, r3
 8026404:	4293      	cmp	r3, r2
 8026406:	f040 849d 	bne.w	8026d44 <__ieee754_pow+0x9f4>
 802640a:	f001 0101 	and.w	r1, r1, #1
 802640e:	f1c1 0302 	rsb	r3, r1, #2
 8026412:	9304      	str	r3, [sp, #16]
 8026414:	b182      	cbz	r2, 8026438 <__ieee754_pow+0xe8>
 8026416:	e05f      	b.n	80264d8 <__ieee754_pow+0x188>
 8026418:	2a00      	cmp	r2, #0
 802641a:	d15b      	bne.n	80264d4 <__ieee754_pow+0x184>
 802641c:	f1c3 0314 	rsb	r3, r3, #20
 8026420:	fa48 f103 	asr.w	r1, r8, r3
 8026424:	fa01 f303 	lsl.w	r3, r1, r3
 8026428:	4543      	cmp	r3, r8
 802642a:	f040 8488 	bne.w	8026d3e <__ieee754_pow+0x9ee>
 802642e:	f001 0101 	and.w	r1, r1, #1
 8026432:	f1c1 0302 	rsb	r3, r1, #2
 8026436:	9304      	str	r3, [sp, #16]
 8026438:	4b5c      	ldr	r3, [pc, #368]	; (80265ac <__ieee754_pow+0x25c>)
 802643a:	4598      	cmp	r8, r3
 802643c:	d132      	bne.n	80264a4 <__ieee754_pow+0x154>
 802643e:	f1b9 0f00 	cmp.w	r9, #0
 8026442:	f280 8478 	bge.w	8026d36 <__ieee754_pow+0x9e6>
 8026446:	4632      	mov	r2, r6
 8026448:	463b      	mov	r3, r7
 802644a:	2000      	movs	r0, #0
 802644c:	4957      	ldr	r1, [pc, #348]	; (80265ac <__ieee754_pow+0x25c>)
 802644e:	f7da f9ef 	bl	8000830 <__aeabi_ddiv>
 8026452:	e79c      	b.n	802638e <__ieee754_pow+0x3e>
 8026454:	2300      	movs	r3, #0
 8026456:	9304      	str	r3, [sp, #16]
 8026458:	2a00      	cmp	r2, #0
 802645a:	d13d      	bne.n	80264d8 <__ieee754_pow+0x188>
 802645c:	4b51      	ldr	r3, [pc, #324]	; (80265a4 <__ieee754_pow+0x254>)
 802645e:	4598      	cmp	r8, r3
 8026460:	d1ea      	bne.n	8026438 <__ieee754_pow+0xe8>
 8026462:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8026466:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 802646a:	ea53 030a 	orrs.w	r3, r3, sl
 802646e:	f000 845a 	beq.w	8026d26 <__ieee754_pow+0x9d6>
 8026472:	4b4f      	ldr	r3, [pc, #316]	; (80265b0 <__ieee754_pow+0x260>)
 8026474:	429c      	cmp	r4, r3
 8026476:	dd08      	ble.n	802648a <__ieee754_pow+0x13a>
 8026478:	f1b9 0f00 	cmp.w	r9, #0
 802647c:	f2c0 8457 	blt.w	8026d2e <__ieee754_pow+0x9de>
 8026480:	e9dd 0100 	ldrd	r0, r1, [sp]
 8026484:	e783      	b.n	802638e <__ieee754_pow+0x3e>
 8026486:	2302      	movs	r3, #2
 8026488:	e7e5      	b.n	8026456 <__ieee754_pow+0x106>
 802648a:	f1b9 0f00 	cmp.w	r9, #0
 802648e:	f04f 0000 	mov.w	r0, #0
 8026492:	f04f 0100 	mov.w	r1, #0
 8026496:	f6bf af7a 	bge.w	802638e <__ieee754_pow+0x3e>
 802649a:	e9dd 0300 	ldrd	r0, r3, [sp]
 802649e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80264a2:	e774      	b.n	802638e <__ieee754_pow+0x3e>
 80264a4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80264a8:	d106      	bne.n	80264b8 <__ieee754_pow+0x168>
 80264aa:	4632      	mov	r2, r6
 80264ac:	463b      	mov	r3, r7
 80264ae:	4630      	mov	r0, r6
 80264b0:	4639      	mov	r1, r7
 80264b2:	f7da f893 	bl	80005dc <__aeabi_dmul>
 80264b6:	e76a      	b.n	802638e <__ieee754_pow+0x3e>
 80264b8:	4b3e      	ldr	r3, [pc, #248]	; (80265b4 <__ieee754_pow+0x264>)
 80264ba:	4599      	cmp	r9, r3
 80264bc:	d10c      	bne.n	80264d8 <__ieee754_pow+0x188>
 80264be:	2d00      	cmp	r5, #0
 80264c0:	db0a      	blt.n	80264d8 <__ieee754_pow+0x188>
 80264c2:	ec47 6b10 	vmov	d0, r6, r7
 80264c6:	b009      	add	sp, #36	; 0x24
 80264c8:	ecbd 8b06 	vpop	{d8-d10}
 80264cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80264d0:	f001 ba78 	b.w	80279c4 <__ieee754_sqrt>
 80264d4:	2300      	movs	r3, #0
 80264d6:	9304      	str	r3, [sp, #16]
 80264d8:	ec47 6b10 	vmov	d0, r6, r7
 80264dc:	f000 fe6e 	bl	80271bc <fabs>
 80264e0:	ec51 0b10 	vmov	r0, r1, d0
 80264e4:	f1ba 0f00 	cmp.w	sl, #0
 80264e8:	d129      	bne.n	802653e <__ieee754_pow+0x1ee>
 80264ea:	b124      	cbz	r4, 80264f6 <__ieee754_pow+0x1a6>
 80264ec:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80264f0:	4b2e      	ldr	r3, [pc, #184]	; (80265ac <__ieee754_pow+0x25c>)
 80264f2:	429a      	cmp	r2, r3
 80264f4:	d123      	bne.n	802653e <__ieee754_pow+0x1ee>
 80264f6:	f1b9 0f00 	cmp.w	r9, #0
 80264fa:	da05      	bge.n	8026508 <__ieee754_pow+0x1b8>
 80264fc:	4602      	mov	r2, r0
 80264fe:	460b      	mov	r3, r1
 8026500:	2000      	movs	r0, #0
 8026502:	492a      	ldr	r1, [pc, #168]	; (80265ac <__ieee754_pow+0x25c>)
 8026504:	f7da f994 	bl	8000830 <__aeabi_ddiv>
 8026508:	2d00      	cmp	r5, #0
 802650a:	f6bf af40 	bge.w	802638e <__ieee754_pow+0x3e>
 802650e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8026512:	9b04      	ldr	r3, [sp, #16]
 8026514:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8026518:	431c      	orrs	r4, r3
 802651a:	d108      	bne.n	802652e <__ieee754_pow+0x1de>
 802651c:	4602      	mov	r2, r0
 802651e:	460b      	mov	r3, r1
 8026520:	4610      	mov	r0, r2
 8026522:	4619      	mov	r1, r3
 8026524:	f7d9 fea2 	bl	800026c <__aeabi_dsub>
 8026528:	4602      	mov	r2, r0
 802652a:	460b      	mov	r3, r1
 802652c:	e78f      	b.n	802644e <__ieee754_pow+0xfe>
 802652e:	9b04      	ldr	r3, [sp, #16]
 8026530:	2b01      	cmp	r3, #1
 8026532:	f47f af2c 	bne.w	802638e <__ieee754_pow+0x3e>
 8026536:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802653a:	4619      	mov	r1, r3
 802653c:	e727      	b.n	802638e <__ieee754_pow+0x3e>
 802653e:	0feb      	lsrs	r3, r5, #31
 8026540:	3b01      	subs	r3, #1
 8026542:	9306      	str	r3, [sp, #24]
 8026544:	9a06      	ldr	r2, [sp, #24]
 8026546:	9b04      	ldr	r3, [sp, #16]
 8026548:	4313      	orrs	r3, r2
 802654a:	d102      	bne.n	8026552 <__ieee754_pow+0x202>
 802654c:	4632      	mov	r2, r6
 802654e:	463b      	mov	r3, r7
 8026550:	e7e6      	b.n	8026520 <__ieee754_pow+0x1d0>
 8026552:	4b19      	ldr	r3, [pc, #100]	; (80265b8 <__ieee754_pow+0x268>)
 8026554:	4598      	cmp	r8, r3
 8026556:	f340 80fb 	ble.w	8026750 <__ieee754_pow+0x400>
 802655a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 802655e:	4598      	cmp	r8, r3
 8026560:	4b13      	ldr	r3, [pc, #76]	; (80265b0 <__ieee754_pow+0x260>)
 8026562:	dd0c      	ble.n	802657e <__ieee754_pow+0x22e>
 8026564:	429c      	cmp	r4, r3
 8026566:	dc0f      	bgt.n	8026588 <__ieee754_pow+0x238>
 8026568:	f1b9 0f00 	cmp.w	r9, #0
 802656c:	da0f      	bge.n	802658e <__ieee754_pow+0x23e>
 802656e:	2000      	movs	r0, #0
 8026570:	b009      	add	sp, #36	; 0x24
 8026572:	ecbd 8b06 	vpop	{d8-d10}
 8026576:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802657a:	f001 ba1a 	b.w	80279b2 <__math_oflow>
 802657e:	429c      	cmp	r4, r3
 8026580:	dbf2      	blt.n	8026568 <__ieee754_pow+0x218>
 8026582:	4b0a      	ldr	r3, [pc, #40]	; (80265ac <__ieee754_pow+0x25c>)
 8026584:	429c      	cmp	r4, r3
 8026586:	dd19      	ble.n	80265bc <__ieee754_pow+0x26c>
 8026588:	f1b9 0f00 	cmp.w	r9, #0
 802658c:	dcef      	bgt.n	802656e <__ieee754_pow+0x21e>
 802658e:	2000      	movs	r0, #0
 8026590:	b009      	add	sp, #36	; 0x24
 8026592:	ecbd 8b06 	vpop	{d8-d10}
 8026596:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802659a:	f001 ba01 	b.w	80279a0 <__math_uflow>
 802659e:	bf00      	nop
 80265a0:	fff00000 	.word	0xfff00000
 80265a4:	7ff00000 	.word	0x7ff00000
 80265a8:	433fffff 	.word	0x433fffff
 80265ac:	3ff00000 	.word	0x3ff00000
 80265b0:	3fefffff 	.word	0x3fefffff
 80265b4:	3fe00000 	.word	0x3fe00000
 80265b8:	41e00000 	.word	0x41e00000
 80265bc:	2200      	movs	r2, #0
 80265be:	4b60      	ldr	r3, [pc, #384]	; (8026740 <__ieee754_pow+0x3f0>)
 80265c0:	f7d9 fe54 	bl	800026c <__aeabi_dsub>
 80265c4:	4604      	mov	r4, r0
 80265c6:	460d      	mov	r5, r1
 80265c8:	a353      	add	r3, pc, #332	; (adr r3, 8026718 <__ieee754_pow+0x3c8>)
 80265ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80265ce:	f7da f805 	bl	80005dc <__aeabi_dmul>
 80265d2:	4606      	mov	r6, r0
 80265d4:	460f      	mov	r7, r1
 80265d6:	4620      	mov	r0, r4
 80265d8:	4629      	mov	r1, r5
 80265da:	a351      	add	r3, pc, #324	; (adr r3, 8026720 <__ieee754_pow+0x3d0>)
 80265dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80265e0:	f7d9 fffc 	bl	80005dc <__aeabi_dmul>
 80265e4:	2200      	movs	r2, #0
 80265e6:	4682      	mov	sl, r0
 80265e8:	468b      	mov	fp, r1
 80265ea:	4b56      	ldr	r3, [pc, #344]	; (8026744 <__ieee754_pow+0x3f4>)
 80265ec:	4620      	mov	r0, r4
 80265ee:	4629      	mov	r1, r5
 80265f0:	f7d9 fff4 	bl	80005dc <__aeabi_dmul>
 80265f4:	4602      	mov	r2, r0
 80265f6:	460b      	mov	r3, r1
 80265f8:	a14b      	add	r1, pc, #300	; (adr r1, 8026728 <__ieee754_pow+0x3d8>)
 80265fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80265fe:	f7d9 fe35 	bl	800026c <__aeabi_dsub>
 8026602:	4622      	mov	r2, r4
 8026604:	462b      	mov	r3, r5
 8026606:	f7d9 ffe9 	bl	80005dc <__aeabi_dmul>
 802660a:	4602      	mov	r2, r0
 802660c:	460b      	mov	r3, r1
 802660e:	2000      	movs	r0, #0
 8026610:	494d      	ldr	r1, [pc, #308]	; (8026748 <__ieee754_pow+0x3f8>)
 8026612:	f7d9 fe2b 	bl	800026c <__aeabi_dsub>
 8026616:	4680      	mov	r8, r0
 8026618:	4689      	mov	r9, r1
 802661a:	4622      	mov	r2, r4
 802661c:	462b      	mov	r3, r5
 802661e:	4620      	mov	r0, r4
 8026620:	4629      	mov	r1, r5
 8026622:	f7d9 ffdb 	bl	80005dc <__aeabi_dmul>
 8026626:	4602      	mov	r2, r0
 8026628:	460b      	mov	r3, r1
 802662a:	4640      	mov	r0, r8
 802662c:	4649      	mov	r1, r9
 802662e:	f7d9 ffd5 	bl	80005dc <__aeabi_dmul>
 8026632:	a33f      	add	r3, pc, #252	; (adr r3, 8026730 <__ieee754_pow+0x3e0>)
 8026634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026638:	f7d9 ffd0 	bl	80005dc <__aeabi_dmul>
 802663c:	4602      	mov	r2, r0
 802663e:	460b      	mov	r3, r1
 8026640:	4650      	mov	r0, sl
 8026642:	4659      	mov	r1, fp
 8026644:	f7d9 fe12 	bl	800026c <__aeabi_dsub>
 8026648:	4602      	mov	r2, r0
 802664a:	460b      	mov	r3, r1
 802664c:	4680      	mov	r8, r0
 802664e:	4689      	mov	r9, r1
 8026650:	4630      	mov	r0, r6
 8026652:	4639      	mov	r1, r7
 8026654:	f7d9 fe0c 	bl	8000270 <__adddf3>
 8026658:	2000      	movs	r0, #0
 802665a:	4632      	mov	r2, r6
 802665c:	463b      	mov	r3, r7
 802665e:	4604      	mov	r4, r0
 8026660:	460d      	mov	r5, r1
 8026662:	f7d9 fe03 	bl	800026c <__aeabi_dsub>
 8026666:	4602      	mov	r2, r0
 8026668:	460b      	mov	r3, r1
 802666a:	4640      	mov	r0, r8
 802666c:	4649      	mov	r1, r9
 802666e:	f7d9 fdfd 	bl	800026c <__aeabi_dsub>
 8026672:	9b04      	ldr	r3, [sp, #16]
 8026674:	9a06      	ldr	r2, [sp, #24]
 8026676:	4682      	mov	sl, r0
 8026678:	3b01      	subs	r3, #1
 802667a:	468b      	mov	fp, r1
 802667c:	4313      	orrs	r3, r2
 802667e:	f040 81e7 	bne.w	8026a50 <__ieee754_pow+0x700>
 8026682:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8026738 <__ieee754_pow+0x3e8>
 8026686:	e9dd 6700 	ldrd	r6, r7, [sp]
 802668a:	2600      	movs	r6, #0
 802668c:	eeb0 8a47 	vmov.f32	s16, s14
 8026690:	eef0 8a67 	vmov.f32	s17, s15
 8026694:	463b      	mov	r3, r7
 8026696:	4632      	mov	r2, r6
 8026698:	e9dd 0100 	ldrd	r0, r1, [sp]
 802669c:	f7d9 fde6 	bl	800026c <__aeabi_dsub>
 80266a0:	4622      	mov	r2, r4
 80266a2:	462b      	mov	r3, r5
 80266a4:	f7d9 ff9a 	bl	80005dc <__aeabi_dmul>
 80266a8:	4680      	mov	r8, r0
 80266aa:	4689      	mov	r9, r1
 80266ac:	4650      	mov	r0, sl
 80266ae:	4659      	mov	r1, fp
 80266b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80266b4:	f7d9 ff92 	bl	80005dc <__aeabi_dmul>
 80266b8:	4602      	mov	r2, r0
 80266ba:	460b      	mov	r3, r1
 80266bc:	4640      	mov	r0, r8
 80266be:	4649      	mov	r1, r9
 80266c0:	f7d9 fdd6 	bl	8000270 <__adddf3>
 80266c4:	4680      	mov	r8, r0
 80266c6:	4689      	mov	r9, r1
 80266c8:	4632      	mov	r2, r6
 80266ca:	463b      	mov	r3, r7
 80266cc:	4620      	mov	r0, r4
 80266ce:	4629      	mov	r1, r5
 80266d0:	f7d9 ff84 	bl	80005dc <__aeabi_dmul>
 80266d4:	460b      	mov	r3, r1
 80266d6:	4604      	mov	r4, r0
 80266d8:	460d      	mov	r5, r1
 80266da:	4602      	mov	r2, r0
 80266dc:	4649      	mov	r1, r9
 80266de:	4640      	mov	r0, r8
 80266e0:	f7d9 fdc6 	bl	8000270 <__adddf3>
 80266e4:	4b19      	ldr	r3, [pc, #100]	; (802674c <__ieee754_pow+0x3fc>)
 80266e6:	4606      	mov	r6, r0
 80266e8:	460f      	mov	r7, r1
 80266ea:	4299      	cmp	r1, r3
 80266ec:	468b      	mov	fp, r1
 80266ee:	ec45 4b19 	vmov	d9, r4, r5
 80266f2:	f340 82f1 	ble.w	8026cd8 <__ieee754_pow+0x988>
 80266f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80266fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80266fe:	4303      	orrs	r3, r0
 8026700:	f000 81e4 	beq.w	8026acc <__ieee754_pow+0x77c>
 8026704:	2200      	movs	r2, #0
 8026706:	2300      	movs	r3, #0
 8026708:	ec51 0b18 	vmov	r0, r1, d8
 802670c:	f7da f9d8 	bl	8000ac0 <__aeabi_dcmplt>
 8026710:	3800      	subs	r0, #0
 8026712:	bf18      	it	ne
 8026714:	2001      	movne	r0, #1
 8026716:	e72b      	b.n	8026570 <__ieee754_pow+0x220>
 8026718:	60000000 	.word	0x60000000
 802671c:	3ff71547 	.word	0x3ff71547
 8026720:	f85ddf44 	.word	0xf85ddf44
 8026724:	3e54ae0b 	.word	0x3e54ae0b
 8026728:	55555555 	.word	0x55555555
 802672c:	3fd55555 	.word	0x3fd55555
 8026730:	652b82fe 	.word	0x652b82fe
 8026734:	3ff71547 	.word	0x3ff71547
 8026738:	00000000 	.word	0x00000000
 802673c:	bff00000 	.word	0xbff00000
 8026740:	3ff00000 	.word	0x3ff00000
 8026744:	3fd00000 	.word	0x3fd00000
 8026748:	3fe00000 	.word	0x3fe00000
 802674c:	408fffff 	.word	0x408fffff
 8026750:	4bd5      	ldr	r3, [pc, #852]	; (8026aa8 <__ieee754_pow+0x758>)
 8026752:	2200      	movs	r2, #0
 8026754:	402b      	ands	r3, r5
 8026756:	b92b      	cbnz	r3, 8026764 <__ieee754_pow+0x414>
 8026758:	4bd4      	ldr	r3, [pc, #848]	; (8026aac <__ieee754_pow+0x75c>)
 802675a:	f7d9 ff3f 	bl	80005dc <__aeabi_dmul>
 802675e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8026762:	460c      	mov	r4, r1
 8026764:	1523      	asrs	r3, r4, #20
 8026766:	f3c4 0413 	ubfx	r4, r4, #0, #20
 802676a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802676e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8026772:	4413      	add	r3, r2
 8026774:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8026778:	9305      	str	r3, [sp, #20]
 802677a:	4bcd      	ldr	r3, [pc, #820]	; (8026ab0 <__ieee754_pow+0x760>)
 802677c:	429c      	cmp	r4, r3
 802677e:	dd08      	ble.n	8026792 <__ieee754_pow+0x442>
 8026780:	4bcc      	ldr	r3, [pc, #816]	; (8026ab4 <__ieee754_pow+0x764>)
 8026782:	429c      	cmp	r4, r3
 8026784:	f340 8162 	ble.w	8026a4c <__ieee754_pow+0x6fc>
 8026788:	9b05      	ldr	r3, [sp, #20]
 802678a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 802678e:	3301      	adds	r3, #1
 8026790:	9305      	str	r3, [sp, #20]
 8026792:	2400      	movs	r4, #0
 8026794:	00e3      	lsls	r3, r4, #3
 8026796:	4682      	mov	sl, r0
 8026798:	4629      	mov	r1, r5
 802679a:	46ab      	mov	fp, r5
 802679c:	9307      	str	r3, [sp, #28]
 802679e:	4bc6      	ldr	r3, [pc, #792]	; (8026ab8 <__ieee754_pow+0x768>)
 80267a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80267a4:	ed93 7b00 	vldr	d7, [r3]
 80267a8:	eeb0 9a47 	vmov.f32	s18, s14
 80267ac:	eef0 9a67 	vmov.f32	s19, s15
 80267b0:	ec53 2b17 	vmov	r2, r3, d7
 80267b4:	f7d9 fd5a 	bl	800026c <__aeabi_dsub>
 80267b8:	4652      	mov	r2, sl
 80267ba:	4606      	mov	r6, r0
 80267bc:	460f      	mov	r7, r1
 80267be:	462b      	mov	r3, r5
 80267c0:	106d      	asrs	r5, r5, #1
 80267c2:	ec51 0b19 	vmov	r0, r1, d9
 80267c6:	f7d9 fd53 	bl	8000270 <__adddf3>
 80267ca:	4602      	mov	r2, r0
 80267cc:	460b      	mov	r3, r1
 80267ce:	2000      	movs	r0, #0
 80267d0:	49ba      	ldr	r1, [pc, #744]	; (8026abc <__ieee754_pow+0x76c>)
 80267d2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80267d6:	f7da f82b 	bl	8000830 <__aeabi_ddiv>
 80267da:	4602      	mov	r2, r0
 80267dc:	460b      	mov	r3, r1
 80267de:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80267e2:	ec41 0b1a 	vmov	d10, r0, r1
 80267e6:	4630      	mov	r0, r6
 80267e8:	4639      	mov	r1, r7
 80267ea:	f7d9 fef7 	bl	80005dc <__aeabi_dmul>
 80267ee:	2300      	movs	r3, #0
 80267f0:	2200      	movs	r2, #0
 80267f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80267f6:	9302      	str	r3, [sp, #8]
 80267f8:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80267fc:	4614      	mov	r4, r2
 80267fe:	461d      	mov	r5, r3
 8026800:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8026804:	ec41 0b18 	vmov	d8, r0, r1
 8026808:	4640      	mov	r0, r8
 802680a:	4649      	mov	r1, r9
 802680c:	f7d9 fee6 	bl	80005dc <__aeabi_dmul>
 8026810:	4602      	mov	r2, r0
 8026812:	460b      	mov	r3, r1
 8026814:	4630      	mov	r0, r6
 8026816:	4639      	mov	r1, r7
 8026818:	f7d9 fd28 	bl	800026c <__aeabi_dsub>
 802681c:	4606      	mov	r6, r0
 802681e:	460f      	mov	r7, r1
 8026820:	4620      	mov	r0, r4
 8026822:	4629      	mov	r1, r5
 8026824:	ec53 2b19 	vmov	r2, r3, d9
 8026828:	f7d9 fd20 	bl	800026c <__aeabi_dsub>
 802682c:	4602      	mov	r2, r0
 802682e:	460b      	mov	r3, r1
 8026830:	4650      	mov	r0, sl
 8026832:	4659      	mov	r1, fp
 8026834:	f7d9 fd1a 	bl	800026c <__aeabi_dsub>
 8026838:	4642      	mov	r2, r8
 802683a:	464b      	mov	r3, r9
 802683c:	f7d9 fece 	bl	80005dc <__aeabi_dmul>
 8026840:	4602      	mov	r2, r0
 8026842:	460b      	mov	r3, r1
 8026844:	4630      	mov	r0, r6
 8026846:	4639      	mov	r1, r7
 8026848:	f7d9 fd10 	bl	800026c <__aeabi_dsub>
 802684c:	ec53 2b1a 	vmov	r2, r3, d10
 8026850:	f7d9 fec4 	bl	80005dc <__aeabi_dmul>
 8026854:	ec53 2b18 	vmov	r2, r3, d8
 8026858:	ec41 0b19 	vmov	d9, r0, r1
 802685c:	ec51 0b18 	vmov	r0, r1, d8
 8026860:	f7d9 febc 	bl	80005dc <__aeabi_dmul>
 8026864:	4604      	mov	r4, r0
 8026866:	460d      	mov	r5, r1
 8026868:	a37b      	add	r3, pc, #492	; (adr r3, 8026a58 <__ieee754_pow+0x708>)
 802686a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802686e:	f7d9 feb5 	bl	80005dc <__aeabi_dmul>
 8026872:	a37b      	add	r3, pc, #492	; (adr r3, 8026a60 <__ieee754_pow+0x710>)
 8026874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026878:	f7d9 fcfa 	bl	8000270 <__adddf3>
 802687c:	4622      	mov	r2, r4
 802687e:	462b      	mov	r3, r5
 8026880:	f7d9 feac 	bl	80005dc <__aeabi_dmul>
 8026884:	a378      	add	r3, pc, #480	; (adr r3, 8026a68 <__ieee754_pow+0x718>)
 8026886:	e9d3 2300 	ldrd	r2, r3, [r3]
 802688a:	f7d9 fcf1 	bl	8000270 <__adddf3>
 802688e:	4622      	mov	r2, r4
 8026890:	462b      	mov	r3, r5
 8026892:	f7d9 fea3 	bl	80005dc <__aeabi_dmul>
 8026896:	a376      	add	r3, pc, #472	; (adr r3, 8026a70 <__ieee754_pow+0x720>)
 8026898:	e9d3 2300 	ldrd	r2, r3, [r3]
 802689c:	f7d9 fce8 	bl	8000270 <__adddf3>
 80268a0:	4622      	mov	r2, r4
 80268a2:	462b      	mov	r3, r5
 80268a4:	f7d9 fe9a 	bl	80005dc <__aeabi_dmul>
 80268a8:	a373      	add	r3, pc, #460	; (adr r3, 8026a78 <__ieee754_pow+0x728>)
 80268aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80268ae:	f7d9 fcdf 	bl	8000270 <__adddf3>
 80268b2:	4622      	mov	r2, r4
 80268b4:	462b      	mov	r3, r5
 80268b6:	f7d9 fe91 	bl	80005dc <__aeabi_dmul>
 80268ba:	a371      	add	r3, pc, #452	; (adr r3, 8026a80 <__ieee754_pow+0x730>)
 80268bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80268c0:	f7d9 fcd6 	bl	8000270 <__adddf3>
 80268c4:	4606      	mov	r6, r0
 80268c6:	460f      	mov	r7, r1
 80268c8:	4622      	mov	r2, r4
 80268ca:	462b      	mov	r3, r5
 80268cc:	4620      	mov	r0, r4
 80268ce:	4629      	mov	r1, r5
 80268d0:	f7d9 fe84 	bl	80005dc <__aeabi_dmul>
 80268d4:	4602      	mov	r2, r0
 80268d6:	460b      	mov	r3, r1
 80268d8:	4630      	mov	r0, r6
 80268da:	4639      	mov	r1, r7
 80268dc:	f7d9 fe7e 	bl	80005dc <__aeabi_dmul>
 80268e0:	4642      	mov	r2, r8
 80268e2:	4604      	mov	r4, r0
 80268e4:	460d      	mov	r5, r1
 80268e6:	464b      	mov	r3, r9
 80268e8:	ec51 0b18 	vmov	r0, r1, d8
 80268ec:	f7d9 fcc0 	bl	8000270 <__adddf3>
 80268f0:	ec53 2b19 	vmov	r2, r3, d9
 80268f4:	f7d9 fe72 	bl	80005dc <__aeabi_dmul>
 80268f8:	4622      	mov	r2, r4
 80268fa:	462b      	mov	r3, r5
 80268fc:	f7d9 fcb8 	bl	8000270 <__adddf3>
 8026900:	4642      	mov	r2, r8
 8026902:	4682      	mov	sl, r0
 8026904:	468b      	mov	fp, r1
 8026906:	464b      	mov	r3, r9
 8026908:	4640      	mov	r0, r8
 802690a:	4649      	mov	r1, r9
 802690c:	f7d9 fe66 	bl	80005dc <__aeabi_dmul>
 8026910:	2200      	movs	r2, #0
 8026912:	4b6b      	ldr	r3, [pc, #428]	; (8026ac0 <__ieee754_pow+0x770>)
 8026914:	4606      	mov	r6, r0
 8026916:	460f      	mov	r7, r1
 8026918:	f7d9 fcaa 	bl	8000270 <__adddf3>
 802691c:	4652      	mov	r2, sl
 802691e:	465b      	mov	r3, fp
 8026920:	f7d9 fca6 	bl	8000270 <__adddf3>
 8026924:	2000      	movs	r0, #0
 8026926:	460d      	mov	r5, r1
 8026928:	460b      	mov	r3, r1
 802692a:	4604      	mov	r4, r0
 802692c:	4602      	mov	r2, r0
 802692e:	4649      	mov	r1, r9
 8026930:	4640      	mov	r0, r8
 8026932:	f7d9 fe53 	bl	80005dc <__aeabi_dmul>
 8026936:	2200      	movs	r2, #0
 8026938:	4680      	mov	r8, r0
 802693a:	4689      	mov	r9, r1
 802693c:	4b60      	ldr	r3, [pc, #384]	; (8026ac0 <__ieee754_pow+0x770>)
 802693e:	4620      	mov	r0, r4
 8026940:	4629      	mov	r1, r5
 8026942:	f7d9 fc93 	bl	800026c <__aeabi_dsub>
 8026946:	4632      	mov	r2, r6
 8026948:	463b      	mov	r3, r7
 802694a:	f7d9 fc8f 	bl	800026c <__aeabi_dsub>
 802694e:	4602      	mov	r2, r0
 8026950:	460b      	mov	r3, r1
 8026952:	4650      	mov	r0, sl
 8026954:	4659      	mov	r1, fp
 8026956:	f7d9 fc89 	bl	800026c <__aeabi_dsub>
 802695a:	ec53 2b18 	vmov	r2, r3, d8
 802695e:	f7d9 fe3d 	bl	80005dc <__aeabi_dmul>
 8026962:	4606      	mov	r6, r0
 8026964:	460f      	mov	r7, r1
 8026966:	4622      	mov	r2, r4
 8026968:	462b      	mov	r3, r5
 802696a:	ec51 0b19 	vmov	r0, r1, d9
 802696e:	f7d9 fe35 	bl	80005dc <__aeabi_dmul>
 8026972:	4602      	mov	r2, r0
 8026974:	460b      	mov	r3, r1
 8026976:	4630      	mov	r0, r6
 8026978:	4639      	mov	r1, r7
 802697a:	f7d9 fc79 	bl	8000270 <__adddf3>
 802697e:	4606      	mov	r6, r0
 8026980:	460f      	mov	r7, r1
 8026982:	4602      	mov	r2, r0
 8026984:	460b      	mov	r3, r1
 8026986:	4640      	mov	r0, r8
 8026988:	4649      	mov	r1, r9
 802698a:	f7d9 fc71 	bl	8000270 <__adddf3>
 802698e:	2000      	movs	r0, #0
 8026990:	460d      	mov	r5, r1
 8026992:	4604      	mov	r4, r0
 8026994:	a33c      	add	r3, pc, #240	; (adr r3, 8026a88 <__ieee754_pow+0x738>)
 8026996:	e9d3 2300 	ldrd	r2, r3, [r3]
 802699a:	f7d9 fe1f 	bl	80005dc <__aeabi_dmul>
 802699e:	4642      	mov	r2, r8
 80269a0:	464b      	mov	r3, r9
 80269a2:	ec41 0b18 	vmov	d8, r0, r1
 80269a6:	4620      	mov	r0, r4
 80269a8:	4629      	mov	r1, r5
 80269aa:	f7d9 fc5f 	bl	800026c <__aeabi_dsub>
 80269ae:	4602      	mov	r2, r0
 80269b0:	460b      	mov	r3, r1
 80269b2:	4630      	mov	r0, r6
 80269b4:	4639      	mov	r1, r7
 80269b6:	f7d9 fc59 	bl	800026c <__aeabi_dsub>
 80269ba:	a335      	add	r3, pc, #212	; (adr r3, 8026a90 <__ieee754_pow+0x740>)
 80269bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80269c0:	f7d9 fe0c 	bl	80005dc <__aeabi_dmul>
 80269c4:	4606      	mov	r6, r0
 80269c6:	460f      	mov	r7, r1
 80269c8:	4620      	mov	r0, r4
 80269ca:	4629      	mov	r1, r5
 80269cc:	a332      	add	r3, pc, #200	; (adr r3, 8026a98 <__ieee754_pow+0x748>)
 80269ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80269d2:	f7d9 fe03 	bl	80005dc <__aeabi_dmul>
 80269d6:	4602      	mov	r2, r0
 80269d8:	460b      	mov	r3, r1
 80269da:	4630      	mov	r0, r6
 80269dc:	4639      	mov	r1, r7
 80269de:	f7d9 fc47 	bl	8000270 <__adddf3>
 80269e2:	9a07      	ldr	r2, [sp, #28]
 80269e4:	4b37      	ldr	r3, [pc, #220]	; (8026ac4 <__ieee754_pow+0x774>)
 80269e6:	4413      	add	r3, r2
 80269e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80269ec:	f7d9 fc40 	bl	8000270 <__adddf3>
 80269f0:	4682      	mov	sl, r0
 80269f2:	9805      	ldr	r0, [sp, #20]
 80269f4:	468b      	mov	fp, r1
 80269f6:	f7d9 fd87 	bl	8000508 <__aeabi_i2d>
 80269fa:	9a07      	ldr	r2, [sp, #28]
 80269fc:	4b32      	ldr	r3, [pc, #200]	; (8026ac8 <__ieee754_pow+0x778>)
 80269fe:	4606      	mov	r6, r0
 8026a00:	460f      	mov	r7, r1
 8026a02:	4413      	add	r3, r2
 8026a04:	4652      	mov	r2, sl
 8026a06:	e9d3 8900 	ldrd	r8, r9, [r3]
 8026a0a:	ec51 0b18 	vmov	r0, r1, d8
 8026a0e:	465b      	mov	r3, fp
 8026a10:	f7d9 fc2e 	bl	8000270 <__adddf3>
 8026a14:	4642      	mov	r2, r8
 8026a16:	464b      	mov	r3, r9
 8026a18:	f7d9 fc2a 	bl	8000270 <__adddf3>
 8026a1c:	4632      	mov	r2, r6
 8026a1e:	463b      	mov	r3, r7
 8026a20:	f7d9 fc26 	bl	8000270 <__adddf3>
 8026a24:	2000      	movs	r0, #0
 8026a26:	4632      	mov	r2, r6
 8026a28:	463b      	mov	r3, r7
 8026a2a:	4604      	mov	r4, r0
 8026a2c:	460d      	mov	r5, r1
 8026a2e:	f7d9 fc1d 	bl	800026c <__aeabi_dsub>
 8026a32:	4642      	mov	r2, r8
 8026a34:	464b      	mov	r3, r9
 8026a36:	f7d9 fc19 	bl	800026c <__aeabi_dsub>
 8026a3a:	ec53 2b18 	vmov	r2, r3, d8
 8026a3e:	f7d9 fc15 	bl	800026c <__aeabi_dsub>
 8026a42:	4602      	mov	r2, r0
 8026a44:	460b      	mov	r3, r1
 8026a46:	4650      	mov	r0, sl
 8026a48:	4659      	mov	r1, fp
 8026a4a:	e610      	b.n	802666e <__ieee754_pow+0x31e>
 8026a4c:	2401      	movs	r4, #1
 8026a4e:	e6a1      	b.n	8026794 <__ieee754_pow+0x444>
 8026a50:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8026aa0 <__ieee754_pow+0x750>
 8026a54:	e617      	b.n	8026686 <__ieee754_pow+0x336>
 8026a56:	bf00      	nop
 8026a58:	4a454eef 	.word	0x4a454eef
 8026a5c:	3fca7e28 	.word	0x3fca7e28
 8026a60:	93c9db65 	.word	0x93c9db65
 8026a64:	3fcd864a 	.word	0x3fcd864a
 8026a68:	a91d4101 	.word	0xa91d4101
 8026a6c:	3fd17460 	.word	0x3fd17460
 8026a70:	518f264d 	.word	0x518f264d
 8026a74:	3fd55555 	.word	0x3fd55555
 8026a78:	db6fabff 	.word	0xdb6fabff
 8026a7c:	3fdb6db6 	.word	0x3fdb6db6
 8026a80:	33333303 	.word	0x33333303
 8026a84:	3fe33333 	.word	0x3fe33333
 8026a88:	e0000000 	.word	0xe0000000
 8026a8c:	3feec709 	.word	0x3feec709
 8026a90:	dc3a03fd 	.word	0xdc3a03fd
 8026a94:	3feec709 	.word	0x3feec709
 8026a98:	145b01f5 	.word	0x145b01f5
 8026a9c:	be3e2fe0 	.word	0xbe3e2fe0
 8026aa0:	00000000 	.word	0x00000000
 8026aa4:	3ff00000 	.word	0x3ff00000
 8026aa8:	7ff00000 	.word	0x7ff00000
 8026aac:	43400000 	.word	0x43400000
 8026ab0:	0003988e 	.word	0x0003988e
 8026ab4:	000bb679 	.word	0x000bb679
 8026ab8:	08029940 	.word	0x08029940
 8026abc:	3ff00000 	.word	0x3ff00000
 8026ac0:	40080000 	.word	0x40080000
 8026ac4:	08029960 	.word	0x08029960
 8026ac8:	08029950 	.word	0x08029950
 8026acc:	a3b5      	add	r3, pc, #724	; (adr r3, 8026da4 <__ieee754_pow+0xa54>)
 8026ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026ad2:	4640      	mov	r0, r8
 8026ad4:	4649      	mov	r1, r9
 8026ad6:	f7d9 fbcb 	bl	8000270 <__adddf3>
 8026ada:	4622      	mov	r2, r4
 8026adc:	462b      	mov	r3, r5
 8026ade:	ec41 0b1a 	vmov	d10, r0, r1
 8026ae2:	4630      	mov	r0, r6
 8026ae4:	4639      	mov	r1, r7
 8026ae6:	f7d9 fbc1 	bl	800026c <__aeabi_dsub>
 8026aea:	4602      	mov	r2, r0
 8026aec:	460b      	mov	r3, r1
 8026aee:	ec51 0b1a 	vmov	r0, r1, d10
 8026af2:	f7da f803 	bl	8000afc <__aeabi_dcmpgt>
 8026af6:	2800      	cmp	r0, #0
 8026af8:	f47f ae04 	bne.w	8026704 <__ieee754_pow+0x3b4>
 8026afc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8026b00:	4aa3      	ldr	r2, [pc, #652]	; (8026d90 <__ieee754_pow+0xa40>)
 8026b02:	4293      	cmp	r3, r2
 8026b04:	f340 8108 	ble.w	8026d18 <__ieee754_pow+0x9c8>
 8026b08:	151b      	asrs	r3, r3, #20
 8026b0a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8026b0e:	48a1      	ldr	r0, [pc, #644]	; (8026d94 <__ieee754_pow+0xa44>)
 8026b10:	f1bb 0f00 	cmp.w	fp, #0
 8026b14:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8026b18:	f04f 0200 	mov.w	r2, #0
 8026b1c:	fa4a fa03 	asr.w	sl, sl, r3
 8026b20:	44da      	add	sl, fp
 8026b22:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8026b26:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8026b2a:	fa40 f001 	asr.w	r0, r0, r1
 8026b2e:	f1c1 0114 	rsb	r1, r1, #20
 8026b32:	ea00 030a 	and.w	r3, r0, sl
 8026b36:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8026b3a:	4620      	mov	r0, r4
 8026b3c:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8026b40:	fa4a fa01 	asr.w	sl, sl, r1
 8026b44:	4629      	mov	r1, r5
 8026b46:	bfb8      	it	lt
 8026b48:	f1ca 0a00 	rsblt	sl, sl, #0
 8026b4c:	f7d9 fb8e 	bl	800026c <__aeabi_dsub>
 8026b50:	ec41 0b19 	vmov	d9, r0, r1
 8026b54:	4642      	mov	r2, r8
 8026b56:	464b      	mov	r3, r9
 8026b58:	ec51 0b19 	vmov	r0, r1, d9
 8026b5c:	f7d9 fb88 	bl	8000270 <__adddf3>
 8026b60:	2000      	movs	r0, #0
 8026b62:	460d      	mov	r5, r1
 8026b64:	4604      	mov	r4, r0
 8026b66:	a37a      	add	r3, pc, #488	; (adr r3, 8026d50 <__ieee754_pow+0xa00>)
 8026b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026b6c:	f7d9 fd36 	bl	80005dc <__aeabi_dmul>
 8026b70:	4606      	mov	r6, r0
 8026b72:	460f      	mov	r7, r1
 8026b74:	4620      	mov	r0, r4
 8026b76:	4629      	mov	r1, r5
 8026b78:	ec53 2b19 	vmov	r2, r3, d9
 8026b7c:	f7d9 fb76 	bl	800026c <__aeabi_dsub>
 8026b80:	4602      	mov	r2, r0
 8026b82:	460b      	mov	r3, r1
 8026b84:	4640      	mov	r0, r8
 8026b86:	4649      	mov	r1, r9
 8026b88:	f7d9 fb70 	bl	800026c <__aeabi_dsub>
 8026b8c:	a372      	add	r3, pc, #456	; (adr r3, 8026d58 <__ieee754_pow+0xa08>)
 8026b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026b92:	f7d9 fd23 	bl	80005dc <__aeabi_dmul>
 8026b96:	4680      	mov	r8, r0
 8026b98:	4689      	mov	r9, r1
 8026b9a:	4620      	mov	r0, r4
 8026b9c:	4629      	mov	r1, r5
 8026b9e:	a370      	add	r3, pc, #448	; (adr r3, 8026d60 <__ieee754_pow+0xa10>)
 8026ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026ba4:	f7d9 fd1a 	bl	80005dc <__aeabi_dmul>
 8026ba8:	4602      	mov	r2, r0
 8026baa:	460b      	mov	r3, r1
 8026bac:	4640      	mov	r0, r8
 8026bae:	4649      	mov	r1, r9
 8026bb0:	f7d9 fb5e 	bl	8000270 <__adddf3>
 8026bb4:	4604      	mov	r4, r0
 8026bb6:	460d      	mov	r5, r1
 8026bb8:	4602      	mov	r2, r0
 8026bba:	460b      	mov	r3, r1
 8026bbc:	4630      	mov	r0, r6
 8026bbe:	4639      	mov	r1, r7
 8026bc0:	f7d9 fb56 	bl	8000270 <__adddf3>
 8026bc4:	4632      	mov	r2, r6
 8026bc6:	4680      	mov	r8, r0
 8026bc8:	4689      	mov	r9, r1
 8026bca:	463b      	mov	r3, r7
 8026bcc:	f7d9 fb4e 	bl	800026c <__aeabi_dsub>
 8026bd0:	4602      	mov	r2, r0
 8026bd2:	460b      	mov	r3, r1
 8026bd4:	4620      	mov	r0, r4
 8026bd6:	4629      	mov	r1, r5
 8026bd8:	f7d9 fb48 	bl	800026c <__aeabi_dsub>
 8026bdc:	4642      	mov	r2, r8
 8026bde:	4606      	mov	r6, r0
 8026be0:	460f      	mov	r7, r1
 8026be2:	464b      	mov	r3, r9
 8026be4:	4640      	mov	r0, r8
 8026be6:	4649      	mov	r1, r9
 8026be8:	f7d9 fcf8 	bl	80005dc <__aeabi_dmul>
 8026bec:	4604      	mov	r4, r0
 8026bee:	460d      	mov	r5, r1
 8026bf0:	a35d      	add	r3, pc, #372	; (adr r3, 8026d68 <__ieee754_pow+0xa18>)
 8026bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026bf6:	f7d9 fcf1 	bl	80005dc <__aeabi_dmul>
 8026bfa:	a35d      	add	r3, pc, #372	; (adr r3, 8026d70 <__ieee754_pow+0xa20>)
 8026bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026c00:	f7d9 fb34 	bl	800026c <__aeabi_dsub>
 8026c04:	4622      	mov	r2, r4
 8026c06:	462b      	mov	r3, r5
 8026c08:	f7d9 fce8 	bl	80005dc <__aeabi_dmul>
 8026c0c:	a35a      	add	r3, pc, #360	; (adr r3, 8026d78 <__ieee754_pow+0xa28>)
 8026c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026c12:	f7d9 fb2d 	bl	8000270 <__adddf3>
 8026c16:	4622      	mov	r2, r4
 8026c18:	462b      	mov	r3, r5
 8026c1a:	f7d9 fcdf 	bl	80005dc <__aeabi_dmul>
 8026c1e:	a358      	add	r3, pc, #352	; (adr r3, 8026d80 <__ieee754_pow+0xa30>)
 8026c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026c24:	f7d9 fb22 	bl	800026c <__aeabi_dsub>
 8026c28:	4622      	mov	r2, r4
 8026c2a:	462b      	mov	r3, r5
 8026c2c:	f7d9 fcd6 	bl	80005dc <__aeabi_dmul>
 8026c30:	a355      	add	r3, pc, #340	; (adr r3, 8026d88 <__ieee754_pow+0xa38>)
 8026c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026c36:	f7d9 fb1b 	bl	8000270 <__adddf3>
 8026c3a:	4622      	mov	r2, r4
 8026c3c:	462b      	mov	r3, r5
 8026c3e:	f7d9 fccd 	bl	80005dc <__aeabi_dmul>
 8026c42:	4602      	mov	r2, r0
 8026c44:	460b      	mov	r3, r1
 8026c46:	4640      	mov	r0, r8
 8026c48:	4649      	mov	r1, r9
 8026c4a:	f7d9 fb0f 	bl	800026c <__aeabi_dsub>
 8026c4e:	4604      	mov	r4, r0
 8026c50:	460d      	mov	r5, r1
 8026c52:	4602      	mov	r2, r0
 8026c54:	460b      	mov	r3, r1
 8026c56:	4640      	mov	r0, r8
 8026c58:	4649      	mov	r1, r9
 8026c5a:	f7d9 fcbf 	bl	80005dc <__aeabi_dmul>
 8026c5e:	2200      	movs	r2, #0
 8026c60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8026c64:	ec41 0b19 	vmov	d9, r0, r1
 8026c68:	4620      	mov	r0, r4
 8026c6a:	4629      	mov	r1, r5
 8026c6c:	f7d9 fafe 	bl	800026c <__aeabi_dsub>
 8026c70:	4602      	mov	r2, r0
 8026c72:	460b      	mov	r3, r1
 8026c74:	ec51 0b19 	vmov	r0, r1, d9
 8026c78:	f7d9 fdda 	bl	8000830 <__aeabi_ddiv>
 8026c7c:	4632      	mov	r2, r6
 8026c7e:	4604      	mov	r4, r0
 8026c80:	460d      	mov	r5, r1
 8026c82:	463b      	mov	r3, r7
 8026c84:	4640      	mov	r0, r8
 8026c86:	4649      	mov	r1, r9
 8026c88:	f7d9 fca8 	bl	80005dc <__aeabi_dmul>
 8026c8c:	4632      	mov	r2, r6
 8026c8e:	463b      	mov	r3, r7
 8026c90:	f7d9 faee 	bl	8000270 <__adddf3>
 8026c94:	4602      	mov	r2, r0
 8026c96:	460b      	mov	r3, r1
 8026c98:	4620      	mov	r0, r4
 8026c9a:	4629      	mov	r1, r5
 8026c9c:	f7d9 fae6 	bl	800026c <__aeabi_dsub>
 8026ca0:	4642      	mov	r2, r8
 8026ca2:	464b      	mov	r3, r9
 8026ca4:	f7d9 fae2 	bl	800026c <__aeabi_dsub>
 8026ca8:	460b      	mov	r3, r1
 8026caa:	4602      	mov	r2, r0
 8026cac:	493a      	ldr	r1, [pc, #232]	; (8026d98 <__ieee754_pow+0xa48>)
 8026cae:	2000      	movs	r0, #0
 8026cb0:	f7d9 fadc 	bl	800026c <__aeabi_dsub>
 8026cb4:	ec41 0b10 	vmov	d0, r0, r1
 8026cb8:	ee10 3a90 	vmov	r3, s1
 8026cbc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8026cc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8026cc4:	da2b      	bge.n	8026d1e <__ieee754_pow+0x9ce>
 8026cc6:	4650      	mov	r0, sl
 8026cc8:	f000 fdce 	bl	8027868 <scalbn>
 8026ccc:	ec51 0b10 	vmov	r0, r1, d0
 8026cd0:	ec53 2b18 	vmov	r2, r3, d8
 8026cd4:	f7ff bbed 	b.w	80264b2 <__ieee754_pow+0x162>
 8026cd8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8026cdc:	4b2f      	ldr	r3, [pc, #188]	; (8026d9c <__ieee754_pow+0xa4c>)
 8026cde:	429e      	cmp	r6, r3
 8026ce0:	f77f af0c 	ble.w	8026afc <__ieee754_pow+0x7ac>
 8026ce4:	4b2e      	ldr	r3, [pc, #184]	; (8026da0 <__ieee754_pow+0xa50>)
 8026ce6:	440b      	add	r3, r1
 8026ce8:	4303      	orrs	r3, r0
 8026cea:	d009      	beq.n	8026d00 <__ieee754_pow+0x9b0>
 8026cec:	2200      	movs	r2, #0
 8026cee:	2300      	movs	r3, #0
 8026cf0:	ec51 0b18 	vmov	r0, r1, d8
 8026cf4:	f7d9 fee4 	bl	8000ac0 <__aeabi_dcmplt>
 8026cf8:	3800      	subs	r0, #0
 8026cfa:	bf18      	it	ne
 8026cfc:	2001      	movne	r0, #1
 8026cfe:	e447      	b.n	8026590 <__ieee754_pow+0x240>
 8026d00:	4622      	mov	r2, r4
 8026d02:	462b      	mov	r3, r5
 8026d04:	f7d9 fab2 	bl	800026c <__aeabi_dsub>
 8026d08:	4642      	mov	r2, r8
 8026d0a:	464b      	mov	r3, r9
 8026d0c:	f7d9 feec 	bl	8000ae8 <__aeabi_dcmpge>
 8026d10:	2800      	cmp	r0, #0
 8026d12:	f43f aef3 	beq.w	8026afc <__ieee754_pow+0x7ac>
 8026d16:	e7e9      	b.n	8026cec <__ieee754_pow+0x99c>
 8026d18:	f04f 0a00 	mov.w	sl, #0
 8026d1c:	e71a      	b.n	8026b54 <__ieee754_pow+0x804>
 8026d1e:	ec51 0b10 	vmov	r0, r1, d0
 8026d22:	4619      	mov	r1, r3
 8026d24:	e7d4      	b.n	8026cd0 <__ieee754_pow+0x980>
 8026d26:	2000      	movs	r0, #0
 8026d28:	491b      	ldr	r1, [pc, #108]	; (8026d98 <__ieee754_pow+0xa48>)
 8026d2a:	f7ff bb30 	b.w	802638e <__ieee754_pow+0x3e>
 8026d2e:	2000      	movs	r0, #0
 8026d30:	2100      	movs	r1, #0
 8026d32:	f7ff bb2c 	b.w	802638e <__ieee754_pow+0x3e>
 8026d36:	4630      	mov	r0, r6
 8026d38:	4639      	mov	r1, r7
 8026d3a:	f7ff bb28 	b.w	802638e <__ieee754_pow+0x3e>
 8026d3e:	9204      	str	r2, [sp, #16]
 8026d40:	f7ff bb7a 	b.w	8026438 <__ieee754_pow+0xe8>
 8026d44:	2300      	movs	r3, #0
 8026d46:	f7ff bb64 	b.w	8026412 <__ieee754_pow+0xc2>
 8026d4a:	bf00      	nop
 8026d4c:	f3af 8000 	nop.w
 8026d50:	00000000 	.word	0x00000000
 8026d54:	3fe62e43 	.word	0x3fe62e43
 8026d58:	fefa39ef 	.word	0xfefa39ef
 8026d5c:	3fe62e42 	.word	0x3fe62e42
 8026d60:	0ca86c39 	.word	0x0ca86c39
 8026d64:	be205c61 	.word	0xbe205c61
 8026d68:	72bea4d0 	.word	0x72bea4d0
 8026d6c:	3e663769 	.word	0x3e663769
 8026d70:	c5d26bf1 	.word	0xc5d26bf1
 8026d74:	3ebbbd41 	.word	0x3ebbbd41
 8026d78:	af25de2c 	.word	0xaf25de2c
 8026d7c:	3f11566a 	.word	0x3f11566a
 8026d80:	16bebd93 	.word	0x16bebd93
 8026d84:	3f66c16c 	.word	0x3f66c16c
 8026d88:	5555553e 	.word	0x5555553e
 8026d8c:	3fc55555 	.word	0x3fc55555
 8026d90:	3fe00000 	.word	0x3fe00000
 8026d94:	fff00000 	.word	0xfff00000
 8026d98:	3ff00000 	.word	0x3ff00000
 8026d9c:	4090cbff 	.word	0x4090cbff
 8026da0:	3f6f3400 	.word	0x3f6f3400
 8026da4:	652b82fe 	.word	0x652b82fe
 8026da8:	3c971547 	.word	0x3c971547
 8026dac:	00000000 	.word	0x00000000

08026db0 <__ieee754_rem_pio2>:
 8026db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026db4:	ec55 4b10 	vmov	r4, r5, d0
 8026db8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8026dbc:	4bca      	ldr	r3, [pc, #808]	; (80270e8 <__ieee754_rem_pio2+0x338>)
 8026dbe:	4682      	mov	sl, r0
 8026dc0:	4598      	cmp	r8, r3
 8026dc2:	ed2d 8b02 	vpush	{d8}
 8026dc6:	b08b      	sub	sp, #44	; 0x2c
 8026dc8:	9502      	str	r5, [sp, #8]
 8026dca:	dc08      	bgt.n	8026dde <__ieee754_rem_pio2+0x2e>
 8026dcc:	2200      	movs	r2, #0
 8026dce:	2300      	movs	r3, #0
 8026dd0:	ed80 0b00 	vstr	d0, [r0]
 8026dd4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8026dd8:	f04f 0b00 	mov.w	fp, #0
 8026ddc:	e028      	b.n	8026e30 <__ieee754_rem_pio2+0x80>
 8026dde:	4bc3      	ldr	r3, [pc, #780]	; (80270ec <__ieee754_rem_pio2+0x33c>)
 8026de0:	4598      	cmp	r8, r3
 8026de2:	dc78      	bgt.n	8026ed6 <__ieee754_rem_pio2+0x126>
 8026de4:	9b02      	ldr	r3, [sp, #8]
 8026de6:	ee10 0a10 	vmov	r0, s0
 8026dea:	4ec1      	ldr	r6, [pc, #772]	; (80270f0 <__ieee754_rem_pio2+0x340>)
 8026dec:	4629      	mov	r1, r5
 8026dee:	2b00      	cmp	r3, #0
 8026df0:	a3af      	add	r3, pc, #700	; (adr r3, 80270b0 <__ieee754_rem_pio2+0x300>)
 8026df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026df6:	dd39      	ble.n	8026e6c <__ieee754_rem_pio2+0xbc>
 8026df8:	f7d9 fa38 	bl	800026c <__aeabi_dsub>
 8026dfc:	45b0      	cmp	r8, r6
 8026dfe:	4604      	mov	r4, r0
 8026e00:	460d      	mov	r5, r1
 8026e02:	d01b      	beq.n	8026e3c <__ieee754_rem_pio2+0x8c>
 8026e04:	a3ac      	add	r3, pc, #688	; (adr r3, 80270b8 <__ieee754_rem_pio2+0x308>)
 8026e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026e0a:	f7d9 fa2f 	bl	800026c <__aeabi_dsub>
 8026e0e:	4602      	mov	r2, r0
 8026e10:	460b      	mov	r3, r1
 8026e12:	4620      	mov	r0, r4
 8026e14:	4629      	mov	r1, r5
 8026e16:	e9ca 2300 	strd	r2, r3, [sl]
 8026e1a:	f7d9 fa27 	bl	800026c <__aeabi_dsub>
 8026e1e:	a3a6      	add	r3, pc, #664	; (adr r3, 80270b8 <__ieee754_rem_pio2+0x308>)
 8026e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026e24:	f04f 0b01 	mov.w	fp, #1
 8026e28:	f7d9 fa20 	bl	800026c <__aeabi_dsub>
 8026e2c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8026e30:	4658      	mov	r0, fp
 8026e32:	b00b      	add	sp, #44	; 0x2c
 8026e34:	ecbd 8b02 	vpop	{d8}
 8026e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026e3c:	a3a0      	add	r3, pc, #640	; (adr r3, 80270c0 <__ieee754_rem_pio2+0x310>)
 8026e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026e42:	f7d9 fa13 	bl	800026c <__aeabi_dsub>
 8026e46:	4604      	mov	r4, r0
 8026e48:	460d      	mov	r5, r1
 8026e4a:	a39f      	add	r3, pc, #636	; (adr r3, 80270c8 <__ieee754_rem_pio2+0x318>)
 8026e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026e50:	f7d9 fa0c 	bl	800026c <__aeabi_dsub>
 8026e54:	4602      	mov	r2, r0
 8026e56:	460b      	mov	r3, r1
 8026e58:	4620      	mov	r0, r4
 8026e5a:	4629      	mov	r1, r5
 8026e5c:	e9ca 2300 	strd	r2, r3, [sl]
 8026e60:	f7d9 fa04 	bl	800026c <__aeabi_dsub>
 8026e64:	a398      	add	r3, pc, #608	; (adr r3, 80270c8 <__ieee754_rem_pio2+0x318>)
 8026e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026e6a:	e7db      	b.n	8026e24 <__ieee754_rem_pio2+0x74>
 8026e6c:	f7d9 fa00 	bl	8000270 <__adddf3>
 8026e70:	45b0      	cmp	r8, r6
 8026e72:	4604      	mov	r4, r0
 8026e74:	460d      	mov	r5, r1
 8026e76:	d016      	beq.n	8026ea6 <__ieee754_rem_pio2+0xf6>
 8026e78:	a38f      	add	r3, pc, #572	; (adr r3, 80270b8 <__ieee754_rem_pio2+0x308>)
 8026e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026e7e:	f7d9 f9f7 	bl	8000270 <__adddf3>
 8026e82:	4602      	mov	r2, r0
 8026e84:	460b      	mov	r3, r1
 8026e86:	4620      	mov	r0, r4
 8026e88:	4629      	mov	r1, r5
 8026e8a:	e9ca 2300 	strd	r2, r3, [sl]
 8026e8e:	f7d9 f9ed 	bl	800026c <__aeabi_dsub>
 8026e92:	a389      	add	r3, pc, #548	; (adr r3, 80270b8 <__ieee754_rem_pio2+0x308>)
 8026e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026e98:	f7d9 f9ea 	bl	8000270 <__adddf3>
 8026e9c:	f04f 3bff 	mov.w	fp, #4294967295
 8026ea0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8026ea4:	e7c4      	b.n	8026e30 <__ieee754_rem_pio2+0x80>
 8026ea6:	a386      	add	r3, pc, #536	; (adr r3, 80270c0 <__ieee754_rem_pio2+0x310>)
 8026ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026eac:	f7d9 f9e0 	bl	8000270 <__adddf3>
 8026eb0:	4604      	mov	r4, r0
 8026eb2:	460d      	mov	r5, r1
 8026eb4:	a384      	add	r3, pc, #528	; (adr r3, 80270c8 <__ieee754_rem_pio2+0x318>)
 8026eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026eba:	f7d9 f9d9 	bl	8000270 <__adddf3>
 8026ebe:	4602      	mov	r2, r0
 8026ec0:	460b      	mov	r3, r1
 8026ec2:	4620      	mov	r0, r4
 8026ec4:	4629      	mov	r1, r5
 8026ec6:	e9ca 2300 	strd	r2, r3, [sl]
 8026eca:	f7d9 f9cf 	bl	800026c <__aeabi_dsub>
 8026ece:	a37e      	add	r3, pc, #504	; (adr r3, 80270c8 <__ieee754_rem_pio2+0x318>)
 8026ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026ed4:	e7e0      	b.n	8026e98 <__ieee754_rem_pio2+0xe8>
 8026ed6:	4b87      	ldr	r3, [pc, #540]	; (80270f4 <__ieee754_rem_pio2+0x344>)
 8026ed8:	4598      	cmp	r8, r3
 8026eda:	f300 80d8 	bgt.w	802708e <__ieee754_rem_pio2+0x2de>
 8026ede:	f000 f96d 	bl	80271bc <fabs>
 8026ee2:	ee10 0a10 	vmov	r0, s0
 8026ee6:	ec55 4b10 	vmov	r4, r5, d0
 8026eea:	a379      	add	r3, pc, #484	; (adr r3, 80270d0 <__ieee754_rem_pio2+0x320>)
 8026eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026ef0:	4629      	mov	r1, r5
 8026ef2:	f7d9 fb73 	bl	80005dc <__aeabi_dmul>
 8026ef6:	2200      	movs	r2, #0
 8026ef8:	4b7f      	ldr	r3, [pc, #508]	; (80270f8 <__ieee754_rem_pio2+0x348>)
 8026efa:	f7d9 f9b9 	bl	8000270 <__adddf3>
 8026efe:	f7d9 fe1d 	bl	8000b3c <__aeabi_d2iz>
 8026f02:	4683      	mov	fp, r0
 8026f04:	f7d9 fb00 	bl	8000508 <__aeabi_i2d>
 8026f08:	4602      	mov	r2, r0
 8026f0a:	460b      	mov	r3, r1
 8026f0c:	ec43 2b18 	vmov	d8, r2, r3
 8026f10:	a367      	add	r3, pc, #412	; (adr r3, 80270b0 <__ieee754_rem_pio2+0x300>)
 8026f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026f16:	f7d9 fb61 	bl	80005dc <__aeabi_dmul>
 8026f1a:	4602      	mov	r2, r0
 8026f1c:	460b      	mov	r3, r1
 8026f1e:	4620      	mov	r0, r4
 8026f20:	4629      	mov	r1, r5
 8026f22:	f7d9 f9a3 	bl	800026c <__aeabi_dsub>
 8026f26:	4606      	mov	r6, r0
 8026f28:	460f      	mov	r7, r1
 8026f2a:	a363      	add	r3, pc, #396	; (adr r3, 80270b8 <__ieee754_rem_pio2+0x308>)
 8026f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026f30:	ec51 0b18 	vmov	r0, r1, d8
 8026f34:	f7d9 fb52 	bl	80005dc <__aeabi_dmul>
 8026f38:	f1bb 0f1f 	cmp.w	fp, #31
 8026f3c:	4604      	mov	r4, r0
 8026f3e:	460d      	mov	r5, r1
 8026f40:	dc0d      	bgt.n	8026f5e <__ieee754_rem_pio2+0x1ae>
 8026f42:	f10b 32ff 	add.w	r2, fp, #4294967295
 8026f46:	4b6d      	ldr	r3, [pc, #436]	; (80270fc <__ieee754_rem_pio2+0x34c>)
 8026f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8026f4c:	4543      	cmp	r3, r8
 8026f4e:	d006      	beq.n	8026f5e <__ieee754_rem_pio2+0x1ae>
 8026f50:	4622      	mov	r2, r4
 8026f52:	462b      	mov	r3, r5
 8026f54:	4630      	mov	r0, r6
 8026f56:	4639      	mov	r1, r7
 8026f58:	f7d9 f988 	bl	800026c <__aeabi_dsub>
 8026f5c:	e00e      	b.n	8026f7c <__ieee754_rem_pio2+0x1cc>
 8026f5e:	462b      	mov	r3, r5
 8026f60:	4622      	mov	r2, r4
 8026f62:	4630      	mov	r0, r6
 8026f64:	4639      	mov	r1, r7
 8026f66:	f7d9 f981 	bl	800026c <__aeabi_dsub>
 8026f6a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8026f6e:	9303      	str	r3, [sp, #12]
 8026f70:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8026f74:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8026f78:	2b10      	cmp	r3, #16
 8026f7a:	dc02      	bgt.n	8026f82 <__ieee754_rem_pio2+0x1d2>
 8026f7c:	e9ca 0100 	strd	r0, r1, [sl]
 8026f80:	e039      	b.n	8026ff6 <__ieee754_rem_pio2+0x246>
 8026f82:	a34f      	add	r3, pc, #316	; (adr r3, 80270c0 <__ieee754_rem_pio2+0x310>)
 8026f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026f88:	ec51 0b18 	vmov	r0, r1, d8
 8026f8c:	f7d9 fb26 	bl	80005dc <__aeabi_dmul>
 8026f90:	4604      	mov	r4, r0
 8026f92:	460d      	mov	r5, r1
 8026f94:	4602      	mov	r2, r0
 8026f96:	460b      	mov	r3, r1
 8026f98:	4630      	mov	r0, r6
 8026f9a:	4639      	mov	r1, r7
 8026f9c:	f7d9 f966 	bl	800026c <__aeabi_dsub>
 8026fa0:	4602      	mov	r2, r0
 8026fa2:	460b      	mov	r3, r1
 8026fa4:	4680      	mov	r8, r0
 8026fa6:	4689      	mov	r9, r1
 8026fa8:	4630      	mov	r0, r6
 8026faa:	4639      	mov	r1, r7
 8026fac:	f7d9 f95e 	bl	800026c <__aeabi_dsub>
 8026fb0:	4622      	mov	r2, r4
 8026fb2:	462b      	mov	r3, r5
 8026fb4:	f7d9 f95a 	bl	800026c <__aeabi_dsub>
 8026fb8:	4604      	mov	r4, r0
 8026fba:	460d      	mov	r5, r1
 8026fbc:	a342      	add	r3, pc, #264	; (adr r3, 80270c8 <__ieee754_rem_pio2+0x318>)
 8026fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026fc2:	ec51 0b18 	vmov	r0, r1, d8
 8026fc6:	f7d9 fb09 	bl	80005dc <__aeabi_dmul>
 8026fca:	4622      	mov	r2, r4
 8026fcc:	462b      	mov	r3, r5
 8026fce:	f7d9 f94d 	bl	800026c <__aeabi_dsub>
 8026fd2:	4602      	mov	r2, r0
 8026fd4:	460b      	mov	r3, r1
 8026fd6:	4604      	mov	r4, r0
 8026fd8:	460d      	mov	r5, r1
 8026fda:	4640      	mov	r0, r8
 8026fdc:	4649      	mov	r1, r9
 8026fde:	f7d9 f945 	bl	800026c <__aeabi_dsub>
 8026fe2:	9a03      	ldr	r2, [sp, #12]
 8026fe4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8026fe8:	1ad3      	subs	r3, r2, r3
 8026fea:	2b31      	cmp	r3, #49	; 0x31
 8026fec:	dc24      	bgt.n	8027038 <__ieee754_rem_pio2+0x288>
 8026fee:	4646      	mov	r6, r8
 8026ff0:	464f      	mov	r7, r9
 8026ff2:	e9ca 0100 	strd	r0, r1, [sl]
 8026ff6:	e9da 8900 	ldrd	r8, r9, [sl]
 8026ffa:	4630      	mov	r0, r6
 8026ffc:	4639      	mov	r1, r7
 8026ffe:	4642      	mov	r2, r8
 8027000:	464b      	mov	r3, r9
 8027002:	f7d9 f933 	bl	800026c <__aeabi_dsub>
 8027006:	462b      	mov	r3, r5
 8027008:	4622      	mov	r2, r4
 802700a:	f7d9 f92f 	bl	800026c <__aeabi_dsub>
 802700e:	9b02      	ldr	r3, [sp, #8]
 8027010:	2b00      	cmp	r3, #0
 8027012:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8027016:	f6bf af0b 	bge.w	8026e30 <__ieee754_rem_pio2+0x80>
 802701a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 802701e:	f8ca 8000 	str.w	r8, [sl]
 8027022:	f8ca 0008 	str.w	r0, [sl, #8]
 8027026:	f8ca 3004 	str.w	r3, [sl, #4]
 802702a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802702e:	f8ca 300c 	str.w	r3, [sl, #12]
 8027032:	f1cb 0b00 	rsb	fp, fp, #0
 8027036:	e6fb      	b.n	8026e30 <__ieee754_rem_pio2+0x80>
 8027038:	a327      	add	r3, pc, #156	; (adr r3, 80270d8 <__ieee754_rem_pio2+0x328>)
 802703a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802703e:	ec51 0b18 	vmov	r0, r1, d8
 8027042:	f7d9 facb 	bl	80005dc <__aeabi_dmul>
 8027046:	4604      	mov	r4, r0
 8027048:	460d      	mov	r5, r1
 802704a:	4602      	mov	r2, r0
 802704c:	460b      	mov	r3, r1
 802704e:	4640      	mov	r0, r8
 8027050:	4649      	mov	r1, r9
 8027052:	f7d9 f90b 	bl	800026c <__aeabi_dsub>
 8027056:	4602      	mov	r2, r0
 8027058:	460b      	mov	r3, r1
 802705a:	4606      	mov	r6, r0
 802705c:	460f      	mov	r7, r1
 802705e:	4640      	mov	r0, r8
 8027060:	4649      	mov	r1, r9
 8027062:	f7d9 f903 	bl	800026c <__aeabi_dsub>
 8027066:	4622      	mov	r2, r4
 8027068:	462b      	mov	r3, r5
 802706a:	f7d9 f8ff 	bl	800026c <__aeabi_dsub>
 802706e:	4604      	mov	r4, r0
 8027070:	460d      	mov	r5, r1
 8027072:	a31b      	add	r3, pc, #108	; (adr r3, 80270e0 <__ieee754_rem_pio2+0x330>)
 8027074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027078:	ec51 0b18 	vmov	r0, r1, d8
 802707c:	f7d9 faae 	bl	80005dc <__aeabi_dmul>
 8027080:	4622      	mov	r2, r4
 8027082:	462b      	mov	r3, r5
 8027084:	f7d9 f8f2 	bl	800026c <__aeabi_dsub>
 8027088:	4604      	mov	r4, r0
 802708a:	460d      	mov	r5, r1
 802708c:	e760      	b.n	8026f50 <__ieee754_rem_pio2+0x1a0>
 802708e:	4b1c      	ldr	r3, [pc, #112]	; (8027100 <__ieee754_rem_pio2+0x350>)
 8027090:	4598      	cmp	r8, r3
 8027092:	dd37      	ble.n	8027104 <__ieee754_rem_pio2+0x354>
 8027094:	ee10 2a10 	vmov	r2, s0
 8027098:	462b      	mov	r3, r5
 802709a:	4620      	mov	r0, r4
 802709c:	4629      	mov	r1, r5
 802709e:	f7d9 f8e5 	bl	800026c <__aeabi_dsub>
 80270a2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80270a6:	e9ca 0100 	strd	r0, r1, [sl]
 80270aa:	e695      	b.n	8026dd8 <__ieee754_rem_pio2+0x28>
 80270ac:	f3af 8000 	nop.w
 80270b0:	54400000 	.word	0x54400000
 80270b4:	3ff921fb 	.word	0x3ff921fb
 80270b8:	1a626331 	.word	0x1a626331
 80270bc:	3dd0b461 	.word	0x3dd0b461
 80270c0:	1a600000 	.word	0x1a600000
 80270c4:	3dd0b461 	.word	0x3dd0b461
 80270c8:	2e037073 	.word	0x2e037073
 80270cc:	3ba3198a 	.word	0x3ba3198a
 80270d0:	6dc9c883 	.word	0x6dc9c883
 80270d4:	3fe45f30 	.word	0x3fe45f30
 80270d8:	2e000000 	.word	0x2e000000
 80270dc:	3ba3198a 	.word	0x3ba3198a
 80270e0:	252049c1 	.word	0x252049c1
 80270e4:	397b839a 	.word	0x397b839a
 80270e8:	3fe921fb 	.word	0x3fe921fb
 80270ec:	4002d97b 	.word	0x4002d97b
 80270f0:	3ff921fb 	.word	0x3ff921fb
 80270f4:	413921fb 	.word	0x413921fb
 80270f8:	3fe00000 	.word	0x3fe00000
 80270fc:	08029970 	.word	0x08029970
 8027100:	7fefffff 	.word	0x7fefffff
 8027104:	ea4f 5628 	mov.w	r6, r8, asr #20
 8027108:	4620      	mov	r0, r4
 802710a:	2703      	movs	r7, #3
 802710c:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8027110:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8027114:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8027118:	460d      	mov	r5, r1
 802711a:	f7d9 fd0f 	bl	8000b3c <__aeabi_d2iz>
 802711e:	f7d9 f9f3 	bl	8000508 <__aeabi_i2d>
 8027122:	4602      	mov	r2, r0
 8027124:	460b      	mov	r3, r1
 8027126:	4620      	mov	r0, r4
 8027128:	4629      	mov	r1, r5
 802712a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802712e:	f7d9 f89d 	bl	800026c <__aeabi_dsub>
 8027132:	2200      	movs	r2, #0
 8027134:	4b1f      	ldr	r3, [pc, #124]	; (80271b4 <__ieee754_rem_pio2+0x404>)
 8027136:	f7d9 fa51 	bl	80005dc <__aeabi_dmul>
 802713a:	460d      	mov	r5, r1
 802713c:	4604      	mov	r4, r0
 802713e:	f7d9 fcfd 	bl	8000b3c <__aeabi_d2iz>
 8027142:	f7d9 f9e1 	bl	8000508 <__aeabi_i2d>
 8027146:	4602      	mov	r2, r0
 8027148:	460b      	mov	r3, r1
 802714a:	4620      	mov	r0, r4
 802714c:	4629      	mov	r1, r5
 802714e:	2400      	movs	r4, #0
 8027150:	2500      	movs	r5, #0
 8027152:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8027156:	f7d9 f889 	bl	800026c <__aeabi_dsub>
 802715a:	2200      	movs	r2, #0
 802715c:	4b15      	ldr	r3, [pc, #84]	; (80271b4 <__ieee754_rem_pio2+0x404>)
 802715e:	f7d9 fa3d 	bl	80005dc <__aeabi_dmul>
 8027162:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8027166:	4622      	mov	r2, r4
 8027168:	462b      	mov	r3, r5
 802716a:	46b9      	mov	r9, r7
 802716c:	3f01      	subs	r7, #1
 802716e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8027172:	f7d9 fc9b 	bl	8000aac <__aeabi_dcmpeq>
 8027176:	2800      	cmp	r0, #0
 8027178:	d1f5      	bne.n	8027166 <__ieee754_rem_pio2+0x3b6>
 802717a:	4b0f      	ldr	r3, [pc, #60]	; (80271b8 <__ieee754_rem_pio2+0x408>)
 802717c:	4632      	mov	r2, r6
 802717e:	4651      	mov	r1, sl
 8027180:	a804      	add	r0, sp, #16
 8027182:	9301      	str	r3, [sp, #4]
 8027184:	2302      	movs	r3, #2
 8027186:	9300      	str	r3, [sp, #0]
 8027188:	464b      	mov	r3, r9
 802718a:	f000 fcfd 	bl	8027b88 <__kernel_rem_pio2>
 802718e:	9b02      	ldr	r3, [sp, #8]
 8027190:	4683      	mov	fp, r0
 8027192:	2b00      	cmp	r3, #0
 8027194:	f6bf ae4c 	bge.w	8026e30 <__ieee754_rem_pio2+0x80>
 8027198:	e9da 2100 	ldrd	r2, r1, [sl]
 802719c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80271a0:	e9ca 2300 	strd	r2, r3, [sl]
 80271a4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80271a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80271ac:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80271b0:	e73f      	b.n	8027032 <__ieee754_rem_pio2+0x282>
 80271b2:	bf00      	nop
 80271b4:	41700000 	.word	0x41700000
 80271b8:	080299f0 	.word	0x080299f0

080271bc <fabs>:
 80271bc:	ec51 0b10 	vmov	r0, r1, d0
 80271c0:	ee10 2a10 	vmov	r2, s0
 80271c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80271c8:	ec43 2b10 	vmov	d0, r2, r3
 80271cc:	4770      	bx	lr
	...

080271d0 <__kernel_cosf>:
 80271d0:	ee10 3a10 	vmov	r3, s0
 80271d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80271d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80271dc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80271e0:	da05      	bge.n	80271ee <__kernel_cosf+0x1e>
 80271e2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80271e6:	ee17 2a90 	vmov	r2, s15
 80271ea:	2a00      	cmp	r2, #0
 80271ec:	d03b      	beq.n	8027266 <__kernel_cosf+0x96>
 80271ee:	ee20 7a00 	vmul.f32	s14, s0, s0
 80271f2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 802726c <__kernel_cosf+0x9c>
 80271f6:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8027270 <__kernel_cosf+0xa0>
 80271fa:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80271fe:	4a1d      	ldr	r2, [pc, #116]	; (8027274 <__kernel_cosf+0xa4>)
 8027200:	eea7 6a27 	vfma.f32	s12, s14, s15
 8027204:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8027278 <__kernel_cosf+0xa8>
 8027208:	4293      	cmp	r3, r2
 802720a:	eee6 7a07 	vfma.f32	s15, s12, s14
 802720e:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 802727c <__kernel_cosf+0xac>
 8027212:	eea7 6a87 	vfma.f32	s12, s15, s14
 8027216:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8027280 <__kernel_cosf+0xb0>
 802721a:	eee6 7a07 	vfma.f32	s15, s12, s14
 802721e:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8027284 <__kernel_cosf+0xb4>
 8027222:	eea7 6a87 	vfma.f32	s12, s15, s14
 8027226:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802722a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802722e:	ee26 6a07 	vmul.f32	s12, s12, s14
 8027232:	eee7 0a06 	vfma.f32	s1, s14, s12
 8027236:	dc04      	bgt.n	8027242 <__kernel_cosf+0x72>
 8027238:	ee77 7ae0 	vsub.f32	s15, s15, s1
 802723c:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8027240:	4770      	bx	lr
 8027242:	4a11      	ldr	r2, [pc, #68]	; (8027288 <__kernel_cosf+0xb8>)
 8027244:	4293      	cmp	r3, r2
 8027246:	bfd6      	itet	le
 8027248:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 802724c:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8027250:	ee07 3a10 	vmovle	s14, r3
 8027254:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027258:	ee36 0ac7 	vsub.f32	s0, s13, s14
 802725c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8027260:	ee30 0a67 	vsub.f32	s0, s0, s15
 8027264:	4770      	bx	lr
 8027266:	eeb0 0a66 	vmov.f32	s0, s13
 802726a:	4770      	bx	lr
 802726c:	ad47d74e 	.word	0xad47d74e
 8027270:	310f74f6 	.word	0x310f74f6
 8027274:	3e999999 	.word	0x3e999999
 8027278:	b493f27c 	.word	0xb493f27c
 802727c:	37d00d01 	.word	0x37d00d01
 8027280:	bab60b61 	.word	0xbab60b61
 8027284:	3d2aaaab 	.word	0x3d2aaaab
 8027288:	3f480000 	.word	0x3f480000

0802728c <__kernel_sinf>:
 802728c:	ee10 3a10 	vmov	r3, s0
 8027290:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8027294:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8027298:	da04      	bge.n	80272a4 <__kernel_sinf+0x18>
 802729a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802729e:	ee17 3a90 	vmov	r3, s15
 80272a2:	b35b      	cbz	r3, 80272fc <__kernel_sinf+0x70>
 80272a4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80272a8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8027300 <__kernel_sinf+0x74>
 80272ac:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8027304 <__kernel_sinf+0x78>
 80272b0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80272b4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8027308 <__kernel_sinf+0x7c>
 80272b8:	ee60 6a07 	vmul.f32	s13, s0, s14
 80272bc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80272c0:	ed9f 6a12 	vldr	s12, [pc, #72]	; 802730c <__kernel_sinf+0x80>
 80272c4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80272c8:	eddf 7a11 	vldr	s15, [pc, #68]	; 8027310 <__kernel_sinf+0x84>
 80272cc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80272d0:	b930      	cbnz	r0, 80272e0 <__kernel_sinf+0x54>
 80272d2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8027314 <__kernel_sinf+0x88>
 80272d6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80272da:	eea6 0a26 	vfma.f32	s0, s12, s13
 80272de:	4770      	bx	lr
 80272e0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80272e4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80272e8:	eee0 7a86 	vfma.f32	s15, s1, s12
 80272ec:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80272f0:	eddf 7a09 	vldr	s15, [pc, #36]	; 8027318 <__kernel_sinf+0x8c>
 80272f4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80272f8:	ee30 0a60 	vsub.f32	s0, s0, s1
 80272fc:	4770      	bx	lr
 80272fe:	bf00      	nop
 8027300:	2f2ec9d3 	.word	0x2f2ec9d3
 8027304:	b2d72f34 	.word	0xb2d72f34
 8027308:	3638ef1b 	.word	0x3638ef1b
 802730c:	b9500d01 	.word	0xb9500d01
 8027310:	3c088889 	.word	0x3c088889
 8027314:	be2aaaab 	.word	0xbe2aaaab
 8027318:	3e2aaaab 	.word	0x3e2aaaab

0802731c <__ieee754_atan2f>:
 802731c:	ee10 2a90 	vmov	r2, s1
 8027320:	eef0 7a40 	vmov.f32	s15, s0
 8027324:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8027328:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802732c:	b510      	push	{r4, lr}
 802732e:	dc06      	bgt.n	802733e <__ieee754_atan2f+0x22>
 8027330:	ee10 0a10 	vmov	r0, s0
 8027334:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8027338:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802733c:	dd04      	ble.n	8027348 <__ieee754_atan2f+0x2c>
 802733e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8027342:	eeb0 0a67 	vmov.f32	s0, s15
 8027346:	bd10      	pop	{r4, pc}
 8027348:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 802734c:	d103      	bne.n	8027356 <__ieee754_atan2f+0x3a>
 802734e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027352:	f000 b9ab 	b.w	80276ac <atanf>
 8027356:	1794      	asrs	r4, r2, #30
 8027358:	f004 0402 	and.w	r4, r4, #2
 802735c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8027360:	b93b      	cbnz	r3, 8027372 <__ieee754_atan2f+0x56>
 8027362:	2c02      	cmp	r4, #2
 8027364:	d05c      	beq.n	8027420 <__ieee754_atan2f+0x104>
 8027366:	2c03      	cmp	r4, #3
 8027368:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8027434 <__ieee754_atan2f+0x118>
 802736c:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8027370:	e7e7      	b.n	8027342 <__ieee754_atan2f+0x26>
 8027372:	b939      	cbnz	r1, 8027384 <__ieee754_atan2f+0x68>
 8027374:	2800      	cmp	r0, #0
 8027376:	eddf 7a30 	vldr	s15, [pc, #192]	; 8027438 <__ieee754_atan2f+0x11c>
 802737a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 802743c <__ieee754_atan2f+0x120>
 802737e:	fe67 7a87 	vselge.f32	s15, s15, s14
 8027382:	e7de      	b.n	8027342 <__ieee754_atan2f+0x26>
 8027384:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8027388:	d110      	bne.n	80273ac <__ieee754_atan2f+0x90>
 802738a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802738e:	f104 34ff 	add.w	r4, r4, #4294967295
 8027392:	d107      	bne.n	80273a4 <__ieee754_atan2f+0x88>
 8027394:	2c02      	cmp	r4, #2
 8027396:	d846      	bhi.n	8027426 <__ieee754_atan2f+0x10a>
 8027398:	4b29      	ldr	r3, [pc, #164]	; (8027440 <__ieee754_atan2f+0x124>)
 802739a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802739e:	edd3 7a00 	vldr	s15, [r3]
 80273a2:	e7ce      	b.n	8027342 <__ieee754_atan2f+0x26>
 80273a4:	2c02      	cmp	r4, #2
 80273a6:	d841      	bhi.n	802742c <__ieee754_atan2f+0x110>
 80273a8:	4b26      	ldr	r3, [pc, #152]	; (8027444 <__ieee754_atan2f+0x128>)
 80273aa:	e7f6      	b.n	802739a <__ieee754_atan2f+0x7e>
 80273ac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80273b0:	d0e0      	beq.n	8027374 <__ieee754_atan2f+0x58>
 80273b2:	1a5b      	subs	r3, r3, r1
 80273b4:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80273b8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80273bc:	da1a      	bge.n	80273f4 <__ieee754_atan2f+0xd8>
 80273be:	2a00      	cmp	r2, #0
 80273c0:	da01      	bge.n	80273c6 <__ieee754_atan2f+0xaa>
 80273c2:	313c      	adds	r1, #60	; 0x3c
 80273c4:	db19      	blt.n	80273fa <__ieee754_atan2f+0xde>
 80273c6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80273ca:	f000 fa43 	bl	8027854 <fabsf>
 80273ce:	f000 f96d 	bl	80276ac <atanf>
 80273d2:	eef0 7a40 	vmov.f32	s15, s0
 80273d6:	2c01      	cmp	r4, #1
 80273d8:	d012      	beq.n	8027400 <__ieee754_atan2f+0xe4>
 80273da:	2c02      	cmp	r4, #2
 80273dc:	d017      	beq.n	802740e <__ieee754_atan2f+0xf2>
 80273de:	2c00      	cmp	r4, #0
 80273e0:	d0af      	beq.n	8027342 <__ieee754_atan2f+0x26>
 80273e2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8027448 <__ieee754_atan2f+0x12c>
 80273e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80273ea:	ed9f 7a18 	vldr	s14, [pc, #96]	; 802744c <__ieee754_atan2f+0x130>
 80273ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80273f2:	e7a6      	b.n	8027342 <__ieee754_atan2f+0x26>
 80273f4:	eddf 7a10 	vldr	s15, [pc, #64]	; 8027438 <__ieee754_atan2f+0x11c>
 80273f8:	e7ed      	b.n	80273d6 <__ieee754_atan2f+0xba>
 80273fa:	eddf 7a15 	vldr	s15, [pc, #84]	; 8027450 <__ieee754_atan2f+0x134>
 80273fe:	e7ea      	b.n	80273d6 <__ieee754_atan2f+0xba>
 8027400:	ee17 3a90 	vmov	r3, s15
 8027404:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8027408:	ee07 3a90 	vmov	s15, r3
 802740c:	e799      	b.n	8027342 <__ieee754_atan2f+0x26>
 802740e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8027448 <__ieee754_atan2f+0x12c>
 8027412:	ee77 7a87 	vadd.f32	s15, s15, s14
 8027416:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 802744c <__ieee754_atan2f+0x130>
 802741a:	ee77 7a67 	vsub.f32	s15, s14, s15
 802741e:	e790      	b.n	8027342 <__ieee754_atan2f+0x26>
 8027420:	eddf 7a0a 	vldr	s15, [pc, #40]	; 802744c <__ieee754_atan2f+0x130>
 8027424:	e78d      	b.n	8027342 <__ieee754_atan2f+0x26>
 8027426:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8027454 <__ieee754_atan2f+0x138>
 802742a:	e78a      	b.n	8027342 <__ieee754_atan2f+0x26>
 802742c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8027450 <__ieee754_atan2f+0x134>
 8027430:	e787      	b.n	8027342 <__ieee754_atan2f+0x26>
 8027432:	bf00      	nop
 8027434:	c0490fdb 	.word	0xc0490fdb
 8027438:	3fc90fdb 	.word	0x3fc90fdb
 802743c:	bfc90fdb 	.word	0xbfc90fdb
 8027440:	08029af8 	.word	0x08029af8
 8027444:	08029b04 	.word	0x08029b04
 8027448:	33bbbd2e 	.word	0x33bbbd2e
 802744c:	40490fdb 	.word	0x40490fdb
 8027450:	00000000 	.word	0x00000000
 8027454:	3f490fdb 	.word	0x3f490fdb

08027458 <__ieee754_rem_pio2f>:
 8027458:	b5f0      	push	{r4, r5, r6, r7, lr}
 802745a:	ee10 6a10 	vmov	r6, s0
 802745e:	4b85      	ldr	r3, [pc, #532]	; (8027674 <__ieee754_rem_pio2f+0x21c>)
 8027460:	b087      	sub	sp, #28
 8027462:	4604      	mov	r4, r0
 8027464:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8027468:	429d      	cmp	r5, r3
 802746a:	dc05      	bgt.n	8027478 <__ieee754_rem_pio2f+0x20>
 802746c:	2300      	movs	r3, #0
 802746e:	ed80 0a00 	vstr	s0, [r0]
 8027472:	6043      	str	r3, [r0, #4]
 8027474:	2000      	movs	r0, #0
 8027476:	e020      	b.n	80274ba <__ieee754_rem_pio2f+0x62>
 8027478:	4b7f      	ldr	r3, [pc, #508]	; (8027678 <__ieee754_rem_pio2f+0x220>)
 802747a:	429d      	cmp	r5, r3
 802747c:	dc38      	bgt.n	80274f0 <__ieee754_rem_pio2f+0x98>
 802747e:	2e00      	cmp	r6, #0
 8027480:	f025 050f 	bic.w	r5, r5, #15
 8027484:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 802767c <__ieee754_rem_pio2f+0x224>
 8027488:	4b7d      	ldr	r3, [pc, #500]	; (8027680 <__ieee754_rem_pio2f+0x228>)
 802748a:	dd18      	ble.n	80274be <__ieee754_rem_pio2f+0x66>
 802748c:	429d      	cmp	r5, r3
 802748e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8027492:	bf09      	itett	eq
 8027494:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8027684 <__ieee754_rem_pio2f+0x22c>
 8027498:	ed9f 7a7b 	vldrne	s14, [pc, #492]	; 8027688 <__ieee754_rem_pio2f+0x230>
 802749c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80274a0:	ed9f 7a7a 	vldreq	s14, [pc, #488]	; 802768c <__ieee754_rem_pio2f+0x234>
 80274a4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80274a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80274ac:	edc0 6a00 	vstr	s13, [r0]
 80274b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80274b4:	edc0 7a01 	vstr	s15, [r0, #4]
 80274b8:	2001      	movs	r0, #1
 80274ba:	b007      	add	sp, #28
 80274bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80274be:	429d      	cmp	r5, r3
 80274c0:	ee70 7a07 	vadd.f32	s15, s0, s14
 80274c4:	bf09      	itett	eq
 80274c6:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8027684 <__ieee754_rem_pio2f+0x22c>
 80274ca:	ed9f 7a6f 	vldrne	s14, [pc, #444]	; 8027688 <__ieee754_rem_pio2f+0x230>
 80274ce:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80274d2:	ed9f 7a6e 	vldreq	s14, [pc, #440]	; 802768c <__ieee754_rem_pio2f+0x234>
 80274d6:	ee77 6a87 	vadd.f32	s13, s15, s14
 80274da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80274de:	edc0 6a00 	vstr	s13, [r0]
 80274e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80274e6:	edc0 7a01 	vstr	s15, [r0, #4]
 80274ea:	f04f 30ff 	mov.w	r0, #4294967295
 80274ee:	e7e4      	b.n	80274ba <__ieee754_rem_pio2f+0x62>
 80274f0:	4b67      	ldr	r3, [pc, #412]	; (8027690 <__ieee754_rem_pio2f+0x238>)
 80274f2:	429d      	cmp	r5, r3
 80274f4:	dc70      	bgt.n	80275d8 <__ieee754_rem_pio2f+0x180>
 80274f6:	f000 f9ad 	bl	8027854 <fabsf>
 80274fa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80274fe:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8027694 <__ieee754_rem_pio2f+0x23c>
 8027502:	eee0 7a07 	vfma.f32	s15, s0, s14
 8027506:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802750a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802750e:	ee17 0a90 	vmov	r0, s15
 8027512:	eddf 7a5a 	vldr	s15, [pc, #360]	; 802767c <__ieee754_rem_pio2f+0x224>
 8027516:	281f      	cmp	r0, #31
 8027518:	eea7 0a67 	vfms.f32	s0, s14, s15
 802751c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8027688 <__ieee754_rem_pio2f+0x230>
 8027520:	eeb1 6a47 	vneg.f32	s12, s14
 8027524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8027528:	ee70 6a67 	vsub.f32	s13, s0, s15
 802752c:	ee16 2a90 	vmov	r2, s13
 8027530:	dc1c      	bgt.n	802756c <__ieee754_rem_pio2f+0x114>
 8027532:	1e47      	subs	r7, r0, #1
 8027534:	4958      	ldr	r1, [pc, #352]	; (8027698 <__ieee754_rem_pio2f+0x240>)
 8027536:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 802753a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802753e:	428b      	cmp	r3, r1
 8027540:	d014      	beq.n	802756c <__ieee754_rem_pio2f+0x114>
 8027542:	6022      	str	r2, [r4, #0]
 8027544:	ed94 7a00 	vldr	s14, [r4]
 8027548:	2e00      	cmp	r6, #0
 802754a:	ee30 0a47 	vsub.f32	s0, s0, s14
 802754e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8027552:	ed84 0a01 	vstr	s0, [r4, #4]
 8027556:	dab0      	bge.n	80274ba <__ieee754_rem_pio2f+0x62>
 8027558:	eeb1 7a47 	vneg.f32	s14, s14
 802755c:	eeb1 0a40 	vneg.f32	s0, s0
 8027560:	ed84 7a00 	vstr	s14, [r4]
 8027564:	ed84 0a01 	vstr	s0, [r4, #4]
 8027568:	4240      	negs	r0, r0
 802756a:	e7a6      	b.n	80274ba <__ieee754_rem_pio2f+0x62>
 802756c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8027570:	15eb      	asrs	r3, r5, #23
 8027572:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8027576:	2908      	cmp	r1, #8
 8027578:	dde3      	ble.n	8027542 <__ieee754_rem_pio2f+0xea>
 802757a:	eef0 6a40 	vmov.f32	s13, s0
 802757e:	eddf 5a41 	vldr	s11, [pc, #260]	; 8027684 <__ieee754_rem_pio2f+0x22c>
 8027582:	eee6 6a25 	vfma.f32	s13, s12, s11
 8027586:	ee70 7a66 	vsub.f32	s15, s0, s13
 802758a:	eee6 7a25 	vfma.f32	s15, s12, s11
 802758e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 802768c <__ieee754_rem_pio2f+0x234>
 8027592:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8027596:	ee76 5ae7 	vsub.f32	s11, s13, s15
 802759a:	ee15 2a90 	vmov	r2, s11
 802759e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80275a2:	1a5b      	subs	r3, r3, r1
 80275a4:	2b19      	cmp	r3, #25
 80275a6:	dc04      	bgt.n	80275b2 <__ieee754_rem_pio2f+0x15a>
 80275a8:	eeb0 0a66 	vmov.f32	s0, s13
 80275ac:	edc4 5a00 	vstr	s11, [r4]
 80275b0:	e7c8      	b.n	8027544 <__ieee754_rem_pio2f+0xec>
 80275b2:	eeb0 0a66 	vmov.f32	s0, s13
 80275b6:	eddf 5a39 	vldr	s11, [pc, #228]	; 802769c <__ieee754_rem_pio2f+0x244>
 80275ba:	eea6 0a25 	vfma.f32	s0, s12, s11
 80275be:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80275c2:	eddf 6a37 	vldr	s13, [pc, #220]	; 80276a0 <__ieee754_rem_pio2f+0x248>
 80275c6:	eee6 7a25 	vfma.f32	s15, s12, s11
 80275ca:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80275ce:	ee30 7a67 	vsub.f32	s14, s0, s15
 80275d2:	ed84 7a00 	vstr	s14, [r4]
 80275d6:	e7b5      	b.n	8027544 <__ieee754_rem_pio2f+0xec>
 80275d8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80275dc:	db06      	blt.n	80275ec <__ieee754_rem_pio2f+0x194>
 80275de:	ee70 7a40 	vsub.f32	s15, s0, s0
 80275e2:	edc0 7a01 	vstr	s15, [r0, #4]
 80275e6:	edc0 7a00 	vstr	s15, [r0]
 80275ea:	e743      	b.n	8027474 <__ieee754_rem_pio2f+0x1c>
 80275ec:	15ea      	asrs	r2, r5, #23
 80275ee:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80276a4 <__ieee754_rem_pio2f+0x24c>
 80275f2:	3a86      	subs	r2, #134	; 0x86
 80275f4:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80275f8:	ee07 3a90 	vmov	s15, r3
 80275fc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8027600:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8027604:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8027608:	ed8d 7a03 	vstr	s14, [sp, #12]
 802760c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8027610:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8027614:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8027618:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802761c:	ed8d 7a04 	vstr	s14, [sp, #16]
 8027620:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8027624:	eef5 7a40 	vcmp.f32	s15, #0.0
 8027628:	edcd 7a05 	vstr	s15, [sp, #20]
 802762c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027630:	d11e      	bne.n	8027670 <__ieee754_rem_pio2f+0x218>
 8027632:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8027636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802763a:	bf14      	ite	ne
 802763c:	2302      	movne	r3, #2
 802763e:	2301      	moveq	r3, #1
 8027640:	4919      	ldr	r1, [pc, #100]	; (80276a8 <__ieee754_rem_pio2f+0x250>)
 8027642:	a803      	add	r0, sp, #12
 8027644:	9101      	str	r1, [sp, #4]
 8027646:	2102      	movs	r1, #2
 8027648:	9100      	str	r1, [sp, #0]
 802764a:	4621      	mov	r1, r4
 802764c:	f000 fdee 	bl	802822c <__kernel_rem_pio2f>
 8027650:	2e00      	cmp	r6, #0
 8027652:	f6bf af32 	bge.w	80274ba <__ieee754_rem_pio2f+0x62>
 8027656:	edd4 7a00 	vldr	s15, [r4]
 802765a:	eef1 7a67 	vneg.f32	s15, s15
 802765e:	edc4 7a00 	vstr	s15, [r4]
 8027662:	edd4 7a01 	vldr	s15, [r4, #4]
 8027666:	eef1 7a67 	vneg.f32	s15, s15
 802766a:	edc4 7a01 	vstr	s15, [r4, #4]
 802766e:	e77b      	b.n	8027568 <__ieee754_rem_pio2f+0x110>
 8027670:	2303      	movs	r3, #3
 8027672:	e7e5      	b.n	8027640 <__ieee754_rem_pio2f+0x1e8>
 8027674:	3f490fd8 	.word	0x3f490fd8
 8027678:	4016cbe3 	.word	0x4016cbe3
 802767c:	3fc90f80 	.word	0x3fc90f80
 8027680:	3fc90fd0 	.word	0x3fc90fd0
 8027684:	37354400 	.word	0x37354400
 8027688:	37354443 	.word	0x37354443
 802768c:	2e85a308 	.word	0x2e85a308
 8027690:	43490f80 	.word	0x43490f80
 8027694:	3f22f984 	.word	0x3f22f984
 8027698:	08029b10 	.word	0x08029b10
 802769c:	2e85a300 	.word	0x2e85a300
 80276a0:	248d3132 	.word	0x248d3132
 80276a4:	43800000 	.word	0x43800000
 80276a8:	08029b90 	.word	0x08029b90

080276ac <atanf>:
 80276ac:	b538      	push	{r3, r4, r5, lr}
 80276ae:	ee10 5a10 	vmov	r5, s0
 80276b2:	eef0 7a40 	vmov.f32	s15, s0
 80276b6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80276ba:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80276be:	db0f      	blt.n	80276e0 <atanf+0x34>
 80276c0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80276c4:	dd04      	ble.n	80276d0 <atanf+0x24>
 80276c6:	ee70 7a00 	vadd.f32	s15, s0, s0
 80276ca:	eeb0 0a67 	vmov.f32	s0, s15
 80276ce:	bd38      	pop	{r3, r4, r5, pc}
 80276d0:	2d00      	cmp	r5, #0
 80276d2:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8027808 <atanf+0x15c>
 80276d6:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 802780c <atanf+0x160>
 80276da:	fe77 7a87 	vselgt.f32	s15, s15, s14
 80276de:	e7f4      	b.n	80276ca <atanf+0x1e>
 80276e0:	4b4b      	ldr	r3, [pc, #300]	; (8027810 <atanf+0x164>)
 80276e2:	429c      	cmp	r4, r3
 80276e4:	dc10      	bgt.n	8027708 <atanf+0x5c>
 80276e6:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80276ea:	da0a      	bge.n	8027702 <atanf+0x56>
 80276ec:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8027814 <atanf+0x168>
 80276f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80276f4:	ee30 7a07 	vadd.f32	s14, s0, s14
 80276f8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80276fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027700:	dce3      	bgt.n	80276ca <atanf+0x1e>
 8027702:	f04f 33ff 	mov.w	r3, #4294967295
 8027706:	e013      	b.n	8027730 <atanf+0x84>
 8027708:	f000 f8a4 	bl	8027854 <fabsf>
 802770c:	4b42      	ldr	r3, [pc, #264]	; (8027818 <atanf+0x16c>)
 802770e:	429c      	cmp	r4, r3
 8027710:	dc4f      	bgt.n	80277b2 <atanf+0x106>
 8027712:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8027716:	429c      	cmp	r4, r3
 8027718:	dc41      	bgt.n	802779e <atanf+0xf2>
 802771a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 802771e:	2300      	movs	r3, #0
 8027720:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8027724:	eea0 7a27 	vfma.f32	s14, s0, s15
 8027728:	ee30 0a27 	vadd.f32	s0, s0, s15
 802772c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027730:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 802781c <atanf+0x170>
 8027734:	1c5a      	adds	r2, r3, #1
 8027736:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8027820 <atanf+0x174>
 802773a:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8027824 <atanf+0x178>
 802773e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8027742:	ee66 6a06 	vmul.f32	s13, s12, s12
 8027746:	eee6 5a87 	vfma.f32	s11, s13, s14
 802774a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8027828 <atanf+0x17c>
 802774e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8027752:	eddf 5a36 	vldr	s11, [pc, #216]	; 802782c <atanf+0x180>
 8027756:	eee7 5a26 	vfma.f32	s11, s14, s13
 802775a:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8027830 <atanf+0x184>
 802775e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8027762:	eddf 5a34 	vldr	s11, [pc, #208]	; 8027834 <atanf+0x188>
 8027766:	eee7 5a26 	vfma.f32	s11, s14, s13
 802776a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8027838 <atanf+0x18c>
 802776e:	eea6 5a87 	vfma.f32	s10, s13, s14
 8027772:	ed9f 7a32 	vldr	s14, [pc, #200]	; 802783c <atanf+0x190>
 8027776:	eea5 7a26 	vfma.f32	s14, s10, s13
 802777a:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8027840 <atanf+0x194>
 802777e:	eea7 5a26 	vfma.f32	s10, s14, s13
 8027782:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8027844 <atanf+0x198>
 8027786:	eea5 7a26 	vfma.f32	s14, s10, s13
 802778a:	ee27 7a26 	vmul.f32	s14, s14, s13
 802778e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8027792:	ee27 7a87 	vmul.f32	s14, s15, s14
 8027796:	d121      	bne.n	80277dc <atanf+0x130>
 8027798:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802779c:	e795      	b.n	80276ca <atanf+0x1e>
 802779e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80277a2:	2301      	movs	r3, #1
 80277a4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80277a8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80277ac:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80277b0:	e7be      	b.n	8027730 <atanf+0x84>
 80277b2:	4b25      	ldr	r3, [pc, #148]	; (8027848 <atanf+0x19c>)
 80277b4:	429c      	cmp	r4, r3
 80277b6:	dc0b      	bgt.n	80277d0 <atanf+0x124>
 80277b8:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80277bc:	2302      	movs	r3, #2
 80277be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80277c2:	ee70 6a67 	vsub.f32	s13, s0, s15
 80277c6:	eea0 7a27 	vfma.f32	s14, s0, s15
 80277ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80277ce:	e7af      	b.n	8027730 <atanf+0x84>
 80277d0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80277d4:	2303      	movs	r3, #3
 80277d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80277da:	e7a9      	b.n	8027730 <atanf+0x84>
 80277dc:	4a1b      	ldr	r2, [pc, #108]	; (802784c <atanf+0x1a0>)
 80277de:	2d00      	cmp	r5, #0
 80277e0:	491b      	ldr	r1, [pc, #108]	; (8027850 <atanf+0x1a4>)
 80277e2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80277e6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80277ea:	edd3 6a00 	vldr	s13, [r3]
 80277ee:	ee37 7a66 	vsub.f32	s14, s14, s13
 80277f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80277f6:	edd2 7a00 	vldr	s15, [r2]
 80277fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80277fe:	bfb8      	it	lt
 8027800:	eef1 7a67 	vneglt.f32	s15, s15
 8027804:	e761      	b.n	80276ca <atanf+0x1e>
 8027806:	bf00      	nop
 8027808:	3fc90fdb 	.word	0x3fc90fdb
 802780c:	bfc90fdb 	.word	0xbfc90fdb
 8027810:	3edfffff 	.word	0x3edfffff
 8027814:	7149f2ca 	.word	0x7149f2ca
 8027818:	3f97ffff 	.word	0x3f97ffff
 802781c:	3c8569d7 	.word	0x3c8569d7
 8027820:	3d4bda59 	.word	0x3d4bda59
 8027824:	bd6ef16b 	.word	0xbd6ef16b
 8027828:	3d886b35 	.word	0x3d886b35
 802782c:	3dba2e6e 	.word	0x3dba2e6e
 8027830:	3e124925 	.word	0x3e124925
 8027834:	3eaaaaab 	.word	0x3eaaaaab
 8027838:	bd15a221 	.word	0xbd15a221
 802783c:	bd9d8795 	.word	0xbd9d8795
 8027840:	bde38e38 	.word	0xbde38e38
 8027844:	be4ccccd 	.word	0xbe4ccccd
 8027848:	401bffff 	.word	0x401bffff
 802784c:	08029ea8 	.word	0x08029ea8
 8027850:	08029eb8 	.word	0x08029eb8

08027854 <fabsf>:
 8027854:	ee10 3a10 	vmov	r3, s0
 8027858:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802785c:	ee00 3a10 	vmov	s0, r3
 8027860:	4770      	bx	lr
 8027862:	0000      	movs	r0, r0
 8027864:	0000      	movs	r0, r0
	...

08027868 <scalbn>:
 8027868:	b570      	push	{r4, r5, r6, lr}
 802786a:	ec55 4b10 	vmov	r4, r5, d0
 802786e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8027872:	4606      	mov	r6, r0
 8027874:	462b      	mov	r3, r5
 8027876:	b999      	cbnz	r1, 80278a0 <scalbn+0x38>
 8027878:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802787c:	4323      	orrs	r3, r4
 802787e:	d03f      	beq.n	8027900 <scalbn+0x98>
 8027880:	4b35      	ldr	r3, [pc, #212]	; (8027958 <scalbn+0xf0>)
 8027882:	4629      	mov	r1, r5
 8027884:	2200      	movs	r2, #0
 8027886:	ee10 0a10 	vmov	r0, s0
 802788a:	f7d8 fea7 	bl	80005dc <__aeabi_dmul>
 802788e:	4b33      	ldr	r3, [pc, #204]	; (802795c <scalbn+0xf4>)
 8027890:	4604      	mov	r4, r0
 8027892:	460d      	mov	r5, r1
 8027894:	429e      	cmp	r6, r3
 8027896:	da10      	bge.n	80278ba <scalbn+0x52>
 8027898:	a327      	add	r3, pc, #156	; (adr r3, 8027938 <scalbn+0xd0>)
 802789a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802789e:	e01f      	b.n	80278e0 <scalbn+0x78>
 80278a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80278a4:	4291      	cmp	r1, r2
 80278a6:	d10c      	bne.n	80278c2 <scalbn+0x5a>
 80278a8:	ee10 2a10 	vmov	r2, s0
 80278ac:	4620      	mov	r0, r4
 80278ae:	4629      	mov	r1, r5
 80278b0:	f7d8 fcde 	bl	8000270 <__adddf3>
 80278b4:	4604      	mov	r4, r0
 80278b6:	460d      	mov	r5, r1
 80278b8:	e022      	b.n	8027900 <scalbn+0x98>
 80278ba:	460b      	mov	r3, r1
 80278bc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80278c0:	3936      	subs	r1, #54	; 0x36
 80278c2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80278c6:	4296      	cmp	r6, r2
 80278c8:	dd0d      	ble.n	80278e6 <scalbn+0x7e>
 80278ca:	2d00      	cmp	r5, #0
 80278cc:	a11c      	add	r1, pc, #112	; (adr r1, 8027940 <scalbn+0xd8>)
 80278ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80278d2:	da02      	bge.n	80278da <scalbn+0x72>
 80278d4:	a11c      	add	r1, pc, #112	; (adr r1, 8027948 <scalbn+0xe0>)
 80278d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80278da:	a319      	add	r3, pc, #100	; (adr r3, 8027940 <scalbn+0xd8>)
 80278dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80278e0:	f7d8 fe7c 	bl	80005dc <__aeabi_dmul>
 80278e4:	e7e6      	b.n	80278b4 <scalbn+0x4c>
 80278e6:	1872      	adds	r2, r6, r1
 80278e8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80278ec:	428a      	cmp	r2, r1
 80278ee:	dcec      	bgt.n	80278ca <scalbn+0x62>
 80278f0:	2a00      	cmp	r2, #0
 80278f2:	dd08      	ble.n	8027906 <scalbn+0x9e>
 80278f4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80278f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80278fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8027900:	ec45 4b10 	vmov	d0, r4, r5
 8027904:	bd70      	pop	{r4, r5, r6, pc}
 8027906:	f112 0f35 	cmn.w	r2, #53	; 0x35
 802790a:	da08      	bge.n	802791e <scalbn+0xb6>
 802790c:	2d00      	cmp	r5, #0
 802790e:	a10a      	add	r1, pc, #40	; (adr r1, 8027938 <scalbn+0xd0>)
 8027910:	e9d1 0100 	ldrd	r0, r1, [r1]
 8027914:	dac0      	bge.n	8027898 <scalbn+0x30>
 8027916:	a10e      	add	r1, pc, #56	; (adr r1, 8027950 <scalbn+0xe8>)
 8027918:	e9d1 0100 	ldrd	r0, r1, [r1]
 802791c:	e7bc      	b.n	8027898 <scalbn+0x30>
 802791e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8027922:	3236      	adds	r2, #54	; 0x36
 8027924:	4620      	mov	r0, r4
 8027926:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802792a:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 802792e:	2200      	movs	r2, #0
 8027930:	4b0b      	ldr	r3, [pc, #44]	; (8027960 <scalbn+0xf8>)
 8027932:	e7d5      	b.n	80278e0 <scalbn+0x78>
 8027934:	f3af 8000 	nop.w
 8027938:	c2f8f359 	.word	0xc2f8f359
 802793c:	01a56e1f 	.word	0x01a56e1f
 8027940:	8800759c 	.word	0x8800759c
 8027944:	7e37e43c 	.word	0x7e37e43c
 8027948:	8800759c 	.word	0x8800759c
 802794c:	fe37e43c 	.word	0xfe37e43c
 8027950:	c2f8f359 	.word	0xc2f8f359
 8027954:	81a56e1f 	.word	0x81a56e1f
 8027958:	43500000 	.word	0x43500000
 802795c:	ffff3cb0 	.word	0xffff3cb0
 8027960:	3c900000 	.word	0x3c900000

08027964 <with_errno>:
 8027964:	b570      	push	{r4, r5, r6, lr}
 8027966:	4604      	mov	r4, r0
 8027968:	460d      	mov	r5, r1
 802796a:	4616      	mov	r6, r2
 802796c:	f001 f922 	bl	8028bb4 <__errno>
 8027970:	4629      	mov	r1, r5
 8027972:	6006      	str	r6, [r0, #0]
 8027974:	4620      	mov	r0, r4
 8027976:	bd70      	pop	{r4, r5, r6, pc}

08027978 <xflow>:
 8027978:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802797a:	4614      	mov	r4, r2
 802797c:	461d      	mov	r5, r3
 802797e:	b108      	cbz	r0, 8027984 <xflow+0xc>
 8027980:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8027984:	4620      	mov	r0, r4
 8027986:	4629      	mov	r1, r5
 8027988:	e9cd 2300 	strd	r2, r3, [sp]
 802798c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8027990:	f7d8 fe24 	bl	80005dc <__aeabi_dmul>
 8027994:	2222      	movs	r2, #34	; 0x22
 8027996:	b003      	add	sp, #12
 8027998:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802799c:	f7ff bfe2 	b.w	8027964 <with_errno>

080279a0 <__math_uflow>:
 80279a0:	b508      	push	{r3, lr}
 80279a2:	2200      	movs	r2, #0
 80279a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80279a8:	f7ff ffe6 	bl	8027978 <xflow>
 80279ac:	ec41 0b10 	vmov	d0, r0, r1
 80279b0:	bd08      	pop	{r3, pc}

080279b2 <__math_oflow>:
 80279b2:	b508      	push	{r3, lr}
 80279b4:	2200      	movs	r2, #0
 80279b6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80279ba:	f7ff ffdd 	bl	8027978 <xflow>
 80279be:	ec41 0b10 	vmov	d0, r0, r1
 80279c2:	bd08      	pop	{r3, pc}

080279c4 <__ieee754_sqrt>:
 80279c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80279c8:	4e6b      	ldr	r6, [pc, #428]	; (8027b78 <__ieee754_sqrt+0x1b4>)
 80279ca:	ee10 0a10 	vmov	r0, s0
 80279ce:	ee10 2a10 	vmov	r2, s0
 80279d2:	ec55 4b10 	vmov	r4, r5, d0
 80279d6:	43ae      	bics	r6, r5
 80279d8:	4629      	mov	r1, r5
 80279da:	462b      	mov	r3, r5
 80279dc:	d10d      	bne.n	80279fa <__ieee754_sqrt+0x36>
 80279de:	f7d8 fdfd 	bl	80005dc <__aeabi_dmul>
 80279e2:	4602      	mov	r2, r0
 80279e4:	460b      	mov	r3, r1
 80279e6:	4620      	mov	r0, r4
 80279e8:	4629      	mov	r1, r5
 80279ea:	f7d8 fc41 	bl	8000270 <__adddf3>
 80279ee:	4604      	mov	r4, r0
 80279f0:	460d      	mov	r5, r1
 80279f2:	ec45 4b10 	vmov	d0, r4, r5
 80279f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80279fa:	2d00      	cmp	r5, #0
 80279fc:	dc0b      	bgt.n	8027a16 <__ieee754_sqrt+0x52>
 80279fe:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8027a02:	4326      	orrs	r6, r4
 8027a04:	d0f5      	beq.n	80279f2 <__ieee754_sqrt+0x2e>
 8027a06:	b135      	cbz	r5, 8027a16 <__ieee754_sqrt+0x52>
 8027a08:	f7d8 fc30 	bl	800026c <__aeabi_dsub>
 8027a0c:	4602      	mov	r2, r0
 8027a0e:	460b      	mov	r3, r1
 8027a10:	f7d8 ff0e 	bl	8000830 <__aeabi_ddiv>
 8027a14:	e7eb      	b.n	80279ee <__ieee754_sqrt+0x2a>
 8027a16:	1509      	asrs	r1, r1, #20
 8027a18:	f000 8091 	beq.w	8027b3e <__ieee754_sqrt+0x17a>
 8027a1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8027a20:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8027a24:	07c9      	lsls	r1, r1, #31
 8027a26:	f04f 0500 	mov.w	r5, #0
 8027a2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027a2e:	ea4f 0666 	mov.w	r6, r6, asr #1
 8027a32:	f04f 0e16 	mov.w	lr, #22
 8027a36:	46ac      	mov	ip, r5
 8027a38:	bf58      	it	pl
 8027a3a:	005b      	lslpl	r3, r3, #1
 8027a3c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8027a40:	bf5c      	itt	pl
 8027a42:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8027a46:	0052      	lslpl	r2, r2, #1
 8027a48:	005b      	lsls	r3, r3, #1
 8027a4a:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8027a4e:	0052      	lsls	r2, r2, #1
 8027a50:	eb0c 0001 	add.w	r0, ip, r1
 8027a54:	4298      	cmp	r0, r3
 8027a56:	bfde      	ittt	le
 8027a58:	1a1b      	suble	r3, r3, r0
 8027a5a:	eb00 0c01 	addle.w	ip, r0, r1
 8027a5e:	186d      	addle	r5, r5, r1
 8027a60:	f1be 0e01 	subs.w	lr, lr, #1
 8027a64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8027a68:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8027a6c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8027a70:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8027a74:	d1ec      	bne.n	8027a50 <__ieee754_sqrt+0x8c>
 8027a76:	4674      	mov	r4, lr
 8027a78:	2720      	movs	r7, #32
 8027a7a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8027a7e:	4563      	cmp	r3, ip
 8027a80:	eb01 000e 	add.w	r0, r1, lr
 8027a84:	dc02      	bgt.n	8027a8c <__ieee754_sqrt+0xc8>
 8027a86:	d114      	bne.n	8027ab2 <__ieee754_sqrt+0xee>
 8027a88:	4290      	cmp	r0, r2
 8027a8a:	d812      	bhi.n	8027ab2 <__ieee754_sqrt+0xee>
 8027a8c:	2800      	cmp	r0, #0
 8027a8e:	eb00 0e01 	add.w	lr, r0, r1
 8027a92:	da59      	bge.n	8027b48 <__ieee754_sqrt+0x184>
 8027a94:	f1be 0f00 	cmp.w	lr, #0
 8027a98:	db56      	blt.n	8027b48 <__ieee754_sqrt+0x184>
 8027a9a:	f10c 0801 	add.w	r8, ip, #1
 8027a9e:	eba3 030c 	sub.w	r3, r3, ip
 8027aa2:	4290      	cmp	r0, r2
 8027aa4:	440c      	add	r4, r1
 8027aa6:	eba2 0200 	sub.w	r2, r2, r0
 8027aaa:	bf88      	it	hi
 8027aac:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8027ab0:	46c4      	mov	ip, r8
 8027ab2:	005b      	lsls	r3, r3, #1
 8027ab4:	3f01      	subs	r7, #1
 8027ab6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8027aba:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8027abe:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8027ac2:	d1dc      	bne.n	8027a7e <__ieee754_sqrt+0xba>
 8027ac4:	4313      	orrs	r3, r2
 8027ac6:	d01b      	beq.n	8027b00 <__ieee754_sqrt+0x13c>
 8027ac8:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8027b7c <__ieee754_sqrt+0x1b8>
 8027acc:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8027b80 <__ieee754_sqrt+0x1bc>
 8027ad0:	e9da 0100 	ldrd	r0, r1, [sl]
 8027ad4:	e9db 2300 	ldrd	r2, r3, [fp]
 8027ad8:	e9da 8900 	ldrd	r8, r9, [sl]
 8027adc:	f7d8 fbc6 	bl	800026c <__aeabi_dsub>
 8027ae0:	4602      	mov	r2, r0
 8027ae2:	460b      	mov	r3, r1
 8027ae4:	4640      	mov	r0, r8
 8027ae6:	4649      	mov	r1, r9
 8027ae8:	f7d8 fff4 	bl	8000ad4 <__aeabi_dcmple>
 8027aec:	b140      	cbz	r0, 8027b00 <__ieee754_sqrt+0x13c>
 8027aee:	f1b4 3fff 	cmp.w	r4, #4294967295
 8027af2:	e9da 0100 	ldrd	r0, r1, [sl]
 8027af6:	e9db 2300 	ldrd	r2, r3, [fp]
 8027afa:	d127      	bne.n	8027b4c <__ieee754_sqrt+0x188>
 8027afc:	3501      	adds	r5, #1
 8027afe:	463c      	mov	r4, r7
 8027b00:	106a      	asrs	r2, r5, #1
 8027b02:	07e9      	lsls	r1, r5, #31
 8027b04:	ea4f 0354 	mov.w	r3, r4, lsr #1
 8027b08:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8027b0c:	bf48      	it	mi
 8027b0e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8027b12:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8027b16:	461c      	mov	r4, r3
 8027b18:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8027b1c:	e769      	b.n	80279f2 <__ieee754_sqrt+0x2e>
 8027b1e:	0ad3      	lsrs	r3, r2, #11
 8027b20:	3815      	subs	r0, #21
 8027b22:	0552      	lsls	r2, r2, #21
 8027b24:	2b00      	cmp	r3, #0
 8027b26:	d0fa      	beq.n	8027b1e <__ieee754_sqrt+0x15a>
 8027b28:	02dc      	lsls	r4, r3, #11
 8027b2a:	d50a      	bpl.n	8027b42 <__ieee754_sqrt+0x17e>
 8027b2c:	f1c1 0420 	rsb	r4, r1, #32
 8027b30:	1e4d      	subs	r5, r1, #1
 8027b32:	fa22 f404 	lsr.w	r4, r2, r4
 8027b36:	408a      	lsls	r2, r1
 8027b38:	1b41      	subs	r1, r0, r5
 8027b3a:	4323      	orrs	r3, r4
 8027b3c:	e76e      	b.n	8027a1c <__ieee754_sqrt+0x58>
 8027b3e:	4608      	mov	r0, r1
 8027b40:	e7f0      	b.n	8027b24 <__ieee754_sqrt+0x160>
 8027b42:	005b      	lsls	r3, r3, #1
 8027b44:	3101      	adds	r1, #1
 8027b46:	e7ef      	b.n	8027b28 <__ieee754_sqrt+0x164>
 8027b48:	46e0      	mov	r8, ip
 8027b4a:	e7a8      	b.n	8027a9e <__ieee754_sqrt+0xda>
 8027b4c:	e9da 8900 	ldrd	r8, r9, [sl]
 8027b50:	f7d8 fb8e 	bl	8000270 <__adddf3>
 8027b54:	4602      	mov	r2, r0
 8027b56:	460b      	mov	r3, r1
 8027b58:	4640      	mov	r0, r8
 8027b5a:	4649      	mov	r1, r9
 8027b5c:	f7d8 ffb0 	bl	8000ac0 <__aeabi_dcmplt>
 8027b60:	b128      	cbz	r0, 8027b6e <__ieee754_sqrt+0x1aa>
 8027b62:	1ca0      	adds	r0, r4, #2
 8027b64:	f104 0402 	add.w	r4, r4, #2
 8027b68:	bf08      	it	eq
 8027b6a:	3501      	addeq	r5, #1
 8027b6c:	e7c8      	b.n	8027b00 <__ieee754_sqrt+0x13c>
 8027b6e:	3401      	adds	r4, #1
 8027b70:	f024 0401 	bic.w	r4, r4, #1
 8027b74:	e7c4      	b.n	8027b00 <__ieee754_sqrt+0x13c>
 8027b76:	bf00      	nop
 8027b78:	7ff00000 	.word	0x7ff00000
 8027b7c:	200000a0 	.word	0x200000a0
 8027b80:	200000a8 	.word	0x200000a8
 8027b84:	00000000 	.word	0x00000000

08027b88 <__kernel_rem_pio2>:
 8027b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027b8c:	ed2d 8b02 	vpush	{d8}
 8027b90:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8027b94:	f112 0f14 	cmn.w	r2, #20
 8027b98:	f04f 0500 	mov.w	r5, #0
 8027b9c:	9306      	str	r3, [sp, #24]
 8027b9e:	bfa8      	it	ge
 8027ba0:	1ed4      	subge	r4, r2, #3
 8027ba2:	4bc5      	ldr	r3, [pc, #788]	; (8027eb8 <__kernel_rem_pio2+0x330>)
 8027ba4:	bfb8      	it	lt
 8027ba6:	2400      	movlt	r4, #0
 8027ba8:	9104      	str	r1, [sp, #16]
 8027baa:	ae20      	add	r6, sp, #128	; 0x80
 8027bac:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8027bae:	9009      	str	r0, [sp, #36]	; 0x24
 8027bb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8027bb4:	9300      	str	r3, [sp, #0]
 8027bb6:	9b06      	ldr	r3, [sp, #24]
 8027bb8:	f103 33ff 	add.w	r3, r3, #4294967295
 8027bbc:	9305      	str	r3, [sp, #20]
 8027bbe:	bfa4      	itt	ge
 8027bc0:	2318      	movge	r3, #24
 8027bc2:	fb94 f4f3 	sdivge	r4, r4, r3
 8027bc6:	f06f 0317 	mvn.w	r3, #23
 8027bca:	fb04 3303 	mla	r3, r4, r3, r3
 8027bce:	eb03 0a02 	add.w	sl, r3, r2
 8027bd2:	9b00      	ldr	r3, [sp, #0]
 8027bd4:	9a05      	ldr	r2, [sp, #20]
 8027bd6:	eb03 0802 	add.w	r8, r3, r2
 8027bda:	1aa7      	subs	r7, r4, r2
 8027bdc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8027bde:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8027ea8 <__kernel_rem_pio2+0x320>
 8027be2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8027be6:	4545      	cmp	r5, r8
 8027be8:	dd13      	ble.n	8027c12 <__kernel_rem_pio2+0x8a>
 8027bea:	aa20      	add	r2, sp, #128	; 0x80
 8027bec:	9b06      	ldr	r3, [sp, #24]
 8027bee:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8027bf2:	f04f 0800 	mov.w	r8, #0
 8027bf6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8027bfa:	9b00      	ldr	r3, [sp, #0]
 8027bfc:	4598      	cmp	r8, r3
 8027bfe:	dc30      	bgt.n	8027c62 <__kernel_rem_pio2+0xda>
 8027c00:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8027c04:	462f      	mov	r7, r5
 8027c06:	2600      	movs	r6, #0
 8027c08:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 8027ea8 <__kernel_rem_pio2+0x320>
 8027c0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8027c10:	e01b      	b.n	8027c4a <__kernel_rem_pio2+0xc2>
 8027c12:	42ef      	cmn	r7, r5
 8027c14:	d407      	bmi.n	8027c26 <__kernel_rem_pio2+0x9e>
 8027c16:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8027c1a:	f7d8 fc75 	bl	8000508 <__aeabi_i2d>
 8027c1e:	3501      	adds	r5, #1
 8027c20:	e8e6 0102 	strd	r0, r1, [r6], #8
 8027c24:	e7df      	b.n	8027be6 <__kernel_rem_pio2+0x5e>
 8027c26:	ec51 0b18 	vmov	r0, r1, d8
 8027c2a:	e7f8      	b.n	8027c1e <__kernel_rem_pio2+0x96>
 8027c2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8027c30:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8027c34:	3601      	adds	r6, #1
 8027c36:	f7d8 fcd1 	bl	80005dc <__aeabi_dmul>
 8027c3a:	4602      	mov	r2, r0
 8027c3c:	460b      	mov	r3, r1
 8027c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8027c42:	f7d8 fb15 	bl	8000270 <__adddf3>
 8027c46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8027c4a:	9b05      	ldr	r3, [sp, #20]
 8027c4c:	3f08      	subs	r7, #8
 8027c4e:	429e      	cmp	r6, r3
 8027c50:	ddec      	ble.n	8027c2c <__kernel_rem_pio2+0xa4>
 8027c52:	f108 0801 	add.w	r8, r8, #1
 8027c56:	3508      	adds	r5, #8
 8027c58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8027c5c:	ecab 7b02 	vstmia	fp!, {d7}
 8027c60:	e7cb      	b.n	8027bfa <__kernel_rem_pio2+0x72>
 8027c62:	9b00      	ldr	r3, [sp, #0]
 8027c64:	aa0c      	add	r2, sp, #48	; 0x30
 8027c66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8027c6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8027c6c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8027c6e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8027c72:	9c00      	ldr	r4, [sp, #0]
 8027c74:	930a      	str	r3, [sp, #40]	; 0x28
 8027c76:	00e3      	lsls	r3, r4, #3
 8027c78:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8027c7c:	46a1      	mov	r9, r4
 8027c7e:	9308      	str	r3, [sp, #32]
 8027c80:	ab98      	add	r3, sp, #608	; 0x260
 8027c82:	46c3      	mov	fp, r8
 8027c84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8027c88:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8027c8c:	ab70      	add	r3, sp, #448	; 0x1c0
 8027c8e:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8027c92:	f1b9 0f00 	cmp.w	r9, #0
 8027c96:	f1a5 0508 	sub.w	r5, r5, #8
 8027c9a:	dc77      	bgt.n	8027d8c <__kernel_rem_pio2+0x204>
 8027c9c:	4650      	mov	r0, sl
 8027c9e:	ec47 6b10 	vmov	d0, r6, r7
 8027ca2:	f7ff fde1 	bl	8027868 <scalbn>
 8027ca6:	2200      	movs	r2, #0
 8027ca8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8027cac:	ee10 0a10 	vmov	r0, s0
 8027cb0:	ec57 6b10 	vmov	r6, r7, d0
 8027cb4:	4639      	mov	r1, r7
 8027cb6:	f7d8 fc91 	bl	80005dc <__aeabi_dmul>
 8027cba:	ec41 0b10 	vmov	d0, r0, r1
 8027cbe:	f000 fd8f 	bl	80287e0 <floor>
 8027cc2:	2200      	movs	r2, #0
 8027cc4:	4b7d      	ldr	r3, [pc, #500]	; (8027ebc <__kernel_rem_pio2+0x334>)
 8027cc6:	ec51 0b10 	vmov	r0, r1, d0
 8027cca:	f7d8 fc87 	bl	80005dc <__aeabi_dmul>
 8027cce:	4602      	mov	r2, r0
 8027cd0:	460b      	mov	r3, r1
 8027cd2:	4630      	mov	r0, r6
 8027cd4:	4639      	mov	r1, r7
 8027cd6:	f7d8 fac9 	bl	800026c <__aeabi_dsub>
 8027cda:	460f      	mov	r7, r1
 8027cdc:	4606      	mov	r6, r0
 8027cde:	f7d8 ff2d 	bl	8000b3c <__aeabi_d2iz>
 8027ce2:	9002      	str	r0, [sp, #8]
 8027ce4:	f7d8 fc10 	bl	8000508 <__aeabi_i2d>
 8027ce8:	4602      	mov	r2, r0
 8027cea:	460b      	mov	r3, r1
 8027cec:	4630      	mov	r0, r6
 8027cee:	4639      	mov	r1, r7
 8027cf0:	f7d8 fabc 	bl	800026c <__aeabi_dsub>
 8027cf4:	f1ba 0f00 	cmp.w	sl, #0
 8027cf8:	4606      	mov	r6, r0
 8027cfa:	460f      	mov	r7, r1
 8027cfc:	dd6d      	ble.n	8027dda <__kernel_rem_pio2+0x252>
 8027cfe:	1e61      	subs	r1, r4, #1
 8027d00:	ab0c      	add	r3, sp, #48	; 0x30
 8027d02:	f1ca 0018 	rsb	r0, sl, #24
 8027d06:	9d02      	ldr	r5, [sp, #8]
 8027d08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8027d0c:	fa43 f200 	asr.w	r2, r3, r0
 8027d10:	4415      	add	r5, r2
 8027d12:	4082      	lsls	r2, r0
 8027d14:	1a9b      	subs	r3, r3, r2
 8027d16:	aa0c      	add	r2, sp, #48	; 0x30
 8027d18:	9502      	str	r5, [sp, #8]
 8027d1a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8027d1e:	f1ca 0217 	rsb	r2, sl, #23
 8027d22:	fa43 fb02 	asr.w	fp, r3, r2
 8027d26:	f1bb 0f00 	cmp.w	fp, #0
 8027d2a:	dd65      	ble.n	8027df8 <__kernel_rem_pio2+0x270>
 8027d2c:	9b02      	ldr	r3, [sp, #8]
 8027d2e:	2200      	movs	r2, #0
 8027d30:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8027d34:	3301      	adds	r3, #1
 8027d36:	4615      	mov	r5, r2
 8027d38:	9302      	str	r3, [sp, #8]
 8027d3a:	4294      	cmp	r4, r2
 8027d3c:	f300 809f 	bgt.w	8027e7e <__kernel_rem_pio2+0x2f6>
 8027d40:	f1ba 0f00 	cmp.w	sl, #0
 8027d44:	dd07      	ble.n	8027d56 <__kernel_rem_pio2+0x1ce>
 8027d46:	f1ba 0f01 	cmp.w	sl, #1
 8027d4a:	f000 80c3 	beq.w	8027ed4 <__kernel_rem_pio2+0x34c>
 8027d4e:	f1ba 0f02 	cmp.w	sl, #2
 8027d52:	f000 80c9 	beq.w	8027ee8 <__kernel_rem_pio2+0x360>
 8027d56:	f1bb 0f02 	cmp.w	fp, #2
 8027d5a:	d14d      	bne.n	8027df8 <__kernel_rem_pio2+0x270>
 8027d5c:	4632      	mov	r2, r6
 8027d5e:	463b      	mov	r3, r7
 8027d60:	2000      	movs	r0, #0
 8027d62:	4957      	ldr	r1, [pc, #348]	; (8027ec0 <__kernel_rem_pio2+0x338>)
 8027d64:	f7d8 fa82 	bl	800026c <__aeabi_dsub>
 8027d68:	4606      	mov	r6, r0
 8027d6a:	460f      	mov	r7, r1
 8027d6c:	2d00      	cmp	r5, #0
 8027d6e:	d043      	beq.n	8027df8 <__kernel_rem_pio2+0x270>
 8027d70:	4650      	mov	r0, sl
 8027d72:	ed9f 0b4f 	vldr	d0, [pc, #316]	; 8027eb0 <__kernel_rem_pio2+0x328>
 8027d76:	f7ff fd77 	bl	8027868 <scalbn>
 8027d7a:	4630      	mov	r0, r6
 8027d7c:	4639      	mov	r1, r7
 8027d7e:	ec53 2b10 	vmov	r2, r3, d0
 8027d82:	f7d8 fa73 	bl	800026c <__aeabi_dsub>
 8027d86:	4606      	mov	r6, r0
 8027d88:	460f      	mov	r7, r1
 8027d8a:	e035      	b.n	8027df8 <__kernel_rem_pio2+0x270>
 8027d8c:	2200      	movs	r2, #0
 8027d8e:	4b4d      	ldr	r3, [pc, #308]	; (8027ec4 <__kernel_rem_pio2+0x33c>)
 8027d90:	4630      	mov	r0, r6
 8027d92:	4639      	mov	r1, r7
 8027d94:	f7d8 fc22 	bl	80005dc <__aeabi_dmul>
 8027d98:	f109 39ff 	add.w	r9, r9, #4294967295
 8027d9c:	f7d8 fece 	bl	8000b3c <__aeabi_d2iz>
 8027da0:	f7d8 fbb2 	bl	8000508 <__aeabi_i2d>
 8027da4:	4602      	mov	r2, r0
 8027da6:	460b      	mov	r3, r1
 8027da8:	ec43 2b18 	vmov	d8, r2, r3
 8027dac:	2200      	movs	r2, #0
 8027dae:	4b46      	ldr	r3, [pc, #280]	; (8027ec8 <__kernel_rem_pio2+0x340>)
 8027db0:	f7d8 fc14 	bl	80005dc <__aeabi_dmul>
 8027db4:	4602      	mov	r2, r0
 8027db6:	460b      	mov	r3, r1
 8027db8:	4630      	mov	r0, r6
 8027dba:	4639      	mov	r1, r7
 8027dbc:	f7d8 fa56 	bl	800026c <__aeabi_dsub>
 8027dc0:	f7d8 febc 	bl	8000b3c <__aeabi_d2iz>
 8027dc4:	f84b 0b04 	str.w	r0, [fp], #4
 8027dc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8027dcc:	ec51 0b18 	vmov	r0, r1, d8
 8027dd0:	f7d8 fa4e 	bl	8000270 <__adddf3>
 8027dd4:	4606      	mov	r6, r0
 8027dd6:	460f      	mov	r7, r1
 8027dd8:	e75b      	b.n	8027c92 <__kernel_rem_pio2+0x10a>
 8027dda:	d106      	bne.n	8027dea <__kernel_rem_pio2+0x262>
 8027ddc:	1e63      	subs	r3, r4, #1
 8027dde:	aa0c      	add	r2, sp, #48	; 0x30
 8027de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027de4:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8027de8:	e79d      	b.n	8027d26 <__kernel_rem_pio2+0x19e>
 8027dea:	2200      	movs	r2, #0
 8027dec:	4b37      	ldr	r3, [pc, #220]	; (8027ecc <__kernel_rem_pio2+0x344>)
 8027dee:	f7d8 fe7b 	bl	8000ae8 <__aeabi_dcmpge>
 8027df2:	2800      	cmp	r0, #0
 8027df4:	d140      	bne.n	8027e78 <__kernel_rem_pio2+0x2f0>
 8027df6:	4683      	mov	fp, r0
 8027df8:	2200      	movs	r2, #0
 8027dfa:	2300      	movs	r3, #0
 8027dfc:	4630      	mov	r0, r6
 8027dfe:	4639      	mov	r1, r7
 8027e00:	f7d8 fe54 	bl	8000aac <__aeabi_dcmpeq>
 8027e04:	2800      	cmp	r0, #0
 8027e06:	f000 80c3 	beq.w	8027f90 <__kernel_rem_pio2+0x408>
 8027e0a:	1e65      	subs	r5, r4, #1
 8027e0c:	2200      	movs	r2, #0
 8027e0e:	462b      	mov	r3, r5
 8027e10:	9900      	ldr	r1, [sp, #0]
 8027e12:	428b      	cmp	r3, r1
 8027e14:	da6f      	bge.n	8027ef6 <__kernel_rem_pio2+0x36e>
 8027e16:	2a00      	cmp	r2, #0
 8027e18:	f000 808c 	beq.w	8027f34 <__kernel_rem_pio2+0x3ac>
 8027e1c:	ab0c      	add	r3, sp, #48	; 0x30
 8027e1e:	f1aa 0a18 	sub.w	sl, sl, #24
 8027e22:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8027e26:	2b00      	cmp	r3, #0
 8027e28:	f000 80b0 	beq.w	8027f8c <__kernel_rem_pio2+0x404>
 8027e2c:	4650      	mov	r0, sl
 8027e2e:	462c      	mov	r4, r5
 8027e30:	f04f 0800 	mov.w	r8, #0
 8027e34:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8027ec4 <__kernel_rem_pio2+0x33c>
 8027e38:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 8027eb0 <__kernel_rem_pio2+0x328>
 8027e3c:	f7ff fd14 	bl	8027868 <scalbn>
 8027e40:	1c6b      	adds	r3, r5, #1
 8027e42:	00da      	lsls	r2, r3, #3
 8027e44:	9205      	str	r2, [sp, #20]
 8027e46:	aa70      	add	r2, sp, #448	; 0x1c0
 8027e48:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8027e4c:	ec57 6b10 	vmov	r6, r7, d0
 8027e50:	2c00      	cmp	r4, #0
 8027e52:	f280 80d6 	bge.w	8028002 <__kernel_rem_pio2+0x47a>
 8027e56:	462c      	mov	r4, r5
 8027e58:	2c00      	cmp	r4, #0
 8027e5a:	f2c0 8104 	blt.w	8028066 <__kernel_rem_pio2+0x4de>
 8027e5e:	4b1c      	ldr	r3, [pc, #112]	; (8027ed0 <__kernel_rem_pio2+0x348>)
 8027e60:	f04f 0900 	mov.w	r9, #0
 8027e64:	f04f 0a00 	mov.w	sl, #0
 8027e68:	2700      	movs	r7, #0
 8027e6a:	461e      	mov	r6, r3
 8027e6c:	ab70      	add	r3, sp, #448	; 0x1c0
 8027e6e:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8027e72:	1b2b      	subs	r3, r5, r4
 8027e74:	9306      	str	r3, [sp, #24]
 8027e76:	e0e8      	b.n	802804a <__kernel_rem_pio2+0x4c2>
 8027e78:	f04f 0b02 	mov.w	fp, #2
 8027e7c:	e756      	b.n	8027d2c <__kernel_rem_pio2+0x1a4>
 8027e7e:	f8d8 3000 	ldr.w	r3, [r8]
 8027e82:	b955      	cbnz	r5, 8027e9a <__kernel_rem_pio2+0x312>
 8027e84:	b123      	cbz	r3, 8027e90 <__kernel_rem_pio2+0x308>
 8027e86:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8027e8a:	f8c8 3000 	str.w	r3, [r8]
 8027e8e:	2301      	movs	r3, #1
 8027e90:	3201      	adds	r2, #1
 8027e92:	f108 0804 	add.w	r8, r8, #4
 8027e96:	461d      	mov	r5, r3
 8027e98:	e74f      	b.n	8027d3a <__kernel_rem_pio2+0x1b2>
 8027e9a:	1acb      	subs	r3, r1, r3
 8027e9c:	f8c8 3000 	str.w	r3, [r8]
 8027ea0:	462b      	mov	r3, r5
 8027ea2:	e7f5      	b.n	8027e90 <__kernel_rem_pio2+0x308>
 8027ea4:	f3af 8000 	nop.w
	...
 8027eb4:	3ff00000 	.word	0x3ff00000
 8027eb8:	08029f08 	.word	0x08029f08
 8027ebc:	40200000 	.word	0x40200000
 8027ec0:	3ff00000 	.word	0x3ff00000
 8027ec4:	3e700000 	.word	0x3e700000
 8027ec8:	41700000 	.word	0x41700000
 8027ecc:	3fe00000 	.word	0x3fe00000
 8027ed0:	08029ec8 	.word	0x08029ec8
 8027ed4:	1e62      	subs	r2, r4, #1
 8027ed6:	ab0c      	add	r3, sp, #48	; 0x30
 8027ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8027edc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8027ee0:	a90c      	add	r1, sp, #48	; 0x30
 8027ee2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8027ee6:	e736      	b.n	8027d56 <__kernel_rem_pio2+0x1ce>
 8027ee8:	1e62      	subs	r2, r4, #1
 8027eea:	ab0c      	add	r3, sp, #48	; 0x30
 8027eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8027ef0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8027ef4:	e7f4      	b.n	8027ee0 <__kernel_rem_pio2+0x358>
 8027ef6:	a90c      	add	r1, sp, #48	; 0x30
 8027ef8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8027efc:	3b01      	subs	r3, #1
 8027efe:	430a      	orrs	r2, r1
 8027f00:	e786      	b.n	8027e10 <__kernel_rem_pio2+0x288>
 8027f02:	3301      	adds	r3, #1
 8027f04:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8027f08:	2900      	cmp	r1, #0
 8027f0a:	d0fa      	beq.n	8027f02 <__kernel_rem_pio2+0x37a>
 8027f0c:	9a08      	ldr	r2, [sp, #32]
 8027f0e:	a920      	add	r1, sp, #128	; 0x80
 8027f10:	18e3      	adds	r3, r4, r3
 8027f12:	f104 0801 	add.w	r8, r4, #1
 8027f16:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8027f1a:	9302      	str	r3, [sp, #8]
 8027f1c:	446a      	add	r2, sp
 8027f1e:	3a98      	subs	r2, #152	; 0x98
 8027f20:	9208      	str	r2, [sp, #32]
 8027f22:	9a06      	ldr	r2, [sp, #24]
 8027f24:	18a2      	adds	r2, r4, r2
 8027f26:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8027f2a:	9b02      	ldr	r3, [sp, #8]
 8027f2c:	4543      	cmp	r3, r8
 8027f2e:	da04      	bge.n	8027f3a <__kernel_rem_pio2+0x3b2>
 8027f30:	461c      	mov	r4, r3
 8027f32:	e6a0      	b.n	8027c76 <__kernel_rem_pio2+0xee>
 8027f34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027f36:	2301      	movs	r3, #1
 8027f38:	e7e4      	b.n	8027f04 <__kernel_rem_pio2+0x37c>
 8027f3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027f3c:	f04f 0900 	mov.w	r9, #0
 8027f40:	2600      	movs	r6, #0
 8027f42:	2700      	movs	r7, #0
 8027f44:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8027f48:	f7d8 fade 	bl	8000508 <__aeabi_i2d>
 8027f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027f4e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8027f52:	461c      	mov	r4, r3
 8027f54:	46ab      	mov	fp, r5
 8027f56:	9b05      	ldr	r3, [sp, #20]
 8027f58:	4599      	cmp	r9, r3
 8027f5a:	dd06      	ble.n	8027f6a <__kernel_rem_pio2+0x3e2>
 8027f5c:	9b08      	ldr	r3, [sp, #32]
 8027f5e:	f108 0801 	add.w	r8, r8, #1
 8027f62:	e8e3 6702 	strd	r6, r7, [r3], #8
 8027f66:	9308      	str	r3, [sp, #32]
 8027f68:	e7df      	b.n	8027f2a <__kernel_rem_pio2+0x3a2>
 8027f6a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8027f6e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8027f72:	f7d8 fb33 	bl	80005dc <__aeabi_dmul>
 8027f76:	4602      	mov	r2, r0
 8027f78:	460b      	mov	r3, r1
 8027f7a:	4630      	mov	r0, r6
 8027f7c:	4639      	mov	r1, r7
 8027f7e:	f109 0901 	add.w	r9, r9, #1
 8027f82:	f7d8 f975 	bl	8000270 <__adddf3>
 8027f86:	4606      	mov	r6, r0
 8027f88:	460f      	mov	r7, r1
 8027f8a:	e7e4      	b.n	8027f56 <__kernel_rem_pio2+0x3ce>
 8027f8c:	3d01      	subs	r5, #1
 8027f8e:	e745      	b.n	8027e1c <__kernel_rem_pio2+0x294>
 8027f90:	f1ca 0000 	rsb	r0, sl, #0
 8027f94:	ec47 6b10 	vmov	d0, r6, r7
 8027f98:	f7ff fc66 	bl	8027868 <scalbn>
 8027f9c:	2200      	movs	r2, #0
 8027f9e:	4ba1      	ldr	r3, [pc, #644]	; (8028224 <__kernel_rem_pio2+0x69c>)
 8027fa0:	ee10 0a10 	vmov	r0, s0
 8027fa4:	ec57 6b10 	vmov	r6, r7, d0
 8027fa8:	4639      	mov	r1, r7
 8027faa:	f7d8 fd9d 	bl	8000ae8 <__aeabi_dcmpge>
 8027fae:	b1f8      	cbz	r0, 8027ff0 <__kernel_rem_pio2+0x468>
 8027fb0:	2200      	movs	r2, #0
 8027fb2:	4b9d      	ldr	r3, [pc, #628]	; (8028228 <__kernel_rem_pio2+0x6a0>)
 8027fb4:	4630      	mov	r0, r6
 8027fb6:	4639      	mov	r1, r7
 8027fb8:	f7d8 fb10 	bl	80005dc <__aeabi_dmul>
 8027fbc:	1c65      	adds	r5, r4, #1
 8027fbe:	f7d8 fdbd 	bl	8000b3c <__aeabi_d2iz>
 8027fc2:	4680      	mov	r8, r0
 8027fc4:	f7d8 faa0 	bl	8000508 <__aeabi_i2d>
 8027fc8:	2200      	movs	r2, #0
 8027fca:	4b96      	ldr	r3, [pc, #600]	; (8028224 <__kernel_rem_pio2+0x69c>)
 8027fcc:	f10a 0a18 	add.w	sl, sl, #24
 8027fd0:	f7d8 fb04 	bl	80005dc <__aeabi_dmul>
 8027fd4:	460b      	mov	r3, r1
 8027fd6:	4602      	mov	r2, r0
 8027fd8:	4639      	mov	r1, r7
 8027fda:	4630      	mov	r0, r6
 8027fdc:	f7d8 f946 	bl	800026c <__aeabi_dsub>
 8027fe0:	f7d8 fdac 	bl	8000b3c <__aeabi_d2iz>
 8027fe4:	ab0c      	add	r3, sp, #48	; 0x30
 8027fe6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8027fea:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8027fee:	e71d      	b.n	8027e2c <__kernel_rem_pio2+0x2a4>
 8027ff0:	4630      	mov	r0, r6
 8027ff2:	4639      	mov	r1, r7
 8027ff4:	f7d8 fda2 	bl	8000b3c <__aeabi_d2iz>
 8027ff8:	ab0c      	add	r3, sp, #48	; 0x30
 8027ffa:	4625      	mov	r5, r4
 8027ffc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8028000:	e714      	b.n	8027e2c <__kernel_rem_pio2+0x2a4>
 8028002:	ab0c      	add	r3, sp, #48	; 0x30
 8028004:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8028008:	3c01      	subs	r4, #1
 802800a:	f7d8 fa7d 	bl	8000508 <__aeabi_i2d>
 802800e:	4632      	mov	r2, r6
 8028010:	463b      	mov	r3, r7
 8028012:	f7d8 fae3 	bl	80005dc <__aeabi_dmul>
 8028016:	4642      	mov	r2, r8
 8028018:	464b      	mov	r3, r9
 802801a:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 802801e:	4630      	mov	r0, r6
 8028020:	4639      	mov	r1, r7
 8028022:	f7d8 fadb 	bl	80005dc <__aeabi_dmul>
 8028026:	4606      	mov	r6, r0
 8028028:	460f      	mov	r7, r1
 802802a:	e711      	b.n	8027e50 <__kernel_rem_pio2+0x2c8>
 802802c:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8028030:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8028034:	f7d8 fad2 	bl	80005dc <__aeabi_dmul>
 8028038:	4602      	mov	r2, r0
 802803a:	460b      	mov	r3, r1
 802803c:	4648      	mov	r0, r9
 802803e:	4651      	mov	r1, sl
 8028040:	3701      	adds	r7, #1
 8028042:	f7d8 f915 	bl	8000270 <__adddf3>
 8028046:	4681      	mov	r9, r0
 8028048:	468a      	mov	sl, r1
 802804a:	9b00      	ldr	r3, [sp, #0]
 802804c:	429f      	cmp	r7, r3
 802804e:	dc02      	bgt.n	8028056 <__kernel_rem_pio2+0x4ce>
 8028050:	9b06      	ldr	r3, [sp, #24]
 8028052:	429f      	cmp	r7, r3
 8028054:	ddea      	ble.n	802802c <__kernel_rem_pio2+0x4a4>
 8028056:	ab48      	add	r3, sp, #288	; 0x120
 8028058:	9a06      	ldr	r2, [sp, #24]
 802805a:	3c01      	subs	r4, #1
 802805c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8028060:	e9c6 9a00 	strd	r9, sl, [r6]
 8028064:	e6f8      	b.n	8027e58 <__kernel_rem_pio2+0x2d0>
 8028066:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8028068:	2b02      	cmp	r3, #2
 802806a:	dc0b      	bgt.n	8028084 <__kernel_rem_pio2+0x4fc>
 802806c:	2b00      	cmp	r3, #0
 802806e:	dc39      	bgt.n	80280e4 <__kernel_rem_pio2+0x55c>
 8028070:	d05d      	beq.n	802812e <__kernel_rem_pio2+0x5a6>
 8028072:	9b02      	ldr	r3, [sp, #8]
 8028074:	f003 0007 	and.w	r0, r3, #7
 8028078:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 802807c:	ecbd 8b02 	vpop	{d8}
 8028080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028084:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8028086:	2b03      	cmp	r3, #3
 8028088:	d1f3      	bne.n	8028072 <__kernel_rem_pio2+0x4ea>
 802808a:	9b05      	ldr	r3, [sp, #20]
 802808c:	9500      	str	r5, [sp, #0]
 802808e:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8028092:	eb0d 0403 	add.w	r4, sp, r3
 8028096:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 802809a:	46a2      	mov	sl, r4
 802809c:	9b00      	ldr	r3, [sp, #0]
 802809e:	f1aa 0a08 	sub.w	sl, sl, #8
 80280a2:	2b00      	cmp	r3, #0
 80280a4:	dc69      	bgt.n	802817a <__kernel_rem_pio2+0x5f2>
 80280a6:	46aa      	mov	sl, r5
 80280a8:	f1ba 0f01 	cmp.w	sl, #1
 80280ac:	f1a4 0408 	sub.w	r4, r4, #8
 80280b0:	f300 8083 	bgt.w	80281ba <__kernel_rem_pio2+0x632>
 80280b4:	9c05      	ldr	r4, [sp, #20]
 80280b6:	ab48      	add	r3, sp, #288	; 0x120
 80280b8:	2000      	movs	r0, #0
 80280ba:	2100      	movs	r1, #0
 80280bc:	441c      	add	r4, r3
 80280be:	2d01      	cmp	r5, #1
 80280c0:	f300 809a 	bgt.w	80281f8 <__kernel_rem_pio2+0x670>
 80280c4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80280c8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80280cc:	f1bb 0f00 	cmp.w	fp, #0
 80280d0:	f040 8098 	bne.w	8028204 <__kernel_rem_pio2+0x67c>
 80280d4:	9b04      	ldr	r3, [sp, #16]
 80280d6:	e9c3 7800 	strd	r7, r8, [r3]
 80280da:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80280de:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80280e2:	e7c6      	b.n	8028072 <__kernel_rem_pio2+0x4ea>
 80280e4:	9e05      	ldr	r6, [sp, #20]
 80280e6:	ab48      	add	r3, sp, #288	; 0x120
 80280e8:	462c      	mov	r4, r5
 80280ea:	2000      	movs	r0, #0
 80280ec:	441e      	add	r6, r3
 80280ee:	2100      	movs	r1, #0
 80280f0:	2c00      	cmp	r4, #0
 80280f2:	da33      	bge.n	802815c <__kernel_rem_pio2+0x5d4>
 80280f4:	f1bb 0f00 	cmp.w	fp, #0
 80280f8:	d036      	beq.n	8028168 <__kernel_rem_pio2+0x5e0>
 80280fa:	4602      	mov	r2, r0
 80280fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8028100:	9c04      	ldr	r4, [sp, #16]
 8028102:	ae4a      	add	r6, sp, #296	; 0x128
 8028104:	e9c4 2300 	strd	r2, r3, [r4]
 8028108:	2401      	movs	r4, #1
 802810a:	4602      	mov	r2, r0
 802810c:	460b      	mov	r3, r1
 802810e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8028112:	f7d8 f8ab 	bl	800026c <__aeabi_dsub>
 8028116:	42a5      	cmp	r5, r4
 8028118:	da29      	bge.n	802816e <__kernel_rem_pio2+0x5e6>
 802811a:	f1bb 0f00 	cmp.w	fp, #0
 802811e:	d002      	beq.n	8028126 <__kernel_rem_pio2+0x59e>
 8028120:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8028124:	4619      	mov	r1, r3
 8028126:	9b04      	ldr	r3, [sp, #16]
 8028128:	e9c3 0102 	strd	r0, r1, [r3, #8]
 802812c:	e7a1      	b.n	8028072 <__kernel_rem_pio2+0x4ea>
 802812e:	9c05      	ldr	r4, [sp, #20]
 8028130:	ab48      	add	r3, sp, #288	; 0x120
 8028132:	2000      	movs	r0, #0
 8028134:	2100      	movs	r1, #0
 8028136:	441c      	add	r4, r3
 8028138:	2d00      	cmp	r5, #0
 802813a:	da09      	bge.n	8028150 <__kernel_rem_pio2+0x5c8>
 802813c:	f1bb 0f00 	cmp.w	fp, #0
 8028140:	d002      	beq.n	8028148 <__kernel_rem_pio2+0x5c0>
 8028142:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8028146:	4619      	mov	r1, r3
 8028148:	9b04      	ldr	r3, [sp, #16]
 802814a:	e9c3 0100 	strd	r0, r1, [r3]
 802814e:	e790      	b.n	8028072 <__kernel_rem_pio2+0x4ea>
 8028150:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8028154:	3d01      	subs	r5, #1
 8028156:	f7d8 f88b 	bl	8000270 <__adddf3>
 802815a:	e7ed      	b.n	8028138 <__kernel_rem_pio2+0x5b0>
 802815c:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8028160:	3c01      	subs	r4, #1
 8028162:	f7d8 f885 	bl	8000270 <__adddf3>
 8028166:	e7c3      	b.n	80280f0 <__kernel_rem_pio2+0x568>
 8028168:	4602      	mov	r2, r0
 802816a:	460b      	mov	r3, r1
 802816c:	e7c8      	b.n	8028100 <__kernel_rem_pio2+0x578>
 802816e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8028172:	3401      	adds	r4, #1
 8028174:	f7d8 f87c 	bl	8000270 <__adddf3>
 8028178:	e7cd      	b.n	8028116 <__kernel_rem_pio2+0x58e>
 802817a:	9b00      	ldr	r3, [sp, #0]
 802817c:	e9da 8900 	ldrd	r8, r9, [sl]
 8028180:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8028184:	3b01      	subs	r3, #1
 8028186:	4640      	mov	r0, r8
 8028188:	4632      	mov	r2, r6
 802818a:	4649      	mov	r1, r9
 802818c:	9300      	str	r3, [sp, #0]
 802818e:	463b      	mov	r3, r7
 8028190:	f7d8 f86e 	bl	8000270 <__adddf3>
 8028194:	4602      	mov	r2, r0
 8028196:	460b      	mov	r3, r1
 8028198:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802819c:	4640      	mov	r0, r8
 802819e:	4649      	mov	r1, r9
 80281a0:	f7d8 f864 	bl	800026c <__aeabi_dsub>
 80281a4:	4632      	mov	r2, r6
 80281a6:	463b      	mov	r3, r7
 80281a8:	f7d8 f862 	bl	8000270 <__adddf3>
 80281ac:	ed9d 7b06 	vldr	d7, [sp, #24]
 80281b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80281b4:	ed8a 7b00 	vstr	d7, [sl]
 80281b8:	e770      	b.n	802809c <__kernel_rem_pio2+0x514>
 80281ba:	e9d4 8900 	ldrd	r8, r9, [r4]
 80281be:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80281c2:	4640      	mov	r0, r8
 80281c4:	4649      	mov	r1, r9
 80281c6:	4632      	mov	r2, r6
 80281c8:	463b      	mov	r3, r7
 80281ca:	f7d8 f851 	bl	8000270 <__adddf3>
 80281ce:	4602      	mov	r2, r0
 80281d0:	460b      	mov	r3, r1
 80281d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80281d6:	e9cd 0100 	strd	r0, r1, [sp]
 80281da:	4640      	mov	r0, r8
 80281dc:	4649      	mov	r1, r9
 80281de:	f7d8 f845 	bl	800026c <__aeabi_dsub>
 80281e2:	4632      	mov	r2, r6
 80281e4:	463b      	mov	r3, r7
 80281e6:	f7d8 f843 	bl	8000270 <__adddf3>
 80281ea:	ed9d 7b00 	vldr	d7, [sp]
 80281ee:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80281f2:	ed84 7b00 	vstr	d7, [r4]
 80281f6:	e757      	b.n	80280a8 <__kernel_rem_pio2+0x520>
 80281f8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80281fc:	3d01      	subs	r5, #1
 80281fe:	f7d8 f837 	bl	8000270 <__adddf3>
 8028202:	e75c      	b.n	80280be <__kernel_rem_pio2+0x536>
 8028204:	9b04      	ldr	r3, [sp, #16]
 8028206:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 802820a:	9a04      	ldr	r2, [sp, #16]
 802820c:	601f      	str	r7, [r3, #0]
 802820e:	605c      	str	r4, [r3, #4]
 8028210:	609d      	str	r5, [r3, #8]
 8028212:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8028216:	6110      	str	r0, [r2, #16]
 8028218:	60d3      	str	r3, [r2, #12]
 802821a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802821e:	6153      	str	r3, [r2, #20]
 8028220:	e727      	b.n	8028072 <__kernel_rem_pio2+0x4ea>
 8028222:	bf00      	nop
 8028224:	41700000 	.word	0x41700000
 8028228:	3e700000 	.word	0x3e700000

0802822c <__kernel_rem_pio2f>:
 802822c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028230:	ed2d 8b04 	vpush	{d8-d9}
 8028234:	b0d9      	sub	sp, #356	; 0x164
 8028236:	4688      	mov	r8, r1
 8028238:	49b9      	ldr	r1, [pc, #740]	; (8028520 <__kernel_rem_pio2f+0x2f4>)
 802823a:	9002      	str	r0, [sp, #8]
 802823c:	9866      	ldr	r0, [sp, #408]	; 0x198
 802823e:	9301      	str	r3, [sp, #4]
 8028240:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8028244:	9901      	ldr	r1, [sp, #4]
 8028246:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8028248:	f101 3bff 	add.w	fp, r1, #4294967295
 802824c:	1d11      	adds	r1, r2, #4
 802824e:	db25      	blt.n	802829c <__kernel_rem_pio2f+0x70>
 8028250:	1ed0      	subs	r0, r2, #3
 8028252:	bf48      	it	mi
 8028254:	1d10      	addmi	r0, r2, #4
 8028256:	10c0      	asrs	r0, r0, #3
 8028258:	1c45      	adds	r5, r0, #1
 802825a:	eba0 070b 	sub.w	r7, r0, fp
 802825e:	eb0a 0c0b 	add.w	ip, sl, fp
 8028262:	ae1c      	add	r6, sp, #112	; 0x70
 8028264:	00e9      	lsls	r1, r5, #3
 8028266:	2400      	movs	r4, #0
 8028268:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 802826c:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8028530 <__kernel_rem_pio2f+0x304>
 8028270:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8028274:	9103      	str	r1, [sp, #12]
 8028276:	4564      	cmp	r4, ip
 8028278:	dd12      	ble.n	80282a0 <__kernel_rem_pio2f+0x74>
 802827a:	ac1c      	add	r4, sp, #112	; 0x70
 802827c:	9901      	ldr	r1, [sp, #4]
 802827e:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8028282:	f04f 0c00 	mov.w	ip, #0
 8028286:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 802828a:	45d4      	cmp	ip, sl
 802828c:	dc29      	bgt.n	80282e2 <__kernel_rem_pio2f+0xb6>
 802828e:	f8dd e008 	ldr.w	lr, [sp, #8]
 8028292:	4627      	mov	r7, r4
 8028294:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8028530 <__kernel_rem_pio2f+0x304>
 8028298:	2600      	movs	r6, #0
 802829a:	e018      	b.n	80282ce <__kernel_rem_pio2f+0xa2>
 802829c:	2000      	movs	r0, #0
 802829e:	e7db      	b.n	8028258 <__kernel_rem_pio2f+0x2c>
 80282a0:	42e7      	cmn	r7, r4
 80282a2:	bf54      	ite	pl
 80282a4:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 80282a8:	eef0 7a47 	vmovmi.f32	s15, s14
 80282ac:	f104 0401 	add.w	r4, r4, #1
 80282b0:	bf5c      	itt	pl
 80282b2:	ee07 1a90 	vmovpl	s15, r1
 80282b6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80282ba:	ece6 7a01 	vstmia	r6!, {s15}
 80282be:	e7da      	b.n	8028276 <__kernel_rem_pio2f+0x4a>
 80282c0:	ecfe 6a01 	vldmia	lr!, {s13}
 80282c4:	3601      	adds	r6, #1
 80282c6:	ed97 7a00 	vldr	s14, [r7]
 80282ca:	eee6 7a87 	vfma.f32	s15, s13, s14
 80282ce:	455e      	cmp	r6, fp
 80282d0:	f1a7 0704 	sub.w	r7, r7, #4
 80282d4:	ddf4      	ble.n	80282c0 <__kernel_rem_pio2f+0x94>
 80282d6:	f10c 0c01 	add.w	ip, ip, #1
 80282da:	3404      	adds	r4, #4
 80282dc:	ece9 7a01 	vstmia	r9!, {s15}
 80282e0:	e7d3      	b.n	802828a <__kernel_rem_pio2f+0x5e>
 80282e2:	a908      	add	r1, sp, #32
 80282e4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80282e8:	4656      	mov	r6, sl
 80282ea:	eddf 8a90 	vldr	s17, [pc, #576]	; 802852c <__kernel_rem_pio2f+0x300>
 80282ee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80282f2:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8028528 <__kernel_rem_pio2f+0x2fc>
 80282f6:	9304      	str	r3, [sp, #16]
 80282f8:	9105      	str	r1, [sp, #20]
 80282fa:	00b3      	lsls	r3, r6, #2
 80282fc:	ac08      	add	r4, sp, #32
 80282fe:	4637      	mov	r7, r6
 8028300:	9306      	str	r3, [sp, #24]
 8028302:	ab58      	add	r3, sp, #352	; 0x160
 8028304:	46a4      	mov	ip, r4
 8028306:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 802830a:	ab44      	add	r3, sp, #272	; 0x110
 802830c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8028310:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8028314:	2f00      	cmp	r7, #0
 8028316:	f1a0 0004 	sub.w	r0, r0, #4
 802831a:	dc4a      	bgt.n	80283b2 <__kernel_rem_pio2f+0x186>
 802831c:	4628      	mov	r0, r5
 802831e:	9207      	str	r2, [sp, #28]
 8028320:	f000 f9f8 	bl	8028714 <scalbnf>
 8028324:	eeb0 8a40 	vmov.f32	s16, s0
 8028328:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 802832c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8028330:	f000 fad6 	bl	80288e0 <floorf>
 8028334:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8028338:	2d00      	cmp	r5, #0
 802833a:	9a07      	ldr	r2, [sp, #28]
 802833c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8028340:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8028344:	ee17 9a90 	vmov	r9, s15
 8028348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802834c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8028350:	dd41      	ble.n	80283d6 <__kernel_rem_pio2f+0x1aa>
 8028352:	f106 3cff 	add.w	ip, r6, #4294967295
 8028356:	ab08      	add	r3, sp, #32
 8028358:	f1c5 0e08 	rsb	lr, r5, #8
 802835c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8028360:	fa47 f00e 	asr.w	r0, r7, lr
 8028364:	4481      	add	r9, r0
 8028366:	fa00 f00e 	lsl.w	r0, r0, lr
 802836a:	1a3f      	subs	r7, r7, r0
 802836c:	f1c5 0007 	rsb	r0, r5, #7
 8028370:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8028374:	4107      	asrs	r7, r0
 8028376:	2f00      	cmp	r7, #0
 8028378:	dd3c      	ble.n	80283f4 <__kernel_rem_pio2f+0x1c8>
 802837a:	f04f 0e00 	mov.w	lr, #0
 802837e:	f109 0901 	add.w	r9, r9, #1
 8028382:	4671      	mov	r1, lr
 8028384:	4576      	cmp	r6, lr
 8028386:	dc67      	bgt.n	8028458 <__kernel_rem_pio2f+0x22c>
 8028388:	2d00      	cmp	r5, #0
 802838a:	dd03      	ble.n	8028394 <__kernel_rem_pio2f+0x168>
 802838c:	2d01      	cmp	r5, #1
 802838e:	d074      	beq.n	802847a <__kernel_rem_pio2f+0x24e>
 8028390:	2d02      	cmp	r5, #2
 8028392:	d07b      	beq.n	802848c <__kernel_rem_pio2f+0x260>
 8028394:	2f02      	cmp	r7, #2
 8028396:	d12d      	bne.n	80283f4 <__kernel_rem_pio2f+0x1c8>
 8028398:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802839c:	ee30 8a48 	vsub.f32	s16, s0, s16
 80283a0:	b341      	cbz	r1, 80283f4 <__kernel_rem_pio2f+0x1c8>
 80283a2:	4628      	mov	r0, r5
 80283a4:	9207      	str	r2, [sp, #28]
 80283a6:	f000 f9b5 	bl	8028714 <scalbnf>
 80283aa:	9a07      	ldr	r2, [sp, #28]
 80283ac:	ee38 8a40 	vsub.f32	s16, s16, s0
 80283b0:	e020      	b.n	80283f4 <__kernel_rem_pio2f+0x1c8>
 80283b2:	ee60 7a28 	vmul.f32	s15, s0, s17
 80283b6:	3f01      	subs	r7, #1
 80283b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80283bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80283c0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80283c4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80283c8:	ecac 0a01 	vstmia	ip!, {s0}
 80283cc:	ed90 0a00 	vldr	s0, [r0]
 80283d0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80283d4:	e79e      	b.n	8028314 <__kernel_rem_pio2f+0xe8>
 80283d6:	d105      	bne.n	80283e4 <__kernel_rem_pio2f+0x1b8>
 80283d8:	1e70      	subs	r0, r6, #1
 80283da:	ab08      	add	r3, sp, #32
 80283dc:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80283e0:	11ff      	asrs	r7, r7, #7
 80283e2:	e7c8      	b.n	8028376 <__kernel_rem_pio2f+0x14a>
 80283e4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80283e8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80283ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80283f0:	da30      	bge.n	8028454 <__kernel_rem_pio2f+0x228>
 80283f2:	2700      	movs	r7, #0
 80283f4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80283f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80283fc:	f040 809a 	bne.w	8028534 <__kernel_rem_pio2f+0x308>
 8028400:	1e74      	subs	r4, r6, #1
 8028402:	2100      	movs	r1, #0
 8028404:	46a4      	mov	ip, r4
 8028406:	45d4      	cmp	ip, sl
 8028408:	da47      	bge.n	802849a <__kernel_rem_pio2f+0x26e>
 802840a:	2900      	cmp	r1, #0
 802840c:	d063      	beq.n	80284d6 <__kernel_rem_pio2f+0x2aa>
 802840e:	ab08      	add	r3, sp, #32
 8028410:	3d08      	subs	r5, #8
 8028412:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8028416:	2b00      	cmp	r3, #0
 8028418:	d07f      	beq.n	802851a <__kernel_rem_pio2f+0x2ee>
 802841a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802841e:	4628      	mov	r0, r5
 8028420:	f000 f978 	bl	8028714 <scalbnf>
 8028424:	1c63      	adds	r3, r4, #1
 8028426:	aa44      	add	r2, sp, #272	; 0x110
 8028428:	ed9f 7a40 	vldr	s14, [pc, #256]	; 802852c <__kernel_rem_pio2f+0x300>
 802842c:	0099      	lsls	r1, r3, #2
 802842e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8028432:	4623      	mov	r3, r4
 8028434:	2b00      	cmp	r3, #0
 8028436:	f280 80ad 	bge.w	8028594 <__kernel_rem_pio2f+0x368>
 802843a:	4623      	mov	r3, r4
 802843c:	2b00      	cmp	r3, #0
 802843e:	f2c0 80cb 	blt.w	80285d8 <__kernel_rem_pio2f+0x3ac>
 8028442:	aa44      	add	r2, sp, #272	; 0x110
 8028444:	4e37      	ldr	r6, [pc, #220]	; (8028524 <__kernel_rem_pio2f+0x2f8>)
 8028446:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8028530 <__kernel_rem_pio2f+0x304>
 802844a:	2000      	movs	r0, #0
 802844c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8028450:	1ae2      	subs	r2, r4, r3
 8028452:	e0b6      	b.n	80285c2 <__kernel_rem_pio2f+0x396>
 8028454:	2702      	movs	r7, #2
 8028456:	e790      	b.n	802837a <__kernel_rem_pio2f+0x14e>
 8028458:	6820      	ldr	r0, [r4, #0]
 802845a:	b949      	cbnz	r1, 8028470 <__kernel_rem_pio2f+0x244>
 802845c:	b118      	cbz	r0, 8028466 <__kernel_rem_pio2f+0x23a>
 802845e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8028462:	6020      	str	r0, [r4, #0]
 8028464:	2001      	movs	r0, #1
 8028466:	f10e 0e01 	add.w	lr, lr, #1
 802846a:	3404      	adds	r4, #4
 802846c:	4601      	mov	r1, r0
 802846e:	e789      	b.n	8028384 <__kernel_rem_pio2f+0x158>
 8028470:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8028474:	6020      	str	r0, [r4, #0]
 8028476:	4608      	mov	r0, r1
 8028478:	e7f5      	b.n	8028466 <__kernel_rem_pio2f+0x23a>
 802847a:	1e74      	subs	r4, r6, #1
 802847c:	ab08      	add	r3, sp, #32
 802847e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8028482:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8028486:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 802848a:	e783      	b.n	8028394 <__kernel_rem_pio2f+0x168>
 802848c:	1e74      	subs	r4, r6, #1
 802848e:	ab08      	add	r3, sp, #32
 8028490:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8028494:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8028498:	e7f5      	b.n	8028486 <__kernel_rem_pio2f+0x25a>
 802849a:	ab08      	add	r3, sp, #32
 802849c:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 80284a0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80284a4:	4301      	orrs	r1, r0
 80284a6:	e7ae      	b.n	8028406 <__kernel_rem_pio2f+0x1da>
 80284a8:	3001      	adds	r0, #1
 80284aa:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 80284ae:	2f00      	cmp	r7, #0
 80284b0:	d0fa      	beq.n	80284a8 <__kernel_rem_pio2f+0x27c>
 80284b2:	9b06      	ldr	r3, [sp, #24]
 80284b4:	f106 0c01 	add.w	ip, r6, #1
 80284b8:	4430      	add	r0, r6
 80284ba:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80284be:	eb0d 0403 	add.w	r4, sp, r3
 80284c2:	9b01      	ldr	r3, [sp, #4]
 80284c4:	18f7      	adds	r7, r6, r3
 80284c6:	ab1c      	add	r3, sp, #112	; 0x70
 80284c8:	3c4c      	subs	r4, #76	; 0x4c
 80284ca:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80284ce:	4560      	cmp	r0, ip
 80284d0:	da04      	bge.n	80284dc <__kernel_rem_pio2f+0x2b0>
 80284d2:	4606      	mov	r6, r0
 80284d4:	e711      	b.n	80282fa <__kernel_rem_pio2f+0xce>
 80284d6:	9c05      	ldr	r4, [sp, #20]
 80284d8:	2001      	movs	r0, #1
 80284da:	e7e6      	b.n	80284aa <__kernel_rem_pio2f+0x27e>
 80284dc:	9b04      	ldr	r3, [sp, #16]
 80284de:	2600      	movs	r6, #0
 80284e0:	f8dd e008 	ldr.w	lr, [sp, #8]
 80284e4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80284e8:	ee07 3a90 	vmov	s15, r3
 80284ec:	9306      	str	r3, [sp, #24]
 80284ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80284f2:	ece7 7a01 	vstmia	r7!, {s15}
 80284f6:	46b9      	mov	r9, r7
 80284f8:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8028530 <__kernel_rem_pio2f+0x304>
 80284fc:	455e      	cmp	r6, fp
 80284fe:	dd04      	ble.n	802850a <__kernel_rem_pio2f+0x2de>
 8028500:	f10c 0c01 	add.w	ip, ip, #1
 8028504:	ece4 7a01 	vstmia	r4!, {s15}
 8028508:	e7e1      	b.n	80284ce <__kernel_rem_pio2f+0x2a2>
 802850a:	ecfe 6a01 	vldmia	lr!, {s13}
 802850e:	3601      	adds	r6, #1
 8028510:	ed39 7a01 	vldmdb	r9!, {s14}
 8028514:	eee6 7a87 	vfma.f32	s15, s13, s14
 8028518:	e7f0      	b.n	80284fc <__kernel_rem_pio2f+0x2d0>
 802851a:	3c01      	subs	r4, #1
 802851c:	e777      	b.n	802840e <__kernel_rem_pio2f+0x1e2>
 802851e:	bf00      	nop
 8028520:	08029f44 	.word	0x08029f44
 8028524:	08029f18 	.word	0x08029f18
 8028528:	43800000 	.word	0x43800000
 802852c:	3b800000 	.word	0x3b800000
 8028530:	00000000 	.word	0x00000000
 8028534:	9b03      	ldr	r3, [sp, #12]
 8028536:	eeb0 0a48 	vmov.f32	s0, s16
 802853a:	1a98      	subs	r0, r3, r2
 802853c:	f000 f8ea 	bl	8028714 <scalbnf>
 8028540:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8028528 <__kernel_rem_pio2f+0x2fc>
 8028544:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8028548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802854c:	db19      	blt.n	8028582 <__kernel_rem_pio2f+0x356>
 802854e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 802852c <__kernel_rem_pio2f+0x300>
 8028552:	aa08      	add	r2, sp, #32
 8028554:	1c74      	adds	r4, r6, #1
 8028556:	3508      	adds	r5, #8
 8028558:	ee60 7a27 	vmul.f32	s15, s0, s15
 802855c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8028560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8028564:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8028568:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802856c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8028570:	ee10 3a10 	vmov	r3, s0
 8028574:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8028578:	ee17 3a90 	vmov	r3, s15
 802857c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8028580:	e74b      	b.n	802841a <__kernel_rem_pio2f+0x1ee>
 8028582:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8028586:	aa08      	add	r2, sp, #32
 8028588:	4634      	mov	r4, r6
 802858a:	ee10 3a10 	vmov	r3, s0
 802858e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8028592:	e742      	b.n	802841a <__kernel_rem_pio2f+0x1ee>
 8028594:	a808      	add	r0, sp, #32
 8028596:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 802859a:	3b01      	subs	r3, #1
 802859c:	ee07 0a90 	vmov	s15, r0
 80285a0:	9001      	str	r0, [sp, #4]
 80285a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80285a6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80285aa:	ee20 0a07 	vmul.f32	s0, s0, s14
 80285ae:	ed62 7a01 	vstmdb	r2!, {s15}
 80285b2:	e73f      	b.n	8028434 <__kernel_rem_pio2f+0x208>
 80285b4:	ecf6 6a01 	vldmia	r6!, {s13}
 80285b8:	3001      	adds	r0, #1
 80285ba:	ecb5 7a01 	vldmia	r5!, {s14}
 80285be:	eee6 7a87 	vfma.f32	s15, s13, s14
 80285c2:	4550      	cmp	r0, sl
 80285c4:	dc01      	bgt.n	80285ca <__kernel_rem_pio2f+0x39e>
 80285c6:	4290      	cmp	r0, r2
 80285c8:	ddf4      	ble.n	80285b4 <__kernel_rem_pio2f+0x388>
 80285ca:	a858      	add	r0, sp, #352	; 0x160
 80285cc:	3b01      	subs	r3, #1
 80285ce:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80285d2:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 80285d6:	e731      	b.n	802843c <__kernel_rem_pio2f+0x210>
 80285d8:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80285da:	2b02      	cmp	r3, #2
 80285dc:	dc09      	bgt.n	80285f2 <__kernel_rem_pio2f+0x3c6>
 80285de:	2b00      	cmp	r3, #0
 80285e0:	dc2b      	bgt.n	802863a <__kernel_rem_pio2f+0x40e>
 80285e2:	d044      	beq.n	802866e <__kernel_rem_pio2f+0x442>
 80285e4:	f009 0007 	and.w	r0, r9, #7
 80285e8:	b059      	add	sp, #356	; 0x164
 80285ea:	ecbd 8b04 	vpop	{d8-d9}
 80285ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80285f2:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80285f4:	2b03      	cmp	r3, #3
 80285f6:	d1f5      	bne.n	80285e4 <__kernel_rem_pio2f+0x3b8>
 80285f8:	aa30      	add	r2, sp, #192	; 0xc0
 80285fa:	1f0b      	subs	r3, r1, #4
 80285fc:	4620      	mov	r0, r4
 80285fe:	4413      	add	r3, r2
 8028600:	461a      	mov	r2, r3
 8028602:	2800      	cmp	r0, #0
 8028604:	f1a2 0204 	sub.w	r2, r2, #4
 8028608:	dc52      	bgt.n	80286b0 <__kernel_rem_pio2f+0x484>
 802860a:	4622      	mov	r2, r4
 802860c:	2a01      	cmp	r2, #1
 802860e:	f1a3 0304 	sub.w	r3, r3, #4
 8028612:	dc5d      	bgt.n	80286d0 <__kernel_rem_pio2f+0x4a4>
 8028614:	ab30      	add	r3, sp, #192	; 0xc0
 8028616:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8028530 <__kernel_rem_pio2f+0x304>
 802861a:	440b      	add	r3, r1
 802861c:	2c01      	cmp	r4, #1
 802861e:	dc67      	bgt.n	80286f0 <__kernel_rem_pio2f+0x4c4>
 8028620:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8028624:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8028628:	2f00      	cmp	r7, #0
 802862a:	d167      	bne.n	80286fc <__kernel_rem_pio2f+0x4d0>
 802862c:	edc8 6a00 	vstr	s13, [r8]
 8028630:	ed88 7a01 	vstr	s14, [r8, #4]
 8028634:	edc8 7a02 	vstr	s15, [r8, #8]
 8028638:	e7d4      	b.n	80285e4 <__kernel_rem_pio2f+0x3b8>
 802863a:	ab30      	add	r3, sp, #192	; 0xc0
 802863c:	4622      	mov	r2, r4
 802863e:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8028530 <__kernel_rem_pio2f+0x304>
 8028642:	440b      	add	r3, r1
 8028644:	2a00      	cmp	r2, #0
 8028646:	da24      	bge.n	8028692 <__kernel_rem_pio2f+0x466>
 8028648:	b34f      	cbz	r7, 802869e <__kernel_rem_pio2f+0x472>
 802864a:	eef1 7a47 	vneg.f32	s15, s14
 802864e:	edc8 7a00 	vstr	s15, [r8]
 8028652:	aa31      	add	r2, sp, #196	; 0xc4
 8028654:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8028658:	2301      	movs	r3, #1
 802865a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802865e:	429c      	cmp	r4, r3
 8028660:	da20      	bge.n	80286a4 <__kernel_rem_pio2f+0x478>
 8028662:	b10f      	cbz	r7, 8028668 <__kernel_rem_pio2f+0x43c>
 8028664:	eef1 7a67 	vneg.f32	s15, s15
 8028668:	edc8 7a01 	vstr	s15, [r8, #4]
 802866c:	e7ba      	b.n	80285e4 <__kernel_rem_pio2f+0x3b8>
 802866e:	ab30      	add	r3, sp, #192	; 0xc0
 8028670:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8028530 <__kernel_rem_pio2f+0x304>
 8028674:	440b      	add	r3, r1
 8028676:	2c00      	cmp	r4, #0
 8028678:	da05      	bge.n	8028686 <__kernel_rem_pio2f+0x45a>
 802867a:	b10f      	cbz	r7, 8028680 <__kernel_rem_pio2f+0x454>
 802867c:	eef1 7a67 	vneg.f32	s15, s15
 8028680:	edc8 7a00 	vstr	s15, [r8]
 8028684:	e7ae      	b.n	80285e4 <__kernel_rem_pio2f+0x3b8>
 8028686:	ed33 7a01 	vldmdb	r3!, {s14}
 802868a:	3c01      	subs	r4, #1
 802868c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8028690:	e7f1      	b.n	8028676 <__kernel_rem_pio2f+0x44a>
 8028692:	ed73 7a01 	vldmdb	r3!, {s15}
 8028696:	3a01      	subs	r2, #1
 8028698:	ee37 7a27 	vadd.f32	s14, s14, s15
 802869c:	e7d2      	b.n	8028644 <__kernel_rem_pio2f+0x418>
 802869e:	eef0 7a47 	vmov.f32	s15, s14
 80286a2:	e7d4      	b.n	802864e <__kernel_rem_pio2f+0x422>
 80286a4:	ecb2 7a01 	vldmia	r2!, {s14}
 80286a8:	3301      	adds	r3, #1
 80286aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80286ae:	e7d6      	b.n	802865e <__kernel_rem_pio2f+0x432>
 80286b0:	edd2 7a00 	vldr	s15, [r2]
 80286b4:	3801      	subs	r0, #1
 80286b6:	edd2 6a01 	vldr	s13, [r2, #4]
 80286ba:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80286be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80286c2:	ed82 7a00 	vstr	s14, [r2]
 80286c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80286ca:	edc2 7a01 	vstr	s15, [r2, #4]
 80286ce:	e798      	b.n	8028602 <__kernel_rem_pio2f+0x3d6>
 80286d0:	edd3 7a00 	vldr	s15, [r3]
 80286d4:	3a01      	subs	r2, #1
 80286d6:	edd3 6a01 	vldr	s13, [r3, #4]
 80286da:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80286de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80286e2:	ed83 7a00 	vstr	s14, [r3]
 80286e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80286ea:	edc3 7a01 	vstr	s15, [r3, #4]
 80286ee:	e78d      	b.n	802860c <__kernel_rem_pio2f+0x3e0>
 80286f0:	ed33 7a01 	vldmdb	r3!, {s14}
 80286f4:	3c01      	subs	r4, #1
 80286f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80286fa:	e78f      	b.n	802861c <__kernel_rem_pio2f+0x3f0>
 80286fc:	eef1 6a66 	vneg.f32	s13, s13
 8028700:	eeb1 7a47 	vneg.f32	s14, s14
 8028704:	eef1 7a67 	vneg.f32	s15, s15
 8028708:	edc8 6a00 	vstr	s13, [r8]
 802870c:	ed88 7a01 	vstr	s14, [r8, #4]
 8028710:	e790      	b.n	8028634 <__kernel_rem_pio2f+0x408>
 8028712:	bf00      	nop

08028714 <scalbnf>:
 8028714:	ee10 3a10 	vmov	r3, s0
 8028718:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 802871c:	d02a      	beq.n	8028774 <scalbnf+0x60>
 802871e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8028722:	d302      	bcc.n	802872a <scalbnf+0x16>
 8028724:	ee30 0a00 	vadd.f32	s0, s0, s0
 8028728:	4770      	bx	lr
 802872a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 802872e:	d122      	bne.n	8028776 <scalbnf+0x62>
 8028730:	4b23      	ldr	r3, [pc, #140]	; (80287c0 <scalbnf+0xac>)
 8028732:	eddf 7a24 	vldr	s15, [pc, #144]	; 80287c4 <scalbnf+0xb0>
 8028736:	4298      	cmp	r0, r3
 8028738:	ee20 0a27 	vmul.f32	s0, s0, s15
 802873c:	db16      	blt.n	802876c <scalbnf+0x58>
 802873e:	ee10 3a10 	vmov	r3, s0
 8028742:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8028746:	3a19      	subs	r2, #25
 8028748:	f24c 3150 	movw	r1, #50000	; 0xc350
 802874c:	4288      	cmp	r0, r1
 802874e:	dd14      	ble.n	802877a <scalbnf+0x66>
 8028750:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80287c8 <scalbnf+0xb4>
 8028754:	ee10 3a10 	vmov	r3, s0
 8028758:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80287cc <scalbnf+0xb8>
 802875c:	eeb0 7a67 	vmov.f32	s14, s15
 8028760:	2b00      	cmp	r3, #0
 8028762:	fe67 7aa6 	vselge.f32	s15, s15, s13
 8028766:	ee27 0a87 	vmul.f32	s0, s15, s14
 802876a:	4770      	bx	lr
 802876c:	eddf 7a18 	vldr	s15, [pc, #96]	; 80287d0 <scalbnf+0xbc>
 8028770:	ee27 0a80 	vmul.f32	s0, s15, s0
 8028774:	4770      	bx	lr
 8028776:	0dd2      	lsrs	r2, r2, #23
 8028778:	e7e6      	b.n	8028748 <scalbnf+0x34>
 802877a:	4410      	add	r0, r2
 802877c:	28fe      	cmp	r0, #254	; 0xfe
 802877e:	dce7      	bgt.n	8028750 <scalbnf+0x3c>
 8028780:	2800      	cmp	r0, #0
 8028782:	dd06      	ble.n	8028792 <scalbnf+0x7e>
 8028784:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8028788:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 802878c:	ee00 3a10 	vmov	s0, r3
 8028790:	4770      	bx	lr
 8028792:	f110 0f16 	cmn.w	r0, #22
 8028796:	da09      	bge.n	80287ac <scalbnf+0x98>
 8028798:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80287d0 <scalbnf+0xbc>
 802879c:	ee10 3a10 	vmov	r3, s0
 80287a0:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80287d4 <scalbnf+0xc0>
 80287a4:	eeb0 7a67 	vmov.f32	s14, s15
 80287a8:	2b00      	cmp	r3, #0
 80287aa:	e7da      	b.n	8028762 <scalbnf+0x4e>
 80287ac:	3019      	adds	r0, #25
 80287ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80287b2:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80287d8 <scalbnf+0xc4>
 80287b6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80287ba:	ee07 3a90 	vmov	s15, r3
 80287be:	e7d7      	b.n	8028770 <scalbnf+0x5c>
 80287c0:	ffff3cb0 	.word	0xffff3cb0
 80287c4:	4c000000 	.word	0x4c000000
 80287c8:	7149f2ca 	.word	0x7149f2ca
 80287cc:	f149f2ca 	.word	0xf149f2ca
 80287d0:	0da24260 	.word	0x0da24260
 80287d4:	8da24260 	.word	0x8da24260
 80287d8:	33000000 	.word	0x33000000
 80287dc:	00000000 	.word	0x00000000

080287e0 <floor>:
 80287e0:	ec51 0b10 	vmov	r0, r1, d0
 80287e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80287e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80287ec:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80287f0:	460c      	mov	r4, r1
 80287f2:	ee10 5a10 	vmov	r5, s0
 80287f6:	ee10 8a10 	vmov	r8, s0
 80287fa:	2e13      	cmp	r6, #19
 80287fc:	dc32      	bgt.n	8028864 <floor+0x84>
 80287fe:	2e00      	cmp	r6, #0
 8028800:	da14      	bge.n	802882c <floor+0x4c>
 8028802:	a333      	add	r3, pc, #204	; (adr r3, 80288d0 <floor+0xf0>)
 8028804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028808:	f7d7 fd32 	bl	8000270 <__adddf3>
 802880c:	2200      	movs	r2, #0
 802880e:	2300      	movs	r3, #0
 8028810:	f7d8 f974 	bl	8000afc <__aeabi_dcmpgt>
 8028814:	b138      	cbz	r0, 8028826 <floor+0x46>
 8028816:	2c00      	cmp	r4, #0
 8028818:	da54      	bge.n	80288c4 <floor+0xe4>
 802881a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 802881e:	4325      	orrs	r5, r4
 8028820:	d053      	beq.n	80288ca <floor+0xea>
 8028822:	2500      	movs	r5, #0
 8028824:	4c2c      	ldr	r4, [pc, #176]	; (80288d8 <floor+0xf8>)
 8028826:	4621      	mov	r1, r4
 8028828:	4628      	mov	r0, r5
 802882a:	e025      	b.n	8028878 <floor+0x98>
 802882c:	4f2b      	ldr	r7, [pc, #172]	; (80288dc <floor+0xfc>)
 802882e:	4137      	asrs	r7, r6
 8028830:	ea01 0307 	and.w	r3, r1, r7
 8028834:	4303      	orrs	r3, r0
 8028836:	d01f      	beq.n	8028878 <floor+0x98>
 8028838:	a325      	add	r3, pc, #148	; (adr r3, 80288d0 <floor+0xf0>)
 802883a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802883e:	f7d7 fd17 	bl	8000270 <__adddf3>
 8028842:	2200      	movs	r2, #0
 8028844:	2300      	movs	r3, #0
 8028846:	f7d8 f959 	bl	8000afc <__aeabi_dcmpgt>
 802884a:	2800      	cmp	r0, #0
 802884c:	d0eb      	beq.n	8028826 <floor+0x46>
 802884e:	2c00      	cmp	r4, #0
 8028850:	f04f 0500 	mov.w	r5, #0
 8028854:	bfbe      	ittt	lt
 8028856:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 802885a:	4133      	asrlt	r3, r6
 802885c:	18e4      	addlt	r4, r4, r3
 802885e:	ea24 0407 	bic.w	r4, r4, r7
 8028862:	e7e0      	b.n	8028826 <floor+0x46>
 8028864:	2e33      	cmp	r6, #51	; 0x33
 8028866:	dd0b      	ble.n	8028880 <floor+0xa0>
 8028868:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802886c:	d104      	bne.n	8028878 <floor+0x98>
 802886e:	ee10 2a10 	vmov	r2, s0
 8028872:	460b      	mov	r3, r1
 8028874:	f7d7 fcfc 	bl	8000270 <__adddf3>
 8028878:	ec41 0b10 	vmov	d0, r0, r1
 802887c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028880:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8028884:	f04f 37ff 	mov.w	r7, #4294967295
 8028888:	40df      	lsrs	r7, r3
 802888a:	4238      	tst	r0, r7
 802888c:	d0f4      	beq.n	8028878 <floor+0x98>
 802888e:	a310      	add	r3, pc, #64	; (adr r3, 80288d0 <floor+0xf0>)
 8028890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028894:	f7d7 fcec 	bl	8000270 <__adddf3>
 8028898:	2200      	movs	r2, #0
 802889a:	2300      	movs	r3, #0
 802889c:	f7d8 f92e 	bl	8000afc <__aeabi_dcmpgt>
 80288a0:	2800      	cmp	r0, #0
 80288a2:	d0c0      	beq.n	8028826 <floor+0x46>
 80288a4:	2c00      	cmp	r4, #0
 80288a6:	da0a      	bge.n	80288be <floor+0xde>
 80288a8:	2e14      	cmp	r6, #20
 80288aa:	d101      	bne.n	80288b0 <floor+0xd0>
 80288ac:	3401      	adds	r4, #1
 80288ae:	e006      	b.n	80288be <floor+0xde>
 80288b0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80288b4:	2301      	movs	r3, #1
 80288b6:	40b3      	lsls	r3, r6
 80288b8:	441d      	add	r5, r3
 80288ba:	45a8      	cmp	r8, r5
 80288bc:	d8f6      	bhi.n	80288ac <floor+0xcc>
 80288be:	ea25 0507 	bic.w	r5, r5, r7
 80288c2:	e7b0      	b.n	8028826 <floor+0x46>
 80288c4:	2500      	movs	r5, #0
 80288c6:	462c      	mov	r4, r5
 80288c8:	e7ad      	b.n	8028826 <floor+0x46>
 80288ca:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80288ce:	e7aa      	b.n	8028826 <floor+0x46>
 80288d0:	8800759c 	.word	0x8800759c
 80288d4:	7e37e43c 	.word	0x7e37e43c
 80288d8:	bff00000 	.word	0xbff00000
 80288dc:	000fffff 	.word	0x000fffff

080288e0 <floorf>:
 80288e0:	febb 0a40 	vrintm.f32	s0, s0
 80288e4:	4770      	bx	lr

080288e6 <abort>:
 80288e6:	2006      	movs	r0, #6
 80288e8:	b508      	push	{r3, lr}
 80288ea:	f000 f937 	bl	8028b5c <raise>
 80288ee:	2001      	movs	r0, #1
 80288f0:	f7f0 f858 	bl	80189a4 <_exit>

080288f4 <malloc>:
 80288f4:	4b02      	ldr	r3, [pc, #8]	; (8028900 <malloc+0xc>)
 80288f6:	4601      	mov	r1, r0
 80288f8:	6818      	ldr	r0, [r3, #0]
 80288fa:	f000 b82b 	b.w	8028954 <_malloc_r>
 80288fe:	bf00      	nop
 8028900:	200000fc 	.word	0x200000fc

08028904 <free>:
 8028904:	4b02      	ldr	r3, [pc, #8]	; (8028910 <free+0xc>)
 8028906:	4601      	mov	r1, r0
 8028908:	6818      	ldr	r0, [r3, #0]
 802890a:	f000 b98d 	b.w	8028c28 <_free_r>
 802890e:	bf00      	nop
 8028910:	200000fc 	.word	0x200000fc

08028914 <sbrk_aligned>:
 8028914:	b570      	push	{r4, r5, r6, lr}
 8028916:	4e0e      	ldr	r6, [pc, #56]	; (8028950 <sbrk_aligned+0x3c>)
 8028918:	460c      	mov	r4, r1
 802891a:	4605      	mov	r5, r0
 802891c:	6831      	ldr	r1, [r6, #0]
 802891e:	b911      	cbnz	r1, 8028926 <sbrk_aligned+0x12>
 8028920:	f000 f938 	bl	8028b94 <_sbrk_r>
 8028924:	6030      	str	r0, [r6, #0]
 8028926:	4621      	mov	r1, r4
 8028928:	4628      	mov	r0, r5
 802892a:	f000 f933 	bl	8028b94 <_sbrk_r>
 802892e:	1c43      	adds	r3, r0, #1
 8028930:	d00a      	beq.n	8028948 <sbrk_aligned+0x34>
 8028932:	1cc4      	adds	r4, r0, #3
 8028934:	f024 0403 	bic.w	r4, r4, #3
 8028938:	42a0      	cmp	r0, r4
 802893a:	d007      	beq.n	802894c <sbrk_aligned+0x38>
 802893c:	1a21      	subs	r1, r4, r0
 802893e:	4628      	mov	r0, r5
 8028940:	f000 f928 	bl	8028b94 <_sbrk_r>
 8028944:	3001      	adds	r0, #1
 8028946:	d101      	bne.n	802894c <sbrk_aligned+0x38>
 8028948:	f04f 34ff 	mov.w	r4, #4294967295
 802894c:	4620      	mov	r0, r4
 802894e:	bd70      	pop	{r4, r5, r6, pc}
 8028950:	20005d30 	.word	0x20005d30

08028954 <_malloc_r>:
 8028954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028958:	1ccd      	adds	r5, r1, #3
 802895a:	4607      	mov	r7, r0
 802895c:	f025 0503 	bic.w	r5, r5, #3
 8028960:	3508      	adds	r5, #8
 8028962:	2d0c      	cmp	r5, #12
 8028964:	bf38      	it	cc
 8028966:	250c      	movcc	r5, #12
 8028968:	2d00      	cmp	r5, #0
 802896a:	db01      	blt.n	8028970 <_malloc_r+0x1c>
 802896c:	42a9      	cmp	r1, r5
 802896e:	d905      	bls.n	802897c <_malloc_r+0x28>
 8028970:	230c      	movs	r3, #12
 8028972:	2600      	movs	r6, #0
 8028974:	603b      	str	r3, [r7, #0]
 8028976:	4630      	mov	r0, r6
 8028978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802897c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8028a50 <_malloc_r+0xfc>
 8028980:	f000 f868 	bl	8028a54 <__malloc_lock>
 8028984:	f8d8 3000 	ldr.w	r3, [r8]
 8028988:	461c      	mov	r4, r3
 802898a:	bb5c      	cbnz	r4, 80289e4 <_malloc_r+0x90>
 802898c:	4629      	mov	r1, r5
 802898e:	4638      	mov	r0, r7
 8028990:	f7ff ffc0 	bl	8028914 <sbrk_aligned>
 8028994:	1c43      	adds	r3, r0, #1
 8028996:	4604      	mov	r4, r0
 8028998:	d155      	bne.n	8028a46 <_malloc_r+0xf2>
 802899a:	f8d8 4000 	ldr.w	r4, [r8]
 802899e:	4626      	mov	r6, r4
 80289a0:	2e00      	cmp	r6, #0
 80289a2:	d145      	bne.n	8028a30 <_malloc_r+0xdc>
 80289a4:	2c00      	cmp	r4, #0
 80289a6:	d048      	beq.n	8028a3a <_malloc_r+0xe6>
 80289a8:	6823      	ldr	r3, [r4, #0]
 80289aa:	4631      	mov	r1, r6
 80289ac:	4638      	mov	r0, r7
 80289ae:	eb04 0903 	add.w	r9, r4, r3
 80289b2:	f000 f8ef 	bl	8028b94 <_sbrk_r>
 80289b6:	4581      	cmp	r9, r0
 80289b8:	d13f      	bne.n	8028a3a <_malloc_r+0xe6>
 80289ba:	6821      	ldr	r1, [r4, #0]
 80289bc:	4638      	mov	r0, r7
 80289be:	1a6d      	subs	r5, r5, r1
 80289c0:	4629      	mov	r1, r5
 80289c2:	f7ff ffa7 	bl	8028914 <sbrk_aligned>
 80289c6:	3001      	adds	r0, #1
 80289c8:	d037      	beq.n	8028a3a <_malloc_r+0xe6>
 80289ca:	6823      	ldr	r3, [r4, #0]
 80289cc:	442b      	add	r3, r5
 80289ce:	6023      	str	r3, [r4, #0]
 80289d0:	f8d8 3000 	ldr.w	r3, [r8]
 80289d4:	2b00      	cmp	r3, #0
 80289d6:	d038      	beq.n	8028a4a <_malloc_r+0xf6>
 80289d8:	685a      	ldr	r2, [r3, #4]
 80289da:	42a2      	cmp	r2, r4
 80289dc:	d12b      	bne.n	8028a36 <_malloc_r+0xe2>
 80289de:	2200      	movs	r2, #0
 80289e0:	605a      	str	r2, [r3, #4]
 80289e2:	e00f      	b.n	8028a04 <_malloc_r+0xb0>
 80289e4:	6822      	ldr	r2, [r4, #0]
 80289e6:	1b52      	subs	r2, r2, r5
 80289e8:	d41f      	bmi.n	8028a2a <_malloc_r+0xd6>
 80289ea:	2a0b      	cmp	r2, #11
 80289ec:	d917      	bls.n	8028a1e <_malloc_r+0xca>
 80289ee:	1961      	adds	r1, r4, r5
 80289f0:	42a3      	cmp	r3, r4
 80289f2:	6025      	str	r5, [r4, #0]
 80289f4:	bf18      	it	ne
 80289f6:	6059      	strne	r1, [r3, #4]
 80289f8:	6863      	ldr	r3, [r4, #4]
 80289fa:	bf08      	it	eq
 80289fc:	f8c8 1000 	streq.w	r1, [r8]
 8028a00:	5162      	str	r2, [r4, r5]
 8028a02:	604b      	str	r3, [r1, #4]
 8028a04:	f104 060b 	add.w	r6, r4, #11
 8028a08:	4638      	mov	r0, r7
 8028a0a:	f000 f829 	bl	8028a60 <__malloc_unlock>
 8028a0e:	1d23      	adds	r3, r4, #4
 8028a10:	f026 0607 	bic.w	r6, r6, #7
 8028a14:	1af2      	subs	r2, r6, r3
 8028a16:	d0ae      	beq.n	8028976 <_malloc_r+0x22>
 8028a18:	1b9b      	subs	r3, r3, r6
 8028a1a:	50a3      	str	r3, [r4, r2]
 8028a1c:	e7ab      	b.n	8028976 <_malloc_r+0x22>
 8028a1e:	42a3      	cmp	r3, r4
 8028a20:	6862      	ldr	r2, [r4, #4]
 8028a22:	d1dd      	bne.n	80289e0 <_malloc_r+0x8c>
 8028a24:	f8c8 2000 	str.w	r2, [r8]
 8028a28:	e7ec      	b.n	8028a04 <_malloc_r+0xb0>
 8028a2a:	4623      	mov	r3, r4
 8028a2c:	6864      	ldr	r4, [r4, #4]
 8028a2e:	e7ac      	b.n	802898a <_malloc_r+0x36>
 8028a30:	4634      	mov	r4, r6
 8028a32:	6876      	ldr	r6, [r6, #4]
 8028a34:	e7b4      	b.n	80289a0 <_malloc_r+0x4c>
 8028a36:	4613      	mov	r3, r2
 8028a38:	e7cc      	b.n	80289d4 <_malloc_r+0x80>
 8028a3a:	230c      	movs	r3, #12
 8028a3c:	4638      	mov	r0, r7
 8028a3e:	603b      	str	r3, [r7, #0]
 8028a40:	f000 f80e 	bl	8028a60 <__malloc_unlock>
 8028a44:	e797      	b.n	8028976 <_malloc_r+0x22>
 8028a46:	6025      	str	r5, [r4, #0]
 8028a48:	e7dc      	b.n	8028a04 <_malloc_r+0xb0>
 8028a4a:	605b      	str	r3, [r3, #4]
 8028a4c:	deff      	udf	#255	; 0xff
 8028a4e:	bf00      	nop
 8028a50:	20005d2c 	.word	0x20005d2c

08028a54 <__malloc_lock>:
 8028a54:	4801      	ldr	r0, [pc, #4]	; (8028a5c <__malloc_lock+0x8>)
 8028a56:	f000 b8d7 	b.w	8028c08 <__retarget_lock_acquire_recursive>
 8028a5a:	bf00      	nop
 8028a5c:	20005e70 	.word	0x20005e70

08028a60 <__malloc_unlock>:
 8028a60:	4801      	ldr	r0, [pc, #4]	; (8028a68 <__malloc_unlock+0x8>)
 8028a62:	f000 b8d2 	b.w	8028c0a <__retarget_lock_release_recursive>
 8028a66:	bf00      	nop
 8028a68:	20005e70 	.word	0x20005e70

08028a6c <siscanf>:
 8028a6c:	b40e      	push	{r1, r2, r3}
 8028a6e:	b510      	push	{r4, lr}
 8028a70:	b09f      	sub	sp, #124	; 0x7c
 8028a72:	f44f 7101 	mov.w	r1, #516	; 0x204
 8028a76:	ac21      	add	r4, sp, #132	; 0x84
 8028a78:	f8ad 101c 	strh.w	r1, [sp, #28]
 8028a7c:	9004      	str	r0, [sp, #16]
 8028a7e:	f854 2b04 	ldr.w	r2, [r4], #4
 8028a82:	9008      	str	r0, [sp, #32]
 8028a84:	9201      	str	r2, [sp, #4]
 8028a86:	f7d7 fbe5 	bl	8000254 <strlen>
 8028a8a:	4b0c      	ldr	r3, [pc, #48]	; (8028abc <siscanf+0x50>)
 8028a8c:	a904      	add	r1, sp, #16
 8028a8e:	9005      	str	r0, [sp, #20]
 8028a90:	930d      	str	r3, [sp, #52]	; 0x34
 8028a92:	2300      	movs	r3, #0
 8028a94:	9009      	str	r0, [sp, #36]	; 0x24
 8028a96:	9311      	str	r3, [sp, #68]	; 0x44
 8028a98:	9316      	str	r3, [sp, #88]	; 0x58
 8028a9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8028a9e:	4808      	ldr	r0, [pc, #32]	; (8028ac0 <siscanf+0x54>)
 8028aa0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8028aa4:	4623      	mov	r3, r4
 8028aa6:	9a01      	ldr	r2, [sp, #4]
 8028aa8:	6800      	ldr	r0, [r0, #0]
 8028aaa:	9403      	str	r4, [sp, #12]
 8028aac:	f000 f962 	bl	8028d74 <__ssvfiscanf_r>
 8028ab0:	b01f      	add	sp, #124	; 0x7c
 8028ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028ab6:	b003      	add	sp, #12
 8028ab8:	4770      	bx	lr
 8028aba:	bf00      	nop
 8028abc:	08028ac5 	.word	0x08028ac5
 8028ac0:	200000fc 	.word	0x200000fc

08028ac4 <__seofread>:
 8028ac4:	2000      	movs	r0, #0
 8028ac6:	4770      	bx	lr

08028ac8 <memmove>:
 8028ac8:	4288      	cmp	r0, r1
 8028aca:	b510      	push	{r4, lr}
 8028acc:	eb01 0402 	add.w	r4, r1, r2
 8028ad0:	d902      	bls.n	8028ad8 <memmove+0x10>
 8028ad2:	4284      	cmp	r4, r0
 8028ad4:	4623      	mov	r3, r4
 8028ad6:	d807      	bhi.n	8028ae8 <memmove+0x20>
 8028ad8:	1e43      	subs	r3, r0, #1
 8028ada:	42a1      	cmp	r1, r4
 8028adc:	d008      	beq.n	8028af0 <memmove+0x28>
 8028ade:	f811 2b01 	ldrb.w	r2, [r1], #1
 8028ae2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8028ae6:	e7f8      	b.n	8028ada <memmove+0x12>
 8028ae8:	4402      	add	r2, r0
 8028aea:	4601      	mov	r1, r0
 8028aec:	428a      	cmp	r2, r1
 8028aee:	d100      	bne.n	8028af2 <memmove+0x2a>
 8028af0:	bd10      	pop	{r4, pc}
 8028af2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8028af6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8028afa:	e7f7      	b.n	8028aec <memmove+0x24>

08028afc <memset>:
 8028afc:	4402      	add	r2, r0
 8028afe:	4603      	mov	r3, r0
 8028b00:	4293      	cmp	r3, r2
 8028b02:	d100      	bne.n	8028b06 <memset+0xa>
 8028b04:	4770      	bx	lr
 8028b06:	f803 1b01 	strb.w	r1, [r3], #1
 8028b0a:	e7f9      	b.n	8028b00 <memset+0x4>

08028b0c <_raise_r>:
 8028b0c:	291f      	cmp	r1, #31
 8028b0e:	b538      	push	{r3, r4, r5, lr}
 8028b10:	4604      	mov	r4, r0
 8028b12:	460d      	mov	r5, r1
 8028b14:	d904      	bls.n	8028b20 <_raise_r+0x14>
 8028b16:	2316      	movs	r3, #22
 8028b18:	6003      	str	r3, [r0, #0]
 8028b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8028b1e:	bd38      	pop	{r3, r4, r5, pc}
 8028b20:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8028b22:	b112      	cbz	r2, 8028b2a <_raise_r+0x1e>
 8028b24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8028b28:	b94b      	cbnz	r3, 8028b3e <_raise_r+0x32>
 8028b2a:	4620      	mov	r0, r4
 8028b2c:	f000 f830 	bl	8028b90 <_getpid_r>
 8028b30:	462a      	mov	r2, r5
 8028b32:	4601      	mov	r1, r0
 8028b34:	4620      	mov	r0, r4
 8028b36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028b3a:	f000 b817 	b.w	8028b6c <_kill_r>
 8028b3e:	2b01      	cmp	r3, #1
 8028b40:	d00a      	beq.n	8028b58 <_raise_r+0x4c>
 8028b42:	1c59      	adds	r1, r3, #1
 8028b44:	d103      	bne.n	8028b4e <_raise_r+0x42>
 8028b46:	2316      	movs	r3, #22
 8028b48:	6003      	str	r3, [r0, #0]
 8028b4a:	2001      	movs	r0, #1
 8028b4c:	e7e7      	b.n	8028b1e <_raise_r+0x12>
 8028b4e:	2400      	movs	r4, #0
 8028b50:	4628      	mov	r0, r5
 8028b52:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8028b56:	4798      	blx	r3
 8028b58:	2000      	movs	r0, #0
 8028b5a:	e7e0      	b.n	8028b1e <_raise_r+0x12>

08028b5c <raise>:
 8028b5c:	4b02      	ldr	r3, [pc, #8]	; (8028b68 <raise+0xc>)
 8028b5e:	4601      	mov	r1, r0
 8028b60:	6818      	ldr	r0, [r3, #0]
 8028b62:	f7ff bfd3 	b.w	8028b0c <_raise_r>
 8028b66:	bf00      	nop
 8028b68:	200000fc 	.word	0x200000fc

08028b6c <_kill_r>:
 8028b6c:	b538      	push	{r3, r4, r5, lr}
 8028b6e:	2300      	movs	r3, #0
 8028b70:	4d06      	ldr	r5, [pc, #24]	; (8028b8c <_kill_r+0x20>)
 8028b72:	4604      	mov	r4, r0
 8028b74:	4608      	mov	r0, r1
 8028b76:	4611      	mov	r1, r2
 8028b78:	602b      	str	r3, [r5, #0]
 8028b7a:	f7ef ff03 	bl	8018984 <_kill>
 8028b7e:	1c43      	adds	r3, r0, #1
 8028b80:	d102      	bne.n	8028b88 <_kill_r+0x1c>
 8028b82:	682b      	ldr	r3, [r5, #0]
 8028b84:	b103      	cbz	r3, 8028b88 <_kill_r+0x1c>
 8028b86:	6023      	str	r3, [r4, #0]
 8028b88:	bd38      	pop	{r3, r4, r5, pc}
 8028b8a:	bf00      	nop
 8028b8c:	20005e6c 	.word	0x20005e6c

08028b90 <_getpid_r>:
 8028b90:	f7ef bef0 	b.w	8018974 <_getpid>

08028b94 <_sbrk_r>:
 8028b94:	b538      	push	{r3, r4, r5, lr}
 8028b96:	2300      	movs	r3, #0
 8028b98:	4d05      	ldr	r5, [pc, #20]	; (8028bb0 <_sbrk_r+0x1c>)
 8028b9a:	4604      	mov	r4, r0
 8028b9c:	4608      	mov	r0, r1
 8028b9e:	602b      	str	r3, [r5, #0]
 8028ba0:	f7ef ff0a 	bl	80189b8 <_sbrk>
 8028ba4:	1c43      	adds	r3, r0, #1
 8028ba6:	d102      	bne.n	8028bae <_sbrk_r+0x1a>
 8028ba8:	682b      	ldr	r3, [r5, #0]
 8028baa:	b103      	cbz	r3, 8028bae <_sbrk_r+0x1a>
 8028bac:	6023      	str	r3, [r4, #0]
 8028bae:	bd38      	pop	{r3, r4, r5, pc}
 8028bb0:	20005e6c 	.word	0x20005e6c

08028bb4 <__errno>:
 8028bb4:	4b01      	ldr	r3, [pc, #4]	; (8028bbc <__errno+0x8>)
 8028bb6:	6818      	ldr	r0, [r3, #0]
 8028bb8:	4770      	bx	lr
 8028bba:	bf00      	nop
 8028bbc:	200000fc 	.word	0x200000fc

08028bc0 <__libc_init_array>:
 8028bc0:	b570      	push	{r4, r5, r6, lr}
 8028bc2:	4d0d      	ldr	r5, [pc, #52]	; (8028bf8 <__libc_init_array+0x38>)
 8028bc4:	2600      	movs	r6, #0
 8028bc6:	4c0d      	ldr	r4, [pc, #52]	; (8028bfc <__libc_init_array+0x3c>)
 8028bc8:	1b64      	subs	r4, r4, r5
 8028bca:	10a4      	asrs	r4, r4, #2
 8028bcc:	42a6      	cmp	r6, r4
 8028bce:	d109      	bne.n	8028be4 <__libc_init_array+0x24>
 8028bd0:	4d0b      	ldr	r5, [pc, #44]	; (8028c00 <__libc_init_array+0x40>)
 8028bd2:	2600      	movs	r6, #0
 8028bd4:	4c0b      	ldr	r4, [pc, #44]	; (8028c04 <__libc_init_array+0x44>)
 8028bd6:	f000 fd3f 	bl	8029658 <_init>
 8028bda:	1b64      	subs	r4, r4, r5
 8028bdc:	10a4      	asrs	r4, r4, #2
 8028bde:	42a6      	cmp	r6, r4
 8028be0:	d105      	bne.n	8028bee <__libc_init_array+0x2e>
 8028be2:	bd70      	pop	{r4, r5, r6, pc}
 8028be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8028be8:	3601      	adds	r6, #1
 8028bea:	4798      	blx	r3
 8028bec:	e7ee      	b.n	8028bcc <__libc_init_array+0xc>
 8028bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8028bf2:	3601      	adds	r6, #1
 8028bf4:	4798      	blx	r3
 8028bf6:	e7f2      	b.n	8028bde <__libc_init_array+0x1e>
 8028bf8:	0802a078 	.word	0x0802a078
 8028bfc:	0802a078 	.word	0x0802a078
 8028c00:	0802a078 	.word	0x0802a078
 8028c04:	0802a088 	.word	0x0802a088

08028c08 <__retarget_lock_acquire_recursive>:
 8028c08:	4770      	bx	lr

08028c0a <__retarget_lock_release_recursive>:
 8028c0a:	4770      	bx	lr

08028c0c <memcpy>:
 8028c0c:	440a      	add	r2, r1
 8028c0e:	1e43      	subs	r3, r0, #1
 8028c10:	4291      	cmp	r1, r2
 8028c12:	d100      	bne.n	8028c16 <memcpy+0xa>
 8028c14:	4770      	bx	lr
 8028c16:	b510      	push	{r4, lr}
 8028c18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8028c1c:	4291      	cmp	r1, r2
 8028c1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8028c22:	d1f9      	bne.n	8028c18 <memcpy+0xc>
 8028c24:	bd10      	pop	{r4, pc}
	...

08028c28 <_free_r>:
 8028c28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8028c2a:	2900      	cmp	r1, #0
 8028c2c:	d043      	beq.n	8028cb6 <_free_r+0x8e>
 8028c2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8028c32:	1f0c      	subs	r4, r1, #4
 8028c34:	9001      	str	r0, [sp, #4]
 8028c36:	2b00      	cmp	r3, #0
 8028c38:	bfb8      	it	lt
 8028c3a:	18e4      	addlt	r4, r4, r3
 8028c3c:	f7ff ff0a 	bl	8028a54 <__malloc_lock>
 8028c40:	4a1e      	ldr	r2, [pc, #120]	; (8028cbc <_free_r+0x94>)
 8028c42:	9801      	ldr	r0, [sp, #4]
 8028c44:	6813      	ldr	r3, [r2, #0]
 8028c46:	b933      	cbnz	r3, 8028c56 <_free_r+0x2e>
 8028c48:	6063      	str	r3, [r4, #4]
 8028c4a:	6014      	str	r4, [r2, #0]
 8028c4c:	b003      	add	sp, #12
 8028c4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8028c52:	f7ff bf05 	b.w	8028a60 <__malloc_unlock>
 8028c56:	42a3      	cmp	r3, r4
 8028c58:	d908      	bls.n	8028c6c <_free_r+0x44>
 8028c5a:	6825      	ldr	r5, [r4, #0]
 8028c5c:	1961      	adds	r1, r4, r5
 8028c5e:	428b      	cmp	r3, r1
 8028c60:	bf01      	itttt	eq
 8028c62:	6819      	ldreq	r1, [r3, #0]
 8028c64:	685b      	ldreq	r3, [r3, #4]
 8028c66:	1949      	addeq	r1, r1, r5
 8028c68:	6021      	streq	r1, [r4, #0]
 8028c6a:	e7ed      	b.n	8028c48 <_free_r+0x20>
 8028c6c:	461a      	mov	r2, r3
 8028c6e:	685b      	ldr	r3, [r3, #4]
 8028c70:	b10b      	cbz	r3, 8028c76 <_free_r+0x4e>
 8028c72:	42a3      	cmp	r3, r4
 8028c74:	d9fa      	bls.n	8028c6c <_free_r+0x44>
 8028c76:	6811      	ldr	r1, [r2, #0]
 8028c78:	1855      	adds	r5, r2, r1
 8028c7a:	42a5      	cmp	r5, r4
 8028c7c:	d10b      	bne.n	8028c96 <_free_r+0x6e>
 8028c7e:	6824      	ldr	r4, [r4, #0]
 8028c80:	4421      	add	r1, r4
 8028c82:	1854      	adds	r4, r2, r1
 8028c84:	6011      	str	r1, [r2, #0]
 8028c86:	42a3      	cmp	r3, r4
 8028c88:	d1e0      	bne.n	8028c4c <_free_r+0x24>
 8028c8a:	681c      	ldr	r4, [r3, #0]
 8028c8c:	685b      	ldr	r3, [r3, #4]
 8028c8e:	440c      	add	r4, r1
 8028c90:	6053      	str	r3, [r2, #4]
 8028c92:	6014      	str	r4, [r2, #0]
 8028c94:	e7da      	b.n	8028c4c <_free_r+0x24>
 8028c96:	d902      	bls.n	8028c9e <_free_r+0x76>
 8028c98:	230c      	movs	r3, #12
 8028c9a:	6003      	str	r3, [r0, #0]
 8028c9c:	e7d6      	b.n	8028c4c <_free_r+0x24>
 8028c9e:	6825      	ldr	r5, [r4, #0]
 8028ca0:	1961      	adds	r1, r4, r5
 8028ca2:	428b      	cmp	r3, r1
 8028ca4:	bf02      	ittt	eq
 8028ca6:	6819      	ldreq	r1, [r3, #0]
 8028ca8:	685b      	ldreq	r3, [r3, #4]
 8028caa:	1949      	addeq	r1, r1, r5
 8028cac:	6063      	str	r3, [r4, #4]
 8028cae:	bf08      	it	eq
 8028cb0:	6021      	streq	r1, [r4, #0]
 8028cb2:	6054      	str	r4, [r2, #4]
 8028cb4:	e7ca      	b.n	8028c4c <_free_r+0x24>
 8028cb6:	b003      	add	sp, #12
 8028cb8:	bd30      	pop	{r4, r5, pc}
 8028cba:	bf00      	nop
 8028cbc:	20005d2c 	.word	0x20005d2c

08028cc0 <_sungetc_r>:
 8028cc0:	b538      	push	{r3, r4, r5, lr}
 8028cc2:	1c4b      	adds	r3, r1, #1
 8028cc4:	4614      	mov	r4, r2
 8028cc6:	d103      	bne.n	8028cd0 <_sungetc_r+0x10>
 8028cc8:	f04f 35ff 	mov.w	r5, #4294967295
 8028ccc:	4628      	mov	r0, r5
 8028cce:	bd38      	pop	{r3, r4, r5, pc}
 8028cd0:	8993      	ldrh	r3, [r2, #12]
 8028cd2:	b2cd      	uxtb	r5, r1
 8028cd4:	f023 0320 	bic.w	r3, r3, #32
 8028cd8:	8193      	strh	r3, [r2, #12]
 8028cda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8028cdc:	6852      	ldr	r2, [r2, #4]
 8028cde:	b18b      	cbz	r3, 8028d04 <_sungetc_r+0x44>
 8028ce0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8028ce2:	4293      	cmp	r3, r2
 8028ce4:	dd08      	ble.n	8028cf8 <_sungetc_r+0x38>
 8028ce6:	6823      	ldr	r3, [r4, #0]
 8028ce8:	1e5a      	subs	r2, r3, #1
 8028cea:	6022      	str	r2, [r4, #0]
 8028cec:	f803 5c01 	strb.w	r5, [r3, #-1]
 8028cf0:	6863      	ldr	r3, [r4, #4]
 8028cf2:	3301      	adds	r3, #1
 8028cf4:	6063      	str	r3, [r4, #4]
 8028cf6:	e7e9      	b.n	8028ccc <_sungetc_r+0xc>
 8028cf8:	4621      	mov	r1, r4
 8028cfa:	f000 fb38 	bl	802936e <__submore>
 8028cfe:	2800      	cmp	r0, #0
 8028d00:	d0f1      	beq.n	8028ce6 <_sungetc_r+0x26>
 8028d02:	e7e1      	b.n	8028cc8 <_sungetc_r+0x8>
 8028d04:	6921      	ldr	r1, [r4, #16]
 8028d06:	6823      	ldr	r3, [r4, #0]
 8028d08:	b151      	cbz	r1, 8028d20 <_sungetc_r+0x60>
 8028d0a:	4299      	cmp	r1, r3
 8028d0c:	d208      	bcs.n	8028d20 <_sungetc_r+0x60>
 8028d0e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8028d12:	42a9      	cmp	r1, r5
 8028d14:	d104      	bne.n	8028d20 <_sungetc_r+0x60>
 8028d16:	3b01      	subs	r3, #1
 8028d18:	3201      	adds	r2, #1
 8028d1a:	6023      	str	r3, [r4, #0]
 8028d1c:	6062      	str	r2, [r4, #4]
 8028d1e:	e7d5      	b.n	8028ccc <_sungetc_r+0xc>
 8028d20:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8028d24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028d28:	6363      	str	r3, [r4, #52]	; 0x34
 8028d2a:	2303      	movs	r3, #3
 8028d2c:	63a3      	str	r3, [r4, #56]	; 0x38
 8028d2e:	4623      	mov	r3, r4
 8028d30:	f803 5f46 	strb.w	r5, [r3, #70]!
 8028d34:	6023      	str	r3, [r4, #0]
 8028d36:	2301      	movs	r3, #1
 8028d38:	e7dc      	b.n	8028cf4 <_sungetc_r+0x34>

08028d3a <__ssrefill_r>:
 8028d3a:	b510      	push	{r4, lr}
 8028d3c:	460c      	mov	r4, r1
 8028d3e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8028d40:	b169      	cbz	r1, 8028d5e <__ssrefill_r+0x24>
 8028d42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028d46:	4299      	cmp	r1, r3
 8028d48:	d001      	beq.n	8028d4e <__ssrefill_r+0x14>
 8028d4a:	f7ff ff6d 	bl	8028c28 <_free_r>
 8028d4e:	2000      	movs	r0, #0
 8028d50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8028d52:	6360      	str	r0, [r4, #52]	; 0x34
 8028d54:	6063      	str	r3, [r4, #4]
 8028d56:	b113      	cbz	r3, 8028d5e <__ssrefill_r+0x24>
 8028d58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8028d5a:	6023      	str	r3, [r4, #0]
 8028d5c:	bd10      	pop	{r4, pc}
 8028d5e:	6923      	ldr	r3, [r4, #16]
 8028d60:	f04f 30ff 	mov.w	r0, #4294967295
 8028d64:	6023      	str	r3, [r4, #0]
 8028d66:	2300      	movs	r3, #0
 8028d68:	6063      	str	r3, [r4, #4]
 8028d6a:	89a3      	ldrh	r3, [r4, #12]
 8028d6c:	f043 0320 	orr.w	r3, r3, #32
 8028d70:	81a3      	strh	r3, [r4, #12]
 8028d72:	e7f3      	b.n	8028d5c <__ssrefill_r+0x22>

08028d74 <__ssvfiscanf_r>:
 8028d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028d78:	460c      	mov	r4, r1
 8028d7a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8028d7e:	2100      	movs	r1, #0
 8028d80:	4606      	mov	r6, r0
 8028d82:	f10d 0804 	add.w	r8, sp, #4
 8028d86:	4fa6      	ldr	r7, [pc, #664]	; (8029020 <__ssvfiscanf_r+0x2ac>)
 8028d88:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 802902c <__ssvfiscanf_r+0x2b8>
 8028d8c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8028d90:	9300      	str	r3, [sp, #0]
 8028d92:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8028d96:	49a3      	ldr	r1, [pc, #652]	; (8029024 <__ssvfiscanf_r+0x2b0>)
 8028d98:	91a0      	str	r1, [sp, #640]	; 0x280
 8028d9a:	49a3      	ldr	r1, [pc, #652]	; (8029028 <__ssvfiscanf_r+0x2b4>)
 8028d9c:	91a1      	str	r1, [sp, #644]	; 0x284
 8028d9e:	7813      	ldrb	r3, [r2, #0]
 8028da0:	2b00      	cmp	r3, #0
 8028da2:	f000 815a 	beq.w	802905a <__ssvfiscanf_r+0x2e6>
 8028da6:	5cf9      	ldrb	r1, [r7, r3]
 8028da8:	1c55      	adds	r5, r2, #1
 8028daa:	f011 0108 	ands.w	r1, r1, #8
 8028dae:	d019      	beq.n	8028de4 <__ssvfiscanf_r+0x70>
 8028db0:	6863      	ldr	r3, [r4, #4]
 8028db2:	2b00      	cmp	r3, #0
 8028db4:	dd0f      	ble.n	8028dd6 <__ssvfiscanf_r+0x62>
 8028db6:	6823      	ldr	r3, [r4, #0]
 8028db8:	781a      	ldrb	r2, [r3, #0]
 8028dba:	5cba      	ldrb	r2, [r7, r2]
 8028dbc:	0712      	lsls	r2, r2, #28
 8028dbe:	d401      	bmi.n	8028dc4 <__ssvfiscanf_r+0x50>
 8028dc0:	462a      	mov	r2, r5
 8028dc2:	e7ec      	b.n	8028d9e <__ssvfiscanf_r+0x2a>
 8028dc4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8028dc6:	3301      	adds	r3, #1
 8028dc8:	3201      	adds	r2, #1
 8028dca:	6023      	str	r3, [r4, #0]
 8028dcc:	9245      	str	r2, [sp, #276]	; 0x114
 8028dce:	6862      	ldr	r2, [r4, #4]
 8028dd0:	3a01      	subs	r2, #1
 8028dd2:	6062      	str	r2, [r4, #4]
 8028dd4:	e7ec      	b.n	8028db0 <__ssvfiscanf_r+0x3c>
 8028dd6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8028dd8:	4621      	mov	r1, r4
 8028dda:	4630      	mov	r0, r6
 8028ddc:	4798      	blx	r3
 8028dde:	2800      	cmp	r0, #0
 8028de0:	d0e9      	beq.n	8028db6 <__ssvfiscanf_r+0x42>
 8028de2:	e7ed      	b.n	8028dc0 <__ssvfiscanf_r+0x4c>
 8028de4:	2b25      	cmp	r3, #37	; 0x25
 8028de6:	d012      	beq.n	8028e0e <__ssvfiscanf_r+0x9a>
 8028de8:	469a      	mov	sl, r3
 8028dea:	6863      	ldr	r3, [r4, #4]
 8028dec:	2b00      	cmp	r3, #0
 8028dee:	f340 8092 	ble.w	8028f16 <__ssvfiscanf_r+0x1a2>
 8028df2:	6822      	ldr	r2, [r4, #0]
 8028df4:	7813      	ldrb	r3, [r2, #0]
 8028df6:	4553      	cmp	r3, sl
 8028df8:	f040 812f 	bne.w	802905a <__ssvfiscanf_r+0x2e6>
 8028dfc:	6863      	ldr	r3, [r4, #4]
 8028dfe:	3201      	adds	r2, #1
 8028e00:	3b01      	subs	r3, #1
 8028e02:	6022      	str	r2, [r4, #0]
 8028e04:	6063      	str	r3, [r4, #4]
 8028e06:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8028e08:	3301      	adds	r3, #1
 8028e0a:	9345      	str	r3, [sp, #276]	; 0x114
 8028e0c:	e7d8      	b.n	8028dc0 <__ssvfiscanf_r+0x4c>
 8028e0e:	9141      	str	r1, [sp, #260]	; 0x104
 8028e10:	9143      	str	r1, [sp, #268]	; 0x10c
 8028e12:	7853      	ldrb	r3, [r2, #1]
 8028e14:	2b2a      	cmp	r3, #42	; 0x2a
 8028e16:	bf04      	itt	eq
 8028e18:	2310      	moveq	r3, #16
 8028e1a:	1c95      	addeq	r5, r2, #2
 8028e1c:	f04f 020a 	mov.w	r2, #10
 8028e20:	bf08      	it	eq
 8028e22:	9341      	streq	r3, [sp, #260]	; 0x104
 8028e24:	46aa      	mov	sl, r5
 8028e26:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8028e2a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8028e2e:	2b09      	cmp	r3, #9
 8028e30:	d91c      	bls.n	8028e6c <__ssvfiscanf_r+0xf8>
 8028e32:	2203      	movs	r2, #3
 8028e34:	487d      	ldr	r0, [pc, #500]	; (802902c <__ssvfiscanf_r+0x2b8>)
 8028e36:	f000 fad1 	bl	80293dc <memchr>
 8028e3a:	b138      	cbz	r0, 8028e4c <__ssvfiscanf_r+0xd8>
 8028e3c:	eba0 0009 	sub.w	r0, r0, r9
 8028e40:	2301      	movs	r3, #1
 8028e42:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8028e44:	4655      	mov	r5, sl
 8028e46:	4083      	lsls	r3, r0
 8028e48:	4313      	orrs	r3, r2
 8028e4a:	9341      	str	r3, [sp, #260]	; 0x104
 8028e4c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8028e50:	2b78      	cmp	r3, #120	; 0x78
 8028e52:	d806      	bhi.n	8028e62 <__ssvfiscanf_r+0xee>
 8028e54:	2b57      	cmp	r3, #87	; 0x57
 8028e56:	d810      	bhi.n	8028e7a <__ssvfiscanf_r+0x106>
 8028e58:	2b25      	cmp	r3, #37	; 0x25
 8028e5a:	d0c5      	beq.n	8028de8 <__ssvfiscanf_r+0x74>
 8028e5c:	d856      	bhi.n	8028f0c <__ssvfiscanf_r+0x198>
 8028e5e:	2b00      	cmp	r3, #0
 8028e60:	d064      	beq.n	8028f2c <__ssvfiscanf_r+0x1b8>
 8028e62:	2303      	movs	r3, #3
 8028e64:	9347      	str	r3, [sp, #284]	; 0x11c
 8028e66:	230a      	movs	r3, #10
 8028e68:	9342      	str	r3, [sp, #264]	; 0x108
 8028e6a:	e075      	b.n	8028f58 <__ssvfiscanf_r+0x1e4>
 8028e6c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8028e6e:	4655      	mov	r5, sl
 8028e70:	fb02 1103 	mla	r1, r2, r3, r1
 8028e74:	3930      	subs	r1, #48	; 0x30
 8028e76:	9143      	str	r1, [sp, #268]	; 0x10c
 8028e78:	e7d4      	b.n	8028e24 <__ssvfiscanf_r+0xb0>
 8028e7a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8028e7e:	2a20      	cmp	r2, #32
 8028e80:	d8ef      	bhi.n	8028e62 <__ssvfiscanf_r+0xee>
 8028e82:	a101      	add	r1, pc, #4	; (adr r1, 8028e88 <__ssvfiscanf_r+0x114>)
 8028e84:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8028e88:	08028f3b 	.word	0x08028f3b
 8028e8c:	08028e63 	.word	0x08028e63
 8028e90:	08028e63 	.word	0x08028e63
 8028e94:	08028f99 	.word	0x08028f99
 8028e98:	08028e63 	.word	0x08028e63
 8028e9c:	08028e63 	.word	0x08028e63
 8028ea0:	08028e63 	.word	0x08028e63
 8028ea4:	08028e63 	.word	0x08028e63
 8028ea8:	08028e63 	.word	0x08028e63
 8028eac:	08028e63 	.word	0x08028e63
 8028eb0:	08028e63 	.word	0x08028e63
 8028eb4:	08028faf 	.word	0x08028faf
 8028eb8:	08028f95 	.word	0x08028f95
 8028ebc:	08028f13 	.word	0x08028f13
 8028ec0:	08028f13 	.word	0x08028f13
 8028ec4:	08028f13 	.word	0x08028f13
 8028ec8:	08028e63 	.word	0x08028e63
 8028ecc:	08028f51 	.word	0x08028f51
 8028ed0:	08028e63 	.word	0x08028e63
 8028ed4:	08028e63 	.word	0x08028e63
 8028ed8:	08028e63 	.word	0x08028e63
 8028edc:	08028e63 	.word	0x08028e63
 8028ee0:	08028fbf 	.word	0x08028fbf
 8028ee4:	08028f8d 	.word	0x08028f8d
 8028ee8:	08028f33 	.word	0x08028f33
 8028eec:	08028e63 	.word	0x08028e63
 8028ef0:	08028e63 	.word	0x08028e63
 8028ef4:	08028fbb 	.word	0x08028fbb
 8028ef8:	08028e63 	.word	0x08028e63
 8028efc:	08028f95 	.word	0x08028f95
 8028f00:	08028e63 	.word	0x08028e63
 8028f04:	08028e63 	.word	0x08028e63
 8028f08:	08028f3b 	.word	0x08028f3b
 8028f0c:	3b45      	subs	r3, #69	; 0x45
 8028f0e:	2b02      	cmp	r3, #2
 8028f10:	d8a7      	bhi.n	8028e62 <__ssvfiscanf_r+0xee>
 8028f12:	2305      	movs	r3, #5
 8028f14:	e01f      	b.n	8028f56 <__ssvfiscanf_r+0x1e2>
 8028f16:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8028f18:	4621      	mov	r1, r4
 8028f1a:	4630      	mov	r0, r6
 8028f1c:	4798      	blx	r3
 8028f1e:	2800      	cmp	r0, #0
 8028f20:	f43f af67 	beq.w	8028df2 <__ssvfiscanf_r+0x7e>
 8028f24:	9844      	ldr	r0, [sp, #272]	; 0x110
 8028f26:	2800      	cmp	r0, #0
 8028f28:	f040 808d 	bne.w	8029046 <__ssvfiscanf_r+0x2d2>
 8028f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8028f30:	e08f      	b.n	8029052 <__ssvfiscanf_r+0x2de>
 8028f32:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8028f34:	f042 0220 	orr.w	r2, r2, #32
 8028f38:	9241      	str	r2, [sp, #260]	; 0x104
 8028f3a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8028f3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8028f40:	9241      	str	r2, [sp, #260]	; 0x104
 8028f42:	2210      	movs	r2, #16
 8028f44:	2b6f      	cmp	r3, #111	; 0x6f
 8028f46:	9242      	str	r2, [sp, #264]	; 0x108
 8028f48:	bf34      	ite	cc
 8028f4a:	2303      	movcc	r3, #3
 8028f4c:	2304      	movcs	r3, #4
 8028f4e:	e002      	b.n	8028f56 <__ssvfiscanf_r+0x1e2>
 8028f50:	2300      	movs	r3, #0
 8028f52:	9342      	str	r3, [sp, #264]	; 0x108
 8028f54:	2303      	movs	r3, #3
 8028f56:	9347      	str	r3, [sp, #284]	; 0x11c
 8028f58:	6863      	ldr	r3, [r4, #4]
 8028f5a:	2b00      	cmp	r3, #0
 8028f5c:	dd3e      	ble.n	8028fdc <__ssvfiscanf_r+0x268>
 8028f5e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8028f60:	0659      	lsls	r1, r3, #25
 8028f62:	d404      	bmi.n	8028f6e <__ssvfiscanf_r+0x1fa>
 8028f64:	6823      	ldr	r3, [r4, #0]
 8028f66:	781a      	ldrb	r2, [r3, #0]
 8028f68:	5cba      	ldrb	r2, [r7, r2]
 8028f6a:	0712      	lsls	r2, r2, #28
 8028f6c:	d43d      	bmi.n	8028fea <__ssvfiscanf_r+0x276>
 8028f6e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8028f70:	2b02      	cmp	r3, #2
 8028f72:	dc4c      	bgt.n	802900e <__ssvfiscanf_r+0x29a>
 8028f74:	466b      	mov	r3, sp
 8028f76:	4622      	mov	r2, r4
 8028f78:	a941      	add	r1, sp, #260	; 0x104
 8028f7a:	4630      	mov	r0, r6
 8028f7c:	f000 f872 	bl	8029064 <_scanf_chars>
 8028f80:	2801      	cmp	r0, #1
 8028f82:	d06a      	beq.n	802905a <__ssvfiscanf_r+0x2e6>
 8028f84:	2802      	cmp	r0, #2
 8028f86:	f47f af1b 	bne.w	8028dc0 <__ssvfiscanf_r+0x4c>
 8028f8a:	e7cb      	b.n	8028f24 <__ssvfiscanf_r+0x1b0>
 8028f8c:	2308      	movs	r3, #8
 8028f8e:	9342      	str	r3, [sp, #264]	; 0x108
 8028f90:	2304      	movs	r3, #4
 8028f92:	e7e0      	b.n	8028f56 <__ssvfiscanf_r+0x1e2>
 8028f94:	220a      	movs	r2, #10
 8028f96:	e7d5      	b.n	8028f44 <__ssvfiscanf_r+0x1d0>
 8028f98:	4629      	mov	r1, r5
 8028f9a:	4640      	mov	r0, r8
 8028f9c:	f000 f9ae 	bl	80292fc <__sccl>
 8028fa0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8028fa2:	4605      	mov	r5, r0
 8028fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028fa8:	9341      	str	r3, [sp, #260]	; 0x104
 8028faa:	2301      	movs	r3, #1
 8028fac:	e7d3      	b.n	8028f56 <__ssvfiscanf_r+0x1e2>
 8028fae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8028fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028fb4:	9341      	str	r3, [sp, #260]	; 0x104
 8028fb6:	2300      	movs	r3, #0
 8028fb8:	e7cd      	b.n	8028f56 <__ssvfiscanf_r+0x1e2>
 8028fba:	2302      	movs	r3, #2
 8028fbc:	e7cb      	b.n	8028f56 <__ssvfiscanf_r+0x1e2>
 8028fbe:	9841      	ldr	r0, [sp, #260]	; 0x104
 8028fc0:	06c3      	lsls	r3, r0, #27
 8028fc2:	f53f aefd 	bmi.w	8028dc0 <__ssvfiscanf_r+0x4c>
 8028fc6:	9b00      	ldr	r3, [sp, #0]
 8028fc8:	07c0      	lsls	r0, r0, #31
 8028fca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8028fcc:	f103 0104 	add.w	r1, r3, #4
 8028fd0:	9100      	str	r1, [sp, #0]
 8028fd2:	681b      	ldr	r3, [r3, #0]
 8028fd4:	bf4c      	ite	mi
 8028fd6:	801a      	strhmi	r2, [r3, #0]
 8028fd8:	601a      	strpl	r2, [r3, #0]
 8028fda:	e6f1      	b.n	8028dc0 <__ssvfiscanf_r+0x4c>
 8028fdc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8028fde:	4621      	mov	r1, r4
 8028fe0:	4630      	mov	r0, r6
 8028fe2:	4798      	blx	r3
 8028fe4:	2800      	cmp	r0, #0
 8028fe6:	d0ba      	beq.n	8028f5e <__ssvfiscanf_r+0x1ea>
 8028fe8:	e79c      	b.n	8028f24 <__ssvfiscanf_r+0x1b0>
 8028fea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8028fec:	3201      	adds	r2, #1
 8028fee:	9245      	str	r2, [sp, #276]	; 0x114
 8028ff0:	6862      	ldr	r2, [r4, #4]
 8028ff2:	3a01      	subs	r2, #1
 8028ff4:	2a00      	cmp	r2, #0
 8028ff6:	6062      	str	r2, [r4, #4]
 8028ff8:	dd02      	ble.n	8029000 <__ssvfiscanf_r+0x28c>
 8028ffa:	3301      	adds	r3, #1
 8028ffc:	6023      	str	r3, [r4, #0]
 8028ffe:	e7b1      	b.n	8028f64 <__ssvfiscanf_r+0x1f0>
 8029000:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8029002:	4621      	mov	r1, r4
 8029004:	4630      	mov	r0, r6
 8029006:	4798      	blx	r3
 8029008:	2800      	cmp	r0, #0
 802900a:	d0ab      	beq.n	8028f64 <__ssvfiscanf_r+0x1f0>
 802900c:	e78a      	b.n	8028f24 <__ssvfiscanf_r+0x1b0>
 802900e:	2b04      	cmp	r3, #4
 8029010:	dc0e      	bgt.n	8029030 <__ssvfiscanf_r+0x2bc>
 8029012:	466b      	mov	r3, sp
 8029014:	4622      	mov	r2, r4
 8029016:	a941      	add	r1, sp, #260	; 0x104
 8029018:	4630      	mov	r0, r6
 802901a:	f000 f87d 	bl	8029118 <_scanf_i>
 802901e:	e7af      	b.n	8028f80 <__ssvfiscanf_r+0x20c>
 8029020:	08029f70 	.word	0x08029f70
 8029024:	08028cc1 	.word	0x08028cc1
 8029028:	08028d3b 	.word	0x08028d3b
 802902c:	08029f50 	.word	0x08029f50
 8029030:	4b0b      	ldr	r3, [pc, #44]	; (8029060 <__ssvfiscanf_r+0x2ec>)
 8029032:	2b00      	cmp	r3, #0
 8029034:	f43f aec4 	beq.w	8028dc0 <__ssvfiscanf_r+0x4c>
 8029038:	466b      	mov	r3, sp
 802903a:	4622      	mov	r2, r4
 802903c:	a941      	add	r1, sp, #260	; 0x104
 802903e:	4630      	mov	r0, r6
 8029040:	f3af 8000 	nop.w
 8029044:	e79c      	b.n	8028f80 <__ssvfiscanf_r+0x20c>
 8029046:	89a3      	ldrh	r3, [r4, #12]
 8029048:	f013 0f40 	tst.w	r3, #64	; 0x40
 802904c:	bf18      	it	ne
 802904e:	f04f 30ff 	movne.w	r0, #4294967295
 8029052:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8029056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802905a:	9844      	ldr	r0, [sp, #272]	; 0x110
 802905c:	e7f9      	b.n	8029052 <__ssvfiscanf_r+0x2de>
 802905e:	bf00      	nop
 8029060:	00000000 	.word	0x00000000

08029064 <_scanf_chars>:
 8029064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029068:	4615      	mov	r5, r2
 802906a:	688a      	ldr	r2, [r1, #8]
 802906c:	4680      	mov	r8, r0
 802906e:	460c      	mov	r4, r1
 8029070:	b932      	cbnz	r2, 8029080 <_scanf_chars+0x1c>
 8029072:	698a      	ldr	r2, [r1, #24]
 8029074:	2a00      	cmp	r2, #0
 8029076:	bf0c      	ite	eq
 8029078:	2201      	moveq	r2, #1
 802907a:	f04f 32ff 	movne.w	r2, #4294967295
 802907e:	608a      	str	r2, [r1, #8]
 8029080:	6822      	ldr	r2, [r4, #0]
 8029082:	2700      	movs	r7, #0
 8029084:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8029114 <_scanf_chars+0xb0>
 8029088:	06d1      	lsls	r1, r2, #27
 802908a:	bf5f      	itttt	pl
 802908c:	681a      	ldrpl	r2, [r3, #0]
 802908e:	1d11      	addpl	r1, r2, #4
 8029090:	6019      	strpl	r1, [r3, #0]
 8029092:	6816      	ldrpl	r6, [r2, #0]
 8029094:	69a0      	ldr	r0, [r4, #24]
 8029096:	b188      	cbz	r0, 80290bc <_scanf_chars+0x58>
 8029098:	2801      	cmp	r0, #1
 802909a:	d107      	bne.n	80290ac <_scanf_chars+0x48>
 802909c:	682a      	ldr	r2, [r5, #0]
 802909e:	7811      	ldrb	r1, [r2, #0]
 80290a0:	6962      	ldr	r2, [r4, #20]
 80290a2:	5c52      	ldrb	r2, [r2, r1]
 80290a4:	b952      	cbnz	r2, 80290bc <_scanf_chars+0x58>
 80290a6:	2f00      	cmp	r7, #0
 80290a8:	d031      	beq.n	802910e <_scanf_chars+0xaa>
 80290aa:	e022      	b.n	80290f2 <_scanf_chars+0x8e>
 80290ac:	2802      	cmp	r0, #2
 80290ae:	d120      	bne.n	80290f2 <_scanf_chars+0x8e>
 80290b0:	682b      	ldr	r3, [r5, #0]
 80290b2:	781b      	ldrb	r3, [r3, #0]
 80290b4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80290b8:	071b      	lsls	r3, r3, #28
 80290ba:	d41a      	bmi.n	80290f2 <_scanf_chars+0x8e>
 80290bc:	6823      	ldr	r3, [r4, #0]
 80290be:	3701      	adds	r7, #1
 80290c0:	06da      	lsls	r2, r3, #27
 80290c2:	bf5e      	ittt	pl
 80290c4:	682b      	ldrpl	r3, [r5, #0]
 80290c6:	781b      	ldrbpl	r3, [r3, #0]
 80290c8:	f806 3b01 	strbpl.w	r3, [r6], #1
 80290cc:	682a      	ldr	r2, [r5, #0]
 80290ce:	686b      	ldr	r3, [r5, #4]
 80290d0:	3201      	adds	r2, #1
 80290d2:	3b01      	subs	r3, #1
 80290d4:	602a      	str	r2, [r5, #0]
 80290d6:	68a2      	ldr	r2, [r4, #8]
 80290d8:	606b      	str	r3, [r5, #4]
 80290da:	3a01      	subs	r2, #1
 80290dc:	60a2      	str	r2, [r4, #8]
 80290de:	b142      	cbz	r2, 80290f2 <_scanf_chars+0x8e>
 80290e0:	2b00      	cmp	r3, #0
 80290e2:	dcd7      	bgt.n	8029094 <_scanf_chars+0x30>
 80290e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80290e8:	4629      	mov	r1, r5
 80290ea:	4640      	mov	r0, r8
 80290ec:	4798      	blx	r3
 80290ee:	2800      	cmp	r0, #0
 80290f0:	d0d0      	beq.n	8029094 <_scanf_chars+0x30>
 80290f2:	6823      	ldr	r3, [r4, #0]
 80290f4:	f013 0310 	ands.w	r3, r3, #16
 80290f8:	d105      	bne.n	8029106 <_scanf_chars+0xa2>
 80290fa:	68e2      	ldr	r2, [r4, #12]
 80290fc:	3201      	adds	r2, #1
 80290fe:	60e2      	str	r2, [r4, #12]
 8029100:	69a2      	ldr	r2, [r4, #24]
 8029102:	b102      	cbz	r2, 8029106 <_scanf_chars+0xa2>
 8029104:	7033      	strb	r3, [r6, #0]
 8029106:	6923      	ldr	r3, [r4, #16]
 8029108:	2000      	movs	r0, #0
 802910a:	443b      	add	r3, r7
 802910c:	6123      	str	r3, [r4, #16]
 802910e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029112:	bf00      	nop
 8029114:	08029f70 	.word	0x08029f70

08029118 <_scanf_i>:
 8029118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802911c:	4698      	mov	r8, r3
 802911e:	b087      	sub	sp, #28
 8029120:	4b72      	ldr	r3, [pc, #456]	; (80292ec <_scanf_i+0x1d4>)
 8029122:	460c      	mov	r4, r1
 8029124:	4682      	mov	sl, r0
 8029126:	4616      	mov	r6, r2
 8029128:	4627      	mov	r7, r4
 802912a:	f04f 0b00 	mov.w	fp, #0
 802912e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8029132:	ab03      	add	r3, sp, #12
 8029134:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8029138:	4b6d      	ldr	r3, [pc, #436]	; (80292f0 <_scanf_i+0x1d8>)
 802913a:	69a1      	ldr	r1, [r4, #24]
 802913c:	4a6d      	ldr	r2, [pc, #436]	; (80292f4 <_scanf_i+0x1dc>)
 802913e:	2903      	cmp	r1, #3
 8029140:	bf18      	it	ne
 8029142:	461a      	movne	r2, r3
 8029144:	68a3      	ldr	r3, [r4, #8]
 8029146:	9201      	str	r2, [sp, #4]
 8029148:	1e5a      	subs	r2, r3, #1
 802914a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 802914e:	bf89      	itett	hi
 8029150:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8029154:	f04f 0900 	movls.w	r9, #0
 8029158:	eb03 0905 	addhi.w	r9, r3, r5
 802915c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8029160:	bf88      	it	hi
 8029162:	60a3      	strhi	r3, [r4, #8]
 8029164:	f857 3b1c 	ldr.w	r3, [r7], #28
 8029168:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 802916c:	463d      	mov	r5, r7
 802916e:	6023      	str	r3, [r4, #0]
 8029170:	6831      	ldr	r1, [r6, #0]
 8029172:	ab03      	add	r3, sp, #12
 8029174:	2202      	movs	r2, #2
 8029176:	7809      	ldrb	r1, [r1, #0]
 8029178:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 802917c:	f000 f92e 	bl	80293dc <memchr>
 8029180:	b328      	cbz	r0, 80291ce <_scanf_i+0xb6>
 8029182:	f1bb 0f01 	cmp.w	fp, #1
 8029186:	d159      	bne.n	802923c <_scanf_i+0x124>
 8029188:	6862      	ldr	r2, [r4, #4]
 802918a:	b92a      	cbnz	r2, 8029198 <_scanf_i+0x80>
 802918c:	6822      	ldr	r2, [r4, #0]
 802918e:	2308      	movs	r3, #8
 8029190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8029194:	6063      	str	r3, [r4, #4]
 8029196:	6022      	str	r2, [r4, #0]
 8029198:	6822      	ldr	r2, [r4, #0]
 802919a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 802919e:	6022      	str	r2, [r4, #0]
 80291a0:	68a2      	ldr	r2, [r4, #8]
 80291a2:	1e51      	subs	r1, r2, #1
 80291a4:	60a1      	str	r1, [r4, #8]
 80291a6:	b192      	cbz	r2, 80291ce <_scanf_i+0xb6>
 80291a8:	6832      	ldr	r2, [r6, #0]
 80291aa:	1c51      	adds	r1, r2, #1
 80291ac:	6031      	str	r1, [r6, #0]
 80291ae:	7812      	ldrb	r2, [r2, #0]
 80291b0:	f805 2b01 	strb.w	r2, [r5], #1
 80291b4:	6872      	ldr	r2, [r6, #4]
 80291b6:	3a01      	subs	r2, #1
 80291b8:	2a00      	cmp	r2, #0
 80291ba:	6072      	str	r2, [r6, #4]
 80291bc:	dc07      	bgt.n	80291ce <_scanf_i+0xb6>
 80291be:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80291c2:	4631      	mov	r1, r6
 80291c4:	4650      	mov	r0, sl
 80291c6:	4790      	blx	r2
 80291c8:	2800      	cmp	r0, #0
 80291ca:	f040 8085 	bne.w	80292d8 <_scanf_i+0x1c0>
 80291ce:	f10b 0b01 	add.w	fp, fp, #1
 80291d2:	f1bb 0f03 	cmp.w	fp, #3
 80291d6:	d1cb      	bne.n	8029170 <_scanf_i+0x58>
 80291d8:	6863      	ldr	r3, [r4, #4]
 80291da:	b90b      	cbnz	r3, 80291e0 <_scanf_i+0xc8>
 80291dc:	230a      	movs	r3, #10
 80291de:	6063      	str	r3, [r4, #4]
 80291e0:	6863      	ldr	r3, [r4, #4]
 80291e2:	f04f 0b00 	mov.w	fp, #0
 80291e6:	4944      	ldr	r1, [pc, #272]	; (80292f8 <_scanf_i+0x1e0>)
 80291e8:	6960      	ldr	r0, [r4, #20]
 80291ea:	1ac9      	subs	r1, r1, r3
 80291ec:	f000 f886 	bl	80292fc <__sccl>
 80291f0:	68a3      	ldr	r3, [r4, #8]
 80291f2:	6822      	ldr	r2, [r4, #0]
 80291f4:	2b00      	cmp	r3, #0
 80291f6:	d03d      	beq.n	8029274 <_scanf_i+0x15c>
 80291f8:	6831      	ldr	r1, [r6, #0]
 80291fa:	6960      	ldr	r0, [r4, #20]
 80291fc:	f891 c000 	ldrb.w	ip, [r1]
 8029200:	f810 000c 	ldrb.w	r0, [r0, ip]
 8029204:	2800      	cmp	r0, #0
 8029206:	d035      	beq.n	8029274 <_scanf_i+0x15c>
 8029208:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 802920c:	d124      	bne.n	8029258 <_scanf_i+0x140>
 802920e:	0510      	lsls	r0, r2, #20
 8029210:	d522      	bpl.n	8029258 <_scanf_i+0x140>
 8029212:	f10b 0b01 	add.w	fp, fp, #1
 8029216:	f1b9 0f00 	cmp.w	r9, #0
 802921a:	d003      	beq.n	8029224 <_scanf_i+0x10c>
 802921c:	3301      	adds	r3, #1
 802921e:	f109 39ff 	add.w	r9, r9, #4294967295
 8029222:	60a3      	str	r3, [r4, #8]
 8029224:	6873      	ldr	r3, [r6, #4]
 8029226:	3b01      	subs	r3, #1
 8029228:	2b00      	cmp	r3, #0
 802922a:	6073      	str	r3, [r6, #4]
 802922c:	dd1b      	ble.n	8029266 <_scanf_i+0x14e>
 802922e:	6833      	ldr	r3, [r6, #0]
 8029230:	3301      	adds	r3, #1
 8029232:	6033      	str	r3, [r6, #0]
 8029234:	68a3      	ldr	r3, [r4, #8]
 8029236:	3b01      	subs	r3, #1
 8029238:	60a3      	str	r3, [r4, #8]
 802923a:	e7d9      	b.n	80291f0 <_scanf_i+0xd8>
 802923c:	f1bb 0f02 	cmp.w	fp, #2
 8029240:	d1ae      	bne.n	80291a0 <_scanf_i+0x88>
 8029242:	6822      	ldr	r2, [r4, #0]
 8029244:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8029248:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 802924c:	d1bf      	bne.n	80291ce <_scanf_i+0xb6>
 802924e:	2310      	movs	r3, #16
 8029250:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8029254:	6063      	str	r3, [r4, #4]
 8029256:	e7a2      	b.n	802919e <_scanf_i+0x86>
 8029258:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 802925c:	6022      	str	r2, [r4, #0]
 802925e:	780b      	ldrb	r3, [r1, #0]
 8029260:	f805 3b01 	strb.w	r3, [r5], #1
 8029264:	e7de      	b.n	8029224 <_scanf_i+0x10c>
 8029266:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802926a:	4631      	mov	r1, r6
 802926c:	4650      	mov	r0, sl
 802926e:	4798      	blx	r3
 8029270:	2800      	cmp	r0, #0
 8029272:	d0df      	beq.n	8029234 <_scanf_i+0x11c>
 8029274:	6823      	ldr	r3, [r4, #0]
 8029276:	05d9      	lsls	r1, r3, #23
 8029278:	d50d      	bpl.n	8029296 <_scanf_i+0x17e>
 802927a:	42bd      	cmp	r5, r7
 802927c:	d909      	bls.n	8029292 <_scanf_i+0x17a>
 802927e:	f105 39ff 	add.w	r9, r5, #4294967295
 8029282:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8029286:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802928a:	4632      	mov	r2, r6
 802928c:	464d      	mov	r5, r9
 802928e:	4650      	mov	r0, sl
 8029290:	4798      	blx	r3
 8029292:	42bd      	cmp	r5, r7
 8029294:	d028      	beq.n	80292e8 <_scanf_i+0x1d0>
 8029296:	6822      	ldr	r2, [r4, #0]
 8029298:	f012 0210 	ands.w	r2, r2, #16
 802929c:	d113      	bne.n	80292c6 <_scanf_i+0x1ae>
 802929e:	702a      	strb	r2, [r5, #0]
 80292a0:	4639      	mov	r1, r7
 80292a2:	6863      	ldr	r3, [r4, #4]
 80292a4:	4650      	mov	r0, sl
 80292a6:	9e01      	ldr	r6, [sp, #4]
 80292a8:	47b0      	blx	r6
 80292aa:	f8d8 3000 	ldr.w	r3, [r8]
 80292ae:	6821      	ldr	r1, [r4, #0]
 80292b0:	1d1a      	adds	r2, r3, #4
 80292b2:	f011 0f20 	tst.w	r1, #32
 80292b6:	f8c8 2000 	str.w	r2, [r8]
 80292ba:	681b      	ldr	r3, [r3, #0]
 80292bc:	d00f      	beq.n	80292de <_scanf_i+0x1c6>
 80292be:	6018      	str	r0, [r3, #0]
 80292c0:	68e3      	ldr	r3, [r4, #12]
 80292c2:	3301      	adds	r3, #1
 80292c4:	60e3      	str	r3, [r4, #12]
 80292c6:	1bed      	subs	r5, r5, r7
 80292c8:	6923      	ldr	r3, [r4, #16]
 80292ca:	2000      	movs	r0, #0
 80292cc:	445d      	add	r5, fp
 80292ce:	442b      	add	r3, r5
 80292d0:	6123      	str	r3, [r4, #16]
 80292d2:	b007      	add	sp, #28
 80292d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80292d8:	f04f 0b00 	mov.w	fp, #0
 80292dc:	e7ca      	b.n	8029274 <_scanf_i+0x15c>
 80292de:	07ca      	lsls	r2, r1, #31
 80292e0:	bf4c      	ite	mi
 80292e2:	8018      	strhmi	r0, [r3, #0]
 80292e4:	6018      	strpl	r0, [r3, #0]
 80292e6:	e7eb      	b.n	80292c0 <_scanf_i+0x1a8>
 80292e8:	2001      	movs	r0, #1
 80292ea:	e7f2      	b.n	80292d2 <_scanf_i+0x1ba>
 80292ec:	0802980c 	.word	0x0802980c
 80292f0:	08029645 	.word	0x08029645
 80292f4:	0802955d 	.word	0x0802955d
 80292f8:	08029f64 	.word	0x08029f64

080292fc <__sccl>:
 80292fc:	b570      	push	{r4, r5, r6, lr}
 80292fe:	780b      	ldrb	r3, [r1, #0]
 8029300:	4604      	mov	r4, r0
 8029302:	3801      	subs	r0, #1
 8029304:	2b5e      	cmp	r3, #94	; 0x5e
 8029306:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 802930a:	bf13      	iteet	ne
 802930c:	1c4a      	addne	r2, r1, #1
 802930e:	1c8a      	addeq	r2, r1, #2
 8029310:	784b      	ldrbeq	r3, [r1, #1]
 8029312:	2100      	movne	r1, #0
 8029314:	bf08      	it	eq
 8029316:	2101      	moveq	r1, #1
 8029318:	f800 1f01 	strb.w	r1, [r0, #1]!
 802931c:	42a8      	cmp	r0, r5
 802931e:	d1fb      	bne.n	8029318 <__sccl+0x1c>
 8029320:	b90b      	cbnz	r3, 8029326 <__sccl+0x2a>
 8029322:	1e50      	subs	r0, r2, #1
 8029324:	bd70      	pop	{r4, r5, r6, pc}
 8029326:	f081 0101 	eor.w	r1, r1, #1
 802932a:	4610      	mov	r0, r2
 802932c:	54e1      	strb	r1, [r4, r3]
 802932e:	4602      	mov	r2, r0
 8029330:	f812 5b01 	ldrb.w	r5, [r2], #1
 8029334:	2d2d      	cmp	r5, #45	; 0x2d
 8029336:	d005      	beq.n	8029344 <__sccl+0x48>
 8029338:	2d5d      	cmp	r5, #93	; 0x5d
 802933a:	d016      	beq.n	802936a <__sccl+0x6e>
 802933c:	2d00      	cmp	r5, #0
 802933e:	d0f1      	beq.n	8029324 <__sccl+0x28>
 8029340:	462b      	mov	r3, r5
 8029342:	e7f2      	b.n	802932a <__sccl+0x2e>
 8029344:	7846      	ldrb	r6, [r0, #1]
 8029346:	2e5d      	cmp	r6, #93	; 0x5d
 8029348:	d0fa      	beq.n	8029340 <__sccl+0x44>
 802934a:	42b3      	cmp	r3, r6
 802934c:	dcf8      	bgt.n	8029340 <__sccl+0x44>
 802934e:	3002      	adds	r0, #2
 8029350:	461a      	mov	r2, r3
 8029352:	3201      	adds	r2, #1
 8029354:	4296      	cmp	r6, r2
 8029356:	54a1      	strb	r1, [r4, r2]
 8029358:	dcfb      	bgt.n	8029352 <__sccl+0x56>
 802935a:	1af2      	subs	r2, r6, r3
 802935c:	1c5d      	adds	r5, r3, #1
 802935e:	3a01      	subs	r2, #1
 8029360:	42b3      	cmp	r3, r6
 8029362:	bfa8      	it	ge
 8029364:	2200      	movge	r2, #0
 8029366:	18ab      	adds	r3, r5, r2
 8029368:	e7e1      	b.n	802932e <__sccl+0x32>
 802936a:	4610      	mov	r0, r2
 802936c:	e7da      	b.n	8029324 <__sccl+0x28>

0802936e <__submore>:
 802936e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029372:	460c      	mov	r4, r1
 8029374:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8029376:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802937a:	4299      	cmp	r1, r3
 802937c:	d11a      	bne.n	80293b4 <__submore+0x46>
 802937e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8029382:	f7ff fae7 	bl	8028954 <_malloc_r>
 8029386:	b918      	cbnz	r0, 8029390 <__submore+0x22>
 8029388:	f04f 30ff 	mov.w	r0, #4294967295
 802938c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029394:	6360      	str	r0, [r4, #52]	; 0x34
 8029396:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 802939a:	63a3      	str	r3, [r4, #56]	; 0x38
 802939c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80293a0:	7083      	strb	r3, [r0, #2]
 80293a2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80293a6:	7043      	strb	r3, [r0, #1]
 80293a8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80293ac:	7003      	strb	r3, [r0, #0]
 80293ae:	6020      	str	r0, [r4, #0]
 80293b0:	2000      	movs	r0, #0
 80293b2:	e7eb      	b.n	802938c <__submore+0x1e>
 80293b4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80293b6:	0077      	lsls	r7, r6, #1
 80293b8:	463a      	mov	r2, r7
 80293ba:	f000 f81d 	bl	80293f8 <_realloc_r>
 80293be:	4605      	mov	r5, r0
 80293c0:	2800      	cmp	r0, #0
 80293c2:	d0e1      	beq.n	8029388 <__submore+0x1a>
 80293c4:	eb00 0806 	add.w	r8, r0, r6
 80293c8:	4601      	mov	r1, r0
 80293ca:	4632      	mov	r2, r6
 80293cc:	4640      	mov	r0, r8
 80293ce:	f7ff fc1d 	bl	8028c0c <memcpy>
 80293d2:	f8c4 8000 	str.w	r8, [r4]
 80293d6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80293da:	e7e9      	b.n	80293b0 <__submore+0x42>

080293dc <memchr>:
 80293dc:	b2c9      	uxtb	r1, r1
 80293de:	4402      	add	r2, r0
 80293e0:	b510      	push	{r4, lr}
 80293e2:	4290      	cmp	r0, r2
 80293e4:	4603      	mov	r3, r0
 80293e6:	d101      	bne.n	80293ec <memchr+0x10>
 80293e8:	2300      	movs	r3, #0
 80293ea:	e003      	b.n	80293f4 <memchr+0x18>
 80293ec:	781c      	ldrb	r4, [r3, #0]
 80293ee:	3001      	adds	r0, #1
 80293f0:	428c      	cmp	r4, r1
 80293f2:	d1f6      	bne.n	80293e2 <memchr+0x6>
 80293f4:	4618      	mov	r0, r3
 80293f6:	bd10      	pop	{r4, pc}

080293f8 <_realloc_r>:
 80293f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80293fc:	4680      	mov	r8, r0
 80293fe:	4614      	mov	r4, r2
 8029400:	460e      	mov	r6, r1
 8029402:	b921      	cbnz	r1, 802940e <_realloc_r+0x16>
 8029404:	4611      	mov	r1, r2
 8029406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802940a:	f7ff baa3 	b.w	8028954 <_malloc_r>
 802940e:	b92a      	cbnz	r2, 802941c <_realloc_r+0x24>
 8029410:	4625      	mov	r5, r4
 8029412:	f7ff fc09 	bl	8028c28 <_free_r>
 8029416:	4628      	mov	r0, r5
 8029418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802941c:	f000 f914 	bl	8029648 <_malloc_usable_size_r>
 8029420:	4284      	cmp	r4, r0
 8029422:	4607      	mov	r7, r0
 8029424:	d802      	bhi.n	802942c <_realloc_r+0x34>
 8029426:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802942a:	d812      	bhi.n	8029452 <_realloc_r+0x5a>
 802942c:	4621      	mov	r1, r4
 802942e:	4640      	mov	r0, r8
 8029430:	f7ff fa90 	bl	8028954 <_malloc_r>
 8029434:	4605      	mov	r5, r0
 8029436:	2800      	cmp	r0, #0
 8029438:	d0ed      	beq.n	8029416 <_realloc_r+0x1e>
 802943a:	42bc      	cmp	r4, r7
 802943c:	4622      	mov	r2, r4
 802943e:	4631      	mov	r1, r6
 8029440:	bf28      	it	cs
 8029442:	463a      	movcs	r2, r7
 8029444:	f7ff fbe2 	bl	8028c0c <memcpy>
 8029448:	4631      	mov	r1, r6
 802944a:	4640      	mov	r0, r8
 802944c:	f7ff fbec 	bl	8028c28 <_free_r>
 8029450:	e7e1      	b.n	8029416 <_realloc_r+0x1e>
 8029452:	4635      	mov	r5, r6
 8029454:	e7df      	b.n	8029416 <_realloc_r+0x1e>
	...

08029458 <_strtol_l.constprop.0>:
 8029458:	2b01      	cmp	r3, #1
 802945a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802945e:	d001      	beq.n	8029464 <_strtol_l.constprop.0+0xc>
 8029460:	2b24      	cmp	r3, #36	; 0x24
 8029462:	d906      	bls.n	8029472 <_strtol_l.constprop.0+0x1a>
 8029464:	f7ff fba6 	bl	8028bb4 <__errno>
 8029468:	2316      	movs	r3, #22
 802946a:	6003      	str	r3, [r0, #0]
 802946c:	2000      	movs	r0, #0
 802946e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029472:	460d      	mov	r5, r1
 8029474:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8029558 <_strtol_l.constprop.0+0x100>
 8029478:	462e      	mov	r6, r5
 802947a:	f815 4b01 	ldrb.w	r4, [r5], #1
 802947e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8029482:	f017 0708 	ands.w	r7, r7, #8
 8029486:	d1f7      	bne.n	8029478 <_strtol_l.constprop.0+0x20>
 8029488:	2c2d      	cmp	r4, #45	; 0x2d
 802948a:	d132      	bne.n	80294f2 <_strtol_l.constprop.0+0x9a>
 802948c:	782c      	ldrb	r4, [r5, #0]
 802948e:	2701      	movs	r7, #1
 8029490:	1cb5      	adds	r5, r6, #2
 8029492:	2b00      	cmp	r3, #0
 8029494:	d05b      	beq.n	802954e <_strtol_l.constprop.0+0xf6>
 8029496:	2b10      	cmp	r3, #16
 8029498:	d109      	bne.n	80294ae <_strtol_l.constprop.0+0x56>
 802949a:	2c30      	cmp	r4, #48	; 0x30
 802949c:	d107      	bne.n	80294ae <_strtol_l.constprop.0+0x56>
 802949e:	782c      	ldrb	r4, [r5, #0]
 80294a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80294a4:	2c58      	cmp	r4, #88	; 0x58
 80294a6:	d14d      	bne.n	8029544 <_strtol_l.constprop.0+0xec>
 80294a8:	786c      	ldrb	r4, [r5, #1]
 80294aa:	2310      	movs	r3, #16
 80294ac:	3502      	adds	r5, #2
 80294ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80294b2:	f04f 0e00 	mov.w	lr, #0
 80294b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80294ba:	4676      	mov	r6, lr
 80294bc:	fbb8 f9f3 	udiv	r9, r8, r3
 80294c0:	fb03 8a19 	mls	sl, r3, r9, r8
 80294c4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80294c8:	f1bc 0f09 	cmp.w	ip, #9
 80294cc:	d816      	bhi.n	80294fc <_strtol_l.constprop.0+0xa4>
 80294ce:	4664      	mov	r4, ip
 80294d0:	42a3      	cmp	r3, r4
 80294d2:	dd24      	ble.n	802951e <_strtol_l.constprop.0+0xc6>
 80294d4:	f1be 3fff 	cmp.w	lr, #4294967295
 80294d8:	d008      	beq.n	80294ec <_strtol_l.constprop.0+0x94>
 80294da:	45b1      	cmp	r9, r6
 80294dc:	d31c      	bcc.n	8029518 <_strtol_l.constprop.0+0xc0>
 80294de:	d101      	bne.n	80294e4 <_strtol_l.constprop.0+0x8c>
 80294e0:	45a2      	cmp	sl, r4
 80294e2:	db19      	blt.n	8029518 <_strtol_l.constprop.0+0xc0>
 80294e4:	fb06 4603 	mla	r6, r6, r3, r4
 80294e8:	f04f 0e01 	mov.w	lr, #1
 80294ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80294f0:	e7e8      	b.n	80294c4 <_strtol_l.constprop.0+0x6c>
 80294f2:	2c2b      	cmp	r4, #43	; 0x2b
 80294f4:	bf04      	itt	eq
 80294f6:	782c      	ldrbeq	r4, [r5, #0]
 80294f8:	1cb5      	addeq	r5, r6, #2
 80294fa:	e7ca      	b.n	8029492 <_strtol_l.constprop.0+0x3a>
 80294fc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8029500:	f1bc 0f19 	cmp.w	ip, #25
 8029504:	d801      	bhi.n	802950a <_strtol_l.constprop.0+0xb2>
 8029506:	3c37      	subs	r4, #55	; 0x37
 8029508:	e7e2      	b.n	80294d0 <_strtol_l.constprop.0+0x78>
 802950a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 802950e:	f1bc 0f19 	cmp.w	ip, #25
 8029512:	d804      	bhi.n	802951e <_strtol_l.constprop.0+0xc6>
 8029514:	3c57      	subs	r4, #87	; 0x57
 8029516:	e7db      	b.n	80294d0 <_strtol_l.constprop.0+0x78>
 8029518:	f04f 3eff 	mov.w	lr, #4294967295
 802951c:	e7e6      	b.n	80294ec <_strtol_l.constprop.0+0x94>
 802951e:	f1be 3fff 	cmp.w	lr, #4294967295
 8029522:	d105      	bne.n	8029530 <_strtol_l.constprop.0+0xd8>
 8029524:	2322      	movs	r3, #34	; 0x22
 8029526:	4646      	mov	r6, r8
 8029528:	6003      	str	r3, [r0, #0]
 802952a:	b942      	cbnz	r2, 802953e <_strtol_l.constprop.0+0xe6>
 802952c:	4630      	mov	r0, r6
 802952e:	e79e      	b.n	802946e <_strtol_l.constprop.0+0x16>
 8029530:	b107      	cbz	r7, 8029534 <_strtol_l.constprop.0+0xdc>
 8029532:	4276      	negs	r6, r6
 8029534:	2a00      	cmp	r2, #0
 8029536:	d0f9      	beq.n	802952c <_strtol_l.constprop.0+0xd4>
 8029538:	f1be 0f00 	cmp.w	lr, #0
 802953c:	d000      	beq.n	8029540 <_strtol_l.constprop.0+0xe8>
 802953e:	1e69      	subs	r1, r5, #1
 8029540:	6011      	str	r1, [r2, #0]
 8029542:	e7f3      	b.n	802952c <_strtol_l.constprop.0+0xd4>
 8029544:	2430      	movs	r4, #48	; 0x30
 8029546:	2b00      	cmp	r3, #0
 8029548:	d1b1      	bne.n	80294ae <_strtol_l.constprop.0+0x56>
 802954a:	2308      	movs	r3, #8
 802954c:	e7af      	b.n	80294ae <_strtol_l.constprop.0+0x56>
 802954e:	2c30      	cmp	r4, #48	; 0x30
 8029550:	d0a5      	beq.n	802949e <_strtol_l.constprop.0+0x46>
 8029552:	230a      	movs	r3, #10
 8029554:	e7ab      	b.n	80294ae <_strtol_l.constprop.0+0x56>
 8029556:	bf00      	nop
 8029558:	08029f70 	.word	0x08029f70

0802955c <_strtol_r>:
 802955c:	f7ff bf7c 	b.w	8029458 <_strtol_l.constprop.0>

08029560 <_strtoul_l.constprop.0>:
 8029560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8029564:	4686      	mov	lr, r0
 8029566:	460d      	mov	r5, r1
 8029568:	4f35      	ldr	r7, [pc, #212]	; (8029640 <_strtoul_l.constprop.0+0xe0>)
 802956a:	4628      	mov	r0, r5
 802956c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8029570:	5d3e      	ldrb	r6, [r7, r4]
 8029572:	f016 0608 	ands.w	r6, r6, #8
 8029576:	d1f8      	bne.n	802956a <_strtoul_l.constprop.0+0xa>
 8029578:	2c2d      	cmp	r4, #45	; 0x2d
 802957a:	d130      	bne.n	80295de <_strtoul_l.constprop.0+0x7e>
 802957c:	782c      	ldrb	r4, [r5, #0]
 802957e:	2601      	movs	r6, #1
 8029580:	1c85      	adds	r5, r0, #2
 8029582:	2b00      	cmp	r3, #0
 8029584:	d057      	beq.n	8029636 <_strtoul_l.constprop.0+0xd6>
 8029586:	2b10      	cmp	r3, #16
 8029588:	d109      	bne.n	802959e <_strtoul_l.constprop.0+0x3e>
 802958a:	2c30      	cmp	r4, #48	; 0x30
 802958c:	d107      	bne.n	802959e <_strtoul_l.constprop.0+0x3e>
 802958e:	7828      	ldrb	r0, [r5, #0]
 8029590:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8029594:	2858      	cmp	r0, #88	; 0x58
 8029596:	d149      	bne.n	802962c <_strtoul_l.constprop.0+0xcc>
 8029598:	786c      	ldrb	r4, [r5, #1]
 802959a:	2310      	movs	r3, #16
 802959c:	3502      	adds	r5, #2
 802959e:	f04f 38ff 	mov.w	r8, #4294967295
 80295a2:	2700      	movs	r7, #0
 80295a4:	fbb8 f8f3 	udiv	r8, r8, r3
 80295a8:	fb03 f908 	mul.w	r9, r3, r8
 80295ac:	4638      	mov	r0, r7
 80295ae:	ea6f 0909 	mvn.w	r9, r9
 80295b2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80295b6:	f1bc 0f09 	cmp.w	ip, #9
 80295ba:	d815      	bhi.n	80295e8 <_strtoul_l.constprop.0+0x88>
 80295bc:	4664      	mov	r4, ip
 80295be:	42a3      	cmp	r3, r4
 80295c0:	dd23      	ble.n	802960a <_strtoul_l.constprop.0+0xaa>
 80295c2:	f1b7 3fff 	cmp.w	r7, #4294967295
 80295c6:	d007      	beq.n	80295d8 <_strtoul_l.constprop.0+0x78>
 80295c8:	4580      	cmp	r8, r0
 80295ca:	d31b      	bcc.n	8029604 <_strtoul_l.constprop.0+0xa4>
 80295cc:	d101      	bne.n	80295d2 <_strtoul_l.constprop.0+0x72>
 80295ce:	45a1      	cmp	r9, r4
 80295d0:	db18      	blt.n	8029604 <_strtoul_l.constprop.0+0xa4>
 80295d2:	fb00 4003 	mla	r0, r0, r3, r4
 80295d6:	2701      	movs	r7, #1
 80295d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80295dc:	e7e9      	b.n	80295b2 <_strtoul_l.constprop.0+0x52>
 80295de:	2c2b      	cmp	r4, #43	; 0x2b
 80295e0:	bf04      	itt	eq
 80295e2:	782c      	ldrbeq	r4, [r5, #0]
 80295e4:	1c85      	addeq	r5, r0, #2
 80295e6:	e7cc      	b.n	8029582 <_strtoul_l.constprop.0+0x22>
 80295e8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80295ec:	f1bc 0f19 	cmp.w	ip, #25
 80295f0:	d801      	bhi.n	80295f6 <_strtoul_l.constprop.0+0x96>
 80295f2:	3c37      	subs	r4, #55	; 0x37
 80295f4:	e7e3      	b.n	80295be <_strtoul_l.constprop.0+0x5e>
 80295f6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80295fa:	f1bc 0f19 	cmp.w	ip, #25
 80295fe:	d804      	bhi.n	802960a <_strtoul_l.constprop.0+0xaa>
 8029600:	3c57      	subs	r4, #87	; 0x57
 8029602:	e7dc      	b.n	80295be <_strtoul_l.constprop.0+0x5e>
 8029604:	f04f 37ff 	mov.w	r7, #4294967295
 8029608:	e7e6      	b.n	80295d8 <_strtoul_l.constprop.0+0x78>
 802960a:	1c7b      	adds	r3, r7, #1
 802960c:	d106      	bne.n	802961c <_strtoul_l.constprop.0+0xbc>
 802960e:	2322      	movs	r3, #34	; 0x22
 8029610:	4638      	mov	r0, r7
 8029612:	f8ce 3000 	str.w	r3, [lr]
 8029616:	b932      	cbnz	r2, 8029626 <_strtoul_l.constprop.0+0xc6>
 8029618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802961c:	b106      	cbz	r6, 8029620 <_strtoul_l.constprop.0+0xc0>
 802961e:	4240      	negs	r0, r0
 8029620:	2a00      	cmp	r2, #0
 8029622:	d0f9      	beq.n	8029618 <_strtoul_l.constprop.0+0xb8>
 8029624:	b107      	cbz	r7, 8029628 <_strtoul_l.constprop.0+0xc8>
 8029626:	1e69      	subs	r1, r5, #1
 8029628:	6011      	str	r1, [r2, #0]
 802962a:	e7f5      	b.n	8029618 <_strtoul_l.constprop.0+0xb8>
 802962c:	2430      	movs	r4, #48	; 0x30
 802962e:	2b00      	cmp	r3, #0
 8029630:	d1b5      	bne.n	802959e <_strtoul_l.constprop.0+0x3e>
 8029632:	2308      	movs	r3, #8
 8029634:	e7b3      	b.n	802959e <_strtoul_l.constprop.0+0x3e>
 8029636:	2c30      	cmp	r4, #48	; 0x30
 8029638:	d0a9      	beq.n	802958e <_strtoul_l.constprop.0+0x2e>
 802963a:	230a      	movs	r3, #10
 802963c:	e7af      	b.n	802959e <_strtoul_l.constprop.0+0x3e>
 802963e:	bf00      	nop
 8029640:	08029f70 	.word	0x08029f70

08029644 <_strtoul_r>:
 8029644:	f7ff bf8c 	b.w	8029560 <_strtoul_l.constprop.0>

08029648 <_malloc_usable_size_r>:
 8029648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802964c:	1f18      	subs	r0, r3, #4
 802964e:	2b00      	cmp	r3, #0
 8029650:	bfbc      	itt	lt
 8029652:	580b      	ldrlt	r3, [r1, r0]
 8029654:	18c0      	addlt	r0, r0, r3
 8029656:	4770      	bx	lr

08029658 <_init>:
 8029658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802965a:	bf00      	nop
 802965c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802965e:	bc08      	pop	{r3}
 8029660:	469e      	mov	lr, r3
 8029662:	4770      	bx	lr

08029664 <_fini>:
 8029664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029666:	bf00      	nop
 8029668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802966a:	bc08      	pop	{r3}
 802966c:	469e      	mov	lr, r3
 802966e:	4770      	bx	lr
