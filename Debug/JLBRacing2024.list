
JLBRacing2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd2c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  0800bf2c  0800bf2c  0001bf2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c164  0800c164  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  0800c164  0800c164  0001c164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c16c  0800c16c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c16c  0800c16c  0001c16c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c170  0800c170  0001c170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800c174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003670  20000064  0800c1d8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200036d4  0800c1d8  000236d4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d1cf  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005834  00000000  00000000  0004d2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000026e0  00000000  00000000  00052ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001e15  00000000  00000000  000551c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006a91  00000000  00000000  00056fd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002cb52  00000000  00000000  0005da66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00145d29  00000000  00000000  0008a5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000ad44  00000000  00000000  001d02e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001db028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000064 	.word	0x20000064
 800021c:	00000000 	.word	0x00000000
 8000220:	0800bf14 	.word	0x0800bf14

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000068 	.word	0x20000068
 800023c:	0800bf14 	.word	0x0800bf14

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b982 	b.w	8000580 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000298:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800029a:	460d      	mov	r5, r1
 800029c:	4604      	mov	r4, r0
 800029e:	460f      	mov	r7, r1
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d146      	bne.n	8000332 <__udivmoddi4+0x9e>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4694      	mov	ip, r2
 80002a8:	d95e      	bls.n	8000368 <__udivmoddi4+0xd4>
 80002aa:	fab2 f382 	clz	r3, r2
 80002ae:	b143      	cbz	r3, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002b4:	f1c3 0220 	rsb	r2, r3, #32
 80002b8:	409f      	lsls	r7, r3
 80002ba:	409c      	lsls	r4, r3
 80002bc:	fa20 f202 	lsr.w	r2, r0, r2
 80002c0:	4317      	orrs	r7, r2
 80002c2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002c6:	fa1f f58c 	uxth.w	r5, ip
 80002ca:	0c22      	lsrs	r2, r4, #16
 80002cc:	fbb7 f1fe 	udiv	r1, r7, lr
 80002d0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002d4:	fb01 f005 	mul.w	r0, r1, r5
 80002d8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002dc:	4290      	cmp	r0, r2
 80002de:	d908      	bls.n	80002f2 <__udivmoddi4+0x5e>
 80002e0:	eb1c 0202 	adds.w	r2, ip, r2
 80002e4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002e8:	d202      	bcs.n	80002f0 <__udivmoddi4+0x5c>
 80002ea:	4290      	cmp	r0, r2
 80002ec:	f200 8134 	bhi.w	8000558 <__udivmoddi4+0x2c4>
 80002f0:	4639      	mov	r1, r7
 80002f2:	1a12      	subs	r2, r2, r0
 80002f4:	b2a4      	uxth	r4, r4
 80002f6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002fa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002fe:	fb00 f505 	mul.w	r5, r0, r5
 8000302:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000306:	42a5      	cmp	r5, r4
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x88>
 800030a:	eb1c 0404 	adds.w	r4, ip, r4
 800030e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x86>
 8000314:	42a5      	cmp	r5, r4
 8000316:	f200 8119 	bhi.w	800054c <__udivmoddi4+0x2b8>
 800031a:	4610      	mov	r0, r2
 800031c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000320:	1b64      	subs	r4, r4, r5
 8000322:	2100      	movs	r1, #0
 8000324:	b11e      	cbz	r6, 800032e <__udivmoddi4+0x9a>
 8000326:	40dc      	lsrs	r4, r3
 8000328:	2300      	movs	r3, #0
 800032a:	e9c6 4300 	strd	r4, r3, [r6]
 800032e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000332:	428b      	cmp	r3, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0xb4>
 8000336:	2e00      	cmp	r6, #0
 8000338:	f000 80fc 	beq.w	8000534 <__udivmoddi4+0x2a0>
 800033c:	2100      	movs	r1, #0
 800033e:	e9c6 0500 	strd	r0, r5, [r6]
 8000342:	4608      	mov	r0, r1
 8000344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000348:	fab3 f183 	clz	r1, r3
 800034c:	2900      	cmp	r1, #0
 800034e:	d14c      	bne.n	80003ea <__udivmoddi4+0x156>
 8000350:	42ab      	cmp	r3, r5
 8000352:	f0c0 80f2 	bcc.w	800053a <__udivmoddi4+0x2a6>
 8000356:	4282      	cmp	r2, r0
 8000358:	f240 80ef 	bls.w	800053a <__udivmoddi4+0x2a6>
 800035c:	4608      	mov	r0, r1
 800035e:	2e00      	cmp	r6, #0
 8000360:	d0e5      	beq.n	800032e <__udivmoddi4+0x9a>
 8000362:	e9c6 4700 	strd	r4, r7, [r6]
 8000366:	e7e2      	b.n	800032e <__udivmoddi4+0x9a>
 8000368:	b902      	cbnz	r2, 800036c <__udivmoddi4+0xd8>
 800036a:	deff      	udf	#255	; 0xff
 800036c:	fab2 f382 	clz	r3, r2
 8000370:	2b00      	cmp	r3, #0
 8000372:	f040 809f 	bne.w	80004b4 <__udivmoddi4+0x220>
 8000376:	1a8a      	subs	r2, r1, r2
 8000378:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800037c:	fa1f f78c 	uxth.w	r7, ip
 8000380:	2101      	movs	r1, #1
 8000382:	fbb2 f5fe 	udiv	r5, r2, lr
 8000386:	fb0e 2015 	mls	r0, lr, r5, r2
 800038a:	0c22      	lsrs	r2, r4, #16
 800038c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000390:	fb07 f005 	mul.w	r0, r7, r5
 8000394:	4290      	cmp	r0, r2
 8000396:	d90f      	bls.n	80003b8 <__udivmoddi4+0x124>
 8000398:	eb1c 0202 	adds.w	r2, ip, r2
 800039c:	f105 38ff 	add.w	r8, r5, #4294967295
 80003a0:	bf2c      	ite	cs
 80003a2:	f04f 0901 	movcs.w	r9, #1
 80003a6:	f04f 0900 	movcc.w	r9, #0
 80003aa:	4290      	cmp	r0, r2
 80003ac:	d903      	bls.n	80003b6 <__udivmoddi4+0x122>
 80003ae:	f1b9 0f00 	cmp.w	r9, #0
 80003b2:	f000 80ce 	beq.w	8000552 <__udivmoddi4+0x2be>
 80003b6:	4645      	mov	r5, r8
 80003b8:	1a12      	subs	r2, r2, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb2 f0fe 	udiv	r0, r2, lr
 80003c0:	fb0e 2210 	mls	r2, lr, r0, r2
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003cc:	42a7      	cmp	r7, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x14e>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003d8:	d202      	bcs.n	80003e0 <__udivmoddi4+0x14c>
 80003da:	42a7      	cmp	r7, r4
 80003dc:	f200 80b3 	bhi.w	8000546 <__udivmoddi4+0x2b2>
 80003e0:	4610      	mov	r0, r2
 80003e2:	1be4      	subs	r4, r4, r7
 80003e4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003e8:	e79c      	b.n	8000324 <__udivmoddi4+0x90>
 80003ea:	f1c1 0420 	rsb	r4, r1, #32
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 fc01 	lsl.w	ip, r5, r1
 80003f4:	fa22 f704 	lsr.w	r7, r2, r4
 80003f8:	40e5      	lsrs	r5, r4
 80003fa:	408a      	lsls	r2, r1
 80003fc:	431f      	orrs	r7, r3
 80003fe:	fa20 f304 	lsr.w	r3, r0, r4
 8000402:	4088      	lsls	r0, r1
 8000404:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000408:	ea43 030c 	orr.w	r3, r3, ip
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb5 fef8 	udiv	lr, r5, r8
 8000418:	fb08 551e 	mls	r5, r8, lr, r5
 800041c:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000420:	fb0e f90c 	mul.w	r9, lr, ip
 8000424:	45a9      	cmp	r9, r5
 8000426:	d90e      	bls.n	8000446 <__udivmoddi4+0x1b2>
 8000428:	197d      	adds	r5, r7, r5
 800042a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042e:	bf2c      	ite	cs
 8000430:	f04f 0b01 	movcs.w	fp, #1
 8000434:	f04f 0b00 	movcc.w	fp, #0
 8000438:	45a9      	cmp	r9, r5
 800043a:	d903      	bls.n	8000444 <__udivmoddi4+0x1b0>
 800043c:	f1bb 0f00 	cmp.w	fp, #0
 8000440:	f000 808d 	beq.w	800055e <__udivmoddi4+0x2ca>
 8000444:	46d6      	mov	lr, sl
 8000446:	eba5 0509 	sub.w	r5, r5, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb5 f3f8 	udiv	r3, r5, r8
 8000452:	fb08 5513 	mls	r5, r8, r3, r5
 8000456:	fb03 fc0c 	mul.w	ip, r3, ip
 800045a:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800045e:	45ac      	cmp	ip, r5
 8000460:	d906      	bls.n	8000470 <__udivmoddi4+0x1dc>
 8000462:	197d      	adds	r5, r7, r5
 8000464:	f103 38ff 	add.w	r8, r3, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x1da>
 800046a:	45ac      	cmp	ip, r5
 800046c:	d87e      	bhi.n	800056c <__udivmoddi4+0x2d8>
 800046e:	4643      	mov	r3, r8
 8000470:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000474:	eba5 050c 	sub.w	r5, r5, ip
 8000478:	fba3 9802 	umull	r9, r8, r3, r2
 800047c:	4545      	cmp	r5, r8
 800047e:	46ce      	mov	lr, r9
 8000480:	46c4      	mov	ip, r8
 8000482:	d302      	bcc.n	800048a <__udivmoddi4+0x1f6>
 8000484:	d106      	bne.n	8000494 <__udivmoddi4+0x200>
 8000486:	4548      	cmp	r0, r9
 8000488:	d204      	bcs.n	8000494 <__udivmoddi4+0x200>
 800048a:	3b01      	subs	r3, #1
 800048c:	ebb9 0e02 	subs.w	lr, r9, r2
 8000490:	eb68 0c07 	sbc.w	ip, r8, r7
 8000494:	2e00      	cmp	r6, #0
 8000496:	d06f      	beq.n	8000578 <__udivmoddi4+0x2e4>
 8000498:	ebb0 020e 	subs.w	r2, r0, lr
 800049c:	eb65 050c 	sbc.w	r5, r5, ip
 80004a0:	40ca      	lsrs	r2, r1
 80004a2:	fa05 f404 	lsl.w	r4, r5, r4
 80004a6:	40cd      	lsrs	r5, r1
 80004a8:	4618      	mov	r0, r3
 80004aa:	4314      	orrs	r4, r2
 80004ac:	2100      	movs	r1, #0
 80004ae:	e9c6 4500 	strd	r4, r5, [r6]
 80004b2:	e73c      	b.n	800032e <__udivmoddi4+0x9a>
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	f1c3 0220 	rsb	r2, r3, #32
 80004bc:	4099      	lsls	r1, r3
 80004be:	409c      	lsls	r4, r3
 80004c0:	40d5      	lsrs	r5, r2
 80004c2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004c6:	fa20 f202 	lsr.w	r2, r0, r2
 80004ca:	fa1f f78c 	uxth.w	r7, ip
 80004ce:	fbb5 f0fe 	udiv	r0, r5, lr
 80004d2:	430a      	orrs	r2, r1
 80004d4:	fb0e 5510 	mls	r5, lr, r0, r5
 80004d8:	0c11      	lsrs	r1, r2, #16
 80004da:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004de:	fb00 f507 	mul.w	r5, r0, r7
 80004e2:	428d      	cmp	r5, r1
 80004e4:	d90e      	bls.n	8000504 <__udivmoddi4+0x270>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	bf2c      	ite	cs
 80004f0:	f04f 0901 	movcs.w	r9, #1
 80004f4:	f04f 0900 	movcc.w	r9, #0
 80004f8:	428d      	cmp	r5, r1
 80004fa:	d902      	bls.n	8000502 <__udivmoddi4+0x26e>
 80004fc:	f1b9 0f00 	cmp.w	r9, #0
 8000500:	d031      	beq.n	8000566 <__udivmoddi4+0x2d2>
 8000502:	4640      	mov	r0, r8
 8000504:	1b49      	subs	r1, r1, r5
 8000506:	b292      	uxth	r2, r2
 8000508:	fbb1 f5fe 	udiv	r5, r1, lr
 800050c:	fb0e 1115 	mls	r1, lr, r5, r1
 8000510:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000514:	fb05 f107 	mul.w	r1, r5, r7
 8000518:	4291      	cmp	r1, r2
 800051a:	d907      	bls.n	800052c <__udivmoddi4+0x298>
 800051c:	eb1c 0202 	adds.w	r2, ip, r2
 8000520:	f105 38ff 	add.w	r8, r5, #4294967295
 8000524:	d201      	bcs.n	800052a <__udivmoddi4+0x296>
 8000526:	4291      	cmp	r1, r2
 8000528:	d823      	bhi.n	8000572 <__udivmoddi4+0x2de>
 800052a:	4645      	mov	r5, r8
 800052c:	1a52      	subs	r2, r2, r1
 800052e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000532:	e726      	b.n	8000382 <__udivmoddi4+0xee>
 8000534:	4631      	mov	r1, r6
 8000536:	4630      	mov	r0, r6
 8000538:	e6f9      	b.n	800032e <__udivmoddi4+0x9a>
 800053a:	1a84      	subs	r4, r0, r2
 800053c:	eb65 0203 	sbc.w	r2, r5, r3
 8000540:	2001      	movs	r0, #1
 8000542:	4617      	mov	r7, r2
 8000544:	e70b      	b.n	800035e <__udivmoddi4+0xca>
 8000546:	4464      	add	r4, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74a      	b.n	80003e2 <__udivmoddi4+0x14e>
 800054c:	4464      	add	r4, ip
 800054e:	3802      	subs	r0, #2
 8000550:	e6e4      	b.n	800031c <__udivmoddi4+0x88>
 8000552:	3d02      	subs	r5, #2
 8000554:	4462      	add	r2, ip
 8000556:	e72f      	b.n	80003b8 <__udivmoddi4+0x124>
 8000558:	3902      	subs	r1, #2
 800055a:	4462      	add	r2, ip
 800055c:	e6c9      	b.n	80002f2 <__udivmoddi4+0x5e>
 800055e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000562:	443d      	add	r5, r7
 8000564:	e76f      	b.n	8000446 <__udivmoddi4+0x1b2>
 8000566:	3802      	subs	r0, #2
 8000568:	4461      	add	r1, ip
 800056a:	e7cb      	b.n	8000504 <__udivmoddi4+0x270>
 800056c:	3b02      	subs	r3, #2
 800056e:	443d      	add	r5, r7
 8000570:	e77e      	b.n	8000470 <__udivmoddi4+0x1dc>
 8000572:	3d02      	subs	r5, #2
 8000574:	4462      	add	r2, ip
 8000576:	e7d9      	b.n	800052c <__udivmoddi4+0x298>
 8000578:	4618      	mov	r0, r3
 800057a:	4631      	mov	r1, r6
 800057c:	e6d7      	b.n	800032e <__udivmoddi4+0x9a>
 800057e:	bf00      	nop

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <Radio_Init>:
bool flood_active = false;
uint8_t flood_counter = 0;
char pirate_from, pirate_to, pirate_next;
int pirate_percentage = 0;
void Radio_Init()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT (&huart4, radio_rxBuffer, 12);
 8000588:	220c      	movs	r2, #12
 800058a:	4903      	ldr	r1, [pc, #12]	; (8000598 <Radio_Init+0x14>)
 800058c:	4803      	ldr	r0, [pc, #12]	; (800059c <Radio_Init+0x18>)
 800058e:	f006 f8e7 	bl	8006760 <HAL_UART_Receive_IT>

}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000080 	.word	0x20000080
 800059c:	20000194 	.word	0x20000194

080005a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	6078      	str	r0, [r7, #4]
	uint8_t i, length;
    HAL_UART_Receive_IT(&huart4, radio_rxBuffer, 12);
 80005a8:	220c      	movs	r2, #12
 80005aa:	4922      	ldr	r1, [pc, #136]	; (8000634 <HAL_UART_RxCpltCallback+0x94>)
 80005ac:	4822      	ldr	r0, [pc, #136]	; (8000638 <HAL_UART_RxCpltCallback+0x98>)
 80005ae:	f006 f8d7 	bl	8006760 <HAL_UART_Receive_IT>
    // Check to see where is the termination character to determine what type of message is received
    for(i = 0; i < 12; ++i)
 80005b2:	2300      	movs	r3, #0
 80005b4:	73fb      	strb	r3, [r7, #15]
 80005b6:	e009      	b.n	80005cc <HAL_UART_RxCpltCallback+0x2c>
    {
    	if(radio_rxBuffer[i] == '\r')
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
 80005ba:	4a1e      	ldr	r2, [pc, #120]	; (8000634 <HAL_UART_RxCpltCallback+0x94>)
 80005bc:	5cd3      	ldrb	r3, [r2, r3]
 80005be:	2b0d      	cmp	r3, #13
 80005c0:	d101      	bne.n	80005c6 <HAL_UART_RxCpltCallback+0x26>
    	{
    		length = i;
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < 12; ++i)
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	3301      	adds	r3, #1
 80005ca:	73fb      	strb	r3, [r7, #15]
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	2b0b      	cmp	r3, #11
 80005d0:	d9f2      	bls.n	80005b8 <HAL_UART_RxCpltCallback+0x18>
    	}
    }
    // Labirinth countdown message received
    if(length == 1)
 80005d2:	7bbb      	ldrb	r3, [r7, #14]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d103      	bne.n	80005e0 <HAL_UART_RxCpltCallback+0x40>
    {
    	countdown_value = radio_rxBuffer[0];
 80005d8:	4b16      	ldr	r3, [pc, #88]	; (8000634 <HAL_UART_RxCpltCallback+0x94>)
 80005da:	781a      	ldrb	r2, [r3, #0]
 80005dc:	4b17      	ldr	r3, [pc, #92]	; (800063c <HAL_UART_RxCpltCallback+0x9c>)
 80005de:	701a      	strb	r2, [r3, #0]
    }
    if(length == 6)
 80005e0:	7bbb      	ldrb	r3, [r7, #14]
 80005e2:	2b06      	cmp	r3, #6
 80005e4:	d115      	bne.n	8000612 <HAL_UART_RxCpltCallback+0x72>
    {
    	//FLOOD message received
    	if(!strcmp("FLOOD!\r", radio_rxBuffer))
 80005e6:	4913      	ldr	r1, [pc, #76]	; (8000634 <HAL_UART_RxCpltCallback+0x94>)
 80005e8:	4815      	ldr	r0, [pc, #84]	; (8000640 <HAL_UART_RxCpltCallback+0xa0>)
 80005ea:	f7ff fe29 	bl	8000240 <strcmp>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d103      	bne.n	80005fc <HAL_UART_RxCpltCallback+0x5c>
    	{
    		flood_active = true;
 80005f4:	4b13      	ldr	r3, [pc, #76]	; (8000644 <HAL_UART_RxCpltCallback+0xa4>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	701a      	strb	r2, [r3, #0]
 80005fa:	e010      	b.n	800061e <HAL_UART_RxCpltCallback+0x7e>
    	}
    	else
    	{
    		sscanf(radio_rxBuffer, "%c%c%c%03d", &pirate_from, &pirate_to, &pirate_next, &pirate_percentage);
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <HAL_UART_RxCpltCallback+0xa8>)
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <HAL_UART_RxCpltCallback+0xac>)
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <HAL_UART_RxCpltCallback+0xb0>)
 8000606:	4a13      	ldr	r2, [pc, #76]	; (8000654 <HAL_UART_RxCpltCallback+0xb4>)
 8000608:	4913      	ldr	r1, [pc, #76]	; (8000658 <HAL_UART_RxCpltCallback+0xb8>)
 800060a:	480a      	ldr	r0, [pc, #40]	; (8000634 <HAL_UART_RxCpltCallback+0x94>)
 800060c:	f00a fe3e 	bl	800b28c <siscanf>
 8000610:	e005      	b.n	800061e <HAL_UART_RxCpltCallback+0x7e>
    	}
    }

    else
    {
    	flood_counter++;
 8000612:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_UART_RxCpltCallback+0xbc>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	3301      	adds	r3, #1
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <HAL_UART_RxCpltCallback+0xbc>)
 800061c:	701a      	strb	r2, [r3, #0]
    }

    if(flood_counter > 10)
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <HAL_UART_RxCpltCallback+0xbc>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b0a      	cmp	r3, #10
 8000624:	d902      	bls.n	800062c <HAL_UART_RxCpltCallback+0x8c>
    {
    	flood_active = false;
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <HAL_UART_RxCpltCallback+0xa4>)
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
    }

}
 800062c:	bf00      	nop
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000080 	.word	0x20000080
 8000638:	20000194 	.word	0x20000194
 800063c:	20000000 	.word	0x20000000
 8000640:	0800bf2c 	.word	0x0800bf2c
 8000644:	2000008c 	.word	0x2000008c
 8000648:	20000094 	.word	0x20000094
 800064c:	20000090 	.word	0x20000090
 8000650:	2000008f 	.word	0x2000008f
 8000654:	2000008e 	.word	0x2000008e
 8000658:	0800bf34 	.word	0x0800bf34
 800065c:	2000008d 	.word	0x2000008d

08000660 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800066a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800066c:	4907      	ldr	r1, [pc, #28]	; (800068c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4313      	orrs	r3, r2
 8000672:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000676:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4013      	ands	r3, r2
 800067c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800067e:	68fb      	ldr	r3, [r7, #12]
}
 8000680:	bf00      	nop
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	40021000 	.word	0x40021000

08000690 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000698:	4b08      	ldr	r3, [pc, #32]	; (80006bc <LL_APB1_GRP2_EnableClock+0x2c>)
 800069a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800069c:	4907      	ldr	r1, [pc, #28]	; (80006bc <LL_APB1_GRP2_EnableClock+0x2c>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <LL_APB1_GRP2_EnableClock+0x2c>)
 80006a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4013      	ands	r3, r2
 80006ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006ae:	68fb      	ldr	r3, [r7, #12]
}
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	40021000 	.word	0x40021000

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c4:	f001 fbd9 	bl	8001e7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c8:	f000 f842 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006cc:	f000 fcc8 	bl	8001060 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006d0:	f000 f8a0 	bl	8000814 <MX_ADC1_Init>
  MX_ICACHE_Init();
 80006d4:	f000 f914 	bl	8000900 <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 80006d8:	f000 f926 	bl	8000928 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 80006dc:	f000 fa0a 	bl	8000af4 <MX_RTC_Init>
  MX_UCPD1_Init();
 80006e0:	f000 fc60 	bl	8000fa4 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 80006e4:	f000 fc94 	bl	8001010 <MX_USB_PCD_Init>
  MX_UART4_Init();
 80006e8:	f000 f96c 	bl	80009c4 <MX_UART4_Init>
  MX_SPI1_Init();
 80006ec:	f000 fa4c 	bl	8000b88 <MX_SPI1_Init>
  MX_SPI2_Init();
 80006f0:	f000 fa88 	bl	8000c04 <MX_SPI2_Init>
  MX_SPI3_Init();
 80006f4:	f000 fac4 	bl	8000c80 <MX_SPI3_Init>
  MX_TIM1_Init();
 80006f8:	f000 fb00 	bl	8000cfc <MX_TIM1_Init>
  MX_TIM3_Init();
 80006fc:	f000 fb92 	bl	8000e24 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000700:	f000 f9ac 	bl	8000a5c <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8000704:	f000 fbf4 	bl	8000ef0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  Radio_Init();
 8000708:	f7ff ff3c 	bl	8000584 <Radio_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800070c:	f008 faac 	bl	8008c68 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000710:	4a09      	ldr	r2, [pc, #36]	; (8000738 <main+0x78>)
 8000712:	2100      	movs	r1, #0
 8000714:	4809      	ldr	r0, [pc, #36]	; (800073c <main+0x7c>)
 8000716:	f008 faf1 	bl	8008cfc <osThreadNew>
 800071a:	4603      	mov	r3, r0
 800071c:	4a08      	ldr	r2, [pc, #32]	; (8000740 <main+0x80>)
 800071e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  testTaskHandle = osThreadNew(TestTask, NULL, &testTask_attributes);
 8000720:	4a08      	ldr	r2, [pc, #32]	; (8000744 <main+0x84>)
 8000722:	2100      	movs	r1, #0
 8000724:	4808      	ldr	r0, [pc, #32]	; (8000748 <main+0x88>)
 8000726:	f008 fae9 	bl	8008cfc <osThreadNew>
 800072a:	4603      	mov	r3, r0
 800072c:	4a07      	ldr	r2, [pc, #28]	; (800074c <main+0x8c>)
 800072e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000730:	f008 fabe 	bl	8008cb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000734:	e7fe      	b.n	8000734 <main+0x74>
 8000736:	bf00      	nop
 8000738:	0800bf7c 	.word	0x0800bf7c
 800073c:	080012f9 	.word	0x080012f9
 8000740:	200007e8 	.word	0x200007e8
 8000744:	0800bfa0 	.word	0x0800bfa0
 8000748:	080012dd 	.word	0x080012dd
 800074c:	200007ec 	.word	0x200007ec

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b098      	sub	sp, #96	; 0x60
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0318 	add.w	r3, r7, #24
 800075a:	2248      	movs	r2, #72	; 0x48
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f00a fdc2 	bl	800b2e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000772:	2000      	movs	r0, #0
 8000774:	f002 fffc 	bl	8003770 <HAL_PWREx_ControlVoltageScaling>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800077e:	f000 fdda 	bl	8001336 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000782:	f002 ffd7 	bl	8003734 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000786:	4b22      	ldr	r3, [pc, #136]	; (8000810 <SystemClock_Config+0xc0>)
 8000788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800078c:	4a20      	ldr	r2, [pc, #128]	; (8000810 <SystemClock_Config+0xc0>)
 800078e:	f023 0318 	bic.w	r3, r3, #24
 8000792:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8000796:	2334      	movs	r3, #52	; 0x34
 8000798:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800079a:	2381      	movs	r3, #129	; 0x81
 800079c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800079e:	2301      	movs	r3, #1
 80007a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007a2:	2301      	movs	r3, #1
 80007a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80007a6:	2300      	movs	r3, #0
 80007a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007aa:	2360      	movs	r3, #96	; 0x60
 80007ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ae:	2302      	movs	r3, #2
 80007b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007b2:	2301      	movs	r3, #1
 80007b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007b6:	2301      	movs	r3, #1
 80007b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80007ba:	2337      	movs	r3, #55	; 0x37
 80007bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007be:	2307      	movs	r3, #7
 80007c0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007c6:	2302      	movs	r3, #2
 80007c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ca:	f107 0318 	add.w	r3, r7, #24
 80007ce:	4618      	mov	r0, r3
 80007d0:	f003 f85e 	bl	8003890 <HAL_RCC_OscConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007da:	f000 fdac 	bl	8001336 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007de:	230f      	movs	r3, #15
 80007e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e2:	2303      	movs	r3, #3
 80007e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2105      	movs	r1, #5
 80007f6:	4618      	mov	r0, r3
 80007f8:	f003 fd20 	bl	800423c <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000802:	f000 fd98 	bl	8001336 <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	3760      	adds	r7, #96	; 0x60
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40021000 	.word	0x40021000

08000814 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
 8000834:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000836:	4b2f      	ldr	r3, [pc, #188]	; (80008f4 <MX_ADC1_Init+0xe0>)
 8000838:	4a2f      	ldr	r2, [pc, #188]	; (80008f8 <MX_ADC1_Init+0xe4>)
 800083a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800083c:	4b2d      	ldr	r3, [pc, #180]	; (80008f4 <MX_ADC1_Init+0xe0>)
 800083e:	2200      	movs	r2, #0
 8000840:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000842:	4b2c      	ldr	r3, [pc, #176]	; (80008f4 <MX_ADC1_Init+0xe0>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000848:	4b2a      	ldr	r3, [pc, #168]	; (80008f4 <MX_ADC1_Init+0xe0>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800084e:	4b29      	ldr	r3, [pc, #164]	; (80008f4 <MX_ADC1_Init+0xe0>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000854:	4b27      	ldr	r3, [pc, #156]	; (80008f4 <MX_ADC1_Init+0xe0>)
 8000856:	2204      	movs	r2, #4
 8000858:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800085a:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <MX_ADC1_Init+0xe0>)
 800085c:	2200      	movs	r2, #0
 800085e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000860:	4b24      	ldr	r3, [pc, #144]	; (80008f4 <MX_ADC1_Init+0xe0>)
 8000862:	2200      	movs	r2, #0
 8000864:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000866:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <MX_ADC1_Init+0xe0>)
 8000868:	2201      	movs	r2, #1
 800086a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800086c:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <MX_ADC1_Init+0xe0>)
 800086e:	2200      	movs	r2, #0
 8000870:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <MX_ADC1_Init+0xe0>)
 8000876:	2200      	movs	r2, #0
 8000878:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800087a:	4b1e      	ldr	r3, [pc, #120]	; (80008f4 <MX_ADC1_Init+0xe0>)
 800087c:	2200      	movs	r2, #0
 800087e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000880:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <MX_ADC1_Init+0xe0>)
 8000882:	2200      	movs	r2, #0
 8000884:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000888:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <MX_ADC1_Init+0xe0>)
 800088a:	2200      	movs	r2, #0
 800088c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800088e:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <MX_ADC1_Init+0xe0>)
 8000890:	2200      	movs	r2, #0
 8000892:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000896:	4817      	ldr	r0, [pc, #92]	; (80008f4 <MX_ADC1_Init+0xe0>)
 8000898:	f001 fcca 	bl	8002230 <HAL_ADC_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80008a2:	f000 fd48 	bl	8001336 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4810      	ldr	r0, [pc, #64]	; (80008f4 <MX_ADC1_Init+0xe0>)
 80008b2:	f002 fa19 	bl	8002ce8 <HAL_ADCEx_MultiModeConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80008bc:	f000 fd3b 	bl	8001336 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008c0:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_ADC1_Init+0xe8>)
 80008c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c4:	2306      	movs	r3, #6
 80008c6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008cc:	237f      	movs	r3, #127	; 0x7f
 80008ce:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008d0:	2304      	movs	r3, #4
 80008d2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_ADC1_Init+0xe0>)
 80008de:	f001 fdf3 	bl	80024c8 <HAL_ADC_ConfigChannel>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80008e8:	f000 fd25 	bl	8001336 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	3728      	adds	r7, #40	; 0x28
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000098 	.word	0x20000098
 80008f8:	42028000 	.word	0x42028000
 80008fc:	0c900008 	.word	0x0c900008

08000900 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000904:	2000      	movs	r0, #0
 8000906:	f002 fde1 	bl	80034cc <HAL_ICACHE_ConfigAssociativityMode>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000910:	f000 fd11 	bl	8001336 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000914:	f002 fdfa 	bl	800350c <HAL_ICACHE_Enable>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800091e:	f000 fd0a 	bl	8001336 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800092c:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <MX_LPUART1_UART_Init+0x90>)
 800092e:	4a23      	ldr	r2, [pc, #140]	; (80009bc <MX_LPUART1_UART_Init+0x94>)
 8000930:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000932:	4b21      	ldr	r3, [pc, #132]	; (80009b8 <MX_LPUART1_UART_Init+0x90>)
 8000934:	4a22      	ldr	r2, [pc, #136]	; (80009c0 <MX_LPUART1_UART_Init+0x98>)
 8000936:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000938:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <MX_LPUART1_UART_Init+0x90>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800093e:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <MX_LPUART1_UART_Init+0x90>)
 8000940:	2200      	movs	r2, #0
 8000942:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000944:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <MX_LPUART1_UART_Init+0x90>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800094a:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <MX_LPUART1_UART_Init+0x90>)
 800094c:	220c      	movs	r2, #12
 800094e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000950:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <MX_LPUART1_UART_Init+0x90>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000956:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <MX_LPUART1_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800095c:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <MX_LPUART1_UART_Init+0x90>)
 800095e:	2200      	movs	r2, #0
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <MX_LPUART1_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000968:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <MX_LPUART1_UART_Init+0x90>)
 800096a:	2200      	movs	r2, #0
 800096c:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800096e:	4812      	ldr	r0, [pc, #72]	; (80009b8 <MX_LPUART1_UART_Init+0x90>)
 8000970:	f005 fea6 	bl	80066c0 <HAL_UART_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 800097a:	f000 fcdc 	bl	8001336 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800097e:	2100      	movs	r1, #0
 8000980:	480d      	ldr	r0, [pc, #52]	; (80009b8 <MX_LPUART1_UART_Init+0x90>)
 8000982:	f007 fe6e 	bl	8008662 <HAL_UARTEx_SetTxFifoThreshold>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 800098c:	f000 fcd3 	bl	8001336 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000990:	2100      	movs	r1, #0
 8000992:	4809      	ldr	r0, [pc, #36]	; (80009b8 <MX_LPUART1_UART_Init+0x90>)
 8000994:	f007 fea3 	bl	80086de <HAL_UARTEx_SetRxFifoThreshold>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 800099e:	f000 fcca 	bl	8001336 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_LPUART1_UART_Init+0x90>)
 80009a4:	f007 fe24 	bl	80085f0 <HAL_UARTEx_DisableFifoMode>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80009ae:	f000 fcc2 	bl	8001336 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000100 	.word	0x20000100
 80009bc:	40008000 	.word	0x40008000
 80009c0:	00033324 	.word	0x00033324

080009c4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009c8:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <MX_UART4_Init+0x90>)
 80009ca:	4a23      	ldr	r2, [pc, #140]	; (8000a58 <MX_UART4_Init+0x94>)
 80009cc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80009ce:	4b21      	ldr	r3, [pc, #132]	; (8000a54 <MX_UART4_Init+0x90>)
 80009d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <MX_UART4_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009dc:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <MX_UART4_Init+0x90>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009e2:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <MX_UART4_Init+0x90>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 80009e8:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <MX_UART4_Init+0x90>)
 80009ea:	2204      	movs	r2, #4
 80009ec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <MX_UART4_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_UART4_Init+0x90>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fa:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <MX_UART4_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_UART4_Init+0x90>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a06:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <MX_UART4_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a0c:	4811      	ldr	r0, [pc, #68]	; (8000a54 <MX_UART4_Init+0x90>)
 8000a0e:	f005 fe57 	bl	80066c0 <HAL_UART_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000a18:	f000 fc8d 	bl	8001336 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	480d      	ldr	r0, [pc, #52]	; (8000a54 <MX_UART4_Init+0x90>)
 8000a20:	f007 fe1f 	bl	8008662 <HAL_UARTEx_SetTxFifoThreshold>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000a2a:	f000 fc84 	bl	8001336 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4808      	ldr	r0, [pc, #32]	; (8000a54 <MX_UART4_Init+0x90>)
 8000a32:	f007 fe54 	bl	80086de <HAL_UARTEx_SetRxFifoThreshold>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000a3c:	f000 fc7b 	bl	8001336 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000a40:	4804      	ldr	r0, [pc, #16]	; (8000a54 <MX_UART4_Init+0x90>)
 8000a42:	f007 fdd5 	bl	80085f0 <HAL_UARTEx_DisableFifoMode>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000a4c:	f000 fc73 	bl	8001336 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000194 	.word	0x20000194
 8000a58:	40004c00 	.word	0x40004c00

08000a5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a60:	4b22      	ldr	r3, [pc, #136]	; (8000aec <MX_USART2_UART_Init+0x90>)
 8000a62:	4a23      	ldr	r2, [pc, #140]	; (8000af0 <MX_USART2_UART_Init+0x94>)
 8000a64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a66:	4b21      	ldr	r3, [pc, #132]	; (8000aec <MX_USART2_UART_Init+0x90>)
 8000a68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6e:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <MX_USART2_UART_Init+0x90>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a74:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <MX_USART2_UART_Init+0x90>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <MX_USART2_UART_Init+0x90>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a80:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <MX_USART2_UART_Init+0x90>)
 8000a82:	220c      	movs	r2, #12
 8000a84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a86:	4b19      	ldr	r3, [pc, #100]	; (8000aec <MX_USART2_UART_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a8c:	4b17      	ldr	r3, [pc, #92]	; (8000aec <MX_USART2_UART_Init+0x90>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a92:	4b16      	ldr	r3, [pc, #88]	; (8000aec <MX_USART2_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <MX_USART2_UART_Init+0x90>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <MX_USART2_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aa4:	4811      	ldr	r0, [pc, #68]	; (8000aec <MX_USART2_UART_Init+0x90>)
 8000aa6:	f005 fe0b 	bl	80066c0 <HAL_UART_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ab0:	f000 fc41 	bl	8001336 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	480d      	ldr	r0, [pc, #52]	; (8000aec <MX_USART2_UART_Init+0x90>)
 8000ab8:	f007 fdd3 	bl	8008662 <HAL_UARTEx_SetTxFifoThreshold>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000ac2:	f000 fc38 	bl	8001336 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4808      	ldr	r0, [pc, #32]	; (8000aec <MX_USART2_UART_Init+0x90>)
 8000aca:	f007 fe08 	bl	80086de <HAL_UARTEx_SetRxFifoThreshold>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ad4:	f000 fc2f 	bl	8001336 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ad8:	4804      	ldr	r0, [pc, #16]	; (8000aec <MX_USART2_UART_Init+0x90>)
 8000ada:	f007 fd89 	bl	80085f0 <HAL_UARTEx_DisableFifoMode>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ae4:	f000 fc27 	bl	8001336 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000228 	.word	0x20000228
 8000af0:	40004400 	.word	0x40004400

08000af4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000afa:	463b      	mov	r3, r7
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
 8000b08:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <MX_RTC_Init+0x8c>)
 8000b0c:	4a1d      	ldr	r2, [pc, #116]	; (8000b84 <MX_RTC_Init+0x90>)
 8000b0e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <MX_RTC_Init+0x8c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b16:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <MX_RTC_Init+0x8c>)
 8000b18:	227f      	movs	r2, #127	; 0x7f
 8000b1a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <MX_RTC_Init+0x8c>)
 8000b1e:	22ff      	movs	r2, #255	; 0xff
 8000b20:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <MX_RTC_Init+0x8c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <MX_RTC_Init+0x8c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_RTC_Init+0x8c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <MX_RTC_Init+0x8c>)
 8000b36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b3a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000b3c:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <MX_RTC_Init+0x8c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b42:	480f      	ldr	r0, [pc, #60]	; (8000b80 <MX_RTC_Init+0x8c>)
 8000b44:	f004 fba6 	bl	8005294 <HAL_RTC_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000b4e:	f000 fbf2 	bl	8001336 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000b52:	2300      	movs	r3, #0
 8000b54:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000b62:	463b      	mov	r3, r7
 8000b64:	4619      	mov	r1, r3
 8000b66:	4806      	ldr	r0, [pc, #24]	; (8000b80 <MX_RTC_Init+0x8c>)
 8000b68:	f004 fca2 	bl	80054b0 <HAL_RTCEx_PrivilegeModeSet>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000b72:	f000 fbe0 	bl	8001336 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200002bc 	.word	0x200002bc
 8000b84:	40002800 	.word	0x40002800

08000b88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <MX_SPI1_Init+0x74>)
 8000b8e:	4a1c      	ldr	r2, [pc, #112]	; (8000c00 <MX_SPI1_Init+0x78>)
 8000b90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b92:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <MX_SPI1_Init+0x74>)
 8000b94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <MX_SPI1_Init+0x74>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ba0:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <MX_SPI1_Init+0x74>)
 8000ba2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ba6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_SPI1_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bae:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <MX_SPI1_Init+0x74>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_SPI1_Init+0x74>)
 8000bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_SPI1_Init+0x74>)
 8000bbe:	2210      	movs	r2, #16
 8000bc0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_SPI1_Init+0x74>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_SPI1_Init+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <MX_SPI1_Init+0x74>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_SPI1_Init+0x74>)
 8000bd6:	2207      	movs	r2, #7
 8000bd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <MX_SPI1_Init+0x74>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_SPI1_Init+0x74>)
 8000be2:	2208      	movs	r2, #8
 8000be4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_SPI1_Init+0x74>)
 8000be8:	f004 fc8e 	bl	8005508 <HAL_SPI_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000bf2:	f000 fba0 	bl	8001336 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200002e4 	.word	0x200002e4
 8000c00:	40013000 	.word	0x40013000

08000c04 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c08:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <MX_SPI2_Init+0x74>)
 8000c0a:	4a1c      	ldr	r2, [pc, #112]	; (8000c7c <MX_SPI2_Init+0x78>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <MX_SPI2_Init+0x74>)
 8000c10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c14:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <MX_SPI2_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <MX_SPI2_Init+0x74>)
 8000c1e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c22:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c24:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <MX_SPI2_Init+0x74>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c2a:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <MX_SPI2_Init+0x74>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <MX_SPI2_Init+0x74>)
 8000c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c36:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <MX_SPI2_Init+0x74>)
 8000c3a:	2218      	movs	r2, #24
 8000c3c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <MX_SPI2_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <MX_SPI2_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <MX_SPI2_Init+0x74>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <MX_SPI2_Init+0x74>)
 8000c52:	2207      	movs	r2, #7
 8000c54:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <MX_SPI2_Init+0x74>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <MX_SPI2_Init+0x74>)
 8000c5e:	2208      	movs	r2, #8
 8000c60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_SPI2_Init+0x74>)
 8000c64:	f004 fc50 	bl	8005508 <HAL_SPI_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000c6e:	f000 fb62 	bl	8001336 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000348 	.word	0x20000348
 8000c7c:	40003800 	.word	0x40003800

08000c80 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c84:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <MX_SPI3_Init+0x74>)
 8000c86:	4a1c      	ldr	r2, [pc, #112]	; (8000cf8 <MX_SPI3_Init+0x78>)
 8000c88:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c8a:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <MX_SPI3_Init+0x74>)
 8000c8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c90:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c92:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <MX_SPI3_Init+0x74>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c98:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <MX_SPI3_Init+0x74>)
 8000c9a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c9e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <MX_SPI3_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <MX_SPI3_Init+0x74>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_SPI3_Init+0x74>)
 8000cae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cb2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_SPI3_Init+0x74>)
 8000cb6:	2218      	movs	r2, #24
 8000cb8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_SPI3_Init+0x74>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_SPI3_Init+0x74>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <MX_SPI3_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <MX_SPI3_Init+0x74>)
 8000cce:	2207      	movs	r2, #7
 8000cd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <MX_SPI3_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <MX_SPI3_Init+0x74>)
 8000cda:	2208      	movs	r2, #8
 8000cdc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_SPI3_Init+0x74>)
 8000ce0:	f004 fc12 	bl	8005508 <HAL_SPI_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000cea:	f000 fb24 	bl	8001336 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200003ac 	.word	0x200003ac
 8000cf8:	40003c00 	.word	0x40003c00

08000cfc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b098      	sub	sp, #96	; 0x60
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d02:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
 8000d1c:	611a      	str	r2, [r3, #16]
 8000d1e:	615a      	str	r2, [r3, #20]
 8000d20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	2234      	movs	r2, #52	; 0x34
 8000d26:	2100      	movs	r1, #0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f00a fadd 	bl	800b2e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d2e:	4b3b      	ldr	r3, [pc, #236]	; (8000e1c <MX_TIM1_Init+0x120>)
 8000d30:	4a3b      	ldr	r2, [pc, #236]	; (8000e20 <MX_TIM1_Init+0x124>)
 8000d32:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d34:	4b39      	ldr	r3, [pc, #228]	; (8000e1c <MX_TIM1_Init+0x120>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3a:	4b38      	ldr	r3, [pc, #224]	; (8000e1c <MX_TIM1_Init+0x120>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d40:	4b36      	ldr	r3, [pc, #216]	; (8000e1c <MX_TIM1_Init+0x120>)
 8000d42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d48:	4b34      	ldr	r3, [pc, #208]	; (8000e1c <MX_TIM1_Init+0x120>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d4e:	4b33      	ldr	r3, [pc, #204]	; (8000e1c <MX_TIM1_Init+0x120>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d54:	4b31      	ldr	r3, [pc, #196]	; (8000e1c <MX_TIM1_Init+0x120>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d5a:	4830      	ldr	r0, [pc, #192]	; (8000e1c <MX_TIM1_Init+0x120>)
 8000d5c:	f004 fd48 	bl	80057f0 <HAL_TIM_PWM_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000d66:	f000 fae6 	bl	8001336 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4827      	ldr	r0, [pc, #156]	; (8000e1c <MX_TIM1_Init+0x120>)
 8000d7e:	f005 fb59 	bl	8006434 <HAL_TIMEx_MasterConfigSynchronization>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d88:	f000 fad5 	bl	8001336 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d8c:	2360      	movs	r3, #96	; 0x60
 8000d8e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d94:	2300      	movs	r3, #0
 8000d96:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000da0:	2300      	movs	r3, #0
 8000da2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000da4:	2300      	movs	r3, #0
 8000da6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000da8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dac:	2200      	movs	r2, #0
 8000dae:	4619      	mov	r1, r3
 8000db0:	481a      	ldr	r0, [pc, #104]	; (8000e1c <MX_TIM1_Init+0x120>)
 8000db2:	f004 fe93 	bl	8005adc <HAL_TIM_PWM_ConfigChannel>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000dbc:	f000 fabb 	bl	8001336 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dd8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000dde:	2300      	movs	r3, #0
 8000de0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000de6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000df0:	2300      	movs	r3, #0
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000df4:	2300      	movs	r3, #0
 8000df6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4807      	ldr	r0, [pc, #28]	; (8000e1c <MX_TIM1_Init+0x120>)
 8000dfe:	f005 fba1 	bl	8006544 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000e08:	f000 fa95 	bl	8001336 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e0c:	4803      	ldr	r0, [pc, #12]	; (8000e1c <MX_TIM1_Init+0x120>)
 8000e0e:	f000 fdb1 	bl	8001974 <HAL_TIM_MspPostInit>

}
 8000e12:	bf00      	nop
 8000e14:	3760      	adds	r7, #96	; 0x60
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000410 	.word	0x20000410
 8000e20:	40012c00 	.word	0x40012c00

08000e24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e36:	463b      	mov	r3, r7
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
 8000e44:	615a      	str	r2, [r3, #20]
 8000e46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e48:	4b27      	ldr	r3, [pc, #156]	; (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e4a:	4a28      	ldr	r2, [pc, #160]	; (8000eec <MX_TIM3_Init+0xc8>)
 8000e4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e4e:	4b26      	ldr	r3, [pc, #152]	; (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e54:	4b24      	ldr	r3, [pc, #144]	; (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e5a:	4b23      	ldr	r3, [pc, #140]	; (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e62:	4b21      	ldr	r3, [pc, #132]	; (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e68:	4b1f      	ldr	r3, [pc, #124]	; (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e6e:	481e      	ldr	r0, [pc, #120]	; (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e70:	f004 fcbe 	bl	80057f0 <HAL_TIM_PWM_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000e7a:	f000 fa5c 	bl	8001336 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4816      	ldr	r0, [pc, #88]	; (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e8e:	f005 fad1 	bl	8006434 <HAL_TIMEx_MasterConfigSynchronization>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000e98:	f000 fa4d 	bl	8001336 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e9c:	2360      	movs	r3, #96	; 0x60
 8000e9e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eac:	463b      	mov	r3, r7
 8000eae:	2200      	movs	r2, #0
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <MX_TIM3_Init+0xc4>)
 8000eb4:	f004 fe12 	bl	8005adc <HAL_TIM_PWM_ConfigChannel>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000ebe:	f000 fa3a 	bl	8001336 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	2204      	movs	r2, #4
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4807      	ldr	r0, [pc, #28]	; (8000ee8 <MX_TIM3_Init+0xc4>)
 8000eca:	f004 fe07 	bl	8005adc <HAL_TIM_PWM_ConfigChannel>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000ed4:	f000 fa2f 	bl	8001336 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ed8:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <MX_TIM3_Init+0xc4>)
 8000eda:	f000 fd4b 	bl	8001974 <HAL_TIM_MspPostInit>

}
 8000ede:	bf00      	nop
 8000ee0:	3728      	adds	r7, #40	; 0x28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	2000045c 	.word	0x2000045c
 8000eec:	40000400 	.word	0x40000400

08000ef0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f02:	463b      	mov	r3, r7
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
 8000f10:	615a      	str	r2, [r3, #20]
 8000f12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f14:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <MX_TIM5_Init+0xac>)
 8000f16:	4a22      	ldr	r2, [pc, #136]	; (8000fa0 <MX_TIM5_Init+0xb0>)
 8000f18:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f1a:	4b20      	ldr	r3, [pc, #128]	; (8000f9c <MX_TIM5_Init+0xac>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f20:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <MX_TIM5_Init+0xac>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000f26:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <MX_TIM5_Init+0xac>)
 8000f28:	f04f 32ff 	mov.w	r2, #4294967295
 8000f2c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <MX_TIM5_Init+0xac>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f34:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <MX_TIM5_Init+0xac>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000f3a:	4818      	ldr	r0, [pc, #96]	; (8000f9c <MX_TIM5_Init+0xac>)
 8000f3c:	f004 fc58 	bl	80057f0 <HAL_TIM_PWM_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8000f46:	f000 f9f6 	bl	8001336 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	4810      	ldr	r0, [pc, #64]	; (8000f9c <MX_TIM5_Init+0xac>)
 8000f5a:	f005 fa6b 	bl	8006434 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8000f64:	f000 f9e7 	bl	8001336 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f68:	2360      	movs	r3, #96	; 0x60
 8000f6a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f78:	463b      	mov	r3, r7
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4807      	ldr	r0, [pc, #28]	; (8000f9c <MX_TIM5_Init+0xac>)
 8000f80:	f004 fdac 	bl	8005adc <HAL_TIM_PWM_ConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8000f8a:	f000 f9d4 	bl	8001336 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000f8e:	4803      	ldr	r0, [pc, #12]	; (8000f9c <MX_TIM5_Init+0xac>)
 8000f90:	f000 fcf0 	bl	8001974 <HAL_TIM_MspPostInit>

}
 8000f94:	bf00      	nop
 8000f96:	3728      	adds	r7, #40	; 0x28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	200004a8 	.word	0x200004a8
 8000fa0:	40000c00 	.word	0x40000c00

08000fa4 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000faa:	463b      	mov	r3, r7
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
 8000fb8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000fba:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000fbe:	f7ff fb67 	bl	8000690 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000fc2:	2002      	movs	r0, #2
 8000fc4:	f7ff fb4c 	bl	8000660 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f7ff fb49 	bl	8000660 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000fce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fd2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fdc:	463b      	mov	r3, r7
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4809      	ldr	r0, [pc, #36]	; (8001008 <MX_UCPD1_Init+0x64>)
 8000fe2:	f007 fd54 	bl	8008a8e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fea:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000fec:	2303      	movs	r3, #3
 8000fee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <MX_UCPD1_Init+0x68>)
 8000ffa:	f007 fd48 	bl	8008a8e <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000ffe:	bf00      	nop
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	42020400 	.word	0x42020400
 800100c:	42020000 	.word	0x42020000

08001010 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001014:	4b10      	ldr	r3, [pc, #64]	; (8001058 <MX_USB_PCD_Init+0x48>)
 8001016:	4a11      	ldr	r2, [pc, #68]	; (800105c <MX_USB_PCD_Init+0x4c>)
 8001018:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800101a:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_USB_PCD_Init+0x48>)
 800101c:	2208      	movs	r2, #8
 800101e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001020:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <MX_USB_PCD_Init+0x48>)
 8001022:	2202      	movs	r2, #2
 8001024:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <MX_USB_PCD_Init+0x48>)
 8001028:	2202      	movs	r2, #2
 800102a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <MX_USB_PCD_Init+0x48>)
 800102e:	2200      	movs	r2, #0
 8001030:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <MX_USB_PCD_Init+0x48>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001038:	4b07      	ldr	r3, [pc, #28]	; (8001058 <MX_USB_PCD_Init+0x48>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <MX_USB_PCD_Init+0x48>)
 8001040:	2200      	movs	r2, #0
 8001042:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001044:	4804      	ldr	r0, [pc, #16]	; (8001058 <MX_USB_PCD_Init+0x48>)
 8001046:	f002 fa71 	bl	800352c <HAL_PCD_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001050:	f000 f971 	bl	8001336 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200004f4 	.word	0x200004f4
 800105c:	4000d400 	.word	0x4000d400

08001060 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08c      	sub	sp, #48	; 0x30
 8001064:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001066:	f107 031c 	add.w	r3, r7, #28
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
 8001074:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001076:	4b91      	ldr	r3, [pc, #580]	; (80012bc <MX_GPIO_Init+0x25c>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107a:	4a90      	ldr	r2, [pc, #576]	; (80012bc <MX_GPIO_Init+0x25c>)
 800107c:	f043 0310 	orr.w	r3, r3, #16
 8001080:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001082:	4b8e      	ldr	r3, [pc, #568]	; (80012bc <MX_GPIO_Init+0x25c>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001086:	f003 0310 	and.w	r3, r3, #16
 800108a:	61bb      	str	r3, [r7, #24]
 800108c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800108e:	4b8b      	ldr	r3, [pc, #556]	; (80012bc <MX_GPIO_Init+0x25c>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001092:	4a8a      	ldr	r2, [pc, #552]	; (80012bc <MX_GPIO_Init+0x25c>)
 8001094:	f043 0304 	orr.w	r3, r3, #4
 8001098:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109a:	4b88      	ldr	r3, [pc, #544]	; (80012bc <MX_GPIO_Init+0x25c>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109e:	f003 0304 	and.w	r3, r3, #4
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010a6:	4b85      	ldr	r3, [pc, #532]	; (80012bc <MX_GPIO_Init+0x25c>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	4a84      	ldr	r2, [pc, #528]	; (80012bc <MX_GPIO_Init+0x25c>)
 80010ac:	f043 0320 	orr.w	r3, r3, #32
 80010b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b2:	4b82      	ldr	r3, [pc, #520]	; (80012bc <MX_GPIO_Init+0x25c>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	f003 0320 	and.w	r3, r3, #32
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	4b7f      	ldr	r3, [pc, #508]	; (80012bc <MX_GPIO_Init+0x25c>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	4a7e      	ldr	r2, [pc, #504]	; (80012bc <MX_GPIO_Init+0x25c>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ca:	4b7c      	ldr	r3, [pc, #496]	; (80012bc <MX_GPIO_Init+0x25c>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	4b79      	ldr	r3, [pc, #484]	; (80012bc <MX_GPIO_Init+0x25c>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	4a78      	ldr	r2, [pc, #480]	; (80012bc <MX_GPIO_Init+0x25c>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e2:	4b76      	ldr	r3, [pc, #472]	; (80012bc <MX_GPIO_Init+0x25c>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ee:	4b73      	ldr	r3, [pc, #460]	; (80012bc <MX_GPIO_Init+0x25c>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	4a72      	ldr	r2, [pc, #456]	; (80012bc <MX_GPIO_Init+0x25c>)
 80010f4:	f043 0308 	orr.w	r3, r3, #8
 80010f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fa:	4b70      	ldr	r3, [pc, #448]	; (80012bc <MX_GPIO_Init+0x25c>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	f003 0308 	and.w	r3, r3, #8
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001106:	4b6d      	ldr	r3, [pc, #436]	; (80012bc <MX_GPIO_Init+0x25c>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	4a6c      	ldr	r2, [pc, #432]	; (80012bc <MX_GPIO_Init+0x25c>)
 800110c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001112:	4b6a      	ldr	r3, [pc, #424]	; (80012bc <MX_GPIO_Init+0x25c>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 800111e:	f002 fb83 	bl	8003828 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DRIVE_E_Pin|MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	f24e 0108 	movw	r1, #57352	; 0xe008
 8001128:	4865      	ldr	r0, [pc, #404]	; (80012c0 <MX_GPIO_Init+0x260>)
 800112a:	f002 f99d 	bl	8003468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	21a4      	movs	r1, #164	; 0xa4
 8001132:	4864      	ldr	r0, [pc, #400]	; (80012c4 <MX_GPIO_Init+0x264>)
 8001134:	f002 f998 	bl	8003468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 8001138:	2200      	movs	r2, #0
 800113a:	f64f 7187 	movw	r1, #65415	; 0xff87
 800113e:	4862      	ldr	r0, [pc, #392]	; (80012c8 <MX_GPIO_Init+0x268>)
 8001140:	f002 f992 	bl	8003468 <HAL_GPIO_WritePin>
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |LED_LE_F_Pin|INFRA_LE_F_Pin|LED_OE_F_Pin|INFRA_OE_F_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001144:	2200      	movs	r2, #0
 8001146:	2180      	movs	r1, #128	; 0x80
 8001148:	4860      	ldr	r0, [pc, #384]	; (80012cc <MX_GPIO_Init+0x26c>)
 800114a:	f002 f98d 	bl	8003468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001154:	485e      	ldr	r0, [pc, #376]	; (80012d0 <MX_GPIO_Init+0x270>)
 8001156:	f002 f987 	bl	8003468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_LE_R_Pin|INFRA_LE_R_Pin|LED_OE_R_Pin|INFRA_OE_R_Pin
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 41ec 	mov.w	r1, #30208	; 0x7600
 8001160:	485c      	ldr	r0, [pc, #368]	; (80012d4 <MX_GPIO_Init+0x274>)
 8001162:	f002 f981 	bl	8003468 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DRIVE_E_Pin */
  GPIO_InitStruct.Pin = DRIVE_E_Pin;
 8001166:	2308      	movs	r3, #8
 8001168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001172:	2303      	movs	r3, #3
 8001174:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DRIVE_E_GPIO_Port, &GPIO_InitStruct);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	4619      	mov	r1, r3
 800117c:	4850      	ldr	r0, [pc, #320]	; (80012c0 <MX_GPIO_Init+0x260>)
 800117e:	f001 fff3 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_FB_Pin REMOTE_GAS_Pin REMOTE_STEER_Pin */
  GPIO_InitStruct.Pin = MCU_FB_Pin|REMOTE_GAS_Pin|REMOTE_STEER_Pin;
 8001182:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001186:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	4619      	mov	r1, r3
 8001196:	484a      	ldr	r0, [pc, #296]	; (80012c0 <MX_GPIO_Init+0x260>)
 8001198:	f001 ffe6 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pin : BATT_VOLTAGE_Pin */
  GPIO_InitStruct.Pin = BATT_VOLTAGE_Pin;
 800119c:	2301      	movs	r3, #1
 800119e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a0:	2303      	movs	r3, #3
 80011a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BATT_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	4619      	mov	r1, r3
 80011ae:	4847      	ldr	r0, [pc, #284]	; (80012cc <MX_GPIO_Init+0x26c>)
 80011b0:	f001 ffda 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAX_CS_Pin UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin;
 80011b4:	23a4      	movs	r3, #164	; 0xa4
 80011b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	f107 031c 	add.w	r3, r7, #28
 80011c8:	4619      	mov	r1, r3
 80011ca:	483e      	ldr	r0, [pc, #248]	; (80012c4 <MX_GPIO_Init+0x264>)
 80011cc:	f001 ffcc 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_LED_Pin MOT_BATT_L_Pin LV_BATT_L_Pin */
  GPIO_InitStruct.Pin = MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin;
 80011d0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80011d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d6:	2301      	movs	r3, #1
 80011d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	4619      	mov	r1, r3
 80011e8:	4835      	ldr	r0, [pc, #212]	; (80012c0 <MX_GPIO_Init+0x260>)
 80011ea:	f001 ffbd 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin ROTARY1_Pin ROTARY2_Pin ROTARY3_Pin
                           ROTARY4_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|ROTARY1_Pin|ROTARY2_Pin|ROTARY3_Pin
 80011ee:	f643 6301 	movw	r3, #15873	; 0x3e01
 80011f2:	61fb      	str	r3, [r7, #28]
                          |ROTARY4_Pin|BUTTON1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f4:	2300      	movs	r3, #0
 80011f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011fc:	f107 031c 	add.w	r3, r7, #28
 8001200:	4619      	mov	r1, r3
 8001202:	4835      	ldr	r0, [pc, #212]	; (80012d8 <MX_GPIO_Init+0x278>)
 8001204:	f001 ffb0 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8001208:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800120c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800120e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001212:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8001218:	f107 031c 	add.w	r3, r7, #28
 800121c:	4619      	mov	r1, r3
 800121e:	4829      	ldr	r0, [pc, #164]	; (80012c4 <MX_GPIO_Init+0x264>)
 8001220:	f001 ffa2 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCF1_CS_Pin ADCF2_CS_Pin ADCF3_CS_Pin ADCF4_CS_Pin
                           ADCR1_CS_Pin ADCR2_CS_Pin ADCR3_CS_Pin ADCR4_CS_Pin
                           LED_LE_F_Pin INFRA_LE_F_Pin LED_OE_F_Pin INFRA_OE_F_Pin */
  GPIO_InitStruct.Pin = ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 8001224:	f64f 7387 	movw	r3, #65415	; 0xff87
 8001228:	61fb      	str	r3, [r7, #28]
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |LED_LE_F_Pin|INFRA_LE_F_Pin|LED_OE_F_Pin|INFRA_OE_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122a:	2301      	movs	r3, #1
 800122c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	4619      	mov	r1, r3
 800123c:	4822      	ldr	r0, [pc, #136]	; (80012c8 <MX_GPIO_Init+0x268>)
 800123e:	f001 ff93 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_BUTTON_Pin SET_BUTTON_Pin LED2_Pin */
  GPIO_InitStruct.Pin = RESET_BUTTON_Pin|SET_BUTTON_Pin|LED2_Pin;
 8001242:	2370      	movs	r3, #112	; 0x70
 8001244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	4619      	mov	r1, r3
 8001254:	481f      	ldr	r0, [pc, #124]	; (80012d4 <MX_GPIO_Init+0x274>)
 8001256:	f001 ff87 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800125a:	2380      	movs	r3, #128	; 0x80
 800125c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125e:	2301      	movs	r3, #1
 8001260:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2300      	movs	r3, #0
 8001268:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800126a:	f107 031c 	add.w	r3, r7, #28
 800126e:	4619      	mov	r1, r3
 8001270:	4816      	ldr	r0, [pc, #88]	; (80012cc <MX_GPIO_Init+0x26c>)
 8001272:	f001 ff79 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001276:	f44f 7300 	mov.w	r3, #512	; 0x200
 800127a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127c:	2301      	movs	r3, #1
 800127e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	4619      	mov	r1, r3
 800128e:	4810      	ldr	r0, [pc, #64]	; (80012d0 <MX_GPIO_Init+0x270>)
 8001290:	f001 ff6a 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_LE_R_Pin INFRA_LE_R_Pin LED_OE_R_Pin INFRA_OE_R_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = LED_LE_R_Pin|INFRA_LE_R_Pin|LED_OE_R_Pin|INFRA_OE_R_Pin
 8001294:	f44f 43ec 	mov.w	r3, #30208	; 0x7600
 8001298:	61fb      	str	r3, [r7, #28]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129a:	2301      	movs	r3, #1
 800129c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4619      	mov	r1, r3
 80012ac:	4809      	ldr	r0, [pc, #36]	; (80012d4 <MX_GPIO_Init+0x274>)
 80012ae:	f001 ff5b 	bl	8003168 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012b2:	bf00      	nop
 80012b4:	3730      	adds	r7, #48	; 0x30
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40021000 	.word	0x40021000
 80012c0:	42021400 	.word	0x42021400
 80012c4:	42020400 	.word	0x42020400
 80012c8:	42020c00 	.word	0x42020c00
 80012cc:	42020800 	.word	0x42020800
 80012d0:	42020000 	.word	0x42020000
 80012d4:	42021800 	.word	0x42021800
 80012d8:	42021000 	.word	0x42021000

080012dc <TestTask>:

/* USER CODE BEGIN 4 */
void TestTask(void *argument)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80012e4:	2180      	movs	r1, #128	; 0x80
 80012e6:	4803      	ldr	r0, [pc, #12]	; (80012f4 <TestTask+0x18>)
 80012e8:	f002 f8d6 	bl	8003498 <HAL_GPIO_TogglePin>
	    osDelay(250);
 80012ec:	20fa      	movs	r0, #250	; 0xfa
 80012ee:	f007 fd97 	bl	8008e20 <osDelay>
		HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80012f2:	e7f7      	b.n	80012e4 <TestTask+0x8>
 80012f4:	42020400 	.word	0x42020400

080012f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001300:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001304:	4803      	ldr	r0, [pc, #12]	; (8001314 <StartDefaultTask+0x1c>)
 8001306:	f002 f8c7 	bl	8003498 <HAL_GPIO_TogglePin>
    osDelay(250);
 800130a:	20fa      	movs	r0, #250	; 0xfa
 800130c:	f007 fd88 	bl	8008e20 <osDelay>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001310:	e7f6      	b.n	8001300 <StartDefaultTask+0x8>
 8001312:	bf00      	nop
 8001314:	42020000 	.word	0x42020000

08001318 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001328:	d101      	bne.n	800132e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800132a:	f000 fdc1 	bl	8001eb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800133a:	b672      	cpsid	i
}
 800133c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800133e:	e7fe      	b.n	800133e <Error_Handler+0x8>

08001340 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <HAL_MspInit+0x4c>)
 8001348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800134a:	4a10      	ldr	r2, [pc, #64]	; (800138c <HAL_MspInit+0x4c>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6613      	str	r3, [r2, #96]	; 0x60
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <HAL_MspInit+0x4c>)
 8001354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_MspInit+0x4c>)
 8001360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001362:	4a0a      	ldr	r2, [pc, #40]	; (800138c <HAL_MspInit+0x4c>)
 8001364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001368:	6593      	str	r3, [r2, #88]	; 0x58
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <HAL_MspInit+0x4c>)
 800136c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2107      	movs	r1, #7
 800137a:	f06f 0001 	mvn.w	r0, #1
 800137e:	f001 fe0f 	bl	8002fa0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000

08001390 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b0b0      	sub	sp, #192	; 0xc0
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a8:	f107 0318 	add.w	r3, r7, #24
 80013ac:	2294      	movs	r2, #148	; 0x94
 80013ae:	2100      	movs	r1, #0
 80013b0:	4618      	mov	r0, r3
 80013b2:	f009 ff99 	bl	800b2e8 <memset>
  if(hadc->Instance==ADC1)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a3a      	ldr	r2, [pc, #232]	; (80014a4 <HAL_ADC_MspInit+0x114>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d16d      	bne.n	800149c <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80013c6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80013ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ce:	f107 0318 	add.w	r3, r7, #24
 80013d2:	4618      	mov	r0, r3
 80013d4:	f003 fa48 	bl	8004868 <HAL_RCCEx_PeriphCLKConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80013de:	f7ff ffaa 	bl	8001336 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80013e2:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <HAL_ADC_MspInit+0x118>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	4a30      	ldr	r2, [pc, #192]	; (80014a8 <HAL_ADC_MspInit+0x118>)
 80013e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ee:	4b2e      	ldr	r3, [pc, #184]	; (80014a8 <HAL_ADC_MspInit+0x118>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fa:	4b2b      	ldr	r3, [pc, #172]	; (80014a8 <HAL_ADC_MspInit+0x118>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fe:	4a2a      	ldr	r2, [pc, #168]	; (80014a8 <HAL_ADC_MspInit+0x118>)
 8001400:	f043 0304 	orr.w	r3, r3, #4
 8001404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001406:	4b28      	ldr	r3, [pc, #160]	; (80014a8 <HAL_ADC_MspInit+0x118>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <HAL_ADC_MspInit+0x118>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	4a24      	ldr	r2, [pc, #144]	; (80014a8 <HAL_ADC_MspInit+0x118>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141e:	4b22      	ldr	r3, [pc, #136]	; (80014a8 <HAL_ADC_MspInit+0x118>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142a:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <HAL_ADC_MspInit+0x118>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142e:	4a1e      	ldr	r2, [pc, #120]	; (80014a8 <HAL_ADC_MspInit+0x118>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001436:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <HAL_ADC_MspInit+0x118>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN9
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = BATT_VOLTAGE_Pin|MOT_CURR_Pin|VBUS_SENSE_Pin|ENC_CHA_Pin;
 8001442:	230f      	movs	r3, #15
 8001444:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001448:	2303      	movs	r3, #3
 800144a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001454:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001458:	4619      	mov	r1, r3
 800145a:	4814      	ldr	r0, [pc, #80]	; (80014ac <HAL_ADC_MspInit+0x11c>)
 800145c:	f001 fe84 	bl	8003168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISTANCE2_ADC_Pin|DISTANCE1_ADC_Pin|DISTANCE3_ADC_Pin|LV_BATT_Pin;
 8001460:	239c      	movs	r3, #156	; 0x9c
 8001462:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001466:	2303      	movs	r3, #3
 8001468:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001472:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001476:	4619      	mov	r1, r3
 8001478:	480d      	ldr	r0, [pc, #52]	; (80014b0 <HAL_ADC_MspInit+0x120>)
 800147a:	f001 fe75 	bl	8003168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_CHB_Pin|DISTANCE4_ADC_Pin;
 800147e:	2303      	movs	r3, #3
 8001480:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001484:	2303      	movs	r3, #3
 8001486:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001490:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001494:	4619      	mov	r1, r3
 8001496:	4807      	ldr	r0, [pc, #28]	; (80014b4 <HAL_ADC_MspInit+0x124>)
 8001498:	f001 fe66 	bl	8003168 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800149c:	bf00      	nop
 800149e:	37c0      	adds	r7, #192	; 0xc0
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	42028000 	.word	0x42028000
 80014a8:	40021000 	.word	0x40021000
 80014ac:	42020800 	.word	0x42020800
 80014b0:	42020000 	.word	0x42020000
 80014b4:	42020400 	.word	0x42020400

080014b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b0b2      	sub	sp, #200	; 0xc8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014d0:	f107 0320 	add.w	r3, r7, #32
 80014d4:	2294      	movs	r2, #148	; 0x94
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f009 ff05 	bl	800b2e8 <memset>
  if(huart->Instance==LPUART1)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a67      	ldr	r2, [pc, #412]	; (8001680 <HAL_UART_MspInit+0x1c8>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d13e      	bne.n	8001566 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80014e8:	2320      	movs	r3, #32
 80014ea:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80014ec:	2300      	movs	r3, #0
 80014ee:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f0:	f107 0320 	add.w	r3, r7, #32
 80014f4:	4618      	mov	r0, r3
 80014f6:	f003 f9b7 	bl	8004868 <HAL_RCCEx_PeriphCLKConfig>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001500:	f7ff ff19 	bl	8001336 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001504:	4b5f      	ldr	r3, [pc, #380]	; (8001684 <HAL_UART_MspInit+0x1cc>)
 8001506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001508:	4a5e      	ldr	r2, [pc, #376]	; (8001684 <HAL_UART_MspInit+0x1cc>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001510:	4b5c      	ldr	r3, [pc, #368]	; (8001684 <HAL_UART_MspInit+0x1cc>)
 8001512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	61fb      	str	r3, [r7, #28]
 800151a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800151c:	4b59      	ldr	r3, [pc, #356]	; (8001684 <HAL_UART_MspInit+0x1cc>)
 800151e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001520:	4a58      	ldr	r2, [pc, #352]	; (8001684 <HAL_UART_MspInit+0x1cc>)
 8001522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001526:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001528:	4b56      	ldr	r3, [pc, #344]	; (8001684 <HAL_UART_MspInit+0x1cc>)
 800152a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001530:	61bb      	str	r3, [r7, #24]
 8001532:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8001534:	f002 f978 	bl	8003828 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8001538:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800153c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001552:	2308      	movs	r3, #8
 8001554:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001558:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800155c:	4619      	mov	r1, r3
 800155e:	484a      	ldr	r0, [pc, #296]	; (8001688 <HAL_UART_MspInit+0x1d0>)
 8001560:	f001 fe02 	bl	8003168 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001564:	e088      	b.n	8001678 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==UART4)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a48      	ldr	r2, [pc, #288]	; (800168c <HAL_UART_MspInit+0x1d4>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d143      	bne.n	80015f8 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001570:	2308      	movs	r3, #8
 8001572:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001574:	2300      	movs	r3, #0
 8001576:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001578:	f107 0320 	add.w	r3, r7, #32
 800157c:	4618      	mov	r0, r3
 800157e:	f003 f973 	bl	8004868 <HAL_RCCEx_PeriphCLKConfig>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001588:	f7ff fed5 	bl	8001336 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 800158c:	4b3d      	ldr	r3, [pc, #244]	; (8001684 <HAL_UART_MspInit+0x1cc>)
 800158e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001590:	4a3c      	ldr	r2, [pc, #240]	; (8001684 <HAL_UART_MspInit+0x1cc>)
 8001592:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001596:	6593      	str	r3, [r2, #88]	; 0x58
 8001598:	4b3a      	ldr	r3, [pc, #232]	; (8001684 <HAL_UART_MspInit+0x1cc>)
 800159a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a4:	4b37      	ldr	r3, [pc, #220]	; (8001684 <HAL_UART_MspInit+0x1cc>)
 80015a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a8:	4a36      	ldr	r2, [pc, #216]	; (8001684 <HAL_UART_MspInit+0x1cc>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b0:	4b34      	ldr	r3, [pc, #208]	; (8001684 <HAL_UART_MspInit+0x1cc>)
 80015b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015bc:	2303      	movs	r3, #3
 80015be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015d4:	2308      	movs	r3, #8
 80015d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80015de:	4619      	mov	r1, r3
 80015e0:	482b      	ldr	r0, [pc, #172]	; (8001690 <HAL_UART_MspInit+0x1d8>)
 80015e2:	f001 fdc1 	bl	8003168 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2105      	movs	r1, #5
 80015ea:	2040      	movs	r0, #64	; 0x40
 80015ec:	f001 fcd8 	bl	8002fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80015f0:	2040      	movs	r0, #64	; 0x40
 80015f2:	f001 fcef 	bl	8002fd4 <HAL_NVIC_EnableIRQ>
}
 80015f6:	e03f      	b.n	8001678 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART2)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a25      	ldr	r2, [pc, #148]	; (8001694 <HAL_UART_MspInit+0x1dc>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d13a      	bne.n	8001678 <HAL_UART_MspInit+0x1c0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001602:	2302      	movs	r3, #2
 8001604:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001606:	2300      	movs	r3, #0
 8001608:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800160a:	f107 0320 	add.w	r3, r7, #32
 800160e:	4618      	mov	r0, r3
 8001610:	f003 f92a 	bl	8004868 <HAL_RCCEx_PeriphCLKConfig>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_UART_MspInit+0x166>
      Error_Handler();
 800161a:	f7ff fe8c 	bl	8001336 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800161e:	4b19      	ldr	r3, [pc, #100]	; (8001684 <HAL_UART_MspInit+0x1cc>)
 8001620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001622:	4a18      	ldr	r2, [pc, #96]	; (8001684 <HAL_UART_MspInit+0x1cc>)
 8001624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001628:	6593      	str	r3, [r2, #88]	; 0x58
 800162a:	4b16      	ldr	r3, [pc, #88]	; (8001684 <HAL_UART_MspInit+0x1cc>)
 800162c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001636:	4b13      	ldr	r3, [pc, #76]	; (8001684 <HAL_UART_MspInit+0x1cc>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163a:	4a12      	ldr	r2, [pc, #72]	; (8001684 <HAL_UART_MspInit+0x1cc>)
 800163c:	f043 0308 	orr.w	r3, r3, #8
 8001640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <HAL_UART_MspInit+0x1cc>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = XBEE_TX_Pin|XBEE_RX_Pin;
 800164e:	2360      	movs	r3, #96	; 0x60
 8001650:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001666:	2307      	movs	r3, #7
 8001668:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800166c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001670:	4619      	mov	r1, r3
 8001672:	4809      	ldr	r0, [pc, #36]	; (8001698 <HAL_UART_MspInit+0x1e0>)
 8001674:	f001 fd78 	bl	8003168 <HAL_GPIO_Init>
}
 8001678:	bf00      	nop
 800167a:	37c8      	adds	r7, #200	; 0xc8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40008000 	.word	0x40008000
 8001684:	40021000 	.word	0x40021000
 8001688:	42021800 	.word	0x42021800
 800168c:	40004c00 	.word	0x40004c00
 8001690:	42020000 	.word	0x42020000
 8001694:	40004400 	.word	0x40004400
 8001698:	42020c00 	.word	0x42020c00

0800169c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b0a8      	sub	sp, #160	; 0xa0
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a4:	f107 030c 	add.w	r3, r7, #12
 80016a8:	2294      	movs	r2, #148	; 0x94
 80016aa:	2100      	movs	r1, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f009 fe1b 	bl	800b2e8 <memset>
  if(hrtc->Instance==RTC)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a16      	ldr	r2, [pc, #88]	; (8001710 <HAL_RTC_MspInit+0x74>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d124      	bne.n	8001706 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016c0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80016c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	4618      	mov	r0, r3
 80016d0:	f003 f8ca 	bl	8004868 <HAL_RCCEx_PeriphCLKConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80016da:	f7ff fe2c 	bl	8001336 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <HAL_RTC_MspInit+0x78>)
 80016e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e4:	4a0b      	ldr	r2, [pc, #44]	; (8001714 <HAL_RTC_MspInit+0x78>)
 80016e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_RTC_MspInit+0x78>)
 80016f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f2:	4a08      	ldr	r2, [pc, #32]	; (8001714 <HAL_RTC_MspInit+0x78>)
 80016f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016f8:	6593      	str	r3, [r2, #88]	; 0x58
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_RTC_MspInit+0x78>)
 80016fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001706:	bf00      	nop
 8001708:	37a0      	adds	r7, #160	; 0xa0
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40002800 	.word	0x40002800
 8001714:	40021000 	.word	0x40021000

08001718 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b090      	sub	sp, #64	; 0x40
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a62      	ldr	r2, [pc, #392]	; (80018c0 <HAL_SPI_MspInit+0x1a8>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d145      	bne.n	80017c6 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800173a:	4b62      	ldr	r3, [pc, #392]	; (80018c4 <HAL_SPI_MspInit+0x1ac>)
 800173c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800173e:	4a61      	ldr	r2, [pc, #388]	; (80018c4 <HAL_SPI_MspInit+0x1ac>)
 8001740:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001744:	6613      	str	r3, [r2, #96]	; 0x60
 8001746:	4b5f      	ldr	r3, [pc, #380]	; (80018c4 <HAL_SPI_MspInit+0x1ac>)
 8001748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800174a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001750:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	4b5c      	ldr	r3, [pc, #368]	; (80018c4 <HAL_SPI_MspInit+0x1ac>)
 8001754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001756:	4a5b      	ldr	r2, [pc, #364]	; (80018c4 <HAL_SPI_MspInit+0x1ac>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800175e:	4b59      	ldr	r3, [pc, #356]	; (80018c4 <HAL_SPI_MspInit+0x1ac>)
 8001760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800176a:	4b56      	ldr	r3, [pc, #344]	; (80018c4 <HAL_SPI_MspInit+0x1ac>)
 800176c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176e:	4a55      	ldr	r2, [pc, #340]	; (80018c4 <HAL_SPI_MspInit+0x1ac>)
 8001770:	f043 0310 	orr.w	r3, r3, #16
 8001774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001776:	4b53      	ldr	r3, [pc, #332]	; (80018c4 <HAL_SPI_MspInit+0x1ac>)
 8001778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	623b      	str	r3, [r7, #32]
 8001780:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_ADC_CLK_Pin|SPI_ADC_MISO_Pin;
 8001782:	2360      	movs	r3, #96	; 0x60
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2300      	movs	r3, #0
 8001790:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001792:	2305      	movs	r3, #5
 8001794:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001796:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800179a:	4619      	mov	r1, r3
 800179c:	484a      	ldr	r0, [pc, #296]	; (80018c8 <HAL_SPI_MspInit+0x1b0>)
 800179e:	f001 fce3 	bl	8003168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_ADC_MOSI_Pin;
 80017a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017b4:	2305      	movs	r3, #5
 80017b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SPI_ADC_MOSI_GPIO_Port, &GPIO_InitStruct);
 80017b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017bc:	4619      	mov	r1, r3
 80017be:	4843      	ldr	r0, [pc, #268]	; (80018cc <HAL_SPI_MspInit+0x1b4>)
 80017c0:	f001 fcd2 	bl	8003168 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80017c4:	e078      	b.n	80018b8 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI2)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a41      	ldr	r2, [pc, #260]	; (80018d0 <HAL_SPI_MspInit+0x1b8>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d145      	bne.n	800185c <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017d0:	4b3c      	ldr	r3, [pc, #240]	; (80018c4 <HAL_SPI_MspInit+0x1ac>)
 80017d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d4:	4a3b      	ldr	r2, [pc, #236]	; (80018c4 <HAL_SPI_MspInit+0x1ac>)
 80017d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017da:	6593      	str	r3, [r2, #88]	; 0x58
 80017dc:	4b39      	ldr	r3, [pc, #228]	; (80018c4 <HAL_SPI_MspInit+0x1ac>)
 80017de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e4:	61fb      	str	r3, [r7, #28]
 80017e6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e8:	4b36      	ldr	r3, [pc, #216]	; (80018c4 <HAL_SPI_MspInit+0x1ac>)
 80017ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ec:	4a35      	ldr	r2, [pc, #212]	; (80018c4 <HAL_SPI_MspInit+0x1ac>)
 80017ee:	f043 0302 	orr.w	r3, r3, #2
 80017f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f4:	4b33      	ldr	r3, [pc, #204]	; (80018c4 <HAL_SPI_MspInit+0x1ac>)
 80017f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	61bb      	str	r3, [r7, #24]
 80017fe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001800:	4b30      	ldr	r3, [pc, #192]	; (80018c4 <HAL_SPI_MspInit+0x1ac>)
 8001802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001804:	4a2f      	ldr	r2, [pc, #188]	; (80018c4 <HAL_SPI_MspInit+0x1ac>)
 8001806:	f043 0308 	orr.w	r3, r3, #8
 800180a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180c:	4b2d      	ldr	r3, [pc, #180]	; (80018c4 <HAL_SPI_MspInit+0x1ac>)
 800180e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800182a:	2305      	movs	r3, #5
 800182c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001832:	4619      	mov	r1, r3
 8001834:	4827      	ldr	r0, [pc, #156]	; (80018d4 <HAL_SPI_MspInit+0x1bc>)
 8001836:	f001 fc97 	bl	8003168 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800183a:	2318      	movs	r3, #24
 800183c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800184a:	2305      	movs	r3, #5
 800184c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800184e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001852:	4619      	mov	r1, r3
 8001854:	4820      	ldr	r0, [pc, #128]	; (80018d8 <HAL_SPI_MspInit+0x1c0>)
 8001856:	f001 fc87 	bl	8003168 <HAL_GPIO_Init>
}
 800185a:	e02d      	b.n	80018b8 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI3)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a1e      	ldr	r2, [pc, #120]	; (80018dc <HAL_SPI_MspInit+0x1c4>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d128      	bne.n	80018b8 <HAL_SPI_MspInit+0x1a0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001866:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <HAL_SPI_MspInit+0x1ac>)
 8001868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186a:	4a16      	ldr	r2, [pc, #88]	; (80018c4 <HAL_SPI_MspInit+0x1ac>)
 800186c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001870:	6593      	str	r3, [r2, #88]	; 0x58
 8001872:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <HAL_SPI_MspInit+0x1ac>)
 8001874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001876:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <HAL_SPI_MspInit+0x1ac>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001882:	4a10      	ldr	r2, [pc, #64]	; (80018c4 <HAL_SPI_MspInit+0x1ac>)
 8001884:	f043 0304 	orr.w	r3, r3, #4
 8001888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <HAL_SPI_MspInit+0x1ac>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001896:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800189a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2300      	movs	r3, #0
 80018a6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018a8:	2306      	movs	r3, #6
 80018aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018b0:	4619      	mov	r1, r3
 80018b2:	480b      	ldr	r0, [pc, #44]	; (80018e0 <HAL_SPI_MspInit+0x1c8>)
 80018b4:	f001 fc58 	bl	8003168 <HAL_GPIO_Init>
}
 80018b8:	bf00      	nop
 80018ba:	3740      	adds	r7, #64	; 0x40
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40013000 	.word	0x40013000
 80018c4:	40021000 	.word	0x40021000
 80018c8:	42020000 	.word	0x42020000
 80018cc:	42021000 	.word	0x42021000
 80018d0:	40003800 	.word	0x40003800
 80018d4:	42020400 	.word	0x42020400
 80018d8:	42020c00 	.word	0x42020c00
 80018dc:	40003c00 	.word	0x40003c00
 80018e0:	42020800 	.word	0x42020800

080018e4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b087      	sub	sp, #28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a1c      	ldr	r2, [pc, #112]	; (8001964 <HAL_TIM_PWM_MspInit+0x80>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d10c      	bne.n	8001910 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018f6:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <HAL_TIM_PWM_MspInit+0x84>)
 80018f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fa:	4a1b      	ldr	r2, [pc, #108]	; (8001968 <HAL_TIM_PWM_MspInit+0x84>)
 80018fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001900:	6613      	str	r3, [r2, #96]	; 0x60
 8001902:	4b19      	ldr	r3, [pc, #100]	; (8001968 <HAL_TIM_PWM_MspInit+0x84>)
 8001904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001906:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800190e:	e022      	b.n	8001956 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a15      	ldr	r2, [pc, #84]	; (800196c <HAL_TIM_PWM_MspInit+0x88>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d10c      	bne.n	8001934 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800191a:	4b13      	ldr	r3, [pc, #76]	; (8001968 <HAL_TIM_PWM_MspInit+0x84>)
 800191c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191e:	4a12      	ldr	r2, [pc, #72]	; (8001968 <HAL_TIM_PWM_MspInit+0x84>)
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	6593      	str	r3, [r2, #88]	; 0x58
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <HAL_TIM_PWM_MspInit+0x84>)
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]
}
 8001932:	e010      	b.n	8001956 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM5)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0d      	ldr	r2, [pc, #52]	; (8001970 <HAL_TIM_PWM_MspInit+0x8c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d10b      	bne.n	8001956 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <HAL_TIM_PWM_MspInit+0x84>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	4a09      	ldr	r2, [pc, #36]	; (8001968 <HAL_TIM_PWM_MspInit+0x84>)
 8001944:	f043 0308 	orr.w	r3, r3, #8
 8001948:	6593      	str	r3, [r2, #88]	; 0x58
 800194a:	4b07      	ldr	r3, [pc, #28]	; (8001968 <HAL_TIM_PWM_MspInit+0x84>)
 800194c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
}
 8001956:	bf00      	nop
 8001958:	371c      	adds	r7, #28
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40012c00 	.word	0x40012c00
 8001968:	40021000 	.word	0x40021000
 800196c:	40000400 	.word	0x40000400
 8001970:	40000c00 	.word	0x40000c00

08001974 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	; 0x28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a33      	ldr	r2, [pc, #204]	; (8001a60 <HAL_TIM_MspPostInit+0xec>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d11d      	bne.n	80019d2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	4b33      	ldr	r3, [pc, #204]	; (8001a64 <HAL_TIM_MspPostInit+0xf0>)
 8001998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199a:	4a32      	ldr	r2, [pc, #200]	; (8001a64 <HAL_TIM_MspPostInit+0xf0>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019a2:	4b30      	ldr	r3, [pc, #192]	; (8001a64 <HAL_TIM_MspPostInit+0xf0>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019bc:	2300      	movs	r3, #0
 80019be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019c0:	2301      	movs	r3, #1
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	4619      	mov	r1, r3
 80019ca:	4827      	ldr	r0, [pc, #156]	; (8001a68 <HAL_TIM_MspPostInit+0xf4>)
 80019cc:	f001 fbcc 	bl	8003168 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80019d0:	e042      	b.n	8001a58 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a25      	ldr	r2, [pc, #148]	; (8001a6c <HAL_TIM_MspPostInit+0xf8>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d11c      	bne.n	8001a16 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019dc:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <HAL_TIM_MspPostInit+0xf0>)
 80019de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e0:	4a20      	ldr	r2, [pc, #128]	; (8001a64 <HAL_TIM_MspPostInit+0xf0>)
 80019e2:	f043 0310 	orr.w	r3, r3, #16
 80019e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019e8:	4b1e      	ldr	r3, [pc, #120]	; (8001a64 <HAL_TIM_MspPostInit+0xf0>)
 80019ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ec:	f003 0310 	and.w	r3, r3, #16
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80019f4:	2318      	movs	r3, #24
 80019f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f8:	2302      	movs	r3, #2
 80019fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a00:	2300      	movs	r3, #0
 8001a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a04:	2302      	movs	r3, #2
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4818      	ldr	r0, [pc, #96]	; (8001a70 <HAL_TIM_MspPostInit+0xfc>)
 8001a10:	f001 fbaa 	bl	8003168 <HAL_GPIO_Init>
}
 8001a14:	e020      	b.n	8001a58 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM5)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a16      	ldr	r2, [pc, #88]	; (8001a74 <HAL_TIM_MspPostInit+0x100>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d11b      	bne.n	8001a58 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a20:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <HAL_TIM_MspPostInit+0xf0>)
 8001a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a24:	4a0f      	ldr	r2, [pc, #60]	; (8001a64 <HAL_TIM_MspPostInit+0xf0>)
 8001a26:	f043 0320 	orr.w	r3, r3, #32
 8001a2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a2c:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <HAL_TIM_MspPostInit+0xf0>)
 8001a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a30:	f003 0320 	and.w	r3, r3, #32
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = REAR_WHEEL_RCPWM_Pin;
 8001a38:	2340      	movs	r3, #64	; 0x40
 8001a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a44:	2300      	movs	r3, #0
 8001a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(REAR_WHEEL_RCPWM_GPIO_Port, &GPIO_InitStruct);
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	4619      	mov	r1, r3
 8001a52:	4809      	ldr	r0, [pc, #36]	; (8001a78 <HAL_TIM_MspPostInit+0x104>)
 8001a54:	f001 fb88 	bl	8003168 <HAL_GPIO_Init>
}
 8001a58:	bf00      	nop
 8001a5a:	3728      	adds	r7, #40	; 0x28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40012c00 	.word	0x40012c00
 8001a64:	40021000 	.word	0x40021000
 8001a68:	42020000 	.word	0x42020000
 8001a6c:	40000400 	.word	0x40000400
 8001a70:	42021000 	.word	0x42021000
 8001a74:	40000c00 	.word	0x40000c00
 8001a78:	42021400 	.word	0x42021400

08001a7c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b0ae      	sub	sp, #184	; 0xb8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a94:	f107 0310 	add.w	r3, r7, #16
 8001a98:	2294      	movs	r2, #148	; 0x94
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f009 fc23 	bl	800b2e8 <memset>
  if(hpcd->Instance==USB)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a22      	ldr	r2, [pc, #136]	; (8001b30 <HAL_PCD_MspInit+0xb4>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d13d      	bne.n	8001b28 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001aac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ab0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ab8:	f107 0310 	add.w	r3, r7, #16
 8001abc:	4618      	mov	r0, r3
 8001abe:	f002 fed3 	bl	8004868 <HAL_RCCEx_PeriphCLKConfig>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001ac8:	f7ff fc35 	bl	8001336 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001acc:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <HAL_PCD_MspInit+0xb8>)
 8001ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad0:	4a18      	ldr	r2, [pc, #96]	; (8001b34 <HAL_PCD_MspInit+0xb8>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad8:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <HAL_PCD_MspInit+0xb8>)
 8001ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ae4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ae8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	2302      	movs	r3, #2
 8001aee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af8:	2300      	movs	r3, #0
 8001afa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001afe:	230a      	movs	r3, #10
 8001b00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b08:	4619      	mov	r1, r3
 8001b0a:	480b      	ldr	r0, [pc, #44]	; (8001b38 <HAL_PCD_MspInit+0xbc>)
 8001b0c:	f001 fb2c 	bl	8003168 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001b10:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <HAL_PCD_MspInit+0xb8>)
 8001b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b14:	4a07      	ldr	r2, [pc, #28]	; (8001b34 <HAL_PCD_MspInit+0xb8>)
 8001b16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b1a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <HAL_PCD_MspInit+0xb8>)
 8001b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001b28:	bf00      	nop
 8001b2a:	37b8      	adds	r7, #184	; 0xb8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	4000d400 	.word	0x4000d400
 8001b34:	40021000 	.word	0x40021000
 8001b38:	42020000 	.word	0x42020000

08001b3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08c      	sub	sp, #48	; 0x30
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	202d      	movs	r0, #45	; 0x2d
 8001b52:	f001 fa25 	bl	8002fa0 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b56:	202d      	movs	r0, #45	; 0x2d
 8001b58:	f001 fa3c 	bl	8002fd4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001b5c:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <HAL_InitTick+0xa0>)
 8001b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b60:	4a1e      	ldr	r2, [pc, #120]	; (8001bdc <HAL_InitTick+0xa0>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	6593      	str	r3, [r2, #88]	; 0x58
 8001b68:	4b1c      	ldr	r3, [pc, #112]	; (8001bdc <HAL_InitTick+0xa0>)
 8001b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b74:	f107 0210 	add.w	r2, r7, #16
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	4611      	mov	r1, r2
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f002 fd6e 	bl	8004660 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b84:	f002 fd44 	bl	8004610 <HAL_RCC_GetPCLK1Freq>
 8001b88:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b8c:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <HAL_InitTick+0xa4>)
 8001b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b92:	0c9b      	lsrs	r3, r3, #18
 8001b94:	3b01      	subs	r3, #1
 8001b96:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001b98:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <HAL_InitTick+0xa8>)
 8001b9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b9e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001ba0:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <HAL_InitTick+0xa8>)
 8001ba2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ba6:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001ba8:	4a0e      	ldr	r2, [pc, #56]	; (8001be4 <HAL_InitTick+0xa8>)
 8001baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bac:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001bae:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <HAL_InitTick+0xa8>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <HAL_InitTick+0xa8>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001bba:	480a      	ldr	r0, [pc, #40]	; (8001be4 <HAL_InitTick+0xa8>)
 8001bbc:	f003 fd47 	bl	800564e <HAL_TIM_Base_Init>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d104      	bne.n	8001bd0 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001bc6:	4807      	ldr	r0, [pc, #28]	; (8001be4 <HAL_InitTick+0xa8>)
 8001bc8:	f003 fda2 	bl	8005710 <HAL_TIM_Base_Start_IT>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	e000      	b.n	8001bd2 <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3730      	adds	r7, #48	; 0x30
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	431bde83 	.word	0x431bde83
 8001be4:	200007f0 	.word	0x200007f0

08001be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bec:	e7fe      	b.n	8001bec <NMI_Handler+0x4>

08001bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf2:	e7fe      	b.n	8001bf2 <HardFault_Handler+0x4>

08001bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <MemManage_Handler+0x4>

08001bfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfe:	e7fe      	b.n	8001bfe <BusFault_Handler+0x4>

08001c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <UsageFault_Handler+0x4>

08001c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <TIM2_IRQHandler+0x10>)
 8001c1a:	f003 fe40 	bl	800589e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	200007f0 	.word	0x200007f0

08001c28 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 29.
  */
void UART4_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <UART4_IRQHandler+0x10>)
 8001c2e:	f004 fde3 	bl	80067f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000194 	.word	0x20000194

08001c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c44:	4a14      	ldr	r2, [pc, #80]	; (8001c98 <_sbrk+0x5c>)
 8001c46:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <_sbrk+0x60>)
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <_sbrk+0x64>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d102      	bne.n	8001c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <_sbrk+0x64>)
 8001c5a:	4a12      	ldr	r2, [pc, #72]	; (8001ca4 <_sbrk+0x68>)
 8001c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <_sbrk+0x64>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d207      	bcs.n	8001c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c6c:	f009 fb44 	bl	800b2f8 <__errno>
 8001c70:	4603      	mov	r3, r0
 8001c72:	220c      	movs	r2, #12
 8001c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c76:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7a:	e009      	b.n	8001c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <_sbrk+0x64>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c82:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <_sbrk+0x64>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	4a05      	ldr	r2, [pc, #20]	; (8001ca0 <_sbrk+0x64>)
 8001c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20030000 	.word	0x20030000
 8001c9c:	00000400 	.word	0x00000400
 8001ca0:	2000083c 	.word	0x2000083c
 8001ca4:	200036d8 	.word	0x200036d8

08001ca8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <SystemInit+0x20>)
 8001cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb2:	4a05      	ldr	r2, [pc, #20]	; (8001cc8 <SystemInit+0x20>)
 8001cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b087      	sub	sp, #28
 8001cd0:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001cd2:	4b4f      	ldr	r3, [pc, #316]	; (8001e10 <SystemCoreClockUpdate+0x144>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d107      	bne.n	8001cee <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001cde:	4b4c      	ldr	r3, [pc, #304]	; (8001e10 <SystemCoreClockUpdate+0x144>)
 8001ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	e005      	b.n	8001cfa <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001cee:	4b48      	ldr	r3, [pc, #288]	; (8001e10 <SystemCoreClockUpdate+0x144>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	091b      	lsrs	r3, r3, #4
 8001cf4:	f003 030f 	and.w	r3, r3, #15
 8001cf8:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001cfa:	4a46      	ldr	r2, [pc, #280]	; (8001e14 <SystemCoreClockUpdate+0x148>)
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d02:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d04:	4b42      	ldr	r3, [pc, #264]	; (8001e10 <SystemCoreClockUpdate+0x144>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 030c 	and.w	r3, r3, #12
 8001d0c:	2b0c      	cmp	r3, #12
 8001d0e:	d866      	bhi.n	8001dde <SystemCoreClockUpdate+0x112>
 8001d10:	a201      	add	r2, pc, #4	; (adr r2, 8001d18 <SystemCoreClockUpdate+0x4c>)
 8001d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d16:	bf00      	nop
 8001d18:	08001d4d 	.word	0x08001d4d
 8001d1c:	08001ddf 	.word	0x08001ddf
 8001d20:	08001ddf 	.word	0x08001ddf
 8001d24:	08001ddf 	.word	0x08001ddf
 8001d28:	08001d55 	.word	0x08001d55
 8001d2c:	08001ddf 	.word	0x08001ddf
 8001d30:	08001ddf 	.word	0x08001ddf
 8001d34:	08001ddf 	.word	0x08001ddf
 8001d38:	08001d5d 	.word	0x08001d5d
 8001d3c:	08001ddf 	.word	0x08001ddf
 8001d40:	08001ddf 	.word	0x08001ddf
 8001d44:	08001ddf 	.word	0x08001ddf
 8001d48:	08001d65 	.word	0x08001d65
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001d4c:	4a32      	ldr	r2, [pc, #200]	; (8001e18 <SystemCoreClockUpdate+0x14c>)
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	6013      	str	r3, [r2, #0]
      break;
 8001d52:	e048      	b.n	8001de6 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001d54:	4b30      	ldr	r3, [pc, #192]	; (8001e18 <SystemCoreClockUpdate+0x14c>)
 8001d56:	4a31      	ldr	r2, [pc, #196]	; (8001e1c <SystemCoreClockUpdate+0x150>)
 8001d58:	601a      	str	r2, [r3, #0]
      break;
 8001d5a:	e044      	b.n	8001de6 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001d5c:	4b2e      	ldr	r3, [pc, #184]	; (8001e18 <SystemCoreClockUpdate+0x14c>)
 8001d5e:	4a30      	ldr	r2, [pc, #192]	; (8001e20 <SystemCoreClockUpdate+0x154>)
 8001d60:	601a      	str	r2, [r3, #0]
      break;
 8001d62:	e040      	b.n	8001de6 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001d64:	4b2a      	ldr	r3, [pc, #168]	; (8001e10 <SystemCoreClockUpdate+0x144>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001d6e:	4b28      	ldr	r3, [pc, #160]	; (8001e10 <SystemCoreClockUpdate+0x144>)
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	091b      	lsrs	r3, r3, #4
 8001d74:	f003 030f 	and.w	r3, r3, #15
 8001d78:	3301      	adds	r3, #1
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d003      	beq.n	8001d8a <SystemCoreClockUpdate+0xbe>
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2b03      	cmp	r3, #3
 8001d86:	d006      	beq.n	8001d96 <SystemCoreClockUpdate+0xca>
 8001d88:	e00b      	b.n	8001da2 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001d8a:	4a24      	ldr	r2, [pc, #144]	; (8001e1c <SystemCoreClockUpdate+0x150>)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d92:	613b      	str	r3, [r7, #16]
          break;
 8001d94:	e00b      	b.n	8001dae <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001d96:	4a22      	ldr	r2, [pc, #136]	; (8001e20 <SystemCoreClockUpdate+0x154>)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9e:	613b      	str	r3, [r7, #16]
          break;
 8001da0:	e005      	b.n	8001dae <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001daa:	613b      	str	r3, [r7, #16]
          break;
 8001dac:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001dae:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <SystemCoreClockUpdate+0x144>)
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	0a1b      	lsrs	r3, r3, #8
 8001db4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	fb02 f303 	mul.w	r3, r2, r3
 8001dbe:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001dc0:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <SystemCoreClockUpdate+0x144>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	0e5b      	lsrs	r3, r3, #25
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	3301      	adds	r3, #1
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd8:	4a0f      	ldr	r2, [pc, #60]	; (8001e18 <SystemCoreClockUpdate+0x14c>)
 8001dda:	6013      	str	r3, [r2, #0]
      break;
 8001ddc:	e003      	b.n	8001de6 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001dde:	4a0e      	ldr	r2, [pc, #56]	; (8001e18 <SystemCoreClockUpdate+0x14c>)
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	6013      	str	r3, [r2, #0]
      break;
 8001de4:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001de6:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <SystemCoreClockUpdate+0x144>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	091b      	lsrs	r3, r3, #4
 8001dec:	f003 030f 	and.w	r3, r3, #15
 8001df0:	4a0c      	ldr	r2, [pc, #48]	; (8001e24 <SystemCoreClockUpdate+0x158>)
 8001df2:	5cd3      	ldrb	r3, [r2, r3]
 8001df4:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <SystemCoreClockUpdate+0x14c>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001e00:	4a05      	ldr	r2, [pc, #20]	; (8001e18 <SystemCoreClockUpdate+0x14c>)
 8001e02:	6013      	str	r3, [r2, #0]
}
 8001e04:	bf00      	nop
 8001e06:	371c      	adds	r7, #28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	40021000 	.word	0x40021000
 8001e14:	0800bfdc 	.word	0x0800bfdc
 8001e18:	20000004 	.word	0x20000004
 8001e1c:	00f42400 	.word	0x00f42400
 8001e20:	007a1200 	.word	0x007a1200
 8001e24:	0800bfc4 	.word	0x0800bfc4

08001e28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001e28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e2c:	f7ff ff3c 	bl	8001ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001e30:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001e32:	e003      	b.n	8001e3c <LoopCopyDataInit>

08001e34 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001e36:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001e38:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001e3a:	3104      	adds	r1, #4

08001e3c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001e3c:	480a      	ldr	r0, [pc, #40]	; (8001e68 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001e3e:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001e40:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001e42:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001e44:	d3f6      	bcc.n	8001e34 <CopyDataInit>
	ldr	r2, =_sbss
 8001e46:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001e48:	e002      	b.n	8001e50 <LoopFillZerobss>

08001e4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001e4a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001e4c:	f842 3b04 	str.w	r3, [r2], #4

08001e50 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <LoopForever+0x16>)
	cmp	r2, r3
 8001e52:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001e54:	d3f9      	bcc.n	8001e4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e56:	f009 fa55 	bl	800b304 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e5a:	f7fe fc31 	bl	80006c0 <main>

08001e5e <LoopForever>:

LoopForever:
    b LoopForever
 8001e5e:	e7fe      	b.n	8001e5e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001e60:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001e64:	0800c174 	.word	0x0800c174
	ldr	r0, =_sdata
 8001e68:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e6c:	20000064 	.word	0x20000064
	ldr	r2, =_sbss
 8001e70:	20000064 	.word	0x20000064
	ldr	r3, = _ebss
 8001e74:	200036d4 	.word	0x200036d4

08001e78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e78:	e7fe      	b.n	8001e78 <ADC1_2_IRQHandler>

08001e7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001e84:	2004      	movs	r0, #4
 8001e86:	f001 f880 	bl	8002f8a <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001e8a:	f7ff ff1f 	bl	8001ccc <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e8e:	2007      	movs	r0, #7
 8001e90:	f7ff fe54 	bl	8001b3c <HAL_InitTick>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d002      	beq.n	8001ea0 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	71fb      	strb	r3, [r7, #7]
 8001e9e:	e001      	b.n	8001ea4 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ea0:	f7ff fa4e 	bl	8001340 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_IncTick+0x20>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_IncTick+0x24>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	4a04      	ldr	r2, [pc, #16]	; (8001ed4 <HAL_IncTick+0x24>)
 8001ec2:	6013      	str	r3, [r2, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	2000000c 	.word	0x2000000c
 8001ed4:	20000840 	.word	0x20000840

08001ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return uwTick;
 8001edc:	4b03      	ldr	r3, [pc, #12]	; (8001eec <HAL_GetTick+0x14>)
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	20000840 	.word	0x20000840

08001ef0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	609a      	str	r2, [r3, #8]
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
 8001f64:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	3360      	adds	r3, #96	; 0x60
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <LL_ADC_SetOffset+0x44>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	4313      	orrs	r3, r2
 8001f88:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f90:	bf00      	nop
 8001f92:	371c      	adds	r7, #28
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	03fff000 	.word	0x03fff000

08001fa0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3360      	adds	r3, #96	; 0x60
 8001fae:	461a      	mov	r2, r3
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b087      	sub	sp, #28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	3360      	adds	r3, #96	; 0x60
 8001fdc:	461a      	mov	r2, r3
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ff6:	bf00      	nop
 8001ff8:	371c      	adds	r7, #28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	615a      	str	r2, [r3, #20]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002028:	b480      	push	{r7}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	3330      	adds	r3, #48	; 0x30
 8002038:	461a      	mov	r2, r3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	0a1b      	lsrs	r3, r3, #8
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	f003 030c 	and.w	r3, r3, #12
 8002044:	4413      	add	r3, r2
 8002046:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	f003 031f 	and.w	r3, r3, #31
 8002052:	211f      	movs	r1, #31
 8002054:	fa01 f303 	lsl.w	r3, r1, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	401a      	ands	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	0e9b      	lsrs	r3, r3, #26
 8002060:	f003 011f 	and.w	r1, r3, #31
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	f003 031f 	and.w	r3, r3, #31
 800206a:	fa01 f303 	lsl.w	r3, r1, r3
 800206e:	431a      	orrs	r2, r3
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002074:	bf00      	nop
 8002076:	371c      	adds	r7, #28
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002080:	b480      	push	{r7}
 8002082:	b087      	sub	sp, #28
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	3314      	adds	r3, #20
 8002090:	461a      	mov	r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	0e5b      	lsrs	r3, r3, #25
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	4413      	add	r3, r2
 800209e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	0d1b      	lsrs	r3, r3, #20
 80020a8:	f003 031f 	and.w	r3, r3, #31
 80020ac:	2107      	movs	r1, #7
 80020ae:	fa01 f303 	lsl.w	r3, r1, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	401a      	ands	r2, r3
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	0d1b      	lsrs	r3, r3, #20
 80020ba:	f003 031f 	and.w	r3, r3, #31
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	fa01 f303 	lsl.w	r3, r1, r3
 80020c4:	431a      	orrs	r2, r3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80020ca:	bf00      	nop
 80020cc:	371c      	adds	r7, #28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f0:	43db      	mvns	r3, r3
 80020f2:	401a      	ands	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f003 0318 	and.w	r3, r3, #24
 80020fa:	4908      	ldr	r1, [pc, #32]	; (800211c <LL_ADC_SetChannelSingleDiff+0x44>)
 80020fc:	40d9      	lsrs	r1, r3
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	400b      	ands	r3, r1
 8002102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002106:	431a      	orrs	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800210e:	bf00      	nop
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	0007ffff 	.word	0x0007ffff

08002120 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002130:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6093      	str	r3, [r2, #8]
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002158:	d101      	bne.n	800215e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800217c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002180:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021a8:	d101      	bne.n	80021ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <LL_ADC_IsEnabled+0x18>
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <LL_ADC_IsEnabled+0x1a>
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d101      	bne.n	80021fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b08      	cmp	r3, #8
 800221a:	d101      	bne.n	8002220 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800221c:	2301      	movs	r3, #1
 800221e:	e000      	b.n	8002222 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002230:	b590      	push	{r4, r7, lr}
 8002232:	b089      	sub	sp, #36	; 0x24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002238:	2300      	movs	r3, #0
 800223a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800223c:	2300      	movs	r3, #0
 800223e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e12e      	b.n	80024a8 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002254:	2b00      	cmp	r3, #0
 8002256:	d109      	bne.n	800226c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff f899 	bl	8001390 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff67 	bl	8002144 <LL_ADC_IsDeepPowerDownEnabled>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d004      	beq.n	8002286 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff ff4d 	bl	8002120 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff ff82 	bl	8002194 <LL_ADC_IsInternalRegulatorEnabled>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d115      	bne.n	80022c2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff ff66 	bl	800216c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022a0:	4b83      	ldr	r3, [pc, #524]	; (80024b0 <HAL_ADC_Init+0x280>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	099b      	lsrs	r3, r3, #6
 80022a6:	4a83      	ldr	r2, [pc, #524]	; (80024b4 <HAL_ADC_Init+0x284>)
 80022a8:	fba2 2303 	umull	r2, r3, r2, r3
 80022ac:	099b      	lsrs	r3, r3, #6
 80022ae:	3301      	adds	r3, #1
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022b4:	e002      	b.n	80022bc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	3b01      	subs	r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f9      	bne.n	80022b6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff ff64 	bl	8002194 <LL_ADC_IsInternalRegulatorEnabled>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10d      	bne.n	80022ee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d6:	f043 0210 	orr.w	r2, r3, #16
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e2:	f043 0201 	orr.w	r2, r3, #1
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff ff75 	bl	80021e2 <LL_ADC_REG_IsConversionOngoing>
 80022f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fe:	f003 0310 	and.w	r3, r3, #16
 8002302:	2b00      	cmp	r3, #0
 8002304:	f040 80c7 	bne.w	8002496 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2b00      	cmp	r3, #0
 800230c:	f040 80c3 	bne.w	8002496 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002314:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002318:	f043 0202 	orr.w	r2, r3, #2
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff49 	bl	80021bc <LL_ADC_IsEnabled>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d110      	bne.n	8002352 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002330:	4861      	ldr	r0, [pc, #388]	; (80024b8 <HAL_ADC_Init+0x288>)
 8002332:	f7ff ff43 	bl	80021bc <LL_ADC_IsEnabled>
 8002336:	4604      	mov	r4, r0
 8002338:	4860      	ldr	r0, [pc, #384]	; (80024bc <HAL_ADC_Init+0x28c>)
 800233a:	f7ff ff3f 	bl	80021bc <LL_ADC_IsEnabled>
 800233e:	4603      	mov	r3, r0
 8002340:	4323      	orrs	r3, r4
 8002342:	2b00      	cmp	r3, #0
 8002344:	d105      	bne.n	8002352 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	4619      	mov	r1, r3
 800234c:	485c      	ldr	r0, [pc, #368]	; (80024c0 <HAL_ADC_Init+0x290>)
 800234e:	f7ff fdcf 	bl	8001ef0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	7e5b      	ldrb	r3, [r3, #25]
 8002356:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800235c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002362:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002368:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002370:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 3020 	ldrb.w	r3, [r3, #32]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d106      	bne.n	800238e <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	3b01      	subs	r3, #1
 8002386:	045b      	lsls	r3, r3, #17
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002392:	2b00      	cmp	r3, #0
 8002394:	d009      	beq.n	80023aa <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a2:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68da      	ldr	r2, [r3, #12]
 80023b0:	4b44      	ldr	r3, [pc, #272]	; (80024c4 <HAL_ADC_Init+0x294>)
 80023b2:	4013      	ands	r3, r2
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	69b9      	ldr	r1, [r7, #24]
 80023ba:	430b      	orrs	r3, r1
 80023bc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff ff20 	bl	8002208 <LL_ADC_INJ_IsConversionOngoing>
 80023c8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d140      	bne.n	8002452 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d13d      	bne.n	8002452 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	7e1b      	ldrb	r3, [r3, #24]
 80023de:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023e0:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023e8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023f8:	f023 0306 	bic.w	r3, r3, #6
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	69b9      	ldr	r1, [r7, #24]
 8002402:	430b      	orrs	r3, r1
 8002404:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800240c:	2b01      	cmp	r3, #1
 800240e:	d118      	bne.n	8002442 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800241a:	f023 0304 	bic.w	r3, r3, #4
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002426:	4311      	orrs	r1, r2
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800242c:	4311      	orrs	r1, r2
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002432:	430a      	orrs	r2, r1
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0201 	orr.w	r2, r2, #1
 800243e:	611a      	str	r2, [r3, #16]
 8002440:	e007      	b.n	8002452 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	691a      	ldr	r2, [r3, #16]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 0201 	bic.w	r2, r2, #1
 8002450:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d10c      	bne.n	8002474 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002460:	f023 010f 	bic.w	r1, r3, #15
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	1e5a      	subs	r2, r3, #1
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	631a      	str	r2, [r3, #48]	; 0x30
 8002472:	e007      	b.n	8002484 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 020f 	bic.w	r2, r2, #15
 8002482:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002488:	f023 0303 	bic.w	r3, r3, #3
 800248c:	f043 0201 	orr.w	r2, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	659a      	str	r2, [r3, #88]	; 0x58
 8002494:	e007      	b.n	80024a6 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249a:	f043 0210 	orr.w	r2, r3, #16
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3724      	adds	r7, #36	; 0x24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd90      	pop	{r4, r7, pc}
 80024b0:	20000004 	.word	0x20000004
 80024b4:	053e2d63 	.word	0x053e2d63
 80024b8:	42028000 	.word	0x42028000
 80024bc:	42028100 	.word	0x42028100
 80024c0:	42028300 	.word	0x42028300
 80024c4:	fff0c007 	.word	0xfff0c007

080024c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80024c8:	b590      	push	{r4, r7, lr}
 80024ca:	b0b7      	sub	sp, #220	; 0xdc
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d101      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x22>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e3c1      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x7a6>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fe73 	bl	80021e2 <LL_ADC_REG_IsConversionOngoing>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f040 83a6 	bne.w	8002c50 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	6859      	ldr	r1, [r3, #4]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	461a      	mov	r2, r3
 8002512:	f7ff fd89 	bl	8002028 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fe61 	bl	80021e2 <LL_ADC_REG_IsConversionOngoing>
 8002520:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff fe6d 	bl	8002208 <LL_ADC_INJ_IsConversionOngoing>
 800252e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002532:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002536:	2b00      	cmp	r3, #0
 8002538:	f040 81c1 	bne.w	80028be <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800253c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002540:	2b00      	cmp	r3, #0
 8002542:	f040 81bc 	bne.w	80028be <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800254e:	d10f      	bne.n	8002570 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6818      	ldr	r0, [r3, #0]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2200      	movs	r2, #0
 800255a:	4619      	mov	r1, r3
 800255c:	f7ff fd90 	bl	8002080 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff fd4a 	bl	8002002 <LL_ADC_SetSamplingTimeCommonConfig>
 800256e:	e00e      	b.n	800258e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6818      	ldr	r0, [r3, #0]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	6819      	ldr	r1, [r3, #0]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	461a      	mov	r2, r3
 800257e:	f7ff fd7f 	bl	8002080 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2100      	movs	r1, #0
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff fd3a 	bl	8002002 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	695a      	ldr	r2, [r3, #20]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	08db      	lsrs	r3, r3, #3
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d00a      	beq.n	80025c6 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	6919      	ldr	r1, [r3, #16]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80025c0:	f7ff fcca 	bl	8001f58 <LL_ADC_SetOffset>
 80025c4:	e17b      	b.n	80028be <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2100      	movs	r1, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff fce7 	bl	8001fa0 <LL_ADC_GetOffsetChannel>
 80025d2:	4603      	mov	r3, r0
 80025d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10a      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x12a>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2100      	movs	r1, #0
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fcdc 	bl	8001fa0 <LL_ADC_GetOffsetChannel>
 80025e8:	4603      	mov	r3, r0
 80025ea:	0e9b      	lsrs	r3, r3, #26
 80025ec:	f003 021f 	and.w	r2, r3, #31
 80025f0:	e01e      	b.n	8002630 <HAL_ADC_ConfigChannel+0x168>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2100      	movs	r1, #0
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fcd1 	bl	8001fa0 <LL_ADC_GetOffsetChannel>
 80025fe:	4603      	mov	r3, r0
 8002600:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002604:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002608:	fa93 f3a3 	rbit	r3, r3
 800260c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002610:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002614:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002618:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8002620:	2320      	movs	r3, #32
 8002622:	e004      	b.n	800262e <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8002624:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002628:	fab3 f383 	clz	r3, r3
 800262c:	b2db      	uxtb	r3, r3
 800262e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002638:	2b00      	cmp	r3, #0
 800263a:	d105      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x180>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	0e9b      	lsrs	r3, r3, #26
 8002642:	f003 031f 	and.w	r3, r3, #31
 8002646:	e018      	b.n	800267a <HAL_ADC_ConfigChannel+0x1b2>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002654:	fa93 f3a3 	rbit	r3, r3
 8002658:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800265c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002660:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002664:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 800266c:	2320      	movs	r3, #32
 800266e:	e004      	b.n	800267a <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8002670:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002674:	fab3 f383 	clz	r3, r3
 8002678:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800267a:	429a      	cmp	r2, r3
 800267c:	d106      	bne.n	800268c <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2200      	movs	r2, #0
 8002684:	2100      	movs	r1, #0
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fca0 	bl	8001fcc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2101      	movs	r1, #1
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fc84 	bl	8001fa0 <LL_ADC_GetOffsetChannel>
 8002698:	4603      	mov	r3, r0
 800269a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10a      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x1f0>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2101      	movs	r1, #1
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff fc79 	bl	8001fa0 <LL_ADC_GetOffsetChannel>
 80026ae:	4603      	mov	r3, r0
 80026b0:	0e9b      	lsrs	r3, r3, #26
 80026b2:	f003 021f 	and.w	r2, r3, #31
 80026b6:	e01e      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x22e>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2101      	movs	r1, #1
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fc6e 	bl	8001fa0 <LL_ADC_GetOffsetChannel>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80026d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80026de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 80026e6:	2320      	movs	r3, #32
 80026e8:	e004      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80026ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026ee:	fab3 f383 	clz	r3, r3
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d105      	bne.n	800270e <HAL_ADC_ConfigChannel+0x246>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	0e9b      	lsrs	r3, r3, #26
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	e018      	b.n	8002740 <HAL_ADC_ConfigChannel+0x278>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002716:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800271a:	fa93 f3a3 	rbit	r3, r3
 800271e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002722:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002726:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800272a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8002732:	2320      	movs	r3, #32
 8002734:	e004      	b.n	8002740 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8002736:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800273a:	fab3 f383 	clz	r3, r3
 800273e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002740:	429a      	cmp	r2, r3
 8002742:	d106      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2200      	movs	r2, #0
 800274a:	2101      	movs	r1, #1
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff fc3d 	bl	8001fcc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2102      	movs	r1, #2
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fc21 	bl	8001fa0 <LL_ADC_GetOffsetChannel>
 800275e:	4603      	mov	r3, r0
 8002760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10a      	bne.n	800277e <HAL_ADC_ConfigChannel+0x2b6>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2102      	movs	r1, #2
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fc16 	bl	8001fa0 <LL_ADC_GetOffsetChannel>
 8002774:	4603      	mov	r3, r0
 8002776:	0e9b      	lsrs	r3, r3, #26
 8002778:	f003 021f 	and.w	r2, r3, #31
 800277c:	e01e      	b.n	80027bc <HAL_ADC_ConfigChannel+0x2f4>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2102      	movs	r1, #2
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fc0b 	bl	8001fa0 <LL_ADC_GetOffsetChannel>
 800278a:	4603      	mov	r3, r0
 800278c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002794:	fa93 f3a3 	rbit	r3, r3
 8002798:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800279c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80027a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 80027ac:	2320      	movs	r3, #32
 80027ae:	e004      	b.n	80027ba <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 80027b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027b4:	fab3 f383 	clz	r3, r3
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d105      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x30c>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	0e9b      	lsrs	r3, r3, #26
 80027ce:	f003 031f 	and.w	r3, r3, #31
 80027d2:	e016      	b.n	8002802 <HAL_ADC_ConfigChannel+0x33a>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027e0:	fa93 f3a3 	rbit	r3, r3
 80027e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80027e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80027ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80027f4:	2320      	movs	r3, #32
 80027f6:	e004      	b.n	8002802 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 80027f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027fc:	fab3 f383 	clz	r3, r3
 8002800:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002802:	429a      	cmp	r2, r3
 8002804:	d106      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2200      	movs	r2, #0
 800280c:	2102      	movs	r1, #2
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff fbdc 	bl	8001fcc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2103      	movs	r1, #3
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff fbc0 	bl	8001fa0 <LL_ADC_GetOffsetChannel>
 8002820:	4603      	mov	r3, r0
 8002822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10a      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x378>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2103      	movs	r1, #3
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fbb5 	bl	8001fa0 <LL_ADC_GetOffsetChannel>
 8002836:	4603      	mov	r3, r0
 8002838:	0e9b      	lsrs	r3, r3, #26
 800283a:	f003 021f 	and.w	r2, r3, #31
 800283e:	e017      	b.n	8002870 <HAL_ADC_ConfigChannel+0x3a8>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2103      	movs	r1, #3
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fbaa 	bl	8001fa0 <LL_ADC_GetOffsetChannel>
 800284c:	4603      	mov	r3, r0
 800284e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002858:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800285a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800285c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8002862:	2320      	movs	r3, #32
 8002864:	e003      	b.n	800286e <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8002866:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002868:	fab3 f383 	clz	r3, r3
 800286c:	b2db      	uxtb	r3, r3
 800286e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002878:	2b00      	cmp	r3, #0
 800287a:	d105      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x3c0>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	0e9b      	lsrs	r3, r3, #26
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	e011      	b.n	80028ac <HAL_ADC_ConfigChannel+0x3e4>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002890:	fa93 f3a3 	rbit	r3, r3
 8002894:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002896:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002898:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800289a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 80028a0:	2320      	movs	r3, #32
 80028a2:	e003      	b.n	80028ac <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 80028a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d106      	bne.n	80028be <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2200      	movs	r2, #0
 80028b6:	2103      	movs	r1, #3
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff fb87 	bl	8001fcc <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff fc7a 	bl	80021bc <LL_ADC_IsEnabled>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f040 81c9 	bne.w	8002c62 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	6819      	ldr	r1, [r3, #0]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	461a      	mov	r2, r3
 80028de:	f7ff fbfb 	bl	80020d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	4a8f      	ldr	r2, [pc, #572]	; (8002b24 <HAL_ADC_ConfigChannel+0x65c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	f040 8131 	bne.w	8002b50 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10b      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x44e>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	0e9b      	lsrs	r3, r3, #26
 8002904:	3301      	adds	r3, #1
 8002906:	f003 031f 	and.w	r3, r3, #31
 800290a:	2b09      	cmp	r3, #9
 800290c:	bf94      	ite	ls
 800290e:	2301      	movls	r3, #1
 8002910:	2300      	movhi	r3, #0
 8002912:	b2db      	uxtb	r3, r3
 8002914:	e019      	b.n	800294a <HAL_ADC_ConfigChannel+0x482>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002924:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002926:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002928:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 800292e:	2320      	movs	r3, #32
 8002930:	e003      	b.n	800293a <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8002932:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002934:	fab3 f383 	clz	r3, r3
 8002938:	b2db      	uxtb	r3, r3
 800293a:	3301      	adds	r3, #1
 800293c:	f003 031f 	and.w	r3, r3, #31
 8002940:	2b09      	cmp	r3, #9
 8002942:	bf94      	ite	ls
 8002944:	2301      	movls	r3, #1
 8002946:	2300      	movhi	r3, #0
 8002948:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800294a:	2b00      	cmp	r3, #0
 800294c:	d079      	beq.n	8002a42 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002956:	2b00      	cmp	r3, #0
 8002958:	d107      	bne.n	800296a <HAL_ADC_ConfigChannel+0x4a2>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	0e9b      	lsrs	r3, r3, #26
 8002960:	3301      	adds	r3, #1
 8002962:	069b      	lsls	r3, r3, #26
 8002964:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002968:	e015      	b.n	8002996 <HAL_ADC_ConfigChannel+0x4ce>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002972:	fa93 f3a3 	rbit	r3, r3
 8002976:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800297a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800297c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002982:	2320      	movs	r3, #32
 8002984:	e003      	b.n	800298e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002988:	fab3 f383 	clz	r3, r3
 800298c:	b2db      	uxtb	r3, r3
 800298e:	3301      	adds	r3, #1
 8002990:	069b      	lsls	r3, r3, #26
 8002992:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d109      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x4ee>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	0e9b      	lsrs	r3, r3, #26
 80029a8:	3301      	adds	r3, #1
 80029aa:	f003 031f 	and.w	r3, r3, #31
 80029ae:	2101      	movs	r1, #1
 80029b0:	fa01 f303 	lsl.w	r3, r1, r3
 80029b4:	e017      	b.n	80029e6 <HAL_ADC_ConfigChannel+0x51e>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029be:	fa93 f3a3 	rbit	r3, r3
 80029c2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80029c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80029c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 80029ce:	2320      	movs	r3, #32
 80029d0:	e003      	b.n	80029da <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 80029d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029d4:	fab3 f383 	clz	r3, r3
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	3301      	adds	r3, #1
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	2101      	movs	r1, #1
 80029e2:	fa01 f303 	lsl.w	r3, r1, r3
 80029e6:	ea42 0103 	orr.w	r1, r2, r3
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10a      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x544>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	0e9b      	lsrs	r3, r3, #26
 80029fc:	3301      	adds	r3, #1
 80029fe:	f003 021f 	and.w	r2, r3, #31
 8002a02:	4613      	mov	r3, r2
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4413      	add	r3, r2
 8002a08:	051b      	lsls	r3, r3, #20
 8002a0a:	e018      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x576>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a14:	fa93 f3a3 	rbit	r3, r3
 8002a18:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002a24:	2320      	movs	r3, #32
 8002a26:	e003      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a2a:	fab3 f383 	clz	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	3301      	adds	r3, #1
 8002a32:	f003 021f 	and.w	r2, r3, #31
 8002a36:	4613      	mov	r3, r2
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	4413      	add	r3, r2
 8002a3c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a3e:	430b      	orrs	r3, r1
 8002a40:	e081      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d107      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x596>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	0e9b      	lsrs	r3, r3, #26
 8002a54:	3301      	adds	r3, #1
 8002a56:	069b      	lsls	r3, r3, #26
 8002a58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a5c:	e015      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x5c2>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a66:	fa93 f3a3 	rbit	r3, r3
 8002a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8002a76:	2320      	movs	r3, #32
 8002a78:	e003      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7c:	fab3 f383 	clz	r3, r3
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	3301      	adds	r3, #1
 8002a84:	069b      	lsls	r3, r3, #26
 8002a86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d109      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x5e2>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	0e9b      	lsrs	r3, r3, #26
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	f003 031f 	and.w	r3, r3, #31
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa8:	e017      	b.n	8002ada <HAL_ADC_ConfigChannel+0x612>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	fa93 f3a3 	rbit	r3, r3
 8002ab6:	61fb      	str	r3, [r7, #28]
  return result;
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8002ac2:	2320      	movs	r3, #32
 8002ac4:	e003      	b.n	8002ace <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	fab3 f383 	clz	r3, r3
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f003 031f 	and.w	r3, r3, #31
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ada:	ea42 0103 	orr.w	r1, r2, r3
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10d      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x63e>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	0e9b      	lsrs	r3, r3, #26
 8002af0:	3301      	adds	r3, #1
 8002af2:	f003 021f 	and.w	r2, r3, #31
 8002af6:	4613      	mov	r3, r2
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	4413      	add	r3, r2
 8002afc:	3b1e      	subs	r3, #30
 8002afe:	051b      	lsls	r3, r3, #20
 8002b00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b04:	e01e      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x67c>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	613b      	str	r3, [r7, #16]
  return result;
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d104      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8002b1e:	2320      	movs	r3, #32
 8002b20:	e006      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x668>
 8002b22:	bf00      	nop
 8002b24:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	3301      	adds	r3, #1
 8002b32:	f003 021f 	and.w	r2, r3, #31
 8002b36:	4613      	mov	r3, r2
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3b1e      	subs	r3, #30
 8002b3e:	051b      	lsls	r3, r3, #20
 8002b40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b44:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	f7ff fa98 	bl	8002080 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	4b48      	ldr	r3, [pc, #288]	; (8002c78 <HAL_ADC_ConfigChannel+0x7b0>)
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 8082 	beq.w	8002c62 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b5e:	4847      	ldr	r0, [pc, #284]	; (8002c7c <HAL_ADC_ConfigChannel+0x7b4>)
 8002b60:	f7ff f9ec 	bl	8001f3c <LL_ADC_GetCommonPathInternalCh>
 8002b64:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b68:	4845      	ldr	r0, [pc, #276]	; (8002c80 <HAL_ADC_ConfigChannel+0x7b8>)
 8002b6a:	f7ff fb27 	bl	80021bc <LL_ADC_IsEnabled>
 8002b6e:	4604      	mov	r4, r0
 8002b70:	4844      	ldr	r0, [pc, #272]	; (8002c84 <HAL_ADC_ConfigChannel+0x7bc>)
 8002b72:	f7ff fb23 	bl	80021bc <LL_ADC_IsEnabled>
 8002b76:	4603      	mov	r3, r0
 8002b78:	4323      	orrs	r3, r4
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d15e      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a41      	ldr	r2, [pc, #260]	; (8002c88 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d127      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d121      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a39      	ldr	r2, [pc, #228]	; (8002c80 <HAL_ADC_ConfigChannel+0x7b8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d161      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ba2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4834      	ldr	r0, [pc, #208]	; (8002c7c <HAL_ADC_ConfigChannel+0x7b4>)
 8002baa:	f7ff f9b4 	bl	8001f16 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bae:	4b37      	ldr	r3, [pc, #220]	; (8002c8c <HAL_ADC_ConfigChannel+0x7c4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	099b      	lsrs	r3, r3, #6
 8002bb4:	4a36      	ldr	r2, [pc, #216]	; (8002c90 <HAL_ADC_ConfigChannel+0x7c8>)
 8002bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bba:	099b      	lsrs	r3, r3, #6
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8002bc6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002bc8:	e002      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f9      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bd6:	e044      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a2d      	ldr	r2, [pc, #180]	; (8002c94 <HAL_ADC_ConfigChannel+0x7cc>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d113      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002be2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002be6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10d      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a23      	ldr	r2, [pc, #140]	; (8002c80 <HAL_ADC_ConfigChannel+0x7b8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d134      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bf8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c00:	4619      	mov	r1, r3
 8002c02:	481e      	ldr	r0, [pc, #120]	; (8002c7c <HAL_ADC_ConfigChannel+0x7b4>)
 8002c04:	f7ff f987 	bl	8001f16 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c08:	e02b      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a22      	ldr	r2, [pc, #136]	; (8002c98 <HAL_ADC_ConfigChannel+0x7d0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d126      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d120      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a16      	ldr	r2, [pc, #88]	; (8002c80 <HAL_ADC_ConfigChannel+0x7b8>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d11b      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c32:	4619      	mov	r1, r3
 8002c34:	4811      	ldr	r0, [pc, #68]	; (8002c7c <HAL_ADC_ConfigChannel+0x7b4>)
 8002c36:	f7ff f96e 	bl	8001f16 <LL_ADC_SetCommonPathInternalCh>
 8002c3a:	e012      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c40:	f043 0220 	orr.w	r2, r3, #32
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002c4e:	e008      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c54:	f043 0220 	orr.w	r2, r3, #32
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002c6a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	37dc      	adds	r7, #220	; 0xdc
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd90      	pop	{r4, r7, pc}
 8002c76:	bf00      	nop
 8002c78:	80080000 	.word	0x80080000
 8002c7c:	42028300 	.word	0x42028300
 8002c80:	42028000 	.word	0x42028000
 8002c84:	42028100 	.word	0x42028100
 8002c88:	c7520000 	.word	0xc7520000
 8002c8c:	20000004 	.word	0x20000004
 8002c90:	053e2d63 	.word	0x053e2d63
 8002c94:	cb840000 	.word	0xcb840000
 8002c98:	80000001 	.word	0x80000001

08002c9c <LL_ADC_IsEnabled>:
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <LL_ADC_IsEnabled+0x18>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <LL_ADC_IsEnabled+0x1a>
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 0304 	and.w	r3, r3, #4
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d101      	bne.n	8002cda <LL_ADC_REG_IsConversionOngoing+0x18>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e000      	b.n	8002cdc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002ce8:	b590      	push	{r4, r7, lr}
 8002cea:	b0a1      	sub	sp, #132	; 0x84
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d101      	bne.n	8002d06 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e089      	b.n	8002e1a <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002d0e:	2300      	movs	r3, #0
 8002d10:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002d12:	2300      	movs	r3, #0
 8002d14:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a42      	ldr	r2, [pc, #264]	; (8002e24 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d102      	bne.n	8002d26 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d20:	4b41      	ldr	r3, [pc, #260]	; (8002e28 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	e001      	b.n	8002d2a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10b      	bne.n	8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d34:	f043 0220 	orr.w	r2, r3, #32
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e068      	b.n	8002e1a <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff ffb9 	bl	8002cc2 <LL_ADC_REG_IsConversionOngoing>
 8002d50:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff ffb3 	bl	8002cc2 <LL_ADC_REG_IsConversionOngoing>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d14a      	bne.n	8002df8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002d62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d147      	bne.n	8002df8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d68:	4b30      	ldr	r3, [pc, #192]	; (8002e2c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002d6a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d027      	beq.n	8002dc4 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002d74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	6859      	ldr	r1, [r3, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d86:	035b      	lsls	r3, r3, #13
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d8e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d90:	4824      	ldr	r0, [pc, #144]	; (8002e24 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002d92:	f7ff ff83 	bl	8002c9c <LL_ADC_IsEnabled>
 8002d96:	4604      	mov	r4, r0
 8002d98:	4823      	ldr	r0, [pc, #140]	; (8002e28 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002d9a:	f7ff ff7f 	bl	8002c9c <LL_ADC_IsEnabled>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	4323      	orrs	r3, r4
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d132      	bne.n	8002e0c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002dae:	f023 030f 	bic.w	r3, r3, #15
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	6811      	ldr	r1, [r2, #0]
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	6892      	ldr	r2, [r2, #8]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dc0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002dc2:	e023      	b.n	8002e0c <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002dc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dce:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dd0:	4814      	ldr	r0, [pc, #80]	; (8002e24 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002dd2:	f7ff ff63 	bl	8002c9c <LL_ADC_IsEnabled>
 8002dd6:	4604      	mov	r4, r0
 8002dd8:	4813      	ldr	r0, [pc, #76]	; (8002e28 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002dda:	f7ff ff5f 	bl	8002c9c <LL_ADC_IsEnabled>
 8002dde:	4603      	mov	r3, r0
 8002de0:	4323      	orrs	r3, r4
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d112      	bne.n	8002e0c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002dee:	f023 030f 	bic.w	r3, r3, #15
 8002df2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002df4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002df6:	e009      	b.n	8002e0c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfc:	f043 0220 	orr.w	r2, r3, #32
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002e0a:	e000      	b.n	8002e0e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e0c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002e16:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3784      	adds	r7, #132	; 0x84
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd90      	pop	{r4, r7, pc}
 8002e22:	bf00      	nop
 8002e24:	42028000 	.word	0x42028000
 8002e28:	42028100 	.word	0x42028100
 8002e2c:	42028300 	.word	0x42028300

08002e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e40:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <__NVIC_SetPriorityGrouping+0x44>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e62:	4a04      	ldr	r2, [pc, #16]	; (8002e74 <__NVIC_SetPriorityGrouping+0x44>)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	60d3      	str	r3, [r2, #12]
}
 8002e68:	bf00      	nop
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	e000ed00 	.word	0xe000ed00

08002e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e7c:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <__NVIC_GetPriorityGrouping+0x18>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	0a1b      	lsrs	r3, r3, #8
 8002e82:	f003 0307 	and.w	r3, r3, #7
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	db0b      	blt.n	8002ebe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	f003 021f 	and.w	r2, r3, #31
 8002eac:	4907      	ldr	r1, [pc, #28]	; (8002ecc <__NVIC_EnableIRQ+0x38>)
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	2001      	movs	r0, #1
 8002eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	e000e100 	.word	0xe000e100

08002ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	6039      	str	r1, [r7, #0]
 8002eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	db0a      	blt.n	8002efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	490c      	ldr	r1, [pc, #48]	; (8002f1c <__NVIC_SetPriority+0x4c>)
 8002eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eee:	0152      	lsls	r2, r2, #5
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ef8:	e00a      	b.n	8002f10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	4908      	ldr	r1, [pc, #32]	; (8002f20 <__NVIC_SetPriority+0x50>)
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	3b04      	subs	r3, #4
 8002f08:	0152      	lsls	r2, r2, #5
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	761a      	strb	r2, [r3, #24]
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	e000e100 	.word	0xe000e100
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b089      	sub	sp, #36	; 0x24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f1c3 0307 	rsb	r3, r3, #7
 8002f3e:	2b03      	cmp	r3, #3
 8002f40:	bf28      	it	cs
 8002f42:	2303      	movcs	r3, #3
 8002f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3303      	adds	r3, #3
 8002f4a:	2b06      	cmp	r3, #6
 8002f4c:	d902      	bls.n	8002f54 <NVIC_EncodePriority+0x30>
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	3b04      	subs	r3, #4
 8002f52:	e000      	b.n	8002f56 <NVIC_EncodePriority+0x32>
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f58:	f04f 32ff 	mov.w	r2, #4294967295
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43da      	mvns	r2, r3
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	401a      	ands	r2, r3
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	fa01 f303 	lsl.w	r3, r1, r3
 8002f76:	43d9      	mvns	r1, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f7c:	4313      	orrs	r3, r2
         );
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3724      	adds	r7, #36	; 0x24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7ff ff4c 	bl	8002e30 <__NVIC_SetPriorityGrouping>
}
 8002f98:	bf00      	nop
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fae:	f7ff ff63 	bl	8002e78 <__NVIC_GetPriorityGrouping>
 8002fb2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	68b9      	ldr	r1, [r7, #8]
 8002fb8:	6978      	ldr	r0, [r7, #20]
 8002fba:	f7ff ffb3 	bl	8002f24 <NVIC_EncodePriority>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc4:	4611      	mov	r1, r2
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff ff82 	bl	8002ed0 <__NVIC_SetPriority>
}
 8002fcc:	bf00      	nop
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff ff56 	bl	8002e94 <__NVIC_EnableIRQ>
}
 8002fe8:	bf00      	nop
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d008      	beq.n	800301a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2204      	movs	r2, #4
 800300c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e040      	b.n	800309c <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 020e 	bic.w	r2, r2, #14
 8003028:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003034:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003038:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0201 	bic.w	r2, r2, #1
 8003048:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800304e:	f003 021c 	and.w	r2, r3, #28
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003056:	2101      	movs	r1, #1
 8003058:	fa01 f202 	lsl.w	r2, r1, r2
 800305c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003066:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00c      	beq.n	800308a <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800307e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8003088:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800309a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800309c:	4618      	mov	r0, r3
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d005      	beq.n	80030cc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2204      	movs	r2, #4
 80030c4:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	73fb      	strb	r3, [r7, #15]
 80030ca:	e047      	b.n	800315c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 020e 	bic.w	r2, r2, #14
 80030da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0201 	bic.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003100:	f003 021c 	and.w	r2, r3, #28
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003108:	2101      	movs	r1, #1
 800310a:	fa01 f202 	lsl.w	r2, r1, r2
 800310e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003118:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00c      	beq.n	800313c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003130:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800313a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	4798      	blx	r3
    }
  }
  return status;
 800315c:	7bfb      	ldrb	r3, [r7, #15]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003168:	b480      	push	{r7}
 800316a:	b087      	sub	sp, #28
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003176:	e158      	b.n	800342a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	2101      	movs	r1, #1
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	fa01 f303 	lsl.w	r3, r1, r3
 8003184:	4013      	ands	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 814a 	beq.w	8003424 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 0303 	and.w	r3, r3, #3
 8003198:	2b01      	cmp	r3, #1
 800319a:	d005      	beq.n	80031a8 <HAL_GPIO_Init+0x40>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 0303 	and.w	r3, r3, #3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d130      	bne.n	800320a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	2203      	movs	r2, #3
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4013      	ands	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031de:	2201      	movs	r2, #1
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	43db      	mvns	r3, r3
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4013      	ands	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	091b      	lsrs	r3, r3, #4
 80031f4:	f003 0201 	and.w	r2, r3, #1
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	2b03      	cmp	r3, #3
 8003214:	d017      	beq.n	8003246 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	2203      	movs	r2, #3
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	43db      	mvns	r3, r3
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4013      	ands	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4313      	orrs	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d123      	bne.n	800329a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	08da      	lsrs	r2, r3, #3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	3208      	adds	r2, #8
 800325a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800325e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	220f      	movs	r2, #15
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	43db      	mvns	r3, r3
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	4013      	ands	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	691a      	ldr	r2, [r3, #16]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	08da      	lsrs	r2, r3, #3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3208      	adds	r2, #8
 8003294:	6939      	ldr	r1, [r7, #16]
 8003296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	2203      	movs	r2, #3
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	43db      	mvns	r3, r3
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	4013      	ands	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f003 0203 	and.w	r2, r3, #3
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 80a4 	beq.w	8003424 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80032dc:	4a5a      	ldr	r2, [pc, #360]	; (8003448 <HAL_GPIO_Init+0x2e0>)
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	089b      	lsrs	r3, r3, #2
 80032e2:	3318      	adds	r3, #24
 80032e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e8:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	220f      	movs	r2, #15
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	43db      	mvns	r3, r3
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	4013      	ands	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a52      	ldr	r2, [pc, #328]	; (800344c <HAL_GPIO_Init+0x2e4>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d025      	beq.n	8003354 <HAL_GPIO_Init+0x1ec>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a51      	ldr	r2, [pc, #324]	; (8003450 <HAL_GPIO_Init+0x2e8>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d01f      	beq.n	8003350 <HAL_GPIO_Init+0x1e8>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a50      	ldr	r2, [pc, #320]	; (8003454 <HAL_GPIO_Init+0x2ec>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d019      	beq.n	800334c <HAL_GPIO_Init+0x1e4>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a4f      	ldr	r2, [pc, #316]	; (8003458 <HAL_GPIO_Init+0x2f0>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d013      	beq.n	8003348 <HAL_GPIO_Init+0x1e0>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a4e      	ldr	r2, [pc, #312]	; (800345c <HAL_GPIO_Init+0x2f4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00d      	beq.n	8003344 <HAL_GPIO_Init+0x1dc>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a4d      	ldr	r2, [pc, #308]	; (8003460 <HAL_GPIO_Init+0x2f8>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d007      	beq.n	8003340 <HAL_GPIO_Init+0x1d8>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a4c      	ldr	r2, [pc, #304]	; (8003464 <HAL_GPIO_Init+0x2fc>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d101      	bne.n	800333c <HAL_GPIO_Init+0x1d4>
 8003338:	2306      	movs	r3, #6
 800333a:	e00c      	b.n	8003356 <HAL_GPIO_Init+0x1ee>
 800333c:	2307      	movs	r3, #7
 800333e:	e00a      	b.n	8003356 <HAL_GPIO_Init+0x1ee>
 8003340:	2305      	movs	r3, #5
 8003342:	e008      	b.n	8003356 <HAL_GPIO_Init+0x1ee>
 8003344:	2304      	movs	r3, #4
 8003346:	e006      	b.n	8003356 <HAL_GPIO_Init+0x1ee>
 8003348:	2303      	movs	r3, #3
 800334a:	e004      	b.n	8003356 <HAL_GPIO_Init+0x1ee>
 800334c:	2302      	movs	r3, #2
 800334e:	e002      	b.n	8003356 <HAL_GPIO_Init+0x1ee>
 8003350:	2301      	movs	r3, #1
 8003352:	e000      	b.n	8003356 <HAL_GPIO_Init+0x1ee>
 8003354:	2300      	movs	r3, #0
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	f002 0203 	and.w	r2, r2, #3
 800335c:	00d2      	lsls	r2, r2, #3
 800335e:	4093      	lsls	r3, r2
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8003366:	4938      	ldr	r1, [pc, #224]	; (8003448 <HAL_GPIO_Init+0x2e0>)
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	089b      	lsrs	r3, r3, #2
 800336c:	3318      	adds	r3, #24
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003374:	4b34      	ldr	r3, [pc, #208]	; (8003448 <HAL_GPIO_Init+0x2e0>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	43db      	mvns	r3, r3
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4013      	ands	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003398:	4a2b      	ldr	r2, [pc, #172]	; (8003448 <HAL_GPIO_Init+0x2e0>)
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800339e:	4b2a      	ldr	r3, [pc, #168]	; (8003448 <HAL_GPIO_Init+0x2e0>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	43db      	mvns	r3, r3
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4013      	ands	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4313      	orrs	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033c2:	4a21      	ldr	r2, [pc, #132]	; (8003448 <HAL_GPIO_Init+0x2e0>)
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80033c8:	4b1f      	ldr	r3, [pc, #124]	; (8003448 <HAL_GPIO_Init+0x2e0>)
 80033ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	43db      	mvns	r3, r3
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4013      	ands	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033ee:	4a16      	ldr	r2, [pc, #88]	; (8003448 <HAL_GPIO_Init+0x2e0>)
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 80033f6:	4b14      	ldr	r3, [pc, #80]	; (8003448 <HAL_GPIO_Init+0x2e0>)
 80033f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	43db      	mvns	r3, r3
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4013      	ands	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4313      	orrs	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800341c:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <HAL_GPIO_Init+0x2e0>)
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	3301      	adds	r3, #1
 8003428:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	fa22 f303 	lsr.w	r3, r2, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	f47f ae9f 	bne.w	8003178 <HAL_GPIO_Init+0x10>
  }
}
 800343a:	bf00      	nop
 800343c:	bf00      	nop
 800343e:	371c      	adds	r7, #28
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	4002f400 	.word	0x4002f400
 800344c:	42020000 	.word	0x42020000
 8003450:	42020400 	.word	0x42020400
 8003454:	42020800 	.word	0x42020800
 8003458:	42020c00 	.word	0x42020c00
 800345c:	42021000 	.word	0x42021000
 8003460:	42021400 	.word	0x42021400
 8003464:	42021800 	.word	0x42021800

08003468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	807b      	strh	r3, [r7, #2]
 8003474:	4613      	mov	r3, r2
 8003476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003478:	787b      	ldrb	r3, [r7, #1]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800347e:	887a      	ldrh	r2, [r7, #2]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003484:	e002      	b.n	800348c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003486:	887a      	ldrh	r2, [r7, #2]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034aa:	887a      	ldrh	r2, [r7, #2]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4013      	ands	r3, r2
 80034b0:	041a      	lsls	r2, r3, #16
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	43d9      	mvns	r1, r3
 80034b6:	887b      	ldrh	r3, [r7, #2]
 80034b8:	400b      	ands	r3, r1
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	619a      	str	r2, [r3, #24]
}
 80034c0:	bf00      	nop
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80034d8:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d002      	beq.n	80034ea <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	73fb      	strb	r3, [r7, #15]
 80034e8:	e007      	b.n	80034fa <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80034ea:	4b07      	ldr	r3, [pc, #28]	; (8003508 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f023 0204 	bic.w	r2, r3, #4
 80034f2:	4905      	ldr	r1, [pc, #20]	; (8003508 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	600b      	str	r3, [r1, #0]
  }

  return status;
 80034fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	40030400 	.word	0x40030400

0800350c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_ICACHE_Enable+0x1c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a04      	ldr	r2, [pc, #16]	; (8003528 <HAL_ICACHE_Enable+0x1c>)
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	40030400 	.word	0x40030400

0800352c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800352c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800352e:	b08b      	sub	sp, #44	; 0x2c
 8003530:	af06      	add	r7, sp, #24
 8003532:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e0cb      	b.n	80036d6 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d106      	bne.n	8003558 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7fe fa92 	bl	8001a7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2203      	movs	r2, #3
 800355c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f005 faff 	bl	8008b68 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800356a:	2300      	movs	r3, #0
 800356c:	73fb      	strb	r3, [r7, #15]
 800356e:	e040      	b.n	80035f2 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	4613      	mov	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	440b      	add	r3, r1
 8003580:	3301      	adds	r3, #1
 8003582:	2201      	movs	r2, #1
 8003584:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003586:	7bfb      	ldrb	r3, [r7, #15]
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	440b      	add	r3, r1
 8003596:	7bfa      	ldrb	r2, [r7, #15]
 8003598:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800359a:	7bfb      	ldrb	r3, [r7, #15]
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	1c5a      	adds	r2, r3, #1
 80035a0:	4613      	mov	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	440b      	add	r3, r1
 80035aa:	3303      	adds	r3, #3
 80035ac:	2200      	movs	r2, #0
 80035ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035b0:	7bfa      	ldrb	r2, [r7, #15]
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	440b      	add	r3, r1
 80035be:	3338      	adds	r3, #56	; 0x38
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035c4:	7bfa      	ldrb	r2, [r7, #15]
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	440b      	add	r3, r1
 80035d2:	333c      	adds	r3, #60	; 0x3c
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035d8:	7bfa      	ldrb	r2, [r7, #15]
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	440b      	add	r3, r1
 80035e6:	3340      	adds	r3, #64	; 0x40
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
 80035ee:	3301      	adds	r3, #1
 80035f0:	73fb      	strb	r3, [r7, #15]
 80035f2:	7bfa      	ldrb	r2, [r7, #15]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d3b9      	bcc.n	8003570 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035fc:	2300      	movs	r3, #0
 80035fe:	73fb      	strb	r3, [r7, #15]
 8003600:	e044      	b.n	800368c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003602:	7bfa      	ldrb	r2, [r7, #15]
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	440b      	add	r3, r1
 8003610:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003614:	2200      	movs	r2, #0
 8003616:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003618:	7bfa      	ldrb	r2, [r7, #15]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	440b      	add	r3, r1
 8003626:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800362a:	7bfa      	ldrb	r2, [r7, #15]
 800362c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800362e:	7bfa      	ldrb	r2, [r7, #15]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	440b      	add	r3, r1
 800363c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003640:	2200      	movs	r2, #0
 8003642:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003644:	7bfa      	ldrb	r2, [r7, #15]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	440b      	add	r3, r1
 8003652:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800365a:	7bfa      	ldrb	r2, [r7, #15]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	440b      	add	r3, r1
 8003668:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003670:	7bfa      	ldrb	r2, [r7, #15]
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	440b      	add	r3, r1
 800367e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	3301      	adds	r3, #1
 800368a:	73fb      	strb	r3, [r7, #15]
 800368c:	7bfa      	ldrb	r2, [r7, #15]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	429a      	cmp	r2, r3
 8003694:	d3b5      	bcc.n	8003602 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	603b      	str	r3, [r7, #0]
 800369c:	687e      	ldr	r6, [r7, #4]
 800369e:	466d      	mov	r5, sp
 80036a0:	f106 0410 	add.w	r4, r6, #16
 80036a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036a8:	6823      	ldr	r3, [r4, #0]
 80036aa:	602b      	str	r3, [r5, #0]
 80036ac:	1d33      	adds	r3, r6, #4
 80036ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036b0:	6838      	ldr	r0, [r7, #0]
 80036b2:	f005 fa74 	bl	8008b9e <USB_DevInit>

  hpcd->USB_Address = 0U;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d102      	bne.n	80036d4 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f805 	bl	80036de <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036de <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80036de:	b480      	push	{r7}
 80036e0:	b085      	sub	sp, #20
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003702:	b29b      	uxth	r3, r3
 8003704:	f043 0301 	orr.w	r3, r3, #1
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003716:	b29b      	uxth	r3, r3
 8003718:	f043 0302 	orr.w	r3, r3, #2
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
	...

08003734 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003738:	4b05      	ldr	r3, [pc, #20]	; (8003750 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a04      	ldr	r2, [pc, #16]	; (8003750 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800373e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003742:	6013      	str	r3, [r2, #0]
}
 8003744:	bf00      	nop
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	40007000 	.word	0x40007000

08003754 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003758:	4b04      	ldr	r3, [pc, #16]	; (800376c <HAL_PWREx_GetVoltageRange+0x18>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003760:	4618      	mov	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	40007000 	.word	0x40007000

08003770 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8003778:	4b27      	ldr	r3, [pc, #156]	; (8003818 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003780:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8003782:	f000 f861 	bl	8003848 <HAL_PWREx_SMPS_GetEffectiveMode>
 8003786:	4603      	mov	r3, r0
 8003788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800378c:	d101      	bne.n	8003792 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e03e      	b.n	8003810 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8003792:	4b21      	ldr	r3, [pc, #132]	; (8003818 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800379a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800379e:	d101      	bne.n	80037a4 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e035      	b.n	8003810 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d101      	bne.n	80037b0 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80037ac:	2300      	movs	r3, #0
 80037ae:	e02f      	b.n	8003810 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80037b0:	4b19      	ldr	r3, [pc, #100]	; (8003818 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80037b8:	4917      	ldr	r1, [pc, #92]	; (8003818 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4313      	orrs	r3, r2
 80037be:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80037c0:	4b16      	ldr	r3, [pc, #88]	; (800381c <HAL_PWREx_ControlVoltageScaling+0xac>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	4a16      	ldr	r2, [pc, #88]	; (8003820 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80037c8:	fba2 2303 	umull	r2, r3, r2, r3
 80037cc:	09db      	lsrs	r3, r3, #7
 80037ce:	2232      	movs	r2, #50	; 0x32
 80037d0:	fb02 f303 	mul.w	r3, r2, r3
 80037d4:	4a13      	ldr	r2, [pc, #76]	; (8003824 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80037d6:	fba2 2303 	umull	r2, r3, r2, r3
 80037da:	08db      	lsrs	r3, r3, #3
 80037dc:	3301      	adds	r3, #1
 80037de:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037e0:	e002      	b.n	80037e8 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	3b01      	subs	r3, #1
 80037e6:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037e8:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f4:	d102      	bne.n	80037fc <HAL_PWREx_ControlVoltageScaling+0x8c>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1f2      	bne.n	80037e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037fc:	4b06      	ldr	r3, [pc, #24]	; (8003818 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003808:	d101      	bne.n	800380e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e000      	b.n	8003810 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40007000 	.word	0x40007000
 800381c:	20000004 	.word	0x20000004
 8003820:	0a7c5ac5 	.word	0x0a7c5ac5
 8003824:	cccccccd 	.word	0xcccccccd

08003828 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800382c:	4b05      	ldr	r3, [pc, #20]	; (8003844 <HAL_PWREx_EnableVddIO2+0x1c>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	4a04      	ldr	r2, [pc, #16]	; (8003844 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003832:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003836:	6053      	str	r3, [r2, #4]
}
 8003838:	bf00      	nop
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40007000 	.word	0x40007000

08003848 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800384e:	4b0f      	ldr	r3, [pc, #60]	; (800388c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800385e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003862:	607b      	str	r3, [r7, #4]
 8003864:	e00a      	b.n	800387c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d103      	bne.n	8003878 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8003870:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003874:	607b      	str	r3, [r7, #4]
 8003876:	e001      	b.n	800387c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8003878:	2300      	movs	r3, #0
 800387a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 800387c:	687b      	ldr	r3, [r7, #4]
}
 800387e:	4618      	mov	r0, r3
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40007000 	.word	0x40007000

08003890 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b088      	sub	sp, #32
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d102      	bne.n	80038a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	f000 bcc2 	b.w	8004228 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038a4:	4b99      	ldr	r3, [pc, #612]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 030c 	and.w	r3, r3, #12
 80038ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038ae:	4b97      	ldr	r3, [pc, #604]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0310 	and.w	r3, r3, #16
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 80e9 	beq.w	8003a98 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d006      	beq.n	80038da <HAL_RCC_OscConfig+0x4a>
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	2b0c      	cmp	r3, #12
 80038d0:	f040 8083 	bne.w	80039da <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d17f      	bne.n	80039da <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038da:	4b8c      	ldr	r3, [pc, #560]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d006      	beq.n	80038f4 <HAL_RCC_OscConfig+0x64>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d102      	bne.n	80038f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	f000 bc9a 	b.w	8004228 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038f8:	4b84      	ldr	r3, [pc, #528]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b00      	cmp	r3, #0
 8003902:	d004      	beq.n	800390e <HAL_RCC_OscConfig+0x7e>
 8003904:	4b81      	ldr	r3, [pc, #516]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800390c:	e005      	b.n	800391a <HAL_RCC_OscConfig+0x8a>
 800390e:	4b7f      	ldr	r3, [pc, #508]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003910:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003914:	091b      	lsrs	r3, r3, #4
 8003916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800391a:	4293      	cmp	r3, r2
 800391c:	d224      	bcs.n	8003968 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fece 	bl	80046c4 <RCC_SetFlashLatencyFromMSIRange>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	f000 bc7a 	b.w	8004228 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003934:	4b75      	ldr	r3, [pc, #468]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a74      	ldr	r2, [pc, #464]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 800393a:	f043 0308 	orr.w	r3, r3, #8
 800393e:	6013      	str	r3, [r2, #0]
 8003940:	4b72      	ldr	r3, [pc, #456]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	496f      	ldr	r1, [pc, #444]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 800394e:	4313      	orrs	r3, r2
 8003950:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003952:	4b6e      	ldr	r3, [pc, #440]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	021b      	lsls	r3, r3, #8
 8003960:	496a      	ldr	r1, [pc, #424]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003962:	4313      	orrs	r3, r2
 8003964:	604b      	str	r3, [r1, #4]
 8003966:	e026      	b.n	80039b6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003968:	4b68      	ldr	r3, [pc, #416]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a67      	ldr	r2, [pc, #412]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 800396e:	f043 0308 	orr.w	r3, r3, #8
 8003972:	6013      	str	r3, [r2, #0]
 8003974:	4b65      	ldr	r3, [pc, #404]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	4962      	ldr	r1, [pc, #392]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003982:	4313      	orrs	r3, r2
 8003984:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003986:	4b61      	ldr	r3, [pc, #388]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	021b      	lsls	r3, r3, #8
 8003994:	495d      	ldr	r1, [pc, #372]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003996:	4313      	orrs	r3, r2
 8003998:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10a      	bne.n	80039b6 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 fe8d 	bl	80046c4 <RCC_SetFlashLatencyFromMSIRange>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	f000 bc39 	b.w	8004228 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80039b6:	f000 fe17 	bl	80045e8 <HAL_RCC_GetHCLKFreq>
 80039ba:	4603      	mov	r3, r0
 80039bc:	4a54      	ldr	r2, [pc, #336]	; (8003b10 <HAL_RCC_OscConfig+0x280>)
 80039be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80039c0:	4b54      	ldr	r3, [pc, #336]	; (8003b14 <HAL_RCC_OscConfig+0x284>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fe f8b9 	bl	8001b3c <HAL_InitTick>
 80039ca:	4603      	mov	r3, r0
 80039cc:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d060      	beq.n	8003a96 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	f000 bc27 	b.w	8004228 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d039      	beq.n	8003a56 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80039e2:	4b4a      	ldr	r3, [pc, #296]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a49      	ldr	r2, [pc, #292]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 80039e8:	f043 0301 	orr.w	r3, r3, #1
 80039ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039ee:	f7fe fa73 	bl	8001ed8 <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039f4:	e00f      	b.n	8003a16 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039f6:	f7fe fa6f 	bl	8001ed8 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d908      	bls.n	8003a16 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a04:	4b41      	ldr	r3, [pc, #260]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d102      	bne.n	8003a16 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	f000 bc09 	b.w	8004228 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a16:	4b3d      	ldr	r3, [pc, #244]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0e9      	beq.n	80039f6 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a22:	4b3a      	ldr	r3, [pc, #232]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a39      	ldr	r2, [pc, #228]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003a28:	f043 0308 	orr.w	r3, r3, #8
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	4b37      	ldr	r3, [pc, #220]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	4934      	ldr	r1, [pc, #208]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a40:	4b32      	ldr	r3, [pc, #200]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	021b      	lsls	r3, r3, #8
 8003a4e:	492f      	ldr	r1, [pc, #188]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	604b      	str	r3, [r1, #4]
 8003a54:	e020      	b.n	8003a98 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a56:	4b2d      	ldr	r3, [pc, #180]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a2c      	ldr	r2, [pc, #176]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003a5c:	f023 0301 	bic.w	r3, r3, #1
 8003a60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a62:	f7fe fa39 	bl	8001ed8 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a68:	e00e      	b.n	8003a88 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a6a:	f7fe fa35 	bl	8001ed8 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d907      	bls.n	8003a88 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a78:	4b24      	ldr	r3, [pc, #144]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e3cf      	b.n	8004228 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a88:	4b20      	ldr	r3, [pc, #128]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1ea      	bne.n	8003a6a <HAL_RCC_OscConfig+0x1da>
 8003a94:	e000      	b.n	8003a98 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a96:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d07e      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	d005      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x226>
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	2b0c      	cmp	r3, #12
 8003aae:	d10e      	bne.n	8003ace <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	d10b      	bne.n	8003ace <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab6:	4b15      	ldr	r3, [pc, #84]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d06e      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x310>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d16a      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e3ac      	b.n	8004228 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad6:	d106      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x256>
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a0b      	ldr	r2, [pc, #44]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	e024      	b.n	8003b30 <HAL_RCC_OscConfig+0x2a0>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aee:	d113      	bne.n	8003b18 <HAL_RCC_OscConfig+0x288>
 8003af0:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a05      	ldr	r2, [pc, #20]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003af6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003afa:	6013      	str	r3, [r2, #0]
 8003afc:	4b03      	ldr	r3, [pc, #12]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a02      	ldr	r2, [pc, #8]	; (8003b0c <HAL_RCC_OscConfig+0x27c>)
 8003b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	e012      	b.n	8003b30 <HAL_RCC_OscConfig+0x2a0>
 8003b0a:	bf00      	nop
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	20000004 	.word	0x20000004
 8003b14:	20000008 	.word	0x20000008
 8003b18:	4b8b      	ldr	r3, [pc, #556]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a8a      	ldr	r2, [pc, #552]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	4b88      	ldr	r3, [pc, #544]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a87      	ldr	r2, [pc, #540]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d019      	beq.n	8003b6c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b38:	f7fe f9ce 	bl	8001ed8 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b3e:	e00e      	b.n	8003b5e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b40:	f7fe f9ca 	bl	8001ed8 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b64      	cmp	r3, #100	; 0x64
 8003b4c:	d907      	bls.n	8003b5e <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b4e:	4b7e      	ldr	r3, [pc, #504]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e364      	b.n	8004228 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b5e:	4b7a      	ldr	r3, [pc, #488]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0ea      	beq.n	8003b40 <HAL_RCC_OscConfig+0x2b0>
 8003b6a:	e01a      	b.n	8003ba2 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6c:	f7fe f9b4 	bl	8001ed8 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b72:	e00e      	b.n	8003b92 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b74:	f7fe f9b0 	bl	8001ed8 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b64      	cmp	r3, #100	; 0x64
 8003b80:	d907      	bls.n	8003b92 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b82:	4b71      	ldr	r3, [pc, #452]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e34a      	b.n	8004228 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b92:	4b6d      	ldr	r3, [pc, #436]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1ea      	bne.n	8003b74 <HAL_RCC_OscConfig+0x2e4>
 8003b9e:	e000      	b.n	8003ba2 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d06c      	beq.n	8003c88 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d005      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x330>
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	2b0c      	cmp	r3, #12
 8003bb8:	d119      	bne.n	8003bee <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d116      	bne.n	8003bee <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bc0:	4b61      	ldr	r3, [pc, #388]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d005      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x348>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e327      	b.n	8004228 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd8:	4b5b      	ldr	r3, [pc, #364]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	061b      	lsls	r3, r3, #24
 8003be6:	4958      	ldr	r1, [pc, #352]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bec:	e04c      	b.n	8003c88 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d029      	beq.n	8003c4a <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bf6:	4b54      	ldr	r3, [pc, #336]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a53      	ldr	r2, [pc, #332]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c02:	f7fe f969 	bl	8001ed8 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c08:	e00e      	b.n	8003c28 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c0a:	f7fe f965 	bl	8001ed8 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d907      	bls.n	8003c28 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c18:	4b4b      	ldr	r3, [pc, #300]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e2ff      	b.n	8004228 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c28:	4b47      	ldr	r3, [pc, #284]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0ea      	beq.n	8003c0a <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c34:	4b44      	ldr	r3, [pc, #272]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	061b      	lsls	r3, r3, #24
 8003c42:	4941      	ldr	r1, [pc, #260]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	604b      	str	r3, [r1, #4]
 8003c48:	e01e      	b.n	8003c88 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c4a:	4b3f      	ldr	r3, [pc, #252]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a3e      	ldr	r2, [pc, #248]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c56:	f7fe f93f 	bl	8001ed8 <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c5c:	e00e      	b.n	8003c7c <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c5e:	f7fe f93b 	bl	8001ed8 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d907      	bls.n	8003c7c <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c6c:	4b36      	ldr	r3, [pc, #216]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e2d5      	b.n	8004228 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c7c:	4b32      	ldr	r3, [pc, #200]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1ea      	bne.n	8003c5e <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0308 	and.w	r3, r3, #8
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d062      	beq.n	8003d5a <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d038      	beq.n	8003d0e <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d108      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003ca4:	4b28      	ldr	r3, [pc, #160]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003caa:	4a27      	ldr	r2, [pc, #156]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003cac:	f023 0310 	bic.w	r3, r3, #16
 8003cb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003cb4:	e007      	b.n	8003cc6 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003cb6:	4b24      	ldr	r3, [pc, #144]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cbc:	4a22      	ldr	r2, [pc, #136]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003cbe:	f043 0310 	orr.w	r3, r3, #16
 8003cc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cc6:	4b20      	ldr	r3, [pc, #128]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ccc:	4a1e      	ldr	r2, [pc, #120]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003cce:	f043 0301 	orr.w	r3, r3, #1
 8003cd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd6:	f7fe f8ff 	bl	8001ed8 <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cdc:	e00f      	b.n	8003cfe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cde:	f7fe f8fb 	bl	8001ed8 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b07      	cmp	r3, #7
 8003cea:	d908      	bls.n	8003cfe <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cec:	4b16      	ldr	r3, [pc, #88]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e294      	b.n	8004228 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cfe:	4b12      	ldr	r3, [pc, #72]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0e8      	beq.n	8003cde <HAL_RCC_OscConfig+0x44e>
 8003d0c:	e025      	b.n	8003d5a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d0e:	4b0e      	ldr	r3, [pc, #56]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d14:	4a0c      	ldr	r2, [pc, #48]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003d16:	f023 0301 	bic.w	r3, r3, #1
 8003d1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1e:	f7fe f8db 	bl	8001ed8 <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d24:	e012      	b.n	8003d4c <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d26:	f7fe f8d7 	bl	8001ed8 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b07      	cmp	r3, #7
 8003d32:	d90b      	bls.n	8003d4c <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d34:	4b04      	ldr	r3, [pc, #16]	; (8003d48 <HAL_RCC_OscConfig+0x4b8>)
 8003d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d004      	beq.n	8003d4c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e270      	b.n	8004228 <HAL_RCC_OscConfig+0x998>
 8003d46:	bf00      	nop
 8003d48:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d4c:	4ba8      	ldr	r3, [pc, #672]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1e5      	bne.n	8003d26 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 812d 	beq.w	8003fc2 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d6c:	4ba0      	ldr	r3, [pc, #640]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10d      	bne.n	8003d94 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d78:	4b9d      	ldr	r3, [pc, #628]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7c:	4a9c      	ldr	r2, [pc, #624]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d82:	6593      	str	r3, [r2, #88]	; 0x58
 8003d84:	4b9a      	ldr	r3, [pc, #616]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	60bb      	str	r3, [r7, #8]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d90:	2301      	movs	r3, #1
 8003d92:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d94:	4b97      	ldr	r3, [pc, #604]	; (8003ff4 <HAL_RCC_OscConfig+0x764>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d11e      	bne.n	8003dde <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003da0:	4b94      	ldr	r3, [pc, #592]	; (8003ff4 <HAL_RCC_OscConfig+0x764>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a93      	ldr	r2, [pc, #588]	; (8003ff4 <HAL_RCC_OscConfig+0x764>)
 8003da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003daa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dac:	f7fe f894 	bl	8001ed8 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003db2:	e00e      	b.n	8003dd2 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db4:	f7fe f890 	bl	8001ed8 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d907      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dc2:	4b8c      	ldr	r3, [pc, #560]	; (8003ff4 <HAL_RCC_OscConfig+0x764>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e22a      	b.n	8004228 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dd2:	4b88      	ldr	r3, [pc, #544]	; (8003ff4 <HAL_RCC_OscConfig+0x764>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0ea      	beq.n	8003db4 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d01f      	beq.n	8003e2a <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d010      	beq.n	8003e18 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003df6:	4b7e      	ldr	r3, [pc, #504]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfc:	4a7c      	ldr	r2, [pc, #496]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003dfe:	f043 0304 	orr.w	r3, r3, #4
 8003e02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e06:	4b7a      	ldr	r3, [pc, #488]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0c:	4a78      	ldr	r2, [pc, #480]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003e0e:	f043 0301 	orr.w	r3, r3, #1
 8003e12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e16:	e018      	b.n	8003e4a <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e18:	4b75      	ldr	r3, [pc, #468]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1e:	4a74      	ldr	r2, [pc, #464]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003e20:	f043 0301 	orr.w	r3, r3, #1
 8003e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e28:	e00f      	b.n	8003e4a <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e2a:	4b71      	ldr	r3, [pc, #452]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e30:	4a6f      	ldr	r2, [pc, #444]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003e32:	f023 0301 	bic.w	r3, r3, #1
 8003e36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e3a:	4b6d      	ldr	r3, [pc, #436]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e40:	4a6b      	ldr	r2, [pc, #428]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003e42:	f023 0304 	bic.w	r3, r3, #4
 8003e46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d068      	beq.n	8003f24 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e52:	f7fe f841 	bl	8001ed8 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e58:	e011      	b.n	8003e7e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5a:	f7fe f83d 	bl	8001ed8 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d908      	bls.n	8003e7e <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e6c:	4b60      	ldr	r3, [pc, #384]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e1d4      	b.n	8004228 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e7e:	4b5c      	ldr	r3, [pc, #368]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0e6      	beq.n	8003e5a <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d022      	beq.n	8003ede <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003e98:	4b55      	ldr	r3, [pc, #340]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9e:	4a54      	ldr	r2, [pc, #336]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003ea8:	e011      	b.n	8003ece <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eaa:	f7fe f815 	bl	8001ed8 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d908      	bls.n	8003ece <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003ebc:	4b4c      	ldr	r3, [pc, #304]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e1ac      	b.n	8004228 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003ece:	4b48      	ldr	r3, [pc, #288]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d0e6      	beq.n	8003eaa <HAL_RCC_OscConfig+0x61a>
 8003edc:	e068      	b.n	8003fb0 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003ede:	4b44      	ldr	r3, [pc, #272]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee4:	4a42      	ldr	r2, [pc, #264]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003ee6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003eee:	e011      	b.n	8003f14 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef0:	f7fd fff2 	bl	8001ed8 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d908      	bls.n	8003f14 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f02:	4b3b      	ldr	r3, [pc, #236]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e189      	b.n	8004228 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f14:	4b36      	ldr	r3, [pc, #216]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1e6      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x660>
 8003f22:	e045      	b.n	8003fb0 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f24:	f7fd ffd8 	bl	8001ed8 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f2a:	e011      	b.n	8003f50 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f2c:	f7fd ffd4 	bl	8001ed8 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d908      	bls.n	8003f50 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f3e:	4b2c      	ldr	r3, [pc, #176]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e16b      	b.n	8004228 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f50:	4b27      	ldr	r3, [pc, #156]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e6      	bne.n	8003f2c <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003f5e:	4b24      	ldr	r3, [pc, #144]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d021      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003f6c:	4b20      	ldr	r3, [pc, #128]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f72:	4a1f      	ldr	r2, [pc, #124]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003f74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f7c:	e011      	b.n	8003fa2 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f7e:	f7fd ffab 	bl	8001ed8 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d908      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f90:	4b17      	ldr	r3, [pc, #92]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e142      	b.n	8004228 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003fa2:	4b13      	ldr	r3, [pc, #76]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e6      	bne.n	8003f7e <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fb0:	7ffb      	ldrb	r3, [r7, #31]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d105      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb6:	4b0e      	ldr	r3, [pc, #56]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fba:	4a0d      	ldr	r2, [pc, #52]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0320 	and.w	r3, r3, #32
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d04f      	beq.n	800406e <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d028      	beq.n	8004028 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003fd6:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003fd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fdc:	4a04      	ldr	r2, [pc, #16]	; (8003ff0 <HAL_RCC_OscConfig+0x760>)
 8003fde:	f043 0301 	orr.w	r3, r3, #1
 8003fe2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe6:	f7fd ff77 	bl	8001ed8 <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fec:	e014      	b.n	8004018 <HAL_RCC_OscConfig+0x788>
 8003fee:	bf00      	nop
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ff8:	f7fd ff6e 	bl	8001ed8 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d908      	bls.n	8004018 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004006:	4b8a      	ldr	r3, [pc, #552]	; (8004230 <HAL_RCC_OscConfig+0x9a0>)
 8004008:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e107      	b.n	8004228 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004018:	4b85      	ldr	r3, [pc, #532]	; (8004230 <HAL_RCC_OscConfig+0x9a0>)
 800401a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0e8      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x768>
 8004026:	e022      	b.n	800406e <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004028:	4b81      	ldr	r3, [pc, #516]	; (8004230 <HAL_RCC_OscConfig+0x9a0>)
 800402a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800402e:	4a80      	ldr	r2, [pc, #512]	; (8004230 <HAL_RCC_OscConfig+0x9a0>)
 8004030:	f023 0301 	bic.w	r3, r3, #1
 8004034:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004038:	f7fd ff4e 	bl	8001ed8 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800403e:	e00f      	b.n	8004060 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004040:	f7fd ff4a 	bl	8001ed8 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d908      	bls.n	8004060 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800404e:	4b78      	ldr	r3, [pc, #480]	; (8004230 <HAL_RCC_OscConfig+0x9a0>)
 8004050:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e0e3      	b.n	8004228 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004060:	4b73      	ldr	r3, [pc, #460]	; (8004230 <HAL_RCC_OscConfig+0x9a0>)
 8004062:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1e8      	bne.n	8004040 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 80d7 	beq.w	8004226 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004078:	4b6d      	ldr	r3, [pc, #436]	; (8004230 <HAL_RCC_OscConfig+0x9a0>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 030c 	and.w	r3, r3, #12
 8004080:	2b0c      	cmp	r3, #12
 8004082:	f000 8091 	beq.w	80041a8 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408a:	2b02      	cmp	r3, #2
 800408c:	d166      	bne.n	800415c <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800408e:	4b68      	ldr	r3, [pc, #416]	; (8004230 <HAL_RCC_OscConfig+0x9a0>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a67      	ldr	r2, [pc, #412]	; (8004230 <HAL_RCC_OscConfig+0x9a0>)
 8004094:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409a:	f7fd ff1d 	bl	8001ed8 <HAL_GetTick>
 800409e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040a0:	e00e      	b.n	80040c0 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a2:	f7fd ff19 	bl	8001ed8 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d907      	bls.n	80040c0 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040b0:	4b5f      	ldr	r3, [pc, #380]	; (8004230 <HAL_RCC_OscConfig+0x9a0>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e0b3      	b.n	8004228 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040c0:	4b5b      	ldr	r3, [pc, #364]	; (8004230 <HAL_RCC_OscConfig+0x9a0>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1ea      	bne.n	80040a2 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040cc:	4b58      	ldr	r3, [pc, #352]	; (8004230 <HAL_RCC_OscConfig+0x9a0>)
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	4b58      	ldr	r3, [pc, #352]	; (8004234 <HAL_RCC_OscConfig+0x9a4>)
 80040d2:	4013      	ands	r3, r2
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040dc:	3a01      	subs	r2, #1
 80040de:	0112      	lsls	r2, r2, #4
 80040e0:	4311      	orrs	r1, r2
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040e6:	0212      	lsls	r2, r2, #8
 80040e8:	4311      	orrs	r1, r2
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040ee:	0852      	lsrs	r2, r2, #1
 80040f0:	3a01      	subs	r2, #1
 80040f2:	0552      	lsls	r2, r2, #21
 80040f4:	4311      	orrs	r1, r2
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80040fa:	0852      	lsrs	r2, r2, #1
 80040fc:	3a01      	subs	r2, #1
 80040fe:	0652      	lsls	r2, r2, #25
 8004100:	4311      	orrs	r1, r2
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004106:	06d2      	lsls	r2, r2, #27
 8004108:	430a      	orrs	r2, r1
 800410a:	4949      	ldr	r1, [pc, #292]	; (8004230 <HAL_RCC_OscConfig+0x9a0>)
 800410c:	4313      	orrs	r3, r2
 800410e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004110:	4b47      	ldr	r3, [pc, #284]	; (8004230 <HAL_RCC_OscConfig+0x9a0>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a46      	ldr	r2, [pc, #280]	; (8004230 <HAL_RCC_OscConfig+0x9a0>)
 8004116:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800411a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800411c:	4b44      	ldr	r3, [pc, #272]	; (8004230 <HAL_RCC_OscConfig+0x9a0>)
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	4a43      	ldr	r2, [pc, #268]	; (8004230 <HAL_RCC_OscConfig+0x9a0>)
 8004122:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004126:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004128:	f7fd fed6 	bl	8001ed8 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800412e:	e00e      	b.n	800414e <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004130:	f7fd fed2 	bl	8001ed8 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d907      	bls.n	800414e <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800413e:	4b3c      	ldr	r3, [pc, #240]	; (8004230 <HAL_RCC_OscConfig+0x9a0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e06c      	b.n	8004228 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800414e:	4b38      	ldr	r3, [pc, #224]	; (8004230 <HAL_RCC_OscConfig+0x9a0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0ea      	beq.n	8004130 <HAL_RCC_OscConfig+0x8a0>
 800415a:	e064      	b.n	8004226 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800415c:	4b34      	ldr	r3, [pc, #208]	; (8004230 <HAL_RCC_OscConfig+0x9a0>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a33      	ldr	r2, [pc, #204]	; (8004230 <HAL_RCC_OscConfig+0x9a0>)
 8004162:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004168:	f7fd feb6 	bl	8001ed8 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800416e:	e00e      	b.n	800418e <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004170:	f7fd feb2 	bl	8001ed8 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d907      	bls.n	800418e <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800417e:	4b2c      	ldr	r3, [pc, #176]	; (8004230 <HAL_RCC_OscConfig+0x9a0>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e04c      	b.n	8004228 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800418e:	4b28      	ldr	r3, [pc, #160]	; (8004230 <HAL_RCC_OscConfig+0x9a0>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1ea      	bne.n	8004170 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800419a:	4b25      	ldr	r3, [pc, #148]	; (8004230 <HAL_RCC_OscConfig+0x9a0>)
 800419c:	68da      	ldr	r2, [r3, #12]
 800419e:	4924      	ldr	r1, [pc, #144]	; (8004230 <HAL_RCC_OscConfig+0x9a0>)
 80041a0:	4b25      	ldr	r3, [pc, #148]	; (8004238 <HAL_RCC_OscConfig+0x9a8>)
 80041a2:	4013      	ands	r3, r2
 80041a4:	60cb      	str	r3, [r1, #12]
 80041a6:	e03e      	b.n	8004226 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d101      	bne.n	80041b4 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e039      	b.n	8004228 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80041b4:	4b1e      	ldr	r3, [pc, #120]	; (8004230 <HAL_RCC_OscConfig+0x9a0>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f003 0203 	and.w	r2, r3, #3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d12c      	bne.n	8004222 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d2:	3b01      	subs	r3, #1
 80041d4:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d123      	bne.n	8004222 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e4:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d11b      	bne.n	8004222 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f4:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d113      	bne.n	8004222 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004204:	085b      	lsrs	r3, r3, #1
 8004206:	3b01      	subs	r3, #1
 8004208:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800420a:	429a      	cmp	r2, r3
 800420c:	d109      	bne.n	8004222 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004218:	085b      	lsrs	r3, r3, #1
 800421a:	3b01      	subs	r3, #1
 800421c:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800421e:	429a      	cmp	r2, r3
 8004220:	d001      	beq.n	8004226 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3720      	adds	r7, #32
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40021000 	.word	0x40021000
 8004234:	019f800c 	.word	0x019f800c
 8004238:	feeefffc 	.word	0xfeeefffc

0800423c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e11c      	b.n	800448e <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004254:	4b90      	ldr	r3, [pc, #576]	; (8004498 <HAL_RCC_ClockConfig+0x25c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d910      	bls.n	8004284 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004262:	4b8d      	ldr	r3, [pc, #564]	; (8004498 <HAL_RCC_ClockConfig+0x25c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f023 020f 	bic.w	r2, r3, #15
 800426a:	498b      	ldr	r1, [pc, #556]	; (8004498 <HAL_RCC_ClockConfig+0x25c>)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	4313      	orrs	r3, r2
 8004270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004272:	4b89      	ldr	r3, [pc, #548]	; (8004498 <HAL_RCC_ClockConfig+0x25c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d001      	beq.n	8004284 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e104      	b.n	800448e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d010      	beq.n	80042b2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	4b81      	ldr	r3, [pc, #516]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800429c:	429a      	cmp	r2, r3
 800429e:	d908      	bls.n	80042b2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a0:	4b7e      	ldr	r3, [pc, #504]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	497b      	ldr	r1, [pc, #492]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 8085 	beq.w	80043ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	2b03      	cmp	r3, #3
 80042c6:	d11f      	bne.n	8004308 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042c8:	4b74      	ldr	r3, [pc, #464]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e0da      	b.n	800448e <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80042d8:	f000 fa58 	bl	800478c <RCC_GetSysClockFreqFromPLLSource>
 80042dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	4a6f      	ldr	r2, [pc, #444]	; (80044a0 <HAL_RCC_ClockConfig+0x264>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d947      	bls.n	8004376 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80042e6:	4b6d      	ldr	r3, [pc, #436]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d141      	bne.n	8004376 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042f2:	4b6a      	ldr	r3, [pc, #424]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042fa:	4a68      	ldr	r2, [pc, #416]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 80042fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004300:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004302:	2380      	movs	r3, #128	; 0x80
 8004304:	617b      	str	r3, [r7, #20]
 8004306:	e036      	b.n	8004376 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	2b02      	cmp	r3, #2
 800430e:	d107      	bne.n	8004320 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004310:	4b62      	ldr	r3, [pc, #392]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d115      	bne.n	8004348 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e0b6      	b.n	800448e <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d107      	bne.n	8004338 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004328:	4b5c      	ldr	r3, [pc, #368]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d109      	bne.n	8004348 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e0aa      	b.n	800448e <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004338:	4b58      	ldr	r3, [pc, #352]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e0a2      	b.n	800448e <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004348:	f000 f8b0 	bl	80044ac <HAL_RCC_GetSysClockFreq>
 800434c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	4a53      	ldr	r2, [pc, #332]	; (80044a0 <HAL_RCC_ClockConfig+0x264>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d90f      	bls.n	8004376 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004356:	4b51      	ldr	r3, [pc, #324]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d109      	bne.n	8004376 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004362:	4b4e      	ldr	r3, [pc, #312]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800436a:	4a4c      	ldr	r2, [pc, #304]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 800436c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004370:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004372:	2380      	movs	r3, #128	; 0x80
 8004374:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004376:	4b49      	ldr	r3, [pc, #292]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f023 0203 	bic.w	r2, r3, #3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	4946      	ldr	r1, [pc, #280]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 8004384:	4313      	orrs	r3, r2
 8004386:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004388:	f7fd fda6 	bl	8001ed8 <HAL_GetTick>
 800438c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438e:	e013      	b.n	80043b8 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004390:	f7fd fda2 	bl	8001ed8 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	f241 3288 	movw	r2, #5000	; 0x1388
 800439e:	4293      	cmp	r3, r2
 80043a0:	d90a      	bls.n	80043b8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a2:	4b3e      	ldr	r3, [pc, #248]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 020c 	and.w	r2, r3, #12
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d001      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e06a      	b.n	800448e <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b8:	4b38      	ldr	r3, [pc, #224]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f003 020c 	and.w	r2, r3, #12
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d1e2      	bne.n	8004390 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2b80      	cmp	r3, #128	; 0x80
 80043ce:	d105      	bne.n	80043dc <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80043d0:	4b32      	ldr	r3, [pc, #200]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	4a31      	ldr	r2, [pc, #196]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 80043d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043da:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d010      	beq.n	800440a <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	4b2b      	ldr	r3, [pc, #172]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d208      	bcs.n	800440a <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043f8:	4b28      	ldr	r3, [pc, #160]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	4925      	ldr	r1, [pc, #148]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 8004406:	4313      	orrs	r3, r2
 8004408:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800440a:	4b23      	ldr	r3, [pc, #140]	; (8004498 <HAL_RCC_ClockConfig+0x25c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	d210      	bcs.n	800443a <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004418:	4b1f      	ldr	r3, [pc, #124]	; (8004498 <HAL_RCC_ClockConfig+0x25c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f023 020f 	bic.w	r2, r3, #15
 8004420:	491d      	ldr	r1, [pc, #116]	; (8004498 <HAL_RCC_ClockConfig+0x25c>)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	4313      	orrs	r3, r2
 8004426:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004428:	4b1b      	ldr	r3, [pc, #108]	; (8004498 <HAL_RCC_ClockConfig+0x25c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 030f 	and.w	r3, r3, #15
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d001      	beq.n	800443a <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e029      	b.n	800448e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0304 	and.w	r3, r3, #4
 8004442:	2b00      	cmp	r3, #0
 8004444:	d008      	beq.n	8004458 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004446:	4b15      	ldr	r3, [pc, #84]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	4912      	ldr	r1, [pc, #72]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 8004454:	4313      	orrs	r3, r2
 8004456:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0308 	and.w	r3, r3, #8
 8004460:	2b00      	cmp	r3, #0
 8004462:	d009      	beq.n	8004478 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004464:	4b0d      	ldr	r3, [pc, #52]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	490a      	ldr	r1, [pc, #40]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 8004474:	4313      	orrs	r3, r2
 8004476:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004478:	f000 f8b6 	bl	80045e8 <HAL_RCC_GetHCLKFreq>
 800447c:	4603      	mov	r3, r0
 800447e:	4a09      	ldr	r2, [pc, #36]	; (80044a4 <HAL_RCC_ClockConfig+0x268>)
 8004480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004482:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <HAL_RCC_ClockConfig+0x26c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f7fd fb58 	bl	8001b3c <HAL_InitTick>
 800448c:	4603      	mov	r3, r0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	40022000 	.word	0x40022000
 800449c:	40021000 	.word	0x40021000
 80044a0:	04c4b400 	.word	0x04c4b400
 80044a4:	20000004 	.word	0x20000004
 80044a8:	20000008 	.word	0x20000008

080044ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b089      	sub	sp, #36	; 0x24
 80044b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	61fb      	str	r3, [r7, #28]
 80044b6:	2300      	movs	r3, #0
 80044b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044ba:	4b47      	ldr	r3, [pc, #284]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 030c 	and.w	r3, r3, #12
 80044c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044c4:	4b44      	ldr	r3, [pc, #272]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f003 0303 	and.w	r3, r3, #3
 80044cc:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <HAL_RCC_GetSysClockFreq+0x34>
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	2b0c      	cmp	r3, #12
 80044d8:	d121      	bne.n	800451e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d11e      	bne.n	800451e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80044e0:	4b3d      	ldr	r3, [pc, #244]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0308 	and.w	r3, r3, #8
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d107      	bne.n	80044fc <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80044ec:	4b3a      	ldr	r3, [pc, #232]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80044ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044f2:	0a1b      	lsrs	r3, r3, #8
 80044f4:	f003 030f 	and.w	r3, r3, #15
 80044f8:	61fb      	str	r3, [r7, #28]
 80044fa:	e005      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80044fc:	4b36      	ldr	r3, [pc, #216]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	091b      	lsrs	r3, r3, #4
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8004508:	4a34      	ldr	r2, [pc, #208]	; (80045dc <HAL_RCC_GetSysClockFreq+0x130>)
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004510:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10d      	bne.n	8004534 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800451c:	e00a      	b.n	8004534 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	2b04      	cmp	r3, #4
 8004522:	d102      	bne.n	800452a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004524:	4b2e      	ldr	r3, [pc, #184]	; (80045e0 <HAL_RCC_GetSysClockFreq+0x134>)
 8004526:	61bb      	str	r3, [r7, #24]
 8004528:	e004      	b.n	8004534 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	2b08      	cmp	r3, #8
 800452e:	d101      	bne.n	8004534 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004530:	4b2c      	ldr	r3, [pc, #176]	; (80045e4 <HAL_RCC_GetSysClockFreq+0x138>)
 8004532:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	2b0c      	cmp	r3, #12
 8004538:	d146      	bne.n	80045c8 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800453a:	4b27      	ldr	r3, [pc, #156]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004544:	4b24      	ldr	r3, [pc, #144]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	091b      	lsrs	r3, r3, #4
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	3301      	adds	r3, #1
 8004550:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2b02      	cmp	r3, #2
 8004556:	d003      	beq.n	8004560 <HAL_RCC_GetSysClockFreq+0xb4>
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	2b03      	cmp	r3, #3
 800455c:	d00d      	beq.n	800457a <HAL_RCC_GetSysClockFreq+0xce>
 800455e:	e019      	b.n	8004594 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004560:	4a1f      	ldr	r2, [pc, #124]	; (80045e0 <HAL_RCC_GetSysClockFreq+0x134>)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	fbb2 f3f3 	udiv	r3, r2, r3
 8004568:	4a1b      	ldr	r2, [pc, #108]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800456a:	68d2      	ldr	r2, [r2, #12]
 800456c:	0a12      	lsrs	r2, r2, #8
 800456e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004572:	fb02 f303 	mul.w	r3, r2, r3
 8004576:	617b      	str	r3, [r7, #20]
        break;
 8004578:	e019      	b.n	80045ae <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800457a:	4a1a      	ldr	r2, [pc, #104]	; (80045e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004582:	4a15      	ldr	r2, [pc, #84]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004584:	68d2      	ldr	r2, [r2, #12]
 8004586:	0a12      	lsrs	r2, r2, #8
 8004588:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800458c:	fb02 f303 	mul.w	r3, r2, r3
 8004590:	617b      	str	r3, [r7, #20]
        break;
 8004592:	e00c      	b.n	80045ae <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004594:	69fa      	ldr	r2, [r7, #28]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	fbb2 f3f3 	udiv	r3, r2, r3
 800459c:	4a0e      	ldr	r2, [pc, #56]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800459e:	68d2      	ldr	r2, [r2, #12]
 80045a0:	0a12      	lsrs	r2, r2, #8
 80045a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045a6:	fb02 f303 	mul.w	r3, r2, r3
 80045aa:	617b      	str	r3, [r7, #20]
        break;
 80045ac:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80045ae:	4b0a      	ldr	r3, [pc, #40]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	0e5b      	lsrs	r3, r3, #25
 80045b4:	f003 0303 	and.w	r3, r3, #3
 80045b8:	3301      	adds	r3, #1
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80045c8:	69bb      	ldr	r3, [r7, #24]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3724      	adds	r7, #36	; 0x24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	40021000 	.word	0x40021000
 80045dc:	0800bfdc 	.word	0x0800bfdc
 80045e0:	00f42400 	.word	0x00f42400
 80045e4:	007a1200 	.word	0x007a1200

080045e8 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80045ec:	f7ff ff5e 	bl	80044ac <HAL_RCC_GetSysClockFreq>
 80045f0:	4602      	mov	r2, r0
 80045f2:	4b05      	ldr	r3, [pc, #20]	; (8004608 <HAL_RCC_GetHCLKFreq+0x20>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	091b      	lsrs	r3, r3, #4
 80045f8:	f003 030f 	and.w	r3, r3, #15
 80045fc:	4903      	ldr	r1, [pc, #12]	; (800460c <HAL_RCC_GetHCLKFreq+0x24>)
 80045fe:	5ccb      	ldrb	r3, [r1, r3]
 8004600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004604:	4618      	mov	r0, r3
 8004606:	bd80      	pop	{r7, pc}
 8004608:	40021000 	.word	0x40021000
 800460c:	0800bfc4 	.word	0x0800bfc4

08004610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004614:	f7ff ffe8 	bl	80045e8 <HAL_RCC_GetHCLKFreq>
 8004618:	4602      	mov	r2, r0
 800461a:	4b05      	ldr	r3, [pc, #20]	; (8004630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	0a1b      	lsrs	r3, r3, #8
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	4903      	ldr	r1, [pc, #12]	; (8004634 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004626:	5ccb      	ldrb	r3, [r1, r3]
 8004628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800462c:	4618      	mov	r0, r3
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40021000 	.word	0x40021000
 8004634:	0800bfd4 	.word	0x0800bfd4

08004638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800463c:	f7ff ffd4 	bl	80045e8 <HAL_RCC_GetHCLKFreq>
 8004640:	4602      	mov	r2, r0
 8004642:	4b05      	ldr	r3, [pc, #20]	; (8004658 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	0adb      	lsrs	r3, r3, #11
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	4903      	ldr	r1, [pc, #12]	; (800465c <HAL_RCC_GetPCLK2Freq+0x24>)
 800464e:	5ccb      	ldrb	r3, [r1, r3]
 8004650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004654:	4618      	mov	r0, r3
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40021000 	.word	0x40021000
 800465c:	0800bfd4 	.word	0x0800bfd4

08004660 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	220f      	movs	r2, #15
 800466e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004670:	4b12      	ldr	r3, [pc, #72]	; (80046bc <HAL_RCC_GetClockConfig+0x5c>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 0203 	and.w	r2, r3, #3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800467c:	4b0f      	ldr	r3, [pc, #60]	; (80046bc <HAL_RCC_GetClockConfig+0x5c>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004688:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <HAL_RCC_GetClockConfig+0x5c>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004694:	4b09      	ldr	r3, [pc, #36]	; (80046bc <HAL_RCC_GetClockConfig+0x5c>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	08db      	lsrs	r3, r3, #3
 800469a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80046a2:	4b07      	ldr	r3, [pc, #28]	; (80046c0 <HAL_RCC_GetClockConfig+0x60>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 020f 	and.w	r2, r3, #15
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	601a      	str	r2, [r3, #0]
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	40021000 	.word	0x40021000
 80046c0:	40022000 	.word	0x40022000

080046c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80046cc:	2300      	movs	r3, #0
 80046ce:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80046d0:	4b2c      	ldr	r3, [pc, #176]	; (8004784 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80046d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d003      	beq.n	80046e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80046dc:	f7ff f83a 	bl	8003754 <HAL_PWREx_GetVoltageRange>
 80046e0:	6138      	str	r0, [r7, #16]
 80046e2:	e014      	b.n	800470e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80046e4:	4b27      	ldr	r3, [pc, #156]	; (8004784 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80046e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e8:	4a26      	ldr	r2, [pc, #152]	; (8004784 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80046ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ee:	6593      	str	r3, [r2, #88]	; 0x58
 80046f0:	4b24      	ldr	r3, [pc, #144]	; (8004784 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80046f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80046fc:	f7ff f82a 	bl	8003754 <HAL_PWREx_GetVoltageRange>
 8004700:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004702:	4b20      	ldr	r3, [pc, #128]	; (8004784 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004706:	4a1f      	ldr	r2, [pc, #124]	; (8004784 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800470c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <RCC_SetFlashLatencyFromMSIRange+0x58>
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800471a:	d10b      	bne.n	8004734 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b80      	cmp	r3, #128	; 0x80
 8004720:	d919      	bls.n	8004756 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2ba0      	cmp	r3, #160	; 0xa0
 8004726:	d902      	bls.n	800472e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004728:	2302      	movs	r3, #2
 800472a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800472c:	e013      	b.n	8004756 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800472e:	2301      	movs	r3, #1
 8004730:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004732:	e010      	b.n	8004756 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b80      	cmp	r3, #128	; 0x80
 8004738:	d902      	bls.n	8004740 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800473a:	2303      	movs	r3, #3
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	e00a      	b.n	8004756 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b80      	cmp	r3, #128	; 0x80
 8004744:	d102      	bne.n	800474c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004746:	2302      	movs	r3, #2
 8004748:	617b      	str	r3, [r7, #20]
 800474a:	e004      	b.n	8004756 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b70      	cmp	r3, #112	; 0x70
 8004750:	d101      	bne.n	8004756 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004752:	2301      	movs	r3, #1
 8004754:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004756:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f023 020f 	bic.w	r2, r3, #15
 800475e:	490a      	ldr	r1, [pc, #40]	; (8004788 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	4313      	orrs	r3, r2
 8004764:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004766:	4b08      	ldr	r3, [pc, #32]	; (8004788 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 030f 	and.w	r3, r3, #15
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	429a      	cmp	r2, r3
 8004772:	d001      	beq.n	8004778 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e000      	b.n	800477a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	40021000 	.word	0x40021000
 8004788:	40022000 	.word	0x40022000

0800478c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004792:	4b31      	ldr	r3, [pc, #196]	; (8004858 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800479c:	4b2e      	ldr	r3, [pc, #184]	; (8004858 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	091b      	lsrs	r3, r3, #4
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	3301      	adds	r3, #1
 80047a8:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2b03      	cmp	r3, #3
 80047ae:	d015      	beq.n	80047dc <RCC_GetSysClockFreqFromPLLSource+0x50>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d839      	bhi.n	800482a <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d01c      	beq.n	80047f6 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d133      	bne.n	800482a <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047c2:	4a26      	ldr	r2, [pc, #152]	; (800485c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ca:	4a23      	ldr	r2, [pc, #140]	; (8004858 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80047cc:	68d2      	ldr	r2, [r2, #12]
 80047ce:	0a12      	lsrs	r2, r2, #8
 80047d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047d4:	fb02 f303 	mul.w	r3, r2, r3
 80047d8:	613b      	str	r3, [r7, #16]
      break;
 80047da:	e029      	b.n	8004830 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047dc:	4a20      	ldr	r2, [pc, #128]	; (8004860 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e4:	4a1c      	ldr	r2, [pc, #112]	; (8004858 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80047e6:	68d2      	ldr	r2, [r2, #12]
 80047e8:	0a12      	lsrs	r2, r2, #8
 80047ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047ee:	fb02 f303 	mul.w	r3, r2, r3
 80047f2:	613b      	str	r3, [r7, #16]
      break;
 80047f4:	e01c      	b.n	8004830 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80047f6:	4b18      	ldr	r3, [pc, #96]	; (8004858 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d107      	bne.n	8004812 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004802:	4b15      	ldr	r3, [pc, #84]	; (8004858 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004804:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004808:	0a1b      	lsrs	r3, r3, #8
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	617b      	str	r3, [r7, #20]
 8004810:	e005      	b.n	800481e <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004812:	4b11      	ldr	r3, [pc, #68]	; (8004858 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	091b      	lsrs	r3, r3, #4
 8004818:	f003 030f 	and.w	r3, r3, #15
 800481c:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 800481e:	4a11      	ldr	r2, [pc, #68]	; (8004864 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004826:	613b      	str	r3, [r7, #16]
        break;
 8004828:	e002      	b.n	8004830 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 800482a:	2300      	movs	r3, #0
 800482c:	613b      	str	r3, [r7, #16]
      break;
 800482e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004830:	4b09      	ldr	r3, [pc, #36]	; (8004858 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	0e5b      	lsrs	r3, r3, #25
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	3301      	adds	r3, #1
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	fbb2 f3f3 	udiv	r3, r2, r3
 8004848:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800484a:	683b      	ldr	r3, [r7, #0]
}
 800484c:	4618      	mov	r0, r3
 800484e:	371c      	adds	r7, #28
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	40021000 	.word	0x40021000
 800485c:	00f42400 	.word	0x00f42400
 8004860:	007a1200 	.word	0x007a1200
 8004864:	0800bfdc 	.word	0x0800bfdc

08004868 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b088      	sub	sp, #32
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004870:	2300      	movs	r3, #0
 8004872:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004874:	2300      	movs	r3, #0
 8004876:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004880:	2b00      	cmp	r3, #0
 8004882:	d040      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004888:	2b80      	cmp	r3, #128	; 0x80
 800488a:	d02a      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800488c:	2b80      	cmp	r3, #128	; 0x80
 800488e:	d825      	bhi.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004890:	2b60      	cmp	r3, #96	; 0x60
 8004892:	d026      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004894:	2b60      	cmp	r3, #96	; 0x60
 8004896:	d821      	bhi.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004898:	2b40      	cmp	r3, #64	; 0x40
 800489a:	d006      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x42>
 800489c:	2b40      	cmp	r3, #64	; 0x40
 800489e:	d81d      	bhi.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d009      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80048a4:	2b20      	cmp	r3, #32
 80048a6:	d010      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x62>
 80048a8:	e018      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048aa:	4b8f      	ldr	r3, [pc, #572]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	4a8e      	ldr	r2, [pc, #568]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048b4:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80048b6:	e015      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3304      	adds	r3, #4
 80048bc:	2100      	movs	r1, #0
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 fb56 	bl	8004f70 <RCCEx_PLLSAI1_Config>
 80048c4:	4603      	mov	r3, r0
 80048c6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80048c8:	e00c      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	3320      	adds	r3, #32
 80048ce:	2100      	movs	r1, #0
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 fc33 	bl	800513c <RCCEx_PLLSAI2_Config>
 80048d6:	4603      	mov	r3, r0
 80048d8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80048da:	e003      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	77fb      	strb	r3, [r7, #31]
        break;
 80048e0:	e000      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 80048e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048e4:	7ffb      	ldrb	r3, [r7, #31]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10b      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048ea:	4b7f      	ldr	r3, [pc, #508]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048f0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048f8:	497b      	ldr	r1, [pc, #492]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004900:	e001      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004902:	7ffb      	ldrb	r3, [r7, #31]
 8004904:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d047      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800491a:	d030      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800491c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004920:	d82a      	bhi.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004922:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004926:	d02a      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004928:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800492c:	d824      	bhi.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800492e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004932:	d008      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004938:	d81e      	bhi.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800493e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004942:	d010      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004944:	e018      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004946:	4b68      	ldr	r3, [pc, #416]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	4a67      	ldr	r2, [pc, #412]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800494c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004950:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004952:	e015      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	3304      	adds	r3, #4
 8004958:	2100      	movs	r1, #0
 800495a:	4618      	mov	r0, r3
 800495c:	f000 fb08 	bl	8004f70 <RCCEx_PLLSAI1_Config>
 8004960:	4603      	mov	r3, r0
 8004962:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004964:	e00c      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	3320      	adds	r3, #32
 800496a:	2100      	movs	r1, #0
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fbe5 	bl	800513c <RCCEx_PLLSAI2_Config>
 8004972:	4603      	mov	r3, r0
 8004974:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004976:	e003      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	77fb      	strb	r3, [r7, #31]
        break;
 800497c:	e000      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 800497e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004980:	7ffb      	ldrb	r3, [r7, #31]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10b      	bne.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004986:	4b58      	ldr	r3, [pc, #352]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004988:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800498c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004994:	4954      	ldr	r1, [pc, #336]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004996:	4313      	orrs	r3, r2
 8004998:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800499c:	e001      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800499e:	7ffb      	ldrb	r3, [r7, #31]
 80049a0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 80ab 	beq.w	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049b0:	2300      	movs	r3, #0
 80049b2:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049b4:	4b4c      	ldr	r3, [pc, #304]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10d      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049c0:	4b49      	ldr	r3, [pc, #292]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c4:	4a48      	ldr	r2, [pc, #288]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ca:	6593      	str	r3, [r2, #88]	; 0x58
 80049cc:	4b46      	ldr	r3, [pc, #280]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80049d8:	2301      	movs	r3, #1
 80049da:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049dc:	4b43      	ldr	r3, [pc, #268]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a42      	ldr	r2, [pc, #264]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80049e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049e8:	f7fd fa76 	bl	8001ed8 <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049ee:	e00f      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049f0:	f7fd fa72 	bl	8001ed8 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d908      	bls.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049fe:	4b3b      	ldr	r3, [pc, #236]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d109      	bne.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8004a0e:	e006      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a10:	4b36      	ldr	r3, [pc, #216]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0e9      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8004a1c:	e000      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8004a1e:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8004a20:	7ffb      	ldrb	r3, [r7, #31]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d164      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a26:	4b30      	ldr	r3, [pc, #192]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a30:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d01f      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d019      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a44:	4b28      	ldr	r3, [pc, #160]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a4e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a50:	4b25      	ldr	r3, [pc, #148]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a56:	4a24      	ldr	r2, [pc, #144]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a60:	4b21      	ldr	r3, [pc, #132]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a66:	4a20      	ldr	r2, [pc, #128]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a70:	4a1d      	ldr	r2, [pc, #116]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d01f      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a82:	f7fd fa29 	bl	8001ed8 <HAL_GetTick>
 8004a86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a88:	e012      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a8a:	f7fd fa25 	bl	8001ed8 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d909      	bls.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a9c:	4b12      	ldr	r3, [pc, #72]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10a      	bne.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8004aae:	e007      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ab0:	4b0d      	ldr	r3, [pc, #52]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0e5      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8004abe:	e000      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8004ac0:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8004ac2:	7ffb      	ldrb	r3, [r7, #31]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10c      	bne.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ac8:	4b07      	ldr	r3, [pc, #28]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ace:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad8:	4903      	ldr	r1, [pc, #12]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ae0:	e008      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ae2:	7ffb      	ldrb	r3, [r7, #31]
 8004ae4:	77bb      	strb	r3, [r7, #30]
 8004ae6:	e005      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af0:	7ffb      	ldrb	r3, [r7, #31]
 8004af2:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004af4:	7dfb      	ldrb	r3, [r7, #23]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d105      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004afa:	4b9c      	ldr	r3, [pc, #624]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afe:	4a9b      	ldr	r2, [pc, #620]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b12:	4b96      	ldr	r3, [pc, #600]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b18:	f023 0203 	bic.w	r2, r3, #3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b20:	4992      	ldr	r1, [pc, #584]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00a      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b34:	4b8d      	ldr	r3, [pc, #564]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3a:	f023 020c 	bic.w	r2, r3, #12
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b42:	498a      	ldr	r1, [pc, #552]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0304 	and.w	r3, r3, #4
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00a      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b56:	4b85      	ldr	r3, [pc, #532]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b64:	4981      	ldr	r1, [pc, #516]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0308 	and.w	r3, r3, #8
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00a      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b78:	4b7c      	ldr	r3, [pc, #496]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	4979      	ldr	r1, [pc, #484]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0310 	and.w	r3, r3, #16
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00a      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b9a:	4b74      	ldr	r3, [pc, #464]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba8:	4970      	ldr	r1, [pc, #448]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0320 	and.w	r3, r3, #32
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00a      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bbc:	4b6b      	ldr	r3, [pc, #428]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bca:	4968      	ldr	r1, [pc, #416]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00a      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bde:	4b63      	ldr	r3, [pc, #396]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bec:	495f      	ldr	r1, [pc, #380]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00a      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c00:	4b5a      	ldr	r3, [pc, #360]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c0e:	4957      	ldr	r1, [pc, #348]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00a      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004c22:	4b52      	ldr	r3, [pc, #328]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c30:	494e      	ldr	r1, [pc, #312]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d031      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c4c:	d00e      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004c4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c52:	d814      	bhi.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d015      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c5c:	d10f      	bne.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c5e:	4b43      	ldr	r3, [pc, #268]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	4a42      	ldr	r2, [pc, #264]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c68:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004c6a:	e00c      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3304      	adds	r3, #4
 8004c70:	2100      	movs	r1, #0
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 f97c 	bl	8004f70 <RCCEx_PLLSAI1_Config>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004c7c:	e003      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	77fb      	strb	r3, [r7, #31]
        break;
 8004c82:	e000      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8004c84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c86:	7ffb      	ldrb	r3, [r7, #31]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10b      	bne.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c8c:	4b37      	ldr	r3, [pc, #220]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c92:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c9a:	4934      	ldr	r1, [pc, #208]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ca2:	e001      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca4:	7ffb      	ldrb	r3, [r7, #31]
 8004ca6:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00a      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cb4:	4b2d      	ldr	r3, [pc, #180]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc2:	492a      	ldr	r1, [pc, #168]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cd6:	4b25      	ldr	r3, [pc, #148]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cdc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce4:	4921      	ldr	r1, [pc, #132]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00a      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004cf8:	4b1c      	ldr	r3, [pc, #112]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d06:	4919      	ldr	r1, [pc, #100]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d1a:	4b14      	ldr	r3, [pc, #80]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004d1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d20:	f023 0203 	bic.w	r2, r3, #3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d28:	4910      	ldr	r1, [pc, #64]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d02b      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d4a:	4908      	ldr	r1, [pc, #32]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d5a:	d109      	bne.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d5c:	4b03      	ldr	r3, [pc, #12]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	4a02      	ldr	r2, [pc, #8]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004d62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d66:	60d3      	str	r3, [r2, #12]
 8004d68:	e014      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004d6a:	bf00      	nop
 8004d6c:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d78:	d10c      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	2101      	movs	r1, #1
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 f8f5 	bl	8004f70 <RCCEx_PLLSAI1_Config>
 8004d86:	4603      	mov	r3, r0
 8004d88:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8004d8a:	7ffb      	ldrb	r3, [r7, #31]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8004d90:	7ffb      	ldrb	r3, [r7, #31]
 8004d92:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d04a      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004da4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004da8:	d108      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x554>
 8004daa:	4b70      	ldr	r3, [pc, #448]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004dac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004db0:	4a6e      	ldr	r2, [pc, #440]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004db2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004db6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004dba:	e012      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004dbc:	4b6b      	ldr	r3, [pc, #428]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dca:	4968      	ldr	r1, [pc, #416]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004dd2:	4b66      	ldr	r3, [pc, #408]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004dd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dd8:	4a64      	ldr	r2, [pc, #400]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004dda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dde:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004de6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dea:	d10d      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3304      	adds	r3, #4
 8004df0:	2101      	movs	r1, #1
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 f8bc 	bl	8004f70 <RCCEx_PLLSAI1_Config>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004dfc:	7ffb      	ldrb	r3, [r7, #31]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d019      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8004e02:	7ffb      	ldrb	r3, [r7, #31]
 8004e04:	77bb      	strb	r3, [r7, #30]
 8004e06:	e016      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e10:	d106      	bne.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e12:	4b56      	ldr	r3, [pc, #344]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	4a55      	ldr	r2, [pc, #340]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004e18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e1c:	60d3      	str	r3, [r2, #12]
 8004e1e:	e00a      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e28:	d105      	bne.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e2a:	4b50      	ldr	r3, [pc, #320]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	4a4f      	ldr	r2, [pc, #316]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e34:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d028      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e42:	4b4a      	ldr	r3, [pc, #296]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e50:	4946      	ldr	r1, [pc, #280]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e60:	d106      	bne.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e62:	4b42      	ldr	r3, [pc, #264]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	4a41      	ldr	r2, [pc, #260]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004e68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e6c:	60d3      	str	r3, [r2, #12]
 8004e6e:	e011      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e78:	d10c      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	2101      	movs	r1, #1
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 f875 	bl	8004f70 <RCCEx_PLLSAI1_Config>
 8004e86:	4603      	mov	r3, r0
 8004e88:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004e8a:	7ffb      	ldrb	r3, [r7, #31]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8004e90:	7ffb      	ldrb	r3, [r7, #31]
 8004e92:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d01e      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ea0:	4b32      	ldr	r3, [pc, #200]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eb0:	492e      	ldr	r1, [pc, #184]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ebe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ec2:	d10c      	bne.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3304      	adds	r3, #4
 8004ec8:	2102      	movs	r1, #2
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 f850 	bl	8004f70 <RCCEx_PLLSAI1_Config>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004ed4:	7ffb      	ldrb	r3, [r7, #31]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8004eda:	7ffb      	ldrb	r3, [r7, #31]
 8004edc:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00b      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004eea:	4b20      	ldr	r3, [pc, #128]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004eec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ef0:	f023 0204 	bic.w	r2, r3, #4
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004efa:	491c      	ldr	r1, [pc, #112]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00b      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004f0e:	4b17      	ldr	r3, [pc, #92]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004f10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f14:	f023 0218 	bic.w	r2, r3, #24
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1e:	4913      	ldr	r1, [pc, #76]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d017      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004f32:	4b0e      	ldr	r3, [pc, #56]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004f34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f42:	490a      	ldr	r1, [pc, #40]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f54:	d105      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f56:	4b05      	ldr	r3, [pc, #20]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	4a04      	ldr	r2, [pc, #16]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004f5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f60:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004f62:	7fbb      	ldrb	r3, [r7, #30]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3720      	adds	r7, #32
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	40021000 	.word	0x40021000

08004f70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2b03      	cmp	r3, #3
 8004f84:	d018      	beq.n	8004fb8 <RCCEx_PLLSAI1_Config+0x48>
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d81f      	bhi.n	8004fca <RCCEx_PLLSAI1_Config+0x5a>
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d002      	beq.n	8004f94 <RCCEx_PLLSAI1_Config+0x24>
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d009      	beq.n	8004fa6 <RCCEx_PLLSAI1_Config+0x36>
 8004f92:	e01a      	b.n	8004fca <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f94:	4b65      	ldr	r3, [pc, #404]	; (800512c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d117      	bne.n	8004fd0 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fa4:	e014      	b.n	8004fd0 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fa6:	4b61      	ldr	r3, [pc, #388]	; (800512c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d110      	bne.n	8004fd4 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fb6:	e00d      	b.n	8004fd4 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004fb8:	4b5c      	ldr	r3, [pc, #368]	; (800512c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d109      	bne.n	8004fd8 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fc8:	e006      	b.n	8004fd8 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8004fce:	e004      	b.n	8004fda <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004fd0:	bf00      	nop
 8004fd2:	e002      	b.n	8004fda <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004fd4:	bf00      	nop
 8004fd6:	e000      	b.n	8004fda <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004fd8:	bf00      	nop
  }

  if (status == HAL_OK)
 8004fda:	7bfb      	ldrb	r3, [r7, #15]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f040 809f 	bne.w	8005120 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004fe2:	4b52      	ldr	r3, [pc, #328]	; (800512c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a51      	ldr	r2, [pc, #324]	; (800512c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004fe8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fee:	f7fc ff73 	bl	8001ed8 <HAL_GetTick>
 8004ff2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ff4:	e00f      	b.n	8005016 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ff6:	f7fc ff6f 	bl	8001ed8 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d908      	bls.n	8005016 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005004:	4b49      	ldr	r3, [pc, #292]	; (800512c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d009      	beq.n	8005024 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005014:	e006      	b.n	8005024 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005016:	4b45      	ldr	r3, [pc, #276]	; (800512c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1e9      	bne.n	8004ff6 <RCCEx_PLLSAI1_Config+0x86>
 8005022:	e000      	b.n	8005026 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8005024:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005026:	7bfb      	ldrb	r3, [r7, #15]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d179      	bne.n	8005120 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d116      	bne.n	8005060 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005032:	4b3e      	ldr	r3, [pc, #248]	; (800512c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005034:	691a      	ldr	r2, [r3, #16]
 8005036:	4b3e      	ldr	r3, [pc, #248]	; (8005130 <RCCEx_PLLSAI1_Config+0x1c0>)
 8005038:	4013      	ands	r3, r2
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6892      	ldr	r2, [r2, #8]
 800503e:	0211      	lsls	r1, r2, #8
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	68d2      	ldr	r2, [r2, #12]
 8005044:	06d2      	lsls	r2, r2, #27
 8005046:	4311      	orrs	r1, r2
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6852      	ldr	r2, [r2, #4]
 800504c:	3a01      	subs	r2, #1
 800504e:	0112      	lsls	r2, r2, #4
 8005050:	4311      	orrs	r1, r2
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	6812      	ldr	r2, [r2, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	4934      	ldr	r1, [pc, #208]	; (800512c <RCCEx_PLLSAI1_Config+0x1bc>)
 800505a:	4313      	orrs	r3, r2
 800505c:	610b      	str	r3, [r1, #16]
 800505e:	e033      	b.n	80050c8 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d118      	bne.n	8005098 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005066:	4b31      	ldr	r3, [pc, #196]	; (800512c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005068:	691a      	ldr	r2, [r3, #16]
 800506a:	4b32      	ldr	r3, [pc, #200]	; (8005134 <RCCEx_PLLSAI1_Config+0x1c4>)
 800506c:	4013      	ands	r3, r2
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	6892      	ldr	r2, [r2, #8]
 8005072:	0211      	lsls	r1, r2, #8
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	6912      	ldr	r2, [r2, #16]
 8005078:	0852      	lsrs	r2, r2, #1
 800507a:	3a01      	subs	r2, #1
 800507c:	0552      	lsls	r2, r2, #21
 800507e:	4311      	orrs	r1, r2
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6852      	ldr	r2, [r2, #4]
 8005084:	3a01      	subs	r2, #1
 8005086:	0112      	lsls	r2, r2, #4
 8005088:	4311      	orrs	r1, r2
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	6812      	ldr	r2, [r2, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	4926      	ldr	r1, [pc, #152]	; (800512c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005092:	4313      	orrs	r3, r2
 8005094:	610b      	str	r3, [r1, #16]
 8005096:	e017      	b.n	80050c8 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005098:	4b24      	ldr	r3, [pc, #144]	; (800512c <RCCEx_PLLSAI1_Config+0x1bc>)
 800509a:	691a      	ldr	r2, [r3, #16]
 800509c:	4b26      	ldr	r3, [pc, #152]	; (8005138 <RCCEx_PLLSAI1_Config+0x1c8>)
 800509e:	4013      	ands	r3, r2
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6892      	ldr	r2, [r2, #8]
 80050a4:	0211      	lsls	r1, r2, #8
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6952      	ldr	r2, [r2, #20]
 80050aa:	0852      	lsrs	r2, r2, #1
 80050ac:	3a01      	subs	r2, #1
 80050ae:	0652      	lsls	r2, r2, #25
 80050b0:	4311      	orrs	r1, r2
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	6852      	ldr	r2, [r2, #4]
 80050b6:	3a01      	subs	r2, #1
 80050b8:	0112      	lsls	r2, r2, #4
 80050ba:	4311      	orrs	r1, r2
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	6812      	ldr	r2, [r2, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	491a      	ldr	r1, [pc, #104]	; (800512c <RCCEx_PLLSAI1_Config+0x1bc>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80050c8:	4b18      	ldr	r3, [pc, #96]	; (800512c <RCCEx_PLLSAI1_Config+0x1bc>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a17      	ldr	r2, [pc, #92]	; (800512c <RCCEx_PLLSAI1_Config+0x1bc>)
 80050ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d4:	f7fc ff00 	bl	8001ed8 <HAL_GetTick>
 80050d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050da:	e00f      	b.n	80050fc <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050dc:	f7fc fefc 	bl	8001ed8 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d908      	bls.n	80050fc <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050ea:	4b10      	ldr	r3, [pc, #64]	; (800512c <RCCEx_PLLSAI1_Config+0x1bc>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d109      	bne.n	800510a <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80050fa:	e006      	b.n	800510a <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050fc:	4b0b      	ldr	r3, [pc, #44]	; (800512c <RCCEx_PLLSAI1_Config+0x1bc>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d0e9      	beq.n	80050dc <RCCEx_PLLSAI1_Config+0x16c>
 8005108:	e000      	b.n	800510c <RCCEx_PLLSAI1_Config+0x19c>
          break;
 800510a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800510c:	7bfb      	ldrb	r3, [r7, #15]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d106      	bne.n	8005120 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8005112:	4b06      	ldr	r3, [pc, #24]	; (800512c <RCCEx_PLLSAI1_Config+0x1bc>)
 8005114:	691a      	ldr	r2, [r3, #16]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	4904      	ldr	r1, [pc, #16]	; (800512c <RCCEx_PLLSAI1_Config+0x1bc>)
 800511c:	4313      	orrs	r3, r2
 800511e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005120:	7bfb      	ldrb	r3, [r7, #15]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	40021000 	.word	0x40021000
 8005130:	07ff800c 	.word	0x07ff800c
 8005134:	ff9f800c 	.word	0xff9f800c
 8005138:	f9ff800c 	.word	0xf9ff800c

0800513c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005146:	2300      	movs	r3, #0
 8005148:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b03      	cmp	r3, #3
 8005150:	d018      	beq.n	8005184 <RCCEx_PLLSAI2_Config+0x48>
 8005152:	2b03      	cmp	r3, #3
 8005154:	d81f      	bhi.n	8005196 <RCCEx_PLLSAI2_Config+0x5a>
 8005156:	2b01      	cmp	r3, #1
 8005158:	d002      	beq.n	8005160 <RCCEx_PLLSAI2_Config+0x24>
 800515a:	2b02      	cmp	r3, #2
 800515c:	d009      	beq.n	8005172 <RCCEx_PLLSAI2_Config+0x36>
 800515e:	e01a      	b.n	8005196 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005160:	4b4a      	ldr	r3, [pc, #296]	; (800528c <RCCEx_PLLSAI2_Config+0x150>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d117      	bne.n	800519c <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005170:	e014      	b.n	800519c <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005172:	4b46      	ldr	r3, [pc, #280]	; (800528c <RCCEx_PLLSAI2_Config+0x150>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800517a:	2b00      	cmp	r3, #0
 800517c:	d110      	bne.n	80051a0 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005182:	e00d      	b.n	80051a0 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005184:	4b41      	ldr	r3, [pc, #260]	; (800528c <RCCEx_PLLSAI2_Config+0x150>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d109      	bne.n	80051a4 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005194:	e006      	b.n	80051a4 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	73fb      	strb	r3, [r7, #15]
      break;
 800519a:	e004      	b.n	80051a6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800519c:	bf00      	nop
 800519e:	e002      	b.n	80051a6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80051a0:	bf00      	nop
 80051a2:	e000      	b.n	80051a6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80051a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80051a6:	7bfb      	ldrb	r3, [r7, #15]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d169      	bne.n	8005280 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80051ac:	4b37      	ldr	r3, [pc, #220]	; (800528c <RCCEx_PLLSAI2_Config+0x150>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a36      	ldr	r2, [pc, #216]	; (800528c <RCCEx_PLLSAI2_Config+0x150>)
 80051b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051b8:	f7fc fe8e 	bl	8001ed8 <HAL_GetTick>
 80051bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051be:	e00f      	b.n	80051e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80051c0:	f7fc fe8a 	bl	8001ed8 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d908      	bls.n	80051e0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051ce:	4b2f      	ldr	r3, [pc, #188]	; (800528c <RCCEx_PLLSAI2_Config+0x150>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d009      	beq.n	80051ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051de:	e006      	b.n	80051ee <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051e0:	4b2a      	ldr	r3, [pc, #168]	; (800528c <RCCEx_PLLSAI2_Config+0x150>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1e9      	bne.n	80051c0 <RCCEx_PLLSAI2_Config+0x84>
 80051ec:	e000      	b.n	80051f0 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80051ee:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80051f0:	7bfb      	ldrb	r3, [r7, #15]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d144      	bne.n	8005280 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d115      	bne.n	8005228 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80051fc:	4b23      	ldr	r3, [pc, #140]	; (800528c <RCCEx_PLLSAI2_Config+0x150>)
 80051fe:	695a      	ldr	r2, [r3, #20]
 8005200:	4b23      	ldr	r3, [pc, #140]	; (8005290 <RCCEx_PLLSAI2_Config+0x154>)
 8005202:	4013      	ands	r3, r2
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	6892      	ldr	r2, [r2, #8]
 8005208:	0211      	lsls	r1, r2, #8
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	68d2      	ldr	r2, [r2, #12]
 800520e:	06d2      	lsls	r2, r2, #27
 8005210:	4311      	orrs	r1, r2
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	6852      	ldr	r2, [r2, #4]
 8005216:	3a01      	subs	r2, #1
 8005218:	0112      	lsls	r2, r2, #4
 800521a:	4311      	orrs	r1, r2
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6812      	ldr	r2, [r2, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	491a      	ldr	r1, [pc, #104]	; (800528c <RCCEx_PLLSAI2_Config+0x150>)
 8005224:	4313      	orrs	r3, r2
 8005226:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005228:	4b18      	ldr	r3, [pc, #96]	; (800528c <RCCEx_PLLSAI2_Config+0x150>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a17      	ldr	r2, [pc, #92]	; (800528c <RCCEx_PLLSAI2_Config+0x150>)
 800522e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005232:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005234:	f7fc fe50 	bl	8001ed8 <HAL_GetTick>
 8005238:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800523a:	e00f      	b.n	800525c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800523c:	f7fc fe4c 	bl	8001ed8 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d908      	bls.n	800525c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800524a:	4b10      	ldr	r3, [pc, #64]	; (800528c <RCCEx_PLLSAI2_Config+0x150>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d109      	bne.n	800526a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800525a:	e006      	b.n	800526a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800525c:	4b0b      	ldr	r3, [pc, #44]	; (800528c <RCCEx_PLLSAI2_Config+0x150>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0e9      	beq.n	800523c <RCCEx_PLLSAI2_Config+0x100>
 8005268:	e000      	b.n	800526c <RCCEx_PLLSAI2_Config+0x130>
          break;
 800526a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800526c:	7bfb      	ldrb	r3, [r7, #15]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d106      	bne.n	8005280 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8005272:	4b06      	ldr	r3, [pc, #24]	; (800528c <RCCEx_PLLSAI2_Config+0x150>)
 8005274:	695a      	ldr	r2, [r3, #20]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	4904      	ldr	r1, [pc, #16]	; (800528c <RCCEx_PLLSAI2_Config+0x150>)
 800527c:	4313      	orrs	r3, r2
 800527e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005280:	7bfb      	ldrb	r3, [r7, #15]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	40021000 	.word	0x40021000
 8005290:	07ff800c 	.word	0x07ff800c

08005294 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d066      	beq.n	8005374 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d106      	bne.n	80052c0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7fc f9ee 	bl	800169c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f003 0310 	and.w	r3, r3, #16
 80052d2:	2b10      	cmp	r3, #16
 80052d4:	d045      	beq.n	8005362 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052d6:	4b2a      	ldr	r3, [pc, #168]	; (8005380 <HAL_RTC_Init+0xec>)
 80052d8:	22ca      	movs	r2, #202	; 0xca
 80052da:	625a      	str	r2, [r3, #36]	; 0x24
 80052dc:	4b28      	ldr	r3, [pc, #160]	; (8005380 <HAL_RTC_Init+0xec>)
 80052de:	2253      	movs	r2, #83	; 0x53
 80052e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f872 	bl	80053cc <RTC_EnterInitMode>
 80052e8:	4603      	mov	r3, r0
 80052ea:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80052ec:	7bfb      	ldrb	r3, [r7, #15]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d121      	bne.n	8005336 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80052f2:	4b23      	ldr	r3, [pc, #140]	; (8005380 <HAL_RTC_Init+0xec>)
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	4a22      	ldr	r2, [pc, #136]	; (8005380 <HAL_RTC_Init+0xec>)
 80052f8:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80052fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005300:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005302:	4b1f      	ldr	r3, [pc, #124]	; (8005380 <HAL_RTC_Init+0xec>)
 8005304:	699a      	ldr	r2, [r3, #24]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6859      	ldr	r1, [r3, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	4319      	orrs	r1, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	430b      	orrs	r3, r1
 8005316:	491a      	ldr	r1, [pc, #104]	; (8005380 <HAL_RTC_Init+0xec>)
 8005318:	4313      	orrs	r3, r2
 800531a:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68da      	ldr	r2, [r3, #12]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	041b      	lsls	r3, r3, #16
 8005326:	4916      	ldr	r1, [pc, #88]	; (8005380 <HAL_RTC_Init+0xec>)
 8005328:	4313      	orrs	r3, r2
 800532a:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f881 	bl	8005434 <RTC_ExitInitMode>
 8005332:	4603      	mov	r3, r0
 8005334:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8005336:	7bfb      	ldrb	r3, [r7, #15]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10e      	bne.n	800535a <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 800533c:	4b10      	ldr	r3, [pc, #64]	; (8005380 <HAL_RTC_Init+0xec>)
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a19      	ldr	r1, [r3, #32]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	4319      	orrs	r1, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	430b      	orrs	r3, r1
 8005354:	490a      	ldr	r1, [pc, #40]	; (8005380 <HAL_RTC_Init+0xec>)
 8005356:	4313      	orrs	r3, r2
 8005358:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800535a:	4b09      	ldr	r3, [pc, #36]	; (8005380 <HAL_RTC_Init+0xec>)
 800535c:	22ff      	movs	r2, #255	; 0xff
 800535e:	625a      	str	r2, [r3, #36]	; 0x24
 8005360:	e001      	b.n	8005366 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005362:	2300      	movs	r3, #0
 8005364:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005366:	7bfb      	ldrb	r3, [r7, #15]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d103      	bne.n	8005374 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8005374:	7bfb      	ldrb	r3, [r7, #15]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	40002800 	.word	0x40002800

08005384 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 800538c:	4b0d      	ldr	r3, [pc, #52]	; (80053c4 <HAL_RTC_WaitForSynchro+0x40>)
 800538e:	4a0e      	ldr	r2, [pc, #56]	; (80053c8 <HAL_RTC_WaitForSynchro+0x44>)
 8005390:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005392:	f7fc fda1 	bl	8001ed8 <HAL_GetTick>
 8005396:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005398:	e009      	b.n	80053ae <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800539a:	f7fc fd9d 	bl	8001ed8 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053a8:	d901      	bls.n	80053ae <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e006      	b.n	80053bc <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80053ae:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <HAL_RTC_WaitForSynchro+0x40>)
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f003 0320 	and.w	r3, r3, #32
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d0ef      	beq.n	800539a <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	40002800 	.word	0x40002800
 80053c8:	0001005c 	.word	0x0001005c

080053cc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053d4:	2300      	movs	r3, #0
 80053d6:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80053d8:	4b15      	ldr	r3, [pc, #84]	; (8005430 <RTC_EnterInitMode+0x64>)
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d120      	bne.n	8005426 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80053e4:	4b12      	ldr	r3, [pc, #72]	; (8005430 <RTC_EnterInitMode+0x64>)
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	4a11      	ldr	r2, [pc, #68]	; (8005430 <RTC_EnterInitMode+0x64>)
 80053ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ee:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80053f0:	f7fc fd72 	bl	8001ed8 <HAL_GetTick>
 80053f4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80053f6:	e00d      	b.n	8005414 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80053f8:	f7fc fd6e 	bl	8001ed8 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005406:	d905      	bls.n	8005414 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2203      	movs	r2, #3
 8005410:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005414:	4b06      	ldr	r3, [pc, #24]	; (8005430 <RTC_EnterInitMode+0x64>)
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541c:	2b00      	cmp	r3, #0
 800541e:	d102      	bne.n	8005426 <RTC_EnterInitMode+0x5a>
 8005420:	7bfb      	ldrb	r3, [r7, #15]
 8005422:	2b03      	cmp	r3, #3
 8005424:	d1e8      	bne.n	80053f8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8005426:	7bfb      	ldrb	r3, [r7, #15]
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	40002800 	.word	0x40002800

08005434 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800543c:	2300      	movs	r3, #0
 800543e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005440:	4b1a      	ldr	r3, [pc, #104]	; (80054ac <RTC_ExitInitMode+0x78>)
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	4a19      	ldr	r2, [pc, #100]	; (80054ac <RTC_ExitInitMode+0x78>)
 8005446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800544a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800544c:	4b17      	ldr	r3, [pc, #92]	; (80054ac <RTC_ExitInitMode+0x78>)
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	f003 0320 	and.w	r3, r3, #32
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10c      	bne.n	8005472 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7ff ff93 	bl	8005384 <HAL_RTC_WaitForSynchro>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d01e      	beq.n	80054a2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2203      	movs	r2, #3
 8005468:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	73fb      	strb	r3, [r7, #15]
 8005470:	e017      	b.n	80054a2 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005472:	4b0e      	ldr	r3, [pc, #56]	; (80054ac <RTC_ExitInitMode+0x78>)
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	4a0d      	ldr	r2, [pc, #52]	; (80054ac <RTC_ExitInitMode+0x78>)
 8005478:	f023 0320 	bic.w	r3, r3, #32
 800547c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f7ff ff80 	bl	8005384 <HAL_RTC_WaitForSynchro>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d005      	beq.n	8005496 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2203      	movs	r2, #3
 800548e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005496:	4b05      	ldr	r3, [pc, #20]	; (80054ac <RTC_ExitInitMode+0x78>)
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	4a04      	ldr	r2, [pc, #16]	; (80054ac <RTC_ExitInitMode+0x78>)
 800549c:	f043 0320 	orr.w	r3, r3, #32
 80054a0:	6193      	str	r3, [r2, #24]
  }

  return status;
 80054a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	40002800 	.word	0x40002800

080054b0 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	490f      	ldr	r1, [pc, #60]	; (8005500 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	689a      	ldr	r2, [r3, #8]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	490c      	ldr	r1, [pc, #48]	; (8005504 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 80054d6:	4b0b      	ldr	r3, [pc, #44]	; (8005504 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	6919      	ldr	r1, [r3, #16]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	041b      	lsls	r3, r3, #16
 80054e8:	430b      	orrs	r3, r1
 80054ea:	4906      	ldr	r1, [pc, #24]	; (8005504 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	40002800 	.word	0x40002800
 8005504:	40003400 	.word	0x40003400

08005508 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e095      	b.n	8005646 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	2b00      	cmp	r3, #0
 8005520:	d108      	bne.n	8005534 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800552a:	d009      	beq.n	8005540 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	61da      	str	r2, [r3, #28]
 8005532:	e005      	b.n	8005540 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d106      	bne.n	8005560 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7fc f8dc 	bl	8001718 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005576:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005580:	d902      	bls.n	8005588 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005582:	2300      	movs	r3, #0
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	e002      	b.n	800558e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800558c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005596:	d007      	beq.n	80055a8 <HAL_SPI_Init+0xa0>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055a0:	d002      	beq.n	80055a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055b8:	431a      	orrs	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	431a      	orrs	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	431a      	orrs	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055d6:	431a      	orrs	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055e0:	431a      	orrs	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ea:	ea42 0103 	orr.w	r1, r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	0c1b      	lsrs	r3, r3, #16
 8005604:	f003 0204 	and.w	r2, r3, #4
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	f003 0310 	and.w	r3, r3, #16
 8005610:	431a      	orrs	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005616:	f003 0308 	and.w	r3, r3, #8
 800561a:	431a      	orrs	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005624:	ea42 0103 	orr.w	r1, r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b082      	sub	sp, #8
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e049      	b.n	80056f4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005666:	b2db      	uxtb	r3, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	d106      	bne.n	800567a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f841 	bl	80056fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2202      	movs	r2, #2
 800567e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	3304      	adds	r3, #4
 800568a:	4619      	mov	r1, r3
 800568c:	4610      	mov	r0, r2
 800568e:	f000 fb61 	bl	8005d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b01      	cmp	r3, #1
 8005722:	d001      	beq.n	8005728 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e04f      	b.n	80057c8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 0201 	orr.w	r2, r2, #1
 800573e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a23      	ldr	r2, [pc, #140]	; (80057d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d01d      	beq.n	8005786 <HAL_TIM_Base_Start_IT+0x76>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005752:	d018      	beq.n	8005786 <HAL_TIM_Base_Start_IT+0x76>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a1f      	ldr	r2, [pc, #124]	; (80057d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d013      	beq.n	8005786 <HAL_TIM_Base_Start_IT+0x76>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a1e      	ldr	r2, [pc, #120]	; (80057dc <HAL_TIM_Base_Start_IT+0xcc>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d00e      	beq.n	8005786 <HAL_TIM_Base_Start_IT+0x76>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a1c      	ldr	r2, [pc, #112]	; (80057e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d009      	beq.n	8005786 <HAL_TIM_Base_Start_IT+0x76>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a1b      	ldr	r2, [pc, #108]	; (80057e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d004      	beq.n	8005786 <HAL_TIM_Base_Start_IT+0x76>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a19      	ldr	r2, [pc, #100]	; (80057e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d115      	bne.n	80057b2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	4b17      	ldr	r3, [pc, #92]	; (80057ec <HAL_TIM_Base_Start_IT+0xdc>)
 800578e:	4013      	ands	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2b06      	cmp	r3, #6
 8005796:	d015      	beq.n	80057c4 <HAL_TIM_Base_Start_IT+0xb4>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800579e:	d011      	beq.n	80057c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0201 	orr.w	r2, r2, #1
 80057ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b0:	e008      	b.n	80057c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f042 0201 	orr.w	r2, r2, #1
 80057c0:	601a      	str	r2, [r3, #0]
 80057c2:	e000      	b.n	80057c6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	40012c00 	.word	0x40012c00
 80057d8:	40000400 	.word	0x40000400
 80057dc:	40000800 	.word	0x40000800
 80057e0:	40000c00 	.word	0x40000c00
 80057e4:	40013400 	.word	0x40013400
 80057e8:	40014000 	.word	0x40014000
 80057ec:	00010007 	.word	0x00010007

080057f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e049      	b.n	8005896 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d106      	bne.n	800581c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7fc f864 	bl	80018e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	3304      	adds	r3, #4
 800582c:	4619      	mov	r1, r3
 800582e:	4610      	mov	r0, r2
 8005830:	f000 fa90 	bl	8005d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3708      	adds	r7, #8
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b082      	sub	sp, #8
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d122      	bne.n	80058fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d11b      	bne.n	80058fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f06f 0202 	mvn.w	r2, #2
 80058ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	f003 0303 	and.w	r3, r3, #3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 fa19 	bl	8005d18 <HAL_TIM_IC_CaptureCallback>
 80058e6:	e005      	b.n	80058f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fa0b 	bl	8005d04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 fa1c 	bl	8005d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b04      	cmp	r3, #4
 8005906:	d122      	bne.n	800594e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f003 0304 	and.w	r3, r3, #4
 8005912:	2b04      	cmp	r3, #4
 8005914:	d11b      	bne.n	800594e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f06f 0204 	mvn.w	r2, #4
 800591e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005930:	2b00      	cmp	r3, #0
 8005932:	d003      	beq.n	800593c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f9ef 	bl	8005d18 <HAL_TIM_IC_CaptureCallback>
 800593a:	e005      	b.n	8005948 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 f9e1 	bl	8005d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f9f2 	bl	8005d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	f003 0308 	and.w	r3, r3, #8
 8005958:	2b08      	cmp	r3, #8
 800595a:	d122      	bne.n	80059a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f003 0308 	and.w	r3, r3, #8
 8005966:	2b08      	cmp	r3, #8
 8005968:	d11b      	bne.n	80059a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f06f 0208 	mvn.w	r2, #8
 8005972:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2204      	movs	r2, #4
 8005978:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	f003 0303 	and.w	r3, r3, #3
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f9c5 	bl	8005d18 <HAL_TIM_IC_CaptureCallback>
 800598e:	e005      	b.n	800599c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f9b7 	bl	8005d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f9c8 	bl	8005d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	f003 0310 	and.w	r3, r3, #16
 80059ac:	2b10      	cmp	r3, #16
 80059ae:	d122      	bne.n	80059f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f003 0310 	and.w	r3, r3, #16
 80059ba:	2b10      	cmp	r3, #16
 80059bc:	d11b      	bne.n	80059f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f06f 0210 	mvn.w	r2, #16
 80059c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2208      	movs	r2, #8
 80059cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69db      	ldr	r3, [r3, #28]
 80059d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f99b 	bl	8005d18 <HAL_TIM_IC_CaptureCallback>
 80059e2:	e005      	b.n	80059f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 f98d 	bl	8005d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f99e 	bl	8005d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d10e      	bne.n	8005a22 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d107      	bne.n	8005a22 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f06f 0201 	mvn.w	r2, #1
 8005a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7fb fc7b 	bl	8001318 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2c:	2b80      	cmp	r3, #128	; 0x80
 8005a2e:	d10e      	bne.n	8005a4e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a3a:	2b80      	cmp	r3, #128	; 0x80
 8005a3c:	d107      	bne.n	8005a4e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 fe25 	bl	8006698 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a5c:	d10e      	bne.n	8005a7c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a68:	2b80      	cmp	r3, #128	; 0x80
 8005a6a:	d107      	bne.n	8005a7c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fe18 	bl	80066ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a86:	2b40      	cmp	r3, #64	; 0x40
 8005a88:	d10e      	bne.n	8005aa8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a94:	2b40      	cmp	r3, #64	; 0x40
 8005a96:	d107      	bne.n	8005aa8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f94c 	bl	8005d40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	f003 0320 	and.w	r3, r3, #32
 8005ab2:	2b20      	cmp	r3, #32
 8005ab4:	d10e      	bne.n	8005ad4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	f003 0320 	and.w	r3, r3, #32
 8005ac0:	2b20      	cmp	r3, #32
 8005ac2:	d107      	bne.n	8005ad4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f06f 0220 	mvn.w	r2, #32
 8005acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fdd8 	bl	8006684 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ad4:	bf00      	nop
 8005ad6:	3708      	adds	r7, #8
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d101      	bne.n	8005afa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005af6:	2302      	movs	r3, #2
 8005af8:	e0ff      	b.n	8005cfa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b14      	cmp	r3, #20
 8005b06:	f200 80f0 	bhi.w	8005cea <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005b0a:	a201      	add	r2, pc, #4	; (adr r2, 8005b10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b10:	08005b65 	.word	0x08005b65
 8005b14:	08005ceb 	.word	0x08005ceb
 8005b18:	08005ceb 	.word	0x08005ceb
 8005b1c:	08005ceb 	.word	0x08005ceb
 8005b20:	08005ba5 	.word	0x08005ba5
 8005b24:	08005ceb 	.word	0x08005ceb
 8005b28:	08005ceb 	.word	0x08005ceb
 8005b2c:	08005ceb 	.word	0x08005ceb
 8005b30:	08005be7 	.word	0x08005be7
 8005b34:	08005ceb 	.word	0x08005ceb
 8005b38:	08005ceb 	.word	0x08005ceb
 8005b3c:	08005ceb 	.word	0x08005ceb
 8005b40:	08005c27 	.word	0x08005c27
 8005b44:	08005ceb 	.word	0x08005ceb
 8005b48:	08005ceb 	.word	0x08005ceb
 8005b4c:	08005ceb 	.word	0x08005ceb
 8005b50:	08005c69 	.word	0x08005c69
 8005b54:	08005ceb 	.word	0x08005ceb
 8005b58:	08005ceb 	.word	0x08005ceb
 8005b5c:	08005ceb 	.word	0x08005ceb
 8005b60:	08005ca9 	.word	0x08005ca9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68b9      	ldr	r1, [r7, #8]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 f98c 	bl	8005e88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	699a      	ldr	r2, [r3, #24]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f042 0208 	orr.w	r2, r2, #8
 8005b7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	699a      	ldr	r2, [r3, #24]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0204 	bic.w	r2, r2, #4
 8005b8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6999      	ldr	r1, [r3, #24]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	691a      	ldr	r2, [r3, #16]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	619a      	str	r2, [r3, #24]
      break;
 8005ba2:	e0a5      	b.n	8005cf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68b9      	ldr	r1, [r7, #8]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 f9fc 	bl	8005fa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	699a      	ldr	r2, [r3, #24]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	699a      	ldr	r2, [r3, #24]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6999      	ldr	r1, [r3, #24]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	021a      	lsls	r2, r3, #8
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	430a      	orrs	r2, r1
 8005be2:	619a      	str	r2, [r3, #24]
      break;
 8005be4:	e084      	b.n	8005cf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68b9      	ldr	r1, [r7, #8]
 8005bec:	4618      	mov	r0, r3
 8005bee:	f000 fa65 	bl	80060bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	69da      	ldr	r2, [r3, #28]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f042 0208 	orr.w	r2, r2, #8
 8005c00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	69da      	ldr	r2, [r3, #28]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 0204 	bic.w	r2, r2, #4
 8005c10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69d9      	ldr	r1, [r3, #28]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	691a      	ldr	r2, [r3, #16]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	61da      	str	r2, [r3, #28]
      break;
 8005c24:	e064      	b.n	8005cf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68b9      	ldr	r1, [r7, #8]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f000 facd 	bl	80061cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	69da      	ldr	r2, [r3, #28]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	69da      	ldr	r2, [r3, #28]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	69d9      	ldr	r1, [r3, #28]
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	021a      	lsls	r2, r3, #8
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	430a      	orrs	r2, r1
 8005c64:	61da      	str	r2, [r3, #28]
      break;
 8005c66:	e043      	b.n	8005cf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68b9      	ldr	r1, [r7, #8]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 fb16 	bl	80062a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f042 0208 	orr.w	r2, r2, #8
 8005c82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f022 0204 	bic.w	r2, r2, #4
 8005c92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	691a      	ldr	r2, [r3, #16]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ca6:	e023      	b.n	8005cf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68b9      	ldr	r1, [r7, #8]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f000 fb5a 	bl	8006368 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cc2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cd2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	021a      	lsls	r2, r3, #8
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ce8:	e002      	b.n	8005cf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	75fb      	strb	r3, [r7, #23]
      break;
 8005cee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3718      	adds	r7, #24
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop

08005d04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a40      	ldr	r2, [pc, #256]	; (8005e68 <TIM_Base_SetConfig+0x114>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d013      	beq.n	8005d94 <TIM_Base_SetConfig+0x40>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d72:	d00f      	beq.n	8005d94 <TIM_Base_SetConfig+0x40>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a3d      	ldr	r2, [pc, #244]	; (8005e6c <TIM_Base_SetConfig+0x118>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d00b      	beq.n	8005d94 <TIM_Base_SetConfig+0x40>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a3c      	ldr	r2, [pc, #240]	; (8005e70 <TIM_Base_SetConfig+0x11c>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d007      	beq.n	8005d94 <TIM_Base_SetConfig+0x40>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a3b      	ldr	r2, [pc, #236]	; (8005e74 <TIM_Base_SetConfig+0x120>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d003      	beq.n	8005d94 <TIM_Base_SetConfig+0x40>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a3a      	ldr	r2, [pc, #232]	; (8005e78 <TIM_Base_SetConfig+0x124>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d108      	bne.n	8005da6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a2f      	ldr	r2, [pc, #188]	; (8005e68 <TIM_Base_SetConfig+0x114>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d01f      	beq.n	8005dee <TIM_Base_SetConfig+0x9a>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db4:	d01b      	beq.n	8005dee <TIM_Base_SetConfig+0x9a>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a2c      	ldr	r2, [pc, #176]	; (8005e6c <TIM_Base_SetConfig+0x118>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d017      	beq.n	8005dee <TIM_Base_SetConfig+0x9a>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a2b      	ldr	r2, [pc, #172]	; (8005e70 <TIM_Base_SetConfig+0x11c>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d013      	beq.n	8005dee <TIM_Base_SetConfig+0x9a>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a2a      	ldr	r2, [pc, #168]	; (8005e74 <TIM_Base_SetConfig+0x120>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00f      	beq.n	8005dee <TIM_Base_SetConfig+0x9a>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a29      	ldr	r2, [pc, #164]	; (8005e78 <TIM_Base_SetConfig+0x124>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d00b      	beq.n	8005dee <TIM_Base_SetConfig+0x9a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a28      	ldr	r2, [pc, #160]	; (8005e7c <TIM_Base_SetConfig+0x128>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d007      	beq.n	8005dee <TIM_Base_SetConfig+0x9a>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a27      	ldr	r2, [pc, #156]	; (8005e80 <TIM_Base_SetConfig+0x12c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d003      	beq.n	8005dee <TIM_Base_SetConfig+0x9a>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a26      	ldr	r2, [pc, #152]	; (8005e84 <TIM_Base_SetConfig+0x130>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d108      	bne.n	8005e00 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	689a      	ldr	r2, [r3, #8]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a10      	ldr	r2, [pc, #64]	; (8005e68 <TIM_Base_SetConfig+0x114>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d00f      	beq.n	8005e4c <TIM_Base_SetConfig+0xf8>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a12      	ldr	r2, [pc, #72]	; (8005e78 <TIM_Base_SetConfig+0x124>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d00b      	beq.n	8005e4c <TIM_Base_SetConfig+0xf8>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a11      	ldr	r2, [pc, #68]	; (8005e7c <TIM_Base_SetConfig+0x128>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d007      	beq.n	8005e4c <TIM_Base_SetConfig+0xf8>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a10      	ldr	r2, [pc, #64]	; (8005e80 <TIM_Base_SetConfig+0x12c>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d003      	beq.n	8005e4c <TIM_Base_SetConfig+0xf8>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a0f      	ldr	r2, [pc, #60]	; (8005e84 <TIM_Base_SetConfig+0x130>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d103      	bne.n	8005e54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	691a      	ldr	r2, [r3, #16]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	615a      	str	r2, [r3, #20]
}
 8005e5a:	bf00      	nop
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	40012c00 	.word	0x40012c00
 8005e6c:	40000400 	.word	0x40000400
 8005e70:	40000800 	.word	0x40000800
 8005e74:	40000c00 	.word	0x40000c00
 8005e78:	40013400 	.word	0x40013400
 8005e7c:	40014000 	.word	0x40014000
 8005e80:	40014400 	.word	0x40014400
 8005e84:	40014800 	.word	0x40014800

08005e88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	f023 0201 	bic.w	r2, r3, #1
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 0303 	bic.w	r3, r3, #3
 8005ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f023 0302 	bic.w	r3, r3, #2
 8005ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a2c      	ldr	r2, [pc, #176]	; (8005f94 <TIM_OC1_SetConfig+0x10c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d00f      	beq.n	8005f08 <TIM_OC1_SetConfig+0x80>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a2b      	ldr	r2, [pc, #172]	; (8005f98 <TIM_OC1_SetConfig+0x110>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d00b      	beq.n	8005f08 <TIM_OC1_SetConfig+0x80>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a2a      	ldr	r2, [pc, #168]	; (8005f9c <TIM_OC1_SetConfig+0x114>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d007      	beq.n	8005f08 <TIM_OC1_SetConfig+0x80>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a29      	ldr	r2, [pc, #164]	; (8005fa0 <TIM_OC1_SetConfig+0x118>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d003      	beq.n	8005f08 <TIM_OC1_SetConfig+0x80>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a28      	ldr	r2, [pc, #160]	; (8005fa4 <TIM_OC1_SetConfig+0x11c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d10c      	bne.n	8005f22 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f023 0308 	bic.w	r3, r3, #8
 8005f0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f023 0304 	bic.w	r3, r3, #4
 8005f20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a1b      	ldr	r2, [pc, #108]	; (8005f94 <TIM_OC1_SetConfig+0x10c>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d00f      	beq.n	8005f4a <TIM_OC1_SetConfig+0xc2>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a1a      	ldr	r2, [pc, #104]	; (8005f98 <TIM_OC1_SetConfig+0x110>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d00b      	beq.n	8005f4a <TIM_OC1_SetConfig+0xc2>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a19      	ldr	r2, [pc, #100]	; (8005f9c <TIM_OC1_SetConfig+0x114>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d007      	beq.n	8005f4a <TIM_OC1_SetConfig+0xc2>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a18      	ldr	r2, [pc, #96]	; (8005fa0 <TIM_OC1_SetConfig+0x118>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d003      	beq.n	8005f4a <TIM_OC1_SetConfig+0xc2>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a17      	ldr	r2, [pc, #92]	; (8005fa4 <TIM_OC1_SetConfig+0x11c>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d111      	bne.n	8005f6e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	621a      	str	r2, [r3, #32]
}
 8005f88:	bf00      	nop
 8005f8a:	371c      	adds	r7, #28
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr
 8005f94:	40012c00 	.word	0x40012c00
 8005f98:	40013400 	.word	0x40013400
 8005f9c:	40014000 	.word	0x40014000
 8005fa0:	40014400 	.word	0x40014400
 8005fa4:	40014800 	.word	0x40014800

08005fa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b087      	sub	sp, #28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	f023 0210 	bic.w	r2, r3, #16
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	021b      	lsls	r3, r3, #8
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f023 0320 	bic.w	r3, r3, #32
 8005ff6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	011b      	lsls	r3, r3, #4
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	4313      	orrs	r3, r2
 8006002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a28      	ldr	r2, [pc, #160]	; (80060a8 <TIM_OC2_SetConfig+0x100>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d003      	beq.n	8006014 <TIM_OC2_SetConfig+0x6c>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a27      	ldr	r2, [pc, #156]	; (80060ac <TIM_OC2_SetConfig+0x104>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d10d      	bne.n	8006030 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800601a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	011b      	lsls	r3, r3, #4
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	4313      	orrs	r3, r2
 8006026:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800602e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a1d      	ldr	r2, [pc, #116]	; (80060a8 <TIM_OC2_SetConfig+0x100>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d00f      	beq.n	8006058 <TIM_OC2_SetConfig+0xb0>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a1c      	ldr	r2, [pc, #112]	; (80060ac <TIM_OC2_SetConfig+0x104>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d00b      	beq.n	8006058 <TIM_OC2_SetConfig+0xb0>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a1b      	ldr	r2, [pc, #108]	; (80060b0 <TIM_OC2_SetConfig+0x108>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d007      	beq.n	8006058 <TIM_OC2_SetConfig+0xb0>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a1a      	ldr	r2, [pc, #104]	; (80060b4 <TIM_OC2_SetConfig+0x10c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d003      	beq.n	8006058 <TIM_OC2_SetConfig+0xb0>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a19      	ldr	r2, [pc, #100]	; (80060b8 <TIM_OC2_SetConfig+0x110>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d113      	bne.n	8006080 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800605e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006066:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	4313      	orrs	r3, r2
 8006072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	4313      	orrs	r3, r2
 800607e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	621a      	str	r2, [r3, #32]
}
 800609a:	bf00      	nop
 800609c:	371c      	adds	r7, #28
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	40012c00 	.word	0x40012c00
 80060ac:	40013400 	.word	0x40013400
 80060b0:	40014000 	.word	0x40014000
 80060b4:	40014400 	.word	0x40014400
 80060b8:	40014800 	.word	0x40014800

080060bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060bc:	b480      	push	{r7}
 80060be:	b087      	sub	sp, #28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f023 0303 	bic.w	r3, r3, #3
 80060f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	021b      	lsls	r3, r3, #8
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	4313      	orrs	r3, r2
 8006114:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a27      	ldr	r2, [pc, #156]	; (80061b8 <TIM_OC3_SetConfig+0xfc>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d003      	beq.n	8006126 <TIM_OC3_SetConfig+0x6a>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a26      	ldr	r2, [pc, #152]	; (80061bc <TIM_OC3_SetConfig+0x100>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d10d      	bne.n	8006142 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800612c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	021b      	lsls	r3, r3, #8
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	4313      	orrs	r3, r2
 8006138:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006140:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a1c      	ldr	r2, [pc, #112]	; (80061b8 <TIM_OC3_SetConfig+0xfc>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d00f      	beq.n	800616a <TIM_OC3_SetConfig+0xae>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a1b      	ldr	r2, [pc, #108]	; (80061bc <TIM_OC3_SetConfig+0x100>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d00b      	beq.n	800616a <TIM_OC3_SetConfig+0xae>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a1a      	ldr	r2, [pc, #104]	; (80061c0 <TIM_OC3_SetConfig+0x104>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d007      	beq.n	800616a <TIM_OC3_SetConfig+0xae>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a19      	ldr	r2, [pc, #100]	; (80061c4 <TIM_OC3_SetConfig+0x108>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d003      	beq.n	800616a <TIM_OC3_SetConfig+0xae>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a18      	ldr	r2, [pc, #96]	; (80061c8 <TIM_OC3_SetConfig+0x10c>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d113      	bne.n	8006192 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	4313      	orrs	r3, r2
 8006184:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	011b      	lsls	r3, r3, #4
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	621a      	str	r2, [r3, #32]
}
 80061ac:	bf00      	nop
 80061ae:	371c      	adds	r7, #28
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	40012c00 	.word	0x40012c00
 80061bc:	40013400 	.word	0x40013400
 80061c0:	40014000 	.word	0x40014000
 80061c4:	40014400 	.word	0x40014400
 80061c8:	40014800 	.word	0x40014800

080061cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b087      	sub	sp, #28
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	021b      	lsls	r3, r3, #8
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4313      	orrs	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800621a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	031b      	lsls	r3, r3, #12
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	4313      	orrs	r3, r2
 8006226:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a18      	ldr	r2, [pc, #96]	; (800628c <TIM_OC4_SetConfig+0xc0>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d00f      	beq.n	8006250 <TIM_OC4_SetConfig+0x84>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a17      	ldr	r2, [pc, #92]	; (8006290 <TIM_OC4_SetConfig+0xc4>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d00b      	beq.n	8006250 <TIM_OC4_SetConfig+0x84>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a16      	ldr	r2, [pc, #88]	; (8006294 <TIM_OC4_SetConfig+0xc8>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d007      	beq.n	8006250 <TIM_OC4_SetConfig+0x84>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a15      	ldr	r2, [pc, #84]	; (8006298 <TIM_OC4_SetConfig+0xcc>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d003      	beq.n	8006250 <TIM_OC4_SetConfig+0x84>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a14      	ldr	r2, [pc, #80]	; (800629c <TIM_OC4_SetConfig+0xd0>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d109      	bne.n	8006264 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006256:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	695b      	ldr	r3, [r3, #20]
 800625c:	019b      	lsls	r3, r3, #6
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	4313      	orrs	r3, r2
 8006262:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	621a      	str	r2, [r3, #32]
}
 800627e:	bf00      	nop
 8006280:	371c      	adds	r7, #28
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	40012c00 	.word	0x40012c00
 8006290:	40013400 	.word	0x40013400
 8006294:	40014000 	.word	0x40014000
 8006298:	40014400 	.word	0x40014400
 800629c:	40014800 	.word	0x40014800

080062a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b087      	sub	sp, #28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	4313      	orrs	r3, r2
 80062dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80062e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	041b      	lsls	r3, r3, #16
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a17      	ldr	r2, [pc, #92]	; (8006354 <TIM_OC5_SetConfig+0xb4>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d00f      	beq.n	800631a <TIM_OC5_SetConfig+0x7a>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a16      	ldr	r2, [pc, #88]	; (8006358 <TIM_OC5_SetConfig+0xb8>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d00b      	beq.n	800631a <TIM_OC5_SetConfig+0x7a>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a15      	ldr	r2, [pc, #84]	; (800635c <TIM_OC5_SetConfig+0xbc>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d007      	beq.n	800631a <TIM_OC5_SetConfig+0x7a>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a14      	ldr	r2, [pc, #80]	; (8006360 <TIM_OC5_SetConfig+0xc0>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d003      	beq.n	800631a <TIM_OC5_SetConfig+0x7a>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a13      	ldr	r2, [pc, #76]	; (8006364 <TIM_OC5_SetConfig+0xc4>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d109      	bne.n	800632e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006320:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	021b      	lsls	r3, r3, #8
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	4313      	orrs	r3, r2
 800632c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	621a      	str	r2, [r3, #32]
}
 8006348:	bf00      	nop
 800634a:	371c      	adds	r7, #28
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr
 8006354:	40012c00 	.word	0x40012c00
 8006358:	40013400 	.word	0x40013400
 800635c:	40014000 	.word	0x40014000
 8006360:	40014400 	.word	0x40014400
 8006364:	40014800 	.word	0x40014800

08006368 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006368:	b480      	push	{r7}
 800636a:	b087      	sub	sp, #28
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800638e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800639a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	021b      	lsls	r3, r3, #8
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80063ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	051b      	lsls	r3, r3, #20
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a18      	ldr	r2, [pc, #96]	; (8006420 <TIM_OC6_SetConfig+0xb8>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d00f      	beq.n	80063e4 <TIM_OC6_SetConfig+0x7c>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a17      	ldr	r2, [pc, #92]	; (8006424 <TIM_OC6_SetConfig+0xbc>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d00b      	beq.n	80063e4 <TIM_OC6_SetConfig+0x7c>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a16      	ldr	r2, [pc, #88]	; (8006428 <TIM_OC6_SetConfig+0xc0>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d007      	beq.n	80063e4 <TIM_OC6_SetConfig+0x7c>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a15      	ldr	r2, [pc, #84]	; (800642c <TIM_OC6_SetConfig+0xc4>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d003      	beq.n	80063e4 <TIM_OC6_SetConfig+0x7c>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a14      	ldr	r2, [pc, #80]	; (8006430 <TIM_OC6_SetConfig+0xc8>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d109      	bne.n	80063f8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	029b      	lsls	r3, r3, #10
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	621a      	str	r2, [r3, #32]
}
 8006412:	bf00      	nop
 8006414:	371c      	adds	r7, #28
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	40012c00 	.word	0x40012c00
 8006424:	40013400 	.word	0x40013400
 8006428:	40014000 	.word	0x40014000
 800642c:	40014400 	.word	0x40014400
 8006430:	40014800 	.word	0x40014800

08006434 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006444:	2b01      	cmp	r3, #1
 8006446:	d101      	bne.n	800644c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006448:	2302      	movs	r3, #2
 800644a:	e068      	b.n	800651e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2202      	movs	r2, #2
 8006458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a2e      	ldr	r2, [pc, #184]	; (800652c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d004      	beq.n	8006480 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a2d      	ldr	r2, [pc, #180]	; (8006530 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d108      	bne.n	8006492 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006486:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	4313      	orrs	r3, r2
 8006490:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006498:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a1e      	ldr	r2, [pc, #120]	; (800652c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d01d      	beq.n	80064f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064be:	d018      	beq.n	80064f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a1b      	ldr	r2, [pc, #108]	; (8006534 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d013      	beq.n	80064f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a1a      	ldr	r2, [pc, #104]	; (8006538 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d00e      	beq.n	80064f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a18      	ldr	r2, [pc, #96]	; (800653c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d009      	beq.n	80064f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a13      	ldr	r2, [pc, #76]	; (8006530 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d004      	beq.n	80064f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a14      	ldr	r2, [pc, #80]	; (8006540 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d10c      	bne.n	800650c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	4313      	orrs	r3, r2
 8006502:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	40012c00 	.word	0x40012c00
 8006530:	40013400 	.word	0x40013400
 8006534:	40000400 	.word	0x40000400
 8006538:	40000800 	.word	0x40000800
 800653c:	40000c00 	.word	0x40000c00
 8006540:	40014000 	.word	0x40014000

08006544 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800654e:	2300      	movs	r3, #0
 8006550:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006558:	2b01      	cmp	r3, #1
 800655a:	d101      	bne.n	8006560 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800655c:	2302      	movs	r3, #2
 800655e:	e087      	b.n	8006670 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	4313      	orrs	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	4313      	orrs	r3, r2
 8006582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	4313      	orrs	r3, r2
 8006590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4313      	orrs	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c6:	4313      	orrs	r3, r2
 80065c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	041b      	lsls	r3, r3, #16
 80065d6:	4313      	orrs	r3, r2
 80065d8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a27      	ldr	r2, [pc, #156]	; (800667c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d004      	beq.n	80065ee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a25      	ldr	r2, [pc, #148]	; (8006680 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d106      	bne.n	80065fc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	69db      	ldr	r3, [r3, #28]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a1e      	ldr	r2, [pc, #120]	; (800667c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d004      	beq.n	8006610 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a1d      	ldr	r2, [pc, #116]	; (8006680 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d126      	bne.n	800665e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661a:	051b      	lsls	r3, r3, #20
 800661c:	4313      	orrs	r3, r2
 800661e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	4313      	orrs	r3, r2
 800662c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	4313      	orrs	r3, r2
 800663a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a0e      	ldr	r2, [pc, #56]	; (800667c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d004      	beq.n	8006650 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a0d      	ldr	r2, [pc, #52]	; (8006680 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d106      	bne.n	800665e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665a:	4313      	orrs	r3, r2
 800665c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3714      	adds	r7, #20
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	40012c00 	.word	0x40012c00
 8006680:	40013400 	.word	0x40013400

08006684 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e042      	b.n	8006758 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d106      	bne.n	80066ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f7fa fee7 	bl	80014b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2224      	movs	r2, #36	; 0x24
 80066ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f022 0201 	bic.w	r2, r2, #1
 8006700:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fbbc 	bl	8006e80 <UART_SetConfig>
 8006708:	4603      	mov	r3, r0
 800670a:	2b01      	cmp	r3, #1
 800670c:	d101      	bne.n	8006712 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e022      	b.n	8006758 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006716:	2b00      	cmp	r3, #0
 8006718:	d002      	beq.n	8006720 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 feb0 	bl	8007480 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800672e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	689a      	ldr	r2, [r3, #8]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800673e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f042 0201 	orr.w	r2, r2, #1
 800674e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 ff37 	bl	80075c4 <UART_CheckIdleState>
 8006756:	4603      	mov	r3, r0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b08a      	sub	sp, #40	; 0x28
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	4613      	mov	r3, r2
 800676c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006774:	2b20      	cmp	r3, #32
 8006776:	d137      	bne.n	80067e8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d002      	beq.n	8006784 <HAL_UART_Receive_IT+0x24>
 800677e:	88fb      	ldrh	r3, [r7, #6]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d101      	bne.n	8006788 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e030      	b.n	80067ea <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a18      	ldr	r2, [pc, #96]	; (80067f4 <HAL_UART_Receive_IT+0x94>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d01f      	beq.n	80067d8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d018      	beq.n	80067d8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	e853 3f00 	ldrex	r3, [r3]
 80067b2:	613b      	str	r3, [r7, #16]
   return(result);
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80067ba:	627b      	str	r3, [r7, #36]	; 0x24
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	461a      	mov	r2, r3
 80067c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c4:	623b      	str	r3, [r7, #32]
 80067c6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c8:	69f9      	ldr	r1, [r7, #28]
 80067ca:	6a3a      	ldr	r2, [r7, #32]
 80067cc:	e841 2300 	strex	r3, r2, [r1]
 80067d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1e6      	bne.n	80067a6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80067d8:	88fb      	ldrh	r3, [r7, #6]
 80067da:	461a      	mov	r2, r3
 80067dc:	68b9      	ldr	r1, [r7, #8]
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f001 f802 	bl	80077e8 <UART_Start_Receive_IT>
 80067e4:	4603      	mov	r3, r0
 80067e6:	e000      	b.n	80067ea <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80067e8:	2302      	movs	r3, #2
  }
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3728      	adds	r7, #40	; 0x28
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	40008000 	.word	0x40008000

080067f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b0ba      	sub	sp, #232	; 0xe8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800681e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006822:	f640 030f 	movw	r3, #2063	; 0x80f
 8006826:	4013      	ands	r3, r2
 8006828:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800682c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006830:	2b00      	cmp	r3, #0
 8006832:	d11b      	bne.n	800686c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006838:	f003 0320 	and.w	r3, r3, #32
 800683c:	2b00      	cmp	r3, #0
 800683e:	d015      	beq.n	800686c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006844:	f003 0320 	and.w	r3, r3, #32
 8006848:	2b00      	cmp	r3, #0
 800684a:	d105      	bne.n	8006858 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800684c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d009      	beq.n	800686c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 82e3 	beq.w	8006e28 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	4798      	blx	r3
      }
      return;
 800686a:	e2dd      	b.n	8006e28 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800686c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 8123 	beq.w	8006abc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006876:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800687a:	4b8d      	ldr	r3, [pc, #564]	; (8006ab0 <HAL_UART_IRQHandler+0x2b8>)
 800687c:	4013      	ands	r3, r2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d106      	bne.n	8006890 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006882:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006886:	4b8b      	ldr	r3, [pc, #556]	; (8006ab4 <HAL_UART_IRQHandler+0x2bc>)
 8006888:	4013      	ands	r3, r2
 800688a:	2b00      	cmp	r3, #0
 800688c:	f000 8116 	beq.w	8006abc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	2b00      	cmp	r3, #0
 800689a:	d011      	beq.n	80068c0 <HAL_UART_IRQHandler+0xc8>
 800689c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00b      	beq.n	80068c0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2201      	movs	r2, #1
 80068ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068b6:	f043 0201 	orr.w	r2, r3, #1
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068c4:	f003 0302 	and.w	r3, r3, #2
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d011      	beq.n	80068f0 <HAL_UART_IRQHandler+0xf8>
 80068cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00b      	beq.n	80068f0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2202      	movs	r2, #2
 80068de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068e6:	f043 0204 	orr.w	r2, r3, #4
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f4:	f003 0304 	and.w	r3, r3, #4
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d011      	beq.n	8006920 <HAL_UART_IRQHandler+0x128>
 80068fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006900:	f003 0301 	and.w	r3, r3, #1
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00b      	beq.n	8006920 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2204      	movs	r2, #4
 800690e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006916:	f043 0202 	orr.w	r2, r3, #2
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006924:	f003 0308 	and.w	r3, r3, #8
 8006928:	2b00      	cmp	r3, #0
 800692a:	d017      	beq.n	800695c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800692c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006930:	f003 0320 	and.w	r3, r3, #32
 8006934:	2b00      	cmp	r3, #0
 8006936:	d105      	bne.n	8006944 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006938:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800693c:	4b5c      	ldr	r3, [pc, #368]	; (8006ab0 <HAL_UART_IRQHandler+0x2b8>)
 800693e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00b      	beq.n	800695c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2208      	movs	r2, #8
 800694a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006952:	f043 0208 	orr.w	r2, r3, #8
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800695c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006964:	2b00      	cmp	r3, #0
 8006966:	d012      	beq.n	800698e <HAL_UART_IRQHandler+0x196>
 8006968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800696c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00c      	beq.n	800698e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800697c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006984:	f043 0220 	orr.w	r2, r3, #32
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 8249 	beq.w	8006e2c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800699a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800699e:	f003 0320 	and.w	r3, r3, #32
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d013      	beq.n	80069ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80069a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069aa:	f003 0320 	and.w	r3, r3, #32
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d105      	bne.n	80069be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80069b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d007      	beq.n	80069ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d003      	beq.n	80069ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e2:	2b40      	cmp	r3, #64	; 0x40
 80069e4:	d005      	beq.n	80069f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80069e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d054      	beq.n	8006a9c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f001 f81a 	bl	8007a2c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a02:	2b40      	cmp	r3, #64	; 0x40
 8006a04:	d146      	bne.n	8006a94 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3308      	adds	r3, #8
 8006a0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a14:	e853 3f00 	ldrex	r3, [r3]
 8006a18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3308      	adds	r3, #8
 8006a2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a42:	e841 2300 	strex	r3, r2, [r1]
 8006a46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1d9      	bne.n	8006a06 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d017      	beq.n	8006a8c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a62:	4a15      	ldr	r2, [pc, #84]	; (8006ab8 <HAL_UART_IRQHandler+0x2c0>)
 8006a64:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7fc fb1b 	bl	80030a8 <HAL_DMA_Abort_IT>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d019      	beq.n	8006aac <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006a86:	4610      	mov	r0, r2
 8006a88:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a8a:	e00f      	b.n	8006aac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 f9e1 	bl	8006e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a92:	e00b      	b.n	8006aac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f9dd 	bl	8006e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a9a:	e007      	b.n	8006aac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f9d9 	bl	8006e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006aaa:	e1bf      	b.n	8006e2c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aac:	bf00      	nop
    return;
 8006aae:	e1bd      	b.n	8006e2c <HAL_UART_IRQHandler+0x634>
 8006ab0:	10000001 	.word	0x10000001
 8006ab4:	04000120 	.word	0x04000120
 8006ab8:	08007af9 	.word	0x08007af9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	f040 8153 	bne.w	8006d6c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aca:	f003 0310 	and.w	r3, r3, #16
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f000 814c 	beq.w	8006d6c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ad8:	f003 0310 	and.w	r3, r3, #16
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f000 8145 	beq.w	8006d6c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2210      	movs	r2, #16
 8006ae8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af4:	2b40      	cmp	r3, #64	; 0x40
 8006af6:	f040 80bb 	bne.w	8006c70 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 818f 	beq.w	8006e30 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	f080 8187 	bcs.w	8006e30 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0320 	and.w	r3, r3, #32
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f040 8087 	bne.w	8006c4e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b4c:	e853 3f00 	ldrex	r3, [r3]
 8006b50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	461a      	mov	r2, r3
 8006b66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006b6e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b7a:	e841 2300 	strex	r3, r2, [r1]
 8006b7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1da      	bne.n	8006b40 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	3308      	adds	r3, #8
 8006b90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b94:	e853 3f00 	ldrex	r3, [r3]
 8006b98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b9c:	f023 0301 	bic.w	r3, r3, #1
 8006ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	3308      	adds	r3, #8
 8006baa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006bae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006bb2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006bb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006bba:	e841 2300 	strex	r3, r2, [r1]
 8006bbe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006bc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1e1      	bne.n	8006b8a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	3308      	adds	r3, #8
 8006bcc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bd0:	e853 3f00 	ldrex	r3, [r3]
 8006bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006bd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	3308      	adds	r3, #8
 8006be6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006bea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006bec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006bf0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006bf2:	e841 2300 	strex	r3, r2, [r1]
 8006bf6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006bf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1e3      	bne.n	8006bc6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2220      	movs	r2, #32
 8006c02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c14:	e853 3f00 	ldrex	r3, [r3]
 8006c18:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c1c:	f023 0310 	bic.w	r3, r3, #16
 8006c20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	461a      	mov	r2, r3
 8006c2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c30:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c36:	e841 2300 	strex	r3, r2, [r1]
 8006c3a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1e4      	bne.n	8006c0c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7fc f9d1 	bl	8002ff0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2202      	movs	r2, #2
 8006c52:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f8fd 	bl	8006e68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c6e:	e0df      	b.n	8006e30 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 80d1 	beq.w	8006e34 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006c92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f000 80cc 	beq.w	8006e34 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca4:	e853 3f00 	ldrex	r3, [r3]
 8006ca8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8006cc0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006cc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cc6:	e841 2300 	strex	r3, r2, [r1]
 8006cca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1e4      	bne.n	8006c9c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	3308      	adds	r3, #8
 8006cd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	e853 3f00 	ldrex	r3, [r3]
 8006ce0:	623b      	str	r3, [r7, #32]
   return(result);
 8006ce2:	6a3b      	ldr	r3, [r7, #32]
 8006ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ce8:	f023 0301 	bic.w	r3, r3, #1
 8006cec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3308      	adds	r3, #8
 8006cf6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006cfa:	633a      	str	r2, [r7, #48]	; 0x30
 8006cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d02:	e841 2300 	strex	r3, r2, [r1]
 8006d06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1e1      	bne.n	8006cd2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2220      	movs	r2, #32
 8006d12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	e853 3f00 	ldrex	r3, [r3]
 8006d2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f023 0310 	bic.w	r3, r3, #16
 8006d36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006d44:	61fb      	str	r3, [r7, #28]
 8006d46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d48:	69b9      	ldr	r1, [r7, #24]
 8006d4a:	69fa      	ldr	r2, [r7, #28]
 8006d4c:	e841 2300 	strex	r3, r2, [r1]
 8006d50:	617b      	str	r3, [r7, #20]
   return(result);
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1e4      	bne.n	8006d22 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d62:	4619      	mov	r1, r3
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f87f 	bl	8006e68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d6a:	e063      	b.n	8006e34 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00e      	beq.n	8006d96 <HAL_UART_IRQHandler+0x59e>
 8006d78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d008      	beq.n	8006d96 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006d8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f001 fc10 	bl	80085b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d94:	e051      	b.n	8006e3a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d014      	beq.n	8006dcc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d105      	bne.n	8006dba <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006db2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d008      	beq.n	8006dcc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d03a      	beq.n	8006e38 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	4798      	blx	r3
    }
    return;
 8006dca:	e035      	b.n	8006e38 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d009      	beq.n	8006dec <HAL_UART_IRQHandler+0x5f4>
 8006dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d003      	beq.n	8006dec <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fe9d 	bl	8007b24 <UART_EndTransmit_IT>
    return;
 8006dea:	e026      	b.n	8006e3a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006df0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d009      	beq.n	8006e0c <HAL_UART_IRQHandler+0x614>
 8006df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dfc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d003      	beq.n	8006e0c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f001 fbe9 	bl	80085dc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e0a:	e016      	b.n	8006e3a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d010      	beq.n	8006e3a <HAL_UART_IRQHandler+0x642>
 8006e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	da0c      	bge.n	8006e3a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f001 fbd1 	bl	80085c8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e26:	e008      	b.n	8006e3a <HAL_UART_IRQHandler+0x642>
      return;
 8006e28:	bf00      	nop
 8006e2a:	e006      	b.n	8006e3a <HAL_UART_IRQHandler+0x642>
    return;
 8006e2c:	bf00      	nop
 8006e2e:	e004      	b.n	8006e3a <HAL_UART_IRQHandler+0x642>
      return;
 8006e30:	bf00      	nop
 8006e32:	e002      	b.n	8006e3a <HAL_UART_IRQHandler+0x642>
      return;
 8006e34:	bf00      	nop
 8006e36:	e000      	b.n	8006e3a <HAL_UART_IRQHandler+0x642>
    return;
 8006e38:	bf00      	nop
  }
}
 8006e3a:	37e8      	adds	r7, #232	; 0xe8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	460b      	mov	r3, r1
 8006e72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e84:	b08c      	sub	sp, #48	; 0x30
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	689a      	ldr	r2, [r3, #8]
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	431a      	orrs	r2, r3
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	431a      	orrs	r2, r3
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	69db      	ldr	r3, [r3, #28]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	4baa      	ldr	r3, [pc, #680]	; (8007158 <UART_SetConfig+0x2d8>)
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	6812      	ldr	r2, [r2, #0]
 8006eb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006eb8:	430b      	orrs	r3, r1
 8006eba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	68da      	ldr	r2, [r3, #12]
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a9f      	ldr	r2, [pc, #636]	; (800715c <UART_SetConfig+0x2dc>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d004      	beq.n	8006eec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006ef6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	6812      	ldr	r2, [r2, #0]
 8006efe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f00:	430b      	orrs	r3, r1
 8006f02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0a:	f023 010f 	bic.w	r1, r3, #15
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	430a      	orrs	r2, r1
 8006f18:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a90      	ldr	r2, [pc, #576]	; (8007160 <UART_SetConfig+0x2e0>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d125      	bne.n	8006f70 <UART_SetConfig+0xf0>
 8006f24:	4b8f      	ldr	r3, [pc, #572]	; (8007164 <UART_SetConfig+0x2e4>)
 8006f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f2a:	f003 0303 	and.w	r3, r3, #3
 8006f2e:	2b03      	cmp	r3, #3
 8006f30:	d81a      	bhi.n	8006f68 <UART_SetConfig+0xe8>
 8006f32:	a201      	add	r2, pc, #4	; (adr r2, 8006f38 <UART_SetConfig+0xb8>)
 8006f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f38:	08006f49 	.word	0x08006f49
 8006f3c:	08006f59 	.word	0x08006f59
 8006f40:	08006f51 	.word	0x08006f51
 8006f44:	08006f61 	.word	0x08006f61
 8006f48:	2301      	movs	r3, #1
 8006f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f4e:	e116      	b.n	800717e <UART_SetConfig+0x2fe>
 8006f50:	2302      	movs	r3, #2
 8006f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f56:	e112      	b.n	800717e <UART_SetConfig+0x2fe>
 8006f58:	2304      	movs	r3, #4
 8006f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f5e:	e10e      	b.n	800717e <UART_SetConfig+0x2fe>
 8006f60:	2308      	movs	r3, #8
 8006f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f66:	e10a      	b.n	800717e <UART_SetConfig+0x2fe>
 8006f68:	2310      	movs	r3, #16
 8006f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f6e:	e106      	b.n	800717e <UART_SetConfig+0x2fe>
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a7c      	ldr	r2, [pc, #496]	; (8007168 <UART_SetConfig+0x2e8>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d138      	bne.n	8006fec <UART_SetConfig+0x16c>
 8006f7a:	4b7a      	ldr	r3, [pc, #488]	; (8007164 <UART_SetConfig+0x2e4>)
 8006f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f80:	f003 030c 	and.w	r3, r3, #12
 8006f84:	2b0c      	cmp	r3, #12
 8006f86:	d82d      	bhi.n	8006fe4 <UART_SetConfig+0x164>
 8006f88:	a201      	add	r2, pc, #4	; (adr r2, 8006f90 <UART_SetConfig+0x110>)
 8006f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8e:	bf00      	nop
 8006f90:	08006fc5 	.word	0x08006fc5
 8006f94:	08006fe5 	.word	0x08006fe5
 8006f98:	08006fe5 	.word	0x08006fe5
 8006f9c:	08006fe5 	.word	0x08006fe5
 8006fa0:	08006fd5 	.word	0x08006fd5
 8006fa4:	08006fe5 	.word	0x08006fe5
 8006fa8:	08006fe5 	.word	0x08006fe5
 8006fac:	08006fe5 	.word	0x08006fe5
 8006fb0:	08006fcd 	.word	0x08006fcd
 8006fb4:	08006fe5 	.word	0x08006fe5
 8006fb8:	08006fe5 	.word	0x08006fe5
 8006fbc:	08006fe5 	.word	0x08006fe5
 8006fc0:	08006fdd 	.word	0x08006fdd
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fca:	e0d8      	b.n	800717e <UART_SetConfig+0x2fe>
 8006fcc:	2302      	movs	r3, #2
 8006fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fd2:	e0d4      	b.n	800717e <UART_SetConfig+0x2fe>
 8006fd4:	2304      	movs	r3, #4
 8006fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fda:	e0d0      	b.n	800717e <UART_SetConfig+0x2fe>
 8006fdc:	2308      	movs	r3, #8
 8006fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fe2:	e0cc      	b.n	800717e <UART_SetConfig+0x2fe>
 8006fe4:	2310      	movs	r3, #16
 8006fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fea:	e0c8      	b.n	800717e <UART_SetConfig+0x2fe>
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a5e      	ldr	r2, [pc, #376]	; (800716c <UART_SetConfig+0x2ec>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d125      	bne.n	8007042 <UART_SetConfig+0x1c2>
 8006ff6:	4b5b      	ldr	r3, [pc, #364]	; (8007164 <UART_SetConfig+0x2e4>)
 8006ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ffc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007000:	2b30      	cmp	r3, #48	; 0x30
 8007002:	d016      	beq.n	8007032 <UART_SetConfig+0x1b2>
 8007004:	2b30      	cmp	r3, #48	; 0x30
 8007006:	d818      	bhi.n	800703a <UART_SetConfig+0x1ba>
 8007008:	2b20      	cmp	r3, #32
 800700a:	d00a      	beq.n	8007022 <UART_SetConfig+0x1a2>
 800700c:	2b20      	cmp	r3, #32
 800700e:	d814      	bhi.n	800703a <UART_SetConfig+0x1ba>
 8007010:	2b00      	cmp	r3, #0
 8007012:	d002      	beq.n	800701a <UART_SetConfig+0x19a>
 8007014:	2b10      	cmp	r3, #16
 8007016:	d008      	beq.n	800702a <UART_SetConfig+0x1aa>
 8007018:	e00f      	b.n	800703a <UART_SetConfig+0x1ba>
 800701a:	2300      	movs	r3, #0
 800701c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007020:	e0ad      	b.n	800717e <UART_SetConfig+0x2fe>
 8007022:	2302      	movs	r3, #2
 8007024:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007028:	e0a9      	b.n	800717e <UART_SetConfig+0x2fe>
 800702a:	2304      	movs	r3, #4
 800702c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007030:	e0a5      	b.n	800717e <UART_SetConfig+0x2fe>
 8007032:	2308      	movs	r3, #8
 8007034:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007038:	e0a1      	b.n	800717e <UART_SetConfig+0x2fe>
 800703a:	2310      	movs	r3, #16
 800703c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007040:	e09d      	b.n	800717e <UART_SetConfig+0x2fe>
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a4a      	ldr	r2, [pc, #296]	; (8007170 <UART_SetConfig+0x2f0>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d125      	bne.n	8007098 <UART_SetConfig+0x218>
 800704c:	4b45      	ldr	r3, [pc, #276]	; (8007164 <UART_SetConfig+0x2e4>)
 800704e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007052:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007056:	2bc0      	cmp	r3, #192	; 0xc0
 8007058:	d016      	beq.n	8007088 <UART_SetConfig+0x208>
 800705a:	2bc0      	cmp	r3, #192	; 0xc0
 800705c:	d818      	bhi.n	8007090 <UART_SetConfig+0x210>
 800705e:	2b80      	cmp	r3, #128	; 0x80
 8007060:	d00a      	beq.n	8007078 <UART_SetConfig+0x1f8>
 8007062:	2b80      	cmp	r3, #128	; 0x80
 8007064:	d814      	bhi.n	8007090 <UART_SetConfig+0x210>
 8007066:	2b00      	cmp	r3, #0
 8007068:	d002      	beq.n	8007070 <UART_SetConfig+0x1f0>
 800706a:	2b40      	cmp	r3, #64	; 0x40
 800706c:	d008      	beq.n	8007080 <UART_SetConfig+0x200>
 800706e:	e00f      	b.n	8007090 <UART_SetConfig+0x210>
 8007070:	2300      	movs	r3, #0
 8007072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007076:	e082      	b.n	800717e <UART_SetConfig+0x2fe>
 8007078:	2302      	movs	r3, #2
 800707a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800707e:	e07e      	b.n	800717e <UART_SetConfig+0x2fe>
 8007080:	2304      	movs	r3, #4
 8007082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007086:	e07a      	b.n	800717e <UART_SetConfig+0x2fe>
 8007088:	2308      	movs	r3, #8
 800708a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800708e:	e076      	b.n	800717e <UART_SetConfig+0x2fe>
 8007090:	2310      	movs	r3, #16
 8007092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007096:	e072      	b.n	800717e <UART_SetConfig+0x2fe>
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a35      	ldr	r2, [pc, #212]	; (8007174 <UART_SetConfig+0x2f4>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d12a      	bne.n	80070f8 <UART_SetConfig+0x278>
 80070a2:	4b30      	ldr	r3, [pc, #192]	; (8007164 <UART_SetConfig+0x2e4>)
 80070a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070b0:	d01a      	beq.n	80070e8 <UART_SetConfig+0x268>
 80070b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070b6:	d81b      	bhi.n	80070f0 <UART_SetConfig+0x270>
 80070b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070bc:	d00c      	beq.n	80070d8 <UART_SetConfig+0x258>
 80070be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070c2:	d815      	bhi.n	80070f0 <UART_SetConfig+0x270>
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d003      	beq.n	80070d0 <UART_SetConfig+0x250>
 80070c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070cc:	d008      	beq.n	80070e0 <UART_SetConfig+0x260>
 80070ce:	e00f      	b.n	80070f0 <UART_SetConfig+0x270>
 80070d0:	2300      	movs	r3, #0
 80070d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070d6:	e052      	b.n	800717e <UART_SetConfig+0x2fe>
 80070d8:	2302      	movs	r3, #2
 80070da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070de:	e04e      	b.n	800717e <UART_SetConfig+0x2fe>
 80070e0:	2304      	movs	r3, #4
 80070e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070e6:	e04a      	b.n	800717e <UART_SetConfig+0x2fe>
 80070e8:	2308      	movs	r3, #8
 80070ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ee:	e046      	b.n	800717e <UART_SetConfig+0x2fe>
 80070f0:	2310      	movs	r3, #16
 80070f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070f6:	e042      	b.n	800717e <UART_SetConfig+0x2fe>
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a17      	ldr	r2, [pc, #92]	; (800715c <UART_SetConfig+0x2dc>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d13a      	bne.n	8007178 <UART_SetConfig+0x2f8>
 8007102:	4b18      	ldr	r3, [pc, #96]	; (8007164 <UART_SetConfig+0x2e4>)
 8007104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007108:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800710c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007110:	d01a      	beq.n	8007148 <UART_SetConfig+0x2c8>
 8007112:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007116:	d81b      	bhi.n	8007150 <UART_SetConfig+0x2d0>
 8007118:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800711c:	d00c      	beq.n	8007138 <UART_SetConfig+0x2b8>
 800711e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007122:	d815      	bhi.n	8007150 <UART_SetConfig+0x2d0>
 8007124:	2b00      	cmp	r3, #0
 8007126:	d003      	beq.n	8007130 <UART_SetConfig+0x2b0>
 8007128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800712c:	d008      	beq.n	8007140 <UART_SetConfig+0x2c0>
 800712e:	e00f      	b.n	8007150 <UART_SetConfig+0x2d0>
 8007130:	2300      	movs	r3, #0
 8007132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007136:	e022      	b.n	800717e <UART_SetConfig+0x2fe>
 8007138:	2302      	movs	r3, #2
 800713a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800713e:	e01e      	b.n	800717e <UART_SetConfig+0x2fe>
 8007140:	2304      	movs	r3, #4
 8007142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007146:	e01a      	b.n	800717e <UART_SetConfig+0x2fe>
 8007148:	2308      	movs	r3, #8
 800714a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800714e:	e016      	b.n	800717e <UART_SetConfig+0x2fe>
 8007150:	2310      	movs	r3, #16
 8007152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007156:	e012      	b.n	800717e <UART_SetConfig+0x2fe>
 8007158:	cfff69f3 	.word	0xcfff69f3
 800715c:	40008000 	.word	0x40008000
 8007160:	40013800 	.word	0x40013800
 8007164:	40021000 	.word	0x40021000
 8007168:	40004400 	.word	0x40004400
 800716c:	40004800 	.word	0x40004800
 8007170:	40004c00 	.word	0x40004c00
 8007174:	40005000 	.word	0x40005000
 8007178:	2310      	movs	r3, #16
 800717a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4ab0      	ldr	r2, [pc, #704]	; (8007444 <UART_SetConfig+0x5c4>)
 8007184:	4293      	cmp	r3, r2
 8007186:	f040 809b 	bne.w	80072c0 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800718a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800718e:	2b08      	cmp	r3, #8
 8007190:	d827      	bhi.n	80071e2 <UART_SetConfig+0x362>
 8007192:	a201      	add	r2, pc, #4	; (adr r2, 8007198 <UART_SetConfig+0x318>)
 8007194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007198:	080071bd 	.word	0x080071bd
 800719c:	080071c5 	.word	0x080071c5
 80071a0:	080071cd 	.word	0x080071cd
 80071a4:	080071e3 	.word	0x080071e3
 80071a8:	080071d3 	.word	0x080071d3
 80071ac:	080071e3 	.word	0x080071e3
 80071b0:	080071e3 	.word	0x080071e3
 80071b4:	080071e3 	.word	0x080071e3
 80071b8:	080071db 	.word	0x080071db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071bc:	f7fd fa28 	bl	8004610 <HAL_RCC_GetPCLK1Freq>
 80071c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071c2:	e014      	b.n	80071ee <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071c4:	f7fd fa38 	bl	8004638 <HAL_RCC_GetPCLK2Freq>
 80071c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071ca:	e010      	b.n	80071ee <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071cc:	4b9e      	ldr	r3, [pc, #632]	; (8007448 <UART_SetConfig+0x5c8>)
 80071ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071d0:	e00d      	b.n	80071ee <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071d2:	f7fd f96b 	bl	80044ac <HAL_RCC_GetSysClockFreq>
 80071d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071d8:	e009      	b.n	80071ee <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071e0:	e005      	b.n	80071ee <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 80071e2:	2300      	movs	r3, #0
 80071e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80071ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80071ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f000 8130 	beq.w	8007456 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fa:	4a94      	ldr	r2, [pc, #592]	; (800744c <UART_SetConfig+0x5cc>)
 80071fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007200:	461a      	mov	r2, r3
 8007202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007204:	fbb3 f3f2 	udiv	r3, r3, r2
 8007208:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	4613      	mov	r3, r2
 8007210:	005b      	lsls	r3, r3, #1
 8007212:	4413      	add	r3, r2
 8007214:	69ba      	ldr	r2, [r7, #24]
 8007216:	429a      	cmp	r2, r3
 8007218:	d305      	bcc.n	8007226 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007220:	69ba      	ldr	r2, [r7, #24]
 8007222:	429a      	cmp	r2, r3
 8007224:	d903      	bls.n	800722e <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800722c:	e113      	b.n	8007456 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	2200      	movs	r2, #0
 8007232:	60bb      	str	r3, [r7, #8]
 8007234:	60fa      	str	r2, [r7, #12]
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723a:	4a84      	ldr	r2, [pc, #528]	; (800744c <UART_SetConfig+0x5cc>)
 800723c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007240:	b29b      	uxth	r3, r3
 8007242:	2200      	movs	r2, #0
 8007244:	603b      	str	r3, [r7, #0]
 8007246:	607a      	str	r2, [r7, #4]
 8007248:	e9d7 2300 	ldrd	r2, r3, [r7]
 800724c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007250:	f7f9 f808 	bl	8000264 <__aeabi_uldivmod>
 8007254:	4602      	mov	r2, r0
 8007256:	460b      	mov	r3, r1
 8007258:	4610      	mov	r0, r2
 800725a:	4619      	mov	r1, r3
 800725c:	f04f 0200 	mov.w	r2, #0
 8007260:	f04f 0300 	mov.w	r3, #0
 8007264:	020b      	lsls	r3, r1, #8
 8007266:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800726a:	0202      	lsls	r2, r0, #8
 800726c:	6979      	ldr	r1, [r7, #20]
 800726e:	6849      	ldr	r1, [r1, #4]
 8007270:	0849      	lsrs	r1, r1, #1
 8007272:	2000      	movs	r0, #0
 8007274:	460c      	mov	r4, r1
 8007276:	4605      	mov	r5, r0
 8007278:	eb12 0804 	adds.w	r8, r2, r4
 800727c:	eb43 0905 	adc.w	r9, r3, r5
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	469a      	mov	sl, r3
 8007288:	4693      	mov	fp, r2
 800728a:	4652      	mov	r2, sl
 800728c:	465b      	mov	r3, fp
 800728e:	4640      	mov	r0, r8
 8007290:	4649      	mov	r1, r9
 8007292:	f7f8 ffe7 	bl	8000264 <__aeabi_uldivmod>
 8007296:	4602      	mov	r2, r0
 8007298:	460b      	mov	r3, r1
 800729a:	4613      	mov	r3, r2
 800729c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072a4:	d308      	bcc.n	80072b8 <UART_SetConfig+0x438>
 80072a6:	6a3b      	ldr	r3, [r7, #32]
 80072a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072ac:	d204      	bcs.n	80072b8 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	6a3a      	ldr	r2, [r7, #32]
 80072b4:	60da      	str	r2, [r3, #12]
 80072b6:	e0ce      	b.n	8007456 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80072be:	e0ca      	b.n	8007456 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	69db      	ldr	r3, [r3, #28]
 80072c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072c8:	d166      	bne.n	8007398 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 80072ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80072ce:	2b08      	cmp	r3, #8
 80072d0:	d827      	bhi.n	8007322 <UART_SetConfig+0x4a2>
 80072d2:	a201      	add	r2, pc, #4	; (adr r2, 80072d8 <UART_SetConfig+0x458>)
 80072d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d8:	080072fd 	.word	0x080072fd
 80072dc:	08007305 	.word	0x08007305
 80072e0:	0800730d 	.word	0x0800730d
 80072e4:	08007323 	.word	0x08007323
 80072e8:	08007313 	.word	0x08007313
 80072ec:	08007323 	.word	0x08007323
 80072f0:	08007323 	.word	0x08007323
 80072f4:	08007323 	.word	0x08007323
 80072f8:	0800731b 	.word	0x0800731b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072fc:	f7fd f988 	bl	8004610 <HAL_RCC_GetPCLK1Freq>
 8007300:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007302:	e014      	b.n	800732e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007304:	f7fd f998 	bl	8004638 <HAL_RCC_GetPCLK2Freq>
 8007308:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800730a:	e010      	b.n	800732e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800730c:	4b4e      	ldr	r3, [pc, #312]	; (8007448 <UART_SetConfig+0x5c8>)
 800730e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007310:	e00d      	b.n	800732e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007312:	f7fd f8cb 	bl	80044ac <HAL_RCC_GetSysClockFreq>
 8007316:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007318:	e009      	b.n	800732e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800731a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800731e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007320:	e005      	b.n	800732e <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8007322:	2300      	movs	r3, #0
 8007324:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800732c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007330:	2b00      	cmp	r3, #0
 8007332:	f000 8090 	beq.w	8007456 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733a:	4a44      	ldr	r2, [pc, #272]	; (800744c <UART_SetConfig+0x5cc>)
 800733c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007340:	461a      	mov	r2, r3
 8007342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007344:	fbb3 f3f2 	udiv	r3, r3, r2
 8007348:	005a      	lsls	r2, r3, #1
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	085b      	lsrs	r3, r3, #1
 8007350:	441a      	add	r2, r3
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	fbb2 f3f3 	udiv	r3, r2, r3
 800735a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	2b0f      	cmp	r3, #15
 8007360:	d916      	bls.n	8007390 <UART_SetConfig+0x510>
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007368:	d212      	bcs.n	8007390 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800736a:	6a3b      	ldr	r3, [r7, #32]
 800736c:	b29b      	uxth	r3, r3
 800736e:	f023 030f 	bic.w	r3, r3, #15
 8007372:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007374:	6a3b      	ldr	r3, [r7, #32]
 8007376:	085b      	lsrs	r3, r3, #1
 8007378:	b29b      	uxth	r3, r3
 800737a:	f003 0307 	and.w	r3, r3, #7
 800737e:	b29a      	uxth	r2, r3
 8007380:	8bfb      	ldrh	r3, [r7, #30]
 8007382:	4313      	orrs	r3, r2
 8007384:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	8bfa      	ldrh	r2, [r7, #30]
 800738c:	60da      	str	r2, [r3, #12]
 800738e:	e062      	b.n	8007456 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007396:	e05e      	b.n	8007456 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007398:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800739c:	2b08      	cmp	r3, #8
 800739e:	d828      	bhi.n	80073f2 <UART_SetConfig+0x572>
 80073a0:	a201      	add	r2, pc, #4	; (adr r2, 80073a8 <UART_SetConfig+0x528>)
 80073a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a6:	bf00      	nop
 80073a8:	080073cd 	.word	0x080073cd
 80073ac:	080073d5 	.word	0x080073d5
 80073b0:	080073dd 	.word	0x080073dd
 80073b4:	080073f3 	.word	0x080073f3
 80073b8:	080073e3 	.word	0x080073e3
 80073bc:	080073f3 	.word	0x080073f3
 80073c0:	080073f3 	.word	0x080073f3
 80073c4:	080073f3 	.word	0x080073f3
 80073c8:	080073eb 	.word	0x080073eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073cc:	f7fd f920 	bl	8004610 <HAL_RCC_GetPCLK1Freq>
 80073d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073d2:	e014      	b.n	80073fe <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073d4:	f7fd f930 	bl	8004638 <HAL_RCC_GetPCLK2Freq>
 80073d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073da:	e010      	b.n	80073fe <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073dc:	4b1a      	ldr	r3, [pc, #104]	; (8007448 <UART_SetConfig+0x5c8>)
 80073de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80073e0:	e00d      	b.n	80073fe <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073e2:	f7fd f863 	bl	80044ac <HAL_RCC_GetSysClockFreq>
 80073e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073e8:	e009      	b.n	80073fe <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80073f0:	e005      	b.n	80073fe <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 80073f2:	2300      	movs	r3, #0
 80073f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80073fc:	bf00      	nop
    }

    if (pclk != 0U)
 80073fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007400:	2b00      	cmp	r3, #0
 8007402:	d028      	beq.n	8007456 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007408:	4a10      	ldr	r2, [pc, #64]	; (800744c <UART_SetConfig+0x5cc>)
 800740a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800740e:	461a      	mov	r2, r3
 8007410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007412:	fbb3 f2f2 	udiv	r2, r3, r2
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	085b      	lsrs	r3, r3, #1
 800741c:	441a      	add	r2, r3
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	fbb2 f3f3 	udiv	r3, r2, r3
 8007426:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007428:	6a3b      	ldr	r3, [r7, #32]
 800742a:	2b0f      	cmp	r3, #15
 800742c:	d910      	bls.n	8007450 <UART_SetConfig+0x5d0>
 800742e:	6a3b      	ldr	r3, [r7, #32]
 8007430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007434:	d20c      	bcs.n	8007450 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	b29a      	uxth	r2, r3
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	60da      	str	r2, [r3, #12]
 8007440:	e009      	b.n	8007456 <UART_SetConfig+0x5d6>
 8007442:	bf00      	nop
 8007444:	40008000 	.word	0x40008000
 8007448:	00f42400 	.word	0x00f42400
 800744c:	0800c01c 	.word	0x0800c01c
      }
      else
      {
        ret = HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	2201      	movs	r2, #1
 800745a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	2201      	movs	r2, #1
 8007462:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2200      	movs	r2, #0
 800746a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	2200      	movs	r2, #0
 8007470:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007472:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007476:	4618      	mov	r0, r3
 8007478:	3730      	adds	r7, #48	; 0x30
 800747a:	46bd      	mov	sp, r7
 800747c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007480 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00a      	beq.n	80074aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ae:	f003 0302 	and.w	r3, r3, #2
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00a      	beq.n	80074cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	430a      	orrs	r2, r1
 80074ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00a      	beq.n	80074ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	430a      	orrs	r2, r1
 80074ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f2:	f003 0308 	and.w	r3, r3, #8
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00a      	beq.n	8007510 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	430a      	orrs	r2, r1
 800750e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007514:	f003 0310 	and.w	r3, r3, #16
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00a      	beq.n	8007532 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	430a      	orrs	r2, r1
 8007530:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007536:	f003 0320 	and.w	r3, r3, #32
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00a      	beq.n	8007554 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	430a      	orrs	r2, r1
 8007552:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800755c:	2b00      	cmp	r3, #0
 800755e:	d01a      	beq.n	8007596 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	430a      	orrs	r2, r1
 8007574:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800757a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800757e:	d10a      	bne.n	8007596 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	430a      	orrs	r2, r1
 8007594:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00a      	beq.n	80075b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	430a      	orrs	r2, r1
 80075b6:	605a      	str	r2, [r3, #4]
  }
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b098      	sub	sp, #96	; 0x60
 80075c8:	af02      	add	r7, sp, #8
 80075ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075d4:	f7fa fc80 	bl	8001ed8 <HAL_GetTick>
 80075d8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0308 	and.w	r3, r3, #8
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	d12f      	bne.n	8007648 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075f0:	2200      	movs	r2, #0
 80075f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f88e 	bl	8007718 <UART_WaitOnFlagUntilTimeout>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d022      	beq.n	8007648 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760a:	e853 3f00 	ldrex	r3, [r3]
 800760e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007612:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007616:	653b      	str	r3, [r7, #80]	; 0x50
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	461a      	mov	r2, r3
 800761e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007620:	647b      	str	r3, [r7, #68]	; 0x44
 8007622:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007624:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007626:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007628:	e841 2300 	strex	r3, r2, [r1]
 800762c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800762e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1e6      	bne.n	8007602 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2220      	movs	r2, #32
 8007638:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007644:	2303      	movs	r3, #3
 8007646:	e063      	b.n	8007710 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 0304 	and.w	r3, r3, #4
 8007652:	2b04      	cmp	r3, #4
 8007654:	d149      	bne.n	80076ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007656:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800765a:	9300      	str	r3, [sp, #0]
 800765c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800765e:	2200      	movs	r2, #0
 8007660:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 f857 	bl	8007718 <UART_WaitOnFlagUntilTimeout>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d03c      	beq.n	80076ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007678:	e853 3f00 	ldrex	r3, [r3]
 800767c:	623b      	str	r3, [r7, #32]
   return(result);
 800767e:	6a3b      	ldr	r3, [r7, #32]
 8007680:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007684:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	461a      	mov	r2, r3
 800768c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800768e:	633b      	str	r3, [r7, #48]	; 0x30
 8007690:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007692:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007696:	e841 2300 	strex	r3, r2, [r1]
 800769a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800769c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1e6      	bne.n	8007670 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3308      	adds	r3, #8
 80076a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	e853 3f00 	ldrex	r3, [r3]
 80076b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f023 0301 	bic.w	r3, r3, #1
 80076b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	3308      	adds	r3, #8
 80076c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076c2:	61fa      	str	r2, [r7, #28]
 80076c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c6:	69b9      	ldr	r1, [r7, #24]
 80076c8:	69fa      	ldr	r2, [r7, #28]
 80076ca:	e841 2300 	strex	r3, r2, [r1]
 80076ce:	617b      	str	r3, [r7, #20]
   return(result);
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1e5      	bne.n	80076a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2220      	movs	r2, #32
 80076da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e012      	b.n	8007710 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2220      	movs	r2, #32
 80076ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2220      	movs	r2, #32
 80076f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3758      	adds	r7, #88	; 0x58
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	603b      	str	r3, [r7, #0]
 8007724:	4613      	mov	r3, r2
 8007726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007728:	e049      	b.n	80077be <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007730:	d045      	beq.n	80077be <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007732:	f7fa fbd1 	bl	8001ed8 <HAL_GetTick>
 8007736:	4602      	mov	r2, r0
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	69ba      	ldr	r2, [r7, #24]
 800773e:	429a      	cmp	r2, r3
 8007740:	d302      	bcc.n	8007748 <UART_WaitOnFlagUntilTimeout+0x30>
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d101      	bne.n	800774c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007748:	2303      	movs	r3, #3
 800774a:	e048      	b.n	80077de <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0304 	and.w	r3, r3, #4
 8007756:	2b00      	cmp	r3, #0
 8007758:	d031      	beq.n	80077be <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	69db      	ldr	r3, [r3, #28]
 8007760:	f003 0308 	and.w	r3, r3, #8
 8007764:	2b08      	cmp	r3, #8
 8007766:	d110      	bne.n	800778a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2208      	movs	r2, #8
 800776e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f000 f95b 	bl	8007a2c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2208      	movs	r2, #8
 800777a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e029      	b.n	80077de <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	69db      	ldr	r3, [r3, #28]
 8007790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007794:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007798:	d111      	bne.n	80077be <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f000 f941 	bl	8007a2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2220      	movs	r2, #32
 80077ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e00f      	b.n	80077de <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	69da      	ldr	r2, [r3, #28]
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	4013      	ands	r3, r2
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	bf0c      	ite	eq
 80077ce:	2301      	moveq	r3, #1
 80077d0:	2300      	movne	r3, #0
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	461a      	mov	r2, r3
 80077d6:	79fb      	ldrb	r3, [r7, #7]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d0a6      	beq.n	800772a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
	...

080077e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b0a3      	sub	sp, #140	; 0x8c
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	4613      	mov	r3, r2
 80077f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	88fa      	ldrh	r2, [r7, #6]
 8007800:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	88fa      	ldrh	r2, [r7, #6]
 8007808:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800781a:	d10e      	bne.n	800783a <UART_Start_Receive_IT+0x52>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d105      	bne.n	8007830 <UART_Start_Receive_IT+0x48>
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f240 12ff 	movw	r2, #511	; 0x1ff
 800782a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800782e:	e02d      	b.n	800788c <UART_Start_Receive_IT+0xa4>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	22ff      	movs	r2, #255	; 0xff
 8007834:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007838:	e028      	b.n	800788c <UART_Start_Receive_IT+0xa4>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10d      	bne.n	800785e <UART_Start_Receive_IT+0x76>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d104      	bne.n	8007854 <UART_Start_Receive_IT+0x6c>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	22ff      	movs	r2, #255	; 0xff
 800784e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007852:	e01b      	b.n	800788c <UART_Start_Receive_IT+0xa4>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	227f      	movs	r2, #127	; 0x7f
 8007858:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800785c:	e016      	b.n	800788c <UART_Start_Receive_IT+0xa4>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007866:	d10d      	bne.n	8007884 <UART_Start_Receive_IT+0x9c>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d104      	bne.n	800787a <UART_Start_Receive_IT+0x92>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	227f      	movs	r2, #127	; 0x7f
 8007874:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007878:	e008      	b.n	800788c <UART_Start_Receive_IT+0xa4>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	223f      	movs	r2, #63	; 0x3f
 800787e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007882:	e003      	b.n	800788c <UART_Start_Receive_IT+0xa4>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2222      	movs	r2, #34	; 0x22
 8007898:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	3308      	adds	r3, #8
 80078a2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078a6:	e853 3f00 	ldrex	r3, [r3]
 80078aa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80078ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078ae:	f043 0301 	orr.w	r3, r3, #1
 80078b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	3308      	adds	r3, #8
 80078bc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80078c0:	673a      	str	r2, [r7, #112]	; 0x70
 80078c2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80078c6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80078c8:	e841 2300 	strex	r3, r2, [r1]
 80078cc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80078ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1e3      	bne.n	800789c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078dc:	d14f      	bne.n	800797e <UART_Start_Receive_IT+0x196>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80078e4:	88fa      	ldrh	r2, [r7, #6]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d349      	bcc.n	800797e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078f2:	d107      	bne.n	8007904 <UART_Start_Receive_IT+0x11c>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d103      	bne.n	8007904 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	4a47      	ldr	r2, [pc, #284]	; (8007a1c <UART_Start_Receive_IT+0x234>)
 8007900:	675a      	str	r2, [r3, #116]	; 0x74
 8007902:	e002      	b.n	800790a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	4a46      	ldr	r2, [pc, #280]	; (8007a20 <UART_Start_Receive_IT+0x238>)
 8007908:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d01a      	beq.n	8007948 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800791a:	e853 3f00 	ldrex	r3, [r3]
 800791e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007926:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	461a      	mov	r2, r3
 8007930:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007934:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007936:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007938:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800793a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800793c:	e841 2300 	strex	r3, r2, [r1]
 8007940:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1e4      	bne.n	8007912 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	3308      	adds	r3, #8
 800794e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007952:	e853 3f00 	ldrex	r3, [r3]
 8007956:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800795e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	3308      	adds	r3, #8
 8007966:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007968:	64ba      	str	r2, [r7, #72]	; 0x48
 800796a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800796e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007970:	e841 2300 	strex	r3, r2, [r1]
 8007974:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1e5      	bne.n	8007948 <UART_Start_Receive_IT+0x160>
 800797c:	e046      	b.n	8007a0c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007986:	d107      	bne.n	8007998 <UART_Start_Receive_IT+0x1b0>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d103      	bne.n	8007998 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	4a24      	ldr	r2, [pc, #144]	; (8007a24 <UART_Start_Receive_IT+0x23c>)
 8007994:	675a      	str	r2, [r3, #116]	; 0x74
 8007996:	e002      	b.n	800799e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	4a23      	ldr	r2, [pc, #140]	; (8007a28 <UART_Start_Receive_IT+0x240>)
 800799c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d019      	beq.n	80079da <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ae:	e853 3f00 	ldrex	r3, [r3]
 80079b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80079ba:	677b      	str	r3, [r7, #116]	; 0x74
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	461a      	mov	r2, r3
 80079c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079c4:	637b      	str	r3, [r7, #52]	; 0x34
 80079c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80079ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079cc:	e841 2300 	strex	r3, r2, [r1]
 80079d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80079d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1e6      	bne.n	80079a6 <UART_Start_Receive_IT+0x1be>
 80079d8:	e018      	b.n	8007a0c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	e853 3f00 	ldrex	r3, [r3]
 80079e6:	613b      	str	r3, [r7, #16]
   return(result);
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	f043 0320 	orr.w	r3, r3, #32
 80079ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	461a      	mov	r2, r3
 80079f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079f8:	623b      	str	r3, [r7, #32]
 80079fa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fc:	69f9      	ldr	r1, [r7, #28]
 80079fe:	6a3a      	ldr	r2, [r7, #32]
 8007a00:	e841 2300 	strex	r3, r2, [r1]
 8007a04:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1e6      	bne.n	80079da <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	378c      	adds	r7, #140	; 0x8c
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	0800824d 	.word	0x0800824d
 8007a20:	08007eed 	.word	0x08007eed
 8007a24:	08007d35 	.word	0x08007d35
 8007a28:	08007b7d 	.word	0x08007b7d

08007a2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b095      	sub	sp, #84	; 0x54
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a3c:	e853 3f00 	ldrex	r3, [r3]
 8007a40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a52:	643b      	str	r3, [r7, #64]	; 0x40
 8007a54:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a5a:	e841 2300 	strex	r3, r2, [r1]
 8007a5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1e6      	bne.n	8007a34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3308      	adds	r3, #8
 8007a6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6e:	6a3b      	ldr	r3, [r7, #32]
 8007a70:	e853 3f00 	ldrex	r3, [r3]
 8007a74:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a7c:	f023 0301 	bic.w	r3, r3, #1
 8007a80:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	3308      	adds	r3, #8
 8007a88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a92:	e841 2300 	strex	r3, r2, [r1]
 8007a96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1e3      	bne.n	8007a66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d118      	bne.n	8007ad8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	e853 3f00 	ldrex	r3, [r3]
 8007ab2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	f023 0310 	bic.w	r3, r3, #16
 8007aba:	647b      	str	r3, [r7, #68]	; 0x44
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ac4:	61bb      	str	r3, [r7, #24]
 8007ac6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac8:	6979      	ldr	r1, [r7, #20]
 8007aca:	69ba      	ldr	r2, [r7, #24]
 8007acc:	e841 2300 	strex	r3, r2, [r1]
 8007ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1e6      	bne.n	8007aa6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2220      	movs	r2, #32
 8007adc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007aec:	bf00      	nop
 8007aee:	3754      	adds	r7, #84	; 0x54
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f7ff f99c 	bl	8006e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b1c:	bf00      	nop
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b088      	sub	sp, #32
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	e853 3f00 	ldrex	r3, [r3]
 8007b38:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b40:	61fb      	str	r3, [r7, #28]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	461a      	mov	r2, r3
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	61bb      	str	r3, [r7, #24]
 8007b4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4e:	6979      	ldr	r1, [r7, #20]
 8007b50:	69ba      	ldr	r2, [r7, #24]
 8007b52:	e841 2300 	strex	r3, r2, [r1]
 8007b56:	613b      	str	r3, [r7, #16]
   return(result);
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1e6      	bne.n	8007b2c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2220      	movs	r2, #32
 8007b62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f7ff f967 	bl	8006e40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b72:	bf00      	nop
 8007b74:	3720      	adds	r7, #32
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
	...

08007b7c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b09c      	sub	sp, #112	; 0x70
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b8a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b94:	2b22      	cmp	r3, #34	; 0x22
 8007b96:	f040 80be 	bne.w	8007d16 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007ba4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007ba8:	b2d9      	uxtb	r1, r3
 8007baa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007bae:	b2da      	uxtb	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bb4:	400a      	ands	r2, r1
 8007bb6:	b2d2      	uxtb	r2, r2
 8007bb8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bbe:	1c5a      	adds	r2, r3, #1
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f040 80a1 	bne.w	8007d26 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bec:	e853 3f00 	ldrex	r3, [r3]
 8007bf0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bf8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c02:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c04:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c0a:	e841 2300 	strex	r3, r2, [r1]
 8007c0e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1e6      	bne.n	8007be4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	3308      	adds	r3, #8
 8007c1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c20:	e853 3f00 	ldrex	r3, [r3]
 8007c24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c28:	f023 0301 	bic.w	r3, r3, #1
 8007c2c:	667b      	str	r3, [r7, #100]	; 0x64
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	3308      	adds	r3, #8
 8007c34:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007c36:	647a      	str	r2, [r7, #68]	; 0x44
 8007c38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c3e:	e841 2300 	strex	r3, r2, [r1]
 8007c42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1e5      	bne.n	8007c16 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2220      	movs	r2, #32
 8007c4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a33      	ldr	r2, [pc, #204]	; (8007d30 <UART_RxISR_8BIT+0x1b4>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d01f      	beq.n	8007ca8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d018      	beq.n	8007ca8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	e853 3f00 	ldrex	r3, [r3]
 8007c82:	623b      	str	r3, [r7, #32]
   return(result);
 8007c84:	6a3b      	ldr	r3, [r7, #32]
 8007c86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c8a:	663b      	str	r3, [r7, #96]	; 0x60
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	461a      	mov	r2, r3
 8007c92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c94:	633b      	str	r3, [r7, #48]	; 0x30
 8007c96:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c9c:	e841 2300 	strex	r3, r2, [r1]
 8007ca0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1e6      	bne.n	8007c76 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d12e      	bne.n	8007d0e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	e853 3f00 	ldrex	r3, [r3]
 8007cc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f023 0310 	bic.w	r3, r3, #16
 8007cca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cd4:	61fb      	str	r3, [r7, #28]
 8007cd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd8:	69b9      	ldr	r1, [r7, #24]
 8007cda:	69fa      	ldr	r2, [r7, #28]
 8007cdc:	e841 2300 	strex	r3, r2, [r1]
 8007ce0:	617b      	str	r3, [r7, #20]
   return(result);
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1e6      	bne.n	8007cb6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	69db      	ldr	r3, [r3, #28]
 8007cee:	f003 0310 	and.w	r3, r3, #16
 8007cf2:	2b10      	cmp	r3, #16
 8007cf4:	d103      	bne.n	8007cfe <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2210      	movs	r2, #16
 8007cfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d04:	4619      	mov	r1, r3
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7ff f8ae 	bl	8006e68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d0c:	e00b      	b.n	8007d26 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f7f8 fc46 	bl	80005a0 <HAL_UART_RxCpltCallback>
}
 8007d14:	e007      	b.n	8007d26 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	699a      	ldr	r2, [r3, #24]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f042 0208 	orr.w	r2, r2, #8
 8007d24:	619a      	str	r2, [r3, #24]
}
 8007d26:	bf00      	nop
 8007d28:	3770      	adds	r7, #112	; 0x70
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	40008000 	.word	0x40008000

08007d34 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b09c      	sub	sp, #112	; 0x70
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007d42:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d4c:	2b22      	cmp	r3, #34	; 0x22
 8007d4e:	f040 80be 	bne.w	8007ece <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d58:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d60:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007d62:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007d66:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d70:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d76:	1c9a      	adds	r2, r3, #2
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	3b01      	subs	r3, #1
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f040 80a1 	bne.w	8007ede <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007da4:	e853 3f00 	ldrex	r3, [r3]
 8007da8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007db0:	667b      	str	r3, [r7, #100]	; 0x64
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	461a      	mov	r2, r3
 8007db8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dba:	657b      	str	r3, [r7, #84]	; 0x54
 8007dbc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007dc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007dc2:	e841 2300 	strex	r3, r2, [r1]
 8007dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1e6      	bne.n	8007d9c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	3308      	adds	r3, #8
 8007dd4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd8:	e853 3f00 	ldrex	r3, [r3]
 8007ddc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de0:	f023 0301 	bic.w	r3, r3, #1
 8007de4:	663b      	str	r3, [r7, #96]	; 0x60
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	3308      	adds	r3, #8
 8007dec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007dee:	643a      	str	r2, [r7, #64]	; 0x40
 8007df0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007df4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007df6:	e841 2300 	strex	r3, r2, [r1]
 8007dfa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1e5      	bne.n	8007dce <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2220      	movs	r2, #32
 8007e06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a33      	ldr	r2, [pc, #204]	; (8007ee8 <UART_RxISR_16BIT+0x1b4>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d01f      	beq.n	8007e60 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d018      	beq.n	8007e60 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e34:	6a3b      	ldr	r3, [r7, #32]
 8007e36:	e853 3f00 	ldrex	r3, [r3]
 8007e3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	461a      	mov	r2, r3
 8007e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e4e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e54:	e841 2300 	strex	r3, r2, [r1]
 8007e58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d1e6      	bne.n	8007e2e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d12e      	bne.n	8007ec6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	e853 3f00 	ldrex	r3, [r3]
 8007e7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	f023 0310 	bic.w	r3, r3, #16
 8007e82:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	461a      	mov	r2, r3
 8007e8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e8c:	61bb      	str	r3, [r7, #24]
 8007e8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e90:	6979      	ldr	r1, [r7, #20]
 8007e92:	69ba      	ldr	r2, [r7, #24]
 8007e94:	e841 2300 	strex	r3, r2, [r1]
 8007e98:	613b      	str	r3, [r7, #16]
   return(result);
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d1e6      	bne.n	8007e6e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	69db      	ldr	r3, [r3, #28]
 8007ea6:	f003 0310 	and.w	r3, r3, #16
 8007eaa:	2b10      	cmp	r3, #16
 8007eac:	d103      	bne.n	8007eb6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2210      	movs	r2, #16
 8007eb4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f7fe ffd2 	bl	8006e68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ec4:	e00b      	b.n	8007ede <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f7f8 fb6a 	bl	80005a0 <HAL_UART_RxCpltCallback>
}
 8007ecc:	e007      	b.n	8007ede <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	699a      	ldr	r2, [r3, #24]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f042 0208 	orr.w	r2, r2, #8
 8007edc:	619a      	str	r2, [r3, #24]
}
 8007ede:	bf00      	nop
 8007ee0:	3770      	adds	r7, #112	; 0x70
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	40008000 	.word	0x40008000

08007eec <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b0ac      	sub	sp, #176	; 0xb0
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007efa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	69db      	ldr	r3, [r3, #28]
 8007f04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f22:	2b22      	cmp	r3, #34	; 0x22
 8007f24:	f040 8182 	bne.w	800822c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007f2e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f32:	e125      	b.n	8008180 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f3e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8007f42:	b2d9      	uxtb	r1, r3
 8007f44:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007f48:	b2da      	uxtb	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f4e:	400a      	ands	r2, r1
 8007f50:	b2d2      	uxtb	r2, r2
 8007f52:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f58:	1c5a      	adds	r2, r3, #1
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	3b01      	subs	r3, #1
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	69db      	ldr	r3, [r3, #28]
 8007f76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007f7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f7e:	f003 0307 	and.w	r3, r3, #7
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d053      	beq.n	800802e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d011      	beq.n	8007fb6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007f92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00b      	beq.n	8007fb6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fac:	f043 0201 	orr.w	r2, r3, #1
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fba:	f003 0302 	and.w	r3, r3, #2
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d011      	beq.n	8007fe6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007fc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007fc6:	f003 0301 	and.w	r3, r3, #1
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00b      	beq.n	8007fe6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2202      	movs	r2, #2
 8007fd4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fdc:	f043 0204 	orr.w	r2, r3, #4
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fea:	f003 0304 	and.w	r3, r3, #4
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d011      	beq.n	8008016 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007ff2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00b      	beq.n	8008016 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2204      	movs	r2, #4
 8008004:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800800c:	f043 0202 	orr.w	r2, r3, #2
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800801c:	2b00      	cmp	r3, #0
 800801e:	d006      	beq.n	800802e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f7fe ff17 	bl	8006e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008034:	b29b      	uxth	r3, r3
 8008036:	2b00      	cmp	r3, #0
 8008038:	f040 80a2 	bne.w	8008180 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008042:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008044:	e853 3f00 	ldrex	r3, [r3]
 8008048:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800804a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800804c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008050:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	461a      	mov	r2, r3
 800805a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800805e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008060:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008062:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008064:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008066:	e841 2300 	strex	r3, r2, [r1]
 800806a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800806c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1e4      	bne.n	800803c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	3308      	adds	r3, #8
 8008078:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800807c:	e853 3f00 	ldrex	r3, [r3]
 8008080:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008082:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008088:	f023 0301 	bic.w	r3, r3, #1
 800808c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	3308      	adds	r3, #8
 8008096:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800809a:	66ba      	str	r2, [r7, #104]	; 0x68
 800809c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80080a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80080a2:	e841 2300 	strex	r3, r2, [r1]
 80080a6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80080a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1e1      	bne.n	8008072 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2220      	movs	r2, #32
 80080b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a5f      	ldr	r2, [pc, #380]	; (8008244 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d021      	beq.n	8008110 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d01a      	beq.n	8008110 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080e2:	e853 3f00 	ldrex	r3, [r3]
 80080e6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80080e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80080ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	461a      	mov	r2, r3
 80080f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080fc:	657b      	str	r3, [r7, #84]	; 0x54
 80080fe:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008100:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008102:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008104:	e841 2300 	strex	r3, r2, [r1]
 8008108:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800810a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1e4      	bne.n	80080da <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008114:	2b01      	cmp	r3, #1
 8008116:	d130      	bne.n	800817a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008126:	e853 3f00 	ldrex	r3, [r3]
 800812a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800812c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812e:	f023 0310 	bic.w	r3, r3, #16
 8008132:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	461a      	mov	r2, r3
 800813c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008140:	643b      	str	r3, [r7, #64]	; 0x40
 8008142:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008144:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008146:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008148:	e841 2300 	strex	r3, r2, [r1]
 800814c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800814e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1e4      	bne.n	800811e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	69db      	ldr	r3, [r3, #28]
 800815a:	f003 0310 	and.w	r3, r3, #16
 800815e:	2b10      	cmp	r3, #16
 8008160:	d103      	bne.n	800816a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2210      	movs	r2, #16
 8008168:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008170:	4619      	mov	r1, r3
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f7fe fe78 	bl	8006e68 <HAL_UARTEx_RxEventCallback>
 8008178:	e002      	b.n	8008180 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f7f8 fa10 	bl	80005a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008180:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008184:	2b00      	cmp	r3, #0
 8008186:	d006      	beq.n	8008196 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008188:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800818c:	f003 0320 	and.w	r3, r3, #32
 8008190:	2b00      	cmp	r3, #0
 8008192:	f47f aecf 	bne.w	8007f34 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800819c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80081a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d049      	beq.n	800823c <UART_RxISR_8BIT_FIFOEN+0x350>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80081ae:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d242      	bcs.n	800823c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	3308      	adds	r3, #8
 80081bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081be:	6a3b      	ldr	r3, [r7, #32]
 80081c0:	e853 3f00 	ldrex	r3, [r3]
 80081c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	3308      	adds	r3, #8
 80081d6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80081da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081e2:	e841 2300 	strex	r3, r2, [r1]
 80081e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1e3      	bne.n	80081b6 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a15      	ldr	r2, [pc, #84]	; (8008248 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80081f2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	e853 3f00 	ldrex	r3, [r3]
 8008200:	60bb      	str	r3, [r7, #8]
   return(result);
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	f043 0320 	orr.w	r3, r3, #32
 8008208:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	461a      	mov	r2, r3
 8008212:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008216:	61bb      	str	r3, [r7, #24]
 8008218:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821a:	6979      	ldr	r1, [r7, #20]
 800821c:	69ba      	ldr	r2, [r7, #24]
 800821e:	e841 2300 	strex	r3, r2, [r1]
 8008222:	613b      	str	r3, [r7, #16]
   return(result);
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1e4      	bne.n	80081f4 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800822a:	e007      	b.n	800823c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	699a      	ldr	r2, [r3, #24]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f042 0208 	orr.w	r2, r2, #8
 800823a:	619a      	str	r2, [r3, #24]
}
 800823c:	bf00      	nop
 800823e:	37b0      	adds	r7, #176	; 0xb0
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	40008000 	.word	0x40008000
 8008248:	08007b7d 	.word	0x08007b7d

0800824c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b0ae      	sub	sp, #184	; 0xb8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800825a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	69db      	ldr	r3, [r3, #28]
 8008264:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008282:	2b22      	cmp	r3, #34	; 0x22
 8008284:	f040 8186 	bne.w	8008594 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800828e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008292:	e129      	b.n	80084e8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80082a6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80082aa:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80082ae:	4013      	ands	r3, r2
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80082b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082bc:	1c9a      	adds	r2, r3, #2
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	3b01      	subs	r3, #1
 80082cc:	b29a      	uxth	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	69db      	ldr	r3, [r3, #28]
 80082da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80082de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80082e2:	f003 0307 	and.w	r3, r3, #7
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d053      	beq.n	8008392 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80082ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80082ee:	f003 0301 	and.w	r3, r3, #1
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d011      	beq.n	800831a <UART_RxISR_16BIT_FIFOEN+0xce>
 80082f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00b      	beq.n	800831a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2201      	movs	r2, #1
 8008308:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008310:	f043 0201 	orr.w	r2, r3, #1
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800831a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800831e:	f003 0302 	and.w	r3, r3, #2
 8008322:	2b00      	cmp	r3, #0
 8008324:	d011      	beq.n	800834a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008326:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800832a:	f003 0301 	and.w	r3, r3, #1
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00b      	beq.n	800834a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2202      	movs	r2, #2
 8008338:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008340:	f043 0204 	orr.w	r2, r3, #4
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800834a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800834e:	f003 0304 	and.w	r3, r3, #4
 8008352:	2b00      	cmp	r3, #0
 8008354:	d011      	beq.n	800837a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008356:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800835a:	f003 0301 	and.w	r3, r3, #1
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00b      	beq.n	800837a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2204      	movs	r2, #4
 8008368:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008370:	f043 0202 	orr.w	r2, r3, #2
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008380:	2b00      	cmp	r3, #0
 8008382:	d006      	beq.n	8008392 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f7fe fd65 	bl	8006e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008398:	b29b      	uxth	r3, r3
 800839a:	2b00      	cmp	r3, #0
 800839c:	f040 80a4 	bne.w	80084e8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083a8:	e853 3f00 	ldrex	r3, [r3]
 80083ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80083ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	461a      	mov	r2, r3
 80083be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80083c6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80083ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80083ce:	e841 2300 	strex	r3, r2, [r1]
 80083d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80083d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1e2      	bne.n	80083a0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	3308      	adds	r3, #8
 80083e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083e4:	e853 3f00 	ldrex	r3, [r3]
 80083e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80083ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083f0:	f023 0301 	bic.w	r3, r3, #1
 80083f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	3308      	adds	r3, #8
 80083fe:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008402:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008404:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008406:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008408:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800840a:	e841 2300 	strex	r3, r2, [r1]
 800840e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008410:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1e1      	bne.n	80083da <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2220      	movs	r2, #32
 800841a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a5f      	ldr	r2, [pc, #380]	; (80085ac <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d021      	beq.n	8008478 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800843e:	2b00      	cmp	r3, #0
 8008440:	d01a      	beq.n	8008478 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800844a:	e853 3f00 	ldrex	r3, [r3]
 800844e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008452:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008456:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	461a      	mov	r2, r3
 8008460:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008464:	65bb      	str	r3, [r7, #88]	; 0x58
 8008466:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008468:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800846a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800846c:	e841 2300 	strex	r3, r2, [r1]
 8008470:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008474:	2b00      	cmp	r3, #0
 8008476:	d1e4      	bne.n	8008442 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800847c:	2b01      	cmp	r3, #1
 800847e:	d130      	bne.n	80084e2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848e:	e853 3f00 	ldrex	r3, [r3]
 8008492:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008496:	f023 0310 	bic.w	r3, r3, #16
 800849a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	461a      	mov	r2, r3
 80084a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80084a8:	647b      	str	r3, [r7, #68]	; 0x44
 80084aa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80084ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084b0:	e841 2300 	strex	r3, r2, [r1]
 80084b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80084b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1e4      	bne.n	8008486 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	69db      	ldr	r3, [r3, #28]
 80084c2:	f003 0310 	and.w	r3, r3, #16
 80084c6:	2b10      	cmp	r3, #16
 80084c8:	d103      	bne.n	80084d2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2210      	movs	r2, #16
 80084d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80084d8:	4619      	mov	r1, r3
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f7fe fcc4 	bl	8006e68 <HAL_UARTEx_RxEventCallback>
 80084e0:	e002      	b.n	80084e8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f7f8 f85c 	bl	80005a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80084e8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d006      	beq.n	80084fe <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80084f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084f4:	f003 0320 	and.w	r3, r3, #32
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f47f aecb 	bne.w	8008294 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008504:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008508:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800850c:	2b00      	cmp	r3, #0
 800850e:	d049      	beq.n	80085a4 <UART_RxISR_16BIT_FIFOEN+0x358>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008516:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800851a:	429a      	cmp	r2, r3
 800851c:	d242      	bcs.n	80085a4 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	3308      	adds	r3, #8
 8008524:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008528:	e853 3f00 	ldrex	r3, [r3]
 800852c:	623b      	str	r3, [r7, #32]
   return(result);
 800852e:	6a3b      	ldr	r3, [r7, #32]
 8008530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008534:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	3308      	adds	r3, #8
 800853e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008542:	633a      	str	r2, [r7, #48]	; 0x30
 8008544:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008546:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800854a:	e841 2300 	strex	r3, r2, [r1]
 800854e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1e3      	bne.n	800851e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4a15      	ldr	r2, [pc, #84]	; (80085b0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800855a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	e853 3f00 	ldrex	r3, [r3]
 8008568:	60fb      	str	r3, [r7, #12]
   return(result);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f043 0320 	orr.w	r3, r3, #32
 8008570:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	461a      	mov	r2, r3
 800857a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800857e:	61fb      	str	r3, [r7, #28]
 8008580:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008582:	69b9      	ldr	r1, [r7, #24]
 8008584:	69fa      	ldr	r2, [r7, #28]
 8008586:	e841 2300 	strex	r3, r2, [r1]
 800858a:	617b      	str	r3, [r7, #20]
   return(result);
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1e4      	bne.n	800855c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008592:	e007      	b.n	80085a4 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	699a      	ldr	r2, [r3, #24]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f042 0208 	orr.w	r2, r2, #8
 80085a2:	619a      	str	r2, [r3, #24]
}
 80085a4:	bf00      	nop
 80085a6:	37b8      	adds	r7, #184	; 0xb8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	40008000 	.word	0x40008000
 80085b0:	08007d35 	.word	0x08007d35

080085b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d101      	bne.n	8008606 <HAL_UARTEx_DisableFifoMode+0x16>
 8008602:	2302      	movs	r3, #2
 8008604:	e027      	b.n	8008656 <HAL_UARTEx_DisableFifoMode+0x66>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2201      	movs	r2, #1
 800860a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2224      	movs	r2, #36	; 0x24
 8008612:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f022 0201 	bic.w	r2, r2, #1
 800862c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008634:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2220      	movs	r2, #32
 8008648:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3714      	adds	r7, #20
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr

08008662 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b084      	sub	sp, #16
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
 800866a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008672:	2b01      	cmp	r3, #1
 8008674:	d101      	bne.n	800867a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008676:	2302      	movs	r3, #2
 8008678:	e02d      	b.n	80086d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2224      	movs	r2, #36	; 0x24
 8008686:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f022 0201 	bic.w	r2, r2, #1
 80086a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	683a      	ldr	r2, [r7, #0]
 80086b2:	430a      	orrs	r2, r1
 80086b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f850 	bl	800875c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2220      	movs	r2, #32
 80086c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b084      	sub	sp, #16
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
 80086e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d101      	bne.n	80086f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80086f2:	2302      	movs	r3, #2
 80086f4:	e02d      	b.n	8008752 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2224      	movs	r2, #36	; 0x24
 8008702:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f022 0201 	bic.w	r2, r2, #1
 800871c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	683a      	ldr	r2, [r7, #0]
 800872e:	430a      	orrs	r2, r1
 8008730:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 f812 	bl	800875c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2220      	movs	r2, #32
 8008744:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
	...

0800875c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800875c:	b480      	push	{r7}
 800875e:	b085      	sub	sp, #20
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008768:	2b00      	cmp	r3, #0
 800876a:	d108      	bne.n	800877e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800877c:	e031      	b.n	80087e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800877e:	2308      	movs	r3, #8
 8008780:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008782:	2308      	movs	r3, #8
 8008784:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	0e5b      	lsrs	r3, r3, #25
 800878e:	b2db      	uxtb	r3, r3
 8008790:	f003 0307 	and.w	r3, r3, #7
 8008794:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	0f5b      	lsrs	r3, r3, #29
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	f003 0307 	and.w	r3, r3, #7
 80087a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087a6:	7bbb      	ldrb	r3, [r7, #14]
 80087a8:	7b3a      	ldrb	r2, [r7, #12]
 80087aa:	4911      	ldr	r1, [pc, #68]	; (80087f0 <UARTEx_SetNbDataToProcess+0x94>)
 80087ac:	5c8a      	ldrb	r2, [r1, r2]
 80087ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80087b2:	7b3a      	ldrb	r2, [r7, #12]
 80087b4:	490f      	ldr	r1, [pc, #60]	; (80087f4 <UARTEx_SetNbDataToProcess+0x98>)
 80087b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80087bc:	b29a      	uxth	r2, r3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80087c4:	7bfb      	ldrb	r3, [r7, #15]
 80087c6:	7b7a      	ldrb	r2, [r7, #13]
 80087c8:	4909      	ldr	r1, [pc, #36]	; (80087f0 <UARTEx_SetNbDataToProcess+0x94>)
 80087ca:	5c8a      	ldrb	r2, [r1, r2]
 80087cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80087d0:	7b7a      	ldrb	r2, [r7, #13]
 80087d2:	4908      	ldr	r1, [pc, #32]	; (80087f4 <UARTEx_SetNbDataToProcess+0x98>)
 80087d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80087d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80087da:	b29a      	uxth	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80087e2:	bf00      	nop
 80087e4:	3714      	adds	r7, #20
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	0800c034 	.word	0x0800c034
 80087f4:	0800c03c 	.word	0x0800c03c

080087f8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b08b      	sub	sp, #44	; 0x2c
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	fa93 f3a3 	rbit	r3, r3
 8008812:	613b      	str	r3, [r7, #16]
  return result;
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d101      	bne.n	8008822 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800881e:	2320      	movs	r3, #32
 8008820:	e003      	b.n	800882a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	fab3 f383 	clz	r3, r3
 8008828:	b2db      	uxtb	r3, r3
 800882a:	005b      	lsls	r3, r3, #1
 800882c:	2103      	movs	r1, #3
 800882e:	fa01 f303 	lsl.w	r3, r1, r3
 8008832:	43db      	mvns	r3, r3
 8008834:	401a      	ands	r2, r3
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800883a:	6a3b      	ldr	r3, [r7, #32]
 800883c:	fa93 f3a3 	rbit	r3, r3
 8008840:	61fb      	str	r3, [r7, #28]
  return result;
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008848:	2b00      	cmp	r3, #0
 800884a:	d101      	bne.n	8008850 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800884c:	2320      	movs	r3, #32
 800884e:	e003      	b.n	8008858 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8008850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008852:	fab3 f383 	clz	r3, r3
 8008856:	b2db      	uxtb	r3, r3
 8008858:	005b      	lsls	r3, r3, #1
 800885a:	6879      	ldr	r1, [r7, #4]
 800885c:	fa01 f303 	lsl.w	r3, r1, r3
 8008860:	431a      	orrs	r2, r3
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	601a      	str	r2, [r3, #0]
}
 8008866:	bf00      	nop
 8008868:	372c      	adds	r7, #44	; 0x2c
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr

08008872 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8008872:	b480      	push	{r7}
 8008874:	b085      	sub	sp, #20
 8008876:	af00      	add	r7, sp, #0
 8008878:	60f8      	str	r0, [r7, #12]
 800887a:	60b9      	str	r1, [r7, #8]
 800887c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	685a      	ldr	r2, [r3, #4]
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	43db      	mvns	r3, r3
 8008886:	401a      	ands	r2, r3
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	6879      	ldr	r1, [r7, #4]
 800888c:	fb01 f303 	mul.w	r3, r1, r3
 8008890:	431a      	orrs	r2, r3
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	605a      	str	r2, [r3, #4]
}
 8008896:	bf00      	nop
 8008898:	3714      	adds	r7, #20
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr

080088a2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80088a2:	b480      	push	{r7}
 80088a4:	b08b      	sub	sp, #44	; 0x2c
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	60f8      	str	r0, [r7, #12]
 80088aa:	60b9      	str	r1, [r7, #8]
 80088ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	689a      	ldr	r2, [r3, #8]
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	fa93 f3a3 	rbit	r3, r3
 80088bc:	613b      	str	r3, [r7, #16]
  return result;
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d101      	bne.n	80088cc <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80088c8:	2320      	movs	r3, #32
 80088ca:	e003      	b.n	80088d4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	fab3 f383 	clz	r3, r3
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	005b      	lsls	r3, r3, #1
 80088d6:	2103      	movs	r1, #3
 80088d8:	fa01 f303 	lsl.w	r3, r1, r3
 80088dc:	43db      	mvns	r3, r3
 80088de:	401a      	ands	r2, r3
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088e4:	6a3b      	ldr	r3, [r7, #32]
 80088e6:	fa93 f3a3 	rbit	r3, r3
 80088ea:	61fb      	str	r3, [r7, #28]
  return result;
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80088f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d101      	bne.n	80088fa <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80088f6:	2320      	movs	r3, #32
 80088f8:	e003      	b.n	8008902 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80088fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fc:	fab3 f383 	clz	r3, r3
 8008900:	b2db      	uxtb	r3, r3
 8008902:	005b      	lsls	r3, r3, #1
 8008904:	6879      	ldr	r1, [r7, #4]
 8008906:	fa01 f303 	lsl.w	r3, r1, r3
 800890a:	431a      	orrs	r2, r3
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8008910:	bf00      	nop
 8008912:	372c      	adds	r7, #44	; 0x2c
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800891c:	b480      	push	{r7}
 800891e:	b08b      	sub	sp, #44	; 0x2c
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	68da      	ldr	r2, [r3, #12]
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	fa93 f3a3 	rbit	r3, r3
 8008936:	613b      	str	r3, [r7, #16]
  return result;
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800893c:	69bb      	ldr	r3, [r7, #24]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d101      	bne.n	8008946 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8008942:	2320      	movs	r3, #32
 8008944:	e003      	b.n	800894e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	fab3 f383 	clz	r3, r3
 800894c:	b2db      	uxtb	r3, r3
 800894e:	005b      	lsls	r3, r3, #1
 8008950:	2103      	movs	r1, #3
 8008952:	fa01 f303 	lsl.w	r3, r1, r3
 8008956:	43db      	mvns	r3, r3
 8008958:	401a      	ands	r2, r3
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800895e:	6a3b      	ldr	r3, [r7, #32]
 8008960:	fa93 f3a3 	rbit	r3, r3
 8008964:	61fb      	str	r3, [r7, #28]
  return result;
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800896a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896c:	2b00      	cmp	r3, #0
 800896e:	d101      	bne.n	8008974 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8008970:	2320      	movs	r3, #32
 8008972:	e003      	b.n	800897c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8008974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008976:	fab3 f383 	clz	r3, r3
 800897a:	b2db      	uxtb	r3, r3
 800897c:	005b      	lsls	r3, r3, #1
 800897e:	6879      	ldr	r1, [r7, #4]
 8008980:	fa01 f303 	lsl.w	r3, r1, r3
 8008984:	431a      	orrs	r2, r3
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	60da      	str	r2, [r3, #12]
}
 800898a:	bf00      	nop
 800898c:	372c      	adds	r7, #44	; 0x2c
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr

08008996 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008996:	b480      	push	{r7}
 8008998:	b08b      	sub	sp, #44	; 0x2c
 800899a:	af00      	add	r7, sp, #0
 800899c:	60f8      	str	r0, [r7, #12]
 800899e:	60b9      	str	r1, [r7, #8]
 80089a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6a1a      	ldr	r2, [r3, #32]
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	fa93 f3a3 	rbit	r3, r3
 80089b0:	613b      	str	r3, [r7, #16]
  return result;
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d101      	bne.n	80089c0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80089bc:	2320      	movs	r3, #32
 80089be:	e003      	b.n	80089c8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	fab3 f383 	clz	r3, r3
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	210f      	movs	r1, #15
 80089cc:	fa01 f303 	lsl.w	r3, r1, r3
 80089d0:	43db      	mvns	r3, r3
 80089d2:	401a      	ands	r2, r3
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089d8:	6a3b      	ldr	r3, [r7, #32]
 80089da:	fa93 f3a3 	rbit	r3, r3
 80089de:	61fb      	str	r3, [r7, #28]
  return result;
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80089e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d101      	bne.n	80089ee <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80089ea:	2320      	movs	r3, #32
 80089ec:	e003      	b.n	80089f6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80089ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f0:	fab3 f383 	clz	r3, r3
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	6879      	ldr	r1, [r7, #4]
 80089fa:	fa01 f303 	lsl.w	r3, r1, r3
 80089fe:	431a      	orrs	r2, r3
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8008a04:	bf00      	nop
 8008a06:	372c      	adds	r7, #44	; 0x2c
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b08b      	sub	sp, #44	; 0x2c
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	0a1b      	lsrs	r3, r3, #8
 8008a24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	fa93 f3a3 	rbit	r3, r3
 8008a2c:	613b      	str	r3, [r7, #16]
  return result;
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d101      	bne.n	8008a3c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8008a38:	2320      	movs	r3, #32
 8008a3a:	e003      	b.n	8008a44 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8008a3c:	69bb      	ldr	r3, [r7, #24]
 8008a3e:	fab3 f383 	clz	r3, r3
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	210f      	movs	r1, #15
 8008a48:	fa01 f303 	lsl.w	r3, r1, r3
 8008a4c:	43db      	mvns	r3, r3
 8008a4e:	401a      	ands	r2, r3
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	0a1b      	lsrs	r3, r3, #8
 8008a54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a56:	6a3b      	ldr	r3, [r7, #32]
 8008a58:	fa93 f3a3 	rbit	r3, r3
 8008a5c:	61fb      	str	r3, [r7, #28]
  return result;
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d101      	bne.n	8008a6c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8008a68:	2320      	movs	r3, #32
 8008a6a:	e003      	b.n	8008a74 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8008a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6e:	fab3 f383 	clz	r3, r3
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	6879      	ldr	r1, [r7, #4]
 8008a78:	fa01 f303 	lsl.w	r3, r1, r3
 8008a7c:	431a      	orrs	r2, r3
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8008a82:	bf00      	nop
 8008a84:	372c      	adds	r7, #44	; 0x2c
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr

08008a8e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b088      	sub	sp, #32
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
 8008a96:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	fa93 f3a3 	rbit	r3, r3
 8008aa4:	60fb      	str	r3, [r7, #12]
  return result;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d101      	bne.n	8008ab4 <LL_GPIO_Init+0x26>
    return 32U;
 8008ab0:	2320      	movs	r3, #32
 8008ab2:	e003      	b.n	8008abc <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	fab3 f383 	clz	r3, r3
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008abe:	e047      	b.n	8008b50 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	2101      	movs	r1, #1
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8008acc:	4013      	ands	r3, r2
 8008ace:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d039      	beq.n	8008b4a <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d003      	beq.n	8008ae6 <LL_GPIO_Init+0x58>
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d10d      	bne.n	8008b02 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	461a      	mov	r2, r3
 8008aec:	69b9      	ldr	r1, [r7, #24]
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f7ff fed7 	bl	80088a2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	461a      	mov	r2, r3
 8008afa:	69b9      	ldr	r1, [r7, #24]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f7ff feb8 	bl	8008872 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	461a      	mov	r2, r3
 8008b08:	69b9      	ldr	r1, [r7, #24]
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f7ff ff06 	bl	800891c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	d111      	bne.n	8008b3c <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	2bff      	cmp	r3, #255	; 0xff
 8008b1c:	d807      	bhi.n	8008b2e <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	695b      	ldr	r3, [r3, #20]
 8008b22:	461a      	mov	r2, r3
 8008b24:	69b9      	ldr	r1, [r7, #24]
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f7ff ff35 	bl	8008996 <LL_GPIO_SetAFPin_0_7>
 8008b2c:	e006      	b.n	8008b3c <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	695b      	ldr	r3, [r3, #20]
 8008b32:	461a      	mov	r2, r3
 8008b34:	69b9      	ldr	r1, [r7, #24]
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f7ff ff6a 	bl	8008a10 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	461a      	mov	r2, r3
 8008b42:	69b9      	ldr	r1, [r7, #24]
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f7ff fe57 	bl	80087f8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	fa22 f303 	lsr.w	r3, r2, r3
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d1b0      	bne.n	8008ac0 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3720      	adds	r7, #32
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b085      	sub	sp, #20
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008b70:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008b74:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008b7c:	b29a      	uxth	r2, r3
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	43db      	mvns	r3, r3
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	4013      	ands	r3, r2
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3714      	adds	r7, #20
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr

08008b9e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	f107 0014 	add.w	r0, r7, #20
 8008bac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	370c      	adds	r7, #12
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	b004      	add	sp, #16
 8008bde:	4770      	bx	lr

08008be0 <__NVIC_SetPriority>:
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	4603      	mov	r3, r0
 8008be8:	6039      	str	r1, [r7, #0]
 8008bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	db0a      	blt.n	8008c0a <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	b2da      	uxtb	r2, r3
 8008bf8:	490c      	ldr	r1, [pc, #48]	; (8008c2c <__NVIC_SetPriority+0x4c>)
 8008bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bfe:	0152      	lsls	r2, r2, #5
 8008c00:	b2d2      	uxtb	r2, r2
 8008c02:	440b      	add	r3, r1
 8008c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008c08:	e00a      	b.n	8008c20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	b2da      	uxtb	r2, r3
 8008c0e:	4908      	ldr	r1, [pc, #32]	; (8008c30 <__NVIC_SetPriority+0x50>)
 8008c10:	79fb      	ldrb	r3, [r7, #7]
 8008c12:	f003 030f 	and.w	r3, r3, #15
 8008c16:	3b04      	subs	r3, #4
 8008c18:	0152      	lsls	r2, r2, #5
 8008c1a:	b2d2      	uxtb	r2, r2
 8008c1c:	440b      	add	r3, r1
 8008c1e:	761a      	strb	r2, [r3, #24]
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr
 8008c2c:	e000e100 	.word	0xe000e100
 8008c30:	e000ed00 	.word	0xe000ed00

08008c34 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008c34:	b580      	push	{r7, lr}
 8008c36:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008c38:	4b05      	ldr	r3, [pc, #20]	; (8008c50 <SysTick_Handler+0x1c>)
 8008c3a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008c3c:	f001 fb9e 	bl	800a37c <xTaskGetSchedulerState>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d001      	beq.n	8008c4a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008c46:	f001 fff3 	bl	800ac30 <xPortSysTickHandler>
  }
}
 8008c4a:	bf00      	nop
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	e000e010 	.word	0xe000e010

08008c54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008c54:	b580      	push	{r7, lr}
 8008c56:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008c58:	2100      	movs	r1, #0
 8008c5a:	f06f 0004 	mvn.w	r0, #4
 8008c5e:	f7ff ffbf 	bl	8008be0 <__NVIC_SetPriority>
#endif
}
 8008c62:	bf00      	nop
 8008c64:	bd80      	pop	{r7, pc}
	...

08008c68 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c6e:	f3ef 8305 	mrs	r3, IPSR
 8008c72:	603b      	str	r3, [r7, #0]
  return(result);
 8008c74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d003      	beq.n	8008c82 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008c7a:	f06f 0305 	mvn.w	r3, #5
 8008c7e:	607b      	str	r3, [r7, #4]
 8008c80:	e00c      	b.n	8008c9c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008c82:	4b0a      	ldr	r3, [pc, #40]	; (8008cac <osKernelInitialize+0x44>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d105      	bne.n	8008c96 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008c8a:	4b08      	ldr	r3, [pc, #32]	; (8008cac <osKernelInitialize+0x44>)
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008c90:	2300      	movs	r3, #0
 8008c92:	607b      	str	r3, [r7, #4]
 8008c94:	e002      	b.n	8008c9c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008c96:	f04f 33ff 	mov.w	r3, #4294967295
 8008c9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008c9c:	687b      	ldr	r3, [r7, #4]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	370c      	adds	r7, #12
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	20000844 	.word	0x20000844

08008cb0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cb6:	f3ef 8305 	mrs	r3, IPSR
 8008cba:	603b      	str	r3, [r7, #0]
  return(result);
 8008cbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <osKernelStart+0x1a>
    stat = osErrorISR;
 8008cc2:	f06f 0305 	mvn.w	r3, #5
 8008cc6:	607b      	str	r3, [r7, #4]
 8008cc8:	e010      	b.n	8008cec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008cca:	4b0b      	ldr	r3, [pc, #44]	; (8008cf8 <osKernelStart+0x48>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d109      	bne.n	8008ce6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008cd2:	f7ff ffbf 	bl	8008c54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008cd6:	4b08      	ldr	r3, [pc, #32]	; (8008cf8 <osKernelStart+0x48>)
 8008cd8:	2202      	movs	r2, #2
 8008cda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008cdc:	f000 ff70 	bl	8009bc0 <vTaskStartScheduler>
      stat = osOK;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	607b      	str	r3, [r7, #4]
 8008ce4:	e002      	b.n	8008cec <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8008cea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008cec:	687b      	ldr	r3, [r7, #4]
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3708      	adds	r7, #8
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	20000844 	.word	0x20000844

08008cfc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b08e      	sub	sp, #56	; 0x38
 8008d00:	af04      	add	r7, sp, #16
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d0c:	f3ef 8305 	mrs	r3, IPSR
 8008d10:	617b      	str	r3, [r7, #20]
  return(result);
 8008d12:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d17e      	bne.n	8008e16 <osThreadNew+0x11a>
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d07b      	beq.n	8008e16 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008d1e:	2380      	movs	r3, #128	; 0x80
 8008d20:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008d22:	2318      	movs	r3, #24
 8008d24:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008d26:	2300      	movs	r3, #0
 8008d28:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d2e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d045      	beq.n	8008dc2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d002      	beq.n	8008d44 <osThreadNew+0x48>
        name = attr->name;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d002      	beq.n	8008d52 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d008      	beq.n	8008d6a <osThreadNew+0x6e>
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	2b38      	cmp	r3, #56	; 0x38
 8008d5c:	d805      	bhi.n	8008d6a <osThreadNew+0x6e>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	f003 0301 	and.w	r3, r3, #1
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d001      	beq.n	8008d6e <osThreadNew+0x72>
        return (NULL);
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	e054      	b.n	8008e18 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	695b      	ldr	r3, [r3, #20]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d003      	beq.n	8008d7e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	695b      	ldr	r3, [r3, #20]
 8008d7a:	089b      	lsrs	r3, r3, #2
 8008d7c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00e      	beq.n	8008da4 <osThreadNew+0xa8>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	2b5b      	cmp	r3, #91	; 0x5b
 8008d8c:	d90a      	bls.n	8008da4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d006      	beq.n	8008da4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	695b      	ldr	r3, [r3, #20]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d002      	beq.n	8008da4 <osThreadNew+0xa8>
        mem = 1;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	61bb      	str	r3, [r7, #24]
 8008da2:	e010      	b.n	8008dc6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10c      	bne.n	8008dc6 <osThreadNew+0xca>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d108      	bne.n	8008dc6 <osThreadNew+0xca>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d104      	bne.n	8008dc6 <osThreadNew+0xca>
          mem = 0;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	61bb      	str	r3, [r7, #24]
 8008dc0:	e001      	b.n	8008dc6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008dc6:	69bb      	ldr	r3, [r7, #24]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d110      	bne.n	8008dee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008dd4:	9202      	str	r2, [sp, #8]
 8008dd6:	9301      	str	r3, [sp, #4]
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	9300      	str	r3, [sp, #0]
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	6a3a      	ldr	r2, [r7, #32]
 8008de0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	f000 fd4c 	bl	8009880 <xTaskCreateStatic>
 8008de8:	4603      	mov	r3, r0
 8008dea:	613b      	str	r3, [r7, #16]
 8008dec:	e013      	b.n	8008e16 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d110      	bne.n	8008e16 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008df4:	6a3b      	ldr	r3, [r7, #32]
 8008df6:	b29a      	uxth	r2, r3
 8008df8:	f107 0310 	add.w	r3, r7, #16
 8008dfc:	9301      	str	r3, [sp, #4]
 8008dfe:	69fb      	ldr	r3, [r7, #28]
 8008e00:	9300      	str	r3, [sp, #0]
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f000 fd7f 	bl	800990a <xTaskCreate>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d001      	beq.n	8008e16 <osThreadNew+0x11a>
            hTask = NULL;
 8008e12:	2300      	movs	r3, #0
 8008e14:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008e16:	693b      	ldr	r3, [r7, #16]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3728      	adds	r7, #40	; 0x28
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e28:	f3ef 8305 	mrs	r3, IPSR
 8008e2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8008e2e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d003      	beq.n	8008e3c <osDelay+0x1c>
    stat = osErrorISR;
 8008e34:	f06f 0305 	mvn.w	r3, #5
 8008e38:	60fb      	str	r3, [r7, #12]
 8008e3a:	e007      	b.n	8008e4c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d002      	beq.n	8008e4c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 fe96 	bl	8009b78 <vTaskDelay>
    }
  }

  return (stat);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
	...

08008e58 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008e58:	b480      	push	{r7}
 8008e5a:	b085      	sub	sp, #20
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	4a07      	ldr	r2, [pc, #28]	; (8008e84 <vApplicationGetIdleTaskMemory+0x2c>)
 8008e68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	4a06      	ldr	r2, [pc, #24]	; (8008e88 <vApplicationGetIdleTaskMemory+0x30>)
 8008e6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2280      	movs	r2, #128	; 0x80
 8008e74:	601a      	str	r2, [r3, #0]
}
 8008e76:	bf00      	nop
 8008e78:	3714      	adds	r7, #20
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	20000848 	.word	0x20000848
 8008e88:	200008a4 	.word	0x200008a4

08008e8c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	4a07      	ldr	r2, [pc, #28]	; (8008eb8 <vApplicationGetTimerTaskMemory+0x2c>)
 8008e9c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	4a06      	ldr	r2, [pc, #24]	; (8008ebc <vApplicationGetTimerTaskMemory+0x30>)
 8008ea2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008eaa:	601a      	str	r2, [r3, #0]
}
 8008eac:	bf00      	nop
 8008eae:	3714      	adds	r7, #20
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr
 8008eb8:	20000aa4 	.word	0x20000aa4
 8008ebc:	20000b00 	.word	0x20000b00

08008ec0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f103 0208 	add.w	r2, r3, #8
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ed8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f103 0208 	add.w	r2, r3, #8
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f103 0208 	add.w	r2, r3, #8
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008f0e:	bf00      	nop
 8008f10:	370c      	adds	r7, #12
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr

08008f1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f1a:	b480      	push	{r7}
 8008f1c:	b085      	sub	sp, #20
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
 8008f22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	689a      	ldr	r2, [r3, #8]
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	683a      	ldr	r2, [r7, #0]
 8008f3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	1c5a      	adds	r2, r3, #1
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	601a      	str	r2, [r3, #0]
}
 8008f56:	bf00      	nop
 8008f58:	3714      	adds	r7, #20
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr

08008f62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f62:	b480      	push	{r7}
 8008f64:	b085      	sub	sp, #20
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
 8008f6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f78:	d103      	bne.n	8008f82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	60fb      	str	r3, [r7, #12]
 8008f80:	e00c      	b.n	8008f9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	3308      	adds	r3, #8
 8008f86:	60fb      	str	r3, [r7, #12]
 8008f88:	e002      	b.n	8008f90 <vListInsert+0x2e>
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	60fb      	str	r3, [r7, #12]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	68ba      	ldr	r2, [r7, #8]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d2f6      	bcs.n	8008f8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	685a      	ldr	r2, [r3, #4]
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	683a      	ldr	r2, [r7, #0]
 8008faa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	683a      	ldr	r2, [r7, #0]
 8008fb6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	1c5a      	adds	r2, r3, #1
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	601a      	str	r2, [r3, #0]
}
 8008fc8:	bf00      	nop
 8008fca:	3714      	adds	r7, #20
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	6892      	ldr	r2, [r2, #8]
 8008fea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	6852      	ldr	r2, [r2, #4]
 8008ff4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d103      	bne.n	8009008 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	689a      	ldr	r2, [r3, #8]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	1e5a      	subs	r2, r3, #1
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
}
 800901c:	4618      	mov	r0, r3
 800901e:	3714      	adds	r7, #20
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d102      	bne.n	8009042 <xQueueGenericReset+0x1a>
 800903c:	f001 ff04 	bl	800ae48 <ulSetInterruptMask>
 8009040:	e7fe      	b.n	8009040 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 8009042:	f001 fdc9 	bl	800abd8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800904e:	68f9      	ldr	r1, [r7, #12]
 8009050:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009052:	fb01 f303 	mul.w	r3, r1, r3
 8009056:	441a      	add	r2, r3
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2200      	movs	r2, #0
 8009060:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009072:	3b01      	subs	r3, #1
 8009074:	68f9      	ldr	r1, [r7, #12]
 8009076:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009078:	fb01 f303 	mul.w	r3, r1, r3
 800907c:	441a      	add	r2, r3
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	22ff      	movs	r2, #255	; 0xff
 8009086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	22ff      	movs	r2, #255	; 0xff
 800908e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d10e      	bne.n	80090b6 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d014      	beq.n	80090ca <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	3310      	adds	r3, #16
 80090a4:	4618      	mov	r0, r3
 80090a6:	f000 ffd3 	bl	800a050 <xTaskRemoveFromEventList>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00c      	beq.n	80090ca <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80090b0:	f001 fd80 	bl	800abb4 <vPortYield>
 80090b4:	e009      	b.n	80090ca <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	3310      	adds	r3, #16
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7ff ff00 	bl	8008ec0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	3324      	adds	r3, #36	; 0x24
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7ff fefb 	bl	8008ec0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80090ca:	f001 fd97 	bl	800abfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80090ce:	2301      	movs	r3, #1
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3710      	adds	r7, #16
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b088      	sub	sp, #32
 80090dc:	af02      	add	r7, sp, #8
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	607a      	str	r2, [r7, #4]
 80090e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d102      	bne.n	80090f2 <xQueueGenericCreateStatic+0x1a>
 80090ec:	f001 feac 	bl	800ae48 <ulSetInterruptMask>
 80090f0:	e7fe      	b.n	80090f0 <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d102      	bne.n	80090fe <xQueueGenericCreateStatic+0x26>
 80090f8:	f001 fea6 	bl	800ae48 <ulSetInterruptMask>
 80090fc:	e7fe      	b.n	80090fc <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d002      	beq.n	800910a <xQueueGenericCreateStatic+0x32>
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d001      	beq.n	800910e <xQueueGenericCreateStatic+0x36>
 800910a:	2301      	movs	r3, #1
 800910c:	e000      	b.n	8009110 <xQueueGenericCreateStatic+0x38>
 800910e:	2300      	movs	r3, #0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d102      	bne.n	800911a <xQueueGenericCreateStatic+0x42>
 8009114:	f001 fe98 	bl	800ae48 <ulSetInterruptMask>
 8009118:	e7fe      	b.n	8009118 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d102      	bne.n	8009126 <xQueueGenericCreateStatic+0x4e>
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d101      	bne.n	800912a <xQueueGenericCreateStatic+0x52>
 8009126:	2301      	movs	r3, #1
 8009128:	e000      	b.n	800912c <xQueueGenericCreateStatic+0x54>
 800912a:	2300      	movs	r3, #0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d102      	bne.n	8009136 <xQueueGenericCreateStatic+0x5e>
 8009130:	f001 fe8a 	bl	800ae48 <ulSetInterruptMask>
 8009134:	e7fe      	b.n	8009134 <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009136:	2350      	movs	r3, #80	; 0x50
 8009138:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	2b50      	cmp	r3, #80	; 0x50
 800913e:	d002      	beq.n	8009146 <xQueueGenericCreateStatic+0x6e>
 8009140:	f001 fe82 	bl	800ae48 <ulSetInterruptMask>
 8009144:	e7fe      	b.n	8009144 <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009146:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00d      	beq.n	800916e <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	2201      	movs	r2, #1
 8009156:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800915a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	4613      	mov	r3, r2
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	68b9      	ldr	r1, [r7, #8]
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f000 f805 	bl	8009178 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800916e:	697b      	ldr	r3, [r7, #20]
	}
 8009170:	4618      	mov	r0, r3
 8009172:	3718      	adds	r7, #24
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	607a      	str	r2, [r7, #4]
 8009184:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d103      	bne.n	8009194 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800918c:	69bb      	ldr	r3, [r7, #24]
 800918e:	69ba      	ldr	r2, [r7, #24]
 8009190:	601a      	str	r2, [r3, #0]
 8009192:	e002      	b.n	800919a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80091a0:	69bb      	ldr	r3, [r7, #24]
 80091a2:	68ba      	ldr	r2, [r7, #8]
 80091a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80091a6:	2101      	movs	r1, #1
 80091a8:	69b8      	ldr	r0, [r7, #24]
 80091aa:	f7ff ff3d 	bl	8009028 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	78fa      	ldrb	r2, [r7, #3]
 80091b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80091b6:	bf00      	nop
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b08a      	sub	sp, #40	; 0x28
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	60f8      	str	r0, [r7, #12]
 80091c6:	60b9      	str	r1, [r7, #8]
 80091c8:	607a      	str	r2, [r7, #4]
 80091ca:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80091cc:	2300      	movs	r3, #0
 80091ce:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80091d4:	6a3b      	ldr	r3, [r7, #32]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d102      	bne.n	80091e0 <xQueueGenericSend+0x22>
 80091da:	f001 fe35 	bl	800ae48 <ulSetInterruptMask>
 80091de:	e7fe      	b.n	80091de <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d103      	bne.n	80091ee <xQueueGenericSend+0x30>
 80091e6:	6a3b      	ldr	r3, [r7, #32]
 80091e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d101      	bne.n	80091f2 <xQueueGenericSend+0x34>
 80091ee:	2301      	movs	r3, #1
 80091f0:	e000      	b.n	80091f4 <xQueueGenericSend+0x36>
 80091f2:	2300      	movs	r3, #0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d102      	bne.n	80091fe <xQueueGenericSend+0x40>
 80091f8:	f001 fe26 	bl	800ae48 <ulSetInterruptMask>
 80091fc:	e7fe      	b.n	80091fc <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	2b02      	cmp	r3, #2
 8009202:	d103      	bne.n	800920c <xQueueGenericSend+0x4e>
 8009204:	6a3b      	ldr	r3, [r7, #32]
 8009206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009208:	2b01      	cmp	r3, #1
 800920a:	d101      	bne.n	8009210 <xQueueGenericSend+0x52>
 800920c:	2301      	movs	r3, #1
 800920e:	e000      	b.n	8009212 <xQueueGenericSend+0x54>
 8009210:	2300      	movs	r3, #0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d102      	bne.n	800921c <xQueueGenericSend+0x5e>
 8009216:	f001 fe17 	bl	800ae48 <ulSetInterruptMask>
 800921a:	e7fe      	b.n	800921a <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800921c:	f001 f8ae 	bl	800a37c <xTaskGetSchedulerState>
 8009220:	4603      	mov	r3, r0
 8009222:	2b00      	cmp	r3, #0
 8009224:	d102      	bne.n	800922c <xQueueGenericSend+0x6e>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d101      	bne.n	8009230 <xQueueGenericSend+0x72>
 800922c:	2301      	movs	r3, #1
 800922e:	e000      	b.n	8009232 <xQueueGenericSend+0x74>
 8009230:	2300      	movs	r3, #0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d102      	bne.n	800923c <xQueueGenericSend+0x7e>
 8009236:	f001 fe07 	bl	800ae48 <ulSetInterruptMask>
 800923a:	e7fe      	b.n	800923a <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800923c:	f001 fccc 	bl	800abd8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009240:	6a3b      	ldr	r3, [r7, #32]
 8009242:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009244:	6a3b      	ldr	r3, [r7, #32]
 8009246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009248:	429a      	cmp	r2, r3
 800924a:	d302      	bcc.n	8009252 <xQueueGenericSend+0x94>
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	2b02      	cmp	r3, #2
 8009250:	d11d      	bne.n	800928e <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009252:	683a      	ldr	r2, [r7, #0]
 8009254:	68b9      	ldr	r1, [r7, #8]
 8009256:	6a38      	ldr	r0, [r7, #32]
 8009258:	f000 f9a4 	bl	80095a4 <prvCopyDataToQueue>
 800925c:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800925e:	6a3b      	ldr	r3, [r7, #32]
 8009260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00a      	beq.n	800927c <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009266:	6a3b      	ldr	r3, [r7, #32]
 8009268:	3324      	adds	r3, #36	; 0x24
 800926a:	4618      	mov	r0, r3
 800926c:	f000 fef0 	bl	800a050 <xTaskRemoveFromEventList>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d007      	beq.n	8009286 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009276:	f001 fc9d 	bl	800abb4 <vPortYield>
 800927a:	e004      	b.n	8009286 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d001      	beq.n	8009286 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009282:	f001 fc97 	bl	800abb4 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009286:	f001 fcb9 	bl	800abfc <vPortExitCritical>
				return pdPASS;
 800928a:	2301      	movs	r3, #1
 800928c:	e05c      	b.n	8009348 <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d103      	bne.n	800929c <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009294:	f001 fcb2 	bl	800abfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009298:	2300      	movs	r3, #0
 800929a:	e055      	b.n	8009348 <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800929c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d106      	bne.n	80092b0 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80092a2:	f107 0314 	add.w	r3, r7, #20
 80092a6:	4618      	mov	r0, r3
 80092a8:	f000 ff2e 	bl	800a108 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80092ac:	2301      	movs	r3, #1
 80092ae:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80092b0:	f001 fca4 	bl	800abfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80092b4:	f000 fcda 	bl	8009c6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80092b8:	f001 fc8e 	bl	800abd8 <vPortEnterCritical>
 80092bc:	6a3b      	ldr	r3, [r7, #32]
 80092be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092c2:	b25b      	sxtb	r3, r3
 80092c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c8:	d103      	bne.n	80092d2 <xQueueGenericSend+0x114>
 80092ca:	6a3b      	ldr	r3, [r7, #32]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092d2:	6a3b      	ldr	r3, [r7, #32]
 80092d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092d8:	b25b      	sxtb	r3, r3
 80092da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092de:	d103      	bne.n	80092e8 <xQueueGenericSend+0x12a>
 80092e0:	6a3b      	ldr	r3, [r7, #32]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092e8:	f001 fc88 	bl	800abfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80092ec:	1d3a      	adds	r2, r7, #4
 80092ee:	f107 0314 	add.w	r3, r7, #20
 80092f2:	4611      	mov	r1, r2
 80092f4:	4618      	mov	r0, r3
 80092f6:	f000 ff1d 	bl	800a134 <xTaskCheckForTimeOut>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d11d      	bne.n	800933c <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009300:	6a38      	ldr	r0, [r7, #32]
 8009302:	f000 fa47 	bl	8009794 <prvIsQueueFull>
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d011      	beq.n	8009330 <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800930c:	6a3b      	ldr	r3, [r7, #32]
 800930e:	3310      	adds	r3, #16
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	4611      	mov	r1, r2
 8009314:	4618      	mov	r0, r3
 8009316:	f000 fe5b 	bl	8009fd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800931a:	6a38      	ldr	r0, [r7, #32]
 800931c:	f000 f9d2 	bl	80096c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009320:	f000 fcb2 	bl	8009c88 <xTaskResumeAll>
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	d188      	bne.n	800923c <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 800932a:	f001 fc43 	bl	800abb4 <vPortYield>
 800932e:	e785      	b.n	800923c <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009330:	6a38      	ldr	r0, [r7, #32]
 8009332:	f000 f9c7 	bl	80096c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009336:	f000 fca7 	bl	8009c88 <xTaskResumeAll>
 800933a:	e77f      	b.n	800923c <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800933c:	6a38      	ldr	r0, [r7, #32]
 800933e:	f000 f9c1 	bl	80096c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009342:	f000 fca1 	bl	8009c88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009346:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009348:	4618      	mov	r0, r3
 800934a:	3728      	adds	r7, #40	; 0x28
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b08a      	sub	sp, #40	; 0x28
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]
 800935c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8009362:	6a3b      	ldr	r3, [r7, #32]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d102      	bne.n	800936e <xQueueGenericSendFromISR+0x1e>
 8009368:	f001 fd6e 	bl	800ae48 <ulSetInterruptMask>
 800936c:	e7fe      	b.n	800936c <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d103      	bne.n	800937c <xQueueGenericSendFromISR+0x2c>
 8009374:	6a3b      	ldr	r3, [r7, #32]
 8009376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009378:	2b00      	cmp	r3, #0
 800937a:	d101      	bne.n	8009380 <xQueueGenericSendFromISR+0x30>
 800937c:	2301      	movs	r3, #1
 800937e:	e000      	b.n	8009382 <xQueueGenericSendFromISR+0x32>
 8009380:	2300      	movs	r3, #0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d102      	bne.n	800938c <xQueueGenericSendFromISR+0x3c>
 8009386:	f001 fd5f 	bl	800ae48 <ulSetInterruptMask>
 800938a:	e7fe      	b.n	800938a <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	2b02      	cmp	r3, #2
 8009390:	d103      	bne.n	800939a <xQueueGenericSendFromISR+0x4a>
 8009392:	6a3b      	ldr	r3, [r7, #32]
 8009394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009396:	2b01      	cmp	r3, #1
 8009398:	d101      	bne.n	800939e <xQueueGenericSendFromISR+0x4e>
 800939a:	2301      	movs	r3, #1
 800939c:	e000      	b.n	80093a0 <xQueueGenericSendFromISR+0x50>
 800939e:	2300      	movs	r3, #0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d102      	bne.n	80093aa <xQueueGenericSendFromISR+0x5a>
 80093a4:	f001 fd50 	bl	800ae48 <ulSetInterruptMask>
 80093a8:	e7fe      	b.n	80093a8 <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80093aa:	f001 fd4d 	bl	800ae48 <ulSetInterruptMask>
 80093ae:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80093b0:	6a3b      	ldr	r3, [r7, #32]
 80093b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093b4:	6a3b      	ldr	r3, [r7, #32]
 80093b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d302      	bcc.n	80093c2 <xQueueGenericSendFromISR+0x72>
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	2b02      	cmp	r3, #2
 80093c0:	d12d      	bne.n	800941e <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80093c2:	6a3b      	ldr	r3, [r7, #32]
 80093c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093c8:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093ca:	6a3b      	ldr	r3, [r7, #32]
 80093cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ce:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80093d0:	683a      	ldr	r2, [r7, #0]
 80093d2:	68b9      	ldr	r1, [r7, #8]
 80093d4:	6a38      	ldr	r0, [r7, #32]
 80093d6:	f000 f8e5 	bl	80095a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80093da:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80093de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e2:	d112      	bne.n	800940a <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093e4:	6a3b      	ldr	r3, [r7, #32]
 80093e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d015      	beq.n	8009418 <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093ec:	6a3b      	ldr	r3, [r7, #32]
 80093ee:	3324      	adds	r3, #36	; 0x24
 80093f0:	4618      	mov	r0, r3
 80093f2:	f000 fe2d 	bl	800a050 <xTaskRemoveFromEventList>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d00d      	beq.n	8009418 <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00a      	beq.n	8009418 <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2201      	movs	r2, #1
 8009406:	601a      	str	r2, [r3, #0]
 8009408:	e006      	b.n	8009418 <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800940a:	7efb      	ldrb	r3, [r7, #27]
 800940c:	3301      	adds	r3, #1
 800940e:	b2db      	uxtb	r3, r3
 8009410:	b25a      	sxtb	r2, r3
 8009412:	6a3b      	ldr	r3, [r7, #32]
 8009414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009418:	2301      	movs	r3, #1
 800941a:	627b      	str	r3, [r7, #36]	; 0x24
		{
 800941c:	e001      	b.n	8009422 <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800941e:	2300      	movs	r3, #0
 8009420:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8009422:	69f8      	ldr	r0, [r7, #28]
 8009424:	f001 fd1d 	bl	800ae62 <vClearInterruptMask>

	return xReturn;
 8009428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800942a:	4618      	mov	r0, r3
 800942c:	3728      	adds	r7, #40	; 0x28
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b08a      	sub	sp, #40	; 0x28
 8009436:	af00      	add	r7, sp, #0
 8009438:	60f8      	str	r0, [r7, #12]
 800943a:	60b9      	str	r1, [r7, #8]
 800943c:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800943e:	2300      	movs	r3, #0
 8009440:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009446:	6a3b      	ldr	r3, [r7, #32]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d102      	bne.n	8009452 <xQueueReceive+0x20>
 800944c:	f001 fcfc 	bl	800ae48 <ulSetInterruptMask>
 8009450:	e7fe      	b.n	8009450 <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d103      	bne.n	8009460 <xQueueReceive+0x2e>
 8009458:	6a3b      	ldr	r3, [r7, #32]
 800945a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945c:	2b00      	cmp	r3, #0
 800945e:	d101      	bne.n	8009464 <xQueueReceive+0x32>
 8009460:	2301      	movs	r3, #1
 8009462:	e000      	b.n	8009466 <xQueueReceive+0x34>
 8009464:	2300      	movs	r3, #0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d102      	bne.n	8009470 <xQueueReceive+0x3e>
 800946a:	f001 fced 	bl	800ae48 <ulSetInterruptMask>
 800946e:	e7fe      	b.n	800946e <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009470:	f000 ff84 	bl	800a37c <xTaskGetSchedulerState>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d102      	bne.n	8009480 <xQueueReceive+0x4e>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d101      	bne.n	8009484 <xQueueReceive+0x52>
 8009480:	2301      	movs	r3, #1
 8009482:	e000      	b.n	8009486 <xQueueReceive+0x54>
 8009484:	2300      	movs	r3, #0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d102      	bne.n	8009490 <xQueueReceive+0x5e>
 800948a:	f001 fcdd 	bl	800ae48 <ulSetInterruptMask>
 800948e:	e7fe      	b.n	800948e <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009490:	f001 fba2 	bl	800abd8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009494:	6a3b      	ldr	r3, [r7, #32]
 8009496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009498:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d019      	beq.n	80094d4 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80094a0:	68b9      	ldr	r1, [r7, #8]
 80094a2:	6a38      	ldr	r0, [r7, #32]
 80094a4:	f000 f8e8 	bl	8009678 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	1e5a      	subs	r2, r3, #1
 80094ac:	6a3b      	ldr	r3, [r7, #32]
 80094ae:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094b0:	6a3b      	ldr	r3, [r7, #32]
 80094b2:	691b      	ldr	r3, [r3, #16]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d009      	beq.n	80094cc <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094b8:	6a3b      	ldr	r3, [r7, #32]
 80094ba:	3310      	adds	r3, #16
 80094bc:	4618      	mov	r0, r3
 80094be:	f000 fdc7 	bl	800a050 <xTaskRemoveFromEventList>
 80094c2:	4603      	mov	r3, r0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d001      	beq.n	80094cc <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80094c8:	f001 fb74 	bl	800abb4 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80094cc:	f001 fb96 	bl	800abfc <vPortExitCritical>
				return pdPASS;
 80094d0:	2301      	movs	r3, #1
 80094d2:	e063      	b.n	800959c <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d103      	bne.n	80094e2 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80094da:	f001 fb8f 	bl	800abfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80094de:	2300      	movs	r3, #0
 80094e0:	e05c      	b.n	800959c <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80094e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d106      	bne.n	80094f6 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80094e8:	f107 0314 	add.w	r3, r7, #20
 80094ec:	4618      	mov	r0, r3
 80094ee:	f000 fe0b 	bl	800a108 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80094f2:	2301      	movs	r3, #1
 80094f4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80094f6:	f001 fb81 	bl	800abfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80094fa:	f000 fbb7 	bl	8009c6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80094fe:	f001 fb6b 	bl	800abd8 <vPortEnterCritical>
 8009502:	6a3b      	ldr	r3, [r7, #32]
 8009504:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009508:	b25b      	sxtb	r3, r3
 800950a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800950e:	d103      	bne.n	8009518 <xQueueReceive+0xe6>
 8009510:	6a3b      	ldr	r3, [r7, #32]
 8009512:	2200      	movs	r2, #0
 8009514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009518:	6a3b      	ldr	r3, [r7, #32]
 800951a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800951e:	b25b      	sxtb	r3, r3
 8009520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009524:	d103      	bne.n	800952e <xQueueReceive+0xfc>
 8009526:	6a3b      	ldr	r3, [r7, #32]
 8009528:	2200      	movs	r2, #0
 800952a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800952e:	f001 fb65 	bl	800abfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009532:	1d3a      	adds	r2, r7, #4
 8009534:	f107 0314 	add.w	r3, r7, #20
 8009538:	4611      	mov	r1, r2
 800953a:	4618      	mov	r0, r3
 800953c:	f000 fdfa 	bl	800a134 <xTaskCheckForTimeOut>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d11d      	bne.n	8009582 <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009546:	6a38      	ldr	r0, [r7, #32]
 8009548:	f000 f90e 	bl	8009768 <prvIsQueueEmpty>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d011      	beq.n	8009576 <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009552:	6a3b      	ldr	r3, [r7, #32]
 8009554:	3324      	adds	r3, #36	; 0x24
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	4611      	mov	r1, r2
 800955a:	4618      	mov	r0, r3
 800955c:	f000 fd38 	bl	8009fd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009560:	6a38      	ldr	r0, [r7, #32]
 8009562:	f000 f8af 	bl	80096c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009566:	f000 fb8f 	bl	8009c88 <xTaskResumeAll>
 800956a:	4603      	mov	r3, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d18f      	bne.n	8009490 <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 8009570:	f001 fb20 	bl	800abb4 <vPortYield>
 8009574:	e78c      	b.n	8009490 <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009576:	6a38      	ldr	r0, [r7, #32]
 8009578:	f000 f8a4 	bl	80096c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800957c:	f000 fb84 	bl	8009c88 <xTaskResumeAll>
 8009580:	e786      	b.n	8009490 <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009582:	6a38      	ldr	r0, [r7, #32]
 8009584:	f000 f89e 	bl	80096c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009588:	f000 fb7e 	bl	8009c88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800958c:	6a38      	ldr	r0, [r7, #32]
 800958e:	f000 f8eb 	bl	8009768 <prvIsQueueEmpty>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	f43f af7b 	beq.w	8009490 <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800959a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800959c:	4618      	mov	r0, r3
 800959e:	3728      	adds	r7, #40	; 0x28
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b086      	sub	sp, #24
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80095b0:	2300      	movs	r3, #0
 80095b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d10d      	bne.n	80095de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d14d      	bne.n	8009666 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	4618      	mov	r0, r3
 80095d0:	f000 fef2 	bl	800a3b8 <xTaskPriorityDisinherit>
 80095d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2200      	movs	r2, #0
 80095da:	609a      	str	r2, [r3, #8]
 80095dc:	e043      	b.n	8009666 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d119      	bne.n	8009618 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6858      	ldr	r0, [r3, #4]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ec:	461a      	mov	r2, r3
 80095ee:	68b9      	ldr	r1, [r7, #8]
 80095f0:	f001 feae 	bl	800b350 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	685a      	ldr	r2, [r3, #4]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095fc:	441a      	add	r2, r3
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	685a      	ldr	r2, [r3, #4]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	429a      	cmp	r2, r3
 800960c:	d32b      	bcc.n	8009666 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	605a      	str	r2, [r3, #4]
 8009616:	e026      	b.n	8009666 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	68d8      	ldr	r0, [r3, #12]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009620:	461a      	mov	r2, r3
 8009622:	68b9      	ldr	r1, [r7, #8]
 8009624:	f001 fe94 	bl	800b350 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	68da      	ldr	r2, [r3, #12]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009630:	425b      	negs	r3, r3
 8009632:	441a      	add	r2, r3
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	68da      	ldr	r2, [r3, #12]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	429a      	cmp	r2, r3
 8009642:	d207      	bcs.n	8009654 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	689a      	ldr	r2, [r3, #8]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800964c:	425b      	negs	r3, r3
 800964e:	441a      	add	r2, r3
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2b02      	cmp	r3, #2
 8009658:	d105      	bne.n	8009666 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d002      	beq.n	8009666 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	3b01      	subs	r3, #1
 8009664:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	1c5a      	adds	r2, r3, #1
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800966e:	697b      	ldr	r3, [r7, #20]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3718      	adds	r7, #24
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009686:	2b00      	cmp	r3, #0
 8009688:	d018      	beq.n	80096bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	68da      	ldr	r2, [r3, #12]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009692:	441a      	add	r2, r3
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	68da      	ldr	r2, [r3, #12]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d303      	bcc.n	80096ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	68d9      	ldr	r1, [r3, #12]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b4:	461a      	mov	r2, r3
 80096b6:	6838      	ldr	r0, [r7, #0]
 80096b8:	f001 fe4a 	bl	800b350 <memcpy>
	}
}
 80096bc:	bf00      	nop
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80096cc:	f001 fa84 	bl	800abd8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80096d8:	e011      	b.n	80096fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d012      	beq.n	8009708 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	3324      	adds	r3, #36	; 0x24
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 fcb2 	bl	800a050 <xTaskRemoveFromEventList>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d001      	beq.n	80096f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80096f2:	f000 fd71 	bl	800a1d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80096f6:	7bfb      	ldrb	r3, [r7, #15]
 80096f8:	3b01      	subs	r3, #1
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80096fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009702:	2b00      	cmp	r3, #0
 8009704:	dce9      	bgt.n	80096da <prvUnlockQueue+0x16>
 8009706:	e000      	b.n	800970a <prvUnlockQueue+0x46>
					break;
 8009708:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	22ff      	movs	r2, #255	; 0xff
 800970e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009712:	f001 fa73 	bl	800abfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009716:	f001 fa5f 	bl	800abd8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009720:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009722:	e011      	b.n	8009748 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d012      	beq.n	8009752 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	3310      	adds	r3, #16
 8009730:	4618      	mov	r0, r3
 8009732:	f000 fc8d 	bl	800a050 <xTaskRemoveFromEventList>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d001      	beq.n	8009740 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800973c:	f000 fd4c 	bl	800a1d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009740:	7bbb      	ldrb	r3, [r7, #14]
 8009742:	3b01      	subs	r3, #1
 8009744:	b2db      	uxtb	r3, r3
 8009746:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009748:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800974c:	2b00      	cmp	r3, #0
 800974e:	dce9      	bgt.n	8009724 <prvUnlockQueue+0x60>
 8009750:	e000      	b.n	8009754 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009752:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	22ff      	movs	r2, #255	; 0xff
 8009758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800975c:	f001 fa4e 	bl	800abfc <vPortExitCritical>
}
 8009760:	bf00      	nop
 8009762:	3710      	adds	r7, #16
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009770:	f001 fa32 	bl	800abd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009778:	2b00      	cmp	r3, #0
 800977a:	d102      	bne.n	8009782 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800977c:	2301      	movs	r3, #1
 800977e:	60fb      	str	r3, [r7, #12]
 8009780:	e001      	b.n	8009786 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009782:	2300      	movs	r3, #0
 8009784:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009786:	f001 fa39 	bl	800abfc <vPortExitCritical>

	return xReturn;
 800978a:	68fb      	ldr	r3, [r7, #12]
}
 800978c:	4618      	mov	r0, r3
 800978e:	3710      	adds	r7, #16
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800979c:	f001 fa1c 	bl	800abd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d102      	bne.n	80097b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80097ac:	2301      	movs	r3, #1
 80097ae:	60fb      	str	r3, [r7, #12]
 80097b0:	e001      	b.n	80097b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80097b2:	2300      	movs	r3, #0
 80097b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80097b6:	f001 fa21 	bl	800abfc <vPortExitCritical>

	return xReturn;
 80097ba:	68fb      	ldr	r3, [r7, #12]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3710      	adds	r7, #16
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80097c4:	b480      	push	{r7}
 80097c6:	b085      	sub	sp, #20
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80097ce:	2300      	movs	r3, #0
 80097d0:	60fb      	str	r3, [r7, #12]
 80097d2:	e014      	b.n	80097fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80097d4:	4a0f      	ldr	r2, [pc, #60]	; (8009814 <vQueueAddToRegistry+0x50>)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d10b      	bne.n	80097f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80097e0:	490c      	ldr	r1, [pc, #48]	; (8009814 <vQueueAddToRegistry+0x50>)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	683a      	ldr	r2, [r7, #0]
 80097e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80097ea:	4a0a      	ldr	r2, [pc, #40]	; (8009814 <vQueueAddToRegistry+0x50>)
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	00db      	lsls	r3, r3, #3
 80097f0:	4413      	add	r3, r2
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80097f6:	e006      	b.n	8009806 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	3301      	adds	r3, #1
 80097fc:	60fb      	str	r3, [r7, #12]
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2b07      	cmp	r3, #7
 8009802:	d9e7      	bls.n	80097d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009804:	bf00      	nop
 8009806:	bf00      	nop
 8009808:	3714      	adds	r7, #20
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	20000f00 	.word	0x20000f00

08009818 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009818:	b580      	push	{r7, lr}
 800981a:	b086      	sub	sp, #24
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009828:	f001 f9d6 	bl	800abd8 <vPortEnterCritical>
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009832:	b25b      	sxtb	r3, r3
 8009834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009838:	d103      	bne.n	8009842 <vQueueWaitForMessageRestricted+0x2a>
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	2200      	movs	r2, #0
 800983e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009848:	b25b      	sxtb	r3, r3
 800984a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800984e:	d103      	bne.n	8009858 <vQueueWaitForMessageRestricted+0x40>
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	2200      	movs	r2, #0
 8009854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009858:	f001 f9d0 	bl	800abfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009860:	2b00      	cmp	r3, #0
 8009862:	d106      	bne.n	8009872 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	3324      	adds	r3, #36	; 0x24
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	68b9      	ldr	r1, [r7, #8]
 800986c:	4618      	mov	r0, r3
 800986e:	f000 fbcb 	bl	800a008 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009872:	6978      	ldr	r0, [r7, #20]
 8009874:	f7ff ff26 	bl	80096c4 <prvUnlockQueue>
	}
 8009878:	bf00      	nop
 800987a:	3718      	adds	r7, #24
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009880:	b580      	push	{r7, lr}
 8009882:	b08c      	sub	sp, #48	; 0x30
 8009884:	af04      	add	r7, sp, #16
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	607a      	str	r2, [r7, #4]
 800988c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800988e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009890:	2b00      	cmp	r3, #0
 8009892:	d102      	bne.n	800989a <xTaskCreateStatic+0x1a>
 8009894:	f001 fad8 	bl	800ae48 <ulSetInterruptMask>
 8009898:	e7fe      	b.n	8009898 <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 800989a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989c:	2b00      	cmp	r3, #0
 800989e:	d102      	bne.n	80098a6 <xTaskCreateStatic+0x26>
 80098a0:	f001 fad2 	bl	800ae48 <ulSetInterruptMask>
 80098a4:	e7fe      	b.n	80098a4 <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80098a6:	235c      	movs	r3, #92	; 0x5c
 80098a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	2b5c      	cmp	r3, #92	; 0x5c
 80098ae:	d002      	beq.n	80098b6 <xTaskCreateStatic+0x36>
 80098b0:	f001 faca 	bl	800ae48 <ulSetInterruptMask>
 80098b4:	e7fe      	b.n	80098b4 <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80098b6:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80098b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d01e      	beq.n	80098fc <xTaskCreateStatic+0x7c>
 80098be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d01b      	beq.n	80098fc <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80098c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c6:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80098ce:	69fb      	ldr	r3, [r7, #28]
 80098d0:	2202      	movs	r2, #2
 80098d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80098d6:	2300      	movs	r3, #0
 80098d8:	9303      	str	r3, [sp, #12]
 80098da:	69fb      	ldr	r3, [r7, #28]
 80098dc:	9302      	str	r3, [sp, #8]
 80098de:	f107 0318 	add.w	r3, r7, #24
 80098e2:	9301      	str	r3, [sp, #4]
 80098e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e6:	9300      	str	r3, [sp, #0]
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	68b9      	ldr	r1, [r7, #8]
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f000 f850 	bl	8009994 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098f4:	69f8      	ldr	r0, [r7, #28]
 80098f6:	f000 f8d7 	bl	8009aa8 <prvAddNewTaskToReadyList>
 80098fa:	e001      	b.n	8009900 <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 80098fc:	2300      	movs	r3, #0
 80098fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009900:	69bb      	ldr	r3, [r7, #24]
	}
 8009902:	4618      	mov	r0, r3
 8009904:	3720      	adds	r7, #32
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800990a:	b580      	push	{r7, lr}
 800990c:	b08c      	sub	sp, #48	; 0x30
 800990e:	af04      	add	r7, sp, #16
 8009910:	60f8      	str	r0, [r7, #12]
 8009912:	60b9      	str	r1, [r7, #8]
 8009914:	603b      	str	r3, [r7, #0]
 8009916:	4613      	mov	r3, r2
 8009918:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800991a:	88fb      	ldrh	r3, [r7, #6]
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	4618      	mov	r0, r3
 8009920:	f001 faf2 	bl	800af08 <pvPortMalloc>
 8009924:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d00e      	beq.n	800994a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800992c:	205c      	movs	r0, #92	; 0x5c
 800992e:	f001 faeb 	bl	800af08 <pvPortMalloc>
 8009932:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009934:	69fb      	ldr	r3, [r7, #28]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d003      	beq.n	8009942 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800993a:	69fb      	ldr	r3, [r7, #28]
 800993c:	697a      	ldr	r2, [r7, #20]
 800993e:	631a      	str	r2, [r3, #48]	; 0x30
 8009940:	e005      	b.n	800994e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009942:	6978      	ldr	r0, [r7, #20]
 8009944:	f001 fb94 	bl	800b070 <vPortFree>
 8009948:	e001      	b.n	800994e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800994a:	2300      	movs	r3, #0
 800994c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d017      	beq.n	8009984 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	2200      	movs	r2, #0
 8009958:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800995c:	88fa      	ldrh	r2, [r7, #6]
 800995e:	2300      	movs	r3, #0
 8009960:	9303      	str	r3, [sp, #12]
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	9302      	str	r3, [sp, #8]
 8009966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009968:	9301      	str	r3, [sp, #4]
 800996a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996c:	9300      	str	r3, [sp, #0]
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	68b9      	ldr	r1, [r7, #8]
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f000 f80e 	bl	8009994 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009978:	69f8      	ldr	r0, [r7, #28]
 800997a:	f000 f895 	bl	8009aa8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800997e:	2301      	movs	r3, #1
 8009980:	61bb      	str	r3, [r7, #24]
 8009982:	e002      	b.n	800998a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009984:	f04f 33ff 	mov.w	r3, #4294967295
 8009988:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800998a:	69bb      	ldr	r3, [r7, #24]
	}
 800998c:	4618      	mov	r0, r3
 800998e:	3720      	adds	r7, #32
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b086      	sub	sp, #24
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	607a      	str	r2, [r7, #4]
 80099a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80099a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	461a      	mov	r2, r3
 80099ac:	21a5      	movs	r1, #165	; 0xa5
 80099ae:	f001 fc9b 	bl	800b2e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80099b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80099bc:	3b01      	subs	r3, #1
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	4413      	add	r3, r2
 80099c2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	f023 0307 	bic.w	r3, r3, #7
 80099ca:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	f003 0307 	and.w	r3, r3, #7
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d002      	beq.n	80099dc <prvInitialiseNewTask+0x48>
 80099d6:	f001 fa37 	bl	800ae48 <ulSetInterruptMask>
 80099da:	e7fe      	b.n	80099da <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d01f      	beq.n	8009a22 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80099e2:	2300      	movs	r3, #0
 80099e4:	617b      	str	r3, [r7, #20]
 80099e6:	e012      	b.n	8009a0e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80099e8:	68ba      	ldr	r2, [r7, #8]
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	4413      	add	r3, r2
 80099ee:	7819      	ldrb	r1, [r3, #0]
 80099f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	4413      	add	r3, r2
 80099f6:	3334      	adds	r3, #52	; 0x34
 80099f8:	460a      	mov	r2, r1
 80099fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80099fc:	68ba      	ldr	r2, [r7, #8]
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	4413      	add	r3, r2
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d006      	beq.n	8009a16 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	617b      	str	r3, [r7, #20]
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	2b0f      	cmp	r3, #15
 8009a12:	d9e9      	bls.n	80099e8 <prvInitialiseNewTask+0x54>
 8009a14:	e000      	b.n	8009a18 <prvInitialiseNewTask+0x84>
			{
				break;
 8009a16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a20:	e003      	b.n	8009a2a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a24:	2200      	movs	r2, #0
 8009a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009a2a:	6a3b      	ldr	r3, [r7, #32]
 8009a2c:	2b37      	cmp	r3, #55	; 0x37
 8009a2e:	d901      	bls.n	8009a34 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009a30:	2337      	movs	r3, #55	; 0x37
 8009a32:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a36:	6a3a      	ldr	r2, [r7, #32]
 8009a38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3c:	6a3a      	ldr	r2, [r7, #32]
 8009a3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a42:	2200      	movs	r2, #0
 8009a44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a48:	3304      	adds	r3, #4
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7ff fa58 	bl	8008f00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a52:	3318      	adds	r3, #24
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7ff fa53 	bl	8008f00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a60:	6a3b      	ldr	r3, [r7, #32]
 8009a62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a72:	2200      	movs	r2, #0
 8009a74:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8009a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	68fa      	ldr	r2, [r7, #12]
 8009a86:	6938      	ldr	r0, [r7, #16]
 8009a88:	f001 f902 	bl	800ac90 <pxPortInitialiseStack>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a90:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d002      	beq.n	8009a9e <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a9e:	bf00      	nop
 8009aa0:	3718      	adds	r7, #24
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
	...

08009aa8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009ab0:	f001 f892 	bl	800abd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009ab4:	4b2a      	ldr	r3, [pc, #168]	; (8009b60 <prvAddNewTaskToReadyList+0xb8>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	3301      	adds	r3, #1
 8009aba:	4a29      	ldr	r2, [pc, #164]	; (8009b60 <prvAddNewTaskToReadyList+0xb8>)
 8009abc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009abe:	4b29      	ldr	r3, [pc, #164]	; (8009b64 <prvAddNewTaskToReadyList+0xbc>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d109      	bne.n	8009ada <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009ac6:	4a27      	ldr	r2, [pc, #156]	; (8009b64 <prvAddNewTaskToReadyList+0xbc>)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009acc:	4b24      	ldr	r3, [pc, #144]	; (8009b60 <prvAddNewTaskToReadyList+0xb8>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d110      	bne.n	8009af6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009ad4:	f000 fb9c 	bl	800a210 <prvInitialiseTaskLists>
 8009ad8:	e00d      	b.n	8009af6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009ada:	4b23      	ldr	r3, [pc, #140]	; (8009b68 <prvAddNewTaskToReadyList+0xc0>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d109      	bne.n	8009af6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009ae2:	4b20      	ldr	r3, [pc, #128]	; (8009b64 <prvAddNewTaskToReadyList+0xbc>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d802      	bhi.n	8009af6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009af0:	4a1c      	ldr	r2, [pc, #112]	; (8009b64 <prvAddNewTaskToReadyList+0xbc>)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009af6:	4b1d      	ldr	r3, [pc, #116]	; (8009b6c <prvAddNewTaskToReadyList+0xc4>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	3301      	adds	r3, #1
 8009afc:	4a1b      	ldr	r2, [pc, #108]	; (8009b6c <prvAddNewTaskToReadyList+0xc4>)
 8009afe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009b00:	4b1a      	ldr	r3, [pc, #104]	; (8009b6c <prvAddNewTaskToReadyList+0xc4>)
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b0c:	4b18      	ldr	r3, [pc, #96]	; (8009b70 <prvAddNewTaskToReadyList+0xc8>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d903      	bls.n	8009b1c <prvAddNewTaskToReadyList+0x74>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b18:	4a15      	ldr	r2, [pc, #84]	; (8009b70 <prvAddNewTaskToReadyList+0xc8>)
 8009b1a:	6013      	str	r3, [r2, #0]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b20:	4613      	mov	r3, r2
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	4413      	add	r3, r2
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	4a12      	ldr	r2, [pc, #72]	; (8009b74 <prvAddNewTaskToReadyList+0xcc>)
 8009b2a:	441a      	add	r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	3304      	adds	r3, #4
 8009b30:	4619      	mov	r1, r3
 8009b32:	4610      	mov	r0, r2
 8009b34:	f7ff f9f1 	bl	8008f1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009b38:	f001 f860 	bl	800abfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009b3c:	4b0a      	ldr	r3, [pc, #40]	; (8009b68 <prvAddNewTaskToReadyList+0xc0>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d008      	beq.n	8009b56 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009b44:	4b07      	ldr	r3, [pc, #28]	; (8009b64 <prvAddNewTaskToReadyList+0xbc>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d201      	bcs.n	8009b56 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009b52:	f001 f82f 	bl	800abb4 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b56:	bf00      	nop
 8009b58:	3708      	adds	r7, #8
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	20001414 	.word	0x20001414
 8009b64:	20000f40 	.word	0x20000f40
 8009b68:	20001420 	.word	0x20001420
 8009b6c:	20001430 	.word	0x20001430
 8009b70:	2000141c 	.word	0x2000141c
 8009b74:	20000f44 	.word	0x20000f44

08009b78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009b80:	2300      	movs	r3, #0
 8009b82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d00f      	beq.n	8009baa <vTaskDelay+0x32>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009b8a:	4b0c      	ldr	r3, [pc, #48]	; (8009bbc <vTaskDelay+0x44>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d002      	beq.n	8009b98 <vTaskDelay+0x20>
 8009b92:	f001 f959 	bl	800ae48 <ulSetInterruptMask>
 8009b96:	e7fe      	b.n	8009b96 <vTaskDelay+0x1e>
			vTaskSuspendAll();
 8009b98:	f000 f868 	bl	8009c6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 fc68 	bl	800a474 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009ba4:	f000 f870 	bl	8009c88 <xTaskResumeAll>
 8009ba8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d101      	bne.n	8009bb4 <vTaskDelay+0x3c>
		{
			portYIELD_WITHIN_API();
 8009bb0:	f001 f800 	bl	800abb4 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009bb4:	bf00      	nop
 8009bb6:	3710      	adds	r7, #16
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	2000143c 	.word	0x2000143c

08009bc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b088      	sub	sp, #32
 8009bc4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009bce:	463a      	mov	r2, r7
 8009bd0:	1d39      	adds	r1, r7, #4
 8009bd2:	f107 0308 	add.w	r3, r7, #8
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f7ff f93e 	bl	8008e58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009bdc:	6839      	ldr	r1, [r7, #0]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	68ba      	ldr	r2, [r7, #8]
 8009be2:	9202      	str	r2, [sp, #8]
 8009be4:	9301      	str	r3, [sp, #4]
 8009be6:	2300      	movs	r3, #0
 8009be8:	9300      	str	r3, [sp, #0]
 8009bea:	2300      	movs	r3, #0
 8009bec:	460a      	mov	r2, r1
 8009bee:	4919      	ldr	r1, [pc, #100]	; (8009c54 <vTaskStartScheduler+0x94>)
 8009bf0:	4819      	ldr	r0, [pc, #100]	; (8009c58 <vTaskStartScheduler+0x98>)
 8009bf2:	f7ff fe45 	bl	8009880 <xTaskCreateStatic>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	4a18      	ldr	r2, [pc, #96]	; (8009c5c <vTaskStartScheduler+0x9c>)
 8009bfa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009bfc:	4b17      	ldr	r3, [pc, #92]	; (8009c5c <vTaskStartScheduler+0x9c>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d002      	beq.n	8009c0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009c04:	2301      	movs	r3, #1
 8009c06:	60fb      	str	r3, [r7, #12]
 8009c08:	e001      	b.n	8009c0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d102      	bne.n	8009c1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009c14:	f000 fc82 	bl	800a51c <xTimerCreateTimerTask>
 8009c18:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d10e      	bne.n	8009c3e <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8009c20:	f001 f912 	bl	800ae48 <ulSetInterruptMask>
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009c24:	4b0e      	ldr	r3, [pc, #56]	; (8009c60 <vTaskStartScheduler+0xa0>)
 8009c26:	f04f 32ff 	mov.w	r2, #4294967295
 8009c2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009c2c:	4b0d      	ldr	r3, [pc, #52]	; (8009c64 <vTaskStartScheduler+0xa4>)
 8009c2e:	2201      	movs	r2, #1
 8009c30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009c32:	4b0d      	ldr	r3, [pc, #52]	; (8009c68 <vTaskStartScheduler+0xa8>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009c38:	f001 f8b4 	bl	800ada4 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009c3c:	e006      	b.n	8009c4c <vTaskStartScheduler+0x8c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c44:	d102      	bne.n	8009c4c <vTaskStartScheduler+0x8c>
 8009c46:	f001 f8ff 	bl	800ae48 <ulSetInterruptMask>
 8009c4a:	e7fe      	b.n	8009c4a <vTaskStartScheduler+0x8a>
}
 8009c4c:	bf00      	nop
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	0800bf58 	.word	0x0800bf58
 8009c58:	0800a1f1 	.word	0x0800a1f1
 8009c5c:	20001438 	.word	0x20001438
 8009c60:	20001434 	.word	0x20001434
 8009c64:	20001420 	.word	0x20001420
 8009c68:	20001418 	.word	0x20001418

08009c6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009c70:	4b04      	ldr	r3, [pc, #16]	; (8009c84 <vTaskSuspendAll+0x18>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	3301      	adds	r3, #1
 8009c76:	4a03      	ldr	r2, [pc, #12]	; (8009c84 <vTaskSuspendAll+0x18>)
 8009c78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009c7a:	bf00      	nop
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr
 8009c84:	2000143c 	.word	0x2000143c

08009c88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c92:	2300      	movs	r3, #0
 8009c94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c96:	4b3b      	ldr	r3, [pc, #236]	; (8009d84 <xTaskResumeAll+0xfc>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d102      	bne.n	8009ca4 <xTaskResumeAll+0x1c>
 8009c9e:	f001 f8d3 	bl	800ae48 <ulSetInterruptMask>
 8009ca2:	e7fe      	b.n	8009ca2 <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009ca4:	f000 ff98 	bl	800abd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009ca8:	4b36      	ldr	r3, [pc, #216]	; (8009d84 <xTaskResumeAll+0xfc>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	3b01      	subs	r3, #1
 8009cae:	4a35      	ldr	r2, [pc, #212]	; (8009d84 <xTaskResumeAll+0xfc>)
 8009cb0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cb2:	4b34      	ldr	r3, [pc, #208]	; (8009d84 <xTaskResumeAll+0xfc>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d15c      	bne.n	8009d74 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009cba:	4b33      	ldr	r3, [pc, #204]	; (8009d88 <xTaskResumeAll+0x100>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d058      	beq.n	8009d74 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cc2:	e02f      	b.n	8009d24 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cc4:	4b31      	ldr	r3, [pc, #196]	; (8009d8c <xTaskResumeAll+0x104>)
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	3318      	adds	r3, #24
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7ff f97f 	bl	8008fd4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	3304      	adds	r3, #4
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7ff f97a 	bl	8008fd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ce4:	4b2a      	ldr	r3, [pc, #168]	; (8009d90 <xTaskResumeAll+0x108>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d903      	bls.n	8009cf4 <xTaskResumeAll+0x6c>
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf0:	4a27      	ldr	r2, [pc, #156]	; (8009d90 <xTaskResumeAll+0x108>)
 8009cf2:	6013      	str	r3, [r2, #0]
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cf8:	4613      	mov	r3, r2
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	4413      	add	r3, r2
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	4a24      	ldr	r2, [pc, #144]	; (8009d94 <xTaskResumeAll+0x10c>)
 8009d02:	441a      	add	r2, r3
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	3304      	adds	r3, #4
 8009d08:	4619      	mov	r1, r3
 8009d0a:	4610      	mov	r0, r2
 8009d0c:	f7ff f905 	bl	8008f1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d14:	4b20      	ldr	r3, [pc, #128]	; (8009d98 <xTaskResumeAll+0x110>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d302      	bcc.n	8009d24 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8009d1e:	4b1f      	ldr	r3, [pc, #124]	; (8009d9c <xTaskResumeAll+0x114>)
 8009d20:	2201      	movs	r2, #1
 8009d22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d24:	4b19      	ldr	r3, [pc, #100]	; (8009d8c <xTaskResumeAll+0x104>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d1cb      	bne.n	8009cc4 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d001      	beq.n	8009d36 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d32:	f000 fb03 	bl	800a33c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009d36:	4b1a      	ldr	r3, [pc, #104]	; (8009da0 <xTaskResumeAll+0x118>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d010      	beq.n	8009d64 <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d42:	f000 f83f 	bl	8009dc4 <xTaskIncrementTick>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d002      	beq.n	8009d52 <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 8009d4c:	4b13      	ldr	r3, [pc, #76]	; (8009d9c <xTaskResumeAll+0x114>)
 8009d4e:	2201      	movs	r2, #1
 8009d50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	3b01      	subs	r3, #1
 8009d56:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d1f1      	bne.n	8009d42 <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 8009d5e:	4b10      	ldr	r3, [pc, #64]	; (8009da0 <xTaskResumeAll+0x118>)
 8009d60:	2200      	movs	r2, #0
 8009d62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d64:	4b0d      	ldr	r3, [pc, #52]	; (8009d9c <xTaskResumeAll+0x114>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d003      	beq.n	8009d74 <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d70:	f000 ff20 	bl	800abb4 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d74:	f000 ff42 	bl	800abfc <vPortExitCritical>

	return xAlreadyYielded;
 8009d78:	68bb      	ldr	r3, [r7, #8]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3710      	adds	r7, #16
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	2000143c 	.word	0x2000143c
 8009d88:	20001414 	.word	0x20001414
 8009d8c:	200013d4 	.word	0x200013d4
 8009d90:	2000141c 	.word	0x2000141c
 8009d94:	20000f44 	.word	0x20000f44
 8009d98:	20000f40 	.word	0x20000f40
 8009d9c:	20001428 	.word	0x20001428
 8009da0:	20001424 	.word	0x20001424

08009da4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009daa:	4b05      	ldr	r3, [pc, #20]	; (8009dc0 <xTaskGetTickCount+0x1c>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009db0:	687b      	ldr	r3, [r7, #4]
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	370c      	adds	r7, #12
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	20001418 	.word	0x20001418

08009dc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b086      	sub	sp, #24
 8009dc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dce:	4b4b      	ldr	r3, [pc, #300]	; (8009efc <xTaskIncrementTick+0x138>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	f040 8087 	bne.w	8009ee6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009dd8:	4b49      	ldr	r3, [pc, #292]	; (8009f00 <xTaskIncrementTick+0x13c>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	3301      	adds	r3, #1
 8009dde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009de0:	4a47      	ldr	r2, [pc, #284]	; (8009f00 <xTaskIncrementTick+0x13c>)
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d118      	bne.n	8009e1e <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009dec:	4b45      	ldr	r3, [pc, #276]	; (8009f04 <xTaskIncrementTick+0x140>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d002      	beq.n	8009dfc <xTaskIncrementTick+0x38>
 8009df6:	f001 f827 	bl	800ae48 <ulSetInterruptMask>
 8009dfa:	e7fe      	b.n	8009dfa <xTaskIncrementTick+0x36>
 8009dfc:	4b41      	ldr	r3, [pc, #260]	; (8009f04 <xTaskIncrementTick+0x140>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	60fb      	str	r3, [r7, #12]
 8009e02:	4b41      	ldr	r3, [pc, #260]	; (8009f08 <xTaskIncrementTick+0x144>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a3f      	ldr	r2, [pc, #252]	; (8009f04 <xTaskIncrementTick+0x140>)
 8009e08:	6013      	str	r3, [r2, #0]
 8009e0a:	4a3f      	ldr	r2, [pc, #252]	; (8009f08 <xTaskIncrementTick+0x144>)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6013      	str	r3, [r2, #0]
 8009e10:	4b3e      	ldr	r3, [pc, #248]	; (8009f0c <xTaskIncrementTick+0x148>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	3301      	adds	r3, #1
 8009e16:	4a3d      	ldr	r2, [pc, #244]	; (8009f0c <xTaskIncrementTick+0x148>)
 8009e18:	6013      	str	r3, [r2, #0]
 8009e1a:	f000 fa8f 	bl	800a33c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e1e:	4b3c      	ldr	r3, [pc, #240]	; (8009f10 <xTaskIncrementTick+0x14c>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	693a      	ldr	r2, [r7, #16]
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d349      	bcc.n	8009ebc <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e28:	4b36      	ldr	r3, [pc, #216]	; (8009f04 <xTaskIncrementTick+0x140>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d104      	bne.n	8009e3c <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e32:	4b37      	ldr	r3, [pc, #220]	; (8009f10 <xTaskIncrementTick+0x14c>)
 8009e34:	f04f 32ff 	mov.w	r2, #4294967295
 8009e38:	601a      	str	r2, [r3, #0]
					break;
 8009e3a:	e03f      	b.n	8009ebc <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e3c:	4b31      	ldr	r3, [pc, #196]	; (8009f04 <xTaskIncrementTick+0x140>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	68db      	ldr	r3, [r3, #12]
 8009e44:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e4c:	693a      	ldr	r2, [r7, #16]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d203      	bcs.n	8009e5c <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e54:	4a2e      	ldr	r2, [pc, #184]	; (8009f10 <xTaskIncrementTick+0x14c>)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009e5a:	e02f      	b.n	8009ebc <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	3304      	adds	r3, #4
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7ff f8b7 	bl	8008fd4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d004      	beq.n	8009e78 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	3318      	adds	r3, #24
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7ff f8ae 	bl	8008fd4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e7c:	4b25      	ldr	r3, [pc, #148]	; (8009f14 <xTaskIncrementTick+0x150>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d903      	bls.n	8009e8c <xTaskIncrementTick+0xc8>
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e88:	4a22      	ldr	r2, [pc, #136]	; (8009f14 <xTaskIncrementTick+0x150>)
 8009e8a:	6013      	str	r3, [r2, #0]
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e90:	4613      	mov	r3, r2
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	4413      	add	r3, r2
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	4a1f      	ldr	r2, [pc, #124]	; (8009f18 <xTaskIncrementTick+0x154>)
 8009e9a:	441a      	add	r2, r3
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	3304      	adds	r3, #4
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	4610      	mov	r0, r2
 8009ea4:	f7ff f839 	bl	8008f1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eac:	4b1b      	ldr	r3, [pc, #108]	; (8009f1c <xTaskIncrementTick+0x158>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d3b8      	bcc.n	8009e28 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009eba:	e7b5      	b.n	8009e28 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ebc:	4b17      	ldr	r3, [pc, #92]	; (8009f1c <xTaskIncrementTick+0x158>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec2:	4915      	ldr	r1, [pc, #84]	; (8009f18 <xTaskIncrementTick+0x154>)
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4413      	add	r3, r2
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	440b      	add	r3, r1
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d901      	bls.n	8009ed8 <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009ed8:	4b11      	ldr	r3, [pc, #68]	; (8009f20 <xTaskIncrementTick+0x15c>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d007      	beq.n	8009ef0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	617b      	str	r3, [r7, #20]
 8009ee4:	e004      	b.n	8009ef0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009ee6:	4b0f      	ldr	r3, [pc, #60]	; (8009f24 <xTaskIncrementTick+0x160>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	3301      	adds	r3, #1
 8009eec:	4a0d      	ldr	r2, [pc, #52]	; (8009f24 <xTaskIncrementTick+0x160>)
 8009eee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009ef0:	697b      	ldr	r3, [r7, #20]
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3718      	adds	r7, #24
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	2000143c 	.word	0x2000143c
 8009f00:	20001418 	.word	0x20001418
 8009f04:	200013cc 	.word	0x200013cc
 8009f08:	200013d0 	.word	0x200013d0
 8009f0c:	2000142c 	.word	0x2000142c
 8009f10:	20001434 	.word	0x20001434
 8009f14:	2000141c 	.word	0x2000141c
 8009f18:	20000f44 	.word	0x20000f44
 8009f1c:	20000f40 	.word	0x20000f40
 8009f20:	20001428 	.word	0x20001428
 8009f24:	20001424 	.word	0x20001424

08009f28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f2e:	4b23      	ldr	r3, [pc, #140]	; (8009fbc <vTaskSwitchContext+0x94>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d003      	beq.n	8009f3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f36:	4b22      	ldr	r3, [pc, #136]	; (8009fc0 <vTaskSwitchContext+0x98>)
 8009f38:	2201      	movs	r2, #1
 8009f3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f3c:	e039      	b.n	8009fb2 <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 8009f3e:	4b20      	ldr	r3, [pc, #128]	; (8009fc0 <vTaskSwitchContext+0x98>)
 8009f40:	2200      	movs	r2, #0
 8009f42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f44:	4b1f      	ldr	r3, [pc, #124]	; (8009fc4 <vTaskSwitchContext+0x9c>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	607b      	str	r3, [r7, #4]
 8009f4a:	e008      	b.n	8009f5e <vTaskSwitchContext+0x36>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d102      	bne.n	8009f58 <vTaskSwitchContext+0x30>
 8009f52:	f000 ff79 	bl	800ae48 <ulSetInterruptMask>
 8009f56:	e7fe      	b.n	8009f56 <vTaskSwitchContext+0x2e>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	607b      	str	r3, [r7, #4]
 8009f5e:	491a      	ldr	r1, [pc, #104]	; (8009fc8 <vTaskSwitchContext+0xa0>)
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	4613      	mov	r3, r2
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	4413      	add	r3, r2
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	440b      	add	r3, r1
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d0ec      	beq.n	8009f4c <vTaskSwitchContext+0x24>
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	4613      	mov	r3, r2
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	4413      	add	r3, r2
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	4a12      	ldr	r2, [pc, #72]	; (8009fc8 <vTaskSwitchContext+0xa0>)
 8009f7e:	4413      	add	r3, r2
 8009f80:	603b      	str	r3, [r7, #0]
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	685a      	ldr	r2, [r3, #4]
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	605a      	str	r2, [r3, #4]
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	685a      	ldr	r2, [r3, #4]
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	3308      	adds	r3, #8
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d104      	bne.n	8009fa2 <vTaskSwitchContext+0x7a>
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	685a      	ldr	r2, [r3, #4]
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	605a      	str	r2, [r3, #4]
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	4a08      	ldr	r2, [pc, #32]	; (8009fcc <vTaskSwitchContext+0xa4>)
 8009faa:	6013      	str	r3, [r2, #0]
 8009fac:	4a05      	ldr	r2, [pc, #20]	; (8009fc4 <vTaskSwitchContext+0x9c>)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6013      	str	r3, [r2, #0]
}
 8009fb2:	bf00      	nop
 8009fb4:	3708      	adds	r7, #8
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	2000143c 	.word	0x2000143c
 8009fc0:	20001428 	.word	0x20001428
 8009fc4:	2000141c 	.word	0x2000141c
 8009fc8:	20000f44 	.word	0x20000f44
 8009fcc:	20000f40 	.word	0x20000f40

08009fd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d102      	bne.n	8009fe6 <vTaskPlaceOnEventList+0x16>
 8009fe0:	f000 ff32 	bl	800ae48 <ulSetInterruptMask>
 8009fe4:	e7fe      	b.n	8009fe4 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009fe6:	4b07      	ldr	r3, [pc, #28]	; (800a004 <vTaskPlaceOnEventList+0x34>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	3318      	adds	r3, #24
 8009fec:	4619      	mov	r1, r3
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f7fe ffb7 	bl	8008f62 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009ff4:	2101      	movs	r1, #1
 8009ff6:	6838      	ldr	r0, [r7, #0]
 8009ff8:	f000 fa3c 	bl	800a474 <prvAddCurrentTaskToDelayedList>
}
 8009ffc:	bf00      	nop
 8009ffe:	3708      	adds	r7, #8
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	20000f40 	.word	0x20000f40

0800a008 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d102      	bne.n	800a020 <vTaskPlaceOnEventListRestricted+0x18>
 800a01a:	f000 ff15 	bl	800ae48 <ulSetInterruptMask>
 800a01e:	e7fe      	b.n	800a01e <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a020:	4b0a      	ldr	r3, [pc, #40]	; (800a04c <vTaskPlaceOnEventListRestricted+0x44>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	3318      	adds	r3, #24
 800a026:	4619      	mov	r1, r3
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f7fe ff76 	bl	8008f1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d002      	beq.n	800a03a <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 800a034:	f04f 33ff 	mov.w	r3, #4294967295
 800a038:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a03a:	6879      	ldr	r1, [r7, #4]
 800a03c:	68b8      	ldr	r0, [r7, #8]
 800a03e:	f000 fa19 	bl	800a474 <prvAddCurrentTaskToDelayedList>
	}
 800a042:	bf00      	nop
 800a044:	3710      	adds	r7, #16
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	20000f40 	.word	0x20000f40

0800a050 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d102      	bne.n	800a06c <xTaskRemoveFromEventList+0x1c>
 800a066:	f000 feef 	bl	800ae48 <ulSetInterruptMask>
 800a06a:	e7fe      	b.n	800a06a <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	3318      	adds	r3, #24
 800a070:	4618      	mov	r0, r3
 800a072:	f7fe ffaf 	bl	8008fd4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a076:	4b1e      	ldr	r3, [pc, #120]	; (800a0f0 <xTaskRemoveFromEventList+0xa0>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d11d      	bne.n	800a0ba <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	3304      	adds	r3, #4
 800a082:	4618      	mov	r0, r3
 800a084:	f7fe ffa6 	bl	8008fd4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a08c:	4b19      	ldr	r3, [pc, #100]	; (800a0f4 <xTaskRemoveFromEventList+0xa4>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	429a      	cmp	r2, r3
 800a092:	d903      	bls.n	800a09c <xTaskRemoveFromEventList+0x4c>
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a098:	4a16      	ldr	r2, [pc, #88]	; (800a0f4 <xTaskRemoveFromEventList+0xa4>)
 800a09a:	6013      	str	r3, [r2, #0]
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	4413      	add	r3, r2
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	4a13      	ldr	r2, [pc, #76]	; (800a0f8 <xTaskRemoveFromEventList+0xa8>)
 800a0aa:	441a      	add	r2, r3
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	3304      	adds	r3, #4
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	4610      	mov	r0, r2
 800a0b4:	f7fe ff31 	bl	8008f1a <vListInsertEnd>
 800a0b8:	e005      	b.n	800a0c6 <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	3318      	adds	r3, #24
 800a0be:	4619      	mov	r1, r3
 800a0c0:	480e      	ldr	r0, [pc, #56]	; (800a0fc <xTaskRemoveFromEventList+0xac>)
 800a0c2:	f7fe ff2a 	bl	8008f1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ca:	4b0d      	ldr	r3, [pc, #52]	; (800a100 <xTaskRemoveFromEventList+0xb0>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d905      	bls.n	800a0e0 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a0d8:	4b0a      	ldr	r3, [pc, #40]	; (800a104 <xTaskRemoveFromEventList+0xb4>)
 800a0da:	2201      	movs	r2, #1
 800a0dc:	601a      	str	r2, [r3, #0]
 800a0de:	e001      	b.n	800a0e4 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	2000143c 	.word	0x2000143c
 800a0f4:	2000141c 	.word	0x2000141c
 800a0f8:	20000f44 	.word	0x20000f44
 800a0fc:	200013d4 	.word	0x200013d4
 800a100:	20000f40 	.word	0x20000f40
 800a104:	20001428 	.word	0x20001428

0800a108 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a110:	4b06      	ldr	r3, [pc, #24]	; (800a12c <vTaskInternalSetTimeOutState+0x24>)
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a118:	4b05      	ldr	r3, [pc, #20]	; (800a130 <vTaskInternalSetTimeOutState+0x28>)
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	605a      	str	r2, [r3, #4]
}
 800a120:	bf00      	nop
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr
 800a12c:	2000142c 	.word	0x2000142c
 800a130:	20001418 	.word	0x20001418

0800a134 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b086      	sub	sp, #24
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d102      	bne.n	800a14a <xTaskCheckForTimeOut+0x16>
 800a144:	f000 fe80 	bl	800ae48 <ulSetInterruptMask>
 800a148:	e7fe      	b.n	800a148 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d102      	bne.n	800a156 <xTaskCheckForTimeOut+0x22>
 800a150:	f000 fe7a 	bl	800ae48 <ulSetInterruptMask>
 800a154:	e7fe      	b.n	800a154 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 800a156:	f000 fd3f 	bl	800abd8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a15a:	4b1d      	ldr	r3, [pc, #116]	; (800a1d0 <xTaskCheckForTimeOut+0x9c>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	693a      	ldr	r2, [r7, #16]
 800a166:	1ad3      	subs	r3, r2, r3
 800a168:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a172:	d102      	bne.n	800a17a <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a174:	2300      	movs	r3, #0
 800a176:	617b      	str	r3, [r7, #20]
 800a178:	e023      	b.n	800a1c2 <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	4b15      	ldr	r3, [pc, #84]	; (800a1d4 <xTaskCheckForTimeOut+0xa0>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	429a      	cmp	r2, r3
 800a184:	d007      	beq.n	800a196 <xTaskCheckForTimeOut+0x62>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	693a      	ldr	r2, [r7, #16]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d302      	bcc.n	800a196 <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a190:	2301      	movs	r3, #1
 800a192:	617b      	str	r3, [r7, #20]
 800a194:	e015      	b.n	800a1c2 <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	68fa      	ldr	r2, [r7, #12]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d20b      	bcs.n	800a1b8 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	1ad2      	subs	r2, r2, r3
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f7ff ffab 	bl	800a108 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	617b      	str	r3, [r7, #20]
 800a1b6:	e004      	b.n	800a1c2 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a1be:	2301      	movs	r3, #1
 800a1c0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800a1c2:	f000 fd1b 	bl	800abfc <vPortExitCritical>

	return xReturn;
 800a1c6:	697b      	ldr	r3, [r7, #20]
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3718      	adds	r7, #24
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	20001418 	.word	0x20001418
 800a1d4:	2000142c 	.word	0x2000142c

0800a1d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a1d8:	b480      	push	{r7}
 800a1da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a1dc:	4b03      	ldr	r3, [pc, #12]	; (800a1ec <vTaskMissedYield+0x14>)
 800a1de:	2201      	movs	r2, #1
 800a1e0:	601a      	str	r2, [r3, #0]
}
 800a1e2:	bf00      	nop
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr
 800a1ec:	20001428 	.word	0x20001428

0800a1f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a1f8:	f000 f84a 	bl	800a290 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a1fc:	4b03      	ldr	r3, [pc, #12]	; (800a20c <prvIdleTask+0x1c>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	2b01      	cmp	r3, #1
 800a202:	d9f9      	bls.n	800a1f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a204:	f000 fcd6 	bl	800abb4 <vPortYield>
		prvCheckTasksWaitingTermination();
 800a208:	e7f6      	b.n	800a1f8 <prvIdleTask+0x8>
 800a20a:	bf00      	nop
 800a20c:	20000f44 	.word	0x20000f44

0800a210 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a216:	2300      	movs	r3, #0
 800a218:	607b      	str	r3, [r7, #4]
 800a21a:	e00c      	b.n	800a236 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	4613      	mov	r3, r2
 800a220:	009b      	lsls	r3, r3, #2
 800a222:	4413      	add	r3, r2
 800a224:	009b      	lsls	r3, r3, #2
 800a226:	4a12      	ldr	r2, [pc, #72]	; (800a270 <prvInitialiseTaskLists+0x60>)
 800a228:	4413      	add	r3, r2
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7fe fe48 	bl	8008ec0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	3301      	adds	r3, #1
 800a234:	607b      	str	r3, [r7, #4]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2b37      	cmp	r3, #55	; 0x37
 800a23a:	d9ef      	bls.n	800a21c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a23c:	480d      	ldr	r0, [pc, #52]	; (800a274 <prvInitialiseTaskLists+0x64>)
 800a23e:	f7fe fe3f 	bl	8008ec0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a242:	480d      	ldr	r0, [pc, #52]	; (800a278 <prvInitialiseTaskLists+0x68>)
 800a244:	f7fe fe3c 	bl	8008ec0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a248:	480c      	ldr	r0, [pc, #48]	; (800a27c <prvInitialiseTaskLists+0x6c>)
 800a24a:	f7fe fe39 	bl	8008ec0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a24e:	480c      	ldr	r0, [pc, #48]	; (800a280 <prvInitialiseTaskLists+0x70>)
 800a250:	f7fe fe36 	bl	8008ec0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a254:	480b      	ldr	r0, [pc, #44]	; (800a284 <prvInitialiseTaskLists+0x74>)
 800a256:	f7fe fe33 	bl	8008ec0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a25a:	4b0b      	ldr	r3, [pc, #44]	; (800a288 <prvInitialiseTaskLists+0x78>)
 800a25c:	4a05      	ldr	r2, [pc, #20]	; (800a274 <prvInitialiseTaskLists+0x64>)
 800a25e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a260:	4b0a      	ldr	r3, [pc, #40]	; (800a28c <prvInitialiseTaskLists+0x7c>)
 800a262:	4a05      	ldr	r2, [pc, #20]	; (800a278 <prvInitialiseTaskLists+0x68>)
 800a264:	601a      	str	r2, [r3, #0]
}
 800a266:	bf00      	nop
 800a268:	3708      	adds	r7, #8
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	20000f44 	.word	0x20000f44
 800a274:	200013a4 	.word	0x200013a4
 800a278:	200013b8 	.word	0x200013b8
 800a27c:	200013d4 	.word	0x200013d4
 800a280:	200013e8 	.word	0x200013e8
 800a284:	20001400 	.word	0x20001400
 800a288:	200013cc 	.word	0x200013cc
 800a28c:	200013d0 	.word	0x200013d0

0800a290 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a296:	e019      	b.n	800a2cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a298:	f000 fc9e 	bl	800abd8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a29c:	4b10      	ldr	r3, [pc, #64]	; (800a2e0 <prvCheckTasksWaitingTermination+0x50>)
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	3304      	adds	r3, #4
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f7fe fe93 	bl	8008fd4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a2ae:	4b0d      	ldr	r3, [pc, #52]	; (800a2e4 <prvCheckTasksWaitingTermination+0x54>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	3b01      	subs	r3, #1
 800a2b4:	4a0b      	ldr	r2, [pc, #44]	; (800a2e4 <prvCheckTasksWaitingTermination+0x54>)
 800a2b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a2b8:	4b0b      	ldr	r3, [pc, #44]	; (800a2e8 <prvCheckTasksWaitingTermination+0x58>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	4a0a      	ldr	r2, [pc, #40]	; (800a2e8 <prvCheckTasksWaitingTermination+0x58>)
 800a2c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a2c2:	f000 fc9b 	bl	800abfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 f810 	bl	800a2ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2cc:	4b06      	ldr	r3, [pc, #24]	; (800a2e8 <prvCheckTasksWaitingTermination+0x58>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d1e1      	bne.n	800a298 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a2d4:	bf00      	nop
 800a2d6:	bf00      	nop
 800a2d8:	3708      	adds	r7, #8
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	200013e8 	.word	0x200013e8
 800a2e4:	20001414 	.word	0x20001414
 800a2e8:	200013fc 	.word	0x200013fc

0800a2ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d108      	bne.n	800a310 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a302:	4618      	mov	r0, r3
 800a304:	f000 feb4 	bl	800b070 <vPortFree>
				vPortFree( pxTCB );
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 feb1 	bl	800b070 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a30e:	e010      	b.n	800a332 <prvDeleteTCB+0x46>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a316:	2b01      	cmp	r3, #1
 800a318:	d103      	bne.n	800a322 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 fea8 	bl	800b070 <vPortFree>
	}
 800a320:	e007      	b.n	800a332 <prvDeleteTCB+0x46>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a328:	2b02      	cmp	r3, #2
 800a32a:	d002      	beq.n	800a332 <prvDeleteTCB+0x46>
 800a32c:	f000 fd8c 	bl	800ae48 <ulSetInterruptMask>
 800a330:	e7fe      	b.n	800a330 <prvDeleteTCB+0x44>
	}
 800a332:	bf00      	nop
 800a334:	3708      	adds	r7, #8
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
	...

0800a33c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a342:	4b0c      	ldr	r3, [pc, #48]	; (800a374 <prvResetNextTaskUnblockTime+0x38>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d104      	bne.n	800a356 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a34c:	4b0a      	ldr	r3, [pc, #40]	; (800a378 <prvResetNextTaskUnblockTime+0x3c>)
 800a34e:	f04f 32ff 	mov.w	r2, #4294967295
 800a352:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a354:	e008      	b.n	800a368 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a356:	4b07      	ldr	r3, [pc, #28]	; (800a374 <prvResetNextTaskUnblockTime+0x38>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	68db      	ldr	r3, [r3, #12]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	4a04      	ldr	r2, [pc, #16]	; (800a378 <prvResetNextTaskUnblockTime+0x3c>)
 800a366:	6013      	str	r3, [r2, #0]
}
 800a368:	bf00      	nop
 800a36a:	370c      	adds	r7, #12
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr
 800a374:	200013cc 	.word	0x200013cc
 800a378:	20001434 	.word	0x20001434

0800a37c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a382:	4b0b      	ldr	r3, [pc, #44]	; (800a3b0 <xTaskGetSchedulerState+0x34>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d102      	bne.n	800a390 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a38a:	2301      	movs	r3, #1
 800a38c:	607b      	str	r3, [r7, #4]
 800a38e:	e008      	b.n	800a3a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a390:	4b08      	ldr	r3, [pc, #32]	; (800a3b4 <xTaskGetSchedulerState+0x38>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d102      	bne.n	800a39e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a398:	2302      	movs	r3, #2
 800a39a:	607b      	str	r3, [r7, #4]
 800a39c:	e001      	b.n	800a3a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a3a2:	687b      	ldr	r3, [r7, #4]
	}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	370c      	adds	r7, #12
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr
 800a3b0:	20001420 	.word	0x20001420
 800a3b4:	2000143c 	.word	0x2000143c

0800a3b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b084      	sub	sp, #16
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d046      	beq.n	800a45c <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a3ce:	4b26      	ldr	r3, [pc, #152]	; (800a468 <xTaskPriorityDisinherit+0xb0>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	68ba      	ldr	r2, [r7, #8]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d002      	beq.n	800a3de <xTaskPriorityDisinherit+0x26>
 800a3d8:	f000 fd36 	bl	800ae48 <ulSetInterruptMask>
 800a3dc:	e7fe      	b.n	800a3dc <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d102      	bne.n	800a3ec <xTaskPriorityDisinherit+0x34>
 800a3e6:	f000 fd2f 	bl	800ae48 <ulSetInterruptMask>
 800a3ea:	e7fe      	b.n	800a3ea <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3f0:	1e5a      	subs	r2, r3, #1
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d02c      	beq.n	800a45c <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a406:	2b00      	cmp	r3, #0
 800a408:	d128      	bne.n	800a45c <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	3304      	adds	r3, #4
 800a40e:	4618      	mov	r0, r3
 800a410:	f7fe fde0 	bl	8008fd4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a420:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a42c:	4b0f      	ldr	r3, [pc, #60]	; (800a46c <xTaskPriorityDisinherit+0xb4>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	429a      	cmp	r2, r3
 800a432:	d903      	bls.n	800a43c <xTaskPriorityDisinherit+0x84>
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a438:	4a0c      	ldr	r2, [pc, #48]	; (800a46c <xTaskPriorityDisinherit+0xb4>)
 800a43a:	6013      	str	r3, [r2, #0]
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a440:	4613      	mov	r3, r2
 800a442:	009b      	lsls	r3, r3, #2
 800a444:	4413      	add	r3, r2
 800a446:	009b      	lsls	r3, r3, #2
 800a448:	4a09      	ldr	r2, [pc, #36]	; (800a470 <xTaskPriorityDisinherit+0xb8>)
 800a44a:	441a      	add	r2, r3
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	3304      	adds	r3, #4
 800a450:	4619      	mov	r1, r3
 800a452:	4610      	mov	r0, r2
 800a454:	f7fe fd61 	bl	8008f1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a458:	2301      	movs	r3, #1
 800a45a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a45c:	68fb      	ldr	r3, [r7, #12]
	}
 800a45e:	4618      	mov	r0, r3
 800a460:	3710      	adds	r7, #16
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	20000f40 	.word	0x20000f40
 800a46c:	2000141c 	.word	0x2000141c
 800a470:	20000f44 	.word	0x20000f44

0800a474 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a47e:	4b21      	ldr	r3, [pc, #132]	; (800a504 <prvAddCurrentTaskToDelayedList+0x90>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a484:	4b20      	ldr	r3, [pc, #128]	; (800a508 <prvAddCurrentTaskToDelayedList+0x94>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	3304      	adds	r3, #4
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7fe fda2 	bl	8008fd4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a496:	d10a      	bne.n	800a4ae <prvAddCurrentTaskToDelayedList+0x3a>
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d007      	beq.n	800a4ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a49e:	4b1a      	ldr	r3, [pc, #104]	; (800a508 <prvAddCurrentTaskToDelayedList+0x94>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	3304      	adds	r3, #4
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	4819      	ldr	r0, [pc, #100]	; (800a50c <prvAddCurrentTaskToDelayedList+0x98>)
 800a4a8:	f7fe fd37 	bl	8008f1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a4ac:	e026      	b.n	800a4fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a4b6:	4b14      	ldr	r3, [pc, #80]	; (800a508 <prvAddCurrentTaskToDelayedList+0x94>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	68ba      	ldr	r2, [r7, #8]
 800a4bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a4be:	68ba      	ldr	r2, [r7, #8]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d209      	bcs.n	800a4da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4c6:	4b12      	ldr	r3, [pc, #72]	; (800a510 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	4b0f      	ldr	r3, [pc, #60]	; (800a508 <prvAddCurrentTaskToDelayedList+0x94>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	3304      	adds	r3, #4
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	4610      	mov	r0, r2
 800a4d4:	f7fe fd45 	bl	8008f62 <vListInsert>
}
 800a4d8:	e010      	b.n	800a4fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4da:	4b0e      	ldr	r3, [pc, #56]	; (800a514 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	4b0a      	ldr	r3, [pc, #40]	; (800a508 <prvAddCurrentTaskToDelayedList+0x94>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	3304      	adds	r3, #4
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	4610      	mov	r0, r2
 800a4e8:	f7fe fd3b 	bl	8008f62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a4ec:	4b0a      	ldr	r3, [pc, #40]	; (800a518 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	68ba      	ldr	r2, [r7, #8]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d202      	bcs.n	800a4fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a4f6:	4a08      	ldr	r2, [pc, #32]	; (800a518 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	6013      	str	r3, [r2, #0]
}
 800a4fc:	bf00      	nop
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}
 800a504:	20001418 	.word	0x20001418
 800a508:	20000f40 	.word	0x20000f40
 800a50c:	20001400 	.word	0x20001400
 800a510:	200013d0 	.word	0x200013d0
 800a514:	200013cc 	.word	0x200013cc
 800a518:	20001434 	.word	0x20001434

0800a51c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b088      	sub	sp, #32
 800a520:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a522:	2300      	movs	r3, #0
 800a524:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a526:	f000 fac7 	bl	800aab8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a52a:	4b18      	ldr	r3, [pc, #96]	; (800a58c <xTimerCreateTimerTask+0x70>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d020      	beq.n	800a574 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a532:	2300      	movs	r3, #0
 800a534:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a536:	2300      	movs	r3, #0
 800a538:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a53a:	463a      	mov	r2, r7
 800a53c:	1d39      	adds	r1, r7, #4
 800a53e:	f107 0308 	add.w	r3, r7, #8
 800a542:	4618      	mov	r0, r3
 800a544:	f7fe fca2 	bl	8008e8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a548:	6839      	ldr	r1, [r7, #0]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	68ba      	ldr	r2, [r7, #8]
 800a54e:	9202      	str	r2, [sp, #8]
 800a550:	9301      	str	r3, [sp, #4]
 800a552:	2302      	movs	r3, #2
 800a554:	9300      	str	r3, [sp, #0]
 800a556:	2300      	movs	r3, #0
 800a558:	460a      	mov	r2, r1
 800a55a:	490d      	ldr	r1, [pc, #52]	; (800a590 <xTimerCreateTimerTask+0x74>)
 800a55c:	480d      	ldr	r0, [pc, #52]	; (800a594 <xTimerCreateTimerTask+0x78>)
 800a55e:	f7ff f98f 	bl	8009880 <xTaskCreateStatic>
 800a562:	4603      	mov	r3, r0
 800a564:	4a0c      	ldr	r2, [pc, #48]	; (800a598 <xTimerCreateTimerTask+0x7c>)
 800a566:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a568:	4b0b      	ldr	r3, [pc, #44]	; (800a598 <xTimerCreateTimerTask+0x7c>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d001      	beq.n	800a574 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800a570:	2301      	movs	r3, #1
 800a572:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d102      	bne.n	800a580 <xTimerCreateTimerTask+0x64>
 800a57a:	f000 fc65 	bl	800ae48 <ulSetInterruptMask>
 800a57e:	e7fe      	b.n	800a57e <xTimerCreateTimerTask+0x62>
	return xReturn;
 800a580:	68fb      	ldr	r3, [r7, #12]
}
 800a582:	4618      	mov	r0, r3
 800a584:	3710      	adds	r7, #16
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	20001470 	.word	0x20001470
 800a590:	0800bf60 	.word	0x0800bf60
 800a594:	0800a6b1 	.word	0x0800a6b1
 800a598:	20001474 	.word	0x20001474

0800a59c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b08a      	sub	sp, #40	; 0x28
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	607a      	str	r2, [r7, #4]
 800a5a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d102      	bne.n	800a5ba <xTimerGenericCommand+0x1e>
 800a5b4:	f000 fc48 	bl	800ae48 <ulSetInterruptMask>
 800a5b8:	e7fe      	b.n	800a5b8 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a5ba:	4b1a      	ldr	r3, [pc, #104]	; (800a624 <xTimerGenericCommand+0x88>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d02a      	beq.n	800a618 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	2b05      	cmp	r3, #5
 800a5d2:	dc18      	bgt.n	800a606 <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a5d4:	f7ff fed2 	bl	800a37c <xTaskGetSchedulerState>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	d109      	bne.n	800a5f2 <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a5de:	4b11      	ldr	r3, [pc, #68]	; (800a624 <xTimerGenericCommand+0x88>)
 800a5e0:	6818      	ldr	r0, [r3, #0]
 800a5e2:	f107 0114 	add.w	r1, r7, #20
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5ea:	f7fe fde8 	bl	80091be <xQueueGenericSend>
 800a5ee:	6278      	str	r0, [r7, #36]	; 0x24
 800a5f0:	e012      	b.n	800a618 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a5f2:	4b0c      	ldr	r3, [pc, #48]	; (800a624 <xTimerGenericCommand+0x88>)
 800a5f4:	6818      	ldr	r0, [r3, #0]
 800a5f6:	f107 0114 	add.w	r1, r7, #20
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	f7fe fdde 	bl	80091be <xQueueGenericSend>
 800a602:	6278      	str	r0, [r7, #36]	; 0x24
 800a604:	e008      	b.n	800a618 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a606:	4b07      	ldr	r3, [pc, #28]	; (800a624 <xTimerGenericCommand+0x88>)
 800a608:	6818      	ldr	r0, [r3, #0]
 800a60a:	f107 0114 	add.w	r1, r7, #20
 800a60e:	2300      	movs	r3, #0
 800a610:	683a      	ldr	r2, [r7, #0]
 800a612:	f7fe fe9d 	bl	8009350 <xQueueGenericSendFromISR>
 800a616:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3728      	adds	r7, #40	; 0x28
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	20001470 	.word	0x20001470

0800a628 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b086      	sub	sp, #24
 800a62c:	af02      	add	r7, sp, #8
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a632:	4b1e      	ldr	r3, [pc, #120]	; (800a6ac <prvProcessExpiredTimer+0x84>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	68db      	ldr	r3, [r3, #12]
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	3304      	adds	r3, #4
 800a640:	4618      	mov	r0, r3
 800a642:	f7fe fcc7 	bl	8008fd4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a64c:	f003 0304 	and.w	r3, r3, #4
 800a650:	2b00      	cmp	r3, #0
 800a652:	d01a      	beq.n	800a68a <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	699a      	ldr	r2, [r3, #24]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	18d1      	adds	r1, r2, r3
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	683a      	ldr	r2, [r7, #0]
 800a660:	68f8      	ldr	r0, [r7, #12]
 800a662:	f000 f8c1 	bl	800a7e8 <prvInsertTimerInActiveList>
 800a666:	4603      	mov	r3, r0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d017      	beq.n	800a69c <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a66c:	2300      	movs	r3, #0
 800a66e:	9300      	str	r3, [sp, #0]
 800a670:	2300      	movs	r3, #0
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	2100      	movs	r1, #0
 800a676:	68f8      	ldr	r0, [r7, #12]
 800a678:	f7ff ff90 	bl	800a59c <xTimerGenericCommand>
 800a67c:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d10b      	bne.n	800a69c <prvProcessExpiredTimer+0x74>
 800a684:	f000 fbe0 	bl	800ae48 <ulSetInterruptMask>
 800a688:	e7fe      	b.n	800a688 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a690:	f023 0301 	bic.w	r3, r3, #1
 800a694:	b2da      	uxtb	r2, r3
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6a1b      	ldr	r3, [r3, #32]
 800a6a0:	68f8      	ldr	r0, [r7, #12]
 800a6a2:	4798      	blx	r3
}
 800a6a4:	bf00      	nop
 800a6a6:	3710      	adds	r7, #16
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}
 800a6ac:	20001468 	.word	0x20001468

0800a6b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a6b8:	f107 0308 	add.w	r3, r7, #8
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f000 f84f 	bl	800a760 <prvGetNextExpireTime>
 800a6c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	68f8      	ldr	r0, [r7, #12]
 800a6ca:	f000 f803 	bl	800a6d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a6ce:	f000 f8cd 	bl	800a86c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a6d2:	e7f1      	b.n	800a6b8 <prvTimerTask+0x8>

0800a6d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a6de:	f7ff fac5 	bl	8009c6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a6e2:	f107 0308 	add.w	r3, r7, #8
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f000 f85e 	bl	800a7a8 <prvSampleTimeNow>
 800a6ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d12a      	bne.n	800a74a <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d10a      	bne.n	800a710 <prvProcessTimerOrBlockTask+0x3c>
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d806      	bhi.n	800a710 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a702:	f7ff fac1 	bl	8009c88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a706:	68f9      	ldr	r1, [r7, #12]
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f7ff ff8d 	bl	800a628 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a70e:	e01e      	b.n	800a74e <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d008      	beq.n	800a728 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a716:	4b10      	ldr	r3, [pc, #64]	; (800a758 <prvProcessTimerOrBlockTask+0x84>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d101      	bne.n	800a724 <prvProcessTimerOrBlockTask+0x50>
 800a720:	2301      	movs	r3, #1
 800a722:	e000      	b.n	800a726 <prvProcessTimerOrBlockTask+0x52>
 800a724:	2300      	movs	r3, #0
 800a726:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a728:	4b0c      	ldr	r3, [pc, #48]	; (800a75c <prvProcessTimerOrBlockTask+0x88>)
 800a72a:	6818      	ldr	r0, [r3, #0]
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	1ad3      	subs	r3, r2, r3
 800a732:	683a      	ldr	r2, [r7, #0]
 800a734:	4619      	mov	r1, r3
 800a736:	f7ff f86f 	bl	8009818 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a73a:	f7ff faa5 	bl	8009c88 <xTaskResumeAll>
 800a73e:	4603      	mov	r3, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d104      	bne.n	800a74e <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 800a744:	f000 fa36 	bl	800abb4 <vPortYield>
}
 800a748:	e001      	b.n	800a74e <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 800a74a:	f7ff fa9d 	bl	8009c88 <xTaskResumeAll>
}
 800a74e:	bf00      	nop
 800a750:	3710      	adds	r7, #16
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	2000146c 	.word	0x2000146c
 800a75c:	20001470 	.word	0x20001470

0800a760 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a760:	b480      	push	{r7}
 800a762:	b085      	sub	sp, #20
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a768:	4b0e      	ldr	r3, [pc, #56]	; (800a7a4 <prvGetNextExpireTime+0x44>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d101      	bne.n	800a776 <prvGetNextExpireTime+0x16>
 800a772:	2201      	movs	r2, #1
 800a774:	e000      	b.n	800a778 <prvGetNextExpireTime+0x18>
 800a776:	2200      	movs	r2, #0
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d105      	bne.n	800a790 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a784:	4b07      	ldr	r3, [pc, #28]	; (800a7a4 <prvGetNextExpireTime+0x44>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	60fb      	str	r3, [r7, #12]
 800a78e:	e001      	b.n	800a794 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a790:	2300      	movs	r3, #0
 800a792:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a794:	68fb      	ldr	r3, [r7, #12]
}
 800a796:	4618      	mov	r0, r3
 800a798:	3714      	adds	r7, #20
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr
 800a7a2:	bf00      	nop
 800a7a4:	20001468 	.word	0x20001468

0800a7a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a7b0:	f7ff faf8 	bl	8009da4 <xTaskGetTickCount>
 800a7b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a7b6:	4b0b      	ldr	r3, [pc, #44]	; (800a7e4 <prvSampleTimeNow+0x3c>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	68fa      	ldr	r2, [r7, #12]
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d205      	bcs.n	800a7cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a7c0:	f000 f91e 	bl	800aa00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	601a      	str	r2, [r3, #0]
 800a7ca:	e002      	b.n	800a7d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a7d2:	4a04      	ldr	r2, [pc, #16]	; (800a7e4 <prvSampleTimeNow+0x3c>)
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3710      	adds	r7, #16
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	20001478 	.word	0x20001478

0800a7e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b086      	sub	sp, #24
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	60f8      	str	r0, [r7, #12]
 800a7f0:	60b9      	str	r1, [r7, #8]
 800a7f2:	607a      	str	r2, [r7, #4]
 800a7f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	68ba      	ldr	r2, [r7, #8]
 800a7fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	68fa      	ldr	r2, [r7, #12]
 800a804:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a806:	68ba      	ldr	r2, [r7, #8]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d812      	bhi.n	800a834 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	1ad2      	subs	r2, r2, r3
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	699b      	ldr	r3, [r3, #24]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d302      	bcc.n	800a822 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a81c:	2301      	movs	r3, #1
 800a81e:	617b      	str	r3, [r7, #20]
 800a820:	e01b      	b.n	800a85a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a822:	4b10      	ldr	r3, [pc, #64]	; (800a864 <prvInsertTimerInActiveList+0x7c>)
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	3304      	adds	r3, #4
 800a82a:	4619      	mov	r1, r3
 800a82c:	4610      	mov	r0, r2
 800a82e:	f7fe fb98 	bl	8008f62 <vListInsert>
 800a832:	e012      	b.n	800a85a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	429a      	cmp	r2, r3
 800a83a:	d206      	bcs.n	800a84a <prvInsertTimerInActiveList+0x62>
 800a83c:	68ba      	ldr	r2, [r7, #8]
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	429a      	cmp	r2, r3
 800a842:	d302      	bcc.n	800a84a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a844:	2301      	movs	r3, #1
 800a846:	617b      	str	r3, [r7, #20]
 800a848:	e007      	b.n	800a85a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a84a:	4b07      	ldr	r3, [pc, #28]	; (800a868 <prvInsertTimerInActiveList+0x80>)
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	3304      	adds	r3, #4
 800a852:	4619      	mov	r1, r3
 800a854:	4610      	mov	r0, r2
 800a856:	f7fe fb84 	bl	8008f62 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a85a:	697b      	ldr	r3, [r7, #20]
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3718      	adds	r7, #24
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}
 800a864:	2000146c 	.word	0x2000146c
 800a868:	20001468 	.word	0x20001468

0800a86c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b08c      	sub	sp, #48	; 0x30
 800a870:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a872:	e0b2      	b.n	800a9da <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	2b00      	cmp	r3, #0
 800a878:	da11      	bge.n	800a89e <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a87a:	f107 0308 	add.w	r3, r7, #8
 800a87e:	3304      	adds	r3, #4
 800a880:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a884:	2b00      	cmp	r3, #0
 800a886:	d102      	bne.n	800a88e <prvProcessReceivedCommands+0x22>
 800a888:	f000 fade 	bl	800ae48 <ulSetInterruptMask>
 800a88c:	e7fe      	b.n	800a88c <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a894:	6850      	ldr	r0, [r2, #4]
 800a896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a898:	6892      	ldr	r2, [r2, #8]
 800a89a:	4611      	mov	r1, r2
 800a89c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	f2c0 809a 	blt.w	800a9da <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a8aa:	6a3b      	ldr	r3, [r7, #32]
 800a8ac:	695b      	ldr	r3, [r3, #20]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d004      	beq.n	800a8bc <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8b2:	6a3b      	ldr	r3, [r7, #32]
 800a8b4:	3304      	adds	r3, #4
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7fe fb8c 	bl	8008fd4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a8bc:	1d3b      	adds	r3, r7, #4
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7ff ff72 	bl	800a7a8 <prvSampleTimeNow>
 800a8c4:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	2b09      	cmp	r3, #9
 800a8ca:	f200 8085 	bhi.w	800a9d8 <prvProcessReceivedCommands+0x16c>
 800a8ce:	a201      	add	r2, pc, #4	; (adr r2, 800a8d4 <prvProcessReceivedCommands+0x68>)
 800a8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d4:	0800a8fd 	.word	0x0800a8fd
 800a8d8:	0800a8fd 	.word	0x0800a8fd
 800a8dc:	0800a8fd 	.word	0x0800a8fd
 800a8e0:	0800a961 	.word	0x0800a961
 800a8e4:	0800a975 	.word	0x0800a975
 800a8e8:	0800a9af 	.word	0x0800a9af
 800a8ec:	0800a8fd 	.word	0x0800a8fd
 800a8f0:	0800a8fd 	.word	0x0800a8fd
 800a8f4:	0800a961 	.word	0x0800a961
 800a8f8:	0800a975 	.word	0x0800a975
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a8fc:	6a3b      	ldr	r3, [r7, #32]
 800a8fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a902:	f043 0301 	orr.w	r3, r3, #1
 800a906:	b2da      	uxtb	r2, r3
 800a908:	6a3b      	ldr	r3, [r7, #32]
 800a90a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	6a3b      	ldr	r3, [r7, #32]
 800a912:	699b      	ldr	r3, [r3, #24]
 800a914:	18d1      	adds	r1, r2, r3
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	69fa      	ldr	r2, [r7, #28]
 800a91a:	6a38      	ldr	r0, [r7, #32]
 800a91c:	f7ff ff64 	bl	800a7e8 <prvInsertTimerInActiveList>
 800a920:	4603      	mov	r3, r0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d059      	beq.n	800a9da <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a926:	6a3b      	ldr	r3, [r7, #32]
 800a928:	6a1b      	ldr	r3, [r3, #32]
 800a92a:	6a38      	ldr	r0, [r7, #32]
 800a92c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a92e:	6a3b      	ldr	r3, [r7, #32]
 800a930:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a934:	f003 0304 	and.w	r3, r3, #4
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d04e      	beq.n	800a9da <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a93c:	68fa      	ldr	r2, [r7, #12]
 800a93e:	6a3b      	ldr	r3, [r7, #32]
 800a940:	699b      	ldr	r3, [r3, #24]
 800a942:	441a      	add	r2, r3
 800a944:	2300      	movs	r3, #0
 800a946:	9300      	str	r3, [sp, #0]
 800a948:	2300      	movs	r3, #0
 800a94a:	2100      	movs	r1, #0
 800a94c:	6a38      	ldr	r0, [r7, #32]
 800a94e:	f7ff fe25 	bl	800a59c <xTimerGenericCommand>
 800a952:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 800a954:	69bb      	ldr	r3, [r7, #24]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d13f      	bne.n	800a9da <prvProcessReceivedCommands+0x16e>
 800a95a:	f000 fa75 	bl	800ae48 <ulSetInterruptMask>
 800a95e:	e7fe      	b.n	800a95e <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a960:	6a3b      	ldr	r3, [r7, #32]
 800a962:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a966:	f023 0301 	bic.w	r3, r3, #1
 800a96a:	b2da      	uxtb	r2, r3
 800a96c:	6a3b      	ldr	r3, [r7, #32]
 800a96e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a972:	e032      	b.n	800a9da <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a974:	6a3b      	ldr	r3, [r7, #32]
 800a976:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a97a:	f043 0301 	orr.w	r3, r3, #1
 800a97e:	b2da      	uxtb	r2, r3
 800a980:	6a3b      	ldr	r3, [r7, #32]
 800a982:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a986:	68fa      	ldr	r2, [r7, #12]
 800a988:	6a3b      	ldr	r3, [r7, #32]
 800a98a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a98c:	6a3b      	ldr	r3, [r7, #32]
 800a98e:	699b      	ldr	r3, [r3, #24]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d102      	bne.n	800a99a <prvProcessReceivedCommands+0x12e>
 800a994:	f000 fa58 	bl	800ae48 <ulSetInterruptMask>
 800a998:	e7fe      	b.n	800a998 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a99a:	6a3b      	ldr	r3, [r7, #32]
 800a99c:	699a      	ldr	r2, [r3, #24]
 800a99e:	69fb      	ldr	r3, [r7, #28]
 800a9a0:	18d1      	adds	r1, r2, r3
 800a9a2:	69fb      	ldr	r3, [r7, #28]
 800a9a4:	69fa      	ldr	r2, [r7, #28]
 800a9a6:	6a38      	ldr	r0, [r7, #32]
 800a9a8:	f7ff ff1e 	bl	800a7e8 <prvInsertTimerInActiveList>
					break;
 800a9ac:	e015      	b.n	800a9da <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a9ae:	6a3b      	ldr	r3, [r7, #32]
 800a9b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9b4:	f003 0302 	and.w	r3, r3, #2
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d103      	bne.n	800a9c4 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 800a9bc:	6a38      	ldr	r0, [r7, #32]
 800a9be:	f000 fb57 	bl	800b070 <vPortFree>
 800a9c2:	e00a      	b.n	800a9da <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a9c4:	6a3b      	ldr	r3, [r7, #32]
 800a9c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9ca:	f023 0301 	bic.w	r3, r3, #1
 800a9ce:	b2da      	uxtb	r2, r3
 800a9d0:	6a3b      	ldr	r3, [r7, #32]
 800a9d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a9d6:	e000      	b.n	800a9da <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 800a9d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a9da:	4b08      	ldr	r3, [pc, #32]	; (800a9fc <prvProcessReceivedCommands+0x190>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f107 0108 	add.w	r1, r7, #8
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f7fe fd24 	bl	8009432 <xQueueReceive>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	f47f af41 	bne.w	800a874 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a9f2:	bf00      	nop
 800a9f4:	bf00      	nop
 800a9f6:	3728      	adds	r7, #40	; 0x28
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}
 800a9fc:	20001470 	.word	0x20001470

0800aa00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b088      	sub	sp, #32
 800aa04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa06:	e040      	b.n	800aa8a <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa08:	4b29      	ldr	r3, [pc, #164]	; (800aab0 <prvSwitchTimerLists+0xb0>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	68db      	ldr	r3, [r3, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa12:	4b27      	ldr	r3, [pc, #156]	; (800aab0 <prvSwitchTimerLists+0xb0>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	68db      	ldr	r3, [r3, #12]
 800aa1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	3304      	adds	r3, #4
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7fe fad7 	bl	8008fd4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6a1b      	ldr	r3, [r3, #32]
 800aa2a:	68f8      	ldr	r0, [r7, #12]
 800aa2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa34:	f003 0304 	and.w	r3, r3, #4
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d026      	beq.n	800aa8a <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	699b      	ldr	r3, [r3, #24]
 800aa40:	693a      	ldr	r2, [r7, #16]
 800aa42:	4413      	add	r3, r2
 800aa44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aa46:	68ba      	ldr	r2, [r7, #8]
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d90e      	bls.n	800aa6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	68ba      	ldr	r2, [r7, #8]
 800aa52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	68fa      	ldr	r2, [r7, #12]
 800aa58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa5a:	4b15      	ldr	r3, [pc, #84]	; (800aab0 <prvSwitchTimerLists+0xb0>)
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	3304      	adds	r3, #4
 800aa62:	4619      	mov	r1, r3
 800aa64:	4610      	mov	r0, r2
 800aa66:	f7fe fa7c 	bl	8008f62 <vListInsert>
 800aa6a:	e00e      	b.n	800aa8a <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	9300      	str	r3, [sp, #0]
 800aa70:	2300      	movs	r3, #0
 800aa72:	693a      	ldr	r2, [r7, #16]
 800aa74:	2100      	movs	r1, #0
 800aa76:	68f8      	ldr	r0, [r7, #12]
 800aa78:	f7ff fd90 	bl	800a59c <xTimerGenericCommand>
 800aa7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d102      	bne.n	800aa8a <prvSwitchTimerLists+0x8a>
 800aa84:	f000 f9e0 	bl	800ae48 <ulSetInterruptMask>
 800aa88:	e7fe      	b.n	800aa88 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa8a:	4b09      	ldr	r3, [pc, #36]	; (800aab0 <prvSwitchTimerLists+0xb0>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d1b9      	bne.n	800aa08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aa94:	4b06      	ldr	r3, [pc, #24]	; (800aab0 <prvSwitchTimerLists+0xb0>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aa9a:	4b06      	ldr	r3, [pc, #24]	; (800aab4 <prvSwitchTimerLists+0xb4>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4a04      	ldr	r2, [pc, #16]	; (800aab0 <prvSwitchTimerLists+0xb0>)
 800aaa0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aaa2:	4a04      	ldr	r2, [pc, #16]	; (800aab4 <prvSwitchTimerLists+0xb4>)
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	6013      	str	r3, [r2, #0]
}
 800aaa8:	bf00      	nop
 800aaaa:	3718      	adds	r7, #24
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}
 800aab0:	20001468 	.word	0x20001468
 800aab4:	2000146c 	.word	0x2000146c

0800aab8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aabe:	f000 f88b 	bl	800abd8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aac2:	4b15      	ldr	r3, [pc, #84]	; (800ab18 <prvCheckForValidListAndQueue+0x60>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d120      	bne.n	800ab0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aaca:	4814      	ldr	r0, [pc, #80]	; (800ab1c <prvCheckForValidListAndQueue+0x64>)
 800aacc:	f7fe f9f8 	bl	8008ec0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aad0:	4813      	ldr	r0, [pc, #76]	; (800ab20 <prvCheckForValidListAndQueue+0x68>)
 800aad2:	f7fe f9f5 	bl	8008ec0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aad6:	4b13      	ldr	r3, [pc, #76]	; (800ab24 <prvCheckForValidListAndQueue+0x6c>)
 800aad8:	4a10      	ldr	r2, [pc, #64]	; (800ab1c <prvCheckForValidListAndQueue+0x64>)
 800aada:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aadc:	4b12      	ldr	r3, [pc, #72]	; (800ab28 <prvCheckForValidListAndQueue+0x70>)
 800aade:	4a10      	ldr	r2, [pc, #64]	; (800ab20 <prvCheckForValidListAndQueue+0x68>)
 800aae0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aae2:	2300      	movs	r3, #0
 800aae4:	9300      	str	r3, [sp, #0]
 800aae6:	4b11      	ldr	r3, [pc, #68]	; (800ab2c <prvCheckForValidListAndQueue+0x74>)
 800aae8:	4a11      	ldr	r2, [pc, #68]	; (800ab30 <prvCheckForValidListAndQueue+0x78>)
 800aaea:	2110      	movs	r1, #16
 800aaec:	200a      	movs	r0, #10
 800aaee:	f7fe faf3 	bl	80090d8 <xQueueGenericCreateStatic>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	4a08      	ldr	r2, [pc, #32]	; (800ab18 <prvCheckForValidListAndQueue+0x60>)
 800aaf6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aaf8:	4b07      	ldr	r3, [pc, #28]	; (800ab18 <prvCheckForValidListAndQueue+0x60>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d005      	beq.n	800ab0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ab00:	4b05      	ldr	r3, [pc, #20]	; (800ab18 <prvCheckForValidListAndQueue+0x60>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	490b      	ldr	r1, [pc, #44]	; (800ab34 <prvCheckForValidListAndQueue+0x7c>)
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7fe fe5c 	bl	80097c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab0c:	f000 f876 	bl	800abfc <vPortExitCritical>
}
 800ab10:	bf00      	nop
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	20001470 	.word	0x20001470
 800ab1c:	20001440 	.word	0x20001440
 800ab20:	20001454 	.word	0x20001454
 800ab24:	20001468 	.word	0x20001468
 800ab28:	2000146c 	.word	0x2000146c
 800ab2c:	2000151c 	.word	0x2000151c
 800ab30:	2000147c 	.word	0x2000147c
 800ab34:	0800bf68 	.word	0x0800bf68

0800ab38 <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800ab38:	b480      	push	{r7}
 800ab3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ab3c:	4b0b      	ldr	r3, [pc, #44]	; (800ab6c <vPortSetupTimerInterrupt+0x34>)
 800ab3e:	2200      	movs	r2, #0
 800ab40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ab42:	4b0b      	ldr	r3, [pc, #44]	; (800ab70 <vPortSetupTimerInterrupt+0x38>)
 800ab44:	2200      	movs	r2, #0
 800ab46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ab48:	4b0a      	ldr	r3, [pc, #40]	; (800ab74 <vPortSetupTimerInterrupt+0x3c>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a0a      	ldr	r2, [pc, #40]	; (800ab78 <vPortSetupTimerInterrupt+0x40>)
 800ab4e:	fba2 2303 	umull	r2, r3, r2, r3
 800ab52:	099b      	lsrs	r3, r3, #6
 800ab54:	4a09      	ldr	r2, [pc, #36]	; (800ab7c <vPortSetupTimerInterrupt+0x44>)
 800ab56:	3b01      	subs	r3, #1
 800ab58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800ab5a:	4b04      	ldr	r3, [pc, #16]	; (800ab6c <vPortSetupTimerInterrupt+0x34>)
 800ab5c:	2207      	movs	r2, #7
 800ab5e:	601a      	str	r2, [r3, #0]
}
 800ab60:	bf00      	nop
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop
 800ab6c:	e000e010 	.word	0xe000e010
 800ab70:	e000e018 	.word	0xe000e018
 800ab74:	20000004 	.word	0x20000004
 800ab78:	10624dd3 	.word	0x10624dd3
 800ab7c:	e000e014 	.word	0xe000e014

0800ab80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800ab86:	2300      	movs	r3, #0
 800ab88:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 800ab8a:	4b09      	ldr	r3, [pc, #36]	; (800abb0 <prvTaskExitError+0x30>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab92:	d002      	beq.n	800ab9a <prvTaskExitError+0x1a>
 800ab94:	f000 f958 	bl	800ae48 <ulSetInterruptMask>
 800ab98:	e7fe      	b.n	800ab98 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 800ab9a:	f000 f955 	bl	800ae48 <ulSetInterruptMask>

	while( ulDummy == 0 )
 800ab9e:	bf00      	nop
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d0fc      	beq.n	800aba0 <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 800aba6:	bf00      	nop
 800aba8:	bf00      	nop
 800abaa:	3708      	adds	r7, #8
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	20000010 	.word	0x20000010

0800abb4 <vPortYield>:
	}
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800abb4:	b480      	push	{r7}
 800abb6:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800abb8:	4b06      	ldr	r3, [pc, #24]	; (800abd4 <vPortYield+0x20>)
 800abba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abbe:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800abc0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800abc4:	f3bf 8f6f 	isb	sy
}
 800abc8:	bf00      	nop
 800abca:	46bd      	mov	sp, r7
 800abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd0:	4770      	bx	lr
 800abd2:	bf00      	nop
 800abd4:	e000ed04 	.word	0xe000ed04

0800abd8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800abdc:	f000 f934 	bl	800ae48 <ulSetInterruptMask>
	ulCriticalNesting++;
 800abe0:	4b05      	ldr	r3, [pc, #20]	; (800abf8 <vPortEnterCritical+0x20>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	3301      	adds	r3, #1
 800abe6:	4a04      	ldr	r2, [pc, #16]	; (800abf8 <vPortEnterCritical+0x20>)
 800abe8:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800abea:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800abee:	f3bf 8f6f 	isb	sy
}
 800abf2:	bf00      	nop
 800abf4:	bd80      	pop	{r7, pc}
 800abf6:	bf00      	nop
 800abf8:	20000010 	.word	0x20000010

0800abfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 800ac00:	4b0a      	ldr	r3, [pc, #40]	; (800ac2c <vPortExitCritical+0x30>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d102      	bne.n	800ac0e <vPortExitCritical+0x12>
 800ac08:	f000 f91e 	bl	800ae48 <ulSetInterruptMask>
 800ac0c:	e7fe      	b.n	800ac0c <vPortExitCritical+0x10>
	ulCriticalNesting--;
 800ac0e:	4b07      	ldr	r3, [pc, #28]	; (800ac2c <vPortExitCritical+0x30>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	3b01      	subs	r3, #1
 800ac14:	4a05      	ldr	r2, [pc, #20]	; (800ac2c <vPortExitCritical+0x30>)
 800ac16:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 800ac18:	4b04      	ldr	r3, [pc, #16]	; (800ac2c <vPortExitCritical+0x30>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d102      	bne.n	800ac26 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 800ac20:	2000      	movs	r0, #0
 800ac22:	f000 f91e 	bl	800ae62 <vClearInterruptMask>
	}
}
 800ac26:	bf00      	nop
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	20000010 	.word	0x20000010

0800ac30 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800ac36:	f000 f907 	bl	800ae48 <ulSetInterruptMask>
 800ac3a:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ac3c:	f7ff f8c2 	bl	8009dc4 <xTaskIncrementTick>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d003      	beq.n	800ac4e <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ac46:	4b05      	ldr	r3, [pc, #20]	; (800ac5c <xPortSysTickHandler+0x2c>)
 800ac48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac4c:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 f907 	bl	800ae62 <vClearInterruptMask>
}
 800ac54:	bf00      	nop
 800ac56:	3708      	adds	r7, #8
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	e000ed04 	.word	0xe000ed04

0800ac60 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	699b      	ldr	r3, [r3, #24]
 800ac6c:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	3b02      	subs	r3, #2
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 800ac76:	7afb      	ldrb	r3, [r7, #11]
 800ac78:	2b02      	cmp	r3, #2
 800ac7a:	d102      	bne.n	800ac82 <vPortSVCHandler_C+0x22>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 800ac7c:	f000 f8b8 	bl	800adf0 <vRestoreContextOfFirstTask>
		}
		break;
 800ac80:	e002      	b.n	800ac88 <vPortSVCHandler_C+0x28>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 800ac82:	f000 f8e1 	bl	800ae48 <ulSetInterruptMask>
 800ac86:	e7fe      	b.n	800ac86 <vPortSVCHandler_C+0x26>
		}
	}
}
 800ac88:	bf00      	nop
 800ac8a:	3710      	adds	r7, #16
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 800ac90:	b480      	push	{r7}
 800ac92:	b085      	sub	sp, #20
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	60f8      	str	r0, [r7, #12]
 800ac98:	60b9      	str	r1, [r7, #8]
 800ac9a:	607a      	str	r2, [r7, #4]
 800ac9c:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	3b04      	subs	r3, #4
 800aca2:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800acaa:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	3b04      	subs	r3, #4
 800acb0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	3b04      	subs	r3, #4
 800acbc:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800acbe:	4a38      	ldr	r2, [pc, #224]	; (800ada0 <pxPortInitialiseStack+0x110>)
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	3b04      	subs	r3, #4
 800acc8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800acd0:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	3b04      	subs	r3, #4
 800acd6:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800acde:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	3b04      	subs	r3, #4
 800ace4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 800acec:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	3b04      	subs	r3, #4
 800acf2:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800acfa:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	3b04      	subs	r3, #4
 800ad00:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 800ad02:	683a      	ldr	r2, [r7, #0]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	3b04      	subs	r3, #4
 800ad0c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800ad14:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	3b04      	subs	r3, #4
 800ad1a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800ad22:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	3b04      	subs	r3, #4
 800ad28:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800ad30:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	3b04      	subs	r3, #4
 800ad36:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800ad3e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	3b04      	subs	r3, #4
 800ad44:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800ad4c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	3b04      	subs	r3, #4
 800ad52:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800ad5a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	3b04      	subs	r3, #4
 800ad60:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800ad68:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	3b04      	subs	r3, #4
 800ad6e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800ad76:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	3b04      	subs	r3, #4
 800ad7c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f06f 0243 	mvn.w	r2, #67	; 0x43
 800ad84:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	3b04      	subs	r3, #4
 800ad8a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 800ad8c:	68ba      	ldr	r2, [r7, #8]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 800ad92:	68fb      	ldr	r3, [r7, #12]
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3714      	adds	r7, #20
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr
 800ada0:	0800ab81 	.word	0x0800ab81

0800ada4 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ada8:	4b0c      	ldr	r3, [pc, #48]	; (800addc <xPortStartScheduler+0x38>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4a0b      	ldr	r2, [pc, #44]	; (800addc <xPortStartScheduler+0x38>)
 800adae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adb2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800adb4:	4b09      	ldr	r3, [pc, #36]	; (800addc <xPortStartScheduler+0x38>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a08      	ldr	r2, [pc, #32]	; (800addc <xPortStartScheduler+0x38>)
 800adba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adbe:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 800adc0:	f7ff feba 	bl	800ab38 <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 800adc4:	4b06      	ldr	r3, [pc, #24]	; (800ade0 <xPortStartScheduler+0x3c>)
 800adc6:	2200      	movs	r2, #0
 800adc8:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 800adca:	f000 f829 	bl	800ae20 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 800adce:	f7ff f8ab 	bl	8009f28 <vTaskSwitchContext>
	prvTaskExitError();
 800add2:	f7ff fed5 	bl	800ab80 <prvTaskExitError>

	/* Should not get here. */
	return 0;
 800add6:	2300      	movs	r3, #0
}
 800add8:	4618      	mov	r0, r3
 800adda:	bd80      	pop	{r7, pc}
 800addc:	e000ed20 	.word	0xe000ed20
 800ade0:	20000010 	.word	0x20000010
	...

0800adf0 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800adf0:	4a07      	ldr	r2, [pc, #28]	; (800ae10 <pxCurrentTCBConst2>)
 800adf2:	6811      	ldr	r1, [r2, #0]
 800adf4:	6808      	ldr	r0, [r1, #0]
 800adf6:	c806      	ldmia	r0!, {r1, r2}
 800adf8:	f381 880b 	msr	PSPLIM, r1
 800adfc:	2102      	movs	r1, #2
 800adfe:	f381 8814 	msr	CONTROL, r1
 800ae02:	3020      	adds	r0, #32
 800ae04:	f380 8809 	msr	PSP, r0
 800ae08:	f3bf 8f6f 	isb	sy
 800ae0c:	4710      	bx	r2
 800ae0e:	bf00      	nop

0800ae10 <pxCurrentTCBConst2>:
 800ae10:	20000f40 	.word	0x20000f40
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 800ae14:	bf00      	nop
 800ae16:	bf00      	nop
	...

0800ae20 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800ae20:	4807      	ldr	r0, [pc, #28]	; (800ae40 <xVTORConst>)
 800ae22:	6800      	ldr	r0, [r0, #0]
 800ae24:	6800      	ldr	r0, [r0, #0]
 800ae26:	f380 8808 	msr	MSP, r0
 800ae2a:	b662      	cpsie	i
 800ae2c:	b661      	cpsie	f
 800ae2e:	f3bf 8f4f 	dsb	sy
 800ae32:	f3bf 8f6f 	isb	sy
 800ae36:	df02      	svc	2
 800ae38:	bf00      	nop
 800ae3a:	bf00      	nop
 800ae3c:	f3af 8000 	nop.w

0800ae40 <xVTORConst>:
 800ae40:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 800ae44:	bf00      	nop
 800ae46:	bf00      	nop

0800ae48 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800ae48:	f3ef 8011 	mrs	r0, BASEPRI
 800ae4c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 800ae50:	f381 8811 	msr	BASEPRI, r1
 800ae54:	f3bf 8f4f 	dsb	sy
 800ae58:	f3bf 8f6f 	isb	sy
 800ae5c:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ae5e:	bf00      	nop
 800ae60:	4618      	mov	r0, r3

0800ae62 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800ae62:	f380 8811 	msr	BASEPRI, r0
 800ae66:	f3bf 8f4f 	dsb	sy
 800ae6a:	f3bf 8f6f 	isb	sy
 800ae6e:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 800ae70:	bf00      	nop
	...

0800ae80 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800ae80:	f3ef 8009 	mrs	r0, PSP
 800ae84:	f3ef 820b 	mrs	r2, PSPLIM
 800ae88:	4673      	mov	r3, lr
 800ae8a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800ae8e:	4a10      	ldr	r2, [pc, #64]	; (800aed0 <pxCurrentTCBConst>)
 800ae90:	6811      	ldr	r1, [r2, #0]
 800ae92:	6008      	str	r0, [r1, #0]
 800ae94:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 800ae98:	f380 8811 	msr	BASEPRI, r0
 800ae9c:	f3bf 8f4f 	dsb	sy
 800aea0:	f3bf 8f6f 	isb	sy
 800aea4:	f7ff f840 	bl	8009f28 <vTaskSwitchContext>
 800aea8:	f04f 0000 	mov.w	r0, #0
 800aeac:	f380 8811 	msr	BASEPRI, r0
 800aeb0:	4a07      	ldr	r2, [pc, #28]	; (800aed0 <pxCurrentTCBConst>)
 800aeb2:	6811      	ldr	r1, [r2, #0]
 800aeb4:	6808      	ldr	r0, [r1, #0]
 800aeb6:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800aeba:	f382 880b 	msr	PSPLIM, r2
 800aebe:	f380 8809 	msr	PSP, r0
 800aec2:	4718      	bx	r3
 800aec4:	f3af 8000 	nop.w
 800aec8:	f3af 8000 	nop.w
 800aecc:	f3af 8000 	nop.w

0800aed0 <pxCurrentTCBConst>:
 800aed0:	20000f40 	.word	0x20000f40
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 800aed4:	bf00      	nop
 800aed6:	bf00      	nop
	...

0800aee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800aee0:	f01e 0f04 	tst.w	lr, #4
 800aee4:	bf0c      	ite	eq
 800aee6:	f3ef 8008 	mrseq	r0, MSP
 800aeea:	f3ef 8009 	mrsne	r0, PSP
 800aeee:	4904      	ldr	r1, [pc, #16]	; (800af00 <svchandler_address_const>)
 800aef0:	4708      	bx	r1
 800aef2:	bf00      	nop
 800aef4:	f3af 8000 	nop.w
 800aef8:	f3af 8000 	nop.w
 800aefc:	f3af 8000 	nop.w

0800af00 <svchandler_address_const>:
 800af00:	0800ac61 	.word	0x0800ac61
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 800af04:	bf00      	nop
 800af06:	bf00      	nop

0800af08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b086      	sub	sp, #24
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800af10:	2300      	movs	r3, #0
 800af12:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800af14:	f7fe feaa 	bl	8009c6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800af18:	4b4f      	ldr	r3, [pc, #316]	; (800b058 <pvPortMalloc+0x150>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d101      	bne.n	800af24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800af20:	f000 f8f8 	bl	800b114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800af24:	4b4d      	ldr	r3, [pc, #308]	; (800b05c <pvPortMalloc+0x154>)
 800af26:	681a      	ldr	r2, [r3, #0]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4013      	ands	r3, r2
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	f040 8083 	bne.w	800b038 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d015      	beq.n	800af64 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 800af38:	2208      	movs	r2, #8
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	4413      	add	r3, r2
 800af3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f003 0307 	and.w	r3, r3, #7
 800af46:	2b00      	cmp	r3, #0
 800af48:	d00c      	beq.n	800af64 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f023 0307 	bic.w	r3, r3, #7
 800af50:	3308      	adds	r3, #8
 800af52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f003 0307 	and.w	r3, r3, #7
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d002      	beq.n	800af64 <pvPortMalloc+0x5c>
 800af5e:	f7ff ff73 	bl	800ae48 <ulSetInterruptMask>
 800af62:	e7fe      	b.n	800af62 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d066      	beq.n	800b038 <pvPortMalloc+0x130>
 800af6a:	4b3d      	ldr	r3, [pc, #244]	; (800b060 <pvPortMalloc+0x158>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	429a      	cmp	r2, r3
 800af72:	d861      	bhi.n	800b038 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800af74:	4b3b      	ldr	r3, [pc, #236]	; (800b064 <pvPortMalloc+0x15c>)
 800af76:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800af78:	4b3a      	ldr	r3, [pc, #232]	; (800b064 <pvPortMalloc+0x15c>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af7e:	e004      	b.n	800af8a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	429a      	cmp	r2, r3
 800af92:	d903      	bls.n	800af9c <pvPortMalloc+0x94>
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d1f1      	bne.n	800af80 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800af9c:	4b2e      	ldr	r3, [pc, #184]	; (800b058 <pvPortMalloc+0x150>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	697a      	ldr	r2, [r7, #20]
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d048      	beq.n	800b038 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	2208      	movs	r2, #8
 800afac:	4413      	add	r3, r2
 800afae:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	681a      	ldr	r2, [r3, #0]
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	685a      	ldr	r2, [r3, #4]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	1ad2      	subs	r2, r2, r3
 800afc0:	2308      	movs	r3, #8
 800afc2:	005b      	lsls	r3, r3, #1
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d917      	bls.n	800aff8 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800afc8:	697a      	ldr	r2, [r7, #20]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	4413      	add	r3, r2
 800afce:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	f003 0307 	and.w	r3, r3, #7
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d002      	beq.n	800afe0 <pvPortMalloc+0xd8>
 800afda:	f7ff ff35 	bl	800ae48 <ulSetInterruptMask>
 800afde:	e7fe      	b.n	800afde <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	685a      	ldr	r2, [r3, #4]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	1ad2      	subs	r2, r2, r3
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	687a      	ldr	r2, [r7, #4]
 800aff0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aff2:	68b8      	ldr	r0, [r7, #8]
 800aff4:	f000 f8f0 	bl	800b1d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aff8:	4b19      	ldr	r3, [pc, #100]	; (800b060 <pvPortMalloc+0x158>)
 800affa:	681a      	ldr	r2, [r3, #0]
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	1ad3      	subs	r3, r2, r3
 800b002:	4a17      	ldr	r2, [pc, #92]	; (800b060 <pvPortMalloc+0x158>)
 800b004:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b006:	4b16      	ldr	r3, [pc, #88]	; (800b060 <pvPortMalloc+0x158>)
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	4b17      	ldr	r3, [pc, #92]	; (800b068 <pvPortMalloc+0x160>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d203      	bcs.n	800b01a <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b012:	4b13      	ldr	r3, [pc, #76]	; (800b060 <pvPortMalloc+0x158>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a14      	ldr	r2, [pc, #80]	; (800b068 <pvPortMalloc+0x160>)
 800b018:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	685a      	ldr	r2, [r3, #4]
 800b01e:	4b0f      	ldr	r3, [pc, #60]	; (800b05c <pvPortMalloc+0x154>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	431a      	orrs	r2, r3
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	2200      	movs	r2, #0
 800b02c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b02e:	4b0f      	ldr	r3, [pc, #60]	; (800b06c <pvPortMalloc+0x164>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	3301      	adds	r3, #1
 800b034:	4a0d      	ldr	r2, [pc, #52]	; (800b06c <pvPortMalloc+0x164>)
 800b036:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b038:	f7fe fe26 	bl	8009c88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f003 0307 	and.w	r3, r3, #7
 800b042:	2b00      	cmp	r3, #0
 800b044:	d002      	beq.n	800b04c <pvPortMalloc+0x144>
 800b046:	f7ff feff 	bl	800ae48 <ulSetInterruptMask>
 800b04a:	e7fe      	b.n	800b04a <pvPortMalloc+0x142>
	return pvReturn;
 800b04c:	68fb      	ldr	r3, [r7, #12]
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3718      	adds	r7, #24
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	20003574 	.word	0x20003574
 800b05c:	20003588 	.word	0x20003588
 800b060:	20003578 	.word	0x20003578
 800b064:	2000356c 	.word	0x2000356c
 800b068:	2000357c 	.word	0x2000357c
 800b06c:	20003580 	.word	0x20003580

0800b070 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d03d      	beq.n	800b0fe <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b082:	2308      	movs	r3, #8
 800b084:	425b      	negs	r3, r3
 800b086:	68fa      	ldr	r2, [r7, #12]
 800b088:	4413      	add	r3, r2
 800b08a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	685a      	ldr	r2, [r3, #4]
 800b094:	4b1c      	ldr	r3, [pc, #112]	; (800b108 <vPortFree+0x98>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4013      	ands	r3, r2
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d102      	bne.n	800b0a4 <vPortFree+0x34>
 800b09e:	f7ff fed3 	bl	800ae48 <ulSetInterruptMask>
 800b0a2:	e7fe      	b.n	800b0a2 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d002      	beq.n	800b0b2 <vPortFree+0x42>
 800b0ac:	f7ff fecc 	bl	800ae48 <ulSetInterruptMask>
 800b0b0:	e7fe      	b.n	800b0b0 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	685a      	ldr	r2, [r3, #4]
 800b0b6:	4b14      	ldr	r3, [pc, #80]	; (800b108 <vPortFree+0x98>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4013      	ands	r3, r2
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d01e      	beq.n	800b0fe <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d11a      	bne.n	800b0fe <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	685a      	ldr	r2, [r3, #4]
 800b0cc:	4b0e      	ldr	r3, [pc, #56]	; (800b108 <vPortFree+0x98>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	43db      	mvns	r3, r3
 800b0d2:	401a      	ands	r2, r3
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b0d8:	f7fe fdc8 	bl	8009c6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	685a      	ldr	r2, [r3, #4]
 800b0e0:	4b0a      	ldr	r3, [pc, #40]	; (800b10c <vPortFree+0x9c>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4413      	add	r3, r2
 800b0e6:	4a09      	ldr	r2, [pc, #36]	; (800b10c <vPortFree+0x9c>)
 800b0e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b0ea:	68b8      	ldr	r0, [r7, #8]
 800b0ec:	f000 f874 	bl	800b1d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b0f0:	4b07      	ldr	r3, [pc, #28]	; (800b110 <vPortFree+0xa0>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	4a06      	ldr	r2, [pc, #24]	; (800b110 <vPortFree+0xa0>)
 800b0f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b0fa:	f7fe fdc5 	bl	8009c88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b0fe:	bf00      	nop
 800b100:	3710      	adds	r7, #16
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
 800b106:	bf00      	nop
 800b108:	20003588 	.word	0x20003588
 800b10c:	20003578 	.word	0x20003578
 800b110:	20003584 	.word	0x20003584

0800b114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b114:	b480      	push	{r7}
 800b116:	b085      	sub	sp, #20
 800b118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b11a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b11e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b120:	4b27      	ldr	r3, [pc, #156]	; (800b1c0 <prvHeapInit+0xac>)
 800b122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f003 0307 	and.w	r3, r3, #7
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d00c      	beq.n	800b148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	3307      	adds	r3, #7
 800b132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f023 0307 	bic.w	r3, r3, #7
 800b13a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b13c:	68ba      	ldr	r2, [r7, #8]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	1ad3      	subs	r3, r2, r3
 800b142:	4a1f      	ldr	r2, [pc, #124]	; (800b1c0 <prvHeapInit+0xac>)
 800b144:	4413      	add	r3, r2
 800b146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b14c:	4a1d      	ldr	r2, [pc, #116]	; (800b1c4 <prvHeapInit+0xb0>)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b152:	4b1c      	ldr	r3, [pc, #112]	; (800b1c4 <prvHeapInit+0xb0>)
 800b154:	2200      	movs	r2, #0
 800b156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	68ba      	ldr	r2, [r7, #8]
 800b15c:	4413      	add	r3, r2
 800b15e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b160:	2208      	movs	r2, #8
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	1a9b      	subs	r3, r3, r2
 800b166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f023 0307 	bic.w	r3, r3, #7
 800b16e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	4a15      	ldr	r2, [pc, #84]	; (800b1c8 <prvHeapInit+0xb4>)
 800b174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b176:	4b14      	ldr	r3, [pc, #80]	; (800b1c8 <prvHeapInit+0xb4>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	2200      	movs	r2, #0
 800b17c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b17e:	4b12      	ldr	r3, [pc, #72]	; (800b1c8 <prvHeapInit+0xb4>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2200      	movs	r2, #0
 800b184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	1ad2      	subs	r2, r2, r3
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b194:	4b0c      	ldr	r3, [pc, #48]	; (800b1c8 <prvHeapInit+0xb4>)
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	4a0a      	ldr	r2, [pc, #40]	; (800b1cc <prvHeapInit+0xb8>)
 800b1a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	4a09      	ldr	r2, [pc, #36]	; (800b1d0 <prvHeapInit+0xbc>)
 800b1aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b1ac:	4b09      	ldr	r3, [pc, #36]	; (800b1d4 <prvHeapInit+0xc0>)
 800b1ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b1b2:	601a      	str	r2, [r3, #0]
}
 800b1b4:	bf00      	nop
 800b1b6:	3714      	adds	r7, #20
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr
 800b1c0:	2000156c 	.word	0x2000156c
 800b1c4:	2000356c 	.word	0x2000356c
 800b1c8:	20003574 	.word	0x20003574
 800b1cc:	2000357c 	.word	0x2000357c
 800b1d0:	20003578 	.word	0x20003578
 800b1d4:	20003588 	.word	0x20003588

0800b1d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b085      	sub	sp, #20
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b1e0:	4b28      	ldr	r3, [pc, #160]	; (800b284 <prvInsertBlockIntoFreeList+0xac>)
 800b1e2:	60fb      	str	r3, [r7, #12]
 800b1e4:	e002      	b.n	800b1ec <prvInsertBlockIntoFreeList+0x14>
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	60fb      	str	r3, [r7, #12]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d8f7      	bhi.n	800b1e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	68ba      	ldr	r2, [r7, #8]
 800b200:	4413      	add	r3, r2
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	429a      	cmp	r2, r3
 800b206:	d108      	bne.n	800b21a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	685a      	ldr	r2, [r3, #4]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	441a      	add	r2, r3
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	68ba      	ldr	r2, [r7, #8]
 800b224:	441a      	add	r2, r3
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d118      	bne.n	800b260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	4b15      	ldr	r3, [pc, #84]	; (800b288 <prvInsertBlockIntoFreeList+0xb0>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	429a      	cmp	r2, r3
 800b238:	d00d      	beq.n	800b256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	685a      	ldr	r2, [r3, #4]
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	441a      	add	r2, r3
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	681a      	ldr	r2, [r3, #0]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	601a      	str	r2, [r3, #0]
 800b254:	e008      	b.n	800b268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b256:	4b0c      	ldr	r3, [pc, #48]	; (800b288 <prvInsertBlockIntoFreeList+0xb0>)
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	601a      	str	r2, [r3, #0]
 800b25e:	e003      	b.n	800b268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b268:	68fa      	ldr	r2, [r7, #12]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d002      	beq.n	800b276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	687a      	ldr	r2, [r7, #4]
 800b274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b276:	bf00      	nop
 800b278:	3714      	adds	r7, #20
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr
 800b282:	bf00      	nop
 800b284:	2000356c 	.word	0x2000356c
 800b288:	20003574 	.word	0x20003574

0800b28c <siscanf>:
 800b28c:	b40e      	push	{r1, r2, r3}
 800b28e:	b510      	push	{r4, lr}
 800b290:	b09f      	sub	sp, #124	; 0x7c
 800b292:	f44f 7101 	mov.w	r1, #516	; 0x204
 800b296:	ac21      	add	r4, sp, #132	; 0x84
 800b298:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b29c:	9004      	str	r0, [sp, #16]
 800b29e:	f854 2b04 	ldr.w	r2, [r4], #4
 800b2a2:	9008      	str	r0, [sp, #32]
 800b2a4:	9201      	str	r2, [sp, #4]
 800b2a6:	f7f4 ffd5 	bl	8000254 <strlen>
 800b2aa:	4b0c      	ldr	r3, [pc, #48]	; (800b2dc <siscanf+0x50>)
 800b2ac:	a904      	add	r1, sp, #16
 800b2ae:	9005      	str	r0, [sp, #20]
 800b2b0:	930d      	str	r3, [sp, #52]	; 0x34
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	9009      	str	r0, [sp, #36]	; 0x24
 800b2b6:	9311      	str	r3, [sp, #68]	; 0x44
 800b2b8:	9316      	str	r3, [sp, #88]	; 0x58
 800b2ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b2be:	4808      	ldr	r0, [pc, #32]	; (800b2e0 <siscanf+0x54>)
 800b2c0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b2c4:	4623      	mov	r3, r4
 800b2c6:	9a01      	ldr	r2, [sp, #4]
 800b2c8:	6800      	ldr	r0, [r0, #0]
 800b2ca:	9403      	str	r4, [sp, #12]
 800b2cc:	f000 f9a0 	bl	800b610 <__ssvfiscanf_r>
 800b2d0:	b01f      	add	sp, #124	; 0x7c
 800b2d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2d6:	b003      	add	sp, #12
 800b2d8:	4770      	bx	lr
 800b2da:	bf00      	nop
 800b2dc:	0800b2e5 	.word	0x0800b2e5
 800b2e0:	20000060 	.word	0x20000060

0800b2e4 <__seofread>:
 800b2e4:	2000      	movs	r0, #0
 800b2e6:	4770      	bx	lr

0800b2e8 <memset>:
 800b2e8:	4402      	add	r2, r0
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d100      	bne.n	800b2f2 <memset+0xa>
 800b2f0:	4770      	bx	lr
 800b2f2:	f803 1b01 	strb.w	r1, [r3], #1
 800b2f6:	e7f9      	b.n	800b2ec <memset+0x4>

0800b2f8 <__errno>:
 800b2f8:	4b01      	ldr	r3, [pc, #4]	; (800b300 <__errno+0x8>)
 800b2fa:	6818      	ldr	r0, [r3, #0]
 800b2fc:	4770      	bx	lr
 800b2fe:	bf00      	nop
 800b300:	20000060 	.word	0x20000060

0800b304 <__libc_init_array>:
 800b304:	b570      	push	{r4, r5, r6, lr}
 800b306:	4d0d      	ldr	r5, [pc, #52]	; (800b33c <__libc_init_array+0x38>)
 800b308:	2600      	movs	r6, #0
 800b30a:	4c0d      	ldr	r4, [pc, #52]	; (800b340 <__libc_init_array+0x3c>)
 800b30c:	1b64      	subs	r4, r4, r5
 800b30e:	10a4      	asrs	r4, r4, #2
 800b310:	42a6      	cmp	r6, r4
 800b312:	d109      	bne.n	800b328 <__libc_init_array+0x24>
 800b314:	4d0b      	ldr	r5, [pc, #44]	; (800b344 <__libc_init_array+0x40>)
 800b316:	2600      	movs	r6, #0
 800b318:	4c0b      	ldr	r4, [pc, #44]	; (800b348 <__libc_init_array+0x44>)
 800b31a:	f000 fdfb 	bl	800bf14 <_init>
 800b31e:	1b64      	subs	r4, r4, r5
 800b320:	10a4      	asrs	r4, r4, #2
 800b322:	42a6      	cmp	r6, r4
 800b324:	d105      	bne.n	800b332 <__libc_init_array+0x2e>
 800b326:	bd70      	pop	{r4, r5, r6, pc}
 800b328:	f855 3b04 	ldr.w	r3, [r5], #4
 800b32c:	3601      	adds	r6, #1
 800b32e:	4798      	blx	r3
 800b330:	e7ee      	b.n	800b310 <__libc_init_array+0xc>
 800b332:	f855 3b04 	ldr.w	r3, [r5], #4
 800b336:	3601      	adds	r6, #1
 800b338:	4798      	blx	r3
 800b33a:	e7f2      	b.n	800b322 <__libc_init_array+0x1e>
 800b33c:	0800c16c 	.word	0x0800c16c
 800b340:	0800c16c 	.word	0x0800c16c
 800b344:	0800c16c 	.word	0x0800c16c
 800b348:	0800c170 	.word	0x0800c170

0800b34c <__retarget_lock_acquire_recursive>:
 800b34c:	4770      	bx	lr

0800b34e <__retarget_lock_release_recursive>:
 800b34e:	4770      	bx	lr

0800b350 <memcpy>:
 800b350:	440a      	add	r2, r1
 800b352:	1e43      	subs	r3, r0, #1
 800b354:	4291      	cmp	r1, r2
 800b356:	d100      	bne.n	800b35a <memcpy+0xa>
 800b358:	4770      	bx	lr
 800b35a:	b510      	push	{r4, lr}
 800b35c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b360:	4291      	cmp	r1, r2
 800b362:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b366:	d1f9      	bne.n	800b35c <memcpy+0xc>
 800b368:	bd10      	pop	{r4, pc}
	...

0800b36c <_free_r>:
 800b36c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b36e:	2900      	cmp	r1, #0
 800b370:	d043      	beq.n	800b3fa <_free_r+0x8e>
 800b372:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b376:	1f0c      	subs	r4, r1, #4
 800b378:	9001      	str	r0, [sp, #4]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	bfb8      	it	lt
 800b37e:	18e4      	addlt	r4, r4, r3
 800b380:	f000 f8e0 	bl	800b544 <__malloc_lock>
 800b384:	4a1e      	ldr	r2, [pc, #120]	; (800b400 <_free_r+0x94>)
 800b386:	9801      	ldr	r0, [sp, #4]
 800b388:	6813      	ldr	r3, [r2, #0]
 800b38a:	b933      	cbnz	r3, 800b39a <_free_r+0x2e>
 800b38c:	6063      	str	r3, [r4, #4]
 800b38e:	6014      	str	r4, [r2, #0]
 800b390:	b003      	add	sp, #12
 800b392:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b396:	f000 b8db 	b.w	800b550 <__malloc_unlock>
 800b39a:	42a3      	cmp	r3, r4
 800b39c:	d908      	bls.n	800b3b0 <_free_r+0x44>
 800b39e:	6825      	ldr	r5, [r4, #0]
 800b3a0:	1961      	adds	r1, r4, r5
 800b3a2:	428b      	cmp	r3, r1
 800b3a4:	bf01      	itttt	eq
 800b3a6:	6819      	ldreq	r1, [r3, #0]
 800b3a8:	685b      	ldreq	r3, [r3, #4]
 800b3aa:	1949      	addeq	r1, r1, r5
 800b3ac:	6021      	streq	r1, [r4, #0]
 800b3ae:	e7ed      	b.n	800b38c <_free_r+0x20>
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	b10b      	cbz	r3, 800b3ba <_free_r+0x4e>
 800b3b6:	42a3      	cmp	r3, r4
 800b3b8:	d9fa      	bls.n	800b3b0 <_free_r+0x44>
 800b3ba:	6811      	ldr	r1, [r2, #0]
 800b3bc:	1855      	adds	r5, r2, r1
 800b3be:	42a5      	cmp	r5, r4
 800b3c0:	d10b      	bne.n	800b3da <_free_r+0x6e>
 800b3c2:	6824      	ldr	r4, [r4, #0]
 800b3c4:	4421      	add	r1, r4
 800b3c6:	1854      	adds	r4, r2, r1
 800b3c8:	6011      	str	r1, [r2, #0]
 800b3ca:	42a3      	cmp	r3, r4
 800b3cc:	d1e0      	bne.n	800b390 <_free_r+0x24>
 800b3ce:	681c      	ldr	r4, [r3, #0]
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	440c      	add	r4, r1
 800b3d4:	6053      	str	r3, [r2, #4]
 800b3d6:	6014      	str	r4, [r2, #0]
 800b3d8:	e7da      	b.n	800b390 <_free_r+0x24>
 800b3da:	d902      	bls.n	800b3e2 <_free_r+0x76>
 800b3dc:	230c      	movs	r3, #12
 800b3de:	6003      	str	r3, [r0, #0]
 800b3e0:	e7d6      	b.n	800b390 <_free_r+0x24>
 800b3e2:	6825      	ldr	r5, [r4, #0]
 800b3e4:	1961      	adds	r1, r4, r5
 800b3e6:	428b      	cmp	r3, r1
 800b3e8:	bf02      	ittt	eq
 800b3ea:	6819      	ldreq	r1, [r3, #0]
 800b3ec:	685b      	ldreq	r3, [r3, #4]
 800b3ee:	1949      	addeq	r1, r1, r5
 800b3f0:	6063      	str	r3, [r4, #4]
 800b3f2:	bf08      	it	eq
 800b3f4:	6021      	streq	r1, [r4, #0]
 800b3f6:	6054      	str	r4, [r2, #4]
 800b3f8:	e7ca      	b.n	800b390 <_free_r+0x24>
 800b3fa:	b003      	add	sp, #12
 800b3fc:	bd30      	pop	{r4, r5, pc}
 800b3fe:	bf00      	nop
 800b400:	200036cc 	.word	0x200036cc

0800b404 <sbrk_aligned>:
 800b404:	b570      	push	{r4, r5, r6, lr}
 800b406:	4e0e      	ldr	r6, [pc, #56]	; (800b440 <sbrk_aligned+0x3c>)
 800b408:	460c      	mov	r4, r1
 800b40a:	4605      	mov	r5, r0
 800b40c:	6831      	ldr	r1, [r6, #0]
 800b40e:	b911      	cbnz	r1, 800b416 <sbrk_aligned+0x12>
 800b410:	f000 fc32 	bl	800bc78 <_sbrk_r>
 800b414:	6030      	str	r0, [r6, #0]
 800b416:	4621      	mov	r1, r4
 800b418:	4628      	mov	r0, r5
 800b41a:	f000 fc2d 	bl	800bc78 <_sbrk_r>
 800b41e:	1c43      	adds	r3, r0, #1
 800b420:	d00a      	beq.n	800b438 <sbrk_aligned+0x34>
 800b422:	1cc4      	adds	r4, r0, #3
 800b424:	f024 0403 	bic.w	r4, r4, #3
 800b428:	42a0      	cmp	r0, r4
 800b42a:	d007      	beq.n	800b43c <sbrk_aligned+0x38>
 800b42c:	1a21      	subs	r1, r4, r0
 800b42e:	4628      	mov	r0, r5
 800b430:	f000 fc22 	bl	800bc78 <_sbrk_r>
 800b434:	3001      	adds	r0, #1
 800b436:	d101      	bne.n	800b43c <sbrk_aligned+0x38>
 800b438:	f04f 34ff 	mov.w	r4, #4294967295
 800b43c:	4620      	mov	r0, r4
 800b43e:	bd70      	pop	{r4, r5, r6, pc}
 800b440:	200036d0 	.word	0x200036d0

0800b444 <_malloc_r>:
 800b444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b448:	1ccd      	adds	r5, r1, #3
 800b44a:	4607      	mov	r7, r0
 800b44c:	f025 0503 	bic.w	r5, r5, #3
 800b450:	3508      	adds	r5, #8
 800b452:	2d0c      	cmp	r5, #12
 800b454:	bf38      	it	cc
 800b456:	250c      	movcc	r5, #12
 800b458:	2d00      	cmp	r5, #0
 800b45a:	db01      	blt.n	800b460 <_malloc_r+0x1c>
 800b45c:	42a9      	cmp	r1, r5
 800b45e:	d905      	bls.n	800b46c <_malloc_r+0x28>
 800b460:	230c      	movs	r3, #12
 800b462:	2600      	movs	r6, #0
 800b464:	603b      	str	r3, [r7, #0]
 800b466:	4630      	mov	r0, r6
 800b468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b46c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b540 <_malloc_r+0xfc>
 800b470:	f000 f868 	bl	800b544 <__malloc_lock>
 800b474:	f8d8 3000 	ldr.w	r3, [r8]
 800b478:	461c      	mov	r4, r3
 800b47a:	bb5c      	cbnz	r4, 800b4d4 <_malloc_r+0x90>
 800b47c:	4629      	mov	r1, r5
 800b47e:	4638      	mov	r0, r7
 800b480:	f7ff ffc0 	bl	800b404 <sbrk_aligned>
 800b484:	1c43      	adds	r3, r0, #1
 800b486:	4604      	mov	r4, r0
 800b488:	d155      	bne.n	800b536 <_malloc_r+0xf2>
 800b48a:	f8d8 4000 	ldr.w	r4, [r8]
 800b48e:	4626      	mov	r6, r4
 800b490:	2e00      	cmp	r6, #0
 800b492:	d145      	bne.n	800b520 <_malloc_r+0xdc>
 800b494:	2c00      	cmp	r4, #0
 800b496:	d048      	beq.n	800b52a <_malloc_r+0xe6>
 800b498:	6823      	ldr	r3, [r4, #0]
 800b49a:	4631      	mov	r1, r6
 800b49c:	4638      	mov	r0, r7
 800b49e:	eb04 0903 	add.w	r9, r4, r3
 800b4a2:	f000 fbe9 	bl	800bc78 <_sbrk_r>
 800b4a6:	4581      	cmp	r9, r0
 800b4a8:	d13f      	bne.n	800b52a <_malloc_r+0xe6>
 800b4aa:	6821      	ldr	r1, [r4, #0]
 800b4ac:	4638      	mov	r0, r7
 800b4ae:	1a6d      	subs	r5, r5, r1
 800b4b0:	4629      	mov	r1, r5
 800b4b2:	f7ff ffa7 	bl	800b404 <sbrk_aligned>
 800b4b6:	3001      	adds	r0, #1
 800b4b8:	d037      	beq.n	800b52a <_malloc_r+0xe6>
 800b4ba:	6823      	ldr	r3, [r4, #0]
 800b4bc:	442b      	add	r3, r5
 800b4be:	6023      	str	r3, [r4, #0]
 800b4c0:	f8d8 3000 	ldr.w	r3, [r8]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d038      	beq.n	800b53a <_malloc_r+0xf6>
 800b4c8:	685a      	ldr	r2, [r3, #4]
 800b4ca:	42a2      	cmp	r2, r4
 800b4cc:	d12b      	bne.n	800b526 <_malloc_r+0xe2>
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	605a      	str	r2, [r3, #4]
 800b4d2:	e00f      	b.n	800b4f4 <_malloc_r+0xb0>
 800b4d4:	6822      	ldr	r2, [r4, #0]
 800b4d6:	1b52      	subs	r2, r2, r5
 800b4d8:	d41f      	bmi.n	800b51a <_malloc_r+0xd6>
 800b4da:	2a0b      	cmp	r2, #11
 800b4dc:	d917      	bls.n	800b50e <_malloc_r+0xca>
 800b4de:	1961      	adds	r1, r4, r5
 800b4e0:	42a3      	cmp	r3, r4
 800b4e2:	6025      	str	r5, [r4, #0]
 800b4e4:	bf18      	it	ne
 800b4e6:	6059      	strne	r1, [r3, #4]
 800b4e8:	6863      	ldr	r3, [r4, #4]
 800b4ea:	bf08      	it	eq
 800b4ec:	f8c8 1000 	streq.w	r1, [r8]
 800b4f0:	5162      	str	r2, [r4, r5]
 800b4f2:	604b      	str	r3, [r1, #4]
 800b4f4:	f104 060b 	add.w	r6, r4, #11
 800b4f8:	4638      	mov	r0, r7
 800b4fa:	f000 f829 	bl	800b550 <__malloc_unlock>
 800b4fe:	1d23      	adds	r3, r4, #4
 800b500:	f026 0607 	bic.w	r6, r6, #7
 800b504:	1af2      	subs	r2, r6, r3
 800b506:	d0ae      	beq.n	800b466 <_malloc_r+0x22>
 800b508:	1b9b      	subs	r3, r3, r6
 800b50a:	50a3      	str	r3, [r4, r2]
 800b50c:	e7ab      	b.n	800b466 <_malloc_r+0x22>
 800b50e:	42a3      	cmp	r3, r4
 800b510:	6862      	ldr	r2, [r4, #4]
 800b512:	d1dd      	bne.n	800b4d0 <_malloc_r+0x8c>
 800b514:	f8c8 2000 	str.w	r2, [r8]
 800b518:	e7ec      	b.n	800b4f4 <_malloc_r+0xb0>
 800b51a:	4623      	mov	r3, r4
 800b51c:	6864      	ldr	r4, [r4, #4]
 800b51e:	e7ac      	b.n	800b47a <_malloc_r+0x36>
 800b520:	4634      	mov	r4, r6
 800b522:	6876      	ldr	r6, [r6, #4]
 800b524:	e7b4      	b.n	800b490 <_malloc_r+0x4c>
 800b526:	4613      	mov	r3, r2
 800b528:	e7cc      	b.n	800b4c4 <_malloc_r+0x80>
 800b52a:	230c      	movs	r3, #12
 800b52c:	4638      	mov	r0, r7
 800b52e:	603b      	str	r3, [r7, #0]
 800b530:	f000 f80e 	bl	800b550 <__malloc_unlock>
 800b534:	e797      	b.n	800b466 <_malloc_r+0x22>
 800b536:	6025      	str	r5, [r4, #0]
 800b538:	e7dc      	b.n	800b4f4 <_malloc_r+0xb0>
 800b53a:	605b      	str	r3, [r3, #4]
 800b53c:	deff      	udf	#255	; 0xff
 800b53e:	bf00      	nop
 800b540:	200036cc 	.word	0x200036cc

0800b544 <__malloc_lock>:
 800b544:	4801      	ldr	r0, [pc, #4]	; (800b54c <__malloc_lock+0x8>)
 800b546:	f7ff bf01 	b.w	800b34c <__retarget_lock_acquire_recursive>
 800b54a:	bf00      	nop
 800b54c:	200036c8 	.word	0x200036c8

0800b550 <__malloc_unlock>:
 800b550:	4801      	ldr	r0, [pc, #4]	; (800b558 <__malloc_unlock+0x8>)
 800b552:	f7ff befc 	b.w	800b34e <__retarget_lock_release_recursive>
 800b556:	bf00      	nop
 800b558:	200036c8 	.word	0x200036c8

0800b55c <_sungetc_r>:
 800b55c:	b538      	push	{r3, r4, r5, lr}
 800b55e:	1c4b      	adds	r3, r1, #1
 800b560:	4614      	mov	r4, r2
 800b562:	d103      	bne.n	800b56c <_sungetc_r+0x10>
 800b564:	f04f 35ff 	mov.w	r5, #4294967295
 800b568:	4628      	mov	r0, r5
 800b56a:	bd38      	pop	{r3, r4, r5, pc}
 800b56c:	8993      	ldrh	r3, [r2, #12]
 800b56e:	b2cd      	uxtb	r5, r1
 800b570:	f023 0320 	bic.w	r3, r3, #32
 800b574:	8193      	strh	r3, [r2, #12]
 800b576:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b578:	6852      	ldr	r2, [r2, #4]
 800b57a:	b18b      	cbz	r3, 800b5a0 <_sungetc_r+0x44>
 800b57c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b57e:	4293      	cmp	r3, r2
 800b580:	dd08      	ble.n	800b594 <_sungetc_r+0x38>
 800b582:	6823      	ldr	r3, [r4, #0]
 800b584:	1e5a      	subs	r2, r3, #1
 800b586:	6022      	str	r2, [r4, #0]
 800b588:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b58c:	6863      	ldr	r3, [r4, #4]
 800b58e:	3301      	adds	r3, #1
 800b590:	6063      	str	r3, [r4, #4]
 800b592:	e7e9      	b.n	800b568 <_sungetc_r+0xc>
 800b594:	4621      	mov	r1, r4
 800b596:	f000 fb38 	bl	800bc0a <__submore>
 800b59a:	2800      	cmp	r0, #0
 800b59c:	d0f1      	beq.n	800b582 <_sungetc_r+0x26>
 800b59e:	e7e1      	b.n	800b564 <_sungetc_r+0x8>
 800b5a0:	6921      	ldr	r1, [r4, #16]
 800b5a2:	6823      	ldr	r3, [r4, #0]
 800b5a4:	b151      	cbz	r1, 800b5bc <_sungetc_r+0x60>
 800b5a6:	4299      	cmp	r1, r3
 800b5a8:	d208      	bcs.n	800b5bc <_sungetc_r+0x60>
 800b5aa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b5ae:	42a9      	cmp	r1, r5
 800b5b0:	d104      	bne.n	800b5bc <_sungetc_r+0x60>
 800b5b2:	3b01      	subs	r3, #1
 800b5b4:	3201      	adds	r2, #1
 800b5b6:	6023      	str	r3, [r4, #0]
 800b5b8:	6062      	str	r2, [r4, #4]
 800b5ba:	e7d5      	b.n	800b568 <_sungetc_r+0xc>
 800b5bc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b5c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5c4:	6363      	str	r3, [r4, #52]	; 0x34
 800b5c6:	2303      	movs	r3, #3
 800b5c8:	63a3      	str	r3, [r4, #56]	; 0x38
 800b5ca:	4623      	mov	r3, r4
 800b5cc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b5d0:	6023      	str	r3, [r4, #0]
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	e7dc      	b.n	800b590 <_sungetc_r+0x34>

0800b5d6 <__ssrefill_r>:
 800b5d6:	b510      	push	{r4, lr}
 800b5d8:	460c      	mov	r4, r1
 800b5da:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b5dc:	b169      	cbz	r1, 800b5fa <__ssrefill_r+0x24>
 800b5de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5e2:	4299      	cmp	r1, r3
 800b5e4:	d001      	beq.n	800b5ea <__ssrefill_r+0x14>
 800b5e6:	f7ff fec1 	bl	800b36c <_free_r>
 800b5ea:	2000      	movs	r0, #0
 800b5ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b5ee:	6360      	str	r0, [r4, #52]	; 0x34
 800b5f0:	6063      	str	r3, [r4, #4]
 800b5f2:	b113      	cbz	r3, 800b5fa <__ssrefill_r+0x24>
 800b5f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b5f6:	6023      	str	r3, [r4, #0]
 800b5f8:	bd10      	pop	{r4, pc}
 800b5fa:	6923      	ldr	r3, [r4, #16]
 800b5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b600:	6023      	str	r3, [r4, #0]
 800b602:	2300      	movs	r3, #0
 800b604:	6063      	str	r3, [r4, #4]
 800b606:	89a3      	ldrh	r3, [r4, #12]
 800b608:	f043 0320 	orr.w	r3, r3, #32
 800b60c:	81a3      	strh	r3, [r4, #12]
 800b60e:	e7f3      	b.n	800b5f8 <__ssrefill_r+0x22>

0800b610 <__ssvfiscanf_r>:
 800b610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b614:	460c      	mov	r4, r1
 800b616:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b61a:	2100      	movs	r1, #0
 800b61c:	4606      	mov	r6, r0
 800b61e:	f10d 0804 	add.w	r8, sp, #4
 800b622:	4fa6      	ldr	r7, [pc, #664]	; (800b8bc <__ssvfiscanf_r+0x2ac>)
 800b624:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 800b8c8 <__ssvfiscanf_r+0x2b8>
 800b628:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b62c:	9300      	str	r3, [sp, #0]
 800b62e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b632:	49a3      	ldr	r1, [pc, #652]	; (800b8c0 <__ssvfiscanf_r+0x2b0>)
 800b634:	91a0      	str	r1, [sp, #640]	; 0x280
 800b636:	49a3      	ldr	r1, [pc, #652]	; (800b8c4 <__ssvfiscanf_r+0x2b4>)
 800b638:	91a1      	str	r1, [sp, #644]	; 0x284
 800b63a:	7813      	ldrb	r3, [r2, #0]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	f000 815a 	beq.w	800b8f6 <__ssvfiscanf_r+0x2e6>
 800b642:	5cf9      	ldrb	r1, [r7, r3]
 800b644:	1c55      	adds	r5, r2, #1
 800b646:	f011 0108 	ands.w	r1, r1, #8
 800b64a:	d019      	beq.n	800b680 <__ssvfiscanf_r+0x70>
 800b64c:	6863      	ldr	r3, [r4, #4]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	dd0f      	ble.n	800b672 <__ssvfiscanf_r+0x62>
 800b652:	6823      	ldr	r3, [r4, #0]
 800b654:	781a      	ldrb	r2, [r3, #0]
 800b656:	5cba      	ldrb	r2, [r7, r2]
 800b658:	0712      	lsls	r2, r2, #28
 800b65a:	d401      	bmi.n	800b660 <__ssvfiscanf_r+0x50>
 800b65c:	462a      	mov	r2, r5
 800b65e:	e7ec      	b.n	800b63a <__ssvfiscanf_r+0x2a>
 800b660:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b662:	3301      	adds	r3, #1
 800b664:	3201      	adds	r2, #1
 800b666:	6023      	str	r3, [r4, #0]
 800b668:	9245      	str	r2, [sp, #276]	; 0x114
 800b66a:	6862      	ldr	r2, [r4, #4]
 800b66c:	3a01      	subs	r2, #1
 800b66e:	6062      	str	r2, [r4, #4]
 800b670:	e7ec      	b.n	800b64c <__ssvfiscanf_r+0x3c>
 800b672:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b674:	4621      	mov	r1, r4
 800b676:	4630      	mov	r0, r6
 800b678:	4798      	blx	r3
 800b67a:	2800      	cmp	r0, #0
 800b67c:	d0e9      	beq.n	800b652 <__ssvfiscanf_r+0x42>
 800b67e:	e7ed      	b.n	800b65c <__ssvfiscanf_r+0x4c>
 800b680:	2b25      	cmp	r3, #37	; 0x25
 800b682:	d012      	beq.n	800b6aa <__ssvfiscanf_r+0x9a>
 800b684:	469a      	mov	sl, r3
 800b686:	6863      	ldr	r3, [r4, #4]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	f340 8092 	ble.w	800b7b2 <__ssvfiscanf_r+0x1a2>
 800b68e:	6822      	ldr	r2, [r4, #0]
 800b690:	7813      	ldrb	r3, [r2, #0]
 800b692:	4553      	cmp	r3, sl
 800b694:	f040 812f 	bne.w	800b8f6 <__ssvfiscanf_r+0x2e6>
 800b698:	6863      	ldr	r3, [r4, #4]
 800b69a:	3201      	adds	r2, #1
 800b69c:	3b01      	subs	r3, #1
 800b69e:	6022      	str	r2, [r4, #0]
 800b6a0:	6063      	str	r3, [r4, #4]
 800b6a2:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	9345      	str	r3, [sp, #276]	; 0x114
 800b6a8:	e7d8      	b.n	800b65c <__ssvfiscanf_r+0x4c>
 800b6aa:	9141      	str	r1, [sp, #260]	; 0x104
 800b6ac:	9143      	str	r1, [sp, #268]	; 0x10c
 800b6ae:	7853      	ldrb	r3, [r2, #1]
 800b6b0:	2b2a      	cmp	r3, #42	; 0x2a
 800b6b2:	bf04      	itt	eq
 800b6b4:	2310      	moveq	r3, #16
 800b6b6:	1c95      	addeq	r5, r2, #2
 800b6b8:	f04f 020a 	mov.w	r2, #10
 800b6bc:	bf08      	it	eq
 800b6be:	9341      	streq	r3, [sp, #260]	; 0x104
 800b6c0:	46aa      	mov	sl, r5
 800b6c2:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b6c6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b6ca:	2b09      	cmp	r3, #9
 800b6cc:	d91c      	bls.n	800b708 <__ssvfiscanf_r+0xf8>
 800b6ce:	2203      	movs	r2, #3
 800b6d0:	487d      	ldr	r0, [pc, #500]	; (800b8c8 <__ssvfiscanf_r+0x2b8>)
 800b6d2:	f000 fae1 	bl	800bc98 <memchr>
 800b6d6:	b138      	cbz	r0, 800b6e8 <__ssvfiscanf_r+0xd8>
 800b6d8:	eba0 0009 	sub.w	r0, r0, r9
 800b6dc:	2301      	movs	r3, #1
 800b6de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b6e0:	4655      	mov	r5, sl
 800b6e2:	4083      	lsls	r3, r0
 800b6e4:	4313      	orrs	r3, r2
 800b6e6:	9341      	str	r3, [sp, #260]	; 0x104
 800b6e8:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b6ec:	2b78      	cmp	r3, #120	; 0x78
 800b6ee:	d806      	bhi.n	800b6fe <__ssvfiscanf_r+0xee>
 800b6f0:	2b57      	cmp	r3, #87	; 0x57
 800b6f2:	d810      	bhi.n	800b716 <__ssvfiscanf_r+0x106>
 800b6f4:	2b25      	cmp	r3, #37	; 0x25
 800b6f6:	d0c5      	beq.n	800b684 <__ssvfiscanf_r+0x74>
 800b6f8:	d856      	bhi.n	800b7a8 <__ssvfiscanf_r+0x198>
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d064      	beq.n	800b7c8 <__ssvfiscanf_r+0x1b8>
 800b6fe:	2303      	movs	r3, #3
 800b700:	9347      	str	r3, [sp, #284]	; 0x11c
 800b702:	230a      	movs	r3, #10
 800b704:	9342      	str	r3, [sp, #264]	; 0x108
 800b706:	e075      	b.n	800b7f4 <__ssvfiscanf_r+0x1e4>
 800b708:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b70a:	4655      	mov	r5, sl
 800b70c:	fb02 1103 	mla	r1, r2, r3, r1
 800b710:	3930      	subs	r1, #48	; 0x30
 800b712:	9143      	str	r1, [sp, #268]	; 0x10c
 800b714:	e7d4      	b.n	800b6c0 <__ssvfiscanf_r+0xb0>
 800b716:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b71a:	2a20      	cmp	r2, #32
 800b71c:	d8ef      	bhi.n	800b6fe <__ssvfiscanf_r+0xee>
 800b71e:	a101      	add	r1, pc, #4	; (adr r1, 800b724 <__ssvfiscanf_r+0x114>)
 800b720:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b724:	0800b7d7 	.word	0x0800b7d7
 800b728:	0800b6ff 	.word	0x0800b6ff
 800b72c:	0800b6ff 	.word	0x0800b6ff
 800b730:	0800b835 	.word	0x0800b835
 800b734:	0800b6ff 	.word	0x0800b6ff
 800b738:	0800b6ff 	.word	0x0800b6ff
 800b73c:	0800b6ff 	.word	0x0800b6ff
 800b740:	0800b6ff 	.word	0x0800b6ff
 800b744:	0800b6ff 	.word	0x0800b6ff
 800b748:	0800b6ff 	.word	0x0800b6ff
 800b74c:	0800b6ff 	.word	0x0800b6ff
 800b750:	0800b84b 	.word	0x0800b84b
 800b754:	0800b831 	.word	0x0800b831
 800b758:	0800b7af 	.word	0x0800b7af
 800b75c:	0800b7af 	.word	0x0800b7af
 800b760:	0800b7af 	.word	0x0800b7af
 800b764:	0800b6ff 	.word	0x0800b6ff
 800b768:	0800b7ed 	.word	0x0800b7ed
 800b76c:	0800b6ff 	.word	0x0800b6ff
 800b770:	0800b6ff 	.word	0x0800b6ff
 800b774:	0800b6ff 	.word	0x0800b6ff
 800b778:	0800b6ff 	.word	0x0800b6ff
 800b77c:	0800b85b 	.word	0x0800b85b
 800b780:	0800b829 	.word	0x0800b829
 800b784:	0800b7cf 	.word	0x0800b7cf
 800b788:	0800b6ff 	.word	0x0800b6ff
 800b78c:	0800b6ff 	.word	0x0800b6ff
 800b790:	0800b857 	.word	0x0800b857
 800b794:	0800b6ff 	.word	0x0800b6ff
 800b798:	0800b831 	.word	0x0800b831
 800b79c:	0800b6ff 	.word	0x0800b6ff
 800b7a0:	0800b6ff 	.word	0x0800b6ff
 800b7a4:	0800b7d7 	.word	0x0800b7d7
 800b7a8:	3b45      	subs	r3, #69	; 0x45
 800b7aa:	2b02      	cmp	r3, #2
 800b7ac:	d8a7      	bhi.n	800b6fe <__ssvfiscanf_r+0xee>
 800b7ae:	2305      	movs	r3, #5
 800b7b0:	e01f      	b.n	800b7f2 <__ssvfiscanf_r+0x1e2>
 800b7b2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b7b4:	4621      	mov	r1, r4
 800b7b6:	4630      	mov	r0, r6
 800b7b8:	4798      	blx	r3
 800b7ba:	2800      	cmp	r0, #0
 800b7bc:	f43f af67 	beq.w	800b68e <__ssvfiscanf_r+0x7e>
 800b7c0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b7c2:	2800      	cmp	r0, #0
 800b7c4:	f040 808d 	bne.w	800b8e2 <__ssvfiscanf_r+0x2d2>
 800b7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7cc:	e08f      	b.n	800b8ee <__ssvfiscanf_r+0x2de>
 800b7ce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b7d0:	f042 0220 	orr.w	r2, r2, #32
 800b7d4:	9241      	str	r2, [sp, #260]	; 0x104
 800b7d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b7d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7dc:	9241      	str	r2, [sp, #260]	; 0x104
 800b7de:	2210      	movs	r2, #16
 800b7e0:	2b6f      	cmp	r3, #111	; 0x6f
 800b7e2:	9242      	str	r2, [sp, #264]	; 0x108
 800b7e4:	bf34      	ite	cc
 800b7e6:	2303      	movcc	r3, #3
 800b7e8:	2304      	movcs	r3, #4
 800b7ea:	e002      	b.n	800b7f2 <__ssvfiscanf_r+0x1e2>
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	9342      	str	r3, [sp, #264]	; 0x108
 800b7f0:	2303      	movs	r3, #3
 800b7f2:	9347      	str	r3, [sp, #284]	; 0x11c
 800b7f4:	6863      	ldr	r3, [r4, #4]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	dd3e      	ble.n	800b878 <__ssvfiscanf_r+0x268>
 800b7fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b7fc:	0659      	lsls	r1, r3, #25
 800b7fe:	d404      	bmi.n	800b80a <__ssvfiscanf_r+0x1fa>
 800b800:	6823      	ldr	r3, [r4, #0]
 800b802:	781a      	ldrb	r2, [r3, #0]
 800b804:	5cba      	ldrb	r2, [r7, r2]
 800b806:	0712      	lsls	r2, r2, #28
 800b808:	d43d      	bmi.n	800b886 <__ssvfiscanf_r+0x276>
 800b80a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b80c:	2b02      	cmp	r3, #2
 800b80e:	dc4c      	bgt.n	800b8aa <__ssvfiscanf_r+0x29a>
 800b810:	466b      	mov	r3, sp
 800b812:	4622      	mov	r2, r4
 800b814:	a941      	add	r1, sp, #260	; 0x104
 800b816:	4630      	mov	r0, r6
 800b818:	f000 f872 	bl	800b900 <_scanf_chars>
 800b81c:	2801      	cmp	r0, #1
 800b81e:	d06a      	beq.n	800b8f6 <__ssvfiscanf_r+0x2e6>
 800b820:	2802      	cmp	r0, #2
 800b822:	f47f af1b 	bne.w	800b65c <__ssvfiscanf_r+0x4c>
 800b826:	e7cb      	b.n	800b7c0 <__ssvfiscanf_r+0x1b0>
 800b828:	2308      	movs	r3, #8
 800b82a:	9342      	str	r3, [sp, #264]	; 0x108
 800b82c:	2304      	movs	r3, #4
 800b82e:	e7e0      	b.n	800b7f2 <__ssvfiscanf_r+0x1e2>
 800b830:	220a      	movs	r2, #10
 800b832:	e7d5      	b.n	800b7e0 <__ssvfiscanf_r+0x1d0>
 800b834:	4629      	mov	r1, r5
 800b836:	4640      	mov	r0, r8
 800b838:	f000 f9ae 	bl	800bb98 <__sccl>
 800b83c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b83e:	4605      	mov	r5, r0
 800b840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b844:	9341      	str	r3, [sp, #260]	; 0x104
 800b846:	2301      	movs	r3, #1
 800b848:	e7d3      	b.n	800b7f2 <__ssvfiscanf_r+0x1e2>
 800b84a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b84c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b850:	9341      	str	r3, [sp, #260]	; 0x104
 800b852:	2300      	movs	r3, #0
 800b854:	e7cd      	b.n	800b7f2 <__ssvfiscanf_r+0x1e2>
 800b856:	2302      	movs	r3, #2
 800b858:	e7cb      	b.n	800b7f2 <__ssvfiscanf_r+0x1e2>
 800b85a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b85c:	06c3      	lsls	r3, r0, #27
 800b85e:	f53f aefd 	bmi.w	800b65c <__ssvfiscanf_r+0x4c>
 800b862:	9b00      	ldr	r3, [sp, #0]
 800b864:	07c0      	lsls	r0, r0, #31
 800b866:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b868:	f103 0104 	add.w	r1, r3, #4
 800b86c:	9100      	str	r1, [sp, #0]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	bf4c      	ite	mi
 800b872:	801a      	strhmi	r2, [r3, #0]
 800b874:	601a      	strpl	r2, [r3, #0]
 800b876:	e6f1      	b.n	800b65c <__ssvfiscanf_r+0x4c>
 800b878:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b87a:	4621      	mov	r1, r4
 800b87c:	4630      	mov	r0, r6
 800b87e:	4798      	blx	r3
 800b880:	2800      	cmp	r0, #0
 800b882:	d0ba      	beq.n	800b7fa <__ssvfiscanf_r+0x1ea>
 800b884:	e79c      	b.n	800b7c0 <__ssvfiscanf_r+0x1b0>
 800b886:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b888:	3201      	adds	r2, #1
 800b88a:	9245      	str	r2, [sp, #276]	; 0x114
 800b88c:	6862      	ldr	r2, [r4, #4]
 800b88e:	3a01      	subs	r2, #1
 800b890:	2a00      	cmp	r2, #0
 800b892:	6062      	str	r2, [r4, #4]
 800b894:	dd02      	ble.n	800b89c <__ssvfiscanf_r+0x28c>
 800b896:	3301      	adds	r3, #1
 800b898:	6023      	str	r3, [r4, #0]
 800b89a:	e7b1      	b.n	800b800 <__ssvfiscanf_r+0x1f0>
 800b89c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b89e:	4621      	mov	r1, r4
 800b8a0:	4630      	mov	r0, r6
 800b8a2:	4798      	blx	r3
 800b8a4:	2800      	cmp	r0, #0
 800b8a6:	d0ab      	beq.n	800b800 <__ssvfiscanf_r+0x1f0>
 800b8a8:	e78a      	b.n	800b7c0 <__ssvfiscanf_r+0x1b0>
 800b8aa:	2b04      	cmp	r3, #4
 800b8ac:	dc0e      	bgt.n	800b8cc <__ssvfiscanf_r+0x2bc>
 800b8ae:	466b      	mov	r3, sp
 800b8b0:	4622      	mov	r2, r4
 800b8b2:	a941      	add	r1, sp, #260	; 0x104
 800b8b4:	4630      	mov	r0, r6
 800b8b6:	f000 f87d 	bl	800b9b4 <_scanf_i>
 800b8ba:	e7af      	b.n	800b81c <__ssvfiscanf_r+0x20c>
 800b8bc:	0800c064 	.word	0x0800c064
 800b8c0:	0800b55d 	.word	0x0800b55d
 800b8c4:	0800b5d7 	.word	0x0800b5d7
 800b8c8:	0800c044 	.word	0x0800c044
 800b8cc:	4b0b      	ldr	r3, [pc, #44]	; (800b8fc <__ssvfiscanf_r+0x2ec>)
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	f43f aec4 	beq.w	800b65c <__ssvfiscanf_r+0x4c>
 800b8d4:	466b      	mov	r3, sp
 800b8d6:	4622      	mov	r2, r4
 800b8d8:	a941      	add	r1, sp, #260	; 0x104
 800b8da:	4630      	mov	r0, r6
 800b8dc:	f3af 8000 	nop.w
 800b8e0:	e79c      	b.n	800b81c <__ssvfiscanf_r+0x20c>
 800b8e2:	89a3      	ldrh	r3, [r4, #12]
 800b8e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b8e8:	bf18      	it	ne
 800b8ea:	f04f 30ff 	movne.w	r0, #4294967295
 800b8ee:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b8f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8f6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b8f8:	e7f9      	b.n	800b8ee <__ssvfiscanf_r+0x2de>
 800b8fa:	bf00      	nop
 800b8fc:	00000000 	.word	0x00000000

0800b900 <_scanf_chars>:
 800b900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b904:	4615      	mov	r5, r2
 800b906:	688a      	ldr	r2, [r1, #8]
 800b908:	4680      	mov	r8, r0
 800b90a:	460c      	mov	r4, r1
 800b90c:	b932      	cbnz	r2, 800b91c <_scanf_chars+0x1c>
 800b90e:	698a      	ldr	r2, [r1, #24]
 800b910:	2a00      	cmp	r2, #0
 800b912:	bf0c      	ite	eq
 800b914:	2201      	moveq	r2, #1
 800b916:	f04f 32ff 	movne.w	r2, #4294967295
 800b91a:	608a      	str	r2, [r1, #8]
 800b91c:	6822      	ldr	r2, [r4, #0]
 800b91e:	2700      	movs	r7, #0
 800b920:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800b9b0 <_scanf_chars+0xb0>
 800b924:	06d1      	lsls	r1, r2, #27
 800b926:	bf5f      	itttt	pl
 800b928:	681a      	ldrpl	r2, [r3, #0]
 800b92a:	1d11      	addpl	r1, r2, #4
 800b92c:	6019      	strpl	r1, [r3, #0]
 800b92e:	6816      	ldrpl	r6, [r2, #0]
 800b930:	69a0      	ldr	r0, [r4, #24]
 800b932:	b188      	cbz	r0, 800b958 <_scanf_chars+0x58>
 800b934:	2801      	cmp	r0, #1
 800b936:	d107      	bne.n	800b948 <_scanf_chars+0x48>
 800b938:	682a      	ldr	r2, [r5, #0]
 800b93a:	7811      	ldrb	r1, [r2, #0]
 800b93c:	6962      	ldr	r2, [r4, #20]
 800b93e:	5c52      	ldrb	r2, [r2, r1]
 800b940:	b952      	cbnz	r2, 800b958 <_scanf_chars+0x58>
 800b942:	2f00      	cmp	r7, #0
 800b944:	d031      	beq.n	800b9aa <_scanf_chars+0xaa>
 800b946:	e022      	b.n	800b98e <_scanf_chars+0x8e>
 800b948:	2802      	cmp	r0, #2
 800b94a:	d120      	bne.n	800b98e <_scanf_chars+0x8e>
 800b94c:	682b      	ldr	r3, [r5, #0]
 800b94e:	781b      	ldrb	r3, [r3, #0]
 800b950:	f819 3003 	ldrb.w	r3, [r9, r3]
 800b954:	071b      	lsls	r3, r3, #28
 800b956:	d41a      	bmi.n	800b98e <_scanf_chars+0x8e>
 800b958:	6823      	ldr	r3, [r4, #0]
 800b95a:	3701      	adds	r7, #1
 800b95c:	06da      	lsls	r2, r3, #27
 800b95e:	bf5e      	ittt	pl
 800b960:	682b      	ldrpl	r3, [r5, #0]
 800b962:	781b      	ldrbpl	r3, [r3, #0]
 800b964:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b968:	682a      	ldr	r2, [r5, #0]
 800b96a:	686b      	ldr	r3, [r5, #4]
 800b96c:	3201      	adds	r2, #1
 800b96e:	3b01      	subs	r3, #1
 800b970:	602a      	str	r2, [r5, #0]
 800b972:	68a2      	ldr	r2, [r4, #8]
 800b974:	606b      	str	r3, [r5, #4]
 800b976:	3a01      	subs	r2, #1
 800b978:	60a2      	str	r2, [r4, #8]
 800b97a:	b142      	cbz	r2, 800b98e <_scanf_chars+0x8e>
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	dcd7      	bgt.n	800b930 <_scanf_chars+0x30>
 800b980:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b984:	4629      	mov	r1, r5
 800b986:	4640      	mov	r0, r8
 800b988:	4798      	blx	r3
 800b98a:	2800      	cmp	r0, #0
 800b98c:	d0d0      	beq.n	800b930 <_scanf_chars+0x30>
 800b98e:	6823      	ldr	r3, [r4, #0]
 800b990:	f013 0310 	ands.w	r3, r3, #16
 800b994:	d105      	bne.n	800b9a2 <_scanf_chars+0xa2>
 800b996:	68e2      	ldr	r2, [r4, #12]
 800b998:	3201      	adds	r2, #1
 800b99a:	60e2      	str	r2, [r4, #12]
 800b99c:	69a2      	ldr	r2, [r4, #24]
 800b99e:	b102      	cbz	r2, 800b9a2 <_scanf_chars+0xa2>
 800b9a0:	7033      	strb	r3, [r6, #0]
 800b9a2:	6923      	ldr	r3, [r4, #16]
 800b9a4:	2000      	movs	r0, #0
 800b9a6:	443b      	add	r3, r7
 800b9a8:	6123      	str	r3, [r4, #16]
 800b9aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9ae:	bf00      	nop
 800b9b0:	0800c064 	.word	0x0800c064

0800b9b4 <_scanf_i>:
 800b9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9b8:	4698      	mov	r8, r3
 800b9ba:	b087      	sub	sp, #28
 800b9bc:	4b72      	ldr	r3, [pc, #456]	; (800bb88 <_scanf_i+0x1d4>)
 800b9be:	460c      	mov	r4, r1
 800b9c0:	4682      	mov	sl, r0
 800b9c2:	4616      	mov	r6, r2
 800b9c4:	4627      	mov	r7, r4
 800b9c6:	f04f 0b00 	mov.w	fp, #0
 800b9ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b9ce:	ab03      	add	r3, sp, #12
 800b9d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b9d4:	4b6d      	ldr	r3, [pc, #436]	; (800bb8c <_scanf_i+0x1d8>)
 800b9d6:	69a1      	ldr	r1, [r4, #24]
 800b9d8:	4a6d      	ldr	r2, [pc, #436]	; (800bb90 <_scanf_i+0x1dc>)
 800b9da:	2903      	cmp	r1, #3
 800b9dc:	bf18      	it	ne
 800b9de:	461a      	movne	r2, r3
 800b9e0:	68a3      	ldr	r3, [r4, #8]
 800b9e2:	9201      	str	r2, [sp, #4]
 800b9e4:	1e5a      	subs	r2, r3, #1
 800b9e6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b9ea:	bf89      	itett	hi
 800b9ec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b9f0:	f04f 0900 	movls.w	r9, #0
 800b9f4:	eb03 0905 	addhi.w	r9, r3, r5
 800b9f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b9fc:	bf88      	it	hi
 800b9fe:	60a3      	strhi	r3, [r4, #8]
 800ba00:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ba04:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ba08:	463d      	mov	r5, r7
 800ba0a:	6023      	str	r3, [r4, #0]
 800ba0c:	6831      	ldr	r1, [r6, #0]
 800ba0e:	ab03      	add	r3, sp, #12
 800ba10:	2202      	movs	r2, #2
 800ba12:	7809      	ldrb	r1, [r1, #0]
 800ba14:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ba18:	f000 f93e 	bl	800bc98 <memchr>
 800ba1c:	b328      	cbz	r0, 800ba6a <_scanf_i+0xb6>
 800ba1e:	f1bb 0f01 	cmp.w	fp, #1
 800ba22:	d159      	bne.n	800bad8 <_scanf_i+0x124>
 800ba24:	6862      	ldr	r2, [r4, #4]
 800ba26:	b92a      	cbnz	r2, 800ba34 <_scanf_i+0x80>
 800ba28:	6822      	ldr	r2, [r4, #0]
 800ba2a:	2308      	movs	r3, #8
 800ba2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba30:	6063      	str	r3, [r4, #4]
 800ba32:	6022      	str	r2, [r4, #0]
 800ba34:	6822      	ldr	r2, [r4, #0]
 800ba36:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ba3a:	6022      	str	r2, [r4, #0]
 800ba3c:	68a2      	ldr	r2, [r4, #8]
 800ba3e:	1e51      	subs	r1, r2, #1
 800ba40:	60a1      	str	r1, [r4, #8]
 800ba42:	b192      	cbz	r2, 800ba6a <_scanf_i+0xb6>
 800ba44:	6832      	ldr	r2, [r6, #0]
 800ba46:	1c51      	adds	r1, r2, #1
 800ba48:	6031      	str	r1, [r6, #0]
 800ba4a:	7812      	ldrb	r2, [r2, #0]
 800ba4c:	f805 2b01 	strb.w	r2, [r5], #1
 800ba50:	6872      	ldr	r2, [r6, #4]
 800ba52:	3a01      	subs	r2, #1
 800ba54:	2a00      	cmp	r2, #0
 800ba56:	6072      	str	r2, [r6, #4]
 800ba58:	dc07      	bgt.n	800ba6a <_scanf_i+0xb6>
 800ba5a:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ba5e:	4631      	mov	r1, r6
 800ba60:	4650      	mov	r0, sl
 800ba62:	4790      	blx	r2
 800ba64:	2800      	cmp	r0, #0
 800ba66:	f040 8085 	bne.w	800bb74 <_scanf_i+0x1c0>
 800ba6a:	f10b 0b01 	add.w	fp, fp, #1
 800ba6e:	f1bb 0f03 	cmp.w	fp, #3
 800ba72:	d1cb      	bne.n	800ba0c <_scanf_i+0x58>
 800ba74:	6863      	ldr	r3, [r4, #4]
 800ba76:	b90b      	cbnz	r3, 800ba7c <_scanf_i+0xc8>
 800ba78:	230a      	movs	r3, #10
 800ba7a:	6063      	str	r3, [r4, #4]
 800ba7c:	6863      	ldr	r3, [r4, #4]
 800ba7e:	f04f 0b00 	mov.w	fp, #0
 800ba82:	4944      	ldr	r1, [pc, #272]	; (800bb94 <_scanf_i+0x1e0>)
 800ba84:	6960      	ldr	r0, [r4, #20]
 800ba86:	1ac9      	subs	r1, r1, r3
 800ba88:	f000 f886 	bl	800bb98 <__sccl>
 800ba8c:	68a3      	ldr	r3, [r4, #8]
 800ba8e:	6822      	ldr	r2, [r4, #0]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d03d      	beq.n	800bb10 <_scanf_i+0x15c>
 800ba94:	6831      	ldr	r1, [r6, #0]
 800ba96:	6960      	ldr	r0, [r4, #20]
 800ba98:	f891 c000 	ldrb.w	ip, [r1]
 800ba9c:	f810 000c 	ldrb.w	r0, [r0, ip]
 800baa0:	2800      	cmp	r0, #0
 800baa2:	d035      	beq.n	800bb10 <_scanf_i+0x15c>
 800baa4:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800baa8:	d124      	bne.n	800baf4 <_scanf_i+0x140>
 800baaa:	0510      	lsls	r0, r2, #20
 800baac:	d522      	bpl.n	800baf4 <_scanf_i+0x140>
 800baae:	f10b 0b01 	add.w	fp, fp, #1
 800bab2:	f1b9 0f00 	cmp.w	r9, #0
 800bab6:	d003      	beq.n	800bac0 <_scanf_i+0x10c>
 800bab8:	3301      	adds	r3, #1
 800baba:	f109 39ff 	add.w	r9, r9, #4294967295
 800babe:	60a3      	str	r3, [r4, #8]
 800bac0:	6873      	ldr	r3, [r6, #4]
 800bac2:	3b01      	subs	r3, #1
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	6073      	str	r3, [r6, #4]
 800bac8:	dd1b      	ble.n	800bb02 <_scanf_i+0x14e>
 800baca:	6833      	ldr	r3, [r6, #0]
 800bacc:	3301      	adds	r3, #1
 800bace:	6033      	str	r3, [r6, #0]
 800bad0:	68a3      	ldr	r3, [r4, #8]
 800bad2:	3b01      	subs	r3, #1
 800bad4:	60a3      	str	r3, [r4, #8]
 800bad6:	e7d9      	b.n	800ba8c <_scanf_i+0xd8>
 800bad8:	f1bb 0f02 	cmp.w	fp, #2
 800badc:	d1ae      	bne.n	800ba3c <_scanf_i+0x88>
 800bade:	6822      	ldr	r2, [r4, #0]
 800bae0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800bae4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bae8:	d1bf      	bne.n	800ba6a <_scanf_i+0xb6>
 800baea:	2310      	movs	r3, #16
 800baec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800baf0:	6063      	str	r3, [r4, #4]
 800baf2:	e7a2      	b.n	800ba3a <_scanf_i+0x86>
 800baf4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800baf8:	6022      	str	r2, [r4, #0]
 800bafa:	780b      	ldrb	r3, [r1, #0]
 800bafc:	f805 3b01 	strb.w	r3, [r5], #1
 800bb00:	e7de      	b.n	800bac0 <_scanf_i+0x10c>
 800bb02:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bb06:	4631      	mov	r1, r6
 800bb08:	4650      	mov	r0, sl
 800bb0a:	4798      	blx	r3
 800bb0c:	2800      	cmp	r0, #0
 800bb0e:	d0df      	beq.n	800bad0 <_scanf_i+0x11c>
 800bb10:	6823      	ldr	r3, [r4, #0]
 800bb12:	05d9      	lsls	r1, r3, #23
 800bb14:	d50d      	bpl.n	800bb32 <_scanf_i+0x17e>
 800bb16:	42bd      	cmp	r5, r7
 800bb18:	d909      	bls.n	800bb2e <_scanf_i+0x17a>
 800bb1a:	f105 39ff 	add.w	r9, r5, #4294967295
 800bb1e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bb22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bb26:	4632      	mov	r2, r6
 800bb28:	464d      	mov	r5, r9
 800bb2a:	4650      	mov	r0, sl
 800bb2c:	4798      	blx	r3
 800bb2e:	42bd      	cmp	r5, r7
 800bb30:	d028      	beq.n	800bb84 <_scanf_i+0x1d0>
 800bb32:	6822      	ldr	r2, [r4, #0]
 800bb34:	f012 0210 	ands.w	r2, r2, #16
 800bb38:	d113      	bne.n	800bb62 <_scanf_i+0x1ae>
 800bb3a:	702a      	strb	r2, [r5, #0]
 800bb3c:	4639      	mov	r1, r7
 800bb3e:	6863      	ldr	r3, [r4, #4]
 800bb40:	4650      	mov	r0, sl
 800bb42:	9e01      	ldr	r6, [sp, #4]
 800bb44:	47b0      	blx	r6
 800bb46:	f8d8 3000 	ldr.w	r3, [r8]
 800bb4a:	6821      	ldr	r1, [r4, #0]
 800bb4c:	1d1a      	adds	r2, r3, #4
 800bb4e:	f011 0f20 	tst.w	r1, #32
 800bb52:	f8c8 2000 	str.w	r2, [r8]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	d00f      	beq.n	800bb7a <_scanf_i+0x1c6>
 800bb5a:	6018      	str	r0, [r3, #0]
 800bb5c:	68e3      	ldr	r3, [r4, #12]
 800bb5e:	3301      	adds	r3, #1
 800bb60:	60e3      	str	r3, [r4, #12]
 800bb62:	1bed      	subs	r5, r5, r7
 800bb64:	6923      	ldr	r3, [r4, #16]
 800bb66:	2000      	movs	r0, #0
 800bb68:	445d      	add	r5, fp
 800bb6a:	442b      	add	r3, r5
 800bb6c:	6123      	str	r3, [r4, #16]
 800bb6e:	b007      	add	sp, #28
 800bb70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb74:	f04f 0b00 	mov.w	fp, #0
 800bb78:	e7ca      	b.n	800bb10 <_scanf_i+0x15c>
 800bb7a:	07ca      	lsls	r2, r1, #31
 800bb7c:	bf4c      	ite	mi
 800bb7e:	8018      	strhmi	r0, [r3, #0]
 800bb80:	6018      	strpl	r0, [r3, #0]
 800bb82:	e7eb      	b.n	800bb5c <_scanf_i+0x1a8>
 800bb84:	2001      	movs	r0, #1
 800bb86:	e7f2      	b.n	800bb6e <_scanf_i+0x1ba>
 800bb88:	0800bf70 	.word	0x0800bf70
 800bb8c:	0800bf01 	.word	0x0800bf01
 800bb90:	0800be19 	.word	0x0800be19
 800bb94:	0800c058 	.word	0x0800c058

0800bb98 <__sccl>:
 800bb98:	b570      	push	{r4, r5, r6, lr}
 800bb9a:	780b      	ldrb	r3, [r1, #0]
 800bb9c:	4604      	mov	r4, r0
 800bb9e:	3801      	subs	r0, #1
 800bba0:	2b5e      	cmp	r3, #94	; 0x5e
 800bba2:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800bba6:	bf13      	iteet	ne
 800bba8:	1c4a      	addne	r2, r1, #1
 800bbaa:	1c8a      	addeq	r2, r1, #2
 800bbac:	784b      	ldrbeq	r3, [r1, #1]
 800bbae:	2100      	movne	r1, #0
 800bbb0:	bf08      	it	eq
 800bbb2:	2101      	moveq	r1, #1
 800bbb4:	f800 1f01 	strb.w	r1, [r0, #1]!
 800bbb8:	42a8      	cmp	r0, r5
 800bbba:	d1fb      	bne.n	800bbb4 <__sccl+0x1c>
 800bbbc:	b90b      	cbnz	r3, 800bbc2 <__sccl+0x2a>
 800bbbe:	1e50      	subs	r0, r2, #1
 800bbc0:	bd70      	pop	{r4, r5, r6, pc}
 800bbc2:	f081 0101 	eor.w	r1, r1, #1
 800bbc6:	4610      	mov	r0, r2
 800bbc8:	54e1      	strb	r1, [r4, r3]
 800bbca:	4602      	mov	r2, r0
 800bbcc:	f812 5b01 	ldrb.w	r5, [r2], #1
 800bbd0:	2d2d      	cmp	r5, #45	; 0x2d
 800bbd2:	d005      	beq.n	800bbe0 <__sccl+0x48>
 800bbd4:	2d5d      	cmp	r5, #93	; 0x5d
 800bbd6:	d016      	beq.n	800bc06 <__sccl+0x6e>
 800bbd8:	2d00      	cmp	r5, #0
 800bbda:	d0f1      	beq.n	800bbc0 <__sccl+0x28>
 800bbdc:	462b      	mov	r3, r5
 800bbde:	e7f2      	b.n	800bbc6 <__sccl+0x2e>
 800bbe0:	7846      	ldrb	r6, [r0, #1]
 800bbe2:	2e5d      	cmp	r6, #93	; 0x5d
 800bbe4:	d0fa      	beq.n	800bbdc <__sccl+0x44>
 800bbe6:	42b3      	cmp	r3, r6
 800bbe8:	dcf8      	bgt.n	800bbdc <__sccl+0x44>
 800bbea:	3002      	adds	r0, #2
 800bbec:	461a      	mov	r2, r3
 800bbee:	3201      	adds	r2, #1
 800bbf0:	4296      	cmp	r6, r2
 800bbf2:	54a1      	strb	r1, [r4, r2]
 800bbf4:	dcfb      	bgt.n	800bbee <__sccl+0x56>
 800bbf6:	1af2      	subs	r2, r6, r3
 800bbf8:	1c5d      	adds	r5, r3, #1
 800bbfa:	3a01      	subs	r2, #1
 800bbfc:	42b3      	cmp	r3, r6
 800bbfe:	bfa8      	it	ge
 800bc00:	2200      	movge	r2, #0
 800bc02:	18ab      	adds	r3, r5, r2
 800bc04:	e7e1      	b.n	800bbca <__sccl+0x32>
 800bc06:	4610      	mov	r0, r2
 800bc08:	e7da      	b.n	800bbc0 <__sccl+0x28>

0800bc0a <__submore>:
 800bc0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc0e:	460c      	mov	r4, r1
 800bc10:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bc12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc16:	4299      	cmp	r1, r3
 800bc18:	d11a      	bne.n	800bc50 <__submore+0x46>
 800bc1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bc1e:	f7ff fc11 	bl	800b444 <_malloc_r>
 800bc22:	b918      	cbnz	r0, 800bc2c <__submore+0x22>
 800bc24:	f04f 30ff 	mov.w	r0, #4294967295
 800bc28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc30:	6360      	str	r0, [r4, #52]	; 0x34
 800bc32:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800bc36:	63a3      	str	r3, [r4, #56]	; 0x38
 800bc38:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800bc3c:	7083      	strb	r3, [r0, #2]
 800bc3e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bc42:	7043      	strb	r3, [r0, #1]
 800bc44:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bc48:	7003      	strb	r3, [r0, #0]
 800bc4a:	6020      	str	r0, [r4, #0]
 800bc4c:	2000      	movs	r0, #0
 800bc4e:	e7eb      	b.n	800bc28 <__submore+0x1e>
 800bc50:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800bc52:	0077      	lsls	r7, r6, #1
 800bc54:	463a      	mov	r2, r7
 800bc56:	f000 f82d 	bl	800bcb4 <_realloc_r>
 800bc5a:	4605      	mov	r5, r0
 800bc5c:	2800      	cmp	r0, #0
 800bc5e:	d0e1      	beq.n	800bc24 <__submore+0x1a>
 800bc60:	eb00 0806 	add.w	r8, r0, r6
 800bc64:	4601      	mov	r1, r0
 800bc66:	4632      	mov	r2, r6
 800bc68:	4640      	mov	r0, r8
 800bc6a:	f7ff fb71 	bl	800b350 <memcpy>
 800bc6e:	f8c4 8000 	str.w	r8, [r4]
 800bc72:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800bc76:	e7e9      	b.n	800bc4c <__submore+0x42>

0800bc78 <_sbrk_r>:
 800bc78:	b538      	push	{r3, r4, r5, lr}
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	4d05      	ldr	r5, [pc, #20]	; (800bc94 <_sbrk_r+0x1c>)
 800bc7e:	4604      	mov	r4, r0
 800bc80:	4608      	mov	r0, r1
 800bc82:	602b      	str	r3, [r5, #0]
 800bc84:	f7f5 ffda 	bl	8001c3c <_sbrk>
 800bc88:	1c43      	adds	r3, r0, #1
 800bc8a:	d102      	bne.n	800bc92 <_sbrk_r+0x1a>
 800bc8c:	682b      	ldr	r3, [r5, #0]
 800bc8e:	b103      	cbz	r3, 800bc92 <_sbrk_r+0x1a>
 800bc90:	6023      	str	r3, [r4, #0]
 800bc92:	bd38      	pop	{r3, r4, r5, pc}
 800bc94:	200036c4 	.word	0x200036c4

0800bc98 <memchr>:
 800bc98:	b2c9      	uxtb	r1, r1
 800bc9a:	4402      	add	r2, r0
 800bc9c:	b510      	push	{r4, lr}
 800bc9e:	4290      	cmp	r0, r2
 800bca0:	4603      	mov	r3, r0
 800bca2:	d101      	bne.n	800bca8 <memchr+0x10>
 800bca4:	2300      	movs	r3, #0
 800bca6:	e003      	b.n	800bcb0 <memchr+0x18>
 800bca8:	781c      	ldrb	r4, [r3, #0]
 800bcaa:	3001      	adds	r0, #1
 800bcac:	428c      	cmp	r4, r1
 800bcae:	d1f6      	bne.n	800bc9e <memchr+0x6>
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	bd10      	pop	{r4, pc}

0800bcb4 <_realloc_r>:
 800bcb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcb8:	4680      	mov	r8, r0
 800bcba:	4614      	mov	r4, r2
 800bcbc:	460e      	mov	r6, r1
 800bcbe:	b921      	cbnz	r1, 800bcca <_realloc_r+0x16>
 800bcc0:	4611      	mov	r1, r2
 800bcc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcc6:	f7ff bbbd 	b.w	800b444 <_malloc_r>
 800bcca:	b92a      	cbnz	r2, 800bcd8 <_realloc_r+0x24>
 800bccc:	4625      	mov	r5, r4
 800bcce:	f7ff fb4d 	bl	800b36c <_free_r>
 800bcd2:	4628      	mov	r0, r5
 800bcd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcd8:	f000 f914 	bl	800bf04 <_malloc_usable_size_r>
 800bcdc:	4284      	cmp	r4, r0
 800bcde:	4607      	mov	r7, r0
 800bce0:	d802      	bhi.n	800bce8 <_realloc_r+0x34>
 800bce2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bce6:	d812      	bhi.n	800bd0e <_realloc_r+0x5a>
 800bce8:	4621      	mov	r1, r4
 800bcea:	4640      	mov	r0, r8
 800bcec:	f7ff fbaa 	bl	800b444 <_malloc_r>
 800bcf0:	4605      	mov	r5, r0
 800bcf2:	2800      	cmp	r0, #0
 800bcf4:	d0ed      	beq.n	800bcd2 <_realloc_r+0x1e>
 800bcf6:	42bc      	cmp	r4, r7
 800bcf8:	4622      	mov	r2, r4
 800bcfa:	4631      	mov	r1, r6
 800bcfc:	bf28      	it	cs
 800bcfe:	463a      	movcs	r2, r7
 800bd00:	f7ff fb26 	bl	800b350 <memcpy>
 800bd04:	4631      	mov	r1, r6
 800bd06:	4640      	mov	r0, r8
 800bd08:	f7ff fb30 	bl	800b36c <_free_r>
 800bd0c:	e7e1      	b.n	800bcd2 <_realloc_r+0x1e>
 800bd0e:	4635      	mov	r5, r6
 800bd10:	e7df      	b.n	800bcd2 <_realloc_r+0x1e>
	...

0800bd14 <_strtol_l.constprop.0>:
 800bd14:	2b01      	cmp	r3, #1
 800bd16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd1a:	d001      	beq.n	800bd20 <_strtol_l.constprop.0+0xc>
 800bd1c:	2b24      	cmp	r3, #36	; 0x24
 800bd1e:	d906      	bls.n	800bd2e <_strtol_l.constprop.0+0x1a>
 800bd20:	f7ff faea 	bl	800b2f8 <__errno>
 800bd24:	2316      	movs	r3, #22
 800bd26:	6003      	str	r3, [r0, #0]
 800bd28:	2000      	movs	r0, #0
 800bd2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd2e:	460d      	mov	r5, r1
 800bd30:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 800be14 <_strtol_l.constprop.0+0x100>
 800bd34:	462e      	mov	r6, r5
 800bd36:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd3a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800bd3e:	f017 0708 	ands.w	r7, r7, #8
 800bd42:	d1f7      	bne.n	800bd34 <_strtol_l.constprop.0+0x20>
 800bd44:	2c2d      	cmp	r4, #45	; 0x2d
 800bd46:	d132      	bne.n	800bdae <_strtol_l.constprop.0+0x9a>
 800bd48:	782c      	ldrb	r4, [r5, #0]
 800bd4a:	2701      	movs	r7, #1
 800bd4c:	1cb5      	adds	r5, r6, #2
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d05b      	beq.n	800be0a <_strtol_l.constprop.0+0xf6>
 800bd52:	2b10      	cmp	r3, #16
 800bd54:	d109      	bne.n	800bd6a <_strtol_l.constprop.0+0x56>
 800bd56:	2c30      	cmp	r4, #48	; 0x30
 800bd58:	d107      	bne.n	800bd6a <_strtol_l.constprop.0+0x56>
 800bd5a:	782c      	ldrb	r4, [r5, #0]
 800bd5c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bd60:	2c58      	cmp	r4, #88	; 0x58
 800bd62:	d14d      	bne.n	800be00 <_strtol_l.constprop.0+0xec>
 800bd64:	786c      	ldrb	r4, [r5, #1]
 800bd66:	2310      	movs	r3, #16
 800bd68:	3502      	adds	r5, #2
 800bd6a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bd6e:	f04f 0e00 	mov.w	lr, #0
 800bd72:	f108 38ff 	add.w	r8, r8, #4294967295
 800bd76:	4676      	mov	r6, lr
 800bd78:	fbb8 f9f3 	udiv	r9, r8, r3
 800bd7c:	fb03 8a19 	mls	sl, r3, r9, r8
 800bd80:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bd84:	f1bc 0f09 	cmp.w	ip, #9
 800bd88:	d816      	bhi.n	800bdb8 <_strtol_l.constprop.0+0xa4>
 800bd8a:	4664      	mov	r4, ip
 800bd8c:	42a3      	cmp	r3, r4
 800bd8e:	dd24      	ble.n	800bdda <_strtol_l.constprop.0+0xc6>
 800bd90:	f1be 3fff 	cmp.w	lr, #4294967295
 800bd94:	d008      	beq.n	800bda8 <_strtol_l.constprop.0+0x94>
 800bd96:	45b1      	cmp	r9, r6
 800bd98:	d31c      	bcc.n	800bdd4 <_strtol_l.constprop.0+0xc0>
 800bd9a:	d101      	bne.n	800bda0 <_strtol_l.constprop.0+0x8c>
 800bd9c:	45a2      	cmp	sl, r4
 800bd9e:	db19      	blt.n	800bdd4 <_strtol_l.constprop.0+0xc0>
 800bda0:	fb06 4603 	mla	r6, r6, r3, r4
 800bda4:	f04f 0e01 	mov.w	lr, #1
 800bda8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bdac:	e7e8      	b.n	800bd80 <_strtol_l.constprop.0+0x6c>
 800bdae:	2c2b      	cmp	r4, #43	; 0x2b
 800bdb0:	bf04      	itt	eq
 800bdb2:	782c      	ldrbeq	r4, [r5, #0]
 800bdb4:	1cb5      	addeq	r5, r6, #2
 800bdb6:	e7ca      	b.n	800bd4e <_strtol_l.constprop.0+0x3a>
 800bdb8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bdbc:	f1bc 0f19 	cmp.w	ip, #25
 800bdc0:	d801      	bhi.n	800bdc6 <_strtol_l.constprop.0+0xb2>
 800bdc2:	3c37      	subs	r4, #55	; 0x37
 800bdc4:	e7e2      	b.n	800bd8c <_strtol_l.constprop.0+0x78>
 800bdc6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bdca:	f1bc 0f19 	cmp.w	ip, #25
 800bdce:	d804      	bhi.n	800bdda <_strtol_l.constprop.0+0xc6>
 800bdd0:	3c57      	subs	r4, #87	; 0x57
 800bdd2:	e7db      	b.n	800bd8c <_strtol_l.constprop.0+0x78>
 800bdd4:	f04f 3eff 	mov.w	lr, #4294967295
 800bdd8:	e7e6      	b.n	800bda8 <_strtol_l.constprop.0+0x94>
 800bdda:	f1be 3fff 	cmp.w	lr, #4294967295
 800bdde:	d105      	bne.n	800bdec <_strtol_l.constprop.0+0xd8>
 800bde0:	2322      	movs	r3, #34	; 0x22
 800bde2:	4646      	mov	r6, r8
 800bde4:	6003      	str	r3, [r0, #0]
 800bde6:	b942      	cbnz	r2, 800bdfa <_strtol_l.constprop.0+0xe6>
 800bde8:	4630      	mov	r0, r6
 800bdea:	e79e      	b.n	800bd2a <_strtol_l.constprop.0+0x16>
 800bdec:	b107      	cbz	r7, 800bdf0 <_strtol_l.constprop.0+0xdc>
 800bdee:	4276      	negs	r6, r6
 800bdf0:	2a00      	cmp	r2, #0
 800bdf2:	d0f9      	beq.n	800bde8 <_strtol_l.constprop.0+0xd4>
 800bdf4:	f1be 0f00 	cmp.w	lr, #0
 800bdf8:	d000      	beq.n	800bdfc <_strtol_l.constprop.0+0xe8>
 800bdfa:	1e69      	subs	r1, r5, #1
 800bdfc:	6011      	str	r1, [r2, #0]
 800bdfe:	e7f3      	b.n	800bde8 <_strtol_l.constprop.0+0xd4>
 800be00:	2430      	movs	r4, #48	; 0x30
 800be02:	2b00      	cmp	r3, #0
 800be04:	d1b1      	bne.n	800bd6a <_strtol_l.constprop.0+0x56>
 800be06:	2308      	movs	r3, #8
 800be08:	e7af      	b.n	800bd6a <_strtol_l.constprop.0+0x56>
 800be0a:	2c30      	cmp	r4, #48	; 0x30
 800be0c:	d0a5      	beq.n	800bd5a <_strtol_l.constprop.0+0x46>
 800be0e:	230a      	movs	r3, #10
 800be10:	e7ab      	b.n	800bd6a <_strtol_l.constprop.0+0x56>
 800be12:	bf00      	nop
 800be14:	0800c064 	.word	0x0800c064

0800be18 <_strtol_r>:
 800be18:	f7ff bf7c 	b.w	800bd14 <_strtol_l.constprop.0>

0800be1c <_strtoul_l.constprop.0>:
 800be1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be20:	4686      	mov	lr, r0
 800be22:	460d      	mov	r5, r1
 800be24:	4f35      	ldr	r7, [pc, #212]	; (800befc <_strtoul_l.constprop.0+0xe0>)
 800be26:	4628      	mov	r0, r5
 800be28:	f815 4b01 	ldrb.w	r4, [r5], #1
 800be2c:	5d3e      	ldrb	r6, [r7, r4]
 800be2e:	f016 0608 	ands.w	r6, r6, #8
 800be32:	d1f8      	bne.n	800be26 <_strtoul_l.constprop.0+0xa>
 800be34:	2c2d      	cmp	r4, #45	; 0x2d
 800be36:	d130      	bne.n	800be9a <_strtoul_l.constprop.0+0x7e>
 800be38:	782c      	ldrb	r4, [r5, #0]
 800be3a:	2601      	movs	r6, #1
 800be3c:	1c85      	adds	r5, r0, #2
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d057      	beq.n	800bef2 <_strtoul_l.constprop.0+0xd6>
 800be42:	2b10      	cmp	r3, #16
 800be44:	d109      	bne.n	800be5a <_strtoul_l.constprop.0+0x3e>
 800be46:	2c30      	cmp	r4, #48	; 0x30
 800be48:	d107      	bne.n	800be5a <_strtoul_l.constprop.0+0x3e>
 800be4a:	7828      	ldrb	r0, [r5, #0]
 800be4c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800be50:	2858      	cmp	r0, #88	; 0x58
 800be52:	d149      	bne.n	800bee8 <_strtoul_l.constprop.0+0xcc>
 800be54:	786c      	ldrb	r4, [r5, #1]
 800be56:	2310      	movs	r3, #16
 800be58:	3502      	adds	r5, #2
 800be5a:	f04f 38ff 	mov.w	r8, #4294967295
 800be5e:	2700      	movs	r7, #0
 800be60:	fbb8 f8f3 	udiv	r8, r8, r3
 800be64:	fb03 f908 	mul.w	r9, r3, r8
 800be68:	4638      	mov	r0, r7
 800be6a:	ea6f 0909 	mvn.w	r9, r9
 800be6e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800be72:	f1bc 0f09 	cmp.w	ip, #9
 800be76:	d815      	bhi.n	800bea4 <_strtoul_l.constprop.0+0x88>
 800be78:	4664      	mov	r4, ip
 800be7a:	42a3      	cmp	r3, r4
 800be7c:	dd23      	ble.n	800bec6 <_strtoul_l.constprop.0+0xaa>
 800be7e:	f1b7 3fff 	cmp.w	r7, #4294967295
 800be82:	d007      	beq.n	800be94 <_strtoul_l.constprop.0+0x78>
 800be84:	4580      	cmp	r8, r0
 800be86:	d31b      	bcc.n	800bec0 <_strtoul_l.constprop.0+0xa4>
 800be88:	d101      	bne.n	800be8e <_strtoul_l.constprop.0+0x72>
 800be8a:	45a1      	cmp	r9, r4
 800be8c:	db18      	blt.n	800bec0 <_strtoul_l.constprop.0+0xa4>
 800be8e:	fb00 4003 	mla	r0, r0, r3, r4
 800be92:	2701      	movs	r7, #1
 800be94:	f815 4b01 	ldrb.w	r4, [r5], #1
 800be98:	e7e9      	b.n	800be6e <_strtoul_l.constprop.0+0x52>
 800be9a:	2c2b      	cmp	r4, #43	; 0x2b
 800be9c:	bf04      	itt	eq
 800be9e:	782c      	ldrbeq	r4, [r5, #0]
 800bea0:	1c85      	addeq	r5, r0, #2
 800bea2:	e7cc      	b.n	800be3e <_strtoul_l.constprop.0+0x22>
 800bea4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bea8:	f1bc 0f19 	cmp.w	ip, #25
 800beac:	d801      	bhi.n	800beb2 <_strtoul_l.constprop.0+0x96>
 800beae:	3c37      	subs	r4, #55	; 0x37
 800beb0:	e7e3      	b.n	800be7a <_strtoul_l.constprop.0+0x5e>
 800beb2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800beb6:	f1bc 0f19 	cmp.w	ip, #25
 800beba:	d804      	bhi.n	800bec6 <_strtoul_l.constprop.0+0xaa>
 800bebc:	3c57      	subs	r4, #87	; 0x57
 800bebe:	e7dc      	b.n	800be7a <_strtoul_l.constprop.0+0x5e>
 800bec0:	f04f 37ff 	mov.w	r7, #4294967295
 800bec4:	e7e6      	b.n	800be94 <_strtoul_l.constprop.0+0x78>
 800bec6:	1c7b      	adds	r3, r7, #1
 800bec8:	d106      	bne.n	800bed8 <_strtoul_l.constprop.0+0xbc>
 800beca:	2322      	movs	r3, #34	; 0x22
 800becc:	4638      	mov	r0, r7
 800bece:	f8ce 3000 	str.w	r3, [lr]
 800bed2:	b932      	cbnz	r2, 800bee2 <_strtoul_l.constprop.0+0xc6>
 800bed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bed8:	b106      	cbz	r6, 800bedc <_strtoul_l.constprop.0+0xc0>
 800beda:	4240      	negs	r0, r0
 800bedc:	2a00      	cmp	r2, #0
 800bede:	d0f9      	beq.n	800bed4 <_strtoul_l.constprop.0+0xb8>
 800bee0:	b107      	cbz	r7, 800bee4 <_strtoul_l.constprop.0+0xc8>
 800bee2:	1e69      	subs	r1, r5, #1
 800bee4:	6011      	str	r1, [r2, #0]
 800bee6:	e7f5      	b.n	800bed4 <_strtoul_l.constprop.0+0xb8>
 800bee8:	2430      	movs	r4, #48	; 0x30
 800beea:	2b00      	cmp	r3, #0
 800beec:	d1b5      	bne.n	800be5a <_strtoul_l.constprop.0+0x3e>
 800beee:	2308      	movs	r3, #8
 800bef0:	e7b3      	b.n	800be5a <_strtoul_l.constprop.0+0x3e>
 800bef2:	2c30      	cmp	r4, #48	; 0x30
 800bef4:	d0a9      	beq.n	800be4a <_strtoul_l.constprop.0+0x2e>
 800bef6:	230a      	movs	r3, #10
 800bef8:	e7af      	b.n	800be5a <_strtoul_l.constprop.0+0x3e>
 800befa:	bf00      	nop
 800befc:	0800c064 	.word	0x0800c064

0800bf00 <_strtoul_r>:
 800bf00:	f7ff bf8c 	b.w	800be1c <_strtoul_l.constprop.0>

0800bf04 <_malloc_usable_size_r>:
 800bf04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf08:	1f18      	subs	r0, r3, #4
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	bfbc      	itt	lt
 800bf0e:	580b      	ldrlt	r3, [r1, r0]
 800bf10:	18c0      	addlt	r0, r0, r3
 800bf12:	4770      	bx	lr

0800bf14 <_init>:
 800bf14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf16:	bf00      	nop
 800bf18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf1a:	bc08      	pop	{r3}
 800bf1c:	469e      	mov	lr, r3
 800bf1e:	4770      	bx	lr

0800bf20 <_fini>:
 800bf20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf22:	bf00      	nop
 800bf24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf26:	bc08      	pop	{r3}
 800bf28:	469e      	mov	lr, r3
 800bf2a:	4770      	bx	lr
