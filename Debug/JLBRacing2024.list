
JLBRacing2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a6b0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000087c  0801a8b0  0801a8b0  0002a8b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b12c  0801b12c  000300fc  2**0
                  CONTENTS
  4 .ARM          00000008  0801b12c  0801b12c  0002b12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b134  0801b134  000300fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0801b134  0801b134  0002b134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  0801b144  0801b144  0002b144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0801b150  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009da8  20000100  0801b24c  00030100  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20009ea8  0801b24c  00039ea8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000300fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030132  2**0
                  CONTENTS, READONLY
 13 .debug_info   000b3e67  00000000  00000000  00030175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008fd3  00000000  00000000  000e3fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002d18  00000000  00000000  000ecfb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000a5cf  00000000  00000000  000efcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00039a21  00000000  00000000  000fa297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00057944  00000000  00000000  00133cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016a1de  00000000  00000000  0018b5fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000d3f0  00000000  00000000  002f57dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0002bbf3  00000000  00000000  00302bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0032e7bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000100 	.word	0x20000100
 800021c:	00000000 	.word	0x00000000
 8000220:	0801a898 	.word	0x0801a898

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000104 	.word	0x20000104
 800023c:	0801a898 	.word	0x0801a898

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2uiz>:
 8000b28:	004a      	lsls	r2, r1, #1
 8000b2a:	d211      	bcs.n	8000b50 <__aeabi_d2uiz+0x28>
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d211      	bcs.n	8000b56 <__aeabi_d2uiz+0x2e>
 8000b32:	d50d      	bpl.n	8000b50 <__aeabi_d2uiz+0x28>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d40e      	bmi.n	8000b5c <__aeabi_d2uiz+0x34>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_d2uiz+0x3a>
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2f>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b70:	bf24      	itt	cs
 8000b72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7a:	d90d      	bls.n	8000b98 <__aeabi_d2f+0x30>
 8000b7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b9c:	d121      	bne.n	8000be2 <__aeabi_d2f+0x7a>
 8000b9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba2:	bfbc      	itt	lt
 8000ba4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	4770      	bxlt	lr
 8000baa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb2:	f1c2 0218 	rsb	r2, r2, #24
 8000bb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	f040 0001 	orrne.w	r0, r0, #1
 8000bc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd4:	ea40 000c 	orr.w	r0, r0, ip
 8000bd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be0:	e7cc      	b.n	8000b7c <__aeabi_d2f+0x14>
 8000be2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be6:	d107      	bne.n	8000bf8 <__aeabi_d2f+0x90>
 8000be8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bec:	bf1e      	ittt	ne
 8000bee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bf6:	4770      	bxne	lr
 8000bf8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b982 	b.w	8000f24 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c3c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000c3e:	460d      	mov	r5, r1
 8000c40:	4604      	mov	r4, r0
 8000c42:	460f      	mov	r7, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d146      	bne.n	8000cd6 <__udivmoddi4+0x9e>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4694      	mov	ip, r2
 8000c4c:	d95e      	bls.n	8000d0c <__udivmoddi4+0xd4>
 8000c4e:	fab2 f382 	clz	r3, r2
 8000c52:	b143      	cbz	r3, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c58:	f1c3 0220 	rsb	r2, r3, #32
 8000c5c:	409f      	lsls	r7, r3
 8000c5e:	409c      	lsls	r4, r3
 8000c60:	fa20 f202 	lsr.w	r2, r0, r2
 8000c64:	4317      	orrs	r7, r2
 8000c66:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c6a:	fa1f f58c 	uxth.w	r5, ip
 8000c6e:	0c22      	lsrs	r2, r4, #16
 8000c70:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c74:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c78:	fb01 f005 	mul.w	r0, r1, r5
 8000c7c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x5e>
 8000c84:	eb1c 0202 	adds.w	r2, ip, r2
 8000c88:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c8c:	d202      	bcs.n	8000c94 <__udivmoddi4+0x5c>
 8000c8e:	4290      	cmp	r0, r2
 8000c90:	f200 8134 	bhi.w	8000efc <__udivmoddi4+0x2c4>
 8000c94:	4639      	mov	r1, r7
 8000c96:	1a12      	subs	r2, r2, r0
 8000c98:	b2a4      	uxth	r4, r4
 8000c9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ca2:	fb00 f505 	mul.w	r5, r0, r5
 8000ca6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000caa:	42a5      	cmp	r5, r4
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x88>
 8000cae:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x86>
 8000cb8:	42a5      	cmp	r5, r4
 8000cba:	f200 8119 	bhi.w	8000ef0 <__udivmoddi4+0x2b8>
 8000cbe:	4610      	mov	r0, r2
 8000cc0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cc4:	1b64      	subs	r4, r4, r5
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	b11e      	cbz	r6, 8000cd2 <__udivmoddi4+0x9a>
 8000cca:	40dc      	lsrs	r4, r3
 8000ccc:	2300      	movs	r3, #0
 8000cce:	e9c6 4300 	strd	r4, r3, [r6]
 8000cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0xb4>
 8000cda:	2e00      	cmp	r6, #0
 8000cdc:	f000 80fc 	beq.w	8000ed8 <__udivmoddi4+0x2a0>
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	e9c6 0500 	strd	r0, r5, [r6]
 8000ce6:	4608      	mov	r0, r1
 8000ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cec:	fab3 f183 	clz	r1, r3
 8000cf0:	2900      	cmp	r1, #0
 8000cf2:	d14c      	bne.n	8000d8e <__udivmoddi4+0x156>
 8000cf4:	42ab      	cmp	r3, r5
 8000cf6:	f0c0 80f2 	bcc.w	8000ede <__udivmoddi4+0x2a6>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f240 80ef 	bls.w	8000ede <__udivmoddi4+0x2a6>
 8000d00:	4608      	mov	r0, r1
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	d0e5      	beq.n	8000cd2 <__udivmoddi4+0x9a>
 8000d06:	e9c6 4700 	strd	r4, r7, [r6]
 8000d0a:	e7e2      	b.n	8000cd2 <__udivmoddi4+0x9a>
 8000d0c:	b902      	cbnz	r2, 8000d10 <__udivmoddi4+0xd8>
 8000d0e:	deff      	udf	#255	; 0xff
 8000d10:	fab2 f382 	clz	r3, r2
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	f040 809f 	bne.w	8000e58 <__udivmoddi4+0x220>
 8000d1a:	1a8a      	subs	r2, r1, r2
 8000d1c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d20:	fa1f f78c 	uxth.w	r7, ip
 8000d24:	2101      	movs	r1, #1
 8000d26:	fbb2 f5fe 	udiv	r5, r2, lr
 8000d2a:	fb0e 2015 	mls	r0, lr, r5, r2
 8000d2e:	0c22      	lsrs	r2, r4, #16
 8000d30:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d34:	fb07 f005 	mul.w	r0, r7, r5
 8000d38:	4290      	cmp	r0, r2
 8000d3a:	d90f      	bls.n	8000d5c <__udivmoddi4+0x124>
 8000d3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d40:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d44:	bf2c      	ite	cs
 8000d46:	f04f 0901 	movcs.w	r9, #1
 8000d4a:	f04f 0900 	movcc.w	r9, #0
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	d903      	bls.n	8000d5a <__udivmoddi4+0x122>
 8000d52:	f1b9 0f00 	cmp.w	r9, #0
 8000d56:	f000 80ce 	beq.w	8000ef6 <__udivmoddi4+0x2be>
 8000d5a:	4645      	mov	r5, r8
 8000d5c:	1a12      	subs	r2, r2, r0
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d64:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d68:	fb00 f707 	mul.w	r7, r0, r7
 8000d6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x14e>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7c:	d202      	bcs.n	8000d84 <__udivmoddi4+0x14c>
 8000d7e:	42a7      	cmp	r7, r4
 8000d80:	f200 80b3 	bhi.w	8000eea <__udivmoddi4+0x2b2>
 8000d84:	4610      	mov	r0, r2
 8000d86:	1be4      	subs	r4, r4, r7
 8000d88:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d8c:	e79c      	b.n	8000cc8 <__udivmoddi4+0x90>
 8000d8e:	f1c1 0420 	rsb	r4, r1, #32
 8000d92:	408b      	lsls	r3, r1
 8000d94:	fa05 fc01 	lsl.w	ip, r5, r1
 8000d98:	fa22 f704 	lsr.w	r7, r2, r4
 8000d9c:	40e5      	lsrs	r5, r4
 8000d9e:	408a      	lsls	r2, r1
 8000da0:	431f      	orrs	r7, r3
 8000da2:	fa20 f304 	lsr.w	r3, r0, r4
 8000da6:	4088      	lsls	r0, r1
 8000da8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000dac:	ea43 030c 	orr.w	r3, r3, ip
 8000db0:	fa1f fc87 	uxth.w	ip, r7
 8000db4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000db8:	fbb5 fef8 	udiv	lr, r5, r8
 8000dbc:	fb08 551e 	mls	r5, r8, lr, r5
 8000dc0:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000dc4:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc8:	45a9      	cmp	r9, r5
 8000dca:	d90e      	bls.n	8000dea <__udivmoddi4+0x1b2>
 8000dcc:	197d      	adds	r5, r7, r5
 8000dce:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dd2:	bf2c      	ite	cs
 8000dd4:	f04f 0b01 	movcs.w	fp, #1
 8000dd8:	f04f 0b00 	movcc.w	fp, #0
 8000ddc:	45a9      	cmp	r9, r5
 8000dde:	d903      	bls.n	8000de8 <__udivmoddi4+0x1b0>
 8000de0:	f1bb 0f00 	cmp.w	fp, #0
 8000de4:	f000 808d 	beq.w	8000f02 <__udivmoddi4+0x2ca>
 8000de8:	46d6      	mov	lr, sl
 8000dea:	eba5 0509 	sub.w	r5, r5, r9
 8000dee:	fa1f f983 	uxth.w	r9, r3
 8000df2:	fbb5 f3f8 	udiv	r3, r5, r8
 8000df6:	fb08 5513 	mls	r5, r8, r3, r5
 8000dfa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dfe:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000e02:	45ac      	cmp	ip, r5
 8000e04:	d906      	bls.n	8000e14 <__udivmoddi4+0x1dc>
 8000e06:	197d      	adds	r5, r7, r5
 8000e08:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e0c:	d201      	bcs.n	8000e12 <__udivmoddi4+0x1da>
 8000e0e:	45ac      	cmp	ip, r5
 8000e10:	d87e      	bhi.n	8000f10 <__udivmoddi4+0x2d8>
 8000e12:	4643      	mov	r3, r8
 8000e14:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000e18:	eba5 050c 	sub.w	r5, r5, ip
 8000e1c:	fba3 9802 	umull	r9, r8, r3, r2
 8000e20:	4545      	cmp	r5, r8
 8000e22:	46ce      	mov	lr, r9
 8000e24:	46c4      	mov	ip, r8
 8000e26:	d302      	bcc.n	8000e2e <__udivmoddi4+0x1f6>
 8000e28:	d106      	bne.n	8000e38 <__udivmoddi4+0x200>
 8000e2a:	4548      	cmp	r0, r9
 8000e2c:	d204      	bcs.n	8000e38 <__udivmoddi4+0x200>
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e34:	eb68 0c07 	sbc.w	ip, r8, r7
 8000e38:	2e00      	cmp	r6, #0
 8000e3a:	d06f      	beq.n	8000f1c <__udivmoddi4+0x2e4>
 8000e3c:	ebb0 020e 	subs.w	r2, r0, lr
 8000e40:	eb65 050c 	sbc.w	r5, r5, ip
 8000e44:	40ca      	lsrs	r2, r1
 8000e46:	fa05 f404 	lsl.w	r4, r5, r4
 8000e4a:	40cd      	lsrs	r5, r1
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	4314      	orrs	r4, r2
 8000e50:	2100      	movs	r1, #0
 8000e52:	e9c6 4500 	strd	r4, r5, [r6]
 8000e56:	e73c      	b.n	8000cd2 <__udivmoddi4+0x9a>
 8000e58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e5c:	f1c3 0220 	rsb	r2, r3, #32
 8000e60:	4099      	lsls	r1, r3
 8000e62:	409c      	lsls	r4, r3
 8000e64:	40d5      	lsrs	r5, r2
 8000e66:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6e:	fa1f f78c 	uxth.w	r7, ip
 8000e72:	fbb5 f0fe 	udiv	r0, r5, lr
 8000e76:	430a      	orrs	r2, r1
 8000e78:	fb0e 5510 	mls	r5, lr, r0, r5
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e82:	fb00 f507 	mul.w	r5, r0, r7
 8000e86:	428d      	cmp	r5, r1
 8000e88:	d90e      	bls.n	8000ea8 <__udivmoddi4+0x270>
 8000e8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e92:	bf2c      	ite	cs
 8000e94:	f04f 0901 	movcs.w	r9, #1
 8000e98:	f04f 0900 	movcc.w	r9, #0
 8000e9c:	428d      	cmp	r5, r1
 8000e9e:	d902      	bls.n	8000ea6 <__udivmoddi4+0x26e>
 8000ea0:	f1b9 0f00 	cmp.w	r9, #0
 8000ea4:	d031      	beq.n	8000f0a <__udivmoddi4+0x2d2>
 8000ea6:	4640      	mov	r0, r8
 8000ea8:	1b49      	subs	r1, r1, r5
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	fbb1 f5fe 	udiv	r5, r1, lr
 8000eb0:	fb0e 1115 	mls	r1, lr, r5, r1
 8000eb4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb8:	fb05 f107 	mul.w	r1, r5, r7
 8000ebc:	4291      	cmp	r1, r2
 8000ebe:	d907      	bls.n	8000ed0 <__udivmoddi4+0x298>
 8000ec0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ec4:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ec8:	d201      	bcs.n	8000ece <__udivmoddi4+0x296>
 8000eca:	4291      	cmp	r1, r2
 8000ecc:	d823      	bhi.n	8000f16 <__udivmoddi4+0x2de>
 8000ece:	4645      	mov	r5, r8
 8000ed0:	1a52      	subs	r2, r2, r1
 8000ed2:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ed6:	e726      	b.n	8000d26 <__udivmoddi4+0xee>
 8000ed8:	4631      	mov	r1, r6
 8000eda:	4630      	mov	r0, r6
 8000edc:	e6f9      	b.n	8000cd2 <__udivmoddi4+0x9a>
 8000ede:	1a84      	subs	r4, r0, r2
 8000ee0:	eb65 0203 	sbc.w	r2, r5, r3
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	4617      	mov	r7, r2
 8000ee8:	e70b      	b.n	8000d02 <__udivmoddi4+0xca>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e74a      	b.n	8000d86 <__udivmoddi4+0x14e>
 8000ef0:	4464      	add	r4, ip
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	e6e4      	b.n	8000cc0 <__udivmoddi4+0x88>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	e72f      	b.n	8000d5c <__udivmoddi4+0x124>
 8000efc:	3902      	subs	r1, #2
 8000efe:	4462      	add	r2, ip
 8000f00:	e6c9      	b.n	8000c96 <__udivmoddi4+0x5e>
 8000f02:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f06:	443d      	add	r5, r7
 8000f08:	e76f      	b.n	8000dea <__udivmoddi4+0x1b2>
 8000f0a:	3802      	subs	r0, #2
 8000f0c:	4461      	add	r1, ip
 8000f0e:	e7cb      	b.n	8000ea8 <__udivmoddi4+0x270>
 8000f10:	3b02      	subs	r3, #2
 8000f12:	443d      	add	r5, r7
 8000f14:	e77e      	b.n	8000e14 <__udivmoddi4+0x1dc>
 8000f16:	3d02      	subs	r5, #2
 8000f18:	4462      	add	r2, ip
 8000f1a:	e7d9      	b.n	8000ed0 <__udivmoddi4+0x298>
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e6d7      	b.n	8000cd2 <__udivmoddi4+0x9a>
 8000f22:	bf00      	nop

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <Pack_measurements_1_jlb>:
}

#else

uint32_t Pack_measurements_1_jlb(measurements_1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_1_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8000f36:	2300      	movs	r3, #0
 8000f38:	75fb      	strb	r3, [r7, #23]
 8000f3a:	e007      	b.n	8000f4c <Pack_measurements_1_jlb+0x24>
 8000f3c:	7dfb      	ldrb	r3, [r7, #23]
 8000f3e:	1c5a      	adds	r2, r3, #1
 8000f40:	75fa      	strb	r2, [r7, #23]
 8000f42:	461a      	mov	r2, r3
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	4413      	add	r3, r2
 8000f48:	2200      	movs	r2, #0
 8000f4a:	701a      	strb	r2, [r3, #0]
 8000f4c:	7dfb      	ldrb	r3, [r7, #23]
 8000f4e:	2b07      	cmp	r3, #7
 8000f50:	d9f4      	bls.n	8000f3c <Pack_measurements_1_jlb+0x14>

  _d[0] |= (uint8_t) ( (_m->line_sensor_1 & (0x03U)) | ((_m->line_sensor_2 & (0x03U)) << 2U) | ((_m->line_sensor_3 & (0x03U)) << 4U) | ((_m->line_sensor_4 & (0x03U)) << 6U) );
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	781a      	ldrb	r2, [r3, #0]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	b2d9      	uxtb	r1, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	785b      	ldrb	r3, [r3, #1]
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	f003 030c 	and.w	r3, r3, #12
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	430b      	orrs	r3, r1
 8000f70:	b2d9      	uxtb	r1, r3
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	789b      	ldrb	r3, [r3, #2]
 8000f76:	011b      	lsls	r3, r3, #4
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	430b      	orrs	r3, r1
 8000f82:	b2d9      	uxtb	r1, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	78db      	ldrb	r3, [r3, #3]
 8000f88:	019b      	lsls	r3, r3, #6
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	430b      	orrs	r3, r1
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	4313      	orrs	r3, r2
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( (_m->line_sensor_5 & (0x03U)) | ((_m->line_sensor_6 & (0x03U)) << 2U) | ((_m->line_sensor_7 & (0x03U)) << 4U) | ((_m->line_sensor_8 & (0x03U)) << 6U) );
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	7819      	ldrb	r1, [r3, #0]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	791b      	ldrb	r3, [r3, #4]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	795b      	ldrb	r3, [r3, #5]
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	f003 030c 	and.w	r3, r3, #12
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	799b      	ldrb	r3, [r3, #6]
 8000fbe:	011b      	lsls	r3, r3, #4
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	79db      	ldrb	r3, [r3, #7]
 8000fd0:	019b      	lsls	r3, r3, #6
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->line_sensor_9 & (0x03U)) | ((_m->line_sensor_10 & (0x03U)) << 2U) | ((_m->line_sensor_11 & (0x03U)) << 4U) | ((_m->line_sensor_12 & (0x03U)) << 6U) );
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	7819      	ldrb	r1, [r3, #0]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	7a1b      	ldrb	r3, [r3, #8]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	7a5b      	ldrb	r3, [r3, #9]
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	f003 030c 	and.w	r3, r3, #12
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	4313      	orrs	r3, r2
 8001002:	b2da      	uxtb	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	7a9b      	ldrb	r3, [r3, #10]
 8001008:	011b      	lsls	r3, r3, #4
 800100a:	b2db      	uxtb	r3, r3
 800100c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001010:	b2db      	uxtb	r3, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	b2da      	uxtb	r2, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	7adb      	ldrb	r3, [r3, #11]
 800101a:	019b      	lsls	r3, r3, #6
 800101c:	b2db      	uxtb	r3, r3
 800101e:	4313      	orrs	r3, r2
 8001020:	b2da      	uxtb	r2, r3
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	3302      	adds	r3, #2
 8001026:	430a      	orrs	r2, r1
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( (_m->line_sensor_13 & (0x03U)) | ((_m->line_sensor_14 & (0x03U)) << 2U) | ((_m->line_sensor_15 & (0x03U)) << 4U) | ((_m->line_sensor_16 & (0x03U)) << 6U) );
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	3303      	adds	r3, #3
 8001030:	7819      	ldrb	r1, [r3, #0]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	7b1b      	ldrb	r3, [r3, #12]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	b2da      	uxtb	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	7b5b      	ldrb	r3, [r3, #13]
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	b2db      	uxtb	r3, r3
 8001044:	f003 030c 	and.w	r3, r3, #12
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4313      	orrs	r3, r2
 800104c:	b2da      	uxtb	r2, r3
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	7b9b      	ldrb	r3, [r3, #14]
 8001052:	011b      	lsls	r3, r3, #4
 8001054:	b2db      	uxtb	r3, r3
 8001056:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800105a:	b2db      	uxtb	r3, r3
 800105c:	4313      	orrs	r3, r2
 800105e:	b2da      	uxtb	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	7bdb      	ldrb	r3, [r3, #15]
 8001064:	019b      	lsls	r3, r3, #6
 8001066:	b2db      	uxtb	r3, r3
 8001068:	4313      	orrs	r3, r2
 800106a:	b2da      	uxtb	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	3303      	adds	r3, #3
 8001070:	430a      	orrs	r2, r1
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->line_sensor_17 & (0x03U)) | ((_m->line_sensor_18 & (0x03U)) << 2U) | ((_m->line_sensor_19 & (0x03U)) << 4U) | ((_m->line_sensor_20 & (0x03U)) << 6U) );
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	3304      	adds	r3, #4
 800107a:	7819      	ldrb	r1, [r3, #0]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	7c1b      	ldrb	r3, [r3, #16]
 8001080:	f003 0303 	and.w	r3, r3, #3
 8001084:	b2da      	uxtb	r2, r3
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	7c5b      	ldrb	r3, [r3, #17]
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	b2db      	uxtb	r3, r3
 800108e:	f003 030c 	and.w	r3, r3, #12
 8001092:	b2db      	uxtb	r3, r3
 8001094:	4313      	orrs	r3, r2
 8001096:	b2da      	uxtb	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	7c9b      	ldrb	r3, [r3, #18]
 800109c:	011b      	lsls	r3, r3, #4
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	4313      	orrs	r3, r2
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	7cdb      	ldrb	r3, [r3, #19]
 80010ae:	019b      	lsls	r3, r3, #6
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	3304      	adds	r3, #4
 80010ba:	430a      	orrs	r2, r1
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( (_m->line_sensor_21 & (0x03U)) | ((_m->line_sensor_22 & (0x03U)) << 2U) | ((_m->line_sensor_23 & (0x03U)) << 4U) | ((_m->line_sensor_24 & (0x03U)) << 6U) );
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	3305      	adds	r3, #5
 80010c4:	7819      	ldrb	r1, [r3, #0]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	7d1b      	ldrb	r3, [r3, #20]
 80010ca:	f003 0303 	and.w	r3, r3, #3
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	7d5b      	ldrb	r3, [r3, #21]
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	f003 030c 	and.w	r3, r3, #12
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	4313      	orrs	r3, r2
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	7d9b      	ldrb	r3, [r3, #22]
 80010e6:	011b      	lsls	r3, r3, #4
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	7ddb      	ldrb	r3, [r3, #23]
 80010f8:	019b      	lsls	r3, r3, #6
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	4313      	orrs	r3, r2
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	3305      	adds	r3, #5
 8001104:	430a      	orrs	r2, r1
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->line_sensor_25 & (0x03U)) | ((_m->line_sensor_26 & (0x03U)) << 2U) | ((_m->line_sensor_27 & (0x03U)) << 4U) | ((_m->line_sensor_28 & (0x03U)) << 6U) );
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	3306      	adds	r3, #6
 800110e:	7819      	ldrb	r1, [r3, #0]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	7e1b      	ldrb	r3, [r3, #24]
 8001114:	f003 0303 	and.w	r3, r3, #3
 8001118:	b2da      	uxtb	r2, r3
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	7e5b      	ldrb	r3, [r3, #25]
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	b2db      	uxtb	r3, r3
 8001122:	f003 030c 	and.w	r3, r3, #12
 8001126:	b2db      	uxtb	r3, r3
 8001128:	4313      	orrs	r3, r2
 800112a:	b2da      	uxtb	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	7e9b      	ldrb	r3, [r3, #26]
 8001130:	011b      	lsls	r3, r3, #4
 8001132:	b2db      	uxtb	r3, r3
 8001134:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001138:	b2db      	uxtb	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b2da      	uxtb	r2, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	7edb      	ldrb	r3, [r3, #27]
 8001142:	019b      	lsls	r3, r3, #6
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4313      	orrs	r3, r2
 8001148:	b2da      	uxtb	r2, r3
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	3306      	adds	r3, #6
 800114e:	430a      	orrs	r2, r1
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( (_m->line_sensor_29 & (0x03U)) | ((_m->line_sensor_30 & (0x03U)) << 2U) | ((_m->line_sensor_31 & (0x03U)) << 4U) | ((_m->line_sensor_32 & (0x03U)) << 6U) );
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	3307      	adds	r3, #7
 8001158:	7819      	ldrb	r1, [r3, #0]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	7f1b      	ldrb	r3, [r3, #28]
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	b2da      	uxtb	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	7f5b      	ldrb	r3, [r3, #29]
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	b2db      	uxtb	r3, r3
 800116c:	f003 030c 	and.w	r3, r3, #12
 8001170:	b2db      	uxtb	r3, r3
 8001172:	4313      	orrs	r3, r2
 8001174:	b2da      	uxtb	r2, r3
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	7f9b      	ldrb	r3, [r3, #30]
 800117a:	011b      	lsls	r3, r3, #4
 800117c:	b2db      	uxtb	r3, r3
 800117e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001182:	b2db      	uxtb	r3, r3
 8001184:	4313      	orrs	r3, r2
 8001186:	b2da      	uxtb	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	7fdb      	ldrb	r3, [r3, #31]
 800118c:	019b      	lsls	r3, r3, #6
 800118e:	b2db      	uxtb	r3, r3
 8001190:	4313      	orrs	r3, r2
 8001192:	b2da      	uxtb	r2, r3
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	3307      	adds	r3, #7
 8001198:	430a      	orrs	r2, r1
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_1_DLC;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2208      	movs	r2, #8
 80011a2:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_1_IDE;
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
  return measurements_1_CANID;
 80011aa:	2301      	movs	r3, #1
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	371c      	adds	r7, #28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <Pack_measurements_2_jlb>:
}

#else

uint32_t Pack_measurements_2_jlb(measurements_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b087      	sub	sp, #28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
 80011c4:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_2_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 80011c6:	2300      	movs	r3, #0
 80011c8:	75fb      	strb	r3, [r7, #23]
 80011ca:	e007      	b.n	80011dc <Pack_measurements_2_jlb+0x24>
 80011cc:	7dfb      	ldrb	r3, [r7, #23]
 80011ce:	1c5a      	adds	r2, r3, #1
 80011d0:	75fa      	strb	r2, [r7, #23]
 80011d2:	461a      	mov	r2, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	4413      	add	r3, r2
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
 80011dc:	7dfb      	ldrb	r3, [r7, #23]
 80011de:	2b07      	cmp	r3, #7
 80011e0:	d9f4      	bls.n	80011cc <Pack_measurements_2_jlb+0x14>

  _d[0] |= (uint8_t) ( (_m->line_sensor_1 & (0x03U)) | ((_m->line_sensor_2 & (0x03U)) << 2U) | ((_m->line_sensor_3 & (0x03U)) << 4U) | ((_m->line_sensor_4 & (0x03U)) << 6U) );
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	781a      	ldrb	r2, [r3, #0]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	b2d9      	uxtb	r1, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	785b      	ldrb	r3, [r3, #1]
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	f003 030c 	and.w	r3, r3, #12
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	430b      	orrs	r3, r1
 8001200:	b2d9      	uxtb	r1, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	789b      	ldrb	r3, [r3, #2]
 8001206:	011b      	lsls	r3, r3, #4
 8001208:	b2db      	uxtb	r3, r3
 800120a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800120e:	b2db      	uxtb	r3, r3
 8001210:	430b      	orrs	r3, r1
 8001212:	b2d9      	uxtb	r1, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	78db      	ldrb	r3, [r3, #3]
 8001218:	019b      	lsls	r3, r3, #6
 800121a:	b2db      	uxtb	r3, r3
 800121c:	430b      	orrs	r3, r1
 800121e:	b2db      	uxtb	r3, r3
 8001220:	4313      	orrs	r3, r2
 8001222:	b2da      	uxtb	r2, r3
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( (_m->line_sensor_5 & (0x03U)) | ((_m->line_sensor_6 & (0x03U)) << 2U) | ((_m->line_sensor_7 & (0x03U)) << 4U) | ((_m->line_sensor_8 & (0x03U)) << 6U) );
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	3301      	adds	r3, #1
 800122c:	7819      	ldrb	r1, [r3, #0]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	791b      	ldrb	r3, [r3, #4]
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	b2da      	uxtb	r2, r3
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	795b      	ldrb	r3, [r3, #5]
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f003 030c 	and.w	r3, r3, #12
 8001244:	b2db      	uxtb	r3, r3
 8001246:	4313      	orrs	r3, r2
 8001248:	b2da      	uxtb	r2, r3
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	799b      	ldrb	r3, [r3, #6]
 800124e:	011b      	lsls	r3, r3, #4
 8001250:	b2db      	uxtb	r3, r3
 8001252:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001256:	b2db      	uxtb	r3, r3
 8001258:	4313      	orrs	r3, r2
 800125a:	b2da      	uxtb	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	79db      	ldrb	r3, [r3, #7]
 8001260:	019b      	lsls	r3, r3, #6
 8001262:	b2db      	uxtb	r3, r3
 8001264:	4313      	orrs	r3, r2
 8001266:	b2da      	uxtb	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	3301      	adds	r3, #1
 800126c:	430a      	orrs	r2, r1
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->line_sensor_9 & (0x03U)) | ((_m->line_sensor_10 & (0x03U)) << 2U) | ((_m->line_sensor_11 & (0x03U)) << 4U) | ((_m->line_sensor_12 & (0x03U)) << 6U) );
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	3302      	adds	r3, #2
 8001276:	7819      	ldrb	r1, [r3, #0]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	7a1b      	ldrb	r3, [r3, #8]
 800127c:	f003 0303 	and.w	r3, r3, #3
 8001280:	b2da      	uxtb	r2, r3
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	7a5b      	ldrb	r3, [r3, #9]
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	b2db      	uxtb	r3, r3
 800128a:	f003 030c 	and.w	r3, r3, #12
 800128e:	b2db      	uxtb	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	b2da      	uxtb	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	7a9b      	ldrb	r3, [r3, #10]
 8001298:	011b      	lsls	r3, r3, #4
 800129a:	b2db      	uxtb	r3, r3
 800129c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	4313      	orrs	r3, r2
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	7adb      	ldrb	r3, [r3, #11]
 80012aa:	019b      	lsls	r3, r3, #6
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	4313      	orrs	r3, r2
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	3302      	adds	r3, #2
 80012b6:	430a      	orrs	r2, r1
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( (_m->line_sensor_13 & (0x03U)) | ((_m->line_sensor_14 & (0x03U)) << 2U) | ((_m->line_sensor_15 & (0x03U)) << 4U) | ((_m->line_sensor_16 & (0x03U)) << 6U) );
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	3303      	adds	r3, #3
 80012c0:	7819      	ldrb	r1, [r3, #0]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	7b1b      	ldrb	r3, [r3, #12]
 80012c6:	f003 0303 	and.w	r3, r3, #3
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	7b5b      	ldrb	r3, [r3, #13]
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	f003 030c 	and.w	r3, r3, #12
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	4313      	orrs	r3, r2
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	7b9b      	ldrb	r3, [r3, #14]
 80012e2:	011b      	lsls	r3, r3, #4
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	7bdb      	ldrb	r3, [r3, #15]
 80012f4:	019b      	lsls	r3, r3, #6
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	3303      	adds	r3, #3
 8001300:	430a      	orrs	r2, r1
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->line_sensor_17 & (0x03U)) | ((_m->line_sensor_18 & (0x03U)) << 2U) | ((_m->line_sensor_19 & (0x03U)) << 4U) | ((_m->line_sensor_20 & (0x03U)) << 6U) );
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	3304      	adds	r3, #4
 800130a:	7819      	ldrb	r1, [r3, #0]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	7c1b      	ldrb	r3, [r3, #16]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	b2da      	uxtb	r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	7c5b      	ldrb	r3, [r3, #17]
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	b2db      	uxtb	r3, r3
 800131e:	f003 030c 	and.w	r3, r3, #12
 8001322:	b2db      	uxtb	r3, r3
 8001324:	4313      	orrs	r3, r2
 8001326:	b2da      	uxtb	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	7c9b      	ldrb	r3, [r3, #18]
 800132c:	011b      	lsls	r3, r3, #4
 800132e:	b2db      	uxtb	r3, r3
 8001330:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001334:	b2db      	uxtb	r3, r3
 8001336:	4313      	orrs	r3, r2
 8001338:	b2da      	uxtb	r2, r3
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	7cdb      	ldrb	r3, [r3, #19]
 800133e:	019b      	lsls	r3, r3, #6
 8001340:	b2db      	uxtb	r3, r3
 8001342:	4313      	orrs	r3, r2
 8001344:	b2da      	uxtb	r2, r3
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	3304      	adds	r3, #4
 800134a:	430a      	orrs	r2, r1
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( (_m->line_sensor_21 & (0x03U)) | ((_m->line_sensor_22 & (0x03U)) << 2U) | ((_m->line_sensor_23 & (0x03U)) << 4U) | ((_m->line_sensor_24 & (0x03U)) << 6U) );
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	3305      	adds	r3, #5
 8001354:	7819      	ldrb	r1, [r3, #0]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	7d1b      	ldrb	r3, [r3, #20]
 800135a:	f003 0303 	and.w	r3, r3, #3
 800135e:	b2da      	uxtb	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	7d5b      	ldrb	r3, [r3, #21]
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	b2db      	uxtb	r3, r3
 8001368:	f003 030c 	and.w	r3, r3, #12
 800136c:	b2db      	uxtb	r3, r3
 800136e:	4313      	orrs	r3, r2
 8001370:	b2da      	uxtb	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	7d9b      	ldrb	r3, [r3, #22]
 8001376:	011b      	lsls	r3, r3, #4
 8001378:	b2db      	uxtb	r3, r3
 800137a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800137e:	b2db      	uxtb	r3, r3
 8001380:	4313      	orrs	r3, r2
 8001382:	b2da      	uxtb	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	7ddb      	ldrb	r3, [r3, #23]
 8001388:	019b      	lsls	r3, r3, #6
 800138a:	b2db      	uxtb	r3, r3
 800138c:	4313      	orrs	r3, r2
 800138e:	b2da      	uxtb	r2, r3
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	3305      	adds	r3, #5
 8001394:	430a      	orrs	r2, r1
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->line_sensor_25 & (0x03U)) | ((_m->line_sensor_26 & (0x03U)) << 2U) | ((_m->line_sensor_27 & (0x03U)) << 4U) | ((_m->line_sensor_28 & (0x03U)) << 6U) );
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	3306      	adds	r3, #6
 800139e:	7819      	ldrb	r1, [r3, #0]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	7e1b      	ldrb	r3, [r3, #24]
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	7e5b      	ldrb	r3, [r3, #25]
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	4313      	orrs	r3, r2
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	7e9b      	ldrb	r3, [r3, #26]
 80013c0:	011b      	lsls	r3, r3, #4
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	7edb      	ldrb	r3, [r3, #27]
 80013d2:	019b      	lsls	r3, r3, #6
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	4313      	orrs	r3, r2
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	3306      	adds	r3, #6
 80013de:	430a      	orrs	r2, r1
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( (_m->line_sensor_29 & (0x03U)) | ((_m->line_sensor_30 & (0x03U)) << 2U) | ((_m->line_sensor_31 & (0x03U)) << 4U) | ((_m->line_sensor_32 & (0x03U)) << 6U) );
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	3307      	adds	r3, #7
 80013e8:	7819      	ldrb	r1, [r3, #0]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	7f1b      	ldrb	r3, [r3, #28]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	7f5b      	ldrb	r3, [r3, #29]
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	f003 030c 	and.w	r3, r3, #12
 8001400:	b2db      	uxtb	r3, r3
 8001402:	4313      	orrs	r3, r2
 8001404:	b2da      	uxtb	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	7f9b      	ldrb	r3, [r3, #30]
 800140a:	011b      	lsls	r3, r3, #4
 800140c:	b2db      	uxtb	r3, r3
 800140e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001412:	b2db      	uxtb	r3, r3
 8001414:	4313      	orrs	r3, r2
 8001416:	b2da      	uxtb	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	7fdb      	ldrb	r3, [r3, #31]
 800141c:	019b      	lsls	r3, r3, #6
 800141e:	b2db      	uxtb	r3, r3
 8001420:	4313      	orrs	r3, r2
 8001422:	b2da      	uxtb	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	3307      	adds	r3, #7
 8001428:	430a      	orrs	r2, r1
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_2_DLC;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2208      	movs	r2, #8
 8001432:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_2_IDE;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
  return measurements_2_CANID;
 800143a:	2302      	movs	r3, #2
}
 800143c:	4618      	mov	r0, r3
 800143e:	371c      	adds	r7, #28
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <Pack_measurements_3_jlb>:
}

#else

uint32_t Pack_measurements_3_jlb(measurements_3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_3_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8001456:	2300      	movs	r3, #0
 8001458:	75fb      	strb	r3, [r7, #23]
 800145a:	e007      	b.n	800146c <Pack_measurements_3_jlb+0x24>
 800145c:	7dfb      	ldrb	r3, [r7, #23]
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	75fa      	strb	r2, [r7, #23]
 8001462:	461a      	mov	r2, r3
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	4413      	add	r3, r2
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]
 800146c:	7dfb      	ldrb	r3, [r7, #23]
 800146e:	2b07      	cmp	r3, #7
 8001470:	d9f4      	bls.n	800145c <Pack_measurements_3_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->angular_velocity_x_ro = (uint16_t) JLB_angular_velocity_x_ro_toS(_m->angular_velocity_x_phys);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001478:	a34f      	add	r3, pc, #316	; (adr r3, 80015b8 <Pack_measurements_3_jlb+0x170>)
 800147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147e:	f7fe feed 	bl	800025c <__adddf3>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4610      	mov	r0, r2
 8001488:	4619      	mov	r1, r3
 800148a:	a34d      	add	r3, pc, #308	; (adr r3, 80015c0 <Pack_measurements_3_jlb+0x178>)
 800148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001490:	f7ff f9c4 	bl	800081c <__aeabi_ddiv>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4610      	mov	r0, r2
 800149a:	4619      	mov	r1, r3
 800149c:	f7ff fb44 	bl	8000b28 <__aeabi_d2uiz>
 80014a0:	4603      	mov	r3, r0
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	801a      	strh	r2, [r3, #0]
  _m->angular_velocity_y_ro = (uint16_t) JLB_angular_velocity_y_ro_toS(_m->angular_velocity_y_phys);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80014ae:	a342      	add	r3, pc, #264	; (adr r3, 80015b8 <Pack_measurements_3_jlb+0x170>)
 80014b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b4:	f7fe fed2 	bl	800025c <__adddf3>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4610      	mov	r0, r2
 80014be:	4619      	mov	r1, r3
 80014c0:	a33f      	add	r3, pc, #252	; (adr r3, 80015c0 <Pack_measurements_3_jlb+0x178>)
 80014c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c6:	f7ff f9a9 	bl	800081c <__aeabi_ddiv>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	f7ff fb29 	bl	8000b28 <__aeabi_d2uiz>
 80014d6:	4603      	mov	r3, r0
 80014d8:	b29a      	uxth	r2, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	821a      	strh	r2, [r3, #16]
  _m->angular_velocity_z_ro = (uint16_t) JLB_angular_velocity_z_ro_toS(_m->angular_velocity_z_phys);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80014e4:	a334      	add	r3, pc, #208	; (adr r3, 80015b8 <Pack_measurements_3_jlb+0x170>)
 80014e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ea:	f7fe feb7 	bl	800025c <__adddf3>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4610      	mov	r0, r2
 80014f4:	4619      	mov	r1, r3
 80014f6:	a332      	add	r3, pc, #200	; (adr r3, 80015c0 <Pack_measurements_3_jlb+0x178>)
 80014f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fc:	f7ff f98e 	bl	800081c <__aeabi_ddiv>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4610      	mov	r0, r2
 8001506:	4619      	mov	r1, r3
 8001508:	f7ff fb0e 	bl	8000b28 <__aeabi_d2uiz>
 800150c:	4603      	mov	r3, r0
 800150e:	b29a      	uxth	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	841a      	strh	r2, [r3, #32]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->angular_velocity_x_ro & (0xFFU)) );
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	781a      	ldrb	r2, [r3, #0]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	4313      	orrs	r3, r2
 8001520:	b2da      	uxtb	r2, r3
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->angular_velocity_x_ro >> 8U) & (0xFFU)) );
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	3301      	adds	r3, #1
 800152a:	7819      	ldrb	r1, [r3, #0]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	b29b      	uxth	r3, r3
 8001534:	b2da      	uxtb	r2, r3
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	3301      	adds	r3, #1
 800153a:	430a      	orrs	r2, r1
 800153c:	b2d2      	uxtb	r2, r2
 800153e:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->angular_velocity_y_ro & (0xFFU)) );
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	3302      	adds	r3, #2
 8001544:	7819      	ldrb	r1, [r3, #0]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	8a1b      	ldrh	r3, [r3, #16]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	3302      	adds	r3, #2
 8001550:	430a      	orrs	r2, r1
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->angular_velocity_y_ro >> 8U) & (0xFFU)) );
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	3303      	adds	r3, #3
 800155a:	7819      	ldrb	r1, [r3, #0]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	8a1b      	ldrh	r3, [r3, #16]
 8001560:	0a1b      	lsrs	r3, r3, #8
 8001562:	b29b      	uxth	r3, r3
 8001564:	b2da      	uxtb	r2, r3
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	3303      	adds	r3, #3
 800156a:	430a      	orrs	r2, r1
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->angular_velocity_z_ro & (0xFFU)) );
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	3304      	adds	r3, #4
 8001574:	7819      	ldrb	r1, [r3, #0]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	8c1b      	ldrh	r3, [r3, #32]
 800157a:	b2da      	uxtb	r2, r3
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	3304      	adds	r3, #4
 8001580:	430a      	orrs	r2, r1
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->angular_velocity_z_ro >> 8U) & (0xFFU)) );
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	3305      	adds	r3, #5
 800158a:	7819      	ldrb	r1, [r3, #0]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	8c1b      	ldrh	r3, [r3, #32]
 8001590:	0a1b      	lsrs	r3, r3, #8
 8001592:	b29b      	uxth	r3, r3
 8001594:	b2da      	uxtb	r2, r3
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	3305      	adds	r3, #5
 800159a:	430a      	orrs	r2, r1
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_3_DLC;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2208      	movs	r2, #8
 80015a4:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_3_IDE;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
  return measurements_3_CANID;
 80015ac:	2303      	movs	r3, #3
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	b4395810 	.word	0xb4395810
 80015bc:	401a36c8 	.word	0x401a36c8
 80015c0:	eb1c432d 	.word	0xeb1c432d
 80015c4:	3f2a36e2 	.word	0x3f2a36e2

080015c8 <Pack_measurements_4_jlb>:
}

#else

uint32_t Pack_measurements_4_jlb(measurements_4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
 80015d4:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_4_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 80015d6:	2300      	movs	r3, #0
 80015d8:	75fb      	strb	r3, [r7, #23]
 80015da:	e007      	b.n	80015ec <Pack_measurements_4_jlb+0x24>
 80015dc:	7dfb      	ldrb	r3, [r7, #23]
 80015de:	1c5a      	adds	r2, r3, #1
 80015e0:	75fa      	strb	r2, [r7, #23]
 80015e2:	461a      	mov	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	4413      	add	r3, r2
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
 80015ec:	7dfb      	ldrb	r3, [r7, #23]
 80015ee:	2b07      	cmp	r3, #7
 80015f0:	d9f4      	bls.n	80015dc <Pack_measurements_4_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->linear_acceleration_x_ro = (uint16_t) JLB_linear_acceleration_x_ro_toS(_m->linear_acceleration_x_phys);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80015f8:	a34f      	add	r3, pc, #316	; (adr r3, 8001738 <Pack_measurements_4_jlb+0x170>)
 80015fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fe:	f7fe fe2d 	bl	800025c <__adddf3>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4610      	mov	r0, r2
 8001608:	4619      	mov	r1, r3
 800160a:	a34d      	add	r3, pc, #308	; (adr r3, 8001740 <Pack_measurements_4_jlb+0x178>)
 800160c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001610:	f7ff f904 	bl	800081c <__aeabi_ddiv>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4610      	mov	r0, r2
 800161a:	4619      	mov	r1, r3
 800161c:	f7ff fa84 	bl	8000b28 <__aeabi_d2uiz>
 8001620:	4603      	mov	r3, r0
 8001622:	b29a      	uxth	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	801a      	strh	r2, [r3, #0]
  _m->linear_acceleration_y_ro = (uint16_t) JLB_linear_acceleration_y_ro_toS(_m->linear_acceleration_y_phys);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800162e:	a342      	add	r3, pc, #264	; (adr r3, 8001738 <Pack_measurements_4_jlb+0x170>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	f7fe fe12 	bl	800025c <__adddf3>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4610      	mov	r0, r2
 800163e:	4619      	mov	r1, r3
 8001640:	a33f      	add	r3, pc, #252	; (adr r3, 8001740 <Pack_measurements_4_jlb+0x178>)
 8001642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001646:	f7ff f8e9 	bl	800081c <__aeabi_ddiv>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	f7ff fa69 	bl	8000b28 <__aeabi_d2uiz>
 8001656:	4603      	mov	r3, r0
 8001658:	b29a      	uxth	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	821a      	strh	r2, [r3, #16]
  _m->linear_acceleration_z_ro = (uint16_t) JLB_linear_acceleration_z_ro_toS(_m->linear_acceleration_z_phys);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001664:	a334      	add	r3, pc, #208	; (adr r3, 8001738 <Pack_measurements_4_jlb+0x170>)
 8001666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166a:	f7fe fdf7 	bl	800025c <__adddf3>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	a332      	add	r3, pc, #200	; (adr r3, 8001740 <Pack_measurements_4_jlb+0x178>)
 8001678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167c:	f7ff f8ce 	bl	800081c <__aeabi_ddiv>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4610      	mov	r0, r2
 8001686:	4619      	mov	r1, r3
 8001688:	f7ff fa4e 	bl	8000b28 <__aeabi_d2uiz>
 800168c:	4603      	mov	r3, r0
 800168e:	b29a      	uxth	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	841a      	strh	r2, [r3, #32]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->linear_acceleration_x_ro & (0xFFU)) );
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	781a      	ldrb	r2, [r3, #0]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	4313      	orrs	r3, r2
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->linear_acceleration_x_ro >> 8U) & (0xFFU)) );
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	3301      	adds	r3, #1
 80016aa:	7819      	ldrb	r1, [r3, #0]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	0a1b      	lsrs	r3, r3, #8
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	3301      	adds	r3, #1
 80016ba:	430a      	orrs	r2, r1
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->linear_acceleration_y_ro & (0xFFU)) );
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	3302      	adds	r3, #2
 80016c4:	7819      	ldrb	r1, [r3, #0]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	8a1b      	ldrh	r3, [r3, #16]
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	3302      	adds	r3, #2
 80016d0:	430a      	orrs	r2, r1
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->linear_acceleration_y_ro >> 8U) & (0xFFU)) );
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	3303      	adds	r3, #3
 80016da:	7819      	ldrb	r1, [r3, #0]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	8a1b      	ldrh	r3, [r3, #16]
 80016e0:	0a1b      	lsrs	r3, r3, #8
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	3303      	adds	r3, #3
 80016ea:	430a      	orrs	r2, r1
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->linear_acceleration_z_ro & (0xFFU)) );
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	3304      	adds	r3, #4
 80016f4:	7819      	ldrb	r1, [r3, #0]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	8c1b      	ldrh	r3, [r3, #32]
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	3304      	adds	r3, #4
 8001700:	430a      	orrs	r2, r1
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->linear_acceleration_z_ro >> 8U) & (0xFFU)) );
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	3305      	adds	r3, #5
 800170a:	7819      	ldrb	r1, [r3, #0]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8c1b      	ldrh	r3, [r3, #32]
 8001710:	0a1b      	lsrs	r3, r3, #8
 8001712:	b29b      	uxth	r3, r3
 8001714:	b2da      	uxtb	r2, r3
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	3305      	adds	r3, #5
 800171a:	430a      	orrs	r2, r1
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_4_DLC;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2208      	movs	r2, #8
 8001724:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_4_IDE;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
  return measurements_4_CANID;
 800172c:	2304      	movs	r3, #4
}
 800172e:	4618      	mov	r0, r3
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	70a3d70a 	.word	0x70a3d70a
 800173c:	4030623d 	.word	0x4030623d
 8001740:	d2f1a9fc 	.word	0xd2f1a9fc
 8001744:	3f40624d 	.word	0x3f40624d

08001748 <Pack_measurements_5_jlb>:
}

#else

uint32_t Pack_measurements_5_jlb(measurements_5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
 8001754:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_5_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8001756:	2300      	movs	r3, #0
 8001758:	75fb      	strb	r3, [r7, #23]
 800175a:	e007      	b.n	800176c <Pack_measurements_5_jlb+0x24>
 800175c:	7dfb      	ldrb	r3, [r7, #23]
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	75fa      	strb	r2, [r7, #23]
 8001762:	461a      	mov	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	4413      	add	r3, r2
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
 800176c:	7dfb      	ldrb	r3, [r7, #23]
 800176e:	2b07      	cmp	r3, #7
 8001770:	d9f4      	bls.n	800175c <Pack_measurements_5_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->wheel_rpm_ro = (uint16_t) JLB_wheel_rpm_ro_toS(_m->wheel_rpm_phys);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001778:	a35b      	add	r3, pc, #364	; (adr r3, 80018e8 <Pack_measurements_5_jlb+0x1a0>)
 800177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177e:	f7fe fd6d 	bl	800025c <__adddf3>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4610      	mov	r0, r2
 8001788:	4619      	mov	r1, r3
 800178a:	a359      	add	r3, pc, #356	; (adr r3, 80018f0 <Pack_measurements_5_jlb+0x1a8>)
 800178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001790:	f7ff f844 	bl	800081c <__aeabi_ddiv>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	f7ff f9c4 	bl	8000b28 <__aeabi_d2uiz>
 80017a0:	4603      	mov	r3, r0
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	801a      	strh	r2, [r3, #0]
  _m->object_range_ro = (uint16_t) JLB_object_range_ro_toS(_m->object_range_phys);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80017ae:	a352      	add	r3, pc, #328	; (adr r3, 80018f8 <Pack_measurements_5_jlb+0x1b0>)
 80017b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b4:	f7ff f832 	bl	800081c <__aeabi_ddiv>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4610      	mov	r0, r2
 80017be:	4619      	mov	r1, r3
 80017c0:	f7ff f9b2 	bl	8000b28 <__aeabi_d2uiz>
 80017c4:	4603      	mov	r3, r0
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	821a      	strh	r2, [r3, #16]
  _m->motor_current_ro = (uint16_t) JLB_motor_current_ro_toS(_m->motor_current_phys);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80017d2:	a34b      	add	r3, pc, #300	; (adr r3, 8001900 <Pack_measurements_5_jlb+0x1b8>)
 80017d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d8:	f7ff f820 	bl	800081c <__aeabi_ddiv>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4610      	mov	r0, r2
 80017e2:	4619      	mov	r1, r3
 80017e4:	f7ff f9a0 	bl	8000b28 <__aeabi_d2uiz>
 80017e8:	4603      	mov	r3, r0
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	841a      	strh	r2, [r3, #32]
  _m->duty_cycle_ro = (uint16_t) JLB_duty_cycle_ro_toS(_m->duty_cycle_phys);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80017f6:	a344      	add	r3, pc, #272	; (adr r3, 8001908 <Pack_measurements_5_jlb+0x1c0>)
 80017f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fc:	f7ff f80e 	bl	800081c <__aeabi_ddiv>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f7ff f98e 	bl	8000b28 <__aeabi_d2uiz>
 800180c:	4603      	mov	r3, r0
 800180e:	b29a      	uxth	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	861a      	strh	r2, [r3, #48]	; 0x30
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->wheel_rpm_ro & (0xFFU)) );
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	781a      	ldrb	r2, [r3, #0]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	4313      	orrs	r3, r2
 8001820:	b2da      	uxtb	r2, r3
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->wheel_rpm_ro >> 8U) & (0xFFU)) );
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	3301      	adds	r3, #1
 800182a:	7819      	ldrb	r1, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	b29b      	uxth	r3, r3
 8001834:	b2da      	uxtb	r2, r3
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	3301      	adds	r3, #1
 800183a:	430a      	orrs	r2, r1
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->object_range_ro & (0xFFU)) );
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	3302      	adds	r3, #2
 8001844:	7819      	ldrb	r1, [r3, #0]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8a1b      	ldrh	r3, [r3, #16]
 800184a:	b2da      	uxtb	r2, r3
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	3302      	adds	r3, #2
 8001850:	430a      	orrs	r2, r1
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->object_range_ro >> 8U) & (0xFFU)) );
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	3303      	adds	r3, #3
 800185a:	7819      	ldrb	r1, [r3, #0]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	8a1b      	ldrh	r3, [r3, #16]
 8001860:	0a1b      	lsrs	r3, r3, #8
 8001862:	b29b      	uxth	r3, r3
 8001864:	b2da      	uxtb	r2, r3
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	3303      	adds	r3, #3
 800186a:	430a      	orrs	r2, r1
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->motor_current_ro & (0xFFU)) );
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	3304      	adds	r3, #4
 8001874:	7819      	ldrb	r1, [r3, #0]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	8c1b      	ldrh	r3, [r3, #32]
 800187a:	b2da      	uxtb	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	3304      	adds	r3, #4
 8001880:	430a      	orrs	r2, r1
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->motor_current_ro >> 8U) & (0xFFU)) );
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	3305      	adds	r3, #5
 800188a:	7819      	ldrb	r1, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8c1b      	ldrh	r3, [r3, #32]
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	b29b      	uxth	r3, r3
 8001894:	b2da      	uxtb	r2, r3
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	3305      	adds	r3, #5
 800189a:	430a      	orrs	r2, r1
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->duty_cycle_ro & (0xFFU)) );
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	3306      	adds	r3, #6
 80018a4:	7819      	ldrb	r1, [r3, #0]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	3306      	adds	r3, #6
 80018b0:	430a      	orrs	r2, r1
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( ((_m->duty_cycle_ro >> 8U) & (0xFFU)) );
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	3307      	adds	r3, #7
 80018ba:	7819      	ldrb	r1, [r3, #0]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	3307      	adds	r3, #7
 80018ca:	430a      	orrs	r2, r1
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_5_DLC;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2208      	movs	r2, #8
 80018d4:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_5_IDE;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
  return measurements_5_CANID;
 80018dc:	2305      	movs	r3, #5
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	00000000 	.word	0x00000000
 80018ec:	40a99980 	.word	0x40a99980
 80018f0:	9999999a 	.word	0x9999999a
 80018f4:	3fb99999 	.word	0x3fb99999
 80018f8:	eb1c432d 	.word	0xeb1c432d
 80018fc:	3f1a36e2 	.word	0x3f1a36e2
 8001900:	d2f1a9fc 	.word	0xd2f1a9fc
 8001904:	3f50624d 	.word	0x3f50624d
 8001908:	d7c6fbd2 	.word	0xd7c6fbd2
 800190c:	3ef2599e 	.word	0x3ef2599e

08001910 <Pack_odometry_1_jlb>:
}

#else

uint32_t Pack_odometry_1_jlb(odometry_1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(odometry_1_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 800191e:	2300      	movs	r3, #0
 8001920:	75fb      	strb	r3, [r7, #23]
 8001922:	e007      	b.n	8001934 <Pack_odometry_1_jlb+0x24>
 8001924:	7dfb      	ldrb	r3, [r7, #23]
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	75fa      	strb	r2, [r7, #23]
 800192a:	461a      	mov	r2, r3
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	4413      	add	r3, r2
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
 8001934:	7dfb      	ldrb	r3, [r7, #23]
 8001936:	2b07      	cmp	r3, #7
 8001938:	d9f4      	bls.n	8001924 <Pack_odometry_1_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->orientation_ro = (uint16_t) JLB_orientation_ro_toS(_m->orientation_phys);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001940:	a34f      	add	r3, pc, #316	; (adr r3, 8001a80 <Pack_odometry_1_jlb+0x170>)
 8001942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001946:	f7fe fc89 	bl	800025c <__adddf3>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4610      	mov	r0, r2
 8001950:	4619      	mov	r1, r3
 8001952:	a34d      	add	r3, pc, #308	; (adr r3, 8001a88 <Pack_odometry_1_jlb+0x178>)
 8001954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001958:	f7fe ff60 	bl	800081c <__aeabi_ddiv>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4610      	mov	r0, r2
 8001962:	4619      	mov	r1, r3
 8001964:	f7ff f8e0 	bl	8000b28 <__aeabi_d2uiz>
 8001968:	4603      	mov	r3, r0
 800196a:	b29a      	uxth	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	801a      	strh	r2, [r3, #0]
  _m->position_x_ro = (uint16_t) JLB_position_x_ro_toS(_m->position_x_phys);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001976:	a346      	add	r3, pc, #280	; (adr r3, 8001a90 <Pack_odometry_1_jlb+0x180>)
 8001978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197c:	f7fe fc6e 	bl	800025c <__adddf3>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	a343      	add	r3, pc, #268	; (adr r3, 8001a98 <Pack_odometry_1_jlb+0x188>)
 800198a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198e:	f7fe ff45 	bl	800081c <__aeabi_ddiv>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4610      	mov	r0, r2
 8001998:	4619      	mov	r1, r3
 800199a:	f7ff f8c5 	bl	8000b28 <__aeabi_d2uiz>
 800199e:	4603      	mov	r3, r0
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	821a      	strh	r2, [r3, #16]
  _m->position_y_ro = (uint16_t) JLB_position_y_ro_toS(_m->position_y_phys);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80019ac:	a338      	add	r3, pc, #224	; (adr r3, 8001a90 <Pack_odometry_1_jlb+0x180>)
 80019ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b2:	f7fe fc53 	bl	800025c <__adddf3>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	a336      	add	r3, pc, #216	; (adr r3, 8001a98 <Pack_odometry_1_jlb+0x188>)
 80019c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c4:	f7fe ff2a 	bl	800081c <__aeabi_ddiv>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4610      	mov	r0, r2
 80019ce:	4619      	mov	r1, r3
 80019d0:	f7ff f8aa 	bl	8000b28 <__aeabi_d2uiz>
 80019d4:	4603      	mov	r3, r0
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	841a      	strh	r2, [r3, #32]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->orientation_ro & (0xFFU)) );
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	781a      	ldrb	r2, [r3, #0]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	4313      	orrs	r3, r2
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->orientation_ro >> 8U) & (0xFFU)) );
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	3301      	adds	r3, #1
 80019f2:	7819      	ldrb	r1, [r3, #0]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	0a1b      	lsrs	r3, r3, #8
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	3301      	adds	r3, #1
 8001a02:	430a      	orrs	r2, r1
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->position_x_ro & (0xFFU)) );
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	3302      	adds	r3, #2
 8001a0c:	7819      	ldrb	r1, [r3, #0]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	8a1b      	ldrh	r3, [r3, #16]
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	3302      	adds	r3, #2
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->position_x_ro >> 8U) & (0xFFU)) );
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	3303      	adds	r3, #3
 8001a22:	7819      	ldrb	r1, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8a1b      	ldrh	r3, [r3, #16]
 8001a28:	0a1b      	lsrs	r3, r3, #8
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	3303      	adds	r3, #3
 8001a32:	430a      	orrs	r2, r1
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->position_y_ro & (0xFFU)) );
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	7819      	ldrb	r1, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	8c1b      	ldrh	r3, [r3, #32]
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	3304      	adds	r3, #4
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->position_y_ro >> 8U) & (0xFFU)) );
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	3305      	adds	r3, #5
 8001a52:	7819      	ldrb	r1, [r3, #0]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8c1b      	ldrh	r3, [r3, #32]
 8001a58:	0a1b      	lsrs	r3, r3, #8
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	3305      	adds	r3, #5
 8001a62:	430a      	orrs	r2, r1
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) odometry_1_DLC;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2208      	movs	r2, #8
 8001a6c:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) odometry_1_IDE;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]
  return odometry_1_CANID;
 8001a74:	2311      	movs	r3, #17
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	b4395810 	.word	0xb4395810
 8001a84:	401a36c8 	.word	0x401a36c8
 8001a88:	eb1c432d 	.word	0xeb1c432d
 8001a8c:	3f2a36e2 	.word	0x3f2a36e2
 8001a90:	70a3d70a 	.word	0x70a3d70a
 8001a94:	4030623d 	.word	0x4030623d
 8001a98:	d2f1a9fc 	.word	0xd2f1a9fc
 8001a9c:	3f40624d 	.word	0x3f40624d

08001aa0 <Pack_odometry_2_jlb>:
}

#else

uint32_t Pack_odometry_2_jlb(odometry_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
 8001aac:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(odometry_2_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8001aae:	2300      	movs	r3, #0
 8001ab0:	75fb      	strb	r3, [r7, #23]
 8001ab2:	e007      	b.n	8001ac4 <Pack_odometry_2_jlb+0x24>
 8001ab4:	7dfb      	ldrb	r3, [r7, #23]
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	75fa      	strb	r2, [r7, #23]
 8001aba:	461a      	mov	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	4413      	add	r3, r2
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
 8001ac4:	7dfb      	ldrb	r3, [r7, #23]
 8001ac6:	2b07      	cmp	r3, #7
 8001ac8:	d9f4      	bls.n	8001ab4 <Pack_odometry_2_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->angular_velocity_z_ro = (uint16_t) JLB_angular_velocity_z_ro_toS(_m->angular_velocity_z_phys);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ad0:	a335      	add	r3, pc, #212	; (adr r3, 8001ba8 <Pack_odometry_2_jlb+0x108>)
 8001ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad6:	f7fe fbc1 	bl	800025c <__adddf3>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	a333      	add	r3, pc, #204	; (adr r3, 8001bb0 <Pack_odometry_2_jlb+0x110>)
 8001ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae8:	f7fe fe98 	bl	800081c <__aeabi_ddiv>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	f7ff f818 	bl	8000b28 <__aeabi_d2uiz>
 8001af8:	4603      	mov	r3, r0
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	801a      	strh	r2, [r3, #0]
  _m->linear_velocity_x_ro = (uint16_t) JLB_linear_velocity_x_ro_toS(_m->linear_velocity_x_phys);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001b06:	a32c      	add	r3, pc, #176	; (adr r3, 8001bb8 <Pack_odometry_2_jlb+0x118>)
 8001b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0c:	f7fe fba6 	bl	800025c <__adddf3>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	a329      	add	r3, pc, #164	; (adr r3, 8001bc0 <Pack_odometry_2_jlb+0x120>)
 8001b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1e:	f7fe fe7d 	bl	800081c <__aeabi_ddiv>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4610      	mov	r0, r2
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f7fe fffd 	bl	8000b28 <__aeabi_d2uiz>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	821a      	strh	r2, [r3, #16]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->angular_velocity_z_ro & (0xFFU)) );
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	781a      	ldrb	r2, [r3, #0]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	4313      	orrs	r3, r2
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->angular_velocity_z_ro >> 8U) & (0xFFU)) );
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	7819      	ldrb	r1, [r3, #0]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	0a1b      	lsrs	r3, r3, #8
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->linear_velocity_x_ro & (0xFFU)) );
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	3302      	adds	r3, #2
 8001b66:	7819      	ldrb	r1, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8a1b      	ldrh	r3, [r3, #16]
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	3302      	adds	r3, #2
 8001b72:	430a      	orrs	r2, r1
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->linear_velocity_x_ro >> 8U) & (0xFFU)) );
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	3303      	adds	r3, #3
 8001b7c:	7819      	ldrb	r1, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8a1b      	ldrh	r3, [r3, #16]
 8001b82:	0a1b      	lsrs	r3, r3, #8
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	3303      	adds	r3, #3
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) odometry_2_DLC;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2208      	movs	r2, #8
 8001b96:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) odometry_2_IDE;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
  return odometry_2_CANID;
 8001b9e:	2312      	movs	r3, #18
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	b4395810 	.word	0xb4395810
 8001bac:	401a36c8 	.word	0x401a36c8
 8001bb0:	eb1c432d 	.word	0xeb1c432d
 8001bb4:	3f2a36e2 	.word	0x3f2a36e2
 8001bb8:	70a3d70a 	.word	0x70a3d70a
 8001bbc:	4030623d 	.word	0x4030623d
 8001bc0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001bc4:	3f40624d 	.word	0x3f40624d

08001bc8 <Pack_logic_1_jlb>:
}

#else

uint32_t Pack_logic_1_jlb(logic_1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
 8001bd4:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(logic_1_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	75fb      	strb	r3, [r7, #23]
 8001bda:	e007      	b.n	8001bec <Pack_logic_1_jlb+0x24>
 8001bdc:	7dfb      	ldrb	r3, [r7, #23]
 8001bde:	1c5a      	adds	r2, r3, #1
 8001be0:	75fa      	strb	r2, [r7, #23]
 8001be2:	461a      	mov	r2, r3
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	4413      	add	r3, r2
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]
 8001bec:	7dfb      	ldrb	r3, [r7, #23]
 8001bee:	2b07      	cmp	r3, #7
 8001bf0:	d9f4      	bls.n	8001bdc <Pack_logic_1_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->target_angle_ro = (uint16_t) JLB_target_angle_ro_toS(_m->target_angle_phys);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001bf8:	a369      	add	r3, pc, #420	; (adr r3, 8001da0 <Pack_logic_1_jlb+0x1d8>)
 8001bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfe:	f7fe fb2d 	bl	800025c <__adddf3>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4610      	mov	r0, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	a367      	add	r3, pc, #412	; (adr r3, 8001da8 <Pack_logic_1_jlb+0x1e0>)
 8001c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c10:	f7fe fe04 	bl	800081c <__aeabi_ddiv>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f7fe ff84 	bl	8000b28 <__aeabi_d2uiz>
 8001c20:	4603      	mov	r3, r0
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	801a      	strh	r2, [r3, #0]
  _m->target_speed_ro = (uint16_t) JLB_target_speed_ro_toS(_m->target_speed_phys);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001c2e:	a360      	add	r3, pc, #384	; (adr r3, 8001db0 <Pack_logic_1_jlb+0x1e8>)
 8001c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c34:	f7fe fb12 	bl	800025c <__adddf3>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	4619      	mov	r1, r3
 8001c40:	a35d      	add	r3, pc, #372	; (adr r3, 8001db8 <Pack_logic_1_jlb+0x1f0>)
 8001c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c46:	f7fe fde9 	bl	800081c <__aeabi_ddiv>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	f7fe ff69 	bl	8000b28 <__aeabi_d2uiz>
 8001c56:	4603      	mov	r3, r0
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	821a      	strh	r2, [r3, #16]
  _m->cross_track_error_ro = (uint16_t) JLB_cross_track_error_ro_toS(_m->cross_track_error_phys);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001c64:	a34e      	add	r3, pc, #312	; (adr r3, 8001da0 <Pack_logic_1_jlb+0x1d8>)
 8001c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6a:	f7fe faf7 	bl	800025c <__adddf3>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	a34c      	add	r3, pc, #304	; (adr r3, 8001da8 <Pack_logic_1_jlb+0x1e0>)
 8001c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7c:	f7fe fdce 	bl	800081c <__aeabi_ddiv>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4610      	mov	r0, r2
 8001c86:	4619      	mov	r1, r3
 8001c88:	f7fe ff4e 	bl	8000b28 <__aeabi_d2uiz>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	841a      	strh	r2, [r3, #32]
  _m->heading_error_ro = (uint16_t) JLB_heading_error_ro_toS(_m->heading_error_phys);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001c9a:	a349      	add	r3, pc, #292	; (adr r3, 8001dc0 <Pack_logic_1_jlb+0x1f8>)
 8001c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca0:	f7fe fadc 	bl	800025c <__adddf3>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4619      	mov	r1, r3
 8001cac:	a346      	add	r3, pc, #280	; (adr r3, 8001dc8 <Pack_logic_1_jlb+0x200>)
 8001cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb2:	f7fe fdb3 	bl	800081c <__aeabi_ddiv>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4610      	mov	r0, r2
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f7fe ff33 	bl	8000b28 <__aeabi_d2uiz>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	861a      	strh	r2, [r3, #48]	; 0x30
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->target_angle_ro & (0xFFU)) );
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	781a      	ldrb	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->target_angle_ro >> 8U) & (0xFFU)) );
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	7819      	ldrb	r1, [r3, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	0a1b      	lsrs	r3, r3, #8
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->target_speed_ro & (0xFFU)) );
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	3302      	adds	r3, #2
 8001cfa:	7819      	ldrb	r1, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8a1b      	ldrh	r3, [r3, #16]
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	3302      	adds	r3, #2
 8001d06:	430a      	orrs	r2, r1
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->target_speed_ro >> 8U) & (0xFFU)) );
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	3303      	adds	r3, #3
 8001d10:	7819      	ldrb	r1, [r3, #0]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	8a1b      	ldrh	r3, [r3, #16]
 8001d16:	0a1b      	lsrs	r3, r3, #8
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	3303      	adds	r3, #3
 8001d20:	430a      	orrs	r2, r1
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->cross_track_error_ro & (0xFFU)) );
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	7819      	ldrb	r1, [r3, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8c1b      	ldrh	r3, [r3, #32]
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	3304      	adds	r3, #4
 8001d36:	430a      	orrs	r2, r1
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->cross_track_error_ro >> 8U) & (0xFFU)) );
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	3305      	adds	r3, #5
 8001d40:	7819      	ldrb	r1, [r3, #0]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8c1b      	ldrh	r3, [r3, #32]
 8001d46:	0a1b      	lsrs	r3, r3, #8
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	3305      	adds	r3, #5
 8001d50:	430a      	orrs	r2, r1
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->heading_error_ro & (0xFFU)) );
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	3306      	adds	r3, #6
 8001d5a:	7819      	ldrb	r1, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	3306      	adds	r3, #6
 8001d66:	430a      	orrs	r2, r1
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( ((_m->heading_error_ro >> 8U) & (0xFFU)) );
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	3307      	adds	r3, #7
 8001d70:	7819      	ldrb	r1, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001d76:	0a1b      	lsrs	r3, r3, #8
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	3307      	adds	r3, #7
 8001d80:	430a      	orrs	r2, r1
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) logic_1_DLC;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2208      	movs	r2, #8
 8001d8a:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) logic_1_IDE;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]
  return logic_1_CANID;
 8001d92:	2321      	movs	r3, #33	; 0x21
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	f3af 8000 	nop.w
 8001da0:	b4395810 	.word	0xb4395810
 8001da4:	400a36c8 	.word	0x400a36c8
 8001da8:	eb1c432d 	.word	0xeb1c432d
 8001dac:	3f1a36e2 	.word	0x3f1a36e2
 8001db0:	70a3d70a 	.word	0x70a3d70a
 8001db4:	4030623d 	.word	0x4030623d
 8001db8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001dbc:	3f40624d 	.word	0x3f40624d
 8001dc0:	b4395810 	.word	0xb4395810
 8001dc4:	3ffa36c8 	.word	0x3ffa36c8
 8001dc8:	eb1c432d 	.word	0xeb1c432d
 8001dcc:	3f0a36e2 	.word	0x3f0a36e2

08001dd0 <Pack_logic_2_jlb>:
}

#else

uint32_t Pack_logic_2_jlb(logic_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
 8001ddc:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(logic_2_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8001dde:	2300      	movs	r3, #0
 8001de0:	75fb      	strb	r3, [r7, #23]
 8001de2:	e007      	b.n	8001df4 <Pack_logic_2_jlb+0x24>
 8001de4:	7dfb      	ldrb	r3, [r7, #23]
 8001de6:	1c5a      	adds	r2, r3, #1
 8001de8:	75fa      	strb	r2, [r7, #23]
 8001dea:	461a      	mov	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	4413      	add	r3, r2
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
 8001df4:	7dfb      	ldrb	r3, [r7, #23]
 8001df6:	2b07      	cmp	r3, #7
 8001df8:	d9f4      	bls.n	8001de4 <Pack_logic_2_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->distance_traveled_ro = (uint16_t) JLB_distance_traveled_ro_toS(_m->distance_traveled_phys);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001e00:	a335      	add	r3, pc, #212	; (adr r3, 8001ed8 <Pack_logic_2_jlb+0x108>)
 8001e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e06:	f7fe fd09 	bl	800081c <__aeabi_ddiv>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4610      	mov	r0, r2
 8001e10:	4619      	mov	r1, r3
 8001e12:	f7fe fe89 	bl	8000b28 <__aeabi_d2uiz>
 8001e16:	4603      	mov	r3, r0
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	80da      	strh	r2, [r3, #6]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->direction & (0xFFU)) );
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	781a      	ldrb	r2, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( (_m->mission & (0xFFU)) );
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	3301      	adds	r3, #1
 8001e32:	7819      	ldrb	r1, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	785a      	ldrb	r2, [r3, #1]
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->fast_state & (0xFFU)) );
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	3302      	adds	r3, #2
 8001e46:	7819      	ldrb	r1, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	789a      	ldrb	r2, [r3, #2]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	3302      	adds	r3, #2
 8001e50:	430a      	orrs	r2, r1
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( (_m->labyrinth_state & (0xFFU)) );
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	3303      	adds	r3, #3
 8001e5a:	7819      	ldrb	r1, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	78da      	ldrb	r2, [r3, #3]
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	3303      	adds	r3, #3
 8001e64:	430a      	orrs	r2, r1
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->next_node & (0xFFU)) );
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	7819      	ldrb	r1, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	791a      	ldrb	r2, [r3, #4]
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	3304      	adds	r3, #4
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( (_m->previous_node & (0xFFU)) );
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	3305      	adds	r3, #5
 8001e82:	7819      	ldrb	r1, [r3, #0]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	795a      	ldrb	r2, [r3, #5]
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	3305      	adds	r3, #5
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->distance_traveled_ro & (0xFFU)) );
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	3306      	adds	r3, #6
 8001e96:	7819      	ldrb	r1, [r3, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	88db      	ldrh	r3, [r3, #6]
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	3306      	adds	r3, #6
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( ((_m->distance_traveled_ro >> 8U) & (0xFFU)) );
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	3307      	adds	r3, #7
 8001eac:	7819      	ldrb	r1, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	88db      	ldrh	r3, [r3, #6]
 8001eb2:	0a1b      	lsrs	r3, r3, #8
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	3307      	adds	r3, #7
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) logic_2_DLC;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2208      	movs	r2, #8
 8001ec6:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) logic_2_IDE;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]
  return logic_2_CANID;
 8001ece:	2322      	movs	r3, #34	; 0x22
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	47ae147b 	.word	0x47ae147b
 8001edc:	3f847ae1 	.word	0x3f847ae1

08001ee0 <Pack_logic_3_jlb>:
}

#else

uint32_t Pack_logic_3_jlb(logic_3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
 8001eec:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(logic_3_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8001eee:	2300      	movs	r3, #0
 8001ef0:	75fb      	strb	r3, [r7, #23]
 8001ef2:	e007      	b.n	8001f04 <Pack_logic_3_jlb+0x24>
 8001ef4:	7dfb      	ldrb	r3, [r7, #23]
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	75fa      	strb	r2, [r7, #23]
 8001efa:	461a      	mov	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	4413      	add	r3, r2
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
 8001f04:	7dfb      	ldrb	r3, [r7, #23]
 8001f06:	2b07      	cmp	r3, #7
 8001f08:	d9f4      	bls.n	8001ef4 <Pack_logic_3_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->ang_error_norm_ro = (uint8_t) JLB_ang_error_norm_ro_toS(_m->ang_error_norm_phys);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f10:	a35d      	add	r3, pc, #372	; (adr r3, 8002088 <Pack_logic_3_jlb+0x1a8>)
 8001f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f16:	f7fe fc81 	bl	800081c <__aeabi_ddiv>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4610      	mov	r0, r2
 8001f20:	4619      	mov	r1, r3
 8001f22:	f7fe fe01 	bl	8000b28 <__aeabi_d2uiz>
 8001f26:	4603      	mov	r3, r0
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	701a      	strb	r2, [r3, #0]
  _m->dist_error_norm_ro = (uint8_t) JLB_dist_error_norm_ro_toS(_m->dist_error_norm_phys);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001f34:	a354      	add	r3, pc, #336	; (adr r3, 8002088 <Pack_logic_3_jlb+0x1a8>)
 8001f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3a:	f7fe fc6f 	bl	800081c <__aeabi_ddiv>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4610      	mov	r0, r2
 8001f44:	4619      	mov	r1, r3
 8001f46:	f7fe fdef 	bl	8000b28 <__aeabi_d2uiz>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	741a      	strb	r2, [r3, #16]
  _m->line_position_front_ro = (uint16_t) JLB_line_position_front_ro_toS(_m->line_position_front_phys);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001f58:	a34d      	add	r3, pc, #308	; (adr r3, 8002090 <Pack_logic_3_jlb+0x1b0>)
 8001f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5e:	f7fe f97d 	bl	800025c <__adddf3>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4610      	mov	r0, r2
 8001f68:	4619      	mov	r1, r3
 8001f6a:	a34b      	add	r3, pc, #300	; (adr r3, 8002098 <Pack_logic_3_jlb+0x1b8>)
 8001f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f70:	f7fe fc54 	bl	800081c <__aeabi_ddiv>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	f7fe fdd4 	bl	8000b28 <__aeabi_d2uiz>
 8001f80:	4603      	mov	r3, r0
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	841a      	strh	r2, [r3, #32]
  _m->line_position_rear_ro = (uint16_t) JLB_line_position_rear_ro_toS(_m->line_position_rear_phys);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001f8e:	a340      	add	r3, pc, #256	; (adr r3, 8002090 <Pack_logic_3_jlb+0x1b0>)
 8001f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f94:	f7fe f962 	bl	800025c <__adddf3>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	a33d      	add	r3, pc, #244	; (adr r3, 8002098 <Pack_logic_3_jlb+0x1b8>)
 8001fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa6:	f7fe fc39 	bl	800081c <__aeabi_ddiv>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4610      	mov	r0, r2
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f7fe fdb9 	bl	8000b28 <__aeabi_d2uiz>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	861a      	strh	r2, [r3, #48]	; 0x30
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->ang_error_norm_ro & (0xFFU)) );
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	781a      	ldrb	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( (_m->dist_error_norm_ro & (0xFFU)) );
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	7819      	ldrb	r1, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	7c1a      	ldrb	r2, [r3, #16]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->line_position_front_ro & (0xFFU)) );
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	7819      	ldrb	r1, [r3, #0]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8c1b      	ldrh	r3, [r3, #32]
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	3302      	adds	r3, #2
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->line_position_front_ro >> 8U) & (0xFFU)) );
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	3303      	adds	r3, #3
 8001ffc:	7819      	ldrb	r1, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8c1b      	ldrh	r3, [r3, #32]
 8002002:	0a1b      	lsrs	r3, r3, #8
 8002004:	b29b      	uxth	r3, r3
 8002006:	b2da      	uxtb	r2, r3
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	3303      	adds	r3, #3
 800200c:	430a      	orrs	r2, r1
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->line_position_rear_ro & (0xFFU)) );
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	3304      	adds	r3, #4
 8002016:	7819      	ldrb	r1, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800201c:	b2da      	uxtb	r2, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	3304      	adds	r3, #4
 8002022:	430a      	orrs	r2, r1
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->line_position_rear_ro >> 8U) & (0xFFU)) );
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	3305      	adds	r3, #5
 800202c:	7819      	ldrb	r1, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002032:	0a1b      	lsrs	r3, r3, #8
 8002034:	b29b      	uxth	r3, r3
 8002036:	b2da      	uxtb	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	3305      	adds	r3, #5
 800203c:	430a      	orrs	r2, r1
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->at_cross_section & (0x01U)) | ((_m->under_gate & (0x01U)) << 1U) );
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	3306      	adds	r3, #6
 8002046:	7819      	ldrb	r1, [r3, #0]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	b2da      	uxtb	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	b2db      	uxtb	r3, r3
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	b2db      	uxtb	r3, r3
 8002064:	4313      	orrs	r3, r2
 8002066:	b2da      	uxtb	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	3306      	adds	r3, #6
 800206c:	430a      	orrs	r2, r1
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) logic_3_DLC;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2208      	movs	r2, #8
 8002076:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) logic_3_IDE;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
  return logic_3_CANID;
 800207e:	2323      	movs	r3, #35	; 0x23
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	d2f1a9fc 	.word	0xd2f1a9fc
 800208c:	3f70624d 	.word	0x3f70624d
 8002090:	70a3d70a 	.word	0x70a3d70a
 8002094:	4030623d 	.word	0x4030623d
 8002098:	d2f1a9fc 	.word	0xd2f1a9fc
 800209c:	3f40624d 	.word	0x3f40624d

080020a0 <HAL_ADC_ConvCpltCallback>:
	adc_values.vbus_raw = adc_values_raw[2];
	adc_values.distance_short2_raw = adc_values_raw[5];
	adc_values.distance_short1_raw = adc_values_raw[3];
	adc_values.distance_long1_raw = adc_values_raw[4];
	adc_values.lv_batt_voltage_raw = adc_values_raw[6];
	adc_values.distance_long2_raw = adc_values_raw[7];
 80020a0:	2000      	movs	r0, #0
	adc_values.distance_short1_raw = adc_values_raw[3];
 80020a2:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <HAL_ADC_ConvCpltCallback+0x54>)
{
 80020a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	adc_values.distance_long2_raw = adc_values_raw[7];
 80020a8:	f8d3 c01c 	ldr.w	ip, [r3, #28]
	adc_values.distance_short1_raw = adc_values_raw[3];
 80020ac:	f8d3 900c 	ldr.w	r9, [r3, #12]
	adc_values.lv_batt_voltage_raw = adc_values_raw[6];
 80020b0:	f8d3 e018 	ldr.w	lr, [r3, #24]
	adc_values.motor_batt_voltage_raw = adc_values_raw[0];
 80020b4:	681f      	ldr	r7, [r3, #0]
	adc_values.vbus_raw = adc_values_raw[2];
 80020b6:	689d      	ldr	r5, [r3, #8]
	adc_values.distance_long1_raw = adc_values_raw[4];
 80020b8:	f8d3 8010 	ldr.w	r8, [r3, #16]
	adc_values.motor_curr_raw = adc_values_raw[1];
 80020bc:	685e      	ldr	r6, [r3, #4]
	adc_values.distance_short2_raw = adc_values_raw[5];
 80020be:	695c      	ldr	r4, [r3, #20]
 80020c0:	4603      	mov	r3, r0
	adc_values.motor_batt_voltage_raw = adc_values_raw[0];
 80020c2:	4601      	mov	r1, r0
 80020c4:	4a0c      	ldr	r2, [pc, #48]	; (80020f8 <HAL_ADC_ConvCpltCallback+0x58>)
 80020c6:	f36e 030f 	bfi	r3, lr, #0, #16
 80020ca:	f36c 431f 	bfi	r3, ip, #16, #16
 80020ce:	60d3      	str	r3, [r2, #12]
 80020d0:	460b      	mov	r3, r1
 80020d2:	f369 000f 	bfi	r0, r9, #0, #16
 80020d6:	f367 010f 	bfi	r1, r7, #0, #16
 80020da:	f365 030f 	bfi	r3, r5, #0, #16
 80020de:	f368 401f 	bfi	r0, r8, #16, #16
 80020e2:	f366 411f 	bfi	r1, r6, #16, #16
 80020e6:	f364 431f 	bfi	r3, r4, #16, #16
 80020ea:	6090      	str	r0, [r2, #8]
 80020ec:	6011      	str	r1, [r2, #0]
 80020ee:	6053      	str	r3, [r2, #4]

	//vTaskResume(static_cast<TaskHandle_t>(mainTaskHandle));
}
 80020f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80020f4:	20000130 	.word	0x20000130
 80020f8:	20000120 	.word	0x20000120

080020fc <_Z18DistanceSensorTaskv>:
extern analog_signals_s adc_values;
DistanceSensorData_s distance_sensor = {0u};


void DistanceSensorTask()
{
 80020fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t i,j;
	distance_sensor.voltage_long[0] = ((float)(adc_values.distance_long1_raw)) / 4096.0f * 3.3f;
 8002100:	4ba5      	ldr	r3, [pc, #660]	; (8002398 <_Z18DistanceSensorTaskv+0x29c>)
{
 8002102:	ed2d 8b06 	vpush	{d8-d10}
	distance_sensor.voltage_long[0] = ((float)(adc_values.distance_long1_raw)) / 4096.0f * 3.3f;
 8002106:	895a      	ldrh	r2, [r3, #10]
 8002108:	ed9f 6aa4 	vldr	s12, [pc, #656]	; 800239c <_Z18DistanceSensorTaskv+0x2a0>
 800210c:	ee07 2a90 	vmov	s15, r2
	distance_sensor.voltage_long[1] = ((float)(adc_values.distance_long2_raw)) / 4096.0f * 3.3f;
 8002110:	89da      	ldrh	r2, [r3, #14]
	distance_sensor.voltage_long[0] = ((float)(adc_values.distance_long1_raw)) / 4096.0f * 3.3f;
 8002112:	eef8 7a67 	vcvt.f32.u32	s15, s15
	distance_sensor.voltage_long[1] = ((float)(adc_values.distance_long2_raw)) / 4096.0f * 3.3f;
 8002116:	ee06 2a90 	vmov	s13, r2
	distance_sensor.voltage_short[0] = ((float)(adc_values.distance_short1_raw)) / 4096.0f * 3.3f;
 800211a:	891a      	ldrh	r2, [r3, #8]
	distance_sensor.voltage_short[1] = ((float)(adc_values.distance_short2_raw)) / 4096.0f * 3.3f;
 800211c:	88db      	ldrh	r3, [r3, #6]
	distance_sensor.voltage_short[0] = ((float)(adc_values.distance_short1_raw)) / 4096.0f * 3.3f;
 800211e:	ee08 2a90 	vmov	s17, r2
	distance_sensor.voltage_short[1] = ((float)(adc_values.distance_short2_raw)) / 4096.0f * 3.3f;
 8002122:	ee07 3a10 	vmov	s14, r3
	distance_sensor.voltage_long[1] = ((float)(adc_values.distance_long2_raw)) / 4096.0f * 3.3f;
 8002126:	eef8 6a66 	vcvt.f32.u32	s13, s13
	distance_sensor.voltage_short[0] = ((float)(adc_values.distance_short1_raw)) / 4096.0f * 3.3f;
 800212a:	eef8 8a68 	vcvt.f32.u32	s17, s17
	distance_sensor.voltage_short[1] = ((float)(adc_values.distance_short2_raw)) / 4096.0f * 3.3f;
 800212e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	distance_sensor.voltage_long[0] = ((float)(adc_values.distance_long1_raw)) / 4096.0f * 3.3f;
 8002132:	ee67 7a86 	vmul.f32	s15, s15, s12
	distance_sensor.voltage_short[0] = ((float)(adc_values.distance_short1_raw)) / 4096.0f * 3.3f;
 8002136:	ee68 8a86 	vmul.f32	s17, s17, s12
	distance_sensor.voltage_long[1] = ((float)(adc_values.distance_long2_raw)) / 4096.0f * 3.3f;
 800213a:	ee66 6a86 	vmul.f32	s13, s13, s12
	distance_sensor.voltage_short[1] = ((float)(adc_values.distance_short2_raw)) / 4096.0f * 3.3f;
 800213e:	ee27 7a06 	vmul.f32	s14, s14, s12
	distance_sensor.voltage_long[0] = ((float)(adc_values.distance_long1_raw)) / 4096.0f * 3.3f;
 8002142:	4c97      	ldr	r4, [pc, #604]	; (80023a0 <_Z18DistanceSensorTaskv+0x2a4>)
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8002144:	ee17 0a90 	vmov	r0, s15
	distance_sensor.voltage_long[1] = ((float)(adc_values.distance_long2_raw)) / 4096.0f * 3.3f;
 8002148:	edc4 6a01 	vstr	s13, [r4, #4]
	distance_sensor.voltage_short[1] = ((float)(adc_values.distance_short2_raw)) / 4096.0f * 3.3f;
 800214c:	ed84 7a03 	vstr	s14, [r4, #12]
	distance_sensor.voltage_long[0] = ((float)(adc_values.distance_long1_raw)) / 4096.0f * 3.3f;
 8002150:	edc4 7a00 	vstr	s15, [r4]
	distance_sensor.voltage_short[0] = ((float)(adc_values.distance_short1_raw)) / 4096.0f * 3.3f;
 8002154:	edc4 8a02 	vstr	s17, [r4, #8]
 8002158:	f7fe f9de 	bl	8000518 <__aeabi_f2d>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	ec43 2b19 	vmov	d9, r2, r3
	{
		float x = distance_sensor.voltage_long[i];
		distance_sensor.distance_long[i] = 0.0f;
		for(j = 0; j < 6; ++j)
		{
			distance_sensor.distance_long[i] += pow(x,5-j) * long_poly_coeff[j];
 8002164:	f7fe fa30 	bl	80005c8 <__aeabi_dmul>
 8002168:	4682      	mov	sl, r0
 800216a:	468b      	mov	fp, r1
 800216c:	4652      	mov	r2, sl
 800216e:	465b      	mov	r3, fp
 8002170:	ec51 0b19 	vmov	r0, r1, d9
 8002174:	f7fe fa28 	bl	80005c8 <__aeabi_dmul>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	4e89      	ldr	r6, [pc, #548]	; (80023a4 <_Z18DistanceSensorTaskv+0x2a8>)
 800217e:	ec43 2b1a 	vmov	d10, r2, r3
 8002182:	6870      	ldr	r0, [r6, #4]
 8002184:	f7fe f9c8 	bl	8000518 <__aeabi_f2d>
 8002188:	4652      	mov	r2, sl
 800218a:	4680      	mov	r8, r0
 800218c:	4689      	mov	r9, r1
 800218e:	465b      	mov	r3, fp
 8002190:	4650      	mov	r0, sl
 8002192:	4659      	mov	r1, fp
 8002194:	f7fe fa18 	bl	80005c8 <__aeabi_dmul>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	4640      	mov	r0, r8
 800219e:	4649      	mov	r1, r9
 80021a0:	f7fe fa12 	bl	80005c8 <__aeabi_dmul>
 80021a4:	4680      	mov	r8, r0
 80021a6:	6830      	ldr	r0, [r6, #0]
 80021a8:	4689      	mov	r9, r1
 80021aa:	f7fe f9b5 	bl	8000518 <__aeabi_f2d>
 80021ae:	4652      	mov	r2, sl
 80021b0:	465b      	mov	r3, fp
 80021b2:	f7fe fa09 	bl	80005c8 <__aeabi_dmul>
 80021b6:	ec53 2b1a 	vmov	r2, r3, d10
 80021ba:	f7fe fa05 	bl	80005c8 <__aeabi_dmul>
 80021be:	f7fe fcd3 	bl	8000b68 <__aeabi_d2f>
 80021c2:	f7fe f9a9 	bl	8000518 <__aeabi_f2d>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4640      	mov	r0, r8
 80021cc:	4649      	mov	r1, r9
 80021ce:	f7fe f845 	bl	800025c <__adddf3>
 80021d2:	f7fe fcc9 	bl	8000b68 <__aeabi_d2f>
 80021d6:	f7fe f99f 	bl	8000518 <__aeabi_f2d>
 80021da:	4680      	mov	r8, r0
 80021dc:	68b0      	ldr	r0, [r6, #8]
 80021de:	4689      	mov	r9, r1
 80021e0:	f7fe f99a 	bl	8000518 <__aeabi_f2d>
 80021e4:	ec53 2b1a 	vmov	r2, r3, d10
 80021e8:	f7fe f9ee 	bl	80005c8 <__aeabi_dmul>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4640      	mov	r0, r8
 80021f2:	4649      	mov	r1, r9
 80021f4:	f7fe f832 	bl	800025c <__adddf3>
 80021f8:	f7fe fcb6 	bl	8000b68 <__aeabi_d2f>
 80021fc:	f7fe f98c 	bl	8000518 <__aeabi_f2d>
 8002200:	4680      	mov	r8, r0
 8002202:	68f0      	ldr	r0, [r6, #12]
 8002204:	4689      	mov	r9, r1
 8002206:	f7fe f987 	bl	8000518 <__aeabi_f2d>
 800220a:	4652      	mov	r2, sl
 800220c:	465b      	mov	r3, fp
 800220e:	f7fe f9db 	bl	80005c8 <__aeabi_dmul>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4640      	mov	r0, r8
 8002218:	4649      	mov	r1, r9
 800221a:	f7fe f81f 	bl	800025c <__adddf3>
 800221e:	f7fe fca3 	bl	8000b68 <__aeabi_d2f>
 8002222:	f7fe f979 	bl	8000518 <__aeabi_f2d>
 8002226:	4680      	mov	r8, r0
 8002228:	6930      	ldr	r0, [r6, #16]
 800222a:	4689      	mov	r9, r1
 800222c:	f7fe f974 	bl	8000518 <__aeabi_f2d>
 8002230:	ec53 2b19 	vmov	r2, r3, d9
 8002234:	f7fe f9c8 	bl	80005c8 <__aeabi_dmul>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4640      	mov	r0, r8
 800223e:	4649      	mov	r1, r9
 8002240:	f7fe f80c 	bl	800025c <__adddf3>
 8002244:	f7fe fc90 	bl	8000b68 <__aeabi_d2f>
 8002248:	edd6 7a05 	vldr	s15, [r6, #20]
 800224c:	ee08 0a10 	vmov	s16, r0
 8002250:	ee38 8a27 	vadd.f32	s16, s16, s15
 8002254:	ee18 0a90 	vmov	r0, s17
 8002258:	ed84 8a04 	vstr	s16, [r4, #16]
 800225c:	f7fe f95c 	bl	8000518 <__aeabi_f2d>

		distance_sensor.distance_short[i] = 0.0f;
		x = distance_sensor.voltage_short[i];
		for(j = 0; j < 6; ++j)
		{
			distance_sensor.distance_short[i] += pow(x,5-j) * short_poly_coeff[j];
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	4682      	mov	sl, r0
 8002266:	468b      	mov	fp, r1
 8002268:	f7fe f9ae 	bl	80005c8 <__aeabi_dmul>
 800226c:	4606      	mov	r6, r0
 800226e:	460f      	mov	r7, r1
 8002270:	4632      	mov	r2, r6
 8002272:	463b      	mov	r3, r7
 8002274:	4650      	mov	r0, sl
 8002276:	4659      	mov	r1, fp
 8002278:	f7fe f9a6 	bl	80005c8 <__aeabi_dmul>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4d49      	ldr	r5, [pc, #292]	; (80023a8 <_Z18DistanceSensorTaskv+0x2ac>)
 8002282:	ec43 2b19 	vmov	d9, r2, r3
 8002286:	6868      	ldr	r0, [r5, #4]
 8002288:	f7fe f946 	bl	8000518 <__aeabi_f2d>
 800228c:	4632      	mov	r2, r6
 800228e:	4680      	mov	r8, r0
 8002290:	4689      	mov	r9, r1
 8002292:	463b      	mov	r3, r7
 8002294:	4630      	mov	r0, r6
 8002296:	4639      	mov	r1, r7
 8002298:	f7fe f996 	bl	80005c8 <__aeabi_dmul>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4640      	mov	r0, r8
 80022a2:	4649      	mov	r1, r9
 80022a4:	f7fe f990 	bl	80005c8 <__aeabi_dmul>
 80022a8:	4680      	mov	r8, r0
 80022aa:	6828      	ldr	r0, [r5, #0]
 80022ac:	4689      	mov	r9, r1
 80022ae:	f7fe f933 	bl	8000518 <__aeabi_f2d>
 80022b2:	4632      	mov	r2, r6
 80022b4:	463b      	mov	r3, r7
 80022b6:	f7fe f987 	bl	80005c8 <__aeabi_dmul>
 80022ba:	ec53 2b19 	vmov	r2, r3, d9
 80022be:	f7fe f983 	bl	80005c8 <__aeabi_dmul>
 80022c2:	f7fe fc51 	bl	8000b68 <__aeabi_d2f>
 80022c6:	f7fe f927 	bl	8000518 <__aeabi_f2d>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	4640      	mov	r0, r8
 80022d0:	4649      	mov	r1, r9
 80022d2:	f7fd ffc3 	bl	800025c <__adddf3>
 80022d6:	f7fe fc47 	bl	8000b68 <__aeabi_d2f>
 80022da:	f7fe f91d 	bl	8000518 <__aeabi_f2d>
 80022de:	4680      	mov	r8, r0
 80022e0:	68a8      	ldr	r0, [r5, #8]
 80022e2:	4689      	mov	r9, r1
 80022e4:	f7fe f918 	bl	8000518 <__aeabi_f2d>
 80022e8:	ec53 2b19 	vmov	r2, r3, d9
 80022ec:	f7fe f96c 	bl	80005c8 <__aeabi_dmul>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	4640      	mov	r0, r8
 80022f6:	4649      	mov	r1, r9
 80022f8:	f7fd ffb0 	bl	800025c <__adddf3>
 80022fc:	f7fe fc34 	bl	8000b68 <__aeabi_d2f>
 8002300:	f7fe f90a 	bl	8000518 <__aeabi_f2d>
 8002304:	4680      	mov	r8, r0
 8002306:	68e8      	ldr	r0, [r5, #12]
 8002308:	4689      	mov	r9, r1
 800230a:	f7fe f905 	bl	8000518 <__aeabi_f2d>
 800230e:	4632      	mov	r2, r6
 8002310:	463b      	mov	r3, r7
 8002312:	f7fe f959 	bl	80005c8 <__aeabi_dmul>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	4640      	mov	r0, r8
 800231c:	4649      	mov	r1, r9
 800231e:	f7fd ff9d 	bl	800025c <__adddf3>
 8002322:	f7fe fc21 	bl	8000b68 <__aeabi_d2f>
 8002326:	f7fe f8f7 	bl	8000518 <__aeabi_f2d>
 800232a:	4606      	mov	r6, r0
 800232c:	6928      	ldr	r0, [r5, #16]
 800232e:	460f      	mov	r7, r1
 8002330:	f7fe f8f2 	bl	8000518 <__aeabi_f2d>
 8002334:	4652      	mov	r2, sl
 8002336:	465b      	mov	r3, fp
 8002338:	f7fe f946 	bl	80005c8 <__aeabi_dmul>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4630      	mov	r0, r6
 8002342:	4639      	mov	r1, r7
 8002344:	f7fd ff8a 	bl	800025c <__adddf3>
 8002348:	f7fe fc0e 	bl	8000b68 <__aeabi_d2f>
 800234c:	edd5 7a05 	vldr	s15, [r5, #20]
 8002350:	ee06 0a90 	vmov	s13, r0
		}
	}

	if((distance_sensor.distance_short[0] >= 20.0f) || (distance_sensor.distance_short[1] >= 20.0f))
 8002354:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002358:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800235c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			distance_sensor.distance_short[i] += pow(x,5-j) * short_poly_coeff[j];
 8002364:	edc4 7a06 	vstr	s15, [r4, #24]
	if((distance_sensor.distance_short[0] >= 20.0f) || (distance_sensor.distance_short[1] >= 20.0f))
 8002368:	da07      	bge.n	800237a <_Z18DistanceSensorTaskv+0x27e>
 800236a:	edd4 6a07 	vldr	s13, [r4, #28]
		distance_sensor.distance = distance_sensor.distance_long[0];
	}
	else
	{
		//distance_sensor.distance = (distance_sensor.distance_short[0] + distance_sensor.distance_short[1]) / 2.0f;
		distance_sensor.distance = distance_sensor.distance_short[0];
 800236e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8002372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002376:	fe28 8a27 	vselge.f32	s16, s16, s15
	}

	distance_sensor.distance -= 7.0f;
 800237a:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
	distance_sensor.distance /= 100.0f;
 800237e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80023ac <_Z18DistanceSensorTaskv+0x2b0>
	distance_sensor.distance -= 7.0f;
 8002382:	ee38 8a47 	vsub.f32	s16, s16, s14
	distance_sensor.distance /= 100.0f;
 8002386:	ee28 8a27 	vmul.f32	s16, s16, s15
 800238a:	ed84 8a08 	vstr	s16, [r4, #32]
}
 800238e:	ecbd 8b06 	vpop	{d8-d10}
 8002392:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002396:	bf00      	nop
 8002398:	20000120 	.word	0x20000120
 800239c:	3a533333 	.word	0x3a533333
 80023a0:	20000150 	.word	0x20000150
 80023a4:	20000000 	.word	0x20000000
 80023a8:	20000018 	.word	0x20000018
 80023ac:	3c23d70a 	.word	0x3c23d70a

080023b0 <_Z12Encoder_TaskPv>:
	//encoder_value->rpm = ((float) (encoder_value->velocity) / ENCODER_TASK_TIMESTEP) / 2 * 1000.0f * AB_ROT_PER_PULSE * GEAR_RATIO * 60;
	encoder_value->last_counter_value = temp_counter;
}

void Encoder_Task(void * argument)
{
 80023b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023b4:	ed2d 8b02 	vpush	{d8}
	// measure velocity, position
	int16_t velocity_values[5] = {0};
 80023b8:	2400      	movs	r4, #0
{
 80023ba:	b084      	sub	sp, #16
	int16_t velocity_values[5] = {0};
 80023bc:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80023c0:	f8ad 400c 	strh.w	r4, [sp, #12]
	uint8_t index = 0;
	uint8_t i;

	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 80023c4:	f014 f9ac 	bl	8016720 <xTaskGetTickCount>
		}

		enc_instance_mot.rpm = 0.0f;
		for(i = 0 ; i < 5; ++i)
		{
			enc_instance_mot.rpm += ((float)(velocity_values[i])) / 5.0f;
 80023c8:	ed9f 8a37 	vldr	s16, [pc, #220]	; 80024a8 <_Z12Encoder_TaskPv+0xf8>
			encoder_value->velocity = 0;
 80023cc:	4627      	mov	r7, r4
 80023ce:	4e37      	ldr	r6, [pc, #220]	; (80024ac <_Z12Encoder_TaskPv+0xfc>)
 80023d0:	4d37      	ldr	r5, [pc, #220]	; (80024b0 <_Z12Encoder_TaskPv+0x100>)
 80023d2:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 80024b4 <_Z12Encoder_TaskPv+0x104>
	xLastWakeTime = xTaskGetTickCount();
 80023d6:	9000      	str	r0, [sp, #0]
 80023d8:	e03f      	b.n	800245a <_Z12Encoder_TaskPv+0xaa>
		first_time = 1;
 80023da:	2001      	movs	r0, #1
 80023dc:	4611      	mov	r1, r2
		encoder_value->velocity = 0;
 80023de:	f8a8 2000 	strh.w	r2, [r8]
		first_time = 1;
 80023e2:	7028      	strb	r0, [r5, #0]
		velocity_values[index++] = enc_instance_mot.velocity;
 80023e4:	aa04      	add	r2, sp, #16
 80023e6:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 80023ea:	f822 1c0c 	strh.w	r1, [r2, #-12]
			enc_instance_mot.rpm += ((float)(velocity_values[i])) / 5.0f;
 80023ee:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
		velocity_values[index++] = enc_instance_mot.velocity;
 80023f2:	3401      	adds	r4, #1
			enc_instance_mot.rpm += ((float)(velocity_values[i])) / 5.0f;
 80023f4:	ee07 2a90 	vmov	s15, r2
 80023f8:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80023fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002400:	ee05 2a90 	vmov	s11, r2
 8002404:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8002408:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800240c:	ee06 2a10 	vmov	s12, r2
 8002410:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8002414:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8002418:	ee06 2a90 	vmov	s13, r2
 800241c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002420:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8002424:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002428:	ee07 2a10 	vmov	s14, r2
 800242c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002430:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002434:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002438:	ee77 7a87 	vadd.f32	s15, s15, s14
 800243c:	ee67 7a88 	vmul.f32	s15, s15, s16
		velocity_values[index++] = enc_instance_mot.velocity;
 8002440:	b2e4      	uxtb	r4, r4
			index = 0;
 8002442:	2c05      	cmp	r4, #5
		}

		vTaskDelayUntil(&xLastWakeTime, 1u);
 8002444:	f04f 0101 	mov.w	r1, #1
 8002448:	4668      	mov	r0, sp
			index = 0;
 800244a:	bf08      	it	eq
 800244c:	2400      	moveq	r4, #0
			enc_instance_mot.rpm += ((float)(velocity_values[i])) / 5.0f;
 800244e:	edc8 7a02 	vstr	s15, [r8, #8]
	encoder_value->last_counter_value = temp_counter;
 8002452:	f8c8 3004 	str.w	r3, [r8, #4]
		vTaskDelayUntil(&xLastWakeTime, 1u);
 8002456:	f013 ffef 	bl	8016438 <vTaskDelayUntil>
	uint32_t temp_counter = __HAL_TIM_GET_COUNTER(htim);
 800245a:	6831      	ldr	r1, [r6, #0]
	if (!first_time)
 800245c:	782a      	ldrb	r2, [r5, #0]
	uint32_t temp_counter = __HAL_TIM_GET_COUNTER(htim);
 800245e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	if (!first_time)
 8002460:	2a00      	cmp	r2, #0
 8002462:	d0ba      	beq.n	80023da <_Z12Encoder_TaskPv+0x2a>
		if (temp_counter == encoder_value->last_counter_value)
 8002464:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8002468:	4293      	cmp	r3, r2
 800246a:	d00a      	beq.n	8002482 <_Z12Encoder_TaskPv+0xd2>
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 800246c:	6808      	ldr	r0, [r1, #0]
		else if (temp_counter > encoder_value->last_counter_value)
 800246e:	d911      	bls.n	8002494 <_Z12Encoder_TaskPv+0xe4>
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8002470:	06c0      	lsls	r0, r0, #27
 8002472:	d50a      	bpl.n	800248a <_Z12Encoder_TaskPv+0xda>
				encoder_value->velocity = -encoder_value->last_counter_value - (__HAL_TIM_GET_AUTORELOAD(htim) - temp_counter);
 8002474:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002476:	1a9a      	subs	r2, r3, r2
 8002478:	1a52      	subs	r2, r2, r1
 800247a:	b211      	sxth	r1, r2
 800247c:	f8a8 1000 	strh.w	r1, [r8]
 8002480:	e7b0      	b.n	80023e4 <_Z12Encoder_TaskPv+0x34>
			encoder_value->velocity = 0;
 8002482:	2100      	movs	r1, #0
 8002484:	f8a8 7000 	strh.w	r7, [r8]
 8002488:	e7ac      	b.n	80023e4 <_Z12Encoder_TaskPv+0x34>
				encoder_value->velocity = temp_counter - encoder_value->last_counter_value;
 800248a:	1a9a      	subs	r2, r3, r2
 800248c:	b211      	sxth	r1, r2
 800248e:	f8a8 1000 	strh.w	r1, [r8]
 8002492:	e7a7      	b.n	80023e4 <_Z12Encoder_TaskPv+0x34>
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8002494:	06c0      	lsls	r0, r0, #27
 8002496:	d4f8      	bmi.n	800248a <_Z12Encoder_TaskPv+0xda>
				encoder_value->velocity = temp_counter + (__HAL_TIM_GET_AUTORELOAD(htim) - encoder_value->last_counter_value);
 8002498:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800249a:	1a89      	subs	r1, r1, r2
 800249c:	4419      	add	r1, r3
 800249e:	b209      	sxth	r1, r1
 80024a0:	f8a8 1000 	strh.w	r1, [r8]
 80024a4:	e79e      	b.n	80023e4 <_Z12Encoder_TaskPv+0x34>
 80024a6:	bf00      	nop
 80024a8:	3e4ccccd 	.word	0x3e4ccccd
 80024ac:	20000d64 	.word	0x20000d64
 80024b0:	20000189 	.word	0x20000189
 80024b4:	2000018c 	.word	0x2000018c

080024b8 <_Z12CalculateRPMv>:
{
	uint8_t i;
	static uint8_t index = 0u;;
	static float rpm_averaging_array[5];
	float averaged_rpm = 0.0f;
	rpm_averaging_array[index++] = enc_instance_mot.rpm;
 80024b8:	4814      	ldr	r0, [pc, #80]	; (800250c <_Z12CalculateRPMv+0x54>)
 80024ba:	4b15      	ldr	r3, [pc, #84]	; (8002510 <_Z12CalculateRPMv+0x58>)
 80024bc:	7801      	ldrb	r1, [r0, #0]
 80024be:	f8d3 c008 	ldr.w	ip, [r3, #8]
 80024c2:	4b14      	ldr	r3, [pc, #80]	; (8002514 <_Z12CalculateRPMv+0x5c>)
 80024c4:	1c4a      	adds	r2, r1, #1
 80024c6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80024ca:	f8c1 c000 	str.w	ip, [r1]
	for(i = 0 ; i < 5; ++i)
	{
		averaged_rpm += rpm_averaging_array[i] / 5.0f;
	}

	averaged_rpm *= -1.36f;
 80024ce:	edd3 7a00 	vldr	s15, [r3]
 80024d2:	edd3 5a01 	vldr	s11, [r3, #4]
 80024d6:	ed93 6a02 	vldr	s12, [r3, #8]
 80024da:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80024de:	edd3 6a03 	vldr	s13, [r3, #12]
 80024e2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80024e6:	ed93 7a04 	vldr	s14, [r3, #16]
 80024ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
	rpm_averaging_array[index++] = enc_instance_mot.rpm;
 80024ee:	b2d2      	uxtb	r2, r2
	if(index == 5)
 80024f0:	2a05      	cmp	r2, #5
	rpm_averaging_array[index++] = enc_instance_mot.rpm;
 80024f2:	7002      	strb	r2, [r0, #0]
	averaged_rpm *= -1.36f;
 80024f4:	ee77 7a87 	vadd.f32	s15, s15, s14
		index = 0;
 80024f8:	bf08      	it	eq
 80024fa:	2200      	moveq	r2, #0
	averaged_rpm *= -1.36f;
 80024fc:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8002518 <_Z12CalculateRPMv+0x60>
		index = 0;
 8002500:	bf08      	it	eq
 8002502:	7002      	strbeq	r2, [r0, #0]

	return averaged_rpm;
}
 8002504:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	20000188 	.word	0x20000188
 8002510:	2000018c 	.word	0x2000018c
 8002514:	20000174 	.word	0x20000174
 8002518:	be8b4396 	.word	0xbe8b4396

0800251c <_Z8IMU_Taskv>:
	HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &ret, 1, 100);
	return ret;
}

void IMU_Task()
{
 800251c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800251e:	ed2d 8b02 	vpush	{d8}
	if(IMU_initialized == 0u)
 8002522:	4e81      	ldr	r6, [pc, #516]	; (8002728 <_Z8IMU_Taskv+0x20c>)
{
 8002524:	b085      	sub	sp, #20
	if(IMU_initialized == 0u)
 8002526:	7834      	ldrb	r4, [r6, #0]
 8002528:	b9ec      	cbnz	r4, 8002566 <_Z8IMU_Taskv+0x4a>
	{
		uint8_t whoami = 0u;
		uint8_t whoami_reg = WHO_AM_I_ADDR;
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &whoami_reg, 1, 100);
 800252a:	2564      	movs	r5, #100	; 0x64
		uint8_t whoami_reg = WHO_AM_I_ADDR;
 800252c:	270f      	movs	r7, #15
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &whoami_reg, 1, 100);
 800252e:	2301      	movs	r3, #1
 8002530:	21d6      	movs	r1, #214	; 0xd6
 8002532:	f10d 0209 	add.w	r2, sp, #9
 8002536:	487d      	ldr	r0, [pc, #500]	; (800272c <_Z8IMU_Taskv+0x210>)
 8002538:	9500      	str	r5, [sp, #0]
		uint8_t whoami = 0u;
 800253a:	f88d 4008 	strb.w	r4, [sp, #8]
		uint8_t whoami_reg = WHO_AM_I_ADDR;
 800253e:	f88d 7009 	strb.w	r7, [sp, #9]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &whoami_reg, 1, 100);
 8002542:	f00b f863 	bl	800d60c <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &whoami, 1, 100);
 8002546:	2301      	movs	r3, #1
 8002548:	21d7      	movs	r1, #215	; 0xd7
 800254a:	4878      	ldr	r0, [pc, #480]	; (800272c <_Z8IMU_Taskv+0x210>)
 800254c:	9500      	str	r5, [sp, #0]
 800254e:	aa02      	add	r2, sp, #8
 8002550:	f00b f950 	bl	800d7f4 <HAL_I2C_Master_Receive>
		if(whoami != 0x6A)
 8002554:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002558:	2b6a      	cmp	r3, #106	; 0x6a
 800255a:	f000 8099 	beq.w	8002690 <_Z8IMU_Taskv+0x174>
			tmp_high = readByteFromIMU(OUTY_H_G);
			imu.pitch = ((int16_t)((tmp_high << 8u)| tmp_low)) * G_SENSITIVITY / 1000.0f * 0.017453f;

		}
	}
}
 800255e:	b005      	add	sp, #20
 8002560:	ecbd 8b02 	vpop	{d8}
 8002564:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &status_reg, 1, 100);
 8002566:	2464      	movs	r4, #100	; 0x64
		uint8_t status = 0u;
 8002568:	2500      	movs	r5, #0
		uint8_t status_reg = STATUS_REG;
 800256a:	261e      	movs	r6, #30
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &status_reg, 1, 100);
 800256c:	2301      	movs	r3, #1
 800256e:	21d6      	movs	r1, #214	; 0xd6
 8002570:	f10d 020a 	add.w	r2, sp, #10
 8002574:	486d      	ldr	r0, [pc, #436]	; (800272c <_Z8IMU_Taskv+0x210>)
 8002576:	9400      	str	r4, [sp, #0]
		uint8_t status = 0u;
 8002578:	f88d 5009 	strb.w	r5, [sp, #9]
		uint8_t status_reg = STATUS_REG;
 800257c:	f88d 600a 	strb.w	r6, [sp, #10]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &status_reg, 1, 100);
 8002580:	f00b f844 	bl	800d60c <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &status, 1, 100);
 8002584:	2301      	movs	r3, #1
 8002586:	f10d 0209 	add.w	r2, sp, #9
 800258a:	21d7      	movs	r1, #215	; 0xd7
 800258c:	4867      	ldr	r0, [pc, #412]	; (800272c <_Z8IMU_Taskv+0x210>)
 800258e:	9400      	str	r4, [sp, #0]
 8002590:	f00b f930 	bl	800d7f4 <HAL_I2C_Master_Receive>
		if((status & 0x01) == 1u)
 8002594:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8002598:	07da      	lsls	r2, r3, #31
 800259a:	f100 80cd 	bmi.w	8002738 <_Z8IMU_Taskv+0x21c>
		if((status & 0x02) == 2u)
 800259e:	079b      	lsls	r3, r3, #30
 80025a0:	d5dd      	bpl.n	800255e <_Z8IMU_Taskv+0x42>
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 80025a2:	2564      	movs	r5, #100	; 0x64
	uint8_t ret = 0u;
 80025a4:	2700      	movs	r7, #0
 80025a6:	2426      	movs	r4, #38	; 0x26
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 80025a8:	f10d 020b 	add.w	r2, sp, #11
 80025ac:	2301      	movs	r3, #1
 80025ae:	21d6      	movs	r1, #214	; 0xd6
 80025b0:	9500      	str	r5, [sp, #0]
 80025b2:	485e      	ldr	r0, [pc, #376]	; (800272c <_Z8IMU_Taskv+0x210>)
 80025b4:	f88d 400b 	strb.w	r4, [sp, #11]
	uint8_t ret = 0u;
 80025b8:	f88d 700c 	strb.w	r7, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 80025bc:	f00b f826 	bl	800d60c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &ret, 1, 100);
 80025c0:	aa03      	add	r2, sp, #12
 80025c2:	2301      	movs	r3, #1
 80025c4:	21d7      	movs	r1, #215	; 0xd7
 80025c6:	9500      	str	r5, [sp, #0]
 80025c8:	4858      	ldr	r0, [pc, #352]	; (800272c <_Z8IMU_Taskv+0x210>)
 80025ca:	f00b f913 	bl	800d7f4 <HAL_I2C_Master_Receive>
	return ret;
 80025ce:	2327      	movs	r3, #39	; 0x27
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 80025d0:	f10d 020b 	add.w	r2, sp, #11
 80025d4:	f88d 300b 	strb.w	r3, [sp, #11]
 80025d8:	21d6      	movs	r1, #214	; 0xd6
 80025da:	2301      	movs	r3, #1
 80025dc:	9500      	str	r5, [sp, #0]
 80025de:	4853      	ldr	r0, [pc, #332]	; (800272c <_Z8IMU_Taskv+0x210>)
	return ret;
 80025e0:	f89d 400c 	ldrb.w	r4, [sp, #12]
	uint8_t ret = 0u;
 80025e4:	f88d 700c 	strb.w	r7, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 80025e8:	f00b f810 	bl	800d60c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &ret, 1, 100);
 80025ec:	aa03      	add	r2, sp, #12
 80025ee:	2301      	movs	r3, #1
 80025f0:	21d7      	movs	r1, #215	; 0xd7
 80025f2:	9500      	str	r5, [sp, #0]
 80025f4:	484d      	ldr	r0, [pc, #308]	; (800272c <_Z8IMU_Taskv+0x210>)
 80025f6:	f00b f8fd 	bl	800d7f4 <HAL_I2C_Master_Receive>
	return ret;
 80025fa:	f89d 300c 	ldrb.w	r3, [sp, #12]
			imu.yaw = ((int16_t)((tmp_high << 8u)| tmp_low)) * G_SENSITIVITY / 1000.0f * 0.017453f;
 80025fe:	ed9f 8a4c 	vldr	s16, [pc, #304]	; 8002730 <_Z8IMU_Taskv+0x214>
 8002602:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8002606:	b224      	sxth	r4, r4
 8002608:	ee07 4a90 	vmov	s15, r4
 800260c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002610:	2324      	movs	r3, #36	; 0x24
 8002612:	ee67 7a88 	vmul.f32	s15, s15, s16
 8002616:	4e47      	ldr	r6, [pc, #284]	; (8002734 <_Z8IMU_Taskv+0x218>)
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 8002618:	9500      	str	r5, [sp, #0]
 800261a:	f88d 300b 	strb.w	r3, [sp, #11]
			imu.yaw = ((int16_t)((tmp_high << 8u)| tmp_low)) * G_SENSITIVITY / 1000.0f * 0.017453f;
 800261e:	edc6 7a03 	vstr	s15, [r6, #12]
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 8002622:	f10d 020b 	add.w	r2, sp, #11
 8002626:	2301      	movs	r3, #1
 8002628:	21d6      	movs	r1, #214	; 0xd6
 800262a:	4840      	ldr	r0, [pc, #256]	; (800272c <_Z8IMU_Taskv+0x210>)
	uint8_t ret = 0u;
 800262c:	f88d 700c 	strb.w	r7, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 8002630:	f00a ffec 	bl	800d60c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &ret, 1, 100);
 8002634:	aa03      	add	r2, sp, #12
 8002636:	2301      	movs	r3, #1
 8002638:	21d7      	movs	r1, #215	; 0xd7
 800263a:	9500      	str	r5, [sp, #0]
 800263c:	483b      	ldr	r0, [pc, #236]	; (800272c <_Z8IMU_Taskv+0x210>)
 800263e:	f00b f8d9 	bl	800d7f4 <HAL_I2C_Master_Receive>
	return ret;
 8002642:	2325      	movs	r3, #37	; 0x25
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 8002644:	f10d 020b 	add.w	r2, sp, #11
 8002648:	f88d 300b 	strb.w	r3, [sp, #11]
 800264c:	21d6      	movs	r1, #214	; 0xd6
 800264e:	2301      	movs	r3, #1
 8002650:	9500      	str	r5, [sp, #0]
 8002652:	4836      	ldr	r0, [pc, #216]	; (800272c <_Z8IMU_Taskv+0x210>)
	return ret;
 8002654:	f89d 400c 	ldrb.w	r4, [sp, #12]
	uint8_t ret = 0u;
 8002658:	f88d 700c 	strb.w	r7, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 800265c:	f00a ffd6 	bl	800d60c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &ret, 1, 100);
 8002660:	2301      	movs	r3, #1
 8002662:	21d7      	movs	r1, #215	; 0xd7
 8002664:	aa03      	add	r2, sp, #12
 8002666:	9500      	str	r5, [sp, #0]
 8002668:	4830      	ldr	r0, [pc, #192]	; (800272c <_Z8IMU_Taskv+0x210>)
 800266a:	f00b f8c3 	bl	800d7f4 <HAL_I2C_Master_Receive>
	return ret;
 800266e:	f89d 300c 	ldrb.w	r3, [sp, #12]
			imu.pitch = ((int16_t)((tmp_high << 8u)| tmp_low)) * G_SENSITIVITY / 1000.0f * 0.017453f;
 8002672:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8002676:	b224      	sxth	r4, r4
 8002678:	ee07 4a90 	vmov	s15, r4
 800267c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002680:	ee67 7a88 	vmul.f32	s15, s15, s16
 8002684:	edc6 7a04 	vstr	s15, [r6, #16]
}
 8002688:	b005      	add	sp, #20
 800268a:	ecbd 8b02 	vpop	{d8}
 800268e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint8_t pData[2] = {CTRL1_XL_ADDR, 0x63};
 8002690:	f246 3c10 	movw	ip, #25360	; 0x6310
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);
 8002694:	aa03      	add	r2, sp, #12
 8002696:	2302      	movs	r3, #2
 8002698:	21d6      	movs	r1, #214	; 0xd6
 800269a:	9500      	str	r5, [sp, #0]
 800269c:	4823      	ldr	r0, [pc, #140]	; (800272c <_Z8IMU_Taskv+0x210>)
		uint8_t pData[2] = {CTRL1_XL_ADDR, 0x63};
 800269e:	f8ad c00c 	strh.w	ip, [sp, #12]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);
 80026a2:	f00a ffb3 	bl	800d60c <HAL_I2C_Master_Transmit>
		pData[0] = 0x1A;
 80026a6:	f241 031a 	movw	r3, #4122	; 0x101a
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);
 80026aa:	aa03      	add	r2, sp, #12
		pData[0] = 0x1A;
 80026ac:	f8ad 300c 	strh.w	r3, [sp, #12]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);
 80026b0:	21d6      	movs	r1, #214	; 0xd6
 80026b2:	2302      	movs	r3, #2
 80026b4:	9500      	str	r5, [sp, #0]
 80026b6:	481d      	ldr	r0, [pc, #116]	; (800272c <_Z8IMU_Taskv+0x210>)
 80026b8:	f00a ffa8 	bl	800d60c <HAL_I2C_Master_Transmit>
		pData[0] = CTRL2_G_ADDR;
 80026bc:	f246 3311 	movw	r3, #25361	; 0x6311
 80026c0:	2712      	movs	r7, #18
 80026c2:	f8ad 300c 	strh.w	r3, [sp, #12]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);
 80026c6:	aa03      	add	r2, sp, #12
 80026c8:	2302      	movs	r3, #2
 80026ca:	21d6      	movs	r1, #214	; 0xd6
 80026cc:	9500      	str	r5, [sp, #0]
 80026ce:	4817      	ldr	r0, [pc, #92]	; (800272c <_Z8IMU_Taskv+0x210>)
 80026d0:	f00a ff9c 	bl	800d60c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 80026d4:	f10d 020a 	add.w	r2, sp, #10
 80026d8:	2301      	movs	r3, #1
 80026da:	21d6      	movs	r1, #214	; 0xd6
 80026dc:	9500      	str	r5, [sp, #0]
 80026de:	4813      	ldr	r0, [pc, #76]	; (800272c <_Z8IMU_Taskv+0x210>)
 80026e0:	f88d 700a 	strb.w	r7, [sp, #10]
	uint8_t ret = 0u;
 80026e4:	f88d 400b 	strb.w	r4, [sp, #11]
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 80026e8:	f00a ff90 	bl	800d60c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &ret, 1, 100);
 80026ec:	f10d 020b 	add.w	r2, sp, #11
 80026f0:	2301      	movs	r3, #1
 80026f2:	21d7      	movs	r1, #215	; 0xd7
 80026f4:	9500      	str	r5, [sp, #0]
 80026f6:	480d      	ldr	r0, [pc, #52]	; (800272c <_Z8IMU_Taskv+0x210>)
 80026f8:	f00b f87c 	bl	800d7f4 <HAL_I2C_Master_Receive>
	return ret;
 80026fc:	f89d 100b 	ldrb.w	r1, [sp, #11]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);
 8002700:	2302      	movs	r3, #2
		ctrl3c = ctrl3c & (~0x04);
 8002702:	f021 0104 	bic.w	r1, r1, #4
		pData[1] = ctrl3c;
 8002706:	f88d 100d 	strb.w	r1, [sp, #13]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);
 800270a:	aa03      	add	r2, sp, #12
 800270c:	21d6      	movs	r1, #214	; 0xd6
 800270e:	9500      	str	r5, [sp, #0]
 8002710:	4806      	ldr	r0, [pc, #24]	; (800272c <_Z8IMU_Taskv+0x210>)
		pData[0] = 0x12;
 8002712:	f88d 700c 	strb.w	r7, [sp, #12]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);
 8002716:	f00a ff79 	bl	800d60c <HAL_I2C_Master_Transmit>
		IMU_initialized = 1u;
 800271a:	2301      	movs	r3, #1
 800271c:	7033      	strb	r3, [r6, #0]
}
 800271e:	b005      	add	sp, #20
 8002720:	ecbd 8b02 	vpop	{d8}
 8002724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002726:	bf00      	nop
 8002728:	20000198 	.word	0x20000198
 800272c:	200007e8 	.word	0x200007e8
 8002730:	388b9fae 	.word	0x388b9fae
 8002734:	2000019c 	.word	0x2000019c
			tmp_low = readByteFromIMU(OUTX_L_XL);
 8002738:	2628      	movs	r6, #40	; 0x28
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 800273a:	2301      	movs	r3, #1
 800273c:	21d6      	movs	r1, #214	; 0xd6
 800273e:	f10d 020b 	add.w	r2, sp, #11
 8002742:	4854      	ldr	r0, [pc, #336]	; (8002894 <_Z8IMU_Taskv+0x378>)
 8002744:	9400      	str	r4, [sp, #0]
 8002746:	f88d 600b 	strb.w	r6, [sp, #11]
	uint8_t ret = 0u;
 800274a:	f88d 500c 	strb.w	r5, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 800274e:	f00a ff5d 	bl	800d60c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &ret, 1, 100);
 8002752:	2301      	movs	r3, #1
 8002754:	21d7      	movs	r1, #215	; 0xd7
 8002756:	aa03      	add	r2, sp, #12
 8002758:	484e      	ldr	r0, [pc, #312]	; (8002894 <_Z8IMU_Taskv+0x378>)
 800275a:	9400      	str	r4, [sp, #0]
 800275c:	f00b f84a 	bl	800d7f4 <HAL_I2C_Master_Receive>
	return ret;
 8002760:	2329      	movs	r3, #41	; 0x29
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 8002762:	21d6      	movs	r1, #214	; 0xd6
 8002764:	f88d 300b 	strb.w	r3, [sp, #11]
 8002768:	f10d 020b 	add.w	r2, sp, #11
 800276c:	2301      	movs	r3, #1
 800276e:	4849      	ldr	r0, [pc, #292]	; (8002894 <_Z8IMU_Taskv+0x378>)
 8002770:	9400      	str	r4, [sp, #0]
	return ret;
 8002772:	f89d 600c 	ldrb.w	r6, [sp, #12]
	uint8_t ret = 0u;
 8002776:	f88d 500c 	strb.w	r5, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 800277a:	f00a ff47 	bl	800d60c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &ret, 1, 100);
 800277e:	2301      	movs	r3, #1
 8002780:	21d7      	movs	r1, #215	; 0xd7
 8002782:	aa03      	add	r2, sp, #12
 8002784:	4843      	ldr	r0, [pc, #268]	; (8002894 <_Z8IMU_Taskv+0x378>)
 8002786:	9400      	str	r4, [sp, #0]
 8002788:	f00b f834 	bl	800d7f4 <HAL_I2C_Master_Receive>
	return ret;
 800278c:	f89d 300c 	ldrb.w	r3, [sp, #12]
			imu.acc_x = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY / 1000.0f;
 8002790:	ed9f 8a41 	vldr	s16, [pc, #260]	; 8002898 <_Z8IMU_Taskv+0x37c>
 8002794:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 8002798:	b236      	sxth	r6, r6
 800279a:	ee07 6a90 	vmov	s15, r6
 800279e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027a2:	232c      	movs	r3, #44	; 0x2c
 80027a4:	ee67 7a88 	vmul.f32	s15, s15, s16
 80027a8:	4f3c      	ldr	r7, [pc, #240]	; (800289c <_Z8IMU_Taskv+0x380>)
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 80027aa:	21d6      	movs	r1, #214	; 0xd6
 80027ac:	9400      	str	r4, [sp, #0]
 80027ae:	f88d 300b 	strb.w	r3, [sp, #11]
			imu.acc_x = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY / 1000.0f;
 80027b2:	edc7 7a00 	vstr	s15, [r7]
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 80027b6:	2301      	movs	r3, #1
 80027b8:	f10d 020b 	add.w	r2, sp, #11
 80027bc:	4835      	ldr	r0, [pc, #212]	; (8002894 <_Z8IMU_Taskv+0x378>)
	uint8_t ret = 0u;
 80027be:	f88d 500c 	strb.w	r5, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 80027c2:	f00a ff23 	bl	800d60c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &ret, 1, 100);
 80027c6:	2301      	movs	r3, #1
 80027c8:	21d7      	movs	r1, #215	; 0xd7
 80027ca:	aa03      	add	r2, sp, #12
 80027cc:	4831      	ldr	r0, [pc, #196]	; (8002894 <_Z8IMU_Taskv+0x378>)
 80027ce:	9400      	str	r4, [sp, #0]
 80027d0:	f00b f810 	bl	800d7f4 <HAL_I2C_Master_Receive>
	return ret;
 80027d4:	232d      	movs	r3, #45	; 0x2d
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 80027d6:	21d6      	movs	r1, #214	; 0xd6
 80027d8:	f88d 300b 	strb.w	r3, [sp, #11]
 80027dc:	f10d 020b 	add.w	r2, sp, #11
 80027e0:	2301      	movs	r3, #1
 80027e2:	482c      	ldr	r0, [pc, #176]	; (8002894 <_Z8IMU_Taskv+0x378>)
 80027e4:	9400      	str	r4, [sp, #0]
	return ret;
 80027e6:	f89d 600c 	ldrb.w	r6, [sp, #12]
	uint8_t ret = 0u;
 80027ea:	f88d 500c 	strb.w	r5, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 80027ee:	f00a ff0d 	bl	800d60c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &ret, 1, 100);
 80027f2:	2301      	movs	r3, #1
 80027f4:	21d7      	movs	r1, #215	; 0xd7
 80027f6:	aa03      	add	r2, sp, #12
 80027f8:	4826      	ldr	r0, [pc, #152]	; (8002894 <_Z8IMU_Taskv+0x378>)
 80027fa:	9400      	str	r4, [sp, #0]
 80027fc:	f00a fffa 	bl	800d7f4 <HAL_I2C_Master_Receive>
	return ret;
 8002800:	f89d 300c 	ldrb.w	r3, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 8002804:	21d6      	movs	r1, #214	; 0xd6
			imu.acc_z = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY / 1000.0f;
 8002806:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 800280a:	b236      	sxth	r6, r6
 800280c:	ee07 6a90 	vmov	s15, r6
 8002810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002814:	232a      	movs	r3, #42	; 0x2a
 8002816:	ee67 7a88 	vmul.f32	s15, s15, s16
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 800281a:	9400      	str	r4, [sp, #0]
 800281c:	f88d 300b 	strb.w	r3, [sp, #11]
			imu.acc_z = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY / 1000.0f;
 8002820:	edc7 7a02 	vstr	s15, [r7, #8]
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 8002824:	2301      	movs	r3, #1
 8002826:	f10d 020b 	add.w	r2, sp, #11
 800282a:	481a      	ldr	r0, [pc, #104]	; (8002894 <_Z8IMU_Taskv+0x378>)
	uint8_t ret = 0u;
 800282c:	f88d 500c 	strb.w	r5, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 8002830:	f00a feec 	bl	800d60c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &ret, 1, 100);
 8002834:	2301      	movs	r3, #1
 8002836:	21d7      	movs	r1, #215	; 0xd7
 8002838:	aa03      	add	r2, sp, #12
 800283a:	4816      	ldr	r0, [pc, #88]	; (8002894 <_Z8IMU_Taskv+0x378>)
 800283c:	9400      	str	r4, [sp, #0]
 800283e:	f00a ffd9 	bl	800d7f4 <HAL_I2C_Master_Receive>
	return ret;
 8002842:	232b      	movs	r3, #43	; 0x2b
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 8002844:	21d6      	movs	r1, #214	; 0xd6
 8002846:	f10d 020b 	add.w	r2, sp, #11
 800284a:	f88d 300b 	strb.w	r3, [sp, #11]
 800284e:	4811      	ldr	r0, [pc, #68]	; (8002894 <_Z8IMU_Taskv+0x378>)
 8002850:	2301      	movs	r3, #1
 8002852:	9400      	str	r4, [sp, #0]
	return ret;
 8002854:	f89d 600c 	ldrb.w	r6, [sp, #12]
	uint8_t ret = 0u;
 8002858:	f88d 500c 	strb.w	r5, [sp, #12]
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 800285c:	f00a fed6 	bl	800d60c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &ret, 1, 100);
 8002860:	2301      	movs	r3, #1
 8002862:	aa03      	add	r2, sp, #12
 8002864:	21d7      	movs	r1, #215	; 0xd7
 8002866:	480b      	ldr	r0, [pc, #44]	; (8002894 <_Z8IMU_Taskv+0x378>)
 8002868:	9400      	str	r4, [sp, #0]
 800286a:	f00a ffc3 	bl	800d7f4 <HAL_I2C_Master_Receive>
	return ret;
 800286e:	f89d 200c 	ldrb.w	r2, [sp, #12]
		if((status & 0x02) == 2u)
 8002872:	f89d 3009 	ldrb.w	r3, [sp, #9]
			imu.acc_y = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY / 1000.0f;
 8002876:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
 800287a:	b236      	sxth	r6, r6
 800287c:	ee07 6a90 	vmov	s15, r6
 8002880:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002884:	ee67 7a88 	vmul.f32	s15, s15, s16
		if((status & 0x02) == 2u)
 8002888:	079b      	lsls	r3, r3, #30
			imu.acc_y = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY / 1000.0f;
 800288a:	edc7 7a01 	vstr	s15, [r7, #4]
		if((status & 0x02) == 2u)
 800288e:	f57f ae66 	bpl.w	800255e <_Z8IMU_Taskv+0x42>
 8002892:	e686      	b.n	80025a2 <_Z8IMU_Taskv+0x86>
 8002894:	200007e8 	.word	0x200007e8
 8002898:	387fda41 	.word	0x387fda41
 800289c:	2000019c 	.word	0x2000019c

080028a0 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h>:
uint16_t infra_adc_values_test[32];
uint8_t infra_adc_data[32*2];

/* Turns on every #num and #num + 4 Infraled on every led driving IC.*/
void TurnOnInfraLEDs(GPIO_TypeDef* LE_port[2], uint16_t LE_pin[2],GPIO_TypeDef* OE_port[2], uint16_t OE_pin[2], uint8_t num)
{
 80028a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t i;
	uint8_t data = 0x11 << num;
 80028a4:	2411      	movs	r4, #17
{
 80028a6:	b083      	sub	sp, #12
 80028a8:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 80028ac:	460e      	mov	r6, r1
	uint8_t data = 0x11 << num;
 80028ae:	40ac      	lsls	r4, r5
 80028b0:	f88d 4007 	strb.w	r4, [sp, #7]
{
 80028b4:	4605      	mov	r5, r0
 80028b6:	4617      	mov	r7, r2
 80028b8:	4698      	mov	r8, r3
	uint8_t data = 0x11 << num;
 80028ba:	2404      	movs	r4, #4

	for(i = 0; i < 4; ++i)
	{
		HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 80028bc:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8002920 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0x80>
 80028c0:	f04f 33ff 	mov.w	r3, #4294967295
 80028c4:	2201      	movs	r2, #1
 80028c6:	4648      	mov	r0, r9
 80028c8:	f10d 0107 	add.w	r1, sp, #7
	for(i = 0; i < 4; ++i)
 80028cc:	3c01      	subs	r4, #1
		HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 80028ce:	f00d fc72 	bl	80101b6 <HAL_SPI_Transmit>
	for(i = 0; i < 4; ++i)
 80028d2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80028d6:	d1f3      	bne.n	80028c0 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0x20>
	}
	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_SET);
 80028d8:	8831      	ldrh	r1, [r6, #0]
 80028da:	6828      	ldr	r0, [r5, #0]
 80028dc:	2201      	movs	r2, #1
 80028de:	f00a fdd3 	bl	800d488 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_SET);
 80028e2:	8871      	ldrh	r1, [r6, #2]
 80028e4:	6868      	ldr	r0, [r5, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f00a fdce 	bl	800d488 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_RESET);
 80028ec:	4622      	mov	r2, r4
 80028ee:	8831      	ldrh	r1, [r6, #0]
 80028f0:	6828      	ldr	r0, [r5, #0]
 80028f2:	f00a fdc9 	bl	800d488 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_RESET);
 80028f6:	4622      	mov	r2, r4
 80028f8:	8871      	ldrh	r1, [r6, #2]
 80028fa:	6868      	ldr	r0, [r5, #4]
 80028fc:	f00a fdc4 	bl	800d488 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_RESET);
 8002900:	4622      	mov	r2, r4
 8002902:	f8b8 1000 	ldrh.w	r1, [r8]
 8002906:	6838      	ldr	r0, [r7, #0]
 8002908:	f00a fdbe 	bl	800d488 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_RESET);
 800290c:	4622      	mov	r2, r4
 800290e:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f00a fdb8 	bl	800d488 <HAL_GPIO_WritePin>

}
 8002918:	b003      	add	sp, #12
 800291a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800291e:	bf00      	nop
 8002920:	20000c50 	.word	0x20000c50

08002924 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm>:

void TurnOnLEDs(GPIO_TypeDef *LE_port[2], uint16_t LE_pin[2], GPIO_TypeDef *OE_port[2], uint16_t OE_pin[2], uint32_t front, uint32_t rear)
{
 8002924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002928:	4615      	mov	r5, r2
 800292a:	461e      	mov	r6, r3
 800292c:	b083      	sub	sp, #12
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_SET);
 800292e:	2201      	movs	r2, #1
{
 8002930:	4607      	mov	r7, r0
 8002932:	4688      	mov	r8, r1
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_SET);
 8002934:	6828      	ldr	r0, [r5, #0]
 8002936:	8819      	ldrh	r1, [r3, #0]
{
 8002938:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 800293c:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_SET);
 8002940:	f00a fda2 	bl	800d488 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_SET);
 8002944:	2201      	movs	r2, #1
 8002946:	8871      	ldrh	r1, [r6, #2]
 8002948:	6868      	ldr	r0, [r5, #4]
 800294a:	2400      	movs	r4, #0
	uint8_t i;
	for (i = 0; i < 4; ++i)
	{
		uint8_t data_front = (front >> (8u*i)) & 0xFF;
		HAL_SPI_Transmit(&hspi2, &data_front, 1, HAL_MAX_DELAY);
 800294c:	f8df a090 	ldr.w	sl, [pc, #144]	; 80029e0 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0xbc>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_SET);
 8002950:	f00a fd9a 	bl	800d488 <HAL_GPIO_WritePin>
		uint8_t data_front = (front >> (8u*i)) & 0xFF;
 8002954:	fa2b f204 	lsr.w	r2, fp, r4
 8002958:	f88d 2007 	strb.w	r2, [sp, #7]
		HAL_SPI_Transmit(&hspi2, &data_front, 1, HAL_MAX_DELAY);
 800295c:	f04f 33ff 	mov.w	r3, #4294967295
 8002960:	2201      	movs	r2, #1
 8002962:	4650      	mov	r0, sl
	for (i = 0; i < 4; ++i)
 8002964:	3408      	adds	r4, #8
		HAL_SPI_Transmit(&hspi2, &data_front, 1, HAL_MAX_DELAY);
 8002966:	f10d 0107 	add.w	r1, sp, #7
 800296a:	f00d fc24 	bl	80101b6 <HAL_SPI_Transmit>
	for (i = 0; i < 4; ++i)
 800296e:	2c20      	cmp	r4, #32
 8002970:	d1f0      	bne.n	8002954 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x30>
	}
	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_SET);
 8002972:	2201      	movs	r2, #1
 8002974:	f8b8 1000 	ldrh.w	r1, [r8]
 8002978:	6838      	ldr	r0, [r7, #0]
 800297a:	f00a fd85 	bl	800d488 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_RESET);
 800297e:	2200      	movs	r2, #0
 8002980:	f8b8 1000 	ldrh.w	r1, [r8]
 8002984:	6838      	ldr	r0, [r7, #0]
 8002986:	f00a fd7f 	bl	800d488 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_RESET);
 800298a:	2200      	movs	r2, #0
 800298c:	8831      	ldrh	r1, [r6, #0]
 800298e:	6828      	ldr	r0, [r5, #0]
 8002990:	f00a fd7a 	bl	800d488 <HAL_GPIO_WritePin>
 8002994:	2400      	movs	r4, #0
	for (i = 0; i < 4; ++i)
	{
		uint8_t data_rear = (rear >> (8u*i)) & 0xFF;
		HAL_SPI_Transmit(&hspi2, &data_rear, 1, HAL_MAX_DELAY);
 8002996:	f8df a048 	ldr.w	sl, [pc, #72]	; 80029e0 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0xbc>
		uint8_t data_rear = (rear >> (8u*i)) & 0xFF;
 800299a:	fa29 fc04 	lsr.w	ip, r9, r4
		HAL_SPI_Transmit(&hspi2, &data_rear, 1, HAL_MAX_DELAY);
 800299e:	f04f 33ff 	mov.w	r3, #4294967295
 80029a2:	2201      	movs	r2, #1
 80029a4:	4650      	mov	r0, sl
	for (i = 0; i < 4; ++i)
 80029a6:	3408      	adds	r4, #8
		HAL_SPI_Transmit(&hspi2, &data_rear, 1, HAL_MAX_DELAY);
 80029a8:	f10d 0107 	add.w	r1, sp, #7
		uint8_t data_rear = (rear >> (8u*i)) & 0xFF;
 80029ac:	f88d c007 	strb.w	ip, [sp, #7]
		HAL_SPI_Transmit(&hspi2, &data_rear, 1, HAL_MAX_DELAY);
 80029b0:	f00d fc01 	bl	80101b6 <HAL_SPI_Transmit>
	for (i = 0; i < 4; ++i)
 80029b4:	2c20      	cmp	r4, #32
 80029b6:	d1f0      	bne.n	800299a <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x76>
	}

	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_SET);
 80029b8:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f00a fd62 	bl	800d488 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_RESET);
 80029c4:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f00a fd5c 	bl	800d488 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_RESET);
 80029d0:	2200      	movs	r2, #0
 80029d2:	8871      	ldrh	r1, [r6, #2]
 80029d4:	6868      	ldr	r0, [r5, #4]
}
 80029d6:	b003      	add	sp, #12
 80029d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_RESET);
 80029dc:	f00a bd54 	b.w	800d488 <HAL_GPIO_WritePin>
 80029e0:	20000c50 	.word	0x20000c50

080029e4 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>:

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 80029e4:	f06f 4c60 	mvn.w	ip, #3758096384	; 0xe0000000

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80029e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029ec:	e9d0 8900 	ldrd	r8, r9, [r0]
 80029f0:	4692      	mov	sl, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80029f2:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
 80029f6:	ebbc 0fa2 	cmp.w	ip, r2, asr #2
 80029fa:	d058      	beq.n	8002aae <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0xca>
 80029fc:	1093      	asrs	r3, r2, #2
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	461a      	mov	r2, r3
 8002a02:	bf38      	it	cc
 8002a04:	2201      	movcc	r2, #1
 8002a06:	189c      	adds	r4, r3, r2
 8002a08:	4606      	mov	r6, r0
 8002a0a:	460f      	mov	r7, r1
 8002a0c:	d24b      	bcs.n	8002aa6 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0xc2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002a0e:	46a3      	mov	fp, r4
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8002a10:	eba1 0508 	sub.w	r5, r1, r8
 8002a14:	2c00      	cmp	r4, #0
 8002a16:	d13c      	bne.n	8002a92 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0xae>
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8002a18:	f8da 2000 	ldr.w	r2, [sl]
 8002a1c:	eb0b 0305 	add.w	r3, fp, r5
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
 8002a20:	2d00      	cmp	r5, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	dc24      	bgt.n	8002a70 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x8c>
      ptrdiff_t __count = __last - __first;
 8002a26:	eba9 0907 	sub.w	r9, r9, r7
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
 8002a2a:	3504      	adds	r5, #4
      if (__count > 0)
 8002a2c:	f1b9 0f00 	cmp.w	r9, #0
 8002a30:	445d      	add	r5, fp
 8002a32:	dc13      	bgt.n	8002a5c <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x78>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
      return __result + __count;
 8002a34:	444d      	add	r5, r9
	if (__p)
 8002a36:	f1b8 0f00 	cmp.w	r8, #0
 8002a3a:	d104      	bne.n	8002a46 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x62>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
 8002a3c:	e9c6 b500 	strd	fp, r5, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8002a40:	60b4      	str	r4, [r6, #8]
    }
 8002a42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    this->_M_impl._M_end_of_storage - __old_start);
 8002a46:	68b1      	ldr	r1, [r6, #8]
 8002a48:	eba1 0108 	sub.w	r1, r1, r8
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 8002a4c:	4640      	mov	r0, r8
 8002a4e:	f015 f8d5 	bl	8017bfc <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8002a52:	e9c6 b500 	strd	fp, r5, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8002a56:	60b4      	str	r4, [r6, #8]
    }
 8002a58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002a5c:	4628      	mov	r0, r5
 8002a5e:	4639      	mov	r1, r7
 8002a60:	464a      	mov	r2, r9
 8002a62:	f016 fd28 	bl	80194b6 <memcpy>
      return __result + __count;
 8002a66:	444d      	add	r5, r9
 8002a68:	f1b8 0f00 	cmp.w	r8, #0
 8002a6c:	d0e6      	beq.n	8002a3c <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x58>
 8002a6e:	e7ea      	b.n	8002a46 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x62>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002a70:	462a      	mov	r2, r5
 8002a72:	4641      	mov	r1, r8
 8002a74:	4658      	mov	r0, fp
      ptrdiff_t __count = __last - __first;
 8002a76:	eba9 0907 	sub.w	r9, r9, r7
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002a7a:	f016 fc32 	bl	80192e2 <memmove>
	      ++__new_finish;
 8002a7e:	3504      	adds	r5, #4
      if (__count > 0)
 8002a80:	f1b9 0f00 	cmp.w	r9, #0
 8002a84:	445d      	add	r5, fp
 8002a86:	dce9      	bgt.n	8002a5c <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x78>
		    this->_M_impl._M_end_of_storage - __old_start);
 8002a88:	68b1      	ldr	r1, [r6, #8]
      return __result + __count;
 8002a8a:	444d      	add	r5, r9
 8002a8c:	eba1 0108 	sub.w	r1, r1, r8
      _M_deallocate(pointer __p, size_t __n)
 8002a90:	e7dc      	b.n	8002a4c <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x68>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002a92:	4564      	cmp	r4, ip
 8002a94:	bf28      	it	cs
 8002a96:	4664      	movcs	r4, ip
 8002a98:	00a4      	lsls	r4, r4, #2
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	f015 f8b0 	bl	8017c00 <_Znwj>
 8002aa0:	4683      	mov	fp, r0
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8002aa2:	4404      	add	r4, r0
 8002aa4:	e7b8      	b.n	8002a18 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x34>
 8002aa6:	4c03      	ldr	r4, [pc, #12]	; (8002ab4 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0xd0>)
 8002aa8:	eba1 0508 	sub.w	r5, r1, r8
      _M_allocate(size_t __n)
 8002aac:	e7f5      	b.n	8002a9a <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0xb6>
	  __throw_length_error(__N(__s));
 8002aae:	4802      	ldr	r0, [pc, #8]	; (8002ab8 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0xd4>)
 8002ab0:	f015 f8bd 	bl	8017c2e <_ZSt20__throw_length_errorPKc>
 8002ab4:	7ffffffc 	.word	0x7ffffffc
 8002ab8:	0801a8d4 	.word	0x0801a8d4

08002abc <_Z14LineSensorTaskv>:
	}
	HAL_GPIO_WritePin(ports[adc_ic_index], pins[adc_ic_index], GPIO_PIN_SET);

}
void LineSensorTask(void)
{
 8002abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ac0:	ed2d 8b04 	vpush	{d8-d9}
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f8df 82ec 	ldr.w	r8, [pc, #748]	; 8002db4 <_Z14LineSensorTaskv+0x2f8>
 8002aca:	b095      	sub	sp, #84	; 0x54
 8002acc:	e9cd 3808 	strd	r3, r8, [sp, #32]
 8002ad0:	f8cd 801c 	str.w	r8, [sp, #28]
 8002ad4:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 8002ad8:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
#else
	uint8_t j;
	int8_t i;
	for(i = 0; i < 4; ++i)
	{
		TurnOnInfraLEDs(infra_le_ports, infra_le_pins, infra_oe_ports, infra_le_pins, i);
 8002adc:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8002ae0:	4aa5      	ldr	r2, [pc, #660]	; (8002d78 <_Z14LineSensorTaskv+0x2bc>)
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	4ba5      	ldr	r3, [pc, #660]	; (8002d7c <_Z14LineSensorTaskv+0x2c0>)
 8002ae6:	48a6      	ldr	r0, [pc, #664]	; (8002d80 <_Z14LineSensorTaskv+0x2c4>)
 8002ae8:	4619      	mov	r1, r3
 8002aea:	f7ff fed9 	bl	80028a0 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h>

		uint32_t delay_start = __HAL_TIM_GetCounter(&htim6);
 8002aee:	4ba5      	ldr	r3, [pc, #660]	; (8002d84 <_Z14LineSensorTaskv+0x2c8>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	6a51      	ldr	r1, [r2, #36]	; 0x24
		while((__HAL_TIM_GetCounter(&htim6) - delay_start) < INFRA_WAIT_TIME);
 8002af4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002af6:	1a5b      	subs	r3, r3, r1
 8002af8:	2b95      	cmp	r3, #149	; 0x95
 8002afa:	d9fb      	bls.n	8002af4 <_Z14LineSensorTaskv+0x38>
 8002afc:	4ba2      	ldr	r3, [pc, #648]	; (8002d88 <_Z14LineSensorTaskv+0x2cc>)
 8002afe:	9f07      	ldr	r7, [sp, #28]
 8002b00:	9303      	str	r3, [sp, #12]
 8002b02:	4ba2      	ldr	r3, [pc, #648]	; (8002d8c <_Z14LineSensorTaskv+0x2d0>)
 8002b04:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 8002db8 <_Z14LineSensorTaskv+0x2fc>
 8002b08:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 8002dbc <_Z14LineSensorTaskv+0x300>
		HAL_SPI_Transmit(&hspi1, tmp, 2, HAL_MAX_DELAY);
 8002b0c:	4da0      	ldr	r5, [pc, #640]	; (8002d90 <_Z14LineSensorTaskv+0x2d4>)
 8002b0e:	9304      	str	r3, [sp, #16]
	uint8_t tmp[2] = {0, 0};
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	HAL_GPIO_WritePin(ports[adc_ic_index], pins[adc_ic_index], GPIO_PIN_RESET);
 8002b18:	9b04      	ldr	r3, [sp, #16]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002b20:	2400      	movs	r4, #0
 8002b22:	9304      	str	r3, [sp, #16]
 8002b24:	9b03      	ldr	r3, [sp, #12]
 8002b26:	ae0c      	add	r6, sp, #48	; 0x30
 8002b28:	f853 0b04 	ldr.w	r0, [r3], #4
 8002b2c:	9303      	str	r3, [sp, #12]
 8002b2e:	f00a fcab 	bl	800d488 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, tmp, 2, HAL_MAX_DELAY);
 8002b32:	f04f 33ff 	mov.w	r3, #4294967295
 8002b36:	2202      	movs	r2, #2
		tmp[0] = i << 3u;
 8002b38:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
		HAL_SPI_Transmit(&hspi1, tmp, 2, HAL_MAX_DELAY);
 8002b3c:	a90b      	add	r1, sp, #44	; 0x2c
 8002b3e:	4628      	mov	r0, r5
	for(i = 0; i < 8; ++i)
 8002b40:	3408      	adds	r4, #8
		HAL_SPI_Transmit(&hspi1, tmp, 2, HAL_MAX_DELAY);
 8002b42:	f00d fb38 	bl	80101b6 <HAL_SPI_Transmit>
	for(i = 0; i < 8; ++i)
 8002b46:	b2e4      	uxtb	r4, r4
		HAL_SPI_Receive(&hspi1, &res[i*2], 2, HAL_MAX_DELAY);
 8002b48:	4631      	mov	r1, r6
 8002b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b4e:	2202      	movs	r2, #2
 8002b50:	4628      	mov	r0, r5
 8002b52:	f00d fc9e 	bl	8010492 <HAL_SPI_Receive>
	for(i = 0; i < 8; ++i)
 8002b56:	2c40      	cmp	r4, #64	; 0x40
 8002b58:	f106 0602 	add.w	r6, r6, #2
 8002b5c:	d1e9      	bne.n	8002b32 <_Z14LineSensorTaskv+0x76>
	HAL_GPIO_WritePin(ports[adc_ic_index], pins[adc_ic_index], GPIO_PIN_SET);
 8002b5e:	9b04      	ldr	r3, [sp, #16]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f833 1c02 	ldrh.w	r1, [r3, #-2]
 8002b66:	9b03      	ldr	r3, [sp, #12]
	HAL_GPIO_WritePin(ports[adc_ic_index], pins[adc_ic_index], GPIO_PIN_RESET);
 8002b68:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(ports[adc_ic_index], pins[adc_ic_index], GPIO_PIN_SET);
 8002b6a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8002b6e:	f00a fc8b 	bl	800d488 <HAL_GPIO_WritePin>
	uint8_t tmp[2] = {0, 0};
 8002b72:	f04f 0300 	mov.w	r3, #0
	HAL_GPIO_WritePin(ports[adc_ic_index], pins[adc_ic_index], GPIO_PIN_RESET);
 8002b76:	2200      	movs	r2, #0
 8002b78:	f8b8 1000 	ldrh.w	r1, [r8]
 8002b7c:	f8db 0000 	ldr.w	r0, [fp]
	uint8_t tmp[2] = {0, 0};
 8002b80:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	HAL_GPIO_WritePin(ports[adc_ic_index], pins[adc_ic_index], GPIO_PIN_RESET);
 8002b84:	f00a fc80 	bl	800d488 <HAL_GPIO_WritePin>
	for(i = 0; i < 8; ++i)
 8002b88:	e9cd 8b05 	strd	r8, fp, [sp, #20]
	HAL_GPIO_WritePin(ports[adc_ic_index], pins[adc_ic_index], GPIO_PIN_RESET);
 8002b8c:	ae10      	add	r6, sp, #64	; 0x40
		HAL_SPI_Transmit(&hspi1, tmp, 2, HAL_MAX_DELAY);
 8002b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b92:	2202      	movs	r2, #2
		tmp[0] = i << 3u;
 8002b94:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
		HAL_SPI_Transmit(&hspi1, tmp, 2, HAL_MAX_DELAY);
 8002b98:	a90b      	add	r1, sp, #44	; 0x2c
 8002b9a:	4628      	mov	r0, r5
	for(i = 0; i < 8; ++i)
 8002b9c:	3408      	adds	r4, #8
		HAL_SPI_Transmit(&hspi1, tmp, 2, HAL_MAX_DELAY);
 8002b9e:	f00d fb0a 	bl	80101b6 <HAL_SPI_Transmit>
	for(i = 0; i < 8; ++i)
 8002ba2:	b2e4      	uxtb	r4, r4
		HAL_SPI_Receive(&hspi1, &res[i*2], 2, HAL_MAX_DELAY);
 8002ba4:	4631      	mov	r1, r6
 8002ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8002baa:	2202      	movs	r2, #2
 8002bac:	4628      	mov	r0, r5
 8002bae:	f00d fc70 	bl	8010492 <HAL_SPI_Receive>
	for(i = 0; i < 8; ++i)
 8002bb2:	2c40      	cmp	r4, #64	; 0x40
 8002bb4:	f106 0602 	add.w	r6, r6, #2
 8002bb8:	d1e9      	bne.n	8002b8e <_Z14LineSensorTaskv+0xd2>
	HAL_GPIO_WritePin(ports[adc_ic_index], pins[adc_ic_index], GPIO_PIN_SET);
 8002bba:	9b05      	ldr	r3, [sp, #20]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	8819      	ldrh	r1, [r3, #0]
 8002bc0:	9b06      	ldr	r3, [sp, #24]
 8002bc2:	f10b 0b04 	add.w	fp, fp, #4
 8002bc6:	6818      	ldr	r0, [r3, #0]
 8002bc8:	f00a fc5e 	bl	800d488 <HAL_GPIO_WritePin>
			uint8_t adc_rear_values[16];
			ReadADCValues(front_adc_cs_ports, front_adc_cs_pins, j, adc_front_values);
			ReadADCValues(rear_adc_cs_ports, rear_adc_cs_pins, j, adc_rear_values);

			// i = id of LED, j = id of ic, adc_ic_values contains the 8 adc values from one ic
			ls_data.adc_values_f[j*8 + i] = (uint16_t)(adc_front_values[i*2] << 8u) | (adc_front_values[i*2+1]);
 8002bcc:	f89a 2000 	ldrb.w	r2, [sl]
 8002bd0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8002bd4:	f108 0802 	add.w	r8, r8, #2
 8002bd8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002bdc:	803b      	strh	r3, [r7, #0]
			ls_data.adc_values_f[j*8 + i + 4] = (uint16_t)(adc_front_values[(i*2) + 8] << 8u) | (adc_front_values[(i*2) + 8 + 1]);
 8002bde:	f89a 2008 	ldrb.w	r2, [sl, #8]
 8002be2:	f89a 3009 	ldrb.w	r3, [sl, #9]
		for(j = 0; j < 4; ++j)
 8002be6:	3710      	adds	r7, #16
			ls_data.adc_values_f[j*8 + i + 4] = (uint16_t)(adc_front_values[(i*2) + 8] << 8u) | (adc_front_values[(i*2) + 8 + 1]);
 8002be8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002bec:	f827 3c08 	strh.w	r3, [r7, #-8]

			ls_data.adc_values_r[j*8 + i] = (uint16_t)(adc_rear_values[i*2] << 8u) | (adc_rear_values[i*2+1]);
 8002bf0:	f899 2000 	ldrb.w	r2, [r9]
 8002bf4:	f899 3001 	ldrb.w	r3, [r9, #1]
 8002bf8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002bfc:	863b      	strh	r3, [r7, #48]	; 0x30
			ls_data.adc_values_r[j*8 + i + 4] = (uint16_t)(adc_rear_values[(i*2) + 8] << 8u) | (adc_rear_values[(i*2) + 8 + 1]);
 8002bfe:	f899 2008 	ldrb.w	r2, [r9, #8]
 8002c02:	f899 3009 	ldrb.w	r3, [r9, #9]
 8002c06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002c0a:	873b      	strh	r3, [r7, #56]	; 0x38
		for(j = 0; j < 4; ++j)
 8002c0c:	4a61      	ldr	r2, [pc, #388]	; (8002d94 <_Z14LineSensorTaskv+0x2d8>)
 8002c0e:	9b03      	ldr	r3, [sp, #12]
 8002c10:	4293      	cmp	r3, r2
 8002c12:	f47f af7d 	bne.w	8002b10 <_Z14LineSensorTaskv+0x54>
	for(i = 0; i < 4; ++i)
 8002c16:	9c08      	ldr	r4, [sp, #32]
 8002c18:	9b07      	ldr	r3, [sp, #28]
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_SET);
 8002c1a:	4d58      	ldr	r5, [pc, #352]	; (8002d7c <_Z14LineSensorTaskv+0x2c0>)
 8002c1c:	4e56      	ldr	r6, [pc, #344]	; (8002d78 <_Z14LineSensorTaskv+0x2bc>)
	for(i = 0; i < 4; ++i)
 8002c1e:	3302      	adds	r3, #2
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_SET);
 8002c20:	2201      	movs	r2, #1
 8002c22:	8829      	ldrh	r1, [r5, #0]
 8002c24:	6830      	ldr	r0, [r6, #0]
	for(i = 0; i < 4; ++i)
 8002c26:	3401      	adds	r4, #1
 8002c28:	9307      	str	r3, [sp, #28]
 8002c2a:	9408      	str	r4, [sp, #32]
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_SET);
 8002c2c:	f00a fc2c 	bl	800d488 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_SET);
 8002c30:	2201      	movs	r2, #1
 8002c32:	8869      	ldrh	r1, [r5, #2]
 8002c34:	6870      	ldr	r0, [r6, #4]
 8002c36:	f00a fc27 	bl	800d488 <HAL_GPIO_WritePin>
	for(i = 0; i < 4; ++i)
 8002c3a:	2c04      	cmp	r4, #4
 8002c3c:	f10a 0a02 	add.w	sl, sl, #2
 8002c40:	f109 0902 	add.w	r9, r9, #2
 8002c44:	f47f af4a 	bne.w	8002adc <_Z14LineSensorTaskv+0x20>
		}
		if(ls_data.adc_values_r[i] > ls_data.adc_values_r[rear_max_index])
		{
			rear_max_index = i;
		}
		ls_data.front_detection[i] = true;
 8002c48:	221e      	movs	r2, #30
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	4852      	ldr	r0, [pc, #328]	; (8002d98 <_Z14LineSensorTaskv+0x2dc>)
 8002c4e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8002c52:	f016 fb60 	bl	8019316 <memset>
		ls_data.rear_detection[i] = true;
 8002c56:	221e      	movs	r2, #30
 8002c58:	2101      	movs	r1, #1
 8002c5a:	4850      	ldr	r0, [pc, #320]	; (8002d9c <_Z14LineSensorTaskv+0x2e0>)
 8002c5c:	f016 fb5b 	bl	8019316 <memset>
	}

	ls_data.front_detection[0] = true;
 8002c60:	2301      	movs	r3, #1
	ls_data.front_detection[31] = true;
 8002c62:	f240 1001 	movw	r0, #257	; 0x101
 8002c66:	4a4c      	ldr	r2, [pc, #304]	; (8002d98 <_Z14LineSensorTaskv+0x2dc>)
 8002c68:	f8a8 009f 	strh.w	r0, [r8, #159]	; 0x9f
 8002c6c:	ed98 7a30 	vldr	s14, [r8, #192]	; 0xc0
 8002c70:	edd8 6a31 	vldr	s13, [r8, #196]	; 0xc4
	ls_data.front_detection[0] = true;
 8002c74:	f888 3080 	strb.w	r3, [r8, #128]	; 0x80
	ls_data.rear_detection[0] = true;
	ls_data.rear_detection[31] = true;
 8002c78:	f888 30bf 	strb.w	r3, [r8, #191]	; 0xbf
 8002c7c:	f1a2 0881 	sub.w	r8, r2, #129	; 0x81
	for(i = 1; i < 31; ++i)
	{
		ls_data.position_front += (float)((i - 16.0f/* - front_max_index*/) * ls_data.adc_values_f[i]);
 8002c80:	eeb3 5a00 	vmov.f32	s10, #48	; 0x41800000  16.0
		ls_data.position_rear += (float)((i - 16.0f/* - rear_max_index*/) * ls_data.adc_values_r[i]);
		denominator_f += (float)(ls_data.adc_values_f[i]);
		denominator_r += (float)(ls_data.adc_values_r[i]);
		if(ls_data.adc_values_f[i] > 2000)
		{
			ls_data.front_detection[i] = false;
 8002c84:	2700      	movs	r7, #0
	ls_data.rear_detection[31] = true;
 8002c86:	4611      	mov	r1, r2
 8002c88:	4640      	mov	r0, r8
 8002c8a:	f102 061e 	add.w	r6, r2, #30
 8002c8e:	1a9d      	subs	r5, r3, r2
		ls_data.position_front += (float)((i - 16.0f/* - front_max_index*/) * ls_data.adc_values_f[i]);
 8002c90:	f830 4f02 	ldrh.w	r4, [r0, #2]!
 8002c94:	186b      	adds	r3, r5, r1
 8002c96:	b25b      	sxtb	r3, r3
 8002c98:	ee07 3a90 	vmov	s15, r3
 8002c9c:	ee06 4a10 	vmov	s12, r4
		ls_data.position_rear += (float)((i - 16.0f/* - rear_max_index*/) * ls_data.adc_values_r[i]);
 8002ca0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
		ls_data.position_front += (float)((i - 16.0f/* - front_max_index*/) * ls_data.adc_values_f[i]);
 8002ca4:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8002ca8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		ls_data.position_rear += (float)((i - 16.0f/* - rear_max_index*/) * ls_data.adc_values_r[i]);
 8002cac:	ee06 3a10 	vmov	s12, r3
		ls_data.position_front += (float)((i - 16.0f/* - front_max_index*/) * ls_data.adc_values_f[i]);
 8002cb0:	ee77 7ac5 	vsub.f32	s15, s15, s10
		ls_data.position_rear += (float)((i - 16.0f/* - rear_max_index*/) * ls_data.adc_values_r[i]);
 8002cb4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
		if(ls_data.adc_values_f[i] > 2000)
 8002cb8:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
			ls_data.front_detection[i] = false;
 8002cbc:	bf88      	it	hi
 8002cbe:	700f      	strbhi	r7, [r1, #0]

		}

		if(ls_data.adc_values_r[i] > 2000)
 8002cc0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
		{
			ls_data.rear_detection[i] = false;
 8002cc4:	bf88      	it	hi
 8002cc6:	f881 7020 	strbhi.w	r7, [r1, #32]
	for(i = 1; i < 31; ++i)
 8002cca:	3101      	adds	r1, #1
 8002ccc:	428e      	cmp	r6, r1
		ls_data.position_front += (float)((i - 16.0f/* - front_max_index*/) * ls_data.adc_values_f[i]);
 8002cce:	eea5 7aa7 	vfma.f32	s14, s11, s15
		ls_data.position_rear += (float)((i - 16.0f/* - rear_max_index*/) * ls_data.adc_values_r[i]);
 8002cd2:	eee6 6a27 	vfma.f32	s13, s12, s15
	for(i = 1; i < 31; ++i)
 8002cd6:	d1db      	bne.n	8002c90 <_Z14LineSensorTaskv+0x1d4>
 8002cd8:	edc8 6a31 	vstr	s13, [r8, #196]	; 0xc4
 8002cdc:	ed88 7a30 	vstr	s14, [r8, #192]	; 0xc0

	for(i = 2; i < SENSOR_COUNT - 2; ++i)
	{
		if((ls_data.front_detection[i - 1] == true) && (ls_data.front_detection[i + 1] == true))
		{
			ls_data.front_detection[i] = true;
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	492f      	ldr	r1, [pc, #188]	; (8002da0 <_Z14LineSensorTaskv+0x2e4>)
		if((ls_data.front_detection[i - 1] == true) && (ls_data.front_detection[i + 1] == true))
 8002ce4:	f812 3b01 	ldrb.w	r3, [r2], #1
 8002ce8:	b113      	cbz	r3, 8002cf0 <_Z14LineSensorTaskv+0x234>
 8002cea:	7853      	ldrb	r3, [r2, #1]
 8002cec:	b103      	cbz	r3, 8002cf0 <_Z14LineSensorTaskv+0x234>
			ls_data.front_detection[i] = true;
 8002cee:	7010      	strb	r0, [r2, #0]
		}

		if((ls_data.rear_detection[i - 1] == true) && (ls_data.rear_detection[i + 1] == true))
 8002cf0:	7fd3      	ldrb	r3, [r2, #31]
 8002cf2:	b123      	cbz	r3, 8002cfe <_Z14LineSensorTaskv+0x242>
 8002cf4:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8002cf8:	b10b      	cbz	r3, 8002cfe <_Z14LineSensorTaskv+0x242>
		{
			ls_data.rear_detection[i] = true;
 8002cfa:	f882 0020 	strb.w	r0, [r2, #32]
	for(i = 2; i < SENSOR_COUNT - 2; ++i)
 8002cfe:	428a      	cmp	r2, r1
 8002d00:	d1f0      	bne.n	8002ce4 <_Z14LineSensorTaskv+0x228>
	uint32_t led_rear = 0u;
 8002d02:	2700      	movs	r7, #0
 8002d04:	f06f 057e 	mvn.w	r5, #126	; 0x7e
	uint32_t led_front = 0u;
 8002d08:	46bc      	mov	ip, r7

	for(i = 1; i < 31; ++i)
	{
		if(ls_data.front_detection[i] == false)
		{
			led_front |= 0x80000000 >> (i);
 8002d0a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002d0e:	4b25      	ldr	r3, [pc, #148]	; (8002da4 <_Z14LineSensorTaskv+0x2e8>)
 8002d10:	f1a3 0280 	sub.w	r2, r3, #128	; 0x80
 8002d14:	f103 061e 	add.w	r6, r3, #30
 8002d18:	1aad      	subs	r5, r5, r2
		}
		if(ls_data.rear_detection[i] == false)
		{
			led_rear |= 0x80000000 >> (i);
 8002d1a:	18ea      	adds	r2, r5, r3
		if(ls_data.front_detection[i] == false)
 8002d1c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
			led_front |= 0x80000000 >> (i);
 8002d20:	fa21 f402 	lsr.w	r4, r1, r2
		if(ls_data.front_detection[i] == false)
 8002d24:	b908      	cbnz	r0, 8002d2a <_Z14LineSensorTaskv+0x26e>
			led_front |= 0x80000000 >> (i);
 8002d26:	ea4c 0c04 	orr.w	ip, ip, r4
		if(ls_data.rear_detection[i] == false)
 8002d2a:	f893 0020 	ldrb.w	r0, [r3, #32]
			led_rear |= 0x80000000 >> (i);
 8002d2e:	fa21 f202 	lsr.w	r2, r1, r2
		if(ls_data.rear_detection[i] == false)
 8002d32:	b900      	cbnz	r0, 8002d36 <_Z14LineSensorTaskv+0x27a>
			led_rear |= 0x80000000 >> (i);
 8002d34:	4317      	orrs	r7, r2
	for(i = 1; i < 31; ++i)
 8002d36:	429e      	cmp	r6, r3
 8002d38:	d1ef      	bne.n	8002d1a <_Z14LineSensorTaskv+0x25e>
	uint32_t led_front = 0u;
 8002d3a:	f04f 0b21 	mov.w	fp, #33	; 0x21
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8002d3e:	e9d8 3232 	ldrd	r3, r2, [r8, #200]	; 0xc8
 8002d42:	4293      	cmp	r3, r2
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
 8002d44:	bf18      	it	ne
 8002d46:	f8c8 30cc 	strne.w	r3, [r8, #204]	; 0xcc
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8002d4a:	e9d8 3235 	ldrd	r3, r2, [r8, #212]	; 0xd4
 8002d4e:	4293      	cmp	r3, r2
				// calculate the position of the line relative to the center of the sensor
				//float line_position = cluster_center - 16.5f;
				//line_position = -1.0f * line_position * SENSOR_WIDTH / (SENSOR_COUNT - 1);
				float line_position = 0.0f;
				float denominator = 0.0f;
				for(i = cluster_start_front + 1; i <= cluster_end_front + 1; ++i)
 8002d50:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8002da8 <_Z14LineSensorTaskv+0x2ec>
				{
					line_position += ls_data.adc_values_f[i] * i;
					denominator += ls_data.adc_values_f[i];
				}
				line_position = -1.0f * (((line_position / denominator) - 16.5f) * SENSOR_WIDTH / (SENSOR_COUNT - 1));
 8002d54:	ed9f 9a15 	vldr	s18, [pc, #84]	; 8002dac <_Z14LineSensorTaskv+0x2f0>
 8002d58:	eddf 8a15 	vldr	s17, [pc, #84]	; 8002db0 <_Z14LineSensorTaskv+0x2f4>
	uint32_t led_front = 0u;
 8002d5c:	f04f 0500 	mov.w	r5, #0
 8002d60:	46da      	mov	sl, fp
 8002d62:	465e      	mov	r6, fp
 8002d64:	465c      	mov	r4, fp
 8002d66:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8002dc0 <_Z14LineSensorTaskv+0x304>
      { _M_erase_at_end(this->_M_impl._M_start); }
 8002d6a:	f8cd c00c 	str.w	ip, [sp, #12]
	    this->_M_impl._M_finish = __pos;
 8002d6e:	bf18      	it	ne
 8002d70:	f8c8 30d8 	strne.w	r3, [r8, #216]	; 0xd8
 8002d74:	e031      	b.n	8002dda <_Z14LineSensorTaskv+0x31e>
 8002d76:	bf00      	nop
 8002d78:	20000054 	.word	0x20000054
 8002d7c:	20000048 	.word	0x20000048
 8002d80:	2000004c 	.word	0x2000004c
 8002d84:	20000dfc 	.word	0x20000dfc
 8002d88:	20000038 	.word	0x20000038
 8002d8c:	20000030 	.word	0x20000030
 8002d90:	20000bec 	.word	0x20000bec
 8002d94:	20000048 	.word	0x20000048
 8002d98:	20000235 	.word	0x20000235
 8002d9c:	20000255 	.word	0x20000255
 8002da0:	20000251 	.word	0x20000251
 8002da4:	20000234 	.word	0x20000234
 8002da8:	7fc00000 	.word	0x7fc00000
 8002dac:	41840000 	.word	0x41840000
 8002db0:	3bd3680d 	.word	0x3bd3680d
 8002db4:	200001b4 	.word	0x200001b4
 8002db8:	2000007c 	.word	0x2000007c
 8002dbc:	20000074 	.word	0x20000074
 8002dc0:	20000233 	.word	0x20000233
 8002dc4:	00000000 	.word	0x00000000
			}
		}

		if (!ls_data.rear_detection[current_idx])
		{
			if (cluster_start_rear == SENSOR_COUNT + 1)
 8002dc8:	f1ba 0f21 	cmp.w	sl, #33	; 0x21
 8002dcc:	46ab      	mov	fp, r5
 8002dce:	d100      	bne.n	8002dd2 <_Z14LineSensorTaskv+0x316>
 8002dd0:	46aa      	mov	sl, r5
	for (current_idx = 0; current_idx < SENSOR_COUNT; current_idx++)
 8002dd2:	3501      	adds	r5, #1
 8002dd4:	b2ed      	uxtb	r5, r5
 8002dd6:	2d20      	cmp	r5, #32
 8002dd8:	d04b      	beq.n	8002e72 <_Z14LineSensorTaskv+0x3b6>
		if (!ls_data.front_detection[current_idx])
 8002dda:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d155      	bne.n	8002e8e <_Z14LineSensorTaskv+0x3d2>
			if (cluster_start_front == SENSOR_COUNT + 1)
 8002de2:	2c21      	cmp	r4, #33	; 0x21
 8002de4:	462e      	mov	r6, r5
 8002de6:	d100      	bne.n	8002dea <_Z14LineSensorTaskv+0x32e>
 8002de8:	462c      	mov	r4, r5
		if (!ls_data.rear_detection[current_idx])
 8002dea:	f899 3020 	ldrb.w	r3, [r9, #32]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0ea      	beq.n	8002dc8 <_Z14LineSensorTaskv+0x30c>
			}
			cluster_end_rear = current_idx;
		}
		else
		{
			if (cluster_start_rear != SENSOR_COUNT + 1)
 8002df2:	f1ba 0f21 	cmp.w	sl, #33	; 0x21
 8002df6:	d0ec      	beq.n	8002dd2 <_Z14LineSensorTaskv+0x316>
				//float line_position = cluster_center - 16.5f;
				//line_position = line_position * SENSOR_WIDTH / (SENSOR_COUNT - 1);
				// add the line position to the vector
				float line_position = 0.0f;
				float denominator = 0.0f;
				for(i = cluster_start_rear + 1; i <= cluster_end_rear + 1; ++i)
 8002df8:	f10a 0301 	add.w	r3, sl, #1
 8002dfc:	f10b 0b01 	add.w	fp, fp, #1
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	fa5f fb8b 	uxtb.w	fp, fp
 8002e06:	455a      	cmp	r2, fp
 8002e08:	b25b      	sxtb	r3, r3
 8002e0a:	f300 8082 	bgt.w	8002f12 <_Z14LineSensorTaskv+0x456>
 8002e0e:	ed5f 6a13 	vldr	s13, [pc, #-76]	; 8002dc4 <_Z14LineSensorTaskv+0x308>
				float denominator = 0.0f;
 8002e12:	eeb0 6a66 	vmov.f32	s12, s13
				{
					line_position += ls_data.adc_values_r[i] * i;
 8002e16:	f102 0120 	add.w	r1, r2, #32
 8002e1a:	f838 1011 	ldrh.w	r1, [r8, r1, lsl #1]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	fb02 f201 	mul.w	r2, r2, r1
					denominator += ls_data.adc_values_r[i];
 8002e24:	ee07 1a90 	vmov	s15, r1
					line_position += ls_data.adc_values_r[i] * i;
 8002e28:	ee07 2a10 	vmov	s14, r2
					denominator += ls_data.adc_values_r[i];
 8002e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
					line_position += ls_data.adc_values_r[i] * i;
 8002e30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002e34:	b25b      	sxtb	r3, r3
				for(i = cluster_start_rear + 1; i <= cluster_end_rear + 1; ++i)
 8002e36:	455b      	cmp	r3, fp
 8002e38:	461a      	mov	r2, r3
					denominator += ls_data.adc_values_r[i];
 8002e3a:	ee36 6a27 	vadd.f32	s12, s12, s15
					line_position += ls_data.adc_values_r[i] * i;
 8002e3e:	ee76 6a87 	vadd.f32	s13, s13, s14
				for(i = cluster_start_rear + 1; i <= cluster_end_rear + 1; ++i)
 8002e42:	dde8      	ble.n	8002e16 <_Z14LineSensorTaskv+0x35a>
				}
				line_position = ((line_position / denominator) - 16.5f) * SENSOR_WIDTH / (SENSOR_COUNT - 1);
 8002e44:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e48:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8002e4c:	ee67 7aa8 	vmul.f32	s15, s15, s17
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8002e50:	e9d8 1336 	ldrd	r1, r3, [r8, #216]	; 0xd8
 8002e54:	4299      	cmp	r1, r3
 8002e56:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 8002e5a:	d04d      	beq.n	8002ef8 <_Z14LineSensorTaskv+0x43c>
 8002e5c:	ece1 7a01 	vstmia	r1!, {s15}
	    ++this->_M_impl._M_finish;
 8002e60:	f8c8 10d8 	str.w	r1, [r8, #216]	; 0xd8

				ls_data.rear.push_back(line_position);
				// reset the cluster start and end
				cluster_start_rear = SENSOR_COUNT + 1;
				cluster_end_rear = SENSOR_COUNT + 1;
 8002e64:	f04f 0b21 	mov.w	fp, #33	; 0x21
	for (current_idx = 0; current_idx < SENSOR_COUNT; current_idx++)
 8002e68:	3501      	adds	r5, #1
 8002e6a:	b2ed      	uxtb	r5, r5
 8002e6c:	2d20      	cmp	r5, #32
				cluster_start_rear = SENSOR_COUNT + 1;
 8002e6e:	46da      	mov	sl, fp
	for (current_idx = 0; current_idx < SENSOR_COUNT; current_idx++)
 8002e70:	d1b3      	bne.n	8002dda <_Z14LineSensorTaskv+0x31e>
			}
		}
	}


	TurnOnLEDs(led_le_ports, led_le_pins, led_oe_ports, led_oe_pins, led_front, led_rear);
 8002e72:	9803      	ldr	r0, [sp, #12]
 8002e74:	4b28      	ldr	r3, [pc, #160]	; (8002f18 <_Z14LineSensorTaskv+0x45c>)
 8002e76:	9000      	str	r0, [sp, #0]
 8002e78:	4a28      	ldr	r2, [pc, #160]	; (8002f1c <_Z14LineSensorTaskv+0x460>)
 8002e7a:	4929      	ldr	r1, [pc, #164]	; (8002f20 <_Z14LineSensorTaskv+0x464>)
 8002e7c:	4829      	ldr	r0, [pc, #164]	; (8002f24 <_Z14LineSensorTaskv+0x468>)
 8002e7e:	9701      	str	r7, [sp, #4]
 8002e80:	f7ff fd50 	bl	8002924 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm>
	//ls_data.position_front = -1.0f * ls_data.position_front * 2.5f / 100.0f / denominator_f;
	//ls_data.position_rear = ls_data.position_rear * 2.5f / 100.0f / denominator_r;


#endif
}
 8002e84:	b015      	add	sp, #84	; 0x54
 8002e86:	ecbd 8b04 	vpop	{d8-d9}
 8002e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (cluster_start_front != SENSOR_COUNT + 1)
 8002e8e:	2c21      	cmp	r4, #33	; 0x21
 8002e90:	d0ab      	beq.n	8002dea <_Z14LineSensorTaskv+0x32e>
				for(i = cluster_start_front + 1; i <= cluster_end_front + 1; ++i)
 8002e92:	3401      	adds	r4, #1
 8002e94:	3601      	adds	r6, #1
 8002e96:	b2e3      	uxtb	r3, r4
 8002e98:	b2f6      	uxtb	r6, r6
 8002e9a:	42b3      	cmp	r3, r6
 8002e9c:	b264      	sxtb	r4, r4
 8002e9e:	dc35      	bgt.n	8002f0c <_Z14LineSensorTaskv+0x450>
 8002ea0:	eddf 6a21 	vldr	s13, [pc, #132]	; 8002f28 <_Z14LineSensorTaskv+0x46c>
				float denominator = 0.0f;
 8002ea4:	eeb0 6a66 	vmov.f32	s12, s13
					line_position += ls_data.adc_values_f[i] * i;
 8002ea8:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8002eac:	3401      	adds	r4, #1
 8002eae:	fb03 f302 	mul.w	r3, r3, r2
					denominator += ls_data.adc_values_f[i];
 8002eb2:	ee07 2a90 	vmov	s15, r2
					line_position += ls_data.adc_values_f[i] * i;
 8002eb6:	ee07 3a10 	vmov	s14, r3
					denominator += ls_data.adc_values_f[i];
 8002eba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
					line_position += ls_data.adc_values_f[i] * i;
 8002ebe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002ec2:	b264      	sxtb	r4, r4
				for(i = cluster_start_front + 1; i <= cluster_end_front + 1; ++i)
 8002ec4:	42b4      	cmp	r4, r6
 8002ec6:	4623      	mov	r3, r4
					denominator += ls_data.adc_values_f[i];
 8002ec8:	ee36 6a27 	vadd.f32	s12, s12, s15
					line_position += ls_data.adc_values_f[i] * i;
 8002ecc:	ee76 6a87 	vadd.f32	s13, s13, s14
				for(i = cluster_start_front + 1; i <= cluster_end_front + 1; ++i)
 8002ed0:	ddea      	ble.n	8002ea8 <_Z14LineSensorTaskv+0x3ec>
				line_position = -1.0f * (((line_position / denominator) - 16.5f) * SENSOR_WIDTH / (SENSOR_COUNT - 1));
 8002ed2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ed6:	ee79 7a67 	vsub.f32	s15, s18, s15
 8002eda:	ee67 7aa8 	vmul.f32	s15, s15, s17
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8002ede:	e9d8 1333 	ldrd	r1, r3, [r8, #204]	; 0xcc
 8002ee2:	4299      	cmp	r1, r3
 8002ee4:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 8002ee8:	d00b      	beq.n	8002f02 <_Z14LineSensorTaskv+0x446>
 8002eea:	ece1 7a01 	vstmia	r1!, {s15}
	    ++this->_M_impl._M_finish;
 8002eee:	f8c8 10cc 	str.w	r1, [r8, #204]	; 0xcc
				cluster_end_front = SENSOR_COUNT + 1;
 8002ef2:	2621      	movs	r6, #33	; 0x21
				cluster_start_front = SENSOR_COUNT + 1;
 8002ef4:	4634      	mov	r4, r6
 8002ef6:	e778      	b.n	8002dea <_Z14LineSensorTaskv+0x32e>
	  _M_realloc_insert(end(), __x);
 8002ef8:	480c      	ldr	r0, [pc, #48]	; (8002f2c <_Z14LineSensorTaskv+0x470>)
 8002efa:	aa10      	add	r2, sp, #64	; 0x40
 8002efc:	f7ff fd72 	bl	80029e4 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>
 8002f00:	e7b0      	b.n	8002e64 <_Z14LineSensorTaskv+0x3a8>
 8002f02:	480b      	ldr	r0, [pc, #44]	; (8002f30 <_Z14LineSensorTaskv+0x474>)
 8002f04:	aa10      	add	r2, sp, #64	; 0x40
 8002f06:	f7ff fd6d 	bl	80029e4 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>
 8002f0a:	e7f2      	b.n	8002ef2 <_Z14LineSensorTaskv+0x436>
				for(i = cluster_start_front + 1; i <= cluster_end_front + 1; ++i)
 8002f0c:	eef0 7a48 	vmov.f32	s15, s16
 8002f10:	e7e5      	b.n	8002ede <_Z14LineSensorTaskv+0x422>
				for(i = cluster_start_rear + 1; i <= cluster_end_rear + 1; ++i)
 8002f12:	eef0 7a48 	vmov.f32	s15, s16
 8002f16:	e79b      	b.n	8002e50 <_Z14LineSensorTaskv+0x394>
 8002f18:	20000068 	.word	0x20000068
 8002f1c:	2000006c 	.word	0x2000006c
 8002f20:	2000005c 	.word	0x2000005c
 8002f24:	20000060 	.word	0x20000060
 8002f28:	00000000 	.word	0x00000000
 8002f2c:	20000288 	.word	0x20000288
 8002f30:	2000027c 	.word	0x2000027c

08002f34 <_GLOBAL__sub_I_ls_data>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002f34:	2200      	movs	r2, #0
 8002f36:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <_GLOBAL__sub_I_ls_data+0x14>)
 8002f38:	e9c3 2232 	strd	r2, r2, [r3, #200]	; 0xc8
 8002f3c:	e9c3 2234 	strd	r2, r2, [r3, #208]	; 0xd0
 8002f40:	e9c3 2236 	strd	r2, r2, [r3, #216]	; 0xd8
}
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	200001b4 	.word	0x200001b4

08002f4c <_GLOBAL__sub_D_ls_data>:
 8002f4c:	b510      	push	{r4, lr}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002f4e:	4c0a      	ldr	r4, [pc, #40]	; (8002f78 <_GLOBAL__sub_D_ls_data+0x2c>)
 8002f50:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
	if (__p)
 8002f54:	b120      	cbz	r0, 8002f60 <_GLOBAL__sub_D_ls_data+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002f56:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
	::operator delete(__p
 8002f5a:	1a09      	subs	r1, r1, r0
 8002f5c:	f014 fe4e 	bl	8017bfc <_ZdlPvj>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002f60:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
	if (__p)
 8002f64:	b130      	cbz	r0, 8002f74 <_GLOBAL__sub_D_ls_data+0x28>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002f66:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
 8002f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f6e:	1a09      	subs	r1, r1, r0
 8002f70:	f014 be44 	b.w	8017bfc <_ZdlPvj>
 8002f74:	bd10      	pop	{r4, pc}
 8002f76:	bf00      	nop
 8002f78:	200001b4 	.word	0x200001b4

08002f7c <_Z16MotorControlTaskv>:
uint32_t tick_counter = 0u;
uint32_t tick_counter_prev = 0u;

void MotorControlTask()
{
	if((usWidth_throttle > 1800) && (usWidth_throttle < 2800))
 8002f7c:	f46f 61e1 	mvn.w	r1, #1800	; 0x708
 8002f80:	f240 32e6 	movw	r2, #998	; 0x3e6
 8002f84:	4b80      	ldr	r3, [pc, #512]	; (8003188 <_Z16MotorControlTaskv+0x20c>)
{
 8002f86:	b570      	push	{r4, r5, r6, lr}
	if((usWidth_throttle > 1800) && (usWidth_throttle < 2800))
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	440b      	add	r3, r1
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	f240 80f3 	bls.w	8003178 <_Z16MotorControlTaskv+0x1fc>
	{
		HAL_GPIO_WritePin(DRIVE_ENABLE_GPIO_Port, DRIVE_ENABLE_Pin, GPIO_PIN_SET);
	}
	else if((motorcontrol.actual_velocity < 0.3f) && (motorcontrol.target_velocity < 0.3f))
 8002f92:	4c7e      	ldr	r4, [pc, #504]	; (800318c <_Z16MotorControlTaskv+0x210>)
 8002f94:	eddf 7a7e 	vldr	s15, [pc, #504]	; 8003190 <_Z16MotorControlTaskv+0x214>
 8002f98:	ed94 7a02 	vldr	s14, [r4, #8]
 8002f9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa4:	f100 80c8 	bmi.w	8003138 <_Z16MotorControlTaskv+0x1bc>
	{
		HAL_GPIO_WritePin(DRIVE_ENABLE_GPIO_Port, DRIVE_ENABLE_Pin, GPIO_PIN_RESET);
	}

	motorcontrol.battery_voltage = ((float)(adc_values.motor_batt_voltage_raw)) / 4096.0f * 3.3f * ANALOG_TO_MOTOR_BATT;
 8002fa8:	4b7a      	ldr	r3, [pc, #488]	; (8003194 <_Z16MotorControlTaskv+0x218>)
	motorcontrol.motor_current = (((float)((adc_values.motor_curr_raw)) / 4096.0f) * 3.3f - MOTOR_CURR_NULL) / MOTOR_CURR_SENSITIVITY;
 8002faa:	ed9f 5a7b 	vldr	s10, [pc, #492]	; 8003198 <_Z16MotorControlTaskv+0x21c>
 8002fae:	885a      	ldrh	r2, [r3, #2]
	motorcontrol.battery_voltage = ((float)(adc_values.motor_batt_voltage_raw)) / 4096.0f * 3.3f * ANALOG_TO_MOTOR_BATT;
 8002fb0:	881b      	ldrh	r3, [r3, #0]
	motorcontrol.motor_current = (((float)((adc_values.motor_curr_raw)) / 4096.0f) * 3.3f - MOTOR_CURR_NULL) / MOTOR_CURR_SENSITIVITY;
 8002fb2:	ee06 2a90 	vmov	s13, r2
	motorcontrol.battery_voltage = ((float)(adc_values.motor_batt_voltage_raw)) / 4096.0f * 3.3f * ANALOG_TO_MOTOR_BATT;
 8002fb6:	ee07 3a10 	vmov	s14, r3
	motorcontrol.motor_current = (((float)((adc_values.motor_curr_raw)) / 4096.0f) * 3.3f - MOTOR_CURR_NULL) / MOTOR_CURR_SENSITIVITY;
 8002fba:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8002fbe:	eddf 7a77 	vldr	s15, [pc, #476]	; 800319c <_Z16MotorControlTaskv+0x220>
	motorcontrol.battery_voltage = ((float)(adc_values.motor_batt_voltage_raw)) / 4096.0f * 3.3f * ANALOG_TO_MOTOR_BATT;
 8002fc2:	eddf 5a77 	vldr	s11, [pc, #476]	; 80031a0 <_Z16MotorControlTaskv+0x224>
	motorcontrol.motor_current = (((float)((adc_values.motor_curr_raw)) / 4096.0f) * 3.3f - MOTOR_CURR_NULL) / MOTOR_CURR_SENSITIVITY;
 8002fc6:	eee6 7a85 	vfma.f32	s15, s13, s10
 8002fca:	ed9f 6a76 	vldr	s12, [pc, #472]	; 80031a4 <_Z16MotorControlTaskv+0x228>
	motorcontrol.battery_voltage = ((float)(adc_values.motor_batt_voltage_raw)) / 4096.0f * 3.3f * ANALOG_TO_MOTOR_BATT;
 8002fce:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	motorcontrol.motor_current = (((float)((adc_values.motor_curr_raw)) / 4096.0f) * 3.3f - MOTOR_CURR_NULL) / MOTOR_CURR_SENSITIVITY;
 8002fd2:	ee67 7a86 	vmul.f32	s15, s15, s12
	motorcontrol.battery_voltage = ((float)(adc_values.motor_batt_voltage_raw)) / 4096.0f * 3.3f * ANALOG_TO_MOTOR_BATT;
 8002fd6:	ee27 7a25 	vmul.f32	s14, s14, s11


	tick_counter_prev = tick_counter;
 8002fda:	4d73      	ldr	r5, [pc, #460]	; (80031a8 <_Z16MotorControlTaskv+0x22c>)
 8002fdc:	4e73      	ldr	r6, [pc, #460]	; (80031ac <_Z16MotorControlTaskv+0x230>)
 8002fde:	682b      	ldr	r3, [r5, #0]
	motorcontrol.battery_voltage = ((float)(adc_values.motor_batt_voltage_raw)) / 4096.0f * 3.3f * ANALOG_TO_MOTOR_BATT;
 8002fe0:	ed84 7a00 	vstr	s14, [r4]
	motorcontrol.motor_current = (((float)((adc_values.motor_curr_raw)) / 4096.0f) * 3.3f - MOTOR_CURR_NULL) / MOTOR_CURR_SENSITIVITY;
 8002fe4:	edc4 7a01 	vstr	s15, [r4, #4]
	tick_counter_prev = tick_counter;
 8002fe8:	6033      	str	r3, [r6, #0]
	tick_counter = HAL_GetTick();
 8002fea:	f007 fff1 	bl	800afd0 <HAL_GetTick>
    float dt = (((float)tick_counter) - ((float)(tick_counter_prev))) / 1000.0f;
 8002fee:	edd6 7a00 	vldr	s15, [r6]
 8002ff2:	ee07 0a10 	vmov	s14, r0
 8002ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ffa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002ffe:	ed9f 6a6c 	vldr	s12, [pc, #432]	; 80031b0 <_Z16MotorControlTaskv+0x234>
 8003002:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003006:	ee27 7a06 	vmul.f32	s14, s14, s12
    {
        // Small value to avoid division by zero
        const float epsilon = std::numeric_limits<float>::epsilon();

        // Check if the time step is very close to zero, return zero output to avoid numerical issues
        if (std::abs(dt) < epsilon) { return 0.0f; }
 800300a:	eddf 6a6a 	vldr	s13, [pc, #424]	; 80031b4 <_Z16MotorControlTaskv+0x238>
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 800300e:	eef0 7ac7 	vabs.f32	s15, s14
 8003012:	eef4 7ae6 	vcmpe.f32	s15, s13
 8003016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	motorcontrol.duty_cycle = motorcontrol_pid.update(motorcontrol.target_velocity, motorcontrol.actual_velocity, dt);
 800301a:	ed94 5a03 	vldr	s10, [r4, #12]
 800301e:	edd4 5a02 	vldr	s11, [r4, #8]
	tick_counter = HAL_GetTick();
 8003022:	6028      	str	r0, [r5, #0]
 8003024:	f100 80a2 	bmi.w	800316c <_Z16MotorControlTaskv+0x1f0>

        // Calculate the current error between the setpoint and the process variable
        float error = setpoint - processVariable;

        // Check if a zero-crossing has occurred (change in sign of error)
        bool zeroCrossed = (prevError_ * error) < 0.0f;
 8003028:	4b63      	ldr	r3, [pc, #396]	; (80031b8 <_Z16MotorControlTaskv+0x23c>)
        float error = setpoint - processVariable;
 800302a:	ee35 5a65 	vsub.f32	s10, s10, s11
        bool zeroCrossed = (prevError_ * error) < 0.0f;
 800302e:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003032:	ee65 7a26 	vmul.f32	s15, s10, s13

        // Update the integral term if no zero-crossing has occurred
        if (!zeroCrossed)
 8003036:	eef5 7ac0 	vcmpe.f32	s15, #0.0

            // Calculate the adjustment needed due to saturation
            float deltaIntegral = unsaturatedIntegral - integral_;

            // Back-calculation: Adjust the integral term based on the impact of saturation
            integral_ += (error * dt)/* - deltaIntegral*/;
 800303a:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
        if (!zeroCrossed)
 800303e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  template<typename _Tp>
    constexpr const _Tp&
    clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)
    {
      __glibcxx_assert(!(__hi < __lo));
      return (__val < __lo) ? __lo : (__hi < __val) ? __hi : __val;
 8003042:	edd3 7a05 	vldr	s15, [r3, #20]
            integral_ += (error * dt)/* - deltaIntegral*/;
 8003046:	bfa8      	it	ge
 8003048:	eee7 5a05 	vfmage.f32	s11, s14, s10
 800304c:	eef4 7ae5 	vcmpe.f32	s15, s11
 8003050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003054:	d97e      	bls.n	8003154 <_Z16MotorControlTaskv+0x1d8>
 8003056:	eef0 5a67 	vmov.f32	s11, s15
        // Deadband: Scale the integral term based on the proximity to the deadband
        //float deadbandFactor = 1.0f - std::min(1.0f, std::abs(error) / (deadband_ + epsilon));
        //integral_ *= deadbandFactor;

        // Calculate the derivative term with low-pass filtering
        derivative_ = (1.0f - derivativeFilterAlpha_) * derivative_ + derivativeFilterAlpha_ * (error - prevError_) / dt;
 800305a:	ed93 4a08 	vldr	s8, [r3, #32]
 800305e:	ee35 6a66 	vsub.f32	s12, s10, s13

        // Calculate the PID controller output using proportional, integral, and derivative terms
        float output = kp_ * (1 + dt / (tau_ + T_ + epsilon)) * error + ki_ * (dt / (T_ + epsilon)) * integral_ - kd_ * derivative_;
 8003062:	ed93 3a04 	vldr	s6, [r3, #16]
        derivative_ = (1.0f - derivativeFilterAlpha_) * derivative_ + derivativeFilterAlpha_ * (error - prevError_) / dt;
 8003066:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800306a:	ee26 6a04 	vmul.f32	s12, s12, s8
        float output = kp_ * (1 + dt / (tau_ + T_ + epsilon)) * error + ki_ * (dt / (T_ + epsilon)) * integral_ - kd_ * derivative_;
 800306e:	edd3 4a03 	vldr	s9, [r3, #12]
 8003072:	eddf 2a50 	vldr	s5, [pc, #320]	; 80031b4 <_Z16MotorControlTaskv+0x238>
 8003076:	ee73 4a24 	vadd.f32	s9, s6, s9
        derivative_ = (1.0f - derivativeFilterAlpha_) * derivative_ + derivativeFilterAlpha_ * (error - prevError_) / dt;
 800307a:	ee71 3ac4 	vsub.f32	s7, s3, s8
 800307e:	ee86 4a07 	vdiv.f32	s8, s12, s14
 8003082:	edd3 0a0b 	vldr	s1, [r3, #44]	; 0x2c
        float output = kp_ * (1 + dt / (tau_ + T_ + epsilon)) * error + ki_ * (dt / (T_ + epsilon)) * integral_ - kd_ * derivative_;
 8003086:	ee34 6aa2 	vadd.f32	s12, s9, s5
        derivative_ = (1.0f - derivativeFilterAlpha_) * derivative_ + derivativeFilterAlpha_ * (error - prevError_) / dt;
 800308a:	eef0 4a44 	vmov.f32	s9, s8
        float output = kp_ * (1 + dt / (tau_ + T_ + epsilon)) * error + ki_ * (dt / (T_ + epsilon)) * integral_ - kd_ * derivative_;
 800308e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003092:	ee87 4a06 	vdiv.f32	s8, s14, s12
        derivative_ = (1.0f - derivativeFilterAlpha_) * derivative_ + derivativeFilterAlpha_ * (error - prevError_) / dt;
 8003096:	eee3 4aa0 	vfma.f32	s9, s7, s1
 800309a:	ed93 2a00 	vldr	s4, [r3]
        float output = kp_ * (1 + dt / (tau_ + T_ + epsilon)) * error + ki_ * (dt / (T_ + epsilon)) * integral_ - kd_ * derivative_;
 800309e:	ee33 3a22 	vadd.f32	s6, s6, s5
 80030a2:	ed93 1a01 	vldr	s2, [r3, #4]
 80030a6:	eec7 2a03 	vdiv.f32	s5, s14, s6
 80030aa:	ee25 2a02 	vmul.f32	s4, s10, s4
 80030ae:	ee26 7ae4 	vnmul.f32	s14, s13, s9
 80030b2:	ee74 6a21 	vadd.f32	s13, s8, s3
 80030b6:	ee22 6a81 	vmul.f32	s12, s5, s2
 80030ba:	eea6 7a82 	vfma.f32	s14, s13, s4
 80030be:	eea5 7a86 	vfma.f32	s14, s11, s12
 80030c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        integral_ = std::clamp(integral_, minOutput_, maxOutput_);
 80030ca:	edc3 5a0a 	vstr	s11, [r3, #40]	; 0x28
        derivative_ = (1.0f - derivativeFilterAlpha_) * derivative_ + derivativeFilterAlpha_ * (error - prevError_) / dt;
 80030ce:	edc3 4a0b 	vstr	s9, [r3, #44]	; 0x2c
 80030d2:	d803      	bhi.n	80030dc <_Z16MotorControlTaskv+0x160>
 80030d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80030d8:	fec7 7a67 	vminnm.f32	s15, s14, s15
	motorcontrol.duty_cycle += 0.5f;
 80030dc:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	motorcontrol.duty_cycle = (motorcontrol.duty_cycle > 0.95f) ? 0.95f : motorcontrol.duty_cycle;
 80030e0:	ed9f 6a36 	vldr	s12, [pc, #216]	; 80031bc <_Z16MotorControlTaskv+0x240>
	motorcontrol.duty_cycle += 0.5f;
 80030e4:	ee77 7aa5 	vadd.f32	s15, s15, s11
	motorcontrol.duty_cycle = (motorcontrol.duty_cycle < 0.05f) ? 0.05f : motorcontrol.duty_cycle;
 80030e8:	eddf 6a35 	vldr	s13, [pc, #212]	; 80031c0 <_Z16MotorControlTaskv+0x244>
	motorcontrol.duty_cycle = (motorcontrol.duty_cycle > 0.95f) ? 0.95f : motorcontrol.duty_cycle;
 80030ec:	fec7 7ac6 	vminnm.f32	s15, s15, s12
	motorcontrol.duty_cycle = ((motorcontrol.duty_cycle > 0.47f) && (motorcontrol.duty_cycle < 0.53f)) ? 0.50f : motorcontrol.duty_cycle;
 80030f0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80031c4 <_Z16MotorControlTaskv+0x248>
	motorcontrol.duty_cycle = (motorcontrol.duty_cycle < 0.05f) ? 0.05f : motorcontrol.duty_cycle;
 80030f4:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
	motorcontrol.duty_cycle = ((motorcontrol.duty_cycle > 0.47f) && (motorcontrol.duty_cycle < 0.53f)) ? 0.50f : motorcontrol.duty_cycle;
 80030f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr

        // Output clamping: Limit the output within the specified range
        output = std::clamp(output, minOutput_, maxOutput_);

        // Update the previous error for the next iteration
        prevError_ = error;
 8003100:	ed83 5a09 	vstr	s10, [r3, #36]	; 0x24
 8003104:	d82b      	bhi.n	800315e <_Z16MotorControlTaskv+0x1e2>
		motorcontrol.duty_cycle = 0.5f;

	}
*/
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, motorcontrol.duty_cycle * PWM_COUNTER_PREIOD);
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM_COUNTER_PREIOD - (motorcontrol.duty_cycle * PWM_COUNTER_PREIOD));
 8003106:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, motorcontrol.duty_cycle * PWM_COUNTER_PREIOD);
 800310a:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80031c8 <_Z16MotorControlTaskv+0x24c>
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM_COUNTER_PREIOD - (motorcontrol.duty_cycle * PWM_COUNTER_PREIOD));
 800310e:	ee37 7a67 	vsub.f32	s14, s14, s15
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, motorcontrol.duty_cycle * PWM_COUNTER_PREIOD);
 8003112:	ee67 6a86 	vmul.f32	s13, s15, s12
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM_COUNTER_PREIOD - (motorcontrol.duty_cycle * PWM_COUNTER_PREIOD));
 8003116:	ee27 7a06 	vmul.f32	s14, s14, s12
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, motorcontrol.duty_cycle * PWM_COUNTER_PREIOD);
 800311a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM_COUNTER_PREIOD - (motorcontrol.duty_cycle * PWM_COUNTER_PREIOD));
 800311e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, motorcontrol.duty_cycle * PWM_COUNTER_PREIOD);
 8003122:	ee16 2a90 	vmov	r2, s13
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM_COUNTER_PREIOD - (motorcontrol.duty_cycle * PWM_COUNTER_PREIOD));
 8003126:	ee17 3a10 	vmov	r3, s14
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, motorcontrol.duty_cycle * PWM_COUNTER_PREIOD);
 800312a:	4928      	ldr	r1, [pc, #160]	; (80031cc <_Z16MotorControlTaskv+0x250>)
	motorcontrol.duty_cycle = ((motorcontrol.duty_cycle > 0.47f) && (motorcontrol.duty_cycle < 0.53f)) ? 0.50f : motorcontrol.duty_cycle;
 800312c:	edc4 7a04 	vstr	s15, [r4, #16]
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, motorcontrol.duty_cycle * PWM_COUNTER_PREIOD);
 8003130:	6809      	ldr	r1, [r1, #0]
 8003132:	640a      	str	r2, [r1, #64]	; 0x40
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM_COUNTER_PREIOD - (motorcontrol.duty_cycle * PWM_COUNTER_PREIOD));
 8003134:	634b      	str	r3, [r1, #52]	; 0x34

}
 8003136:	bd70      	pop	{r4, r5, r6, pc}
	else if((motorcontrol.actual_velocity < 0.3f) && (motorcontrol.target_velocity < 0.3f))
 8003138:	ed94 7a03 	vldr	s14, [r4, #12]
 800313c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003144:	f57f af30 	bpl.w	8002fa8 <_Z16MotorControlTaskv+0x2c>
		HAL_GPIO_WritePin(DRIVE_ENABLE_GPIO_Port, DRIVE_ENABLE_Pin, GPIO_PIN_RESET);
 8003148:	2200      	movs	r2, #0
 800314a:	2108      	movs	r1, #8
 800314c:	4820      	ldr	r0, [pc, #128]	; (80031d0 <_Z16MotorControlTaskv+0x254>)
 800314e:	f00a f99b 	bl	800d488 <HAL_GPIO_WritePin>
 8003152:	e729      	b.n	8002fa8 <_Z16MotorControlTaskv+0x2c>
 8003154:	ed93 6a06 	vldr	s12, [r3, #24]
 8003158:	fec5 5ac6 	vminnm.f32	s11, s11, s12
 800315c:	e77d      	b.n	800305a <_Z16MotorControlTaskv+0xde>
	motorcontrol.duty_cycle = ((motorcontrol.duty_cycle > 0.47f) && (motorcontrol.duty_cycle < 0.53f)) ? 0.50f : motorcontrol.duty_cycle;
 800315e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80031d4 <_Z16MotorControlTaskv+0x258>
 8003162:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800316a:	dacc      	bge.n	8003106 <_Z16MotorControlTaskv+0x18a>
 800316c:	f240 3395 	movw	r3, #917	; 0x395
 8003170:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003174:	461a      	mov	r2, r3
 8003176:	e7d8      	b.n	800312a <_Z16MotorControlTaskv+0x1ae>
		HAL_GPIO_WritePin(DRIVE_ENABLE_GPIO_Port, DRIVE_ENABLE_Pin, GPIO_PIN_SET);
 8003178:	2201      	movs	r2, #1
 800317a:	2108      	movs	r1, #8
 800317c:	4814      	ldr	r0, [pc, #80]	; (80031d0 <_Z16MotorControlTaskv+0x254>)
 800317e:	f00a f983 	bl	800d488 <HAL_GPIO_WritePin>
 8003182:	4c02      	ldr	r4, [pc, #8]	; (800318c <_Z16MotorControlTaskv+0x210>)
 8003184:	e710      	b.n	8002fa8 <_Z16MotorControlTaskv+0x2c>
 8003186:	bf00      	nop
 8003188:	200002fc 	.word	0x200002fc
 800318c:	20000294 	.word	0x20000294
 8003190:	3e99999a 	.word	0x3e99999a
 8003194:	20000120 	.word	0x20000120
 8003198:	3a533333 	.word	0x3a533333
 800319c:	bfcb851f 	.word	0xbfcb851f
 80031a0:	3b9e6666 	.word	0x3b9e6666
 80031a4:	42e88ee2 	.word	0x42e88ee2
 80031a8:	200002d8 	.word	0x200002d8
 80031ac:	200002dc 	.word	0x200002dc
 80031b0:	3a83126f 	.word	0x3a83126f
 80031b4:	34000000 	.word	0x34000000
 80031b8:	200002a8 	.word	0x200002a8
 80031bc:	3f733333 	.word	0x3f733333
 80031c0:	3d4ccccd 	.word	0x3d4ccccd
 80031c4:	3ef0a3d7 	.word	0x3ef0a3d7
 80031c8:	44e54000 	.word	0x44e54000
 80031cc:	20000db0 	.word	0x20000db0
 80031d0:	42021400 	.word	0x42021400
 80031d4:	3f07ae14 	.word	0x3f07ae14

080031d8 <_GLOBAL__sub_I_motorcontrol>:
        : kp_(kp), ki_(ki), kd_(kd), tau_(tau), T_(T), minOutput_(minOutput), maxOutput_(maxOutput), deadband_(deadband), derivativeFilterAlpha_(derivativeFilterAlpha)
 80031d8:	4b0d      	ldr	r3, [pc, #52]	; (8003210 <_GLOBAL__sub_I_motorcontrol+0x38>)
 80031da:	480e      	ldr	r0, [pc, #56]	; (8003214 <_GLOBAL__sub_I_motorcontrol+0x3c>)
}
 80031dc:	b500      	push	{lr}
 80031de:	2200      	movs	r2, #0
 80031e0:	f04f 4c3f 	mov.w	ip, #3204448256	; 0xbf000000
 80031e4:	6058      	str	r0, [r3, #4]
 80031e6:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80031ea:	490b      	ldr	r1, [pc, #44]	; (8003218 <_GLOBAL__sub_I_motorcontrol+0x40>)
 80031ec:	f8df e030 	ldr.w	lr, [pc, #48]	; 8003220 <_GLOBAL__sub_I_motorcontrol+0x48>
 80031f0:	60d9      	str	r1, [r3, #12]
 80031f2:	6119      	str	r1, [r3, #16]
 80031f4:	4909      	ldr	r1, [pc, #36]	; (800321c <_GLOBAL__sub_I_motorcontrol+0x44>)
 80031f6:	f8c3 e000 	str.w	lr, [r3]
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	f8c3 c014 	str.w	ip, [r3, #20]
 8003200:	621a      	str	r2, [r3, #32]
 8003202:	625a      	str	r2, [r3, #36]	; 0x24
 8003204:	629a      	str	r2, [r3, #40]	; 0x28
 8003206:	62da      	str	r2, [r3, #44]	; 0x2c
 8003208:	6198      	str	r0, [r3, #24]
 800320a:	61d9      	str	r1, [r3, #28]
 800320c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003210:	200002a8 	.word	0x200002a8
 8003214:	3f333333 	.word	0x3f333333
 8003218:	3ca3d70a 	.word	0x3ca3d70a
 800321c:	3d4ccccd 	.word	0x3d4ccccd
 8003220:	3ea147ae 	.word	0x3ea147ae

08003224 <_Z10Radio_Initv>:
bool flood_arrived = false;


void Radio_Init()
{
	HAL_UART_Receive_IT(&huart4, &radio_rxBuffer[character_pointer], 1);
 8003224:	4b03      	ldr	r3, [pc, #12]	; (8003234 <_Z10Radio_Initv+0x10>)
 8003226:	4904      	ldr	r1, [pc, #16]	; (8003238 <_Z10Radio_Initv+0x14>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2201      	movs	r2, #1
 800322c:	4803      	ldr	r0, [pc, #12]	; (800323c <_Z10Radio_Initv+0x18>)
 800322e:	4419      	add	r1, r3
 8003230:	f00f bf12 	b.w	8013058 <HAL_UART_Receive_IT>
 8003234:	200002e0 	.word	0x200002e0
 8003238:	200002ec 	.word	0x200002ec
 800323c:	20000f28 	.word	0x20000f28

08003240 <HAL_UART_RxCpltCallback>:

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003240:	b510      	push	{r4, lr}
	uint8_t length = character_pointer - 1;
 8003242:	4c1c      	ldr	r4, [pc, #112]	; (80032b4 <HAL_UART_RxCpltCallback+0x74>)
	uint8_t i;
	if (radio_rxBuffer[character_pointer - 1] == '\r')
 8003244:	4a1c      	ldr	r2, [pc, #112]	; (80032b8 <HAL_UART_RxCpltCallback+0x78>)
	uint8_t length = character_pointer - 1;
 8003246:	7823      	ldrb	r3, [r4, #0]
{
 8003248:	b082      	sub	sp, #8
	if (radio_rxBuffer[character_pointer - 1] == '\r')
 800324a:	18d1      	adds	r1, r2, r3
 800324c:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8003250:	280d      	cmp	r0, #13
 8003252:	d009      	beq.n	8003268 <HAL_UART_RxCpltCallback+0x28>
			}
		}

		character_pointer = 0u;
	}
	HAL_UART_Receive_IT(&huart4, &radio_rxBuffer[character_pointer++], 1);
 8003254:	3301      	adds	r3, #1
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2201      	movs	r2, #1
 800325a:	4818      	ldr	r0, [pc, #96]	; (80032bc <HAL_UART_RxCpltCallback+0x7c>)
 800325c:	7023      	strb	r3, [r4, #0]

}
 800325e:	b002      	add	sp, #8
 8003260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Receive_IT(&huart4, &radio_rxBuffer[character_pointer++], 1);
 8003264:	f00f bef8 	b.w	8013058 <HAL_UART_Receive_IT>
	uint8_t length = character_pointer - 1;
 8003268:	3b01      	subs	r3, #1
 800326a:	b2db      	uxtb	r3, r3
		if (length == 1)
 800326c:	2b01      	cmp	r3, #1
 800326e:	d012      	beq.n	8003296 <HAL_UART_RxCpltCallback+0x56>
		if (length == 6)
 8003270:	2b06      	cmp	r3, #6
 8003272:	d10d      	bne.n	8003290 <HAL_UART_RxCpltCallback+0x50>
			if (!strcmp("FLOOD!\r", reinterpret_cast<const char*>(radio_rxBuffer)))
 8003274:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <HAL_UART_RxCpltCallback+0x80>)
 8003276:	6811      	ldr	r1, [r2, #0]
 8003278:	4299      	cmp	r1, r3
 800327a:	d013      	beq.n	80032a4 <HAL_UART_RxCpltCallback+0x64>
				sscanf(reinterpret_cast<const char*>(radio_rxBuffer), "%c%c%c%03d", &pirate_from, &pirate_to, &pirate_next, &pirate_percentage);
 800327c:	4811      	ldr	r0, [pc, #68]	; (80032c4 <HAL_UART_RxCpltCallback+0x84>)
 800327e:	4912      	ldr	r1, [pc, #72]	; (80032c8 <HAL_UART_RxCpltCallback+0x88>)
 8003280:	4b12      	ldr	r3, [pc, #72]	; (80032cc <HAL_UART_RxCpltCallback+0x8c>)
 8003282:	e9cd 1000 	strd	r1, r0, [sp]
 8003286:	4a12      	ldr	r2, [pc, #72]	; (80032d0 <HAL_UART_RxCpltCallback+0x90>)
 8003288:	4912      	ldr	r1, [pc, #72]	; (80032d4 <HAL_UART_RxCpltCallback+0x94>)
 800328a:	480b      	ldr	r0, [pc, #44]	; (80032b8 <HAL_UART_RxCpltCallback+0x78>)
 800328c:	f015 ffb8 	bl	8019200 <siscanf>
		character_pointer = 0u;
 8003290:	2301      	movs	r3, #1
 8003292:	4909      	ldr	r1, [pc, #36]	; (80032b8 <HAL_UART_RxCpltCallback+0x78>)
 8003294:	e7e0      	b.n	8003258 <HAL_UART_RxCpltCallback+0x18>
			countdown_value = radio_rxBuffer[0] - '0';
 8003296:	7813      	ldrb	r3, [r2, #0]
 8003298:	4a0f      	ldr	r2, [pc, #60]	; (80032d8 <HAL_UART_RxCpltCallback+0x98>)
 800329a:	3b30      	subs	r3, #48	; 0x30
 800329c:	7013      	strb	r3, [r2, #0]
		character_pointer = 0u;
 800329e:	4906      	ldr	r1, [pc, #24]	; (80032b8 <HAL_UART_RxCpltCallback+0x78>)
 80032a0:	2301      	movs	r3, #1
 80032a2:	e7d9      	b.n	8003258 <HAL_UART_RxCpltCallback+0x18>
			if (!strcmp("FLOOD!\r", reinterpret_cast<const char*>(radio_rxBuffer)))
 80032a4:	4b0d      	ldr	r3, [pc, #52]	; (80032dc <HAL_UART_RxCpltCallback+0x9c>)
 80032a6:	6852      	ldr	r2, [r2, #4]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d1e7      	bne.n	800327c <HAL_UART_RxCpltCallback+0x3c>
				flood_arrived = true;
 80032ac:	2201      	movs	r2, #1
 80032ae:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <HAL_UART_RxCpltCallback+0xa0>)
 80032b0:	701a      	strb	r2, [r3, #0]
 80032b2:	e7ed      	b.n	8003290 <HAL_UART_RxCpltCallback+0x50>
 80032b4:	200002e0 	.word	0x200002e0
 80032b8:	200002ec 	.word	0x200002ec
 80032bc:	20000f28 	.word	0x20000f28
 80032c0:	4f4f4c46 	.word	0x4f4f4c46
 80032c4:	200002e4 	.word	0x200002e4
 80032c8:	200002e3 	.word	0x200002e3
 80032cc:	200002e8 	.word	0x200002e8
 80032d0:	200002e2 	.word	0x200002e2
 80032d4:	0801a8f8 	.word	0x0801a8f8
 80032d8:	2000008c 	.word	0x2000008c
 80032dc:	000d2144 	.word	0x000d2144
 80032e0:	200002e1 	.word	0x200002e1

080032e4 <_Z16SetSteeringAnglef>:


/* Angle in +90 to -90 degree */
void SetSteeringAngle(float angle)
{
	if((usWidth_throttle > 1800) && (usWidth_throttle < 2800))
 80032e4:	f46f 61e1 	mvn.w	r1, #1800	; 0x708
 80032e8:	f240 32e6 	movw	r2, #998	; 0x3e6
 80032ec:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <_Z16SetSteeringAnglef+0x3c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	440b      	add	r3, r1
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d80e      	bhi.n	8003314 <_Z16SetSteeringAnglef+0x30>
	{
		uint16_t compare = SERVO_NULL + (angle/ 22.5f * SERVO_RANGE);
 80032f6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003324 <_Z16SetSteeringAnglef+0x40>
 80032fa:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8003328 <_Z16SetSteeringAnglef+0x44>
 80032fe:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, compare);	}
 8003306:	4b09      	ldr	r3, [pc, #36]	; (800332c <_Z16SetSteeringAnglef+0x48>)
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	ee17 3a90 	vmov	r3, s15
 800330e:	b29b      	uxth	r3, r3
 8003310:	6353      	str	r3, [r2, #52]	; 0x34
 8003312:	4770      	bx	lr
	else
	{
	    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8003314:	2200      	movs	r2, #0
 8003316:	4b05      	ldr	r3, [pc, #20]	; (800332c <_Z16SetSteeringAnglef+0x48>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	635a      	str	r2, [r3, #52]	; 0x34
	}

}
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	200002fc 	.word	0x200002fc
 8003324:	418e38e4 	.word	0x418e38e4
 8003328:	44960000 	.word	0x44960000
 800332c:	20000e48 	.word	0x20000e48

08003330 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
	// RISING
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8003330:	7f02      	ldrb	r2, [r0, #28]
{
 8003332:	b508      	push	{r3, lr}
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8003334:	2a04      	cmp	r2, #4
 8003336:	d002      	beq.n	800333e <HAL_TIM_IC_CaptureCallback+0xe>
	{
		__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
	}
	//FALLING
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8003338:	2a08      	cmp	r2, #8
 800333a:	d004      	beq.n	8003346 <HAL_TIM_IC_CaptureCallback+0x16>
		float refClock = TIMCLOCK/(PRESCALAR);
		float mFactor = 1000000/refClock;

		usWidth_throttle = falling_value*mFactor;
	}
}
 800333c:	bd08      	pop	{r3, pc}
		__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800333e:	2200      	movs	r2, #0
 8003340:	6803      	ldr	r3, [r0, #0]
 8003342:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003344:	bd08      	pop	{r3, pc}
		falling_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read second value
 8003346:	210c      	movs	r1, #12
 8003348:	f00e feaa 	bl	80120a0 <HAL_TIM_ReadCapturedValue>
		usWidth_throttle = falling_value*mFactor;
 800334c:	ee07 0a90 	vmov	s15, r0
 8003350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		falling_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read second value
 8003358:	4a02      	ldr	r2, [pc, #8]	; (8003364 <HAL_TIM_IC_CaptureCallback+0x34>)
		usWidth_throttle = falling_value*mFactor;
 800335a:	4b03      	ldr	r3, [pc, #12]	; (8003368 <HAL_TIM_IC_CaptureCallback+0x38>)
		falling_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read second value
 800335c:	6010      	str	r0, [r2, #0]
		usWidth_throttle = falling_value*mFactor;
 800335e:	edc3 7a00 	vstr	s15, [r3]
}
 8003362:	bd08      	pop	{r3, pc}
 8003364:	200002f8 	.word	0x200002f8
 8003368:	200002fc 	.word	0x200002fc

0800336c <_Z7ADCTaskPv>:
	TelemetryTaskHandle = osThreadNew(TelemetryTask, NULL, &TelemetryTask_attributes);

}

void ADCTask(void *argument)
{
 800336c:	b500      	push	{lr}
 800336e:	b083      	sub	sp, #12
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8003370:	f013 f9d6 	bl	8016720 <xTaskGetTickCount>
	for (;;)
	{
		HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 8003374:	4d06      	ldr	r5, [pc, #24]	; (8003390 <_Z7ADCTaskPv+0x24>)
 8003376:	4c07      	ldr	r4, [pc, #28]	; (8003394 <_Z7ADCTaskPv+0x28>)
	xLastWakeTime = xTaskGetTickCount();
 8003378:	9001      	str	r0, [sp, #4]
		HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 800337a:	4629      	mov	r1, r5
 800337c:	2208      	movs	r2, #8
 800337e:	4620      	mov	r0, r4
 8003380:	f008 f988 	bl	800b694 <HAL_ADC_Start_DMA>
		vTaskDelayUntil(&xLastWakeTime, 20u);
 8003384:	2114      	movs	r1, #20
 8003386:	a801      	add	r0, sp, #4
 8003388:	f013 f856 	bl	8016438 <vTaskDelayUntil>
	for (;;)
 800338c:	e7f5      	b.n	800337a <_Z7ADCTaskPv+0xe>
 800338e:	bf00      	nop
 8003390:	20000130 	.word	0x20000130
 8003394:	20000718 	.word	0x20000718

08003398 <_Z7IMUTaskPv>:
	}
}

void IMUTask(void *argument)
{
 8003398:	b500      	push	{lr}
 800339a:	b083      	sub	sp, #12
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 800339c:	f013 f9c0 	bl	8016720 <xTaskGetTickCount>
 80033a0:	9001      	str	r0, [sp, #4]
	for (;;)
	{
		IMU_Task();
 80033a2:	f7ff f8bb 	bl	800251c <_Z8IMU_Taskv>
		vTaskDelayUntil(&xLastWakeTime, 20u);
 80033a6:	2114      	movs	r1, #20
 80033a8:	a801      	add	r0, sp, #4
 80033aa:	f013 f845 	bl	8016438 <vTaskDelayUntil>
	for (;;)
 80033ae:	e7f8      	b.n	80033a2 <_Z7IMUTaskPv+0xa>

080033b0 <_Z6LSTaskPv>:
	}
}

void LSTask(void *argument)
{
 80033b0:	b500      	push	{lr}
 80033b2:	b083      	sub	sp, #12
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 80033b4:	f013 f9b4 	bl	8016720 <xTaskGetTickCount>
 80033b8:	9001      	str	r0, [sp, #4]
	for (;;)
	{
		LineSensorTask();
 80033ba:	f7ff fb7f 	bl	8002abc <_Z14LineSensorTaskv>
		vTaskDelayUntil(&xLastWakeTime, 20u);
 80033be:	2114      	movs	r1, #20
 80033c0:	a801      	add	r0, sp, #4
 80033c2:	f013 f839 	bl	8016438 <vTaskDelayUntil>
	for (;;)
 80033c6:	e7f8      	b.n	80033ba <_Z6LSTaskPv+0xa>

080033c8 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag.isra.0>:
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
		      _ForwardIterator __last, std::forward_iterator_tag)
      {
	if (__first != __last)
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d063      	beq.n	8003494 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag.isra.0+0xcc>
      vector<_Tp, _Alloc>::
 80033cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 80033d0:	eba3 0802 	sub.w	r8, r3, r2
 80033d4:	4616      	mov	r6, r2
	  {
	    const size_type __n = std::distance(__first, __last);
	    if (size_type(this->_M_impl._M_end_of_storage
			  - this->_M_impl._M_finish) >= __n)
 80033d6:	e9d0 5201 	ldrd	r5, r2, [r0, #4]
 80033da:	1b52      	subs	r2, r2, r5
	    if (size_type(this->_M_impl._M_end_of_storage
 80033dc:	4590      	cmp	r8, r2
 80033de:	4604      	mov	r4, r0
 80033e0:	460f      	mov	r7, r1
 80033e2:	d817      	bhi.n	8003414 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag.isra.0+0x4c>
 80033e4:	eba5 0901 	sub.w	r9, r5, r1
	      {
		const size_type __elems_after = end() - __position;
		pointer __old_finish(this->_M_impl._M_finish);
		if (__elems_after > __n)
 80033e8:	45c8      	cmp	r8, r9
 80033ea:	d23a      	bcs.n	8003462 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag.isra.0+0x9a>
		  {
		    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 80033ec:	eba5 0908 	sub.w	r9, r5, r8
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80033f0:	4642      	mov	r2, r8
 80033f2:	4649      	mov	r1, r9
 80033f4:	4628      	mov	r0, r5
 80033f6:	f015 ff74 	bl	80192e2 <memmove>
						this->_M_impl._M_finish,
						this->_M_impl._M_finish,
						_M_get_Tp_allocator());
		    this->_M_impl._M_finish += __n;
 80033fa:	6863      	ldr	r3, [r4, #4]
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
 80033fc:	ebb9 0207 	subs.w	r2, r9, r7
 8003400:	4443      	add	r3, r8
 8003402:	6063      	str	r3, [r4, #4]
 8003404:	d147      	bne.n	8003496 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag.isra.0+0xce>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003406:	4642      	mov	r2, r8
 8003408:	4631      	mov	r1, r6
 800340a:	4638      	mov	r0, r7
		this->_M_impl._M_start = __new_start;
		this->_M_impl._M_finish = __new_finish;
		this->_M_impl._M_end_of_storage = __new_start + __len;
	      }
	  }
      }
 800340c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003410:	f015 bf67 	b.w	80192e2 <memmove>
	if (max_size() - size() < __n)
 8003414:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003418:	f8d0 9000 	ldr.w	r9, [r0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800341c:	eba5 0509 	sub.w	r5, r5, r9
	if (max_size() - size() < __n)
 8003420:	1b53      	subs	r3, r2, r5
 8003422:	4598      	cmp	r8, r3
 8003424:	d86a      	bhi.n	80034fc <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag.isra.0+0x134>
 8003426:	45a8      	cmp	r8, r5
 8003428:	4643      	mov	r3, r8
 800342a:	bf38      	it	cc
 800342c:	462b      	movcc	r3, r5
 800342e:	18ed      	adds	r5, r5, r3
 8003430:	d262      	bcs.n	80034f8 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag.isra.0+0x130>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003432:	46aa      	mov	sl, r5
 8003434:	2d00      	cmp	r5, #0
 8003436:	d154      	bne.n	80034e2 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag.isra.0+0x11a>
	  if (_Num)
 8003438:	ebb7 0209 	subs.w	r2, r7, r9
 800343c:	d135      	bne.n	80034aa <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag.isra.0+0xe2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800343e:	4631      	mov	r1, r6
 8003440:	4642      	mov	r2, r8
 8003442:	4650      	mov	r0, sl
 8003444:	f016 f837 	bl	80194b6 <memcpy>
	  const ptrdiff_t _Num = __last - __first;
 8003448:	6866      	ldr	r6, [r4, #4]
	  return __result + _Num;
 800344a:	44d0      	add	r8, sl
	  if (_Num)
 800344c:	1bf6      	subs	r6, r6, r7
 800344e:	d142      	bne.n	80034d6 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag.isra.0+0x10e>
	  return __result + _Num;
 8003450:	44b0      	add	r8, r6
	if (__p)
 8003452:	f1b9 0f00 	cmp.w	r9, #0
 8003456:	d137      	bne.n	80034c8 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag.isra.0+0x100>
		this->_M_impl._M_finish = __new_finish;
 8003458:	e9c4 a800 	strd	sl, r8, [r4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 800345c:	60a5      	str	r5, [r4, #8]
      }
 800345e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 8003462:	eb06 0109 	add.w	r1, r6, r9
	  if (_Num)
 8003466:	1a5a      	subs	r2, r3, r1
 8003468:	d11a      	bne.n	80034a0 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag.isra.0+0xd8>
		    this->_M_impl._M_finish += __n - __elems_after;
 800346a:	eba8 0009 	sub.w	r0, r8, r9
 800346e:	4428      	add	r0, r5
 8003470:	6060      	str	r0, [r4, #4]
 8003472:	f1b9 0f00 	cmp.w	r9, #0
 8003476:	d0f2      	beq.n	800345e <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag.isra.0+0x96>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003478:	464a      	mov	r2, r9
 800347a:	4639      	mov	r1, r7
 800347c:	f015 ff31 	bl	80192e2 <memmove>
		    this->_M_impl._M_finish += __elems_after;
 8003480:	6863      	ldr	r3, [r4, #4]
 8003482:	4631      	mov	r1, r6
 8003484:	444b      	add	r3, r9
 8003486:	464a      	mov	r2, r9
 8003488:	4638      	mov	r0, r7
 800348a:	6063      	str	r3, [r4, #4]
      }
 800348c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003490:	f015 bf27 	b.w	80192e2 <memmove>
 8003494:	4770      	bx	lr
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8003496:	4639      	mov	r1, r7
 8003498:	1aa8      	subs	r0, r5, r2
 800349a:	f015 ff22 	bl	80192e2 <memmove>
 800349e:	e7b2      	b.n	8003406 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag.isra.0+0x3e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80034a0:	4628      	mov	r0, r5
 80034a2:	f015 ff1e 	bl	80192e2 <memmove>
		    this->_M_impl._M_finish += __n - __elems_after;
 80034a6:	6865      	ldr	r5, [r4, #4]
 80034a8:	e7df      	b.n	800346a <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag.isra.0+0xa2>
	  return __result + _Num;
 80034aa:	eb0a 0b02 	add.w	fp, sl, r2
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80034ae:	4649      	mov	r1, r9
 80034b0:	4650      	mov	r0, sl
 80034b2:	f015 ff16 	bl	80192e2 <memmove>
 80034b6:	4631      	mov	r1, r6
 80034b8:	4642      	mov	r2, r8
 80034ba:	4658      	mov	r0, fp
 80034bc:	f015 fffb 	bl	80194b6 <memcpy>
	  const ptrdiff_t _Num = __last - __first;
 80034c0:	6866      	ldr	r6, [r4, #4]
	  return __result + _Num;
 80034c2:	44d8      	add	r8, fp
	  if (_Num)
 80034c4:	1bf6      	subs	r6, r6, r7
 80034c6:	d106      	bne.n	80034d6 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag.isra.0+0x10e>
			      - this->_M_impl._M_start);
 80034c8:	68a1      	ldr	r1, [r4, #8]
 80034ca:	4648      	mov	r0, r9
 80034cc:	eba1 0109 	sub.w	r1, r1, r9
 80034d0:	f014 fb94 	bl	8017bfc <_ZdlPvj>
 80034d4:	e7c0      	b.n	8003458 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag.isra.0+0x90>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80034d6:	4639      	mov	r1, r7
 80034d8:	4632      	mov	r2, r6
 80034da:	4640      	mov	r0, r8
 80034dc:	f015 ffeb 	bl	80194b6 <memcpy>
 80034e0:	e7b6      	b.n	8003450 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag.isra.0+0x88>
 80034e2:	4295      	cmp	r5, r2
 80034e4:	bf28      	it	cs
 80034e6:	4615      	movcs	r5, r2
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80034e8:	4628      	mov	r0, r5
 80034ea:	f014 fb89 	bl	8017c00 <_Znwj>
		      (this->_M_impl._M_start, __position.base(),
 80034ee:	f8d4 9000 	ldr.w	r9, [r4]
 80034f2:	4682      	mov	sl, r0
		this->_M_impl._M_end_of_storage = __new_start + __len;
 80034f4:	4405      	add	r5, r0
 80034f6:	e79f      	b.n	8003438 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag.isra.0+0x70>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80034f8:	4615      	mov	r5, r2
 80034fa:	e7f5      	b.n	80034e8 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag.isra.0+0x120>
	  __throw_length_error(__N(__s));
 80034fc:	4801      	ldr	r0, [pc, #4]	; (8003504 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag.isra.0+0x13c>)
 80034fe:	f014 fb96 	bl	8017c2e <_ZSt20__throw_length_errorPKc>
 8003502:	bf00      	nop
 8003504:	0801a904 	.word	0x0801a904

08003508 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0>:
      if (&__x != this)
 8003508:	4281      	cmp	r1, r0
 800350a:	d04a      	beq.n	80035a2 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0+0x9a>
    vector<_Tp, _Alloc>::
 800350c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003510:	e9d1 6700 	ldrd	r6, r7, [r1]
 8003514:	4604      	mov	r4, r0
			 - this->_M_impl._M_start); }
 8003516:	6800      	ldr	r0, [r0, #0]
 8003518:	68a3      	ldr	r3, [r4, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800351a:	eba7 0806 	sub.w	r8, r7, r6
			 - this->_M_impl._M_start); }
 800351e:	1a1b      	subs	r3, r3, r0
	  if (__xlen > capacity())
 8003520:	4598      	cmp	r8, r3
 8003522:	460d      	mov	r5, r1
 8003524:	d80e      	bhi.n	8003544 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0+0x3c>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003526:	6863      	ldr	r3, [r4, #4]
 8003528:	1a1a      	subs	r2, r3, r0
	  else if (size() >= __xlen)
 800352a:	4590      	cmp	r8, r2
 800352c:	d828      	bhi.n	8003580 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0+0x78>
	  if (_Num)
 800352e:	42b7      	cmp	r7, r6
 8003530:	d032      	beq.n	8003598 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0+0x90>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003532:	4642      	mov	r2, r8
 8003534:	4631      	mov	r1, r6
 8003536:	f015 fed4 	bl	80192e2 <memmove>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 800353a:	6823      	ldr	r3, [r4, #0]
 800353c:	4443      	add	r3, r8
 800353e:	6063      	str	r3, [r4, #4]
    }
 8003540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003544:	f1b8 0f00 	cmp.w	r8, #0
 8003548:	d035      	beq.n	80035b6 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0+0xae>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800354a:	4b1f      	ldr	r3, [pc, #124]	; (80035c8 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0+0xc0>)
 800354c:	4598      	cmp	r8, r3
 800354e:	d834      	bhi.n	80035ba <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0+0xb2>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003550:	4640      	mov	r0, r8
 8003552:	f014 fb55 	bl	8017c00 <_Znwj>
 8003556:	4605      	mov	r5, r0
	  if (_Num)
 8003558:	42b7      	cmp	r7, r6
 800355a:	d004      	beq.n	8003566 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0+0x5e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800355c:	4642      	mov	r2, r8
 800355e:	4631      	mov	r1, r6
 8003560:	4628      	mov	r0, r5
 8003562:	f015 febe 	bl	80192e2 <memmove>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003566:	6820      	ldr	r0, [r4, #0]
	if (__p)
 8003568:	b118      	cbz	r0, 8003572 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0+0x6a>
			    - this->_M_impl._M_start);
 800356a:	68a1      	ldr	r1, [r4, #8]
	::operator delete(__p
 800356c:	1a09      	subs	r1, r1, r0
 800356e:	f014 fb45 	bl	8017bfc <_ZdlPvj>
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8003572:	eb05 0308 	add.w	r3, r5, r8
	      this->_M_impl._M_start = __tmp;
 8003576:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8003578:	60a3      	str	r3, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 800357a:	6063      	str	r3, [r4, #4]
    }
 800357c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  if (_Num)
 8003580:	b13a      	cbz	r2, 8003592 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0+0x8a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003582:	4631      	mov	r1, r6
 8003584:	f015 fead 	bl	80192e2 <memmove>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003588:	e9d4 0300 	ldrd	r0, r3, [r4]
					  __x._M_impl._M_finish,
 800358c:	e9d5 6700 	ldrd	r6, r7, [r5]
 8003590:	1a1a      	subs	r2, r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8003592:	18b1      	adds	r1, r6, r2
	  if (_Num)
 8003594:	42b9      	cmp	r1, r7
 8003596:	d105      	bne.n	80035a4 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0+0x9c>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8003598:	eb00 0308 	add.w	r3, r0, r8
 800359c:	6063      	str	r3, [r4, #4]
    }
 800359e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035a2:	4770      	bx	lr
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80035a4:	4618      	mov	r0, r3
 80035a6:	1a7a      	subs	r2, r7, r1
 80035a8:	f015 fe9b 	bl	80192e2 <memmove>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 80035ac:	6823      	ldr	r3, [r4, #0]
 80035ae:	4443      	add	r3, r8
 80035b0:	6063      	str	r3, [r4, #4]
    }
 80035b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80035b6:	4645      	mov	r5, r8
 80035b8:	e7ce      	b.n	8003558 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0+0x50>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80035ba:	f1b8 0f00 	cmp.w	r8, #0
 80035be:	da01      	bge.n	80035c4 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0+0xbc>
	      std::__throw_bad_array_new_length();
 80035c0:	f014 fb32 	bl	8017c28 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80035c4:	f014 fb2d 	bl	8017c22 <_ZSt17__throw_bad_allocv>
 80035c8:	7ffffffc 	.word	0x7ffffffc

080035cc <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0>:
    __introsort_loop(_RandomAccessIterator __first,
 80035cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035d0:	1a0b      	subs	r3, r1, r0
      while (__last - __first > int(_S_threshold))
 80035d2:	2b40      	cmp	r3, #64	; 0x40
 80035d4:	f340 80e5 	ble.w	80037a2 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x1d6>
 80035d8:	4604      	mov	r4, r0
 80035da:	4617      	mov	r7, r2
 80035dc:	460d      	mov	r5, r1
	  if (__depth_limit == 0)
 80035de:	2a00      	cmp	r2, #0
 80035e0:	f000 80e1 	beq.w	80037a6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x1da>
      { return __normal_iterator(_M_current + __n); }
 80035e4:	1d06      	adds	r6, r0, #4
    { return __lhs.base() - __rhs.base(); }
 80035e6:	1b0a      	subs	r2, r1, r4
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 80035e8:	0fd3      	lsrs	r3, r2, #31
 80035ea:	eb03 03a2 	add.w	r3, r3, r2, asr #2
 80035ee:	105b      	asrs	r3, r3, #1
      { return __normal_iterator(_M_current + __n); }
 80035f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  {
    template<typename _Iterator1, typename _Iterator2>
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 < *__it2; }
 80035f4:	edd4 7a01 	vldr	s15, [r4, #4]
 80035f8:	ed93 7a00 	vldr	s14, [r3]
      if (__comp(__a, __b))
 80035fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003604:	ed11 6a01 	vldr	s12, [r1, #-4]
	  --__depth_limit;
 8003608:	f107 37ff 	add.w	r7, r7, #4294967295
      if (__comp(__a, __b))
 800360c:	d53e      	bpl.n	800368c <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0xc0>
	  if (__comp(__b, __c))
 800360e:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8003612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003616:	d460      	bmi.n	80036da <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x10e>
	  else if (__comp(__a, __c))
 8003618:	eef4 7ac6 	vcmpe.f32	s15, s12
 800361c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003620:	d43e      	bmi.n	80036a0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0xd4>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8003622:	ed94 7a00 	vldr	s14, [r4]
      __a = _GLIBCXX_MOVE(__b);
 8003626:	edc4 7a00 	vstr	s15, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
 800362a:	ed84 7a01 	vstr	s14, [r4, #4]
 800362e:	ed51 6a01 	vldr	s13, [r1, #-4]
	  while (__comp(__first, __pivot))
 8003632:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800363a:	4608      	mov	r0, r1
 800363c:	4633      	mov	r3, r6
 800363e:	d54a      	bpl.n	80036d6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x10a>
 8003640:	3304      	adds	r3, #4
	++_M_current;
 8003642:	461d      	mov	r5, r3
 8003644:	ecb3 7a01 	vldmia	r3!, {s14}
 8003648:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800364c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003650:	d4f7      	bmi.n	8003642 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x76>
	  while (__comp(__pivot, __last))
 8003652:	eef4 6ae7 	vcmpe.f32	s13, s15
 8003656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	--_M_current;
 800365a:	f1a0 0004 	sub.w	r0, r0, #4
 800365e:	dd06      	ble.n	800366e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0xa2>
 8003660:	ed70 6a01 	vldmdb	r0!, {s13}
 8003664:	eef4 6ae7 	vcmpe.f32	s13, s15
 8003668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800366c:	dcf8      	bgt.n	8003660 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x94>
	  { __t < __u } -> __boolean_testable;
	  { __u < __t } -> __boolean_testable;
	}
	{
	  if constexpr (three_way_comparable_with<_Tp, _Up>)
	    return __t <=> __u;
 800366e:	4285      	cmp	r5, r0
 8003670:	d321      	bcc.n	80036b6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0xea>
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 8003672:	463a      	mov	r2, r7
 8003674:	4628      	mov	r0, r5
 8003676:	f7ff ffa9 	bl	80035cc <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0>
    { return __lhs.base() - __rhs.base(); }
 800367a:	1b2b      	subs	r3, r5, r4
      while (__last - __first > int(_S_threshold))
 800367c:	2b40      	cmp	r3, #64	; 0x40
 800367e:	f340 8090 	ble.w	80037a2 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x1d6>
	  if (__depth_limit == 0)
 8003682:	2f00      	cmp	r7, #0
 8003684:	f000 808f 	beq.w	80037a6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x1da>
 8003688:	4629      	mov	r1, r5
 800368a:	e7ac      	b.n	80035e6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x1a>
      else if (__comp(__a, __c))
 800368c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8003690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003694:	d4c5      	bmi.n	8003622 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x56>
      else if (__comp(__b, __c))
 8003696:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800369a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800369e:	d51c      	bpl.n	80036da <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x10e>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80036a0:	edd4 6a00 	vldr	s13, [r4]
      __a = _GLIBCXX_MOVE(__b);
 80036a4:	ed84 6a00 	vstr	s12, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
 80036a8:	ed41 6a01 	vstr	s13, [r1, #-4]
 80036ac:	ed94 7a01 	vldr	s14, [r4, #4]
 80036b0:	edd4 7a00 	vldr	s15, [r4]
 80036b4:	e7bd      	b.n	8003632 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x66>
      __a = _GLIBCXX_MOVE(__b);
 80036b6:	462b      	mov	r3, r5
 80036b8:	ece3 6a01 	vstmia	r3!, {s13}
      __b = _GLIBCXX_MOVE(__tmp);
 80036bc:	ed80 7a00 	vstr	s14, [r0]
 80036c0:	ed95 7a01 	vldr	s14, [r5, #4]
 80036c4:	edd4 7a00 	vldr	s15, [r4]
	  while (__comp(__first, __pivot))
 80036c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d0:	ed50 6a01 	vldr	s13, [r0, #-4]
 80036d4:	d4b4      	bmi.n	8003640 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x74>
 80036d6:	461d      	mov	r5, r3
 80036d8:	e7bb      	b.n	8003652 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x86>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80036da:	6822      	ldr	r2, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 80036dc:	ed84 7a00 	vstr	s14, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	ed94 7a01 	vldr	s14, [r4, #4]
 80036e6:	edd4 7a00 	vldr	s15, [r4]
 80036ea:	ed51 6a01 	vldr	s13, [r1, #-4]
 80036ee:	e7a0      	b.n	8003632 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x66>
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
	_ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
	_DistanceType;

      _ValueType __value = _GLIBCXX_MOVE(*__result);
 80036f0:	ed75 6a01 	vldmdb	r5!, {s13}
 80036f4:	1b28      	subs	r0, r5, r4
 80036f6:	ea4f 0ea0 	mov.w	lr, r0, asr #2
      *__result = _GLIBCXX_MOVE(*__first);
 80036fa:	6822      	ldr	r2, [r4, #0]
      while (__secondChild < (__len - 1) / 2)
 80036fc:	f10e 33ff 	add.w	r3, lr, #4294967295
 8003700:	eb03 7cd3 	add.w	ip, r3, r3, lsr #31
 8003704:	2808      	cmp	r0, #8
      *__result = _GLIBCXX_MOVE(*__first);
 8003706:	602a      	str	r2, [r5, #0]
      while (__secondChild < (__len - 1) / 2)
 8003708:	ea4f 0c6c 	mov.w	ip, ip, asr #1
 800370c:	f340 80bd 	ble.w	800388a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x2be>
 8003710:	2300      	movs	r3, #0
 8003712:	e000      	b.n	8003716 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x14a>
 8003714:	4613      	mov	r3, r2
	  __secondChild = 2 * (__secondChild + 1);
 8003716:	1c59      	adds	r1, r3, #1
 8003718:	004a      	lsls	r2, r1, #1
	  if (__comp(__first + __secondChild,
 800371a:	1e57      	subs	r7, r2, #1
      { return __normal_iterator(_M_current + __n); }
 800371c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8003720:	eb04 0687 	add.w	r6, r4, r7, lsl #2
 8003724:	edd1 7a00 	vldr	s15, [r1]
 8003728:	ed96 7a00 	vldr	s14, [r6]
 800372c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8003734:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	  if (__comp(__first + __secondChild,
 8003738:	dd03      	ble.n	8003742 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x176>
 800373a:	463a      	mov	r2, r7
 800373c:	eef0 7a47 	vmov.f32	s15, s14
 8003740:	4631      	mov	r1, r6
      while (__secondChild < (__len - 1) / 2)
 8003742:	4594      	cmp	ip, r2
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8003744:	edc3 7a00 	vstr	s15, [r3]
      while (__secondChild < (__len - 1) / 2)
 8003748:	dce4      	bgt.n	8003714 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x148>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 800374a:	f01e 0f01 	tst.w	lr, #1
 800374e:	f040 80a8 	bne.w	80038a2 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x2d6>
 8003752:	f1ae 0e02 	sub.w	lr, lr, #2
 8003756:	eb0e 7ede 	add.w	lr, lr, lr, lsr #31
 800375a:	ebb2 0f6e 	cmp.w	r2, lr, asr #1
 800375e:	f000 809a 	beq.w	8003896 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x2ca>
      _Distance __parent = (__holeIndex - 1) / 2;
 8003762:	1e51      	subs	r1, r2, #1
 8003764:	1049      	asrs	r1, r1, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8003766:	0097      	lsls	r7, r2, #2
 8003768:	e005      	b.n	8003776 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x1aa>
 800376a:	460a      	mov	r2, r1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 800376c:	edcc 7a00 	vstr	s15, [ip]
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8003770:	b199      	cbz	r1, 800379a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x1ce>
	  __parent = (__holeIndex - 1) / 2;
 8003772:	4619      	mov	r1, r3
 8003774:	0097      	lsls	r7, r2, #2
 8003776:	eb04 0681 	add.w	r6, r4, r1, lsl #2

    template<typename _Iterator, typename _Value>
      _GLIBCXX20_CONSTEXPR
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it < __val; }
 800377a:	edd6 7a00 	vldr	s15, [r6]
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800377e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8003782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	  __parent = (__holeIndex - 1) / 2;
 8003786:	f101 33ff 	add.w	r3, r1, #4294967295
 800378a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 800378e:	eb04 0c07 	add.w	ip, r4, r7
	  __parent = (__holeIndex - 1) / 2;
 8003792:	ea4f 0363 	mov.w	r3, r3, asr #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8003796:	dce8      	bgt.n	800376a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x19e>
 8003798:	4666      	mov	r6, ip
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
		_Compare& __comp)
    {
      while (__last - __first > 1)
 800379a:	2804      	cmp	r0, #4
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 800379c:	edc6 6a00 	vstr	s13, [r6]
      while (__last - __first > 1)
 80037a0:	dca6      	bgt.n	80036f0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x124>
    }
 80037a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    { return __lhs.base() - __rhs.base(); }
 80037a6:	109b      	asrs	r3, r3, #2
      _DistanceType __parent = (__len - 2) / 2;
 80037a8:	f1a3 0902 	sub.w	r9, r3, #2
 80037ac:	ea4f 0969 	mov.w	r9, r9, asr #1
 80037b0:	464e      	mov	r6, r9
      while (__secondChild < (__len - 1) / 2)
 80037b2:	f103 3eff 	add.w	lr, r3, #4294967295
 80037b6:	f109 0801 	add.w	r8, r9, #1
 80037ba:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 80037be:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 80037c2:	f1a8 0804 	sub.w	r8, r8, #4
 80037c6:	4576      	cmp	r6, lr
 80037c8:	4642      	mov	r2, r8
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 80037ca:	f003 0701 	and.w	r7, r3, #1
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 80037ce:	edd8 6a00 	vldr	s13, [r8]
      while (__secondChild < (__len - 1) / 2)
 80037d2:	da4d      	bge.n	8003870 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x2a4>
 80037d4:	4633      	mov	r3, r6
 80037d6:	e000      	b.n	80037da <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x20e>
 80037d8:	460b      	mov	r3, r1
	  __secondChild = 2 * (__secondChild + 1);
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	0051      	lsls	r1, r2, #1
	  if (__comp(__first + __secondChild,
 80037de:	f101 3cff 	add.w	ip, r1, #4294967295
      { return __normal_iterator(_M_current + __n); }
 80037e2:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80037e6:	eb04 008c 	add.w	r0, r4, ip, lsl #2
      { return *__it1 < *__it2; }
 80037ea:	edd2 7a00 	vldr	s15, [r2]
 80037ee:	ed90 7a00 	vldr	s14, [r0]
 80037f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 80037fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	  if (__comp(__first + __secondChild,
 80037fe:	dd03      	ble.n	8003808 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x23c>
 8003800:	4661      	mov	r1, ip
 8003802:	eef0 7a47 	vmov.f32	s15, s14
 8003806:	4602      	mov	r2, r0
      while (__secondChild < (__len - 1) / 2)
 8003808:	458e      	cmp	lr, r1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 800380a:	edc3 7a00 	vstr	s15, [r3]
      while (__secondChild < (__len - 1) / 2)
 800380e:	dce3      	bgt.n	80037d8 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x20c>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8003810:	b90f      	cbnz	r7, 8003816 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x24a>
 8003812:	4589      	cmp	r9, r1
 8003814:	d031      	beq.n	800387a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x2ae>
      _Distance __parent = (__holeIndex - 1) / 2;
 8003816:	1e48      	subs	r0, r1, #1
 8003818:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800381c:	428e      	cmp	r6, r1
      _Distance __parent = (__holeIndex - 1) / 2;
 800381e:	ea4f 0060 	mov.w	r0, r0, asr #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8003822:	db06      	blt.n	8003832 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x266>
 8003824:	e017      	b.n	8003856 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x28a>
 8003826:	4286      	cmp	r6, r0
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8003828:	edcc 7a00 	vstr	s15, [ip]
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800382c:	4601      	mov	r1, r0
 800382e:	da12      	bge.n	8003856 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x28a>
	  __parent = (__holeIndex - 1) / 2;
 8003830:	4618      	mov	r0, r3
 8003832:	eb04 0280 	add.w	r2, r4, r0, lsl #2
      { return *__it < __val; }
 8003836:	edd2 7a00 	vldr	s15, [r2]
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800383a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800383e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	  __parent = (__holeIndex - 1) / 2;
 8003842:	f100 33ff 	add.w	r3, r0, #4294967295
 8003846:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 800384a:	eb04 0c81 	add.w	ip, r4, r1, lsl #2
	  __parent = (__holeIndex - 1) / 2;
 800384e:	ea4f 0363 	mov.w	r3, r3, asr #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8003852:	dce8      	bgt.n	8003826 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x25a>
 8003854:	4662      	mov	r2, ip
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 8003856:	edc2 6a00 	vstr	s13, [r2]
	  if (__parent == 0)
 800385a:	2e00      	cmp	r6, #0
 800385c:	f43f af48 	beq.w	80036f0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x124>
	  __parent--;
 8003860:	3e01      	subs	r6, #1
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8003862:	f1a8 0804 	sub.w	r8, r8, #4
      while (__secondChild < (__len - 1) / 2)
 8003866:	4576      	cmp	r6, lr
 8003868:	4642      	mov	r2, r8
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 800386a:	edd8 6a00 	vldr	s13, [r8]
      while (__secondChild < (__len - 1) / 2)
 800386e:	dbb1      	blt.n	80037d4 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x208>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8003870:	b9ef      	cbnz	r7, 80038ae <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x2e2>
 8003872:	45b1      	cmp	r9, r6
 8003874:	bf08      	it	eq
 8003876:	4649      	moveq	r1, r9
 8003878:	d119      	bne.n	80038ae <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x2e2>
	  __secondChild = 2 * (__secondChild + 1);
 800387a:	0049      	lsls	r1, r1, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 800387c:	3101      	adds	r1, #1
      { return __normal_iterator(_M_current + __n); }
 800387e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8003882:	6818      	ldr	r0, [r3, #0]
 8003884:	6010      	str	r0, [r2, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	e7c5      	b.n	8003816 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x24a>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 800388a:	f01e 0201 	ands.w	r2, lr, #1
 800388e:	d10c      	bne.n	80038aa <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x2de>
 8003890:	2b02      	cmp	r3, #2
 8003892:	d80a      	bhi.n	80038aa <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x2de>
 8003894:	4621      	mov	r1, r4
	  __secondChild = 2 * (__secondChild + 1);
 8003896:	0052      	lsls	r2, r2, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8003898:	3201      	adds	r2, #1
 800389a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	600b      	str	r3, [r1, #0]
 80038a2:	0097      	lsls	r7, r2, #2
      _Distance __parent = (__holeIndex - 1) / 2;
 80038a4:	3a01      	subs	r2, #1
 80038a6:	1051      	asrs	r1, r2, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80038a8:	e765      	b.n	8003776 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x1aa>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 80038aa:	4626      	mov	r6, r4
 80038ac:	e775      	b.n	800379a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x1ce>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 80038ae:	edc8 6a00 	vstr	s13, [r8]
 80038b2:	e7d5      	b.n	8003860 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0+0x294>
 80038b4:	0000      	movs	r0, r0
	...

080038b8 <_ZN3jlb7ASState6updateEv>:
            mission         = state_.mission;
            labyrinth_state = state_.labyrinth_state;
            fast_state      = state_.fast_state;
        }

        CompositeState update()
 80038b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038bc:	ed2d 8b06 	vpush	{d8-d10}
 80038c0:	460c      	mov	r4, r1
        {
#ifndef SIMULATION
            // TODO: add timestamp
        	tick_counter_prev = tick_counter;
 80038c2:	6a0b      	ldr	r3, [r1, #32]
        CompositeState update()
 80038c4:	b085      	sub	sp, #20
        	tick_counter_prev = tick_counter;
 80038c6:	624b      	str	r3, [r1, #36]	; 0x24
        CompositeState update()
 80038c8:	4605      	mov	r5, r0
        	tick_counter = HAL_GetTick();
 80038ca:	f007 fb81 	bl	800afd0 <HAL_GetTick>
            float dt = (((float)tick_counter) - ((float)(tick_counter_prev))) / 1000.0f;
 80038ce:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 80038d2:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80038d6:	ee07 0a90 	vmov	s15, r0
 80038da:	eef8 7a67 	vcvt.f32.u32	s15, s15
            auto                   update_timestamp_ = std::chrono::steady_clock::now();
            [[maybe_unused]] float dt                = std::chrono::duration_cast<std::chrono::milliseconds>(update_timestamp_ - prev_update_timestamp_).count() / 1000.0f;
            prev_update_timestamp_                   = update_timestamp_;
#endif

            state_transition_time += dt;
 80038de:	eddf 5a93 	vldr	s11, [pc, #588]	; 8003b2c <_ZN3jlb7ASState6updateEv+0x274>
 80038e2:	ed94 7a06 	vldr	s14, [r4, #24]
            state_time += dt;
 80038e6:	edd4 6a05 	vldr	s13, [r4, #20]
            float dt = (((float)tick_counter) - ((float)(tick_counter_prev))) / 1000.0f;
 80038ea:	ee77 7ac6 	vsub.f32	s15, s15, s12
            state_transition_time += dt;
 80038ee:	eea7 7aa5 	vfma.f32	s14, s15, s11
            state_time += dt;
 80038f2:	eee7 6aa5 	vfma.f32	s13, s15, s11

            switch (mission)
 80038f6:	6826      	ldr	r6, [r4, #0]
            state_transition_time += dt;
 80038f8:	ed84 7a06 	vstr	s14, [r4, #24]
            state_time += dt;
 80038fc:	edc4 6a05 	vstr	s13, [r4, #20]
        	tick_counter = HAL_GetTick();
 8003900:	6220      	str	r0, [r4, #32]
            switch (mission)
 8003902:	b17e      	cbz	r6, 8003924 <_ZN3jlb7ASState6updateEv+0x6c>
 8003904:	2e01      	cmp	r6, #1
 8003906:	f000 80be 	beq.w	8003a86 <_ZN3jlb7ASState6updateEv+0x1ce>
                    // this should never happen
                    break;
                }
            }

            return CompositeState{mission, labyrinth_state, fast_state, reference_speed};
 800390a:	68e3      	ldr	r3, [r4, #12]
                    switch (fast_state)
 800390c:	68a2      	ldr	r2, [r4, #8]
        }
 800390e:	4628      	mov	r0, r5
            return CompositeState{mission, labyrinth_state, fast_state, reference_speed};
 8003910:	6861      	ldr	r1, [r4, #4]
            : mission{mission_}, labyrinth_state{labyrinth_state_}, fast_state{fast_state_}, reference_speed{reference_speed_}
 8003912:	60eb      	str	r3, [r5, #12]
 8003914:	e9c5 6100 	strd	r6, r1, [r5]
 8003918:	60aa      	str	r2, [r5, #8]
        }
 800391a:	b005      	add	sp, #20
 800391c:	ecbd 8b06 	vpop	{d8-d10}
 8003920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    bool at_decision_point = under_gate || at_cross_section;
 8003924:	7c23      	ldrb	r3, [r4, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 80a3 	beq.w	8003a72 <_ZN3jlb7ASState6updateEv+0x1ba>
                    if (!prev_at_decision_point && at_decision_point)
 800392c:	7ca2      	ldrb	r2, [r4, #18]
 800392e:	2a00      	cmp	r2, #0
 8003930:	f040 80a3 	bne.w	8003a7a <_ZN3jlb7ASState6updateEv+0x1c2>
                        if (std::sqrt(std::pow(graph[next_node].x - odometry.x_t, 2) + std::pow(graph[next_node].y - odometry.y_t, 2)) < inaccuracy)
 8003934:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
	return *(this->_M_impl._M_start + __n);
 8003938:	6b63      	ldr	r3, [r4, #52]	; 0x34
        {
#ifdef SIMULATION
            if (nodes.empty()) throw std::runtime_error("Graph is empty");
            if (name < 'A' || name > 'X') throw std::runtime_error("Invalid node name");
#endif
            return nodes[static_cast<int>(name - 'A')];
 800393a:	f1a2 0a41 	sub.w	sl, r2, #65	; 0x41
 800393e:	681f      	ldr	r7, [r3, #0]
 8003940:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 8003944:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8003948:	eb07 07ca 	add.w	r7, r7, sl, lsl #3
 800394c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003950:	edd8 7a02 	vldr	s15, [r8, #8]
 8003954:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003958:	ee17 0a90 	vmov	r0, s15
 800395c:	9203      	str	r2, [sp, #12]
 800395e:	f7fc fddb 	bl	8000518 <__aeabi_f2d>
 8003962:	ed97 7a02 	vldr	s14, [r7, #8]
 8003966:	edd8 7a03 	vldr	s15, [r8, #12]
 800396a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	ee17 0a90 	vmov	r0, s15
 8003976:	e9cd 2300 	strd	r2, r3, [sp]
 800397a:	f7fc fdcd 	bl	8000518 <__aeabi_f2d>
 800397e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003982:	4680      	mov	r8, r0
 8003984:	4689      	mov	r9, r1
 8003986:	4610      	mov	r0, r2
 8003988:	4619      	mov	r1, r3
 800398a:	f7fc fe1d 	bl	80005c8 <__aeabi_dmul>
 800398e:	4642      	mov	r2, r8
 8003990:	ec41 0b18 	vmov	d8, r0, r1
 8003994:	464b      	mov	r3, r9
 8003996:	4640      	mov	r0, r8
 8003998:	4649      	mov	r1, r9
 800399a:	f7fc fe15 	bl	80005c8 <__aeabi_dmul>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	ec51 0b18 	vmov	r0, r1, d8
 80039a6:	f7fc fc59 	bl	800025c <__adddf3>
 80039aa:	2200      	movs	r2, #0
 80039ac:	4b60      	ldr	r3, [pc, #384]	; (8003b30 <_ZN3jlb7ASState6updateEv+0x278>)
 80039ae:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80039b2:	f7fd f87b 	bl	8000aac <__aeabi_dcmplt>
 80039b6:	2800      	cmp	r0, #0
 80039b8:	f000 809d 	beq.w	8003af6 <_ZN3jlb7ASState6updateEv+0x23e>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80039bc:	68f9      	ldr	r1, [r7, #12]
 80039be:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8003b38 <_ZN3jlb7ASState6updateEv+0x280>
 80039c2:	693e      	ldr	r6, [r7, #16]
 80039c4:	1a76      	subs	r6, r6, r1
                                auto          selected_edge = rand() % num_neighbors;
 80039c6:	f015 fb1b 	bl	8019000 <rand>
 80039ca:	10f6      	asrs	r6, r6, #3
 80039cc:	fb09 f606 	mul.w	r6, r9, r6
 80039d0:	fbb0 f3f6 	udiv	r3, r0, r6
	return *(this->_M_impl._M_start + __n);
 80039d4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80039d6:	fb03 0016 	mls	r0, r3, r6, r0
 80039da:	6817      	ldr	r7, [r2, #0]
 80039dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80039e0:	4457      	add	r7, sl
 80039e2:	68f9      	ldr	r1, [r7, #12]
 80039e4:	ea4f 08c0 	mov.w	r8, r0, lsl #3
                                if (graph[at_node].edges[selected_edge].node == 'P' || graph[at_node].edges[selected_edge].node == 'U' || graph[at_node].edges[selected_edge].node == 'X') { continue; }
 80039e8:	f811 6030 	ldrb.w	r6, [r1, r0, lsl #3]
 80039ec:	eb01 0bc0 	add.w	fp, r1, r0, lsl #3
 80039f0:	f006 00f7 	and.w	r0, r6, #247	; 0xf7
 80039f4:	2850      	cmp	r0, #80	; 0x50
 80039f6:	d0e4      	beq.n	80039c2 <_ZN3jlb7ASState6updateEv+0x10a>
 80039f8:	2e55      	cmp	r6, #85	; 0x55
 80039fa:	d0e2      	beq.n	80039c2 <_ZN3jlb7ASState6updateEv+0x10a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80039fc:	e9db 1602 	ldrd	r1, r6, [fp, #8]
 8003a00:	1a76      	subs	r6, r6, r1
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003a02:	2e00      	cmp	r6, #0
 8003a04:	d031      	beq.n	8003a6a <_ZN3jlb7ASState6updateEv+0x1b2>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8003a06:	f2c0 8141 	blt.w	8003c8c <_ZN3jlb7ASState6updateEv+0x3d4>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003a0a:	4630      	mov	r0, r6
 8003a0c:	f014 f8f8 	bl	8017c00 <_Znwj>
	  const ptrdiff_t _Num = __last - __first;
 8003a10:	e9db 1202 	ldrd	r1, r2, [fp, #8]
	  if (_Num)
 8003a14:	ebb2 0b01 	subs.w	fp, r2, r1
 8003a18:	4607      	mov	r7, r0
 8003a1a:	d021      	beq.n	8003a60 <_ZN3jlb7ASState6updateEv+0x1a8>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003a1c:	465a      	mov	r2, fp
 8003a1e:	f015 fc60 	bl	80192e2 <memmove>
    _RandomAccessIterator
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
	      _Predicate __pred, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
	__trip_count = (__last - __first) >> 2;
 8003a22:	ea4f 0cab 	mov.w	ip, fp, asr #2

      for (; __trip_count > 0; --__trip_count)
 8003a26:	f1bc 0f00 	cmp.w	ip, #0
	  return __result + _Num;
 8003a2a:	eb07 000b 	add.w	r0, r7, fp
      for (; __trip_count > 0; --__trip_count)
 8003a2e:	f340 81e3 	ble.w	8003df8 <_ZN3jlb7ASState6updateEv+0x540>

      template<typename _Iterator>
	_GLIBCXX20_CONSTEXPR
	bool
	operator()(_Iterator __it)
	{ return *__it == _M_value; }
 8003a32:	463b      	mov	r3, r7
 8003a34:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8003a38:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 8003a3c:	e00b      	b.n	8003a56 <_ZN3jlb7ASState6updateEv+0x19e>
	{
	  if (__pred(__first))
	    return __first;
	  ++__first;

	  if (__pred(__first))
 8003a3e:	7859      	ldrb	r1, [r3, #1]
 8003a40:	4291      	cmp	r1, r2
 8003a42:	d05a      	beq.n	8003afa <_ZN3jlb7ASState6updateEv+0x242>
	    return __first;
	  ++__first;

	  if (__pred(__first))
 8003a44:	7899      	ldrb	r1, [r3, #2]
 8003a46:	4291      	cmp	r1, r2
 8003a48:	d059      	beq.n	8003afe <_ZN3jlb7ASState6updateEv+0x246>
	    return __first;
	  ++__first;

	  if (__pred(__first))
 8003a4a:	78d9      	ldrb	r1, [r3, #3]
 8003a4c:	4291      	cmp	r1, r2
 8003a4e:	d058      	beq.n	8003b02 <_ZN3jlb7ASState6updateEv+0x24a>
 8003a50:	3304      	adds	r3, #4
      for (; __trip_count > 0; --__trip_count)
 8003a52:	459c      	cmp	ip, r3
 8003a54:	d057      	beq.n	8003b06 <_ZN3jlb7ASState6updateEv+0x24e>
	  if (__pred(__first))
 8003a56:	7819      	ldrb	r1, [r3, #0]
 8003a58:	4291      	cmp	r1, r2
 8003a5a:	d1f0      	bne.n	8003a3e <_ZN3jlb7ASState6updateEv+0x186>
                                if (std::find(prev_nodes.begin(), prev_nodes.end(), previous_node) != prev_nodes.end())
 8003a5c:	4298      	cmp	r0, r3
 8003a5e:	d16d      	bne.n	8003b3c <_ZN3jlb7ASState6updateEv+0x284>
	::operator delete(__p
 8003a60:	4631      	mov	r1, r6
 8003a62:	4638      	mov	r0, r7
 8003a64:	f014 f8ca 	bl	8017bfc <_ZdlPvj>
 8003a68:	6b62      	ldr	r2, [r4, #52]	; 0x34
	return *(this->_M_impl._M_start + __n);
 8003a6a:	6817      	ldr	r7, [r2, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003a6c:	4457      	add	r7, sl
 8003a6e:	68f9      	ldr	r1, [r7, #12]
 8003a70:	e7a7      	b.n	80039c2 <_ZN3jlb7ASState6updateEv+0x10a>
                    bool at_decision_point = under_gate || at_cross_section;
 8003a72:	7c62      	ldrb	r2, [r4, #17]
 8003a74:	2a00      	cmp	r2, #0
 8003a76:	f47f af59 	bne.w	800392c <_ZN3jlb7ASState6updateEv+0x74>
                    reference_speed = LABYRINTH_SPEED;
 8003a7a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
                    prev_at_decision_point = at_decision_point;
 8003a7e:	74a2      	strb	r2, [r4, #18]
                    reference_speed = LABYRINTH_SPEED;
 8003a80:	60e3      	str	r3, [r4, #12]
            return CompositeState{mission, labyrinth_state, fast_state, reference_speed};
 8003a82:	68a2      	ldr	r2, [r4, #8]
                    break;
 8003a84:	e743      	b.n	800390e <_ZN3jlb7ASState6updateEv+0x56>
                    switch (fast_state)
 8003a86:	68a2      	ldr	r2, [r4, #8]
 8003a88:	2a06      	cmp	r2, #6
 8003a8a:	f200 81b7 	bhi.w	8003dfc <_ZN3jlb7ASState6updateEv+0x544>
 8003a8e:	e8df f002 	tbb	[pc, r2]
 8003a92:	0404      	.short	0x0404
 8003a94:	271f0810 	.word	0x271f0810
 8003a98:	13          	.byte	0x13
 8003a99:	00          	.byte	0x00
                            reference_speed = FAST_SPEED_OVERTAKE;
 8003a9a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003a9e:	60e3      	str	r3, [r4, #12]
                            break;
 8003aa0:	e735      	b.n	800390e <_ZN3jlb7ASState6updateEv+0x56>
                            if (current_number_of_lines == 1u && !started_state_transition)
 8003aa2:	7ce3      	ldrb	r3, [r4, #19]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	f000 80fa 	beq.w	8003c9e <_ZN3jlb7ASState6updateEv+0x3e6>
                            else if (current_number_of_lines != 1u && started_state_transition) { started_state_transition = false; }
 8003aaa:	7f23      	ldrb	r3, [r4, #28]
 8003aac:	b10b      	cbz	r3, 8003ab2 <_ZN3jlb7ASState6updateEv+0x1fa>
                            else if (current_number_of_lines != 3u && started_state_transition) { started_state_transition = false; }
 8003aae:	2300      	movs	r3, #0
 8003ab0:	7723      	strb	r3, [r4, #28]
                            reference_speed = FAST_SPEED;
 8003ab2:	4b20      	ldr	r3, [pc, #128]	; (8003b34 <_ZN3jlb7ASState6updateEv+0x27c>)
 8003ab4:	60e3      	str	r3, [r4, #12]
                            break;
 8003ab6:	e72a      	b.n	800390e <_ZN3jlb7ASState6updateEv+0x56>
                            if (current_number_of_lines == 3u && !started_state_transition)
 8003ab8:	7ce3      	ldrb	r3, [r4, #19]
 8003aba:	2b03      	cmp	r3, #3
 8003abc:	f000 80e8 	beq.w	8003c90 <_ZN3jlb7ASState6updateEv+0x3d8>
                            else if (current_number_of_lines != 3u && started_state_transition) { started_state_transition = false; }
 8003ac0:	7f23      	ldrb	r3, [r4, #28]
 8003ac2:	b10b      	cbz	r3, 8003ac8 <_ZN3jlb7ASState6updateEv+0x210>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	7723      	strb	r3, [r4, #28]
                            reference_speed = FAST_SPEED_TURN;
 8003ac8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003acc:	60e3      	str	r3, [r4, #12]
                            break;
 8003ace:	e71e      	b.n	800390e <_ZN3jlb7ASState6updateEv+0x56>
                            if (current_number_of_lines == 3u && !started_state_transition)
 8003ad0:	7ce3      	ldrb	r3, [r4, #19]
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	7f23      	ldrb	r3, [r4, #28]
 8003ad6:	f000 80e9 	beq.w	8003cac <_ZN3jlb7ASState6updateEv+0x3f4>
                            else if (current_number_of_lines != 3u && started_state_transition) { started_state_transition = false; }
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0e9      	beq.n	8003ab2 <_ZN3jlb7ASState6updateEv+0x1fa>
 8003ade:	e7e6      	b.n	8003aae <_ZN3jlb7ASState6updateEv+0x1f6>
                            if (current_number_of_lines == 1u && !started_state_transition)
 8003ae0:	7ce3      	ldrb	r3, [r4, #19]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d1ec      	bne.n	8003ac0 <_ZN3jlb7ASState6updateEv+0x208>
 8003ae6:	7f21      	ldrb	r1, [r4, #28]
 8003ae8:	2900      	cmp	r1, #0
 8003aea:	f040 8111 	bne.w	8003d10 <_ZN3jlb7ASState6updateEv+0x458>
                                started_state_transition = true;
 8003aee:	7723      	strb	r3, [r4, #28]
                                state_transition_time    = 0.0f;
 8003af0:	2300      	movs	r3, #0
 8003af2:	61a3      	str	r3, [r4, #24]
                            if (started_state_transition && state_transition_time > STATE_TRANSITION_TIME_LIMIT && state_time > STATE_MIN_TIME)
 8003af4:	e7e8      	b.n	8003ac8 <_ZN3jlb7ASState6updateEv+0x210>
 8003af6:	2201      	movs	r2, #1
 8003af8:	e7bf      	b.n	8003a7a <_ZN3jlb7ASState6updateEv+0x1c2>
	++_M_current;
 8003afa:	3301      	adds	r3, #1
 8003afc:	e7ae      	b.n	8003a5c <_ZN3jlb7ASState6updateEv+0x1a4>
 8003afe:	3302      	adds	r3, #2
 8003b00:	e7ac      	b.n	8003a5c <_ZN3jlb7ASState6updateEv+0x1a4>
 8003b02:	3303      	adds	r3, #3
 8003b04:	e7aa      	b.n	8003a5c <_ZN3jlb7ASState6updateEv+0x1a4>
    { return __lhs.base() - __rhs.base(); }
 8003b06:	eba0 0b03 	sub.w	fp, r0, r3
	    return __first;
	  ++__first;
	}

      switch (__last - __first)
 8003b0a:	f1bb 0f02 	cmp.w	fp, #2
 8003b0e:	f000 814e 	beq.w	8003dae <_ZN3jlb7ASState6updateEv+0x4f6>
 8003b12:	f1bb 0f03 	cmp.w	fp, #3
 8003b16:	f000 813d 	beq.w	8003d94 <_ZN3jlb7ASState6updateEv+0x4dc>
 8003b1a:	f1bb 0f01 	cmp.w	fp, #1
 8003b1e:	d19f      	bne.n	8003a60 <_ZN3jlb7ASState6updateEv+0x1a8>
 8003b20:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	  if (__pred(__first))
	    return __first;
	  ++__first;
	  // FALLTHRU
	case 1:
	  if (__pred(__first))
 8003b24:	7819      	ldrb	r1, [r3, #0]
 8003b26:	4291      	cmp	r1, r2
 8003b28:	d19a      	bne.n	8003a60 <_ZN3jlb7ASState6updateEv+0x1a8>
 8003b2a:	e797      	b.n	8003a5c <_ZN3jlb7ASState6updateEv+0x1a4>
 8003b2c:	3a83126f 	.word	0x3a83126f
 8003b30:	3fb00000 	.word	0x3fb00000
 8003b34:	40e00000 	.word	0x40e00000
 8003b38:	aaaaaaab 	.word	0xaaaaaaab
	return *(this->_M_impl._M_start + __n);
 8003b3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
                                    previous_node = at_node;
 8003b3e:	9903      	ldr	r1, [sp, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
            return angle;
        }

        void correction([[maybe_unused]] float x_t_, [[maybe_unused]] float y_t_)
        {
            x_t = x_t_ - (SENSOR_BASE / 2.0f * std::cos(theta_t));
 8003b42:	eeb5 9a00 	vmov.f32	s18, #80	; 0x3e800000  0.250
 8003b46:	eb03 090a 	add.w	r9, r3, sl
 8003b4a:	f8d9 300c 	ldr.w	r3, [r9, #12]
                                    odometry.correction(graph[previous_node].x, graph[previous_node].y);
 8003b4e:	f8d4 a02c 	ldr.w	sl, [r4, #44]	; 0x2c
                                    next_node     = graph[at_node].edges[selected_edge].node;
 8003b52:	f813 2008 	ldrb.w	r2, [r3, r8]
                                    previous_node = at_node;
 8003b56:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
                                    next_node     = graph[at_node].edges[selected_edge].node;
 8003b5a:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
 8003b5e:	ed9a 8a04 	vldr	s16, [sl, #16]
 8003b62:	4443      	add	r3, r8
                                    controller.set_direction(graph[at_node].edges[selected_edge].direction);
 8003b64:	6859      	ldr	r1, [r3, #4]
 8003b66:	6b23      	ldr	r3, [r4, #48]	; 0x30
                                    odometry.correction(graph[previous_node].x, graph[previous_node].y);
 8003b68:	edd9 8a02 	vldr	s17, [r9, #8]

        void set_current_velocity(const float current_velocity_) { current_velocity = current_velocity_; }

        void set_direction(const Direction direction_)
        {
            prev_direction = direction;
 8003b6c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
  { return __builtin_cosf(__x); }
 8003b70:	eeb0 0a48 	vmov.f32	s0, s16
 8003b74:	e9c3 1223 	strd	r1, r2, [r3, #140]	; 0x8c
 8003b78:	f014 f894 	bl	8017ca4 <cosf>
 8003b7c:	edd9 7a01 	vldr	s15, [r9, #4]
 8003b80:	eeb0 7a40 	vmov.f32	s14, s0
 8003b84:	eee7 7a49 	vfms.f32	s15, s14, s18
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8003b88:	eeb0 0a48 	vmov.f32	s0, s16
 8003b8c:	edca 7a02 	vstr	s15, [sl, #8]
 8003b90:	f014 f8cc 	bl	8017d2c <sinf>
            y_t = y_t_ - (SENSOR_BASE / 2.0f * std::sin(theta_t));
 8003b94:	eee0 8a49 	vfms.f32	s17, s0, s18

            // clamp theta to certain values whichever is closer
            // the values are 0, 90, 180, 270, 360

            float theta_0   = std::fabs(theta_t);
            float theta_90  = std::fabs(theta_t - M_PI / 2.0f);
 8003b98:	ee18 0a10 	vmov	r0, s16
            y_t = y_t_ - (SENSOR_BASE / 2.0f * std::sin(theta_t));
 8003b9c:	edca 8a03 	vstr	s17, [sl, #12]
            float theta_90  = std::fabs(theta_t - M_PI / 2.0f);
 8003ba0:	f7fc fcba 	bl	8000518 <__aeabi_f2d>
 8003ba4:	a39e      	add	r3, pc, #632	; (adr r3, 8003e20 <_ZN3jlb7ASState6updateEv+0x568>)
 8003ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003baa:	4680      	mov	r8, r0
 8003bac:	4689      	mov	r9, r1
 8003bae:	f7fc fb53 	bl	8000258 <__aeabi_dsub>
 8003bb2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	f7fc ffd6 	bl	8000b68 <__aeabi_d2f>
            float theta_180 = std::fabs(theta_t - M_PI);
 8003bbc:	a392      	add	r3, pc, #584	; (adr r3, 8003e08 <_ZN3jlb7ASState6updateEv+0x550>)
 8003bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
            float theta_90  = std::fabs(theta_t - M_PI / 2.0f);
 8003bc2:	ee08 0a90 	vmov	s17, r0
            float theta_180 = std::fabs(theta_t - M_PI);
 8003bc6:	4649      	mov	r1, r9
 8003bc8:	4640      	mov	r0, r8
 8003bca:	f7fc fb45 	bl	8000258 <__aeabi_dsub>
 8003bce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	f7fc ffc8 	bl	8000b68 <__aeabi_d2f>
            float theta_270 = std::fabs(theta_t - 3.0f * M_PI / 2.0f);
 8003bd8:	a38d      	add	r3, pc, #564	; (adr r3, 8003e10 <_ZN3jlb7ASState6updateEv+0x558>)
 8003bda:	e9d3 2300 	ldrd	r2, r3, [r3]
            float theta_180 = std::fabs(theta_t - M_PI);
 8003bde:	ee09 0a10 	vmov	s18, r0
            float theta_270 = std::fabs(theta_t - 3.0f * M_PI / 2.0f);
 8003be2:	4649      	mov	r1, r9
 8003be4:	4640      	mov	r0, r8
 8003be6:	f7fc fb37 	bl	8000258 <__aeabi_dsub>
 8003bea:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003bee:	4619      	mov	r1, r3
 8003bf0:	f7fc ffba 	bl	8000b68 <__aeabi_d2f>
            float theta_360 = std::fabs(theta_t - 2.0f * M_PI);
 8003bf4:	a382      	add	r3, pc, #520	; (adr r3, 8003e00 <_ZN3jlb7ASState6updateEv+0x548>)
 8003bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
            float theta_270 = std::fabs(theta_t - 3.0f * M_PI / 2.0f);
 8003bfa:	ee09 0a90 	vmov	s19, r0
            float theta_360 = std::fabs(theta_t - 2.0f * M_PI);
 8003bfe:	4649      	mov	r1, r9
 8003c00:	4640      	mov	r0, r8
 8003c02:	f7fc fb29 	bl	8000258 <__aeabi_dsub>
  { return __builtin_fabsf(__x); }
 8003c06:	eeb0 aac8 	vabs.f32	s20, s16
 8003c0a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003c0e:	4619      	mov	r1, r3
 8003c10:	f7fc ffaa 	bl	8000b68 <__aeabi_d2f>
 8003c14:	feca 7a68 	vminnm.f32	s15, s20, s17
 8003c18:	fec7 7ac9 	vminnm.f32	s15, s15, s18
 8003c1c:	ee07 0a10 	vmov	s14, r0

            float min_theta = std::min({theta_0, theta_90, theta_180, theta_270, theta_360});
 8003c20:	fec7 7ae9 	vminnm.f32	s15, s15, s19
 8003c24:	fec7 7ac7 	vminnm.f32	s15, s15, s14

            if (min_theta == theta_0) { theta_t = (theta_t + 0.0f) / 2.0f; }
 8003c28:	eef4 7a4a 	vcmp.f32	s15, s20
 8003c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c30:	d143      	bne.n	8003cba <_ZN3jlb7ASState6updateEv+0x402>
 8003c32:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003c36:	ee28 8a27 	vmul.f32	s16, s16, s15
      return fmod(__type(__x), __type(__y));
 8003c3a:	ee18 0a10 	vmov	r0, s16
 8003c3e:	f7fc fc6b 	bl	8000518 <__aeabi_f2d>
 8003c42:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8003e00 <_ZN3jlb7ASState6updateEv+0x548>
 8003c46:	ec41 0b10 	vmov	d0, r0, r1
 8003c4a:	f013 fffb 	bl	8017c44 <fmod>
 8003c4e:	ec51 0b10 	vmov	r0, r1, d0
            angle = std::fmod(angle, 2.0f * M_PI);
 8003c52:	f7fc ff89 	bl	8000b68 <__aeabi_d2f>
 8003c56:	ee07 0a90 	vmov	s15, r0
            if (angle < 0.0f) { angle += 2.0f * M_PI; }
 8003c5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c62:	d50a      	bpl.n	8003c7a <_ZN3jlb7ASState6updateEv+0x3c2>
 8003c64:	f7fc fc58 	bl	8000518 <__aeabi_f2d>
 8003c68:	a365      	add	r3, pc, #404	; (adr r3, 8003e00 <_ZN3jlb7ASState6updateEv+0x548>)
 8003c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6e:	f7fc faf5 	bl	800025c <__adddf3>
 8003c72:	f7fc ff79 	bl	8000b68 <__aeabi_d2f>
 8003c76:	ee07 0a90 	vmov	s15, r0
 8003c7a:	4631      	mov	r1, r6
            else if (min_theta == theta_90) { theta_t = (theta_t + M_PI / 2.0f) / 2.0f; }
            else if (min_theta == theta_180) { theta_t = (theta_t + M_PI) / 2.0f; }
            else if (min_theta == theta_270) { theta_t = (theta_t + 3.0f * M_PI / 2.0f) / 2.0f; }
            else if (min_theta == theta_360) { theta_t = (theta_t + 2.0f * M_PI) / 2.0f; }

            theta_t = normalize_angle(theta_t);
 8003c7c:	edca 7a04 	vstr	s15, [sl, #16]
 8003c80:	4638      	mov	r0, r7
 8003c82:	f013 ffbb 	bl	8017bfc <_ZdlPvj>
            return CompositeState{mission, labyrinth_state, fast_state, reference_speed};
 8003c86:	2201      	movs	r2, #1
 8003c88:	6826      	ldr	r6, [r4, #0]
 8003c8a:	e6f6      	b.n	8003a7a <_ZN3jlb7ASState6updateEv+0x1c2>
	    std::__throw_bad_alloc();
 8003c8c:	f013 ffc9 	bl	8017c22 <_ZSt17__throw_bad_allocv>
                            if (current_number_of_lines == 3u && !started_state_transition)
 8003c90:	7f21      	ldrb	r1, [r4, #28]
 8003c92:	bb39      	cbnz	r1, 8003ce4 <_ZN3jlb7ASState6updateEv+0x42c>
                                started_state_transition = true;
 8003c94:	2301      	movs	r3, #1
                                state_transition_time    = 0.0f;
 8003c96:	2100      	movs	r1, #0
                                started_state_transition = true;
 8003c98:	7723      	strb	r3, [r4, #28]
                                state_transition_time    = 0.0f;
 8003c9a:	61a1      	str	r1, [r4, #24]
 8003c9c:	e714      	b.n	8003ac8 <_ZN3jlb7ASState6updateEv+0x210>
                            if (current_number_of_lines == 1u && !started_state_transition)
 8003c9e:	7f21      	ldrb	r1, [r4, #28]
 8003ca0:	2900      	cmp	r1, #0
 8003ca2:	d161      	bne.n	8003d68 <_ZN3jlb7ASState6updateEv+0x4b0>
                                started_state_transition = true;
 8003ca4:	7723      	strb	r3, [r4, #28]
                                state_transition_time    = 0.0f;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61a3      	str	r3, [r4, #24]
                            if (started_state_transition && state_transition_time > STATE_TRANSITION_TIME_LIMIT && state_time > STATE_MIN_TIME)
 8003caa:	e702      	b.n	8003ab2 <_ZN3jlb7ASState6updateEv+0x1fa>
                            if (current_number_of_lines == 3u && !started_state_transition)
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d145      	bne.n	8003d3c <_ZN3jlb7ASState6updateEv+0x484>
                                started_state_transition = true;
 8003cb0:	2301      	movs	r3, #1
                                state_transition_time    = 0.0f;
 8003cb2:	2100      	movs	r1, #0
                                started_state_transition = true;
 8003cb4:	7723      	strb	r3, [r4, #28]
                                state_transition_time    = 0.0f;
 8003cb6:	61a1      	str	r1, [r4, #24]
 8003cb8:	e6fb      	b.n	8003ab2 <_ZN3jlb7ASState6updateEv+0x1fa>
            else if (min_theta == theta_90) { theta_t = (theta_t + M_PI / 2.0f) / 2.0f; }
 8003cba:	eef4 7a68 	vcmp.f32	s15, s17
 8003cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cc2:	d177      	bne.n	8003db4 <_ZN3jlb7ASState6updateEv+0x4fc>
 8003cc4:	a356      	add	r3, pc, #344	; (adr r3, 8003e20 <_ZN3jlb7ASState6updateEv+0x568>)
 8003cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cca:	4640      	mov	r0, r8
 8003ccc:	4649      	mov	r1, r9
            else if (min_theta == theta_360) { theta_t = (theta_t + 2.0f * M_PI) / 2.0f; }
 8003cce:	f7fc fac5 	bl	800025c <__adddf3>
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	4b50      	ldr	r3, [pc, #320]	; (8003e18 <_ZN3jlb7ASState6updateEv+0x560>)
 8003cd6:	f7fc fc77 	bl	80005c8 <__aeabi_dmul>
 8003cda:	f7fc ff45 	bl	8000b68 <__aeabi_d2f>
 8003cde:	ee08 0a10 	vmov	s16, r0
 8003ce2:	e7aa      	b.n	8003c3a <_ZN3jlb7ASState6updateEv+0x382>
                            if (started_state_transition && state_transition_time > STATE_TRANSITION_TIME_LIMIT && state_time > STATE_MIN_TIME)
 8003ce4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8003e1c <_ZN3jlb7ASState6updateEv+0x564>
 8003ce8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cf0:	f77f aeea 	ble.w	8003ac8 <_ZN3jlb7ASState6updateEv+0x210>
 8003cf4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003cf8:	eef4 6ae7 	vcmpe.f32	s13, s15
 8003cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d00:	f77f aee2 	ble.w	8003ac8 <_ZN3jlb7ASState6updateEv+0x210>
                                state_time = 0.0f;
 8003d04:	2100      	movs	r1, #0
                                break;
 8003d06:	461a      	mov	r2, r3
                                fast_state = FastState::IN_ACCEL_ZONE;
 8003d08:	60a3      	str	r3, [r4, #8]
                                state_time = 0.0f;
 8003d0a:	6161      	str	r1, [r4, #20]
            return CompositeState{mission, labyrinth_state, fast_state, reference_speed};
 8003d0c:	68e3      	ldr	r3, [r4, #12]
                                break;
 8003d0e:	e5fe      	b.n	800390e <_ZN3jlb7ASState6updateEv+0x56>
                            if (started_state_transition && state_transition_time > STATE_TRANSITION_TIME_LIMIT && state_time > STATE_MIN_TIME)
 8003d10:	eddf 7a42 	vldr	s15, [pc, #264]	; 8003e1c <_ZN3jlb7ASState6updateEv+0x564>
 8003d14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d1c:	f77f aed4 	ble.w	8003ac8 <_ZN3jlb7ASState6updateEv+0x210>
 8003d20:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003d24:	eef4 6ae7 	vcmpe.f32	s13, s15
 8003d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d2c:	f77f aecc 	ble.w	8003ac8 <_ZN3jlb7ASState6updateEv+0x210>
                                fast_state = FastState::OUT_BRAKE_ZONE;
 8003d30:	2206      	movs	r2, #6
                                state_time = 0.0f;
 8003d32:	2100      	movs	r1, #0
            return CompositeState{mission, labyrinth_state, fast_state, reference_speed};
 8003d34:	68e3      	ldr	r3, [r4, #12]
                                fast_state = FastState::OUT_BRAKE_ZONE;
 8003d36:	60a2      	str	r2, [r4, #8]
                                state_time = 0.0f;
 8003d38:	6161      	str	r1, [r4, #20]
                                break;
 8003d3a:	e5e8      	b.n	800390e <_ZN3jlb7ASState6updateEv+0x56>
                            if (started_state_transition && state_transition_time > STATE_TRANSITION_TIME_LIMIT && state_time > STATE_MIN_TIME)
 8003d3c:	eddf 7a37 	vldr	s15, [pc, #220]	; 8003e1c <_ZN3jlb7ASState6updateEv+0x564>
 8003d40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d48:	f77f aeb3 	ble.w	8003ab2 <_ZN3jlb7ASState6updateEv+0x1fa>
 8003d4c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003d50:	eef4 6ae7 	vcmpe.f32	s13, s15
 8003d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d58:	f77f aeab 	ble.w	8003ab2 <_ZN3jlb7ASState6updateEv+0x1fa>
                                fast_state = FastState::IN_BRAKE_ZONE;
 8003d5c:	2205      	movs	r2, #5
                                state_time = 0.0f;
 8003d5e:	2100      	movs	r1, #0
            return CompositeState{mission, labyrinth_state, fast_state, reference_speed};
 8003d60:	68e3      	ldr	r3, [r4, #12]
                                fast_state = FastState::IN_BRAKE_ZONE;
 8003d62:	60a2      	str	r2, [r4, #8]
                                state_time = 0.0f;
 8003d64:	6161      	str	r1, [r4, #20]
                                break;
 8003d66:	e5d2      	b.n	800390e <_ZN3jlb7ASState6updateEv+0x56>
                            if (started_state_transition && state_transition_time > STATE_TRANSITION_TIME_LIMIT && state_time > STATE_MIN_TIME)
 8003d68:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8003e1c <_ZN3jlb7ASState6updateEv+0x564>
 8003d6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d74:	f77f ae9d 	ble.w	8003ab2 <_ZN3jlb7ASState6updateEv+0x1fa>
 8003d78:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003d7c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8003d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d84:	f77f ae95 	ble.w	8003ab2 <_ZN3jlb7ASState6updateEv+0x1fa>
                                fast_state = FastState::OUT_ACCEL_ZONE;
 8003d88:	2204      	movs	r2, #4
                                state_time = 0.0f;
 8003d8a:	2100      	movs	r1, #0
            return CompositeState{mission, labyrinth_state, fast_state, reference_speed};
 8003d8c:	68e3      	ldr	r3, [r4, #12]
                                fast_state = FastState::OUT_ACCEL_ZONE;
 8003d8e:	60a2      	str	r2, [r4, #8]
                                state_time = 0.0f;
 8003d90:	6161      	str	r1, [r4, #20]
                                break;
 8003d92:	e5bc      	b.n	800390e <_ZN3jlb7ASState6updateEv+0x56>
 8003d94:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	  if (__pred(__first))
 8003d98:	7819      	ldrb	r1, [r3, #0]
 8003d9a:	4291      	cmp	r1, r2
 8003d9c:	f43f ae5e 	beq.w	8003a5c <_ZN3jlb7ASState6updateEv+0x1a4>
	++_M_current;
 8003da0:	3301      	adds	r3, #1
	  if (__pred(__first))
 8003da2:	7819      	ldrb	r1, [r3, #0]
 8003da4:	4291      	cmp	r1, r2
 8003da6:	f43f ae59 	beq.w	8003a5c <_ZN3jlb7ASState6updateEv+0x1a4>
 8003daa:	3301      	adds	r3, #1
	return *this;
 8003dac:	e6ba      	b.n	8003b24 <_ZN3jlb7ASState6updateEv+0x26c>
 8003dae:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8003db2:	e7f6      	b.n	8003da2 <_ZN3jlb7ASState6updateEv+0x4ea>
            else if (min_theta == theta_180) { theta_t = (theta_t + M_PI) / 2.0f; }
 8003db4:	eef4 7a49 	vcmp.f32	s15, s18
 8003db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dbc:	d105      	bne.n	8003dca <_ZN3jlb7ASState6updateEv+0x512>
 8003dbe:	a312      	add	r3, pc, #72	; (adr r3, 8003e08 <_ZN3jlb7ASState6updateEv+0x550>)
 8003dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc4:	4640      	mov	r0, r8
 8003dc6:	4649      	mov	r1, r9
 8003dc8:	e781      	b.n	8003cce <_ZN3jlb7ASState6updateEv+0x416>
            else if (min_theta == theta_270) { theta_t = (theta_t + 3.0f * M_PI / 2.0f) / 2.0f; }
 8003dca:	eef4 7a69 	vcmp.f32	s15, s19
 8003dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd2:	d105      	bne.n	8003de0 <_ZN3jlb7ASState6updateEv+0x528>
 8003dd4:	a30e      	add	r3, pc, #56	; (adr r3, 8003e10 <_ZN3jlb7ASState6updateEv+0x558>)
 8003dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dda:	4640      	mov	r0, r8
 8003ddc:	4649      	mov	r1, r9
 8003dde:	e776      	b.n	8003cce <_ZN3jlb7ASState6updateEv+0x416>
            else if (min_theta == theta_360) { theta_t = (theta_t + 2.0f * M_PI) / 2.0f; }
 8003de0:	eef4 7a47 	vcmp.f32	s15, s14
 8003de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de8:	f47f af27 	bne.w	8003c3a <_ZN3jlb7ASState6updateEv+0x382>
 8003dec:	a304      	add	r3, pc, #16	; (adr r3, 8003e00 <_ZN3jlb7ASState6updateEv+0x548>)
 8003dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df2:	4640      	mov	r0, r8
 8003df4:	4649      	mov	r1, r9
 8003df6:	e76a      	b.n	8003cce <_ZN3jlb7ASState6updateEv+0x416>
      for (; __trip_count > 0; --__trip_count)
 8003df8:	463b      	mov	r3, r7
 8003dfa:	e686      	b.n	8003b0a <_ZN3jlb7ASState6updateEv+0x252>
            return CompositeState{mission, labyrinth_state, fast_state, reference_speed};
 8003dfc:	68e3      	ldr	r3, [r4, #12]
 8003dfe:	e586      	b.n	800390e <_ZN3jlb7ASState6updateEv+0x56>
 8003e00:	54442d18 	.word	0x54442d18
 8003e04:	401921fb 	.word	0x401921fb
 8003e08:	54442d18 	.word	0x54442d18
 8003e0c:	400921fb 	.word	0x400921fb
 8003e10:	7f3321d2 	.word	0x7f3321d2
 8003e14:	4012d97c 	.word	0x4012d97c
 8003e18:	3fe00000 	.word	0x3fe00000
 8003e1c:	3ca3d70a 	.word	0x3ca3d70a
 8003e20:	54442d18 	.word	0x54442d18
 8003e24:	3ff921fb 	.word	0x3ff921fb

08003e28 <_ZN3jlb12SignalSender14measurements_1Ev>:
#else
            return client.send(msg, max_size);
#endif
        }

        void measurements_1()
 8003e28:	b530      	push	{r4, r5, lr}
        {
            jlb_rx.measurements_1.line_sensor_1  = 0 == controller.selected_front ? controller.detection_front[0] + 2.0f : controller.detection_front[0];
 8003e2a:	f8d0 31cc 	ldr.w	r3, [r0, #460]	; 0x1cc
        void measurements_1()
 8003e2e:	4604      	mov	r4, r0
            jlb_rx.measurements_1.line_sensor_1  = 0 == controller.selected_front ? controller.detection_front[0] + 2.0f : controller.detection_front[0];
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
        void measurements_1()
 8003e36:	b087      	sub	sp, #28
            jlb_rx.measurements_1.line_sensor_1  = 0 == controller.selected_front ? controller.detection_front[0] + 2.0f : controller.detection_front[0];
 8003e38:	2a00      	cmp	r2, #0
 8003e3a:	f040 80e7 	bne.w	800400c <_ZN3jlb12SignalSender14measurements_1Ev+0x1e4>
 8003e3e:	ee07 1a90 	vmov	s15, r1
 8003e42:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003e46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e52:	ee17 1a90 	vmov	r1, s15
 8003e56:	7001      	strb	r1, [r0, #0]
            jlb_rx.measurements_1.line_sensor_2  = 1 == controller.selected_front ? controller.detection_front[1] + 2.0f : controller.detection_front[1];
 8003e58:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8003e5c:	7061      	strb	r1, [r4, #1]
            jlb_rx.measurements_1.line_sensor_3  = 2 == controller.selected_front ? controller.detection_front[2] + 2.0f : controller.detection_front[2];
 8003e5e:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 8003e62:	70a1      	strb	r1, [r4, #2]
            jlb_rx.measurements_1.line_sensor_4  = 3 == controller.selected_front ? controller.detection_front[3] + 2.0f : controller.detection_front[3];
 8003e64:	f893 1037 	ldrb.w	r1, [r3, #55]	; 0x37
 8003e68:	70e1      	strb	r1, [r4, #3]
            jlb_rx.measurements_1.line_sensor_5  = 4 == controller.selected_front ? controller.detection_front[4] + 2.0f : controller.detection_front[4];
 8003e6a:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
            jlb_rx.measurements_1.line_sensor_6  = 5 == controller.selected_front ? controller.detection_front[5] + 2.0f : controller.detection_front[5];
 8003e6e:	2a05      	cmp	r2, #5
            jlb_rx.measurements_1.line_sensor_5  = 4 == controller.selected_front ? controller.detection_front[4] + 2.0f : controller.detection_front[4];
 8003e70:	7121      	strb	r1, [r4, #4]
            jlb_rx.measurements_1.line_sensor_6  = 5 == controller.selected_front ? controller.detection_front[5] + 2.0f : controller.detection_front[5];
 8003e72:	f040 80f6 	bne.w	8004062 <_ZN3jlb12SignalSender14measurements_1Ev+0x23a>
 8003e76:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
 8003e7a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003e7e:	ee07 1a90 	vmov	s15, r1
 8003e82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e8e:	ee17 1a90 	vmov	r1, s15
 8003e92:	7161      	strb	r1, [r4, #5]
            jlb_rx.measurements_1.line_sensor_7  = 6 == controller.selected_front ? controller.detection_front[6] + 2.0f : controller.detection_front[6];
 8003e94:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 8003e98:	71a1      	strb	r1, [r4, #6]
            jlb_rx.measurements_1.line_sensor_8  = 7 == controller.selected_front ? controller.detection_front[7] + 2.0f : controller.detection_front[7];
 8003e9a:	f893 103b 	ldrb.w	r1, [r3, #59]	; 0x3b
 8003e9e:	71e1      	strb	r1, [r4, #7]
            jlb_rx.measurements_1.line_sensor_9  = 8 == controller.selected_front ? controller.detection_front[8] + 2.0f : controller.detection_front[8];
 8003ea0:	f893 103c 	ldrb.w	r1, [r3, #60]	; 0x3c
 8003ea4:	7221      	strb	r1, [r4, #8]
            jlb_rx.measurements_1.line_sensor_10 = 9 == controller.selected_front ? controller.detection_front[9] + 2.0f : controller.detection_front[9];
 8003ea6:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
            jlb_rx.measurements_1.line_sensor_11 = 10 == controller.selected_front ? controller.detection_front[10] + 2.0f : controller.detection_front[10];
 8003eaa:	2a0a      	cmp	r2, #10
            jlb_rx.measurements_1.line_sensor_10 = 9 == controller.selected_front ? controller.detection_front[9] + 2.0f : controller.detection_front[9];
 8003eac:	7261      	strb	r1, [r4, #9]
            jlb_rx.measurements_1.line_sensor_11 = 10 == controller.selected_front ? controller.detection_front[10] + 2.0f : controller.detection_front[10];
 8003eae:	f040 80f6 	bne.w	800409e <_ZN3jlb12SignalSender14measurements_1Ev+0x276>
 8003eb2:	f893 103e 	ldrb.w	r1, [r3, #62]	; 0x3e
 8003eb6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003eba:	ee07 1a90 	vmov	s15, r1
 8003ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ec2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003eca:	ee17 1a90 	vmov	r1, s15
 8003ece:	72a1      	strb	r1, [r4, #10]
            jlb_rx.measurements_1.line_sensor_12 = 11 == controller.selected_front ? controller.detection_front[11] + 2.0f : controller.detection_front[11];
 8003ed0:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 8003ed4:	72e1      	strb	r1, [r4, #11]
            jlb_rx.measurements_1.line_sensor_13 = 12 == controller.selected_front ? controller.detection_front[12] + 2.0f : controller.detection_front[12];
 8003ed6:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 8003eda:	7321      	strb	r1, [r4, #12]
            jlb_rx.measurements_1.line_sensor_14 = 13 == controller.selected_front ? controller.detection_front[13] + 2.0f : controller.detection_front[13];
 8003edc:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
 8003ee0:	7361      	strb	r1, [r4, #13]
            jlb_rx.measurements_1.line_sensor_15 = 14 == controller.selected_front ? controller.detection_front[14] + 2.0f : controller.detection_front[14];
 8003ee2:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
            jlb_rx.measurements_1.line_sensor_16 = 15 == controller.selected_front ? controller.detection_front[15] + 2.0f : controller.detection_front[15];
 8003ee6:	2a0f      	cmp	r2, #15
            jlb_rx.measurements_1.line_sensor_15 = 14 == controller.selected_front ? controller.detection_front[14] + 2.0f : controller.detection_front[14];
 8003ee8:	73a1      	strb	r1, [r4, #14]
            jlb_rx.measurements_1.line_sensor_16 = 15 == controller.selected_front ? controller.detection_front[15] + 2.0f : controller.detection_front[15];
 8003eea:	f040 80f6 	bne.w	80040da <_ZN3jlb12SignalSender14measurements_1Ev+0x2b2>
 8003eee:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
 8003ef2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003ef6:	ee07 1a90 	vmov	s15, r1
 8003efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003efe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f06:	ee17 1a90 	vmov	r1, s15
 8003f0a:	73e1      	strb	r1, [r4, #15]
#ifndef SIMULATION
            jlb_rx.measurements_1.line_sensor_17 = 16 == controller.selected_front ? controller.detection_front[16] + 2.0f : controller.detection_front[16];
 8003f0c:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 8003f10:	7421      	strb	r1, [r4, #16]
            jlb_rx.measurements_1.line_sensor_18 = 17 == controller.selected_front ? controller.detection_front[17] + 2.0f : controller.detection_front[17];
 8003f12:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 8003f16:	7461      	strb	r1, [r4, #17]
            jlb_rx.measurements_1.line_sensor_19 = 18 == controller.selected_front ? controller.detection_front[18] + 2.0f : controller.detection_front[18];
 8003f18:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 8003f1c:	74a1      	strb	r1, [r4, #18]
            jlb_rx.measurements_1.line_sensor_20 = 19 == controller.selected_front ? controller.detection_front[19] + 2.0f : controller.detection_front[19];
 8003f1e:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
            jlb_rx.measurements_1.line_sensor_21 = 20 == controller.selected_front ? controller.detection_front[20] + 2.0f : controller.detection_front[20];
 8003f22:	2a14      	cmp	r2, #20
            jlb_rx.measurements_1.line_sensor_20 = 19 == controller.selected_front ? controller.detection_front[19] + 2.0f : controller.detection_front[19];
 8003f24:	74e1      	strb	r1, [r4, #19]
            jlb_rx.measurements_1.line_sensor_21 = 20 == controller.selected_front ? controller.detection_front[20] + 2.0f : controller.detection_front[20];
 8003f26:	f040 80f6 	bne.w	8004116 <_ZN3jlb12SignalSender14measurements_1Ev+0x2ee>
 8003f2a:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 8003f2e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003f32:	ee07 1a90 	vmov	s15, r1
 8003f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f42:	ee17 1a90 	vmov	r1, s15
 8003f46:	7521      	strb	r1, [r4, #20]
            jlb_rx.measurements_1.line_sensor_22 = 21 == controller.selected_front ? controller.detection_front[21] + 2.0f : controller.detection_front[21];
 8003f48:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 8003f4c:	7561      	strb	r1, [r4, #21]
            jlb_rx.measurements_1.line_sensor_23 = 22 == controller.selected_front ? controller.detection_front[22] + 2.0f : controller.detection_front[22];
 8003f4e:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
 8003f52:	75a1      	strb	r1, [r4, #22]
            jlb_rx.measurements_1.line_sensor_24 = 23 == controller.selected_front ? controller.detection_front[23] + 2.0f : controller.detection_front[23];
 8003f54:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
 8003f58:	75e1      	strb	r1, [r4, #23]
            jlb_rx.measurements_1.line_sensor_25 = 24 == controller.selected_front ? controller.detection_front[24] + 2.0f : controller.detection_front[24];
 8003f5a:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
            jlb_rx.measurements_1.line_sensor_26 = 25 == controller.selected_front ? controller.detection_front[25] + 2.0f : controller.detection_front[25];
 8003f5e:	2a19      	cmp	r2, #25
            jlb_rx.measurements_1.line_sensor_25 = 24 == controller.selected_front ? controller.detection_front[24] + 2.0f : controller.detection_front[24];
 8003f60:	7621      	strb	r1, [r4, #24]
            jlb_rx.measurements_1.line_sensor_26 = 25 == controller.selected_front ? controller.detection_front[25] + 2.0f : controller.detection_front[25];
 8003f62:	f040 80f6 	bne.w	8004152 <_ZN3jlb12SignalSender14measurements_1Ev+0x32a>
 8003f66:	f893 104d 	ldrb.w	r1, [r3, #77]	; 0x4d
 8003f6a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003f6e:	ee07 1a90 	vmov	s15, r1
 8003f72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f7e:	ee17 1a90 	vmov	r1, s15
 8003f82:	7661      	strb	r1, [r4, #25]
            jlb_rx.measurements_1.line_sensor_27 = 26 == controller.selected_front ? controller.detection_front[26] + 2.0f : controller.detection_front[26];
 8003f84:	f893 104e 	ldrb.w	r1, [r3, #78]	; 0x4e
 8003f88:	76a1      	strb	r1, [r4, #26]
            jlb_rx.measurements_1.line_sensor_28 = 27 == controller.selected_front ? controller.detection_front[27] + 2.0f : controller.detection_front[27];
 8003f8a:	f893 104f 	ldrb.w	r1, [r3, #79]	; 0x4f
 8003f8e:	76e1      	strb	r1, [r4, #27]
            jlb_rx.measurements_1.line_sensor_29 = 28 == controller.selected_front ? controller.detection_front[28] + 2.0f : controller.detection_front[28];
 8003f90:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8003f94:	7721      	strb	r1, [r4, #28]
            jlb_rx.measurements_1.line_sensor_30 = 29 == controller.selected_front ? controller.detection_front[29] + 2.0f : controller.detection_front[29];
 8003f96:	f893 1051 	ldrb.w	r1, [r3, #81]	; 0x51
            jlb_rx.measurements_1.line_sensor_31 = 30 == controller.selected_front ? controller.detection_front[30] + 2.0f : controller.detection_front[30];
 8003f9a:	2a1e      	cmp	r2, #30
            jlb_rx.measurements_1.line_sensor_30 = 29 == controller.selected_front ? controller.detection_front[29] + 2.0f : controller.detection_front[29];
 8003f9c:	7761      	strb	r1, [r4, #29]
            jlb_rx.measurements_1.line_sensor_31 = 30 == controller.selected_front ? controller.detection_front[30] + 2.0f : controller.detection_front[30];
 8003f9e:	f040 80f6 	bne.w	800418e <_ZN3jlb12SignalSender14measurements_1Ev+0x366>
 8003fa2:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8003fa6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003faa:	ee07 2a90 	vmov	s15, r2
 8003fae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003fb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fba:	ee17 2a90 	vmov	r2, s15
 8003fbe:	77a2      	strb	r2, [r4, #30]
            jlb_rx.measurements_1.line_sensor_32 = 31 == controller.selected_front ? controller.detection_front[31] + 2.0f : controller.detection_front[31];
 8003fc0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
#endif

            char    data[measurements_1_DLC + 2] = {0};
 8003fc4:	2500      	movs	r5, #0
            uint8_t ide                          = measurements_1_IDE;
            uint8_t dlc                          = measurements_1_DLC;
 8003fc6:	f04f 0e08 	mov.w	lr, #8
            data[0]                              = measurements_1_CANID;
 8003fca:	f640 0c01 	movw	ip, #2049	; 0x801
            jlb_rx.measurements_1.line_sensor_32 = 31 == controller.selected_front ? controller.detection_front[31] + 2.0f : controller.detection_front[31];
 8003fce:	77e3      	strb	r3, [r4, #31]
            data[1]                              = measurements_1_DLC;
            Pack_measurements_1_jlb(&jlb_rx.measurements_1, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 8003fd0:	f10d 020b 	add.w	r2, sp, #11
 8003fd4:	f10d 030a 	add.w	r3, sp, #10
 8003fd8:	f10d 010e 	add.w	r1, sp, #14
 8003fdc:	4620      	mov	r0, r4
            char    data[measurements_1_DLC + 2] = {0};
 8003fde:	e9cd 5503 	strd	r5, r5, [sp, #12]
            uint8_t dlc                          = measurements_1_DLC;
 8003fe2:	f88d e00b 	strb.w	lr, [sp, #11]
            data[0]                              = measurements_1_CANID;
 8003fe6:	f8ad c00c 	strh.w	ip, [sp, #12]
            uint8_t ide                          = measurements_1_IDE;
 8003fea:	f88d 500a 	strb.w	r5, [sp, #10]
            char    data[measurements_1_DLC + 2] = {0};
 8003fee:	f8ad 5014 	strh.w	r5, [sp, #20]
            Pack_measurements_1_jlb(&jlb_rx.measurements_1, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 8003ff2:	f7fc ff99 	bl	8000f28 <Pack_measurements_1_jlb>
	  _M_range_insert(__pos, __first, __last,
 8003ff6:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
 8003ffa:	aa03      	add	r2, sp, #12
 8003ffc:	f10d 0316 	add.w	r3, sp, #22
 8004000:	f504 70ee 	add.w	r0, r4, #476	; 0x1dc
 8004004:	f7ff f9e0 	bl	80033c8 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag.isra.0>
            telemetry_data.insert(telemetry_data.end(), data, data + measurements_1_DLC + 2);
        }
 8004008:	b007      	add	sp, #28
 800400a:	bd30      	pop	{r4, r5, pc}
            jlb_rx.measurements_1.line_sensor_1  = 0 == controller.selected_front ? controller.detection_front[0] + 2.0f : controller.detection_front[0];
 800400c:	7001      	strb	r1, [r0, #0]
            jlb_rx.measurements_1.line_sensor_2  = 1 == controller.selected_front ? controller.detection_front[1] + 2.0f : controller.detection_front[1];
 800400e:	2a01      	cmp	r2, #1
 8004010:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8004014:	d10c      	bne.n	8004030 <_ZN3jlb12SignalSender14measurements_1Ev+0x208>
 8004016:	ee07 1a90 	vmov	s15, r1
 800401a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800401e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004022:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800402a:	ee17 1a90 	vmov	r1, s15
 800402e:	e715      	b.n	8003e5c <_ZN3jlb12SignalSender14measurements_1Ev+0x34>
 8004030:	7041      	strb	r1, [r0, #1]
            jlb_rx.measurements_1.line_sensor_3  = 2 == controller.selected_front ? controller.detection_front[2] + 2.0f : controller.detection_front[2];
 8004032:	2a02      	cmp	r2, #2
 8004034:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 8004038:	f040 80c0 	bne.w	80041bc <_ZN3jlb12SignalSender14measurements_1Ev+0x394>
 800403c:	ee07 1a90 	vmov	s15, r1
 8004040:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004048:	ee77 7a87 	vadd.f32	s15, s15, s14
 800404c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004050:	ee17 1a90 	vmov	r1, s15
 8004054:	7081      	strb	r1, [r0, #2]
            jlb_rx.measurements_1.line_sensor_4  = 3 == controller.selected_front ? controller.detection_front[3] + 2.0f : controller.detection_front[3];
 8004056:	f893 1037 	ldrb.w	r1, [r3, #55]	; 0x37
 800405a:	70c1      	strb	r1, [r0, #3]
            jlb_rx.measurements_1.line_sensor_5  = 4 == controller.selected_front ? controller.detection_front[4] + 2.0f : controller.detection_front[4];
 800405c:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 8004060:	7101      	strb	r1, [r0, #4]
            jlb_rx.measurements_1.line_sensor_6  = 5 == controller.selected_front ? controller.detection_front[5] + 2.0f : controller.detection_front[5];
 8004062:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
            jlb_rx.measurements_1.line_sensor_7  = 6 == controller.selected_front ? controller.detection_front[6] + 2.0f : controller.detection_front[6];
 8004066:	2a06      	cmp	r2, #6
            jlb_rx.measurements_1.line_sensor_6  = 5 == controller.selected_front ? controller.detection_front[5] + 2.0f : controller.detection_front[5];
 8004068:	7161      	strb	r1, [r4, #5]
            jlb_rx.measurements_1.line_sensor_7  = 6 == controller.selected_front ? controller.detection_front[6] + 2.0f : controller.detection_front[6];
 800406a:	f040 80c0 	bne.w	80041ee <_ZN3jlb12SignalSender14measurements_1Ev+0x3c6>
 800406e:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 8004072:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004076:	ee07 1a90 	vmov	s15, r1
 800407a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800407e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004086:	ee17 1a90 	vmov	r1, s15
 800408a:	71a1      	strb	r1, [r4, #6]
            jlb_rx.measurements_1.line_sensor_8  = 7 == controller.selected_front ? controller.detection_front[7] + 2.0f : controller.detection_front[7];
 800408c:	f893 103b 	ldrb.w	r1, [r3, #59]	; 0x3b
 8004090:	71e1      	strb	r1, [r4, #7]
            jlb_rx.measurements_1.line_sensor_9  = 8 == controller.selected_front ? controller.detection_front[8] + 2.0f : controller.detection_front[8];
 8004092:	f893 103c 	ldrb.w	r1, [r3, #60]	; 0x3c
 8004096:	7221      	strb	r1, [r4, #8]
            jlb_rx.measurements_1.line_sensor_10 = 9 == controller.selected_front ? controller.detection_front[9] + 2.0f : controller.detection_front[9];
 8004098:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
 800409c:	7261      	strb	r1, [r4, #9]
            jlb_rx.measurements_1.line_sensor_11 = 10 == controller.selected_front ? controller.detection_front[10] + 2.0f : controller.detection_front[10];
 800409e:	f893 103e 	ldrb.w	r1, [r3, #62]	; 0x3e
            jlb_rx.measurements_1.line_sensor_12 = 11 == controller.selected_front ? controller.detection_front[11] + 2.0f : controller.detection_front[11];
 80040a2:	2a0b      	cmp	r2, #11
            jlb_rx.measurements_1.line_sensor_11 = 10 == controller.selected_front ? controller.detection_front[10] + 2.0f : controller.detection_front[10];
 80040a4:	72a1      	strb	r1, [r4, #10]
            jlb_rx.measurements_1.line_sensor_12 = 11 == controller.selected_front ? controller.detection_front[11] + 2.0f : controller.detection_front[11];
 80040a6:	f040 80c0 	bne.w	800422a <_ZN3jlb12SignalSender14measurements_1Ev+0x402>
 80040aa:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 80040ae:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80040b2:	ee07 1a90 	vmov	s15, r1
 80040b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80040be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040c2:	ee17 1a90 	vmov	r1, s15
 80040c6:	72e1      	strb	r1, [r4, #11]
            jlb_rx.measurements_1.line_sensor_13 = 12 == controller.selected_front ? controller.detection_front[12] + 2.0f : controller.detection_front[12];
 80040c8:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 80040cc:	7321      	strb	r1, [r4, #12]
            jlb_rx.measurements_1.line_sensor_14 = 13 == controller.selected_front ? controller.detection_front[13] + 2.0f : controller.detection_front[13];
 80040ce:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
 80040d2:	7361      	strb	r1, [r4, #13]
            jlb_rx.measurements_1.line_sensor_15 = 14 == controller.selected_front ? controller.detection_front[14] + 2.0f : controller.detection_front[14];
 80040d4:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 80040d8:	73a1      	strb	r1, [r4, #14]
            jlb_rx.measurements_1.line_sensor_16 = 15 == controller.selected_front ? controller.detection_front[15] + 2.0f : controller.detection_front[15];
 80040da:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
            jlb_rx.measurements_1.line_sensor_17 = 16 == controller.selected_front ? controller.detection_front[16] + 2.0f : controller.detection_front[16];
 80040de:	2a10      	cmp	r2, #16
            jlb_rx.measurements_1.line_sensor_16 = 15 == controller.selected_front ? controller.detection_front[15] + 2.0f : controller.detection_front[15];
 80040e0:	73e1      	strb	r1, [r4, #15]
            jlb_rx.measurements_1.line_sensor_17 = 16 == controller.selected_front ? controller.detection_front[16] + 2.0f : controller.detection_front[16];
 80040e2:	f040 80c0 	bne.w	8004266 <_ZN3jlb12SignalSender14measurements_1Ev+0x43e>
 80040e6:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 80040ea:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80040ee:	ee07 1a90 	vmov	s15, r1
 80040f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80040fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040fe:	ee17 1a90 	vmov	r1, s15
 8004102:	7421      	strb	r1, [r4, #16]
            jlb_rx.measurements_1.line_sensor_18 = 17 == controller.selected_front ? controller.detection_front[17] + 2.0f : controller.detection_front[17];
 8004104:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 8004108:	7461      	strb	r1, [r4, #17]
            jlb_rx.measurements_1.line_sensor_19 = 18 == controller.selected_front ? controller.detection_front[18] + 2.0f : controller.detection_front[18];
 800410a:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 800410e:	74a1      	strb	r1, [r4, #18]
            jlb_rx.measurements_1.line_sensor_20 = 19 == controller.selected_front ? controller.detection_front[19] + 2.0f : controller.detection_front[19];
 8004110:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
 8004114:	74e1      	strb	r1, [r4, #19]
            jlb_rx.measurements_1.line_sensor_21 = 20 == controller.selected_front ? controller.detection_front[20] + 2.0f : controller.detection_front[20];
 8004116:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
            jlb_rx.measurements_1.line_sensor_22 = 21 == controller.selected_front ? controller.detection_front[21] + 2.0f : controller.detection_front[21];
 800411a:	2a15      	cmp	r2, #21
            jlb_rx.measurements_1.line_sensor_21 = 20 == controller.selected_front ? controller.detection_front[20] + 2.0f : controller.detection_front[20];
 800411c:	7521      	strb	r1, [r4, #20]
            jlb_rx.measurements_1.line_sensor_22 = 21 == controller.selected_front ? controller.detection_front[21] + 2.0f : controller.detection_front[21];
 800411e:	f040 80c0 	bne.w	80042a2 <_ZN3jlb12SignalSender14measurements_1Ev+0x47a>
 8004122:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 8004126:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800412a:	ee07 1a90 	vmov	s15, r1
 800412e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004132:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800413a:	ee17 1a90 	vmov	r1, s15
 800413e:	7561      	strb	r1, [r4, #21]
            jlb_rx.measurements_1.line_sensor_23 = 22 == controller.selected_front ? controller.detection_front[22] + 2.0f : controller.detection_front[22];
 8004140:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
 8004144:	75a1      	strb	r1, [r4, #22]
            jlb_rx.measurements_1.line_sensor_24 = 23 == controller.selected_front ? controller.detection_front[23] + 2.0f : controller.detection_front[23];
 8004146:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
 800414a:	75e1      	strb	r1, [r4, #23]
            jlb_rx.measurements_1.line_sensor_25 = 24 == controller.selected_front ? controller.detection_front[24] + 2.0f : controller.detection_front[24];
 800414c:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 8004150:	7621      	strb	r1, [r4, #24]
            jlb_rx.measurements_1.line_sensor_26 = 25 == controller.selected_front ? controller.detection_front[25] + 2.0f : controller.detection_front[25];
 8004152:	f893 104d 	ldrb.w	r1, [r3, #77]	; 0x4d
            jlb_rx.measurements_1.line_sensor_27 = 26 == controller.selected_front ? controller.detection_front[26] + 2.0f : controller.detection_front[26];
 8004156:	2a1a      	cmp	r2, #26
            jlb_rx.measurements_1.line_sensor_26 = 25 == controller.selected_front ? controller.detection_front[25] + 2.0f : controller.detection_front[25];
 8004158:	7661      	strb	r1, [r4, #25]
            jlb_rx.measurements_1.line_sensor_27 = 26 == controller.selected_front ? controller.detection_front[26] + 2.0f : controller.detection_front[26];
 800415a:	f040 80c0 	bne.w	80042de <_ZN3jlb12SignalSender14measurements_1Ev+0x4b6>
 800415e:	f893 104e 	ldrb.w	r1, [r3, #78]	; 0x4e
 8004162:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004166:	ee07 1a90 	vmov	s15, r1
 800416a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800416e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004176:	ee17 1a90 	vmov	r1, s15
 800417a:	76a1      	strb	r1, [r4, #26]
            jlb_rx.measurements_1.line_sensor_28 = 27 == controller.selected_front ? controller.detection_front[27] + 2.0f : controller.detection_front[27];
 800417c:	f893 104f 	ldrb.w	r1, [r3, #79]	; 0x4f
 8004180:	76e1      	strb	r1, [r4, #27]
            jlb_rx.measurements_1.line_sensor_29 = 28 == controller.selected_front ? controller.detection_front[28] + 2.0f : controller.detection_front[28];
 8004182:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8004186:	7721      	strb	r1, [r4, #28]
            jlb_rx.measurements_1.line_sensor_30 = 29 == controller.selected_front ? controller.detection_front[29] + 2.0f : controller.detection_front[29];
 8004188:	f893 1051 	ldrb.w	r1, [r3, #81]	; 0x51
 800418c:	7761      	strb	r1, [r4, #29]
            jlb_rx.measurements_1.line_sensor_31 = 30 == controller.selected_front ? controller.detection_front[30] + 2.0f : controller.detection_front[30];
 800418e:	f893 1052 	ldrb.w	r1, [r3, #82]	; 0x52
            jlb_rx.measurements_1.line_sensor_32 = 31 == controller.selected_front ? controller.detection_front[31] + 2.0f : controller.detection_front[31];
 8004192:	2a1f      	cmp	r2, #31
            jlb_rx.measurements_1.line_sensor_31 = 30 == controller.selected_front ? controller.detection_front[30] + 2.0f : controller.detection_front[30];
 8004194:	77a1      	strb	r1, [r4, #30]
            jlb_rx.measurements_1.line_sensor_32 = 31 == controller.selected_front ? controller.detection_front[31] + 2.0f : controller.detection_front[31];
 8004196:	f47f af13 	bne.w	8003fc0 <_ZN3jlb12SignalSender14measurements_1Ev+0x198>
 800419a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800419e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80041a2:	ee07 3a90 	vmov	s15, r3
 80041a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041b2:	edcd 7a01 	vstr	s15, [sp, #4]
 80041b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80041ba:	e703      	b.n	8003fc4 <_ZN3jlb12SignalSender14measurements_1Ev+0x19c>
            jlb_rx.measurements_1.line_sensor_3  = 2 == controller.selected_front ? controller.detection_front[2] + 2.0f : controller.detection_front[2];
 80041bc:	7081      	strb	r1, [r0, #2]
            jlb_rx.measurements_1.line_sensor_4  = 3 == controller.selected_front ? controller.detection_front[3] + 2.0f : controller.detection_front[3];
 80041be:	2a03      	cmp	r2, #3
 80041c0:	f893 1037 	ldrb.w	r1, [r3, #55]	; 0x37
 80041c4:	f040 8135 	bne.w	8004432 <_ZN3jlb12SignalSender14measurements_1Ev+0x60a>
 80041c8:	ee07 1a90 	vmov	s15, r1
 80041cc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80041d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041dc:	ee17 1a90 	vmov	r1, s15
 80041e0:	70c1      	strb	r1, [r0, #3]
            jlb_rx.measurements_1.line_sensor_5  = 4 == controller.selected_front ? controller.detection_front[4] + 2.0f : controller.detection_front[4];
 80041e2:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 80041e6:	7101      	strb	r1, [r0, #4]
            jlb_rx.measurements_1.line_sensor_6  = 5 == controller.selected_front ? controller.detection_front[5] + 2.0f : controller.detection_front[5];
 80041e8:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
 80041ec:	7141      	strb	r1, [r0, #5]
            jlb_rx.measurements_1.line_sensor_7  = 6 == controller.selected_front ? controller.detection_front[6] + 2.0f : controller.detection_front[6];
 80041ee:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
            jlb_rx.measurements_1.line_sensor_8  = 7 == controller.selected_front ? controller.detection_front[7] + 2.0f : controller.detection_front[7];
 80041f2:	2a07      	cmp	r2, #7
            jlb_rx.measurements_1.line_sensor_7  = 6 == controller.selected_front ? controller.detection_front[6] + 2.0f : controller.detection_front[6];
 80041f4:	71a1      	strb	r1, [r4, #6]
            jlb_rx.measurements_1.line_sensor_8  = 7 == controller.selected_front ? controller.detection_front[7] + 2.0f : controller.detection_front[7];
 80041f6:	f893 103b 	ldrb.w	r1, [r3, #59]	; 0x3b
 80041fa:	f040 808f 	bne.w	800431c <_ZN3jlb12SignalSender14measurements_1Ev+0x4f4>
 80041fe:	ee07 1a90 	vmov	s15, r1
 8004202:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800420a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800420e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004212:	ee17 1a90 	vmov	r1, s15
 8004216:	71e1      	strb	r1, [r4, #7]
            jlb_rx.measurements_1.line_sensor_9  = 8 == controller.selected_front ? controller.detection_front[8] + 2.0f : controller.detection_front[8];
 8004218:	f893 103c 	ldrb.w	r1, [r3, #60]	; 0x3c
 800421c:	7221      	strb	r1, [r4, #8]
            jlb_rx.measurements_1.line_sensor_10 = 9 == controller.selected_front ? controller.detection_front[9] + 2.0f : controller.detection_front[9];
 800421e:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
 8004222:	7261      	strb	r1, [r4, #9]
            jlb_rx.measurements_1.line_sensor_11 = 10 == controller.selected_front ? controller.detection_front[10] + 2.0f : controller.detection_front[10];
 8004224:	f893 103e 	ldrb.w	r1, [r3, #62]	; 0x3e
 8004228:	72a1      	strb	r1, [r4, #10]
            jlb_rx.measurements_1.line_sensor_12 = 11 == controller.selected_front ? controller.detection_front[11] + 2.0f : controller.detection_front[11];
 800422a:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
            jlb_rx.measurements_1.line_sensor_13 = 12 == controller.selected_front ? controller.detection_front[12] + 2.0f : controller.detection_front[12];
 800422e:	2a0c      	cmp	r2, #12
            jlb_rx.measurements_1.line_sensor_12 = 11 == controller.selected_front ? controller.detection_front[11] + 2.0f : controller.detection_front[11];
 8004230:	72e1      	strb	r1, [r4, #11]
            jlb_rx.measurements_1.line_sensor_13 = 12 == controller.selected_front ? controller.detection_front[12] + 2.0f : controller.detection_front[12];
 8004232:	f040 808f 	bne.w	8004354 <_ZN3jlb12SignalSender14measurements_1Ev+0x52c>
 8004236:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 800423a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800423e:	ee07 1a90 	vmov	s15, r1
 8004242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004246:	ee77 7a87 	vadd.f32	s15, s15, s14
 800424a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800424e:	ee17 1a90 	vmov	r1, s15
 8004252:	7321      	strb	r1, [r4, #12]
            jlb_rx.measurements_1.line_sensor_14 = 13 == controller.selected_front ? controller.detection_front[13] + 2.0f : controller.detection_front[13];
 8004254:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
 8004258:	7361      	strb	r1, [r4, #13]
            jlb_rx.measurements_1.line_sensor_15 = 14 == controller.selected_front ? controller.detection_front[14] + 2.0f : controller.detection_front[14];
 800425a:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 800425e:	73a1      	strb	r1, [r4, #14]
            jlb_rx.measurements_1.line_sensor_16 = 15 == controller.selected_front ? controller.detection_front[15] + 2.0f : controller.detection_front[15];
 8004260:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
 8004264:	73e1      	strb	r1, [r4, #15]
            jlb_rx.measurements_1.line_sensor_17 = 16 == controller.selected_front ? controller.detection_front[16] + 2.0f : controller.detection_front[16];
 8004266:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
            jlb_rx.measurements_1.line_sensor_18 = 17 == controller.selected_front ? controller.detection_front[17] + 2.0f : controller.detection_front[17];
 800426a:	2a11      	cmp	r2, #17
            jlb_rx.measurements_1.line_sensor_17 = 16 == controller.selected_front ? controller.detection_front[16] + 2.0f : controller.detection_front[16];
 800426c:	7421      	strb	r1, [r4, #16]
            jlb_rx.measurements_1.line_sensor_18 = 17 == controller.selected_front ? controller.detection_front[17] + 2.0f : controller.detection_front[17];
 800426e:	f040 808f 	bne.w	8004390 <_ZN3jlb12SignalSender14measurements_1Ev+0x568>
 8004272:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 8004276:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800427a:	ee07 1a90 	vmov	s15, r1
 800427e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004282:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800428a:	ee17 1a90 	vmov	r1, s15
 800428e:	7461      	strb	r1, [r4, #17]
            jlb_rx.measurements_1.line_sensor_19 = 18 == controller.selected_front ? controller.detection_front[18] + 2.0f : controller.detection_front[18];
 8004290:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 8004294:	74a1      	strb	r1, [r4, #18]
            jlb_rx.measurements_1.line_sensor_20 = 19 == controller.selected_front ? controller.detection_front[19] + 2.0f : controller.detection_front[19];
 8004296:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
 800429a:	74e1      	strb	r1, [r4, #19]
            jlb_rx.measurements_1.line_sensor_21 = 20 == controller.selected_front ? controller.detection_front[20] + 2.0f : controller.detection_front[20];
 800429c:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 80042a0:	7521      	strb	r1, [r4, #20]
            jlb_rx.measurements_1.line_sensor_22 = 21 == controller.selected_front ? controller.detection_front[21] + 2.0f : controller.detection_front[21];
 80042a2:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
            jlb_rx.measurements_1.line_sensor_23 = 22 == controller.selected_front ? controller.detection_front[22] + 2.0f : controller.detection_front[22];
 80042a6:	2a16      	cmp	r2, #22
            jlb_rx.measurements_1.line_sensor_22 = 21 == controller.selected_front ? controller.detection_front[21] + 2.0f : controller.detection_front[21];
 80042a8:	7561      	strb	r1, [r4, #21]
            jlb_rx.measurements_1.line_sensor_23 = 22 == controller.selected_front ? controller.detection_front[22] + 2.0f : controller.detection_front[22];
 80042aa:	f040 808f 	bne.w	80043cc <_ZN3jlb12SignalSender14measurements_1Ev+0x5a4>
 80042ae:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
 80042b2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80042b6:	ee07 1a90 	vmov	s15, r1
 80042ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042c6:	ee17 1a90 	vmov	r1, s15
 80042ca:	75a1      	strb	r1, [r4, #22]
            jlb_rx.measurements_1.line_sensor_24 = 23 == controller.selected_front ? controller.detection_front[23] + 2.0f : controller.detection_front[23];
 80042cc:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
 80042d0:	75e1      	strb	r1, [r4, #23]
            jlb_rx.measurements_1.line_sensor_25 = 24 == controller.selected_front ? controller.detection_front[24] + 2.0f : controller.detection_front[24];
 80042d2:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 80042d6:	7621      	strb	r1, [r4, #24]
            jlb_rx.measurements_1.line_sensor_26 = 25 == controller.selected_front ? controller.detection_front[25] + 2.0f : controller.detection_front[25];
 80042d8:	f893 104d 	ldrb.w	r1, [r3, #77]	; 0x4d
 80042dc:	7661      	strb	r1, [r4, #25]
            jlb_rx.measurements_1.line_sensor_27 = 26 == controller.selected_front ? controller.detection_front[26] + 2.0f : controller.detection_front[26];
 80042de:	f893 104e 	ldrb.w	r1, [r3, #78]	; 0x4e
            jlb_rx.measurements_1.line_sensor_28 = 27 == controller.selected_front ? controller.detection_front[27] + 2.0f : controller.detection_front[27];
 80042e2:	2a1b      	cmp	r2, #27
            jlb_rx.measurements_1.line_sensor_27 = 26 == controller.selected_front ? controller.detection_front[26] + 2.0f : controller.detection_front[26];
 80042e4:	76a1      	strb	r1, [r4, #26]
            jlb_rx.measurements_1.line_sensor_28 = 27 == controller.selected_front ? controller.detection_front[27] + 2.0f : controller.detection_front[27];
 80042e6:	f040 808f 	bne.w	8004408 <_ZN3jlb12SignalSender14measurements_1Ev+0x5e0>
 80042ea:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 80042ee:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80042f2:	ee07 2a90 	vmov	s15, r2
 80042f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004302:	ee17 2a90 	vmov	r2, s15
 8004306:	76e2      	strb	r2, [r4, #27]
            jlb_rx.measurements_1.line_sensor_29 = 28 == controller.selected_front ? controller.detection_front[28] + 2.0f : controller.detection_front[28];
 8004308:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 800430c:	7722      	strb	r2, [r4, #28]
            jlb_rx.measurements_1.line_sensor_30 = 29 == controller.selected_front ? controller.detection_front[29] + 2.0f : controller.detection_front[29];
 800430e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8004312:	7762      	strb	r2, [r4, #29]
            jlb_rx.measurements_1.line_sensor_31 = 30 == controller.selected_front ? controller.detection_front[30] + 2.0f : controller.detection_front[30];
 8004314:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8004318:	77a2      	strb	r2, [r4, #30]
            jlb_rx.measurements_1.line_sensor_32 = 31 == controller.selected_front ? controller.detection_front[31] + 2.0f : controller.detection_front[31];
 800431a:	e651      	b.n	8003fc0 <_ZN3jlb12SignalSender14measurements_1Ev+0x198>
            jlb_rx.measurements_1.line_sensor_9  = 8 == controller.selected_front ? controller.detection_front[8] + 2.0f : controller.detection_front[8];
 800431c:	2a08      	cmp	r2, #8
            jlb_rx.measurements_1.line_sensor_8  = 7 == controller.selected_front ? controller.detection_front[7] + 2.0f : controller.detection_front[7];
 800431e:	71e1      	strb	r1, [r4, #7]
            jlb_rx.measurements_1.line_sensor_9  = 8 == controller.selected_front ? controller.detection_front[8] + 2.0f : controller.detection_front[8];
 8004320:	f040 80a3 	bne.w	800446a <_ZN3jlb12SignalSender14measurements_1Ev+0x642>
 8004324:	f893 103c 	ldrb.w	r1, [r3, #60]	; 0x3c
 8004328:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800432c:	ee07 1a90 	vmov	s15, r1
 8004330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004334:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800433c:	ee17 1a90 	vmov	r1, s15
 8004340:	7221      	strb	r1, [r4, #8]
            jlb_rx.measurements_1.line_sensor_10 = 9 == controller.selected_front ? controller.detection_front[9] + 2.0f : controller.detection_front[9];
 8004342:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
 8004346:	7261      	strb	r1, [r4, #9]
            jlb_rx.measurements_1.line_sensor_11 = 10 == controller.selected_front ? controller.detection_front[10] + 2.0f : controller.detection_front[10];
 8004348:	f893 103e 	ldrb.w	r1, [r3, #62]	; 0x3e
 800434c:	72a1      	strb	r1, [r4, #10]
            jlb_rx.measurements_1.line_sensor_12 = 11 == controller.selected_front ? controller.detection_front[11] + 2.0f : controller.detection_front[11];
 800434e:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 8004352:	72e1      	strb	r1, [r4, #11]
            jlb_rx.measurements_1.line_sensor_13 = 12 == controller.selected_front ? controller.detection_front[12] + 2.0f : controller.detection_front[12];
 8004354:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
            jlb_rx.measurements_1.line_sensor_14 = 13 == controller.selected_front ? controller.detection_front[13] + 2.0f : controller.detection_front[13];
 8004358:	2a0d      	cmp	r2, #13
            jlb_rx.measurements_1.line_sensor_13 = 12 == controller.selected_front ? controller.detection_front[12] + 2.0f : controller.detection_front[12];
 800435a:	7321      	strb	r1, [r4, #12]
            jlb_rx.measurements_1.line_sensor_14 = 13 == controller.selected_front ? controller.detection_front[13] + 2.0f : controller.detection_front[13];
 800435c:	f040 80a3 	bne.w	80044a6 <_ZN3jlb12SignalSender14measurements_1Ev+0x67e>
 8004360:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
 8004364:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004368:	ee07 1a90 	vmov	s15, r1
 800436c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004370:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004378:	ee17 1a90 	vmov	r1, s15
 800437c:	7361      	strb	r1, [r4, #13]
            jlb_rx.measurements_1.line_sensor_15 = 14 == controller.selected_front ? controller.detection_front[14] + 2.0f : controller.detection_front[14];
 800437e:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 8004382:	73a1      	strb	r1, [r4, #14]
            jlb_rx.measurements_1.line_sensor_16 = 15 == controller.selected_front ? controller.detection_front[15] + 2.0f : controller.detection_front[15];
 8004384:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
 8004388:	73e1      	strb	r1, [r4, #15]
            jlb_rx.measurements_1.line_sensor_17 = 16 == controller.selected_front ? controller.detection_front[16] + 2.0f : controller.detection_front[16];
 800438a:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 800438e:	7421      	strb	r1, [r4, #16]
            jlb_rx.measurements_1.line_sensor_18 = 17 == controller.selected_front ? controller.detection_front[17] + 2.0f : controller.detection_front[17];
 8004390:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
            jlb_rx.measurements_1.line_sensor_19 = 18 == controller.selected_front ? controller.detection_front[18] + 2.0f : controller.detection_front[18];
 8004394:	2a12      	cmp	r2, #18
            jlb_rx.measurements_1.line_sensor_18 = 17 == controller.selected_front ? controller.detection_front[17] + 2.0f : controller.detection_front[17];
 8004396:	7461      	strb	r1, [r4, #17]
            jlb_rx.measurements_1.line_sensor_19 = 18 == controller.selected_front ? controller.detection_front[18] + 2.0f : controller.detection_front[18];
 8004398:	f040 80a3 	bne.w	80044e2 <_ZN3jlb12SignalSender14measurements_1Ev+0x6ba>
 800439c:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 80043a0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80043a4:	ee07 1a90 	vmov	s15, r1
 80043a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043b4:	ee17 1a90 	vmov	r1, s15
 80043b8:	74a1      	strb	r1, [r4, #18]
            jlb_rx.measurements_1.line_sensor_20 = 19 == controller.selected_front ? controller.detection_front[19] + 2.0f : controller.detection_front[19];
 80043ba:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
 80043be:	74e1      	strb	r1, [r4, #19]
            jlb_rx.measurements_1.line_sensor_21 = 20 == controller.selected_front ? controller.detection_front[20] + 2.0f : controller.detection_front[20];
 80043c0:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 80043c4:	7521      	strb	r1, [r4, #20]
            jlb_rx.measurements_1.line_sensor_22 = 21 == controller.selected_front ? controller.detection_front[21] + 2.0f : controller.detection_front[21];
 80043c6:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 80043ca:	7561      	strb	r1, [r4, #21]
            jlb_rx.measurements_1.line_sensor_23 = 22 == controller.selected_front ? controller.detection_front[22] + 2.0f : controller.detection_front[22];
 80043cc:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
            jlb_rx.measurements_1.line_sensor_24 = 23 == controller.selected_front ? controller.detection_front[23] + 2.0f : controller.detection_front[23];
 80043d0:	2a17      	cmp	r2, #23
            jlb_rx.measurements_1.line_sensor_23 = 22 == controller.selected_front ? controller.detection_front[22] + 2.0f : controller.detection_front[22];
 80043d2:	75a1      	strb	r1, [r4, #22]
            jlb_rx.measurements_1.line_sensor_24 = 23 == controller.selected_front ? controller.detection_front[23] + 2.0f : controller.detection_front[23];
 80043d4:	f040 80a3 	bne.w	800451e <_ZN3jlb12SignalSender14measurements_1Ev+0x6f6>
 80043d8:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
 80043dc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80043e0:	ee07 1a90 	vmov	s15, r1
 80043e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043f0:	ee17 1a90 	vmov	r1, s15
 80043f4:	75e1      	strb	r1, [r4, #23]
            jlb_rx.measurements_1.line_sensor_25 = 24 == controller.selected_front ? controller.detection_front[24] + 2.0f : controller.detection_front[24];
 80043f6:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 80043fa:	7621      	strb	r1, [r4, #24]
            jlb_rx.measurements_1.line_sensor_26 = 25 == controller.selected_front ? controller.detection_front[25] + 2.0f : controller.detection_front[25];
 80043fc:	f893 104d 	ldrb.w	r1, [r3, #77]	; 0x4d
 8004400:	7661      	strb	r1, [r4, #25]
            jlb_rx.measurements_1.line_sensor_27 = 26 == controller.selected_front ? controller.detection_front[26] + 2.0f : controller.detection_front[26];
 8004402:	f893 104e 	ldrb.w	r1, [r3, #78]	; 0x4e
 8004406:	76a1      	strb	r1, [r4, #26]
            jlb_rx.measurements_1.line_sensor_28 = 27 == controller.selected_front ? controller.detection_front[27] + 2.0f : controller.detection_front[27];
 8004408:	f893 104f 	ldrb.w	r1, [r3, #79]	; 0x4f
            jlb_rx.measurements_1.line_sensor_29 = 28 == controller.selected_front ? controller.detection_front[28] + 2.0f : controller.detection_front[28];
 800440c:	2a1c      	cmp	r2, #28
            jlb_rx.measurements_1.line_sensor_28 = 27 == controller.selected_front ? controller.detection_front[27] + 2.0f : controller.detection_front[27];
 800440e:	76e1      	strb	r1, [r4, #27]
            jlb_rx.measurements_1.line_sensor_29 = 28 == controller.selected_front ? controller.detection_front[28] + 2.0f : controller.detection_front[28];
 8004410:	f040 80a3 	bne.w	800455a <_ZN3jlb12SignalSender14measurements_1Ev+0x732>
 8004414:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8004418:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800441c:	ee07 2a90 	vmov	s15, r2
 8004420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004424:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004428:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800442c:	ee17 2a90 	vmov	r2, s15
 8004430:	e76c      	b.n	800430c <_ZN3jlb12SignalSender14measurements_1Ev+0x4e4>
            jlb_rx.measurements_1.line_sensor_5  = 4 == controller.selected_front ? controller.detection_front[4] + 2.0f : controller.detection_front[4];
 8004432:	2a04      	cmp	r2, #4
            jlb_rx.measurements_1.line_sensor_4  = 3 == controller.selected_front ? controller.detection_front[3] + 2.0f : controller.detection_front[3];
 8004434:	70c1      	strb	r1, [r0, #3]
            jlb_rx.measurements_1.line_sensor_5  = 4 == controller.selected_front ? controller.detection_front[4] + 2.0f : controller.detection_front[4];
 8004436:	f47f ad18 	bne.w	8003e6a <_ZN3jlb12SignalSender14measurements_1Ev+0x42>
 800443a:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 800443e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004442:	ee07 1a90 	vmov	s15, r1
 8004446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800444a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800444e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004452:	ee17 1a90 	vmov	r1, s15
 8004456:	7101      	strb	r1, [r0, #4]
            jlb_rx.measurements_1.line_sensor_6  = 5 == controller.selected_front ? controller.detection_front[5] + 2.0f : controller.detection_front[5];
 8004458:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
 800445c:	7141      	strb	r1, [r0, #5]
            jlb_rx.measurements_1.line_sensor_7  = 6 == controller.selected_front ? controller.detection_front[6] + 2.0f : controller.detection_front[6];
 800445e:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 8004462:	7181      	strb	r1, [r0, #6]
            jlb_rx.measurements_1.line_sensor_8  = 7 == controller.selected_front ? controller.detection_front[7] + 2.0f : controller.detection_front[7];
 8004464:	f893 103b 	ldrb.w	r1, [r3, #59]	; 0x3b
 8004468:	71c1      	strb	r1, [r0, #7]
            jlb_rx.measurements_1.line_sensor_9  = 8 == controller.selected_front ? controller.detection_front[8] + 2.0f : controller.detection_front[8];
 800446a:	f893 103c 	ldrb.w	r1, [r3, #60]	; 0x3c
            jlb_rx.measurements_1.line_sensor_10 = 9 == controller.selected_front ? controller.detection_front[9] + 2.0f : controller.detection_front[9];
 800446e:	2a09      	cmp	r2, #9
            jlb_rx.measurements_1.line_sensor_9  = 8 == controller.selected_front ? controller.detection_front[8] + 2.0f : controller.detection_front[8];
 8004470:	7221      	strb	r1, [r4, #8]
            jlb_rx.measurements_1.line_sensor_10 = 9 == controller.selected_front ? controller.detection_front[9] + 2.0f : controller.detection_front[9];
 8004472:	f47f ad18 	bne.w	8003ea6 <_ZN3jlb12SignalSender14measurements_1Ev+0x7e>
 8004476:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
 800447a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800447e:	ee07 1a90 	vmov	s15, r1
 8004482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004486:	ee77 7a87 	vadd.f32	s15, s15, s14
 800448a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800448e:	ee17 1a90 	vmov	r1, s15
 8004492:	7261      	strb	r1, [r4, #9]
            jlb_rx.measurements_1.line_sensor_11 = 10 == controller.selected_front ? controller.detection_front[10] + 2.0f : controller.detection_front[10];
 8004494:	f893 103e 	ldrb.w	r1, [r3, #62]	; 0x3e
 8004498:	72a1      	strb	r1, [r4, #10]
            jlb_rx.measurements_1.line_sensor_12 = 11 == controller.selected_front ? controller.detection_front[11] + 2.0f : controller.detection_front[11];
 800449a:	f893 103f 	ldrb.w	r1, [r3, #63]	; 0x3f
 800449e:	72e1      	strb	r1, [r4, #11]
            jlb_rx.measurements_1.line_sensor_13 = 12 == controller.selected_front ? controller.detection_front[12] + 2.0f : controller.detection_front[12];
 80044a0:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 80044a4:	7321      	strb	r1, [r4, #12]
            jlb_rx.measurements_1.line_sensor_14 = 13 == controller.selected_front ? controller.detection_front[13] + 2.0f : controller.detection_front[13];
 80044a6:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
            jlb_rx.measurements_1.line_sensor_15 = 14 == controller.selected_front ? controller.detection_front[14] + 2.0f : controller.detection_front[14];
 80044aa:	2a0e      	cmp	r2, #14
            jlb_rx.measurements_1.line_sensor_14 = 13 == controller.selected_front ? controller.detection_front[13] + 2.0f : controller.detection_front[13];
 80044ac:	7361      	strb	r1, [r4, #13]
            jlb_rx.measurements_1.line_sensor_15 = 14 == controller.selected_front ? controller.detection_front[14] + 2.0f : controller.detection_front[14];
 80044ae:	f47f ad18 	bne.w	8003ee2 <_ZN3jlb12SignalSender14measurements_1Ev+0xba>
 80044b2:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 80044b6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80044ba:	ee07 1a90 	vmov	s15, r1
 80044be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044ca:	ee17 1a90 	vmov	r1, s15
 80044ce:	73a1      	strb	r1, [r4, #14]
            jlb_rx.measurements_1.line_sensor_16 = 15 == controller.selected_front ? controller.detection_front[15] + 2.0f : controller.detection_front[15];
 80044d0:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
 80044d4:	73e1      	strb	r1, [r4, #15]
            jlb_rx.measurements_1.line_sensor_17 = 16 == controller.selected_front ? controller.detection_front[16] + 2.0f : controller.detection_front[16];
 80044d6:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 80044da:	7421      	strb	r1, [r4, #16]
            jlb_rx.measurements_1.line_sensor_18 = 17 == controller.selected_front ? controller.detection_front[17] + 2.0f : controller.detection_front[17];
 80044dc:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 80044e0:	7461      	strb	r1, [r4, #17]
            jlb_rx.measurements_1.line_sensor_19 = 18 == controller.selected_front ? controller.detection_front[18] + 2.0f : controller.detection_front[18];
 80044e2:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
            jlb_rx.measurements_1.line_sensor_20 = 19 == controller.selected_front ? controller.detection_front[19] + 2.0f : controller.detection_front[19];
 80044e6:	2a13      	cmp	r2, #19
            jlb_rx.measurements_1.line_sensor_19 = 18 == controller.selected_front ? controller.detection_front[18] + 2.0f : controller.detection_front[18];
 80044e8:	74a1      	strb	r1, [r4, #18]
            jlb_rx.measurements_1.line_sensor_20 = 19 == controller.selected_front ? controller.detection_front[19] + 2.0f : controller.detection_front[19];
 80044ea:	f47f ad18 	bne.w	8003f1e <_ZN3jlb12SignalSender14measurements_1Ev+0xf6>
 80044ee:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
 80044f2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80044f6:	ee07 1a90 	vmov	s15, r1
 80044fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004502:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004506:	ee17 1a90 	vmov	r1, s15
 800450a:	74e1      	strb	r1, [r4, #19]
            jlb_rx.measurements_1.line_sensor_21 = 20 == controller.selected_front ? controller.detection_front[20] + 2.0f : controller.detection_front[20];
 800450c:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 8004510:	7521      	strb	r1, [r4, #20]
            jlb_rx.measurements_1.line_sensor_22 = 21 == controller.selected_front ? controller.detection_front[21] + 2.0f : controller.detection_front[21];
 8004512:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 8004516:	7561      	strb	r1, [r4, #21]
            jlb_rx.measurements_1.line_sensor_23 = 22 == controller.selected_front ? controller.detection_front[22] + 2.0f : controller.detection_front[22];
 8004518:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
 800451c:	75a1      	strb	r1, [r4, #22]
            jlb_rx.measurements_1.line_sensor_24 = 23 == controller.selected_front ? controller.detection_front[23] + 2.0f : controller.detection_front[23];
 800451e:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
            jlb_rx.measurements_1.line_sensor_25 = 24 == controller.selected_front ? controller.detection_front[24] + 2.0f : controller.detection_front[24];
 8004522:	2a18      	cmp	r2, #24
            jlb_rx.measurements_1.line_sensor_24 = 23 == controller.selected_front ? controller.detection_front[23] + 2.0f : controller.detection_front[23];
 8004524:	75e1      	strb	r1, [r4, #23]
            jlb_rx.measurements_1.line_sensor_25 = 24 == controller.selected_front ? controller.detection_front[24] + 2.0f : controller.detection_front[24];
 8004526:	f47f ad18 	bne.w	8003f5a <_ZN3jlb12SignalSender14measurements_1Ev+0x132>
 800452a:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 800452e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004532:	ee07 1a90 	vmov	s15, r1
 8004536:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800453a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800453e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004542:	ee17 1a90 	vmov	r1, s15
 8004546:	7621      	strb	r1, [r4, #24]
            jlb_rx.measurements_1.line_sensor_26 = 25 == controller.selected_front ? controller.detection_front[25] + 2.0f : controller.detection_front[25];
 8004548:	f893 104d 	ldrb.w	r1, [r3, #77]	; 0x4d
 800454c:	7661      	strb	r1, [r4, #25]
            jlb_rx.measurements_1.line_sensor_27 = 26 == controller.selected_front ? controller.detection_front[26] + 2.0f : controller.detection_front[26];
 800454e:	f893 104e 	ldrb.w	r1, [r3, #78]	; 0x4e
 8004552:	76a1      	strb	r1, [r4, #26]
            jlb_rx.measurements_1.line_sensor_28 = 27 == controller.selected_front ? controller.detection_front[27] + 2.0f : controller.detection_front[27];
 8004554:	f893 104f 	ldrb.w	r1, [r3, #79]	; 0x4f
 8004558:	76e1      	strb	r1, [r4, #27]
            jlb_rx.measurements_1.line_sensor_29 = 28 == controller.selected_front ? controller.detection_front[28] + 2.0f : controller.detection_front[28];
 800455a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
            jlb_rx.measurements_1.line_sensor_30 = 29 == controller.selected_front ? controller.detection_front[29] + 2.0f : controller.detection_front[29];
 800455e:	2a1d      	cmp	r2, #29
            jlb_rx.measurements_1.line_sensor_29 = 28 == controller.selected_front ? controller.detection_front[28] + 2.0f : controller.detection_front[28];
 8004560:	7721      	strb	r1, [r4, #28]
            jlb_rx.measurements_1.line_sensor_30 = 29 == controller.selected_front ? controller.detection_front[29] + 2.0f : controller.detection_front[29];
 8004562:	f47f ad18 	bne.w	8003f96 <_ZN3jlb12SignalSender14measurements_1Ev+0x16e>
 8004566:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800456a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800456e:	ee07 2a90 	vmov	s15, r2
 8004572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004576:	ee77 7a87 	vadd.f32	s15, s15, s14
 800457a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800457e:	ee17 2a90 	vmov	r2, s15
 8004582:	7762      	strb	r2, [r4, #29]
            jlb_rx.measurements_1.line_sensor_31 = 30 == controller.selected_front ? controller.detection_front[30] + 2.0f : controller.detection_front[30];
 8004584:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8004588:	77a2      	strb	r2, [r4, #30]
            jlb_rx.measurements_1.line_sensor_32 = 31 == controller.selected_front ? controller.detection_front[31] + 2.0f : controller.detection_front[31];
 800458a:	e519      	b.n	8003fc0 <_ZN3jlb12SignalSender14measurements_1Ev+0x198>

0800458c <_ZN3jlb12SignalSender14measurements_2Ev>:

        void measurements_2()
 800458c:	b530      	push	{r4, r5, lr}
        {
            jlb_rx.measurements_2.line_sensor_1  = 0 == controller.selected_rear ? controller.detection_rear[0] + 2.0f : controller.detection_rear[0];
 800458e:	f8d0 31cc 	ldr.w	r3, [r0, #460]	; 0x1cc
        void measurements_2()
 8004592:	4604      	mov	r4, r0
            jlb_rx.measurements_2.line_sensor_1  = 0 == controller.selected_rear ? controller.detection_rear[0] + 2.0f : controller.detection_rear[0];
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
        void measurements_2()
 800459a:	b087      	sub	sp, #28
            jlb_rx.measurements_2.line_sensor_1  = 0 == controller.selected_rear ? controller.detection_rear[0] + 2.0f : controller.detection_rear[0];
 800459c:	2a00      	cmp	r2, #0
 800459e:	f040 8108 	bne.w	80047b2 <_ZN3jlb12SignalSender14measurements_2Ev+0x226>
 80045a2:	ee07 1a90 	vmov	s15, r1
 80045a6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80045aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045b6:	ee17 1a90 	vmov	r1, s15
 80045ba:	f880 1020 	strb.w	r1, [r0, #32]
            jlb_rx.measurements_2.line_sensor_2  = 1 == controller.selected_rear ? controller.detection_rear[1] + 2.0f : controller.detection_rear[1];
 80045be:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
 80045c2:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
            jlb_rx.measurements_2.line_sensor_3  = 2 == controller.selected_rear ? controller.detection_rear[2] + 2.0f : controller.detection_rear[2];
 80045c6:	f893 1056 	ldrb.w	r1, [r3, #86]	; 0x56
 80045ca:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
            jlb_rx.measurements_2.line_sensor_4  = 3 == controller.selected_rear ? controller.detection_rear[3] + 2.0f : controller.detection_rear[3];
 80045ce:	f893 1057 	ldrb.w	r1, [r3, #87]	; 0x57
 80045d2:	f884 1023 	strb.w	r1, [r4, #35]	; 0x23
            jlb_rx.measurements_2.line_sensor_5  = 4 == controller.selected_rear ? controller.detection_rear[4] + 2.0f : controller.detection_rear[4];
 80045d6:	f893 1058 	ldrb.w	r1, [r3, #88]	; 0x58
            jlb_rx.measurements_2.line_sensor_6  = 5 == controller.selected_rear ? controller.detection_rear[5] + 2.0f : controller.detection_rear[5];
 80045da:	2a05      	cmp	r2, #5
            jlb_rx.measurements_2.line_sensor_5  = 4 == controller.selected_rear ? controller.detection_rear[4] + 2.0f : controller.detection_rear[4];
 80045dc:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
            jlb_rx.measurements_2.line_sensor_6  = 5 == controller.selected_rear ? controller.detection_rear[5] + 2.0f : controller.detection_rear[5];
 80045e0:	f040 8117 	bne.w	8004812 <_ZN3jlb12SignalSender14measurements_2Ev+0x286>
 80045e4:	f893 1059 	ldrb.w	r1, [r3, #89]	; 0x59
 80045e8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80045ec:	ee07 1a90 	vmov	s15, r1
 80045f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045fc:	ee17 1a90 	vmov	r1, s15
 8004600:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
            jlb_rx.measurements_2.line_sensor_7  = 6 == controller.selected_rear ? controller.detection_rear[6] + 2.0f : controller.detection_rear[6];
 8004604:	f893 105a 	ldrb.w	r1, [r3, #90]	; 0x5a
 8004608:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
            jlb_rx.measurements_2.line_sensor_8  = 7 == controller.selected_rear ? controller.detection_rear[7] + 2.0f : controller.detection_rear[7];
 800460c:	f893 105b 	ldrb.w	r1, [r3, #91]	; 0x5b
 8004610:	f884 1027 	strb.w	r1, [r4, #39]	; 0x27
            jlb_rx.measurements_2.line_sensor_9  = 8 == controller.selected_rear ? controller.detection_rear[8] + 2.0f : controller.detection_rear[8];
 8004614:	f893 105c 	ldrb.w	r1, [r3, #92]	; 0x5c
 8004618:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
            jlb_rx.measurements_2.line_sensor_10 = 9 == controller.selected_rear ? controller.detection_rear[9] + 2.0f : controller.detection_rear[9];
 800461c:	f893 105d 	ldrb.w	r1, [r3, #93]	; 0x5d
            jlb_rx.measurements_2.line_sensor_11 = 10 == controller.selected_rear ? controller.detection_rear[10] + 2.0f : controller.detection_rear[10];
 8004620:	2a0a      	cmp	r2, #10
            jlb_rx.measurements_2.line_sensor_10 = 9 == controller.selected_rear ? controller.detection_rear[9] + 2.0f : controller.detection_rear[9];
 8004622:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
            jlb_rx.measurements_2.line_sensor_11 = 10 == controller.selected_rear ? controller.detection_rear[10] + 2.0f : controller.detection_rear[10];
 8004626:	f040 8117 	bne.w	8004858 <_ZN3jlb12SignalSender14measurements_2Ev+0x2cc>
 800462a:	f893 105e 	ldrb.w	r1, [r3, #94]	; 0x5e
 800462e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004632:	ee07 1a90 	vmov	s15, r1
 8004636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800463a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800463e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004642:	ee17 1a90 	vmov	r1, s15
 8004646:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
            jlb_rx.measurements_2.line_sensor_12 = 11 == controller.selected_rear ? controller.detection_rear[11] + 2.0f : controller.detection_rear[11];
 800464a:	f893 105f 	ldrb.w	r1, [r3, #95]	; 0x5f
 800464e:	f884 102b 	strb.w	r1, [r4, #43]	; 0x2b
            jlb_rx.measurements_2.line_sensor_13 = 12 == controller.selected_rear ? controller.detection_rear[12] + 2.0f : controller.detection_rear[12];
 8004652:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 8004656:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
            jlb_rx.measurements_2.line_sensor_14 = 13 == controller.selected_rear ? controller.detection_rear[13] + 2.0f : controller.detection_rear[13];
 800465a:	f893 1061 	ldrb.w	r1, [r3, #97]	; 0x61
 800465e:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
            jlb_rx.measurements_2.line_sensor_15 = 14 == controller.selected_rear ? controller.detection_rear[14] + 2.0f : controller.detection_rear[14];
 8004662:	f893 1062 	ldrb.w	r1, [r3, #98]	; 0x62
            jlb_rx.measurements_2.line_sensor_16 = 15 == controller.selected_rear ? controller.detection_rear[15] + 2.0f : controller.detection_rear[15];
 8004666:	2a0f      	cmp	r2, #15
            jlb_rx.measurements_2.line_sensor_15 = 14 == controller.selected_rear ? controller.detection_rear[14] + 2.0f : controller.detection_rear[14];
 8004668:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
            jlb_rx.measurements_2.line_sensor_16 = 15 == controller.selected_rear ? controller.detection_rear[15] + 2.0f : controller.detection_rear[15];
 800466c:	f040 8117 	bne.w	800489e <_ZN3jlb12SignalSender14measurements_2Ev+0x312>
 8004670:	f893 1063 	ldrb.w	r1, [r3, #99]	; 0x63
 8004674:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004678:	ee07 1a90 	vmov	s15, r1
 800467c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004680:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004684:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004688:	ee17 1a90 	vmov	r1, s15
 800468c:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
            jlb_rx.measurements_2.line_sensor_12 = 11 == controller.selected_rear ? controller.detection_rear[11] + 2.0f : controller.detection_rear[11];
            jlb_rx.measurements_2.line_sensor_13 = 12 == controller.selected_rear ? controller.detection_rear[12] + 2.0f : controller.detection_rear[12];
            jlb_rx.measurements_2.line_sensor_14 = 13 == controller.selected_rear ? controller.detection_rear[13] + 2.0f : controller.detection_rear[13];
            jlb_rx.measurements_2.line_sensor_15 = 14 == controller.selected_rear ? controller.detection_rear[14] + 2.0f : controller.detection_rear[14];
            jlb_rx.measurements_2.line_sensor_16 = 15 == controller.selected_rear ? controller.detection_rear[15] + 2.0f : controller.detection_rear[15];
            jlb_rx.measurements_2.line_sensor_17 = 16 == controller.selected_rear ? controller.detection_rear[16] + 2.0f : controller.detection_rear[16];
 8004690:	f893 1064 	ldrb.w	r1, [r3, #100]	; 0x64
 8004694:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
            jlb_rx.measurements_2.line_sensor_18 = 17 == controller.selected_rear ? controller.detection_rear[17] + 2.0f : controller.detection_rear[17];
 8004698:	f893 1065 	ldrb.w	r1, [r3, #101]	; 0x65
 800469c:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
            jlb_rx.measurements_2.line_sensor_19 = 18 == controller.selected_rear ? controller.detection_rear[18] + 2.0f : controller.detection_rear[18];
 80046a0:	f893 1066 	ldrb.w	r1, [r3, #102]	; 0x66
 80046a4:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
            jlb_rx.measurements_2.line_sensor_20 = 19 == controller.selected_rear ? controller.detection_rear[19] + 2.0f : controller.detection_rear[19];
 80046a8:	f893 1067 	ldrb.w	r1, [r3, #103]	; 0x67
            jlb_rx.measurements_2.line_sensor_21 = 20 == controller.selected_rear ? controller.detection_rear[20] + 2.0f : controller.detection_rear[20];
 80046ac:	2a14      	cmp	r2, #20
            jlb_rx.measurements_2.line_sensor_20 = 19 == controller.selected_rear ? controller.detection_rear[19] + 2.0f : controller.detection_rear[19];
 80046ae:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
            jlb_rx.measurements_2.line_sensor_21 = 20 == controller.selected_rear ? controller.detection_rear[20] + 2.0f : controller.detection_rear[20];
 80046b2:	f040 8117 	bne.w	80048e4 <_ZN3jlb12SignalSender14measurements_2Ev+0x358>
 80046b6:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 80046ba:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80046be:	ee07 1a90 	vmov	s15, r1
 80046c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046ce:	ee17 1a90 	vmov	r1, s15
 80046d2:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
            jlb_rx.measurements_2.line_sensor_22 = 21 == controller.selected_rear ? controller.detection_rear[21] + 2.0f : controller.detection_rear[21];
 80046d6:	f893 1069 	ldrb.w	r1, [r3, #105]	; 0x69
 80046da:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
            jlb_rx.measurements_2.line_sensor_23 = 22 == controller.selected_rear ? controller.detection_rear[22] + 2.0f : controller.detection_rear[22];
 80046de:	f893 106a 	ldrb.w	r1, [r3, #106]	; 0x6a
 80046e2:	f884 1036 	strb.w	r1, [r4, #54]	; 0x36
            jlb_rx.measurements_2.line_sensor_24 = 23 == controller.selected_rear ? controller.detection_rear[23] + 2.0f : controller.detection_rear[23];
 80046e6:	f893 106b 	ldrb.w	r1, [r3, #107]	; 0x6b
 80046ea:	f884 1037 	strb.w	r1, [r4, #55]	; 0x37
            jlb_rx.measurements_2.line_sensor_25 = 24 == controller.selected_rear ? controller.detection_rear[24] + 2.0f : controller.detection_rear[24];
 80046ee:	f893 106c 	ldrb.w	r1, [r3, #108]	; 0x6c
            jlb_rx.measurements_2.line_sensor_26 = 25 == controller.selected_rear ? controller.detection_rear[25] + 2.0f : controller.detection_rear[25];
 80046f2:	2a19      	cmp	r2, #25
            jlb_rx.measurements_2.line_sensor_25 = 24 == controller.selected_rear ? controller.detection_rear[24] + 2.0f : controller.detection_rear[24];
 80046f4:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
            jlb_rx.measurements_2.line_sensor_26 = 25 == controller.selected_rear ? controller.detection_rear[25] + 2.0f : controller.detection_rear[25];
 80046f8:	f040 8117 	bne.w	800492a <_ZN3jlb12SignalSender14measurements_2Ev+0x39e>
 80046fc:	f893 106d 	ldrb.w	r1, [r3, #109]	; 0x6d
 8004700:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004704:	ee07 1a90 	vmov	s15, r1
 8004708:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800470c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004714:	ee17 1a90 	vmov	r1, s15
 8004718:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
            jlb_rx.measurements_2.line_sensor_27 = 26 == controller.selected_rear ? controller.detection_rear[26] + 2.0f : controller.detection_rear[26];
 800471c:	f893 106e 	ldrb.w	r1, [r3, #110]	; 0x6e
 8004720:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
            jlb_rx.measurements_2.line_sensor_28 = 27 == controller.selected_rear ? controller.detection_rear[27] + 2.0f : controller.detection_rear[27];
 8004724:	f893 106f 	ldrb.w	r1, [r3, #111]	; 0x6f
 8004728:	f884 103b 	strb.w	r1, [r4, #59]	; 0x3b
            jlb_rx.measurements_2.line_sensor_29 = 28 == controller.selected_rear ? controller.detection_rear[28] + 2.0f : controller.detection_rear[28];
 800472c:	f893 1070 	ldrb.w	r1, [r3, #112]	; 0x70
 8004730:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
            jlb_rx.measurements_2.line_sensor_30 = 29 == controller.selected_rear ? controller.detection_rear[29] + 2.0f : controller.detection_rear[29];
 8004734:	f893 1071 	ldrb.w	r1, [r3, #113]	; 0x71
            jlb_rx.measurements_2.line_sensor_31 = 30 == controller.selected_rear ? controller.detection_rear[30] + 2.0f : controller.detection_rear[30];
 8004738:	2a1e      	cmp	r2, #30
            jlb_rx.measurements_2.line_sensor_30 = 29 == controller.selected_rear ? controller.detection_rear[29] + 2.0f : controller.detection_rear[29];
 800473a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
            jlb_rx.measurements_2.line_sensor_31 = 30 == controller.selected_rear ? controller.detection_rear[30] + 2.0f : controller.detection_rear[30];
 800473e:	f040 8117 	bne.w	8004970 <_ZN3jlb12SignalSender14measurements_2Ev+0x3e4>
 8004742:	f893 2072 	ldrb.w	r2, [r3, #114]	; 0x72
 8004746:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800474a:	ee07 2a90 	vmov	s15, r2
 800474e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004752:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800475a:	ee17 2a90 	vmov	r2, s15
 800475e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
            jlb_rx.measurements_2.line_sensor_32 = 31 == controller.selected_rear ? controller.detection_rear[31] + 2.0f : controller.detection_rear[31];
 8004762:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
#endif

            char    data[measurements_2_DLC + 2] = {0};
 8004766:	2500      	movs	r5, #0
            uint8_t ide                          = measurements_2_IDE;
            uint8_t dlc                          = measurements_2_DLC;
 8004768:	f04f 0e08 	mov.w	lr, #8
            data[0]                              = measurements_2_CANID;
 800476c:	f640 0c02 	movw	ip, #2050	; 0x802
            jlb_rx.measurements_2.line_sensor_32 = 31 == controller.selected_rear ? controller.detection_rear[31] + 2.0f : controller.detection_rear[31];
 8004770:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
            data[1]                              = measurements_2_DLC;
            Pack_measurements_2_jlb(&jlb_rx.measurements_2, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 8004774:	f10d 020b 	add.w	r2, sp, #11
 8004778:	f10d 030a 	add.w	r3, sp, #10
 800477c:	f10d 010e 	add.w	r1, sp, #14
 8004780:	f104 0020 	add.w	r0, r4, #32
            char    data[measurements_2_DLC + 2] = {0};
 8004784:	e9cd 5503 	strd	r5, r5, [sp, #12]
            uint8_t dlc                          = measurements_2_DLC;
 8004788:	f88d e00b 	strb.w	lr, [sp, #11]
            data[0]                              = measurements_2_CANID;
 800478c:	f8ad c00c 	strh.w	ip, [sp, #12]
            uint8_t ide                          = measurements_2_IDE;
 8004790:	f88d 500a 	strb.w	r5, [sp, #10]
            char    data[measurements_2_DLC + 2] = {0};
 8004794:	f8ad 5014 	strh.w	r5, [sp, #20]
            Pack_measurements_2_jlb(&jlb_rx.measurements_2, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 8004798:	f7fc fd0e 	bl	80011b8 <Pack_measurements_2_jlb>
 800479c:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
 80047a0:	aa03      	add	r2, sp, #12
 80047a2:	f10d 0316 	add.w	r3, sp, #22
 80047a6:	f504 70ee 	add.w	r0, r4, #476	; 0x1dc
 80047aa:	f7fe fe0d 	bl	80033c8 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag.isra.0>
            telemetry_data.insert(telemetry_data.end(), data, data + measurements_2_DLC + 2);
        }
 80047ae:	b007      	add	sp, #28
 80047b0:	bd30      	pop	{r4, r5, pc}
            jlb_rx.measurements_2.line_sensor_1  = 0 == controller.selected_rear ? controller.detection_rear[0] + 2.0f : controller.detection_rear[0];
 80047b2:	f880 1020 	strb.w	r1, [r0, #32]
            jlb_rx.measurements_2.line_sensor_2  = 1 == controller.selected_rear ? controller.detection_rear[1] + 2.0f : controller.detection_rear[1];
 80047b6:	2a01      	cmp	r2, #1
 80047b8:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
 80047bc:	d10c      	bne.n	80047d8 <_ZN3jlb12SignalSender14measurements_2Ev+0x24c>
 80047be:	ee07 1a90 	vmov	s15, r1
 80047c2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80047c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047d2:	ee17 1a90 	vmov	r1, s15
 80047d6:	e6f4      	b.n	80045c2 <_ZN3jlb12SignalSender14measurements_2Ev+0x36>
 80047d8:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
            jlb_rx.measurements_2.line_sensor_3  = 2 == controller.selected_rear ? controller.detection_rear[2] + 2.0f : controller.detection_rear[2];
 80047dc:	2a02      	cmp	r2, #2
 80047de:	f893 1056 	ldrb.w	r1, [r3, #86]	; 0x56
 80047e2:	f040 80dd 	bne.w	80049a0 <_ZN3jlb12SignalSender14measurements_2Ev+0x414>
 80047e6:	ee07 1a90 	vmov	s15, r1
 80047ea:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80047ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047fa:	ee17 1a90 	vmov	r1, s15
 80047fe:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
            jlb_rx.measurements_2.line_sensor_4  = 3 == controller.selected_rear ? controller.detection_rear[3] + 2.0f : controller.detection_rear[3];
 8004802:	f893 1057 	ldrb.w	r1, [r3, #87]	; 0x57
 8004806:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
            jlb_rx.measurements_2.line_sensor_5  = 4 == controller.selected_rear ? controller.detection_rear[4] + 2.0f : controller.detection_rear[4];
 800480a:	f893 1058 	ldrb.w	r1, [r3, #88]	; 0x58
 800480e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
            jlb_rx.measurements_2.line_sensor_6  = 5 == controller.selected_rear ? controller.detection_rear[5] + 2.0f : controller.detection_rear[5];
 8004812:	f893 1059 	ldrb.w	r1, [r3, #89]	; 0x59
            jlb_rx.measurements_2.line_sensor_7  = 6 == controller.selected_rear ? controller.detection_rear[6] + 2.0f : controller.detection_rear[6];
 8004816:	2a06      	cmp	r2, #6
            jlb_rx.measurements_2.line_sensor_6  = 5 == controller.selected_rear ? controller.detection_rear[5] + 2.0f : controller.detection_rear[5];
 8004818:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
            jlb_rx.measurements_2.line_sensor_7  = 6 == controller.selected_rear ? controller.detection_rear[6] + 2.0f : controller.detection_rear[6];
 800481c:	f040 80dd 	bne.w	80049da <_ZN3jlb12SignalSender14measurements_2Ev+0x44e>
 8004820:	f893 105a 	ldrb.w	r1, [r3, #90]	; 0x5a
 8004824:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004828:	ee07 1a90 	vmov	s15, r1
 800482c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004830:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004838:	ee17 1a90 	vmov	r1, s15
 800483c:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
            jlb_rx.measurements_2.line_sensor_8  = 7 == controller.selected_rear ? controller.detection_rear[7] + 2.0f : controller.detection_rear[7];
 8004840:	f893 105b 	ldrb.w	r1, [r3, #91]	; 0x5b
 8004844:	f884 1027 	strb.w	r1, [r4, #39]	; 0x27
            jlb_rx.measurements_2.line_sensor_9  = 8 == controller.selected_rear ? controller.detection_rear[8] + 2.0f : controller.detection_rear[8];
 8004848:	f893 105c 	ldrb.w	r1, [r3, #92]	; 0x5c
 800484c:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
            jlb_rx.measurements_2.line_sensor_10 = 9 == controller.selected_rear ? controller.detection_rear[9] + 2.0f : controller.detection_rear[9];
 8004850:	f893 105d 	ldrb.w	r1, [r3, #93]	; 0x5d
 8004854:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
            jlb_rx.measurements_2.line_sensor_11 = 10 == controller.selected_rear ? controller.detection_rear[10] + 2.0f : controller.detection_rear[10];
 8004858:	f893 105e 	ldrb.w	r1, [r3, #94]	; 0x5e
            jlb_rx.measurements_2.line_sensor_12 = 11 == controller.selected_rear ? controller.detection_rear[11] + 2.0f : controller.detection_rear[11];
 800485c:	2a0b      	cmp	r2, #11
            jlb_rx.measurements_2.line_sensor_11 = 10 == controller.selected_rear ? controller.detection_rear[10] + 2.0f : controller.detection_rear[10];
 800485e:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
            jlb_rx.measurements_2.line_sensor_12 = 11 == controller.selected_rear ? controller.detection_rear[11] + 2.0f : controller.detection_rear[11];
 8004862:	f040 80dd 	bne.w	8004a20 <_ZN3jlb12SignalSender14measurements_2Ev+0x494>
 8004866:	f893 105f 	ldrb.w	r1, [r3, #95]	; 0x5f
 800486a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800486e:	ee07 1a90 	vmov	s15, r1
 8004872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004876:	ee77 7a87 	vadd.f32	s15, s15, s14
 800487a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800487e:	ee17 1a90 	vmov	r1, s15
 8004882:	f884 102b 	strb.w	r1, [r4, #43]	; 0x2b
            jlb_rx.measurements_2.line_sensor_13 = 12 == controller.selected_rear ? controller.detection_rear[12] + 2.0f : controller.detection_rear[12];
 8004886:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 800488a:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
            jlb_rx.measurements_2.line_sensor_14 = 13 == controller.selected_rear ? controller.detection_rear[13] + 2.0f : controller.detection_rear[13];
 800488e:	f893 1061 	ldrb.w	r1, [r3, #97]	; 0x61
 8004892:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
            jlb_rx.measurements_2.line_sensor_15 = 14 == controller.selected_rear ? controller.detection_rear[14] + 2.0f : controller.detection_rear[14];
 8004896:	f893 1062 	ldrb.w	r1, [r3, #98]	; 0x62
 800489a:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
            jlb_rx.measurements_2.line_sensor_16 = 15 == controller.selected_rear ? controller.detection_rear[15] + 2.0f : controller.detection_rear[15];
 800489e:	f893 1063 	ldrb.w	r1, [r3, #99]	; 0x63
            jlb_rx.measurements_2.line_sensor_17 = 16 == controller.selected_rear ? controller.detection_rear[16] + 2.0f : controller.detection_rear[16];
 80048a2:	2a10      	cmp	r2, #16
            jlb_rx.measurements_2.line_sensor_16 = 15 == controller.selected_rear ? controller.detection_rear[15] + 2.0f : controller.detection_rear[15];
 80048a4:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
            jlb_rx.measurements_2.line_sensor_17 = 16 == controller.selected_rear ? controller.detection_rear[16] + 2.0f : controller.detection_rear[16];
 80048a8:	f040 80dd 	bne.w	8004a66 <_ZN3jlb12SignalSender14measurements_2Ev+0x4da>
 80048ac:	f893 1064 	ldrb.w	r1, [r3, #100]	; 0x64
 80048b0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80048b4:	ee07 1a90 	vmov	s15, r1
 80048b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80048c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048c4:	ee17 1a90 	vmov	r1, s15
 80048c8:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
            jlb_rx.measurements_2.line_sensor_18 = 17 == controller.selected_rear ? controller.detection_rear[17] + 2.0f : controller.detection_rear[17];
 80048cc:	f893 1065 	ldrb.w	r1, [r3, #101]	; 0x65
 80048d0:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
            jlb_rx.measurements_2.line_sensor_19 = 18 == controller.selected_rear ? controller.detection_rear[18] + 2.0f : controller.detection_rear[18];
 80048d4:	f893 1066 	ldrb.w	r1, [r3, #102]	; 0x66
 80048d8:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
            jlb_rx.measurements_2.line_sensor_20 = 19 == controller.selected_rear ? controller.detection_rear[19] + 2.0f : controller.detection_rear[19];
 80048dc:	f893 1067 	ldrb.w	r1, [r3, #103]	; 0x67
 80048e0:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
            jlb_rx.measurements_2.line_sensor_21 = 20 == controller.selected_rear ? controller.detection_rear[20] + 2.0f : controller.detection_rear[20];
 80048e4:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
            jlb_rx.measurements_2.line_sensor_22 = 21 == controller.selected_rear ? controller.detection_rear[21] + 2.0f : controller.detection_rear[21];
 80048e8:	2a15      	cmp	r2, #21
            jlb_rx.measurements_2.line_sensor_21 = 20 == controller.selected_rear ? controller.detection_rear[20] + 2.0f : controller.detection_rear[20];
 80048ea:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
            jlb_rx.measurements_2.line_sensor_22 = 21 == controller.selected_rear ? controller.detection_rear[21] + 2.0f : controller.detection_rear[21];
 80048ee:	f040 80dd 	bne.w	8004aac <_ZN3jlb12SignalSender14measurements_2Ev+0x520>
 80048f2:	f893 1069 	ldrb.w	r1, [r3, #105]	; 0x69
 80048f6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80048fa:	ee07 1a90 	vmov	s15, r1
 80048fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004902:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800490a:	ee17 1a90 	vmov	r1, s15
 800490e:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
            jlb_rx.measurements_2.line_sensor_23 = 22 == controller.selected_rear ? controller.detection_rear[22] + 2.0f : controller.detection_rear[22];
 8004912:	f893 106a 	ldrb.w	r1, [r3, #106]	; 0x6a
 8004916:	f884 1036 	strb.w	r1, [r4, #54]	; 0x36
            jlb_rx.measurements_2.line_sensor_24 = 23 == controller.selected_rear ? controller.detection_rear[23] + 2.0f : controller.detection_rear[23];
 800491a:	f893 106b 	ldrb.w	r1, [r3, #107]	; 0x6b
 800491e:	f884 1037 	strb.w	r1, [r4, #55]	; 0x37
            jlb_rx.measurements_2.line_sensor_25 = 24 == controller.selected_rear ? controller.detection_rear[24] + 2.0f : controller.detection_rear[24];
 8004922:	f893 106c 	ldrb.w	r1, [r3, #108]	; 0x6c
 8004926:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
            jlb_rx.measurements_2.line_sensor_26 = 25 == controller.selected_rear ? controller.detection_rear[25] + 2.0f : controller.detection_rear[25];
 800492a:	f893 106d 	ldrb.w	r1, [r3, #109]	; 0x6d
            jlb_rx.measurements_2.line_sensor_27 = 26 == controller.selected_rear ? controller.detection_rear[26] + 2.0f : controller.detection_rear[26];
 800492e:	2a1a      	cmp	r2, #26
            jlb_rx.measurements_2.line_sensor_26 = 25 == controller.selected_rear ? controller.detection_rear[25] + 2.0f : controller.detection_rear[25];
 8004930:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
            jlb_rx.measurements_2.line_sensor_27 = 26 == controller.selected_rear ? controller.detection_rear[26] + 2.0f : controller.detection_rear[26];
 8004934:	f040 80dd 	bne.w	8004af2 <_ZN3jlb12SignalSender14measurements_2Ev+0x566>
 8004938:	f893 106e 	ldrb.w	r1, [r3, #110]	; 0x6e
 800493c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004940:	ee07 1a90 	vmov	s15, r1
 8004944:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004948:	ee77 7a87 	vadd.f32	s15, s15, s14
 800494c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004950:	ee17 1a90 	vmov	r1, s15
 8004954:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
            jlb_rx.measurements_2.line_sensor_28 = 27 == controller.selected_rear ? controller.detection_rear[27] + 2.0f : controller.detection_rear[27];
 8004958:	f893 106f 	ldrb.w	r1, [r3, #111]	; 0x6f
 800495c:	f884 103b 	strb.w	r1, [r4, #59]	; 0x3b
            jlb_rx.measurements_2.line_sensor_29 = 28 == controller.selected_rear ? controller.detection_rear[28] + 2.0f : controller.detection_rear[28];
 8004960:	f893 1070 	ldrb.w	r1, [r3, #112]	; 0x70
 8004964:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
            jlb_rx.measurements_2.line_sensor_30 = 29 == controller.selected_rear ? controller.detection_rear[29] + 2.0f : controller.detection_rear[29];
 8004968:	f893 1071 	ldrb.w	r1, [r3, #113]	; 0x71
 800496c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
            jlb_rx.measurements_2.line_sensor_31 = 30 == controller.selected_rear ? controller.detection_rear[30] + 2.0f : controller.detection_rear[30];
 8004970:	f893 1072 	ldrb.w	r1, [r3, #114]	; 0x72
            jlb_rx.measurements_2.line_sensor_32 = 31 == controller.selected_rear ? controller.detection_rear[31] + 2.0f : controller.detection_rear[31];
 8004974:	2a1f      	cmp	r2, #31
            jlb_rx.measurements_2.line_sensor_31 = 30 == controller.selected_rear ? controller.detection_rear[30] + 2.0f : controller.detection_rear[30];
 8004976:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
            jlb_rx.measurements_2.line_sensor_32 = 31 == controller.selected_rear ? controller.detection_rear[31] + 2.0f : controller.detection_rear[31];
 800497a:	f47f aef2 	bne.w	8004762 <_ZN3jlb12SignalSender14measurements_2Ev+0x1d6>
 800497e:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8004982:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004986:	ee07 3a90 	vmov	s15, r3
 800498a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800498e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004992:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004996:	edcd 7a01 	vstr	s15, [sp, #4]
 800499a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800499e:	e6e2      	b.n	8004766 <_ZN3jlb12SignalSender14measurements_2Ev+0x1da>
            jlb_rx.measurements_2.line_sensor_3  = 2 == controller.selected_rear ? controller.detection_rear[2] + 2.0f : controller.detection_rear[2];
 80049a0:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
            jlb_rx.measurements_2.line_sensor_4  = 3 == controller.selected_rear ? controller.detection_rear[3] + 2.0f : controller.detection_rear[3];
 80049a4:	2a03      	cmp	r2, #3
 80049a6:	f893 1057 	ldrb.w	r1, [r3, #87]	; 0x57
 80049aa:	f040 8166 	bne.w	8004c7a <_ZN3jlb12SignalSender14measurements_2Ev+0x6ee>
 80049ae:	ee07 1a90 	vmov	s15, r1
 80049b2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80049b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049c2:	ee17 1a90 	vmov	r1, s15
 80049c6:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
            jlb_rx.measurements_2.line_sensor_5  = 4 == controller.selected_rear ? controller.detection_rear[4] + 2.0f : controller.detection_rear[4];
 80049ca:	f893 1058 	ldrb.w	r1, [r3, #88]	; 0x58
 80049ce:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
            jlb_rx.measurements_2.line_sensor_6  = 5 == controller.selected_rear ? controller.detection_rear[5] + 2.0f : controller.detection_rear[5];
 80049d2:	f893 1059 	ldrb.w	r1, [r3, #89]	; 0x59
 80049d6:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
            jlb_rx.measurements_2.line_sensor_7  = 6 == controller.selected_rear ? controller.detection_rear[6] + 2.0f : controller.detection_rear[6];
 80049da:	f893 105a 	ldrb.w	r1, [r3, #90]	; 0x5a
            jlb_rx.measurements_2.line_sensor_8  = 7 == controller.selected_rear ? controller.detection_rear[7] + 2.0f : controller.detection_rear[7];
 80049de:	2a07      	cmp	r2, #7
            jlb_rx.measurements_2.line_sensor_7  = 6 == controller.selected_rear ? controller.detection_rear[6] + 2.0f : controller.detection_rear[6];
 80049e0:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
            jlb_rx.measurements_2.line_sensor_8  = 7 == controller.selected_rear ? controller.detection_rear[7] + 2.0f : controller.detection_rear[7];
 80049e4:	f893 105b 	ldrb.w	r1, [r3, #91]	; 0x5b
 80049e8:	f040 80a7 	bne.w	8004b3a <_ZN3jlb12SignalSender14measurements_2Ev+0x5ae>
 80049ec:	ee07 1a90 	vmov	s15, r1
 80049f0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80049f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a00:	ee17 1a90 	vmov	r1, s15
 8004a04:	f884 1027 	strb.w	r1, [r4, #39]	; 0x27
            jlb_rx.measurements_2.line_sensor_9  = 8 == controller.selected_rear ? controller.detection_rear[8] + 2.0f : controller.detection_rear[8];
 8004a08:	f893 105c 	ldrb.w	r1, [r3, #92]	; 0x5c
 8004a0c:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
            jlb_rx.measurements_2.line_sensor_10 = 9 == controller.selected_rear ? controller.detection_rear[9] + 2.0f : controller.detection_rear[9];
 8004a10:	f893 105d 	ldrb.w	r1, [r3, #93]	; 0x5d
 8004a14:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
            jlb_rx.measurements_2.line_sensor_11 = 10 == controller.selected_rear ? controller.detection_rear[10] + 2.0f : controller.detection_rear[10];
 8004a18:	f893 105e 	ldrb.w	r1, [r3, #94]	; 0x5e
 8004a1c:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
            jlb_rx.measurements_2.line_sensor_12 = 11 == controller.selected_rear ? controller.detection_rear[11] + 2.0f : controller.detection_rear[11];
 8004a20:	f893 105f 	ldrb.w	r1, [r3, #95]	; 0x5f
            jlb_rx.measurements_2.line_sensor_13 = 12 == controller.selected_rear ? controller.detection_rear[12] + 2.0f : controller.detection_rear[12];
 8004a24:	2a0c      	cmp	r2, #12
            jlb_rx.measurements_2.line_sensor_12 = 11 == controller.selected_rear ? controller.detection_rear[11] + 2.0f : controller.detection_rear[11];
 8004a26:	f884 102b 	strb.w	r1, [r4, #43]	; 0x2b
            jlb_rx.measurements_2.line_sensor_13 = 12 == controller.selected_rear ? controller.detection_rear[12] + 2.0f : controller.detection_rear[12];
 8004a2a:	f040 80a7 	bne.w	8004b7c <_ZN3jlb12SignalSender14measurements_2Ev+0x5f0>
 8004a2e:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 8004a32:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004a36:	ee07 1a90 	vmov	s15, r1
 8004a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a46:	ee17 1a90 	vmov	r1, s15
 8004a4a:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
            jlb_rx.measurements_2.line_sensor_14 = 13 == controller.selected_rear ? controller.detection_rear[13] + 2.0f : controller.detection_rear[13];
 8004a4e:	f893 1061 	ldrb.w	r1, [r3, #97]	; 0x61
 8004a52:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
            jlb_rx.measurements_2.line_sensor_15 = 14 == controller.selected_rear ? controller.detection_rear[14] + 2.0f : controller.detection_rear[14];
 8004a56:	f893 1062 	ldrb.w	r1, [r3, #98]	; 0x62
 8004a5a:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
            jlb_rx.measurements_2.line_sensor_16 = 15 == controller.selected_rear ? controller.detection_rear[15] + 2.0f : controller.detection_rear[15];
 8004a5e:	f893 1063 	ldrb.w	r1, [r3, #99]	; 0x63
 8004a62:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
            jlb_rx.measurements_2.line_sensor_17 = 16 == controller.selected_rear ? controller.detection_rear[16] + 2.0f : controller.detection_rear[16];
 8004a66:	f893 1064 	ldrb.w	r1, [r3, #100]	; 0x64
            jlb_rx.measurements_2.line_sensor_18 = 17 == controller.selected_rear ? controller.detection_rear[17] + 2.0f : controller.detection_rear[17];
 8004a6a:	2a11      	cmp	r2, #17
            jlb_rx.measurements_2.line_sensor_17 = 16 == controller.selected_rear ? controller.detection_rear[16] + 2.0f : controller.detection_rear[16];
 8004a6c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
            jlb_rx.measurements_2.line_sensor_18 = 17 == controller.selected_rear ? controller.detection_rear[17] + 2.0f : controller.detection_rear[17];
 8004a70:	f040 80a7 	bne.w	8004bc2 <_ZN3jlb12SignalSender14measurements_2Ev+0x636>
 8004a74:	f893 1065 	ldrb.w	r1, [r3, #101]	; 0x65
 8004a78:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004a7c:	ee07 1a90 	vmov	s15, r1
 8004a80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a8c:	ee17 1a90 	vmov	r1, s15
 8004a90:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
            jlb_rx.measurements_2.line_sensor_19 = 18 == controller.selected_rear ? controller.detection_rear[18] + 2.0f : controller.detection_rear[18];
 8004a94:	f893 1066 	ldrb.w	r1, [r3, #102]	; 0x66
 8004a98:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
            jlb_rx.measurements_2.line_sensor_20 = 19 == controller.selected_rear ? controller.detection_rear[19] + 2.0f : controller.detection_rear[19];
 8004a9c:	f893 1067 	ldrb.w	r1, [r3, #103]	; 0x67
 8004aa0:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
            jlb_rx.measurements_2.line_sensor_21 = 20 == controller.selected_rear ? controller.detection_rear[20] + 2.0f : controller.detection_rear[20];
 8004aa4:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 8004aa8:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
            jlb_rx.measurements_2.line_sensor_22 = 21 == controller.selected_rear ? controller.detection_rear[21] + 2.0f : controller.detection_rear[21];
 8004aac:	f893 1069 	ldrb.w	r1, [r3, #105]	; 0x69
            jlb_rx.measurements_2.line_sensor_23 = 22 == controller.selected_rear ? controller.detection_rear[22] + 2.0f : controller.detection_rear[22];
 8004ab0:	2a16      	cmp	r2, #22
            jlb_rx.measurements_2.line_sensor_22 = 21 == controller.selected_rear ? controller.detection_rear[21] + 2.0f : controller.detection_rear[21];
 8004ab2:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
            jlb_rx.measurements_2.line_sensor_23 = 22 == controller.selected_rear ? controller.detection_rear[22] + 2.0f : controller.detection_rear[22];
 8004ab6:	f040 80a7 	bne.w	8004c08 <_ZN3jlb12SignalSender14measurements_2Ev+0x67c>
 8004aba:	f893 106a 	ldrb.w	r1, [r3, #106]	; 0x6a
 8004abe:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004ac2:	ee07 1a90 	vmov	s15, r1
 8004ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004aca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ace:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ad2:	ee17 1a90 	vmov	r1, s15
 8004ad6:	f884 1036 	strb.w	r1, [r4, #54]	; 0x36
            jlb_rx.measurements_2.line_sensor_24 = 23 == controller.selected_rear ? controller.detection_rear[23] + 2.0f : controller.detection_rear[23];
 8004ada:	f893 106b 	ldrb.w	r1, [r3, #107]	; 0x6b
 8004ade:	f884 1037 	strb.w	r1, [r4, #55]	; 0x37
            jlb_rx.measurements_2.line_sensor_25 = 24 == controller.selected_rear ? controller.detection_rear[24] + 2.0f : controller.detection_rear[24];
 8004ae2:	f893 106c 	ldrb.w	r1, [r3, #108]	; 0x6c
 8004ae6:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
            jlb_rx.measurements_2.line_sensor_26 = 25 == controller.selected_rear ? controller.detection_rear[25] + 2.0f : controller.detection_rear[25];
 8004aea:	f893 106d 	ldrb.w	r1, [r3, #109]	; 0x6d
 8004aee:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
            jlb_rx.measurements_2.line_sensor_27 = 26 == controller.selected_rear ? controller.detection_rear[26] + 2.0f : controller.detection_rear[26];
 8004af2:	f893 106e 	ldrb.w	r1, [r3, #110]	; 0x6e
            jlb_rx.measurements_2.line_sensor_28 = 27 == controller.selected_rear ? controller.detection_rear[27] + 2.0f : controller.detection_rear[27];
 8004af6:	2a1b      	cmp	r2, #27
            jlb_rx.measurements_2.line_sensor_27 = 26 == controller.selected_rear ? controller.detection_rear[26] + 2.0f : controller.detection_rear[26];
 8004af8:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
            jlb_rx.measurements_2.line_sensor_28 = 27 == controller.selected_rear ? controller.detection_rear[27] + 2.0f : controller.detection_rear[27];
 8004afc:	f040 80a7 	bne.w	8004c4e <_ZN3jlb12SignalSender14measurements_2Ev+0x6c2>
 8004b00:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
 8004b04:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004b08:	ee07 2a90 	vmov	s15, r2
 8004b0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b18:	ee17 2a90 	vmov	r2, s15
 8004b1c:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
            jlb_rx.measurements_2.line_sensor_29 = 28 == controller.selected_rear ? controller.detection_rear[28] + 2.0f : controller.detection_rear[28];
 8004b20:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
 8004b24:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
            jlb_rx.measurements_2.line_sensor_30 = 29 == controller.selected_rear ? controller.detection_rear[29] + 2.0f : controller.detection_rear[29];
 8004b28:	f893 2071 	ldrb.w	r2, [r3, #113]	; 0x71
 8004b2c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
            jlb_rx.measurements_2.line_sensor_31 = 30 == controller.selected_rear ? controller.detection_rear[30] + 2.0f : controller.detection_rear[30];
 8004b30:	f893 2072 	ldrb.w	r2, [r3, #114]	; 0x72
 8004b34:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
            jlb_rx.measurements_2.line_sensor_32 = 31 == controller.selected_rear ? controller.detection_rear[31] + 2.0f : controller.detection_rear[31];
 8004b38:	e613      	b.n	8004762 <_ZN3jlb12SignalSender14measurements_2Ev+0x1d6>
            jlb_rx.measurements_2.line_sensor_9  = 8 == controller.selected_rear ? controller.detection_rear[8] + 2.0f : controller.detection_rear[8];
 8004b3a:	2a08      	cmp	r2, #8
            jlb_rx.measurements_2.line_sensor_8  = 7 == controller.selected_rear ? controller.detection_rear[7] + 2.0f : controller.detection_rear[7];
 8004b3c:	f884 1027 	strb.w	r1, [r4, #39]	; 0x27
            jlb_rx.measurements_2.line_sensor_9  = 8 == controller.selected_rear ? controller.detection_rear[8] + 2.0f : controller.detection_rear[8];
 8004b40:	f040 80bc 	bne.w	8004cbc <_ZN3jlb12SignalSender14measurements_2Ev+0x730>
 8004b44:	f893 105c 	ldrb.w	r1, [r3, #92]	; 0x5c
 8004b48:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004b4c:	ee07 1a90 	vmov	s15, r1
 8004b50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b5c:	ee17 1a90 	vmov	r1, s15
 8004b60:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
            jlb_rx.measurements_2.line_sensor_10 = 9 == controller.selected_rear ? controller.detection_rear[9] + 2.0f : controller.detection_rear[9];
 8004b64:	f893 105d 	ldrb.w	r1, [r3, #93]	; 0x5d
 8004b68:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
            jlb_rx.measurements_2.line_sensor_11 = 10 == controller.selected_rear ? controller.detection_rear[10] + 2.0f : controller.detection_rear[10];
 8004b6c:	f893 105e 	ldrb.w	r1, [r3, #94]	; 0x5e
 8004b70:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
            jlb_rx.measurements_2.line_sensor_12 = 11 == controller.selected_rear ? controller.detection_rear[11] + 2.0f : controller.detection_rear[11];
 8004b74:	f893 105f 	ldrb.w	r1, [r3, #95]	; 0x5f
 8004b78:	f884 102b 	strb.w	r1, [r4, #43]	; 0x2b
            jlb_rx.measurements_2.line_sensor_13 = 12 == controller.selected_rear ? controller.detection_rear[12] + 2.0f : controller.detection_rear[12];
 8004b7c:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
            jlb_rx.measurements_2.line_sensor_14 = 13 == controller.selected_rear ? controller.detection_rear[13] + 2.0f : controller.detection_rear[13];
 8004b80:	2a0d      	cmp	r2, #13
            jlb_rx.measurements_2.line_sensor_13 = 12 == controller.selected_rear ? controller.detection_rear[12] + 2.0f : controller.detection_rear[12];
 8004b82:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
            jlb_rx.measurements_2.line_sensor_14 = 13 == controller.selected_rear ? controller.detection_rear[13] + 2.0f : controller.detection_rear[13];
 8004b86:	f040 80bc 	bne.w	8004d02 <_ZN3jlb12SignalSender14measurements_2Ev+0x776>
 8004b8a:	f893 1061 	ldrb.w	r1, [r3, #97]	; 0x61
 8004b8e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004b92:	ee07 1a90 	vmov	s15, r1
 8004b96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ba2:	ee17 1a90 	vmov	r1, s15
 8004ba6:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
            jlb_rx.measurements_2.line_sensor_15 = 14 == controller.selected_rear ? controller.detection_rear[14] + 2.0f : controller.detection_rear[14];
 8004baa:	f893 1062 	ldrb.w	r1, [r3, #98]	; 0x62
 8004bae:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
            jlb_rx.measurements_2.line_sensor_16 = 15 == controller.selected_rear ? controller.detection_rear[15] + 2.0f : controller.detection_rear[15];
 8004bb2:	f893 1063 	ldrb.w	r1, [r3, #99]	; 0x63
 8004bb6:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
            jlb_rx.measurements_2.line_sensor_17 = 16 == controller.selected_rear ? controller.detection_rear[16] + 2.0f : controller.detection_rear[16];
 8004bba:	f893 1064 	ldrb.w	r1, [r3, #100]	; 0x64
 8004bbe:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
            jlb_rx.measurements_2.line_sensor_18 = 17 == controller.selected_rear ? controller.detection_rear[17] + 2.0f : controller.detection_rear[17];
 8004bc2:	f893 1065 	ldrb.w	r1, [r3, #101]	; 0x65
            jlb_rx.measurements_2.line_sensor_19 = 18 == controller.selected_rear ? controller.detection_rear[18] + 2.0f : controller.detection_rear[18];
 8004bc6:	2a12      	cmp	r2, #18
            jlb_rx.measurements_2.line_sensor_18 = 17 == controller.selected_rear ? controller.detection_rear[17] + 2.0f : controller.detection_rear[17];
 8004bc8:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
            jlb_rx.measurements_2.line_sensor_19 = 18 == controller.selected_rear ? controller.detection_rear[18] + 2.0f : controller.detection_rear[18];
 8004bcc:	f040 80bc 	bne.w	8004d48 <_ZN3jlb12SignalSender14measurements_2Ev+0x7bc>
 8004bd0:	f893 1066 	ldrb.w	r1, [r3, #102]	; 0x66
 8004bd4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004bd8:	ee07 1a90 	vmov	s15, r1
 8004bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004be0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004be8:	ee17 1a90 	vmov	r1, s15
 8004bec:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
            jlb_rx.measurements_2.line_sensor_20 = 19 == controller.selected_rear ? controller.detection_rear[19] + 2.0f : controller.detection_rear[19];
 8004bf0:	f893 1067 	ldrb.w	r1, [r3, #103]	; 0x67
 8004bf4:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
            jlb_rx.measurements_2.line_sensor_21 = 20 == controller.selected_rear ? controller.detection_rear[20] + 2.0f : controller.detection_rear[20];
 8004bf8:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 8004bfc:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
            jlb_rx.measurements_2.line_sensor_22 = 21 == controller.selected_rear ? controller.detection_rear[21] + 2.0f : controller.detection_rear[21];
 8004c00:	f893 1069 	ldrb.w	r1, [r3, #105]	; 0x69
 8004c04:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
            jlb_rx.measurements_2.line_sensor_23 = 22 == controller.selected_rear ? controller.detection_rear[22] + 2.0f : controller.detection_rear[22];
 8004c08:	f893 106a 	ldrb.w	r1, [r3, #106]	; 0x6a
            jlb_rx.measurements_2.line_sensor_24 = 23 == controller.selected_rear ? controller.detection_rear[23] + 2.0f : controller.detection_rear[23];
 8004c0c:	2a17      	cmp	r2, #23
            jlb_rx.measurements_2.line_sensor_23 = 22 == controller.selected_rear ? controller.detection_rear[22] + 2.0f : controller.detection_rear[22];
 8004c0e:	f884 1036 	strb.w	r1, [r4, #54]	; 0x36
            jlb_rx.measurements_2.line_sensor_24 = 23 == controller.selected_rear ? controller.detection_rear[23] + 2.0f : controller.detection_rear[23];
 8004c12:	f040 80bc 	bne.w	8004d8e <_ZN3jlb12SignalSender14measurements_2Ev+0x802>
 8004c16:	f893 106b 	ldrb.w	r1, [r3, #107]	; 0x6b
 8004c1a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004c1e:	ee07 1a90 	vmov	s15, r1
 8004c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c2e:	ee17 1a90 	vmov	r1, s15
 8004c32:	f884 1037 	strb.w	r1, [r4, #55]	; 0x37
            jlb_rx.measurements_2.line_sensor_25 = 24 == controller.selected_rear ? controller.detection_rear[24] + 2.0f : controller.detection_rear[24];
 8004c36:	f893 106c 	ldrb.w	r1, [r3, #108]	; 0x6c
 8004c3a:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
            jlb_rx.measurements_2.line_sensor_26 = 25 == controller.selected_rear ? controller.detection_rear[25] + 2.0f : controller.detection_rear[25];
 8004c3e:	f893 106d 	ldrb.w	r1, [r3, #109]	; 0x6d
 8004c42:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
            jlb_rx.measurements_2.line_sensor_27 = 26 == controller.selected_rear ? controller.detection_rear[26] + 2.0f : controller.detection_rear[26];
 8004c46:	f893 106e 	ldrb.w	r1, [r3, #110]	; 0x6e
 8004c4a:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
            jlb_rx.measurements_2.line_sensor_28 = 27 == controller.selected_rear ? controller.detection_rear[27] + 2.0f : controller.detection_rear[27];
 8004c4e:	f893 106f 	ldrb.w	r1, [r3, #111]	; 0x6f
            jlb_rx.measurements_2.line_sensor_29 = 28 == controller.selected_rear ? controller.detection_rear[28] + 2.0f : controller.detection_rear[28];
 8004c52:	2a1c      	cmp	r2, #28
            jlb_rx.measurements_2.line_sensor_28 = 27 == controller.selected_rear ? controller.detection_rear[27] + 2.0f : controller.detection_rear[27];
 8004c54:	f884 103b 	strb.w	r1, [r4, #59]	; 0x3b
            jlb_rx.measurements_2.line_sensor_29 = 28 == controller.selected_rear ? controller.detection_rear[28] + 2.0f : controller.detection_rear[28];
 8004c58:	f040 80bc 	bne.w	8004dd4 <_ZN3jlb12SignalSender14measurements_2Ev+0x848>
 8004c5c:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
 8004c60:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004c64:	ee07 2a90 	vmov	s15, r2
 8004c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c74:	ee17 2a90 	vmov	r2, s15
 8004c78:	e754      	b.n	8004b24 <_ZN3jlb12SignalSender14measurements_2Ev+0x598>
            jlb_rx.measurements_2.line_sensor_5  = 4 == controller.selected_rear ? controller.detection_rear[4] + 2.0f : controller.detection_rear[4];
 8004c7a:	2a04      	cmp	r2, #4
            jlb_rx.measurements_2.line_sensor_4  = 3 == controller.selected_rear ? controller.detection_rear[3] + 2.0f : controller.detection_rear[3];
 8004c7c:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
            jlb_rx.measurements_2.line_sensor_5  = 4 == controller.selected_rear ? controller.detection_rear[4] + 2.0f : controller.detection_rear[4];
 8004c80:	f47f aca9 	bne.w	80045d6 <_ZN3jlb12SignalSender14measurements_2Ev+0x4a>
 8004c84:	f893 1058 	ldrb.w	r1, [r3, #88]	; 0x58
 8004c88:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004c8c:	ee07 1a90 	vmov	s15, r1
 8004c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c9c:	ee17 1a90 	vmov	r1, s15
 8004ca0:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
            jlb_rx.measurements_2.line_sensor_6  = 5 == controller.selected_rear ? controller.detection_rear[5] + 2.0f : controller.detection_rear[5];
 8004ca4:	f893 1059 	ldrb.w	r1, [r3, #89]	; 0x59
 8004ca8:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
            jlb_rx.measurements_2.line_sensor_7  = 6 == controller.selected_rear ? controller.detection_rear[6] + 2.0f : controller.detection_rear[6];
 8004cac:	f893 105a 	ldrb.w	r1, [r3, #90]	; 0x5a
 8004cb0:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
            jlb_rx.measurements_2.line_sensor_8  = 7 == controller.selected_rear ? controller.detection_rear[7] + 2.0f : controller.detection_rear[7];
 8004cb4:	f893 105b 	ldrb.w	r1, [r3, #91]	; 0x5b
 8004cb8:	f880 1027 	strb.w	r1, [r0, #39]	; 0x27
            jlb_rx.measurements_2.line_sensor_9  = 8 == controller.selected_rear ? controller.detection_rear[8] + 2.0f : controller.detection_rear[8];
 8004cbc:	f893 105c 	ldrb.w	r1, [r3, #92]	; 0x5c
            jlb_rx.measurements_2.line_sensor_10 = 9 == controller.selected_rear ? controller.detection_rear[9] + 2.0f : controller.detection_rear[9];
 8004cc0:	2a09      	cmp	r2, #9
            jlb_rx.measurements_2.line_sensor_9  = 8 == controller.selected_rear ? controller.detection_rear[8] + 2.0f : controller.detection_rear[8];
 8004cc2:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
            jlb_rx.measurements_2.line_sensor_10 = 9 == controller.selected_rear ? controller.detection_rear[9] + 2.0f : controller.detection_rear[9];
 8004cc6:	f47f aca9 	bne.w	800461c <_ZN3jlb12SignalSender14measurements_2Ev+0x90>
 8004cca:	f893 105d 	ldrb.w	r1, [r3, #93]	; 0x5d
 8004cce:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004cd2:	ee07 1a90 	vmov	s15, r1
 8004cd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004cde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ce2:	ee17 1a90 	vmov	r1, s15
 8004ce6:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
            jlb_rx.measurements_2.line_sensor_11 = 10 == controller.selected_rear ? controller.detection_rear[10] + 2.0f : controller.detection_rear[10];
 8004cea:	f893 105e 	ldrb.w	r1, [r3, #94]	; 0x5e
 8004cee:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
            jlb_rx.measurements_2.line_sensor_12 = 11 == controller.selected_rear ? controller.detection_rear[11] + 2.0f : controller.detection_rear[11];
 8004cf2:	f893 105f 	ldrb.w	r1, [r3, #95]	; 0x5f
 8004cf6:	f884 102b 	strb.w	r1, [r4, #43]	; 0x2b
            jlb_rx.measurements_2.line_sensor_13 = 12 == controller.selected_rear ? controller.detection_rear[12] + 2.0f : controller.detection_rear[12];
 8004cfa:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 8004cfe:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
            jlb_rx.measurements_2.line_sensor_14 = 13 == controller.selected_rear ? controller.detection_rear[13] + 2.0f : controller.detection_rear[13];
 8004d02:	f893 1061 	ldrb.w	r1, [r3, #97]	; 0x61
            jlb_rx.measurements_2.line_sensor_15 = 14 == controller.selected_rear ? controller.detection_rear[14] + 2.0f : controller.detection_rear[14];
 8004d06:	2a0e      	cmp	r2, #14
            jlb_rx.measurements_2.line_sensor_14 = 13 == controller.selected_rear ? controller.detection_rear[13] + 2.0f : controller.detection_rear[13];
 8004d08:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
            jlb_rx.measurements_2.line_sensor_15 = 14 == controller.selected_rear ? controller.detection_rear[14] + 2.0f : controller.detection_rear[14];
 8004d0c:	f47f aca9 	bne.w	8004662 <_ZN3jlb12SignalSender14measurements_2Ev+0xd6>
 8004d10:	f893 1062 	ldrb.w	r1, [r3, #98]	; 0x62
 8004d14:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004d18:	ee07 1a90 	vmov	s15, r1
 8004d1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d28:	ee17 1a90 	vmov	r1, s15
 8004d2c:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
            jlb_rx.measurements_2.line_sensor_16 = 15 == controller.selected_rear ? controller.detection_rear[15] + 2.0f : controller.detection_rear[15];
 8004d30:	f893 1063 	ldrb.w	r1, [r3, #99]	; 0x63
 8004d34:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
            jlb_rx.measurements_2.line_sensor_17 = 16 == controller.selected_rear ? controller.detection_rear[16] + 2.0f : controller.detection_rear[16];
 8004d38:	f893 1064 	ldrb.w	r1, [r3, #100]	; 0x64
 8004d3c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
            jlb_rx.measurements_2.line_sensor_18 = 17 == controller.selected_rear ? controller.detection_rear[17] + 2.0f : controller.detection_rear[17];
 8004d40:	f893 1065 	ldrb.w	r1, [r3, #101]	; 0x65
 8004d44:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
            jlb_rx.measurements_2.line_sensor_19 = 18 == controller.selected_rear ? controller.detection_rear[18] + 2.0f : controller.detection_rear[18];
 8004d48:	f893 1066 	ldrb.w	r1, [r3, #102]	; 0x66
            jlb_rx.measurements_2.line_sensor_20 = 19 == controller.selected_rear ? controller.detection_rear[19] + 2.0f : controller.detection_rear[19];
 8004d4c:	2a13      	cmp	r2, #19
            jlb_rx.measurements_2.line_sensor_19 = 18 == controller.selected_rear ? controller.detection_rear[18] + 2.0f : controller.detection_rear[18];
 8004d4e:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
            jlb_rx.measurements_2.line_sensor_20 = 19 == controller.selected_rear ? controller.detection_rear[19] + 2.0f : controller.detection_rear[19];
 8004d52:	f47f aca9 	bne.w	80046a8 <_ZN3jlb12SignalSender14measurements_2Ev+0x11c>
 8004d56:	f893 1067 	ldrb.w	r1, [r3, #103]	; 0x67
 8004d5a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004d5e:	ee07 1a90 	vmov	s15, r1
 8004d62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d6e:	ee17 1a90 	vmov	r1, s15
 8004d72:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
            jlb_rx.measurements_2.line_sensor_21 = 20 == controller.selected_rear ? controller.detection_rear[20] + 2.0f : controller.detection_rear[20];
 8004d76:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 8004d7a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
            jlb_rx.measurements_2.line_sensor_22 = 21 == controller.selected_rear ? controller.detection_rear[21] + 2.0f : controller.detection_rear[21];
 8004d7e:	f893 1069 	ldrb.w	r1, [r3, #105]	; 0x69
 8004d82:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
            jlb_rx.measurements_2.line_sensor_23 = 22 == controller.selected_rear ? controller.detection_rear[22] + 2.0f : controller.detection_rear[22];
 8004d86:	f893 106a 	ldrb.w	r1, [r3, #106]	; 0x6a
 8004d8a:	f884 1036 	strb.w	r1, [r4, #54]	; 0x36
            jlb_rx.measurements_2.line_sensor_24 = 23 == controller.selected_rear ? controller.detection_rear[23] + 2.0f : controller.detection_rear[23];
 8004d8e:	f893 106b 	ldrb.w	r1, [r3, #107]	; 0x6b
            jlb_rx.measurements_2.line_sensor_25 = 24 == controller.selected_rear ? controller.detection_rear[24] + 2.0f : controller.detection_rear[24];
 8004d92:	2a18      	cmp	r2, #24
            jlb_rx.measurements_2.line_sensor_24 = 23 == controller.selected_rear ? controller.detection_rear[23] + 2.0f : controller.detection_rear[23];
 8004d94:	f884 1037 	strb.w	r1, [r4, #55]	; 0x37
            jlb_rx.measurements_2.line_sensor_25 = 24 == controller.selected_rear ? controller.detection_rear[24] + 2.0f : controller.detection_rear[24];
 8004d98:	f47f aca9 	bne.w	80046ee <_ZN3jlb12SignalSender14measurements_2Ev+0x162>
 8004d9c:	f893 106c 	ldrb.w	r1, [r3, #108]	; 0x6c
 8004da0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004da4:	ee07 1a90 	vmov	s15, r1
 8004da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004db0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004db4:	ee17 1a90 	vmov	r1, s15
 8004db8:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
            jlb_rx.measurements_2.line_sensor_26 = 25 == controller.selected_rear ? controller.detection_rear[25] + 2.0f : controller.detection_rear[25];
 8004dbc:	f893 106d 	ldrb.w	r1, [r3, #109]	; 0x6d
 8004dc0:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
            jlb_rx.measurements_2.line_sensor_27 = 26 == controller.selected_rear ? controller.detection_rear[26] + 2.0f : controller.detection_rear[26];
 8004dc4:	f893 106e 	ldrb.w	r1, [r3, #110]	; 0x6e
 8004dc8:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
            jlb_rx.measurements_2.line_sensor_28 = 27 == controller.selected_rear ? controller.detection_rear[27] + 2.0f : controller.detection_rear[27];
 8004dcc:	f893 106f 	ldrb.w	r1, [r3, #111]	; 0x6f
 8004dd0:	f884 103b 	strb.w	r1, [r4, #59]	; 0x3b
            jlb_rx.measurements_2.line_sensor_29 = 28 == controller.selected_rear ? controller.detection_rear[28] + 2.0f : controller.detection_rear[28];
 8004dd4:	f893 1070 	ldrb.w	r1, [r3, #112]	; 0x70
            jlb_rx.measurements_2.line_sensor_30 = 29 == controller.selected_rear ? controller.detection_rear[29] + 2.0f : controller.detection_rear[29];
 8004dd8:	2a1d      	cmp	r2, #29
            jlb_rx.measurements_2.line_sensor_29 = 28 == controller.selected_rear ? controller.detection_rear[28] + 2.0f : controller.detection_rear[28];
 8004dda:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
            jlb_rx.measurements_2.line_sensor_30 = 29 == controller.selected_rear ? controller.detection_rear[29] + 2.0f : controller.detection_rear[29];
 8004dde:	f47f aca9 	bne.w	8004734 <_ZN3jlb12SignalSender14measurements_2Ev+0x1a8>
 8004de2:	f893 2071 	ldrb.w	r2, [r3, #113]	; 0x71
 8004de6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004dea:	ee07 2a90 	vmov	s15, r2
 8004dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004df2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004df6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dfa:	ee17 2a90 	vmov	r2, s15
 8004dfe:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
            jlb_rx.measurements_2.line_sensor_31 = 30 == controller.selected_rear ? controller.detection_rear[30] + 2.0f : controller.detection_rear[30];
 8004e02:	f893 2072 	ldrb.w	r2, [r3, #114]	; 0x72
 8004e06:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
            jlb_rx.measurements_2.line_sensor_32 = 31 == controller.selected_rear ? controller.detection_rear[31] + 2.0f : controller.detection_rear[31];
 8004e0a:	e4aa      	b.n	8004762 <_ZN3jlb12SignalSender14measurements_2Ev+0x1d6>

08004e0c <_Z19RegistrateUserTasksv>:
{
 8004e0c:	b510      	push	{r4, lr}
	adcTaskHandle = osThreadNew(ADCTask, NULL, &adcTask_attributes);
 8004e0e:	2100      	movs	r1, #0
 8004e10:	4a17      	ldr	r2, [pc, #92]	; (8004e70 <_Z19RegistrateUserTasksv+0x64>)
 8004e12:	4818      	ldr	r0, [pc, #96]	; (8004e74 <_Z19RegistrateUserTasksv+0x68>)
 8004e14:	f010 fbee 	bl	80155f4 <osThreadNew>
 8004e18:	4604      	mov	r4, r0
 8004e1a:	4b17      	ldr	r3, [pc, #92]	; (8004e78 <_Z19RegistrateUserTasksv+0x6c>)
	mainTaskHandle = osThreadNew(MainTask, NULL, &mainTask_attributes);
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	4a17      	ldr	r2, [pc, #92]	; (8004e7c <_Z19RegistrateUserTasksv+0x70>)
 8004e20:	4817      	ldr	r0, [pc, #92]	; (8004e80 <_Z19RegistrateUserTasksv+0x74>)
	adcTaskHandle = osThreadNew(ADCTask, NULL, &adcTask_attributes);
 8004e22:	601c      	str	r4, [r3, #0]
	mainTaskHandle = osThreadNew(MainTask, NULL, &mainTask_attributes);
 8004e24:	f010 fbe6 	bl	80155f4 <osThreadNew>
 8004e28:	4604      	mov	r4, r0
 8004e2a:	4b16      	ldr	r3, [pc, #88]	; (8004e84 <_Z19RegistrateUserTasksv+0x78>)
	encoderTaskHandle = osThreadNew(Encoder_Task, NULL, &encoderTask_attributes);
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	4a16      	ldr	r2, [pc, #88]	; (8004e88 <_Z19RegistrateUserTasksv+0x7c>)
 8004e30:	4816      	ldr	r0, [pc, #88]	; (8004e8c <_Z19RegistrateUserTasksv+0x80>)
	mainTaskHandle = osThreadNew(MainTask, NULL, &mainTask_attributes);
 8004e32:	601c      	str	r4, [r3, #0]
	encoderTaskHandle = osThreadNew(Encoder_Task, NULL, &encoderTask_attributes);
 8004e34:	f010 fbde 	bl	80155f4 <osThreadNew>
 8004e38:	4604      	mov	r4, r0
 8004e3a:	4b15      	ldr	r3, [pc, #84]	; (8004e90 <_Z19RegistrateUserTasksv+0x84>)
	IMUTaskHandle = osThreadNew(IMUTask, NULL, &IMUTask_attributes);
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	4a15      	ldr	r2, [pc, #84]	; (8004e94 <_Z19RegistrateUserTasksv+0x88>)
 8004e40:	4815      	ldr	r0, [pc, #84]	; (8004e98 <_Z19RegistrateUserTasksv+0x8c>)
	encoderTaskHandle = osThreadNew(Encoder_Task, NULL, &encoderTask_attributes);
 8004e42:	601c      	str	r4, [r3, #0]
	IMUTaskHandle = osThreadNew(IMUTask, NULL, &IMUTask_attributes);
 8004e44:	f010 fbd6 	bl	80155f4 <osThreadNew>
 8004e48:	4604      	mov	r4, r0
 8004e4a:	4b14      	ldr	r3, [pc, #80]	; (8004e9c <_Z19RegistrateUserTasksv+0x90>)
	LSTaskHandle = osThreadNew(LSTask, NULL, &LSTask_attributes);
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	4a14      	ldr	r2, [pc, #80]	; (8004ea0 <_Z19RegistrateUserTasksv+0x94>)
 8004e50:	4814      	ldr	r0, [pc, #80]	; (8004ea4 <_Z19RegistrateUserTasksv+0x98>)
	IMUTaskHandle = osThreadNew(IMUTask, NULL, &IMUTask_attributes);
 8004e52:	601c      	str	r4, [r3, #0]
	LSTaskHandle = osThreadNew(LSTask, NULL, &LSTask_attributes);
 8004e54:	f010 fbce 	bl	80155f4 <osThreadNew>
 8004e58:	4604      	mov	r4, r0
 8004e5a:	4b13      	ldr	r3, [pc, #76]	; (8004ea8 <_Z19RegistrateUserTasksv+0x9c>)
	TelemetryTaskHandle = osThreadNew(TelemetryTask, NULL, &TelemetryTask_attributes);
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	4a13      	ldr	r2, [pc, #76]	; (8004eac <_Z19RegistrateUserTasksv+0xa0>)
 8004e60:	4813      	ldr	r0, [pc, #76]	; (8004eb0 <_Z19RegistrateUserTasksv+0xa4>)
	LSTaskHandle = osThreadNew(LSTask, NULL, &LSTask_attributes);
 8004e62:	601c      	str	r4, [r3, #0]
	TelemetryTaskHandle = osThreadNew(TelemetryTask, NULL, &TelemetryTask_attributes);
 8004e64:	f010 fbc6 	bl	80155f4 <osThreadNew>
 8004e68:	4b12      	ldr	r3, [pc, #72]	; (8004eb4 <_Z19RegistrateUserTasksv+0xa8>)
 8004e6a:	6018      	str	r0, [r3, #0]
}
 8004e6c:	bd10      	pop	{r4, pc}
 8004e6e:	bf00      	nop
 8004e70:	0801a9d4 	.word	0x0801a9d4
 8004e74:	0800336d 	.word	0x0800336d
 8004e78:	2000030c 	.word	0x2000030c
 8004e7c:	0801a9f8 	.word	0x0801a9f8
 8004e80:	08005061 	.word	0x08005061
 8004e84:	200006fc 	.word	0x200006fc
 8004e88:	0801aa1c 	.word	0x0801aa1c
 8004e8c:	080023b1 	.word	0x080023b1
 8004e90:	2000031c 	.word	0x2000031c
 8004e94:	0801a9b0 	.word	0x0801a9b0
 8004e98:	08003399 	.word	0x08003399
 8004e9c:	20000300 	.word	0x20000300
 8004ea0:	0801a98c 	.word	0x0801a98c
 8004ea4:	080033b1 	.word	0x080033b1
 8004ea8:	20000304 	.word	0x20000304
 8004eac:	0801aa40 	.word	0x0801aa40
 8004eb0:	08008e6d 	.word	0x08008e6d
 8004eb4:	20000308 	.word	0x20000308

08004eb8 <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>:
   *
   *  The initial underlying memory layout is a bit complicated...
  */
  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
 8004eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8004ebc:	09cc      	lsrs	r4, r1, #7
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
					   size_t(__num_nodes + 2));
 8004ebe:	1ce3      	adds	r3, r4, #3
      if (__a < __b)
 8004ec0:	2b08      	cmp	r3, #8
    _Deque_base<_Tp, _Alloc>::
 8004ec2:	4606      	mov	r6, r0
 8004ec4:	bf96      	itet	ls
 8004ec6:	2308      	movls	r3, #8
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004ec8:	0098      	lslhi	r0, r3, #2
 8004eca:	2020      	movls	r0, #32
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8004ecc:	6073      	str	r3, [r6, #4]
    _Deque_base<_Tp, _Alloc>::
 8004ece:	460f      	mov	r7, r1
 8004ed0:	f012 fe96 	bl	8017c00 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8004ed4:	6873      	ldr	r3, [r6, #4]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8004ed6:	3401      	adds	r4, #1
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8004ed8:	1b1b      	subs	r3, r3, r4
 8004eda:	ea4f 0853 	mov.w	r8, r3, lsr #1
      _Map_pointer __nstart = (this->_M_impl._M_map
 8004ede:	eb00 0a88 	add.w	sl, r0, r8, lsl #2
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8004ee2:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
    _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish)
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004ee6:	45a2      	cmp	sl, r4
 8004ee8:	4681      	mov	r9, r0
 8004eea:	bf38      	it	cc
 8004eec:	4655      	movcc	r5, sl
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8004eee:	6030      	str	r0, [r6, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004ef0:	d207      	bcs.n	8004f02 <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj+0x4a>
 8004ef2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004ef6:	f012 fe83 	bl	8017c00 <_Znwj>
	    *__cur = this->_M_allocate_node();
 8004efa:	f845 0b04 	str.w	r0, [r5], #4
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004efe:	42ac      	cmp	r4, r5
 8004f00:	d8f7      	bhi.n	8004ef2 <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj+0x3a>
	_M_first = *__new_node;
 8004f02:	f859 3028 	ldr.w	r3, [r9, r8, lsl #2]
					% __deque_buf_size(sizeof(_Tp)));
 8004f06:	f007 077f 	and.w	r7, r7, #127	; 0x7f
	_M_last = _M_first + difference_type(_S_buffer_size());
 8004f0a:	f503 7200 	add.w	r2, r3, #512	; 0x200
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8004f0e:	e9c6 3302 	strd	r3, r3, [r6, #8]
	_M_first = *__new_node;
 8004f12:	f854 3c04 	ldr.w	r3, [r4, #-4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8004f16:	6132      	str	r2, [r6, #16]
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8004f18:	3c04      	subs	r4, #4
	_M_last = _M_first + difference_type(_S_buffer_size());
 8004f1a:	f503 7200 	add.w	r2, r3, #512	; 0x200
					+ __num_elements
 8004f1e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	_M_last = _M_first + difference_type(_S_buffer_size());
 8004f22:	e9c6 3207 	strd	r3, r2, [r6, #28]
	_M_node = __new_node;
 8004f26:	f8c6 a014 	str.w	sl, [r6, #20]
 8004f2a:	6274      	str	r4, [r6, #36]	; 0x24
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8004f2c:	61b7      	str	r7, [r6, #24]
    }
 8004f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f32:	bf00      	nop

08004f34 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8004f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 8004f38:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004f3a:	4604      	mov	r4, r0
 8004f3c:	1e2b      	subs	r3, r5, #0
 8004f3e:	bf18      	it	ne
 8004f40:	2301      	movne	r3, #1
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 8004f42:	f06f 4c40 	mvn.w	ip, #3221225472	; 0xc0000000
      deque<_Tp, _Alloc>::
 8004f46:	460e      	mov	r6, r1
 8004f48:	6941      	ldr	r1, [r0, #20]
	  + (__x._M_cur - __x._M_first)
 8004f4a:	e9d0 2006 	ldrd	r2, r0, [r0, #24]
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 8004f4e:	1a6f      	subs	r7, r5, r1
	  + (__x._M_cur - __x._M_first)
 8004f50:	eba2 0e00 	sub.w	lr, r2, r0
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 8004f54:	ebc3 03a7 	rsb	r3, r3, r7, asr #2
	  + (__y._M_last - __y._M_cur);
 8004f58:	6922      	ldr	r2, [r4, #16]
 8004f5a:	68a0      	ldr	r0, [r4, #8]
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 8004f5c:	01db      	lsls	r3, r3, #7
	  + (__y._M_last - __y._M_cur);
 8004f5e:	1a12      	subs	r2, r2, r0
	  + (__x._M_cur - __x._M_first)
 8004f60:	eb03 03ae 	add.w	r3, r3, lr, asr #2
	  + (__y._M_last - __y._M_cur);
 8004f64:	eb03 03a2 	add.w	r3, r3, r2, asr #2
	if (size() == max_size())
 8004f68:	4563      	cmp	r3, ip
 8004f6a:	d074      	beq.n	8005056 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0x122>
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8004f6c:	e9d4 c200 	ldrd	ip, r2, [r4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8004f70:	eba5 030c 	sub.w	r3, r5, ip
 8004f74:	eba2 03a3 	sub.w	r3, r2, r3, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d912      	bls.n	8004fa2 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0x6e>
 8004f7c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004f80:	f012 fe3e 	bl	8017c00 <_Znwj>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8004f84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f86:	6836      	ldr	r6, [r6, #0]
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8004f88:	6068      	str	r0, [r5, #4]
 8004f8a:	69a2      	ldr	r2, [r4, #24]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8004f8c:	1d19      	adds	r1, r3, #4
	_M_first = *__new_node;
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	6016      	str	r6, [r2, #0]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8004f92:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8004f96:	e9c4 3207 	strd	r3, r2, [r4, #28]
	_M_node = __new_node;
 8004f9a:	6261      	str	r1, [r4, #36]	; 0x24
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8004f9c:	61a3      	str	r3, [r4, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 8004f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8004fa2:	10b8      	asrs	r0, r7, #2
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8004fa4:	f100 0802 	add.w	r8, r0, #2

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8004fa8:	ebb2 0f48 	cmp.w	r2, r8, lsl #1
 8004fac:	d833      	bhi.n	8005016 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0xe2>
			       this->_M_impl._M_finish._M_node + 1,
			       __new_nstart + __old_num_nodes);
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8004fae:	1c95      	adds	r5, r2, #2
 8004fb0:	2a01      	cmp	r2, #1
 8004fb2:	bf2c      	ite	cs
 8004fb4:	18ad      	addcs	r5, r5, r2
 8004fb6:	3501      	addcc	r5, #1
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8004fb8:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 8004fbc:	d244      	bcs.n	8005048 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0x114>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004fbe:	00a8      	lsls	r0, r5, #2
 8004fc0:	f012 fe1e 	bl	8017c00 <_Znwj>
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
			 + (__add_at_front ? __nodes_to_add : 0);
	  std::copy(this->_M_impl._M_start._M_node,
 8004fc4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004fc6:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8004fc8:	eba5 0808 	sub.w	r8, r5, r8
	  std::copy(this->_M_impl._M_start._M_node,
 8004fcc:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8004fce:	ea4f 0858 	mov.w	r8, r8, lsr #1
	  if (_Num)
 8004fd2:	4291      	cmp	r1, r2
 8004fd4:	4681      	mov	r9, r0
 8004fd6:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8004fda:	d003      	beq.n	8004fe4 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0xb0>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8004fdc:	4640      	mov	r0, r8
 8004fde:	1a52      	subs	r2, r2, r1
 8004fe0:	f014 f97f 	bl	80192e2 <memmove>
	::operator delete(__p
 8004fe4:	6861      	ldr	r1, [r4, #4]
 8004fe6:	6820      	ldr	r0, [r4, #0]
 8004fe8:	0089      	lsls	r1, r1, #2
 8004fea:	f012 fe07 	bl	8017bfc <_ZdlPvj>
		    this->_M_impl._M_finish._M_node + 1,
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);

	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
 8004fee:	e9c4 9500 	strd	r9, r5, [r4]
	_M_first = *__new_node;
 8004ff2:	f8d8 3000 	ldr.w	r3, [r8]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8004ff6:	eb08 0507 	add.w	r5, r8, r7
 8004ffa:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8004ffc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005000:	6123      	str	r3, [r4, #16]
	_M_first = *__new_node;
 8005002:	f858 3007 	ldr.w	r3, [r8, r7]
	_M_node = __new_node;
 8005006:	f8c4 8014 	str.w	r8, [r4, #20]
	_M_last = _M_first + difference_type(_S_buffer_size());
 800500a:	f503 7200 	add.w	r2, r3, #512	; 0x200
 800500e:	e9c4 3207 	strd	r3, r2, [r4, #28]
	_M_node = __new_node;
 8005012:	6265      	str	r5, [r4, #36]	; 0x24
 8005014:	e7b2      	b.n	8004f7c <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0x48>
					 - __new_num_nodes) / 2
 8005016:	eba2 0208 	sub.w	r2, r2, r8
 800501a:	0852      	lsrs	r2, r2, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800501c:	eb0c 0882 	add.w	r8, ip, r2, lsl #2
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8005020:	4541      	cmp	r1, r8
	    std::copy(this->_M_impl._M_start._M_node,
 8005022:	f105 0504 	add.w	r5, r5, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8005026:	d906      	bls.n	8005036 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0x102>
	  if (_Num)
 8005028:	42a9      	cmp	r1, r5
 800502a:	d0e2      	beq.n	8004ff2 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0xbe>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800502c:	4640      	mov	r0, r8
 800502e:	1a6a      	subs	r2, r5, r1
 8005030:	f014 f957 	bl	80192e2 <memmove>
 8005034:	e7dd      	b.n	8004ff2 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0xbe>
	  if (_Num)
 8005036:	42a9      	cmp	r1, r5
 8005038:	d0db      	beq.n	8004ff2 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0xbe>
	  const ptrdiff_t _Num = __last - __first;
 800503a:	1a6a      	subs	r2, r5, r1
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800503c:	1d38      	adds	r0, r7, #4
 800503e:	1a80      	subs	r0, r0, r2
 8005040:	4440      	add	r0, r8
 8005042:	f014 f94e 	bl	80192e2 <memmove>
 8005046:	e7d4      	b.n	8004ff2 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0xbe>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8005048:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800504c:	d301      	bcc.n	8005052 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0x11e>
	      std::__throw_bad_array_new_length();
 800504e:	f012 fdeb 	bl	8017c28 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8005052:	f012 fde6 	bl	8017c22 <_ZSt17__throw_bad_allocv>
	  __throw_length_error(
 8005056:	4801      	ldr	r0, [pc, #4]	; (800505c <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0x128>)
 8005058:	f012 fde9 	bl	8017c2e <_ZSt20__throw_length_errorPKc>
 800505c:	0801a91c 	.word	0x0801a91c

08005060 <_Z8MainTaskPv>:
		vTaskDelayUntil(&xLastWakeTime, 20u);
	}
}

void MainTask(void * argument)
{
 8005060:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8005064:	b08b      	sub	sp, #44	; 0x2c
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8005066:	f011 fb5b 	bl	8016720 <xTaskGetTickCount>
            mission         = state_.mission;
 800506a:	2101      	movs	r1, #1
            labyrinth_state = state_.labyrinth_state;
 800506c:	2200      	movs	r2, #0
            fast_state      = state_.fast_state;
 800506e:	2304      	movs	r3, #4
 8005070:	ed9f 8bd3 	vldr	d8, [pc, #844]	; 80053c0 <_Z8MainTaskPv+0x360>
            mission         = state_.mission;
 8005074:	4cd8      	ldr	r4, [pc, #864]	; (80053d8 <_Z8MainTaskPv+0x378>)
 8005076:	f8df a388 	ldr.w	sl, [pc, #904]	; 8005400 <_Z8MainTaskPv+0x3a0>
            labyrinth_state = state_.labyrinth_state;
 800507a:	e9c4 126c 	strd	r1, r2, [r4, #432]	; 0x1b0
 800507e:	f8df b384 	ldr.w	fp, [pc, #900]	; 8005404 <_Z8MainTaskPv+0x3a4>
 8005082:	9005      	str	r0, [sp, #20]
            fast_state      = state_.fast_state;
 8005084:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8

	logic.set_states({jlb::FastState::OUT_ACCEL_ZONE});
	for (;;)
	{
		lv_battery_voltage = adc_values.lv_batt_voltage_raw / 4096.0f * 3.3f * LV_BATERY_VOLTAGE_DIVIDER * 1.04447;
 8005088:	4bd4      	ldr	r3, [pc, #848]	; (80053dc <_Z8MainTaskPv+0x37c>)
 800508a:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 80053e0 <_Z8MainTaskPv+0x380>
 800508e:	899b      	ldrh	r3, [r3, #12]
 8005090:	ee07 3a90 	vmov	s15, r3
 8005094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005098:	ee67 7a87 	vmul.f32	s15, s15, s14
 800509c:	ee17 0a90 	vmov	r0, s15
 80050a0:	f7fb fa3a 	bl	8000518 <__aeabi_f2d>
 80050a4:	a3c8      	add	r3, pc, #800	; (adr r3, 80053c8 <_Z8MainTaskPv+0x368>)
 80050a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050aa:	f7fb fa8d 	bl	80005c8 <__aeabi_dmul>
 80050ae:	f7fb fd5b 	bl	8000b68 <__aeabi_d2f>
 80050b2:	4bcc      	ldr	r3, [pc, #816]	; (80053e4 <_Z8MainTaskPv+0x384>)
 80050b4:	6018      	str	r0, [r3, #0]
		//LineSensorTask();
		//IMU_Task();
		DistanceSensorTask();
 80050b6:	f7fd f821 	bl	80020fc <_Z18DistanceSensorTaskv>
		wheel_rpm = CalculateRPM();
 80050ba:	f7fd f9fd 	bl	80024b8 <_Z12CalculateRPMv>

		auto [derivative, integral, prev_error] = motorcontrol_pid.get_debug();

		logic.imu_callback(lv_battery_voltage,motorcontrol.battery_voltage,imu.yaw,derivative, integral, prev_error);
 80050be:	4bca      	ldr	r3, [pc, #808]	; (80053e8 <_Z8MainTaskPv+0x388>)
            if (std::fabs(ang_vel_z) > jlb::MAX_YAW_RATE) { return; }
 80050c0:	ed9f 7aca 	vldr	s14, [pc, #808]	; 80053ec <_Z8MainTaskPv+0x38c>
 80050c4:	edd3 7a03 	vldr	s15, [r3, #12]
  { return __builtin_fabsf(__x); }
 80050c8:	eef0 6ae7 	vabs.f32	s13, s15
 80050cc:	eef4 6ac7 	vcmpe.f32	s13, s14
 80050d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        kd_ = kd;
    }

    DebugOutput get_debug()
    {
    	return {derivative_, integral_, prevError_};
 80050d4:	4bc6      	ldr	r3, [pc, #792]	; (80053f0 <_Z8MainTaskPv+0x390>)
        	meas_ang_vel_z = ang_vel_z;
 80050d6:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	edcd 7a06 	vstr	s15, [sp, #24]
		wheel_rpm = CalculateRPM();
 80050e0:	ee10 0a10 	vmov	r0, s0
 80050e4:	ed8a 0a00 	vstr	s0, [sl]
        	meas_lin_acc_x = lin_acc_z;
 80050e8:	62a3      	str	r3, [r4, #40]	; 0x28
            if (std::fabs(ang_vel_z) > jlb::MAX_YAW_RATE) { return; }
 80050ea:	dc3f      	bgt.n	800516c <_Z8MainTaskPv+0x10c>
	    != this->_M_impl._M_finish._M_last - 1)
 80050ec:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
	if (this->_M_impl._M_finish._M_cur
 80050f0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
	    != this->_M_impl._M_finish._M_last - 1)
 80050f2:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 80050f4:	429a      	cmp	r2, r3
 80050f6:	f000 85cd 	beq.w	8005c94 <_Z8MainTaskPv+0xc34>
 80050fa:	ece2 7a01 	vstmia	r2!, {s15}
	    ++this->_M_impl._M_finish._M_cur;
 80050fe:	67e2      	str	r2, [r4, #124]	; 0x7c
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 8005100:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8005104:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8005106:	1e18      	subs	r0, r3, #0
 8005108:	bf18      	it	ne
 800510a:	2001      	movne	r0, #1
 800510c:	1a5b      	subs	r3, r3, r1
 800510e:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
	  + (__x._M_cur - __x._M_first)
 8005112:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8005116:	1ad5      	subs	r5, r2, r3
 8005118:	10ad      	asrs	r5, r5, #2
 800511a:	eb05 15c0 	add.w	r5, r5, r0, lsl #7
	  + (__y._M_last - __y._M_cur);
 800511e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005120:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005122:	1ac6      	subs	r6, r0, r3
 8005124:	eb05 06a6 	add.w	r6, r5, r6, asr #2
            if (w_buffer_.size() > jlb::IMU_BUFFER_SIZE) { w_buffer_.pop_front(); }
 8005128:	2e0a      	cmp	r6, #10
 800512a:	d908      	bls.n	800513e <_Z8MainTaskPv+0xde>
	    != this->_M_impl._M_start._M_last - 1)
 800512c:	1f06      	subs	r6, r0, #4
	if (this->_M_impl._M_start._M_cur
 800512e:	42b3      	cmp	r3, r6
 8005130:	f000 8745 	beq.w	8005fbe <_Z8MainTaskPv+0xf5e>
	    ++this->_M_impl._M_start._M_cur;
 8005134:	3304      	adds	r3, #4
	  + (__y._M_last - __y._M_cur);
 8005136:	1ac6      	subs	r6, r0, r3
	    ++this->_M_impl._M_start._M_cur;
 8005138:	66e3      	str	r3, [r4, #108]	; 0x6c
	  + (__y._M_last - __y._M_cur);
 800513a:	eb05 06a6 	add.w	r6, r5, r6, asr #2
    {
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      for (; __first != __last; ++__first)
 800513e:	429a      	cmp	r2, r3
 8005140:	eddf 7aac 	vldr	s15, [pc, #688]	; 80053f4 <_Z8MainTaskPv+0x394>
 8005144:	d008      	beq.n	8005158 <_Z8MainTaskPv+0xf8>
	__init = _GLIBCXX_MOVE_IF_20(__init) + *__first;
 8005146:	ecb3 7a01 	vldmia	r3!, {s14}
	if (_M_cur == _M_last)
 800514a:	4283      	cmp	r3, r0
 800514c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005150:	f000 83d8 	beq.w	8005904 <_Z8MainTaskPv+0x8a4>
      for (; __first != __last; ++__first)
 8005154:	4293      	cmp	r3, r2
 8005156:	d1f6      	bne.n	8005146 <_Z8MainTaskPv+0xe6>
            w_t = std::accumulate(w_buffer_.begin(), w_buffer_.end(), 0.0f) / w_buffer_.size();
 8005158:	ee07 6a10 	vmov	s14, r6
 800515c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005160:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005164:	edc4 6a01 	vstr	s13, [r4, #4]
		logic.rpm_callback(wheel_rpm);
 8005168:	f8da 0000 	ldr.w	r0, [sl]
            meas_wheel_rpm = wheel_rpm;
 800516c:	61a0      	str	r0, [r4, #24]
            float velocity = M_PI * jlb::WHEEL_DIAMETER * wheel_rpm / 60.0f;
 800516e:	f7fb f9d3 	bl	8000518 <__aeabi_f2d>
 8005172:	a397      	add	r3, pc, #604	; (adr r3, 80053d0 <_Z8MainTaskPv+0x370>)
 8005174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005178:	f7fb fa26 	bl	80005c8 <__aeabi_dmul>
 800517c:	f7fb fcf4 	bl	8000b68 <__aeabi_d2f>
 8005180:	ee07 0a90 	vmov	s15, r0
            if (std::fabs(velocity) > jlb::MAX_VELOCITY) { return; }
 8005184:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005188:	eef0 6ae7 	vabs.f32	s13, s15
 800518c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8005190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            float velocity = M_PI * jlb::WHEEL_DIAMETER * wheel_rpm / 60.0f;
 8005194:	9006      	str	r0, [sp, #24]
            if (std::fabs(velocity) > jlb::MAX_VELOCITY) { return; }
 8005196:	dc3d      	bgt.n	8005214 <_Z8MainTaskPv+0x1b4>
	    != this->_M_impl._M_finish._M_last - 1)
 8005198:	6de3      	ldr	r3, [r4, #92]	; 0x5c
	if (this->_M_impl._M_finish._M_cur
 800519a:	6d62      	ldr	r2, [r4, #84]	; 0x54
	    != this->_M_impl._M_finish._M_last - 1)
 800519c:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 800519e:	429a      	cmp	r2, r3
 80051a0:	f000 8571 	beq.w	8005c86 <_Z8MainTaskPv+0xc26>
 80051a4:	f842 0b04 	str.w	r0, [r2], #4
	    ++this->_M_impl._M_finish._M_cur;
 80051a8:	6562      	str	r2, [r4, #84]	; 0x54
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 80051aa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80051ac:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80051ae:	1e18      	subs	r0, r3, #0
 80051b0:	bf18      	it	ne
 80051b2:	2001      	movne	r0, #1
 80051b4:	1a5b      	subs	r3, r3, r1
 80051b6:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
	  + (__x._M_cur - __x._M_first)
 80051ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051bc:	1ad5      	subs	r5, r2, r3
 80051be:	10ad      	asrs	r5, r5, #2
 80051c0:	eb05 15c0 	add.w	r5, r5, r0, lsl #7
	  + (__y._M_last - __y._M_cur);
 80051c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80051c6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80051c8:	1ac6      	subs	r6, r0, r3
 80051ca:	eb05 06a6 	add.w	r6, r5, r6, asr #2
            if (v_buffer_.size() > jlb::VELOCITY_BUFFER_SIZE) { v_buffer_.pop_front(); }
 80051ce:	2e01      	cmp	r6, #1
 80051d0:	d908      	bls.n	80051e4 <_Z8MainTaskPv+0x184>
	    != this->_M_impl._M_start._M_last - 1)
 80051d2:	1f06      	subs	r6, r0, #4
	if (this->_M_impl._M_start._M_cur
 80051d4:	42b3      	cmp	r3, r6
 80051d6:	f000 86d4 	beq.w	8005f82 <_Z8MainTaskPv+0xf22>
	    ++this->_M_impl._M_start._M_cur;
 80051da:	3304      	adds	r3, #4
	  + (__y._M_last - __y._M_cur);
 80051dc:	1ac6      	subs	r6, r0, r3
	    ++this->_M_impl._M_start._M_cur;
 80051de:	6463      	str	r3, [r4, #68]	; 0x44
	  + (__y._M_last - __y._M_cur);
 80051e0:	eb05 06a6 	add.w	r6, r5, r6, asr #2
 80051e4:	eddf 7a83 	vldr	s15, [pc, #524]	; 80053f4 <_Z8MainTaskPv+0x394>
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d00b      	beq.n	8005204 <_Z8MainTaskPv+0x1a4>
	__init = _GLIBCXX_MOVE_IF_20(__init) + *__first;
 80051ec:	ecb3 7a01 	vldmia	r3!, {s14}
	if (_M_cur == _M_last)
 80051f0:	4283      	cmp	r3, r0
 80051f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051f6:	d1f7      	bne.n	80051e8 <_Z8MainTaskPv+0x188>
	_M_first = *__new_node;
 80051f8:	684b      	ldr	r3, [r1, #4]
	    _M_set_node(_M_node + 1);
 80051fa:	3104      	adds	r1, #4
      for (; __first != __last; ++__first)
 80051fc:	4293      	cmp	r3, r2
	_M_last = _M_first + difference_type(_S_buffer_size());
 80051fe:	f503 7000 	add.w	r0, r3, #512	; 0x200
 8005202:	d1f3      	bne.n	80051ec <_Z8MainTaskPv+0x18c>
            vx_t = std::accumulate(v_buffer_.begin(), v_buffer_.end(), 0.0f) / v_buffer_.size();
 8005204:	ee07 6a10 	vmov	s14, r6
 8005208:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800520c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005210:	edc4 6a00 	vstr	s13, [r4]
      __a = _GLIBCXX_MOVE(__b);
 8005214:	f04f 0c00 	mov.w	ip, #0
 8005218:	4663      	mov	r3, ip
 800521a:	4662      	mov	r2, ip
 800521c:	4667      	mov	r7, ip
 800521e:	4661      	mov	r1, ip
 8005220:	4666      	mov	r6, ip
 8005222:	4660      	mov	r0, ip
 8005224:	4665      	mov	r5, ip
 8005226:	f89b e09f 	ldrb.w	lr, [fp, #159]	; 0x9f
 800522a:	f36e 0c07 	bfi	ip, lr, #0, #8
 800522e:	f89b e09e 	ldrb.w	lr, [fp, #158]	; 0x9e
 8005232:	f36e 2c0f 	bfi	ip, lr, #8, #8
 8005236:	f89b e083 	ldrb.w	lr, [fp, #131]	; 0x83
 800523a:	f36e 0307 	bfi	r3, lr, #0, #8
 800523e:	f89b e087 	ldrb.w	lr, [fp, #135]	; 0x87
 8005242:	f36e 0207 	bfi	r2, lr, #0, #8
 8005246:	f89b e09b 	ldrb.w	lr, [fp, #155]	; 0x9b
 800524a:	f36e 0707 	bfi	r7, lr, #0, #8
 800524e:	f89b e08b 	ldrb.w	lr, [fp, #139]	; 0x8b
 8005252:	f36e 0107 	bfi	r1, lr, #0, #8
 8005256:	f89b e097 	ldrb.w	lr, [fp, #151]	; 0x97
 800525a:	f36e 0607 	bfi	r6, lr, #0, #8
 800525e:	f89b e08f 	ldrb.w	lr, [fp, #143]	; 0x8f
 8005262:	f36e 0007 	bfi	r0, lr, #0, #8
 8005266:	f89b e093 	ldrb.w	lr, [fp, #147]	; 0x93
 800526a:	f36e 0507 	bfi	r5, lr, #0, #8
 800526e:	f89b e09d 	ldrb.w	lr, [fp, #157]	; 0x9d
 8005272:	f36e 4c17 	bfi	ip, lr, #16, #8
 8005276:	f89b e082 	ldrb.w	lr, [fp, #130]	; 0x82
 800527a:	f36e 230f 	bfi	r3, lr, #8, #8
 800527e:	f89b e086 	ldrb.w	lr, [fp, #134]	; 0x86
 8005282:	f36e 220f 	bfi	r2, lr, #8, #8
 8005286:	f89b e09a 	ldrb.w	lr, [fp, #154]	; 0x9a
 800528a:	f36e 270f 	bfi	r7, lr, #8, #8
 800528e:	f89b e08a 	ldrb.w	lr, [fp, #138]	; 0x8a
 8005292:	f36e 210f 	bfi	r1, lr, #8, #8
 8005296:	f89b e096 	ldrb.w	lr, [fp, #150]	; 0x96
 800529a:	f36e 260f 	bfi	r6, lr, #8, #8
 800529e:	f89b e08e 	ldrb.w	lr, [fp, #142]	; 0x8e
 80052a2:	f36e 200f 	bfi	r0, lr, #8, #8
 80052a6:	f89b e092 	ldrb.w	lr, [fp, #146]	; 0x92
 80052aa:	f36e 250f 	bfi	r5, lr, #8, #8
 80052ae:	f89b e09c 	ldrb.w	lr, [fp, #156]	; 0x9c
 80052b2:	f36e 6c1f 	bfi	ip, lr, #24, #8
 80052b6:	f89b e081 	ldrb.w	lr, [fp, #129]	; 0x81
 80052ba:	f36e 4317 	bfi	r3, lr, #16, #8
 80052be:	f89b e085 	ldrb.w	lr, [fp, #133]	; 0x85
 80052c2:	f36e 4217 	bfi	r2, lr, #16, #8
 80052c6:	f89b e099 	ldrb.w	lr, [fp, #153]	; 0x99
 80052ca:	f36e 4717 	bfi	r7, lr, #16, #8
 80052ce:	f89b e089 	ldrb.w	lr, [fp, #137]	; 0x89
 80052d2:	f36e 4117 	bfi	r1, lr, #16, #8
 80052d6:	f89b e095 	ldrb.w	lr, [fp, #149]	; 0x95
 80052da:	f36e 4617 	bfi	r6, lr, #16, #8
 80052de:	f89b e08d 	ldrb.w	lr, [fp, #141]	; 0x8d
 80052e2:	f36e 4017 	bfi	r0, lr, #16, #8
 80052e6:	f89b e091 	ldrb.w	lr, [fp, #145]	; 0x91
 80052ea:	f36e 4517 	bfi	r5, lr, #16, #8
 80052ee:	f89b e080 	ldrb.w	lr, [fp, #128]	; 0x80
 80052f2:	f36e 631f 	bfi	r3, lr, #24, #8
    swap(_Tp& __a, _Tp& __b)
 80052f6:	f89b e084 	ldrb.w	lr, [fp, #132]	; 0x84
 80052fa:	f36e 621f 	bfi	r2, lr, #24, #8
 80052fe:	f89b e098 	ldrb.w	lr, [fp, #152]	; 0x98
 8005302:	f36e 671f 	bfi	r7, lr, #24, #8
 8005306:	f89b e088 	ldrb.w	lr, [fp, #136]	; 0x88
 800530a:	f36e 611f 	bfi	r1, lr, #24, #8
 800530e:	f89b e094 	ldrb.w	lr, [fp, #148]	; 0x94
 8005312:	f36e 661f 	bfi	r6, lr, #24, #8
 8005316:	f89b e08c 	ldrb.w	lr, [fp, #140]	; 0x8c
 800531a:	f36e 601f 	bfi	r0, lr, #24, #8
 800531e:	f89b e090 	ldrb.w	lr, [fp, #144]	; 0x90
      __a = _GLIBCXX_MOVE(__b);
 8005322:	f8cb c080 	str.w	ip, [fp, #128]	; 0x80
 8005326:	f36e 651f 	bfi	r5, lr, #24, #8
 800532a:	e9cb 5023 	strd	r5, r0, [fp, #140]	; 0x8c
 800532e:	e9cb 1225 	strd	r1, r2, [fp, #148]	; 0x94
 8005332:	f8cb 309c 	str.w	r3, [fp, #156]	; 0x9c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8005336:	e9db 1332 	ldrd	r1, r3, [fp, #200]	; 0xc8
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800533a:	1a5d      	subs	r5, r3, r1
 800533c:	e9cb 7621 	strd	r7, r6, [fp, #132]	; 0x84
 8005340:	f000 8436 	beq.w	8005bb0 <_Z8MainTaskPv+0xb50>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8005344:	4b2c      	ldr	r3, [pc, #176]	; (80053f8 <_Z8MainTaskPv+0x398>)
 8005346:	46a8      	mov	r8, r5
 8005348:	429d      	cmp	r5, r3
 800534a:	f200 846f 	bhi.w	8005c2c <_Z8MainTaskPv+0xbcc>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800534e:	4628      	mov	r0, r5
 8005350:	f012 fc56 	bl	8017c00 <_Znwj>
      : _M_current(__i) { }
 8005354:	e9db 1332 	ldrd	r1, r3, [fp, #200]	; 0xc8
	  if (_Num)
 8005358:	4299      	cmp	r1, r3
 800535a:	4606      	mov	r6, r0
	  const ptrdiff_t _Num = __last - __first;
 800535c:	eba3 0501 	sub.w	r5, r3, r1
	  if (_Num)
 8005360:	d003      	beq.n	800536a <_Z8MainTaskPv+0x30a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8005362:	462a      	mov	r2, r5
 8005364:	4630      	mov	r0, r6
 8005366:	f013 ffbc 	bl	80192e2 <memmove>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800536a:	10ab      	asrs	r3, r5, #2
            return ControlSignal{target_angle, target_speed};
        }

        void set_detection_front(bool *detection_front_, std::vector<float> line_positions_front_)
        {
            as_state.current_number_of_lines = static_cast<uint8_t>(line_positions_front_.size());
 800536c:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005370:	2d00      	cmp	r5, #0
 8005372:	f000 843b 	beq.w	8005bec <_Z8MainTaskPv+0xb8c>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8005376:	4b20      	ldr	r3, [pc, #128]	; (80053f8 <_Z8MainTaskPv+0x398>)
 8005378:	429d      	cmp	r5, r3
 800537a:	f200 8457 	bhi.w	8005c2c <_Z8MainTaskPv+0xbcc>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800537e:	4628      	mov	r0, r5
 8005380:	f012 fc3e 	bl	8017c00 <_Znwj>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8005384:	1947      	adds	r7, r0, r5
	this->_M_impl._M_start = this->_M_allocate(__n);
 8005386:	9006      	str	r0, [sp, #24]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8005388:	9708      	str	r7, [sp, #32]
	  if (_Num)
 800538a:	b11d      	cbz	r5, 8005394 <_Z8MainTaskPv+0x334>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800538c:	462a      	mov	r2, r5
 800538e:	4631      	mov	r1, r6
 8005390:	f014 f891 	bl	80194b6 <memcpy>
            for (unsigned long i = 0; i < SENSOR_COUNT; i++) detection_front[i] = detection_front_[i];
 8005394:	4d19      	ldr	r5, [pc, #100]	; (80053fc <_Z8MainTaskPv+0x39c>)
 8005396:	f8df c070 	ldr.w	ip, [pc, #112]	; 8005408 <_Z8MainTaskPv+0x3a8>
	this->_M_impl._M_finish =
 800539a:	9707      	str	r7, [sp, #28]
 800539c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80053a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053a2:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
            line_positions_front = line_positions_front_;
 80053a6:	af06      	add	r7, sp, #24
            for (unsigned long i = 0; i < SENSOR_COUNT; i++) detection_front[i] = detection_front_[i];
 80053a8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            line_positions_front = line_positions_front_;
 80053ac:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80053b0:	4639      	mov	r1, r7
 80053b2:	f7fe f8a9 	bl	8003508 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80053b6:	9806      	ldr	r0, [sp, #24]
 80053b8:	e028      	b.n	800540c <_Z8MainTaskPv+0x3ac>
 80053ba:	bf00      	nop
 80053bc:	f3af 8000 	nop.w
 80053c0:	54442d18 	.word	0x54442d18
 80053c4:	401921fb 	.word	0x401921fb
 80053c8:	2cba732e 	.word	0x2cba732e
 80053cc:	3ff0b626 	.word	0x3ff0b626
 80053d0:	f3ee54ec 	.word	0xf3ee54ec
 80053d4:	3f7684d8 	.word	0x3f7684d8
 80053d8:	20000328 	.word	0x20000328
 80053dc:	20000120 	.word	0x20000120
 80053e0:	3b54e739 	.word	0x3b54e739
 80053e4:	200006f8 	.word	0x200006f8
 80053e8:	2000019c 	.word	0x2000019c
 80053ec:	4096cbe4 	.word	0x4096cbe4
 80053f0:	200002a8 	.word	0x200002a8
 80053f4:	00000000 	.word	0x00000000
 80053f8:	7ffffffc 	.word	0x7ffffffc
 80053fc:	200003ec 	.word	0x200003ec
 8005400:	20000710 	.word	0x20000710
 8005404:	200001b4 	.word	0x200001b4
 8005408:	20000234 	.word	0x20000234
	if (__p)
 800540c:	2800      	cmp	r0, #0
 800540e:	f000 83c1 	beq.w	8005b94 <_Z8MainTaskPv+0xb34>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8005412:	9908      	ldr	r1, [sp, #32]
	::operator delete(__p
 8005414:	1a09      	subs	r1, r1, r0
 8005416:	f012 fbf1 	bl	8017bfc <_ZdlPvj>
	if (__p)
 800541a:	2e00      	cmp	r6, #0
 800541c:	f040 83ba 	bne.w	8005b94 <_Z8MainTaskPv+0xb34>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8005420:	e9db 1335 	ldrd	r1, r3, [fp, #212]	; 0xd4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005424:	1a5d      	subs	r5, r3, r1
 8005426:	f000 83be 	beq.w	8005ba6 <_Z8MainTaskPv+0xb46>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800542a:	4bd7      	ldr	r3, [pc, #860]	; (8005788 <_Z8MainTaskPv+0x728>)
 800542c:	46a8      	mov	r8, r5
 800542e:	429d      	cmp	r5, r3
 8005430:	f200 83fc 	bhi.w	8005c2c <_Z8MainTaskPv+0xbcc>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005434:	4628      	mov	r0, r5
 8005436:	f012 fbe3 	bl	8017c00 <_Znwj>
 800543a:	e9db 1335 	ldrd	r1, r3, [fp, #212]	; 0xd4
	  if (_Num)
 800543e:	428b      	cmp	r3, r1
 8005440:	4606      	mov	r6, r0
	  const ptrdiff_t _Num = __last - __first;
 8005442:	eba3 0501 	sub.w	r5, r3, r1
	  if (_Num)
 8005446:	d003      	beq.n	8005450 <_Z8MainTaskPv+0x3f0>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8005448:	462a      	mov	r2, r5
 800544a:	4630      	mov	r0, r6
 800544c:	f013 ff49 	bl	80192e2 <memmove>
 8005450:	2d00      	cmp	r5, #0
 8005452:	f000 83f7 	beq.w	8005c44 <_Z8MainTaskPv+0xbe4>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8005456:	4bcc      	ldr	r3, [pc, #816]	; (8005788 <_Z8MainTaskPv+0x728>)
 8005458:	429d      	cmp	r5, r3
 800545a:	f200 83e7 	bhi.w	8005c2c <_Z8MainTaskPv+0xbcc>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800545e:	4628      	mov	r0, r5
 8005460:	f012 fbce 	bl	8017c00 <_Znwj>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8005464:	eb00 0905 	add.w	r9, r0, r5
	this->_M_impl._M_start = this->_M_allocate(__n);
 8005468:	9006      	str	r0, [sp, #24]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800546a:	f8cd 9020 	str.w	r9, [sp, #32]
	  if (_Num)
 800546e:	b11d      	cbz	r5, 8005478 <_Z8MainTaskPv+0x418>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8005470:	462a      	mov	r2, r5
 8005472:	4631      	mov	r1, r6
 8005474:	f014 f81f 	bl	80194b6 <memcpy>
            for (unsigned long i = 0; i < SENSOR_COUNT; i++) detection_rear[i] = detection_rear_[i];
 8005478:	4dc4      	ldr	r5, [pc, #784]	; (800578c <_Z8MainTaskPv+0x72c>)
 800547a:	f8df c324 	ldr.w	ip, [pc, #804]	; 80057a0 <_Z8MainTaskPv+0x740>
	this->_M_impl._M_finish =
 800547e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005482:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005486:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005488:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800548c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            line_positions_rear = line_positions_rear_;
 8005490:	f105 001c 	add.w	r0, r5, #28
 8005494:	4639      	mov	r1, r7
 8005496:	f7fe f837 	bl	8003508 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800549a:	9806      	ldr	r0, [sp, #24]
	if (__p)
 800549c:	2800      	cmp	r0, #0
 800549e:	f000 838d 	beq.w	8005bbc <_Z8MainTaskPv+0xb5c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80054a2:	9908      	ldr	r1, [sp, #32]
	::operator delete(__p
 80054a4:	1a09      	subs	r1, r1, r0
 80054a6:	f012 fba9 	bl	8017bfc <_ZdlPvj>
	if (__p)
 80054aa:	2e00      	cmp	r6, #0
 80054ac:	f040 8386 	bne.w	8005bbc <_Z8MainTaskPv+0xb5c>

		std::reverse(std::begin(ls_data.front_detection), std::end(ls_data.front_detection));
		logic.set_detection_front( ls_data.front_detection, ls_data.front);
		logic.set_detection_rear(ls_data.rear_detection, ls_data.rear);
		logic.set_object_range(distance_sensor.distance);
 80054b0:	4eb7      	ldr	r6, [pc, #732]	; (8005790 <_Z8MainTaskPv+0x730>)

    	tick_counter_before = HAL_GetTick();
 80054b2:	4db8      	ldr	r5, [pc, #736]	; (8005794 <_Z8MainTaskPv+0x734>)
        void set_object_range(const float object_range_) { object_range = object_range_; }
 80054b4:	6a33      	ldr	r3, [r6, #32]
 80054b6:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 80054ba:	f005 fd89 	bl	800afd0 <HAL_GetTick>
        	tick_counter_prev = tick_counter;
 80054be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80054c0:	6028      	str	r0, [r5, #0]
 80054c2:	63a3      	str	r3, [r4, #56]	; 0x38
        	tick_counter = HAL_GetTick();
 80054c4:	f005 fd84 	bl	800afd0 <HAL_GetTick>
            float dt = (((float)tick_counter) - ((float)(tick_counter_prev))) / 1000.0f;
 80054c8:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 80054cc:	ee06 0a90 	vmov	s13, r0
 80054d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d4:	eeb8 9a66 	vcvt.f32.u32	s18, s13
 80054d8:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8005798 <_Z8MainTaskPv+0x738>
 80054dc:	ee39 9a67 	vsub.f32	s18, s18, s15
 80054e0:	ee29 9a07 	vmul.f32	s18, s18, s14
            if (dt > 0.0f)
 80054e4:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 80054e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                vx_t = std::fabs(vx_t) < 0.03 ? 0.0 : vx_t;
 80054ec:	edd4 9a00 	vldr	s19, [r4]
        	tick_counter = HAL_GetTick();
 80054f0:	6360      	str	r0, [r4, #52]	; 0x34
            if (dt > 0.0f)
 80054f2:	dd68      	ble.n	80055c6 <_Z8MainTaskPv+0x566>
                vx_t = std::fabs(vx_t) < 0.03 ? 0.0 : vx_t;
 80054f4:	eef0 7ae9 	vabs.f32	s15, s19
 80054f8:	ee17 0a90 	vmov	r0, s15
 80054fc:	f7fb f80c 	bl	8000518 <__aeabi_f2d>
 8005500:	a39d      	add	r3, pc, #628	; (adr r3, 8005778 <_Z8MainTaskPv+0x718>)
 8005502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005506:	f7fb fae5 	bl	8000ad4 <__aeabi_dcmpge>
 800550a:	2800      	cmp	r0, #0
 800550c:	f000 8369 	beq.w	8005be2 <_Z8MainTaskPv+0xb82>
 8005510:	ee29 aa29 	vmul.f32	s20, s18, s19
                w_t  = std::fabs(w_t) < 0.015 ? 0.0 : w_t;
 8005514:	edd4 aa01 	vldr	s21, [r4, #4]
 8005518:	eef0 7aea 	vabs.f32	s15, s21
 800551c:	ee17 0a90 	vmov	r0, s15
                vx_t = std::fabs(vx_t) < 0.03 ? 0.0 : vx_t;
 8005520:	edc4 9a00 	vstr	s19, [r4]
                w_t  = std::fabs(w_t) < 0.015 ? 0.0 : w_t;
 8005524:	f7fa fff8 	bl	8000518 <__aeabi_f2d>
 8005528:	a395      	add	r3, pc, #596	; (adr r3, 8005780 <_Z8MainTaskPv+0x720>)
 800552a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552e:	f7fb fad1 	bl	8000ad4 <__aeabi_dcmpge>
 8005532:	2800      	cmp	r0, #0
 8005534:	f000 8350 	beq.w	8005bd8 <_Z8MainTaskPv+0xb78>
                theta_t = normalize_angle(theta_t + w_t * dt);
 8005538:	ee29 9a2a 	vmul.f32	s18, s18, s21
                x_t += (vx_t * std::cos(theta_t) - vy_t * std::sin(theta_t)) * dt;
 800553c:	ed94 ba04 	vldr	s22, [r4, #16]
  { return __builtin_cosf(__x); }
 8005540:	eeb0 0a4b 	vmov.f32	s0, s22
                w_t  = std::fabs(w_t) < 0.015 ? 0.0 : w_t;
 8005544:	edc4 aa01 	vstr	s21, [r4, #4]
 8005548:	f012 fbac 	bl	8017ca4 <cosf>
 800554c:	eef0 aa40 	vmov.f32	s21, s0
  { return __builtin_sinf(__x); }
 8005550:	eeb0 0a4b 	vmov.f32	s0, s22
 8005554:	f012 fbea 	bl	8017d2c <sinf>
                x_t += (vx_t * std::cos(theta_t) - vy_t * std::sin(theta_t)) * dt;
 8005558:	edd4 7a02 	vldr	s15, [r4, #8]
                y_t += (vx_t * std::sin(theta_t) + vy_t * std::cos(theta_t)) * dt;
 800555c:	ed94 7a03 	vldr	s14, [r4, #12]
      return fmod(__type(__x), __type(__y));
 8005560:	ee7b 6a09 	vadd.f32	s13, s22, s18
 8005564:	eea0 7a0a 	vfma.f32	s14, s0, s20
                x_t += (vx_t * std::cos(theta_t) - vy_t * std::sin(theta_t)) * dt;
 8005568:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800556c:	ee16 0a90 	vmov	r0, s13
 8005570:	edc4 7a02 	vstr	s15, [r4, #8]
                y_t += (vx_t * std::sin(theta_t) + vy_t * std::cos(theta_t)) * dt;
 8005574:	ed84 7a03 	vstr	s14, [r4, #12]
 8005578:	f7fa ffce 	bl	8000518 <__aeabi_f2d>
 800557c:	eeb0 1a48 	vmov.f32	s2, s16
 8005580:	eef0 1a68 	vmov.f32	s3, s17
 8005584:	ec41 0b10 	vmov	d0, r0, r1
 8005588:	f012 fb5c 	bl	8017c44 <fmod>
 800558c:	ec51 0b10 	vmov	r0, r1, d0
            angle = std::fmod(angle, 2.0f * M_PI);
 8005590:	f7fb faea 	bl	8000b68 <__aeabi_d2f>
 8005594:	ee07 0a90 	vmov	s15, r0
            if (angle < 0.0f) { angle += 2.0f * M_PI; }
 8005598:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800559c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a0:	d509      	bpl.n	80055b6 <_Z8MainTaskPv+0x556>
 80055a2:	f7fa ffb9 	bl	8000518 <__aeabi_f2d>
 80055a6:	ec53 2b18 	vmov	r2, r3, d8
 80055aa:	f7fa fe57 	bl	800025c <__adddf3>
 80055ae:	f7fb fadb 	bl	8000b68 <__aeabi_d2f>
 80055b2:	ee07 0a90 	vmov	s15, r0
                distance_traveled_since_checkpoint += vx_t * dt;
 80055b6:	ed94 7a05 	vldr	s14, [r4, #20]
                theta_t = normalize_angle(theta_t + w_t * dt);
 80055ba:	edc4 7a04 	vstr	s15, [r4, #16]
                distance_traveled_since_checkpoint += vx_t * dt;
 80055be:	ee77 7a0a 	vadd.f32	s15, s14, s20
 80055c2:	edc4 7a05 	vstr	s15, [r4, #20]
            auto [mission, labyrinth_state, fast_state, reference_speed] = as_state.update();
 80055c6:	4638      	mov	r0, r7
 80055c8:	4974      	ldr	r1, [pc, #464]	; (800579c <_Z8MainTaskPv+0x73c>)
        void set_current_velocity(const float current_velocity_) { current_velocity = current_velocity_; }
 80055ca:	edc4 9a4c 	vstr	s19, [r4, #304]	; 0x130
 80055ce:	f7fe f973 	bl	80038b8 <_ZN3jlb7ASState6updateEv>
            direction      = direction_;
        }

        void set_reference_speed(const float reference_speed_) { reference_speed = reference_speed_; }
 80055d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055d4:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
        	tick_counter_prev = tick_counter;
 80055d8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80055dc:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
        	tick_counter = HAL_GetTick();
 80055e0:	f005 fcf6 	bl	800afd0 <HAL_GetTick>
            float dt = (((float)tick_counter) - ((float)(tick_counter_prev))) / 1000.0f;
 80055e4:	edd4 7a4a 	vldr	s15, [r4, #296]	; 0x128
 80055e8:	ee06 0a90 	vmov	s13, r0
 80055ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055f0:	eeb8 9a66 	vcvt.f32.u32	s18, s13
 80055f4:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8005798 <_Z8MainTaskPv+0x738>
 80055f8:	ee39 9a67 	vsub.f32	s18, s18, s15
	  if (__pred(__first))
 80055fc:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
 8005600:	ee29 9a07 	vmul.f32	s18, s18, s14
        	tick_counter = HAL_GetTick();
 8005604:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 8183 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
	  if (__pred(__first))
 800560e:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 817e 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
	  if (__pred(__first))
 8005618:	f894 30c6 	ldrb.w	r3, [r4, #198]	; 0xc6
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 8179 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
	  if (__pred(__first))
 8005622:	f894 30c7 	ldrb.w	r3, [r4, #199]	; 0xc7
 8005626:	2b00      	cmp	r3, #0
 8005628:	f000 8174 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
	  if (__pred(__first))
 800562c:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 816f 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
	  if (__pred(__first))
 8005636:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 816a 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
	  if (__pred(__first))
 8005640:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 8165 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
	  if (__pred(__first))
 800564a:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
 800564e:	2b00      	cmp	r3, #0
 8005650:	f000 8160 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
	  if (__pred(__first))
 8005654:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
 8005658:	2b00      	cmp	r3, #0
 800565a:	f000 815b 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
	  if (__pred(__first))
 800565e:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 8156 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
	  if (__pred(__first))
 8005668:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 8151 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
	  if (__pred(__first))
 8005672:	f894 30cf 	ldrb.w	r3, [r4, #207]	; 0xcf
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 814c 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
	  if (__pred(__first))
 800567c:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 8147 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
	  if (__pred(__first))
 8005686:	f894 30d1 	ldrb.w	r3, [r4, #209]	; 0xd1
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 8142 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
	  if (__pred(__first))
 8005690:	f894 30d2 	ldrb.w	r3, [r4, #210]	; 0xd2
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 813d 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
	  if (__pred(__first))
 800569a:	f894 30d3 	ldrb.w	r3, [r4, #211]	; 0xd3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 8138 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
	  if (__pred(__first))
 80056a4:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 8133 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
	  if (__pred(__first))
 80056ae:	f894 30d5 	ldrb.w	r3, [r4, #213]	; 0xd5
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 812e 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
	  if (__pred(__first))
 80056b8:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 8129 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
	  if (__pred(__first))
 80056c2:	f894 30d7 	ldrb.w	r3, [r4, #215]	; 0xd7
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f000 8124 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
	  if (__pred(__first))
 80056cc:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f000 811f 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
	  if (__pred(__first))
 80056d6:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 811a 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
	  if (__pred(__first))
 80056e0:	f894 30da 	ldrb.w	r3, [r4, #218]	; 0xda
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 8115 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
	  if (__pred(__first))
 80056ea:	f894 30db 	ldrb.w	r3, [r4, #219]	; 0xdb
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f000 8110 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
	  if (__pred(__first))
 80056f4:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 810b 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
	  if (__pred(__first))
 80056fe:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
 8005702:	2b00      	cmp	r3, #0
 8005704:	f000 8106 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
	  if (__pred(__first))
 8005708:	f894 30de 	ldrb.w	r3, [r4, #222]	; 0xde
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 8101 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
	  if (__pred(__first))
 8005712:	f894 30df 	ldrb.w	r3, [r4, #223]	; 0xdf
 8005716:	2b00      	cmp	r3, #0
 8005718:	f000 80fc 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
	  if (__pred(__first))
 800571c:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 80f7 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
	  if (__pred(__first))
 8005726:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 80f2 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
	  if (__pred(__first))
 8005730:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
 8005734:	2b00      	cmp	r3, #0
 8005736:	f000 80ed 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
	  if (__pred(__first))
 800573a:	f894 30e3 	ldrb.w	r3, [r4, #227]	; 0xe3
 800573e:	2b00      	cmp	r3, #0
 8005740:	f000 80e8 	beq.w	8005914 <_Z8MainTaskPv+0x8b4>
				if(target_speed <= FAST_SPEED_TURN || target_speed <= LABYRINTH_SPEED || target_speed <= LABYRINTH_SPEED_REVERSE)
 8005744:	edd4 7a2b 	vldr	s15, [r4, #172]	; 0xac
 8005748:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800574c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005754:	d928      	bls.n	80057a8 <_Z8MainTaskPv+0x748>
 8005756:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800575a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800575e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005762:	d921      	bls.n	80057a8 <_Z8MainTaskPv+0x748>
 8005764:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005768:	eef4 7ac7 	vcmpe.f32	s15, s14
 800576c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005770:	f200 829b 	bhi.w	8005caa <_Z8MainTaskPv+0xc4a>
 8005774:	e018      	b.n	80057a8 <_Z8MainTaskPv+0x748>
 8005776:	bf00      	nop
 8005778:	eb851eb8 	.word	0xeb851eb8
 800577c:	3f9eb851 	.word	0x3f9eb851
 8005780:	eb851eb8 	.word	0xeb851eb8
 8005784:	3f8eb851 	.word	0x3f8eb851
 8005788:	7ffffffc 	.word	0x7ffffffc
 800578c:	2000040c 	.word	0x2000040c
 8005790:	20000150 	.word	0x20000150
 8005794:	20000704 	.word	0x20000704
 8005798:	3a83126f 	.word	0x3a83126f
 800579c:	200004d8 	.word	0x200004d8
 80057a0:	20000254 	.word	0x20000254
 80057a4:	c1b4175f 	.word	0xc1b4175f
					if (target_angle < 0) { target_angle = -deg2rad(MAX_WHEEL_ANGLE); }
 80057a8:	ed94 aa2a 	vldr	s20, [r4, #168]	; 0xa8
 80057ac:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 80057b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057b4:	f100 8261 	bmi.w	8005c7a <_Z8MainTaskPv+0xc1a>
					else if (target_angle == 0) { target_angle = 0; }
 80057b8:	eeb5 aa40 	vcmp.f32	s20, #0.0
 80057bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057c0:	d00a      	beq.n	80057d8 <_Z8MainTaskPv+0x778>
					else if (target_angle > 0) { target_angle = deg2rad(MAX_WHEEL_ANGLE); }
 80057c2:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 80057c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ca:	f340 8275 	ble.w	8005cb8 <_Z8MainTaskPv+0xc58>
 80057ce:	ed1f aa0b 	vldr	s20, [pc, #-44]	; 80057a4 <_Z8MainTaskPv+0x744>
 80057d2:	4ba7      	ldr	r3, [pc, #668]	; (8005a70 <_Z8MainTaskPv+0xa10>)
 80057d4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
        	if(!((usWidth_throttle > 1800) && (usWidth_throttle < 2800)))
 80057d8:	f46f 61e1 	mvn.w	r1, #1800	; 0x708
 80057dc:	f240 32e6 	movw	r2, #998	; 0x3e6
            if (reference_speed > target_speed + MAX_ACCELERATION * dt) { target_speed += MAX_ACCELERATION * dt; }
 80057e0:	eef1 6a0e 	vmov.f32	s13, #30	; 0x40f00000  7.5
 80057e4:	eef0 9a67 	vmov.f32	s19, s15
        	if(!((usWidth_throttle > 1800) && (usWidth_throttle < 2800)))
 80057e8:	4ba2      	ldr	r3, [pc, #648]	; (8005a74 <_Z8MainTaskPv+0xa14>)
            if (reference_speed > target_speed + MAX_ACCELERATION * dt) { target_speed += MAX_ACCELERATION * dt; }
 80057ea:	eee9 9a26 	vfma.f32	s19, s18, s13
        	if(!((usWidth_throttle > 1800) && (usWidth_throttle < 2800)))
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	440b      	add	r3, r1
 80057f2:	4293      	cmp	r3, r2
				reference_speed = 0.0f;
 80057f4:	bf8c      	ite	hi
 80057f6:	ed9f 7aa0 	vldrhi	s14, [pc, #640]	; 8005a78 <_Z8MainTaskPv+0xa18>
            if (reference_speed > target_speed + MAX_ACCELERATION * dt) { target_speed += MAX_ACCELERATION * dt; }
 80057fa:	ed94 7a4b 	vldrls	s14, [r4, #300]	; 0x12c
 80057fe:	eef4 9ac7 	vcmpe.f32	s19, s14
				reference_speed = 0.0f;
 8005802:	bf88      	it	hi
 8005804:	ed84 7a4b 	vstrhi	s14, [r4, #300]	; 0x12c
            if (reference_speed > target_speed + MAX_ACCELERATION * dt) { target_speed += MAX_ACCELERATION * dt; }
 8005808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800580c:	d405      	bmi.n	800581a <_Z8MainTaskPv+0x7ba>
            else if (reference_speed < target_speed - MAX_DECELERATION * dt) { target_speed -= MAX_DECELERATION * dt; }
 800580e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005812:	eee9 7a66 	vfms.f32	s15, s18, s13
 8005816:	fec7 9a27 	vmaxnm.f32	s19, s14, s15
            if (target_speed < MIN_SPEED) target_speed = MIN_SPEED;
 800581a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800581e:	eef4 9ae7 	vcmpe.f32	s19, s15
 8005822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005826:	bf46      	itte	mi
 8005828:	eef0 9a67 	vmovmi.f32	s19, s15
 800582c:	edc4 7a2b 	vstrmi	s15, [r4, #172]	; 0xac
            if (reference_speed > target_speed + MAX_ACCELERATION * dt) { target_speed += MAX_ACCELERATION * dt; }
 8005830:	edc4 9a2b 	vstrpl	s19, [r4, #172]	; 0xac
		auto [target_angle, target_speed] = logic.update();
    	tick_counter_after = HAL_GetTick();
 8005834:	f005 fbcc 	bl	800afd0 <HAL_GetTick>
        dt_update = (((float)tick_counter_after) - ((float)(tick_counter_before)));
 8005838:	edd5 7a00 	vldr	s15, [r5]
 800583c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005840:	ee07 0a90 	vmov	s15, r0
 8005844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005848:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800584c:	4b8b      	ldr	r3, [pc, #556]	; (8005a7c <_Z8MainTaskPv+0xa1c>)
    	tick_counter_after = HAL_GetTick();
 800584e:	f8df 824c 	ldr.w	r8, [pc, #588]	; 8005a9c <_Z8MainTaskPv+0xa3c>
        dt_update = (((float)tick_counter_after) - ((float)(tick_counter_before)));
 8005852:	edc3 7a00 	vstr	s15, [r3]
    	tick_counter_after = HAL_GetTick();
 8005856:	f8c8 0000 	str.w	r0, [r8]

    	tick_counter_before = HAL_GetTick();
 800585a:	f005 fbb9 	bl	800afd0 <HAL_GetTick>
        void rpm_callback(const float motor_rpm_) { odometry.rpm_callback(motor_rpm_); }
        void set_object_range(const float object_range_) { controller.set_object_range(object_range_); }
        void set_states(const CompositeState state_) { as_state.set_states(state_); }
        void send_telemetry() { signal_sender.send_telemetry(); }
        void set_measurements(const Measurements &measurements_) { measurements = measurements_; }
        Odom get_odometry() { return {odometry.vx_t, odometry.x_t, odometry.y_t, odometry.theta_t}; }
 800585e:	f8d4 9000 	ldr.w	r9, [r4]
 8005862:	6028      	str	r0, [r5, #0]
		auto [vx_t, x_t, y_t, theta_t] = logic.get_odometry();
    	tick_counter_after = HAL_GetTick();
 8005864:	f005 fbb4 	bl	800afd0 <HAL_GetTick>
        dt_odo = (((float)tick_counter_after) - ((float)(tick_counter_before)));
 8005868:	ed95 7a00 	vldr	s14, [r5]
 800586c:	ee07 0a90 	vmov	s15, r0
 8005870:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005878:	ee77 7ac7 	vsub.f32	s15, s15, s14

		motorcontrol.actual_velocity = vx_t;
 800587c:	4f80      	ldr	r7, [pc, #512]	; (8005a80 <_Z8MainTaskPv+0xa20>)
        dt_odo = (((float)tick_counter_after) - ((float)(tick_counter_before)));
 800587e:	4b81      	ldr	r3, [pc, #516]	; (8005a84 <_Z8MainTaskPv+0xa24>)
    	tick_counter_after = HAL_GetTick();
 8005880:	f8c8 0000 	str.w	r0, [r8]
        dt_odo = (((float)tick_counter_after) - ((float)(tick_counter_before)));
 8005884:	edc3 7a00 	vstr	s15, [r3]
		motorcontrol.target_velocity = target_speed;
 8005888:	edc7 9a03 	vstr	s19, [r7, #12]
		motorcontrol.actual_velocity = vx_t;
 800588c:	f8c7 9008 	str.w	r9, [r7, #8]
		MotorControlTask();
 8005890:	f7fd fb74 	bl	8002f7c <_Z16MotorControlTaskv>

		Measurements meas;
		meas.duty_cycle = motorcontrol.duty_cycle;
		meas.motor_current = motorcontrol.motor_current;
		meas.object_range = distance_sensor.distance;
 8005894:	6a33      	ldr	r3, [r6, #32]
		meas.motor_current = motorcontrol.motor_current;
 8005896:	687a      	ldr	r2, [r7, #4]
        void set_measurements(const Measurements &measurements_) { measurements = measurements_; }
 8005898:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
 800589c:	693b      	ldr	r3, [r7, #16]
		meas.wheel_rpm = wheel_rpm;
		logic.set_measurements(meas);

		SetSteeringAngle(target_angle * -180.0f / 3.14f);
 800589e:	eeb0 0a4a 	vmov.f32	s0, s20
 80058a2:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
		meas.wheel_rpm = wheel_rpm;
 80058a6:	f8da 3000 	ldr.w	r3, [sl]
 80058aa:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
 80058ae:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
		SetSteeringAngle(target_angle * -180.0f / 3.14f);
 80058b2:	f7fd fd17 	bl	80032e4 <_Z16SetSteeringAnglef>

		//logic.send_telemetry();

		// If flood message arrives reset counter and set flood to active
		if((flood_arrived == true) && (flood_counter > 0))
 80058b6:	4b74      	ldr	r3, [pc, #464]	; (8005a88 <_Z8MainTaskPv+0xa28>)
 80058b8:	781a      	ldrb	r2, [r3, #0]
 80058ba:	2a00      	cmp	r2, #0
 80058bc:	f000 815f 	beq.w	8005b7e <_Z8MainTaskPv+0xb1e>
 80058c0:	4a72      	ldr	r2, [pc, #456]	; (8005a8c <_Z8MainTaskPv+0xa2c>)
 80058c2:	7811      	ldrb	r1, [r2, #0]
 80058c4:	2900      	cmp	r1, #0
 80058c6:	f040 81b5 	bne.w	8005c34 <_Z8MainTaskPv+0xbd4>
			flood_counter = 40u;
		}
		//If flood message was not sent decrement counter
		else
		{
			flood_counter--;
 80058ca:	23ff      	movs	r3, #255	; 0xff
 80058cc:	7013      	strb	r3, [r2, #0]
		if(flood_counter == 0)
		{
			flood_active = false;
		}

		tick_counter_main_prev = tick_counter_main;
 80058ce:	4d70      	ldr	r5, [pc, #448]	; (8005a90 <_Z8MainTaskPv+0xa30>)
 80058d0:	4e70      	ldr	r6, [pc, #448]	; (8005a94 <_Z8MainTaskPv+0xa34>)
 80058d2:	682b      	ldr	r3, [r5, #0]
 80058d4:	6033      	str	r3, [r6, #0]
    	tick_counter_main = HAL_GetTick();
 80058d6:	f005 fb7b 	bl	800afd0 <HAL_GetTick>
 80058da:	4603      	mov	r3, r0
        dt_main = (((float)tick_counter_main) - ((float)(tick_counter_main_prev)));
 80058dc:	ed96 7a00 	vldr	s14, [r6]
 80058e0:	ee07 3a90 	vmov	s15, r3
 80058e4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80058e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80058f0:	4a69      	ldr	r2, [pc, #420]	; (8005a98 <_Z8MainTaskPv+0xa38>)
		vTaskDelayUntil(&xLastWakeTime, 5u);
 80058f2:	2105      	movs	r1, #5
 80058f4:	a805      	add	r0, sp, #20
        dt_main = (((float)tick_counter_main) - ((float)(tick_counter_main_prev)));
 80058f6:	edc2 7a00 	vstr	s15, [r2]
    	tick_counter_main = HAL_GetTick();
 80058fa:	602b      	str	r3, [r5, #0]
		vTaskDelayUntil(&xLastWakeTime, 5u);
 80058fc:	f010 fd9c 	bl	8016438 <vTaskDelayUntil>
	}
 8005900:	f7ff bbc2 	b.w	8005088 <_Z8MainTaskPv+0x28>
	_M_first = *__new_node;
 8005904:	684b      	ldr	r3, [r1, #4]
	    _M_set_node(_M_node + 1);
 8005906:	3104      	adds	r1, #4
 8005908:	4293      	cmp	r3, r2
	_M_last = _M_first + difference_type(_S_buffer_size());
 800590a:	f503 7000 	add.w	r0, r3, #512	; 0x200
 800590e:	f47f ac1a 	bne.w	8005146 <_Z8MainTaskPv+0xe6>
 8005912:	e421      	b.n	8005158 <_Z8MainTaskPv+0xf8>
	  if (__pred(__first))
 8005914:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
 8005918:	2b00      	cmp	r3, #0
 800591a:	d068      	beq.n	80059ee <_Z8MainTaskPv+0x98e>
	  if (__pred(__first))
 800591c:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
 8005920:	2b00      	cmp	r3, #0
 8005922:	d064      	beq.n	80059ee <_Z8MainTaskPv+0x98e>
	  if (__pred(__first))
 8005924:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
 8005928:	2b00      	cmp	r3, #0
 800592a:	d060      	beq.n	80059ee <_Z8MainTaskPv+0x98e>
	  if (__pred(__first))
 800592c:	f894 30e7 	ldrb.w	r3, [r4, #231]	; 0xe7
 8005930:	2b00      	cmp	r3, #0
 8005932:	d05c      	beq.n	80059ee <_Z8MainTaskPv+0x98e>
	  if (__pred(__first))
 8005934:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
 8005938:	2b00      	cmp	r3, #0
 800593a:	d058      	beq.n	80059ee <_Z8MainTaskPv+0x98e>
	  if (__pred(__first))
 800593c:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
 8005940:	2b00      	cmp	r3, #0
 8005942:	d054      	beq.n	80059ee <_Z8MainTaskPv+0x98e>
	  if (__pred(__first))
 8005944:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
 8005948:	2b00      	cmp	r3, #0
 800594a:	d050      	beq.n	80059ee <_Z8MainTaskPv+0x98e>
	  if (__pred(__first))
 800594c:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 8005950:	2b00      	cmp	r3, #0
 8005952:	d04c      	beq.n	80059ee <_Z8MainTaskPv+0x98e>
	  if (__pred(__first))
 8005954:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 8005958:	2b00      	cmp	r3, #0
 800595a:	d048      	beq.n	80059ee <_Z8MainTaskPv+0x98e>
	  if (__pred(__first))
 800595c:	f894 30ed 	ldrb.w	r3, [r4, #237]	; 0xed
 8005960:	2b00      	cmp	r3, #0
 8005962:	d044      	beq.n	80059ee <_Z8MainTaskPv+0x98e>
	  if (__pred(__first))
 8005964:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
 8005968:	2b00      	cmp	r3, #0
 800596a:	d040      	beq.n	80059ee <_Z8MainTaskPv+0x98e>
	  if (__pred(__first))
 800596c:	f894 30ef 	ldrb.w	r3, [r4, #239]	; 0xef
 8005970:	b3eb      	cbz	r3, 80059ee <_Z8MainTaskPv+0x98e>
	  if (__pred(__first))
 8005972:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
 8005976:	b3d3      	cbz	r3, 80059ee <_Z8MainTaskPv+0x98e>
	  if (__pred(__first))
 8005978:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
 800597c:	b3bb      	cbz	r3, 80059ee <_Z8MainTaskPv+0x98e>
	  if (__pred(__first))
 800597e:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
 8005982:	b3a3      	cbz	r3, 80059ee <_Z8MainTaskPv+0x98e>
	  if (__pred(__first))
 8005984:	f894 30f3 	ldrb.w	r3, [r4, #243]	; 0xf3
 8005988:	b38b      	cbz	r3, 80059ee <_Z8MainTaskPv+0x98e>
	  if (__pred(__first))
 800598a:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
 800598e:	b373      	cbz	r3, 80059ee <_Z8MainTaskPv+0x98e>
	  if (__pred(__first))
 8005990:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
 8005994:	b35b      	cbz	r3, 80059ee <_Z8MainTaskPv+0x98e>
	  if (__pred(__first))
 8005996:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
 800599a:	b343      	cbz	r3, 80059ee <_Z8MainTaskPv+0x98e>
	  if (__pred(__first))
 800599c:	f894 30f7 	ldrb.w	r3, [r4, #247]	; 0xf7
 80059a0:	b32b      	cbz	r3, 80059ee <_Z8MainTaskPv+0x98e>
	  if (__pred(__first))
 80059a2:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
 80059a6:	b313      	cbz	r3, 80059ee <_Z8MainTaskPv+0x98e>
	  if (__pred(__first))
 80059a8:	f894 30f9 	ldrb.w	r3, [r4, #249]	; 0xf9
 80059ac:	b1fb      	cbz	r3, 80059ee <_Z8MainTaskPv+0x98e>
	  if (__pred(__first))
 80059ae:	f894 30fa 	ldrb.w	r3, [r4, #250]	; 0xfa
 80059b2:	b1e3      	cbz	r3, 80059ee <_Z8MainTaskPv+0x98e>
	  if (__pred(__first))
 80059b4:	f894 30fb 	ldrb.w	r3, [r4, #251]	; 0xfb
 80059b8:	b1cb      	cbz	r3, 80059ee <_Z8MainTaskPv+0x98e>
	  if (__pred(__first))
 80059ba:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
 80059be:	b1b3      	cbz	r3, 80059ee <_Z8MainTaskPv+0x98e>
	  if (__pred(__first))
 80059c0:	f894 30fd 	ldrb.w	r3, [r4, #253]	; 0xfd
 80059c4:	b19b      	cbz	r3, 80059ee <_Z8MainTaskPv+0x98e>
	  if (__pred(__first))
 80059c6:	f894 30fe 	ldrb.w	r3, [r4, #254]	; 0xfe
 80059ca:	b183      	cbz	r3, 80059ee <_Z8MainTaskPv+0x98e>
	  if (__pred(__first))
 80059cc:	f894 30ff 	ldrb.w	r3, [r4, #255]	; 0xff
 80059d0:	b16b      	cbz	r3, 80059ee <_Z8MainTaskPv+0x98e>
	  if (__pred(__first))
 80059d2:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
 80059d6:	b153      	cbz	r3, 80059ee <_Z8MainTaskPv+0x98e>
	  if (__pred(__first))
 80059d8:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
 80059dc:	b13b      	cbz	r3, 80059ee <_Z8MainTaskPv+0x98e>
	  if (__pred(__first))
 80059de:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
 80059e2:	b123      	cbz	r3, 80059ee <_Z8MainTaskPv+0x98e>
	  if (__pred(__first))
 80059e4:	f894 3103 	ldrb.w	r3, [r4, #259]	; 0x103
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f47f aeab 	bne.w	8005744 <_Z8MainTaskPv+0x6e4>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80059ee:	e9d4 1341 	ldrd	r1, r3, [r4, #260]	; 0x104
			std::all_of(std::begin(detection_rear), std::end(detection_rear), [](bool b) { return b; }) || line_positions_front.size() == 0 ||
 80059f2:	428b      	cmp	r3, r1
 80059f4:	f43f aea6 	beq.w	8005744 <_Z8MainTaskPv+0x6e4>
 80059f8:	e9d4 0244 	ldrd	r0, r2, [r4, #272]	; 0x110
 80059fc:	4282      	cmp	r2, r0
 80059fe:	f43f aea1 	beq.w	8005744 <_Z8MainTaskPv+0x6e4>
 8005a02:	eba3 0901 	sub.w	r9, r3, r1
		if (line_positions_front.size() > 4 || line_positions_rear.size() > 4) { return; }
 8005a06:	f1b9 0f10 	cmp.w	r9, #16
 8005a0a:	f200 80dc 	bhi.w	8005bc6 <_Z8MainTaskPv+0xb66>
 8005a0e:	1a12      	subs	r2, r2, r0
 8005a10:	2a10      	cmp	r2, #16
 8005a12:	f200 80d8 	bhi.w	8005bc6 <_Z8MainTaskPv+0xb66>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005a16:	4648      	mov	r0, r9
 8005a18:	f012 f8f2 	bl	8017c00 <_Znwj>
 8005a1c:	e9d4 1341 	ldrd	r1, r3, [r4, #260]	; 0x104
	  const ptrdiff_t _Num = __last - __first;
 8005a20:	1a5a      	subs	r2, r3, r1
	  if (_Num)
 8005a22:	4299      	cmp	r1, r3
 8005a24:	4607      	mov	r7, r0
	  const ptrdiff_t _Num = __last - __first;
 8005a26:	9200      	str	r2, [sp, #0]
	  if (_Num)
 8005a28:	d001      	beq.n	8005a2e <_Z8MainTaskPv+0x9ce>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8005a2a:	f013 fc5a 	bl	80192e2 <memmove>
	  return __result + _Num;
 8005a2e:	9a00      	ldr	r2, [sp, #0]
            line_position_front      = select_control_point(line_positions_front, prev_line_position_front);
 8005a30:	ed94 aa28 	vldr	s20, [r4, #160]	; 0xa0
 8005a34:	18bb      	adds	r3, r7, r2
      if (__first != __last)
 8005a36:	42bb      	cmp	r3, r7
 8005a38:	f000 8083 	beq.w	8005b42 <_Z8MainTaskPv+0xae2>
    { return __lhs.base() - __rhs.base(); }
 8005a3c:	1092      	asrs	r2, r2, #2
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 8005a3e:	fab2 f282 	clz	r2, r2
 8005a42:	f1c2 021f 	rsb	r2, r2, #31
	  std::__introsort_loop(__first, __last,
 8005a46:	4619      	mov	r1, r3
 8005a48:	0052      	lsls	r2, r2, #1
 8005a4a:	4638      	mov	r0, r7
 8005a4c:	9301      	str	r3, [sp, #4]
 8005a4e:	f7fd fdbd 	bl	80035cc <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0>
      if (__last - __first > int(_S_threshold))
 8005a52:	9a00      	ldr	r2, [sp, #0]
 8005a54:	9b01      	ldr	r3, [sp, #4]
 8005a56:	2a40      	cmp	r2, #64	; 0x40
 8005a58:	f300 82d9 	bgt.w	800600e <_Z8MainTaskPv+0xfae>
      { return __normal_iterator(_M_current + __n); }
 8005a5c:	f107 0804 	add.w	r8, r7, #4
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8005a60:	4543      	cmp	r3, r8
 8005a62:	d06e      	beq.n	8005b42 <_Z8MainTaskPv+0xae2>
 8005a64:	f8cd 9004 	str.w	r9, [sp, #4]
 8005a68:	46b9      	mov	r9, r7
 8005a6a:	461f      	mov	r7, r3
 8005a6c:	e028      	b.n	8005ac0 <_Z8MainTaskPv+0xa60>
 8005a6e:	bf00      	nop
 8005a70:	3ec90fdb 	.word	0x3ec90fdb
 8005a74:	200002fc 	.word	0x200002fc
 8005a78:	00000000 	.word	0x00000000
 8005a7c:	20000318 	.word	0x20000318
 8005a80:	20000294 	.word	0x20000294
 8005a84:	20000314 	.word	0x20000314
 8005a88:	200002e1 	.word	0x200002e1
 8005a8c:	2000008d 	.word	0x2000008d
 8005a90:	20000708 	.word	0x20000708
 8005a94:	2000070c 	.word	0x2000070c
 8005a98:	20000310 	.word	0x20000310
 8005a9c:	20000700 	.word	0x20000700
	  if (_Num)
 8005aa0:	45c1      	cmp	r9, r8
 8005aa2:	d006      	beq.n	8005ab2 <_Z8MainTaskPv+0xa52>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8005aa4:	4649      	mov	r1, r9
 8005aa6:	eba8 0209 	sub.w	r2, r8, r9
 8005aaa:	f109 0004 	add.w	r0, r9, #4
 8005aae:	f013 fc18 	bl	80192e2 <memmove>
	      *__first = _GLIBCXX_MOVE(__val);
 8005ab2:	edc9 9a00 	vstr	s19, [r9]
	++_M_current;
 8005ab6:	f108 0804 	add.w	r8, r8, #4
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8005aba:	4547      	cmp	r7, r8
 8005abc:	f000 836b 	beq.w	8006196 <_Z8MainTaskPv+0x1136>
      { return *__it1 < *__it2; }
 8005ac0:	edd8 9a00 	vldr	s19, [r8]
	  if (__comp(__i, __first))
 8005ac4:	edd9 7a00 	vldr	s15, [r9]
 8005ac8:	eef4 9ae7 	vcmpe.f32	s19, s15
 8005acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ad0:	d4e6      	bmi.n	8005aa0 <_Z8MainTaskPv+0xa40>
      { return __val < *__it; }
 8005ad2:	ed58 7a01 	vldr	s15, [r8, #-4]
      while (__comp(__val, __next))
 8005ad6:	eef4 7ae9 	vcmpe.f32	s15, s19
 8005ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ade:	f1a8 0204 	sub.w	r2, r8, #4
 8005ae2:	f340 836e 	ble.w	80061c2 <_Z8MainTaskPv+0x1162>
	  *__last = _GLIBCXX_MOVE(*__next);
 8005ae6:	edc2 7a01 	vstr	s15, [r2, #4]
      operator--() _GLIBCXX_NOEXCEPT
 8005aea:	4613      	mov	r3, r2
 8005aec:	ed72 7a01 	vldmdb	r2!, {s15}
      while (__comp(__val, __next))
 8005af0:	eef4 9ae7 	vcmpe.f32	s19, s15
 8005af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005af8:	d4f5      	bmi.n	8005ae6 <_Z8MainTaskPv+0xa86>
      *__last = _GLIBCXX_MOVE(__val);
 8005afa:	edc3 9a00 	vstr	s19, [r3]
 8005afe:	e7da      	b.n	8005ab6 <_Z8MainTaskPv+0xa56>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8005b00:	9a01      	ldr	r2, [sp, #4]
 8005b02:	e9dd 9302 	ldrd	r9, r3, [sp, #8]
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d01b      	beq.n	8005b42 <_Z8MainTaskPv+0xae2>
 8005b0a:	4690      	mov	r8, r2
 8005b0c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8005b10:	4641      	mov	r1, r8
	--_M_current;
 8005b12:	4602      	mov	r2, r0
	__val = _GLIBCXX_MOVE(*__last);
 8005b14:	ecb8 7a01 	vldmia	r8!, {s14}
 8005b18:	ecf0 7a01 	vldmia	r0!, {s15}
      while (__comp(__val, __next))
 8005b1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b24:	d509      	bpl.n	8005b3a <_Z8MainTaskPv+0xada>
	  *__last = _GLIBCXX_MOVE(*__next);
 8005b26:	edc2 7a01 	vstr	s15, [r2, #4]
      operator--() _GLIBCXX_NOEXCEPT
 8005b2a:	4611      	mov	r1, r2
 8005b2c:	ed72 7a01 	vldmdb	r2!, {s15}
      while (__comp(__val, __next))
 8005b30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b38:	d4f5      	bmi.n	8005b26 <_Z8MainTaskPv+0xac6>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8005b3a:	4543      	cmp	r3, r8
      *__last = _GLIBCXX_MOVE(__val);
 8005b3c:	ed81 7a00 	vstr	s14, [r1]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8005b40:	d1e6      	bne.n	8005b10 <_Z8MainTaskPv+0xab0>
            if (line_positions.size() == 1) { return line_positions[0]; }
 8005b42:	9b00      	ldr	r3, [sp, #0]
 8005b44:	2b04      	cmp	r3, #4
 8005b46:	f000 80bc 	beq.w	8005cc2 <_Z8MainTaskPv+0xc62>
            else if (line_positions.size() == 2)
 8005b4a:	9b00      	ldr	r3, [sp, #0]
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	f000 8304 	beq.w	800615a <_Z8MainTaskPv+0x10fa>
            else if (line_positions.size() == 3)
 8005b52:	9b00      	ldr	r3, [sp, #0]
 8005b54:	2b0c      	cmp	r3, #12
 8005b56:	f000 82ce 	beq.w	80060f6 <_Z8MainTaskPv+0x1096>
            else if (line_positions.size() == 4)
 8005b5a:	9b00      	ldr	r3, [sp, #0]
 8005b5c:	2b10      	cmp	r3, #16
 8005b5e:	d10a      	bne.n	8005b76 <_Z8MainTaskPv+0xb16>
                switch (direction)
 8005b60:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	f000 833c 	beq.w	80061e2 <_Z8MainTaskPv+0x1182>
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	f000 8320 	beq.w	80061b0 <_Z8MainTaskPv+0x1150>
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 80a6 	beq.w	8005cc2 <_Z8MainTaskPv+0xc62>
            line_position_front      = select_control_point(line_positions_front, prev_line_position_front);
 8005b76:	2300      	movs	r3, #0
 8005b78:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      _M_deallocate(pointer __p, size_t __n)
 8005b7c:	e0a5      	b.n	8005cca <_Z8MainTaskPv+0xc6a>
		if((flood_arrived == true) && (flood_counter > 0))
 8005b7e:	4a86      	ldr	r2, [pc, #536]	; (8005d98 <_Z8MainTaskPv+0xd38>)
			flood_counter--;
 8005b80:	7813      	ldrb	r3, [r2, #0]
 8005b82:	3b01      	subs	r3, #1
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	7013      	strb	r3, [r2, #0]
		if(flood_counter == 0)
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f47f aea0 	bne.w	80058ce <_Z8MainTaskPv+0x86e>
			flood_active = false;
 8005b8e:	4a83      	ldr	r2, [pc, #524]	; (8005d9c <_Z8MainTaskPv+0xd3c>)
 8005b90:	7013      	strb	r3, [r2, #0]
 8005b92:	e69c      	b.n	80058ce <_Z8MainTaskPv+0x86e>
	::operator delete(__p
 8005b94:	4641      	mov	r1, r8
 8005b96:	4630      	mov	r0, r6
 8005b98:	f012 f830 	bl	8017bfc <_ZdlPvj>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8005b9c:	e9db 1335 	ldrd	r1, r3, [fp, #212]	; 0xd4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005ba0:	1a5d      	subs	r5, r3, r1
 8005ba2:	f47f ac42 	bne.w	800542a <_Z8MainTaskPv+0x3ca>
	  if (_Num)
 8005ba6:	428b      	cmp	r3, r1
 8005ba8:	d04e      	beq.n	8005c48 <_Z8MainTaskPv+0xbe8>
 8005baa:	46a8      	mov	r8, r5
 8005bac:	462e      	mov	r6, r5
 8005bae:	e44b      	b.n	8005448 <_Z8MainTaskPv+0x3e8>
 8005bb0:	428b      	cmp	r3, r1
 8005bb2:	d01e      	beq.n	8005bf2 <_Z8MainTaskPv+0xb92>
 8005bb4:	46a8      	mov	r8, r5
 8005bb6:	462e      	mov	r6, r5
 8005bb8:	f7ff bbd3 	b.w	8005362 <_Z8MainTaskPv+0x302>
 8005bbc:	4641      	mov	r1, r8
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	f012 f81c 	bl	8017bfc <_ZdlPvj>
 8005bc4:	e474      	b.n	80054b0 <_Z8MainTaskPv+0x450>
		SetSteeringAngle(target_angle * -180.0f / 3.14f);
 8005bc6:	ed94 aa2a 	vldr	s20, [r4, #168]	; 0xa8
 8005bca:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8005da0 <_Z8MainTaskPv+0xd40>
				if(target_speed <= FAST_SPEED_TURN || target_speed <= LABYRINTH_SPEED || target_speed <= LABYRINTH_SPEED_REVERSE)
 8005bce:	edd4 7a2b 	vldr	s15, [r4, #172]	; 0xac
 8005bd2:	ee2a aa07 	vmul.f32	s20, s20, s14
 8005bd6:	e5ff      	b.n	80057d8 <_Z8MainTaskPv+0x778>
 8005bd8:	ed9f 9a72 	vldr	s18, [pc, #456]	; 8005da4 <_Z8MainTaskPv+0xd44>
                w_t  = std::fabs(w_t) < 0.015 ? 0.0 : w_t;
 8005bdc:	eef0 aa49 	vmov.f32	s21, s18
 8005be0:	e4ac      	b.n	800553c <_Z8MainTaskPv+0x4dc>
 8005be2:	ed9f aa70 	vldr	s20, [pc, #448]	; 8005da4 <_Z8MainTaskPv+0xd44>
                vx_t = std::fabs(vx_t) < 0.03 ? 0.0 : vx_t;
 8005be6:	eef0 9a4a 	vmov.f32	s19, s20
 8005bea:	e493      	b.n	8005514 <_Z8MainTaskPv+0x4b4>
 8005bec:	4628      	mov	r0, r5
 8005bee:	f7ff bbc9 	b.w	8005384 <_Z8MainTaskPv+0x324>
            for (unsigned long i = 0; i < SENSOR_COUNT; i++) detection_front[i] = detection_front_[i];
 8005bf2:	4e6d      	ldr	r6, [pc, #436]	; (8005da8 <_Z8MainTaskPv+0xd48>)
 8005bf4:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 8005dc4 <_Z8MainTaskPv+0xd64>
            line_positions_front = line_positions_front_;
 8005bf8:	af06      	add	r7, sp, #24
            for (unsigned long i = 0; i < SENSOR_COUNT; i++) detection_front[i] = detection_front_[i];
 8005bfa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005bfe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005c00:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8005c04:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
            line_positions_front = line_positions_front_;
 8005c08:	f106 0030 	add.w	r0, r6, #48	; 0x30
 8005c0c:	4639      	mov	r1, r7
	this->_M_impl._M_finish =
 8005c0e:	e9cd 5507 	strd	r5, r5, [sp, #28]
            as_state.current_number_of_lines = static_cast<uint8_t>(line_positions_front_.size());
 8005c12:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3
	this->_M_impl._M_start = this->_M_allocate(__n);
 8005c16:	9506      	str	r5, [sp, #24]
 8005c18:	f7fd fc76 	bl	8003508 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005c1c:	9806      	ldr	r0, [sp, #24]
	if (__p)
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	f43f abfe 	beq.w	8005420 <_Z8MainTaskPv+0x3c0>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005c24:	462e      	mov	r6, r5
	if (__p)
 8005c26:	46a8      	mov	r8, r5
 8005c28:	f7ff bbf3 	b.w	8005412 <_Z8MainTaskPv+0x3b2>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8005c2c:	2d00      	cmp	r5, #0
 8005c2e:	da3a      	bge.n	8005ca6 <_Z8MainTaskPv+0xc46>
	      std::__throw_bad_array_new_length();
 8005c30:	f011 fffa 	bl	8017c28 <_ZSt28__throw_bad_array_new_lengthv>
			flood_arrived = false;
 8005c34:	2000      	movs	r0, #0
 8005c36:	7018      	strb	r0, [r3, #0]
 8005c38:	2328      	movs	r3, #40	; 0x28
			flood_active = true;
 8005c3a:	2101      	movs	r1, #1
 8005c3c:	7013      	strb	r3, [r2, #0]
 8005c3e:	4b57      	ldr	r3, [pc, #348]	; (8005d9c <_Z8MainTaskPv+0xd3c>)
 8005c40:	7019      	strb	r1, [r3, #0]
		if(flood_counter == 0)
 8005c42:	e644      	b.n	80058ce <_Z8MainTaskPv+0x86e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005c44:	4628      	mov	r0, r5
 8005c46:	e40d      	b.n	8005464 <_Z8MainTaskPv+0x404>
            for (unsigned long i = 0; i < SENSOR_COUNT; i++) detection_rear[i] = detection_rear_[i];
 8005c48:	4e58      	ldr	r6, [pc, #352]	; (8005dac <_Z8MainTaskPv+0xd4c>)
 8005c4a:	f8df c17c 	ldr.w	ip, [pc, #380]	; 8005dc8 <_Z8MainTaskPv+0xd68>
	this->_M_impl._M_finish =
 8005c4e:	e9cd 5507 	strd	r5, r5, [sp, #28]
 8005c52:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005c56:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005c58:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8005c5c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
            line_positions_rear = line_positions_rear_;
 8005c60:	f106 001c 	add.w	r0, r6, #28
 8005c64:	4639      	mov	r1, r7
	this->_M_impl._M_start = this->_M_allocate(__n);
 8005c66:	9506      	str	r5, [sp, #24]
 8005c68:	f7fd fc4e 	bl	8003508 <_ZNSt6vectorIfSaIfEEaSERKS1_.isra.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005c6c:	9806      	ldr	r0, [sp, #24]
	if (__p)
 8005c6e:	2800      	cmp	r0, #0
 8005c70:	f43f ac1e 	beq.w	80054b0 <_Z8MainTaskPv+0x450>
 8005c74:	46a8      	mov	r8, r5
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005c76:	462e      	mov	r6, r5
 8005c78:	e413      	b.n	80054a2 <_Z8MainTaskPv+0x442>
					if (target_angle < 0) { target_angle = -deg2rad(MAX_WHEEL_ANGLE); }
 8005c7a:	4b4d      	ldr	r3, [pc, #308]	; (8005db0 <_Z8MainTaskPv+0xd50>)
 8005c7c:	ed9f aa4d 	vldr	s20, [pc, #308]	; 8005db4 <_Z8MainTaskPv+0xd54>
 8005c80:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8005c84:	e5a8      	b.n	80057d8 <_Z8MainTaskPv+0x778>
	  _M_push_back_aux(__x);
 8005c86:	484c      	ldr	r0, [pc, #304]	; (8005db8 <_Z8MainTaskPv+0xd58>)
 8005c88:	a906      	add	r1, sp, #24
 8005c8a:	f7ff f953 	bl	8004f34 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_>
	  + (__x._M_cur - __x._M_first)
 8005c8e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005c90:	f7ff ba8b 	b.w	80051aa <_Z8MainTaskPv+0x14a>
	  _M_push_back_aux(__x);
 8005c94:	4849      	ldr	r0, [pc, #292]	; (8005dbc <_Z8MainTaskPv+0xd5c>)
 8005c96:	a906      	add	r1, sp, #24
 8005c98:	f7ff f94c 	bl	8004f34 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_>
	  + (__x._M_cur - __x._M_first)
 8005c9c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005c9e:	f7ff ba2f 	b.w	8005100 <_Z8MainTaskPv+0xa0>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8005ca2:	2800      	cmp	r0, #0
 8005ca4:	dbc4      	blt.n	8005c30 <_Z8MainTaskPv+0xbd0>
	    std::__throw_bad_alloc();
 8005ca6:	f011 ffbc 	bl	8017c22 <_ZSt17__throw_bad_allocv>
		SetSteeringAngle(target_angle * -180.0f / 3.14f);
 8005caa:	ed94 aa2a 	vldr	s20, [r4, #168]	; 0xa8
 8005cae:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8005da0 <_Z8MainTaskPv+0xd40>
 8005cb2:	ee2a aa07 	vmul.f32	s20, s20, s14
 8005cb6:	e58f      	b.n	80057d8 <_Z8MainTaskPv+0x778>
 8005cb8:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8005da0 <_Z8MainTaskPv+0xd40>
 8005cbc:	ee2a aa07 	vmul.f32	s20, s20, s14
 8005cc0:	e58a      	b.n	80057d8 <_Z8MainTaskPv+0x778>
                        return line_positions[0];
 8005cc2:	edd7 7a00 	vldr	s15, [r7]
            line_position_front      = select_control_point(line_positions_front, prev_line_position_front);
 8005cc6:	edc4 7a26 	vstr	s15, [r4, #152]	; 0x98
	::operator delete(__p
 8005cca:	4649      	mov	r1, r9
 8005ccc:	4638      	mov	r0, r7
 8005cce:	f011 ff95 	bl	8017bfc <_ZdlPvj>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8005cd2:	e9d4 1244 	ldrd	r1, r2, [r4, #272]	; 0x110
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005cd6:	1a50      	subs	r0, r2, r1
 8005cd8:	9001      	str	r0, [sp, #4]
 8005cda:	f000 818f 	beq.w	8005ffc <_Z8MainTaskPv+0xf9c>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8005cde:	4b38      	ldr	r3, [pc, #224]	; (8005dc0 <_Z8MainTaskPv+0xd60>)
 8005ce0:	4298      	cmp	r0, r3
 8005ce2:	d8de      	bhi.n	8005ca2 <_Z8MainTaskPv+0xc42>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005ce4:	9801      	ldr	r0, [sp, #4]
 8005ce6:	f011 ff8b 	bl	8017c00 <_Znwj>
      : _M_current(__i) { }
 8005cea:	e9d4 1344 	ldrd	r1, r3, [r4, #272]	; 0x110
	  const ptrdiff_t _Num = __last - __first;
 8005cee:	1a5a      	subs	r2, r3, r1
	  if (_Num)
 8005cf0:	4299      	cmp	r1, r3
 8005cf2:	4607      	mov	r7, r0
	  const ptrdiff_t _Num = __last - __first;
 8005cf4:	9200      	str	r2, [sp, #0]
	  if (_Num)
 8005cf6:	d003      	beq.n	8005d00 <_Z8MainTaskPv+0xca0>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8005cf8:	4638      	mov	r0, r7
 8005cfa:	9a00      	ldr	r2, [sp, #0]
 8005cfc:	f013 faf1 	bl	80192e2 <memmove>
	  return __result + _Num;
 8005d00:	9a00      	ldr	r2, [sp, #0]
            line_position_rear       = select_control_point(line_positions_rear, prev_line_position_rear);
 8005d02:	ed94 aa29 	vldr	s20, [r4, #164]	; 0xa4
 8005d06:	18bb      	adds	r3, r7, r2
      if (__first != __last)
 8005d08:	42bb      	cmp	r3, r7
 8005d0a:	f000 8085 	beq.w	8005e18 <_Z8MainTaskPv+0xdb8>
    { return __lhs.base() - __rhs.base(); }
 8005d0e:	1092      	asrs	r2, r2, #2
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 8005d10:	fab2 f282 	clz	r2, r2
 8005d14:	f1c2 021f 	rsb	r2, r2, #31
	  std::__introsort_loop(__first, __last,
 8005d18:	4619      	mov	r1, r3
 8005d1a:	0052      	lsls	r2, r2, #1
 8005d1c:	4638      	mov	r0, r7
 8005d1e:	9302      	str	r3, [sp, #8]
 8005d20:	f7fd fc54 	bl	80035cc <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.0>
      if (__last - __first > int(_S_threshold))
 8005d24:	9a00      	ldr	r2, [sp, #0]
 8005d26:	9b02      	ldr	r3, [sp, #8]
 8005d28:	2a40      	cmp	r2, #64	; 0x40
 8005d2a:	f300 81a8 	bgt.w	800607e <_Z8MainTaskPv+0x101e>
      { return __normal_iterator(_M_current + __n); }
 8005d2e:	f107 0804 	add.w	r8, r7, #4
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8005d32:	4543      	cmp	r3, r8
 8005d34:	d070      	beq.n	8005e18 <_Z8MainTaskPv+0xdb8>
 8005d36:	4699      	mov	r9, r3
 8005d38:	e00d      	b.n	8005d56 <_Z8MainTaskPv+0xcf6>
	  if (_Num)
 8005d3a:	45b8      	cmp	r8, r7
 8005d3c:	d005      	beq.n	8005d4a <_Z8MainTaskPv+0xcea>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8005d3e:	4639      	mov	r1, r7
 8005d40:	eba8 0207 	sub.w	r2, r8, r7
 8005d44:	1d38      	adds	r0, r7, #4
 8005d46:	f013 facc 	bl	80192e2 <memmove>
	      *__first = _GLIBCXX_MOVE(__val);
 8005d4a:	edc7 9a00 	vstr	s19, [r7]
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8005d4e:	f108 0804 	add.w	r8, r8, #4
 8005d52:	45c8      	cmp	r8, r9
 8005d54:	d060      	beq.n	8005e18 <_Z8MainTaskPv+0xdb8>
      { return *__it1 < *__it2; }
 8005d56:	edd8 9a00 	vldr	s19, [r8]
	  if (__comp(__i, __first))
 8005d5a:	edd7 7a00 	vldr	s15, [r7]
 8005d5e:	eef4 9ae7 	vcmpe.f32	s19, s15
 8005d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d66:	4643      	mov	r3, r8
 8005d68:	d4e7      	bmi.n	8005d3a <_Z8MainTaskPv+0xcda>
      { return __val < *__it; }
 8005d6a:	ed58 7a01 	vldr	s15, [r8, #-4]
      while (__comp(__val, __next))
 8005d6e:	eef4 7ae9 	vcmpe.f32	s15, s19
 8005d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d76:	f1a8 0204 	sub.w	r2, r8, #4
 8005d7a:	dd09      	ble.n	8005d90 <_Z8MainTaskPv+0xd30>
	  *__last = _GLIBCXX_MOVE(*__next);
 8005d7c:	edc2 7a01 	vstr	s15, [r2, #4]
      operator--() _GLIBCXX_NOEXCEPT
 8005d80:	4613      	mov	r3, r2
 8005d82:	ed72 7a01 	vldmdb	r2!, {s15}
      while (__comp(__val, __next))
 8005d86:	eef4 9ae7 	vcmpe.f32	s19, s15
 8005d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d8e:	d4f5      	bmi.n	8005d7c <_Z8MainTaskPv+0xd1c>
      *__last = _GLIBCXX_MOVE(__val);
 8005d90:	edc3 9a00 	vstr	s19, [r3]
 8005d94:	e7db      	b.n	8005d4e <_Z8MainTaskPv+0xcee>
 8005d96:	bf00      	nop
 8005d98:	2000008d 	.word	0x2000008d
 8005d9c:	20000320 	.word	0x20000320
 8005da0:	c2654ca2 	.word	0xc2654ca2
 8005da4:	00000000 	.word	0x00000000
 8005da8:	200003ec 	.word	0x200003ec
 8005dac:	2000040c 	.word	0x2000040c
 8005db0:	bec90fdb 	.word	0xbec90fdb
 8005db4:	41b4175f 	.word	0x41b4175f
 8005db8:	20000364 	.word	0x20000364
 8005dbc:	2000038c 	.word	0x2000038c
 8005dc0:	7ffffffc 	.word	0x7ffffffc
 8005dc4:	20000234 	.word	0x20000234
 8005dc8:	20000254 	.word	0x20000254
 8005dcc:	43200000 	.word	0x43200000
 8005dd0:	34000000 	.word	0x34000000
 8005dd4:	3fb0a3d6 	.word	0x3fb0a3d6
 8005dd8:	40555555 	.word	0x40555555
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8005ddc:	9b02      	ldr	r3, [sp, #8]
 8005dde:	454b      	cmp	r3, r9
 8005de0:	d01a      	beq.n	8005e18 <_Z8MainTaskPv+0xdb8>
 8005de2:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8005de6:	4649      	mov	r1, r9
	--_M_current;
 8005de8:	4602      	mov	r2, r0
	__val = _GLIBCXX_MOVE(*__last);
 8005dea:	ecb9 7a01 	vldmia	r9!, {s14}
 8005dee:	ecf0 7a01 	vldmia	r0!, {s15}
      while (__comp(__val, __next))
 8005df2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dfa:	dd09      	ble.n	8005e10 <_Z8MainTaskPv+0xdb0>
	  *__last = _GLIBCXX_MOVE(*__next);
 8005dfc:	edc2 7a01 	vstr	s15, [r2, #4]
      operator--() _GLIBCXX_NOEXCEPT
 8005e00:	4611      	mov	r1, r2
 8005e02:	ed72 7a01 	vldmdb	r2!, {s15}
      while (__comp(__val, __next))
 8005e06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e0e:	d4f5      	bmi.n	8005dfc <_Z8MainTaskPv+0xd9c>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8005e10:	4599      	cmp	r9, r3
      *__last = _GLIBCXX_MOVE(__val);
 8005e12:	ed81 7a00 	vstr	s14, [r1]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8005e16:	d1e6      	bne.n	8005de6 <_Z8MainTaskPv+0xd86>
            if (line_positions.size() == 1) { return line_positions[0]; }
 8005e18:	9b00      	ldr	r3, [sp, #0]
 8005e1a:	2b04      	cmp	r3, #4
 8005e1c:	d016      	beq.n	8005e4c <_Z8MainTaskPv+0xdec>
            else if (line_positions.size() == 2)
 8005e1e:	9b00      	ldr	r3, [sp, #0]
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	f000 817c 	beq.w	800611e <_Z8MainTaskPv+0x10be>
            else if (line_positions.size() == 3)
 8005e26:	9b00      	ldr	r3, [sp, #0]
 8005e28:	2b0c      	cmp	r3, #12
 8005e2a:	f000 816e 	beq.w	800610a <_Z8MainTaskPv+0x10aa>
            else if (line_positions.size() == 4)
 8005e2e:	9b00      	ldr	r3, [sp, #0]
 8005e30:	2b10      	cmp	r3, #16
 8005e32:	f040 8159 	bne.w	80060e8 <_Z8MainTaskPv+0x1088>
                switch (direction)
 8005e36:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	f000 81ce 	beq.w	80061dc <_Z8MainTaskPv+0x117c>
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	f000 81ac 	beq.w	800619e <_Z8MainTaskPv+0x113e>
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f040 814e 	bne.w	80060e8 <_Z8MainTaskPv+0x1088>
                        return line_positions[0];
 8005e4c:	edd7 7a00 	vldr	s15, [r7]
            line_position_rear       = select_control_point(line_positions_rear, prev_line_position_rear);
 8005e50:	edc4 7a27 	vstr	s15, [r4, #156]	; 0x9c
	::operator delete(__p
 8005e54:	4638      	mov	r0, r7
 8005e56:	9901      	ldr	r1, [sp, #4]
 8005e58:	f011 fed0 	bl	8017bfc <_ZdlPvj>
            selected_front      = static_cast<unsigned long>(line_position_front / sensor_rate + sensor_center);
 8005e5c:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 8005e60:	ed1f 6a26 	vldr	s12, [pc, #-152]	; 8005dcc <_Z8MainTaskPv+0xd6c>
            prev_line_position_rear  = line_position_rear;
 8005e64:	edd4 6a27 	vldr	s13, [r4, #156]	; 0x9c
            prev_line_position_front = line_position_front;
 8005e68:	edd4 aa26 	vldr	s21, [r4, #152]	; 0x98
            selected_front      = static_cast<unsigned long>(line_position_front / sensor_rate + sensor_center);
 8005e6c:	eeb0 7a67 	vmov.f32	s14, s15
            selected_rear       = static_cast<unsigned long>(line_position_rear / sensor_rate + sensor_center);
 8005e70:	eee6 7a86 	vfma.f32	s15, s13, s12
            selected_front      = static_cast<unsigned long>(line_position_front / sensor_rate + sensor_center);
 8005e74:	eeaa 7a86 	vfma.f32	s14, s21, s12
            selected_rear       = static_cast<unsigned long>(line_position_rear / sensor_rate + sensor_center);
 8005e78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
            selected_front      = static_cast<unsigned long>(line_position_front / sensor_rate + sensor_center);
 8005e7c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
  { return __builtin_atan2f(__y, __x); }
 8005e80:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8005e84:	ee3a 0ae6 	vsub.f32	s0, s21, s13
            prev_line_position_rear  = line_position_rear;
 8005e88:	edc4 6a29 	vstr	s13, [r4, #164]	; 0xa4
            selected_front      = static_cast<unsigned long>(line_position_front / sensor_rate + sensor_center);
 8005e8c:	ed84 7a24 	vstr	s14, [r4, #144]	; 0x90
            selected_rear       = static_cast<unsigned long>(line_position_rear / sensor_rate + sensor_center);
 8005e90:	edc4 7a25 	vstr	s15, [r4, #148]	; 0x94
            prev_line_position_front = line_position_front;
 8005e94:	edc4 aa28 	vstr	s21, [r4, #160]	; 0xa0
            cross_track_error = line_position_front;
 8005e98:	edc4 aa2c 	vstr	s21, [r4, #176]	; 0xb0
        	current_velocity += std::numeric_limits<float>::epsilon();
 8005e9c:	ed5f 9a34 	vldr	s19, [pc, #-208]	; 8005dd0 <_Z8MainTaskPv+0xd70>
 8005ea0:	f011 fefe 	bl	8017ca0 <atan2f>
 8005ea4:	edd4 7a4c 	vldr	s15, [r4, #304]	; 0x130
        	float               d5  = OFFSET_EXP1 + std::log2(current_velocity + OFFSET_EXP2);
 8005ea8:	ed1f 7a36 	vldr	s14, [pc, #-216]	; 8005dd4 <_Z8MainTaskPv+0xd74>
        	current_velocity += std::numeric_limits<float>::epsilon();
 8005eac:	ee77 9aa9 	vadd.f32	s19, s15, s19
 8005eb0:	eeb0 ba40 	vmov.f32	s22, s0

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  // DR 568.
  constexpr float
  log2(float __x)
  { return __builtin_log2f(__x); }
 8005eb4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8005eb8:	edc4 9a4c 	vstr	s19, [r4, #304]	; 0x130
            heading_error     = std::atan2(line_position_front - line_position_rear, SENSOR_BASE);
 8005ebc:	ed84 ba2d 	vstr	s22, [r4, #180]	; 0xb4
 8005ec0:	f011 ff7a 	bl	8017db8 <log2f>
            if (d5 < D5_MIN) d5 = D5_MIN;
 8005ec4:	eef8 7a08 	vmov.f32	s15, #136	; 0xc0400000 -3.0
 8005ec8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        	float               d5  = OFFSET_EXP1 + std::log2(current_velocity + OFFSET_EXP2);
 8005ed0:	bf56      	itet	pl
 8005ed2:	eef1 7a02 	vmovpl.f32	s15, #18	; 0x40900000  4.5
            if (d5 < D5_MIN) d5 = D5_MIN;
 8005ed6:	eef7 7a08 	vmovmi.f32	s15, #120	; 0x3fc00000  1.5
        	float               d5  = OFFSET_EXP1 + std::log2(current_velocity + OFFSET_EXP2);
 8005eda:	ee70 7a27 	vaddpl.f32	s15, s0, s15
            float               wp  = (1.0f / T) * sqrt(1.0f - DAMPING * DAMPING);
 8005ede:	ed5f 6a42 	vldr	s13, [pc, #-264]	; 8005dd8 <_Z8MainTaskPv+0xd78>
 8005ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ee6:	ee67 7a29 	vmul.f32	s15, s14, s19
 8005eea:	ee17 0a90 	vmov	r0, s15
 8005eee:	f7fa fb13 	bl	8000518 <__aeabi_f2d>
 8005ef2:	a3c6      	add	r3, pc, #792	; (adr r3, 800620c <_Z8MainTaskPv+0x11ac>)
 8005ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef8:	f7fa fb66 	bl	80005c8 <__aeabi_dmul>
 8005efc:	f7fa fe34 	bl	8000b68 <__aeabi_d2f>
 8005f00:	ee0a 0a10 	vmov	s20, r0
            float               x   = wp / tan(phi);
 8005f04:	f7fa fb08 	bl	8000518 <__aeabi_f2d>
 8005f08:	a3c2      	add	r3, pc, #776	; (adr r3, 8006214 <_Z8MainTaskPv+0x11b4>)
 8005f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0e:	f7fa fb5b 	bl	80005c8 <__aeabi_dmul>
 8005f12:	f7fa fe29 	bl	8000b68 <__aeabi_d2f>
 8005f16:	ee2a aa0a 	vmul.f32	s20, s20, s20
            std::complex<float> kP     = -SENSOR_BASE / (current_velocity * current_velocity) * s1 * s2;
 8005f1a:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8005f1e:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
            float               x   = wp / tan(phi);
 8005f22:	ee07 0a10 	vmov	s14, r0
            std::complex<float> kP     = -SENSOR_BASE / (current_velocity * current_velocity) * s1 * s2;
 8005f26:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8005f2a:	eea7 aa07 	vfma.f32	s20, s14, s14
      template<class _Tp>
        _GLIBCXX20_CONSTEXPR complex&
        operator*=(const complex<_Tp>& __z)
	{
	  const _ComplexT __t = __z.__rep();
	  _M_value *= __t;
 8005f2e:	ee66 6a8a 	vmul.f32	s13, s13, s20
            std::complex<float> kDelta = -SENSOR_BASE / current_velocity * ((s1 + s2) - current_velocity * kP);
 8005f32:	eec6 7a29 	vdiv.f32	s15, s12, s19
	  _M_value -= __z.__rep();
 8005f36:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8005f3a:	ee66 9ae9 	vnmul.f32	s19, s13, s19
            target_angle      = -kP * cross_track_error - kDelta * heading_error;
 8005f3e:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8005f42:	eee7 9a05 	vfma.f32	s19, s14, s10
 8005f46:	ee67 7aa9 	vmul.f32	s15, s15, s19
            if (target_angle > deg2rad(MAX_WHEEL_ANGLE)) target_angle = deg2rad(MAX_WHEEL_ANGLE);
 8005f4a:	eddf 5aad 	vldr	s11, [pc, #692]	; 8006200 <_Z8MainTaskPv+0x11a0>
 8005f4e:	eeea 7aa6 	vfma.f32	s15, s21, s13
 8005f52:	eef4 7ae5 	vcmpe.f32	s15, s11
 8005f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            target_angle      = -kP * cross_track_error - kDelta * heading_error;
 8005f5a:	eeb1 aa67 	vneg.f32	s20, s15
            if (target_angle > deg2rad(MAX_WHEEL_ANGLE)) target_angle = deg2rad(MAX_WHEEL_ANGLE);
 8005f5e:	d453      	bmi.n	8006008 <_Z8MainTaskPv+0xfa8>
            if (target_angle < -deg2rad(MAX_WHEEL_ANGLE)) target_angle = -deg2rad(MAX_WHEEL_ANGLE);
 8005f60:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8006204 <_Z8MainTaskPv+0x11a4>
 8005f64:	eef4 7a47 	vcmp.f32	s15, s14
 8005f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f6c:	fe35 aa8a 	vselgt.f32	s20, s11, s20
 8005f70:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8006208 <_Z8MainTaskPv+0x11a8>
 8005f74:	ed84 aa2a 	vstr	s20, [r4, #168]	; 0xa8
            if (reference_speed > target_speed + MAX_ACCELERATION * dt) { target_speed += MAX_ACCELERATION * dt; }
 8005f78:	edd4 7a2b 	vldr	s15, [r4, #172]	; 0xac
 8005f7c:	ee2a aa07 	vmul.f32	s20, s20, s14
 8005f80:	e42a      	b.n	80057d8 <_Z8MainTaskPv+0x778>
 8005f82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f86:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005f88:	f011 fe38 	bl	8017bfc <_ZdlPvj>
 8005f8c:	e9d4 2315 	ldrd	r2, r3, [r4, #84]	; 0x54
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 8005f90:	6e20      	ldr	r0, [r4, #96]	; 0x60
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8005f92:	6d27      	ldr	r7, [r4, #80]	; 0x50
 8005f94:	1e05      	subs	r5, r0, #0
 8005f96:	bf18      	it	ne
 8005f98:	2501      	movne	r5, #1
 8005f9a:	1d39      	adds	r1, r7, #4
	  + (__x._M_cur - __x._M_first)
 8005f9c:	1ad6      	subs	r6, r2, r3
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 8005f9e:	1a40      	subs	r0, r0, r1
	_M_first = *__new_node;
 8005fa0:	687b      	ldr	r3, [r7, #4]
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 8005fa2:	ebc5 00a0 	rsb	r0, r5, r0, asr #2
	  + (__x._M_cur - __x._M_first)
 8005fa6:	10b6      	asrs	r6, r6, #2
 8005fa8:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
	_M_last = _M_first + difference_type(_S_buffer_size());
 8005fac:	f503 7000 	add.w	r0, r3, #512	; 0x200
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8005fb0:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
	_M_node = __new_node;
 8005fb4:	6521      	str	r1, [r4, #80]	; 0x50
	  + (__y._M_last - __y._M_cur);
 8005fb6:	3680      	adds	r6, #128	; 0x80
	_M_last = _M_first + difference_type(_S_buffer_size());
 8005fb8:	64e0      	str	r0, [r4, #76]	; 0x4c
    }
 8005fba:	f7ff b913 	b.w	80051e4 <_Z8MainTaskPv+0x184>
 8005fbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005fc2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005fc4:	f011 fe1a 	bl	8017bfc <_ZdlPvj>
	  + (__x._M_cur - __x._M_first)
 8005fc8:	e9d4 231f 	ldrd	r2, r3, [r4, #124]	; 0x7c
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 8005fcc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8005fd0:	6fa7      	ldr	r7, [r4, #120]	; 0x78
 8005fd2:	1e05      	subs	r5, r0, #0
 8005fd4:	bf18      	it	ne
 8005fd6:	2501      	movne	r5, #1
 8005fd8:	1d39      	adds	r1, r7, #4
	  + (__x._M_cur - __x._M_first)
 8005fda:	1ad6      	subs	r6, r2, r3
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 8005fdc:	1a40      	subs	r0, r0, r1
	_M_first = *__new_node;
 8005fde:	687b      	ldr	r3, [r7, #4]
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 8005fe0:	ebc5 00a0 	rsb	r0, r5, r0, asr #2
	  + (__x._M_cur - __x._M_first)
 8005fe4:	10b6      	asrs	r6, r6, #2
 8005fe6:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
	_M_last = _M_first + difference_type(_S_buffer_size());
 8005fea:	f503 7000 	add.w	r0, r3, #512	; 0x200
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8005fee:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
	_M_node = __new_node;
 8005ff2:	67a1      	str	r1, [r4, #120]	; 0x78
	  + (__y._M_last - __y._M_cur);
 8005ff4:	3680      	adds	r6, #128	; 0x80
	_M_last = _M_first + difference_type(_S_buffer_size());
 8005ff6:	6760      	str	r0, [r4, #116]	; 0x74
    }
 8005ff8:	f7ff b8a1 	b.w	800513e <_Z8MainTaskPv+0xde>
	  const ptrdiff_t _Num = __last - __first;
 8005ffc:	9b01      	ldr	r3, [sp, #4]
	  if (_Num)
 8005ffe:	428a      	cmp	r2, r1
	  const ptrdiff_t _Num = __last - __first;
 8006000:	9300      	str	r3, [sp, #0]
	  if (_Num)
 8006002:	d070      	beq.n	80060e6 <_Z8MainTaskPv+0x1086>
 8006004:	9f01      	ldr	r7, [sp, #4]
 8006006:	e677      	b.n	8005cf8 <_Z8MainTaskPv+0xc98>
            if (target_angle > deg2rad(MAX_WHEEL_ANGLE)) target_angle = deg2rad(MAX_WHEEL_ANGLE);
 8006008:	ed9f aa7e 	vldr	s20, [pc, #504]	; 8006204 <_Z8MainTaskPv+0x11a4>
 800600c:	e7b0      	b.n	8005f70 <_Z8MainTaskPv+0xf10>
      { return __normal_iterator(_M_current + __n); }
 800600e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006012:	e9cd 9302 	strd	r9, r3, [sp, #8]
 8006016:	9201      	str	r2, [sp, #4]
 8006018:	4691      	mov	r9, r2
 800601a:	f107 0804 	add.w	r8, r7, #4
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800601e:	e00e      	b.n	800603e <_Z8MainTaskPv+0xfde>
	  if (_Num)
 8006020:	4547      	cmp	r7, r8
 8006022:	d005      	beq.n	8006030 <_Z8MainTaskPv+0xfd0>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8006024:	4639      	mov	r1, r7
 8006026:	eba8 0207 	sub.w	r2, r8, r7
 800602a:	1d38      	adds	r0, r7, #4
 800602c:	f013 f959 	bl	80192e2 <memmove>
	      *__first = _GLIBCXX_MOVE(__val);
 8006030:	edc7 9a00 	vstr	s19, [r7]
	++_M_current;
 8006034:	f108 0804 	add.w	r8, r8, #4
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8006038:	45c1      	cmp	r9, r8
 800603a:	f43f ad61 	beq.w	8005b00 <_Z8MainTaskPv+0xaa0>
      { return *__it1 < *__it2; }
 800603e:	edd8 9a00 	vldr	s19, [r8]
	  if (__comp(__i, __first))
 8006042:	edd7 7a00 	vldr	s15, [r7]
 8006046:	eef4 9ae7 	vcmpe.f32	s19, s15
 800604a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800604e:	d4e7      	bmi.n	8006020 <_Z8MainTaskPv+0xfc0>
      { return __val < *__it; }
 8006050:	ed58 7a01 	vldr	s15, [r8, #-4]
      while (__comp(__val, __next))
 8006054:	eef4 7ae9 	vcmpe.f32	s15, s19
 8006058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800605c:	f1a8 0204 	sub.w	r2, r8, #4
 8006060:	f340 80b1 	ble.w	80061c6 <_Z8MainTaskPv+0x1166>
	  *__last = _GLIBCXX_MOVE(*__next);
 8006064:	edc2 7a01 	vstr	s15, [r2, #4]
      operator--() _GLIBCXX_NOEXCEPT
 8006068:	4610      	mov	r0, r2
 800606a:	ed72 7a01 	vldmdb	r2!, {s15}
      while (__comp(__val, __next))
 800606e:	eef4 9ae7 	vcmpe.f32	s19, s15
 8006072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006076:	d4f5      	bmi.n	8006064 <_Z8MainTaskPv+0x1004>
      *__last = _GLIBCXX_MOVE(__val);
 8006078:	edc0 9a00 	vstr	s19, [r0]
 800607c:	e7da      	b.n	8006034 <_Z8MainTaskPv+0xfd4>
      { return __normal_iterator(_M_current + __n); }
 800607e:	f107 0940 	add.w	r9, r7, #64	; 0x40
 8006082:	f107 0804 	add.w	r8, r7, #4
 8006086:	e00e      	b.n	80060a6 <_Z8MainTaskPv+0x1046>
	  if (_Num)
 8006088:	45b8      	cmp	r8, r7
 800608a:	d005      	beq.n	8006098 <_Z8MainTaskPv+0x1038>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800608c:	4639      	mov	r1, r7
 800608e:	eba8 0207 	sub.w	r2, r8, r7
 8006092:	1d38      	adds	r0, r7, #4
 8006094:	f013 f925 	bl	80192e2 <memmove>
	      *__first = _GLIBCXX_MOVE(__val);
 8006098:	edc7 9a00 	vstr	s19, [r7]
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800609c:	f108 0804 	add.w	r8, r8, #4
 80060a0:	45c1      	cmp	r9, r8
 80060a2:	f43f ae9b 	beq.w	8005ddc <_Z8MainTaskPv+0xd7c>
      { return *__it1 < *__it2; }
 80060a6:	edd8 9a00 	vldr	s19, [r8]
	  if (__comp(__i, __first))
 80060aa:	edd7 7a00 	vldr	s15, [r7]
 80060ae:	eef4 9ae7 	vcmpe.f32	s19, s15
 80060b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060b6:	4642      	mov	r2, r8
 80060b8:	d4e6      	bmi.n	8006088 <_Z8MainTaskPv+0x1028>
      { return __val < *__it; }
 80060ba:	ed58 7a01 	vldr	s15, [r8, #-4]
      while (__comp(__val, __next))
 80060be:	eef4 7ae9 	vcmpe.f32	s15, s19
 80060c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060c6:	f1a8 0304 	sub.w	r3, r8, #4
 80060ca:	dd09      	ble.n	80060e0 <_Z8MainTaskPv+0x1080>
	  *__last = _GLIBCXX_MOVE(*__next);
 80060cc:	edc3 7a01 	vstr	s15, [r3, #4]
      operator--() _GLIBCXX_NOEXCEPT
 80060d0:	461a      	mov	r2, r3
 80060d2:	ed73 7a01 	vldmdb	r3!, {s15}
      while (__comp(__val, __next))
 80060d6:	eef4 9ae7 	vcmpe.f32	s19, s15
 80060da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060de:	d4f5      	bmi.n	80060cc <_Z8MainTaskPv+0x106c>
      *__last = _GLIBCXX_MOVE(__val);
 80060e0:	edc2 9a00 	vstr	s19, [r2]
 80060e4:	e7da      	b.n	800609c <_Z8MainTaskPv+0x103c>
 80060e6:	9f01      	ldr	r7, [sp, #4]
            line_position_rear       = select_control_point(line_positions_rear, prev_line_position_rear);
 80060e8:	2300      	movs	r3, #0
 80060ea:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	if (__p)
 80060ee:	2f00      	cmp	r7, #0
 80060f0:	f43f aeb4 	beq.w	8005e5c <_Z8MainTaskPv+0xdfc>
 80060f4:	e6ae      	b.n	8005e54 <_Z8MainTaskPv+0xdf4>
                switch (direction)
 80060f6:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d06b      	beq.n	80061d6 <_Z8MainTaskPv+0x1176>
 80060fe:	2b02      	cmp	r3, #2
 8006100:	f47f ad36 	bne.w	8005b70 <_Z8MainTaskPv+0xb10>
                        return line_positions[1];
 8006104:	edd7 7a01 	vldr	s15, [r7, #4]
 8006108:	e5dd      	b.n	8005cc6 <_Z8MainTaskPv+0xc66>
                switch (direction)
 800610a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 800610e:	2b01      	cmp	r3, #1
 8006110:	d06a      	beq.n	80061e8 <_Z8MainTaskPv+0x1188>
 8006112:	2b02      	cmp	r3, #2
 8006114:	f47f ae97 	bne.w	8005e46 <_Z8MainTaskPv+0xde6>
                        return line_positions[1];
 8006118:	edd7 7a01 	vldr	s15, [r7, #4]
 800611c:	e698      	b.n	8005e50 <_Z8MainTaskPv+0xdf0>
                switch (direction)
 800611e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8006122:	2b01      	cmp	r3, #1
 8006124:	d0f8      	beq.n	8006118 <_Z8MainTaskPv+0x10b8>
 8006126:	2b02      	cmp	r3, #2
 8006128:	f47f ae8d 	bne.w	8005e46 <_Z8MainTaskPv+0xde6>
                            return std::fabs(line_positions[0] - prev_line_position) < std::fabs(line_positions[1] - prev_line_position) ? line_positions[0] : line_positions[1];
 800612c:	edd7 7a00 	vldr	s15, [r7]
 8006130:	ed97 6a01 	vldr	s12, [r7, #4]
 8006134:	ee77 6aca 	vsub.f32	s13, s15, s20
 8006138:	ee36 7a4a 	vsub.f32	s14, s12, s20
  { return __builtin_fabsf(__x); }
 800613c:	eef0 6ae6 	vabs.f32	s13, s13
 8006140:	eeb0 7ac7 	vabs.f32	s14, s14
                        if (direction == prev_direction)
 8006144:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
                            return std::fabs(line_positions[0] - prev_line_position) < std::fabs(line_positions[1] - prev_line_position) ? line_positions[0] : line_positions[1];
 8006148:	eef4 6ac7 	vcmpe.f32	s13, s14
                        if (direction == prev_direction)
 800614c:	2b02      	cmp	r3, #2
 800614e:	d04e      	beq.n	80061ee <_Z8MainTaskPv+0x118e>
                        else { return std::fabs(line_positions[0] - prev_line_position) > std::fabs(line_positions[1] - prev_line_position) ? line_positions[0] : line_positions[1]; }
 8006150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006154:	fe77 7a86 	vselgt.f32	s15, s15, s12
 8006158:	e67a      	b.n	8005e50 <_Z8MainTaskPv+0xdf0>
                switch (direction)
 800615a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 800615e:	2b01      	cmp	r3, #1
 8006160:	d0d0      	beq.n	8006104 <_Z8MainTaskPv+0x10a4>
 8006162:	2b02      	cmp	r3, #2
 8006164:	f47f ad04 	bne.w	8005b70 <_Z8MainTaskPv+0xb10>
                            return std::fabs(line_positions[0] - prev_line_position) < std::fabs(line_positions[1] - prev_line_position) ? line_positions[0] : line_positions[1];
 8006168:	edd7 7a00 	vldr	s15, [r7]
 800616c:	ed97 6a01 	vldr	s12, [r7, #4]
 8006170:	ee77 6aca 	vsub.f32	s13, s15, s20
 8006174:	ee36 7a4a 	vsub.f32	s14, s12, s20
 8006178:	eef0 6ae6 	vabs.f32	s13, s13
 800617c:	eeb0 7ac7 	vabs.f32	s14, s14
                        if (direction == prev_direction)
 8006180:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
                            return std::fabs(line_positions[0] - prev_line_position) < std::fabs(line_positions[1] - prev_line_position) ? line_positions[0] : line_positions[1];
 8006184:	eef4 6ac7 	vcmpe.f32	s13, s14
                        if (direction == prev_direction)
 8006188:	2b02      	cmp	r3, #2
 800618a:	d01e      	beq.n	80061ca <_Z8MainTaskPv+0x116a>
                        else { return std::fabs(line_positions[0] - prev_line_position) > std::fabs(line_positions[1] - prev_line_position) ? line_positions[0] : line_positions[1]; }
 800618c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006190:	fe77 7a86 	vselgt.f32	s15, s15, s12
 8006194:	e597      	b.n	8005cc6 <_Z8MainTaskPv+0xc66>
 8006196:	464f      	mov	r7, r9
 8006198:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800619c:	e4d1      	b.n	8005b42 <_Z8MainTaskPv+0xae2>
                        return line_positions[1] + line_positions[2] / 2.0f;
 800619e:	edd7 6a02 	vldr	s13, [r7, #8]
 80061a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80061a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80061aa:	eee6 7a87 	vfma.f32	s15, s13, s14
 80061ae:	e64f      	b.n	8005e50 <_Z8MainTaskPv+0xdf0>
 80061b0:	edd7 6a02 	vldr	s13, [r7, #8]
 80061b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80061b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80061bc:	eee6 7a87 	vfma.f32	s15, s13, s14
 80061c0:	e581      	b.n	8005cc6 <_Z8MainTaskPv+0xc66>
      while (__comp(__val, __next))
 80061c2:	4643      	mov	r3, r8
 80061c4:	e499      	b.n	8005afa <_Z8MainTaskPv+0xa9a>
 80061c6:	4640      	mov	r0, r8
 80061c8:	e756      	b.n	8006078 <_Z8MainTaskPv+0x1018>
                            return std::fabs(line_positions[0] - prev_line_position) < std::fabs(line_positions[1] - prev_line_position) ? line_positions[0] : line_positions[1];
 80061ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ce:	bf58      	it	pl
 80061d0:	eef0 7a46 	vmovpl.f32	s15, s12
 80061d4:	e577      	b.n	8005cc6 <_Z8MainTaskPv+0xc66>
                        return line_positions[2];
 80061d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80061da:	e574      	b.n	8005cc6 <_Z8MainTaskPv+0xc66>
                        return line_positions[3];
 80061dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80061e0:	e636      	b.n	8005e50 <_Z8MainTaskPv+0xdf0>
 80061e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80061e6:	e56e      	b.n	8005cc6 <_Z8MainTaskPv+0xc66>
                        return line_positions[2];
 80061e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80061ec:	e630      	b.n	8005e50 <_Z8MainTaskPv+0xdf0>
                            return std::fabs(line_positions[0] - prev_line_position) < std::fabs(line_positions[1] - prev_line_position) ? line_positions[0] : line_positions[1];
 80061ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f2:	bf58      	it	pl
 80061f4:	eef0 7a46 	vmovpl.f32	s15, s12
 80061f8:	e62a      	b.n	8005e50 <_Z8MainTaskPv+0xdf0>
 80061fa:	bf00      	nop
 80061fc:	f3af 8000 	nop.w
 8006200:	bec90fdb 	.word	0xbec90fdb
 8006204:	3ec90fdb 	.word	0x3ec90fdb
 8006208:	c2654ca2 	.word	0xc2654ca2
 800620c:	00b412ca 	.word	0x00b412ca
 8006210:	3fdbe59f 	.word	0x3fdbe59f
 8006214:	1f3f32d3 	.word	0x1f3f32d3
 8006218:	40008497 	.word	0x40008497

0800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800621c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006220:	e9d0 9a00 	ldrd	r9, sl, [r0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8006224:	4b52      	ldr	r3, [pc, #328]	; (8006370 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x154>)
 8006226:	ebaa 0509 	sub.w	r5, sl, r9
 800622a:	10ed      	asrs	r5, r5, #3
 800622c:	fb03 f505 	mul.w	r5, r3, r5
	if (max_size() - size() < __n)
 8006230:	4c50      	ldr	r4, [pc, #320]	; (8006374 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x158>)
 8006232:	b083      	sub	sp, #12
 8006234:	42a5      	cmp	r5, r4
 8006236:	f000 8097 	beq.w	8006368 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x14c>
 800623a:	2d01      	cmp	r5, #1
 800623c:	462b      	mov	r3, r5
 800623e:	bf38      	it	cc
 8006240:	2301      	movcc	r3, #1
 8006242:	18ed      	adds	r5, r5, r3
 8006244:	4607      	mov	r7, r0
 8006246:	460e      	mov	r6, r1
 8006248:	4693      	mov	fp, r2
 800624a:	f080 8089 	bcs.w	8006360 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x144>
    { return __lhs.base() - __rhs.base(); }
 800624e:	eba1 0209 	sub.w	r2, r1, r9
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006252:	2d00      	cmp	r5, #0
 8006254:	d173      	bne.n	800633e <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x122>
 8006256:	2418      	movs	r4, #24
 8006258:	46a8      	mov	r8, r5
 800625a:	9500      	str	r5, [sp, #0]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800625c:	2300      	movs	r3, #0
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800625e:	e9db 5003 	ldrd	r5, r0, [fp, #12]
    struct Edge
 8006262:	eddb 7a05 	vldr	s15, [fp, #20]
 8006266:	f89b e000 	ldrb.w	lr, [fp]
 800626a:	f8db 1008 	ldr.w	r1, [fp, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800626e:	e9cb 3303 	strd	r3, r3, [fp, #12]
 8006272:	f8cb 3008 	str.w	r3, [fp, #8]
 8006276:	f8db 3004 	ldr.w	r3, [fp, #4]
 800627a:	f808 e002 	strb.w	lr, [r8, r2]
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
 800627e:	454e      	cmp	r6, r9
	  _Alloc_traits::construct(this->_M_impl,
 8006280:	4442      	add	r2, r8
 8006282:	edc2 7a05 	vstr	s15, [r2, #20]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8006286:	e9c2 1502 	strd	r1, r5, [r2, #8]
 800628a:	6110      	str	r0, [r2, #16]
 800628c:	6053      	str	r3, [r2, #4]
 800628e:	d022      	beq.n	80062d6 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xba>
 8006290:	464b      	mov	r3, r9
      _ForwardIterator __cur = __result;
 8006292:	4641      	mov	r1, r8
 8006294:	7818      	ldrb	r0, [r3, #0]
 8006296:	695a      	ldr	r2, [r3, #20]
 8006298:	7008      	strb	r0, [r1, #0]
 800629a:	68d8      	ldr	r0, [r3, #12]
 800629c:	685d      	ldr	r5, [r3, #4]
 800629e:	689c      	ldr	r4, [r3, #8]
 80062a0:	60c8      	str	r0, [r1, #12]
 80062a2:	6918      	ldr	r0, [r3, #16]
      for (; __first != __last; ++__first, (void)++__cur)
 80062a4:	3318      	adds	r3, #24
 80062a6:	e9c1 5401 	strd	r5, r4, [r1, #4]
 80062aa:	6108      	str	r0, [r1, #16]
 80062ac:	42b3      	cmp	r3, r6
 80062ae:	f101 0118 	add.w	r1, r1, #24
 80062b2:	f841 2c04 	str.w	r2, [r1, #-4]
 80062b6:	d1ed      	bne.n	8006294 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	      ++__new_finish;
 80062b8:	f1a6 0418 	sub.w	r4, r6, #24
 80062bc:	4b2e      	ldr	r3, [pc, #184]	; (8006378 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x15c>)
 80062be:	eba4 0409 	sub.w	r4, r4, r9
 80062c2:	08e4      	lsrs	r4, r4, #3
 80062c4:	fb03 f404 	mul.w	r4, r3, r4
 80062c8:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
 80062cc:	3402      	adds	r4, #2
 80062ce:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80062d2:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 80062d6:	4556      	cmp	r6, sl
 80062d8:	d021      	beq.n	800631e <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x102>
      _ForwardIterator __cur = __result;
 80062da:	4620      	mov	r0, r4
      for (; __first != __last; ++__first, (void)++__cur)
 80062dc:	4631      	mov	r1, r6
 80062de:	780d      	ldrb	r5, [r1, #0]
 80062e0:	684a      	ldr	r2, [r1, #4]
 80062e2:	68cb      	ldr	r3, [r1, #12]
 80062e4:	7005      	strb	r5, [r0, #0]
 80062e6:	6042      	str	r2, [r0, #4]
 80062e8:	688d      	ldr	r5, [r1, #8]
 80062ea:	690a      	ldr	r2, [r1, #16]
 80062ec:	60c3      	str	r3, [r0, #12]
 80062ee:	3118      	adds	r1, #24
 80062f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062f4:	6085      	str	r5, [r0, #8]
 80062f6:	6102      	str	r2, [r0, #16]
 80062f8:	4551      	cmp	r1, sl
 80062fa:	f100 0018 	add.w	r0, r0, #24
 80062fe:	f840 3c04 	str.w	r3, [r0, #-4]
 8006302:	d1ec      	bne.n	80062de <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xc2>
 8006304:	1b8b      	subs	r3, r1, r6
 8006306:	4a1c      	ldr	r2, [pc, #112]	; (8006378 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x15c>)
 8006308:	3b18      	subs	r3, #24
 800630a:	08db      	lsrs	r3, r3, #3
 800630c:	fb02 f303 	mul.w	r3, r2, r3
 8006310:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006314:	3301      	adds	r3, #1
 8006316:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800631a:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	if (__p)
 800631e:	f1b9 0f00 	cmp.w	r9, #0
 8006322:	d005      	beq.n	8006330 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x114>
		    this->_M_impl._M_end_of_storage - __old_start);
 8006324:	68b9      	ldr	r1, [r7, #8]
 8006326:	4648      	mov	r0, r9
 8006328:	eba1 0109 	sub.w	r1, r1, r9
 800632c:	f011 fc66 	bl	8017bfc <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8006330:	9b00      	ldr	r3, [sp, #0]
      this->_M_impl._M_finish = __new_finish;
 8006332:	e9c7 8400 	strd	r8, r4, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8006336:	60bb      	str	r3, [r7, #8]
    }
 8006338:	b003      	add	sp, #12
 800633a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800633e:	42a5      	cmp	r5, r4
 8006340:	bf28      	it	cs
 8006342:	4625      	movcs	r5, r4
 8006344:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006348:	00ed      	lsls	r5, r5, #3
 800634a:	4628      	mov	r0, r5
 800634c:	9201      	str	r2, [sp, #4]
 800634e:	f011 fc57 	bl	8017c00 <_Znwj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8006352:	1943      	adds	r3, r0, r5
 8006354:	4680      	mov	r8, r0
 8006356:	9a01      	ldr	r2, [sp, #4]
 8006358:	9300      	str	r3, [sp, #0]
	      ++__new_finish;
 800635a:	f100 0418 	add.w	r4, r0, #24
 800635e:	e77d      	b.n	800625c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x40>
 8006360:	4d06      	ldr	r5, [pc, #24]	; (800637c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x160>)
 8006362:	eba1 0209 	sub.w	r2, r1, r9
      _M_allocate(size_t __n)
 8006366:	e7f0      	b.n	800634a <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x12e>
	  __throw_length_error(__N(__s));
 8006368:	4805      	ldr	r0, [pc, #20]	; (8006380 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x164>)
 800636a:	f011 fc60 	bl	8017c2e <_ZSt20__throw_length_errorPKc>
 800636e:	bf00      	nop
 8006370:	aaaaaaab 	.word	0xaaaaaaab
 8006374:	05555555 	.word	0x05555555
 8006378:	0aaaaaab 	.word	0x0aaaaaab
 800637c:	7ffffff8 	.word	0x7ffffff8
 8006380:	0801a8d4 	.word	0x0801a8d4

08006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>:
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 8006384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006388:	ed2d 8b02 	vpush	{d8}
 800638c:	2302      	movs	r3, #2
 800638e:	b086      	sub	sp, #24
 8006390:	9301      	str	r3, [sp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8006392:	e9d2 3400 	ldrd	r3, r4, [r2]
 8006396:	1ae4      	subs	r4, r4, r3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006398:	2c00      	cmp	r4, #0
 800639a:	460f      	mov	r7, r1
 800639c:	4605      	mov	r5, r0
 800639e:	eeb0 8a40 	vmov.f32	s16, s0
 80063a2:	f88d 1000 	strb.w	r1, [sp]
 80063a6:	d03b      	beq.n	8006420 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0+0x9c>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80063a8:	db3f      	blt.n	800642a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0+0xa6>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80063aa:	4620      	mov	r0, r4
 80063ac:	4616      	mov	r6, r2
 80063ae:	f011 fc27 	bl	8017c00 <_Znwj>
	  const ptrdiff_t _Num = __last - __first;
 80063b2:	e9d6 1300 	ldrd	r1, r3, [r6]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80063b6:	eb00 0804 	add.w	r8, r0, r4
	  if (_Num)
 80063ba:	1a5c      	subs	r4, r3, r1
 80063bc:	4606      	mov	r6, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 80063be:	9002      	str	r0, [sp, #8]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80063c0:	f8cd 8010 	str.w	r8, [sp, #16]
 80063c4:	d002      	beq.n	80063cc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0+0x48>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80063c6:	4622      	mov	r2, r4
 80063c8:	f012 ff8b 	bl	80192e2 <memmove>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80063cc:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
	  return __result + _Num;
 80063d0:	4434      	add	r4, r6
 80063d2:	4293      	cmp	r3, r2
 80063d4:	ed8d 8a05 	vstr	s16, [sp, #20]
	this->_M_impl._M_finish =
 80063d8:	9403      	str	r4, [sp, #12]
 80063da:	d00f      	beq.n	80063fc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0+0x78>
    struct Edge
 80063dc:	2102      	movs	r1, #2
	    ++this->_M_impl._M_finish;
 80063de:	f103 0218 	add.w	r2, r3, #24
 80063e2:	ed83 8a05 	vstr	s16, [r3, #20]
	  _M_end_of_storage(__x._M_end_of_storage)
 80063e6:	e9c3 4803 	strd	r4, r8, [r3, #12]
 80063ea:	701f      	strb	r7, [r3, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80063ec:	609e      	str	r6, [r3, #8]
 80063ee:	6059      	str	r1, [r3, #4]
 80063f0:	612a      	str	r2, [r5, #16]
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 80063f2:	b006      	add	sp, #24
 80063f4:	ecbd 8b02 	vpop	{d8}
 80063f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80063fc:	4619      	mov	r1, r3
 80063fe:	f105 000c 	add.w	r0, r5, #12
 8006402:	466a      	mov	r2, sp
 8006404:	f7ff ff0a 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006408:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800640a:	9904      	ldr	r1, [sp, #16]
 800640c:	1a09      	subs	r1, r1, r0
	if (__p)
 800640e:	2800      	cmp	r0, #0
 8006410:	d0ef      	beq.n	80063f2 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0+0x6e>
 8006412:	b006      	add	sp, #24
 8006414:	ecbd 8b02 	vpop	{d8}
 8006418:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	::operator delete(__p
 800641c:	f011 bbee 	b.w	8017bfc <_ZdlPvj>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8006420:	46a0      	mov	r8, r4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006422:	4626      	mov	r6, r4
	this->_M_impl._M_start = this->_M_allocate(__n);
 8006424:	9402      	str	r4, [sp, #8]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8006426:	9404      	str	r4, [sp, #16]
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8006428:	e7d0      	b.n	80063cc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0+0x48>
	    std::__throw_bad_alloc();
 800642a:	f011 fbfa 	bl	8017c22 <_ZSt17__throw_bad_allocv>
 800642e:	bf00      	nop

08006430 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.1>:
 8006430:	2301      	movs	r3, #1
 8006432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	9301      	str	r3, [sp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800643a:	e9d2 3400 	ldrd	r3, r4, [r2]
 800643e:	1ae4      	subs	r4, r4, r3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006440:	2c00      	cmp	r4, #0
 8006442:	460f      	mov	r7, r1
 8006444:	4605      	mov	r5, r0
 8006446:	f88d 1000 	strb.w	r1, [sp]
 800644a:	d036      	beq.n	80064ba <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.1+0x8a>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800644c:	db3a      	blt.n	80064c4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.1+0x94>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800644e:	4620      	mov	r0, r4
 8006450:	4616      	mov	r6, r2
 8006452:	f011 fbd5 	bl	8017c00 <_Znwj>
	  const ptrdiff_t _Num = __last - __first;
 8006456:	e9d6 1300 	ldrd	r1, r3, [r6]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800645a:	eb00 0804 	add.w	r8, r0, r4
	  if (_Num)
 800645e:	1a5c      	subs	r4, r3, r1
 8006460:	4606      	mov	r6, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8006462:	9002      	str	r0, [sp, #8]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8006464:	f8cd 8010 	str.w	r8, [sp, #16]
 8006468:	d002      	beq.n	8006470 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.1+0x40>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800646a:	4622      	mov	r2, r4
 800646c:	f012 ff39 	bl	80192e2 <memmove>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8006470:	e9d5 3104 	ldrd	r3, r1, [r5, #16]
 8006474:	4a14      	ldr	r2, [pc, #80]	; (80064c8 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.1+0x98>)
	  return __result + _Num;
 8006476:	4434      	add	r4, r6
 8006478:	428b      	cmp	r3, r1
	this->_M_impl._M_finish =
 800647a:	9403      	str	r4, [sp, #12]
 800647c:	9205      	str	r2, [sp, #20]
 800647e:	d00c      	beq.n	800649a <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.1+0x6a>
    struct Edge
 8006480:	2101      	movs	r1, #1
 8006482:	615a      	str	r2, [r3, #20]
	    ++this->_M_impl._M_finish;
 8006484:	f103 0218 	add.w	r2, r3, #24
	  _M_end_of_storage(__x._M_end_of_storage)
 8006488:	e9c3 4803 	strd	r4, r8, [r3, #12]
 800648c:	701f      	strb	r7, [r3, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800648e:	609e      	str	r6, [r3, #8]
 8006490:	6059      	str	r1, [r3, #4]
 8006492:	612a      	str	r2, [r5, #16]
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 8006494:	b006      	add	sp, #24
 8006496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800649a:	4619      	mov	r1, r3
 800649c:	f105 000c 	add.w	r0, r5, #12
 80064a0:	466a      	mov	r2, sp
 80064a2:	f7ff febb 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80064a6:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80064a8:	9904      	ldr	r1, [sp, #16]
 80064aa:	1a09      	subs	r1, r1, r0
	if (__p)
 80064ac:	2800      	cmp	r0, #0
 80064ae:	d0f1      	beq.n	8006494 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.1+0x64>
 80064b0:	b006      	add	sp, #24
 80064b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	::operator delete(__p
 80064b6:	f011 bba1 	b.w	8017bfc <_ZdlPvj>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80064ba:	46a0      	mov	r8, r4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80064bc:	4626      	mov	r6, r4
	this->_M_impl._M_start = this->_M_allocate(__n);
 80064be:	9402      	str	r4, [sp, #8]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80064c0:	9404      	str	r4, [sp, #16]
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80064c2:	e7d5      	b.n	8006470 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.1+0x40>
	    std::__throw_bad_alloc();
 80064c4:	f011 fbad 	bl	8017c22 <_ZSt17__throw_bad_allocv>
 80064c8:	3f71463a 	.word	0x3f71463a

080064cc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.2>:
 80064cc:	2300      	movs	r3, #0
 80064ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	9301      	str	r3, [sp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80064d6:	e9d2 3400 	ldrd	r3, r4, [r2]
 80064da:	1ae4      	subs	r4, r4, r3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80064dc:	2c00      	cmp	r4, #0
 80064de:	460f      	mov	r7, r1
 80064e0:	4605      	mov	r5, r0
 80064e2:	f88d 1000 	strb.w	r1, [sp]
 80064e6:	d036      	beq.n	8006556 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.2+0x8a>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80064e8:	db3a      	blt.n	8006560 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.2+0x94>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80064ea:	4620      	mov	r0, r4
 80064ec:	4616      	mov	r6, r2
 80064ee:	f011 fb87 	bl	8017c00 <_Znwj>
	  const ptrdiff_t _Num = __last - __first;
 80064f2:	e9d6 1300 	ldrd	r1, r3, [r6]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80064f6:	eb00 0804 	add.w	r8, r0, r4
	  if (_Num)
 80064fa:	1a5c      	subs	r4, r3, r1
 80064fc:	4606      	mov	r6, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 80064fe:	9002      	str	r0, [sp, #8]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8006500:	f8cd 8010 	str.w	r8, [sp, #16]
 8006504:	d002      	beq.n	800650c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.2+0x40>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8006506:	4622      	mov	r2, r4
 8006508:	f012 feeb 	bl	80192e2 <memmove>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800650c:	e9d5 3104 	ldrd	r3, r1, [r5, #16]
 8006510:	4a14      	ldr	r2, [pc, #80]	; (8006564 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.2+0x98>)
	  return __result + _Num;
 8006512:	4434      	add	r4, r6
 8006514:	428b      	cmp	r3, r1
	this->_M_impl._M_finish =
 8006516:	9403      	str	r4, [sp, #12]
 8006518:	9205      	str	r2, [sp, #20]
 800651a:	d00c      	beq.n	8006536 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.2+0x6a>
    struct Edge
 800651c:	2100      	movs	r1, #0
 800651e:	615a      	str	r2, [r3, #20]
	    ++this->_M_impl._M_finish;
 8006520:	f103 0218 	add.w	r2, r3, #24
	  _M_end_of_storage(__x._M_end_of_storage)
 8006524:	e9c3 4803 	strd	r4, r8, [r3, #12]
 8006528:	701f      	strb	r7, [r3, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800652a:	609e      	str	r6, [r3, #8]
 800652c:	6059      	str	r1, [r3, #4]
 800652e:	612a      	str	r2, [r5, #16]
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 8006530:	b006      	add	sp, #24
 8006532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8006536:	4619      	mov	r1, r3
 8006538:	f105 000c 	add.w	r0, r5, #12
 800653c:	466a      	mov	r2, sp
 800653e:	f7ff fe6d 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006542:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006544:	9904      	ldr	r1, [sp, #16]
 8006546:	1a09      	subs	r1, r1, r0
	if (__p)
 8006548:	2800      	cmp	r0, #0
 800654a:	d0f1      	beq.n	8006530 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.2+0x64>
 800654c:	b006      	add	sp, #24
 800654e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	::operator delete(__p
 8006552:	f011 bb53 	b.w	8017bfc <_ZdlPvj>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8006556:	46a0      	mov	r8, r4
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006558:	4626      	mov	r6, r4
	this->_M_impl._M_start = this->_M_allocate(__n);
 800655a:	9402      	str	r4, [sp, #8]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800655c:	9404      	str	r4, [sp, #16]
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800655e:	e7d5      	b.n	800650c <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.2+0x40>
	    std::__throw_bad_alloc();
 8006560:	f011 fb5f 	bl	8017c22 <_ZSt17__throw_bad_allocv>
 8006564:	3f71463a 	.word	0x3f71463a

08006568 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8006568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800656c:	6843      	ldr	r3, [r0, #4]
 800656e:	4690      	mov	r8, r2
 8006570:	6802      	ldr	r2, [r0, #0]
 8006572:	b087      	sub	sp, #28
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8006574:	4da3      	ldr	r5, [pc, #652]	; (8006804 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x29c>)
 8006576:	9303      	str	r3, [sp, #12]
 8006578:	1a9b      	subs	r3, r3, r2
 800657a:	10db      	asrs	r3, r3, #3
 800657c:	fb05 f303 	mul.w	r3, r5, r3
	if (max_size() - size() < __n)
 8006580:	4ca1      	ldr	r4, [pc, #644]	; (8006808 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x2a0>)
 8006582:	9005      	str	r0, [sp, #20]
 8006584:	42a3      	cmp	r3, r4
 8006586:	9200      	str	r2, [sp, #0]
 8006588:	9104      	str	r1, [sp, #16]
 800658a:	f000 8194 	beq.w	80068b6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x34e>
 800658e:	2b01      	cmp	r3, #1
 8006590:	461a      	mov	r2, r3
 8006592:	bf38      	it	cc
 8006594:	2201      	movcc	r2, #1
 8006596:	189b      	adds	r3, r3, r2
 8006598:	4689      	mov	r9, r1
	const size_type __len = size() + (std::max)(size(), __n);
 800659a:	9302      	str	r3, [sp, #8]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800659c:	f080 811a 	bcs.w	80067d4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26c>
 80065a0:	9b00      	ldr	r3, [sp, #0]
 80065a2:	1ace      	subs	r6, r1, r3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80065a4:	9b02      	ldr	r3, [sp, #8]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f040 817d 	bne.w	80068a6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x33e>
 80065ac:	461c      	mov	r4, r3
 80065ae:	9301      	str	r3, [sp, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80065b0:	2300      	movs	r3, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80065b2:	e9d8 5703 	ldrd	r5, r7, [r8, #12]
    class Node
 80065b6:	f898 0000 	ldrb.w	r0, [r8]
 80065ba:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80065be:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80065c2:	55a0      	strb	r0, [r4, r6]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80065c4:	ebb7 0b05 	subs.w	fp, r7, r5
	  _Alloc_traits::construct(this->_M_impl,
 80065c8:	4426      	add	r6, r4
	: _M_start(), _M_finish(), _M_end_of_storage()
 80065ca:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80065ce:	6071      	str	r1, [r6, #4]
 80065d0:	60b2      	str	r2, [r6, #8]
 80065d2:	6173      	str	r3, [r6, #20]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80065d4:	f000 80fc 	beq.w	80067d0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x268>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80065d8:	4b8c      	ldr	r3, [pc, #560]	; (800680c <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x2a4>)
 80065da:	459b      	cmp	fp, r3
 80065dc:	f200 8104 	bhi.w	80067e8 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x280>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80065e0:	4658      	mov	r0, fp
 80065e2:	f011 fb0d 	bl	8017c00 <_Znwj>
      : _M_current(__i) { }
 80065e6:	e9d8 5703 	ldrd	r5, r7, [r8, #12]
 80065ea:	4604      	mov	r4, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80065ec:	eb04 030b 	add.w	r3, r4, fp
	      for (; __first != __last; ++__first, (void)++__cur)
 80065f0:	42af      	cmp	r7, r5
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80065f2:	e9c6 4403 	strd	r4, r4, [r6, #12]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80065f6:	6173      	str	r3, [r6, #20]
 80065f8:	d035      	beq.n	8006666 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xfe>
	: _M_start(), _M_finish(), _M_end_of_storage()
 80065fa:	f04f 0800 	mov.w	r8, #0
 80065fe:	e015      	b.n	800662c <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xc4>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8006600:	db2f      	blt.n	8006662 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xfa>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006602:	4650      	mov	r0, sl
 8006604:	f011 fafc 	bl	8017c00 <_Znwj>
 8006608:	4683      	mov	fp, r0
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800660a:	e9c4 bb02 	strd	fp, fp, [r4, #8]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800660e:	eb0b 030a 	add.w	r3, fp, sl
 8006612:	6123      	str	r3, [r4, #16]
	  const ptrdiff_t _Num = __last - __first;
 8006614:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
	  if (_Num)
 8006618:	ebb2 0a01 	subs.w	sl, r2, r1
 800661c:	d116      	bne.n	800664c <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xe4>
    struct Edge
 800661e:	696b      	ldr	r3, [r5, #20]
	++_M_current;
 8006620:	3518      	adds	r5, #24
 8006622:	42af      	cmp	r7, r5
 8006624:	6163      	str	r3, [r4, #20]
 8006626:	f104 0418 	add.w	r4, r4, #24
 800662a:	d01c      	beq.n	8006666 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xfe>
 800662c:	782b      	ldrb	r3, [r5, #0]
 800662e:	7023      	strb	r3, [r4, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8006630:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8006634:	eba3 0a02 	sub.w	sl, r3, r2
 8006638:	686b      	ldr	r3, [r5, #4]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800663a:	f1ba 0f00 	cmp.w	sl, #0
	: _M_start(), _M_finish(), _M_end_of_storage()
 800663e:	e9c4 3801 	strd	r3, r8, [r4, #4]
 8006642:	e9c4 8803 	strd	r8, r8, [r4, #12]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006646:	d1db      	bne.n	8006600 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x98>
 8006648:	46d3      	mov	fp, sl
 800664a:	e7de      	b.n	800660a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800664c:	4652      	mov	r2, sl
 800664e:	4658      	mov	r0, fp
 8006650:	f012 fe47 	bl	80192e2 <memmove>
	  return __result + _Num;
 8006654:	eb0b 020a 	add.w	r2, fp, sl
	this->_M_impl._M_finish =
 8006658:	60e2      	str	r2, [r4, #12]
 800665a:	e7e0      	b.n	800661e <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb6>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800665c:	2d00      	cmp	r5, #0
 800665e:	f2c0 80c7 	blt.w	80067f0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x288>
	    std::__throw_bad_alloc();
 8006662:	f011 fade 	bl	8017c22 <_ZSt17__throw_bad_allocv>
 8006666:	9b00      	ldr	r3, [sp, #0]
 8006668:	6134      	str	r4, [r6, #16]
 800666a:	4599      	cmp	r9, r3
 800666c:	f000 810b 	beq.w	8006886 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x31e>
 8006670:	469b      	mov	fp, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006672:	2600      	movs	r6, #0
	  _ForwardIterator __cur = __result;
 8006674:	9f01      	ldr	r7, [sp, #4]
    class Node
 8006676:	f8db 3004 	ldr.w	r3, [fp, #4]
 800667a:	607b      	str	r3, [r7, #4]
 800667c:	f8db 3008 	ldr.w	r3, [fp, #8]
 8006680:	60bb      	str	r3, [r7, #8]
 8006682:	f89b 3000 	ldrb.w	r3, [fp]
 8006686:	703b      	strb	r3, [r7, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8006688:	e9db 3503 	ldrd	r3, r5, [fp, #12]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800668c:	1aed      	subs	r5, r5, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 800668e:	e9c7 6603 	strd	r6, r6, [r7, #12]
 8006692:	617e      	str	r6, [r7, #20]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006694:	f000 809a 	beq.w	80067cc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x264>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8006698:	4b5c      	ldr	r3, [pc, #368]	; (800680c <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x2a4>)
 800669a:	429d      	cmp	r5, r3
 800669c:	d8de      	bhi.n	800665c <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800669e:	4628      	mov	r0, r5
 80066a0:	f011 faae 	bl	8017c00 <_Znwj>
 80066a4:	4604      	mov	r4, r0
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80066a6:	e9c7 4403 	strd	r4, r4, [r7, #12]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80066aa:	4425      	add	r5, r4
 80066ac:	617d      	str	r5, [r7, #20]
      : _M_current(__i) { }
 80066ae:	e9db 5a03 	ldrd	r5, sl, [fp, #12]
	      for (; __first != __last; ++__first, (void)++__cur)
 80066b2:	4555      	cmp	r5, sl
 80066b4:	d116      	bne.n	80066e4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x17c>
 80066b6:	e02d      	b.n	8006714 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x1ac>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80066b8:	dbd3      	blt.n	8006662 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xfa>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80066ba:	4640      	mov	r0, r8
 80066bc:	f011 faa0 	bl	8017c00 <_Znwj>
 80066c0:	4603      	mov	r3, r0
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80066c2:	e9c4 3302 	strd	r3, r3, [r4, #8]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80066c6:	eb03 0208 	add.w	r2, r3, r8
 80066ca:	6122      	str	r2, [r4, #16]
	  const ptrdiff_t _Num = __last - __first;
 80066cc:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
	  if (_Num)
 80066d0:	ebb2 0801 	subs.w	r8, r2, r1
 80066d4:	d116      	bne.n	8006704 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x19c>
    struct Edge
 80066d6:	696b      	ldr	r3, [r5, #20]
	++_M_current;
 80066d8:	3518      	adds	r5, #24
 80066da:	45aa      	cmp	sl, r5
 80066dc:	6163      	str	r3, [r4, #20]
 80066de:	f104 0418 	add.w	r4, r4, #24
 80066e2:	d017      	beq.n	8006714 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x1ac>
 80066e4:	782b      	ldrb	r3, [r5, #0]
 80066e6:	7023      	strb	r3, [r4, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80066e8:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80066ec:	eba3 0802 	sub.w	r8, r3, r2
 80066f0:	686b      	ldr	r3, [r5, #4]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80066f2:	f1b8 0f00 	cmp.w	r8, #0
	: _M_start(), _M_finish(), _M_end_of_storage()
 80066f6:	e9c4 3601 	strd	r3, r6, [r4, #4]
 80066fa:	e9c4 6603 	strd	r6, r6, [r4, #12]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80066fe:	d1db      	bne.n	80066b8 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x150>
 8006700:	4643      	mov	r3, r8
 8006702:	e7de      	b.n	80066c2 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x15a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8006704:	4618      	mov	r0, r3
 8006706:	4642      	mov	r2, r8
 8006708:	f012 fdeb 	bl	80192e2 <memmove>
 800670c:	4603      	mov	r3, r0
	  return __result + _Num;
 800670e:	4443      	add	r3, r8
	this->_M_impl._M_finish =
 8006710:	60e3      	str	r3, [r4, #12]
 8006712:	e7e0      	b.n	80066d6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x16e>
 8006714:	f10b 0b18 	add.w	fp, fp, #24
 8006718:	45d9      	cmp	r9, fp
 800671a:	613c      	str	r4, [r7, #16]
 800671c:	f107 0718 	add.w	r7, r7, #24
 8006720:	d1a9      	bne.n	8006676 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x10e>
 8006722:	9b03      	ldr	r3, [sp, #12]
	      ++__new_finish;
 8006724:	3718      	adds	r7, #24
 8006726:	4599      	cmp	r9, r3
 8006728:	d07a      	beq.n	8006820 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x2b8>
	: _M_start(), _M_finish(), _M_end_of_storage()
 800672a:	f04f 0800 	mov.w	r8, #0
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800672e:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800680c <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x2a4>
 8006732:	f8dd b010 	ldr.w	fp, [sp, #16]
    class Node
 8006736:	f8db 3004 	ldr.w	r3, [fp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800673a:	e9db 5603 	ldrd	r5, r6, [fp, #12]
 800673e:	607b      	str	r3, [r7, #4]
 8006740:	f8db 3008 	ldr.w	r3, [fp, #8]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006744:	ebb6 0a05 	subs.w	sl, r6, r5
 8006748:	60bb      	str	r3, [r7, #8]
 800674a:	f89b 3000 	ldrb.w	r3, [fp]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800674e:	e9c7 8803 	strd	r8, r8, [r7, #12]
 8006752:	f8c7 8014 	str.w	r8, [r7, #20]
 8006756:	703b      	strb	r3, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006758:	f000 8093 	beq.w	8006882 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x31a>
 800675c:	45ca      	cmp	sl, r9
 800675e:	f200 809e 	bhi.w	800689e <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x336>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006762:	4650      	mov	r0, sl
 8006764:	f011 fa4c 	bl	8017c00 <_Znwj>
      : _M_current(__i) { }
 8006768:	e9db 5603 	ldrd	r5, r6, [fp, #12]
 800676c:	4604      	mov	r4, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800676e:	eb04 030a 	add.w	r3, r4, sl
 8006772:	42b5      	cmp	r5, r6
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8006774:	e9c7 4403 	strd	r4, r4, [r7, #12]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8006778:	617b      	str	r3, [r7, #20]
 800677a:	d117      	bne.n	80067ac <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x244>
 800677c:	e048      	b.n	8006810 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x2a8>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800677e:	f6ff af70 	blt.w	8006662 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xfa>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006782:	4650      	mov	r0, sl
 8006784:	f011 fa3c 	bl	8017c00 <_Znwj>
 8006788:	4603      	mov	r3, r0
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800678a:	e9c4 3302 	strd	r3, r3, [r4, #8]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800678e:	eb03 020a 	add.w	r2, r3, sl
 8006792:	6122      	str	r2, [r4, #16]
	  const ptrdiff_t _Num = __last - __first;
 8006794:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
	  if (_Num)
 8006798:	ebb2 0a01 	subs.w	sl, r2, r1
 800679c:	d12a      	bne.n	80067f4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x28c>
    struct Edge
 800679e:	696b      	ldr	r3, [r5, #20]
	++_M_current;
 80067a0:	3518      	adds	r5, #24
 80067a2:	42b5      	cmp	r5, r6
 80067a4:	6163      	str	r3, [r4, #20]
 80067a6:	f104 0418 	add.w	r4, r4, #24
 80067aa:	d031      	beq.n	8006810 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x2a8>
 80067ac:	782b      	ldrb	r3, [r5, #0]
 80067ae:	7023      	strb	r3, [r4, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80067b0:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80067b4:	eba3 0a02 	sub.w	sl, r3, r2
 80067b8:	686b      	ldr	r3, [r5, #4]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80067ba:	f1ba 0f00 	cmp.w	sl, #0
	: _M_start(), _M_finish(), _M_end_of_storage()
 80067be:	e9c4 3801 	strd	r3, r8, [r4, #4]
 80067c2:	e9c4 8803 	strd	r8, r8, [r4, #12]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80067c6:	d1da      	bne.n	800677e <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x216>
 80067c8:	4653      	mov	r3, sl
 80067ca:	e7de      	b.n	800678a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x222>
 80067cc:	462c      	mov	r4, r5
 80067ce:	e76a      	b.n	80066a6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
 80067d0:	465c      	mov	r4, fp
 80067d2:	e70b      	b.n	80065ec <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x84>
    { return __lhs.base() - __rhs.base(); }
 80067d4:	4b0d      	ldr	r3, [pc, #52]	; (800680c <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x2a4>)
 80067d6:	9302      	str	r3, [sp, #8]
 80067d8:	9b00      	ldr	r3, [sp, #0]
 80067da:	1ace      	subs	r6, r1, r3
 80067dc:	9802      	ldr	r0, [sp, #8]
 80067de:	f011 fa0f 	bl	8017c00 <_Znwj>
 80067e2:	4604      	mov	r4, r0
 80067e4:	9001      	str	r0, [sp, #4]
 80067e6:	e6e3      	b.n	80065b0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x48>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80067e8:	f1bb 0f00 	cmp.w	fp, #0
 80067ec:	f6bf af39 	bge.w	8006662 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xfa>
	      std::__throw_bad_array_new_length();
 80067f0:	f011 fa1a 	bl	8017c28 <_ZSt28__throw_bad_array_new_lengthv>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80067f4:	4618      	mov	r0, r3
 80067f6:	4652      	mov	r2, sl
 80067f8:	f012 fd73 	bl	80192e2 <memmove>
 80067fc:	4603      	mov	r3, r0
	  return __result + _Num;
 80067fe:	4453      	add	r3, sl
	this->_M_impl._M_finish =
 8006800:	60e3      	str	r3, [r4, #12]
 8006802:	e7cc      	b.n	800679e <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x236>
 8006804:	aaaaaaab 	.word	0xaaaaaaab
 8006808:	05555555 	.word	0x05555555
 800680c:	7ffffff8 	.word	0x7ffffff8
 8006810:	9b03      	ldr	r3, [sp, #12]
 8006812:	f10b 0b18 	add.w	fp, fp, #24
 8006816:	455b      	cmp	r3, fp
 8006818:	613c      	str	r4, [r7, #16]
 800681a:	f107 0718 	add.w	r7, r7, #24
 800681e:	d18a      	bne.n	8006736 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x1ce>
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
 8006820:	9b00      	ldr	r3, [sp, #0]
 8006822:	9a03      	ldr	r2, [sp, #12]
 8006824:	4293      	cmp	r3, r2
 8006826:	bf18      	it	ne
 8006828:	461c      	movne	r4, r3
 800682a:	d017      	beq.n	800685c <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x2f4>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800682c:	e9d4 5603 	ldrd	r5, r6, [r4, #12]
 8006830:	42b5      	cmp	r5, r6
 8006832:	d009      	beq.n	8006848 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x2e0>
 8006834:	68a8      	ldr	r0, [r5, #8]
	if (__p)
 8006836:	b340      	cbz	r0, 800688a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x322>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006838:	6929      	ldr	r1, [r5, #16]
 800683a:	3518      	adds	r5, #24
	::operator delete(__p
 800683c:	1a09      	subs	r1, r1, r0
 800683e:	f011 f9dd 	bl	8017bfc <_ZdlPvj>
 8006842:	42ae      	cmp	r6, r5
 8006844:	d1f6      	bne.n	8006834 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x2cc>
	_M_deallocate(_M_impl._M_start,
 8006846:	68e6      	ldr	r6, [r4, #12]
	if (__p)
 8006848:	b326      	cbz	r6, 8006894 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x32c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800684a:	6961      	ldr	r1, [r4, #20]
 800684c:	4630      	mov	r0, r6
 800684e:	1b89      	subs	r1, r1, r6
 8006850:	f011 f9d4 	bl	8017bfc <_ZdlPvj>
 8006854:	9b03      	ldr	r3, [sp, #12]
 8006856:	3418      	adds	r4, #24
 8006858:	42a3      	cmp	r3, r4
 800685a:	d1e7      	bne.n	800682c <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x2c4>
	if (__p)
 800685c:	9b00      	ldr	r3, [sp, #0]
 800685e:	b133      	cbz	r3, 800686e <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x306>
		    this->_M_impl._M_end_of_storage - __old_start);
 8006860:	9b05      	ldr	r3, [sp, #20]
 8006862:	6899      	ldr	r1, [r3, #8]
 8006864:	9b00      	ldr	r3, [sp, #0]
 8006866:	4618      	mov	r0, r3
 8006868:	1ac9      	subs	r1, r1, r3
 800686a:	f011 f9c7 	bl	8017bfc <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800686e:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
      this->_M_impl._M_start = __new_start;
 8006872:	9a05      	ldr	r2, [sp, #20]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8006874:	440b      	add	r3, r1
      this->_M_impl._M_finish = __new_finish;
 8006876:	e9c2 1700 	strd	r1, r7, [r2]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800687a:	6093      	str	r3, [r2, #8]
    }
 800687c:	b007      	add	sp, #28
 800687e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006882:	4654      	mov	r4, sl
 8006884:	e773      	b.n	800676e <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x206>
	  _ForwardIterator __cur = __result;
 8006886:	9f01      	ldr	r7, [sp, #4]
 8006888:	e74b      	b.n	8006722 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x1ba>
 800688a:	3518      	adds	r5, #24
 800688c:	42ae      	cmp	r6, r5
 800688e:	d1d1      	bne.n	8006834 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x2cc>
	_M_deallocate(_M_impl._M_start,
 8006890:	68e6      	ldr	r6, [r4, #12]
 8006892:	e7d9      	b.n	8006848 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x2e0>
 8006894:	9b03      	ldr	r3, [sp, #12]
 8006896:	3418      	adds	r4, #24
 8006898:	429c      	cmp	r4, r3
 800689a:	d1c7      	bne.n	800682c <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x2c4>
 800689c:	e7de      	b.n	800685c <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x2f4>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800689e:	f1ba 0f00 	cmp.w	sl, #0
 80068a2:	dba5      	blt.n	80067f0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x288>
 80068a4:	e6dd      	b.n	8006662 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xfa>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80068a6:	42a3      	cmp	r3, r4
 80068a8:	bf28      	it	cs
 80068aa:	4623      	movcs	r3, r4
 80068ac:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 80068b0:	00e3      	lsls	r3, r4, #3
 80068b2:	9302      	str	r3, [sp, #8]
 80068b4:	e792      	b.n	80067dc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x274>
	  __throw_length_error(__N(__s));
 80068b6:	4801      	ldr	r0, [pc, #4]	; (80068bc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x354>)
 80068b8:	f011 f9b9 	bl	8017c2e <_ZSt20__throw_length_errorPKc>
 80068bc:	0801a8d4 	.word	0x0801a8d4

080068c0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0>:
      vector<_Tp, _Alloc>::
 80068c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80068c4:	e9d0 a301 	ldrd	sl, r3, [r0, #4]
 80068c8:	459a      	cmp	sl, r3
      vector<_Tp, _Alloc>::
 80068ca:	460e      	mov	r6, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80068cc:	d05a      	beq.n	8006984 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0+0xc4>
    class Node
 80068ce:	7833      	ldrb	r3, [r6, #0]
 80068d0:	4680      	mov	r8, r0
 80068d2:	f88a 3000 	strb.w	r3, [sl]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80068d6:	2300      	movs	r3, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80068d8:	e9d6 2503 	ldrd	r2, r5, [r6, #12]
 80068dc:	6848      	ldr	r0, [r1, #4]
 80068de:	6889      	ldr	r1, [r1, #8]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80068e0:	1aad      	subs	r5, r5, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 80068e2:	e9ca 3303 	strd	r3, r3, [sl, #12]
 80068e6:	f8ca 0004 	str.w	r0, [sl, #4]
 80068ea:	f8ca 1008 	str.w	r1, [sl, #8]
 80068ee:	f8ca 3014 	str.w	r3, [sl, #20]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80068f2:	d034      	beq.n	800695e <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0+0x9e>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80068f4:	4b29      	ldr	r3, [pc, #164]	; (800699c <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0+0xdc>)
 80068f6:	429d      	cmp	r5, r3
 80068f8:	d84c      	bhi.n	8006994 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0+0xd4>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80068fa:	4628      	mov	r0, r5
 80068fc:	f011 f980 	bl	8017c00 <_Znwj>
 8006900:	4604      	mov	r4, r0
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8006902:	e9ca 4403 	strd	r4, r4, [sl, #12]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8006906:	4425      	add	r5, r4
 8006908:	f8ca 5014 	str.w	r5, [sl, #20]
      : _M_current(__i) { }
 800690c:	e9d6 5903 	ldrd	r5, r9, [r6, #12]
	      for (; __first != __last; ++__first, (void)++__cur)
 8006910:	454d      	cmp	r5, r9
 8006912:	d02e      	beq.n	8006972 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0+0xb2>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006914:	2700      	movs	r7, #0
 8006916:	e014      	b.n	8006942 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0+0x82>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8006918:	db3a      	blt.n	8006990 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0+0xd0>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800691a:	4630      	mov	r0, r6
 800691c:	f011 f970 	bl	8017c00 <_Znwj>
 8006920:	4603      	mov	r3, r0
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8006922:	e9c4 3302 	strd	r3, r3, [r4, #8]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8006926:	441e      	add	r6, r3
 8006928:	6126      	str	r6, [r4, #16]
	  const ptrdiff_t _Num = __last - __first;
 800692a:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
	  if (_Num)
 800692e:	1a56      	subs	r6, r2, r1
 8006930:	d117      	bne.n	8006962 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0+0xa2>
    struct Edge
 8006932:	696b      	ldr	r3, [r5, #20]
	++_M_current;
 8006934:	3518      	adds	r5, #24
 8006936:	45a9      	cmp	r9, r5
 8006938:	f104 0418 	add.w	r4, r4, #24
 800693c:	f844 3c04 	str.w	r3, [r4, #-4]
 8006940:	d017      	beq.n	8006972 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0+0xb2>
 8006942:	782b      	ldrb	r3, [r5, #0]
 8006944:	686a      	ldr	r2, [r5, #4]
 8006946:	7023      	strb	r3, [r4, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8006948:	e9d5 3602 	ldrd	r3, r6, [r5, #8]
 800694c:	1af6      	subs	r6, r6, r3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800694e:	2e00      	cmp	r6, #0
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006950:	e9c4 7702 	strd	r7, r7, [r4, #8]
 8006954:	6062      	str	r2, [r4, #4]
 8006956:	6127      	str	r7, [r4, #16]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006958:	d1de      	bne.n	8006918 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0+0x58>
 800695a:	4633      	mov	r3, r6
 800695c:	e7e1      	b.n	8006922 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0+0x62>
 800695e:	462c      	mov	r4, r5
 8006960:	e7cf      	b.n	8006902 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0+0x42>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8006962:	4618      	mov	r0, r3
 8006964:	4632      	mov	r2, r6
 8006966:	f012 fcbc 	bl	80192e2 <memmove>
 800696a:	4603      	mov	r3, r0
	  return __result + _Num;
 800696c:	4433      	add	r3, r6
	this->_M_impl._M_finish =
 800696e:	60e3      	str	r3, [r4, #12]
 8006970:	e7df      	b.n	8006932 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0+0x72>
	    ++this->_M_impl._M_finish;
 8006972:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006976:	f8ca 4010 	str.w	r4, [sl, #16]
 800697a:	3318      	adds	r3, #24
 800697c:	f8c8 3004 	str.w	r3, [r8, #4]
      }
 8006980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8006984:	460a      	mov	r2, r1
 8006986:	4651      	mov	r1, sl
 8006988:	f7ff fdee 	bl	8006568 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 800698c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    std::__throw_bad_alloc();
 8006990:	f011 f947 	bl	8017c22 <_ZSt17__throw_bad_allocv>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8006994:	2d00      	cmp	r5, #0
 8006996:	dafb      	bge.n	8006990 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0+0xd0>
	      std::__throw_bad_array_new_length();
 8006998:	f011 f946 	bl	8017c28 <_ZSt28__throw_bad_array_new_lengthv>
 800699c:	7ffffff8 	.word	0x7ffffff8

080069a0 <_ZN3jlb5GraphC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 80069a0:	2300      	movs	r3, #0
        Node(char name_, float x_, float y_) : name{name_}, x(x_), y(y_) {}
 80069a2:	2141      	movs	r1, #65	; 0x41
        Graph()
 80069a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        Node(char name_, float x_, float y_) : name{name_}, x(x_), y(y_) {}
 80069a8:	4aab      	ldr	r2, [pc, #684]	; (8006c58 <_ZN3jlb5GraphC1Ev+0x2b8>)
        Graph()
 80069aa:	b087      	sub	sp, #28
        Node(char name_, float x_, float y_) : name{name_}, x(x_), y(y_) {}
 80069ac:	4cab      	ldr	r4, [pc, #684]	; (8006c5c <_ZN3jlb5GraphC1Ev+0x2bc>)
 80069ae:	9100      	str	r1, [sp, #0]
 80069b0:	e9c0 3300 	strd	r3, r3, [r0]
      { emplace_back(std::move(__x)); }
 80069b4:	4669      	mov	r1, sp
	: _M_start(), _M_finish(), _M_end_of_storage()
 80069b6:	6083      	str	r3, [r0, #8]
 80069b8:	9402      	str	r4, [sp, #8]
 80069ba:	e9cd 3303 	strd	r3, r3, [sp, #12]
        Graph()
 80069be:	4604      	mov	r4, r0
        Node(char name_, float x_, float y_) : name{name_}, x(x_), y(y_) {}
 80069c0:	9201      	str	r2, [sp, #4]
 80069c2:	9305      	str	r3, [sp, #20]
      { emplace_back(std::move(__x)); }
 80069c4:	f7ff ff7c 	bl	80068c0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80069c8:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 80069cc:	42b7      	cmp	r7, r6
 80069ce:	d00b      	beq.n	80069e8 <_ZN3jlb5GraphC1Ev+0x48>
 80069d0:	463d      	mov	r5, r7
 80069d2:	68a8      	ldr	r0, [r5, #8]
	if (__p)
 80069d4:	2800      	cmp	r0, #0
 80069d6:	f001 87cd 	beq.w	8008974 <_ZN3jlb5GraphC1Ev+0x1fd4>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80069da:	6929      	ldr	r1, [r5, #16]
 80069dc:	3518      	adds	r5, #24
	::operator delete(__p
 80069de:	1a09      	subs	r1, r1, r0
 80069e0:	f011 f90c 	bl	8017bfc <_ZdlPvj>
 80069e4:	42ae      	cmp	r6, r5
 80069e6:	d1f4      	bne.n	80069d2 <_ZN3jlb5GraphC1Ev+0x32>
	if (__p)
 80069e8:	b127      	cbz	r7, 80069f4 <_ZN3jlb5GraphC1Ev+0x54>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80069ea:	9905      	ldr	r1, [sp, #20]
 80069ec:	4638      	mov	r0, r7
 80069ee:	1bc9      	subs	r1, r1, r7
 80069f0:	f011 f904 	bl	8017bfc <_ZdlPvj>
 80069f4:	2142      	movs	r1, #66	; 0x42
	: _M_start(), _M_finish(), _M_end_of_storage()
 80069f6:	2300      	movs	r3, #0
 80069f8:	4899      	ldr	r0, [pc, #612]	; (8006c60 <_ZN3jlb5GraphC1Ev+0x2c0>)
 80069fa:	4a97      	ldr	r2, [pc, #604]	; (8006c58 <_ZN3jlb5GraphC1Ev+0x2b8>)
 80069fc:	9002      	str	r0, [sp, #8]
 80069fe:	9100      	str	r1, [sp, #0]
      { emplace_back(std::move(__x)); }
 8006a00:	4620      	mov	r0, r4
 8006a02:	4669      	mov	r1, sp
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006a04:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8006a08:	9201      	str	r2, [sp, #4]
 8006a0a:	9305      	str	r3, [sp, #20]
      { emplace_back(std::move(__x)); }
 8006a0c:	f7ff ff58 	bl	80068c0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006a10:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8006a14:	42b7      	cmp	r7, r6
 8006a16:	d00b      	beq.n	8006a30 <_ZN3jlb5GraphC1Ev+0x90>
 8006a18:	463d      	mov	r5, r7
 8006a1a:	68a8      	ldr	r0, [r5, #8]
	if (__p)
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	f001 87af 	beq.w	8008980 <_ZN3jlb5GraphC1Ev+0x1fe0>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006a22:	6929      	ldr	r1, [r5, #16]
 8006a24:	3518      	adds	r5, #24
 8006a26:	1a09      	subs	r1, r1, r0
 8006a28:	f011 f8e8 	bl	8017bfc <_ZdlPvj>
 8006a2c:	42ae      	cmp	r6, r5
 8006a2e:	d1f4      	bne.n	8006a1a <_ZN3jlb5GraphC1Ev+0x7a>
	if (__p)
 8006a30:	b127      	cbz	r7, 8006a3c <_ZN3jlb5GraphC1Ev+0x9c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006a32:	9905      	ldr	r1, [sp, #20]
 8006a34:	4638      	mov	r0, r7
 8006a36:	1bc9      	subs	r1, r1, r7
 8006a38:	f011 f8e0 	bl	8017bfc <_ZdlPvj>
 8006a3c:	2143      	movs	r1, #67	; 0x43
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006a3e:	2300      	movs	r3, #0
 8006a40:	4888      	ldr	r0, [pc, #544]	; (8006c64 <_ZN3jlb5GraphC1Ev+0x2c4>)
 8006a42:	4a89      	ldr	r2, [pc, #548]	; (8006c68 <_ZN3jlb5GraphC1Ev+0x2c8>)
 8006a44:	9002      	str	r0, [sp, #8]
 8006a46:	9100      	str	r1, [sp, #0]
      { emplace_back(std::move(__x)); }
 8006a48:	4620      	mov	r0, r4
 8006a4a:	4669      	mov	r1, sp
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006a4c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8006a50:	9201      	str	r2, [sp, #4]
 8006a52:	9305      	str	r3, [sp, #20]
      { emplace_back(std::move(__x)); }
 8006a54:	f7ff ff34 	bl	80068c0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006a58:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8006a5c:	42b7      	cmp	r7, r6
 8006a5e:	d00b      	beq.n	8006a78 <_ZN3jlb5GraphC1Ev+0xd8>
 8006a60:	463d      	mov	r5, r7
 8006a62:	68a8      	ldr	r0, [r5, #8]
	if (__p)
 8006a64:	2800      	cmp	r0, #0
 8006a66:	f001 8791 	beq.w	800898c <_ZN3jlb5GraphC1Ev+0x1fec>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006a6a:	6929      	ldr	r1, [r5, #16]
 8006a6c:	3518      	adds	r5, #24
 8006a6e:	1a09      	subs	r1, r1, r0
 8006a70:	f011 f8c4 	bl	8017bfc <_ZdlPvj>
 8006a74:	42ae      	cmp	r6, r5
 8006a76:	d1f4      	bne.n	8006a62 <_ZN3jlb5GraphC1Ev+0xc2>
	if (__p)
 8006a78:	b127      	cbz	r7, 8006a84 <_ZN3jlb5GraphC1Ev+0xe4>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006a7a:	9905      	ldr	r1, [sp, #20]
 8006a7c:	4638      	mov	r0, r7
 8006a7e:	1bc9      	subs	r1, r1, r7
 8006a80:	f011 f8bc 	bl	8017bfc <_ZdlPvj>
 8006a84:	2144      	movs	r1, #68	; 0x44
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006a86:	2300      	movs	r3, #0
 8006a88:	4878      	ldr	r0, [pc, #480]	; (8006c6c <_ZN3jlb5GraphC1Ev+0x2cc>)
 8006a8a:	4a77      	ldr	r2, [pc, #476]	; (8006c68 <_ZN3jlb5GraphC1Ev+0x2c8>)
 8006a8c:	9002      	str	r0, [sp, #8]
 8006a8e:	9100      	str	r1, [sp, #0]
      { emplace_back(std::move(__x)); }
 8006a90:	4620      	mov	r0, r4
 8006a92:	4669      	mov	r1, sp
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006a94:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8006a98:	9201      	str	r2, [sp, #4]
 8006a9a:	9305      	str	r3, [sp, #20]
      { emplace_back(std::move(__x)); }
 8006a9c:	f7ff ff10 	bl	80068c0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006aa0:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8006aa4:	42b7      	cmp	r7, r6
 8006aa6:	d00b      	beq.n	8006ac0 <_ZN3jlb5GraphC1Ev+0x120>
 8006aa8:	463d      	mov	r5, r7
 8006aaa:	68a8      	ldr	r0, [r5, #8]
	if (__p)
 8006aac:	2800      	cmp	r0, #0
 8006aae:	f001 8773 	beq.w	8008998 <_ZN3jlb5GraphC1Ev+0x1ff8>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006ab2:	6929      	ldr	r1, [r5, #16]
 8006ab4:	3518      	adds	r5, #24
 8006ab6:	1a09      	subs	r1, r1, r0
 8006ab8:	f011 f8a0 	bl	8017bfc <_ZdlPvj>
 8006abc:	42ae      	cmp	r6, r5
 8006abe:	d1f4      	bne.n	8006aaa <_ZN3jlb5GraphC1Ev+0x10a>
	if (__p)
 8006ac0:	b127      	cbz	r7, 8006acc <_ZN3jlb5GraphC1Ev+0x12c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006ac2:	9905      	ldr	r1, [sp, #20]
 8006ac4:	4638      	mov	r0, r7
 8006ac6:	1bc9      	subs	r1, r1, r7
 8006ac8:	f011 f898 	bl	8017bfc <_ZdlPvj>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006acc:	2300      	movs	r3, #0
 8006ace:	2545      	movs	r5, #69	; 0x45
 8006ad0:	4a65      	ldr	r2, [pc, #404]	; (8006c68 <_ZN3jlb5GraphC1Ev+0x2c8>)
      { emplace_back(std::move(__x)); }
 8006ad2:	4669      	mov	r1, sp
 8006ad4:	4620      	mov	r0, r4
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006ad6:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8006ada:	9303      	str	r3, [sp, #12]
 8006adc:	9201      	str	r2, [sp, #4]
 8006ade:	9500      	str	r5, [sp, #0]
 8006ae0:	9202      	str	r2, [sp, #8]
      { emplace_back(std::move(__x)); }
 8006ae2:	f7ff feed 	bl	80068c0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006ae6:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8006aea:	42b7      	cmp	r7, r6
 8006aec:	d00b      	beq.n	8006b06 <_ZN3jlb5GraphC1Ev+0x166>
 8006aee:	463d      	mov	r5, r7
 8006af0:	68a8      	ldr	r0, [r5, #8]
	if (__p)
 8006af2:	2800      	cmp	r0, #0
 8006af4:	f001 8756 	beq.w	80089a4 <_ZN3jlb5GraphC1Ev+0x2004>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006af8:	6929      	ldr	r1, [r5, #16]
 8006afa:	3518      	adds	r5, #24
 8006afc:	1a09      	subs	r1, r1, r0
 8006afe:	f011 f87d 	bl	8017bfc <_ZdlPvj>
 8006b02:	42ae      	cmp	r6, r5
 8006b04:	d1f4      	bne.n	8006af0 <_ZN3jlb5GraphC1Ev+0x150>
	if (__p)
 8006b06:	b127      	cbz	r7, 8006b12 <_ZN3jlb5GraphC1Ev+0x172>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006b08:	9905      	ldr	r1, [sp, #20]
 8006b0a:	4638      	mov	r0, r7
 8006b0c:	1bc9      	subs	r1, r1, r7
 8006b0e:	f011 f875 	bl	8017bfc <_ZdlPvj>
 8006b12:	2146      	movs	r1, #70	; 0x46
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006b14:	2300      	movs	r3, #0
 8006b16:	4851      	ldr	r0, [pc, #324]	; (8006c5c <_ZN3jlb5GraphC1Ev+0x2bc>)
 8006b18:	4a51      	ldr	r2, [pc, #324]	; (8006c60 <_ZN3jlb5GraphC1Ev+0x2c0>)
 8006b1a:	9002      	str	r0, [sp, #8]
 8006b1c:	9100      	str	r1, [sp, #0]
      { emplace_back(std::move(__x)); }
 8006b1e:	4620      	mov	r0, r4
 8006b20:	4669      	mov	r1, sp
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006b22:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8006b26:	9201      	str	r2, [sp, #4]
 8006b28:	9305      	str	r3, [sp, #20]
      { emplace_back(std::move(__x)); }
 8006b2a:	f7ff fec9 	bl	80068c0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006b2e:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8006b32:	42b7      	cmp	r7, r6
 8006b34:	d00b      	beq.n	8006b4e <_ZN3jlb5GraphC1Ev+0x1ae>
 8006b36:	463d      	mov	r5, r7
 8006b38:	68a8      	ldr	r0, [r5, #8]
	if (__p)
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	f001 8738 	beq.w	80089b0 <_ZN3jlb5GraphC1Ev+0x2010>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006b40:	6929      	ldr	r1, [r5, #16]
 8006b42:	3518      	adds	r5, #24
 8006b44:	1a09      	subs	r1, r1, r0
 8006b46:	f011 f859 	bl	8017bfc <_ZdlPvj>
 8006b4a:	42ae      	cmp	r6, r5
 8006b4c:	d1f4      	bne.n	8006b38 <_ZN3jlb5GraphC1Ev+0x198>
	if (__p)
 8006b4e:	b127      	cbz	r7, 8006b5a <_ZN3jlb5GraphC1Ev+0x1ba>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006b50:	9905      	ldr	r1, [sp, #20]
 8006b52:	4638      	mov	r0, r7
 8006b54:	1bc9      	subs	r1, r1, r7
 8006b56:	f011 f851 	bl	8017bfc <_ZdlPvj>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	2547      	movs	r5, #71	; 0x47
 8006b5e:	4a40      	ldr	r2, [pc, #256]	; (8006c60 <_ZN3jlb5GraphC1Ev+0x2c0>)
      { emplace_back(std::move(__x)); }
 8006b60:	4669      	mov	r1, sp
 8006b62:	4620      	mov	r0, r4
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006b64:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8006b68:	9303      	str	r3, [sp, #12]
 8006b6a:	9201      	str	r2, [sp, #4]
 8006b6c:	9500      	str	r5, [sp, #0]
 8006b6e:	9202      	str	r2, [sp, #8]
      { emplace_back(std::move(__x)); }
 8006b70:	f7ff fea6 	bl	80068c0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006b74:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8006b78:	42b7      	cmp	r7, r6
 8006b7a:	d00b      	beq.n	8006b94 <_ZN3jlb5GraphC1Ev+0x1f4>
 8006b7c:	463d      	mov	r5, r7
 8006b7e:	68a8      	ldr	r0, [r5, #8]
	if (__p)
 8006b80:	2800      	cmp	r0, #0
 8006b82:	f001 871b 	beq.w	80089bc <_ZN3jlb5GraphC1Ev+0x201c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006b86:	6929      	ldr	r1, [r5, #16]
 8006b88:	3518      	adds	r5, #24
 8006b8a:	1a09      	subs	r1, r1, r0
 8006b8c:	f011 f836 	bl	8017bfc <_ZdlPvj>
 8006b90:	42ae      	cmp	r6, r5
 8006b92:	d1f4      	bne.n	8006b7e <_ZN3jlb5GraphC1Ev+0x1de>
	if (__p)
 8006b94:	b127      	cbz	r7, 8006ba0 <_ZN3jlb5GraphC1Ev+0x200>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006b96:	9905      	ldr	r1, [sp, #20]
 8006b98:	4638      	mov	r0, r7
 8006b9a:	1bc9      	subs	r1, r1, r7
 8006b9c:	f011 f82e 	bl	8017bfc <_ZdlPvj>
 8006ba0:	2148      	movs	r1, #72	; 0x48
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	482f      	ldr	r0, [pc, #188]	; (8006c64 <_ZN3jlb5GraphC1Ev+0x2c4>)
 8006ba6:	4a31      	ldr	r2, [pc, #196]	; (8006c6c <_ZN3jlb5GraphC1Ev+0x2cc>)
 8006ba8:	9002      	str	r0, [sp, #8]
 8006baa:	9100      	str	r1, [sp, #0]
      { emplace_back(std::move(__x)); }
 8006bac:	4620      	mov	r0, r4
 8006bae:	4669      	mov	r1, sp
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006bb0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8006bb4:	9201      	str	r2, [sp, #4]
 8006bb6:	9305      	str	r3, [sp, #20]
      { emplace_back(std::move(__x)); }
 8006bb8:	f7ff fe82 	bl	80068c0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006bbc:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8006bc0:	42b7      	cmp	r7, r6
 8006bc2:	d00b      	beq.n	8006bdc <_ZN3jlb5GraphC1Ev+0x23c>
 8006bc4:	463d      	mov	r5, r7
 8006bc6:	68a8      	ldr	r0, [r5, #8]
	if (__p)
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	f001 86fd 	beq.w	80089c8 <_ZN3jlb5GraphC1Ev+0x2028>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006bce:	6929      	ldr	r1, [r5, #16]
 8006bd0:	3518      	adds	r5, #24
 8006bd2:	1a09      	subs	r1, r1, r0
 8006bd4:	f011 f812 	bl	8017bfc <_ZdlPvj>
 8006bd8:	42ae      	cmp	r6, r5
 8006bda:	d1f4      	bne.n	8006bc6 <_ZN3jlb5GraphC1Ev+0x226>
	if (__p)
 8006bdc:	b127      	cbz	r7, 8006be8 <_ZN3jlb5GraphC1Ev+0x248>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006bde:	9905      	ldr	r1, [sp, #20]
 8006be0:	4638      	mov	r0, r7
 8006be2:	1bc9      	subs	r1, r1, r7
 8006be4:	f011 f80a 	bl	8017bfc <_ZdlPvj>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006be8:	2300      	movs	r3, #0
 8006bea:	2549      	movs	r5, #73	; 0x49
 8006bec:	4a1f      	ldr	r2, [pc, #124]	; (8006c6c <_ZN3jlb5GraphC1Ev+0x2cc>)
      { emplace_back(std::move(__x)); }
 8006bee:	4669      	mov	r1, sp
 8006bf0:	4620      	mov	r0, r4
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006bf2:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8006bf6:	9303      	str	r3, [sp, #12]
 8006bf8:	9201      	str	r2, [sp, #4]
 8006bfa:	9500      	str	r5, [sp, #0]
 8006bfc:	9202      	str	r2, [sp, #8]
      { emplace_back(std::move(__x)); }
 8006bfe:	f7ff fe5f 	bl	80068c0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006c02:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8006c06:	42b7      	cmp	r7, r6
 8006c08:	d00b      	beq.n	8006c22 <_ZN3jlb5GraphC1Ev+0x282>
 8006c0a:	463d      	mov	r5, r7
 8006c0c:	68a8      	ldr	r0, [r5, #8]
	if (__p)
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	f001 86e0 	beq.w	80089d4 <_ZN3jlb5GraphC1Ev+0x2034>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006c14:	6929      	ldr	r1, [r5, #16]
 8006c16:	3518      	adds	r5, #24
 8006c18:	1a09      	subs	r1, r1, r0
 8006c1a:	f010 ffef 	bl	8017bfc <_ZdlPvj>
 8006c1e:	42ae      	cmp	r6, r5
 8006c20:	d1f4      	bne.n	8006c0c <_ZN3jlb5GraphC1Ev+0x26c>
	if (__p)
 8006c22:	b127      	cbz	r7, 8006c2e <_ZN3jlb5GraphC1Ev+0x28e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006c24:	9905      	ldr	r1, [sp, #20]
 8006c26:	4638      	mov	r0, r7
 8006c28:	1bc9      	subs	r1, r1, r7
 8006c2a:	f010 ffe7 	bl	8017bfc <_ZdlPvj>
 8006c2e:	214a      	movs	r1, #74	; 0x4a
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006c30:	2300      	movs	r3, #0
 8006c32:	480d      	ldr	r0, [pc, #52]	; (8006c68 <_ZN3jlb5GraphC1Ev+0x2c8>)
 8006c34:	4a0d      	ldr	r2, [pc, #52]	; (8006c6c <_ZN3jlb5GraphC1Ev+0x2cc>)
 8006c36:	9002      	str	r0, [sp, #8]
 8006c38:	9100      	str	r1, [sp, #0]
      { emplace_back(std::move(__x)); }
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	4669      	mov	r1, sp
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006c3e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8006c42:	9201      	str	r2, [sp, #4]
 8006c44:	9305      	str	r3, [sp, #20]
      { emplace_back(std::move(__x)); }
 8006c46:	f7ff fe3b 	bl	80068c0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006c4a:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8006c4e:	42b7      	cmp	r7, r6
 8006c50:	d019      	beq.n	8006c86 <_ZN3jlb5GraphC1Ev+0x2e6>
 8006c52:	463d      	mov	r5, r7
 8006c54:	e00c      	b.n	8006c70 <_ZN3jlb5GraphC1Ev+0x2d0>
 8006c56:	bf00      	nop
 8006c58:	40d33334 	.word	0x40d33334
 8006c5c:	40866667 	.word	0x40866667
 8006c60:	40accccd 	.word	0x40accccd
 8006c64:	40666667 	.word	0x40666667
 8006c68:	40c00000 	.word	0x40c00000
 8006c6c:	4099999a 	.word	0x4099999a
 8006c70:	68a8      	ldr	r0, [r5, #8]
	if (__p)
 8006c72:	2800      	cmp	r0, #0
 8006c74:	f001 86b4 	beq.w	80089e0 <_ZN3jlb5GraphC1Ev+0x2040>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006c78:	6929      	ldr	r1, [r5, #16]
 8006c7a:	3518      	adds	r5, #24
 8006c7c:	1a09      	subs	r1, r1, r0
 8006c7e:	f010 ffbd 	bl	8017bfc <_ZdlPvj>
 8006c82:	42ae      	cmp	r6, r5
 8006c84:	d1f4      	bne.n	8006c70 <_ZN3jlb5GraphC1Ev+0x2d0>
	if (__p)
 8006c86:	b127      	cbz	r7, 8006c92 <_ZN3jlb5GraphC1Ev+0x2f2>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006c88:	9905      	ldr	r1, [sp, #20]
 8006c8a:	4638      	mov	r0, r7
 8006c8c:	1bc9      	subs	r1, r1, r7
 8006c8e:	f010 ffb5 	bl	8017bfc <_ZdlPvj>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006c92:	2300      	movs	r3, #0
 8006c94:	254b      	movs	r5, #75	; 0x4b
 8006c96:	4aa9      	ldr	r2, [pc, #676]	; (8006f3c <_ZN3jlb5GraphC1Ev+0x59c>)
      { emplace_back(std::move(__x)); }
 8006c98:	4669      	mov	r1, sp
 8006c9a:	4620      	mov	r0, r4
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006c9c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8006ca0:	9303      	str	r3, [sp, #12]
 8006ca2:	9201      	str	r2, [sp, #4]
 8006ca4:	9500      	str	r5, [sp, #0]
 8006ca6:	9202      	str	r2, [sp, #8]
      { emplace_back(std::move(__x)); }
 8006ca8:	f7ff fe0a 	bl	80068c0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006cac:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8006cb0:	42b7      	cmp	r7, r6
 8006cb2:	d00b      	beq.n	8006ccc <_ZN3jlb5GraphC1Ev+0x32c>
 8006cb4:	463d      	mov	r5, r7
 8006cb6:	68a8      	ldr	r0, [r5, #8]
	if (__p)
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	f001 8697 	beq.w	80089ec <_ZN3jlb5GraphC1Ev+0x204c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006cbe:	6929      	ldr	r1, [r5, #16]
 8006cc0:	3518      	adds	r5, #24
 8006cc2:	1a09      	subs	r1, r1, r0
 8006cc4:	f010 ff9a 	bl	8017bfc <_ZdlPvj>
 8006cc8:	42ae      	cmp	r6, r5
 8006cca:	d1f4      	bne.n	8006cb6 <_ZN3jlb5GraphC1Ev+0x316>
	if (__p)
 8006ccc:	b127      	cbz	r7, 8006cd8 <_ZN3jlb5GraphC1Ev+0x338>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006cce:	9905      	ldr	r1, [sp, #20]
 8006cd0:	4638      	mov	r0, r7
 8006cd2:	1bc9      	subs	r1, r1, r7
 8006cd4:	f010 ff92 	bl	8017bfc <_ZdlPvj>
 8006cd8:	214c      	movs	r1, #76	; 0x4c
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006cda:	2300      	movs	r3, #0
 8006cdc:	4898      	ldr	r0, [pc, #608]	; (8006f40 <_ZN3jlb5GraphC1Ev+0x5a0>)
 8006cde:	4a97      	ldr	r2, [pc, #604]	; (8006f3c <_ZN3jlb5GraphC1Ev+0x59c>)
 8006ce0:	9002      	str	r0, [sp, #8]
 8006ce2:	9100      	str	r1, [sp, #0]
      { emplace_back(std::move(__x)); }
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	4669      	mov	r1, sp
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006ce8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8006cec:	9201      	str	r2, [sp, #4]
 8006cee:	9305      	str	r3, [sp, #20]
      { emplace_back(std::move(__x)); }
 8006cf0:	f7ff fde6 	bl	80068c0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006cf4:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8006cf8:	42b7      	cmp	r7, r6
 8006cfa:	d00b      	beq.n	8006d14 <_ZN3jlb5GraphC1Ev+0x374>
 8006cfc:	463d      	mov	r5, r7
 8006cfe:	68a8      	ldr	r0, [r5, #8]
	if (__p)
 8006d00:	2800      	cmp	r0, #0
 8006d02:	f001 8679 	beq.w	80089f8 <_ZN3jlb5GraphC1Ev+0x2058>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006d06:	6929      	ldr	r1, [r5, #16]
 8006d08:	3518      	adds	r5, #24
 8006d0a:	1a09      	subs	r1, r1, r0
 8006d0c:	f010 ff76 	bl	8017bfc <_ZdlPvj>
 8006d10:	42ae      	cmp	r6, r5
 8006d12:	d1f4      	bne.n	8006cfe <_ZN3jlb5GraphC1Ev+0x35e>
	if (__p)
 8006d14:	b127      	cbz	r7, 8006d20 <_ZN3jlb5GraphC1Ev+0x380>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006d16:	9905      	ldr	r1, [sp, #20]
 8006d18:	4638      	mov	r0, r7
 8006d1a:	1bc9      	subs	r1, r1, r7
 8006d1c:	f010 ff6e 	bl	8017bfc <_ZdlPvj>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006d20:	2300      	movs	r3, #0
 8006d22:	254d      	movs	r5, #77	; 0x4d
 8006d24:	4a87      	ldr	r2, [pc, #540]	; (8006f44 <_ZN3jlb5GraphC1Ev+0x5a4>)
      { emplace_back(std::move(__x)); }
 8006d26:	4669      	mov	r1, sp
 8006d28:	4620      	mov	r0, r4
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006d2a:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8006d2e:	9303      	str	r3, [sp, #12]
 8006d30:	9201      	str	r2, [sp, #4]
 8006d32:	9500      	str	r5, [sp, #0]
 8006d34:	9202      	str	r2, [sp, #8]
      { emplace_back(std::move(__x)); }
 8006d36:	f7ff fdc3 	bl	80068c0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006d3a:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8006d3e:	42b7      	cmp	r7, r6
 8006d40:	d00b      	beq.n	8006d5a <_ZN3jlb5GraphC1Ev+0x3ba>
 8006d42:	463d      	mov	r5, r7
 8006d44:	68a8      	ldr	r0, [r5, #8]
	if (__p)
 8006d46:	2800      	cmp	r0, #0
 8006d48:	f001 865c 	beq.w	8008a04 <_ZN3jlb5GraphC1Ev+0x2064>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006d4c:	6929      	ldr	r1, [r5, #16]
 8006d4e:	3518      	adds	r5, #24
 8006d50:	1a09      	subs	r1, r1, r0
 8006d52:	f010 ff53 	bl	8017bfc <_ZdlPvj>
 8006d56:	42ae      	cmp	r6, r5
 8006d58:	d1f4      	bne.n	8006d44 <_ZN3jlb5GraphC1Ev+0x3a4>
	if (__p)
 8006d5a:	b127      	cbz	r7, 8006d66 <_ZN3jlb5GraphC1Ev+0x3c6>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006d5c:	9905      	ldr	r1, [sp, #20]
 8006d5e:	4638      	mov	r0, r7
 8006d60:	1bc9      	subs	r1, r1, r7
 8006d62:	f010 ff4b 	bl	8017bfc <_ZdlPvj>
 8006d66:	214e      	movs	r1, #78	; 0x4e
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006d68:	2300      	movs	r3, #0
 8006d6a:	4877      	ldr	r0, [pc, #476]	; (8006f48 <_ZN3jlb5GraphC1Ev+0x5a8>)
 8006d6c:	4a75      	ldr	r2, [pc, #468]	; (8006f44 <_ZN3jlb5GraphC1Ev+0x5a4>)
 8006d6e:	9002      	str	r0, [sp, #8]
 8006d70:	9100      	str	r1, [sp, #0]
      { emplace_back(std::move(__x)); }
 8006d72:	4620      	mov	r0, r4
 8006d74:	4669      	mov	r1, sp
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006d76:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8006d7a:	9201      	str	r2, [sp, #4]
 8006d7c:	9305      	str	r3, [sp, #20]
      { emplace_back(std::move(__x)); }
 8006d7e:	f7ff fd9f 	bl	80068c0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006d82:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8006d86:	42b7      	cmp	r7, r6
 8006d88:	d00b      	beq.n	8006da2 <_ZN3jlb5GraphC1Ev+0x402>
 8006d8a:	463d      	mov	r5, r7
 8006d8c:	68a8      	ldr	r0, [r5, #8]
	if (__p)
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	f001 863e 	beq.w	8008a10 <_ZN3jlb5GraphC1Ev+0x2070>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006d94:	6929      	ldr	r1, [r5, #16]
 8006d96:	3518      	adds	r5, #24
 8006d98:	1a09      	subs	r1, r1, r0
 8006d9a:	f010 ff2f 	bl	8017bfc <_ZdlPvj>
 8006d9e:	42ae      	cmp	r6, r5
 8006da0:	d1f4      	bne.n	8006d8c <_ZN3jlb5GraphC1Ev+0x3ec>
	if (__p)
 8006da2:	b127      	cbz	r7, 8006dae <_ZN3jlb5GraphC1Ev+0x40e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006da4:	9905      	ldr	r1, [sp, #20]
 8006da6:	4638      	mov	r0, r7
 8006da8:	1bc9      	subs	r1, r1, r7
 8006daa:	f010 ff27 	bl	8017bfc <_ZdlPvj>
 8006dae:	214f      	movs	r1, #79	; 0x4f
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006db0:	2300      	movs	r3, #0
 8006db2:	4866      	ldr	r0, [pc, #408]	; (8006f4c <_ZN3jlb5GraphC1Ev+0x5ac>)
 8006db4:	4a63      	ldr	r2, [pc, #396]	; (8006f44 <_ZN3jlb5GraphC1Ev+0x5a4>)
 8006db6:	9002      	str	r0, [sp, #8]
 8006db8:	9100      	str	r1, [sp, #0]
      { emplace_back(std::move(__x)); }
 8006dba:	4620      	mov	r0, r4
 8006dbc:	4669      	mov	r1, sp
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006dbe:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8006dc2:	9201      	str	r2, [sp, #4]
 8006dc4:	9305      	str	r3, [sp, #20]
      { emplace_back(std::move(__x)); }
 8006dc6:	f7ff fd7b 	bl	80068c0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006dca:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8006dce:	42b7      	cmp	r7, r6
 8006dd0:	d00b      	beq.n	8006dea <_ZN3jlb5GraphC1Ev+0x44a>
 8006dd2:	463d      	mov	r5, r7
 8006dd4:	68a8      	ldr	r0, [r5, #8]
	if (__p)
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	f001 8620 	beq.w	8008a1c <_ZN3jlb5GraphC1Ev+0x207c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006ddc:	6929      	ldr	r1, [r5, #16]
 8006dde:	3518      	adds	r5, #24
 8006de0:	1a09      	subs	r1, r1, r0
 8006de2:	f010 ff0b 	bl	8017bfc <_ZdlPvj>
 8006de6:	42ae      	cmp	r6, r5
 8006de8:	d1f4      	bne.n	8006dd4 <_ZN3jlb5GraphC1Ev+0x434>
	if (__p)
 8006dea:	b127      	cbz	r7, 8006df6 <_ZN3jlb5GraphC1Ev+0x456>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006dec:	9905      	ldr	r1, [sp, #20]
 8006dee:	4638      	mov	r0, r7
 8006df0:	1bc9      	subs	r1, r1, r7
 8006df2:	f010 ff03 	bl	8017bfc <_ZdlPvj>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006df6:	2300      	movs	r3, #0
 8006df8:	2550      	movs	r5, #80	; 0x50
 8006dfa:	4a55      	ldr	r2, [pc, #340]	; (8006f50 <_ZN3jlb5GraphC1Ev+0x5b0>)
      { emplace_back(std::move(__x)); }
 8006dfc:	4669      	mov	r1, sp
 8006dfe:	4620      	mov	r0, r4
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006e00:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8006e04:	9303      	str	r3, [sp, #12]
 8006e06:	9201      	str	r2, [sp, #4]
 8006e08:	9500      	str	r5, [sp, #0]
 8006e0a:	9202      	str	r2, [sp, #8]
      { emplace_back(std::move(__x)); }
 8006e0c:	f7ff fd58 	bl	80068c0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006e10:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8006e14:	42b7      	cmp	r7, r6
 8006e16:	d00b      	beq.n	8006e30 <_ZN3jlb5GraphC1Ev+0x490>
 8006e18:	463d      	mov	r5, r7
 8006e1a:	68a8      	ldr	r0, [r5, #8]
	if (__p)
 8006e1c:	2800      	cmp	r0, #0
 8006e1e:	f001 8603 	beq.w	8008a28 <_ZN3jlb5GraphC1Ev+0x2088>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006e22:	6929      	ldr	r1, [r5, #16]
 8006e24:	3518      	adds	r5, #24
 8006e26:	1a09      	subs	r1, r1, r0
 8006e28:	f010 fee8 	bl	8017bfc <_ZdlPvj>
 8006e2c:	42ae      	cmp	r6, r5
 8006e2e:	d1f4      	bne.n	8006e1a <_ZN3jlb5GraphC1Ev+0x47a>
	if (__p)
 8006e30:	b127      	cbz	r7, 8006e3c <_ZN3jlb5GraphC1Ev+0x49c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006e32:	9905      	ldr	r1, [sp, #20]
 8006e34:	4638      	mov	r0, r7
 8006e36:	1bc9      	subs	r1, r1, r7
 8006e38:	f010 fee0 	bl	8017bfc <_ZdlPvj>
 8006e3c:	2151      	movs	r1, #81	; 0x51
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006e3e:	2300      	movs	r3, #0
 8006e40:	4840      	ldr	r0, [pc, #256]	; (8006f44 <_ZN3jlb5GraphC1Ev+0x5a4>)
 8006e42:	4a43      	ldr	r2, [pc, #268]	; (8006f50 <_ZN3jlb5GraphC1Ev+0x5b0>)
 8006e44:	9002      	str	r0, [sp, #8]
 8006e46:	9100      	str	r1, [sp, #0]
      { emplace_back(std::move(__x)); }
 8006e48:	4620      	mov	r0, r4
 8006e4a:	4669      	mov	r1, sp
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006e4c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8006e50:	9201      	str	r2, [sp, #4]
 8006e52:	9305      	str	r3, [sp, #20]
      { emplace_back(std::move(__x)); }
 8006e54:	f7ff fd34 	bl	80068c0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006e58:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8006e5c:	42b7      	cmp	r7, r6
 8006e5e:	d00b      	beq.n	8006e78 <_ZN3jlb5GraphC1Ev+0x4d8>
 8006e60:	463d      	mov	r5, r7
 8006e62:	68a8      	ldr	r0, [r5, #8]
	if (__p)
 8006e64:	2800      	cmp	r0, #0
 8006e66:	f001 854b 	beq.w	8008900 <_ZN3jlb5GraphC1Ev+0x1f60>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006e6a:	6929      	ldr	r1, [r5, #16]
 8006e6c:	3518      	adds	r5, #24
 8006e6e:	1a09      	subs	r1, r1, r0
 8006e70:	f010 fec4 	bl	8017bfc <_ZdlPvj>
 8006e74:	42b5      	cmp	r5, r6
 8006e76:	d1f4      	bne.n	8006e62 <_ZN3jlb5GraphC1Ev+0x4c2>
	if (__p)
 8006e78:	b127      	cbz	r7, 8006e84 <_ZN3jlb5GraphC1Ev+0x4e4>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006e7a:	9905      	ldr	r1, [sp, #20]
 8006e7c:	4638      	mov	r0, r7
 8006e7e:	1bc9      	subs	r1, r1, r7
 8006e80:	f010 febc 	bl	8017bfc <_ZdlPvj>
 8006e84:	2152      	movs	r1, #82	; 0x52
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006e86:	2300      	movs	r3, #0
 8006e88:	482c      	ldr	r0, [pc, #176]	; (8006f3c <_ZN3jlb5GraphC1Ev+0x59c>)
 8006e8a:	4a31      	ldr	r2, [pc, #196]	; (8006f50 <_ZN3jlb5GraphC1Ev+0x5b0>)
 8006e8c:	9002      	str	r0, [sp, #8]
 8006e8e:	9100      	str	r1, [sp, #0]
      { emplace_back(std::move(__x)); }
 8006e90:	4620      	mov	r0, r4
 8006e92:	4669      	mov	r1, sp
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006e94:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8006e98:	9201      	str	r2, [sp, #4]
 8006e9a:	9305      	str	r3, [sp, #20]
      { emplace_back(std::move(__x)); }
 8006e9c:	f7ff fd10 	bl	80068c0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006ea0:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8006ea4:	42b7      	cmp	r7, r6
 8006ea6:	d00b      	beq.n	8006ec0 <_ZN3jlb5GraphC1Ev+0x520>
 8006ea8:	463d      	mov	r5, r7
 8006eaa:	68a8      	ldr	r0, [r5, #8]
	if (__p)
 8006eac:	2800      	cmp	r0, #0
 8006eae:	f001 8537 	beq.w	8008920 <_ZN3jlb5GraphC1Ev+0x1f80>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006eb2:	6929      	ldr	r1, [r5, #16]
 8006eb4:	3518      	adds	r5, #24
 8006eb6:	1a09      	subs	r1, r1, r0
 8006eb8:	f010 fea0 	bl	8017bfc <_ZdlPvj>
 8006ebc:	42ae      	cmp	r6, r5
 8006ebe:	d1f4      	bne.n	8006eaa <_ZN3jlb5GraphC1Ev+0x50a>
	if (__p)
 8006ec0:	b127      	cbz	r7, 8006ecc <_ZN3jlb5GraphC1Ev+0x52c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006ec2:	9905      	ldr	r1, [sp, #20]
 8006ec4:	4638      	mov	r0, r7
 8006ec6:	1bc9      	subs	r1, r1, r7
 8006ec8:	f010 fe98 	bl	8017bfc <_ZdlPvj>
 8006ecc:	2153      	movs	r1, #83	; 0x53
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006ece:	2300      	movs	r3, #0
 8006ed0:	481d      	ldr	r0, [pc, #116]	; (8006f48 <_ZN3jlb5GraphC1Ev+0x5a8>)
 8006ed2:	4a1f      	ldr	r2, [pc, #124]	; (8006f50 <_ZN3jlb5GraphC1Ev+0x5b0>)
 8006ed4:	9002      	str	r0, [sp, #8]
 8006ed6:	9100      	str	r1, [sp, #0]
      { emplace_back(std::move(__x)); }
 8006ed8:	4620      	mov	r0, r4
 8006eda:	4669      	mov	r1, sp
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006edc:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8006ee0:	9201      	str	r2, [sp, #4]
 8006ee2:	9305      	str	r3, [sp, #20]
      { emplace_back(std::move(__x)); }
 8006ee4:	f7ff fcec 	bl	80068c0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006ee8:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8006eec:	42b7      	cmp	r7, r6
 8006eee:	d00b      	beq.n	8006f08 <_ZN3jlb5GraphC1Ev+0x568>
 8006ef0:	463d      	mov	r5, r7
 8006ef2:	68a8      	ldr	r0, [r5, #8]
	if (__p)
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	f001 8519 	beq.w	800892c <_ZN3jlb5GraphC1Ev+0x1f8c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006efa:	6929      	ldr	r1, [r5, #16]
 8006efc:	3518      	adds	r5, #24
 8006efe:	1a09      	subs	r1, r1, r0
 8006f00:	f010 fe7c 	bl	8017bfc <_ZdlPvj>
 8006f04:	42b5      	cmp	r5, r6
 8006f06:	d1f4      	bne.n	8006ef2 <_ZN3jlb5GraphC1Ev+0x552>
	if (__p)
 8006f08:	b127      	cbz	r7, 8006f14 <_ZN3jlb5GraphC1Ev+0x574>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006f0a:	9905      	ldr	r1, [sp, #20]
 8006f0c:	4638      	mov	r0, r7
 8006f0e:	1bc9      	subs	r1, r1, r7
 8006f10:	f010 fe74 	bl	8017bfc <_ZdlPvj>
 8006f14:	2154      	movs	r1, #84	; 0x54
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006f16:	2300      	movs	r3, #0
 8006f18:	4809      	ldr	r0, [pc, #36]	; (8006f40 <_ZN3jlb5GraphC1Ev+0x5a0>)
 8006f1a:	4a0d      	ldr	r2, [pc, #52]	; (8006f50 <_ZN3jlb5GraphC1Ev+0x5b0>)
 8006f1c:	9002      	str	r0, [sp, #8]
 8006f1e:	9100      	str	r1, [sp, #0]
      { emplace_back(std::move(__x)); }
 8006f20:	4620      	mov	r0, r4
 8006f22:	4669      	mov	r1, sp
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006f24:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8006f28:	9201      	str	r2, [sp, #4]
 8006f2a:	9305      	str	r3, [sp, #20]
      { emplace_back(std::move(__x)); }
 8006f2c:	f7ff fcc8 	bl	80068c0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006f30:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8006f34:	42b7      	cmp	r7, r6
 8006f36:	d018      	beq.n	8006f6a <_ZN3jlb5GraphC1Ev+0x5ca>
 8006f38:	463d      	mov	r5, r7
 8006f3a:	e00b      	b.n	8006f54 <_ZN3jlb5GraphC1Ev+0x5b4>
 8006f3c:	40866667 	.word	0x40866667
 8006f40:	40accccd 	.word	0x40accccd
 8006f44:	40666667 	.word	0x40666667
 8006f48:	4099999a 	.word	0x4099999a
 8006f4c:	40c00000 	.word	0x40c00000
 8006f50:	40400000 	.word	0x40400000
 8006f54:	68a8      	ldr	r0, [r5, #8]
	if (__p)
 8006f56:	2800      	cmp	r0, #0
 8006f58:	f001 84ee 	beq.w	8008938 <_ZN3jlb5GraphC1Ev+0x1f98>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006f5c:	6929      	ldr	r1, [r5, #16]
 8006f5e:	3518      	adds	r5, #24
 8006f60:	1a09      	subs	r1, r1, r0
 8006f62:	f010 fe4b 	bl	8017bfc <_ZdlPvj>
 8006f66:	42ae      	cmp	r6, r5
 8006f68:	d1f4      	bne.n	8006f54 <_ZN3jlb5GraphC1Ev+0x5b4>
	if (__p)
 8006f6a:	b127      	cbz	r7, 8006f76 <_ZN3jlb5GraphC1Ev+0x5d6>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006f6c:	9905      	ldr	r1, [sp, #20]
 8006f6e:	4638      	mov	r0, r7
 8006f70:	1bc9      	subs	r1, r1, r7
 8006f72:	f010 fe43 	bl	8017bfc <_ZdlPvj>
 8006f76:	2155      	movs	r1, #85	; 0x55
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006f78:	2300      	movs	r3, #0
 8006f7a:	48bd      	ldr	r0, [pc, #756]	; (8007270 <_ZN3jlb5GraphC1Ev+0x8d0>)
 8006f7c:	4abd      	ldr	r2, [pc, #756]	; (8007274 <_ZN3jlb5GraphC1Ev+0x8d4>)
 8006f7e:	9002      	str	r0, [sp, #8]
 8006f80:	9100      	str	r1, [sp, #0]
      { emplace_back(std::move(__x)); }
 8006f82:	4620      	mov	r0, r4
 8006f84:	4669      	mov	r1, sp
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006f86:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8006f8a:	9201      	str	r2, [sp, #4]
 8006f8c:	9305      	str	r3, [sp, #20]
      { emplace_back(std::move(__x)); }
 8006f8e:	f7ff fc97 	bl	80068c0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006f92:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8006f96:	42b7      	cmp	r7, r6
 8006f98:	d00b      	beq.n	8006fb2 <_ZN3jlb5GraphC1Ev+0x612>
 8006f9a:	463d      	mov	r5, r7
 8006f9c:	68a8      	ldr	r0, [r5, #8]
	if (__p)
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	f001 84d0 	beq.w	8008944 <_ZN3jlb5GraphC1Ev+0x1fa4>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006fa4:	6929      	ldr	r1, [r5, #16]
 8006fa6:	3518      	adds	r5, #24
 8006fa8:	1a09      	subs	r1, r1, r0
 8006faa:	f010 fe27 	bl	8017bfc <_ZdlPvj>
 8006fae:	42b5      	cmp	r5, r6
 8006fb0:	d1f4      	bne.n	8006f9c <_ZN3jlb5GraphC1Ev+0x5fc>
	if (__p)
 8006fb2:	b127      	cbz	r7, 8006fbe <_ZN3jlb5GraphC1Ev+0x61e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006fb4:	9905      	ldr	r1, [sp, #20]
 8006fb6:	4638      	mov	r0, r7
 8006fb8:	1bc9      	subs	r1, r1, r7
 8006fba:	f010 fe1f 	bl	8017bfc <_ZdlPvj>
 8006fbe:	2156      	movs	r1, #86	; 0x56
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	48ad      	ldr	r0, [pc, #692]	; (8007278 <_ZN3jlb5GraphC1Ev+0x8d8>)
 8006fc4:	4aad      	ldr	r2, [pc, #692]	; (800727c <_ZN3jlb5GraphC1Ev+0x8dc>)
 8006fc6:	9002      	str	r0, [sp, #8]
 8006fc8:	9100      	str	r1, [sp, #0]
      { emplace_back(std::move(__x)); }
 8006fca:	4620      	mov	r0, r4
 8006fcc:	4669      	mov	r1, sp
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006fce:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8006fd2:	9201      	str	r2, [sp, #4]
 8006fd4:	9305      	str	r3, [sp, #20]
      { emplace_back(std::move(__x)); }
 8006fd6:	f7ff fc73 	bl	80068c0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006fda:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8006fde:	42b7      	cmp	r7, r6
 8006fe0:	d00b      	beq.n	8006ffa <_ZN3jlb5GraphC1Ev+0x65a>
 8006fe2:	463d      	mov	r5, r7
 8006fe4:	68a8      	ldr	r0, [r5, #8]
	if (__p)
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	f001 84b2 	beq.w	8008950 <_ZN3jlb5GraphC1Ev+0x1fb0>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006fec:	6929      	ldr	r1, [r5, #16]
 8006fee:	3518      	adds	r5, #24
 8006ff0:	1a09      	subs	r1, r1, r0
 8006ff2:	f010 fe03 	bl	8017bfc <_ZdlPvj>
 8006ff6:	42b5      	cmp	r5, r6
 8006ff8:	d1f4      	bne.n	8006fe4 <_ZN3jlb5GraphC1Ev+0x644>
	if (__p)
 8006ffa:	b127      	cbz	r7, 8007006 <_ZN3jlb5GraphC1Ev+0x666>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8006ffc:	9905      	ldr	r1, [sp, #20]
 8006ffe:	4638      	mov	r0, r7
 8007000:	1bc9      	subs	r1, r1, r7
 8007002:	f010 fdfb 	bl	8017bfc <_ZdlPvj>
 8007006:	2157      	movs	r1, #87	; 0x57
	: _M_start(), _M_finish(), _M_end_of_storage()
 8007008:	2300      	movs	r3, #0
 800700a:	489d      	ldr	r0, [pc, #628]	; (8007280 <_ZN3jlb5GraphC1Ev+0x8e0>)
 800700c:	4a9b      	ldr	r2, [pc, #620]	; (800727c <_ZN3jlb5GraphC1Ev+0x8dc>)
 800700e:	9002      	str	r0, [sp, #8]
 8007010:	9100      	str	r1, [sp, #0]
      { emplace_back(std::move(__x)); }
 8007012:	4620      	mov	r0, r4
 8007014:	4669      	mov	r1, sp
	: _M_start(), _M_finish(), _M_end_of_storage()
 8007016:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800701a:	9201      	str	r2, [sp, #4]
 800701c:	9305      	str	r3, [sp, #20]
      { emplace_back(std::move(__x)); }
 800701e:	f7ff fc4f 	bl	80068c0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007022:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 8007026:	42b7      	cmp	r7, r6
 8007028:	d00b      	beq.n	8007042 <_ZN3jlb5GraphC1Ev+0x6a2>
 800702a:	463d      	mov	r5, r7
 800702c:	68a8      	ldr	r0, [r5, #8]
	if (__p)
 800702e:	2800      	cmp	r0, #0
 8007030:	f001 8494 	beq.w	800895c <_ZN3jlb5GraphC1Ev+0x1fbc>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8007034:	6929      	ldr	r1, [r5, #16]
 8007036:	3518      	adds	r5, #24
 8007038:	1a09      	subs	r1, r1, r0
 800703a:	f010 fddf 	bl	8017bfc <_ZdlPvj>
 800703e:	42b5      	cmp	r5, r6
 8007040:	d1f4      	bne.n	800702c <_ZN3jlb5GraphC1Ev+0x68c>
	if (__p)
 8007042:	b127      	cbz	r7, 800704e <_ZN3jlb5GraphC1Ev+0x6ae>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8007044:	9905      	ldr	r1, [sp, #20]
 8007046:	4638      	mov	r0, r7
 8007048:	1bc9      	subs	r1, r1, r7
 800704a:	f010 fdd7 	bl	8017bfc <_ZdlPvj>
 800704e:	2158      	movs	r1, #88	; 0x58
	: _M_start(), _M_finish(), _M_end_of_storage()
 8007050:	2300      	movs	r3, #0
 8007052:	4889      	ldr	r0, [pc, #548]	; (8007278 <_ZN3jlb5GraphC1Ev+0x8d8>)
 8007054:	4a8b      	ldr	r2, [pc, #556]	; (8007284 <_ZN3jlb5GraphC1Ev+0x8e4>)
 8007056:	9002      	str	r0, [sp, #8]
 8007058:	9100      	str	r1, [sp, #0]
      { emplace_back(std::move(__x)); }
 800705a:	4620      	mov	r0, r4
 800705c:	4669      	mov	r1, sp
	: _M_start(), _M_finish(), _M_end_of_storage()
 800705e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8007062:	9201      	str	r2, [sp, #4]
 8007064:	9305      	str	r3, [sp, #20]
      { emplace_back(std::move(__x)); }
 8007066:	f7ff fc2b 	bl	80068c0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_.isra.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800706a:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 800706e:	42b7      	cmp	r7, r6
 8007070:	d00b      	beq.n	800708a <_ZN3jlb5GraphC1Ev+0x6ea>
 8007072:	463d      	mov	r5, r7
 8007074:	68a8      	ldr	r0, [r5, #8]
	if (__p)
 8007076:	2800      	cmp	r0, #0
 8007078:	f001 8476 	beq.w	8008968 <_ZN3jlb5GraphC1Ev+0x1fc8>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800707c:	6929      	ldr	r1, [r5, #16]
 800707e:	3518      	adds	r5, #24
 8007080:	1a09      	subs	r1, r1, r0
 8007082:	f010 fdbb 	bl	8017bfc <_ZdlPvj>
 8007086:	42b5      	cmp	r5, r6
 8007088:	d1f4      	bne.n	8007074 <_ZN3jlb5GraphC1Ev+0x6d4>
	if (__p)
 800708a:	b127      	cbz	r7, 8007096 <_ZN3jlb5GraphC1Ev+0x6f6>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800708c:	9905      	ldr	r1, [sp, #20]
 800708e:	4638      	mov	r0, r7
 8007090:	1bc9      	subs	r1, r1, r7
 8007092:	f010 fdb3 	bl	8017bfc <_ZdlPvj>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007096:	2002      	movs	r0, #2
	return *(this->_M_impl._M_start + __n);
 8007098:	6825      	ldr	r5, [r4, #0]
 800709a:	f010 fdb1 	bl	8017c00 <_Znwj>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800709e:	f244 4642 	movw	r6, #17474	; 0x4442
 80070a2:	4603      	mov	r3, r0
            this->operator[]('A').add_edge('C', Direction::LEFT, {'B', 'D'}, QUARTER_CIRCLE);
 80070a4:	466a      	mov	r2, sp
 80070a6:	4628      	mov	r0, r5
 80070a8:	2143      	movs	r1, #67	; 0x43
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80070aa:	1c9d      	adds	r5, r3, #2
 80070ac:	801e      	strh	r6, [r3, #0]
	  this->_M_impl._M_finish =
 80070ae:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80070b2:	9300      	str	r3, [sp, #0]
 80070b4:	f7ff fa0a 	bl	80064cc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.2>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80070b8:	9800      	ldr	r0, [sp, #0]
	if (__p)
 80070ba:	b118      	cbz	r0, 80070c4 <_ZN3jlb5GraphC1Ev+0x724>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80070bc:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 80070be:	1a09      	subs	r1, r1, r0
 80070c0:	f010 fd9c 	bl	8017bfc <_ZdlPvj>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80070c4:	2001      	movs	r0, #1
	return *(this->_M_impl._M_start + __n);
 80070c6:	6825      	ldr	r5, [r4, #0]
 80070c8:	f010 fd9a 	bl	8017c00 <_Znwj>
 80070cc:	4603      	mov	r3, r0
            this->operator[]('A').add_edge('B', Direction::STRAIGHT, {'C'}, 2.0f * UNIT);
 80070ce:	4628      	mov	r0, r5
 80070d0:	2543      	movs	r5, #67	; 0x43
 80070d2:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8007288 <_ZN3jlb5GraphC1Ev+0x8e8>
 80070d6:	701d      	strb	r5, [r3, #0]
 80070d8:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80070da:	1c5d      	adds	r5, r3, #1
 80070dc:	2142      	movs	r1, #66	; 0x42
	  this->_M_impl._M_finish =
 80070de:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	f7ff f94e 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80070e8:	9800      	ldr	r0, [sp, #0]
	if (__p)
 80070ea:	b118      	cbz	r0, 80070f4 <_ZN3jlb5GraphC1Ev+0x754>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80070ec:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 80070ee:	1a09      	subs	r1, r1, r0
 80070f0:	f010 fd84 	bl	8017bfc <_ZdlPvj>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80070f4:	2001      	movs	r0, #1
	return *(this->_M_impl._M_start + __n);
 80070f6:	6826      	ldr	r6, [r4, #0]
 80070f8:	f010 fd82 	bl	8017c00 <_Znwj>
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 80070fc:	2701      	movs	r7, #1
 80070fe:	2343      	movs	r3, #67	; 0x43
 8007100:	4605      	mov	r5, r0
 8007102:	f04f 0844 	mov.w	r8, #68	; 0x44
 8007106:	702b      	strb	r3, [r5, #0]
 8007108:	4638      	mov	r0, r7
 800710a:	9701      	str	r7, [sp, #4]
 800710c:	f88d 8000 	strb.w	r8, [sp]
 8007110:	f010 fd76 	bl	8017c00 <_Znwj>
 8007114:	782b      	ldrb	r3, [r5, #0]
 8007116:	f8df c174 	ldr.w	ip, [pc, #372]	; 800728c <_ZN3jlb5GraphC1Ev+0x8ec>
 800711a:	7003      	strb	r3, [r0, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800711c:	e9d6 1204 	ldrd	r1, r2, [r6, #16]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007120:	19c3      	adds	r3, r0, r7
 8007122:	4291      	cmp	r1, r2
	this->_M_impl._M_finish =
 8007124:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8007128:	f8cd c014 	str.w	ip, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800712c:	9002      	str	r0, [sp, #8]
 800712e:	f001 8490 	beq.w	8008a52 <_ZN3jlb5GraphC1Ev+0x20b2>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8007132:	e9c1 7001 	strd	r7, r0, [r1, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8007136:	e9c1 3303 	strd	r3, r3, [r1, #12]
    struct Edge
 800713a:	f8c1 c014 	str.w	ip, [r1, #20]
 800713e:	f881 8000 	strb.w	r8, [r1]
	    ++this->_M_impl._M_finish;
 8007142:	3118      	adds	r1, #24
 8007144:	6131      	str	r1, [r6, #16]
	::operator delete(__p
 8007146:	2101      	movs	r1, #1
 8007148:	4628      	mov	r0, r5
 800714a:	f010 fd57 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 800714e:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007150:	2001      	movs	r0, #1
 8007152:	f103 0518 	add.w	r5, r3, #24
 8007156:	f010 fd53 	bl	8017c00 <_Znwj>
 800715a:	4603      	mov	r3, r0
            this->operator[]('B').add_edge('A', Direction::STRAIGHT, {'E'}, 2.0f * UNIT);
 800715c:	4628      	mov	r0, r5
 800715e:	2545      	movs	r5, #69	; 0x45
 8007160:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8007288 <_ZN3jlb5GraphC1Ev+0x8e8>
 8007164:	701d      	strb	r5, [r3, #0]
 8007166:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007168:	1c5d      	adds	r5, r3, #1
 800716a:	2141      	movs	r1, #65	; 0x41
	  this->_M_impl._M_finish =
 800716c:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8007170:	9300      	str	r3, [sp, #0]
 8007172:	f7ff f907 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007176:	9800      	ldr	r0, [sp, #0]
	if (__p)
 8007178:	b118      	cbz	r0, 8007182 <_ZN3jlb5GraphC1Ev+0x7e2>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800717a:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 800717c:	1a09      	subs	r1, r1, r0
 800717e:	f010 fd3d 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 8007182:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007184:	2002      	movs	r0, #2
 8007186:	f103 0518 	add.w	r5, r3, #24
 800718a:	f010 fd39 	bl	8017c00 <_Znwj>
 800718e:	f244 4641 	movw	r6, #17473	; 0x4441
 8007192:	4603      	mov	r3, r0
            this->operator[]('B').add_edge('E', Direction::RIGHT, {'A', 'D'}, QUARTER_CIRCLE);
 8007194:	466a      	mov	r2, sp
 8007196:	4628      	mov	r0, r5
 8007198:	2145      	movs	r1, #69	; 0x45
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800719a:	1c9d      	adds	r5, r3, #2
 800719c:	801e      	strh	r6, [r3, #0]
	  this->_M_impl._M_finish =
 800719e:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	f7ff f944 	bl	8006430 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.1>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80071a8:	9800      	ldr	r0, [sp, #0]
	if (__p)
 80071aa:	b118      	cbz	r0, 80071b4 <_ZN3jlb5GraphC1Ev+0x814>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80071ac:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 80071ae:	1a09      	subs	r1, r1, r0
 80071b0:	f010 fd24 	bl	8017bfc <_ZdlPvj>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80071b4:	2001      	movs	r0, #1
	return *(this->_M_impl._M_start + __n);
 80071b6:	6826      	ldr	r6, [r4, #0]
 80071b8:	f010 fd22 	bl	8017c00 <_Znwj>
 80071bc:	2345      	movs	r3, #69	; 0x45
 80071be:	4605      	mov	r5, r0
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 80071c0:	f04f 0844 	mov.w	r8, #68	; 0x44
 80071c4:	2700      	movs	r7, #0
 80071c6:	702b      	strb	r3, [r5, #0]
 80071c8:	2001      	movs	r0, #1
 80071ca:	f88d 8000 	strb.w	r8, [sp]
 80071ce:	9701      	str	r7, [sp, #4]
 80071d0:	f010 fd16 	bl	8017c00 <_Znwj>
 80071d4:	782b      	ldrb	r3, [r5, #0]
 80071d6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800728c <_ZN3jlb5GraphC1Ev+0x8ec>
 80071da:	7003      	strb	r3, [r0, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80071dc:	e9d6 120a 	ldrd	r1, r2, [r6, #40]	; 0x28
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80071e0:	1c43      	adds	r3, r0, #1
 80071e2:	4291      	cmp	r1, r2
	this->_M_impl._M_finish =
 80071e4:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80071e8:	f8cd c014 	str.w	ip, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80071ec:	9002      	str	r0, [sp, #8]
 80071ee:	f001 843f 	beq.w	8008a70 <_ZN3jlb5GraphC1Ev+0x20d0>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80071f2:	e9c1 7001 	strd	r7, r0, [r1, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 80071f6:	e9c1 3303 	strd	r3, r3, [r1, #12]
    struct Edge
 80071fa:	f8c1 c014 	str.w	ip, [r1, #20]
 80071fe:	f881 8000 	strb.w	r8, [r1]
	    ++this->_M_impl._M_finish;
 8007202:	3118      	adds	r1, #24
 8007204:	62b1      	str	r1, [r6, #40]	; 0x28
	::operator delete(__p
 8007206:	2101      	movs	r1, #1
 8007208:	4628      	mov	r0, r5
 800720a:	f010 fcf7 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 800720e:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007210:	2001      	movs	r0, #1
 8007212:	f103 0530 	add.w	r5, r3, #48	; 0x30
 8007216:	f010 fcf3 	bl	8017c00 <_Znwj>
 800721a:	2646      	movs	r6, #70	; 0x46
 800721c:	4603      	mov	r3, r0
            this->operator[]('C').add_edge('A', Direction::RIGHT, {'F'}, QUARTER_CIRCLE);
 800721e:	466a      	mov	r2, sp
 8007220:	4628      	mov	r0, r5
 8007222:	2141      	movs	r1, #65	; 0x41
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007224:	1c5d      	adds	r5, r3, #1
 8007226:	701e      	strb	r6, [r3, #0]
	  this->_M_impl._M_finish =
 8007228:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800722c:	9300      	str	r3, [sp, #0]
 800722e:	f7ff f8ff 	bl	8006430 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.1>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007232:	9800      	ldr	r0, [sp, #0]
	if (__p)
 8007234:	b118      	cbz	r0, 800723e <_ZN3jlb5GraphC1Ev+0x89e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8007236:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 8007238:	1a09      	subs	r1, r1, r0
 800723a:	f010 fcdf 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 800723e:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007240:	2001      	movs	r0, #1
 8007242:	f103 0530 	add.w	r5, r3, #48	; 0x30
 8007246:	f010 fcdb 	bl	8017c00 <_Znwj>
 800724a:	2641      	movs	r6, #65	; 0x41
 800724c:	4603      	mov	r3, r0
            this->operator[]('C').add_edge('F', Direction::LEFT, {'A'}, QUARTER_CIRCLE);
 800724e:	466a      	mov	r2, sp
 8007250:	4628      	mov	r0, r5
 8007252:	2146      	movs	r1, #70	; 0x46
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007254:	1c5d      	adds	r5, r3, #1
 8007256:	701e      	strb	r6, [r3, #0]
	  this->_M_impl._M_finish =
 8007258:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	f7ff f935 	bl	80064cc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.2>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007262:	9800      	ldr	r0, [sp, #0]
	if (__p)
 8007264:	b1a0      	cbz	r0, 8007290 <_ZN3jlb5GraphC1Ev+0x8f0>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8007266:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 8007268:	1a09      	subs	r1, r1, r0
 800726a:	f010 fcc7 	bl	8017bfc <_ZdlPvj>
 800726e:	e00f      	b.n	8007290 <_ZN3jlb5GraphC1Ev+0x8f0>
 8007270:	40d33334 	.word	0x40d33334
 8007274:	40400000 	.word	0x40400000
 8007278:	40866667 	.word	0x40866667
 800727c:	4019999a 	.word	0x4019999a
 8007280:	40accccd 	.word	0x40accccd
 8007284:	3f666667 	.word	0x3f666667
 8007288:	3f99999a 	.word	0x3f99999a
 800728c:	3f71463a 	.word	0x3f71463a
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007290:	2003      	movs	r0, #3
	return *(this->_M_impl._M_start + __n);
 8007292:	6826      	ldr	r6, [r4, #0]
 8007294:	f010 fcb4 	bl	8017c00 <_Znwj>
 8007298:	f244 7346 	movw	r3, #18246	; 0x4746
 800729c:	4605      	mov	r5, r0
 800729e:	2249      	movs	r2, #73	; 0x49
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 80072a0:	f04f 0841 	mov.w	r8, #65	; 0x41
 80072a4:	2700      	movs	r7, #0
 80072a6:	70aa      	strb	r2, [r5, #2]
 80072a8:	802b      	strh	r3, [r5, #0]
 80072aa:	2003      	movs	r0, #3
 80072ac:	f88d 8000 	strb.w	r8, [sp]
 80072b0:	9701      	str	r7, [sp, #4]
 80072b2:	f010 fca5 	bl	8017c00 <_Znwj>
 80072b6:	882a      	ldrh	r2, [r5, #0]
 80072b8:	78ab      	ldrb	r3, [r5, #2]
 80072ba:	f8df c460 	ldr.w	ip, [pc, #1120]	; 800771c <_ZN3jlb5GraphC1Ev+0xd7c>
 80072be:	7083      	strb	r3, [r0, #2]
 80072c0:	8002      	strh	r2, [r0, #0]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80072c2:	1cc3      	adds	r3, r0, #3
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80072c4:	e9d6 1216 	ldrd	r1, r2, [r6, #88]	; 0x58
 80072c8:	4291      	cmp	r1, r2
	this->_M_impl._M_finish =
 80072ca:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80072ce:	f8cd c014 	str.w	ip, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80072d2:	9002      	str	r0, [sp, #8]
 80072d4:	f001 83ae 	beq.w	8008a34 <_ZN3jlb5GraphC1Ev+0x2094>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80072d8:	e9c1 7001 	strd	r7, r0, [r1, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 80072dc:	e9c1 3303 	strd	r3, r3, [r1, #12]
    struct Edge
 80072e0:	f8c1 c014 	str.w	ip, [r1, #20]
 80072e4:	f881 8000 	strb.w	r8, [r1]
	    ++this->_M_impl._M_finish;
 80072e8:	3118      	adds	r1, #24
 80072ea:	65b1      	str	r1, [r6, #88]	; 0x58
	::operator delete(__p
 80072ec:	2103      	movs	r1, #3
 80072ee:	4628      	mov	r0, r5
 80072f0:	f010 fc84 	bl	8017bfc <_ZdlPvj>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80072f4:	2003      	movs	r0, #3
	return *(this->_M_impl._M_start + __n);
 80072f6:	6826      	ldr	r6, [r4, #0]
 80072f8:	f010 fc82 	bl	8017c00 <_Znwj>
 80072fc:	f244 7346 	movw	r3, #18246	; 0x4746
 8007300:	4605      	mov	r5, r0
 8007302:	2249      	movs	r2, #73	; 0x49
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 8007304:	f04f 0942 	mov.w	r9, #66	; 0x42
 8007308:	2701      	movs	r7, #1
 800730a:	70aa      	strb	r2, [r5, #2]
 800730c:	802b      	strh	r3, [r5, #0]
 800730e:	2003      	movs	r0, #3
 8007310:	f88d 9000 	strb.w	r9, [sp]
 8007314:	9701      	str	r7, [sp, #4]
 8007316:	f010 fc73 	bl	8017c00 <_Znwj>
 800731a:	8829      	ldrh	r1, [r5, #0]
 800731c:	78ab      	ldrb	r3, [r5, #2]
 800731e:	8001      	strh	r1, [r0, #0]
 8007320:	7083      	strb	r3, [r0, #2]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8007322:	6db1      	ldr	r1, [r6, #88]	; 0x58
 8007324:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 8007326:	f8df c3f4 	ldr.w	ip, [pc, #1012]	; 800771c <_ZN3jlb5GraphC1Ev+0xd7c>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800732a:	1cc3      	adds	r3, r0, #3
 800732c:	4291      	cmp	r1, r2
	this->_M_impl._M_finish =
 800732e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8007332:	f8cd c014 	str.w	ip, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8007336:	9002      	str	r0, [sp, #8]
 8007338:	f001 83a9 	beq.w	8008a8e <_ZN3jlb5GraphC1Ev+0x20ee>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800733c:	e9c1 7001 	strd	r7, r0, [r1, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8007340:	e9c1 3303 	strd	r3, r3, [r1, #12]
    struct Edge
 8007344:	f8c1 c014 	str.w	ip, [r1, #20]
 8007348:	f881 9000 	strb.w	r9, [r1]
	    ++this->_M_impl._M_finish;
 800734c:	3118      	adds	r1, #24
 800734e:	65b1      	str	r1, [r6, #88]	; 0x58
	::operator delete(__p
 8007350:	2103      	movs	r1, #3
 8007352:	4628      	mov	r0, r5
 8007354:	f010 fc52 	bl	8017bfc <_ZdlPvj>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007358:	2002      	movs	r0, #2
	return *(this->_M_impl._M_start + __n);
 800735a:	6826      	ldr	r6, [r4, #0]
 800735c:	f010 fc50 	bl	8017c00 <_Znwj>
 8007360:	f244 2341 	movw	r3, #16961	; 0x4241
 8007364:	4605      	mov	r5, r0
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 8007366:	f04f 0947 	mov.w	r9, #71	; 0x47
 800736a:	2700      	movs	r7, #0
 800736c:	802b      	strh	r3, [r5, #0]
 800736e:	2002      	movs	r0, #2
 8007370:	f88d 9000 	strb.w	r9, [sp]
 8007374:	9701      	str	r7, [sp, #4]
 8007376:	f010 fc43 	bl	8017c00 <_Znwj>
 800737a:	882b      	ldrh	r3, [r5, #0]
 800737c:	f8df c39c 	ldr.w	ip, [pc, #924]	; 800771c <_ZN3jlb5GraphC1Ev+0xd7c>
 8007380:	8003      	strh	r3, [r0, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8007382:	6db1      	ldr	r1, [r6, #88]	; 0x58
 8007384:	6df2      	ldr	r2, [r6, #92]	; 0x5c
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007386:	1c83      	adds	r3, r0, #2
 8007388:	4291      	cmp	r1, r2
	this->_M_impl._M_finish =
 800738a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800738e:	f8cd c014 	str.w	ip, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8007392:	9002      	str	r0, [sp, #8]
 8007394:	f001 838a 	beq.w	8008aac <_ZN3jlb5GraphC1Ev+0x210c>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8007398:	e9c1 7001 	strd	r7, r0, [r1, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 800739c:	e9c1 3303 	strd	r3, r3, [r1, #12]
    struct Edge
 80073a0:	f8c1 c014 	str.w	ip, [r1, #20]
 80073a4:	f881 9000 	strb.w	r9, [r1]
	    ++this->_M_impl._M_finish;
 80073a8:	3118      	adds	r1, #24
 80073aa:	65b1      	str	r1, [r6, #88]	; 0x58
	::operator delete(__p
 80073ac:	2102      	movs	r1, #2
 80073ae:	4628      	mov	r0, r5
 80073b0:	f010 fc24 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 80073b4:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80073b6:	2002      	movs	r0, #2
 80073b8:	f103 0548 	add.w	r5, r3, #72	; 0x48
 80073bc:	f010 fc20 	bl	8017c00 <_Znwj>
 80073c0:	4603      	mov	r3, r0
            this->operator[]('D').add_edge('I', Direction::STRAIGHT, {'A', 'B'}, 2.0f * UNIT);
 80073c2:	4628      	mov	r0, r5
 80073c4:	f244 2541 	movw	r5, #16961	; 0x4241
 80073c8:	ed9f 0ad3 	vldr	s0, [pc, #844]	; 8007718 <_ZN3jlb5GraphC1Ev+0xd78>
 80073cc:	801d      	strh	r5, [r3, #0]
 80073ce:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80073d0:	1c9d      	adds	r5, r3, #2
 80073d2:	2149      	movs	r1, #73	; 0x49
	  this->_M_impl._M_finish =
 80073d4:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80073d8:	9300      	str	r3, [sp, #0]
 80073da:	f7fe ffd3 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80073de:	9800      	ldr	r0, [sp, #0]
	if (__p)
 80073e0:	b118      	cbz	r0, 80073ea <_ZN3jlb5GraphC1Ev+0xa4a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80073e2:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 80073e4:	1a09      	subs	r1, r1, r0
 80073e6:	f010 fc09 	bl	8017bfc <_ZdlPvj>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80073ea:	2002      	movs	r0, #2
	return *(this->_M_impl._M_start + __n);
 80073ec:	6826      	ldr	r6, [r4, #0]
 80073ee:	f010 fc07 	bl	8017c00 <_Znwj>
 80073f2:	f244 2341 	movw	r3, #16961	; 0x4241
 80073f6:	4605      	mov	r5, r0
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 80073f8:	f04f 0846 	mov.w	r8, #70	; 0x46
 80073fc:	2701      	movs	r7, #1
 80073fe:	802b      	strh	r3, [r5, #0]
 8007400:	2002      	movs	r0, #2
 8007402:	f88d 8000 	strb.w	r8, [sp]
 8007406:	9701      	str	r7, [sp, #4]
 8007408:	f010 fbfa 	bl	8017c00 <_Znwj>
 800740c:	882b      	ldrh	r3, [r5, #0]
 800740e:	f8df c30c 	ldr.w	ip, [pc, #780]	; 800771c <_ZN3jlb5GraphC1Ev+0xd7c>
 8007412:	8003      	strh	r3, [r0, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8007414:	e9d6 1216 	ldrd	r1, r2, [r6, #88]	; 0x58
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007418:	1c83      	adds	r3, r0, #2
 800741a:	4291      	cmp	r1, r2
	this->_M_impl._M_finish =
 800741c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8007420:	f8cd c014 	str.w	ip, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8007424:	9002      	str	r0, [sp, #8]
 8007426:	f001 8350 	beq.w	8008aca <_ZN3jlb5GraphC1Ev+0x212a>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800742a:	e9c1 7001 	strd	r7, r0, [r1, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 800742e:	e9c1 3303 	strd	r3, r3, [r1, #12]
    struct Edge
 8007432:	f8c1 c014 	str.w	ip, [r1, #20]
 8007436:	f881 8000 	strb.w	r8, [r1]
	    ++this->_M_impl._M_finish;
 800743a:	3118      	adds	r1, #24
 800743c:	65b1      	str	r1, [r6, #88]	; 0x58
	::operator delete(__p
 800743e:	2102      	movs	r1, #2
 8007440:	4628      	mov	r0, r5
 8007442:	f010 fbdb 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 8007446:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007448:	2002      	movs	r0, #2
 800744a:	f103 0560 	add.w	r5, r3, #96	; 0x60
 800744e:	f010 fbd7 	bl	8017c00 <_Znwj>
 8007452:	f644 2647 	movw	r6, #19015	; 0x4a47
 8007456:	4603      	mov	r3, r0
            this->operator[]('E').add_edge('B', Direction::LEFT, {'G', 'J'}, QUARTER_CIRCLE);
 8007458:	466a      	mov	r2, sp
 800745a:	4628      	mov	r0, r5
 800745c:	2142      	movs	r1, #66	; 0x42
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800745e:	1c9d      	adds	r5, r3, #2
 8007460:	801e      	strh	r6, [r3, #0]
	  this->_M_impl._M_finish =
 8007462:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8007466:	9300      	str	r3, [sp, #0]
 8007468:	f7ff f830 	bl	80064cc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.2>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800746c:	9800      	ldr	r0, [sp, #0]
	if (__p)
 800746e:	b118      	cbz	r0, 8007478 <_ZN3jlb5GraphC1Ev+0xad8>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8007470:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 8007472:	1a09      	subs	r1, r1, r0
 8007474:	f010 fbc2 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 8007478:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800747a:	2001      	movs	r0, #1
 800747c:	f103 0560 	add.w	r5, r3, #96	; 0x60
 8007480:	f010 fbbe 	bl	8017c00 <_Znwj>
 8007484:	4603      	mov	r3, r0
            this->operator[]('E').add_edge('J', Direction::STRAIGHT, {'B'}, 2.0f * UNIT);
 8007486:	4628      	mov	r0, r5
 8007488:	2542      	movs	r5, #66	; 0x42
 800748a:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 8007718 <_ZN3jlb5GraphC1Ev+0xd78>
 800748e:	701d      	strb	r5, [r3, #0]
 8007490:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007492:	1c5d      	adds	r5, r3, #1
 8007494:	214a      	movs	r1, #74	; 0x4a
	  this->_M_impl._M_finish =
 8007496:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	f7fe ff72 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80074a0:	9800      	ldr	r0, [sp, #0]
	if (__p)
 80074a2:	b118      	cbz	r0, 80074ac <_ZN3jlb5GraphC1Ev+0xb0c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80074a4:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 80074a6:	1a09      	subs	r1, r1, r0
 80074a8:	f010 fba8 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 80074ac:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80074ae:	2001      	movs	r0, #1
 80074b0:	f103 0560 	add.w	r5, r3, #96	; 0x60
 80074b4:	f010 fba4 	bl	8017c00 <_Znwj>
 80074b8:	2642      	movs	r6, #66	; 0x42
 80074ba:	4603      	mov	r3, r0
            this->operator[]('E').add_edge('G', Direction::RIGHT, {'B'}, QUARTER_CIRCLE);
 80074bc:	466a      	mov	r2, sp
 80074be:	4628      	mov	r0, r5
 80074c0:	2147      	movs	r1, #71	; 0x47
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80074c2:	1c5d      	adds	r5, r3, #1
 80074c4:	701e      	strb	r6, [r3, #0]
	  this->_M_impl._M_finish =
 80074c6:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	f7fe ffb0 	bl	8006430 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.1>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80074d0:	9800      	ldr	r0, [sp, #0]
	if (__p)
 80074d2:	b118      	cbz	r0, 80074dc <_ZN3jlb5GraphC1Ev+0xb3c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80074d4:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 80074d6:	1a09      	subs	r1, r1, r0
 80074d8:	f010 fb90 	bl	8017bfc <_ZdlPvj>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80074dc:	2003      	movs	r0, #3
	return *(this->_M_impl._M_start + __n);
 80074de:	6826      	ldr	r6, [r4, #0]
 80074e0:	f010 fb8e 	bl	8017c00 <_Znwj>
 80074e4:	f244 7344 	movw	r3, #18244	; 0x4744
 80074e8:	4605      	mov	r5, r0
 80074ea:	2249      	movs	r2, #73	; 0x49
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 80074ec:	f04f 0843 	mov.w	r8, #67	; 0x43
 80074f0:	2701      	movs	r7, #1
 80074f2:	70aa      	strb	r2, [r5, #2]
 80074f4:	802b      	strh	r3, [r5, #0]
 80074f6:	2003      	movs	r0, #3
 80074f8:	f88d 8000 	strb.w	r8, [sp]
 80074fc:	9701      	str	r7, [sp, #4]
 80074fe:	f010 fb7f 	bl	8017c00 <_Znwj>
 8007502:	882a      	ldrh	r2, [r5, #0]
 8007504:	78ab      	ldrb	r3, [r5, #2]
 8007506:	f8df c214 	ldr.w	ip, [pc, #532]	; 800771c <_ZN3jlb5GraphC1Ev+0xd7c>
 800750a:	7083      	strb	r3, [r0, #2]
 800750c:	8002      	strh	r2, [r0, #0]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800750e:	1cc3      	adds	r3, r0, #3
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8007510:	e9d6 1222 	ldrd	r1, r2, [r6, #136]	; 0x88
 8007514:	4291      	cmp	r1, r2
	this->_M_impl._M_finish =
 8007516:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800751a:	f8cd c014 	str.w	ip, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800751e:	9002      	str	r0, [sp, #8]
 8007520:	f001 82e2 	beq.w	8008ae8 <_ZN3jlb5GraphC1Ev+0x2148>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8007524:	e9c1 7001 	strd	r7, r0, [r1, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8007528:	e9c1 3303 	strd	r3, r3, [r1, #12]
    struct Edge
 800752c:	f8c1 c014 	str.w	ip, [r1, #20]
 8007530:	f881 8000 	strb.w	r8, [r1]
	    ++this->_M_impl._M_finish;
 8007534:	3118      	adds	r1, #24
 8007536:	f8c6 1088 	str.w	r1, [r6, #136]	; 0x88
	::operator delete(__p
 800753a:	2103      	movs	r1, #3
 800753c:	4628      	mov	r0, r5
 800753e:	f010 fb5d 	bl	8017bfc <_ZdlPvj>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007542:	2002      	movs	r0, #2
	return *(this->_M_impl._M_start + __n);
 8007544:	6826      	ldr	r6, [r4, #0]
 8007546:	f010 fb5b 	bl	8017c00 <_Znwj>
 800754a:	f644 0343 	movw	r3, #18499	; 0x4843
 800754e:	4605      	mov	r5, r0
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 8007550:	f04f 0944 	mov.w	r9, #68	; 0x44
 8007554:	2700      	movs	r7, #0
 8007556:	802b      	strh	r3, [r5, #0]
 8007558:	2002      	movs	r0, #2
 800755a:	f88d 9000 	strb.w	r9, [sp]
 800755e:	9701      	str	r7, [sp, #4]
 8007560:	f010 fb4e 	bl	8017c00 <_Znwj>
 8007564:	882b      	ldrh	r3, [r5, #0]
 8007566:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 800771c <_ZN3jlb5GraphC1Ev+0xd7c>
 800756a:	8003      	strh	r3, [r0, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800756c:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
 8007570:	f8d6 208c 	ldr.w	r2, [r6, #140]	; 0x8c
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007574:	1c83      	adds	r3, r0, #2
 8007576:	4291      	cmp	r1, r2
	this->_M_impl._M_finish =
 8007578:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800757c:	f8cd c014 	str.w	ip, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8007580:	9002      	str	r0, [sp, #8]
 8007582:	f001 82c0 	beq.w	8008b06 <_ZN3jlb5GraphC1Ev+0x2166>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8007586:	e9c1 7001 	strd	r7, r0, [r1, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 800758a:	e9c1 3303 	strd	r3, r3, [r1, #12]
    struct Edge
 800758e:	f8c1 c014 	str.w	ip, [r1, #20]
 8007592:	f881 9000 	strb.w	r9, [r1]
	    ++this->_M_impl._M_finish;
 8007596:	3118      	adds	r1, #24
 8007598:	f8c6 1088 	str.w	r1, [r6, #136]	; 0x88
	::operator delete(__p
 800759c:	2102      	movs	r1, #2
 800759e:	4628      	mov	r0, r5
 80075a0:	f010 fb2c 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 80075a4:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80075a6:	2002      	movs	r0, #2
 80075a8:	f103 0578 	add.w	r5, r3, #120	; 0x78
 80075ac:	f010 fb28 	bl	8017c00 <_Znwj>
 80075b0:	4603      	mov	r3, r0
            this->operator[]('F').add_edge('G', Direction::STRAIGHT, {'C', 'H'}, 2.0f * UNIT);
 80075b2:	4628      	mov	r0, r5
 80075b4:	f644 0543 	movw	r5, #18499	; 0x4843
 80075b8:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8007718 <_ZN3jlb5GraphC1Ev+0xd78>
 80075bc:	801d      	strh	r5, [r3, #0]
 80075be:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80075c0:	1c9d      	adds	r5, r3, #2
 80075c2:	2147      	movs	r1, #71	; 0x47
	  this->_M_impl._M_finish =
 80075c4:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80075c8:	9300      	str	r3, [sp, #0]
 80075ca:	f7fe fedb 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80075ce:	9800      	ldr	r0, [sp, #0]
	if (__p)
 80075d0:	b118      	cbz	r0, 80075da <_ZN3jlb5GraphC1Ev+0xc3a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80075d2:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 80075d4:	1a09      	subs	r1, r1, r0
 80075d6:	f010 fb11 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 80075da:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80075dc:	2002      	movs	r0, #2
 80075de:	f103 0578 	add.w	r5, r3, #120	; 0x78
 80075e2:	f010 fb0d 	bl	8017c00 <_Znwj>
 80075e6:	f644 0643 	movw	r6, #18499	; 0x4843
 80075ea:	4603      	mov	r3, r0
            this->operator[]('F').add_edge('I', Direction::RIGHT, {'C', 'H'}, QUARTER_CIRCLE);
 80075ec:	466a      	mov	r2, sp
 80075ee:	4628      	mov	r0, r5
 80075f0:	2149      	movs	r1, #73	; 0x49
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80075f2:	1c9d      	adds	r5, r3, #2
 80075f4:	801e      	strh	r6, [r3, #0]
	  this->_M_impl._M_finish =
 80075f6:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80075fa:	9300      	str	r3, [sp, #0]
 80075fc:	f7fe ff18 	bl	8006430 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.1>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007600:	9800      	ldr	r0, [sp, #0]
	if (__p)
 8007602:	b118      	cbz	r0, 800760c <_ZN3jlb5GraphC1Ev+0xc6c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8007604:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 8007606:	1a09      	subs	r1, r1, r0
 8007608:	f010 faf8 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 800760c:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800760e:	2003      	movs	r0, #3
 8007610:	f103 0578 	add.w	r5, r3, #120	; 0x78
 8007614:	f010 faf4 	bl	8017c00 <_Znwj>
 8007618:	f244 7644 	movw	r6, #18244	; 0x4744
 800761c:	4603      	mov	r3, r0
            this->operator[]('F').add_edge('H', Direction::LEFT, {'D', 'G', 'I'}, QUARTER_CIRCLE);
 800761e:	4628      	mov	r0, r5
 8007620:	2549      	movs	r5, #73	; 0x49
 8007622:	466a      	mov	r2, sp
 8007624:	709d      	strb	r5, [r3, #2]
 8007626:	2148      	movs	r1, #72	; 0x48
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007628:	1cdd      	adds	r5, r3, #3
 800762a:	801e      	strh	r6, [r3, #0]
	  this->_M_impl._M_finish =
 800762c:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	f7fe ff4b 	bl	80064cc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.2>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007636:	9800      	ldr	r0, [sp, #0]
	if (__p)
 8007638:	b118      	cbz	r0, 8007642 <_ZN3jlb5GraphC1Ev+0xca2>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800763a:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 800763c:	1a09      	subs	r1, r1, r0
 800763e:	f010 fadd 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 8007642:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007644:	2002      	movs	r0, #2
 8007646:	f103 0590 	add.w	r5, r3, #144	; 0x90
 800764a:	f010 fad9 	bl	8017c00 <_Znwj>
 800764e:	4603      	mov	r3, r0
            this->operator[]('G').add_edge('F', Direction::STRAIGHT, {'E', 'J'}, 2.0f * UNIT);
 8007650:	4628      	mov	r0, r5
 8007652:	f644 2545 	movw	r5, #19013	; 0x4a45
 8007656:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8007718 <_ZN3jlb5GraphC1Ev+0xd78>
 800765a:	801d      	strh	r5, [r3, #0]
 800765c:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800765e:	1c9d      	adds	r5, r3, #2
 8007660:	2146      	movs	r1, #70	; 0x46
	  this->_M_impl._M_finish =
 8007662:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	f7fe fe8c 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800766c:	9800      	ldr	r0, [sp, #0]
	if (__p)
 800766e:	b118      	cbz	r0, 8007678 <_ZN3jlb5GraphC1Ev+0xcd8>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8007670:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 8007672:	1a09      	subs	r1, r1, r0
 8007674:	f010 fac2 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 8007678:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800767a:	2002      	movs	r0, #2
 800767c:	f103 0590 	add.w	r5, r3, #144	; 0x90
 8007680:	f010 fabe 	bl	8017c00 <_Znwj>
 8007684:	f644 2645 	movw	r6, #19013	; 0x4a45
 8007688:	4603      	mov	r3, r0
            this->operator[]('G').add_edge('D', Direction::RIGHT, {'E', 'J'}, QUARTER_CIRCLE);
 800768a:	466a      	mov	r2, sp
 800768c:	4628      	mov	r0, r5
 800768e:	2144      	movs	r1, #68	; 0x44
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007690:	1c9d      	adds	r5, r3, #2
 8007692:	801e      	strh	r6, [r3, #0]
	  this->_M_impl._M_finish =
 8007694:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	f7fe fec9 	bl	8006430 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.1>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800769e:	9800      	ldr	r0, [sp, #0]
	if (__p)
 80076a0:	b118      	cbz	r0, 80076aa <_ZN3jlb5GraphC1Ev+0xd0a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80076a2:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 80076a4:	1a09      	subs	r1, r1, r0
 80076a6:	f010 faa9 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 80076aa:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80076ac:	2003      	movs	r0, #3
 80076ae:	f103 0590 	add.w	r5, r3, #144	; 0x90
 80076b2:	f010 faa5 	bl	8017c00 <_Znwj>
 80076b6:	f244 6644 	movw	r6, #17988	; 0x4644
 80076ba:	4603      	mov	r3, r0
            this->operator[]('G').add_edge('E', Direction::LEFT, {'D', 'F', 'I'}, QUARTER_CIRCLE);
 80076bc:	4628      	mov	r0, r5
 80076be:	2549      	movs	r5, #73	; 0x49
 80076c0:	466a      	mov	r2, sp
 80076c2:	709d      	strb	r5, [r3, #2]
 80076c4:	2145      	movs	r1, #69	; 0x45
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80076c6:	1cdd      	adds	r5, r3, #3
 80076c8:	801e      	strh	r6, [r3, #0]
	  this->_M_impl._M_finish =
 80076ca:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	f7fe fefc 	bl	80064cc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.2>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80076d4:	9800      	ldr	r0, [sp, #0]
	if (__p)
 80076d6:	b118      	cbz	r0, 80076e0 <_ZN3jlb5GraphC1Ev+0xd40>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80076d8:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 80076da:	1a09      	subs	r1, r1, r0
 80076dc:	f010 fa8e 	bl	8017bfc <_ZdlPvj>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80076e0:	2003      	movs	r0, #3
	return *(this->_M_impl._M_start + __n);
 80076e2:	6826      	ldr	r6, [r4, #0]
 80076e4:	f010 fa8c 	bl	8017c00 <_Znwj>
 80076e8:	f244 6344 	movw	r3, #17988	; 0x4644
 80076ec:	4605      	mov	r5, r0
 80076ee:	2249      	movs	r2, #73	; 0x49
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 80076f0:	f04f 084a 	mov.w	r8, #74	; 0x4a
 80076f4:	2701      	movs	r7, #1
 80076f6:	70aa      	strb	r2, [r5, #2]
 80076f8:	802b      	strh	r3, [r5, #0]
 80076fa:	2003      	movs	r0, #3
 80076fc:	f88d 8000 	strb.w	r8, [sp]
 8007700:	9701      	str	r7, [sp, #4]
 8007702:	f010 fa7d 	bl	8017c00 <_Znwj>
 8007706:	882a      	ldrh	r2, [r5, #0]
 8007708:	78ab      	ldrb	r3, [r5, #2]
 800770a:	f8df c010 	ldr.w	ip, [pc, #16]	; 800771c <_ZN3jlb5GraphC1Ev+0xd7c>
 800770e:	7083      	strb	r3, [r0, #2]
 8007710:	8002      	strh	r2, [r0, #0]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007712:	1cc3      	adds	r3, r0, #3
 8007714:	e004      	b.n	8007720 <_ZN3jlb5GraphC1Ev+0xd80>
 8007716:	bf00      	nop
 8007718:	3f99999a 	.word	0x3f99999a
 800771c:	3f71463a 	.word	0x3f71463a
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8007720:	e9d6 1228 	ldrd	r1, r2, [r6, #160]	; 0xa0
 8007724:	4291      	cmp	r1, r2
	this->_M_impl._M_finish =
 8007726:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800772a:	f8cd c014 	str.w	ip, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800772e:	9002      	str	r0, [sp, #8]
 8007730:	f001 81f8 	beq.w	8008b24 <_ZN3jlb5GraphC1Ev+0x2184>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8007734:	e9c1 7001 	strd	r7, r0, [r1, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8007738:	e9c1 3303 	strd	r3, r3, [r1, #12]
    struct Edge
 800773c:	f8c1 c014 	str.w	ip, [r1, #20]
 8007740:	f881 8000 	strb.w	r8, [r1]
	    ++this->_M_impl._M_finish;
 8007744:	3118      	adds	r1, #24
 8007746:	f8c6 10a0 	str.w	r1, [r6, #160]	; 0xa0
	::operator delete(__p
 800774a:	2103      	movs	r1, #3
 800774c:	4628      	mov	r0, r5
 800774e:	f010 fa55 	bl	8017bfc <_ZdlPvj>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007752:	2002      	movs	r0, #2
	return *(this->_M_impl._M_start + __n);
 8007754:	6826      	ldr	r6, [r4, #0]
 8007756:	f010 fa53 	bl	8017c00 <_Znwj>
 800775a:	f644 2345 	movw	r3, #19013	; 0x4a45
 800775e:	4605      	mov	r5, r0
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 8007760:	f04f 0949 	mov.w	r9, #73	; 0x49
 8007764:	2700      	movs	r7, #0
 8007766:	802b      	strh	r3, [r5, #0]
 8007768:	2002      	movs	r0, #2
 800776a:	f88d 9000 	strb.w	r9, [sp]
 800776e:	9701      	str	r7, [sp, #4]
 8007770:	f010 fa46 	bl	8017c00 <_Znwj>
 8007774:	882b      	ldrh	r3, [r5, #0]
 8007776:	f8df c440 	ldr.w	ip, [pc, #1088]	; 8007bb8 <_ZN3jlb5GraphC1Ev+0x1218>
 800777a:	8003      	strh	r3, [r0, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800777c:	f8d6 10a0 	ldr.w	r1, [r6, #160]	; 0xa0
 8007780:	f8d6 20a4 	ldr.w	r2, [r6, #164]	; 0xa4
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007784:	1c83      	adds	r3, r0, #2
 8007786:	4291      	cmp	r1, r2
	this->_M_impl._M_finish =
 8007788:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800778c:	f8cd c014 	str.w	ip, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8007790:	9002      	str	r0, [sp, #8]
 8007792:	f001 81d6 	beq.w	8008b42 <_ZN3jlb5GraphC1Ev+0x21a2>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8007796:	e9c1 7001 	strd	r7, r0, [r1, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 800779a:	e9c1 3303 	strd	r3, r3, [r1, #12]
    struct Edge
 800779e:	f8c1 c014 	str.w	ip, [r1, #20]
 80077a2:	f881 9000 	strb.w	r9, [r1]
	    ++this->_M_impl._M_finish;
 80077a6:	3118      	adds	r1, #24
 80077a8:	f8c6 10a0 	str.w	r1, [r6, #160]	; 0xa0
	::operator delete(__p
 80077ac:	2102      	movs	r1, #2
 80077ae:	4628      	mov	r0, r5
 80077b0:	f010 fa24 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 80077b4:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80077b6:	2002      	movs	r0, #2
 80077b8:	f103 05a8 	add.w	r5, r3, #168	; 0xa8
 80077bc:	f010 fa20 	bl	8017c00 <_Znwj>
 80077c0:	f644 564b 	movw	r6, #19787	; 0x4d4b
 80077c4:	4603      	mov	r3, r0
            this->operator[]('H').add_edge('F', Direction::RIGHT, {'K', 'M'}, QUARTER_CIRCLE);
 80077c6:	466a      	mov	r2, sp
 80077c8:	4628      	mov	r0, r5
 80077ca:	2146      	movs	r1, #70	; 0x46
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80077cc:	1c9d      	adds	r5, r3, #2
 80077ce:	801e      	strh	r6, [r3, #0]
	  this->_M_impl._M_finish =
 80077d0:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80077d4:	9300      	str	r3, [sp, #0]
 80077d6:	f7fe fe2b 	bl	8006430 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.1>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80077da:	9800      	ldr	r0, [sp, #0]
	if (__p)
 80077dc:	b118      	cbz	r0, 80077e6 <_ZN3jlb5GraphC1Ev+0xe46>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80077de:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 80077e0:	1a09      	subs	r1, r1, r0
 80077e2:	f010 fa0b 	bl	8017bfc <_ZdlPvj>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80077e6:	2001      	movs	r0, #1
	return *(this->_M_impl._M_start + __n);
 80077e8:	6826      	ldr	r6, [r4, #0]
 80077ea:	f010 fa09 	bl	8017c00 <_Znwj>
 80077ee:	2346      	movs	r3, #70	; 0x46
 80077f0:	4605      	mov	r5, r0
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 80077f2:	f04f 084b 	mov.w	r8, #75	; 0x4b
 80077f6:	2700      	movs	r7, #0
 80077f8:	702b      	strb	r3, [r5, #0]
 80077fa:	2001      	movs	r0, #1
 80077fc:	f88d 8000 	strb.w	r8, [sp]
 8007800:	9701      	str	r7, [sp, #4]
 8007802:	f010 f9fd 	bl	8017c00 <_Znwj>
 8007806:	782b      	ldrb	r3, [r5, #0]
 8007808:	f8df c3ac 	ldr.w	ip, [pc, #940]	; 8007bb8 <_ZN3jlb5GraphC1Ev+0x1218>
 800780c:	7003      	strb	r3, [r0, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800780e:	e9d6 122e 	ldrd	r1, r2, [r6, #184]	; 0xb8
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007812:	1c43      	adds	r3, r0, #1
 8007814:	4291      	cmp	r1, r2
	this->_M_impl._M_finish =
 8007816:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800781a:	f8cd c014 	str.w	ip, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800781e:	9002      	str	r0, [sp, #8]
 8007820:	f001 819e 	beq.w	8008b60 <_ZN3jlb5GraphC1Ev+0x21c0>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8007824:	e9c1 7001 	strd	r7, r0, [r1, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8007828:	e9c1 3303 	strd	r3, r3, [r1, #12]
    struct Edge
 800782c:	f8c1 c014 	str.w	ip, [r1, #20]
 8007830:	f881 8000 	strb.w	r8, [r1]
	    ++this->_M_impl._M_finish;
 8007834:	3118      	adds	r1, #24
 8007836:	f8c6 10b8 	str.w	r1, [r6, #184]	; 0xb8
	::operator delete(__p
 800783a:	2101      	movs	r1, #1
 800783c:	4628      	mov	r0, r5
 800783e:	f010 f9dd 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 8007842:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007844:	2001      	movs	r0, #1
 8007846:	f103 05a8 	add.w	r5, r3, #168	; 0xa8
 800784a:	f010 f9d9 	bl	8017c00 <_Znwj>
 800784e:	4603      	mov	r3, r0
            this->operator[]('H').add_edge('M', Direction::STRAIGHT, {'F'}, 2.0f * UNIT);
 8007850:	4628      	mov	r0, r5
 8007852:	2546      	movs	r5, #70	; 0x46
 8007854:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 8007bbc <_ZN3jlb5GraphC1Ev+0x121c>
 8007858:	701d      	strb	r5, [r3, #0]
 800785a:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800785c:	1c5d      	adds	r5, r3, #1
 800785e:	214d      	movs	r1, #77	; 0x4d
	  this->_M_impl._M_finish =
 8007860:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	f7fe fd8d 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800786a:	9800      	ldr	r0, [sp, #0]
	if (__p)
 800786c:	b118      	cbz	r0, 8007876 <_ZN3jlb5GraphC1Ev+0xed6>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800786e:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 8007870:	1a09      	subs	r1, r1, r0
 8007872:	f010 f9c3 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 8007876:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007878:	2003      	movs	r0, #3
 800787a:	f103 05c0 	add.w	r5, r3, #192	; 0xc0
 800787e:	f010 f9bf 	bl	8017c00 <_Znwj>
 8007882:	f644 464b 	movw	r6, #19531	; 0x4c4b
 8007886:	4603      	mov	r3, r0
            this->operator[]('I').add_edge('F', Direction::LEFT, {'K', 'L', 'N'}, QUARTER_CIRCLE);
 8007888:	4628      	mov	r0, r5
 800788a:	254e      	movs	r5, #78	; 0x4e
 800788c:	466a      	mov	r2, sp
 800788e:	709d      	strb	r5, [r3, #2]
 8007890:	2146      	movs	r1, #70	; 0x46
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007892:	1cdd      	adds	r5, r3, #3
 8007894:	801e      	strh	r6, [r3, #0]
	  this->_M_impl._M_finish =
 8007896:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800789a:	9300      	str	r3, [sp, #0]
 800789c:	f7fe fe16 	bl	80064cc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.2>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80078a0:	9800      	ldr	r0, [sp, #0]
	if (__p)
 80078a2:	b118      	cbz	r0, 80078ac <_ZN3jlb5GraphC1Ev+0xf0c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80078a4:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 80078a6:	1a09      	subs	r1, r1, r0
 80078a8:	f010 f9a8 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 80078ac:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80078ae:	2003      	movs	r0, #3
 80078b0:	f103 05c0 	add.w	r5, r3, #192	; 0xc0
 80078b4:	f010 f9a4 	bl	8017c00 <_Znwj>
 80078b8:	f644 464b 	movw	r6, #19531	; 0x4c4b
 80078bc:	4603      	mov	r3, r0
            this->operator[]('I').add_edge('D', Direction::STRAIGHT, {'K', 'L', 'N'}, 2.0f * UNIT);
 80078be:	4628      	mov	r0, r5
 80078c0:	254e      	movs	r5, #78	; 0x4e
 80078c2:	ed9f 0abe 	vldr	s0, [pc, #760]	; 8007bbc <_ZN3jlb5GraphC1Ev+0x121c>
 80078c6:	709d      	strb	r5, [r3, #2]
 80078c8:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80078ca:	1cdd      	adds	r5, r3, #3
 80078cc:	2144      	movs	r1, #68	; 0x44
 80078ce:	801e      	strh	r6, [r3, #0]
	  this->_M_impl._M_finish =
 80078d0:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	f7fe fd55 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80078da:	9800      	ldr	r0, [sp, #0]
	if (__p)
 80078dc:	b118      	cbz	r0, 80078e6 <_ZN3jlb5GraphC1Ev+0xf46>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80078de:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 80078e0:	1a09      	subs	r1, r1, r0
 80078e2:	f010 f98b 	bl	8017bfc <_ZdlPvj>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80078e6:	2003      	movs	r0, #3
	return *(this->_M_impl._M_start + __n);
 80078e8:	6826      	ldr	r6, [r4, #0]
 80078ea:	f010 f989 	bl	8017c00 <_Znwj>
 80078ee:	f644 434b 	movw	r3, #19531	; 0x4c4b
 80078f2:	4605      	mov	r5, r0
 80078f4:	224e      	movs	r2, #78	; 0x4e
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 80078f6:	f04f 0847 	mov.w	r8, #71	; 0x47
 80078fa:	2701      	movs	r7, #1
 80078fc:	70aa      	strb	r2, [r5, #2]
 80078fe:	802b      	strh	r3, [r5, #0]
 8007900:	2003      	movs	r0, #3
 8007902:	f88d 8000 	strb.w	r8, [sp]
 8007906:	9701      	str	r7, [sp, #4]
 8007908:	f010 f97a 	bl	8017c00 <_Znwj>
 800790c:	882a      	ldrh	r2, [r5, #0]
 800790e:	78ab      	ldrb	r3, [r5, #2]
 8007910:	f8df c2a4 	ldr.w	ip, [pc, #676]	; 8007bb8 <_ZN3jlb5GraphC1Ev+0x1218>
 8007914:	7083      	strb	r3, [r0, #2]
 8007916:	8002      	strh	r2, [r0, #0]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007918:	1cc3      	adds	r3, r0, #3
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800791a:	e9d6 1234 	ldrd	r1, r2, [r6, #208]	; 0xd0
 800791e:	4291      	cmp	r1, r2
	this->_M_impl._M_finish =
 8007920:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8007924:	f8cd c014 	str.w	ip, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8007928:	9002      	str	r0, [sp, #8]
 800792a:	f001 8137 	beq.w	8008b9c <_ZN3jlb5GraphC1Ev+0x21fc>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800792e:	e9c1 7001 	strd	r7, r0, [r1, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8007932:	e9c1 3303 	strd	r3, r3, [r1, #12]
    struct Edge
 8007936:	f8c1 c014 	str.w	ip, [r1, #20]
 800793a:	f881 8000 	strb.w	r8, [r1]
	    ++this->_M_impl._M_finish;
 800793e:	3118      	adds	r1, #24
 8007940:	f8c6 10d0 	str.w	r1, [r6, #208]	; 0xd0
	::operator delete(__p
 8007944:	2103      	movs	r1, #3
 8007946:	4628      	mov	r0, r5
 8007948:	f010 f958 	bl	8017bfc <_ZdlPvj>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800794c:	2003      	movs	r0, #3
	return *(this->_M_impl._M_start + __n);
 800794e:	6826      	ldr	r6, [r4, #0]
 8007950:	f010 f956 	bl	8017c00 <_Znwj>
 8007954:	f244 6344 	movw	r3, #17988	; 0x4644
 8007958:	4605      	mov	r5, r0
 800795a:	2247      	movs	r2, #71	; 0x47
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 800795c:	f04f 094c 	mov.w	r9, #76	; 0x4c
 8007960:	2700      	movs	r7, #0
 8007962:	70aa      	strb	r2, [r5, #2]
 8007964:	802b      	strh	r3, [r5, #0]
 8007966:	2003      	movs	r0, #3
 8007968:	f88d 9000 	strb.w	r9, [sp]
 800796c:	9701      	str	r7, [sp, #4]
 800796e:	f010 f947 	bl	8017c00 <_Znwj>
 8007972:	8829      	ldrh	r1, [r5, #0]
 8007974:	78ab      	ldrb	r3, [r5, #2]
 8007976:	8001      	strh	r1, [r0, #0]
 8007978:	7083      	strb	r3, [r0, #2]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800797a:	f8d6 10d0 	ldr.w	r1, [r6, #208]	; 0xd0
 800797e:	f8d6 20d4 	ldr.w	r2, [r6, #212]	; 0xd4
 8007982:	f8df c234 	ldr.w	ip, [pc, #564]	; 8007bb8 <_ZN3jlb5GraphC1Ev+0x1218>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007986:	1cc3      	adds	r3, r0, #3
 8007988:	4291      	cmp	r1, r2
	this->_M_impl._M_finish =
 800798a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800798e:	f8cd c014 	str.w	ip, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8007992:	9002      	str	r0, [sp, #8]
 8007994:	f001 8111 	beq.w	8008bba <_ZN3jlb5GraphC1Ev+0x221a>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8007998:	e9c1 7001 	strd	r7, r0, [r1, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 800799c:	e9c1 3303 	strd	r3, r3, [r1, #12]
    struct Edge
 80079a0:	f8c1 c014 	str.w	ip, [r1, #20]
 80079a4:	f881 9000 	strb.w	r9, [r1]
	    ++this->_M_impl._M_finish;
 80079a8:	3118      	adds	r1, #24
 80079aa:	f8c6 10d0 	str.w	r1, [r6, #208]	; 0xd0
	::operator delete(__p
 80079ae:	2103      	movs	r1, #3
 80079b0:	4628      	mov	r0, r5
 80079b2:	f010 f923 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 80079b6:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80079b8:	2003      	movs	r0, #3
 80079ba:	f103 05c0 	add.w	r5, r3, #192	; 0xc0
 80079be:	f010 f91f 	bl	8017c00 <_Znwj>
 80079c2:	f244 6644 	movw	r6, #17988	; 0x4644
 80079c6:	4603      	mov	r3, r0
            this->operator[]('I').add_edge('N', Direction::STRAIGHT, {'D', 'F', 'G'}, 2.0f * UNIT);
 80079c8:	4628      	mov	r0, r5
 80079ca:	2547      	movs	r5, #71	; 0x47
 80079cc:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 8007bbc <_ZN3jlb5GraphC1Ev+0x121c>
 80079d0:	709d      	strb	r5, [r3, #2]
 80079d2:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80079d4:	1cdd      	adds	r5, r3, #3
 80079d6:	214e      	movs	r1, #78	; 0x4e
 80079d8:	801e      	strh	r6, [r3, #0]
	  this->_M_impl._M_finish =
 80079da:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	f7fe fcd0 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80079e4:	9800      	ldr	r0, [sp, #0]
	if (__p)
 80079e6:	b118      	cbz	r0, 80079f0 <_ZN3jlb5GraphC1Ev+0x1050>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80079e8:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 80079ea:	1a09      	subs	r1, r1, r0
 80079ec:	f010 f906 	bl	8017bfc <_ZdlPvj>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80079f0:	2003      	movs	r0, #3
	return *(this->_M_impl._M_start + __n);
 80079f2:	6826      	ldr	r6, [r4, #0]
 80079f4:	f010 f904 	bl	8017c00 <_Znwj>
 80079f8:	f244 6344 	movw	r3, #17988	; 0x4644
 80079fc:	4605      	mov	r5, r0
 80079fe:	2247      	movs	r2, #71	; 0x47
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 8007a00:	f04f 084b 	mov.w	r8, #75	; 0x4b
 8007a04:	2701      	movs	r7, #1
 8007a06:	70aa      	strb	r2, [r5, #2]
 8007a08:	802b      	strh	r3, [r5, #0]
 8007a0a:	2003      	movs	r0, #3
 8007a0c:	f88d 8000 	strb.w	r8, [sp]
 8007a10:	9701      	str	r7, [sp, #4]
 8007a12:	f010 f8f5 	bl	8017c00 <_Znwj>
 8007a16:	882a      	ldrh	r2, [r5, #0]
 8007a18:	78ab      	ldrb	r3, [r5, #2]
 8007a1a:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8007bb8 <_ZN3jlb5GraphC1Ev+0x1218>
 8007a1e:	7083      	strb	r3, [r0, #2]
 8007a20:	8002      	strh	r2, [r0, #0]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007a22:	1cc3      	adds	r3, r0, #3
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8007a24:	e9d6 1234 	ldrd	r1, r2, [r6, #208]	; 0xd0
 8007a28:	4291      	cmp	r1, r2
	this->_M_impl._M_finish =
 8007a2a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8007a2e:	f8cd c014 	str.w	ip, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8007a32:	9002      	str	r0, [sp, #8]
 8007a34:	f001 80d0 	beq.w	8008bd8 <_ZN3jlb5GraphC1Ev+0x2238>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8007a38:	e9c1 7001 	strd	r7, r0, [r1, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8007a3c:	e9c1 3303 	strd	r3, r3, [r1, #12]
    struct Edge
 8007a40:	f8c1 c014 	str.w	ip, [r1, #20]
 8007a44:	f881 8000 	strb.w	r8, [r1]
	    ++this->_M_impl._M_finish;
 8007a48:	3118      	adds	r1, #24
 8007a4a:	f8c6 10d0 	str.w	r1, [r6, #208]	; 0xd0
	::operator delete(__p
 8007a4e:	2103      	movs	r1, #3
 8007a50:	4628      	mov	r0, r5
 8007a52:	f010 f8d3 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 8007a56:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007a58:	2001      	movs	r0, #1
 8007a5a:	f103 05d8 	add.w	r5, r3, #216	; 0xd8
 8007a5e:	f010 f8cf 	bl	8017c00 <_Znwj>
 8007a62:	264c      	movs	r6, #76	; 0x4c
 8007a64:	4603      	mov	r3, r0
            this->operator[]('J').add_edge('G', Direction::LEFT, {'L'}, QUARTER_CIRCLE);
 8007a66:	466a      	mov	r2, sp
 8007a68:	4628      	mov	r0, r5
 8007a6a:	2147      	movs	r1, #71	; 0x47
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007a6c:	1c5d      	adds	r5, r3, #1
 8007a6e:	701e      	strb	r6, [r3, #0]
	  this->_M_impl._M_finish =
 8007a70:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	f7fe fd29 	bl	80064cc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.2>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007a7a:	9800      	ldr	r0, [sp, #0]
	if (__p)
 8007a7c:	b118      	cbz	r0, 8007a86 <_ZN3jlb5GraphC1Ev+0x10e6>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8007a7e:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 8007a80:	1a09      	subs	r1, r1, r0
 8007a82:	f010 f8bb 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 8007a86:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007a88:	2001      	movs	r0, #1
 8007a8a:	f103 05d8 	add.w	r5, r3, #216	; 0xd8
 8007a8e:	f010 f8b7 	bl	8017c00 <_Znwj>
 8007a92:	4603      	mov	r3, r0
            this->operator[]('J').add_edge('E', Direction::STRAIGHT, {'L'}, 2.0f * UNIT);
 8007a94:	4628      	mov	r0, r5
 8007a96:	254c      	movs	r5, #76	; 0x4c
 8007a98:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8007bbc <_ZN3jlb5GraphC1Ev+0x121c>
 8007a9c:	701d      	strb	r5, [r3, #0]
 8007a9e:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007aa0:	1c5d      	adds	r5, r3, #1
 8007aa2:	2145      	movs	r1, #69	; 0x45
	  this->_M_impl._M_finish =
 8007aa4:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	f7fe fc6b 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007aae:	9800      	ldr	r0, [sp, #0]
	if (__p)
 8007ab0:	b118      	cbz	r0, 8007aba <_ZN3jlb5GraphC1Ev+0x111a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8007ab2:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 8007ab4:	1a09      	subs	r1, r1, r0
 8007ab6:	f010 f8a1 	bl	8017bfc <_ZdlPvj>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007aba:	2002      	movs	r0, #2
	return *(this->_M_impl._M_start + __n);
 8007abc:	6826      	ldr	r6, [r4, #0]
 8007abe:	f010 f89f 	bl	8017c00 <_Znwj>
 8007ac2:	f244 7345 	movw	r3, #18245	; 0x4745
 8007ac6:	4605      	mov	r5, r0
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 8007ac8:	f04f 084c 	mov.w	r8, #76	; 0x4c
 8007acc:	2701      	movs	r7, #1
 8007ace:	802b      	strh	r3, [r5, #0]
 8007ad0:	2002      	movs	r0, #2
 8007ad2:	f88d 8000 	strb.w	r8, [sp]
 8007ad6:	9701      	str	r7, [sp, #4]
 8007ad8:	f010 f892 	bl	8017c00 <_Znwj>
 8007adc:	882b      	ldrh	r3, [r5, #0]
 8007ade:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 8007bb8 <_ZN3jlb5GraphC1Ev+0x1218>
 8007ae2:	8003      	strh	r3, [r0, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8007ae4:	e9d6 123a 	ldrd	r1, r2, [r6, #232]	; 0xe8
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007ae8:	1c83      	adds	r3, r0, #2
 8007aea:	4291      	cmp	r1, r2
	this->_M_impl._M_finish =
 8007aec:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8007af0:	f8cd c014 	str.w	ip, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8007af4:	9002      	str	r0, [sp, #8]
 8007af6:	f001 8042 	beq.w	8008b7e <_ZN3jlb5GraphC1Ev+0x21de>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8007afa:	e9c1 7001 	strd	r7, r0, [r1, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8007afe:	e9c1 3303 	strd	r3, r3, [r1, #12]
    struct Edge
 8007b02:	f8c1 c014 	str.w	ip, [r1, #20]
 8007b06:	f881 8000 	strb.w	r8, [r1]
	    ++this->_M_impl._M_finish;
 8007b0a:	3118      	adds	r1, #24
 8007b0c:	f8c6 10e8 	str.w	r1, [r6, #232]	; 0xe8
	::operator delete(__p
 8007b10:	2102      	movs	r1, #2
 8007b12:	4628      	mov	r0, r5
 8007b14:	f010 f872 	bl	8017bfc <_ZdlPvj>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007b18:	2003      	movs	r0, #3
	return *(this->_M_impl._M_start + __n);
 8007b1a:	6826      	ldr	r6, [r4, #0]
 8007b1c:	f010 f870 	bl	8017c00 <_Znwj>
 8007b20:	f644 4349 	movw	r3, #19529	; 0x4c49
 8007b24:	4605      	mov	r5, r0
 8007b26:	224e      	movs	r2, #78	; 0x4e
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 8007b28:	f04f 0948 	mov.w	r9, #72	; 0x48
 8007b2c:	2701      	movs	r7, #1
 8007b2e:	70aa      	strb	r2, [r5, #2]
 8007b30:	802b      	strh	r3, [r5, #0]
 8007b32:	2003      	movs	r0, #3
 8007b34:	f88d 9000 	strb.w	r9, [sp]
 8007b38:	9701      	str	r7, [sp, #4]
 8007b3a:	f010 f861 	bl	8017c00 <_Znwj>
 8007b3e:	8829      	ldrh	r1, [r5, #0]
 8007b40:	78ab      	ldrb	r3, [r5, #2]
 8007b42:	8001      	strh	r1, [r0, #0]
 8007b44:	7083      	strb	r3, [r0, #2]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8007b46:	f8d6 1100 	ldr.w	r1, [r6, #256]	; 0x100
 8007b4a:	f8d6 2104 	ldr.w	r2, [r6, #260]	; 0x104
 8007b4e:	f8df c068 	ldr.w	ip, [pc, #104]	; 8007bb8 <_ZN3jlb5GraphC1Ev+0x1218>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007b52:	1cc3      	adds	r3, r0, #3
 8007b54:	4291      	cmp	r1, r2
	this->_M_impl._M_finish =
 8007b56:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8007b5a:	f8cd c014 	str.w	ip, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8007b5e:	9002      	str	r0, [sp, #8]
 8007b60:	f001 8049 	beq.w	8008bf6 <_ZN3jlb5GraphC1Ev+0x2256>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8007b64:	e9c1 7001 	strd	r7, r0, [r1, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8007b68:	e9c1 3303 	strd	r3, r3, [r1, #12]
    struct Edge
 8007b6c:	f8c1 c014 	str.w	ip, [r1, #20]
 8007b70:	f881 9000 	strb.w	r9, [r1]
	    ++this->_M_impl._M_finish;
 8007b74:	3118      	adds	r1, #24
 8007b76:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
	::operator delete(__p
 8007b7a:	2103      	movs	r1, #3
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	f010 f83d 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 8007b82:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007b84:	2002      	movs	r0, #2
 8007b86:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8007b8a:	f010 f839 	bl	8017c00 <_Znwj>
 8007b8e:	f644 5648 	movw	r6, #19784	; 0x4d48
 8007b92:	4603      	mov	r3, r0
            this->operator[]('K').add_edge('I', Direction::LEFT, {'H', 'M'}, QUARTER_CIRCLE);
 8007b94:	466a      	mov	r2, sp
 8007b96:	4628      	mov	r0, r5
 8007b98:	2149      	movs	r1, #73	; 0x49
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007b9a:	1c9d      	adds	r5, r3, #2
 8007b9c:	801e      	strh	r6, [r3, #0]
	  this->_M_impl._M_finish =
 8007b9e:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	f7fe fc92 	bl	80064cc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.2>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007ba8:	9800      	ldr	r0, [sp, #0]
	if (__p)
 8007baa:	b148      	cbz	r0, 8007bc0 <_ZN3jlb5GraphC1Ev+0x1220>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8007bac:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 8007bae:	1a09      	subs	r1, r1, r0
 8007bb0:	f010 f824 	bl	8017bfc <_ZdlPvj>
 8007bb4:	e004      	b.n	8007bc0 <_ZN3jlb5GraphC1Ev+0x1220>
 8007bb6:	bf00      	nop
 8007bb8:	3f71463a 	.word	0x3f71463a
 8007bbc:	3f99999a 	.word	0x3f99999a
	return *(this->_M_impl._M_start + __n);
 8007bc0:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007bc2:	2002      	movs	r0, #2
 8007bc4:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8007bc8:	f010 f81a 	bl	8017c00 <_Znwj>
 8007bcc:	4603      	mov	r3, r0
            this->operator[]('K').add_edge('L', Direction::STRAIGHT, {'H', 'M'}, 2.0f * UNIT);
 8007bce:	4628      	mov	r0, r5
 8007bd0:	f644 5548 	movw	r5, #19784	; 0x4d48
 8007bd4:	ed1f 0a07 	vldr	s0, [pc, #-28]	; 8007bbc <_ZN3jlb5GraphC1Ev+0x121c>
 8007bd8:	801d      	strh	r5, [r3, #0]
 8007bda:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007bdc:	1c9d      	adds	r5, r3, #2
 8007bde:	214c      	movs	r1, #76	; 0x4c
	  this->_M_impl._M_finish =
 8007be0:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8007be4:	9300      	str	r3, [sp, #0]
 8007be6:	f7fe fbcd 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007bea:	9800      	ldr	r0, [sp, #0]
	if (__p)
 8007bec:	b118      	cbz	r0, 8007bf6 <_ZN3jlb5GraphC1Ev+0x1256>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8007bee:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 8007bf0:	1a09      	subs	r1, r1, r0
 8007bf2:	f010 f803 	bl	8017bfc <_ZdlPvj>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007bf6:	2002      	movs	r0, #2
	return *(this->_M_impl._M_start + __n);
 8007bf8:	6826      	ldr	r6, [r4, #0]
 8007bfa:	f010 f801 	bl	8017c00 <_Znwj>
 8007bfe:	f644 5348 	movw	r3, #19784	; 0x4d48
 8007c02:	4605      	mov	r5, r0
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 8007c04:	f04f 084e 	mov.w	r8, #78	; 0x4e
 8007c08:	2701      	movs	r7, #1
 8007c0a:	802b      	strh	r3, [r5, #0]
 8007c0c:	2002      	movs	r0, #2
 8007c0e:	f88d 8000 	strb.w	r8, [sp]
 8007c12:	9701      	str	r7, [sp, #4]
 8007c14:	f00f fff4 	bl	8017c00 <_Znwj>
 8007c18:	882b      	ldrh	r3, [r5, #0]
 8007c1a:	f8df c414 	ldr.w	ip, [pc, #1044]	; 8008030 <_ZN3jlb5GraphC1Ev+0x1690>
 8007c1e:	8003      	strh	r3, [r0, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8007c20:	e9d6 1240 	ldrd	r1, r2, [r6, #256]	; 0x100
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007c24:	1c83      	adds	r3, r0, #2
 8007c26:	4291      	cmp	r1, r2
	this->_M_impl._M_finish =
 8007c28:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8007c2c:	f8cd c014 	str.w	ip, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8007c30:	9002      	str	r0, [sp, #8]
 8007c32:	f000 87ef 	beq.w	8008c14 <_ZN3jlb5GraphC1Ev+0x2274>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8007c36:	e9c1 7001 	strd	r7, r0, [r1, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8007c3a:	e9c1 3303 	strd	r3, r3, [r1, #12]
    struct Edge
 8007c3e:	f8c1 c014 	str.w	ip, [r1, #20]
 8007c42:	f881 8000 	strb.w	r8, [r1]
	    ++this->_M_impl._M_finish;
 8007c46:	3118      	adds	r1, #24
 8007c48:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
	::operator delete(__p
 8007c4c:	2102      	movs	r1, #2
 8007c4e:	4628      	mov	r0, r5
 8007c50:	f00f ffd4 	bl	8017bfc <_ZdlPvj>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007c54:	2003      	movs	r0, #3
	return *(this->_M_impl._M_start + __n);
 8007c56:	6826      	ldr	r6, [r4, #0]
 8007c58:	f00f ffd2 	bl	8017c00 <_Znwj>
 8007c5c:	f644 4349 	movw	r3, #19529	; 0x4c49
 8007c60:	4605      	mov	r5, r0
 8007c62:	224e      	movs	r2, #78	; 0x4e
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 8007c64:	f04f 094d 	mov.w	r9, #77	; 0x4d
 8007c68:	2700      	movs	r7, #0
 8007c6a:	70aa      	strb	r2, [r5, #2]
 8007c6c:	802b      	strh	r3, [r5, #0]
 8007c6e:	2003      	movs	r0, #3
 8007c70:	f88d 9000 	strb.w	r9, [sp]
 8007c74:	9701      	str	r7, [sp, #4]
 8007c76:	f00f ffc3 	bl	8017c00 <_Znwj>
 8007c7a:	8829      	ldrh	r1, [r5, #0]
 8007c7c:	78ab      	ldrb	r3, [r5, #2]
 8007c7e:	8001      	strh	r1, [r0, #0]
 8007c80:	7083      	strb	r3, [r0, #2]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8007c82:	f8d6 1100 	ldr.w	r1, [r6, #256]	; 0x100
 8007c86:	f8d6 2104 	ldr.w	r2, [r6, #260]	; 0x104
 8007c8a:	f8df c3a4 	ldr.w	ip, [pc, #932]	; 8008030 <_ZN3jlb5GraphC1Ev+0x1690>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007c8e:	1cc3      	adds	r3, r0, #3
 8007c90:	4291      	cmp	r1, r2
	this->_M_impl._M_finish =
 8007c92:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8007c96:	f8cd c014 	str.w	ip, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8007c9a:	9002      	str	r0, [sp, #8]
 8007c9c:	f000 87c9 	beq.w	8008c32 <_ZN3jlb5GraphC1Ev+0x2292>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8007ca0:	e9c1 7001 	strd	r7, r0, [r1, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8007ca4:	e9c1 3303 	strd	r3, r3, [r1, #12]
    struct Edge
 8007ca8:	f8c1 c014 	str.w	ip, [r1, #20]
 8007cac:	f881 9000 	strb.w	r9, [r1]
	    ++this->_M_impl._M_finish;
 8007cb0:	3118      	adds	r1, #24
 8007cb2:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
	::operator delete(__p
 8007cb6:	2103      	movs	r1, #3
 8007cb8:	4628      	mov	r0, r5
 8007cba:	f00f ff9f 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 8007cbe:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007cc0:	2002      	movs	r0, #2
 8007cc2:	f503 7584 	add.w	r5, r3, #264	; 0x108
 8007cc6:	f00f ff9b 	bl	8017c00 <_Znwj>
 8007cca:	4603      	mov	r3, r0
            this->operator[]('L').add_edge('K', Direction::STRAIGHT, {'J', 'O'}, 2.0f * UNIT);
 8007ccc:	4628      	mov	r0, r5
 8007cce:	f644 754a 	movw	r5, #20298	; 0x4f4a
 8007cd2:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 8008028 <_ZN3jlb5GraphC1Ev+0x1688>
 8007cd6:	801d      	strh	r5, [r3, #0]
 8007cd8:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007cda:	1c9d      	adds	r5, r3, #2
 8007cdc:	214b      	movs	r1, #75	; 0x4b
	  this->_M_impl._M_finish =
 8007cde:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8007ce2:	9300      	str	r3, [sp, #0]
 8007ce4:	f7fe fb4e 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007ce8:	9800      	ldr	r0, [sp, #0]
	if (__p)
 8007cea:	b118      	cbz	r0, 8007cf4 <_ZN3jlb5GraphC1Ev+0x1354>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8007cec:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 8007cee:	1a09      	subs	r1, r1, r0
 8007cf0:	f00f ff84 	bl	8017bfc <_ZdlPvj>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007cf4:	2002      	movs	r0, #2
	return *(this->_M_impl._M_start + __n);
 8007cf6:	6826      	ldr	r6, [r4, #0]
 8007cf8:	f00f ff82 	bl	8017c00 <_Znwj>
 8007cfc:	f644 734a 	movw	r3, #20298	; 0x4f4a
 8007d00:	4605      	mov	r5, r0
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 8007d02:	f04f 0849 	mov.w	r8, #73	; 0x49
 8007d06:	2701      	movs	r7, #1
 8007d08:	802b      	strh	r3, [r5, #0]
 8007d0a:	2002      	movs	r0, #2
 8007d0c:	f88d 8000 	strb.w	r8, [sp]
 8007d10:	9701      	str	r7, [sp, #4]
 8007d12:	f00f ff75 	bl	8017c00 <_Znwj>
 8007d16:	882b      	ldrh	r3, [r5, #0]
 8007d18:	f8df c314 	ldr.w	ip, [pc, #788]	; 8008030 <_ZN3jlb5GraphC1Ev+0x1690>
 8007d1c:	8003      	strh	r3, [r0, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8007d1e:	e9d6 1246 	ldrd	r1, r2, [r6, #280]	; 0x118
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007d22:	1c83      	adds	r3, r0, #2
 8007d24:	4291      	cmp	r1, r2
	this->_M_impl._M_finish =
 8007d26:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8007d2a:	f8cd c014 	str.w	ip, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8007d2e:	9002      	str	r0, [sp, #8]
 8007d30:	f000 878e 	beq.w	8008c50 <_ZN3jlb5GraphC1Ev+0x22b0>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8007d34:	e9c1 7001 	strd	r7, r0, [r1, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8007d38:	e9c1 3303 	strd	r3, r3, [r1, #12]
    struct Edge
 8007d3c:	f8c1 c014 	str.w	ip, [r1, #20]
 8007d40:	f881 8000 	strb.w	r8, [r1]
	    ++this->_M_impl._M_finish;
 8007d44:	3118      	adds	r1, #24
 8007d46:	f8c6 1118 	str.w	r1, [r6, #280]	; 0x118
	::operator delete(__p
 8007d4a:	2102      	movs	r1, #2
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	f00f ff55 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 8007d52:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007d54:	2003      	movs	r0, #3
 8007d56:	f503 7584 	add.w	r5, r3, #264	; 0x108
 8007d5a:	f00f ff51 	bl	8017c00 <_Znwj>
 8007d5e:	f644 3649 	movw	r6, #19273	; 0x4b49
 8007d62:	4603      	mov	r3, r0
            this->operator[]('L').add_edge('J', Direction::LEFT, {'I', 'K', 'N'}, QUARTER_CIRCLE);
 8007d64:	4628      	mov	r0, r5
 8007d66:	254e      	movs	r5, #78	; 0x4e
 8007d68:	466a      	mov	r2, sp
 8007d6a:	709d      	strb	r5, [r3, #2]
 8007d6c:	214a      	movs	r1, #74	; 0x4a
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007d6e:	1cdd      	adds	r5, r3, #3
 8007d70:	801e      	strh	r6, [r3, #0]
	  this->_M_impl._M_finish =
 8007d72:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8007d76:	9300      	str	r3, [sp, #0]
 8007d78:	f7fe fba8 	bl	80064cc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.2>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007d7c:	9800      	ldr	r0, [sp, #0]
	if (__p)
 8007d7e:	b118      	cbz	r0, 8007d88 <_ZN3jlb5GraphC1Ev+0x13e8>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8007d80:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 8007d82:	1a09      	subs	r1, r1, r0
 8007d84:	f00f ff3a 	bl	8017bfc <_ZdlPvj>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007d88:	2003      	movs	r0, #3
	return *(this->_M_impl._M_start + __n);
 8007d8a:	6826      	ldr	r6, [r4, #0]
 8007d8c:	f00f ff38 	bl	8017c00 <_Znwj>
 8007d90:	f644 3349 	movw	r3, #19273	; 0x4b49
 8007d94:	4605      	mov	r5, r0
 8007d96:	224e      	movs	r2, #78	; 0x4e
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 8007d98:	f04f 084f 	mov.w	r8, #79	; 0x4f
 8007d9c:	2701      	movs	r7, #1
 8007d9e:	70aa      	strb	r2, [r5, #2]
 8007da0:	802b      	strh	r3, [r5, #0]
 8007da2:	2003      	movs	r0, #3
 8007da4:	f88d 8000 	strb.w	r8, [sp]
 8007da8:	9701      	str	r7, [sp, #4]
 8007daa:	f00f ff29 	bl	8017c00 <_Znwj>
 8007dae:	882a      	ldrh	r2, [r5, #0]
 8007db0:	78ab      	ldrb	r3, [r5, #2]
 8007db2:	f8df c27c 	ldr.w	ip, [pc, #636]	; 8008030 <_ZN3jlb5GraphC1Ev+0x1690>
 8007db6:	7083      	strb	r3, [r0, #2]
 8007db8:	8002      	strh	r2, [r0, #0]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007dba:	1cc3      	adds	r3, r0, #3
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8007dbc:	e9d6 1246 	ldrd	r1, r2, [r6, #280]	; 0x118
 8007dc0:	4291      	cmp	r1, r2
	this->_M_impl._M_finish =
 8007dc2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8007dc6:	f8cd c014 	str.w	ip, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8007dca:	9002      	str	r0, [sp, #8]
 8007dcc:	f000 874f 	beq.w	8008c6e <_ZN3jlb5GraphC1Ev+0x22ce>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8007dd0:	e9c1 7001 	strd	r7, r0, [r1, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8007dd4:	e9c1 3303 	strd	r3, r3, [r1, #12]
    struct Edge
 8007dd8:	f8c1 c014 	str.w	ip, [r1, #20]
 8007ddc:	f881 8000 	strb.w	r8, [r1]
	    ++this->_M_impl._M_finish;
 8007de0:	3118      	adds	r1, #24
 8007de2:	f8c6 1118 	str.w	r1, [r6, #280]	; 0x118
	::operator delete(__p
 8007de6:	2103      	movs	r1, #3
 8007de8:	4628      	mov	r0, r5
 8007dea:	f00f ff07 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 8007dee:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007df0:	2002      	movs	r0, #2
 8007df2:	f503 7584 	add.w	r5, r3, #264	; 0x108
 8007df6:	f00f ff03 	bl	8017c00 <_Znwj>
 8007dfa:	f644 764a 	movw	r6, #20298	; 0x4f4a
 8007dfe:	4603      	mov	r3, r0
            this->operator[]('L').add_edge('N', Direction::LEFT, {'J', 'O'}, QUARTER_CIRCLE);
 8007e00:	466a      	mov	r2, sp
 8007e02:	4628      	mov	r0, r5
 8007e04:	214e      	movs	r1, #78	; 0x4e
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007e06:	1c9d      	adds	r5, r3, #2
 8007e08:	801e      	strh	r6, [r3, #0]
	  this->_M_impl._M_finish =
 8007e0a:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	f7fe fb5c 	bl	80064cc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.2>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007e14:	9800      	ldr	r0, [sp, #0]
	if (__p)
 8007e16:	b118      	cbz	r0, 8007e20 <_ZN3jlb5GraphC1Ev+0x1480>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8007e18:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 8007e1a:	1a09      	subs	r1, r1, r0
 8007e1c:	f00f feee 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 8007e20:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007e22:	2003      	movs	r0, #3
 8007e24:	f503 7590 	add.w	r5, r3, #288	; 0x120
 8007e28:	f00f feea 	bl	8017c00 <_Znwj>
 8007e2c:	f245 1650 	movw	r6, #20816	; 0x5150
 8007e30:	4603      	mov	r3, r0
            this->operator[]('M').add_edge('H', Direction::STRAIGHT, {'P', 'Q', 'R'}, 2.0f * UNIT);
 8007e32:	4628      	mov	r0, r5
 8007e34:	2552      	movs	r5, #82	; 0x52
 8007e36:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8008028 <_ZN3jlb5GraphC1Ev+0x1688>
 8007e3a:	709d      	strb	r5, [r3, #2]
 8007e3c:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007e3e:	1cdd      	adds	r5, r3, #3
 8007e40:	2148      	movs	r1, #72	; 0x48
 8007e42:	801e      	strh	r6, [r3, #0]
	  this->_M_impl._M_finish =
 8007e44:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	f7fe fa9b 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007e4e:	9800      	ldr	r0, [sp, #0]
	if (__p)
 8007e50:	b118      	cbz	r0, 8007e5a <_ZN3jlb5GraphC1Ev+0x14ba>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8007e52:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 8007e54:	1a09      	subs	r1, r1, r0
 8007e56:	f00f fed1 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 8007e5a:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007e5c:	2003      	movs	r0, #3
 8007e5e:	f503 7590 	add.w	r5, r3, #288	; 0x120
 8007e62:	f00f fecd 	bl	8017c00 <_Znwj>
 8007e66:	f245 1650 	movw	r6, #20816	; 0x5150
 8007e6a:	4603      	mov	r3, r0
            this->operator[]('M').add_edge('K', Direction::RIGHT, {'P', 'Q', 'R'}, QUARTER_CIRCLE);
 8007e6c:	4628      	mov	r0, r5
 8007e6e:	2552      	movs	r5, #82	; 0x52
 8007e70:	466a      	mov	r2, sp
 8007e72:	709d      	strb	r5, [r3, #2]
 8007e74:	214b      	movs	r1, #75	; 0x4b
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007e76:	1cdd      	adds	r5, r3, #3
 8007e78:	801e      	strh	r6, [r3, #0]
	  this->_M_impl._M_finish =
 8007e7a:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8007e7e:	9300      	str	r3, [sp, #0]
 8007e80:	f7fe fad6 	bl	8006430 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.1>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007e84:	9800      	ldr	r0, [sp, #0]
	if (__p)
 8007e86:	b118      	cbz	r0, 8007e90 <_ZN3jlb5GraphC1Ev+0x14f0>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8007e88:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 8007e8a:	1a09      	subs	r1, r1, r0
 8007e8c:	f00f feb6 	bl	8017bfc <_ZdlPvj>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007e90:	2002      	movs	r0, #2
	return *(this->_M_impl._M_start + __n);
 8007e92:	6826      	ldr	r6, [r4, #0]
 8007e94:	f00f feb4 	bl	8017c00 <_Znwj>
 8007e98:	f644 3348 	movw	r3, #19272	; 0x4b48
 8007e9c:	4605      	mov	r5, r0
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 8007e9e:	f04f 0852 	mov.w	r8, #82	; 0x52
 8007ea2:	2700      	movs	r7, #0
 8007ea4:	802b      	strh	r3, [r5, #0]
 8007ea6:	2002      	movs	r0, #2
 8007ea8:	f88d 8000 	strb.w	r8, [sp]
 8007eac:	9701      	str	r7, [sp, #4]
 8007eae:	f00f fea7 	bl	8017c00 <_Znwj>
 8007eb2:	882b      	ldrh	r3, [r5, #0]
 8007eb4:	f8df c178 	ldr.w	ip, [pc, #376]	; 8008030 <_ZN3jlb5GraphC1Ev+0x1690>
 8007eb8:	8003      	strh	r3, [r0, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8007eba:	e9d6 124c 	ldrd	r1, r2, [r6, #304]	; 0x130
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007ebe:	1c83      	adds	r3, r0, #2
 8007ec0:	4291      	cmp	r1, r2
	this->_M_impl._M_finish =
 8007ec2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8007ec6:	f8cd c014 	str.w	ip, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8007eca:	9002      	str	r0, [sp, #8]
 8007ecc:	f000 86de 	beq.w	8008c8c <_ZN3jlb5GraphC1Ev+0x22ec>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8007ed0:	e9c1 7001 	strd	r7, r0, [r1, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8007ed4:	e9c1 3303 	strd	r3, r3, [r1, #12]
    struct Edge
 8007ed8:	f8c1 c014 	str.w	ip, [r1, #20]
 8007edc:	f881 8000 	strb.w	r8, [r1]
	    ++this->_M_impl._M_finish;
 8007ee0:	3118      	adds	r1, #24
 8007ee2:	f8c6 1130 	str.w	r1, [r6, #304]	; 0x130
	::operator delete(__p
 8007ee6:	2102      	movs	r1, #2
 8007ee8:	4628      	mov	r0, r5
 8007eea:	f00f fe87 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 8007eee:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007ef0:	2002      	movs	r0, #2
 8007ef2:	f503 7590 	add.w	r5, r3, #288	; 0x120
 8007ef6:	f00f fe83 	bl	8017c00 <_Znwj>
 8007efa:	4603      	mov	r3, r0
            this->operator[]('M').add_edge('Q', Direction::STRAIGHT, {'H', 'K'}, UNIT);
 8007efc:	4628      	mov	r0, r5
 8007efe:	f644 3548 	movw	r5, #19272	; 0x4b48
 8007f02:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800802c <_ZN3jlb5GraphC1Ev+0x168c>
 8007f06:	801d      	strh	r5, [r3, #0]
 8007f08:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007f0a:	1c9d      	adds	r5, r3, #2
 8007f0c:	2151      	movs	r1, #81	; 0x51
	  this->_M_impl._M_finish =
 8007f0e:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	f7fe fa36 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007f18:	9800      	ldr	r0, [sp, #0]
	if (__p)
 8007f1a:	b118      	cbz	r0, 8007f24 <_ZN3jlb5GraphC1Ev+0x1584>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8007f1c:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 8007f1e:	1a09      	subs	r1, r1, r0
 8007f20:	f00f fe6c 	bl	8017bfc <_ZdlPvj>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007f24:	2002      	movs	r0, #2
	return *(this->_M_impl._M_start + __n);
 8007f26:	6826      	ldr	r6, [r4, #0]
 8007f28:	f00f fe6a 	bl	8017c00 <_Znwj>
 8007f2c:	f644 3348 	movw	r3, #19272	; 0x4b48
 8007f30:	4605      	mov	r5, r0
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 8007f32:	f04f 0850 	mov.w	r8, #80	; 0x50
 8007f36:	2701      	movs	r7, #1
 8007f38:	802b      	strh	r3, [r5, #0]
 8007f3a:	2002      	movs	r0, #2
 8007f3c:	f88d 8000 	strb.w	r8, [sp]
 8007f40:	9701      	str	r7, [sp, #4]
 8007f42:	f00f fe5d 	bl	8017c00 <_Znwj>
 8007f46:	882a      	ldrh	r2, [r5, #0]
 8007f48:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008030 <_ZN3jlb5GraphC1Ev+0x1690>
 8007f4c:	8002      	strh	r2, [r0, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8007f4e:	e9d6 134c 	ldrd	r1, r3, [r6, #304]	; 0x130
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007f52:	1c82      	adds	r2, r0, #2
 8007f54:	4299      	cmp	r1, r3
	this->_M_impl._M_finish =
 8007f56:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8007f5a:	f8cd c014 	str.w	ip, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8007f5e:	9002      	str	r0, [sp, #8]
 8007f60:	f000 86a3 	beq.w	8008caa <_ZN3jlb5GraphC1Ev+0x230a>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8007f64:	e9c1 7001 	strd	r7, r0, [r1, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8007f68:	e9c1 2203 	strd	r2, r2, [r1, #12]
    struct Edge
 8007f6c:	f8c1 c014 	str.w	ip, [r1, #20]
 8007f70:	f881 8000 	strb.w	r8, [r1]
	    ++this->_M_impl._M_finish;
 8007f74:	3118      	adds	r1, #24
 8007f76:	f8c6 1130 	str.w	r1, [r6, #304]	; 0x130
	::operator delete(__p
 8007f7a:	2102      	movs	r1, #2
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	f00f fe3d 	bl	8017bfc <_ZdlPvj>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007f82:	2003      	movs	r0, #3
	return *(this->_M_impl._M_start + __n);
 8007f84:	6826      	ldr	r6, [r4, #0]
 8007f86:	f00f fe3b 	bl	8017c00 <_Znwj>
 8007f8a:	f245 3352 	movw	r3, #21330	; 0x5352
 8007f8e:	4605      	mov	r5, r0
 8007f90:	2254      	movs	r2, #84	; 0x54
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 8007f92:	f04f 094b 	mov.w	r9, #75	; 0x4b
 8007f96:	2700      	movs	r7, #0
 8007f98:	70aa      	strb	r2, [r5, #2]
 8007f9a:	802b      	strh	r3, [r5, #0]
 8007f9c:	2003      	movs	r0, #3
 8007f9e:	f88d 9000 	strb.w	r9, [sp]
 8007fa2:	9701      	str	r7, [sp, #4]
 8007fa4:	f00f fe2c 	bl	8017c00 <_Znwj>
 8007fa8:	8829      	ldrh	r1, [r5, #0]
 8007faa:	78ab      	ldrb	r3, [r5, #2]
 8007fac:	8001      	strh	r1, [r0, #0]
 8007fae:	7083      	strb	r3, [r0, #2]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8007fb0:	f8d6 1148 	ldr.w	r1, [r6, #328]	; 0x148
 8007fb4:	f8d6 214c 	ldr.w	r2, [r6, #332]	; 0x14c
 8007fb8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8008030 <_ZN3jlb5GraphC1Ev+0x1690>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8007fbc:	1cc3      	adds	r3, r0, #3
 8007fbe:	4291      	cmp	r1, r2
	this->_M_impl._M_finish =
 8007fc0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8007fc4:	f8cd c014 	str.w	ip, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8007fc8:	9002      	str	r0, [sp, #8]
 8007fca:	f000 867d 	beq.w	8008cc8 <_ZN3jlb5GraphC1Ev+0x2328>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8007fce:	e9c1 7001 	strd	r7, r0, [r1, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8007fd2:	e9c1 3303 	strd	r3, r3, [r1, #12]
    struct Edge
 8007fd6:	f8c1 c014 	str.w	ip, [r1, #20]
 8007fda:	f881 9000 	strb.w	r9, [r1]
	    ++this->_M_impl._M_finish;
 8007fde:	3118      	adds	r1, #24
 8007fe0:	f8c6 1148 	str.w	r1, [r6, #328]	; 0x148
	::operator delete(__p
 8007fe4:	2103      	movs	r1, #3
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	f00f fe08 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 8007fec:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007fee:	2003      	movs	r0, #3
 8007ff0:	f503 759c 	add.w	r5, r3, #312	; 0x138
 8007ff4:	f00f fe04 	bl	8017c00 <_Znwj>
 8007ff8:	f245 3652 	movw	r6, #21330	; 0x5352
 8007ffc:	4603      	mov	r3, r0
            this->operator[]('N').add_edge('I', Direction::STRAIGHT, {'R', 'S', 'T'}, 2.0f * UNIT);
 8007ffe:	4628      	mov	r0, r5
 8008000:	2554      	movs	r5, #84	; 0x54
 8008002:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8008028 <_ZN3jlb5GraphC1Ev+0x1688>
 8008006:	709d      	strb	r5, [r3, #2]
 8008008:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800800a:	1cdd      	adds	r5, r3, #3
 800800c:	2149      	movs	r1, #73	; 0x49
 800800e:	801e      	strh	r6, [r3, #0]
	  this->_M_impl._M_finish =
 8008010:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8008014:	9300      	str	r3, [sp, #0]
 8008016:	f7fe f9b5 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800801a:	9800      	ldr	r0, [sp, #0]
	if (__p)
 800801c:	b150      	cbz	r0, 8008034 <_ZN3jlb5GraphC1Ev+0x1694>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800801e:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 8008020:	1a09      	subs	r1, r1, r0
 8008022:	f00f fdeb 	bl	8017bfc <_ZdlPvj>
 8008026:	e005      	b.n	8008034 <_ZN3jlb5GraphC1Ev+0x1694>
 8008028:	3f99999a 	.word	0x3f99999a
 800802c:	3f19999a 	.word	0x3f19999a
 8008030:	3f71463a 	.word	0x3f71463a
	return *(this->_M_impl._M_start + __n);
 8008034:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008036:	2003      	movs	r0, #3
 8008038:	f503 759c 	add.w	r5, r3, #312	; 0x138
 800803c:	f00f fde0 	bl	8017c00 <_Znwj>
 8008040:	f245 3652 	movw	r6, #21330	; 0x5352
 8008044:	4603      	mov	r3, r0
            this->operator[]('N').add_edge('L', Direction::RIGHT, {'R', 'S', 'T'}, QUARTER_CIRCLE);
 8008046:	4628      	mov	r0, r5
 8008048:	2554      	movs	r5, #84	; 0x54
 800804a:	466a      	mov	r2, sp
 800804c:	709d      	strb	r5, [r3, #2]
 800804e:	214c      	movs	r1, #76	; 0x4c
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8008050:	1cdd      	adds	r5, r3, #3
 8008052:	801e      	strh	r6, [r3, #0]
	  this->_M_impl._M_finish =
 8008054:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8008058:	9300      	str	r3, [sp, #0]
 800805a:	f7fe f9e9 	bl	8006430 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.1>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800805e:	9800      	ldr	r0, [sp, #0]
	if (__p)
 8008060:	b118      	cbz	r0, 800806a <_ZN3jlb5GraphC1Ev+0x16ca>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008062:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 8008064:	1a09      	subs	r1, r1, r0
 8008066:	f00f fdc9 	bl	8017bfc <_ZdlPvj>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800806a:	2003      	movs	r0, #3
	return *(this->_M_impl._M_start + __n);
 800806c:	6826      	ldr	r6, [r4, #0]
 800806e:	f00f fdc7 	bl	8017c00 <_Znwj>
 8008072:	f644 134b 	movw	r3, #18763	; 0x494b
 8008076:	4605      	mov	r5, r0
 8008078:	224c      	movs	r2, #76	; 0x4c
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 800807a:	f04f 0854 	mov.w	r8, #84	; 0x54
 800807e:	2700      	movs	r7, #0
 8008080:	70aa      	strb	r2, [r5, #2]
 8008082:	802b      	strh	r3, [r5, #0]
 8008084:	2003      	movs	r0, #3
 8008086:	f88d 8000 	strb.w	r8, [sp]
 800808a:	9701      	str	r7, [sp, #4]
 800808c:	f00f fdb8 	bl	8017c00 <_Znwj>
 8008090:	882a      	ldrh	r2, [r5, #0]
 8008092:	78ab      	ldrb	r3, [r5, #2]
 8008094:	f8df c380 	ldr.w	ip, [pc, #896]	; 8008418 <_ZN3jlb5GraphC1Ev+0x1a78>
 8008098:	7083      	strb	r3, [r0, #2]
 800809a:	8002      	strh	r2, [r0, #0]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800809c:	1cc3      	adds	r3, r0, #3
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800809e:	e9d6 1252 	ldrd	r1, r2, [r6, #328]	; 0x148
 80080a2:	4291      	cmp	r1, r2
	this->_M_impl._M_finish =
 80080a4:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80080a8:	f8cd c014 	str.w	ip, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80080ac:	9002      	str	r0, [sp, #8]
 80080ae:	f000 861a 	beq.w	8008ce6 <_ZN3jlb5GraphC1Ev+0x2346>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80080b2:	e9c1 7001 	strd	r7, r0, [r1, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 80080b6:	e9c1 3303 	strd	r3, r3, [r1, #12]
    struct Edge
 80080ba:	f8c1 c014 	str.w	ip, [r1, #20]
 80080be:	f881 8000 	strb.w	r8, [r1]
	    ++this->_M_impl._M_finish;
 80080c2:	3118      	adds	r1, #24
 80080c4:	f8c6 1148 	str.w	r1, [r6, #328]	; 0x148
	::operator delete(__p
 80080c8:	2103      	movs	r1, #3
 80080ca:	4628      	mov	r0, r5
 80080cc:	f00f fd96 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 80080d0:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80080d2:	2003      	movs	r0, #3
 80080d4:	f503 759c 	add.w	r5, r3, #312	; 0x138
 80080d8:	f00f fd92 	bl	8017c00 <_Znwj>
 80080dc:	f644 164b 	movw	r6, #18763	; 0x494b
 80080e0:	4603      	mov	r3, r0
            this->operator[]('N').add_edge('S', Direction::STRAIGHT, {'K', 'I', 'L'}, UNIT);
 80080e2:	4628      	mov	r0, r5
 80080e4:	254c      	movs	r5, #76	; 0x4c
 80080e6:	ed9f 0ac9 	vldr	s0, [pc, #804]	; 800840c <_ZN3jlb5GraphC1Ev+0x1a6c>
 80080ea:	709d      	strb	r5, [r3, #2]
 80080ec:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80080ee:	1cdd      	adds	r5, r3, #3
 80080f0:	2153      	movs	r1, #83	; 0x53
 80080f2:	801e      	strh	r6, [r3, #0]
	  this->_M_impl._M_finish =
 80080f4:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80080f8:	9300      	str	r3, [sp, #0]
 80080fa:	f7fe f943 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80080fe:	9800      	ldr	r0, [sp, #0]
	if (__p)
 8008100:	b118      	cbz	r0, 800810a <_ZN3jlb5GraphC1Ev+0x176a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008102:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 8008104:	1a09      	subs	r1, r1, r0
 8008106:	f00f fd79 	bl	8017bfc <_ZdlPvj>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800810a:	2003      	movs	r0, #3
	return *(this->_M_impl._M_start + __n);
 800810c:	6826      	ldr	r6, [r4, #0]
 800810e:	f00f fd77 	bl	8017c00 <_Znwj>
 8008112:	f644 134b 	movw	r3, #18763	; 0x494b
 8008116:	4605      	mov	r5, r0
 8008118:	224c      	movs	r2, #76	; 0x4c
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 800811a:	f04f 0852 	mov.w	r8, #82	; 0x52
 800811e:	2701      	movs	r7, #1
 8008120:	70aa      	strb	r2, [r5, #2]
 8008122:	802b      	strh	r3, [r5, #0]
 8008124:	2003      	movs	r0, #3
 8008126:	f88d 8000 	strb.w	r8, [sp]
 800812a:	9701      	str	r7, [sp, #4]
 800812c:	f00f fd68 	bl	8017c00 <_Znwj>
 8008130:	882a      	ldrh	r2, [r5, #0]
 8008132:	78ab      	ldrb	r3, [r5, #2]
 8008134:	f8df c2e0 	ldr.w	ip, [pc, #736]	; 8008418 <_ZN3jlb5GraphC1Ev+0x1a78>
 8008138:	7083      	strb	r3, [r0, #2]
 800813a:	8002      	strh	r2, [r0, #0]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800813c:	1cc3      	adds	r3, r0, #3
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800813e:	e9d6 1252 	ldrd	r1, r2, [r6, #328]	; 0x148
 8008142:	4291      	cmp	r1, r2
	this->_M_impl._M_finish =
 8008144:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8008148:	f8cd c014 	str.w	ip, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800814c:	9002      	str	r0, [sp, #8]
 800814e:	f000 85d9 	beq.w	8008d04 <_ZN3jlb5GraphC1Ev+0x2364>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8008152:	e9c1 7001 	strd	r7, r0, [r1, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8008156:	e9c1 3303 	strd	r3, r3, [r1, #12]
    struct Edge
 800815a:	f8c1 c014 	str.w	ip, [r1, #20]
 800815e:	f881 8000 	strb.w	r8, [r1]
	    ++this->_M_impl._M_finish;
 8008162:	3118      	adds	r1, #24
 8008164:	f8c6 1148 	str.w	r1, [r6, #328]	; 0x148
	::operator delete(__p
 8008168:	2103      	movs	r1, #3
 800816a:	4628      	mov	r0, r5
 800816c:	f00f fd46 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 8008170:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008172:	2003      	movs	r0, #3
 8008174:	f503 75a8 	add.w	r5, r3, #336	; 0x150
 8008178:	f00f fd42 	bl	8017c00 <_Znwj>
 800817c:	f245 5654 	movw	r6, #21844	; 0x5554
 8008180:	4603      	mov	r3, r0
            this->operator[]('O').add_edge('L', Direction::LEFT, {'T', 'U', 'W'}, QUARTER_CIRCLE);
 8008182:	4628      	mov	r0, r5
 8008184:	2557      	movs	r5, #87	; 0x57
 8008186:	466a      	mov	r2, sp
 8008188:	709d      	strb	r5, [r3, #2]
 800818a:	214c      	movs	r1, #76	; 0x4c
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800818c:	1cdd      	adds	r5, r3, #3
 800818e:	801e      	strh	r6, [r3, #0]
	  this->_M_impl._M_finish =
 8008190:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8008194:	9300      	str	r3, [sp, #0]
 8008196:	f7fe f999 	bl	80064cc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.2>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800819a:	9800      	ldr	r0, [sp, #0]
	if (__p)
 800819c:	b118      	cbz	r0, 80081a6 <_ZN3jlb5GraphC1Ev+0x1806>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800819e:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 80081a0:	1a09      	subs	r1, r1, r0
 80081a2:	f00f fd2b 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 80081a6:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80081a8:	2001      	movs	r0, #1
 80081aa:	f503 75a8 	add.w	r5, r3, #336	; 0x150
 80081ae:	f00f fd27 	bl	8017c00 <_Znwj>
 80081b2:	264c      	movs	r6, #76	; 0x4c
 80081b4:	4603      	mov	r3, r0
            this->operator[]('O').add_edge('U', Direction::LEFT, {'L'}, QUARTER_CIRCLE);
 80081b6:	466a      	mov	r2, sp
 80081b8:	4628      	mov	r0, r5
 80081ba:	2155      	movs	r1, #85	; 0x55
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80081bc:	1c5d      	adds	r5, r3, #1
 80081be:	701e      	strb	r6, [r3, #0]
	  this->_M_impl._M_finish =
 80081c0:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	f7fe f981 	bl	80064cc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.2>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80081ca:	9800      	ldr	r0, [sp, #0]
	if (__p)
 80081cc:	b118      	cbz	r0, 80081d6 <_ZN3jlb5GraphC1Ev+0x1836>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80081ce:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 80081d0:	1a09      	subs	r1, r1, r0
 80081d2:	f00f fd13 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 80081d6:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80081d8:	2001      	movs	r0, #1
 80081da:	f503 75a8 	add.w	r5, r3, #336	; 0x150
 80081de:	f00f fd0f 	bl	8017c00 <_Znwj>
 80081e2:	4603      	mov	r3, r0
            this->operator[]('O').add_edge('W', Direction::STRAIGHT, {'L'}, UNIT + QUARTER_CIRCLE);
 80081e4:	4628      	mov	r0, r5
 80081e6:	254c      	movs	r5, #76	; 0x4c
 80081e8:	ed9f 0a89 	vldr	s0, [pc, #548]	; 8008410 <_ZN3jlb5GraphC1Ev+0x1a70>
 80081ec:	701d      	strb	r5, [r3, #0]
 80081ee:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80081f0:	1c5d      	adds	r5, r3, #1
 80081f2:	2157      	movs	r1, #87	; 0x57
	  this->_M_impl._M_finish =
 80081f4:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80081f8:	9300      	str	r3, [sp, #0]
 80081fa:	f7fe f8c3 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80081fe:	9800      	ldr	r0, [sp, #0]
	if (__p)
 8008200:	b118      	cbz	r0, 800820a <_ZN3jlb5GraphC1Ev+0x186a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008202:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 8008204:	1a09      	subs	r1, r1, r0
 8008206:	f00f fcf9 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 800820a:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800820c:	2001      	movs	r0, #1
 800820e:	f503 75a8 	add.w	r5, r3, #336	; 0x150
 8008212:	f00f fcf5 	bl	8017c00 <_Znwj>
 8008216:	264c      	movs	r6, #76	; 0x4c
 8008218:	4603      	mov	r3, r0
            this->operator[]('O').add_edge('T', Direction::RIGHT, {'L'}, QUARTER_CIRCLE);
 800821a:	466a      	mov	r2, sp
 800821c:	4628      	mov	r0, r5
 800821e:	2154      	movs	r1, #84	; 0x54
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8008220:	1c5d      	adds	r5, r3, #1
 8008222:	701e      	strb	r6, [r3, #0]
	  this->_M_impl._M_finish =
 8008224:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	f7fe f901 	bl	8006430 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.1>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800822e:	9800      	ldr	r0, [sp, #0]
	if (__p)
 8008230:	b118      	cbz	r0, 800823a <_ZN3jlb5GraphC1Ev+0x189a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008232:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 8008234:	1a09      	subs	r1, r1, r0
 8008236:	f00f fce1 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 800823a:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800823c:	2001      	movs	r0, #1
 800823e:	f503 75b4 	add.w	r5, r3, #360	; 0x168
 8008242:	f00f fcdd 	bl	8017c00 <_Znwj>
 8008246:	2650      	movs	r6, #80	; 0x50
 8008248:	4603      	mov	r3, r0
            this->operator[]('P').add_edge('M', Direction::LEFT, {'P'}, QUARTER_CIRCLE);
 800824a:	466a      	mov	r2, sp
 800824c:	4628      	mov	r0, r5
 800824e:	214d      	movs	r1, #77	; 0x4d
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8008250:	1c5d      	adds	r5, r3, #1
 8008252:	701e      	strb	r6, [r3, #0]
	  this->_M_impl._M_finish =
 8008254:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	f7fe f937 	bl	80064cc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.2>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800825e:	9800      	ldr	r0, [sp, #0]
	if (__p)
 8008260:	b118      	cbz	r0, 800826a <_ZN3jlb5GraphC1Ev+0x18ca>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008262:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 8008264:	1a09      	subs	r1, r1, r0
 8008266:	f00f fcc9 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 800826a:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800826c:	2001      	movs	r0, #1
 800826e:	f503 75b4 	add.w	r5, r3, #360	; 0x168
 8008272:	f00f fcc5 	bl	8017c00 <_Znwj>
 8008276:	4603      	mov	r3, r0
            this->operator[]('P').add_edge('Q', Direction::STRAIGHT, {'P'}, UNIT);
 8008278:	4628      	mov	r0, r5
 800827a:	2550      	movs	r5, #80	; 0x50
 800827c:	ed9f 0a63 	vldr	s0, [pc, #396]	; 800840c <_ZN3jlb5GraphC1Ev+0x1a6c>
 8008280:	701d      	strb	r5, [r3, #0]
 8008282:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8008284:	1c5d      	adds	r5, r3, #1
 8008286:	2151      	movs	r1, #81	; 0x51
	  this->_M_impl._M_finish =
 8008288:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	f7fe f879 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008292:	9800      	ldr	r0, [sp, #0]
	if (__p)
 8008294:	b118      	cbz	r0, 800829e <_ZN3jlb5GraphC1Ev+0x18fe>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008296:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 8008298:	1a09      	subs	r1, r1, r0
 800829a:	f00f fcaf 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 800829e:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80082a0:	2001      	movs	r0, #1
 80082a2:	f503 75c0 	add.w	r5, r3, #384	; 0x180
 80082a6:	f00f fcab 	bl	8017c00 <_Znwj>
 80082aa:	4603      	mov	r3, r0
            this->operator[]('Q').add_edge('P', Direction::STRAIGHT, {'R'}, UNIT);
 80082ac:	4628      	mov	r0, r5
 80082ae:	2552      	movs	r5, #82	; 0x52
 80082b0:	ed9f 0a56 	vldr	s0, [pc, #344]	; 800840c <_ZN3jlb5GraphC1Ev+0x1a6c>
 80082b4:	701d      	strb	r5, [r3, #0]
 80082b6:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80082b8:	1c5d      	adds	r5, r3, #1
 80082ba:	2150      	movs	r1, #80	; 0x50
	  this->_M_impl._M_finish =
 80082bc:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	f7fe f85f 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80082c6:	9800      	ldr	r0, [sp, #0]
	if (__p)
 80082c8:	b118      	cbz	r0, 80082d2 <_ZN3jlb5GraphC1Ev+0x1932>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80082ca:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 80082cc:	1a09      	subs	r1, r1, r0
 80082ce:	f00f fc95 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 80082d2:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80082d4:	2002      	movs	r0, #2
 80082d6:	f503 75c0 	add.w	r5, r3, #384	; 0x180
 80082da:	f00f fc91 	bl	8017c00 <_Znwj>
 80082de:	4603      	mov	r3, r0
            this->operator[]('Q').add_edge('M', Direction::STRAIGHT, {'V', 'X'}, UNIT);
 80082e0:	4628      	mov	r0, r5
 80082e2:	f645 0556 	movw	r5, #22614	; 0x5856
 80082e6:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800840c <_ZN3jlb5GraphC1Ev+0x1a6c>
 80082ea:	801d      	strh	r5, [r3, #0]
 80082ec:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80082ee:	1c9d      	adds	r5, r3, #2
 80082f0:	214d      	movs	r1, #77	; 0x4d
	  this->_M_impl._M_finish =
 80082f2:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80082f6:	9300      	str	r3, [sp, #0]
 80082f8:	f7fe f844 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80082fc:	9800      	ldr	r0, [sp, #0]
	if (__p)
 80082fe:	b118      	cbz	r0, 8008308 <_ZN3jlb5GraphC1Ev+0x1968>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008300:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 8008302:	1a09      	subs	r1, r1, r0
 8008304:	f00f fc7a 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 8008308:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800830a:	2001      	movs	r0, #1
 800830c:	f503 75c0 	add.w	r5, r3, #384	; 0x180
 8008310:	f00f fc76 	bl	8017c00 <_Znwj>
 8008314:	4603      	mov	r3, r0
            this->operator[]('Q').add_edge('R', Direction::STRAIGHT, {'P'}, UNIT);
 8008316:	4628      	mov	r0, r5
 8008318:	2550      	movs	r5, #80	; 0x50
 800831a:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 800840c <_ZN3jlb5GraphC1Ev+0x1a6c>
 800831e:	701d      	strb	r5, [r3, #0]
 8008320:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8008322:	1c5d      	adds	r5, r3, #1
 8008324:	2152      	movs	r1, #82	; 0x52
	  this->_M_impl._M_finish =
 8008326:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	f7fe f82a 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008330:	9800      	ldr	r0, [sp, #0]
	if (__p)
 8008332:	b118      	cbz	r0, 800833c <_ZN3jlb5GraphC1Ev+0x199c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008334:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 8008336:	1a09      	subs	r1, r1, r0
 8008338:	f00f fc60 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 800833c:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800833e:	2001      	movs	r0, #1
 8008340:	f503 75c0 	add.w	r5, r3, #384	; 0x180
 8008344:	f00f fc5c 	bl	8017c00 <_Znwj>
 8008348:	264d      	movs	r6, #77	; 0x4d
 800834a:	4603      	mov	r3, r0
            this->operator[]('Q').add_edge('V', Direction::LEFT, {'M'}, QUARTER_CIRCLE);
 800834c:	466a      	mov	r2, sp
 800834e:	4628      	mov	r0, r5
 8008350:	2156      	movs	r1, #86	; 0x56
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8008352:	1c5d      	adds	r5, r3, #1
 8008354:	701e      	strb	r6, [r3, #0]
	  this->_M_impl._M_finish =
 8008356:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800835a:	9300      	str	r3, [sp, #0]
 800835c:	f7fe f8b6 	bl	80064cc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.2>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008360:	9800      	ldr	r0, [sp, #0]
	if (__p)
 8008362:	b118      	cbz	r0, 800836c <_ZN3jlb5GraphC1Ev+0x19cc>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008364:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 8008366:	1a09      	subs	r1, r1, r0
 8008368:	f00f fc48 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 800836c:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800836e:	2001      	movs	r0, #1
 8008370:	f503 75c0 	add.w	r5, r3, #384	; 0x180
 8008374:	f00f fc44 	bl	8017c00 <_Znwj>
 8008378:	4603      	mov	r3, r0
            this->operator[]('Q').add_edge('X', Direction::STRAIGHT, {'M'}, 2.5f * UNIT + QUARTER_CIRCLE);
 800837a:	4628      	mov	r0, r5
 800837c:	254d      	movs	r5, #77	; 0x4d
 800837e:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8008414 <_ZN3jlb5GraphC1Ev+0x1a74>
 8008382:	701d      	strb	r5, [r3, #0]
 8008384:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8008386:	1c5d      	adds	r5, r3, #1
 8008388:	2158      	movs	r1, #88	; 0x58
	  this->_M_impl._M_finish =
 800838a:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	f7fd fff8 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008394:	9800      	ldr	r0, [sp, #0]
	if (__p)
 8008396:	b118      	cbz	r0, 80083a0 <_ZN3jlb5GraphC1Ev+0x1a00>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008398:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 800839a:	1a09      	subs	r1, r1, r0
 800839c:	f00f fc2e 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 80083a0:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80083a2:	2002      	movs	r0, #2
 80083a4:	f503 75cc 	add.w	r5, r3, #408	; 0x198
 80083a8:	f00f fc2a 	bl	8017c00 <_Znwj>
 80083ac:	4603      	mov	r3, r0
            this->operator[]('R').add_edge('Q', Direction::STRAIGHT, {'N', 'S'}, UNIT);
 80083ae:	4628      	mov	r0, r5
 80083b0:	f245 354e 	movw	r5, #21326	; 0x534e
 80083b4:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800840c <_ZN3jlb5GraphC1Ev+0x1a6c>
 80083b8:	801d      	strh	r5, [r3, #0]
 80083ba:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80083bc:	1c9d      	adds	r5, r3, #2
 80083be:	2151      	movs	r1, #81	; 0x51
	  this->_M_impl._M_finish =
 80083c0:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80083c4:	9300      	str	r3, [sp, #0]
 80083c6:	f7fd ffdd 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80083ca:	9800      	ldr	r0, [sp, #0]
	if (__p)
 80083cc:	b118      	cbz	r0, 80083d6 <_ZN3jlb5GraphC1Ev+0x1a36>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80083ce:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 80083d0:	1a09      	subs	r1, r1, r0
 80083d2:	f00f fc13 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 80083d6:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80083d8:	2002      	movs	r0, #2
 80083da:	f503 75cc 	add.w	r5, r3, #408	; 0x198
 80083de:	f00f fc0f 	bl	8017c00 <_Znwj>
 80083e2:	f245 364e 	movw	r6, #21326	; 0x534e
 80083e6:	4603      	mov	r3, r0
            this->operator[]('R').add_edge('M', Direction::RIGHT, {'N', 'S'}, QUARTER_CIRCLE);
 80083e8:	466a      	mov	r2, sp
 80083ea:	4628      	mov	r0, r5
 80083ec:	214d      	movs	r1, #77	; 0x4d
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80083ee:	1c9d      	adds	r5, r3, #2
 80083f0:	801e      	strh	r6, [r3, #0]
	  this->_M_impl._M_finish =
 80083f2:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	f7fe f81a 	bl	8006430 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.1>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80083fc:	9800      	ldr	r0, [sp, #0]
	if (__p)
 80083fe:	b178      	cbz	r0, 8008420 <_ZN3jlb5GraphC1Ev+0x1a80>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008400:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 8008402:	1a09      	subs	r1, r1, r0
 8008404:	f00f fbfa 	bl	8017bfc <_ZdlPvj>
 8008408:	e00a      	b.n	8008420 <_ZN3jlb5GraphC1Ev+0x1a80>
 800840a:	bf00      	nop
 800840c:	3f19999a 	.word	0x3f19999a
 8008410:	3fc56fea 	.word	0x3fc56fea
 8008414:	401c518f 	.word	0x401c518f
 8008418:	3f71463a 	.word	0x3f71463a
 800841c:	3f19999a 	.word	0x3f19999a
	return *(this->_M_impl._M_start + __n);
 8008420:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008422:	2002      	movs	r0, #2
 8008424:	f503 75cc 	add.w	r5, r3, #408	; 0x198
 8008428:	f00f fbea 	bl	8017c00 <_Znwj>
 800842c:	f245 164d 	movw	r6, #20813	; 0x514d
 8008430:	4603      	mov	r3, r0
            this->operator[]('R').add_edge('N', Direction::LEFT, {'M', 'Q'}, QUARTER_CIRCLE);
 8008432:	466a      	mov	r2, sp
 8008434:	4628      	mov	r0, r5
 8008436:	214e      	movs	r1, #78	; 0x4e
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8008438:	1c9d      	adds	r5, r3, #2
 800843a:	801e      	strh	r6, [r3, #0]
	  this->_M_impl._M_finish =
 800843c:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8008440:	9300      	str	r3, [sp, #0]
 8008442:	f7fe f843 	bl	80064cc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.2>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008446:	9800      	ldr	r0, [sp, #0]
	if (__p)
 8008448:	b118      	cbz	r0, 8008452 <_ZN3jlb5GraphC1Ev+0x1ab2>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800844a:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 800844c:	1a09      	subs	r1, r1, r0
 800844e:	f00f fbd5 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 8008452:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008454:	2002      	movs	r0, #2
 8008456:	f503 75cc 	add.w	r5, r3, #408	; 0x198
 800845a:	f00f fbd1 	bl	8017c00 <_Znwj>
 800845e:	4603      	mov	r3, r0
            this->operator[]('R').add_edge('S', Direction::STRAIGHT, {'M', 'Q'}, UNIT);
 8008460:	4628      	mov	r0, r5
 8008462:	f245 154d 	movw	r5, #20813	; 0x514d
 8008466:	ed1f 0a13 	vldr	s0, [pc, #-76]	; 800841c <_ZN3jlb5GraphC1Ev+0x1a7c>
 800846a:	801d      	strh	r5, [r3, #0]
 800846c:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800846e:	1c9d      	adds	r5, r3, #2
 8008470:	2153      	movs	r1, #83	; 0x53
	  this->_M_impl._M_finish =
 8008472:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8008476:	9300      	str	r3, [sp, #0]
 8008478:	f7fd ff84 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800847c:	9800      	ldr	r0, [sp, #0]
	if (__p)
 800847e:	b118      	cbz	r0, 8008488 <_ZN3jlb5GraphC1Ev+0x1ae8>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008480:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 8008482:	1a09      	subs	r1, r1, r0
 8008484:	f00f fbba 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 8008488:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800848a:	2001      	movs	r0, #1
 800848c:	f503 75d8 	add.w	r5, r3, #432	; 0x1b0
 8008490:	f00f fbb6 	bl	8017c00 <_Znwj>
 8008494:	4603      	mov	r3, r0
            this->operator[]('S').add_edge('R', Direction::STRAIGHT, {'T'}, UNIT);
 8008496:	4628      	mov	r0, r5
 8008498:	2554      	movs	r5, #84	; 0x54
 800849a:	ed1f 0a20 	vldr	s0, [pc, #-128]	; 800841c <_ZN3jlb5GraphC1Ev+0x1a7c>
 800849e:	701d      	strb	r5, [r3, #0]
 80084a0:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80084a2:	1c5d      	adds	r5, r3, #1
 80084a4:	2152      	movs	r1, #82	; 0x52
	  this->_M_impl._M_finish =
 80084a6:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	f7fd ff6a 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80084b0:	9800      	ldr	r0, [sp, #0]
	if (__p)
 80084b2:	b118      	cbz	r0, 80084bc <_ZN3jlb5GraphC1Ev+0x1b1c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80084b4:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 80084b6:	1a09      	subs	r1, r1, r0
 80084b8:	f00f fba0 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 80084bc:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80084be:	2002      	movs	r0, #2
 80084c0:	f503 75d8 	add.w	r5, r3, #432	; 0x1b0
 80084c4:	f00f fb9c 	bl	8017c00 <_Znwj>
 80084c8:	4603      	mov	r3, r0
            this->operator[]('S').add_edge('N', Direction::STRAIGHT, {'V', 'W'}, UNIT);
 80084ca:	4628      	mov	r0, r5
 80084cc:	f245 7556 	movw	r5, #22358	; 0x5756
 80084d0:	ed1f 0a2e 	vldr	s0, [pc, #-184]	; 800841c <_ZN3jlb5GraphC1Ev+0x1a7c>
 80084d4:	801d      	strh	r5, [r3, #0]
 80084d6:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80084d8:	1c9d      	adds	r5, r3, #2
 80084da:	214e      	movs	r1, #78	; 0x4e
	  this->_M_impl._M_finish =
 80084dc:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80084e0:	9300      	str	r3, [sp, #0]
 80084e2:	f7fd ff4f 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80084e6:	9800      	ldr	r0, [sp, #0]
	if (__p)
 80084e8:	b118      	cbz	r0, 80084f2 <_ZN3jlb5GraphC1Ev+0x1b52>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80084ea:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 80084ec:	1a09      	subs	r1, r1, r0
 80084ee:	f00f fb85 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 80084f2:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80084f4:	2001      	movs	r0, #1
 80084f6:	f503 75d8 	add.w	r5, r3, #432	; 0x1b0
 80084fa:	f00f fb81 	bl	8017c00 <_Znwj>
 80084fe:	4603      	mov	r3, r0
            this->operator[]('S').add_edge('T', Direction::STRAIGHT, {'R'}, UNIT);
 8008500:	4628      	mov	r0, r5
 8008502:	2552      	movs	r5, #82	; 0x52
 8008504:	ed1f 0a3b 	vldr	s0, [pc, #-236]	; 800841c <_ZN3jlb5GraphC1Ev+0x1a7c>
 8008508:	701d      	strb	r5, [r3, #0]
 800850a:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800850c:	1c5d      	adds	r5, r3, #1
 800850e:	2154      	movs	r1, #84	; 0x54
	  this->_M_impl._M_finish =
 8008510:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8008514:	9300      	str	r3, [sp, #0]
 8008516:	f7fd ff35 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800851a:	9800      	ldr	r0, [sp, #0]
	if (__p)
 800851c:	b118      	cbz	r0, 8008526 <_ZN3jlb5GraphC1Ev+0x1b86>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800851e:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 8008520:	1a09      	subs	r1, r1, r0
 8008522:	f00f fb6b 	bl	8017bfc <_ZdlPvj>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008526:	2001      	movs	r0, #1
	return *(this->_M_impl._M_start + __n);
 8008528:	6826      	ldr	r6, [r4, #0]
 800852a:	f00f fb69 	bl	8017c00 <_Znwj>
 800852e:	234e      	movs	r3, #78	; 0x4e
 8008530:	4605      	mov	r5, r0
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 8008532:	f04f 0857 	mov.w	r8, #87	; 0x57
 8008536:	2700      	movs	r7, #0
 8008538:	702b      	strb	r3, [r5, #0]
 800853a:	2001      	movs	r0, #1
 800853c:	f88d 8000 	strb.w	r8, [sp]
 8008540:	9701      	str	r7, [sp, #4]
 8008542:	f00f fb5d 	bl	8017c00 <_Znwj>
 8008546:	782a      	ldrb	r2, [r5, #0]
 8008548:	f8df c3c8 	ldr.w	ip, [pc, #968]	; 8008914 <_ZN3jlb5GraphC1Ev+0x1f74>
 800854c:	7002      	strb	r2, [r0, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800854e:	e9d6 1370 	ldrd	r1, r3, [r6, #448]	; 0x1c0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8008552:	1c42      	adds	r2, r0, #1
 8008554:	4299      	cmp	r1, r3
	this->_M_impl._M_finish =
 8008556:	e9cd 2203 	strd	r2, r2, [sp, #12]
 800855a:	f8cd c014 	str.w	ip, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800855e:	9002      	str	r0, [sp, #8]
 8008560:	f000 83df 	beq.w	8008d22 <_ZN3jlb5GraphC1Ev+0x2382>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8008564:	e9c1 7001 	strd	r7, r0, [r1, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8008568:	e9c1 2203 	strd	r2, r2, [r1, #12]
    struct Edge
 800856c:	f8c1 c014 	str.w	ip, [r1, #20]
 8008570:	f881 8000 	strb.w	r8, [r1]
	    ++this->_M_impl._M_finish;
 8008574:	3118      	adds	r1, #24
 8008576:	f8c6 11c0 	str.w	r1, [r6, #448]	; 0x1c0
	::operator delete(__p
 800857a:	2101      	movs	r1, #1
 800857c:	4628      	mov	r0, r5
 800857e:	f00f fb3d 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 8008582:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008584:	2001      	movs	r0, #1
 8008586:	f503 75d8 	add.w	r5, r3, #432	; 0x1b0
 800858a:	f00f fb39 	bl	8017c00 <_Znwj>
 800858e:	264e      	movs	r6, #78	; 0x4e
 8008590:	4603      	mov	r3, r0
            this->operator[]('S').add_edge('V', Direction::RIGHT, {'N'}, QUARTER_CIRCLE);
 8008592:	466a      	mov	r2, sp
 8008594:	4628      	mov	r0, r5
 8008596:	2156      	movs	r1, #86	; 0x56
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8008598:	1c5d      	adds	r5, r3, #1
 800859a:	701e      	strb	r6, [r3, #0]
	  this->_M_impl._M_finish =
 800859c:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80085a0:	9300      	str	r3, [sp, #0]
 80085a2:	f7fd ff45 	bl	8006430 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.1>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80085a6:	9800      	ldr	r0, [sp, #0]
	if (__p)
 80085a8:	b118      	cbz	r0, 80085b2 <_ZN3jlb5GraphC1Ev+0x1c12>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80085aa:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 80085ac:	1a09      	subs	r1, r1, r0
 80085ae:	f00f fb25 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 80085b2:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80085b4:	2002      	movs	r0, #2
 80085b6:	f503 75e4 	add.w	r5, r3, #456	; 0x1c8
 80085ba:	f00f fb21 	bl	8017c00 <_Znwj>
 80085be:	4603      	mov	r3, r0
            this->operator[]('T').add_edge('S', Direction::STRAIGHT, {'O', 'U'}, UNIT);
 80085c0:	4628      	mov	r0, r5
 80085c2:	f245 554f 	movw	r5, #21839	; 0x554f
 80085c6:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 800890c <_ZN3jlb5GraphC1Ev+0x1f6c>
 80085ca:	801d      	strh	r5, [r3, #0]
 80085cc:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80085ce:	1c9d      	adds	r5, r3, #2
 80085d0:	2153      	movs	r1, #83	; 0x53
	  this->_M_impl._M_finish =
 80085d2:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80085d6:	9300      	str	r3, [sp, #0]
 80085d8:	f7fd fed4 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80085dc:	9800      	ldr	r0, [sp, #0]
	if (__p)
 80085de:	b118      	cbz	r0, 80085e8 <_ZN3jlb5GraphC1Ev+0x1c48>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80085e0:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 80085e2:	1a09      	subs	r1, r1, r0
 80085e4:	f00f fb0a 	bl	8017bfc <_ZdlPvj>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80085e8:	2002      	movs	r0, #2
	return *(this->_M_impl._M_start + __n);
 80085ea:	6826      	ldr	r6, [r4, #0]
 80085ec:	f00f fb08 	bl	8017c00 <_Znwj>
 80085f0:	f245 534f 	movw	r3, #21839	; 0x554f
 80085f4:	4605      	mov	r5, r0
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 80085f6:	f04f 084e 	mov.w	r8, #78	; 0x4e
 80085fa:	2701      	movs	r7, #1
 80085fc:	802b      	strh	r3, [r5, #0]
 80085fe:	2002      	movs	r0, #2
 8008600:	f88d 8000 	strb.w	r8, [sp]
 8008604:	9701      	str	r7, [sp, #4]
 8008606:	f00f fafb 	bl	8017c00 <_Znwj>
 800860a:	882a      	ldrh	r2, [r5, #0]
 800860c:	f8df c304 	ldr.w	ip, [pc, #772]	; 8008914 <_ZN3jlb5GraphC1Ev+0x1f74>
 8008610:	8002      	strh	r2, [r0, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8008612:	e9d6 1376 	ldrd	r1, r3, [r6, #472]	; 0x1d8
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8008616:	1c82      	adds	r2, r0, #2
 8008618:	4299      	cmp	r1, r3
	this->_M_impl._M_finish =
 800861a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 800861e:	f8cd c014 	str.w	ip, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8008622:	9002      	str	r0, [sp, #8]
 8008624:	f000 83b5 	beq.w	8008d92 <_ZN3jlb5GraphC1Ev+0x23f2>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8008628:	e9c1 7001 	strd	r7, r0, [r1, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 800862c:	e9c1 2203 	strd	r2, r2, [r1, #12]
    struct Edge
 8008630:	f8c1 c014 	str.w	ip, [r1, #20]
 8008634:	f881 8000 	strb.w	r8, [r1]
	    ++this->_M_impl._M_finish;
 8008638:	3118      	adds	r1, #24
 800863a:	f8c6 11d8 	str.w	r1, [r6, #472]	; 0x1d8
	::operator delete(__p
 800863e:	2102      	movs	r1, #2
 8008640:	4628      	mov	r0, r5
 8008642:	f00f fadb 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 8008646:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008648:	2002      	movs	r0, #2
 800864a:	f503 75e4 	add.w	r5, r3, #456	; 0x1c8
 800864e:	f00f fad7 	bl	8017c00 <_Znwj>
 8008652:	f245 364e 	movw	r6, #21326	; 0x534e
 8008656:	4603      	mov	r3, r0
            this->operator[]('T').add_edge('O', Direction::LEFT, {'N', 'S'}, QUARTER_CIRCLE);
 8008658:	466a      	mov	r2, sp
 800865a:	4628      	mov	r0, r5
 800865c:	214f      	movs	r1, #79	; 0x4f
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800865e:	1c9d      	adds	r5, r3, #2
 8008660:	801e      	strh	r6, [r3, #0]
	  this->_M_impl._M_finish =
 8008662:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	f7fd ff30 	bl	80064cc <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.2>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800866c:	9800      	ldr	r0, [sp, #0]
	if (__p)
 800866e:	b118      	cbz	r0, 8008678 <_ZN3jlb5GraphC1Ev+0x1cd8>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008670:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 8008672:	1a09      	subs	r1, r1, r0
 8008674:	f00f fac2 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 8008678:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800867a:	2002      	movs	r0, #2
 800867c:	f503 75e4 	add.w	r5, r3, #456	; 0x1c8
 8008680:	f00f fabe 	bl	8017c00 <_Znwj>
 8008684:	4603      	mov	r3, r0
            this->operator[]('T').add_edge('U', Direction::STRAIGHT, {'N', 'S'}, 2.0f * UNIT);
 8008686:	4628      	mov	r0, r5
 8008688:	f245 354e 	movw	r5, #21326	; 0x534e
 800868c:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8008910 <_ZN3jlb5GraphC1Ev+0x1f70>
 8008690:	801d      	strh	r5, [r3, #0]
 8008692:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8008694:	1c9d      	adds	r5, r3, #2
 8008696:	2155      	movs	r1, #85	; 0x55
	  this->_M_impl._M_finish =
 8008698:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800869c:	9300      	str	r3, [sp, #0]
 800869e:	f7fd fe71 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80086a2:	9800      	ldr	r0, [sp, #0]
	if (__p)
 80086a4:	b118      	cbz	r0, 80086ae <_ZN3jlb5GraphC1Ev+0x1d0e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80086a6:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 80086a8:	1a09      	subs	r1, r1, r0
 80086aa:	f00f faa7 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 80086ae:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80086b0:	2001      	movs	r0, #1
 80086b2:	f503 75f0 	add.w	r5, r3, #480	; 0x1e0
 80086b6:	f00f faa3 	bl	8017c00 <_Znwj>
 80086ba:	4603      	mov	r3, r0
            this->operator[]('U').add_edge('T', Direction::STRAIGHT, {'U'}, 2.0f * UNIT);
 80086bc:	4628      	mov	r0, r5
 80086be:	2555      	movs	r5, #85	; 0x55
 80086c0:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8008910 <_ZN3jlb5GraphC1Ev+0x1f70>
 80086c4:	701d      	strb	r5, [r3, #0]
 80086c6:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80086c8:	1c5d      	adds	r5, r3, #1
 80086ca:	2154      	movs	r1, #84	; 0x54
	  this->_M_impl._M_finish =
 80086cc:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80086d0:	9300      	str	r3, [sp, #0]
 80086d2:	f7fd fe57 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80086d6:	9800      	ldr	r0, [sp, #0]
	if (__p)
 80086d8:	b118      	cbz	r0, 80086e2 <_ZN3jlb5GraphC1Ev+0x1d42>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80086da:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 80086dc:	1a09      	subs	r1, r1, r0
 80086de:	f00f fa8d 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 80086e2:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80086e4:	2001      	movs	r0, #1
 80086e6:	f503 75f0 	add.w	r5, r3, #480	; 0x1e0
 80086ea:	f00f fa89 	bl	8017c00 <_Znwj>
 80086ee:	2655      	movs	r6, #85	; 0x55
 80086f0:	4603      	mov	r3, r0
            this->operator[]('U').add_edge('O', Direction::RIGHT, {'U'}, QUARTER_CIRCLE);
 80086f2:	466a      	mov	r2, sp
 80086f4:	4628      	mov	r0, r5
 80086f6:	214f      	movs	r1, #79	; 0x4f
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80086f8:	1c5d      	adds	r5, r3, #1
 80086fa:	701e      	strb	r6, [r3, #0]
	  this->_M_impl._M_finish =
 80086fc:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8008700:	9300      	str	r3, [sp, #0]
 8008702:	f7fd fe95 	bl	8006430 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.1>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008706:	9800      	ldr	r0, [sp, #0]
	if (__p)
 8008708:	b118      	cbz	r0, 8008712 <_ZN3jlb5GraphC1Ev+0x1d72>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800870a:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 800870c:	1a09      	subs	r1, r1, r0
 800870e:	f00f fa75 	bl	8017bfc <_ZdlPvj>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008712:	2002      	movs	r0, #2
	return *(this->_M_impl._M_start + __n);
 8008714:	6826      	ldr	r6, [r4, #0]
 8008716:	f00f fa73 	bl	8017c00 <_Znwj>
 800871a:	f245 7353 	movw	r3, #22355	; 0x5753
 800871e:	4605      	mov	r5, r0
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 8008720:	f04f 0851 	mov.w	r8, #81	; 0x51
 8008724:	2701      	movs	r7, #1
 8008726:	802b      	strh	r3, [r5, #0]
 8008728:	2002      	movs	r0, #2
 800872a:	f88d 8000 	strb.w	r8, [sp]
 800872e:	9701      	str	r7, [sp, #4]
 8008730:	f00f fa66 	bl	8017c00 <_Znwj>
 8008734:	882a      	ldrh	r2, [r5, #0]
 8008736:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 8008914 <_ZN3jlb5GraphC1Ev+0x1f74>
 800873a:	8002      	strh	r2, [r0, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800873c:	e9d6 1382 	ldrd	r1, r3, [r6, #520]	; 0x208
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8008740:	1c82      	adds	r2, r0, #2
 8008742:	4299      	cmp	r1, r3
	this->_M_impl._M_finish =
 8008744:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8008748:	f8cd c014 	str.w	ip, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800874c:	9002      	str	r0, [sp, #8]
 800874e:	f000 8312 	beq.w	8008d76 <_ZN3jlb5GraphC1Ev+0x23d6>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8008752:	e9c1 7001 	strd	r7, r0, [r1, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8008756:	e9c1 2203 	strd	r2, r2, [r1, #12]
    struct Edge
 800875a:	f8c1 c014 	str.w	ip, [r1, #20]
 800875e:	f881 8000 	strb.w	r8, [r1]
	    ++this->_M_impl._M_finish;
 8008762:	3118      	adds	r1, #24
 8008764:	f8c6 1208 	str.w	r1, [r6, #520]	; 0x208
	::operator delete(__p
 8008768:	2102      	movs	r1, #2
 800876a:	4628      	mov	r0, r5
 800876c:	f00f fa46 	bl	8017bfc <_ZdlPvj>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008770:	2001      	movs	r0, #1
	return *(this->_M_impl._M_start + __n);
 8008772:	6826      	ldr	r6, [r4, #0]
 8008774:	f00f fa44 	bl	8017c00 <_Znwj>
 8008778:	2351      	movs	r3, #81	; 0x51
 800877a:	4605      	mov	r5, r0
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 800877c:	f04f 0953 	mov.w	r9, #83	; 0x53
 8008780:	f04f 0800 	mov.w	r8, #0
 8008784:	702b      	strb	r3, [r5, #0]
 8008786:	2001      	movs	r0, #1
 8008788:	f88d 9000 	strb.w	r9, [sp]
 800878c:	f8cd 8004 	str.w	r8, [sp, #4]
 8008790:	f00f fa36 	bl	8017c00 <_Znwj>
 8008794:	782a      	ldrb	r2, [r5, #0]
 8008796:	4f5f      	ldr	r7, [pc, #380]	; (8008914 <_ZN3jlb5GraphC1Ev+0x1f74>)
 8008798:	7002      	strb	r2, [r0, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800879a:	e9d6 1382 	ldrd	r1, r3, [r6, #520]	; 0x208
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800879e:	1c42      	adds	r2, r0, #1
 80087a0:	4299      	cmp	r1, r3
	this->_M_impl._M_finish =
 80087a2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80087a6:	9705      	str	r7, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80087a8:	9002      	str	r0, [sp, #8]
 80087aa:	f000 82d6 	beq.w	8008d5a <_ZN3jlb5GraphC1Ev+0x23ba>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80087ae:	e9c1 8001 	strd	r8, r0, [r1, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 80087b2:	e9c1 2203 	strd	r2, r2, [r1, #12]
    struct Edge
 80087b6:	614f      	str	r7, [r1, #20]
 80087b8:	f881 9000 	strb.w	r9, [r1]
	    ++this->_M_impl._M_finish;
 80087bc:	3118      	adds	r1, #24
 80087be:	f8c6 1208 	str.w	r1, [r6, #520]	; 0x208
	::operator delete(__p
 80087c2:	2101      	movs	r1, #1
 80087c4:	4628      	mov	r0, r5
 80087c6:	f00f fa19 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 80087ca:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80087cc:	2001      	movs	r0, #1
 80087ce:	f503 75fc 	add.w	r5, r3, #504	; 0x1f8
 80087d2:	f00f fa15 	bl	8017c00 <_Znwj>
 80087d6:	4603      	mov	r3, r0
            this->operator[]('V').add_edge('W', Direction::STRAIGHT, {'Q'}, 2.0f * UNIT);
 80087d8:	4628      	mov	r0, r5
 80087da:	2551      	movs	r5, #81	; 0x51
 80087dc:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8008910 <_ZN3jlb5GraphC1Ev+0x1f70>
 80087e0:	701d      	strb	r5, [r3, #0]
 80087e2:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80087e4:	1c5d      	adds	r5, r3, #1
 80087e6:	2157      	movs	r1, #87	; 0x57
	  this->_M_impl._M_finish =
 80087e8:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80087ec:	9300      	str	r3, [sp, #0]
 80087ee:	f7fd fdc9 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80087f2:	9800      	ldr	r0, [sp, #0]
	if (__p)
 80087f4:	b118      	cbz	r0, 80087fe <_ZN3jlb5GraphC1Ev+0x1e5e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80087f6:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 80087f8:	1a09      	subs	r1, r1, r0
 80087fa:	f00f f9ff 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 80087fe:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008800:	2001      	movs	r0, #1
 8008802:	f503 7504 	add.w	r5, r3, #528	; 0x210
 8008806:	f00f f9fb 	bl	8017c00 <_Znwj>
 800880a:	4603      	mov	r3, r0
            this->operator[]('W').add_edge('V', Direction::STRAIGHT, {'O'}, 2.0f * UNIT);
 800880c:	4628      	mov	r0, r5
 800880e:	254f      	movs	r5, #79	; 0x4f
 8008810:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8008910 <_ZN3jlb5GraphC1Ev+0x1f70>
 8008814:	701d      	strb	r5, [r3, #0]
 8008816:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8008818:	1c5d      	adds	r5, r3, #1
 800881a:	2156      	movs	r1, #86	; 0x56
	  this->_M_impl._M_finish =
 800881c:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8008820:	9300      	str	r3, [sp, #0]
 8008822:	f7fd fdaf 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008826:	9800      	ldr	r0, [sp, #0]
	if (__p)
 8008828:	b118      	cbz	r0, 8008832 <_ZN3jlb5GraphC1Ev+0x1e92>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800882a:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 800882c:	1a09      	subs	r1, r1, r0
 800882e:	f00f f9e5 	bl	8017bfc <_ZdlPvj>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008832:	2001      	movs	r0, #1
	return *(this->_M_impl._M_start + __n);
 8008834:	6826      	ldr	r6, [r4, #0]
 8008836:	f00f f9e3 	bl	8017c00 <_Znwj>
        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 800883a:	2701      	movs	r7, #1
 800883c:	234f      	movs	r3, #79	; 0x4f
 800883e:	4605      	mov	r5, r0
 8008840:	f04f 0853 	mov.w	r8, #83	; 0x53
 8008844:	702b      	strb	r3, [r5, #0]
 8008846:	4638      	mov	r0, r7
 8008848:	9701      	str	r7, [sp, #4]
 800884a:	f88d 8000 	strb.w	r8, [sp]
 800884e:	f00f f9d7 	bl	8017c00 <_Znwj>
 8008852:	782a      	ldrb	r2, [r5, #0]
 8008854:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 8008914 <_ZN3jlb5GraphC1Ev+0x1f74>
 8008858:	7002      	strb	r2, [r0, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800885a:	e9d6 1388 	ldrd	r1, r3, [r6, #544]	; 0x220
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800885e:	19c2      	adds	r2, r0, r7
 8008860:	4299      	cmp	r1, r3
	this->_M_impl._M_finish =
 8008862:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8008866:	f8cd c014 	str.w	ip, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800886a:	9002      	str	r0, [sp, #8]
 800886c:	f000 8267 	beq.w	8008d3e <_ZN3jlb5GraphC1Ev+0x239e>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8008870:	e9c1 7001 	strd	r7, r0, [r1, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8008874:	e9c1 2203 	strd	r2, r2, [r1, #12]
    struct Edge
 8008878:	f8c1 c014 	str.w	ip, [r1, #20]
 800887c:	f881 8000 	strb.w	r8, [r1]
	    ++this->_M_impl._M_finish;
 8008880:	3118      	adds	r1, #24
 8008882:	f8c6 1220 	str.w	r1, [r6, #544]	; 0x220
	::operator delete(__p
 8008886:	2101      	movs	r1, #1
 8008888:	4628      	mov	r0, r5
 800888a:	f00f f9b7 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 800888e:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008890:	2002      	movs	r0, #2
 8008892:	f503 7504 	add.w	r5, r3, #528	; 0x210
 8008896:	f00f f9b3 	bl	8017c00 <_Znwj>
 800889a:	4603      	mov	r3, r0
            this->operator[]('W').add_edge('O', Direction::STRAIGHT, {'S', 'V'}, UNIT + QUARTER_CIRCLE);
 800889c:	4628      	mov	r0, r5
 800889e:	f245 6553 	movw	r5, #22099	; 0x5653
 80088a2:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8008918 <_ZN3jlb5GraphC1Ev+0x1f78>
 80088a6:	801d      	strh	r5, [r3, #0]
 80088a8:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80088aa:	1c9d      	adds	r5, r3, #2
 80088ac:	214f      	movs	r1, #79	; 0x4f
	  this->_M_impl._M_finish =
 80088ae:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	f7fd fd66 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80088b8:	9800      	ldr	r0, [sp, #0]
	if (__p)
 80088ba:	b118      	cbz	r0, 80088c4 <_ZN3jlb5GraphC1Ev+0x1f24>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80088bc:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 80088be:	1a09      	subs	r1, r1, r0
 80088c0:	f00f f99c 	bl	8017bfc <_ZdlPvj>
	return *(this->_M_impl._M_start + __n);
 80088c4:	6823      	ldr	r3, [r4, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80088c6:	2001      	movs	r0, #1
 80088c8:	f503 750a 	add.w	r5, r3, #552	; 0x228
 80088cc:	f00f f998 	bl	8017c00 <_Znwj>
 80088d0:	4603      	mov	r3, r0
            this->operator[]('X').add_edge('Q', Direction::STRAIGHT, {'X'}, 2.5f * UNIT + QUARTER_CIRCLE);
 80088d2:	4628      	mov	r0, r5
 80088d4:	2558      	movs	r5, #88	; 0x58
 80088d6:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800891c <_ZN3jlb5GraphC1Ev+0x1f7c>
 80088da:	701d      	strb	r5, [r3, #0]
 80088dc:	466a      	mov	r2, sp
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80088de:	1c5d      	adds	r5, r3, #1
 80088e0:	2151      	movs	r1, #81	; 0x51
	  this->_M_impl._M_finish =
 80088e2:	e9cd 5501 	strd	r5, r5, [sp, #4]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80088e6:	9300      	str	r3, [sp, #0]
 80088e8:	f7fd fd4c 	bl	8006384 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf.constprop.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80088ec:	9800      	ldr	r0, [sp, #0]
	if (__p)
 80088ee:	b118      	cbz	r0, 80088f8 <_ZN3jlb5GraphC1Ev+0x1f58>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80088f0:	9902      	ldr	r1, [sp, #8]
	::operator delete(__p
 80088f2:	1a09      	subs	r1, r1, r0
 80088f4:	f00f f982 	bl	8017bfc <_ZdlPvj>
        }
 80088f8:	4620      	mov	r0, r4
 80088fa:	b007      	add	sp, #28
 80088fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008900:	3518      	adds	r5, #24
 8008902:	42ae      	cmp	r6, r5
 8008904:	f47e aaad 	bne.w	8006e62 <_ZN3jlb5GraphC1Ev+0x4c2>
 8008908:	f7fe bab6 	b.w	8006e78 <_ZN3jlb5GraphC1Ev+0x4d8>
 800890c:	3f19999a 	.word	0x3f19999a
 8008910:	3f99999a 	.word	0x3f99999a
 8008914:	3f71463a 	.word	0x3f71463a
 8008918:	3fc56fea 	.word	0x3fc56fea
 800891c:	401c518f 	.word	0x401c518f
 8008920:	3518      	adds	r5, #24
 8008922:	42ae      	cmp	r6, r5
 8008924:	f47e aac1 	bne.w	8006eaa <_ZN3jlb5GraphC1Ev+0x50a>
 8008928:	f7fe baca 	b.w	8006ec0 <_ZN3jlb5GraphC1Ev+0x520>
 800892c:	3518      	adds	r5, #24
 800892e:	42ae      	cmp	r6, r5
 8008930:	f47e aadf 	bne.w	8006ef2 <_ZN3jlb5GraphC1Ev+0x552>
 8008934:	f7fe bae8 	b.w	8006f08 <_ZN3jlb5GraphC1Ev+0x568>
 8008938:	3518      	adds	r5, #24
 800893a:	42ae      	cmp	r6, r5
 800893c:	f47e ab0a 	bne.w	8006f54 <_ZN3jlb5GraphC1Ev+0x5b4>
 8008940:	f7fe bb13 	b.w	8006f6a <_ZN3jlb5GraphC1Ev+0x5ca>
 8008944:	3518      	adds	r5, #24
 8008946:	42ae      	cmp	r6, r5
 8008948:	f47e ab28 	bne.w	8006f9c <_ZN3jlb5GraphC1Ev+0x5fc>
 800894c:	f7fe bb31 	b.w	8006fb2 <_ZN3jlb5GraphC1Ev+0x612>
 8008950:	3518      	adds	r5, #24
 8008952:	42ae      	cmp	r6, r5
 8008954:	f47e ab46 	bne.w	8006fe4 <_ZN3jlb5GraphC1Ev+0x644>
 8008958:	f7fe bb4f 	b.w	8006ffa <_ZN3jlb5GraphC1Ev+0x65a>
 800895c:	3518      	adds	r5, #24
 800895e:	42ae      	cmp	r6, r5
 8008960:	f47e ab64 	bne.w	800702c <_ZN3jlb5GraphC1Ev+0x68c>
 8008964:	f7fe bb6d 	b.w	8007042 <_ZN3jlb5GraphC1Ev+0x6a2>
 8008968:	3518      	adds	r5, #24
 800896a:	42ae      	cmp	r6, r5
 800896c:	f47e ab82 	bne.w	8007074 <_ZN3jlb5GraphC1Ev+0x6d4>
 8008970:	f7fe bb8b 	b.w	800708a <_ZN3jlb5GraphC1Ev+0x6ea>
 8008974:	3518      	adds	r5, #24
 8008976:	42ae      	cmp	r6, r5
 8008978:	f47e a82b 	bne.w	80069d2 <_ZN3jlb5GraphC1Ev+0x32>
 800897c:	f7fe b834 	b.w	80069e8 <_ZN3jlb5GraphC1Ev+0x48>
 8008980:	3518      	adds	r5, #24
 8008982:	42ae      	cmp	r6, r5
 8008984:	f47e a849 	bne.w	8006a1a <_ZN3jlb5GraphC1Ev+0x7a>
 8008988:	f7fe b852 	b.w	8006a30 <_ZN3jlb5GraphC1Ev+0x90>
 800898c:	3518      	adds	r5, #24
 800898e:	42ae      	cmp	r6, r5
 8008990:	f47e a867 	bne.w	8006a62 <_ZN3jlb5GraphC1Ev+0xc2>
 8008994:	f7fe b870 	b.w	8006a78 <_ZN3jlb5GraphC1Ev+0xd8>
 8008998:	3518      	adds	r5, #24
 800899a:	42ae      	cmp	r6, r5
 800899c:	f47e a885 	bne.w	8006aaa <_ZN3jlb5GraphC1Ev+0x10a>
 80089a0:	f7fe b88e 	b.w	8006ac0 <_ZN3jlb5GraphC1Ev+0x120>
 80089a4:	3518      	adds	r5, #24
 80089a6:	42ae      	cmp	r6, r5
 80089a8:	f47e a8a2 	bne.w	8006af0 <_ZN3jlb5GraphC1Ev+0x150>
 80089ac:	f7fe b8ab 	b.w	8006b06 <_ZN3jlb5GraphC1Ev+0x166>
 80089b0:	3518      	adds	r5, #24
 80089b2:	42ae      	cmp	r6, r5
 80089b4:	f47e a8c0 	bne.w	8006b38 <_ZN3jlb5GraphC1Ev+0x198>
 80089b8:	f7fe b8c9 	b.w	8006b4e <_ZN3jlb5GraphC1Ev+0x1ae>
 80089bc:	3518      	adds	r5, #24
 80089be:	42ae      	cmp	r6, r5
 80089c0:	f47e a8dd 	bne.w	8006b7e <_ZN3jlb5GraphC1Ev+0x1de>
 80089c4:	f7fe b8e6 	b.w	8006b94 <_ZN3jlb5GraphC1Ev+0x1f4>
 80089c8:	3518      	adds	r5, #24
 80089ca:	42ae      	cmp	r6, r5
 80089cc:	f47e a8fb 	bne.w	8006bc6 <_ZN3jlb5GraphC1Ev+0x226>
 80089d0:	f7fe b904 	b.w	8006bdc <_ZN3jlb5GraphC1Ev+0x23c>
 80089d4:	3518      	adds	r5, #24
 80089d6:	42ae      	cmp	r6, r5
 80089d8:	f47e a918 	bne.w	8006c0c <_ZN3jlb5GraphC1Ev+0x26c>
 80089dc:	f7fe b921 	b.w	8006c22 <_ZN3jlb5GraphC1Ev+0x282>
 80089e0:	3518      	adds	r5, #24
 80089e2:	42ae      	cmp	r6, r5
 80089e4:	f47e a944 	bne.w	8006c70 <_ZN3jlb5GraphC1Ev+0x2d0>
 80089e8:	f7fe b94d 	b.w	8006c86 <_ZN3jlb5GraphC1Ev+0x2e6>
 80089ec:	3518      	adds	r5, #24
 80089ee:	42ae      	cmp	r6, r5
 80089f0:	f47e a961 	bne.w	8006cb6 <_ZN3jlb5GraphC1Ev+0x316>
 80089f4:	f7fe b96a 	b.w	8006ccc <_ZN3jlb5GraphC1Ev+0x32c>
 80089f8:	3518      	adds	r5, #24
 80089fa:	42ae      	cmp	r6, r5
 80089fc:	f47e a97f 	bne.w	8006cfe <_ZN3jlb5GraphC1Ev+0x35e>
 8008a00:	f7fe b988 	b.w	8006d14 <_ZN3jlb5GraphC1Ev+0x374>
 8008a04:	3518      	adds	r5, #24
 8008a06:	42ae      	cmp	r6, r5
 8008a08:	f47e a99c 	bne.w	8006d44 <_ZN3jlb5GraphC1Ev+0x3a4>
 8008a0c:	f7fe b9a5 	b.w	8006d5a <_ZN3jlb5GraphC1Ev+0x3ba>
 8008a10:	3518      	adds	r5, #24
 8008a12:	42ae      	cmp	r6, r5
 8008a14:	f47e a9ba 	bne.w	8006d8c <_ZN3jlb5GraphC1Ev+0x3ec>
 8008a18:	f7fe b9c3 	b.w	8006da2 <_ZN3jlb5GraphC1Ev+0x402>
 8008a1c:	3518      	adds	r5, #24
 8008a1e:	42ae      	cmp	r6, r5
 8008a20:	f47e a9d8 	bne.w	8006dd4 <_ZN3jlb5GraphC1Ev+0x434>
 8008a24:	f7fe b9e1 	b.w	8006dea <_ZN3jlb5GraphC1Ev+0x44a>
 8008a28:	3518      	adds	r5, #24
 8008a2a:	42ae      	cmp	r6, r5
 8008a2c:	f47e a9f5 	bne.w	8006e1a <_ZN3jlb5GraphC1Ev+0x47a>
 8008a30:	f7fe b9fe 	b.w	8006e30 <_ZN3jlb5GraphC1Ev+0x490>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8008a34:	f106 0054 	add.w	r0, r6, #84	; 0x54
 8008a38:	466a      	mov	r2, sp
 8008a3a:	f7fd fbef 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008a3e:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008a40:	9904      	ldr	r1, [sp, #16]
 8008a42:	1a09      	subs	r1, r1, r0
	if (__p)
 8008a44:	2800      	cmp	r0, #0
 8008a46:	f43e ac51 	beq.w	80072ec <_ZN3jlb5GraphC1Ev+0x94c>
 8008a4a:	f00f f8d7 	bl	8017bfc <_ZdlPvj>
 8008a4e:	f7fe bc4d 	b.w	80072ec <_ZN3jlb5GraphC1Ev+0x94c>
 8008a52:	f106 000c 	add.w	r0, r6, #12
 8008a56:	466a      	mov	r2, sp
 8008a58:	f7fd fbe0 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008a5c:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008a5e:	9904      	ldr	r1, [sp, #16]
 8008a60:	1a09      	subs	r1, r1, r0
	if (__p)
 8008a62:	2800      	cmp	r0, #0
 8008a64:	f43e ab6f 	beq.w	8007146 <_ZN3jlb5GraphC1Ev+0x7a6>
 8008a68:	f00f f8c8 	bl	8017bfc <_ZdlPvj>
 8008a6c:	f7fe bb6b 	b.w	8007146 <_ZN3jlb5GraphC1Ev+0x7a6>
 8008a70:	f106 0024 	add.w	r0, r6, #36	; 0x24
 8008a74:	466a      	mov	r2, sp
 8008a76:	f7fd fbd1 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008a7a:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008a7c:	9904      	ldr	r1, [sp, #16]
 8008a7e:	1a09      	subs	r1, r1, r0
	if (__p)
 8008a80:	2800      	cmp	r0, #0
 8008a82:	f43e abc0 	beq.w	8007206 <_ZN3jlb5GraphC1Ev+0x866>
 8008a86:	f00f f8b9 	bl	8017bfc <_ZdlPvj>
 8008a8a:	f7fe bbbc 	b.w	8007206 <_ZN3jlb5GraphC1Ev+0x866>
 8008a8e:	f106 0054 	add.w	r0, r6, #84	; 0x54
 8008a92:	466a      	mov	r2, sp
 8008a94:	f7fd fbc2 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008a98:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008a9a:	9904      	ldr	r1, [sp, #16]
 8008a9c:	1a09      	subs	r1, r1, r0
	if (__p)
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	f43e ac56 	beq.w	8007350 <_ZN3jlb5GraphC1Ev+0x9b0>
 8008aa4:	f00f f8aa 	bl	8017bfc <_ZdlPvj>
 8008aa8:	f7fe bc52 	b.w	8007350 <_ZN3jlb5GraphC1Ev+0x9b0>
 8008aac:	f106 0054 	add.w	r0, r6, #84	; 0x54
 8008ab0:	466a      	mov	r2, sp
 8008ab2:	f7fd fbb3 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008ab6:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008ab8:	9904      	ldr	r1, [sp, #16]
 8008aba:	1a09      	subs	r1, r1, r0
	if (__p)
 8008abc:	2800      	cmp	r0, #0
 8008abe:	f43e ac75 	beq.w	80073ac <_ZN3jlb5GraphC1Ev+0xa0c>
 8008ac2:	f00f f89b 	bl	8017bfc <_ZdlPvj>
 8008ac6:	f7fe bc71 	b.w	80073ac <_ZN3jlb5GraphC1Ev+0xa0c>
 8008aca:	f106 0054 	add.w	r0, r6, #84	; 0x54
 8008ace:	466a      	mov	r2, sp
 8008ad0:	f7fd fba4 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008ad4:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008ad6:	9904      	ldr	r1, [sp, #16]
 8008ad8:	1a09      	subs	r1, r1, r0
	if (__p)
 8008ada:	2800      	cmp	r0, #0
 8008adc:	f43e acaf 	beq.w	800743e <_ZN3jlb5GraphC1Ev+0xa9e>
 8008ae0:	f00f f88c 	bl	8017bfc <_ZdlPvj>
 8008ae4:	f7fe bcab 	b.w	800743e <_ZN3jlb5GraphC1Ev+0xa9e>
 8008ae8:	f106 0084 	add.w	r0, r6, #132	; 0x84
 8008aec:	466a      	mov	r2, sp
 8008aee:	f7fd fb95 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008af2:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008af4:	9904      	ldr	r1, [sp, #16]
 8008af6:	1a09      	subs	r1, r1, r0
	if (__p)
 8008af8:	2800      	cmp	r0, #0
 8008afa:	f43e ad1e 	beq.w	800753a <_ZN3jlb5GraphC1Ev+0xb9a>
 8008afe:	f00f f87d 	bl	8017bfc <_ZdlPvj>
 8008b02:	f7fe bd1a 	b.w	800753a <_ZN3jlb5GraphC1Ev+0xb9a>
 8008b06:	f106 0084 	add.w	r0, r6, #132	; 0x84
 8008b0a:	466a      	mov	r2, sp
 8008b0c:	f7fd fb86 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008b10:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008b12:	9904      	ldr	r1, [sp, #16]
 8008b14:	1a09      	subs	r1, r1, r0
	if (__p)
 8008b16:	2800      	cmp	r0, #0
 8008b18:	f43e ad40 	beq.w	800759c <_ZN3jlb5GraphC1Ev+0xbfc>
 8008b1c:	f00f f86e 	bl	8017bfc <_ZdlPvj>
 8008b20:	f7fe bd3c 	b.w	800759c <_ZN3jlb5GraphC1Ev+0xbfc>
 8008b24:	f106 009c 	add.w	r0, r6, #156	; 0x9c
 8008b28:	466a      	mov	r2, sp
 8008b2a:	f7fd fb77 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008b2e:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008b30:	9904      	ldr	r1, [sp, #16]
 8008b32:	1a09      	subs	r1, r1, r0
	if (__p)
 8008b34:	2800      	cmp	r0, #0
 8008b36:	f43e ae08 	beq.w	800774a <_ZN3jlb5GraphC1Ev+0xdaa>
 8008b3a:	f00f f85f 	bl	8017bfc <_ZdlPvj>
 8008b3e:	f7fe be04 	b.w	800774a <_ZN3jlb5GraphC1Ev+0xdaa>
 8008b42:	f106 009c 	add.w	r0, r6, #156	; 0x9c
 8008b46:	466a      	mov	r2, sp
 8008b48:	f7fd fb68 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008b4c:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008b4e:	9904      	ldr	r1, [sp, #16]
 8008b50:	1a09      	subs	r1, r1, r0
	if (__p)
 8008b52:	2800      	cmp	r0, #0
 8008b54:	f43e ae2a 	beq.w	80077ac <_ZN3jlb5GraphC1Ev+0xe0c>
 8008b58:	f00f f850 	bl	8017bfc <_ZdlPvj>
 8008b5c:	f7fe be26 	b.w	80077ac <_ZN3jlb5GraphC1Ev+0xe0c>
 8008b60:	f106 00b4 	add.w	r0, r6, #180	; 0xb4
 8008b64:	466a      	mov	r2, sp
 8008b66:	f7fd fb59 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008b6a:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008b6c:	9904      	ldr	r1, [sp, #16]
 8008b6e:	1a09      	subs	r1, r1, r0
	if (__p)
 8008b70:	2800      	cmp	r0, #0
 8008b72:	f43e ae62 	beq.w	800783a <_ZN3jlb5GraphC1Ev+0xe9a>
 8008b76:	f00f f841 	bl	8017bfc <_ZdlPvj>
 8008b7a:	f7fe be5e 	b.w	800783a <_ZN3jlb5GraphC1Ev+0xe9a>
 8008b7e:	f106 00e4 	add.w	r0, r6, #228	; 0xe4
 8008b82:	466a      	mov	r2, sp
 8008b84:	f7fd fb4a 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008b88:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008b8a:	9904      	ldr	r1, [sp, #16]
 8008b8c:	1a09      	subs	r1, r1, r0
	if (__p)
 8008b8e:	2800      	cmp	r0, #0
 8008b90:	f43e afbe 	beq.w	8007b10 <_ZN3jlb5GraphC1Ev+0x1170>
 8008b94:	f00f f832 	bl	8017bfc <_ZdlPvj>
 8008b98:	f7fe bfba 	b.w	8007b10 <_ZN3jlb5GraphC1Ev+0x1170>
 8008b9c:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
 8008ba0:	466a      	mov	r2, sp
 8008ba2:	f7fd fb3b 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008ba6:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008ba8:	9904      	ldr	r1, [sp, #16]
 8008baa:	1a09      	subs	r1, r1, r0
	if (__p)
 8008bac:	2800      	cmp	r0, #0
 8008bae:	f43e aec9 	beq.w	8007944 <_ZN3jlb5GraphC1Ev+0xfa4>
 8008bb2:	f00f f823 	bl	8017bfc <_ZdlPvj>
 8008bb6:	f7fe bec5 	b.w	8007944 <_ZN3jlb5GraphC1Ev+0xfa4>
 8008bba:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
 8008bbe:	466a      	mov	r2, sp
 8008bc0:	f7fd fb2c 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008bc4:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008bc6:	9904      	ldr	r1, [sp, #16]
 8008bc8:	1a09      	subs	r1, r1, r0
	if (__p)
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	f43e aeef 	beq.w	80079ae <_ZN3jlb5GraphC1Ev+0x100e>
 8008bd0:	f00f f814 	bl	8017bfc <_ZdlPvj>
 8008bd4:	f7fe beeb 	b.w	80079ae <_ZN3jlb5GraphC1Ev+0x100e>
 8008bd8:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
 8008bdc:	466a      	mov	r2, sp
 8008bde:	f7fd fb1d 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008be2:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008be4:	9904      	ldr	r1, [sp, #16]
 8008be6:	1a09      	subs	r1, r1, r0
	if (__p)
 8008be8:	2800      	cmp	r0, #0
 8008bea:	f43e af30 	beq.w	8007a4e <_ZN3jlb5GraphC1Ev+0x10ae>
 8008bee:	f00f f805 	bl	8017bfc <_ZdlPvj>
 8008bf2:	f7fe bf2c 	b.w	8007a4e <_ZN3jlb5GraphC1Ev+0x10ae>
 8008bf6:	f106 00fc 	add.w	r0, r6, #252	; 0xfc
 8008bfa:	466a      	mov	r2, sp
 8008bfc:	f7fd fb0e 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008c00:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008c02:	9904      	ldr	r1, [sp, #16]
 8008c04:	1a09      	subs	r1, r1, r0
	if (__p)
 8008c06:	2800      	cmp	r0, #0
 8008c08:	f43e afb7 	beq.w	8007b7a <_ZN3jlb5GraphC1Ev+0x11da>
 8008c0c:	f00e fff6 	bl	8017bfc <_ZdlPvj>
 8008c10:	f7fe bfb3 	b.w	8007b7a <_ZN3jlb5GraphC1Ev+0x11da>
 8008c14:	f106 00fc 	add.w	r0, r6, #252	; 0xfc
 8008c18:	466a      	mov	r2, sp
 8008c1a:	f7fd faff 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008c1e:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008c20:	9904      	ldr	r1, [sp, #16]
 8008c22:	1a09      	subs	r1, r1, r0
	if (__p)
 8008c24:	2800      	cmp	r0, #0
 8008c26:	f43f a811 	beq.w	8007c4c <_ZN3jlb5GraphC1Ev+0x12ac>
 8008c2a:	f00e ffe7 	bl	8017bfc <_ZdlPvj>
 8008c2e:	f7ff b80d 	b.w	8007c4c <_ZN3jlb5GraphC1Ev+0x12ac>
 8008c32:	f106 00fc 	add.w	r0, r6, #252	; 0xfc
 8008c36:	466a      	mov	r2, sp
 8008c38:	f7fd faf0 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008c3c:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008c3e:	9904      	ldr	r1, [sp, #16]
 8008c40:	1a09      	subs	r1, r1, r0
	if (__p)
 8008c42:	2800      	cmp	r0, #0
 8008c44:	f43f a837 	beq.w	8007cb6 <_ZN3jlb5GraphC1Ev+0x1316>
 8008c48:	f00e ffd8 	bl	8017bfc <_ZdlPvj>
 8008c4c:	f7ff b833 	b.w	8007cb6 <_ZN3jlb5GraphC1Ev+0x1316>
 8008c50:	f506 708a 	add.w	r0, r6, #276	; 0x114
 8008c54:	466a      	mov	r2, sp
 8008c56:	f7fd fae1 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008c5a:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008c5c:	9904      	ldr	r1, [sp, #16]
 8008c5e:	1a09      	subs	r1, r1, r0
	if (__p)
 8008c60:	2800      	cmp	r0, #0
 8008c62:	f43f a872 	beq.w	8007d4a <_ZN3jlb5GraphC1Ev+0x13aa>
 8008c66:	f00e ffc9 	bl	8017bfc <_ZdlPvj>
 8008c6a:	f7ff b86e 	b.w	8007d4a <_ZN3jlb5GraphC1Ev+0x13aa>
 8008c6e:	f506 708a 	add.w	r0, r6, #276	; 0x114
 8008c72:	466a      	mov	r2, sp
 8008c74:	f7fd fad2 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008c78:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008c7a:	9904      	ldr	r1, [sp, #16]
 8008c7c:	1a09      	subs	r1, r1, r0
	if (__p)
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	f43f a8b1 	beq.w	8007de6 <_ZN3jlb5GraphC1Ev+0x1446>
 8008c84:	f00e ffba 	bl	8017bfc <_ZdlPvj>
 8008c88:	f7ff b8ad 	b.w	8007de6 <_ZN3jlb5GraphC1Ev+0x1446>
 8008c8c:	f506 7096 	add.w	r0, r6, #300	; 0x12c
 8008c90:	466a      	mov	r2, sp
 8008c92:	f7fd fac3 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008c96:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008c98:	9904      	ldr	r1, [sp, #16]
 8008c9a:	1a09      	subs	r1, r1, r0
	if (__p)
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	f43f a922 	beq.w	8007ee6 <_ZN3jlb5GraphC1Ev+0x1546>
 8008ca2:	f00e ffab 	bl	8017bfc <_ZdlPvj>
 8008ca6:	f7ff b91e 	b.w	8007ee6 <_ZN3jlb5GraphC1Ev+0x1546>
 8008caa:	f506 7096 	add.w	r0, r6, #300	; 0x12c
 8008cae:	466a      	mov	r2, sp
 8008cb0:	f7fd fab4 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008cb4:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008cb6:	9904      	ldr	r1, [sp, #16]
 8008cb8:	1a09      	subs	r1, r1, r0
	if (__p)
 8008cba:	2800      	cmp	r0, #0
 8008cbc:	f43f a95d 	beq.w	8007f7a <_ZN3jlb5GraphC1Ev+0x15da>
 8008cc0:	f00e ff9c 	bl	8017bfc <_ZdlPvj>
 8008cc4:	f7ff b959 	b.w	8007f7a <_ZN3jlb5GraphC1Ev+0x15da>
 8008cc8:	f506 70a2 	add.w	r0, r6, #324	; 0x144
 8008ccc:	466a      	mov	r2, sp
 8008cce:	f7fd faa5 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008cd2:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008cd4:	9904      	ldr	r1, [sp, #16]
 8008cd6:	1a09      	subs	r1, r1, r0
	if (__p)
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	f43f a983 	beq.w	8007fe4 <_ZN3jlb5GraphC1Ev+0x1644>
 8008cde:	f00e ff8d 	bl	8017bfc <_ZdlPvj>
 8008ce2:	f7ff b97f 	b.w	8007fe4 <_ZN3jlb5GraphC1Ev+0x1644>
 8008ce6:	f506 70a2 	add.w	r0, r6, #324	; 0x144
 8008cea:	466a      	mov	r2, sp
 8008cec:	f7fd fa96 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008cf0:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008cf2:	9904      	ldr	r1, [sp, #16]
 8008cf4:	1a09      	subs	r1, r1, r0
	if (__p)
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	f43f a9e6 	beq.w	80080c8 <_ZN3jlb5GraphC1Ev+0x1728>
 8008cfc:	f00e ff7e 	bl	8017bfc <_ZdlPvj>
 8008d00:	f7ff b9e2 	b.w	80080c8 <_ZN3jlb5GraphC1Ev+0x1728>
 8008d04:	f506 70a2 	add.w	r0, r6, #324	; 0x144
 8008d08:	466a      	mov	r2, sp
 8008d0a:	f7fd fa87 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008d0e:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008d10:	9904      	ldr	r1, [sp, #16]
 8008d12:	1a09      	subs	r1, r1, r0
	if (__p)
 8008d14:	2800      	cmp	r0, #0
 8008d16:	f43f aa27 	beq.w	8008168 <_ZN3jlb5GraphC1Ev+0x17c8>
 8008d1a:	f00e ff6f 	bl	8017bfc <_ZdlPvj>
 8008d1e:	f7ff ba23 	b.w	8008168 <_ZN3jlb5GraphC1Ev+0x17c8>
 8008d22:	f506 70de 	add.w	r0, r6, #444	; 0x1bc
 8008d26:	466a      	mov	r2, sp
 8008d28:	f7fd fa78 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008d2c:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008d2e:	9904      	ldr	r1, [sp, #16]
 8008d30:	1a09      	subs	r1, r1, r0
	if (__p)
 8008d32:	2800      	cmp	r0, #0
 8008d34:	f43f ac21 	beq.w	800857a <_ZN3jlb5GraphC1Ev+0x1bda>
 8008d38:	f00e ff60 	bl	8017bfc <_ZdlPvj>
 8008d3c:	e41d      	b.n	800857a <_ZN3jlb5GraphC1Ev+0x1bda>
 8008d3e:	f506 7007 	add.w	r0, r6, #540	; 0x21c
 8008d42:	466a      	mov	r2, sp
 8008d44:	f7fd fa6a 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008d48:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008d4a:	9904      	ldr	r1, [sp, #16]
 8008d4c:	1a09      	subs	r1, r1, r0
	if (__p)
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	f43f ad99 	beq.w	8008886 <_ZN3jlb5GraphC1Ev+0x1ee6>
 8008d54:	f00e ff52 	bl	8017bfc <_ZdlPvj>
 8008d58:	e595      	b.n	8008886 <_ZN3jlb5GraphC1Ev+0x1ee6>
 8008d5a:	f506 7001 	add.w	r0, r6, #516	; 0x204
 8008d5e:	466a      	mov	r2, sp
 8008d60:	f7fd fa5c 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008d64:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008d66:	9904      	ldr	r1, [sp, #16]
 8008d68:	1a09      	subs	r1, r1, r0
	if (__p)
 8008d6a:	2800      	cmp	r0, #0
 8008d6c:	f43f ad29 	beq.w	80087c2 <_ZN3jlb5GraphC1Ev+0x1e22>
 8008d70:	f00e ff44 	bl	8017bfc <_ZdlPvj>
 8008d74:	e525      	b.n	80087c2 <_ZN3jlb5GraphC1Ev+0x1e22>
 8008d76:	f506 7001 	add.w	r0, r6, #516	; 0x204
 8008d7a:	466a      	mov	r2, sp
 8008d7c:	f7fd fa4e 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008d80:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008d82:	9904      	ldr	r1, [sp, #16]
 8008d84:	1a09      	subs	r1, r1, r0
	if (__p)
 8008d86:	2800      	cmp	r0, #0
 8008d88:	f43f acee 	beq.w	8008768 <_ZN3jlb5GraphC1Ev+0x1dc8>
 8008d8c:	f00e ff36 	bl	8017bfc <_ZdlPvj>
 8008d90:	e4ea      	b.n	8008768 <_ZN3jlb5GraphC1Ev+0x1dc8>
 8008d92:	f506 70ea 	add.w	r0, r6, #468	; 0x1d4
 8008d96:	466a      	mov	r2, sp
 8008d98:	f7fd fa40 	bl	800621c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008d9c:	9802      	ldr	r0, [sp, #8]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008d9e:	9904      	ldr	r1, [sp, #16]
 8008da0:	1a09      	subs	r1, r1, r0
	if (__p)
 8008da2:	2800      	cmp	r0, #0
 8008da4:	f43f ac4b 	beq.w	800863e <_ZN3jlb5GraphC1Ev+0x1c9e>
 8008da8:	f00e ff28 	bl	8017bfc <_ZdlPvj>
 8008dac:	e447      	b.n	800863e <_ZN3jlb5GraphC1Ev+0x1c9e>
 8008dae:	bf00      	nop

08008db0 <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_>:
	if (max_size() - size() < __n)
 8008db0:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
      vector<_Tp, _Alloc>::
 8008db4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db8:	e9d0 7a00 	ldrd	r7, sl, [r0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8008dbc:	ebaa 0307 	sub.w	r3, sl, r7
	if (max_size() - size() < __n)
 8008dc0:	4563      	cmp	r3, ip
 8008dc2:	d04e      	beq.n	8008e62 <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_+0xb2>
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	4693      	mov	fp, r2
 8008dc8:	461a      	mov	r2, r3
 8008dca:	bf38      	it	cc
 8008dcc:	2201      	movcc	r2, #1
 8008dce:	189d      	adds	r5, r3, r2
 8008dd0:	4606      	mov	r6, r0
 8008dd2:	4688      	mov	r8, r1
 8008dd4:	d242      	bcs.n	8008e5c <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_+0xac>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8008dd6:	46a9      	mov	r9, r5
    { return __lhs.base() - __rhs.base(); }
 8008dd8:	1bcc      	subs	r4, r1, r7
 8008dda:	bbb5      	cbnz	r5, 8008e4a <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_+0x9a>
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8008ddc:	f89b 3000 	ldrb.w	r3, [fp]
      if (__count > 0)
 8008de0:	2c00      	cmp	r4, #0
 8008de2:	f809 3004 	strb.w	r3, [r9, r4]
 8008de6:	dc20      	bgt.n	8008e2a <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_+0x7a>
      ptrdiff_t __count = __last - __first;
 8008de8:	ebaa 0a08 	sub.w	sl, sl, r8
	      ++__new_finish;
 8008dec:	3401      	adds	r4, #1
      if (__count > 0)
 8008dee:	f1ba 0f00 	cmp.w	sl, #0
 8008df2:	444c      	add	r4, r9
 8008df4:	dc10      	bgt.n	8008e18 <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_+0x68>
      return __result + __count;
 8008df6:	4454      	add	r4, sl
	if (__p)
 8008df8:	b927      	cbnz	r7, 8008e04 <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_+0x54>
      this->_M_impl._M_finish = __new_finish;
 8008dfa:	e9c6 9400 	strd	r9, r4, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8008dfe:	60b5      	str	r5, [r6, #8]
    }
 8008e00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    this->_M_impl._M_end_of_storage - __old_start);
 8008e04:	68b1      	ldr	r1, [r6, #8]
 8008e06:	1bc9      	subs	r1, r1, r7
 8008e08:	4638      	mov	r0, r7
 8008e0a:	f00e fef7 	bl	8017bfc <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8008e0e:	e9c6 9400 	strd	r9, r4, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8008e12:	60b5      	str	r5, [r6, #8]
    }
 8008e14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8008e18:	4620      	mov	r0, r4
 8008e1a:	4641      	mov	r1, r8
 8008e1c:	4652      	mov	r2, sl
 8008e1e:	f010 fb4a 	bl	80194b6 <memcpy>
      return __result + __count;
 8008e22:	4454      	add	r4, sl
 8008e24:	2f00      	cmp	r7, #0
 8008e26:	d0e8      	beq.n	8008dfa <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_+0x4a>
 8008e28:	e7ec      	b.n	8008e04 <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_+0x54>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8008e2a:	4622      	mov	r2, r4
 8008e2c:	4639      	mov	r1, r7
 8008e2e:	4648      	mov	r0, r9
      ptrdiff_t __count = __last - __first;
 8008e30:	ebaa 0a08 	sub.w	sl, sl, r8
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8008e34:	f010 fa55 	bl	80192e2 <memmove>
	      ++__new_finish;
 8008e38:	3401      	adds	r4, #1
      if (__count > 0)
 8008e3a:	f1ba 0f00 	cmp.w	sl, #0
 8008e3e:	444c      	add	r4, r9
 8008e40:	dcea      	bgt.n	8008e18 <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_+0x68>
		    this->_M_impl._M_end_of_storage - __old_start);
 8008e42:	68b1      	ldr	r1, [r6, #8]
      return __result + __count;
 8008e44:	4454      	add	r4, sl
 8008e46:	1bc9      	subs	r1, r1, r7
      _M_deallocate(pointer __p, size_t __n)
 8008e48:	e7de      	b.n	8008e08 <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_+0x58>
 8008e4a:	4565      	cmp	r5, ip
 8008e4c:	bf28      	it	cs
 8008e4e:	4665      	movcs	r5, ip
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008e50:	4628      	mov	r0, r5
 8008e52:	f00e fed5 	bl	8017c00 <_Znwj>
 8008e56:	4681      	mov	r9, r0
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8008e58:	4405      	add	r5, r0
 8008e5a:	e7bf      	b.n	8008ddc <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_+0x2c>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8008e5c:	4665      	mov	r5, ip
 8008e5e:	1bcc      	subs	r4, r1, r7
      _M_allocate(size_t __n)
 8008e60:	e7f6      	b.n	8008e50 <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_+0xa0>
	  __throw_length_error(__N(__s));
 8008e62:	4801      	ldr	r0, [pc, #4]	; (8008e68 <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_+0xb8>)
 8008e64:	f00e fee3 	bl	8017c2e <_ZSt20__throw_length_errorPKc>
 8008e68:	0801a8d4 	.word	0x0801a8d4

08008e6c <_Z13TelemetryTaskPv>:
{
 8008e6c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8008e70:	b087      	sub	sp, #28
	xLastWakeTime = xTaskGetTickCount();
 8008e72:	f00d fc55 	bl	8016720 <xTaskGetTickCount>
 8008e76:	4c02      	ldr	r4, [pc, #8]	; (8008e80 <_Z13TelemetryTaskPv+0x14>)
 8008e78:	9002      	str	r0, [sp, #8]
	  _M_range_insert(__pos, __first, __last,
 8008e7a:	f504 7b71 	add.w	fp, r4, #964	; 0x3c4
 8008e7e:	e040      	b.n	8008f02 <_Z13TelemetryTaskPv+0x96>
 8008e80:	20000328 	.word	0x20000328
 8008e84:	700b      	strb	r3, [r1, #0]
	    ++this->_M_impl._M_finish;
 8008e86:	f8d4 13c8 	ldr.w	r1, [r4, #968]	; 0x3c8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8008e8a:	f8d4 23cc 	ldr.w	r2, [r4, #972]	; 0x3cc
	    ++this->_M_impl._M_finish;
 8008e8e:	3101      	adds	r1, #1
            telemetry_data.push_back((timestamp >> 16u) & 0xFF);
 8008e90:	f3c5 4307 	ubfx	r3, r5, #16, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8008e94:	4291      	cmp	r1, r2
	    ++this->_M_impl._M_finish;
 8008e96:	f8c4 13c8 	str.w	r1, [r4, #968]	; 0x3c8
 8008e9a:	f88d 300c 	strb.w	r3, [sp, #12]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8008e9e:	f000 8207 	beq.w	80092b0 <_Z13TelemetryTaskPv+0x444>
 8008ea2:	700b      	strb	r3, [r1, #0]
	    ++this->_M_impl._M_finish;
 8008ea4:	f8d4 13c8 	ldr.w	r1, [r4, #968]	; 0x3c8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8008ea8:	f8d4 23cc 	ldr.w	r2, [r4, #972]	; 0x3cc
	    ++this->_M_impl._M_finish;
 8008eac:	3101      	adds	r1, #1
            telemetry_data.push_back((timestamp >> 8u) & 0xFF);
 8008eae:	f3c5 2307 	ubfx	r3, r5, #8, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8008eb2:	4291      	cmp	r1, r2
	    ++this->_M_impl._M_finish;
 8008eb4:	f8c4 13c8 	str.w	r1, [r4, #968]	; 0x3c8
 8008eb8:	f88d 300c 	strb.w	r3, [sp, #12]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8008ebc:	f000 8207 	beq.w	80092ce <_Z13TelemetryTaskPv+0x462>
 8008ec0:	700b      	strb	r3, [r1, #0]
	    ++this->_M_impl._M_finish;
 8008ec2:	f8d4 13c8 	ldr.w	r1, [r4, #968]	; 0x3c8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8008ec6:	f8d4 33cc 	ldr.w	r3, [r4, #972]	; 0x3cc
	    ++this->_M_impl._M_finish;
 8008eca:	3101      	adds	r1, #1
            telemetry_data.push_back(timestamp & 0xFF);
 8008ecc:	b2ed      	uxtb	r5, r5
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8008ece:	428b      	cmp	r3, r1
	    ++this->_M_impl._M_finish;
 8008ed0:	f8c4 13c8 	str.w	r1, [r4, #968]	; 0x3c8
 8008ed4:	f88d 500c 	strb.w	r5, [sp, #12]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8008ed8:	f000 8207 	beq.w	80092ea <_Z13TelemetryTaskPv+0x47e>
 8008edc:	700d      	strb	r5, [r1, #0]
	    ++this->_M_impl._M_finish;
 8008ede:	f8d4 23c8 	ldr.w	r2, [r4, #968]	; 0x3c8
 8008ee2:	3201      	adds	r2, #1
 8008ee4:	f8c4 23c8 	str.w	r2, [r4, #968]	; 0x3c8
      { return _M_data_ptr(this->_M_impl._M_start); }
 8008ee8:	f8d4 13c4 	ldr.w	r1, [r4, #964]	; 0x3c4
            HAL_UART_Transmit(&huart2, reinterpret_cast<uint8_t *>(msg), max_size, HAL_MAX_DELAY);
 8008eec:	f04f 33ff 	mov.w	r3, #4294967295
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8008ef0:	1a52      	subs	r2, r2, r1
 8008ef2:	48cd      	ldr	r0, [pc, #820]	; (8009228 <_Z13TelemetryTaskPv+0x3bc>)
 8008ef4:	b292      	uxth	r2, r2
 8008ef6:	f00a f821 	bl	8012f3c <HAL_UART_Transmit>
		vTaskDelayUntil(&xLastWakeTime, 20u);
 8008efa:	2114      	movs	r1, #20
 8008efc:	a802      	add	r0, sp, #8
 8008efe:	f00d fa9b 	bl	8016438 <vTaskDelayUntil>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8008f02:	e9d4 32f1 	ldrd	r3, r2, [r4, #964]	; 0x3c4
            measurements_1();
 8008f06:	48c9      	ldr	r0, [pc, #804]	; (800922c <_Z13TelemetryTaskPv+0x3c0>)
 8008f08:	4293      	cmp	r3, r2
	    this->_M_impl._M_finish = __pos;
 8008f0a:	bf18      	it	ne
 8008f0c:	f8c4 33c8 	strne.w	r3, [r4, #968]	; 0x3c8
 8008f10:	f7fa ff8a 	bl	8003e28 <_ZN3jlb12SignalSender14measurements_1Ev>
            measurements_2();
 8008f14:	48c5      	ldr	r0, [pc, #788]	; (800922c <_Z13TelemetryTaskPv+0x3c0>)
 8008f16:	f7fb fb39 	bl	800458c <_ZN3jlb12SignalSender14measurements_2Ev>

        void measurements_3()
        {
            jlb_rx.measurements_3.angular_velocity_x_phys = odometry.meas_ang_vel_x;
 8008f1a:	f8d4 53b0 	ldr.w	r5, [r4, #944]	; 0x3b0
            jlb_rx.measurements_3.angular_velocity_y_phys = odometry.meas_ang_vel_y;
            jlb_rx.measurements_3.angular_velocity_z_phys = odometry.meas_ang_vel_z;

            char    data[measurements_2_DLC + 2] = {0};
            uint8_t ide                          = measurements_3_IDE;
            uint8_t dlc                          = measurements_3_DLC;
 8008f1e:	2608      	movs	r6, #8
            jlb_rx.measurements_3.angular_velocity_x_phys = odometry.meas_ang_vel_x;
 8008f20:	69e8      	ldr	r0, [r5, #28]
 8008f22:	f7f7 faf9 	bl	8000518 <__aeabi_f2d>
 8008f26:	e9c4 018c 	strd	r0, r1, [r4, #560]	; 0x230
            jlb_rx.measurements_3.angular_velocity_y_phys = odometry.meas_ang_vel_y;
 8008f2a:	6a28      	ldr	r0, [r5, #32]
 8008f2c:	f7f7 faf4 	bl	8000518 <__aeabi_f2d>
 8008f30:	4602      	mov	r2, r0
 8008f32:	460b      	mov	r3, r1
            jlb_rx.measurements_3.angular_velocity_z_phys = odometry.meas_ang_vel_z;
 8008f34:	6a68      	ldr	r0, [r5, #36]	; 0x24
            jlb_rx.measurements_3.angular_velocity_y_phys = odometry.meas_ang_vel_y;
 8008f36:	e9c4 2390 	strd	r2, r3, [r4, #576]	; 0x240
            jlb_rx.measurements_3.angular_velocity_z_phys = odometry.meas_ang_vel_z;
 8008f3a:	f7f7 faed 	bl	8000518 <__aeabi_f2d>
            char    data[measurements_2_DLC + 2] = {0};
 8008f3e:	2500      	movs	r5, #0
            jlb_rx.measurements_3.angular_velocity_z_phys = odometry.meas_ang_vel_z;
 8008f40:	4680      	mov	r8, r0
 8008f42:	4689      	mov	r9, r1
            data[0]                              = measurements_3_CANID;
 8008f44:	f640 0703 	movw	r7, #2051	; 0x803
            data[1]                              = measurements_3_DLC;
            Pack_measurements_3_jlb(&jlb_rx.measurements_3, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 8008f48:	f10d 010e 	add.w	r1, sp, #14
 8008f4c:	f10d 0306 	add.w	r3, sp, #6
 8008f50:	f10d 0207 	add.w	r2, sp, #7
 8008f54:	48b6      	ldr	r0, [pc, #728]	; (8009230 <_Z13TelemetryTaskPv+0x3c4>)
            jlb_rx.measurements_3.angular_velocity_z_phys = odometry.meas_ang_vel_z;
 8008f56:	e9c4 8994 	strd	r8, r9, [r4, #592]	; 0x250
            char    data[measurements_2_DLC + 2] = {0};
 8008f5a:	9503      	str	r5, [sp, #12]
 8008f5c:	9504      	str	r5, [sp, #16]
            data[0]                              = measurements_3_CANID;
 8008f5e:	f8ad 700c 	strh.w	r7, [sp, #12]
            char    data[measurements_2_DLC + 2] = {0};
 8008f62:	f8ad 5014 	strh.w	r5, [sp, #20]
            uint8_t ide                          = measurements_3_IDE;
 8008f66:	f88d 5006 	strb.w	r5, [sp, #6]
            uint8_t dlc                          = measurements_3_DLC;
 8008f6a:	f88d 6007 	strb.w	r6, [sp, #7]
            Pack_measurements_3_jlb(&jlb_rx.measurements_3, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 8008f6e:	f7f8 fa6b 	bl	8001448 <Pack_measurements_3_jlb>
	  _M_range_insert(__pos, __first, __last,
 8008f72:	f10d 0316 	add.w	r3, sp, #22
 8008f76:	aa03      	add	r2, sp, #12
 8008f78:	4658      	mov	r0, fp
 8008f7a:	f8d4 13c8 	ldr.w	r1, [r4, #968]	; 0x3c8
 8008f7e:	f7fa fa23 	bl	80033c8 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag.isra.0>
            telemetry_data.insert(telemetry_data.end(), data, data + measurements_3_DLC + 2);
        }

        void measurements_4()
        {
            jlb_rx.measurements_4.linear_acceleration_x_phys = odometry.meas_lin_acc_x;
 8008f82:	f8d4 73b0 	ldr.w	r7, [r4, #944]	; 0x3b0
 8008f86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f88:	f7f7 fac6 	bl	8000518 <__aeabi_f2d>
 8008f8c:	e9c4 0198 	strd	r0, r1, [r4, #608]	; 0x260
            jlb_rx.measurements_4.linear_acceleration_y_phys = odometry.meas_lin_acc_y;
 8008f90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f92:	f7f7 fac1 	bl	8000518 <__aeabi_f2d>
 8008f96:	e9c4 019c 	strd	r0, r1, [r4, #624]	; 0x270
            jlb_rx.measurements_4.linear_acceleration_z_phys = odometry.meas_lin_acc_z;
 8008f9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f9c:	f7f7 fabc 	bl	8000518 <__aeabi_f2d>

            char    data[measurements_3_DLC + 2] = {0};
            uint8_t ide                          = measurements_4_IDE;
            uint8_t dlc                          = measurements_4_DLC;
            data[0]                              = measurements_4_CANID;
 8008fa0:	f640 0304 	movw	r3, #2052	; 0x804
            jlb_rx.measurements_4.linear_acceleration_z_phys = odometry.meas_lin_acc_z;
 8008fa4:	e9c4 01a0 	strd	r0, r1, [r4, #640]	; 0x280
            char    data[measurements_3_DLC + 2] = {0};
 8008fa8:	e9cd 5503 	strd	r5, r5, [sp, #12]
            data[1]                              = measurements_4_DLC;
            Pack_measurements_4_jlb(&jlb_rx.measurements_4, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 8008fac:	f10d 010e 	add.w	r1, sp, #14
            data[0]                              = measurements_4_CANID;
 8008fb0:	f8ad 300c 	strh.w	r3, [sp, #12]
            Pack_measurements_4_jlb(&jlb_rx.measurements_4, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 8008fb4:	f10d 0207 	add.w	r2, sp, #7
 8008fb8:	f10d 0306 	add.w	r3, sp, #6
 8008fbc:	489d      	ldr	r0, [pc, #628]	; (8009234 <_Z13TelemetryTaskPv+0x3c8>)
            char    data[measurements_3_DLC + 2] = {0};
 8008fbe:	f8ad 5014 	strh.w	r5, [sp, #20]
            uint8_t ide                          = measurements_4_IDE;
 8008fc2:	f88d 5006 	strb.w	r5, [sp, #6]
            uint8_t dlc                          = measurements_4_DLC;
 8008fc6:	f88d 6007 	strb.w	r6, [sp, #7]
            Pack_measurements_4_jlb(&jlb_rx.measurements_4, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 8008fca:	f7f8 fafd 	bl	80015c8 <Pack_measurements_4_jlb>
 8008fce:	f10d 0316 	add.w	r3, sp, #22
 8008fd2:	aa03      	add	r2, sp, #12
 8008fd4:	4658      	mov	r0, fp
 8008fd6:	f8d4 13c8 	ldr.w	r1, [r4, #968]	; 0x3c8
 8008fda:	f7fa f9f5 	bl	80033c8 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag.isra.0>
            telemetry_data.insert(telemetry_data.end(), data, data + measurements_4_DLC + 2);
        }

        void measurements_5()
        {
            jlb_rx.measurements_5.duty_cycle_phys    = measurements.duty_cycle;
 8008fde:	f8d4 73c0 	ldr.w	r7, [r4, #960]	; 0x3c0
 8008fe2:	6838      	ldr	r0, [r7, #0]
 8008fe4:	f7f7 fa98 	bl	8000518 <__aeabi_f2d>
 8008fe8:	e9c4 01b0 	strd	r0, r1, [r4, #704]	; 0x2c0
            jlb_rx.measurements_5.motor_current_phys = measurements.motor_current;
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f7f7 fa93 	bl	8000518 <__aeabi_f2d>
 8008ff2:	e9c4 01ac 	strd	r0, r1, [r4, #688]	; 0x2b0
            jlb_rx.measurements_5.object_range_phys  = measurements.object_range;
 8008ff6:	68b8      	ldr	r0, [r7, #8]
 8008ff8:	f7f7 fa8e 	bl	8000518 <__aeabi_f2d>
 8008ffc:	e9c4 01a8 	strd	r0, r1, [r4, #672]	; 0x2a0
            jlb_rx.measurements_5.wheel_rpm_phys     = measurements.wheel_rpm;
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f7f7 fa89 	bl	8000518 <__aeabi_f2d>

            char    data[measurements_4_DLC + 2] = {0};
            uint8_t ide                          = measurements_5_IDE;
            uint8_t dlc                          = measurements_5_DLC;
            data[0]                              = measurements_5_CANID;
 8009006:	f640 0305 	movw	r3, #2053	; 0x805
            jlb_rx.measurements_5.wheel_rpm_phys     = measurements.wheel_rpm;
 800900a:	e9c4 01a4 	strd	r0, r1, [r4, #656]	; 0x290
            char    data[measurements_4_DLC + 2] = {0};
 800900e:	e9cd 5503 	strd	r5, r5, [sp, #12]
            data[1]                              = measurements_5_DLC;
            Pack_measurements_5_jlb(&jlb_rx.measurements_5, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 8009012:	f10d 010e 	add.w	r1, sp, #14
            data[0]                              = measurements_5_CANID;
 8009016:	f8ad 300c 	strh.w	r3, [sp, #12]
            Pack_measurements_5_jlb(&jlb_rx.measurements_5, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800901a:	f10d 0207 	add.w	r2, sp, #7
 800901e:	f10d 0306 	add.w	r3, sp, #6
 8009022:	4885      	ldr	r0, [pc, #532]	; (8009238 <_Z13TelemetryTaskPv+0x3cc>)
            char    data[measurements_4_DLC + 2] = {0};
 8009024:	f8ad 5014 	strh.w	r5, [sp, #20]
            uint8_t ide                          = measurements_5_IDE;
 8009028:	f88d 5006 	strb.w	r5, [sp, #6]
            uint8_t dlc                          = measurements_5_DLC;
 800902c:	f88d 6007 	strb.w	r6, [sp, #7]
            Pack_measurements_5_jlb(&jlb_rx.measurements_5, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 8009030:	f7f8 fb8a 	bl	8001748 <Pack_measurements_5_jlb>
 8009034:	f10d 0316 	add.w	r3, sp, #22
 8009038:	aa03      	add	r2, sp, #12
 800903a:	4658      	mov	r0, fp
 800903c:	f8d4 13c8 	ldr.w	r1, [r4, #968]	; 0x3c8
 8009040:	f7fa f9c2 	bl	80033c8 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag.isra.0>
            telemetry_data.insert(telemetry_data.end(), data, data + measurements_5_DLC + 2);
        }

        void odometry_1()
        {
            jlb_rx.odometry_1.position_x_phys  = odometry.x_t;
 8009044:	f8d4 73b0 	ldr.w	r7, [r4, #944]	; 0x3b0
 8009048:	68b8      	ldr	r0, [r7, #8]
 800904a:	f7f7 fa65 	bl	8000518 <__aeabi_f2d>
 800904e:	e9c4 01b8 	strd	r0, r1, [r4, #736]	; 0x2e0
            jlb_rx.odometry_1.position_y_phys  = odometry.y_t;
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	f7f7 fa60 	bl	8000518 <__aeabi_f2d>
 8009058:	e9c4 01bc 	strd	r0, r1, [r4, #752]	; 0x2f0
            jlb_rx.odometry_1.orientation_phys = odometry.theta_t;
 800905c:	6938      	ldr	r0, [r7, #16]
 800905e:	f7f7 fa5b 	bl	8000518 <__aeabi_f2d>

            char    data[odometry_1_DLC + 2] = {0};
            uint8_t ide                      = odometry_1_IDE;
            uint8_t dlc                      = odometry_1_DLC;
            data[0]                          = odometry_1_CANID;
 8009062:	f640 0311 	movw	r3, #2065	; 0x811
            jlb_rx.odometry_1.orientation_phys = odometry.theta_t;
 8009066:	e9c4 01b4 	strd	r0, r1, [r4, #720]	; 0x2d0
            char    data[odometry_1_DLC + 2] = {0};
 800906a:	e9cd 5503 	strd	r5, r5, [sp, #12]
            data[1]                          = odometry_1_DLC;
            Pack_odometry_1_jlb(&jlb_rx.odometry_1, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800906e:	f10d 010e 	add.w	r1, sp, #14
            data[0]                          = odometry_1_CANID;
 8009072:	f8ad 300c 	strh.w	r3, [sp, #12]
            Pack_odometry_1_jlb(&jlb_rx.odometry_1, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 8009076:	f10d 0207 	add.w	r2, sp, #7
 800907a:	f10d 0306 	add.w	r3, sp, #6
 800907e:	486f      	ldr	r0, [pc, #444]	; (800923c <_Z13TelemetryTaskPv+0x3d0>)
            char    data[odometry_1_DLC + 2] = {0};
 8009080:	f8ad 5014 	strh.w	r5, [sp, #20]
            uint8_t ide                      = odometry_1_IDE;
 8009084:	f88d 5006 	strb.w	r5, [sp, #6]
            uint8_t dlc                      = odometry_1_DLC;
 8009088:	f88d 6007 	strb.w	r6, [sp, #7]
            Pack_odometry_1_jlb(&jlb_rx.odometry_1, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800908c:	f7f8 fc40 	bl	8001910 <Pack_odometry_1_jlb>
 8009090:	f10d 0316 	add.w	r3, sp, #22
 8009094:	aa03      	add	r2, sp, #12
 8009096:	4658      	mov	r0, fp
 8009098:	f8d4 13c8 	ldr.w	r1, [r4, #968]	; 0x3c8
 800909c:	f7fa f994 	bl	80033c8 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag.isra.0>
            telemetry_data.insert(telemetry_data.end(), data, data + odometry_1_DLC + 2);
        }

        void odometry_2()
        {
            jlb_rx.odometry_2.linear_velocity_x_phys  = odometry.vx_t;
 80090a0:	f8d4 73b0 	ldr.w	r7, [r4, #944]	; 0x3b0
 80090a4:	6838      	ldr	r0, [r7, #0]
 80090a6:	f7f7 fa37 	bl	8000518 <__aeabi_f2d>
 80090aa:	e9c4 01c4 	strd	r0, r1, [r4, #784]	; 0x310
            jlb_rx.odometry_2.angular_velocity_z_phys = odometry.w_t;
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f7f7 fa32 	bl	8000518 <__aeabi_f2d>

            char    data[odometry_2_DLC + 2] = {0};
            uint8_t ide                      = odometry_2_IDE;
            uint8_t dlc                      = odometry_2_DLC;
            data[0]                          = odometry_2_CANID;
 80090b4:	f640 0312 	movw	r3, #2066	; 0x812
            jlb_rx.odometry_2.angular_velocity_z_phys = odometry.w_t;
 80090b8:	e9c4 01c0 	strd	r0, r1, [r4, #768]	; 0x300
            char    data[odometry_2_DLC + 2] = {0};
 80090bc:	e9cd 5503 	strd	r5, r5, [sp, #12]
            data[1]                          = odometry_2_DLC;
            Pack_odometry_2_jlb(&jlb_rx.odometry_2, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 80090c0:	f10d 010e 	add.w	r1, sp, #14
            data[0]                          = odometry_2_CANID;
 80090c4:	f8ad 300c 	strh.w	r3, [sp, #12]
            Pack_odometry_2_jlb(&jlb_rx.odometry_2, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 80090c8:	f10d 0207 	add.w	r2, sp, #7
 80090cc:	f10d 0306 	add.w	r3, sp, #6
 80090d0:	485b      	ldr	r0, [pc, #364]	; (8009240 <_Z13TelemetryTaskPv+0x3d4>)
            char    data[odometry_2_DLC + 2] = {0};
 80090d2:	f8ad 5014 	strh.w	r5, [sp, #20]
            uint8_t ide                      = odometry_2_IDE;
 80090d6:	f88d 5006 	strb.w	r5, [sp, #6]
            uint8_t dlc                      = odometry_2_DLC;
 80090da:	f88d 6007 	strb.w	r6, [sp, #7]
            Pack_odometry_2_jlb(&jlb_rx.odometry_2, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 80090de:	f7f8 fcdf 	bl	8001aa0 <Pack_odometry_2_jlb>
 80090e2:	f10d 0316 	add.w	r3, sp, #22
 80090e6:	aa03      	add	r2, sp, #12
 80090e8:	4658      	mov	r0, fp
 80090ea:	f8d4 13c8 	ldr.w	r1, [r4, #968]	; 0x3c8
 80090ee:	f7fa f96b 	bl	80033c8 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag.isra.0>
            telemetry_data.insert(telemetry_data.end(), data, data + odometry_2_DLC + 2);
        }

        void logic_1()
        {
            jlb_rx.logic_1.target_angle_phys      = controller.target_angle;
 80090f2:	f8d4 73b4 	ldr.w	r7, [r4, #948]	; 0x3b4
 80090f6:	69b8      	ldr	r0, [r7, #24]
 80090f8:	f7f7 fa0e 	bl	8000518 <__aeabi_f2d>
 80090fc:	e9c4 01c8 	strd	r0, r1, [r4, #800]	; 0x320
            jlb_rx.logic_1.target_speed_phys      = controller.target_speed;
 8009100:	69f8      	ldr	r0, [r7, #28]
 8009102:	f7f7 fa09 	bl	8000518 <__aeabi_f2d>
 8009106:	e9c4 01cc 	strd	r0, r1, [r4, #816]	; 0x330
            jlb_rx.logic_1.cross_track_error_phys = controller.cross_track_error;
 800910a:	6a38      	ldr	r0, [r7, #32]
 800910c:	f7f7 fa04 	bl	8000518 <__aeabi_f2d>
 8009110:	e9c4 01d0 	strd	r0, r1, [r4, #832]	; 0x340
            jlb_rx.logic_1.heading_error_phys     = controller.heading_error;
 8009114:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009116:	f7f7 f9ff 	bl	8000518 <__aeabi_f2d>

            char    data[logic_1_DLC + 2] = {0};
            uint8_t ide                   = logic_1_IDE;
            uint8_t dlc                   = logic_1_DLC;
            data[0]                       = logic_1_CANID;
 800911a:	f640 0321 	movw	r3, #2081	; 0x821
            jlb_rx.logic_1.heading_error_phys     = controller.heading_error;
 800911e:	e9c4 01d4 	strd	r0, r1, [r4, #848]	; 0x350
            char    data[logic_1_DLC + 2] = {0};
 8009122:	e9cd 5503 	strd	r5, r5, [sp, #12]
            data[1]                       = logic_1_DLC;
            Pack_logic_1_jlb(&jlb_rx.logic_1, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 8009126:	f10d 010e 	add.w	r1, sp, #14
            data[0]                       = logic_1_CANID;
 800912a:	f8ad 300c 	strh.w	r3, [sp, #12]
            Pack_logic_1_jlb(&jlb_rx.logic_1, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800912e:	f10d 0207 	add.w	r2, sp, #7
 8009132:	f10d 0306 	add.w	r3, sp, #6
 8009136:	4843      	ldr	r0, [pc, #268]	; (8009244 <_Z13TelemetryTaskPv+0x3d8>)
            char    data[logic_1_DLC + 2] = {0};
 8009138:	f8ad 5014 	strh.w	r5, [sp, #20]
            uint8_t ide                   = logic_1_IDE;
 800913c:	f88d 5006 	strb.w	r5, [sp, #6]
            uint8_t dlc                   = logic_1_DLC;
 8009140:	f88d 6007 	strb.w	r6, [sp, #7]
            Pack_logic_1_jlb(&jlb_rx.logic_1, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 8009144:	f7f8 fd40 	bl	8001bc8 <Pack_logic_1_jlb>
 8009148:	aa03      	add	r2, sp, #12
 800914a:	4658      	mov	r0, fp
 800914c:	f8d4 13c8 	ldr.w	r1, [r4, #968]	; 0x3c8
 8009150:	f10d 0316 	add.w	r3, sp, #22
 8009154:	f7fa f938 	bl	80033c8 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag.isra.0>
            telemetry_data.insert(telemetry_data.end(), data, data + logic_1_DLC + 2);
        }

        void logic_2()
        {
            jlb_rx.logic_2.distance_traveled_phys = odometry.distance_traveled_since_checkpoint;
 8009158:	f8d4 33b0 	ldr.w	r3, [r4, #944]	; 0x3b0
 800915c:	6958      	ldr	r0, [r3, #20]
 800915e:	f7f7 f9db 	bl	8000518 <__aeabi_f2d>
            jlb_rx.logic_2.labyrinth_state        = static_cast<uint8_t>(as_state.labyrinth_state);
            jlb_rx.logic_2.fast_state             = static_cast<uint8_t>(as_state.fast_state);
            jlb_rx.logic_2.next_node              = as_state.next_node;
            jlb_rx.logic_2.previous_node          = as_state.previous_node;
            jlb_rx.logic_2.direction              = static_cast<uint8_t>(controller.direction);
 8009162:	e9d4 7eed 	ldrd	r7, lr, [r4, #948]	; 0x3b4
 8009166:	46ac      	mov	ip, r5
            jlb_rx.logic_2.distance_traveled_phys = odometry.distance_traveled_since_checkpoint;
 8009168:	e9c4 01d8 	strd	r0, r1, [r4, #864]	; 0x360
            jlb_rx.logic_2.next_node              = as_state.next_node;
 800916c:	f89e a029 	ldrb.w	sl, [lr, #41]	; 0x29
            jlb_rx.logic_2.labyrinth_state        = static_cast<uint8_t>(as_state.labyrinth_state);
 8009170:	f89e 8004 	ldrb.w	r8, [lr, #4]
            jlb_rx.logic_2.fast_state             = static_cast<uint8_t>(as_state.fast_state);
 8009174:	f89e 9008 	ldrb.w	r9, [lr, #8]
            jlb_rx.logic_2.next_node              = as_state.next_node;
 8009178:	f884 a35c 	strb.w	sl, [r4, #860]	; 0x35c
            jlb_rx.logic_2.previous_node          = as_state.previous_node;
 800917c:	f89e a028 	ldrb.w	sl, [lr, #40]	; 0x28
            char    data[logic_2_DLC + 2] = {0};
            uint8_t ide                   = logic_2_IDE;
            uint8_t dlc                   = logic_2_DLC;
            data[0]                       = logic_2_CANID;
            data[1]                       = logic_2_DLC;
            Pack_logic_2_jlb(&jlb_rx.logic_2, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 8009180:	f10d 010e 	add.w	r1, sp, #14
            jlb_rx.logic_2.previous_node          = as_state.previous_node;
 8009184:	f884 a35d 	strb.w	sl, [r4, #861]	; 0x35d
            jlb_rx.logic_2.direction              = static_cast<uint8_t>(controller.direction);
 8009188:	f8d7 708c 	ldr.w	r7, [r7, #140]	; 0x8c
            Pack_logic_2_jlb(&jlb_rx.logic_2, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800918c:	f10d 0306 	add.w	r3, sp, #6
            jlb_rx.logic_2.direction              = static_cast<uint8_t>(controller.direction);
 8009190:	f367 0c07 	bfi	ip, r7, #0, #8
            jlb_rx.logic_2.mission                = static_cast<uint8_t>(as_state.mission);
 8009194:	f8de 7000 	ldr.w	r7, [lr]
            Pack_logic_2_jlb(&jlb_rx.logic_2, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 8009198:	f10d 0207 	add.w	r2, sp, #7
            jlb_rx.logic_2.direction              = static_cast<uint8_t>(controller.direction);
 800919c:	f367 2c0f 	bfi	ip, r7, #8, #8
            data[0]                       = logic_2_CANID;
 80091a0:	f640 0722 	movw	r7, #2082	; 0x822
            jlb_rx.logic_2.direction              = static_cast<uint8_t>(controller.direction);
 80091a4:	f369 4c17 	bfi	ip, r9, #16, #8
 80091a8:	f368 6c1f 	bfi	ip, r8, #24, #8
            Pack_logic_2_jlb(&jlb_rx.logic_2, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 80091ac:	4826      	ldr	r0, [pc, #152]	; (8009248 <_Z13TelemetryTaskPv+0x3dc>)
            jlb_rx.logic_2.direction              = static_cast<uint8_t>(controller.direction);
 80091ae:	f8c4 c358 	str.w	ip, [r4, #856]	; 0x358
            char    data[logic_2_DLC + 2] = {0};
 80091b2:	9503      	str	r5, [sp, #12]
 80091b4:	9504      	str	r5, [sp, #16]
            data[0]                       = logic_2_CANID;
 80091b6:	f8ad 700c 	strh.w	r7, [sp, #12]
            char    data[logic_2_DLC + 2] = {0};
 80091ba:	f8ad 5014 	strh.w	r5, [sp, #20]
            uint8_t ide                   = logic_2_IDE;
 80091be:	f88d 5006 	strb.w	r5, [sp, #6]
            uint8_t dlc                   = logic_2_DLC;
 80091c2:	f88d 6007 	strb.w	r6, [sp, #7]
            Pack_logic_2_jlb(&jlb_rx.logic_2, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 80091c6:	f7f8 fe03 	bl	8001dd0 <Pack_logic_2_jlb>
 80091ca:	f10d 0316 	add.w	r3, sp, #22
 80091ce:	aa03      	add	r2, sp, #12
 80091d0:	4658      	mov	r0, fp
 80091d2:	f8d4 13c8 	ldr.w	r1, [r4, #968]	; 0x3c8
 80091d6:	f7fa f8f7 	bl	80033c8 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag.isra.0>
            telemetry_data.insert(telemetry_data.end(), data, data + logic_2_DLC + 2);
        }

        void logic3()
        {
            jlb_rx.logic_3.ang_error_norm_phys      = controller.ang_error_norm;
 80091da:	f8d4 73b4 	ldr.w	r7, [r4, #948]	; 0x3b4
 80091de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091e0:	f7f7 f99a 	bl	8000518 <__aeabi_f2d>
 80091e4:	e9c4 01dc 	strd	r0, r1, [r4, #880]	; 0x370
            jlb_rx.logic_3.dist_error_norm_phys     = controller.dist_error_norm;
 80091e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091ea:	f7f7 f995 	bl	8000518 <__aeabi_f2d>
 80091ee:	e9c4 01e0 	strd	r0, r1, [r4, #896]	; 0x380
            jlb_rx.logic_3.line_position_rear_phys  = controller.line_position_rear;
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	f7f7 f990 	bl	8000518 <__aeabi_f2d>
 80091f8:	e9c4 01e8 	strd	r0, r1, [r4, #928]	; 0x3a0
            jlb_rx.logic_3.line_position_front_phys = controller.line_position_front;
 80091fc:	68b8      	ldr	r0, [r7, #8]
 80091fe:	f7f7 f98b 	bl	8000518 <__aeabi_f2d>
            jlb_rx.logic_3.under_gate               = as_state.under_gate;

            char    data[logic_3_DLC + 2] = {0};
            uint8_t ide                   = logic_3_IDE;
            uint8_t dlc                   = logic_3_DLC;
            data[0]                       = logic_3_CANID;
 8009202:	f640 0223 	movw	r2, #2083	; 0x823
            jlb_rx.logic_3.at_cross_section         = as_state.at_cross_section;
 8009206:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
            jlb_rx.logic_3.line_position_front_phys = controller.line_position_front;
 800920a:	e9c4 01e4 	strd	r0, r1, [r4, #912]	; 0x390
            jlb_rx.logic_3.at_cross_section         = as_state.at_cross_section;
 800920e:	7c58      	ldrb	r0, [r3, #17]
            data[1]                       = logic_3_DLC;
            Pack_logic_3_jlb(&jlb_rx.logic_3, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 8009210:	f10d 010e 	add.w	r1, sp, #14
            jlb_rx.logic_3.at_cross_section         = as_state.at_cross_section;
 8009214:	f884 03a8 	strb.w	r0, [r4, #936]	; 0x3a8
            jlb_rx.logic_3.under_gate               = as_state.under_gate;
 8009218:	7c1b      	ldrb	r3, [r3, #16]
            Pack_logic_3_jlb(&jlb_rx.logic_3, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800921a:	480c      	ldr	r0, [pc, #48]	; (800924c <_Z13TelemetryTaskPv+0x3e0>)
            char    data[logic_3_DLC + 2] = {0};
 800921c:	e9cd 5503 	strd	r5, r5, [sp, #12]
            jlb_rx.logic_3.under_gate               = as_state.under_gate;
 8009220:	f884 33a9 	strb.w	r3, [r4, #937]	; 0x3a9
 8009224:	e014      	b.n	8009250 <_Z13TelemetryTaskPv+0x3e4>
 8009226:	bf00      	nop
 8009228:	20000e94 	.word	0x20000e94
 800922c:	20000510 	.word	0x20000510
 8009230:	20000550 	.word	0x20000550
 8009234:	20000580 	.word	0x20000580
 8009238:	200005b0 	.word	0x200005b0
 800923c:	200005f0 	.word	0x200005f0
 8009240:	20000620 	.word	0x20000620
 8009244:	20000640 	.word	0x20000640
 8009248:	20000680 	.word	0x20000680
 800924c:	20000690 	.word	0x20000690
            data[0]                       = logic_3_CANID;
 8009250:	f8ad 200c 	strh.w	r2, [sp, #12]
            Pack_logic_3_jlb(&jlb_rx.logic_3, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 8009254:	f10d 0306 	add.w	r3, sp, #6
 8009258:	f10d 0207 	add.w	r2, sp, #7
            char    data[logic_3_DLC + 2] = {0};
 800925c:	f8ad 5014 	strh.w	r5, [sp, #20]
            uint8_t ide                   = logic_3_IDE;
 8009260:	f88d 5006 	strb.w	r5, [sp, #6]
            uint8_t dlc                   = logic_3_DLC;
 8009264:	f88d 6007 	strb.w	r6, [sp, #7]
            Pack_logic_3_jlb(&jlb_rx.logic_3, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 8009268:	f7f8 fe3a 	bl	8001ee0 <Pack_logic_3_jlb>
 800926c:	f8d4 13c8 	ldr.w	r1, [r4, #968]	; 0x3c8
 8009270:	f10d 0316 	add.w	r3, sp, #22
 8009274:	aa03      	add	r2, sp, #12
 8009276:	4658      	mov	r0, fp
 8009278:	f7fa f8a6 	bl	80033c8 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag.isra.0>
            uint32_t timestamp = HAL_GetTick();
 800927c:	f001 fea8 	bl	800afd0 <HAL_GetTick>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8009280:	e9d4 12f2 	ldrd	r1, r2, [r4, #968]	; 0x3c8
            telemetry_data.push_back((timestamp >> 24u) & 0xFF);
 8009284:	0e03      	lsrs	r3, r0, #24
 8009286:	4291      	cmp	r1, r2
            uint32_t timestamp = HAL_GetTick();
 8009288:	4605      	mov	r5, r0
            telemetry_data.push_back((timestamp >> 24u) & 0xFF);
 800928a:	f88d 300c 	strb.w	r3, [sp, #12]
 800928e:	f47f adf9 	bne.w	8008e84 <_Z13TelemetryTaskPv+0x18>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8009292:	aa03      	add	r2, sp, #12
 8009294:	4658      	mov	r0, fp
 8009296:	f7ff fd8b 	bl	8008db0 <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_>
      : _M_current(__i) { }
 800929a:	f8d4 13c8 	ldr.w	r1, [r4, #968]	; 0x3c8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800929e:	f8d4 23cc 	ldr.w	r2, [r4, #972]	; 0x3cc
            telemetry_data.push_back((timestamp >> 16u) & 0xFF);
 80092a2:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80092a6:	4291      	cmp	r1, r2
 80092a8:	f88d 300c 	strb.w	r3, [sp, #12]
 80092ac:	f47f adf9 	bne.w	8008ea2 <_Z13TelemetryTaskPv+0x36>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80092b0:	aa03      	add	r2, sp, #12
 80092b2:	4658      	mov	r0, fp
 80092b4:	f7ff fd7c 	bl	8008db0 <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_>
 80092b8:	f8d4 13c8 	ldr.w	r1, [r4, #968]	; 0x3c8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80092bc:	f8d4 23cc 	ldr.w	r2, [r4, #972]	; 0x3cc
            telemetry_data.push_back((timestamp >> 8u) & 0xFF);
 80092c0:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80092c4:	4291      	cmp	r1, r2
 80092c6:	f88d 300c 	strb.w	r3, [sp, #12]
 80092ca:	f47f adf9 	bne.w	8008ec0 <_Z13TelemetryTaskPv+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80092ce:	4658      	mov	r0, fp
 80092d0:	aa03      	add	r2, sp, #12
 80092d2:	f7ff fd6d 	bl	8008db0 <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_>
 80092d6:	f8d4 13c8 	ldr.w	r1, [r4, #968]	; 0x3c8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80092da:	f8d4 33cc 	ldr.w	r3, [r4, #972]	; 0x3cc
            telemetry_data.push_back(timestamp & 0xFF);
 80092de:	b2ed      	uxtb	r5, r5
 80092e0:	428b      	cmp	r3, r1
 80092e2:	f88d 500c 	strb.w	r5, [sp, #12]
 80092e6:	f47f adf9 	bne.w	8008edc <_Z13TelemetryTaskPv+0x70>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80092ea:	aa03      	add	r2, sp, #12
 80092ec:	4658      	mov	r0, fp
 80092ee:	f7ff fd5f 	bl	8008db0 <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_>
 80092f2:	f8d4 23c8 	ldr.w	r2, [r4, #968]	; 0x3c8
 80092f6:	e5f7      	b.n	8008ee8 <_Z13TelemetryTaskPv+0x7c>

080092f8 <_ZN3jlb5LogicD1Ev>:
    class Logic
 80092f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092fc:	4607      	mov	r7, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80092fe:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
	if (__p)
 8009302:	b120      	cbz	r0, 800930e <_ZN3jlb5LogicD1Ev+0x16>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8009304:	f8d7 13cc 	ldr.w	r1, [r7, #972]	; 0x3cc
	::operator delete(__p
 8009308:	1a09      	subs	r1, r1, r0
 800930a:	f00e fc77 	bl	8017bfc <_ZdlPvj>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800930e:	e9d7 6865 	ldrd	r6, r8, [r7, #404]	; 0x194
	  for (; __first != __last; ++__first)
 8009312:	4546      	cmp	r6, r8
 8009314:	d01a      	beq.n	800934c <_ZN3jlb5LogicD1Ev+0x54>
 8009316:	e9d6 4503 	ldrd	r4, r5, [r6, #12]
 800931a:	42ac      	cmp	r4, r5
 800931c:	d00a      	beq.n	8009334 <_ZN3jlb5LogicD1Ev+0x3c>
 800931e:	68a0      	ldr	r0, [r4, #8]
	if (__p)
 8009320:	2800      	cmp	r0, #0
 8009322:	d059      	beq.n	80093d8 <_ZN3jlb5LogicD1Ev+0xe0>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8009324:	6921      	ldr	r1, [r4, #16]
 8009326:	3418      	adds	r4, #24
 8009328:	1a09      	subs	r1, r1, r0
 800932a:	f00e fc67 	bl	8017bfc <_ZdlPvj>
 800932e:	42a5      	cmp	r5, r4
 8009330:	d1f5      	bne.n	800931e <_ZN3jlb5LogicD1Ev+0x26>
	_M_deallocate(_M_impl._M_start,
 8009332:	68f5      	ldr	r5, [r6, #12]
	if (__p)
 8009334:	2d00      	cmp	r5, #0
 8009336:	d054      	beq.n	80093e2 <_ZN3jlb5LogicD1Ev+0xea>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8009338:	6971      	ldr	r1, [r6, #20]
 800933a:	4628      	mov	r0, r5
 800933c:	1b49      	subs	r1, r1, r5
 800933e:	3618      	adds	r6, #24
 8009340:	f00e fc5c 	bl	8017bfc <_ZdlPvj>
 8009344:	45b0      	cmp	r8, r6
 8009346:	d1e6      	bne.n	8009316 <_ZN3jlb5LogicD1Ev+0x1e>
	_M_deallocate(_M_impl._M_start,
 8009348:	f8d7 8194 	ldr.w	r8, [r7, #404]	; 0x194
	if (__p)
 800934c:	f1b8 0f00 	cmp.w	r8, #0
 8009350:	d006      	beq.n	8009360 <_ZN3jlb5LogicD1Ev+0x68>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8009352:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 8009356:	4640      	mov	r0, r8
 8009358:	eba1 0108 	sub.w	r1, r1, r8
 800935c:	f00e fc4e 	bl	8017bfc <_ZdlPvj>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009360:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
	if (__p)
 8009364:	b120      	cbz	r0, 8009370 <_ZN3jlb5LogicD1Ev+0x78>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8009366:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800936a:	1a09      	subs	r1, r1, r0
 800936c:	f00e fc46 	bl	8017bfc <_ZdlPvj>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009370:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
	if (__p)
 8009374:	b120      	cbz	r0, 8009380 <_ZN3jlb5LogicD1Ev+0x88>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8009376:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800937a:	1a09      	subs	r1, r1, r0
 800937c:	f00e fc3e 	bl	8017bfc <_ZdlPvj>
      if (this->_M_impl._M_map)
 8009380:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8009382:	b190      	cbz	r0, 80093aa <_ZN3jlb5LogicD1Ev+0xb2>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8009384:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 8009388:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 800938a:	3504      	adds	r5, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800938c:	42ac      	cmp	r4, r5
 800938e:	d208      	bcs.n	80093a2 <_ZN3jlb5LogicD1Ev+0xaa>
 8009390:	f854 0b04 	ldr.w	r0, [r4], #4
 8009394:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009398:	f00e fc30 	bl	8017bfc <_ZdlPvj>
 800939c:	42a5      	cmp	r5, r4
 800939e:	d8f7      	bhi.n	8009390 <_ZN3jlb5LogicD1Ev+0x98>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80093a0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80093a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80093a4:	0089      	lsls	r1, r1, #2
 80093a6:	f00e fc29 	bl	8017bfc <_ZdlPvj>
      if (this->_M_impl._M_map)
 80093aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80093ac:	b188      	cbz	r0, 80093d2 <_ZN3jlb5LogicD1Ev+0xda>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80093ae:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 80093b0:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80093b2:	3504      	adds	r5, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80093b4:	42ac      	cmp	r4, r5
 80093b6:	d208      	bcs.n	80093ca <_ZN3jlb5LogicD1Ev+0xd2>
 80093b8:	f854 0b04 	ldr.w	r0, [r4], #4
 80093bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80093c0:	f00e fc1c 	bl	8017bfc <_ZdlPvj>
 80093c4:	42a5      	cmp	r5, r4
 80093c6:	d8f7      	bhi.n	80093b8 <_ZN3jlb5LogicD1Ev+0xc0>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80093c8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80093ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80093cc:	0089      	lsls	r1, r1, #2
 80093ce:	f00e fc15 	bl	8017bfc <_ZdlPvj>
 80093d2:	4638      	mov	r0, r7
 80093d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093d8:	3418      	adds	r4, #24
 80093da:	42a5      	cmp	r5, r4
 80093dc:	d19f      	bne.n	800931e <_ZN3jlb5LogicD1Ev+0x26>
	_M_deallocate(_M_impl._M_start,
 80093de:	68f5      	ldr	r5, [r6, #12]
 80093e0:	e7a8      	b.n	8009334 <_ZN3jlb5LogicD1Ev+0x3c>
 80093e2:	3618      	adds	r6, #24
 80093e4:	45b0      	cmp	r8, r6
 80093e6:	d196      	bne.n	8009316 <_ZN3jlb5LogicD1Ev+0x1e>
 80093e8:	f8d7 8194 	ldr.w	r8, [r7, #404]	; 0x194
 80093ec:	e7ae      	b.n	800934c <_ZN3jlb5LogicD1Ev+0x54>
 80093ee:	bf00      	nop

080093f0 <_GLOBAL__sub_I_motor_battery_voltage>:
}
 80093f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        Odometry(const float x_t_ = 0.0f, const float y_t_ = 0.0f, const float theta_t_ = 0.0f) : x_t(x_t_), y_t(y_t_), theta_t(normalize_angle(theta_t_)) {}
 80093f2:	2600      	movs	r6, #0
 80093f4:	4c6e      	ldr	r4, [pc, #440]	; (80095b0 <_GLOBAL__sub_I_motor_battery_voltage+0x1c0>)
      return fmod(__type(__x), __type(__y));
 80093f6:	ed9f 1b6a 	vldr	d1, [pc, #424]	; 80095a0 <_GLOBAL__sub_I_motor_battery_voltage+0x1b0>
 80093fa:	ed9f 0b6b 	vldr	d0, [pc, #428]	; 80095a8 <_GLOBAL__sub_I_motor_battery_voltage+0x1b8>
 80093fe:	6026      	str	r6, [r4, #0]
 8009400:	6066      	str	r6, [r4, #4]
 8009402:	60a6      	str	r6, [r4, #8]
 8009404:	60e6      	str	r6, [r4, #12]
 8009406:	f00e fc1d 	bl	8017c44 <fmod>
 800940a:	ec51 0b10 	vmov	r0, r1, d0
 800940e:	2500      	movs	r5, #0
            angle = std::fmod(angle, 2.0f * M_PI);
 8009410:	f7f7 fbaa 	bl	8000b68 <__aeabi_d2f>
      { _M_initialize_map(0); }
 8009414:	4629      	mov	r1, r5
 8009416:	6120      	str	r0, [r4, #16]
 8009418:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        Odometry(const float x_t_ = 0.0f, const float y_t_ = 0.0f, const float theta_t_ = 0.0f) : x_t(x_t_), y_t(y_t_), theta_t(normalize_angle(theta_t_)) {}
 800941c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8009420:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8009424:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
 8009428:	e9c4 5513 	strd	r5, r5, [r4, #76]	; 0x4c
 800942c:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
 8009430:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
 8009434:	6166      	str	r6, [r4, #20]
 8009436:	61a6      	str	r6, [r4, #24]
 8009438:	61e6      	str	r6, [r4, #28]
 800943a:	6226      	str	r6, [r4, #32]
 800943c:	6266      	str	r6, [r4, #36]	; 0x24
 800943e:	62a6      	str	r6, [r4, #40]	; 0x28
 8009440:	62e6      	str	r6, [r4, #44]	; 0x2c
 8009442:	6326      	str	r6, [r4, #48]	; 0x30
      { _M_initialize_map(0); }
 8009444:	f7fb fd38 	bl	8004eb8 <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>
 8009448:	4629      	mov	r1, r5
 800944a:	f104 0064 	add.w	r0, r4, #100	; 0x64
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 800944e:	e9c4 5519 	strd	r5, r5, [r4, #100]	; 0x64
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8009452:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
 8009456:	e9c4 551d 	strd	r5, r5, [r4, #116]	; 0x74
 800945a:	e9c4 551f 	strd	r5, r5, [r4, #124]	; 0x7c
 800945e:	e9c4 5521 	strd	r5, r5, [r4, #132]	; 0x84
      { _M_initialize_map(0); }
 8009462:	f7fb fd29 	bl	8004eb8 <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>
        Controller(Direction direction_ = Direction::STRAIGHT) : direction{direction_} {}
 8009466:	2002      	movs	r0, #2
 8009468:	2301      	movs	r3, #1
 800946a:	e9c4 0047 	strd	r0, r0, [r4, #284]	; 0x11c
        : kp_(kp), ki_(ki), kd_(kd), tau_(tau), T_(T), minOutput_(minOutput), maxOutput_(maxOutput), deadband_(deadband), derivativeFilterAlpha_(derivativeFilterAlpha)
 800946e:	4851      	ldr	r0, [pc, #324]	; (80095b4 <_GLOBAL__sub_I_motor_battery_voltage+0x1c4>)
 8009470:	f04f 0c10 	mov.w	ip, #16
 8009474:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
 8009478:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800947c:	494e      	ldr	r1, [pc, #312]	; (80095b8 <_GLOBAL__sub_I_motor_battery_voltage+0x1c8>)
 800947e:	4a4f      	ldr	r2, [pc, #316]	; (80095bc <_GLOBAL__sub_I_motor_battery_voltage+0x1cc>)
 8009480:	f8df e150 	ldr.w	lr, [pc, #336]	; 80095d4 <_GLOBAL__sub_I_motor_battery_voltage+0x1e4>
 8009484:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
 8009488:	4b4d      	ldr	r3, [pc, #308]	; (80095c0 <_GLOBAL__sub_I_motor_battery_voltage+0x1d0>)
 800948a:	e9c4 cc24 	strd	ip, ip, [r4, #144]	; 0x90
 800948e:	f8c4 e0c0 	str.w	lr, [r4, #192]	; 0xc0
 8009492:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
 8009496:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 800949a:	f8c4 2144 	str.w	r2, [r4, #324]	; 0x144
	: _M_start(), _M_finish(), _M_end_of_storage()
 800949e:	e9c4 5541 	strd	r5, r5, [r4, #260]	; 0x104
 80094a2:	e9c4 5543 	strd	r5, r5, [r4, #268]	; 0x10c
 80094a6:	e9c4 5545 	strd	r5, r5, [r4, #276]	; 0x114
 80094aa:	e9c4 5549 	strd	r5, r5, [r4, #292]	; 0x124
 80094ae:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
 80094b2:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
 80094b6:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
 80094ba:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
 80094be:	f8c4 60a8 	str.w	r6, [r4, #168]	; 0xa8
 80094c2:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
 80094c6:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
 80094ca:	f8c4 60b4 	str.w	r6, [r4, #180]	; 0xb4
 80094ce:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
 80094d2:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
 80094d6:	f8c4 612c 	str.w	r6, [r4, #300]	; 0x12c
 80094da:	f8c4 6130 	str.w	r6, [r4, #304]	; 0x130
 80094de:	f8c4 613c 	str.w	r6, [r4, #316]	; 0x13c
 80094e2:	f8c4 6148 	str.w	r6, [r4, #328]	; 0x148
 80094e6:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
 80094ea:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
 80094ee:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
 80094f2:	4b34      	ldr	r3, [pc, #208]	; (80095c4 <_GLOBAL__sub_I_motor_battery_voltage+0x1d4>)
 80094f4:	f8c4 2174 	str.w	r2, [r4, #372]	; 0x174
 80094f8:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
 80094fc:	4b32      	ldr	r3, [pc, #200]	; (80095c8 <_GLOBAL__sub_I_motor_battery_voltage+0x1d8>)
 80094fe:	4a33      	ldr	r2, [pc, #204]	; (80095cc <_GLOBAL__sub_I_motor_battery_voltage+0x1dc>)
 8009500:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
 8009504:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
        Logic(Direction direction_ = Direction::STRAIGHT, const float x_t_ = 0.0f, const float y_t_ = 0.0f, const float theta_t_ = 0.0f) : odometry(x_t_, y_t_, theta_t_), controller(direction_) {}
 8009508:	f504 77ca 	add.w	r7, r4, #404	; 0x194
 800950c:	f8c4 2154 	str.w	r2, [r4, #340]	; 0x154
 8009510:	4a2f      	ldr	r2, [pc, #188]	; (80095d0 <_GLOBAL__sub_I_motor_battery_voltage+0x1e0>)
 8009512:	4638      	mov	r0, r7
 8009514:	f8c4 2164 	str.w	r2, [r4, #356]	; 0x164
 8009518:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
 800951c:	f8c4 1168 	str.w	r1, [r4, #360]	; 0x168
 8009520:	f8c4 6158 	str.w	r6, [r4, #344]	; 0x158
 8009524:	f8c4 615c 	str.w	r6, [r4, #348]	; 0x15c
 8009528:	f8c4 6160 	str.w	r6, [r4, #352]	; 0x160
 800952c:	f8c4 616c 	str.w	r6, [r4, #364]	; 0x16c
 8009530:	f8c4 6184 	str.w	r6, [r4, #388]	; 0x184
 8009534:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 8009538:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
 800953c:	f8c4 6190 	str.w	r6, [r4, #400]	; 0x190
 8009540:	f7fd fa2e 	bl	80069a0 <_ZN3jlb5GraphC1Ev>
        ASState(Odometry& odometry_, Controller& controller_, Graph& graph_) : odometry{odometry_}, controller{controller_}, graph{graph_} {}
 8009544:	f245 5355 	movw	r3, #21845	; 0x5555
            : odometry(odometry_), controller(controller_), as_state(as_state_), graph(graph_), measurements(measurements_)
 8009548:	f504 72d0 	add.w	r2, r4, #416	; 0x1a0
 800954c:	e9c4 25f0 	strd	r2, r5, [r4, #960]	; 0x3c0
 8009550:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
 8009554:	f504 72d8 	add.w	r2, r4, #432	; 0x1b0
 8009558:	f104 0390 	add.w	r3, r4, #144	; 0x90
 800955c:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
 8009560:	e9c4 5573 	strd	r5, r5, [r4, #460]	; 0x1cc
 8009564:	e9c4 55f2 	strd	r5, r5, [r4, #968]	; 0x3c8
 8009568:	e9c4 32ed 	strd	r3, r2, [r4, #948]	; 0x3b4
 800956c:	f8c4 61bc 	str.w	r6, [r4, #444]	; 0x1bc
 8009570:	f8c4 61c4 	str.w	r6, [r4, #452]	; 0x1c4
 8009574:	f8c4 61c8 	str.w	r6, [r4, #456]	; 0x1c8
 8009578:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
 800957c:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
 8009580:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
 8009584:	f8c4 41dc 	str.w	r4, [r4, #476]	; 0x1dc
 8009588:	f8c4 71e4 	str.w	r7, [r4, #484]	; 0x1e4
 800958c:	f8c4 73bc 	str.w	r7, [r4, #956]	; 0x3bc
 8009590:	f8c4 43b0 	str.w	r4, [r4, #944]	; 0x3b0
 8009594:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
 8009598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800959a:	bf00      	nop
 800959c:	f3af 8000 	nop.w
 80095a0:	54442d18 	.word	0x54442d18
 80095a4:	401921fb 	.word	0x401921fb
	...
 80095b0:	20000328 	.word	0x20000328
 80095b4:	3f30a3d7 	.word	0x3f30a3d7
 80095b8:	40866666 	.word	0x40866666
 80095bc:	3ba3d70a 	.word	0x3ba3d70a
 80095c0:	3d4ccccd 	.word	0x3d4ccccd
 80095c4:	c1b40000 	.word	0xc1b40000
 80095c8:	41b40000 	.word	0x41b40000
 80095cc:	3dcccccd 	.word	0x3dcccccd
 80095d0:	40dccccd 	.word	0x40dccccd
 80095d4:	42c80000 	.word	0x42c80000

080095d8 <_GLOBAL__sub_D_motor_battery_voltage>:
 80095d8:	b508      	push	{r3, lr}
jlb::Logic logic;
 80095da:	4802      	ldr	r0, [pc, #8]	; (80095e4 <_GLOBAL__sub_D_motor_battery_voltage+0xc>)
 80095dc:	f7ff fe8c 	bl	80092f8 <_ZN3jlb5LogicD1Ev>
}
 80095e0:	bd08      	pop	{r3, pc}
 80095e2:	bf00      	nop
 80095e4:	20000328 	.word	0x20000328

080095e8 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80095e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80095ea:	4c05      	ldr	r4, [pc, #20]	; (8009600 <_Z16StartDefaultTaskPv+0x18>)
 80095ec:	4620      	mov	r0, r4
 80095ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80095f2:	f003 ff61 	bl	800d4b8 <HAL_GPIO_TogglePin>
	  vTaskDelay(100);
 80095f6:	2064      	movs	r0, #100	; 0x64
 80095f8:	f00c ff7c 	bl	80164f4 <vTaskDelay>
  for(;;)
 80095fc:	e7f6      	b.n	80095ec <_Z16StartDefaultTaskPv+0x4>
 80095fe:	bf00      	nop
 8009600:	42020000 	.word	0x42020000
 8009604:	00000000 	.word	0x00000000

08009608 <_Z18SystemClock_Configv>:
{
 8009608:	b510      	push	{r4, lr}
 800960a:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800960c:	2248      	movs	r2, #72	; 0x48
 800960e:	2100      	movs	r1, #0
 8009610:	a806      	add	r0, sp, #24
 8009612:	f00f fe80 	bl	8019316 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009616:	2000      	movs	r0, #0
 8009618:	e9cd 0000 	strd	r0, r0, [sp]
 800961c:	e9cd 0002 	strd	r0, r0, [sp, #8]
 8009620:	9004      	str	r0, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8009622:	f004 fe59 	bl	800e2d8 <HAL_PWREx_ControlVoltageScaling>
 8009626:	b108      	cbz	r0, 800962c <_Z18SystemClock_Configv+0x24>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009628:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800962a:	e7fe      	b.n	800962a <_Z18SystemClock_Configv+0x22>
  HAL_PWR_EnableBkUpAccess();
 800962c:	4604      	mov	r4, r0
 800962e:	f004 fe35 	bl	800e29c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8009632:	4a1d      	ldr	r2, [pc, #116]	; (80096a8 <_Z18SystemClock_Configv+0xa0>)
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8009634:	2134      	movs	r1, #52	; 0x34
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8009636:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800963a:	a806      	add	r0, sp, #24
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800963c:	f023 0318 	bic.w	r3, r3, #24
 8009640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8009644:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009646:	2202      	movs	r2, #2
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8009648:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800964a:	e9cd 2311 	strd	r2, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800964e:	e9cd 2216 	strd	r2, r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8009652:	9106      	str	r1, [sp, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8009654:	2260      	movs	r2, #96	; 0x60
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8009656:	2181      	movs	r1, #129	; 0x81
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8009658:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800965a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 1;
 800965c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800965e:	2407      	movs	r4, #7
  RCC_OscInitStruct.PLL.PLLN = 55;
 8009660:	2337      	movs	r3, #55	; 0x37
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8009662:	9415      	str	r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 55;
 8009664:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8009666:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8009668:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800966a:	f004 fec5 	bl	800e3f8 <HAL_RCC_OscConfig>
 800966e:	4603      	mov	r3, r0
 8009670:	b108      	cbz	r0, 8009676 <_Z18SystemClock_Configv+0x6e>
 8009672:	b672      	cpsid	i
  while (1)
 8009674:	e7fe      	b.n	8009674 <_Z18SystemClock_Configv+0x6c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009676:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 80096a0 <_Z18SystemClock_Configv+0x98>
 800967a:	2200      	movs	r2, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800967c:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800967e:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009680:	2105      	movs	r1, #5
 8009682:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009684:	ed8d 7b00 	vstr	d7, [sp]
 8009688:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800968c:	f005 fb8a 	bl	800eda4 <HAL_RCC_ClockConfig>
 8009690:	b108      	cbz	r0, 8009696 <_Z18SystemClock_Configv+0x8e>
 8009692:	b672      	cpsid	i
  while (1)
 8009694:	e7fe      	b.n	8009694 <_Z18SystemClock_Configv+0x8c>
}
 8009696:	b018      	add	sp, #96	; 0x60
 8009698:	bd10      	pop	{r4, pc}
 800969a:	bf00      	nop
 800969c:	f3af 8000 	nop.w
 80096a0:	0000000f 	.word	0x0000000f
 80096a4:	00000003 	.word	0x00000003
 80096a8:	40021000 	.word	0x40021000

080096ac <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096ac:	2400      	movs	r4, #0
{
 80096ae:	b580      	push	{r7, lr}
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80096b0:	2701      	movs	r7, #1
{
 80096b2:	b0a4      	sub	sp, #144	; 0x90
  HAL_Init();
 80096b4:	f001 fc5d 	bl	800af72 <HAL_Init>
  SystemClock_Config();
 80096b8:	f7ff ffa6 	bl	8009608 <_Z18SystemClock_Configv>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096bc:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
 80096c0:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80096c4:	4d9c      	ldr	r5, [pc, #624]	; (8009938 <main+0x28c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096c6:	941b      	str	r4, [sp, #108]	; 0x6c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80096c8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80096ca:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80096ce:	f043 0310 	orr.w	r3, r3, #16
 80096d2:	64eb      	str	r3, [r5, #76]	; 0x4c
 80096d4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  GPIO_InitStruct.Pin = DRIVE_ENABLE_Pin;
 80096d6:	f04f 0a08 	mov.w	sl, #8
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80096da:	f003 0310 	and.w	r3, r3, #16
 80096de:	9306      	str	r3, [sp, #24]
 80096e0:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80096e2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096e4:	f04f 0903 	mov.w	r9, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80096e8:	f043 0304 	orr.w	r3, r3, #4
 80096ec:	64eb      	str	r3, [r5, #76]	; 0x4c
 80096ee:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  hlpuart1.Instance = LPUART1;
 80096f0:	4e92      	ldr	r6, [pc, #584]	; (800993c <main+0x290>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80096f2:	f003 0304 	and.w	r3, r3, #4
 80096f6:	9307      	str	r3, [sp, #28]
 80096f8:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80096fa:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80096fc:	f043 0320 	orr.w	r3, r3, #32
 8009700:	64eb      	str	r3, [r5, #76]	; 0x4c
 8009702:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8009704:	f003 0320 	and.w	r3, r3, #32
 8009708:	9308      	str	r3, [sp, #32]
 800970a:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800970c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800970e:	433b      	orrs	r3, r7
 8009710:	64eb      	str	r3, [r5, #76]	; 0x4c
 8009712:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8009714:	403b      	ands	r3, r7
 8009716:	9309      	str	r3, [sp, #36]	; 0x24
 8009718:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800971a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800971c:	ea43 0308 	orr.w	r3, r3, r8
 8009720:	64eb      	str	r3, [r5, #76]	; 0x4c
 8009722:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8009724:	ea03 0308 	and.w	r3, r3, r8
 8009728:	930a      	str	r3, [sp, #40]	; 0x28
 800972a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800972c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800972e:	ea43 030a 	orr.w	r3, r3, sl
 8009732:	64eb      	str	r3, [r5, #76]	; 0x4c
 8009734:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8009736:	ea03 030a 	and.w	r3, r3, sl
 800973a:	930b      	str	r3, [sp, #44]	; 0x2c
 800973c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800973e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8009740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009744:	64eb      	str	r3, [r5, #76]	; 0x4c
 8009746:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8009748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800974c:	930c      	str	r3, [sp, #48]	; 0x30
 800974e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_PWREx_EnableVddIO2();
 8009750:	f004 fe1e 	bl	800e390 <HAL_PWREx_EnableVddIO2>
  HAL_GPIO_WritePin(GPIOF, DRIVE_ENABLE_Pin|MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin, GPIO_PIN_RESET);
 8009754:	4622      	mov	r2, r4
 8009756:	f24e 0108 	movw	r1, #57352	; 0xe008
 800975a:	4879      	ldr	r0, [pc, #484]	; (8009940 <main+0x294>)
 800975c:	f003 fe94 	bl	800d488 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8009760:	4622      	mov	r2, r4
 8009762:	21a4      	movs	r1, #164	; 0xa4
 8009764:	4877      	ldr	r0, [pc, #476]	; (8009944 <main+0x298>)
 8009766:	f003 fe8f 	bl	800d488 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 800976a:	4622      	mov	r2, r4
 800976c:	f64f 7187 	movw	r1, #65415	; 0xff87
 8009770:	4875      	ldr	r0, [pc, #468]	; (8009948 <main+0x29c>)
 8009772:	f003 fe89 	bl	800d488 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8009776:	4622      	mov	r2, r4
 8009778:	2180      	movs	r1, #128	; 0x80
 800977a:	4874      	ldr	r0, [pc, #464]	; (800994c <main+0x2a0>)
 800977c:	f003 fe84 	bl	800d488 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8009780:	4622      	mov	r2, r4
 8009782:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009786:	4872      	ldr	r0, [pc, #456]	; (8009950 <main+0x2a4>)
 8009788:	f003 fe7e 	bl	800d488 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, INFRA_LE_R_Pin|LED_LE_R_Pin|INFRA_OE_R_Pin|LED_OE_R_Pin
 800978c:	4622      	mov	r2, r4
 800978e:	f44f 41ec 	mov.w	r1, #30208	; 0x7600
 8009792:	4870      	ldr	r0, [pc, #448]	; (8009954 <main+0x2a8>)
 8009794:	f003 fe78 	bl	800d488 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(DRIVE_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8009798:	4869      	ldr	r0, [pc, #420]	; (8009940 <main+0x294>)
 800979a:	a917      	add	r1, sp, #92	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800979c:	e9cd a717 	strd	sl, r7, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097a0:	e9cd 8919 	strd	r8, r9, [sp, #100]	; 0x64
  HAL_GPIO_Init(DRIVE_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80097a4:	f003 fcf0 	bl	800d188 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_FB_Pin|REMOTE_GAS_Pin|REMOTE_STEER_Pin;
 80097a8:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80097ac:	4864      	ldr	r0, [pc, #400]	; (8009940 <main+0x294>)
 80097ae:	a917      	add	r1, sp, #92	; 0x5c
  GPIO_InitStruct.Pin = MCU_FB_Pin|REMOTE_GAS_Pin|REMOTE_STEER_Pin;
 80097b0:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097b2:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80097b6:	f003 fce7 	bl	800d188 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin;
 80097ba:	23a4      	movs	r3, #164	; 0xa4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80097bc:	4861      	ldr	r0, [pc, #388]	; (8009944 <main+0x298>)
 80097be:	a917      	add	r1, sp, #92	; 0x5c
  GPIO_InitStruct.Pin = MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin;
 80097c0:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097c2:	e9cd 7418 	strd	r7, r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097c6:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80097c8:	f003 fcde 	bl	800d188 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin;
 80097cc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80097d0:	485b      	ldr	r0, [pc, #364]	; (8009940 <main+0x294>)
 80097d2:	a917      	add	r1, sp, #92	; 0x5c
  GPIO_InitStruct.Pin = MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin;
 80097d4:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097d6:	e9cd 7418 	strd	r7, r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097da:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80097dc:	f003 fcd4 	bl	800d188 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUTTON2_Pin|ROTARY1_Pin|ROTARY2_Pin|ROTARY3_Pin
 80097e0:	f643 6301 	movw	r3, #15873	; 0x3e01
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80097e4:	485c      	ldr	r0, [pc, #368]	; (8009958 <main+0x2ac>)
 80097e6:	a917      	add	r1, sp, #92	; 0x5c
  GPIO_InitStruct.Pin = BUTTON2_Pin|ROTARY1_Pin|ROTARY2_Pin|ROTARY3_Pin
 80097e8:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097ea:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80097ee:	f003 fccb 	bl	800d188 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80097f2:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
 80097f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80097fa:	4852      	ldr	r0, [pc, #328]	; (8009944 <main+0x298>)
 80097fc:	a917      	add	r1, sp, #92	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80097fe:	e9cd c317 	strd	ip, r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009802:	9419      	str	r4, [sp, #100]	; 0x64
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8009804:	f003 fcc0 	bl	800d188 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 8009808:	f64f 7387 	movw	r3, #65415	; 0xff87
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800980c:	484e      	ldr	r0, [pc, #312]	; (8009948 <main+0x29c>)
 800980e:	a917      	add	r1, sp, #92	; 0x5c
  GPIO_InitStruct.Pin = ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 8009810:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009812:	e9cd 7418 	strd	r7, r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009816:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009818:	f003 fcb6 	bl	800d188 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RESET_BUTTON_Pin|SET_BUTTON_Pin|LED2_Pin;
 800981c:	2370      	movs	r3, #112	; 0x70
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800981e:	484d      	ldr	r0, [pc, #308]	; (8009954 <main+0x2a8>)
 8009820:	a917      	add	r1, sp, #92	; 0x5c
  GPIO_InitStruct.Pin = RESET_BUTTON_Pin|SET_BUTTON_Pin|LED2_Pin;
 8009822:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009824:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009828:	f003 fcae 	bl	800d188 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800982c:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800982e:	4847      	ldr	r0, [pc, #284]	; (800994c <main+0x2a0>)
 8009830:	a917      	add	r1, sp, #92	; 0x5c
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8009832:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009834:	e9cd 7418 	strd	r7, r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009838:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800983a:	f003 fca5 	bl	800d188 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800983e:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8009842:	4843      	ldr	r0, [pc, #268]	; (8009950 <main+0x2a4>)
 8009844:	a917      	add	r1, sp, #92	; 0x5c
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8009846:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009848:	e9cd 7418 	strd	r7, r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800984c:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800984e:	f003 fc9b 	bl	800d188 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = INFRA_LE_R_Pin|LED_LE_R_Pin|INFRA_OE_R_Pin|LED_OE_R_Pin
 8009852:	f44f 43ec 	mov.w	r3, #30208	; 0x7600
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009856:	483f      	ldr	r0, [pc, #252]	; (8009954 <main+0x2a8>)
 8009858:	a917      	add	r1, sp, #92	; 0x5c
  GPIO_InitStruct.Pin = INFRA_LE_R_Pin|LED_LE_R_Pin|INFRA_OE_R_Pin|LED_OE_R_Pin
 800985a:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800985c:	e9cd 7418 	strd	r7, r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009860:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009862:	f003 fc91 	bl	800d188 <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8009866:	6cab      	ldr	r3, [r5, #72]	; 0x48
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8009868:	4622      	mov	r2, r4
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800986a:	f043 0304 	orr.w	r3, r3, #4
 800986e:	64ab      	str	r3, [r5, #72]	; 0x48
 8009870:	6cab      	ldr	r3, [r5, #72]	; 0x48
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8009872:	2105      	movs	r1, #5
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8009874:	f003 0304 	and.w	r3, r3, #4
 8009878:	9304      	str	r3, [sp, #16]
 800987a:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800987c:	6cab      	ldr	r3, [r5, #72]	; 0x48
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800987e:	201d      	movs	r0, #29
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009880:	433b      	orrs	r3, r7
 8009882:	64ab      	str	r3, [r5, #72]	; 0x48
 8009884:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8009886:	403b      	ands	r3, r7
 8009888:	9305      	str	r3, [sp, #20]
 800988a:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800988c:	f003 f8a6 	bl	800c9dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8009890:	201d      	movs	r0, #29
 8009892:	f003 f8bd 	bl	800ca10 <HAL_NVIC_EnableIRQ>
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8009896:	230c      	movs	r3, #12
  hlpuart1.Init.BaudRate = 209700;
 8009898:	4a30      	ldr	r2, [pc, #192]	; (800995c <main+0x2b0>)
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800989a:	6173      	str	r3, [r6, #20]
  hlpuart1.Init.BaudRate = 209700;
 800989c:	4b30      	ldr	r3, [pc, #192]	; (8009960 <main+0x2b4>)
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800989e:	4630      	mov	r0, r6
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80098a0:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80098a4:	e9c6 4408 	strd	r4, r4, [r6, #32]
  hlpuart1.Init.BaudRate = 209700;
 80098a8:	e9c6 2300 	strd	r2, r3, [r6]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80098ac:	6134      	str	r4, [r6, #16]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80098ae:	61b4      	str	r4, [r6, #24]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80098b0:	62b4      	str	r4, [r6, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80098b2:	6674      	str	r4, [r6, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80098b4:	f009 faf2 	bl	8012e9c <HAL_UART_Init>
 80098b8:	b108      	cbz	r0, 80098be <main+0x212>
 80098ba:	b672      	cpsid	i
  while (1)
 80098bc:	e7fe      	b.n	80098bc <main+0x210>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80098be:	4601      	mov	r1, r0
 80098c0:	4630      	mov	r0, r6
 80098c2:	f00b fb4a 	bl	8014f5a <HAL_UARTEx_SetTxFifoThreshold>
 80098c6:	b108      	cbz	r0, 80098cc <main+0x220>
 80098c8:	b672      	cpsid	i
  while (1)
 80098ca:	e7fe      	b.n	80098ca <main+0x21e>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80098cc:	4601      	mov	r1, r0
 80098ce:	4630      	mov	r0, r6
 80098d0:	f00b fb81 	bl	8014fd6 <HAL_UARTEx_SetRxFifoThreshold>
 80098d4:	b108      	cbz	r0, 80098da <main+0x22e>
 80098d6:	b672      	cpsid	i
  while (1)
 80098d8:	e7fe      	b.n	80098d8 <main+0x22c>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80098da:	4630      	mov	r0, r6
 80098dc:	f00b fb04 	bl	8014ee8 <HAL_UARTEx_DisableFifoMode>
 80098e0:	b108      	cbz	r0, 80098e6 <main+0x23a>
 80098e2:	b672      	cpsid	i
  while (1)
 80098e4:	e7fe      	b.n	80098e4 <main+0x238>
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80098e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  hrtc.Init.AsynchPrediv = 127;
 80098ea:	217f      	movs	r1, #127	; 0x7f
  hrtc.Init.SynchPrediv = 255;
 80098ec:	22ff      	movs	r2, #255	; 0xff
  hrtc.Instance = RTC;
 80098ee:	4c1d      	ldr	r4, [pc, #116]	; (8009964 <main+0x2b8>)
  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80098f0:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
 80098f4:	e9cd 0019 	strd	r0, r0, [sp, #100]	; 0x64
 80098f8:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80098fc:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8009900:	6060      	str	r0, [r4, #4]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009902:	61a0      	str	r0, [r4, #24]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8009904:	6220      	str	r0, [r4, #32]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009906:	61e3      	str	r3, [r4, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8009908:	4620      	mov	r0, r4
  hrtc.Instance = RTC;
 800990a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800990e:	6023      	str	r3, [r4, #0]
  hrtc.Init.SynchPrediv = 255;
 8009910:	e9c4 1202 	strd	r1, r2, [r4, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8009914:	f006 fa72 	bl	800fdfc <HAL_RTC_Init>
 8009918:	4603      	mov	r3, r0
 800991a:	b108      	cbz	r0, 8009920 <main+0x274>
 800991c:	b672      	cpsid	i
  while (1)
 800991e:	e7fe      	b.n	800991e <main+0x272>
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8009920:	4620      	mov	r0, r4
 8009922:	a917      	add	r1, sp, #92	; 0x5c
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8009924:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8009928:	9317      	str	r3, [sp, #92]	; 0x5c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800992a:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800992c:	f006 fb74 	bl	8010018 <HAL_RTCEx_PrivilegeModeSet>
 8009930:	4604      	mov	r4, r0
 8009932:	b1c8      	cbz	r0, 8009968 <main+0x2bc>
 8009934:	b672      	cpsid	i
  while (1)
 8009936:	e7fe      	b.n	8009936 <main+0x28a>
 8009938:	40021000 	.word	0x40021000
 800993c:	2000083c 	.word	0x2000083c
 8009940:	42021400 	.word	0x42021400
 8009944:	42020400 	.word	0x42020400
 8009948:	42020c00 	.word	0x42020c00
 800994c:	42020800 	.word	0x42020800
 8009950:	42020000 	.word	0x42020000
 8009954:	42021800 	.word	0x42021800
 8009958:	42021000 	.word	0x42021000
 800995c:	40008000 	.word	0x40008000
 8009960:	00033324 	.word	0x00033324
 8009964:	20000bc4 	.word	0x20000bc4
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8009968:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800996c:	e9cd 0019 	strd	r0, r0, [sp, #100]	; 0x64
 8009970:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8009974:	6deb      	ldr	r3, [r5, #92]	; 0x5c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009976:	a917      	add	r1, sp, #92	; 0x5c
 8009978:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800997c:	65eb      	str	r3, [r5, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800997e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8009980:	48a1      	ldr	r0, [pc, #644]	; (8009c08 <main+0x55c>)
 8009982:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009986:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8009988:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800998a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800998c:	f043 0302 	orr.w	r3, r3, #2
 8009990:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8009992:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8009994:	f003 0302 	and.w	r3, r3, #2
 8009998:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 800999a:	9b02      	ldr	r3, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800999c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800999e:	f043 0301 	orr.w	r3, r3, #1
 80099a2:	64eb      	str	r3, [r5, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80099a4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80099a6:	f8cd 9060 	str.w	r9, [sp, #96]	; 0x60
 80099aa:	f003 0301 	and.w	r3, r3, #1
 80099ae:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80099b0:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80099b2:	9617      	str	r6, [sp, #92]	; 0x5c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80099b4:	f00b fce7 	bl	8015386 <LL_GPIO_Init>
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099b8:	4894      	ldr	r0, [pc, #592]	; (8009c0c <main+0x560>)
 80099ba:	a917      	add	r1, sp, #92	; 0x5c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80099bc:	e9cd 6917 	strd	r6, r9, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80099c0:	941b      	str	r4, [sp, #108]	; 0x6c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099c2:	f00b fce0 	bl	8015386 <LL_GPIO_Init>
  hpcd_USB_FS.Instance = USB;
 80099c6:	4892      	ldr	r0, [pc, #584]	; (8009c10 <main+0x564>)
 80099c8:	4b92      	ldr	r3, [pc, #584]	; (8009c14 <main+0x568>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80099ca:	e9c0 a801 	strd	sl, r8, [r0, #4]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80099ce:	e9c0 8404 	strd	r8, r4, [r0, #16]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80099d2:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80099d6:	6204      	str	r4, [r0, #32]
  hpcd_USB_FS.Instance = USB;
 80099d8:	6003      	str	r3, [r0, #0]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80099da:	f004 fb5b 	bl	800e094 <HAL_PCD_Init>
 80099de:	b108      	cbz	r0, 80099e4 <main+0x338>
 80099e0:	b672      	cpsid	i
  while (1)
 80099e2:	e7fe      	b.n	80099e2 <main+0x336>
  huart4.Init.Mode = UART_MODE_RX;
 80099e4:	2304      	movs	r3, #4
  huart4.Init.BaudRate = 115200;
 80099e6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart4.Instance = UART4;
 80099ea:	4c8b      	ldr	r4, [pc, #556]	; (8009c18 <main+0x56c>)
  huart4.Init.Mode = UART_MODE_RX;
 80099ec:	6163      	str	r3, [r4, #20]
  huart4.Instance = UART4;
 80099ee:	4b8b      	ldr	r3, [pc, #556]	; (8009c1c <main+0x570>)
  huart4.Init.StopBits = UART_STOPBITS_1;
 80099f0:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80099f4:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80099f8:	e9c4 0008 	strd	r0, r0, [r4, #32]
  huart4.Init.Parity = UART_PARITY_NONE;
 80099fc:	6120      	str	r0, [r4, #16]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80099fe:	62a0      	str	r0, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8009a00:	4620      	mov	r0, r4
  huart4.Init.BaudRate = 115200;
 8009a02:	6062      	str	r2, [r4, #4]
  huart4.Instance = UART4;
 8009a04:	6023      	str	r3, [r4, #0]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8009a06:	f009 fa49 	bl	8012e9c <HAL_UART_Init>
 8009a0a:	4601      	mov	r1, r0
 8009a0c:	b108      	cbz	r0, 8009a12 <main+0x366>
 8009a0e:	b672      	cpsid	i
  while (1)
 8009a10:	e7fe      	b.n	8009a10 <main+0x364>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009a12:	4620      	mov	r0, r4
 8009a14:	f00b faa1 	bl	8014f5a <HAL_UARTEx_SetTxFifoThreshold>
 8009a18:	4601      	mov	r1, r0
 8009a1a:	b108      	cbz	r0, 8009a20 <main+0x374>
 8009a1c:	b672      	cpsid	i
  while (1)
 8009a1e:	e7fe      	b.n	8009a1e <main+0x372>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009a20:	4620      	mov	r0, r4
 8009a22:	f00b fad8 	bl	8014fd6 <HAL_UARTEx_SetRxFifoThreshold>
 8009a26:	b108      	cbz	r0, 8009a2c <main+0x380>
 8009a28:	b672      	cpsid	i
  while (1)
 8009a2a:	e7fe      	b.n	8009a2a <main+0x37e>
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8009a2c:	487a      	ldr	r0, [pc, #488]	; (8009c18 <main+0x56c>)
 8009a2e:	f00b fa5b 	bl	8014ee8 <HAL_UARTEx_DisableFifoMode>
 8009a32:	b108      	cbz	r0, 8009a38 <main+0x38c>
 8009a34:	b672      	cpsid	i
  while (1)
 8009a36:	e7fe      	b.n	8009a36 <main+0x38a>
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8009a38:	2228      	movs	r2, #40	; 0x28
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009a3a:	f44f 7882 	mov.w	r8, #260	; 0x104
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009a3e:	f44f 67e0 	mov.w	r7, #1792	; 0x700
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009a42:	f44f 7400 	mov.w	r4, #512	; 0x200
  hspi1.Init.CRCPolynomial = 7;
 8009a46:	f04f 0907 	mov.w	r9, #7
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8009a4a:	2508      	movs	r5, #8
  hspi1.Instance = SPI1;
 8009a4c:	4b74      	ldr	r3, [pc, #464]	; (8009c20 <main+0x574>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8009a4e:	61da      	str	r2, [r3, #28]
  hspi1.Instance = SPI1;
 8009a50:	4a74      	ldr	r2, [pc, #464]	; (8009c24 <main+0x578>)
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009a52:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009a56:	e9c3 0008 	strd	r0, r0, [r3, #32]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8009a5a:	6098      	str	r0, [r3, #8]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a5c:	6298      	str	r0, [r3, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009a5e:	6318      	str	r0, [r3, #48]	; 0x30
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009a60:	4618      	mov	r0, r3
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009a62:	f8c3 8004 	str.w	r8, [r3, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009a66:	60df      	str	r7, [r3, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009a68:	619c      	str	r4, [r3, #24]
  hspi1.Instance = SPI1;
 8009a6a:	601a      	str	r2, [r3, #0]
  hspi1.Init.CRCPolynomial = 7;
 8009a6c:	f8c3 902c 	str.w	r9, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8009a70:	635d      	str	r5, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009a72:	f006 fafd 	bl	8010070 <HAL_SPI_Init>
 8009a76:	4603      	mov	r3, r0
 8009a78:	b108      	cbz	r0, 8009a7e <main+0x3d2>
 8009a7a:	b672      	cpsid	i
  while (1)
 8009a7c:	e7fe      	b.n	8009a7c <main+0x3d0>
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8009a7e:	f04f 0a18 	mov.w	sl, #24
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8009a82:	2680      	movs	r6, #128	; 0x80
  hspi2.Instance = SPI2;
 8009a84:	4868      	ldr	r0, [pc, #416]	; (8009c28 <main+0x57c>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8009a86:	e9c0 8301 	strd	r8, r3, [r0, #4]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009a8a:	e9c0 7303 	strd	r7, r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8009a8e:	e9c0 3405 	strd	r3, r4, [r0, #20]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a92:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi2.Init.CRCPolynomial = 7;
 8009a96:	e9c0 930b 	strd	r9, r3, [r0, #44]	; 0x2c
  hspi2.Instance = SPI2;
 8009a9a:	4b64      	ldr	r3, [pc, #400]	; (8009c2c <main+0x580>)
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8009a9c:	e9c0 a607 	strd	sl, r6, [r0, #28]
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8009aa0:	6345      	str	r5, [r0, #52]	; 0x34
  hspi2.Instance = SPI2;
 8009aa2:	6003      	str	r3, [r0, #0]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8009aa4:	f006 fae4 	bl	8010070 <HAL_SPI_Init>
 8009aa8:	b108      	cbz	r0, 8009aae <main+0x402>
 8009aaa:	b672      	cpsid	i
  while (1)
 8009aac:	e7fe      	b.n	8009aac <main+0x400>
  hspi3.Instance = SPI3;
 8009aae:	4b60      	ldr	r3, [pc, #384]	; (8009c30 <main+0x584>)
 8009ab0:	4a60      	ldr	r2, [pc, #384]	; (8009c34 <main+0x588>)
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009ab2:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8009ab6:	e9c3 0008 	strd	r0, r0, [r3, #32]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8009aba:	6098      	str	r0, [r3, #8]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009abc:	6298      	str	r0, [r3, #40]	; 0x28
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009abe:	6318      	str	r0, [r3, #48]	; 0x30
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8009ac0:	4618      	mov	r0, r3
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8009ac2:	e9c3 4a06 	strd	r4, sl, [r3, #24]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8009ac6:	f8c3 8004 	str.w	r8, [r3, #4]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8009aca:	60df      	str	r7, [r3, #12]
  hspi3.Init.CRCPolynomial = 7;
 8009acc:	f8c3 902c 	str.w	r9, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8009ad0:	635d      	str	r5, [r3, #52]	; 0x34
  hspi3.Instance = SPI3;
 8009ad2:	601a      	str	r2, [r3, #0]
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8009ad4:	f006 facc 	bl	8010070 <HAL_SPI_Init>
 8009ad8:	b108      	cbz	r0, 8009ade <main+0x432>
 8009ada:	b672      	cpsid	i
  while (1)
 8009adc:	e7fe      	b.n	8009adc <main+0x430>
  htim1.Init.Period = 50000;
 8009ade:	f24c 3350 	movw	r3, #50000	; 0xc350
  htim1.Init.Prescaler = 110;
 8009ae2:	226e      	movs	r2, #110	; 0x6e
  htim1.Instance = TIM1;
 8009ae4:	4c54      	ldr	r4, [pc, #336]	; (8009c38 <main+0x58c>)
  TIM_IC_InitTypeDef sConfigIC = {0};
 8009ae6:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
  htim1.Init.Period = 50000;
 8009aea:	60e3      	str	r3, [r4, #12]
  htim1.Instance = TIM1;
 8009aec:	4b53      	ldr	r3, [pc, #332]	; (8009c3c <main+0x590>)
  TIM_IC_InitTypeDef sConfigIC = {0};
 8009aee:	e9cd 0019 	strd	r0, r0, [sp, #100]	; 0x64
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009af2:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009af6:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  htim1.Init.RepetitionCounter = 0;
 8009afa:	e9c4 0004 	strd	r0, r0, [r4, #16]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009afe:	9010      	str	r0, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009b00:	900d      	str	r0, [sp, #52]	; 0x34
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009b02:	9013      	str	r0, [sp, #76]	; 0x4c
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009b04:	60a0      	str	r0, [r4, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009b06:	4620      	mov	r0, r4
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009b08:	61a6      	str	r6, [r4, #24]
  htim1.Init.Prescaler = 110;
 8009b0a:	6062      	str	r2, [r4, #4]
  htim1.Instance = TIM1;
 8009b0c:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009b0e:	f007 f9bf 	bl	8010e90 <HAL_TIM_Base_Init>
 8009b12:	b108      	cbz	r0, 8009b18 <main+0x46c>
 8009b14:	b672      	cpsid	i
  while (1)
 8009b16:	e7fe      	b.n	8009b16 <main+0x46a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	a910      	add	r1, sp, #64	; 0x40
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009b20:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009b22:	f008 f9f3 	bl	8011f0c <HAL_TIM_ConfigClockSource>
 8009b26:	b108      	cbz	r0, 8009b2c <main+0x480>
 8009b28:	b672      	cpsid	i
  while (1)
 8009b2a:	e7fe      	b.n	8009b2a <main+0x47e>
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	f007 fc3d 	bl	80113ac <HAL_TIM_IC_Init>
 8009b32:	b108      	cbz	r0, 8009b38 <main+0x48c>
 8009b34:	b672      	cpsid	i
  while (1)
 8009b36:	e7fe      	b.n	8009b36 <main+0x48a>
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009b38:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009b3c:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009b3e:	a90d      	add	r1, sp, #52	; 0x34
 8009b40:	4620      	mov	r0, r4
 8009b42:	f009 f865 	bl	8012c10 <HAL_TIMEx_MasterConfigSynchronization>
 8009b46:	b108      	cbz	r0, 8009b4c <main+0x4a0>
 8009b48:	b672      	cpsid	i
  while (1)
 8009b4a:	e7fe      	b.n	8009b4a <main+0x49e>
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8009b4c:	2301      	movs	r3, #1
  sConfigIC.ICFilter = 0;
 8009b4e:	e9cd 0019 	strd	r0, r0, [sp, #100]	; 0x64
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8009b52:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8009b54:	462a      	mov	r2, r5
 8009b56:	4620      	mov	r0, r4
 8009b58:	a917      	add	r1, sp, #92	; 0x5c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8009b5a:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8009b5c:	f008 f825 	bl	8011baa <HAL_TIM_IC_ConfigChannel>
 8009b60:	b108      	cbz	r0, 8009b66 <main+0x4ba>
 8009b62:	b672      	cpsid	i
  while (1)
 8009b64:	e7fe      	b.n	8009b64 <main+0x4b8>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8009b66:	2302      	movs	r3, #2
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8009b68:	4620      	mov	r0, r4
 8009b6a:	220c      	movs	r2, #12
 8009b6c:	a917      	add	r1, sp, #92	; 0x5c
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8009b6e:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8009b70:	f008 f81b 	bl	8011baa <HAL_TIM_IC_ConfigChannel>
 8009b74:	b108      	cbz	r0, 8009b7a <main+0x4ce>
 8009b76:	b672      	cpsid	i
  while (1)
 8009b78:	e7fe      	b.n	8009b78 <main+0x4cc>
  TIM_Encoder_InitTypeDef sConfig = {0};
 8009b7a:	2220      	movs	r2, #32
 8009b7c:	2100      	movs	r1, #0
 8009b7e:	a818      	add	r0, sp, #96	; 0x60
 8009b80:	f00f fbc9 	bl	8019316 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009b84:	2300      	movs	r3, #0
  htim3.Instance = TIM3;
 8009b86:	4c2e      	ldr	r4, [pc, #184]	; (8009c40 <main+0x594>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009b88:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009b8c:	e9c4 3301 	strd	r3, r3, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009b90:	9312      	str	r3, [sp, #72]	; 0x48
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009b92:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009b94:	61a3      	str	r3, [r4, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009b96:	2303      	movs	r3, #3
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009b98:	2501      	movs	r5, #1
  htim3.Init.Period = 65535;
 8009b9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009b9e:	9317      	str	r3, [sp, #92]	; 0x5c
  htim3.Instance = TIM3;
 8009ba0:	4b28      	ldr	r3, [pc, #160]	; (8009c44 <main+0x598>)
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	a917      	add	r1, sp, #92	; 0x5c
  htim3.Instance = TIM3;
 8009ba6:	6023      	str	r3, [r4, #0]
  htim3.Init.Period = 65535;
 8009ba8:	60e2      	str	r2, [r4, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009baa:	9519      	str	r5, [sp, #100]	; 0x64
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009bac:	951d      	str	r5, [sp, #116]	; 0x74
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8009bae:	f007 fda9 	bl	8011704 <HAL_TIM_Encoder_Init>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	b108      	cbz	r0, 8009bba <main+0x50e>
 8009bb6:	b672      	cpsid	i
  while (1)
 8009bb8:	e7fe      	b.n	8009bb8 <main+0x50c>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009bba:	4620      	mov	r0, r4
 8009bbc:	a910      	add	r1, sp, #64	; 0x40
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009bbe:	9310      	str	r3, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009bc0:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009bc2:	f009 f825 	bl	8012c10 <HAL_TIMEx_MasterConfigSynchronization>
 8009bc6:	b108      	cbz	r0, 8009bcc <main+0x520>
 8009bc8:	b672      	cpsid	i
  while (1)
 8009bca:	e7fe      	b.n	8009bca <main+0x51e>
  huart2.Init.BaudRate = 115200;
 8009bcc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX;
 8009bd0:	2608      	movs	r6, #8
  huart2.Instance = USART2;
 8009bd2:	4c1d      	ldr	r4, [pc, #116]	; (8009c48 <main+0x59c>)
  huart2.Init.BaudRate = 115200;
 8009bd4:	6063      	str	r3, [r4, #4]
  huart2.Instance = USART2;
 8009bd6:	4b1d      	ldr	r3, [pc, #116]	; (8009c4c <main+0x5a0>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009bd8:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009bdc:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009be0:	e9c4 0008 	strd	r0, r0, [r4, #32]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009be4:	6120      	str	r0, [r4, #16]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009be6:	62a0      	str	r0, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009be8:	4620      	mov	r0, r4
  huart2.Init.Mode = UART_MODE_TX;
 8009bea:	6166      	str	r6, [r4, #20]
  huart2.Instance = USART2;
 8009bec:	6023      	str	r3, [r4, #0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009bee:	f009 f955 	bl	8012e9c <HAL_UART_Init>
 8009bf2:	4601      	mov	r1, r0
 8009bf4:	b108      	cbz	r0, 8009bfa <main+0x54e>
 8009bf6:	b672      	cpsid	i
  while (1)
 8009bf8:	e7fe      	b.n	8009bf8 <main+0x54c>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	f00b f9ad 	bl	8014f5a <HAL_UARTEx_SetTxFifoThreshold>
 8009c00:	4601      	mov	r1, r0
 8009c02:	b328      	cbz	r0, 8009c50 <main+0x5a4>
 8009c04:	b672      	cpsid	i
  while (1)
 8009c06:	e7fe      	b.n	8009c06 <main+0x55a>
 8009c08:	42020400 	.word	0x42020400
 8009c0c:	42020000 	.word	0x42020000
 8009c10:	200008d0 	.word	0x200008d0
 8009c14:	4000d400 	.word	0x4000d400
 8009c18:	20000f28 	.word	0x20000f28
 8009c1c:	40004c00 	.word	0x40004c00
 8009c20:	20000bec 	.word	0x20000bec
 8009c24:	40013000 	.word	0x40013000
 8009c28:	20000c50 	.word	0x20000c50
 8009c2c:	40003800 	.word	0x40003800
 8009c30:	20000cb4 	.word	0x20000cb4
 8009c34:	40003c00 	.word	0x40003c00
 8009c38:	20000d18 	.word	0x20000d18
 8009c3c:	40012c00 	.word	0x40012c00
 8009c40:	20000d64 	.word	0x20000d64
 8009c44:	40000400 	.word	0x40000400
 8009c48:	20000e94 	.word	0x20000e94
 8009c4c:	40004400 	.word	0x40004400
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009c50:	4620      	mov	r0, r4
 8009c52:	f00b f9c0 	bl	8014fd6 <HAL_UARTEx_SetRxFifoThreshold>
 8009c56:	b108      	cbz	r0, 8009c5c <main+0x5b0>
 8009c58:	b672      	cpsid	i
  while (1)
 8009c5a:	e7fe      	b.n	8009c5a <main+0x5ae>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	f00b f943 	bl	8014ee8 <HAL_UARTEx_DisableFifoMode>
 8009c62:	b108      	cbz	r0, 8009c68 <main+0x5bc>
 8009c64:	b672      	cpsid	i
  while (1)
 8009c66:	e7fe      	b.n	8009c66 <main+0x5ba>
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 8009c68:	23c0      	movs	r3, #192	; 0xc0
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_64;
 8009c6a:	2214      	movs	r2, #20
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8009c6c:	f44f 3740 	mov.w	r7, #196608	; 0x30000
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8009c70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  hadc1.Instance = ADC1;
 8009c74:	4c93      	ldr	r4, [pc, #588]	; (8009ec4 <main+0x818>)
  ADC_MultiModeTypeDef multimode = {0};
 8009c76:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 8009c7a:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  hadc1.Instance = ADC1;
 8009c7e:	4b92      	ldr	r3, [pc, #584]	; (8009ec8 <main+0x81c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8009c80:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
 8009c84:	e9cd 0019 	strd	r0, r0, [sp, #100]	; 0x64
 8009c88:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009c8c:	e9c4 0002 	strd	r0, r0, [r4, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009c90:	e9c4 000a 	strd	r0, r0, [r4, #40]	; 0x28
  ADC_MultiModeTypeDef multimode = {0};
 8009c94:	9012      	str	r0, [sp, #72]	; 0x48
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009c96:	f884 0020 	strb.w	r0, [r4, #32]
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8009c9a:	6460      	str	r0, [r4, #68]	; 0x44
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8009c9c:	8325      	strh	r5, [r4, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009c9e:	4620      	mov	r0, r4
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8009ca0:	e9c4 5604 	strd	r5, r6, [r4, #16]
  hadc1.Init.NbrOfConversion = 8;
 8009ca4:	61e6      	str	r6, [r4, #28]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8009ca6:	6067      	str	r7, [r4, #4]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8009ca8:	6361      	str	r1, [r4, #52]	; 0x34
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8009caa:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc1.Init.OversamplingMode = ENABLE;
 8009cae:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8009cb2:	64a5      	str	r5, [r4, #72]	; 0x48
  hadc1.Instance = ADC1;
 8009cb4:	6023      	str	r3, [r4, #0]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009cb6:	f001 fba1 	bl	800b3fc <HAL_ADC_Init>
 8009cba:	b108      	cbz	r0, 8009cc0 <main+0x614>
 8009cbc:	b672      	cpsid	i
  while (1)
 8009cbe:	e7fe      	b.n	8009cbe <main+0x612>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8009cc0:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8009cc2:	a910      	add	r1, sp, #64	; 0x40
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	f002 fd2d 	bl	800c724 <HAL_ADCEx_MultiModeConfigChannel>
 8009cca:	b108      	cbz	r0, 8009cd0 <main+0x624>
 8009ccc:	b672      	cpsid	i
  while (1)
 8009cce:	e7fe      	b.n	8009cce <main+0x622>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8009cd0:	2306      	movs	r3, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8009cd2:	9519      	str	r5, [sp, #100]	; 0x64
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8009cd4:	9318      	str	r3, [sp, #96]	; 0x60
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8009cd6:	257f      	movs	r5, #127	; 0x7f
 8009cd8:	2304      	movs	r3, #4
 8009cda:	e9cd 531a 	strd	r5, r3, [sp, #104]	; 0x68
  sConfig.Channel = ADC_CHANNEL_1;
 8009cde:	4b7b      	ldr	r3, [pc, #492]	; (8009ecc <main+0x820>)
  sConfig.Offset = 0;
 8009ce0:	901c      	str	r0, [sp, #112]	; 0x70
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009ce2:	a917      	add	r1, sp, #92	; 0x5c
 8009ce4:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 8009ce6:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009ce8:	f001 ffc0 	bl	800bc6c <HAL_ADC_ConfigChannel>
 8009cec:	b108      	cbz	r0, 8009cf2 <main+0x646>
 8009cee:	b672      	cpsid	i
  while (1)
 8009cf0:	e7fe      	b.n	8009cf0 <main+0x644>
  sConfig.Channel = ADC_CHANNEL_2;
 8009cf2:	4b77      	ldr	r3, [pc, #476]	; (8009ed0 <main+0x824>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009cf4:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 8009cf6:	9317      	str	r3, [sp, #92]	; 0x5c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8009cf8:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009cfa:	a917      	add	r1, sp, #92	; 0x5c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8009cfc:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009cfe:	f001 ffb5 	bl	800bc6c <HAL_ADC_ConfigChannel>
 8009d02:	b108      	cbz	r0, 8009d08 <main+0x65c>
 8009d04:	b672      	cpsid	i
  while (1)
 8009d06:	e7fe      	b.n	8009d06 <main+0x65a>
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8009d08:	2312      	movs	r3, #18
  sConfig.Channel = ADC_CHANNEL_3;
 8009d0a:	4a72      	ldr	r2, [pc, #456]	; (8009ed4 <main+0x828>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009d0c:	486d      	ldr	r0, [pc, #436]	; (8009ec4 <main+0x818>)
 8009d0e:	a917      	add	r1, sp, #92	; 0x5c
  sConfig.Channel = ADC_CHANNEL_3;
 8009d10:	9217      	str	r2, [sp, #92]	; 0x5c
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8009d12:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009d14:	f001 ffaa 	bl	800bc6c <HAL_ADC_ConfigChannel>
 8009d18:	b108      	cbz	r0, 8009d1e <main+0x672>
 8009d1a:	b672      	cpsid	i
  while (1)
 8009d1c:	e7fe      	b.n	8009d1c <main+0x670>
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8009d1e:	2318      	movs	r3, #24
  sConfig.Channel = ADC_CHANNEL_7;
 8009d20:	4a6d      	ldr	r2, [pc, #436]	; (8009ed8 <main+0x82c>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009d22:	4868      	ldr	r0, [pc, #416]	; (8009ec4 <main+0x818>)
 8009d24:	a917      	add	r1, sp, #92	; 0x5c
  sConfig.Channel = ADC_CHANNEL_7;
 8009d26:	9217      	str	r2, [sp, #92]	; 0x5c
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8009d28:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009d2a:	f001 ff9f 	bl	800bc6c <HAL_ADC_ConfigChannel>
 8009d2e:	b108      	cbz	r0, 8009d34 <main+0x688>
 8009d30:	b672      	cpsid	i
  while (1)
 8009d32:	e7fe      	b.n	8009d32 <main+0x686>
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8009d34:	f44f 7380 	mov.w	r3, #256	; 0x100
  sConfig.Channel = ADC_CHANNEL_8;
 8009d38:	4a68      	ldr	r2, [pc, #416]	; (8009edc <main+0x830>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009d3a:	4862      	ldr	r0, [pc, #392]	; (8009ec4 <main+0x818>)
 8009d3c:	a917      	add	r1, sp, #92	; 0x5c
  sConfig.Channel = ADC_CHANNEL_8;
 8009d3e:	9217      	str	r2, [sp, #92]	; 0x5c
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8009d40:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009d42:	f001 ff93 	bl	800bc6c <HAL_ADC_ConfigChannel>
 8009d46:	b108      	cbz	r0, 8009d4c <main+0x6a0>
 8009d48:	b672      	cpsid	i
  while (1)
 8009d4a:	e7fe      	b.n	8009d4a <main+0x69e>
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8009d4c:	f44f 7383 	mov.w	r3, #262	; 0x106
  sConfig.Channel = ADC_CHANNEL_9;
 8009d50:	4a63      	ldr	r2, [pc, #396]	; (8009ee0 <main+0x834>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009d52:	485c      	ldr	r0, [pc, #368]	; (8009ec4 <main+0x818>)
 8009d54:	a917      	add	r1, sp, #92	; 0x5c
  sConfig.Channel = ADC_CHANNEL_9;
 8009d56:	9217      	str	r2, [sp, #92]	; 0x5c
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8009d58:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009d5a:	f001 ff87 	bl	800bc6c <HAL_ADC_ConfigChannel>
 8009d5e:	b108      	cbz	r0, 8009d64 <main+0x6b8>
 8009d60:	b672      	cpsid	i
  while (1)
 8009d62:	e7fe      	b.n	8009d62 <main+0x6b6>
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8009d64:	f44f 7386 	mov.w	r3, #268	; 0x10c
  sConfig.Channel = ADC_CHANNEL_12;
 8009d68:	4a5e      	ldr	r2, [pc, #376]	; (8009ee4 <main+0x838>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009d6a:	4856      	ldr	r0, [pc, #344]	; (8009ec4 <main+0x818>)
 8009d6c:	a917      	add	r1, sp, #92	; 0x5c
  sConfig.Channel = ADC_CHANNEL_12;
 8009d6e:	9217      	str	r2, [sp, #92]	; 0x5c
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8009d70:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009d72:	f001 ff7b 	bl	800bc6c <HAL_ADC_ConfigChannel>
 8009d76:	b108      	cbz	r0, 8009d7c <main+0x6d0>
 8009d78:	b672      	cpsid	i
  while (1)
 8009d7a:	e7fe      	b.n	8009d7a <main+0x6ce>
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8009d7c:	f44f 7389 	mov.w	r3, #274	; 0x112
  sConfig.Channel = ADC_CHANNEL_16;
 8009d80:	4a59      	ldr	r2, [pc, #356]	; (8009ee8 <main+0x83c>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009d82:	4850      	ldr	r0, [pc, #320]	; (8009ec4 <main+0x818>)
 8009d84:	a917      	add	r1, sp, #92	; 0x5c
  sConfig.Channel = ADC_CHANNEL_16;
 8009d86:	9217      	str	r2, [sp, #92]	; 0x5c
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8009d88:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009d8a:	f001 ff6f 	bl	800bc6c <HAL_ADC_ConfigChannel>
 8009d8e:	b108      	cbz	r0, 8009d94 <main+0x6e8>
 8009d90:	b672      	cpsid	i
  while (1)
 8009d92:	e7fe      	b.n	8009d92 <main+0x6e6>
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009d94:	2380      	movs	r3, #128	; 0x80
  htim5.Instance = TIM5;
 8009d96:	4c55      	ldr	r4, [pc, #340]	; (8009eec <main+0x840>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8009d98:	2220      	movs	r2, #32
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009d9a:	61a3      	str	r3, [r4, #24]
  htim5.Init.Period = 1834;
 8009d9c:	f240 732a 	movw	r3, #1834	; 0x72a
 8009da0:	60e3      	str	r3, [r4, #12]
  htim5.Instance = TIM5;
 8009da2:	4b53      	ldr	r3, [pc, #332]	; (8009ef0 <main+0x844>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009da4:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
 8009da8:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009dac:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009db0:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
 8009db4:	e9cd 0019 	strd	r0, r0, [sp, #100]	; 0x64
 8009db8:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009dbc:	900f      	str	r0, [sp, #60]	; 0x3c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009dbe:	901d      	str	r0, [sp, #116]	; 0x74
  htim5.Init.Prescaler = 0;
 8009dc0:	6060      	str	r0, [r4, #4]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009dc2:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8009dc4:	4620      	mov	r0, r4
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8009dc6:	60a2      	str	r2, [r4, #8]
  htim5.Instance = TIM5;
 8009dc8:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8009dca:	f007 f861 	bl	8010e90 <HAL_TIM_Base_Init>
 8009dce:	b108      	cbz	r0, 8009dd4 <main+0x728>
 8009dd0:	b672      	cpsid	i
  while (1)
 8009dd2:	e7fe      	b.n	8009dd2 <main+0x726>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8009dd8:	4620      	mov	r0, r4
 8009dda:	a910      	add	r1, sp, #64	; 0x40
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009ddc:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8009dde:	f008 f895 	bl	8011f0c <HAL_TIM_ConfigClockSource>
 8009de2:	b108      	cbz	r0, 8009de8 <main+0x73c>
 8009de4:	b672      	cpsid	i
  while (1)
 8009de6:	e7fe      	b.n	8009de6 <main+0x73a>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8009de8:	4620      	mov	r0, r4
 8009dea:	f007 f981 	bl	80110f0 <HAL_TIM_PWM_Init>
 8009dee:	4603      	mov	r3, r0
 8009df0:	b108      	cbz	r0, 8009df6 <main+0x74a>
 8009df2:	b672      	cpsid	i
  while (1)
 8009df4:	e7fe      	b.n	8009df4 <main+0x748>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8009df6:	4620      	mov	r0, r4
 8009df8:	a90d      	add	r1, sp, #52	; 0x34
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009dfa:	930d      	str	r3, [sp, #52]	; 0x34
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009dfc:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8009dfe:	f008 ff07 	bl	8012c10 <HAL_TIMEx_MasterConfigSynchronization>
 8009e02:	b108      	cbz	r0, 8009e08 <main+0x75c>
 8009e04:	b672      	cpsid	i
  while (1)
 8009e06:	e7fe      	b.n	8009e06 <main+0x75a>
  sConfigOC.Pulse = 0;
 8009e08:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009e0a:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009e0c:	4837      	ldr	r0, [pc, #220]	; (8009eec <main+0x840>)
 8009e0e:	a917      	add	r1, sp, #92	; 0x5c
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009e10:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009e14:	9219      	str	r2, [sp, #100]	; 0x64
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009e16:	921b      	str	r2, [sp, #108]	; 0x6c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009e18:	f007 ff64 	bl	8011ce4 <HAL_TIM_PWM_ConfigChannel>
 8009e1c:	b108      	cbz	r0, 8009e22 <main+0x776>
 8009e1e:	b672      	cpsid	i
  while (1)
 8009e20:	e7fe      	b.n	8009e20 <main+0x774>
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009e22:	220c      	movs	r2, #12
 8009e24:	4831      	ldr	r0, [pc, #196]	; (8009eec <main+0x840>)
 8009e26:	a917      	add	r1, sp, #92	; 0x5c
 8009e28:	f007 ff5c 	bl	8011ce4 <HAL_TIM_PWM_ConfigChannel>
 8009e2c:	4605      	mov	r5, r0
 8009e2e:	b108      	cbz	r0, 8009e34 <main+0x788>
 8009e30:	b672      	cpsid	i
  while (1)
 8009e32:	e7fe      	b.n	8009e32 <main+0x786>
  HAL_TIM_MspPostInit(&htim5);
 8009e34:	482d      	ldr	r0, [pc, #180]	; (8009eec <main+0x840>)
 8009e36:	f000 fd65 	bl	800a904 <HAL_TIM_MspPostInit>
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009e3a:	2301      	movs	r3, #1
  hi2c1.Instance = I2C1;
 8009e3c:	4c2d      	ldr	r4, [pc, #180]	; (8009ef4 <main+0x848>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009e3e:	60e3      	str	r3, [r4, #12]
  hi2c1.Instance = I2C1;
 8009e40:	4b2d      	ldr	r3, [pc, #180]	; (8009ef8 <main+0x84c>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009e42:	4620      	mov	r0, r4
  hi2c1.Instance = I2C1;
 8009e44:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x60514452;
 8009e46:	f103 5304 	add.w	r3, r3, #553648128	; 0x21000000
 8009e4a:	f5a3 032f 	sub.w	r3, r3, #11468800	; 0xaf0000
 8009e4e:	f6a3 73ae 	subw	r3, r3, #4014	; 0xfae
  hi2c1.Init.OwnAddress2 = 0;
 8009e52:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009e56:	e9c4 5506 	strd	r5, r5, [r4, #24]
  hi2c1.Init.OwnAddress1 = 0;
 8009e5a:	60a5      	str	r5, [r4, #8]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009e5c:	6225      	str	r5, [r4, #32]
  hi2c1.Init.Timing = 0x60514452;
 8009e5e:	6063      	str	r3, [r4, #4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009e60:	f003 fb44 	bl	800d4ec <HAL_I2C_Init>
 8009e64:	4601      	mov	r1, r0
 8009e66:	b108      	cbz	r0, 8009e6c <main+0x7c0>
 8009e68:	b672      	cpsid	i
  while (1)
 8009e6a:	e7fe      	b.n	8009e6a <main+0x7be>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	f004 f849 	bl	800df04 <HAL_I2CEx_ConfigAnalogFilter>
 8009e72:	4601      	mov	r1, r0
 8009e74:	b108      	cbz	r0, 8009e7a <main+0x7ce>
 8009e76:	b672      	cpsid	i
  while (1)
 8009e78:	e7fe      	b.n	8009e78 <main+0x7cc>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	f004 f88d 	bl	800df9a <HAL_I2CEx_ConfigDigitalFilter>
 8009e80:	b108      	cbz	r0, 8009e86 <main+0x7da>
 8009e82:	b672      	cpsid	i
  while (1)
 8009e84:	e7fe      	b.n	8009e84 <main+0x7d8>
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8009e86:	f004 f8d5 	bl	800e034 <HAL_ICACHE_ConfigAssociativityMode>
 8009e8a:	b108      	cbz	r0, 8009e90 <main+0x7e4>
 8009e8c:	b672      	cpsid	i
  while (1)
 8009e8e:	e7fe      	b.n	8009e8e <main+0x7e2>
  if (HAL_ICACHE_Enable() != HAL_OK)
 8009e90:	f004 f8f0 	bl	800e074 <HAL_ICACHE_Enable>
 8009e94:	b108      	cbz	r0, 8009e9a <main+0x7ee>
 8009e96:	b672      	cpsid	i
  while (1)
 8009e98:	e7fe      	b.n	8009e98 <main+0x7ec>
  htim6.Init.Period = 65535;
 8009e9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim6.Init.Prescaler = 110;
 8009e9e:	256e      	movs	r5, #110	; 0x6e
  htim6.Instance = TIM6;
 8009ea0:	4c16      	ldr	r4, [pc, #88]	; (8009efc <main+0x850>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009ea2:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
  htim6.Init.Period = 65535;
 8009ea6:	60e3      	str	r3, [r4, #12]
  htim6.Instance = TIM6;
 8009ea8:	4b15      	ldr	r3, [pc, #84]	; (8009f00 <main+0x854>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009eaa:	9019      	str	r0, [sp, #100]	; 0x64
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009eac:	60a0      	str	r0, [r4, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009eae:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8009eb0:	4620      	mov	r0, r4
  htim6.Instance = TIM6;
 8009eb2:	6023      	str	r3, [r4, #0]
  htim6.Init.Prescaler = 110;
 8009eb4:	6065      	str	r5, [r4, #4]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8009eb6:	f006 ffeb 	bl	8010e90 <HAL_TIM_Base_Init>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	b310      	cbz	r0, 8009f04 <main+0x858>
 8009ebe:	b672      	cpsid	i
  while (1)
 8009ec0:	e7fe      	b.n	8009ec0 <main+0x814>
 8009ec2:	bf00      	nop
 8009ec4:	20000718 	.word	0x20000718
 8009ec8:	42028000 	.word	0x42028000
 8009ecc:	04300002 	.word	0x04300002
 8009ed0:	08600004 	.word	0x08600004
 8009ed4:	0c900008 	.word	0x0c900008
 8009ed8:	1d500080 	.word	0x1d500080
 8009edc:	21800100 	.word	0x21800100
 8009ee0:	25b00200 	.word	0x25b00200
 8009ee4:	32601000 	.word	0x32601000
 8009ee8:	43210000 	.word	0x43210000
 8009eec:	20000db0 	.word	0x20000db0
 8009ef0:	40000c00 	.word	0x40000c00
 8009ef4:	200007e8 	.word	0x200007e8
 8009ef8:	40005400 	.word	0x40005400
 8009efc:	20000dfc 	.word	0x20000dfc
 8009f00:	40001000 	.word	0x40001000
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8009f04:	4620      	mov	r0, r4
 8009f06:	a917      	add	r1, sp, #92	; 0x5c
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009f08:	9317      	str	r3, [sp, #92]	; 0x5c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009f0a:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8009f0c:	f008 fe80 	bl	8012c10 <HAL_TIMEx_MasterConfigSynchronization>
 8009f10:	4604      	mov	r4, r0
 8009f12:	b108      	cbz	r0, 8009f18 <main+0x86c>
 8009f14:	b672      	cpsid	i
  while (1)
 8009f16:	e7fe      	b.n	8009f16 <main+0x86a>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009f18:	4601      	mov	r1, r0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009f1a:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009f1e:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
 8009f22:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
 8009f26:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
 8009f2a:	e9cd 0015 	strd	r0, r0, [sp, #84]	; 0x54
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009f2e:	2234      	movs	r2, #52	; 0x34
 8009f30:	a817      	add	r0, sp, #92	; 0x5c
 8009f32:	f00f f9f0 	bl	8019316 <memset>
  htim8.Init.Period = PWM_PERIOD;
 8009f36:	f242 7310 	movw	r3, #10000	; 0x2710
  htim8.Instance = TIM8;
 8009f3a:	4838      	ldr	r0, [pc, #224]	; (800a01c <main+0x970>)
  htim8.Init.Period = PWM_PERIOD;
 8009f3c:	60c3      	str	r3, [r0, #12]
  htim8.Instance = TIM8;
 8009f3e:	4b38      	ldr	r3, [pc, #224]	; (800a020 <main+0x974>)
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009f40:	e9c0 5401 	strd	r5, r4, [r0, #4]
  htim8.Init.RepetitionCounter = 0;
 8009f44:	e9c0 4404 	strd	r4, r4, [r0, #16]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009f48:	6184      	str	r4, [r0, #24]
  htim8.Instance = TIM8;
 8009f4a:	6003      	str	r3, [r0, #0]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8009f4c:	f007 f8d0 	bl	80110f0 <HAL_TIM_PWM_Init>
 8009f50:	b108      	cbz	r0, 8009f56 <main+0x8aa>
 8009f52:	b672      	cpsid	i
  while (1)
 8009f54:	e7fe      	b.n	8009f54 <main+0x8a8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009f56:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009f58:	4830      	ldr	r0, [pc, #192]	; (800a01c <main+0x970>)
 8009f5a:	a90d      	add	r1, sp, #52	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009f5c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009f60:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009f62:	f008 fe55 	bl	8012c10 <HAL_TIMEx_MasterConfigSynchronization>
 8009f66:	b108      	cbz	r0, 8009f6c <main+0x8c0>
 8009f68:	b672      	cpsid	i
  while (1)
 8009f6a:	e7fe      	b.n	8009f6a <main+0x8be>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009f6c:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009f6e:	4602      	mov	r2, r0
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009f70:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009f74:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009f78:	e9cd 0015 	strd	r0, r0, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009f7c:	a910      	add	r1, sp, #64	; 0x40
 8009f7e:	4827      	ldr	r0, [pc, #156]	; (800a01c <main+0x970>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009f80:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009f82:	f007 feaf 	bl	8011ce4 <HAL_TIM_PWM_ConfigChannel>
 8009f86:	4603      	mov	r3, r0
 8009f88:	b108      	cbz	r0, 8009f8e <main+0x8e2>
 8009f8a:	b672      	cpsid	i
  while (1)
 8009f8c:	e7fe      	b.n	8009f8c <main+0x8e0>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009f8e:	f44f 5400 	mov.w	r4, #8192	; 0x2000
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009f92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8009f96:	4821      	ldr	r0, [pc, #132]	; (800a01c <main+0x970>)
 8009f98:	a917      	add	r1, sp, #92	; 0x5c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009f9a:	941c      	str	r4, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009f9c:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.DeadTime = 0;
 8009fa0:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8009fa4:	e9cd 331d 	strd	r3, r3, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8009fa8:	e9cd 3321 	strd	r3, r3, [sp, #132]	; 0x84
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009fac:	931b      	str	r3, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009fae:	931f      	str	r3, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009fb0:	9323      	str	r3, [sp, #140]	; 0x8c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009fb2:	9220      	str	r2, [sp, #128]	; 0x80
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8009fb4:	f008 feb4 	bl	8012d20 <HAL_TIMEx_ConfigBreakDeadTime>
 8009fb8:	4604      	mov	r4, r0
 8009fba:	b108      	cbz	r0, 8009fc0 <main+0x914>
 8009fbc:	b672      	cpsid	i
  while (1)
 8009fbe:	e7fe      	b.n	8009fbe <main+0x912>
  HAL_TIM_MspPostInit(&htim8);
 8009fc0:	4816      	ldr	r0, [pc, #88]	; (800a01c <main+0x970>)
 8009fc2:	f000 fc9f 	bl	800a904 <HAL_TIM_MspPostInit>
	Radio_Init();
 8009fc6:	f7f9 f92d 	bl	8003224 <_Z10Radio_Initv>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8009fca:	4621      	mov	r1, r4
 8009fcc:	4813      	ldr	r0, [pc, #76]	; (800a01c <main+0x970>)
 8009fce:	f007 f8e7 	bl	80111a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8009fd2:	4621      	mov	r1, r4
 8009fd4:	4813      	ldr	r0, [pc, #76]	; (800a024 <main+0x978>)
 8009fd6:	f007 f8e3 	bl	80111a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8009fda:	210c      	movs	r1, #12
 8009fdc:	4811      	ldr	r0, [pc, #68]	; (800a024 <main+0x978>)
 8009fde:	f007 f8df 	bl	80111a0 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8009fe2:	213c      	movs	r1, #60	; 0x3c
 8009fe4:	4810      	ldr	r0, [pc, #64]	; (800a028 <main+0x97c>)
 8009fe6:	f007 fc33 	bl	8011850 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start(&htim6);
 8009fea:	4810      	ldr	r0, [pc, #64]	; (800a02c <main+0x980>)
 8009fec:	f006 ffa8 	bl	8010f40 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8009ff0:	2108      	movs	r1, #8
 8009ff2:	480f      	ldr	r0, [pc, #60]	; (800a030 <main+0x984>)
 8009ff4:	f007 fa3c 	bl	8011470 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 8009ff8:	210c      	movs	r1, #12
 8009ffa:	480d      	ldr	r0, [pc, #52]	; (800a030 <main+0x984>)
 8009ffc:	f007 fa38 	bl	8011470 <HAL_TIM_IC_Start_IT>
  osKernelInitialize();
 800a000:	f00b faae 	bl	8015560 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800a004:	4621      	mov	r1, r4
 800a006:	4a0b      	ldr	r2, [pc, #44]	; (800a034 <main+0x988>)
 800a008:	480b      	ldr	r0, [pc, #44]	; (800a038 <main+0x98c>)
 800a00a:	f00b faf3 	bl	80155f4 <osThreadNew>
 800a00e:	4b0b      	ldr	r3, [pc, #44]	; (800a03c <main+0x990>)
 800a010:	6018      	str	r0, [r3, #0]
  RegistrateUserTasks();
 800a012:	f7fa fefb 	bl	8004e0c <_Z19RegistrateUserTasksv>
  osKernelStart();
 800a016:	f00b fac7 	bl	80155a8 <osKernelStart>
  while (1)
 800a01a:	e7fe      	b.n	800a01a <main+0x96e>
 800a01c:	20000e48 	.word	0x20000e48
 800a020:	40013400 	.word	0x40013400
 800a024:	20000db0 	.word	0x20000db0
 800a028:	20000d64 	.word	0x20000d64
 800a02c:	20000dfc 	.word	0x20000dfc
 800a030:	20000d18 	.word	0x20000d18
 800a034:	0801aa70 	.word	0x0801aa70
 800a038:	080095e9 	.word	0x080095e9
 800a03c:	20000714 	.word	0x20000714

0800a040 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM2) {
 800a040:	6803      	ldr	r3, [r0, #0]
 800a042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a046:	d000      	beq.n	800a04a <HAL_TIM_PeriodElapsedCallback+0xa>
}
 800a048:	4770      	bx	lr
    HAL_IncTick();
 800a04a:	f000 bfad 	b.w	800afa8 <HAL_IncTick>
 800a04e:	bf00      	nop

0800a050 <Error_Handler>:
 800a050:	b672      	cpsid	i
  while (1)
 800a052:	e7fe      	b.n	800a052 <Error_Handler+0x2>

0800a054 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b082      	sub	sp, #8
 800a058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a05a:	4b11      	ldr	r3, [pc, #68]	; (800a0a0 <HAL_MspInit+0x4c>)
 800a05c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a05e:	4a10      	ldr	r2, [pc, #64]	; (800a0a0 <HAL_MspInit+0x4c>)
 800a060:	f043 0301 	orr.w	r3, r3, #1
 800a064:	6613      	str	r3, [r2, #96]	; 0x60
 800a066:	4b0e      	ldr	r3, [pc, #56]	; (800a0a0 <HAL_MspInit+0x4c>)
 800a068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a06a:	f003 0301 	and.w	r3, r3, #1
 800a06e:	607b      	str	r3, [r7, #4]
 800a070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a072:	4b0b      	ldr	r3, [pc, #44]	; (800a0a0 <HAL_MspInit+0x4c>)
 800a074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a076:	4a0a      	ldr	r2, [pc, #40]	; (800a0a0 <HAL_MspInit+0x4c>)
 800a078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a07c:	6593      	str	r3, [r2, #88]	; 0x58
 800a07e:	4b08      	ldr	r3, [pc, #32]	; (800a0a0 <HAL_MspInit+0x4c>)
 800a080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a086:	603b      	str	r3, [r7, #0]
 800a088:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 800a08a:	2200      	movs	r2, #0
 800a08c:	2107      	movs	r1, #7
 800a08e:	f06f 0001 	mvn.w	r0, #1
 800a092:	f002 fca3 	bl	800c9dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a096:	bf00      	nop
 800a098:	3708      	adds	r7, #8
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	40021000 	.word	0x40021000

0800a0a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b08c      	sub	sp, #48	; 0x30
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a0ac:	f107 031c 	add.w	r3, r7, #28
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	601a      	str	r2, [r3, #0]
 800a0b4:	605a      	str	r2, [r3, #4]
 800a0b6:	609a      	str	r2, [r3, #8]
 800a0b8:	60da      	str	r2, [r3, #12]
 800a0ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a4b      	ldr	r2, [pc, #300]	; (800a1f0 <HAL_ADC_MspInit+0x14c>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	f040 8090 	bne.w	800a1e8 <HAL_ADC_MspInit+0x144>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800a0c8:	4b4a      	ldr	r3, [pc, #296]	; (800a1f4 <HAL_ADC_MspInit+0x150>)
 800a0ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0cc:	4a49      	ldr	r2, [pc, #292]	; (800a1f4 <HAL_ADC_MspInit+0x150>)
 800a0ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a0d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a0d4:	4b47      	ldr	r3, [pc, #284]	; (800a1f4 <HAL_ADC_MspInit+0x150>)
 800a0d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0dc:	61bb      	str	r3, [r7, #24]
 800a0de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a0e0:	4b44      	ldr	r3, [pc, #272]	; (800a1f4 <HAL_ADC_MspInit+0x150>)
 800a0e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0e4:	4a43      	ldr	r2, [pc, #268]	; (800a1f4 <HAL_ADC_MspInit+0x150>)
 800a0e6:	f043 0304 	orr.w	r3, r3, #4
 800a0ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a0ec:	4b41      	ldr	r3, [pc, #260]	; (800a1f4 <HAL_ADC_MspInit+0x150>)
 800a0ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0f0:	f003 0304 	and.w	r3, r3, #4
 800a0f4:	617b      	str	r3, [r7, #20]
 800a0f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a0f8:	4b3e      	ldr	r3, [pc, #248]	; (800a1f4 <HAL_ADC_MspInit+0x150>)
 800a0fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0fc:	4a3d      	ldr	r2, [pc, #244]	; (800a1f4 <HAL_ADC_MspInit+0x150>)
 800a0fe:	f043 0301 	orr.w	r3, r3, #1
 800a102:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a104:	4b3b      	ldr	r3, [pc, #236]	; (800a1f4 <HAL_ADC_MspInit+0x150>)
 800a106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a108:	f003 0301 	and.w	r3, r3, #1
 800a10c:	613b      	str	r3, [r7, #16]
 800a10e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a110:	4b38      	ldr	r3, [pc, #224]	; (800a1f4 <HAL_ADC_MspInit+0x150>)
 800a112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a114:	4a37      	ldr	r2, [pc, #220]	; (800a1f4 <HAL_ADC_MspInit+0x150>)
 800a116:	f043 0302 	orr.w	r3, r3, #2
 800a11a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a11c:	4b35      	ldr	r3, [pc, #212]	; (800a1f4 <HAL_ADC_MspInit+0x150>)
 800a11e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a120:	f003 0302 	and.w	r3, r3, #2
 800a124:	60fb      	str	r3, [r7, #12]
 800a126:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = BATT_VOLTAGE_Pin|MOT_CURR_Pin|VBUS_SENSE_Pin|ENC_CHA_Pin;
 800a128:	230f      	movs	r3, #15
 800a12a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a12c:	2303      	movs	r3, #3
 800a12e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a130:	2300      	movs	r3, #0
 800a132:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a134:	f107 031c 	add.w	r3, r7, #28
 800a138:	4619      	mov	r1, r3
 800a13a:	482f      	ldr	r0, [pc, #188]	; (800a1f8 <HAL_ADC_MspInit+0x154>)
 800a13c:	f003 f824 	bl	800d188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISTANCE2_ADC_Pin|DISTANCE1_ADC_Pin|DISTANCE3_ADC_Pin|LV_BATT_Pin;
 800a140:	239c      	movs	r3, #156	; 0x9c
 800a142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a144:	2303      	movs	r3, #3
 800a146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a148:	2300      	movs	r3, #0
 800a14a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a14c:	f107 031c 	add.w	r3, r7, #28
 800a150:	4619      	mov	r1, r3
 800a152:	482a      	ldr	r0, [pc, #168]	; (800a1fc <HAL_ADC_MspInit+0x158>)
 800a154:	f003 f818 	bl	800d188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_CHBB0_Pin|DISTANCE4_ADC_Pin;
 800a158:	2303      	movs	r3, #3
 800a15a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a15c:	2303      	movs	r3, #3
 800a15e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a160:	2300      	movs	r3, #0
 800a162:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a164:	f107 031c 	add.w	r3, r7, #28
 800a168:	4619      	mov	r1, r3
 800a16a:	4825      	ldr	r0, [pc, #148]	; (800a200 <HAL_ADC_MspInit+0x15c>)
 800a16c:	f003 f80c 	bl	800d188 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800a170:	4b24      	ldr	r3, [pc, #144]	; (800a204 <HAL_ADC_MspInit+0x160>)
 800a172:	4a25      	ldr	r2, [pc, #148]	; (800a208 <HAL_ADC_MspInit+0x164>)
 800a174:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800a176:	4b23      	ldr	r3, [pc, #140]	; (800a204 <HAL_ADC_MspInit+0x160>)
 800a178:	2205      	movs	r2, #5
 800a17a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a17c:	4b21      	ldr	r3, [pc, #132]	; (800a204 <HAL_ADC_MspInit+0x160>)
 800a17e:	2200      	movs	r2, #0
 800a180:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800a182:	4b20      	ldr	r3, [pc, #128]	; (800a204 <HAL_ADC_MspInit+0x160>)
 800a184:	2200      	movs	r2, #0
 800a186:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800a188:	4b1e      	ldr	r3, [pc, #120]	; (800a204 <HAL_ADC_MspInit+0x160>)
 800a18a:	2280      	movs	r2, #128	; 0x80
 800a18c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a18e:	4b1d      	ldr	r3, [pc, #116]	; (800a204 <HAL_ADC_MspInit+0x160>)
 800a190:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a194:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a196:	4b1b      	ldr	r3, [pc, #108]	; (800a204 <HAL_ADC_MspInit+0x160>)
 800a198:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a19c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800a19e:	4b19      	ldr	r3, [pc, #100]	; (800a204 <HAL_ADC_MspInit+0x160>)
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800a1a4:	4b17      	ldr	r3, [pc, #92]	; (800a204 <HAL_ADC_MspInit+0x160>)
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800a1aa:	4816      	ldr	r0, [pc, #88]	; (800a204 <HAL_ADC_MspInit+0x160>)
 800a1ac:	f002 fc3e 	bl	800ca2c <HAL_DMA_Init>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d001      	beq.n	800a1ba <HAL_ADC_MspInit+0x116>
    {
      Error_Handler();
 800a1b6:	f7ff ff4b 	bl	800a050 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc1, DMA_CHANNEL_NPRIV) != HAL_OK)
 800a1ba:	2110      	movs	r1, #16
 800a1bc:	4811      	ldr	r0, [pc, #68]	; (800a204 <HAL_ADC_MspInit+0x160>)
 800a1be:	f002 ff13 	bl	800cfe8 <HAL_DMA_ConfigChannelAttributes>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d001      	beq.n	800a1cc <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 800a1c8:	f7ff ff42 	bl	800a050 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	4a0d      	ldr	r2, [pc, #52]	; (800a204 <HAL_ADC_MspInit+0x160>)
 800a1d0:	651a      	str	r2, [r3, #80]	; 0x50
 800a1d2:	4a0c      	ldr	r2, [pc, #48]	; (800a204 <HAL_ADC_MspInit+0x160>)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800a1d8:	2200      	movs	r2, #0
 800a1da:	2105      	movs	r1, #5
 800a1dc:	2025      	movs	r0, #37	; 0x25
 800a1de:	f002 fbfd 	bl	800c9dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800a1e2:	2025      	movs	r0, #37	; 0x25
 800a1e4:	f002 fc14 	bl	800ca10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800a1e8:	bf00      	nop
 800a1ea:	3730      	adds	r7, #48	; 0x30
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	42028000 	.word	0x42028000
 800a1f4:	40021000 	.word	0x40021000
 800a1f8:	42020800 	.word	0x42020800
 800a1fc:	42020000 	.word	0x42020000
 800a200:	42020400 	.word	0x42020400
 800a204:	20000780 	.word	0x20000780
 800a208:	40020008 	.word	0x40020008

0800a20c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b0ae      	sub	sp, #184	; 0xb8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a214:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a218:	2200      	movs	r2, #0
 800a21a:	601a      	str	r2, [r3, #0]
 800a21c:	605a      	str	r2, [r3, #4]
 800a21e:	609a      	str	r2, [r3, #8]
 800a220:	60da      	str	r2, [r3, #12]
 800a222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a224:	f107 0310 	add.w	r3, r7, #16
 800a228:	2294      	movs	r2, #148	; 0x94
 800a22a:	2100      	movs	r1, #0
 800a22c:	4618      	mov	r0, r3
 800a22e:	f00f f872 	bl	8019316 <memset>
  if(hi2c->Instance==I2C1)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4a21      	ldr	r2, [pc, #132]	; (800a2bc <HAL_I2C_MspInit+0xb0>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d13b      	bne.n	800a2b4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800a23c:	2340      	movs	r3, #64	; 0x40
 800a23e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800a240:	2300      	movs	r3, #0
 800a242:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a244:	f107 0310 	add.w	r3, r7, #16
 800a248:	4618      	mov	r0, r3
 800a24a:	f005 f8c1 	bl	800f3d0 <HAL_RCCEx_PeriphCLKConfig>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d001      	beq.n	800a258 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800a254:	f7ff fefc 	bl	800a050 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a258:	4b19      	ldr	r3, [pc, #100]	; (800a2c0 <HAL_I2C_MspInit+0xb4>)
 800a25a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a25c:	4a18      	ldr	r2, [pc, #96]	; (800a2c0 <HAL_I2C_MspInit+0xb4>)
 800a25e:	f043 0302 	orr.w	r3, r3, #2
 800a262:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a264:	4b16      	ldr	r3, [pc, #88]	; (800a2c0 <HAL_I2C_MspInit+0xb4>)
 800a266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a268:	f003 0302 	and.w	r3, r3, #2
 800a26c:	60fb      	str	r3, [r7, #12]
 800a26e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800a270:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a274:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a278:	2312      	movs	r3, #18
 800a27a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a27e:	2300      	movs	r3, #0
 800a280:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a284:	2300      	movs	r3, #0
 800a286:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a28a:	2304      	movs	r3, #4
 800a28c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a290:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a294:	4619      	mov	r1, r3
 800a296:	480b      	ldr	r0, [pc, #44]	; (800a2c4 <HAL_I2C_MspInit+0xb8>)
 800a298:	f002 ff76 	bl	800d188 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a29c:	4b08      	ldr	r3, [pc, #32]	; (800a2c0 <HAL_I2C_MspInit+0xb4>)
 800a29e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2a0:	4a07      	ldr	r2, [pc, #28]	; (800a2c0 <HAL_I2C_MspInit+0xb4>)
 800a2a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a2a6:	6593      	str	r3, [r2, #88]	; 0x58
 800a2a8:	4b05      	ldr	r3, [pc, #20]	; (800a2c0 <HAL_I2C_MspInit+0xb4>)
 800a2aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a2b0:	60bb      	str	r3, [r7, #8]
 800a2b2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800a2b4:	bf00      	nop
 800a2b6:	37b8      	adds	r7, #184	; 0xb8
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	40005400 	.word	0x40005400
 800a2c0:	40021000 	.word	0x40021000
 800a2c4:	42020400 	.word	0x42020400

0800a2c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b0b2      	sub	sp, #200	; 0xc8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a2d0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	601a      	str	r2, [r3, #0]
 800a2d8:	605a      	str	r2, [r3, #4]
 800a2da:	609a      	str	r2, [r3, #8]
 800a2dc:	60da      	str	r2, [r3, #12]
 800a2de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a2e0:	f107 0320 	add.w	r3, r7, #32
 800a2e4:	2294      	movs	r2, #148	; 0x94
 800a2e6:	2100      	movs	r1, #0
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f00f f814 	bl	8019316 <memset>
  if(huart->Instance==LPUART1)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4a67      	ldr	r2, [pc, #412]	; (800a490 <HAL_UART_MspInit+0x1c8>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d13e      	bne.n	800a376 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800a2f8:	2320      	movs	r3, #32
 800a2fa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a300:	f107 0320 	add.w	r3, r7, #32
 800a304:	4618      	mov	r0, r3
 800a306:	f005 f863 	bl	800f3d0 <HAL_RCCEx_PeriphCLKConfig>
 800a30a:	4603      	mov	r3, r0
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d001      	beq.n	800a314 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800a310:	f7ff fe9e 	bl	800a050 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800a314:	4b5f      	ldr	r3, [pc, #380]	; (800a494 <HAL_UART_MspInit+0x1cc>)
 800a316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a318:	4a5e      	ldr	r2, [pc, #376]	; (800a494 <HAL_UART_MspInit+0x1cc>)
 800a31a:	f043 0301 	orr.w	r3, r3, #1
 800a31e:	65d3      	str	r3, [r2, #92]	; 0x5c
 800a320:	4b5c      	ldr	r3, [pc, #368]	; (800a494 <HAL_UART_MspInit+0x1cc>)
 800a322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a324:	f003 0301 	and.w	r3, r3, #1
 800a328:	61fb      	str	r3, [r7, #28]
 800a32a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a32c:	4b59      	ldr	r3, [pc, #356]	; (800a494 <HAL_UART_MspInit+0x1cc>)
 800a32e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a330:	4a58      	ldr	r2, [pc, #352]	; (800a494 <HAL_UART_MspInit+0x1cc>)
 800a332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a336:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a338:	4b56      	ldr	r3, [pc, #344]	; (800a494 <HAL_UART_MspInit+0x1cc>)
 800a33a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a33c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a340:	61bb      	str	r3, [r7, #24]
 800a342:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 800a344:	f004 f824 	bl	800e390 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 800a348:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800a34c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a350:	2302      	movs	r3, #2
 800a352:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a356:	2300      	movs	r3, #0
 800a358:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a35c:	2300      	movs	r3, #0
 800a35e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800a362:	2308      	movs	r3, #8
 800a364:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a368:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800a36c:	4619      	mov	r1, r3
 800a36e:	484a      	ldr	r0, [pc, #296]	; (800a498 <HAL_UART_MspInit+0x1d0>)
 800a370:	f002 ff0a 	bl	800d188 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800a374:	e088      	b.n	800a488 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==UART4)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a48      	ldr	r2, [pc, #288]	; (800a49c <HAL_UART_MspInit+0x1d4>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d143      	bne.n	800a408 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800a380:	2308      	movs	r3, #8
 800a382:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800a384:	2300      	movs	r3, #0
 800a386:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a388:	f107 0320 	add.w	r3, r7, #32
 800a38c:	4618      	mov	r0, r3
 800a38e:	f005 f81f 	bl	800f3d0 <HAL_RCCEx_PeriphCLKConfig>
 800a392:	4603      	mov	r3, r0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d001      	beq.n	800a39c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800a398:	f7ff fe5a 	bl	800a050 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 800a39c:	4b3d      	ldr	r3, [pc, #244]	; (800a494 <HAL_UART_MspInit+0x1cc>)
 800a39e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3a0:	4a3c      	ldr	r2, [pc, #240]	; (800a494 <HAL_UART_MspInit+0x1cc>)
 800a3a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a3a6:	6593      	str	r3, [r2, #88]	; 0x58
 800a3a8:	4b3a      	ldr	r3, [pc, #232]	; (800a494 <HAL_UART_MspInit+0x1cc>)
 800a3aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a3b0:	617b      	str	r3, [r7, #20]
 800a3b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a3b4:	4b37      	ldr	r3, [pc, #220]	; (800a494 <HAL_UART_MspInit+0x1cc>)
 800a3b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3b8:	4a36      	ldr	r2, [pc, #216]	; (800a494 <HAL_UART_MspInit+0x1cc>)
 800a3ba:	f043 0301 	orr.w	r3, r3, #1
 800a3be:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a3c0:	4b34      	ldr	r3, [pc, #208]	; (800a494 <HAL_UART_MspInit+0x1cc>)
 800a3c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3c4:	f003 0301 	and.w	r3, r3, #1
 800a3c8:	613b      	str	r3, [r7, #16]
 800a3ca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800a3cc:	2303      	movs	r3, #3
 800a3ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3d2:	2302      	movs	r3, #2
 800a3d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800a3e4:	2308      	movs	r3, #8
 800a3e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a3ea:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	482b      	ldr	r0, [pc, #172]	; (800a4a0 <HAL_UART_MspInit+0x1d8>)
 800a3f2:	f002 fec9 	bl	800d188 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	2105      	movs	r1, #5
 800a3fa:	2040      	movs	r0, #64	; 0x40
 800a3fc:	f002 faee 	bl	800c9dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800a400:	2040      	movs	r0, #64	; 0x40
 800a402:	f002 fb05 	bl	800ca10 <HAL_NVIC_EnableIRQ>
}
 800a406:	e03f      	b.n	800a488 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART2)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a25      	ldr	r2, [pc, #148]	; (800a4a4 <HAL_UART_MspInit+0x1dc>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d13a      	bne.n	800a488 <HAL_UART_MspInit+0x1c0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800a412:	2302      	movs	r3, #2
 800a414:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a416:	2300      	movs	r3, #0
 800a418:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a41a:	f107 0320 	add.w	r3, r7, #32
 800a41e:	4618      	mov	r0, r3
 800a420:	f004 ffd6 	bl	800f3d0 <HAL_RCCEx_PeriphCLKConfig>
 800a424:	4603      	mov	r3, r0
 800a426:	2b00      	cmp	r3, #0
 800a428:	d001      	beq.n	800a42e <HAL_UART_MspInit+0x166>
      Error_Handler();
 800a42a:	f7ff fe11 	bl	800a050 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a42e:	4b19      	ldr	r3, [pc, #100]	; (800a494 <HAL_UART_MspInit+0x1cc>)
 800a430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a432:	4a18      	ldr	r2, [pc, #96]	; (800a494 <HAL_UART_MspInit+0x1cc>)
 800a434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a438:	6593      	str	r3, [r2, #88]	; 0x58
 800a43a:	4b16      	ldr	r3, [pc, #88]	; (800a494 <HAL_UART_MspInit+0x1cc>)
 800a43c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a43e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a442:	60fb      	str	r3, [r7, #12]
 800a444:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a446:	4b13      	ldr	r3, [pc, #76]	; (800a494 <HAL_UART_MspInit+0x1cc>)
 800a448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a44a:	4a12      	ldr	r2, [pc, #72]	; (800a494 <HAL_UART_MspInit+0x1cc>)
 800a44c:	f043 0308 	orr.w	r3, r3, #8
 800a450:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a452:	4b10      	ldr	r3, [pc, #64]	; (800a494 <HAL_UART_MspInit+0x1cc>)
 800a454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a456:	f003 0308 	and.w	r3, r3, #8
 800a45a:	60bb      	str	r3, [r7, #8]
 800a45c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = XBEE_TX_Pin|XBEE_RX_Pin;
 800a45e:	2360      	movs	r3, #96	; 0x60
 800a460:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a464:	2302      	movs	r3, #2
 800a466:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a46a:	2300      	movs	r3, #0
 800a46c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a470:	2300      	movs	r3, #0
 800a472:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a476:	2307      	movs	r3, #7
 800a478:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a47c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800a480:	4619      	mov	r1, r3
 800a482:	4809      	ldr	r0, [pc, #36]	; (800a4a8 <HAL_UART_MspInit+0x1e0>)
 800a484:	f002 fe80 	bl	800d188 <HAL_GPIO_Init>
}
 800a488:	bf00      	nop
 800a48a:	37c8      	adds	r7, #200	; 0xc8
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	40008000 	.word	0x40008000
 800a494:	40021000 	.word	0x40021000
 800a498:	42021800 	.word	0x42021800
 800a49c:	40004c00 	.word	0x40004c00
 800a4a0:	42020000 	.word	0x42020000
 800a4a4:	40004400 	.word	0x40004400
 800a4a8:	42020c00 	.word	0x42020c00

0800a4ac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b0a8      	sub	sp, #160	; 0xa0
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a4b4:	f107 030c 	add.w	r3, r7, #12
 800a4b8:	2294      	movs	r2, #148	; 0x94
 800a4ba:	2100      	movs	r1, #0
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f00e ff2a 	bl	8019316 <memset>
  if(hrtc->Instance==RTC)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a16      	ldr	r2, [pc, #88]	; (800a520 <HAL_RTC_MspInit+0x74>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d124      	bne.n	800a516 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a4cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a4d0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800a4d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a4da:	f107 030c 	add.w	r3, r7, #12
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f004 ff76 	bl	800f3d0 <HAL_RCCEx_PeriphCLKConfig>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d001      	beq.n	800a4ee <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800a4ea:	f7ff fdb1 	bl	800a050 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800a4ee:	4b0d      	ldr	r3, [pc, #52]	; (800a524 <HAL_RTC_MspInit+0x78>)
 800a4f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4f4:	4a0b      	ldr	r2, [pc, #44]	; (800a524 <HAL_RTC_MspInit+0x78>)
 800a4f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800a4fe:	4b09      	ldr	r3, [pc, #36]	; (800a524 <HAL_RTC_MspInit+0x78>)
 800a500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a502:	4a08      	ldr	r2, [pc, #32]	; (800a524 <HAL_RTC_MspInit+0x78>)
 800a504:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a508:	6593      	str	r3, [r2, #88]	; 0x58
 800a50a:	4b06      	ldr	r3, [pc, #24]	; (800a524 <HAL_RTC_MspInit+0x78>)
 800a50c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a50e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a512:	60bb      	str	r3, [r7, #8]
 800a514:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800a516:	bf00      	nop
 800a518:	37a0      	adds	r7, #160	; 0xa0
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	40002800 	.word	0x40002800
 800a524:	40021000 	.word	0x40021000

0800a528 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b090      	sub	sp, #64	; 0x40
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a530:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a534:	2200      	movs	r2, #0
 800a536:	601a      	str	r2, [r3, #0]
 800a538:	605a      	str	r2, [r3, #4]
 800a53a:	609a      	str	r2, [r3, #8]
 800a53c:	60da      	str	r2, [r3, #12]
 800a53e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a62      	ldr	r2, [pc, #392]	; (800a6d0 <HAL_SPI_MspInit+0x1a8>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d145      	bne.n	800a5d6 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a54a:	4b62      	ldr	r3, [pc, #392]	; (800a6d4 <HAL_SPI_MspInit+0x1ac>)
 800a54c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a54e:	4a61      	ldr	r2, [pc, #388]	; (800a6d4 <HAL_SPI_MspInit+0x1ac>)
 800a550:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a554:	6613      	str	r3, [r2, #96]	; 0x60
 800a556:	4b5f      	ldr	r3, [pc, #380]	; (800a6d4 <HAL_SPI_MspInit+0x1ac>)
 800a558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a55a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a55e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a560:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a562:	4b5c      	ldr	r3, [pc, #368]	; (800a6d4 <HAL_SPI_MspInit+0x1ac>)
 800a564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a566:	4a5b      	ldr	r2, [pc, #364]	; (800a6d4 <HAL_SPI_MspInit+0x1ac>)
 800a568:	f043 0301 	orr.w	r3, r3, #1
 800a56c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a56e:	4b59      	ldr	r3, [pc, #356]	; (800a6d4 <HAL_SPI_MspInit+0x1ac>)
 800a570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a572:	f003 0301 	and.w	r3, r3, #1
 800a576:	627b      	str	r3, [r7, #36]	; 0x24
 800a578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a57a:	4b56      	ldr	r3, [pc, #344]	; (800a6d4 <HAL_SPI_MspInit+0x1ac>)
 800a57c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a57e:	4a55      	ldr	r2, [pc, #340]	; (800a6d4 <HAL_SPI_MspInit+0x1ac>)
 800a580:	f043 0310 	orr.w	r3, r3, #16
 800a584:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a586:	4b53      	ldr	r3, [pc, #332]	; (800a6d4 <HAL_SPI_MspInit+0x1ac>)
 800a588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a58a:	f003 0310 	and.w	r3, r3, #16
 800a58e:	623b      	str	r3, [r7, #32]
 800a590:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_ADC_CLK_Pin|SPI_ADC_MISO_Pin;
 800a592:	2360      	movs	r3, #96	; 0x60
 800a594:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a596:	2302      	movs	r3, #2
 800a598:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a59a:	2300      	movs	r3, #0
 800a59c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a5a2:	2305      	movs	r3, #5
 800a5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	484a      	ldr	r0, [pc, #296]	; (800a6d8 <HAL_SPI_MspInit+0x1b0>)
 800a5ae:	f002 fdeb 	bl	800d188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_ADC_MOSI_Pin;
 800a5b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5b8:	2302      	movs	r3, #2
 800a5ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a5c4:	2305      	movs	r3, #5
 800a5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SPI_ADC_MOSI_GPIO_Port, &GPIO_InitStruct);
 800a5c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	4843      	ldr	r0, [pc, #268]	; (800a6dc <HAL_SPI_MspInit+0x1b4>)
 800a5d0:	f002 fdda 	bl	800d188 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800a5d4:	e078      	b.n	800a6c8 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI2)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a41      	ldr	r2, [pc, #260]	; (800a6e0 <HAL_SPI_MspInit+0x1b8>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d145      	bne.n	800a66c <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800a5e0:	4b3c      	ldr	r3, [pc, #240]	; (800a6d4 <HAL_SPI_MspInit+0x1ac>)
 800a5e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5e4:	4a3b      	ldr	r2, [pc, #236]	; (800a6d4 <HAL_SPI_MspInit+0x1ac>)
 800a5e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a5ea:	6593      	str	r3, [r2, #88]	; 0x58
 800a5ec:	4b39      	ldr	r3, [pc, #228]	; (800a6d4 <HAL_SPI_MspInit+0x1ac>)
 800a5ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5f4:	61fb      	str	r3, [r7, #28]
 800a5f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a5f8:	4b36      	ldr	r3, [pc, #216]	; (800a6d4 <HAL_SPI_MspInit+0x1ac>)
 800a5fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5fc:	4a35      	ldr	r2, [pc, #212]	; (800a6d4 <HAL_SPI_MspInit+0x1ac>)
 800a5fe:	f043 0302 	orr.w	r3, r3, #2
 800a602:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a604:	4b33      	ldr	r3, [pc, #204]	; (800a6d4 <HAL_SPI_MspInit+0x1ac>)
 800a606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a608:	f003 0302 	and.w	r3, r3, #2
 800a60c:	61bb      	str	r3, [r7, #24]
 800a60e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a610:	4b30      	ldr	r3, [pc, #192]	; (800a6d4 <HAL_SPI_MspInit+0x1ac>)
 800a612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a614:	4a2f      	ldr	r2, [pc, #188]	; (800a6d4 <HAL_SPI_MspInit+0x1ac>)
 800a616:	f043 0308 	orr.w	r3, r3, #8
 800a61a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a61c:	4b2d      	ldr	r3, [pc, #180]	; (800a6d4 <HAL_SPI_MspInit+0x1ac>)
 800a61e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a620:	f003 0308 	and.w	r3, r3, #8
 800a624:	617b      	str	r3, [r7, #20]
 800a626:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800a628:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a62c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a62e:	2302      	movs	r3, #2
 800a630:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a632:	2300      	movs	r3, #0
 800a634:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a636:	2300      	movs	r3, #0
 800a638:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a63a:	2305      	movs	r3, #5
 800a63c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a63e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a642:	4619      	mov	r1, r3
 800a644:	4827      	ldr	r0, [pc, #156]	; (800a6e4 <HAL_SPI_MspInit+0x1bc>)
 800a646:	f002 fd9f 	bl	800d188 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800a64a:	2318      	movs	r3, #24
 800a64c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a64e:	2302      	movs	r3, #2
 800a650:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a652:	2300      	movs	r3, #0
 800a654:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a656:	2300      	movs	r3, #0
 800a658:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a65a:	2305      	movs	r3, #5
 800a65c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a65e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a662:	4619      	mov	r1, r3
 800a664:	4820      	ldr	r0, [pc, #128]	; (800a6e8 <HAL_SPI_MspInit+0x1c0>)
 800a666:	f002 fd8f 	bl	800d188 <HAL_GPIO_Init>
}
 800a66a:	e02d      	b.n	800a6c8 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI3)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a1e      	ldr	r2, [pc, #120]	; (800a6ec <HAL_SPI_MspInit+0x1c4>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d128      	bne.n	800a6c8 <HAL_SPI_MspInit+0x1a0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800a676:	4b17      	ldr	r3, [pc, #92]	; (800a6d4 <HAL_SPI_MspInit+0x1ac>)
 800a678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a67a:	4a16      	ldr	r2, [pc, #88]	; (800a6d4 <HAL_SPI_MspInit+0x1ac>)
 800a67c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a680:	6593      	str	r3, [r2, #88]	; 0x58
 800a682:	4b14      	ldr	r3, [pc, #80]	; (800a6d4 <HAL_SPI_MspInit+0x1ac>)
 800a684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a686:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a68a:	613b      	str	r3, [r7, #16]
 800a68c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a68e:	4b11      	ldr	r3, [pc, #68]	; (800a6d4 <HAL_SPI_MspInit+0x1ac>)
 800a690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a692:	4a10      	ldr	r2, [pc, #64]	; (800a6d4 <HAL_SPI_MspInit+0x1ac>)
 800a694:	f043 0304 	orr.w	r3, r3, #4
 800a698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a69a:	4b0e      	ldr	r3, [pc, #56]	; (800a6d4 <HAL_SPI_MspInit+0x1ac>)
 800a69c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a69e:	f003 0304 	and.w	r3, r3, #4
 800a6a2:	60fb      	str	r3, [r7, #12]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800a6a6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a6aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6ac:	2302      	movs	r3, #2
 800a6ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a6b8:	2306      	movs	r3, #6
 800a6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a6bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	480b      	ldr	r0, [pc, #44]	; (800a6f0 <HAL_SPI_MspInit+0x1c8>)
 800a6c4:	f002 fd60 	bl	800d188 <HAL_GPIO_Init>
}
 800a6c8:	bf00      	nop
 800a6ca:	3740      	adds	r7, #64	; 0x40
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	40013000 	.word	0x40013000
 800a6d4:	40021000 	.word	0x40021000
 800a6d8:	42020000 	.word	0x42020000
 800a6dc:	42021000 	.word	0x42021000
 800a6e0:	40003800 	.word	0x40003800
 800a6e4:	42020400 	.word	0x42020400
 800a6e8:	42020c00 	.word	0x42020c00
 800a6ec:	40003c00 	.word	0x40003c00
 800a6f0:	42020800 	.word	0x42020800

0800a6f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b08c      	sub	sp, #48	; 0x30
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6fc:	f107 031c 	add.w	r3, r7, #28
 800a700:	2200      	movs	r2, #0
 800a702:	601a      	str	r2, [r3, #0]
 800a704:	605a      	str	r2, [r3, #4]
 800a706:	609a      	str	r2, [r3, #8]
 800a708:	60da      	str	r2, [r3, #12]
 800a70a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a40      	ldr	r2, [pc, #256]	; (800a814 <HAL_TIM_Base_MspInit+0x120>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d14e      	bne.n	800a7b4 <HAL_TIM_Base_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a716:	4b40      	ldr	r3, [pc, #256]	; (800a818 <HAL_TIM_Base_MspInit+0x124>)
 800a718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a71a:	4a3f      	ldr	r2, [pc, #252]	; (800a818 <HAL_TIM_Base_MspInit+0x124>)
 800a71c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a720:	6613      	str	r3, [r2, #96]	; 0x60
 800a722:	4b3d      	ldr	r3, [pc, #244]	; (800a818 <HAL_TIM_Base_MspInit+0x124>)
 800a724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a726:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a72a:	61bb      	str	r3, [r7, #24]
 800a72c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a72e:	4b3a      	ldr	r3, [pc, #232]	; (800a818 <HAL_TIM_Base_MspInit+0x124>)
 800a730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a732:	4a39      	ldr	r2, [pc, #228]	; (800a818 <HAL_TIM_Base_MspInit+0x124>)
 800a734:	f043 0310 	orr.w	r3, r3, #16
 800a738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a73a:	4b37      	ldr	r3, [pc, #220]	; (800a818 <HAL_TIM_Base_MspInit+0x124>)
 800a73c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a73e:	f003 0310 	and.w	r3, r3, #16
 800a742:	617b      	str	r3, [r7, #20]
 800a744:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a746:	4b34      	ldr	r3, [pc, #208]	; (800a818 <HAL_TIM_Base_MspInit+0x124>)
 800a748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a74a:	4a33      	ldr	r2, [pc, #204]	; (800a818 <HAL_TIM_Base_MspInit+0x124>)
 800a74c:	f043 0301 	orr.w	r3, r3, #1
 800a750:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a752:	4b31      	ldr	r3, [pc, #196]	; (800a818 <HAL_TIM_Base_MspInit+0x124>)
 800a754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a756:	f003 0301 	and.w	r3, r3, #1
 800a75a:	613b      	str	r3, [r7, #16]
 800a75c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = RC_PWM_STEERING_IN_Pin;
 800a75e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a764:	2302      	movs	r3, #2
 800a766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a768:	2300      	movs	r3, #0
 800a76a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a76c:	2300      	movs	r3, #0
 800a76e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800a770:	2301      	movs	r3, #1
 800a772:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_STEERING_IN_GPIO_Port, &GPIO_InitStruct);
 800a774:	f107 031c 	add.w	r3, r7, #28
 800a778:	4619      	mov	r1, r3
 800a77a:	4828      	ldr	r0, [pc, #160]	; (800a81c <HAL_TIM_Base_MspInit+0x128>)
 800a77c:	f002 fd04 	bl	800d188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RC_PWM_STEERING_Pin|RC_PWM_THROTTLE_IN_Pin;
 800a780:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800a784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a786:	2302      	movs	r3, #2
 800a788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a78a:	2300      	movs	r3, #0
 800a78c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a78e:	2300      	movs	r3, #0
 800a790:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800a792:	2301      	movs	r3, #1
 800a794:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a796:	f107 031c 	add.w	r3, r7, #28
 800a79a:	4619      	mov	r1, r3
 800a79c:	4820      	ldr	r0, [pc, #128]	; (800a820 <HAL_TIM_Base_MspInit+0x12c>)
 800a79e:	f002 fcf3 	bl	800d188 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	2105      	movs	r1, #5
 800a7a6:	202c      	movs	r0, #44	; 0x2c
 800a7a8:	f002 f918 	bl	800c9dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800a7ac:	202c      	movs	r0, #44	; 0x2c
 800a7ae:	f002 f92f 	bl	800ca10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800a7b2:	e02a      	b.n	800a80a <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM5)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a1a      	ldr	r2, [pc, #104]	; (800a824 <HAL_TIM_Base_MspInit+0x130>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d10c      	bne.n	800a7d8 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800a7be:	4b16      	ldr	r3, [pc, #88]	; (800a818 <HAL_TIM_Base_MspInit+0x124>)
 800a7c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7c2:	4a15      	ldr	r2, [pc, #84]	; (800a818 <HAL_TIM_Base_MspInit+0x124>)
 800a7c4:	f043 0308 	orr.w	r3, r3, #8
 800a7c8:	6593      	str	r3, [r2, #88]	; 0x58
 800a7ca:	4b13      	ldr	r3, [pc, #76]	; (800a818 <HAL_TIM_Base_MspInit+0x124>)
 800a7cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7ce:	f003 0308 	and.w	r3, r3, #8
 800a7d2:	60fb      	str	r3, [r7, #12]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
}
 800a7d6:	e018      	b.n	800a80a <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM6)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a12      	ldr	r2, [pc, #72]	; (800a828 <HAL_TIM_Base_MspInit+0x134>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d113      	bne.n	800a80a <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800a7e2:	4b0d      	ldr	r3, [pc, #52]	; (800a818 <HAL_TIM_Base_MspInit+0x124>)
 800a7e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7e6:	4a0c      	ldr	r2, [pc, #48]	; (800a818 <HAL_TIM_Base_MspInit+0x124>)
 800a7e8:	f043 0310 	orr.w	r3, r3, #16
 800a7ec:	6593      	str	r3, [r2, #88]	; 0x58
 800a7ee:	4b0a      	ldr	r3, [pc, #40]	; (800a818 <HAL_TIM_Base_MspInit+0x124>)
 800a7f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7f2:	f003 0310 	and.w	r3, r3, #16
 800a7f6:	60bb      	str	r3, [r7, #8]
 800a7f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	2105      	movs	r1, #5
 800a7fe:	2031      	movs	r0, #49	; 0x31
 800a800:	f002 f8ec 	bl	800c9dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800a804:	2031      	movs	r0, #49	; 0x31
 800a806:	f002 f903 	bl	800ca10 <HAL_NVIC_EnableIRQ>
}
 800a80a:	bf00      	nop
 800a80c:	3730      	adds	r7, #48	; 0x30
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	40012c00 	.word	0x40012c00
 800a818:	40021000 	.word	0x40021000
 800a81c:	42021000 	.word	0x42021000
 800a820:	42020000 	.word	0x42020000
 800a824:	40000c00 	.word	0x40000c00
 800a828:	40001000 	.word	0x40001000

0800a82c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b08a      	sub	sp, #40	; 0x28
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a834:	f107 0314 	add.w	r3, r7, #20
 800a838:	2200      	movs	r2, #0
 800a83a:	601a      	str	r2, [r3, #0]
 800a83c:	605a      	str	r2, [r3, #4]
 800a83e:	609a      	str	r2, [r3, #8]
 800a840:	60da      	str	r2, [r3, #12]
 800a842:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a1b      	ldr	r2, [pc, #108]	; (800a8b8 <HAL_TIM_Encoder_MspInit+0x8c>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d12f      	bne.n	800a8ae <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a84e:	4b1b      	ldr	r3, [pc, #108]	; (800a8bc <HAL_TIM_Encoder_MspInit+0x90>)
 800a850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a852:	4a1a      	ldr	r2, [pc, #104]	; (800a8bc <HAL_TIM_Encoder_MspInit+0x90>)
 800a854:	f043 0302 	orr.w	r3, r3, #2
 800a858:	6593      	str	r3, [r2, #88]	; 0x58
 800a85a:	4b18      	ldr	r3, [pc, #96]	; (800a8bc <HAL_TIM_Encoder_MspInit+0x90>)
 800a85c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a85e:	f003 0302 	and.w	r3, r3, #2
 800a862:	613b      	str	r3, [r7, #16]
 800a864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a866:	4b15      	ldr	r3, [pc, #84]	; (800a8bc <HAL_TIM_Encoder_MspInit+0x90>)
 800a868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a86a:	4a14      	ldr	r2, [pc, #80]	; (800a8bc <HAL_TIM_Encoder_MspInit+0x90>)
 800a86c:	f043 0310 	orr.w	r3, r3, #16
 800a870:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a872:	4b12      	ldr	r3, [pc, #72]	; (800a8bc <HAL_TIM_Encoder_MspInit+0x90>)
 800a874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a876:	f003 0310 	and.w	r3, r3, #16
 800a87a:	60fb      	str	r3, [r7, #12]
 800a87c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PE3     ------> TIM3_CH1
    PE4     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CH_A_Pin|ENC_CHB_Pin;
 800a87e:	2318      	movs	r3, #24
 800a880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a882:	2302      	movs	r3, #2
 800a884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a886:	2300      	movs	r3, #0
 800a888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a88a:	2300      	movs	r3, #0
 800a88c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a88e:	2302      	movs	r3, #2
 800a890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a892:	f107 0314 	add.w	r3, r7, #20
 800a896:	4619      	mov	r1, r3
 800a898:	4809      	ldr	r0, [pc, #36]	; (800a8c0 <HAL_TIM_Encoder_MspInit+0x94>)
 800a89a:	f002 fc75 	bl	800d188 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800a89e:	2200      	movs	r2, #0
 800a8a0:	2105      	movs	r1, #5
 800a8a2:	202e      	movs	r0, #46	; 0x2e
 800a8a4:	f002 f89a 	bl	800c9dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800a8a8:	202e      	movs	r0, #46	; 0x2e
 800a8aa:	f002 f8b1 	bl	800ca10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800a8ae:	bf00      	nop
 800a8b0:	3728      	adds	r7, #40	; 0x28
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	40000400 	.word	0x40000400
 800a8bc:	40021000 	.word	0x40021000
 800a8c0:	42021000 	.word	0x42021000

0800a8c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b085      	sub	sp, #20
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a0a      	ldr	r2, [pc, #40]	; (800a8fc <HAL_TIM_PWM_MspInit+0x38>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d10b      	bne.n	800a8ee <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800a8d6:	4b0a      	ldr	r3, [pc, #40]	; (800a900 <HAL_TIM_PWM_MspInit+0x3c>)
 800a8d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8da:	4a09      	ldr	r2, [pc, #36]	; (800a900 <HAL_TIM_PWM_MspInit+0x3c>)
 800a8dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a8e0:	6613      	str	r3, [r2, #96]	; 0x60
 800a8e2:	4b07      	ldr	r3, [pc, #28]	; (800a900 <HAL_TIM_PWM_MspInit+0x3c>)
 800a8e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a8ea:	60fb      	str	r3, [r7, #12]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800a8ee:	bf00      	nop
 800a8f0:	3714      	adds	r7, #20
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr
 800a8fa:	bf00      	nop
 800a8fc:	40013400 	.word	0x40013400
 800a900:	40021000 	.word	0x40021000

0800a904 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b08a      	sub	sp, #40	; 0x28
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a90c:	f107 0314 	add.w	r3, r7, #20
 800a910:	2200      	movs	r2, #0
 800a912:	601a      	str	r2, [r3, #0]
 800a914:	605a      	str	r2, [r3, #4]
 800a916:	609a      	str	r2, [r3, #8]
 800a918:	60da      	str	r2, [r3, #12]
 800a91a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a22      	ldr	r2, [pc, #136]	; (800a9ac <HAL_TIM_MspPostInit+0xa8>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d11d      	bne.n	800a962 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a926:	4b22      	ldr	r3, [pc, #136]	; (800a9b0 <HAL_TIM_MspPostInit+0xac>)
 800a928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a92a:	4a21      	ldr	r2, [pc, #132]	; (800a9b0 <HAL_TIM_MspPostInit+0xac>)
 800a92c:	f043 0320 	orr.w	r3, r3, #32
 800a930:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a932:	4b1f      	ldr	r3, [pc, #124]	; (800a9b0 <HAL_TIM_MspPostInit+0xac>)
 800a934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a936:	f003 0320 	and.w	r3, r3, #32
 800a93a:	613b      	str	r3, [r7, #16]
 800a93c:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PF6     ------> TIM5_CH1
    PF9     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_PWM1_Pin|MOTOR_PWM2_Pin;
 800a93e:	f44f 7310 	mov.w	r3, #576	; 0x240
 800a942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a944:	2302      	movs	r3, #2
 800a946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a948:	2300      	movs	r3, #0
 800a94a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a94c:	2300      	movs	r3, #0
 800a94e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800a950:	2302      	movs	r3, #2
 800a952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a954:	f107 0314 	add.w	r3, r7, #20
 800a958:	4619      	mov	r1, r3
 800a95a:	4816      	ldr	r0, [pc, #88]	; (800a9b4 <HAL_TIM_MspPostInit+0xb0>)
 800a95c:	f002 fc14 	bl	800d188 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800a960:	e020      	b.n	800a9a4 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a14      	ldr	r2, [pc, #80]	; (800a9b8 <HAL_TIM_MspPostInit+0xb4>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d11b      	bne.n	800a9a4 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a96c:	4b10      	ldr	r3, [pc, #64]	; (800a9b0 <HAL_TIM_MspPostInit+0xac>)
 800a96e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a970:	4a0f      	ldr	r2, [pc, #60]	; (800a9b0 <HAL_TIM_MspPostInit+0xac>)
 800a972:	f043 0304 	orr.w	r3, r3, #4
 800a976:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a978:	4b0d      	ldr	r3, [pc, #52]	; (800a9b0 <HAL_TIM_MspPostInit+0xac>)
 800a97a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a97c:	f003 0304 	and.w	r3, r3, #4
 800a980:	60fb      	str	r3, [r7, #12]
 800a982:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800a984:	2340      	movs	r3, #64	; 0x40
 800a986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a988:	2302      	movs	r3, #2
 800a98a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a98c:	2300      	movs	r3, #0
 800a98e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a990:	2300      	movs	r3, #0
 800a992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800a994:	2303      	movs	r3, #3
 800a996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a998:	f107 0314 	add.w	r3, r7, #20
 800a99c:	4619      	mov	r1, r3
 800a99e:	4807      	ldr	r0, [pc, #28]	; (800a9bc <HAL_TIM_MspPostInit+0xb8>)
 800a9a0:	f002 fbf2 	bl	800d188 <HAL_GPIO_Init>
}
 800a9a4:	bf00      	nop
 800a9a6:	3728      	adds	r7, #40	; 0x28
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}
 800a9ac:	40000c00 	.word	0x40000c00
 800a9b0:	40021000 	.word	0x40021000
 800a9b4:	42021400 	.word	0x42021400
 800a9b8:	40013400 	.word	0x40013400
 800a9bc:	42020800 	.word	0x42020800

0800a9c0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b0ae      	sub	sp, #184	; 0xb8
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	601a      	str	r2, [r3, #0]
 800a9d0:	605a      	str	r2, [r3, #4]
 800a9d2:	609a      	str	r2, [r3, #8]
 800a9d4:	60da      	str	r2, [r3, #12]
 800a9d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a9d8:	f107 0310 	add.w	r3, r7, #16
 800a9dc:	2294      	movs	r2, #148	; 0x94
 800a9de:	2100      	movs	r1, #0
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f00e fc98 	bl	8019316 <memset>
  if(hpcd->Instance==USB)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a22      	ldr	r2, [pc, #136]	; (800aa74 <HAL_PCD_MspInit+0xb4>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d13d      	bne.n	800aa6c <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a9f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a9f4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a9fc:	f107 0310 	add.w	r3, r7, #16
 800aa00:	4618      	mov	r0, r3
 800aa02:	f004 fce5 	bl	800f3d0 <HAL_RCCEx_PeriphCLKConfig>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d001      	beq.n	800aa10 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800aa0c:	f7ff fb20 	bl	800a050 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa10:	4b19      	ldr	r3, [pc, #100]	; (800aa78 <HAL_PCD_MspInit+0xb8>)
 800aa12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa14:	4a18      	ldr	r2, [pc, #96]	; (800aa78 <HAL_PCD_MspInit+0xb8>)
 800aa16:	f043 0301 	orr.w	r3, r3, #1
 800aa1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aa1c:	4b16      	ldr	r3, [pc, #88]	; (800aa78 <HAL_PCD_MspInit+0xb8>)
 800aa1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa20:	f003 0301 	and.w	r3, r3, #1
 800aa24:	60fb      	str	r3, [r7, #12]
 800aa26:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800aa28:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800aa2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa30:	2302      	movs	r3, #2
 800aa32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa36:	2300      	movs	r3, #0
 800aa38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800aa42:	230a      	movs	r3, #10
 800aa44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	480b      	ldr	r0, [pc, #44]	; (800aa7c <HAL_PCD_MspInit+0xbc>)
 800aa50:	f002 fb9a 	bl	800d188 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800aa54:	4b08      	ldr	r3, [pc, #32]	; (800aa78 <HAL_PCD_MspInit+0xb8>)
 800aa56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa58:	4a07      	ldr	r2, [pc, #28]	; (800aa78 <HAL_PCD_MspInit+0xb8>)
 800aa5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aa5e:	65d3      	str	r3, [r2, #92]	; 0x5c
 800aa60:	4b05      	ldr	r3, [pc, #20]	; (800aa78 <HAL_PCD_MspInit+0xb8>)
 800aa62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa68:	60bb      	str	r3, [r7, #8]
 800aa6a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800aa6c:	bf00      	nop
 800aa6e:	37b8      	adds	r7, #184	; 0xb8
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	4000d400 	.word	0x4000d400
 800aa78:	40021000 	.word	0x40021000
 800aa7c:	42020000 	.word	0x42020000

0800aa80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b08c      	sub	sp, #48	; 0x30
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800aa90:	2200      	movs	r2, #0
 800aa92:	6879      	ldr	r1, [r7, #4]
 800aa94:	202d      	movs	r0, #45	; 0x2d
 800aa96:	f001 ffa1 	bl	800c9dc <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800aa9a:	202d      	movs	r0, #45	; 0x2d
 800aa9c:	f001 ffb8 	bl	800ca10 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800aaa0:	4b1f      	ldr	r3, [pc, #124]	; (800ab20 <HAL_InitTick+0xa0>)
 800aaa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaa4:	4a1e      	ldr	r2, [pc, #120]	; (800ab20 <HAL_InitTick+0xa0>)
 800aaa6:	f043 0301 	orr.w	r3, r3, #1
 800aaaa:	6593      	str	r3, [r2, #88]	; 0x58
 800aaac:	4b1c      	ldr	r3, [pc, #112]	; (800ab20 <HAL_InitTick+0xa0>)
 800aaae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aab0:	f003 0301 	and.w	r3, r3, #1
 800aab4:	60fb      	str	r3, [r7, #12]
 800aab6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800aab8:	f107 0210 	add.w	r2, r7, #16
 800aabc:	f107 0314 	add.w	r3, r7, #20
 800aac0:	4611      	mov	r1, r2
 800aac2:	4618      	mov	r0, r3
 800aac4:	f004 fb80 	bl	800f1c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800aac8:	f004 fb56 	bl	800f178 <HAL_RCC_GetPCLK1Freq>
 800aacc:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800aace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad0:	4a14      	ldr	r2, [pc, #80]	; (800ab24 <HAL_InitTick+0xa4>)
 800aad2:	fba2 2303 	umull	r2, r3, r2, r3
 800aad6:	0c9b      	lsrs	r3, r3, #18
 800aad8:	3b01      	subs	r3, #1
 800aada:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800aadc:	4b12      	ldr	r3, [pc, #72]	; (800ab28 <HAL_InitTick+0xa8>)
 800aade:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800aae2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800aae4:	4b10      	ldr	r3, [pc, #64]	; (800ab28 <HAL_InitTick+0xa8>)
 800aae6:	f240 32e7 	movw	r2, #999	; 0x3e7
 800aaea:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800aaec:	4a0e      	ldr	r2, [pc, #56]	; (800ab28 <HAL_InitTick+0xa8>)
 800aaee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800aaf2:	4b0d      	ldr	r3, [pc, #52]	; (800ab28 <HAL_InitTick+0xa8>)
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aaf8:	4b0b      	ldr	r3, [pc, #44]	; (800ab28 <HAL_InitTick+0xa8>)
 800aafa:	2200      	movs	r2, #0
 800aafc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800aafe:	480a      	ldr	r0, [pc, #40]	; (800ab28 <HAL_InitTick+0xa8>)
 800ab00:	f006 f9c6 	bl	8010e90 <HAL_TIM_Base_Init>
 800ab04:	4603      	mov	r3, r0
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d104      	bne.n	800ab14 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800ab0a:	4807      	ldr	r0, [pc, #28]	; (800ab28 <HAL_InitTick+0xa8>)
 800ab0c:	f006 fa80 	bl	8011010 <HAL_TIM_Base_Start_IT>
 800ab10:	4603      	mov	r3, r0
 800ab12:	e000      	b.n	800ab16 <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 800ab14:	2301      	movs	r3, #1
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3730      	adds	r7, #48	; 0x30
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	40021000 	.word	0x40021000
 800ab24:	431bde83 	.word	0x431bde83
 800ab28:	20000fbc 	.word	0x20000fbc

0800ab2c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800ab30:	f3bf 8f4f 	dsb	sy
}
 800ab34:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800ab36:	4b06      	ldr	r3, [pc, #24]	; (800ab50 <__NVIC_SystemReset+0x24>)
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800ab3e:	4904      	ldr	r1, [pc, #16]	; (800ab50 <__NVIC_SystemReset+0x24>)
 800ab40:	4b04      	ldr	r3, [pc, #16]	; (800ab54 <__NVIC_SystemReset+0x28>)
 800ab42:	4313      	orrs	r3, r2
 800ab44:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800ab46:	f3bf 8f4f 	dsb	sy
}
 800ab4a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800ab4c:	bf00      	nop
 800ab4e:	e7fd      	b.n	800ab4c <__NVIC_SystemReset+0x20>
 800ab50:	e000ed00 	.word	0xe000ed00
 800ab54:	05fa0004 	.word	0x05fa0004

0800ab58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800ab5c:	e7fe      	b.n	800ab5c <NMI_Handler+0x4>

0800ab5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 800ab62:	f7ff ffe3 	bl	800ab2c <__NVIC_SystemReset>

0800ab66 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ab66:	b480      	push	{r7}
 800ab68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ab6a:	e7fe      	b.n	800ab6a <MemManage_Handler+0x4>

0800ab6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ab70:	e7fe      	b.n	800ab70 <BusFault_Handler+0x4>

0800ab72 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ab72:	b480      	push	{r7}
 800ab74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ab76:	e7fe      	b.n	800ab76 <UsageFault_Handler+0x4>

0800ab78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ab7c:	bf00      	nop
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr
	...

0800ab88 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800ab8c:	4802      	ldr	r0, [pc, #8]	; (800ab98 <DMA1_Channel1_IRQHandler+0x10>)
 800ab8e:	f002 f92b 	bl	800cde8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800ab92:	bf00      	nop
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	20000780 	.word	0x20000780

0800ab9c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800aba0:	4802      	ldr	r0, [pc, #8]	; (800abac <ADC1_2_IRQHandler+0x10>)
 800aba2:	f000 fe2b 	bl	800b7fc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800aba6:	bf00      	nop
 800aba8:	bd80      	pop	{r7, pc}
 800abaa:	bf00      	nop
 800abac:	20000718 	.word	0x20000718

0800abb0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800abb4:	4802      	ldr	r0, [pc, #8]	; (800abc0 <TIM1_CC_IRQHandler+0x10>)
 800abb6:	f006 fed9 	bl	801196c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800abba:	bf00      	nop
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop
 800abc0:	20000d18 	.word	0x20000d18

0800abc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800abc8:	4802      	ldr	r0, [pc, #8]	; (800abd4 <TIM2_IRQHandler+0x10>)
 800abca:	f006 fecf 	bl	801196c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800abce:	bf00      	nop
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	20000fbc 	.word	0x20000fbc

0800abd8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800abdc:	4802      	ldr	r0, [pc, #8]	; (800abe8 <TIM3_IRQHandler+0x10>)
 800abde:	f006 fec5 	bl	801196c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800abe2:	bf00      	nop
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop
 800abe8:	20000d64 	.word	0x20000d64

0800abec <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800abf0:	4802      	ldr	r0, [pc, #8]	; (800abfc <TIM6_IRQHandler+0x10>)
 800abf2:	f006 febb 	bl	801196c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800abf6:	bf00      	nop
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop
 800abfc:	20000dfc 	.word	0x20000dfc

0800ac00 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 29.
  */
void UART4_IRQHandler(void)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800ac04:	4802      	ldr	r0, [pc, #8]	; (800ac10 <UART4_IRQHandler+0x10>)
 800ac06:	f008 fa73 	bl	80130f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800ac0a:	bf00      	nop
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	20000f28 	.word	0x20000f28

0800ac14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800ac14:	b480      	push	{r7}
 800ac16:	af00      	add	r7, sp, #0
  return 1;
 800ac18:	2301      	movs	r3, #1
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr

0800ac24 <_kill>:

int _kill(int pid, int sig)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800ac2e:	f00e fc15 	bl	801945c <__errno>
 800ac32:	4603      	mov	r3, r0
 800ac34:	2216      	movs	r2, #22
 800ac36:	601a      	str	r2, [r3, #0]
  return -1;
 800ac38:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3708      	adds	r7, #8
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <_exit>:

void _exit (int status)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b082      	sub	sp, #8
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800ac4c:	f04f 31ff 	mov.w	r1, #4294967295
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f7ff ffe7 	bl	800ac24 <_kill>
  while (1) {}    /* Make sure we hang here */
 800ac56:	e7fe      	b.n	800ac56 <_exit+0x12>

0800ac58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b086      	sub	sp, #24
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ac64:	2300      	movs	r3, #0
 800ac66:	617b      	str	r3, [r7, #20]
 800ac68:	e00a      	b.n	800ac80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800ac6a:	f3af 8000 	nop.w
 800ac6e:	4601      	mov	r1, r0
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	1c5a      	adds	r2, r3, #1
 800ac74:	60ba      	str	r2, [r7, #8]
 800ac76:	b2ca      	uxtb	r2, r1
 800ac78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	617b      	str	r3, [r7, #20]
 800ac80:	697a      	ldr	r2, [r7, #20]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	429a      	cmp	r2, r3
 800ac86:	dbf0      	blt.n	800ac6a <_read+0x12>
  }

  return len;
 800ac88:	687b      	ldr	r3, [r7, #4]
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3718      	adds	r7, #24
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800ac92:	b580      	push	{r7, lr}
 800ac94:	b086      	sub	sp, #24
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	60f8      	str	r0, [r7, #12]
 800ac9a:	60b9      	str	r1, [r7, #8]
 800ac9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ac9e:	2300      	movs	r3, #0
 800aca0:	617b      	str	r3, [r7, #20]
 800aca2:	e009      	b.n	800acb8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	1c5a      	adds	r2, r3, #1
 800aca8:	60ba      	str	r2, [r7, #8]
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	4618      	mov	r0, r3
 800acae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	3301      	adds	r3, #1
 800acb6:	617b      	str	r3, [r7, #20]
 800acb8:	697a      	ldr	r2, [r7, #20]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	429a      	cmp	r2, r3
 800acbe:	dbf1      	blt.n	800aca4 <_write+0x12>
  }
  return len;
 800acc0:	687b      	ldr	r3, [r7, #4]
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3718      	adds	r7, #24
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}

0800acca <_close>:

int _close(int file)
{
 800acca:	b480      	push	{r7}
 800accc:	b083      	sub	sp, #12
 800acce:	af00      	add	r7, sp, #0
 800acd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800acd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	370c      	adds	r7, #12
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr

0800ace2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800ace2:	b480      	push	{r7}
 800ace4:	b083      	sub	sp, #12
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
 800acea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800acf2:	605a      	str	r2, [r3, #4]
  return 0;
 800acf4:	2300      	movs	r3, #0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	370c      	adds	r7, #12
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr

0800ad02 <_isatty>:

int _isatty(int file)
{
 800ad02:	b480      	push	{r7}
 800ad04:	b083      	sub	sp, #12
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800ad0a:	2301      	movs	r3, #1
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	370c      	adds	r7, #12
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b085      	sub	sp, #20
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	60f8      	str	r0, [r7, #12]
 800ad20:	60b9      	str	r1, [r7, #8]
 800ad22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800ad24:	2300      	movs	r3, #0
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3714      	adds	r7, #20
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr
	...

0800ad34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b086      	sub	sp, #24
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ad3c:	4a14      	ldr	r2, [pc, #80]	; (800ad90 <_sbrk+0x5c>)
 800ad3e:	4b15      	ldr	r3, [pc, #84]	; (800ad94 <_sbrk+0x60>)
 800ad40:	1ad3      	subs	r3, r2, r3
 800ad42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ad48:	4b13      	ldr	r3, [pc, #76]	; (800ad98 <_sbrk+0x64>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d102      	bne.n	800ad56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ad50:	4b11      	ldr	r3, [pc, #68]	; (800ad98 <_sbrk+0x64>)
 800ad52:	4a12      	ldr	r2, [pc, #72]	; (800ad9c <_sbrk+0x68>)
 800ad54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ad56:	4b10      	ldr	r3, [pc, #64]	; (800ad98 <_sbrk+0x64>)
 800ad58:	681a      	ldr	r2, [r3, #0]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	4413      	add	r3, r2
 800ad5e:	693a      	ldr	r2, [r7, #16]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d207      	bcs.n	800ad74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ad64:	f00e fb7a 	bl	801945c <__errno>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	220c      	movs	r2, #12
 800ad6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ad6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad72:	e009      	b.n	800ad88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ad74:	4b08      	ldr	r3, [pc, #32]	; (800ad98 <_sbrk+0x64>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ad7a:	4b07      	ldr	r3, [pc, #28]	; (800ad98 <_sbrk+0x64>)
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	4413      	add	r3, r2
 800ad82:	4a05      	ldr	r2, [pc, #20]	; (800ad98 <_sbrk+0x64>)
 800ad84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ad86:	68fb      	ldr	r3, [r7, #12]
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3718      	adds	r7, #24
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	20030000 	.word	0x20030000
 800ad94:	00000400 	.word	0x00000400
 800ad98:	20001008 	.word	0x20001008
 800ad9c:	20009ea8 	.word	0x20009ea8

0800ada0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800ada0:	b480      	push	{r7}
 800ada2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800ada4:	4b06      	ldr	r3, [pc, #24]	; (800adc0 <SystemInit+0x20>)
 800ada6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adaa:	4a05      	ldr	r2, [pc, #20]	; (800adc0 <SystemInit+0x20>)
 800adac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800adb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800adb4:	bf00      	nop
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr
 800adbe:	bf00      	nop
 800adc0:	e000ed00 	.word	0xe000ed00

0800adc4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b087      	sub	sp, #28
 800adc8:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800adca:	4b4f      	ldr	r3, [pc, #316]	; (800af08 <SystemCoreClockUpdate+0x144>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f003 0308 	and.w	r3, r3, #8
 800add2:	2b00      	cmp	r3, #0
 800add4:	d107      	bne.n	800ade6 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800add6:	4b4c      	ldr	r3, [pc, #304]	; (800af08 <SystemCoreClockUpdate+0x144>)
 800add8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800addc:	0a1b      	lsrs	r3, r3, #8
 800adde:	f003 030f 	and.w	r3, r3, #15
 800ade2:	617b      	str	r3, [r7, #20]
 800ade4:	e005      	b.n	800adf2 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800ade6:	4b48      	ldr	r3, [pc, #288]	; (800af08 <SystemCoreClockUpdate+0x144>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	091b      	lsrs	r3, r3, #4
 800adec:	f003 030f 	and.w	r3, r3, #15
 800adf0:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800adf2:	4a46      	ldr	r2, [pc, #280]	; (800af0c <SystemCoreClockUpdate+0x148>)
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adfa:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800adfc:	4b42      	ldr	r3, [pc, #264]	; (800af08 <SystemCoreClockUpdate+0x144>)
 800adfe:	689b      	ldr	r3, [r3, #8]
 800ae00:	f003 030c 	and.w	r3, r3, #12
 800ae04:	2b0c      	cmp	r3, #12
 800ae06:	d866      	bhi.n	800aed6 <SystemCoreClockUpdate+0x112>
 800ae08:	a201      	add	r2, pc, #4	; (adr r2, 800ae10 <SystemCoreClockUpdate+0x4c>)
 800ae0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae0e:	bf00      	nop
 800ae10:	0800ae45 	.word	0x0800ae45
 800ae14:	0800aed7 	.word	0x0800aed7
 800ae18:	0800aed7 	.word	0x0800aed7
 800ae1c:	0800aed7 	.word	0x0800aed7
 800ae20:	0800ae4d 	.word	0x0800ae4d
 800ae24:	0800aed7 	.word	0x0800aed7
 800ae28:	0800aed7 	.word	0x0800aed7
 800ae2c:	0800aed7 	.word	0x0800aed7
 800ae30:	0800ae55 	.word	0x0800ae55
 800ae34:	0800aed7 	.word	0x0800aed7
 800ae38:	0800aed7 	.word	0x0800aed7
 800ae3c:	0800aed7 	.word	0x0800aed7
 800ae40:	0800ae5d 	.word	0x0800ae5d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800ae44:	4a32      	ldr	r2, [pc, #200]	; (800af10 <SystemCoreClockUpdate+0x14c>)
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	6013      	str	r3, [r2, #0]
      break;
 800ae4a:	e048      	b.n	800aede <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800ae4c:	4b30      	ldr	r3, [pc, #192]	; (800af10 <SystemCoreClockUpdate+0x14c>)
 800ae4e:	4a31      	ldr	r2, [pc, #196]	; (800af14 <SystemCoreClockUpdate+0x150>)
 800ae50:	601a      	str	r2, [r3, #0]
      break;
 800ae52:	e044      	b.n	800aede <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800ae54:	4b2e      	ldr	r3, [pc, #184]	; (800af10 <SystemCoreClockUpdate+0x14c>)
 800ae56:	4a30      	ldr	r2, [pc, #192]	; (800af18 <SystemCoreClockUpdate+0x154>)
 800ae58:	601a      	str	r2, [r3, #0]
      break;
 800ae5a:	e040      	b.n	800aede <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800ae5c:	4b2a      	ldr	r3, [pc, #168]	; (800af08 <SystemCoreClockUpdate+0x144>)
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	f003 0303 	and.w	r3, r3, #3
 800ae64:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800ae66:	4b28      	ldr	r3, [pc, #160]	; (800af08 <SystemCoreClockUpdate+0x144>)
 800ae68:	68db      	ldr	r3, [r3, #12]
 800ae6a:	091b      	lsrs	r3, r3, #4
 800ae6c:	f003 030f 	and.w	r3, r3, #15
 800ae70:	3301      	adds	r3, #1
 800ae72:	60bb      	str	r3, [r7, #8]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2b02      	cmp	r3, #2
 800ae78:	d003      	beq.n	800ae82 <SystemCoreClockUpdate+0xbe>
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2b03      	cmp	r3, #3
 800ae7e:	d006      	beq.n	800ae8e <SystemCoreClockUpdate+0xca>
 800ae80:	e00b      	b.n	800ae9a <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800ae82:	4a24      	ldr	r2, [pc, #144]	; (800af14 <SystemCoreClockUpdate+0x150>)
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae8a:	613b      	str	r3, [r7, #16]
          break;
 800ae8c:	e00b      	b.n	800aea6 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800ae8e:	4a22      	ldr	r2, [pc, #136]	; (800af18 <SystemCoreClockUpdate+0x154>)
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae96:	613b      	str	r3, [r7, #16]
          break;
 800ae98:	e005      	b.n	800aea6 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800ae9a:	697a      	ldr	r2, [r7, #20]
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aea2:	613b      	str	r3, [r7, #16]
          break;
 800aea4:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800aea6:	4b18      	ldr	r3, [pc, #96]	; (800af08 <SystemCoreClockUpdate+0x144>)
 800aea8:	68db      	ldr	r3, [r3, #12]
 800aeaa:	0a1b      	lsrs	r3, r3, #8
 800aeac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	fb02 f303 	mul.w	r3, r2, r3
 800aeb6:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 800aeb8:	4b13      	ldr	r3, [pc, #76]	; (800af08 <SystemCoreClockUpdate+0x144>)
 800aeba:	68db      	ldr	r3, [r3, #12]
 800aebc:	0e5b      	lsrs	r3, r3, #25
 800aebe:	f003 0303 	and.w	r3, r3, #3
 800aec2:	3301      	adds	r3, #1
 800aec4:	005b      	lsls	r3, r3, #1
 800aec6:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 800aec8:	693a      	ldr	r2, [r7, #16]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	fbb2 f3f3 	udiv	r3, r2, r3
 800aed0:	4a0f      	ldr	r2, [pc, #60]	; (800af10 <SystemCoreClockUpdate+0x14c>)
 800aed2:	6013      	str	r3, [r2, #0]
      break;
 800aed4:	e003      	b.n	800aede <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800aed6:	4a0e      	ldr	r2, [pc, #56]	; (800af10 <SystemCoreClockUpdate+0x14c>)
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	6013      	str	r3, [r2, #0]
      break;
 800aedc:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800aede:	4b0a      	ldr	r3, [pc, #40]	; (800af08 <SystemCoreClockUpdate+0x144>)
 800aee0:	689b      	ldr	r3, [r3, #8]
 800aee2:	091b      	lsrs	r3, r3, #4
 800aee4:	f003 030f 	and.w	r3, r3, #15
 800aee8:	4a0c      	ldr	r2, [pc, #48]	; (800af1c <SystemCoreClockUpdate+0x158>)
 800aeea:	5cd3      	ldrb	r3, [r2, r3]
 800aeec:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800aeee:	4b08      	ldr	r3, [pc, #32]	; (800af10 <SystemCoreClockUpdate+0x14c>)
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	fa22 f303 	lsr.w	r3, r2, r3
 800aef8:	4a05      	ldr	r2, [pc, #20]	; (800af10 <SystemCoreClockUpdate+0x14c>)
 800aefa:	6013      	str	r3, [r2, #0]
}
 800aefc:	bf00      	nop
 800aefe:	371c      	adds	r7, #28
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr
 800af08:	40021000 	.word	0x40021000
 800af0c:	0801aaac 	.word	0x0801aaac
 800af10:	20000090 	.word	0x20000090
 800af14:	00f42400 	.word	0x00f42400
 800af18:	007a1200 	.word	0x007a1200
 800af1c:	0801aa94 	.word	0x0801aa94

0800af20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800af20:	f8df d034 	ldr.w	sp, [pc, #52]	; 800af58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800af24:	f7ff ff3c 	bl	800ada0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800af28:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800af2a:	e003      	b.n	800af34 <LoopCopyDataInit>

0800af2c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800af2c:	4b0b      	ldr	r3, [pc, #44]	; (800af5c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800af2e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800af30:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800af32:	3104      	adds	r1, #4

0800af34 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800af34:	480a      	ldr	r0, [pc, #40]	; (800af60 <LoopForever+0xa>)
	ldr	r3, =_edata
 800af36:	4b0b      	ldr	r3, [pc, #44]	; (800af64 <LoopForever+0xe>)
	adds	r2, r0, r1
 800af38:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800af3a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800af3c:	d3f6      	bcc.n	800af2c <CopyDataInit>
	ldr	r2, =_sbss
 800af3e:	4a0a      	ldr	r2, [pc, #40]	; (800af68 <LoopForever+0x12>)
	b	LoopFillZerobss
 800af40:	e002      	b.n	800af48 <LoopFillZerobss>

0800af42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800af42:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800af44:	f842 3b04 	str.w	r3, [r2], #4

0800af48 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800af48:	4b08      	ldr	r3, [pc, #32]	; (800af6c <LoopForever+0x16>)
	cmp	r2, r3
 800af4a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800af4c:	d3f9      	bcc.n	800af42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800af4e:	f00e fa8b 	bl	8019468 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800af52:	f7fe fbab 	bl	80096ac <main>

0800af56 <LoopForever>:

LoopForever:
    b LoopForever
 800af56:	e7fe      	b.n	800af56 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800af58:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 800af5c:	0801b150 	.word	0x0801b150
	ldr	r0, =_sdata
 800af60:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800af64:	200000fc 	.word	0x200000fc
	ldr	r2, =_sbss
 800af68:	20000100 	.word	0x20000100
	ldr	r3, = _ebss
 800af6c:	20009ea8 	.word	0x20009ea8

0800af70 <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800af70:	e7fe      	b.n	800af70 <COMP_IRQHandler>

0800af72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800af72:	b580      	push	{r7, lr}
 800af74:	b082      	sub	sp, #8
 800af76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800af78:	2300      	movs	r3, #0
 800af7a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800af7c:	2004      	movs	r0, #4
 800af7e:	f001 fd22 	bl	800c9c6 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800af82:	f7ff ff1f 	bl	800adc4 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800af86:	2007      	movs	r0, #7
 800af88:	f7ff fd7a 	bl	800aa80 <HAL_InitTick>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d002      	beq.n	800af98 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800af92:	2301      	movs	r3, #1
 800af94:	71fb      	strb	r3, [r7, #7]
 800af96:	e001      	b.n	800af9c <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800af98:	f7ff f85c 	bl	800a054 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800af9c:	79fb      	ldrb	r3, [r7, #7]
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3708      	adds	r7, #8
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
	...

0800afa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800afa8:	b480      	push	{r7}
 800afaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800afac:	4b06      	ldr	r3, [pc, #24]	; (800afc8 <HAL_IncTick+0x20>)
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	461a      	mov	r2, r3
 800afb2:	4b06      	ldr	r3, [pc, #24]	; (800afcc <HAL_IncTick+0x24>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4413      	add	r3, r2
 800afb8:	4a04      	ldr	r2, [pc, #16]	; (800afcc <HAL_IncTick+0x24>)
 800afba:	6013      	str	r3, [r2, #0]
}
 800afbc:	bf00      	nop
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop
 800afc8:	20000098 	.word	0x20000098
 800afcc:	2000100c 	.word	0x2000100c

0800afd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800afd0:	b480      	push	{r7}
 800afd2:	af00      	add	r7, sp, #0
  return uwTick;
 800afd4:	4b03      	ldr	r3, [pc, #12]	; (800afe4 <HAL_GetTick+0x14>)
 800afd6:	681b      	ldr	r3, [r3, #0]
}
 800afd8:	4618      	mov	r0, r3
 800afda:	46bd      	mov	sp, r7
 800afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe0:	4770      	bx	lr
 800afe2:	bf00      	nop
 800afe4:	2000100c 	.word	0x2000100c

0800afe8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800afe8:	b480      	push	{r7}
 800afea:	b083      	sub	sp, #12
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	689b      	ldr	r3, [r3, #8]
 800aff6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	431a      	orrs	r2, r3
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	609a      	str	r2, [r3, #8]
}
 800b002:	bf00      	nop
 800b004:	370c      	adds	r7, #12
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr

0800b00e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800b00e:	b480      	push	{r7}
 800b010:	b083      	sub	sp, #12
 800b012:	af00      	add	r7, sp, #0
 800b014:	6078      	str	r0, [r7, #4]
 800b016:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	689b      	ldr	r3, [r3, #8]
 800b01c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	431a      	orrs	r2, r3
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	609a      	str	r2, [r3, #8]
}
 800b028:	bf00      	nop
 800b02a:	370c      	adds	r7, #12
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr

0800b034 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b034:	b480      	push	{r7}
 800b036:	b083      	sub	sp, #12
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	689b      	ldr	r3, [r3, #8]
 800b040:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800b044:	4618      	mov	r0, r3
 800b046:	370c      	adds	r7, #12
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800b050:	b480      	push	{r7}
 800b052:	b087      	sub	sp, #28
 800b054:	af00      	add	r7, sp, #0
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	60b9      	str	r1, [r7, #8]
 800b05a:	607a      	str	r2, [r7, #4]
 800b05c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	3360      	adds	r3, #96	; 0x60
 800b062:	461a      	mov	r2, r3
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	009b      	lsls	r3, r3, #2
 800b068:	4413      	add	r3, r2
 800b06a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	681a      	ldr	r2, [r3, #0]
 800b070:	4b08      	ldr	r3, [pc, #32]	; (800b094 <LL_ADC_SetOffset+0x44>)
 800b072:	4013      	ands	r3, r2
 800b074:	687a      	ldr	r2, [r7, #4]
 800b076:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800b07a:	683a      	ldr	r2, [r7, #0]
 800b07c:	430a      	orrs	r2, r1
 800b07e:	4313      	orrs	r3, r2
 800b080:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800b088:	bf00      	nop
 800b08a:	371c      	adds	r7, #28
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr
 800b094:	03fff000 	.word	0x03fff000

0800b098 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800b098:	b480      	push	{r7}
 800b09a:	b085      	sub	sp, #20
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	3360      	adds	r3, #96	; 0x60
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	009b      	lsls	r3, r3, #2
 800b0ac:	4413      	add	r3, r2
 800b0ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3714      	adds	r7, #20
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr

0800b0c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b087      	sub	sp, #28
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	3360      	adds	r3, #96	; 0x60
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	009b      	lsls	r3, r3, #2
 800b0da:	4413      	add	r3, r2
 800b0dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	431a      	orrs	r2, r3
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800b0ee:	bf00      	nop
 800b0f0:	371c      	adds	r7, #28
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr

0800b0fa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800b0fa:	b480      	push	{r7}
 800b0fc:	b083      	sub	sp, #12
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
 800b102:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	695b      	ldr	r3, [r3, #20]
 800b108:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	431a      	orrs	r2, r3
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	615a      	str	r2, [r3, #20]
}
 800b114:	bf00      	nop
 800b116:	370c      	adds	r7, #12
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr

0800b120 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800b120:	b480      	push	{r7}
 800b122:	b083      	sub	sp, #12
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b130:	2b00      	cmp	r3, #0
 800b132:	d101      	bne.n	800b138 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800b134:	2301      	movs	r3, #1
 800b136:	e000      	b.n	800b13a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800b138:	2300      	movs	r3, #0
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	370c      	adds	r7, #12
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr

0800b146 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800b146:	b480      	push	{r7}
 800b148:	b087      	sub	sp, #28
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	60f8      	str	r0, [r7, #12]
 800b14e:	60b9      	str	r1, [r7, #8]
 800b150:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	3330      	adds	r3, #48	; 0x30
 800b156:	461a      	mov	r2, r3
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	0a1b      	lsrs	r3, r3, #8
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	f003 030c 	and.w	r3, r3, #12
 800b162:	4413      	add	r3, r2
 800b164:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	681a      	ldr	r2, [r3, #0]
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	f003 031f 	and.w	r3, r3, #31
 800b170:	211f      	movs	r1, #31
 800b172:	fa01 f303 	lsl.w	r3, r1, r3
 800b176:	43db      	mvns	r3, r3
 800b178:	401a      	ands	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	0e9b      	lsrs	r3, r3, #26
 800b17e:	f003 011f 	and.w	r1, r3, #31
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	f003 031f 	and.w	r3, r3, #31
 800b188:	fa01 f303 	lsl.w	r3, r1, r3
 800b18c:	431a      	orrs	r2, r3
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800b192:	bf00      	nop
 800b194:	371c      	adds	r7, #28
 800b196:	46bd      	mov	sp, r7
 800b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19c:	4770      	bx	lr

0800b19e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800b19e:	b480      	push	{r7}
 800b1a0:	b083      	sub	sp, #12
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d101      	bne.n	800b1b6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	e000      	b.n	800b1b8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800b1b6:	2300      	movs	r3, #0
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	370c      	adds	r7, #12
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr

0800b1c4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b087      	sub	sp, #28
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	60f8      	str	r0, [r7, #12]
 800b1cc:	60b9      	str	r1, [r7, #8]
 800b1ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	3314      	adds	r3, #20
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	0e5b      	lsrs	r3, r3, #25
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	f003 0304 	and.w	r3, r3, #4
 800b1e0:	4413      	add	r3, r2
 800b1e2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	0d1b      	lsrs	r3, r3, #20
 800b1ec:	f003 031f 	and.w	r3, r3, #31
 800b1f0:	2107      	movs	r1, #7
 800b1f2:	fa01 f303 	lsl.w	r3, r1, r3
 800b1f6:	43db      	mvns	r3, r3
 800b1f8:	401a      	ands	r2, r3
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	0d1b      	lsrs	r3, r3, #20
 800b1fe:	f003 031f 	and.w	r3, r3, #31
 800b202:	6879      	ldr	r1, [r7, #4]
 800b204:	fa01 f303 	lsl.w	r3, r1, r3
 800b208:	431a      	orrs	r2, r3
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800b20e:	bf00      	nop
 800b210:	371c      	adds	r7, #28
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr
	...

0800b21c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b085      	sub	sp, #20
 800b220:	af00      	add	r7, sp, #0
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	60b9      	str	r1, [r7, #8]
 800b226:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b234:	43db      	mvns	r3, r3
 800b236:	401a      	ands	r2, r3
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f003 0318 	and.w	r3, r3, #24
 800b23e:	4908      	ldr	r1, [pc, #32]	; (800b260 <LL_ADC_SetChannelSingleDiff+0x44>)
 800b240:	40d9      	lsrs	r1, r3
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	400b      	ands	r3, r1
 800b246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b24a:	431a      	orrs	r2, r3
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800b252:	bf00      	nop
 800b254:	3714      	adds	r7, #20
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr
 800b25e:	bf00      	nop
 800b260:	0007ffff 	.word	0x0007ffff

0800b264 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b264:	b480      	push	{r7}
 800b266:	b083      	sub	sp, #12
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	689b      	ldr	r3, [r3, #8]
 800b270:	f003 031f 	and.w	r3, r3, #31
}
 800b274:	4618      	mov	r0, r3
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	689b      	ldr	r3, [r3, #8]
 800b28c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800b290:	4618      	mov	r0, r3
 800b292:	370c      	adds	r7, #12
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr

0800b29c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b083      	sub	sp, #12
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	689b      	ldr	r3, [r3, #8]
 800b2a8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800b2ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	6093      	str	r3, [r2, #8]
}
 800b2b4:	bf00      	nop
 800b2b6:	370c      	adds	r7, #12
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr

0800b2c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b083      	sub	sp, #12
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	689b      	ldr	r3, [r3, #8]
 800b2cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2d4:	d101      	bne.n	800b2da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e000      	b.n	800b2dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	370c      	adds	r7, #12
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800b2f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b2fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800b304:	bf00      	nop
 800b306:	370c      	adds	r7, #12
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr

0800b310 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	689b      	ldr	r3, [r3, #8]
 800b31c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b320:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b324:	d101      	bne.n	800b32a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800b326:	2301      	movs	r3, #1
 800b328:	e000      	b.n	800b32c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800b32a:	2300      	movs	r3, #0
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	370c      	adds	r7, #12
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr

0800b338 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800b338:	b480      	push	{r7}
 800b33a:	b083      	sub	sp, #12
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b348:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b34c:	f043 0201 	orr.w	r2, r3, #1
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800b354:	bf00      	nop
 800b356:	370c      	adds	r7, #12
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr

0800b360 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	f003 0301 	and.w	r3, r3, #1
 800b370:	2b01      	cmp	r3, #1
 800b372:	d101      	bne.n	800b378 <LL_ADC_IsEnabled+0x18>
 800b374:	2301      	movs	r3, #1
 800b376:	e000      	b.n	800b37a <LL_ADC_IsEnabled+0x1a>
 800b378:	2300      	movs	r3, #0
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	370c      	adds	r7, #12
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr

0800b386 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800b386:	b480      	push	{r7}
 800b388:	b083      	sub	sp, #12
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	689b      	ldr	r3, [r3, #8]
 800b392:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b396:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b39a:	f043 0204 	orr.w	r2, r3, #4
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800b3a2:	bf00      	nop
 800b3a4:	370c      	adds	r7, #12
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ac:	4770      	bx	lr

0800b3ae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800b3ae:	b480      	push	{r7}
 800b3b0:	b083      	sub	sp, #12
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	689b      	ldr	r3, [r3, #8]
 800b3ba:	f003 0304 	and.w	r3, r3, #4
 800b3be:	2b04      	cmp	r3, #4
 800b3c0:	d101      	bne.n	800b3c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	e000      	b.n	800b3c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b3c6:	2300      	movs	r3, #0
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	370c      	adds	r7, #12
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr

0800b3d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	f003 0308 	and.w	r3, r3, #8
 800b3e4:	2b08      	cmp	r3, #8
 800b3e6:	d101      	bne.n	800b3ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	e000      	b.n	800b3ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800b3ec:	2300      	movs	r3, #0
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	370c      	adds	r7, #12
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr
	...

0800b3fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b3fc:	b590      	push	{r4, r7, lr}
 800b3fe:	b089      	sub	sp, #36	; 0x24
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b404:	2300      	movs	r3, #0
 800b406:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800b408:	2300      	movs	r3, #0
 800b40a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d101      	bne.n	800b416 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800b412:	2301      	movs	r3, #1
 800b414:	e12e      	b.n	800b674 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	691b      	ldr	r3, [r3, #16]
 800b41a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b420:	2b00      	cmp	r3, #0
 800b422:	d109      	bne.n	800b438 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f7fe fe3d 	bl	800a0a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2200      	movs	r2, #0
 800b42e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2200      	movs	r2, #0
 800b434:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7ff ff3f 	bl	800b2c0 <LL_ADC_IsDeepPowerDownEnabled>
 800b442:	4603      	mov	r3, r0
 800b444:	2b00      	cmp	r3, #0
 800b446:	d004      	beq.n	800b452 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4618      	mov	r0, r3
 800b44e:	f7ff ff25 	bl	800b29c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4618      	mov	r0, r3
 800b458:	f7ff ff5a 	bl	800b310 <LL_ADC_IsInternalRegulatorEnabled>
 800b45c:	4603      	mov	r3, r0
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d115      	bne.n	800b48e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4618      	mov	r0, r3
 800b468:	f7ff ff3e 	bl	800b2e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b46c:	4b83      	ldr	r3, [pc, #524]	; (800b67c <HAL_ADC_Init+0x280>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	099b      	lsrs	r3, r3, #6
 800b472:	4a83      	ldr	r2, [pc, #524]	; (800b680 <HAL_ADC_Init+0x284>)
 800b474:	fba2 2303 	umull	r2, r3, r2, r3
 800b478:	099b      	lsrs	r3, r3, #6
 800b47a:	3301      	adds	r3, #1
 800b47c:	005b      	lsls	r3, r3, #1
 800b47e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800b480:	e002      	b.n	800b488 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	3b01      	subs	r3, #1
 800b486:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d1f9      	bne.n	800b482 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4618      	mov	r0, r3
 800b494:	f7ff ff3c 	bl	800b310 <LL_ADC_IsInternalRegulatorEnabled>
 800b498:	4603      	mov	r3, r0
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d10d      	bne.n	800b4ba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4a2:	f043 0210 	orr.w	r2, r3, #16
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4ae:	f043 0201 	orr.w	r2, r3, #1
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7ff ff75 	bl	800b3ae <LL_ADC_REG_IsConversionOngoing>
 800b4c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4ca:	f003 0310 	and.w	r3, r3, #16
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	f040 80c7 	bne.w	800b662 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	f040 80c3 	bne.w	800b662 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4e0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800b4e4:	f043 0202 	orr.w	r2, r3, #2
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f7ff ff35 	bl	800b360 <LL_ADC_IsEnabled>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d110      	bne.n	800b51e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b4fc:	4861      	ldr	r0, [pc, #388]	; (800b684 <HAL_ADC_Init+0x288>)
 800b4fe:	f7ff ff2f 	bl	800b360 <LL_ADC_IsEnabled>
 800b502:	4604      	mov	r4, r0
 800b504:	4860      	ldr	r0, [pc, #384]	; (800b688 <HAL_ADC_Init+0x28c>)
 800b506:	f7ff ff2b 	bl	800b360 <LL_ADC_IsEnabled>
 800b50a:	4603      	mov	r3, r0
 800b50c:	4323      	orrs	r3, r4
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d105      	bne.n	800b51e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	4619      	mov	r1, r3
 800b518:	485c      	ldr	r0, [pc, #368]	; (800b68c <HAL_ADC_Init+0x290>)
 800b51a:	f7ff fd65 	bl	800afe8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	7e5b      	ldrb	r3, [r3, #25]
 800b522:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b528:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800b52e:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800b534:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b53c:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b53e:	4313      	orrs	r3, r2
 800b540:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d106      	bne.n	800b55a <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b550:	3b01      	subs	r3, #1
 800b552:	045b      	lsls	r3, r3, #17
 800b554:	69ba      	ldr	r2, [r7, #24]
 800b556:	4313      	orrs	r3, r2
 800b558:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d009      	beq.n	800b576 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b566:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b56e:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b570:	69ba      	ldr	r2, [r7, #24]
 800b572:	4313      	orrs	r3, r2
 800b574:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	68da      	ldr	r2, [r3, #12]
 800b57c:	4b44      	ldr	r3, [pc, #272]	; (800b690 <HAL_ADC_Init+0x294>)
 800b57e:	4013      	ands	r3, r2
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	6812      	ldr	r2, [r2, #0]
 800b584:	69b9      	ldr	r1, [r7, #24]
 800b586:	430b      	orrs	r3, r1
 800b588:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4618      	mov	r0, r3
 800b590:	f7ff ff20 	bl	800b3d4 <LL_ADC_INJ_IsConversionOngoing>
 800b594:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d140      	bne.n	800b61e <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d13d      	bne.n	800b61e <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	7e1b      	ldrb	r3, [r3, #24]
 800b5aa:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800b5ac:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b5b4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	68db      	ldr	r3, [r3, #12]
 800b5c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b5c4:	f023 0306 	bic.w	r3, r3, #6
 800b5c8:	687a      	ldr	r2, [r7, #4]
 800b5ca:	6812      	ldr	r2, [r2, #0]
 800b5cc:	69b9      	ldr	r1, [r7, #24]
 800b5ce:	430b      	orrs	r3, r1
 800b5d0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	d118      	bne.n	800b60e <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	691b      	ldr	r3, [r3, #16]
 800b5e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b5e6:	f023 0304 	bic.w	r3, r3, #4
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b5f2:	4311      	orrs	r1, r2
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800b5f8:	4311      	orrs	r1, r2
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b5fe:	430a      	orrs	r2, r1
 800b600:	431a      	orrs	r2, r3
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f042 0201 	orr.w	r2, r2, #1
 800b60a:	611a      	str	r2, [r3, #16]
 800b60c:	e007      	b.n	800b61e <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	691a      	ldr	r2, [r3, #16]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f022 0201 	bic.w	r2, r2, #1
 800b61c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	691b      	ldr	r3, [r3, #16]
 800b622:	2b01      	cmp	r3, #1
 800b624:	d10c      	bne.n	800b640 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b62c:	f023 010f 	bic.w	r1, r3, #15
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	69db      	ldr	r3, [r3, #28]
 800b634:	1e5a      	subs	r2, r3, #1
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	430a      	orrs	r2, r1
 800b63c:	631a      	str	r2, [r3, #48]	; 0x30
 800b63e:	e007      	b.n	800b650 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f022 020f 	bic.w	r2, r2, #15
 800b64e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b654:	f023 0303 	bic.w	r3, r3, #3
 800b658:	f043 0201 	orr.w	r2, r3, #1
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	659a      	str	r2, [r3, #88]	; 0x58
 800b660:	e007      	b.n	800b672 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b666:	f043 0210 	orr.w	r2, r3, #16
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800b66e:	2301      	movs	r3, #1
 800b670:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800b672:	7ffb      	ldrb	r3, [r7, #31]
}
 800b674:	4618      	mov	r0, r3
 800b676:	3724      	adds	r7, #36	; 0x24
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd90      	pop	{r4, r7, pc}
 800b67c:	20000090 	.word	0x20000090
 800b680:	053e2d63 	.word	0x053e2d63
 800b684:	42028000 	.word	0x42028000
 800b688:	42028100 	.word	0x42028100
 800b68c:	42028300 	.word	0x42028300
 800b690:	fff0c007 	.word	0xfff0c007

0800b694 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b086      	sub	sp, #24
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b6a0:	4850      	ldr	r0, [pc, #320]	; (800b7e4 <HAL_ADC_Start_DMA+0x150>)
 800b6a2:	f7ff fddf 	bl	800b264 <LL_ADC_GetMultimode>
 800b6a6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7ff fe7e 	bl	800b3ae <LL_ADC_REG_IsConversionOngoing>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	f040 808e 	bne.w	800b7d6 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d101      	bne.n	800b6c8 <HAL_ADC_Start_DMA+0x34>
 800b6c4:	2302      	movs	r3, #2
 800b6c6:	e089      	b.n	800b7dc <HAL_ADC_Start_DMA+0x148>
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d005      	beq.n	800b6e2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	2b05      	cmp	r3, #5
 800b6da:	d002      	beq.n	800b6e2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	2b09      	cmp	r3, #9
 800b6e0:	d172      	bne.n	800b7c8 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800b6e2:	68f8      	ldr	r0, [r7, #12]
 800b6e4:	f000 feac 	bl	800c440 <ADC_Enable>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800b6ec:	7dfb      	ldrb	r3, [r7, #23]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d165      	bne.n	800b7be <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b6fa:	f023 0301 	bic.w	r3, r3, #1
 800b6fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4a37      	ldr	r2, [pc, #220]	; (800b7e8 <HAL_ADC_Start_DMA+0x154>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d002      	beq.n	800b716 <HAL_ADC_Start_DMA+0x82>
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	e000      	b.n	800b718 <HAL_ADC_Start_DMA+0x84>
 800b716:	4b35      	ldr	r3, [pc, #212]	; (800b7ec <HAL_ADC_Start_DMA+0x158>)
 800b718:	68fa      	ldr	r2, [r7, #12]
 800b71a:	6812      	ldr	r2, [r2, #0]
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d002      	beq.n	800b726 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d105      	bne.n	800b732 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b72a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b736:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d006      	beq.n	800b74c <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b742:	f023 0206 	bic.w	r2, r3, #6
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	65da      	str	r2, [r3, #92]	; 0x5c
 800b74a:	e002      	b.n	800b752 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2200      	movs	r2, #0
 800b750:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b756:	4a26      	ldr	r2, [pc, #152]	; (800b7f0 <HAL_ADC_Start_DMA+0x15c>)
 800b758:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b75e:	4a25      	ldr	r2, [pc, #148]	; (800b7f4 <HAL_ADC_Start_DMA+0x160>)
 800b760:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b766:	4a24      	ldr	r2, [pc, #144]	; (800b7f8 <HAL_ADC_Start_DMA+0x164>)
 800b768:	63da      	str	r2, [r3, #60]	; 0x3c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	221c      	movs	r2, #28
 800b770:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2200      	movs	r2, #0
 800b776:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	685a      	ldr	r2, [r3, #4]
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f042 0210 	orr.w	r2, r2, #16
 800b788:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	68da      	ldr	r2, [r3, #12]
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f042 0201 	orr.w	r2, r2, #1
 800b798:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	3340      	adds	r3, #64	; 0x40
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	68ba      	ldr	r2, [r7, #8]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f001 f9e7 	bl	800cb7c <HAL_DMA_Start_IT>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7ff fde5 	bl	800b386 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800b7bc:	e00d      	b.n	800b7da <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 800b7c6:	e008      	b.n	800b7da <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800b7d4:	e001      	b.n	800b7da <HAL_ADC_Start_DMA+0x146>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800b7d6:	2302      	movs	r3, #2
 800b7d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800b7da:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3718      	adds	r7, #24
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}
 800b7e4:	42028300 	.word	0x42028300
 800b7e8:	42028100 	.word	0x42028100
 800b7ec:	42028000 	.word	0x42028000
 800b7f0:	0800c54d 	.word	0x0800c54d
 800b7f4:	0800c625 	.word	0x0800c625
 800b7f8:	0800c641 	.word	0x0800c641

0800b7fc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b08a      	sub	sp, #40	; 0x28
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800b804:	2300      	movs	r3, #0
 800b806:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	685b      	ldr	r3, [r3, #4]
 800b816:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b818:	4882      	ldr	r0, [pc, #520]	; (800ba24 <HAL_ADC_IRQHandler+0x228>)
 800b81a:	f7ff fd23 	bl	800b264 <LL_ADC_GetMultimode>
 800b81e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800b820:	69fb      	ldr	r3, [r7, #28]
 800b822:	f003 0302 	and.w	r3, r3, #2
 800b826:	2b00      	cmp	r3, #0
 800b828:	d017      	beq.n	800b85a <HAL_ADC_IRQHandler+0x5e>
 800b82a:	69bb      	ldr	r3, [r7, #24]
 800b82c:	f003 0302 	and.w	r3, r3, #2
 800b830:	2b00      	cmp	r3, #0
 800b832:	d012      	beq.n	800b85a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b838:	f003 0310 	and.w	r3, r3, #16
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d105      	bne.n	800b84c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b844:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 ff5f 	bl	800c710 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	2202      	movs	r2, #2
 800b858:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800b85a:	69fb      	ldr	r3, [r7, #28]
 800b85c:	f003 0304 	and.w	r3, r3, #4
 800b860:	2b00      	cmp	r3, #0
 800b862:	d004      	beq.n	800b86e <HAL_ADC_IRQHandler+0x72>
 800b864:	69bb      	ldr	r3, [r7, #24]
 800b866:	f003 0304 	and.w	r3, r3, #4
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d10a      	bne.n	800b884 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800b86e:	69fb      	ldr	r3, [r7, #28]
 800b870:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800b874:	2b00      	cmp	r3, #0
 800b876:	f000 8083 	beq.w	800b980 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800b87a:	69bb      	ldr	r3, [r7, #24]
 800b87c:	f003 0308 	and.w	r3, r3, #8
 800b880:	2b00      	cmp	r3, #0
 800b882:	d07d      	beq.n	800b980 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b888:	f003 0310 	and.w	r3, r3, #16
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d105      	bne.n	800b89c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b894:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f7ff fc3d 	bl	800b120 <LL_ADC_REG_IsTriggerSourceSWStart>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d062      	beq.n	800b972 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4a5d      	ldr	r2, [pc, #372]	; (800ba28 <HAL_ADC_IRQHandler+0x22c>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d002      	beq.n	800b8bc <HAL_ADC_IRQHandler+0xc0>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	e000      	b.n	800b8be <HAL_ADC_IRQHandler+0xc2>
 800b8bc:	4b5b      	ldr	r3, [pc, #364]	; (800ba2c <HAL_ADC_IRQHandler+0x230>)
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	6812      	ldr	r2, [r2, #0]
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d008      	beq.n	800b8d8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d005      	beq.n	800b8d8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	2b05      	cmp	r3, #5
 800b8d0:	d002      	beq.n	800b8d8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	2b09      	cmp	r3, #9
 800b8d6:	d104      	bne.n	800b8e2 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	68db      	ldr	r3, [r3, #12]
 800b8de:	623b      	str	r3, [r7, #32]
 800b8e0:	e00c      	b.n	800b8fc <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4a50      	ldr	r2, [pc, #320]	; (800ba28 <HAL_ADC_IRQHandler+0x22c>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d002      	beq.n	800b8f2 <HAL_ADC_IRQHandler+0xf6>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	e000      	b.n	800b8f4 <HAL_ADC_IRQHandler+0xf8>
 800b8f2:	4b4e      	ldr	r3, [pc, #312]	; (800ba2c <HAL_ADC_IRQHandler+0x230>)
 800b8f4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	68db      	ldr	r3, [r3, #12]
 800b8fa:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800b8fc:	6a3b      	ldr	r3, [r7, #32]
 800b8fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b902:	2b00      	cmp	r3, #0
 800b904:	d135      	bne.n	800b972 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f003 0308 	and.w	r3, r3, #8
 800b910:	2b08      	cmp	r3, #8
 800b912:	d12e      	bne.n	800b972 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4618      	mov	r0, r3
 800b91a:	f7ff fd48 	bl	800b3ae <LL_ADC_REG_IsConversionOngoing>
 800b91e:	4603      	mov	r3, r0
 800b920:	2b00      	cmp	r3, #0
 800b922:	d11a      	bne.n	800b95a <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	685a      	ldr	r2, [r3, #4]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f022 020c 	bic.w	r2, r2, #12
 800b932:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b938:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b944:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d112      	bne.n	800b972 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b950:	f043 0201 	orr.w	r2, r3, #1
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	659a      	str	r2, [r3, #88]	; 0x58
 800b958:	e00b      	b.n	800b972 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b95e:	f043 0210 	orr.w	r2, r3, #16
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b96a:	f043 0201 	orr.w	r2, r3, #1
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f7f6 fb94 	bl	80020a0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	220c      	movs	r2, #12
 800b97e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	f003 0320 	and.w	r3, r3, #32
 800b986:	2b00      	cmp	r3, #0
 800b988:	d004      	beq.n	800b994 <HAL_ADC_IRQHandler+0x198>
 800b98a:	69bb      	ldr	r3, [r7, #24]
 800b98c:	f003 0320 	and.w	r3, r3, #32
 800b990:	2b00      	cmp	r3, #0
 800b992:	d10b      	bne.n	800b9ac <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800b994:	69fb      	ldr	r3, [r7, #28]
 800b996:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	f000 809f 	beq.w	800bade <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800b9a0:	69bb      	ldr	r3, [r7, #24]
 800b9a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	f000 8099 	beq.w	800bade <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9b0:	f003 0310 	and.w	r3, r3, #16
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d105      	bne.n	800b9c4 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9bc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7ff fbe8 	bl	800b19e <LL_ADC_INJ_IsTriggerSourceSWStart>
 800b9ce:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7ff fba3 	bl	800b120 <LL_ADC_REG_IsTriggerSourceSWStart>
 800b9da:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a11      	ldr	r2, [pc, #68]	; (800ba28 <HAL_ADC_IRQHandler+0x22c>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d002      	beq.n	800b9ec <HAL_ADC_IRQHandler+0x1f0>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	e000      	b.n	800b9ee <HAL_ADC_IRQHandler+0x1f2>
 800b9ec:	4b0f      	ldr	r3, [pc, #60]	; (800ba2c <HAL_ADC_IRQHandler+0x230>)
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	6812      	ldr	r2, [r2, #0]
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d008      	beq.n	800ba08 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d005      	beq.n	800ba08 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	2b06      	cmp	r3, #6
 800ba00:	d002      	beq.n	800ba08 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	2b07      	cmp	r3, #7
 800ba06:	d104      	bne.n	800ba12 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	68db      	ldr	r3, [r3, #12]
 800ba0e:	623b      	str	r3, [r7, #32]
 800ba10:	e013      	b.n	800ba3a <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4a04      	ldr	r2, [pc, #16]	; (800ba28 <HAL_ADC_IRQHandler+0x22c>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d009      	beq.n	800ba30 <HAL_ADC_IRQHandler+0x234>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	e007      	b.n	800ba32 <HAL_ADC_IRQHandler+0x236>
 800ba22:	bf00      	nop
 800ba24:	42028300 	.word	0x42028300
 800ba28:	42028100 	.word	0x42028100
 800ba2c:	42028000 	.word	0x42028000
 800ba30:	4b7d      	ldr	r3, [pc, #500]	; (800bc28 <HAL_ADC_IRQHandler+0x42c>)
 800ba32:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	68db      	ldr	r3, [r3, #12]
 800ba38:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d047      	beq.n	800bad0 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800ba40:	6a3b      	ldr	r3, [r7, #32]
 800ba42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d007      	beq.n	800ba5a <HAL_ADC_IRQHandler+0x25e>
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d03f      	beq.n	800bad0 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800ba50:	6a3b      	ldr	r3, [r7, #32]
 800ba52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d13a      	bne.n	800bad0 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba64:	2b40      	cmp	r3, #64	; 0x40
 800ba66:	d133      	bne.n	800bad0 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800ba68:	6a3b      	ldr	r3, [r7, #32]
 800ba6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d12e      	bne.n	800bad0 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	4618      	mov	r0, r3
 800ba78:	f7ff fcac 	bl	800b3d4 <LL_ADC_INJ_IsConversionOngoing>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d11a      	bne.n	800bab8 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	685a      	ldr	r2, [r3, #4]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800ba90:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800baa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d112      	bne.n	800bad0 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800baae:	f043 0201 	orr.w	r2, r3, #1
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	659a      	str	r2, [r3, #88]	; 0x58
 800bab6:	e00b      	b.n	800bad0 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800babc:	f043 0210 	orr.w	r2, r3, #16
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bac8:	f043 0201 	orr.w	r2, r3, #1
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 fdf5 	bl	800c6c0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	2260      	movs	r2, #96	; 0x60
 800badc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800bade:	69fb      	ldr	r3, [r7, #28]
 800bae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d011      	beq.n	800bb0c <HAL_ADC_IRQHandler+0x310>
 800bae8:	69bb      	ldr	r3, [r7, #24]
 800baea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d00c      	beq.n	800bb0c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800baf6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f000 f8a0 	bl	800bc44 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	2280      	movs	r2, #128	; 0x80
 800bb0a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800bb0c:	69fb      	ldr	r3, [r7, #28]
 800bb0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d012      	beq.n	800bb3c <HAL_ADC_IRQHandler+0x340>
 800bb16:	69bb      	ldr	r3, [r7, #24]
 800bb18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d00d      	beq.n	800bb3c <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb24:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 fddb 	bl	800c6e8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bb3a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800bb3c:	69fb      	ldr	r3, [r7, #28]
 800bb3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d012      	beq.n	800bb6c <HAL_ADC_IRQHandler+0x370>
 800bb46:	69bb      	ldr	r3, [r7, #24]
 800bb48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d00d      	beq.n	800bb6c <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb54:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f000 fdcd 	bl	800c6fc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb6a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800bb6c:	69fb      	ldr	r3, [r7, #28]
 800bb6e:	f003 0310 	and.w	r3, r3, #16
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d036      	beq.n	800bbe4 <HAL_ADC_IRQHandler+0x3e8>
 800bb76:	69bb      	ldr	r3, [r7, #24]
 800bb78:	f003 0310 	and.w	r3, r3, #16
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d031      	beq.n	800bbe4 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d102      	bne.n	800bb8e <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	627b      	str	r3, [r7, #36]	; 0x24
 800bb8c:	e014      	b.n	800bbb8 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d008      	beq.n	800bba6 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800bb94:	4825      	ldr	r0, [pc, #148]	; (800bc2c <HAL_ADC_IRQHandler+0x430>)
 800bb96:	f7ff fb73 	bl	800b280 <LL_ADC_GetMultiDMATransfer>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d00b      	beq.n	800bbb8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800bba0:	2301      	movs	r3, #1
 800bba2:	627b      	str	r3, [r7, #36]	; 0x24
 800bba4:	e008      	b.n	800bbb8 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	68db      	ldr	r3, [r3, #12]
 800bbac:	f003 0301 	and.w	r3, r3, #1
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d001      	beq.n	800bbb8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800bbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d10e      	bne.n	800bbdc <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbc2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbce:	f043 0202 	orr.w	r2, r3, #2
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 f83e 	bl	800bc58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	2210      	movs	r2, #16
 800bbe2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800bbe4:	69fb      	ldr	r3, [r7, #28]
 800bbe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d018      	beq.n	800bc20 <HAL_ADC_IRQHandler+0x424>
 800bbee:	69bb      	ldr	r3, [r7, #24]
 800bbf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d013      	beq.n	800bc20 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbfc:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc08:	f043 0208 	orr.w	r2, r3, #8
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bc18:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f000 fd5a 	bl	800c6d4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800bc20:	bf00      	nop
 800bc22:	3728      	adds	r7, #40	; 0x28
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}
 800bc28:	42028000 	.word	0x42028000
 800bc2c:	42028300 	.word	0x42028300

0800bc30 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800bc38:	bf00      	nop
 800bc3a:	370c      	adds	r7, #12
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr

0800bc44 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b083      	sub	sp, #12
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800bc4c:	bf00      	nop
 800bc4e:	370c      	adds	r7, #12
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr

0800bc58 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b083      	sub	sp, #12
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800bc60:	bf00      	nop
 800bc62:	370c      	adds	r7, #12
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800bc6c:	b590      	push	{r4, r7, lr}
 800bc6e:	b0b7      	sub	sp, #220	; 0xdc
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bc76:	2300      	movs	r3, #0
 800bc78:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800bc86:	2b01      	cmp	r3, #1
 800bc88:	d101      	bne.n	800bc8e <HAL_ADC_ConfigChannel+0x22>
 800bc8a:	2302      	movs	r3, #2
 800bc8c:	e3c1      	b.n	800c412 <HAL_ADC_ConfigChannel+0x7a6>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2201      	movs	r2, #1
 800bc92:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f7ff fb87 	bl	800b3ae <LL_ADC_REG_IsConversionOngoing>
 800bca0:	4603      	mov	r3, r0
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	f040 83a6 	bne.w	800c3f4 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6818      	ldr	r0, [r3, #0]
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	6859      	ldr	r1, [r3, #4]
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	f7ff fa46 	bl	800b146 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7ff fb75 	bl	800b3ae <LL_ADC_REG_IsConversionOngoing>
 800bcc4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7ff fb81 	bl	800b3d4 <LL_ADC_INJ_IsConversionOngoing>
 800bcd2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800bcd6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	f040 81c1 	bne.w	800c062 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800bce0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	f040 81bc 	bne.w	800c062 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	689b      	ldr	r3, [r3, #8]
 800bcee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bcf2:	d10f      	bne.n	800bd14 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6818      	ldr	r0, [r3, #0]
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	4619      	mov	r1, r3
 800bd00:	f7ff fa60 	bl	800b1c4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7ff f9f4 	bl	800b0fa <LL_ADC_SetSamplingTimeCommonConfig>
 800bd12:	e00e      	b.n	800bd32 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6818      	ldr	r0, [r3, #0]
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	6819      	ldr	r1, [r3, #0]
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	689b      	ldr	r3, [r3, #8]
 800bd20:	461a      	mov	r2, r3
 800bd22:	f7ff fa4f 	bl	800b1c4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	2100      	movs	r1, #0
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7ff f9e4 	bl	800b0fa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	695a      	ldr	r2, [r3, #20]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	08db      	lsrs	r3, r3, #3
 800bd3e:	f003 0303 	and.w	r3, r3, #3
 800bd42:	005b      	lsls	r3, r3, #1
 800bd44:	fa02 f303 	lsl.w	r3, r2, r3
 800bd48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	691b      	ldr	r3, [r3, #16]
 800bd50:	2b04      	cmp	r3, #4
 800bd52:	d00a      	beq.n	800bd6a <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6818      	ldr	r0, [r3, #0]
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	6919      	ldr	r1, [r3, #16]
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	681a      	ldr	r2, [r3, #0]
 800bd60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd64:	f7ff f974 	bl	800b050 <LL_ADC_SetOffset>
 800bd68:	e17b      	b.n	800c062 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	2100      	movs	r1, #0
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7ff f991 	bl	800b098 <LL_ADC_GetOffsetChannel>
 800bd76:	4603      	mov	r3, r0
 800bd78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d10a      	bne.n	800bd96 <HAL_ADC_ConfigChannel+0x12a>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	2100      	movs	r1, #0
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7ff f986 	bl	800b098 <LL_ADC_GetOffsetChannel>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	0e9b      	lsrs	r3, r3, #26
 800bd90:	f003 021f 	and.w	r2, r3, #31
 800bd94:	e01e      	b.n	800bdd4 <HAL_ADC_ConfigChannel+0x168>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	2100      	movs	r1, #0
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f7ff f97b 	bl	800b098 <LL_ADC_GetOffsetChannel>
 800bda2:	4603      	mov	r3, r0
 800bda4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bda8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bdac:	fa93 f3a3 	rbit	r3, r3
 800bdb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800bdb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bdb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800bdbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d101      	bne.n	800bdc8 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 800bdc4:	2320      	movs	r3, #32
 800bdc6:	e004      	b.n	800bdd2 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 800bdc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bdcc:	fab3 f383 	clz	r3, r3
 800bdd0:	b2db      	uxtb	r3, r3
 800bdd2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d105      	bne.n	800bdec <HAL_ADC_ConfigChannel+0x180>
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	0e9b      	lsrs	r3, r3, #26
 800bde6:	f003 031f 	and.w	r3, r3, #31
 800bdea:	e018      	b.n	800be1e <HAL_ADC_ConfigChannel+0x1b2>
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bdf4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800bdf8:	fa93 f3a3 	rbit	r3, r3
 800bdfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800be00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800be04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800be08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d101      	bne.n	800be14 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 800be10:	2320      	movs	r3, #32
 800be12:	e004      	b.n	800be1e <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 800be14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800be18:	fab3 f383 	clz	r3, r3
 800be1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800be1e:	429a      	cmp	r2, r3
 800be20:	d106      	bne.n	800be30 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	2200      	movs	r2, #0
 800be28:	2100      	movs	r1, #0
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7ff f94a 	bl	800b0c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	2101      	movs	r1, #1
 800be36:	4618      	mov	r0, r3
 800be38:	f7ff f92e 	bl	800b098 <LL_ADC_GetOffsetChannel>
 800be3c:	4603      	mov	r3, r0
 800be3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be42:	2b00      	cmp	r3, #0
 800be44:	d10a      	bne.n	800be5c <HAL_ADC_ConfigChannel+0x1f0>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	2101      	movs	r1, #1
 800be4c:	4618      	mov	r0, r3
 800be4e:	f7ff f923 	bl	800b098 <LL_ADC_GetOffsetChannel>
 800be52:	4603      	mov	r3, r0
 800be54:	0e9b      	lsrs	r3, r3, #26
 800be56:	f003 021f 	and.w	r2, r3, #31
 800be5a:	e01e      	b.n	800be9a <HAL_ADC_ConfigChannel+0x22e>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2101      	movs	r1, #1
 800be62:	4618      	mov	r0, r3
 800be64:	f7ff f918 	bl	800b098 <LL_ADC_GetOffsetChannel>
 800be68:	4603      	mov	r3, r0
 800be6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800be6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800be72:	fa93 f3a3 	rbit	r3, r3
 800be76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800be7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800be7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800be82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800be86:	2b00      	cmp	r3, #0
 800be88:	d101      	bne.n	800be8e <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 800be8a:	2320      	movs	r3, #32
 800be8c:	e004      	b.n	800be98 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 800be8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800be92:	fab3 f383 	clz	r3, r3
 800be96:	b2db      	uxtb	r3, r3
 800be98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d105      	bne.n	800beb2 <HAL_ADC_ConfigChannel+0x246>
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	0e9b      	lsrs	r3, r3, #26
 800beac:	f003 031f 	and.w	r3, r3, #31
 800beb0:	e018      	b.n	800bee4 <HAL_ADC_ConfigChannel+0x278>
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800beba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bebe:	fa93 f3a3 	rbit	r3, r3
 800bec2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800bec6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800beca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800bece:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d101      	bne.n	800beda <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 800bed6:	2320      	movs	r3, #32
 800bed8:	e004      	b.n	800bee4 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 800beda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bede:	fab3 f383 	clz	r3, r3
 800bee2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800bee4:	429a      	cmp	r2, r3
 800bee6:	d106      	bne.n	800bef6 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	2200      	movs	r2, #0
 800beee:	2101      	movs	r1, #1
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7ff f8e7 	bl	800b0c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	2102      	movs	r1, #2
 800befc:	4618      	mov	r0, r3
 800befe:	f7ff f8cb 	bl	800b098 <LL_ADC_GetOffsetChannel>
 800bf02:	4603      	mov	r3, r0
 800bf04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d10a      	bne.n	800bf22 <HAL_ADC_ConfigChannel+0x2b6>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	2102      	movs	r1, #2
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7ff f8c0 	bl	800b098 <LL_ADC_GetOffsetChannel>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	0e9b      	lsrs	r3, r3, #26
 800bf1c:	f003 021f 	and.w	r2, r3, #31
 800bf20:	e01e      	b.n	800bf60 <HAL_ADC_ConfigChannel+0x2f4>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	2102      	movs	r1, #2
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f7ff f8b5 	bl	800b098 <LL_ADC_GetOffsetChannel>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf38:	fa93 f3a3 	rbit	r3, r3
 800bf3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800bf40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bf44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800bf48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d101      	bne.n	800bf54 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 800bf50:	2320      	movs	r3, #32
 800bf52:	e004      	b.n	800bf5e <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 800bf54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf58:	fab3 f383 	clz	r3, r3
 800bf5c:	b2db      	uxtb	r3, r3
 800bf5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d105      	bne.n	800bf78 <HAL_ADC_ConfigChannel+0x30c>
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	0e9b      	lsrs	r3, r3, #26
 800bf72:	f003 031f 	and.w	r3, r3, #31
 800bf76:	e016      	b.n	800bfa6 <HAL_ADC_ConfigChannel+0x33a>
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bf84:	fa93 f3a3 	rbit	r3, r3
 800bf88:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800bf8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bf8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800bf90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d101      	bne.n	800bf9c <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 800bf98:	2320      	movs	r3, #32
 800bf9a:	e004      	b.n	800bfa6 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 800bf9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bfa0:	fab3 f383 	clz	r3, r3
 800bfa4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d106      	bne.n	800bfb8 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	2102      	movs	r1, #2
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7ff f886 	bl	800b0c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	2103      	movs	r1, #3
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7ff f86a 	bl	800b098 <LL_ADC_GetOffsetChannel>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d10a      	bne.n	800bfe4 <HAL_ADC_ConfigChannel+0x378>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	2103      	movs	r1, #3
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f7ff f85f 	bl	800b098 <LL_ADC_GetOffsetChannel>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	0e9b      	lsrs	r3, r3, #26
 800bfde:	f003 021f 	and.w	r2, r3, #31
 800bfe2:	e017      	b.n	800c014 <HAL_ADC_ConfigChannel+0x3a8>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	2103      	movs	r1, #3
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7ff f854 	bl	800b098 <LL_ADC_GetOffsetChannel>
 800bff0:	4603      	mov	r3, r0
 800bff2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bff4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bff6:	fa93 f3a3 	rbit	r3, r3
 800bffa:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800bffc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bffe:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800c000:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c002:	2b00      	cmp	r3, #0
 800c004:	d101      	bne.n	800c00a <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 800c006:	2320      	movs	r3, #32
 800c008:	e003      	b.n	800c012 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 800c00a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c00c:	fab3 f383 	clz	r3, r3
 800c010:	b2db      	uxtb	r3, r3
 800c012:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d105      	bne.n	800c02c <HAL_ADC_ConfigChannel+0x3c0>
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	0e9b      	lsrs	r3, r3, #26
 800c026:	f003 031f 	and.w	r3, r3, #31
 800c02a:	e011      	b.n	800c050 <HAL_ADC_ConfigChannel+0x3e4>
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c032:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c034:	fa93 f3a3 	rbit	r3, r3
 800c038:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800c03a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c03c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800c03e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c040:	2b00      	cmp	r3, #0
 800c042:	d101      	bne.n	800c048 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 800c044:	2320      	movs	r3, #32
 800c046:	e003      	b.n	800c050 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 800c048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c04a:	fab3 f383 	clz	r3, r3
 800c04e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800c050:	429a      	cmp	r2, r3
 800c052:	d106      	bne.n	800c062 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	2200      	movs	r2, #0
 800c05a:	2103      	movs	r1, #3
 800c05c:	4618      	mov	r0, r3
 800c05e:	f7ff f831 	bl	800b0c4 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	4618      	mov	r0, r3
 800c068:	f7ff f97a 	bl	800b360 <LL_ADC_IsEnabled>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	f040 81c9 	bne.w	800c406 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6818      	ldr	r0, [r3, #0]
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	6819      	ldr	r1, [r3, #0]
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	68db      	ldr	r3, [r3, #12]
 800c080:	461a      	mov	r2, r3
 800c082:	f7ff f8cb 	bl	800b21c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	68db      	ldr	r3, [r3, #12]
 800c08a:	4a8f      	ldr	r2, [pc, #572]	; (800c2c8 <HAL_ADC_ConfigChannel+0x65c>)
 800c08c:	4293      	cmp	r3, r2
 800c08e:	f040 8131 	bne.w	800c2f4 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d10b      	bne.n	800c0ba <HAL_ADC_ConfigChannel+0x44e>
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	0e9b      	lsrs	r3, r3, #26
 800c0a8:	3301      	adds	r3, #1
 800c0aa:	f003 031f 	and.w	r3, r3, #31
 800c0ae:	2b09      	cmp	r3, #9
 800c0b0:	bf94      	ite	ls
 800c0b2:	2301      	movls	r3, #1
 800c0b4:	2300      	movhi	r3, #0
 800c0b6:	b2db      	uxtb	r3, r3
 800c0b8:	e019      	b.n	800c0ee <HAL_ADC_ConfigChannel+0x482>
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c0c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0c2:	fa93 f3a3 	rbit	r3, r3
 800c0c6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800c0c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c0ca:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800c0cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d101      	bne.n	800c0d6 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 800c0d2:	2320      	movs	r3, #32
 800c0d4:	e003      	b.n	800c0de <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 800c0d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c0d8:	fab3 f383 	clz	r3, r3
 800c0dc:	b2db      	uxtb	r3, r3
 800c0de:	3301      	adds	r3, #1
 800c0e0:	f003 031f 	and.w	r3, r3, #31
 800c0e4:	2b09      	cmp	r3, #9
 800c0e6:	bf94      	ite	ls
 800c0e8:	2301      	movls	r3, #1
 800c0ea:	2300      	movhi	r3, #0
 800c0ec:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d079      	beq.n	800c1e6 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d107      	bne.n	800c10e <HAL_ADC_ConfigChannel+0x4a2>
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	0e9b      	lsrs	r3, r3, #26
 800c104:	3301      	adds	r3, #1
 800c106:	069b      	lsls	r3, r3, #26
 800c108:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800c10c:	e015      	b.n	800c13a <HAL_ADC_ConfigChannel+0x4ce>
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c116:	fa93 f3a3 	rbit	r3, r3
 800c11a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800c11c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c11e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800c120:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c122:	2b00      	cmp	r3, #0
 800c124:	d101      	bne.n	800c12a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800c126:	2320      	movs	r3, #32
 800c128:	e003      	b.n	800c132 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800c12a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c12c:	fab3 f383 	clz	r3, r3
 800c130:	b2db      	uxtb	r3, r3
 800c132:	3301      	adds	r3, #1
 800c134:	069b      	lsls	r3, r3, #26
 800c136:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c142:	2b00      	cmp	r3, #0
 800c144:	d109      	bne.n	800c15a <HAL_ADC_ConfigChannel+0x4ee>
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	0e9b      	lsrs	r3, r3, #26
 800c14c:	3301      	adds	r3, #1
 800c14e:	f003 031f 	and.w	r3, r3, #31
 800c152:	2101      	movs	r1, #1
 800c154:	fa01 f303 	lsl.w	r3, r1, r3
 800c158:	e017      	b.n	800c18a <HAL_ADC_ConfigChannel+0x51e>
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c162:	fa93 f3a3 	rbit	r3, r3
 800c166:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800c168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c16a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800c16c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d101      	bne.n	800c176 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 800c172:	2320      	movs	r3, #32
 800c174:	e003      	b.n	800c17e <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 800c176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c178:	fab3 f383 	clz	r3, r3
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	3301      	adds	r3, #1
 800c180:	f003 031f 	and.w	r3, r3, #31
 800c184:	2101      	movs	r1, #1
 800c186:	fa01 f303 	lsl.w	r3, r1, r3
 800c18a:	ea42 0103 	orr.w	r1, r2, r3
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c196:	2b00      	cmp	r3, #0
 800c198:	d10a      	bne.n	800c1b0 <HAL_ADC_ConfigChannel+0x544>
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	0e9b      	lsrs	r3, r3, #26
 800c1a0:	3301      	adds	r3, #1
 800c1a2:	f003 021f 	and.w	r2, r3, #31
 800c1a6:	4613      	mov	r3, r2
 800c1a8:	005b      	lsls	r3, r3, #1
 800c1aa:	4413      	add	r3, r2
 800c1ac:	051b      	lsls	r3, r3, #20
 800c1ae:	e018      	b.n	800c1e2 <HAL_ADC_ConfigChannel+0x576>
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b8:	fa93 f3a3 	rbit	r3, r3
 800c1bc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800c1be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800c1c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d101      	bne.n	800c1cc <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 800c1c8:	2320      	movs	r3, #32
 800c1ca:	e003      	b.n	800c1d4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800c1cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1ce:	fab3 f383 	clz	r3, r3
 800c1d2:	b2db      	uxtb	r3, r3
 800c1d4:	3301      	adds	r3, #1
 800c1d6:	f003 021f 	and.w	r2, r3, #31
 800c1da:	4613      	mov	r3, r2
 800c1dc:	005b      	lsls	r3, r3, #1
 800c1de:	4413      	add	r3, r2
 800c1e0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c1e2:	430b      	orrs	r3, r1
 800c1e4:	e081      	b.n	800c2ea <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d107      	bne.n	800c202 <HAL_ADC_ConfigChannel+0x596>
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	0e9b      	lsrs	r3, r3, #26
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	069b      	lsls	r3, r3, #26
 800c1fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800c200:	e015      	b.n	800c22e <HAL_ADC_ConfigChannel+0x5c2>
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c20a:	fa93 f3a3 	rbit	r3, r3
 800c20e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800c210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c212:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800c214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c216:	2b00      	cmp	r3, #0
 800c218:	d101      	bne.n	800c21e <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 800c21a:	2320      	movs	r3, #32
 800c21c:	e003      	b.n	800c226 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 800c21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c220:	fab3 f383 	clz	r3, r3
 800c224:	b2db      	uxtb	r3, r3
 800c226:	3301      	adds	r3, #1
 800c228:	069b      	lsls	r3, r3, #26
 800c22a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c236:	2b00      	cmp	r3, #0
 800c238:	d109      	bne.n	800c24e <HAL_ADC_ConfigChannel+0x5e2>
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	0e9b      	lsrs	r3, r3, #26
 800c240:	3301      	adds	r3, #1
 800c242:	f003 031f 	and.w	r3, r3, #31
 800c246:	2101      	movs	r1, #1
 800c248:	fa01 f303 	lsl.w	r3, r1, r3
 800c24c:	e017      	b.n	800c27e <HAL_ADC_ConfigChannel+0x612>
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c254:	6a3b      	ldr	r3, [r7, #32]
 800c256:	fa93 f3a3 	rbit	r3, r3
 800c25a:	61fb      	str	r3, [r7, #28]
  return result;
 800c25c:	69fb      	ldr	r3, [r7, #28]
 800c25e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800c260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c262:	2b00      	cmp	r3, #0
 800c264:	d101      	bne.n	800c26a <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 800c266:	2320      	movs	r3, #32
 800c268:	e003      	b.n	800c272 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 800c26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26c:	fab3 f383 	clz	r3, r3
 800c270:	b2db      	uxtb	r3, r3
 800c272:	3301      	adds	r3, #1
 800c274:	f003 031f 	and.w	r3, r3, #31
 800c278:	2101      	movs	r1, #1
 800c27a:	fa01 f303 	lsl.w	r3, r1, r3
 800c27e:	ea42 0103 	orr.w	r1, r2, r3
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d10d      	bne.n	800c2aa <HAL_ADC_ConfigChannel+0x63e>
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	0e9b      	lsrs	r3, r3, #26
 800c294:	3301      	adds	r3, #1
 800c296:	f003 021f 	and.w	r2, r3, #31
 800c29a:	4613      	mov	r3, r2
 800c29c:	005b      	lsls	r3, r3, #1
 800c29e:	4413      	add	r3, r2
 800c2a0:	3b1e      	subs	r3, #30
 800c2a2:	051b      	lsls	r3, r3, #20
 800c2a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c2a8:	e01e      	b.n	800c2e8 <HAL_ADC_ConfigChannel+0x67c>
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	fa93 f3a3 	rbit	r3, r3
 800c2b6:	613b      	str	r3, [r7, #16]
  return result;
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c2bc:	69bb      	ldr	r3, [r7, #24]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d104      	bne.n	800c2cc <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 800c2c2:	2320      	movs	r3, #32
 800c2c4:	e006      	b.n	800c2d4 <HAL_ADC_ConfigChannel+0x668>
 800c2c6:	bf00      	nop
 800c2c8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800c2cc:	69bb      	ldr	r3, [r7, #24]
 800c2ce:	fab3 f383 	clz	r3, r3
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	3301      	adds	r3, #1
 800c2d6:	f003 021f 	and.w	r2, r3, #31
 800c2da:	4613      	mov	r3, r2
 800c2dc:	005b      	lsls	r3, r3, #1
 800c2de:	4413      	add	r3, r2
 800c2e0:	3b1e      	subs	r3, #30
 800c2e2:	051b      	lsls	r3, r3, #20
 800c2e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c2e8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800c2ea:	683a      	ldr	r2, [r7, #0]
 800c2ec:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	f7fe ff68 	bl	800b1c4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	681a      	ldr	r2, [r3, #0]
 800c2f8:	4b48      	ldr	r3, [pc, #288]	; (800c41c <HAL_ADC_ConfigChannel+0x7b0>)
 800c2fa:	4013      	ands	r3, r2
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	f000 8082 	beq.w	800c406 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800c302:	4847      	ldr	r0, [pc, #284]	; (800c420 <HAL_ADC_ConfigChannel+0x7b4>)
 800c304:	f7fe fe96 	bl	800b034 <LL_ADC_GetCommonPathInternalCh>
 800c308:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c30c:	4845      	ldr	r0, [pc, #276]	; (800c424 <HAL_ADC_ConfigChannel+0x7b8>)
 800c30e:	f7ff f827 	bl	800b360 <LL_ADC_IsEnabled>
 800c312:	4604      	mov	r4, r0
 800c314:	4844      	ldr	r0, [pc, #272]	; (800c428 <HAL_ADC_ConfigChannel+0x7bc>)
 800c316:	f7ff f823 	bl	800b360 <LL_ADC_IsEnabled>
 800c31a:	4603      	mov	r3, r0
 800c31c:	4323      	orrs	r3, r4
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d15e      	bne.n	800c3e0 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	4a41      	ldr	r2, [pc, #260]	; (800c42c <HAL_ADC_ConfigChannel+0x7c0>)
 800c328:	4293      	cmp	r3, r2
 800c32a:	d127      	bne.n	800c37c <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800c32c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c330:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c334:	2b00      	cmp	r3, #0
 800c336:	d121      	bne.n	800c37c <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4a39      	ldr	r2, [pc, #228]	; (800c424 <HAL_ADC_ConfigChannel+0x7b8>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d161      	bne.n	800c406 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c342:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c346:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c34a:	4619      	mov	r1, r3
 800c34c:	4834      	ldr	r0, [pc, #208]	; (800c420 <HAL_ADC_ConfigChannel+0x7b4>)
 800c34e:	f7fe fe5e 	bl	800b00e <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c352:	4b37      	ldr	r3, [pc, #220]	; (800c430 <HAL_ADC_ConfigChannel+0x7c4>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	099b      	lsrs	r3, r3, #6
 800c358:	4a36      	ldr	r2, [pc, #216]	; (800c434 <HAL_ADC_ConfigChannel+0x7c8>)
 800c35a:	fba2 2303 	umull	r2, r3, r2, r3
 800c35e:	099b      	lsrs	r3, r3, #6
 800c360:	1c5a      	adds	r2, r3, #1
 800c362:	4613      	mov	r3, r2
 800c364:	005b      	lsls	r3, r3, #1
 800c366:	4413      	add	r3, r2
 800c368:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 800c36a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800c36c:	e002      	b.n	800c374 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	3b01      	subs	r3, #1
 800c372:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d1f9      	bne.n	800c36e <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c37a:	e044      	b.n	800c406 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4a2d      	ldr	r2, [pc, #180]	; (800c438 <HAL_ADC_ConfigChannel+0x7cc>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d113      	bne.n	800c3ae <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800c386:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c38a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d10d      	bne.n	800c3ae <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	4a23      	ldr	r2, [pc, #140]	; (800c424 <HAL_ADC_ConfigChannel+0x7b8>)
 800c398:	4293      	cmp	r3, r2
 800c39a:	d134      	bne.n	800c406 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c39c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c3a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c3a4:	4619      	mov	r1, r3
 800c3a6:	481e      	ldr	r0, [pc, #120]	; (800c420 <HAL_ADC_ConfigChannel+0x7b4>)
 800c3a8:	f7fe fe31 	bl	800b00e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c3ac:	e02b      	b.n	800c406 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4a22      	ldr	r2, [pc, #136]	; (800c43c <HAL_ADC_ConfigChannel+0x7d0>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d126      	bne.n	800c406 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800c3b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c3bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d120      	bne.n	800c406 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a16      	ldr	r2, [pc, #88]	; (800c424 <HAL_ADC_ConfigChannel+0x7b8>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d11b      	bne.n	800c406 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c3ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c3d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c3d6:	4619      	mov	r1, r3
 800c3d8:	4811      	ldr	r0, [pc, #68]	; (800c420 <HAL_ADC_ConfigChannel+0x7b4>)
 800c3da:	f7fe fe18 	bl	800b00e <LL_ADC_SetCommonPathInternalCh>
 800c3de:	e012      	b.n	800c406 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3e4:	f043 0220 	orr.w	r2, r3, #32
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800c3f2:	e008      	b.n	800c406 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3f8:	f043 0220 	orr.w	r2, r3, #32
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800c400:	2301      	movs	r3, #1
 800c402:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2200      	movs	r2, #0
 800c40a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800c40e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800c412:	4618      	mov	r0, r3
 800c414:	37dc      	adds	r7, #220	; 0xdc
 800c416:	46bd      	mov	sp, r7
 800c418:	bd90      	pop	{r4, r7, pc}
 800c41a:	bf00      	nop
 800c41c:	80080000 	.word	0x80080000
 800c420:	42028300 	.word	0x42028300
 800c424:	42028000 	.word	0x42028000
 800c428:	42028100 	.word	0x42028100
 800c42c:	c7520000 	.word	0xc7520000
 800c430:	20000090 	.word	0x20000090
 800c434:	053e2d63 	.word	0x053e2d63
 800c438:	cb840000 	.word	0xcb840000
 800c43c:	80000001 	.word	0x80000001

0800c440 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800c448:	2300      	movs	r3, #0
 800c44a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4618      	mov	r0, r3
 800c452:	f7fe ff85 	bl	800b360 <LL_ADC_IsEnabled>
 800c456:	4603      	mov	r3, r0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d169      	bne.n	800c530 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	689a      	ldr	r2, [r3, #8]
 800c462:	4b36      	ldr	r3, [pc, #216]	; (800c53c <ADC_Enable+0xfc>)
 800c464:	4013      	ands	r3, r2
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00d      	beq.n	800c486 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c46e:	f043 0210 	orr.w	r2, r3, #16
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c47a:	f043 0201 	orr.w	r2, r3, #1
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800c482:	2301      	movs	r3, #1
 800c484:	e055      	b.n	800c532 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7fe ff54 	bl	800b338 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800c490:	482b      	ldr	r0, [pc, #172]	; (800c540 <ADC_Enable+0x100>)
 800c492:	f7fe fdcf 	bl	800b034 <LL_ADC_GetCommonPathInternalCh>
 800c496:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800c498:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d013      	beq.n	800c4c8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c4a0:	4b28      	ldr	r3, [pc, #160]	; (800c544 <ADC_Enable+0x104>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	099b      	lsrs	r3, r3, #6
 800c4a6:	4a28      	ldr	r2, [pc, #160]	; (800c548 <ADC_Enable+0x108>)
 800c4a8:	fba2 2303 	umull	r2, r3, r2, r3
 800c4ac:	099b      	lsrs	r3, r3, #6
 800c4ae:	1c5a      	adds	r2, r3, #1
 800c4b0:	4613      	mov	r3, r2
 800c4b2:	005b      	lsls	r3, r3, #1
 800c4b4:	4413      	add	r3, r2
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800c4ba:	e002      	b.n	800c4c2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	3b01      	subs	r3, #1
 800c4c0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d1f9      	bne.n	800c4bc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800c4c8:	f7fe fd82 	bl	800afd0 <HAL_GetTick>
 800c4cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c4ce:	e028      	b.n	800c522 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f7fe ff43 	bl	800b360 <LL_ADC_IsEnabled>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d104      	bne.n	800c4ea <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f7fe ff27 	bl	800b338 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800c4ea:	f7fe fd71 	bl	800afd0 <HAL_GetTick>
 800c4ee:	4602      	mov	r2, r0
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	1ad3      	subs	r3, r2, r3
 800c4f4:	2b02      	cmp	r3, #2
 800c4f6:	d914      	bls.n	800c522 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f003 0301 	and.w	r3, r3, #1
 800c502:	2b01      	cmp	r3, #1
 800c504:	d00d      	beq.n	800c522 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c50a:	f043 0210 	orr.w	r2, r3, #16
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c516:	f043 0201 	orr.w	r2, r3, #1
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800c51e:	2301      	movs	r3, #1
 800c520:	e007      	b.n	800c532 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f003 0301 	and.w	r3, r3, #1
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	d1cf      	bne.n	800c4d0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c530:	2300      	movs	r3, #0
}
 800c532:	4618      	mov	r0, r3
 800c534:	3710      	adds	r7, #16
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	8000003f 	.word	0x8000003f
 800c540:	42028300 	.word	0x42028300
 800c544:	20000090 	.word	0x20000090
 800c548:	053e2d63 	.word	0x053e2d63

0800c54c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b084      	sub	sp, #16
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c558:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c55e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c562:	2b00      	cmp	r3, #0
 800c564:	d14b      	bne.n	800c5fe <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c56a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f003 0308 	and.w	r3, r3, #8
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d021      	beq.n	800c5c4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	4618      	mov	r0, r3
 800c586:	f7fe fdcb 	bl	800b120 <LL_ADC_REG_IsTriggerSourceSWStart>
 800c58a:	4603      	mov	r3, r0
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d032      	beq.n	800c5f6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	68db      	ldr	r3, [r3, #12]
 800c596:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d12b      	bne.n	800c5f6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d11f      	bne.n	800c5f6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5ba:	f043 0201 	orr.w	r2, r3, #1
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	659a      	str	r2, [r3, #88]	; 0x58
 800c5c2:	e018      	b.n	800c5f6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	68db      	ldr	r3, [r3, #12]
 800c5ca:	f003 0302 	and.w	r3, r3, #2
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d111      	bne.n	800c5f6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d105      	bne.n	800c5f6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5ee:	f043 0201 	orr.w	r2, r3, #1
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800c5f6:	68f8      	ldr	r0, [r7, #12]
 800c5f8:	f7f5 fd52 	bl	80020a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800c5fc:	e00e      	b.n	800c61c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c602:	f003 0310 	and.w	r3, r3, #16
 800c606:	2b00      	cmp	r3, #0
 800c608:	d003      	beq.n	800c612 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800c60a:	68f8      	ldr	r0, [r7, #12]
 800c60c:	f7ff fb24 	bl	800bc58 <HAL_ADC_ErrorCallback>
}
 800c610:	e004      	b.n	800c61c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	4798      	blx	r3
}
 800c61c:	bf00      	nop
 800c61e:	3710      	adds	r7, #16
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b084      	sub	sp, #16
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c630:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800c632:	68f8      	ldr	r0, [r7, #12]
 800c634:	f7ff fafc 	bl	800bc30 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c638:	bf00      	nop
 800c63a:	3710      	adds	r7, #16
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b084      	sub	sp, #16
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c64c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c652:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c65e:	f043 0204 	orr.w	r2, r3, #4
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800c666:	68f8      	ldr	r0, [r7, #12]
 800c668:	f7ff faf6 	bl	800bc58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c66c:	bf00      	nop
 800c66e:	3710      	adds	r7, #16
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}

0800c674 <LL_ADC_IsEnabled>:
{
 800c674:	b480      	push	{r7}
 800c676:	b083      	sub	sp, #12
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	689b      	ldr	r3, [r3, #8]
 800c680:	f003 0301 	and.w	r3, r3, #1
 800c684:	2b01      	cmp	r3, #1
 800c686:	d101      	bne.n	800c68c <LL_ADC_IsEnabled+0x18>
 800c688:	2301      	movs	r3, #1
 800c68a:	e000      	b.n	800c68e <LL_ADC_IsEnabled+0x1a>
 800c68c:	2300      	movs	r3, #0
}
 800c68e:	4618      	mov	r0, r3
 800c690:	370c      	adds	r7, #12
 800c692:	46bd      	mov	sp, r7
 800c694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c698:	4770      	bx	lr

0800c69a <LL_ADC_REG_IsConversionOngoing>:
{
 800c69a:	b480      	push	{r7}
 800c69c:	b083      	sub	sp, #12
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	689b      	ldr	r3, [r3, #8]
 800c6a6:	f003 0304 	and.w	r3, r3, #4
 800c6aa:	2b04      	cmp	r3, #4
 800c6ac:	d101      	bne.n	800c6b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	e000      	b.n	800c6b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800c6b2:	2300      	movs	r3, #0
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	370c      	adds	r7, #12
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6be:	4770      	bx	lr

0800c6c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b083      	sub	sp, #12
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800c6c8:	bf00      	nop
 800c6ca:	370c      	adds	r7, #12
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d2:	4770      	bx	lr

0800c6d4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b083      	sub	sp, #12
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800c6dc:	bf00      	nop
 800c6de:	370c      	adds	r7, #12
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr

0800c6e8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b083      	sub	sp, #12
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800c6f0:	bf00      	nop
 800c6f2:	370c      	adds	r7, #12
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr

0800c6fc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b083      	sub	sp, #12
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800c704:	bf00      	nop
 800c706:	370c      	adds	r7, #12
 800c708:	46bd      	mov	sp, r7
 800c70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70e:	4770      	bx	lr

0800c710 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800c710:	b480      	push	{r7}
 800c712:	b083      	sub	sp, #12
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800c718:	bf00      	nop
 800c71a:	370c      	adds	r7, #12
 800c71c:	46bd      	mov	sp, r7
 800c71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c722:	4770      	bx	lr

0800c724 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800c724:	b590      	push	{r4, r7, lr}
 800c726:	b0a1      	sub	sp, #132	; 0x84
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c72e:	2300      	movs	r3, #0
 800c730:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800c73a:	2b01      	cmp	r3, #1
 800c73c:	d101      	bne.n	800c742 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800c73e:	2302      	movs	r3, #2
 800c740:	e089      	b.n	800c856 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2201      	movs	r2, #1
 800c746:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800c74a:	2300      	movs	r3, #0
 800c74c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800c74e:	2300      	movs	r3, #0
 800c750:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4a42      	ldr	r2, [pc, #264]	; (800c860 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800c758:	4293      	cmp	r3, r2
 800c75a:	d102      	bne.n	800c762 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800c75c:	4b41      	ldr	r3, [pc, #260]	; (800c864 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800c75e:	60fb      	str	r3, [r7, #12]
 800c760:	e001      	b.n	800c766 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800c762:	2300      	movs	r3, #0
 800c764:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d10b      	bne.n	800c784 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c770:	f043 0220 	orr.w	r2, r3, #32
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2200      	movs	r2, #0
 800c77c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 800c780:	2301      	movs	r3, #1
 800c782:	e068      	b.n	800c856 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	4618      	mov	r0, r3
 800c788:	f7ff ff87 	bl	800c69a <LL_ADC_REG_IsConversionOngoing>
 800c78c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	4618      	mov	r0, r3
 800c794:	f7ff ff81 	bl	800c69a <LL_ADC_REG_IsConversionOngoing>
 800c798:	4603      	mov	r3, r0
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d14a      	bne.n	800c834 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800c79e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d147      	bne.n	800c834 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800c7a4:	4b30      	ldr	r3, [pc, #192]	; (800c868 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800c7a6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d027      	beq.n	800c800 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800c7b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c7b2:	689b      	ldr	r3, [r3, #8]
 800c7b4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	6859      	ldr	r1, [r3, #4]
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c7c2:	035b      	lsls	r3, r3, #13
 800c7c4:	430b      	orrs	r3, r1
 800c7c6:	431a      	orrs	r2, r3
 800c7c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c7ca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c7cc:	4824      	ldr	r0, [pc, #144]	; (800c860 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800c7ce:	f7ff ff51 	bl	800c674 <LL_ADC_IsEnabled>
 800c7d2:	4604      	mov	r4, r0
 800c7d4:	4823      	ldr	r0, [pc, #140]	; (800c864 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800c7d6:	f7ff ff4d 	bl	800c674 <LL_ADC_IsEnabled>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	4323      	orrs	r3, r4
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d132      	bne.n	800c848 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800c7e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c7e4:	689b      	ldr	r3, [r3, #8]
 800c7e6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800c7ea:	f023 030f 	bic.w	r3, r3, #15
 800c7ee:	683a      	ldr	r2, [r7, #0]
 800c7f0:	6811      	ldr	r1, [r2, #0]
 800c7f2:	683a      	ldr	r2, [r7, #0]
 800c7f4:	6892      	ldr	r2, [r2, #8]
 800c7f6:	430a      	orrs	r2, r1
 800c7f8:	431a      	orrs	r2, r3
 800c7fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c7fc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c7fe:	e023      	b.n	800c848 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800c800:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c802:	689b      	ldr	r3, [r3, #8]
 800c804:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c808:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c80a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c80c:	4814      	ldr	r0, [pc, #80]	; (800c860 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800c80e:	f7ff ff31 	bl	800c674 <LL_ADC_IsEnabled>
 800c812:	4604      	mov	r4, r0
 800c814:	4813      	ldr	r0, [pc, #76]	; (800c864 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800c816:	f7ff ff2d 	bl	800c674 <LL_ADC_IsEnabled>
 800c81a:	4603      	mov	r3, r0
 800c81c:	4323      	orrs	r3, r4
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d112      	bne.n	800c848 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800c822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c824:	689b      	ldr	r3, [r3, #8]
 800c826:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800c82a:	f023 030f 	bic.w	r3, r3, #15
 800c82e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c830:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c832:	e009      	b.n	800c848 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c838:	f043 0220 	orr.w	r2, r3, #32
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800c840:	2301      	movs	r3, #1
 800c842:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800c846:	e000      	b.n	800c84a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c848:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2200      	movs	r2, #0
 800c84e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800c852:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800c856:	4618      	mov	r0, r3
 800c858:	3784      	adds	r7, #132	; 0x84
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd90      	pop	{r4, r7, pc}
 800c85e:	bf00      	nop
 800c860:	42028000 	.word	0x42028000
 800c864:	42028100 	.word	0x42028100
 800c868:	42028300 	.word	0x42028300

0800c86c <__NVIC_SetPriorityGrouping>:
{
 800c86c:	b480      	push	{r7}
 800c86e:	b085      	sub	sp, #20
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f003 0307 	and.w	r3, r3, #7
 800c87a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c87c:	4b0c      	ldr	r3, [pc, #48]	; (800c8b0 <__NVIC_SetPriorityGrouping+0x44>)
 800c87e:	68db      	ldr	r3, [r3, #12]
 800c880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c882:	68ba      	ldr	r2, [r7, #8]
 800c884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c888:	4013      	ands	r3, r2
 800c88a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c894:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c89c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c89e:	4a04      	ldr	r2, [pc, #16]	; (800c8b0 <__NVIC_SetPriorityGrouping+0x44>)
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	60d3      	str	r3, [r2, #12]
}
 800c8a4:	bf00      	nop
 800c8a6:	3714      	adds	r7, #20
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ae:	4770      	bx	lr
 800c8b0:	e000ed00 	.word	0xe000ed00

0800c8b4 <__NVIC_GetPriorityGrouping>:
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c8b8:	4b04      	ldr	r3, [pc, #16]	; (800c8cc <__NVIC_GetPriorityGrouping+0x18>)
 800c8ba:	68db      	ldr	r3, [r3, #12]
 800c8bc:	0a1b      	lsrs	r3, r3, #8
 800c8be:	f003 0307 	and.w	r3, r3, #7
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr
 800c8cc:	e000ed00 	.word	0xe000ed00

0800c8d0 <__NVIC_EnableIRQ>:
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b083      	sub	sp, #12
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c8da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	db0b      	blt.n	800c8fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c8e2:	79fb      	ldrb	r3, [r7, #7]
 800c8e4:	f003 021f 	and.w	r2, r3, #31
 800c8e8:	4907      	ldr	r1, [pc, #28]	; (800c908 <__NVIC_EnableIRQ+0x38>)
 800c8ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c8ee:	095b      	lsrs	r3, r3, #5
 800c8f0:	2001      	movs	r0, #1
 800c8f2:	fa00 f202 	lsl.w	r2, r0, r2
 800c8f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c8fa:	bf00      	nop
 800c8fc:	370c      	adds	r7, #12
 800c8fe:	46bd      	mov	sp, r7
 800c900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c904:	4770      	bx	lr
 800c906:	bf00      	nop
 800c908:	e000e100 	.word	0xe000e100

0800c90c <__NVIC_SetPriority>:
{
 800c90c:	b480      	push	{r7}
 800c90e:	b083      	sub	sp, #12
 800c910:	af00      	add	r7, sp, #0
 800c912:	4603      	mov	r3, r0
 800c914:	6039      	str	r1, [r7, #0]
 800c916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	db0a      	blt.n	800c936 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	b2da      	uxtb	r2, r3
 800c924:	490c      	ldr	r1, [pc, #48]	; (800c958 <__NVIC_SetPriority+0x4c>)
 800c926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c92a:	0152      	lsls	r2, r2, #5
 800c92c:	b2d2      	uxtb	r2, r2
 800c92e:	440b      	add	r3, r1
 800c930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c934:	e00a      	b.n	800c94c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	b2da      	uxtb	r2, r3
 800c93a:	4908      	ldr	r1, [pc, #32]	; (800c95c <__NVIC_SetPriority+0x50>)
 800c93c:	79fb      	ldrb	r3, [r7, #7]
 800c93e:	f003 030f 	and.w	r3, r3, #15
 800c942:	3b04      	subs	r3, #4
 800c944:	0152      	lsls	r2, r2, #5
 800c946:	b2d2      	uxtb	r2, r2
 800c948:	440b      	add	r3, r1
 800c94a:	761a      	strb	r2, [r3, #24]
}
 800c94c:	bf00      	nop
 800c94e:	370c      	adds	r7, #12
 800c950:	46bd      	mov	sp, r7
 800c952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c956:	4770      	bx	lr
 800c958:	e000e100 	.word	0xe000e100
 800c95c:	e000ed00 	.word	0xe000ed00

0800c960 <NVIC_EncodePriority>:
{
 800c960:	b480      	push	{r7}
 800c962:	b089      	sub	sp, #36	; 0x24
 800c964:	af00      	add	r7, sp, #0
 800c966:	60f8      	str	r0, [r7, #12]
 800c968:	60b9      	str	r1, [r7, #8]
 800c96a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f003 0307 	and.w	r3, r3, #7
 800c972:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c974:	69fb      	ldr	r3, [r7, #28]
 800c976:	f1c3 0307 	rsb	r3, r3, #7
 800c97a:	2b03      	cmp	r3, #3
 800c97c:	bf28      	it	cs
 800c97e:	2303      	movcs	r3, #3
 800c980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c982:	69fb      	ldr	r3, [r7, #28]
 800c984:	3303      	adds	r3, #3
 800c986:	2b06      	cmp	r3, #6
 800c988:	d902      	bls.n	800c990 <NVIC_EncodePriority+0x30>
 800c98a:	69fb      	ldr	r3, [r7, #28]
 800c98c:	3b04      	subs	r3, #4
 800c98e:	e000      	b.n	800c992 <NVIC_EncodePriority+0x32>
 800c990:	2300      	movs	r3, #0
 800c992:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c994:	f04f 32ff 	mov.w	r2, #4294967295
 800c998:	69bb      	ldr	r3, [r7, #24]
 800c99a:	fa02 f303 	lsl.w	r3, r2, r3
 800c99e:	43da      	mvns	r2, r3
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	401a      	ands	r2, r3
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c9a8:	f04f 31ff 	mov.w	r1, #4294967295
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	fa01 f303 	lsl.w	r3, r1, r3
 800c9b2:	43d9      	mvns	r1, r3
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c9b8:	4313      	orrs	r3, r2
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3724      	adds	r7, #36	; 0x24
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c4:	4770      	bx	lr

0800c9c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c9c6:	b580      	push	{r7, lr}
 800c9c8:	b082      	sub	sp, #8
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f7ff ff4c 	bl	800c86c <__NVIC_SetPriorityGrouping>
}
 800c9d4:	bf00      	nop
 800c9d6:	3708      	adds	r7, #8
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}

0800c9dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b086      	sub	sp, #24
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	60b9      	str	r1, [r7, #8]
 800c9e6:	607a      	str	r2, [r7, #4]
 800c9e8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800c9ea:	f7ff ff63 	bl	800c8b4 <__NVIC_GetPriorityGrouping>
 800c9ee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c9f0:	687a      	ldr	r2, [r7, #4]
 800c9f2:	68b9      	ldr	r1, [r7, #8]
 800c9f4:	6978      	ldr	r0, [r7, #20]
 800c9f6:	f7ff ffb3 	bl	800c960 <NVIC_EncodePriority>
 800c9fa:	4602      	mov	r2, r0
 800c9fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca00:	4611      	mov	r1, r2
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7ff ff82 	bl	800c90c <__NVIC_SetPriority>
}
 800ca08:	bf00      	nop
 800ca0a:	3718      	adds	r7, #24
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b082      	sub	sp, #8
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	4603      	mov	r3, r0
 800ca18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ca1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f7ff ff56 	bl	800c8d0 <__NVIC_EnableIRQ>
}
 800ca24:	bf00      	nop
 800ca26:	3708      	adds	r7, #8
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}

0800ca2c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b084      	sub	sp, #16
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d101      	bne.n	800ca3e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	e08d      	b.n	800cb5a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	461a      	mov	r2, r3
 800ca44:	4b47      	ldr	r3, [pc, #284]	; (800cb64 <HAL_DMA_Init+0x138>)
 800ca46:	429a      	cmp	r2, r3
 800ca48:	d80f      	bhi.n	800ca6a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	461a      	mov	r2, r3
 800ca50:	4b45      	ldr	r3, [pc, #276]	; (800cb68 <HAL_DMA_Init+0x13c>)
 800ca52:	4413      	add	r3, r2
 800ca54:	4a45      	ldr	r2, [pc, #276]	; (800cb6c <HAL_DMA_Init+0x140>)
 800ca56:	fba2 2303 	umull	r2, r3, r2, r3
 800ca5a:	091b      	lsrs	r3, r3, #4
 800ca5c:	009a      	lsls	r2, r3, #2
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	4a42      	ldr	r2, [pc, #264]	; (800cb70 <HAL_DMA_Init+0x144>)
 800ca66:	649a      	str	r2, [r3, #72]	; 0x48
 800ca68:	e00e      	b.n	800ca88 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	461a      	mov	r2, r3
 800ca70:	4b40      	ldr	r3, [pc, #256]	; (800cb74 <HAL_DMA_Init+0x148>)
 800ca72:	4413      	add	r3, r2
 800ca74:	4a3d      	ldr	r2, [pc, #244]	; (800cb6c <HAL_DMA_Init+0x140>)
 800ca76:	fba2 2303 	umull	r2, r3, r2, r3
 800ca7a:	091b      	lsrs	r3, r3, #4
 800ca7c:	009a      	lsls	r2, r3, #2
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	4a3c      	ldr	r2, [pc, #240]	; (800cb78 <HAL_DMA_Init+0x14c>)
 800ca86:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2202      	movs	r2, #2
 800ca8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 800ca9e:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800caa2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800caac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	691b      	ldr	r3, [r3, #16]
 800cab2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cab8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	699b      	ldr	r3, [r3, #24]
 800cabe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cac4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6a1b      	ldr	r3, [r3, #32]
 800caca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800cacc:	68fa      	ldr	r2, [r7, #12]
 800cace:	4313      	orrs	r3, r2
 800cad0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	68fa      	ldr	r2, [r7, #12]
 800cad8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f000 faf2 	bl	800d0c4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	689b      	ldr	r3, [r3, #8]
 800cae4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cae8:	d102      	bne.n	800caf0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2200      	movs	r2, #0
 800caee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	685a      	ldr	r2, [r3, #4]
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800caf8:	b2d2      	uxtb	r2, r2
 800cafa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb00:	687a      	ldr	r2, [r7, #4]
 800cb02:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800cb04:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	685b      	ldr	r3, [r3, #4]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d010      	beq.n	800cb30 <HAL_DMA_Init+0x104>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	2b04      	cmp	r3, #4
 800cb14:	d80c      	bhi.n	800cb30 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f000 fb12 	bl	800d140 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb20:	2200      	movs	r2, #0
 800cb22:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800cb2c:	605a      	str	r2, [r3, #4]
 800cb2e:	e008      	b.n	800cb42 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2200      	movs	r2, #0
 800cb34:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2200      	movs	r2, #0
 800cb46:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2200      	movs	r2, #0
 800cb54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800cb58:	2300      	movs	r3, #0
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3710      	adds	r7, #16
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	40020407 	.word	0x40020407
 800cb68:	bffdfff8 	.word	0xbffdfff8
 800cb6c:	cccccccd 	.word	0xcccccccd
 800cb70:	40020000 	.word	0x40020000
 800cb74:	bffdfbf8 	.word	0xbffdfbf8
 800cb78:	40020400 	.word	0x40020400

0800cb7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b086      	sub	sp, #24
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	60f8      	str	r0, [r7, #12]
 800cb84:	60b9      	str	r1, [r7, #8]
 800cb86:	607a      	str	r2, [r7, #4]
 800cb88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cb94:	2b01      	cmp	r3, #1
 800cb96:	d101      	bne.n	800cb9c <HAL_DMA_Start_IT+0x20>
 800cb98:	2302      	movs	r3, #2
 800cb9a:	e066      	b.n	800cc6a <HAL_DMA_Start_IT+0xee>
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	2201      	movs	r2, #1
 800cba0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800cbaa:	b2db      	uxtb	r3, r3
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	d155      	bne.n	800cc5c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	2202      	movs	r2, #2
 800cbb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	681a      	ldr	r2, [r3, #0]
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f022 0201 	bic.w	r2, r2, #1
 800cbcc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	687a      	ldr	r2, [r7, #4]
 800cbd2:	68b9      	ldr	r1, [r7, #8]
 800cbd4:	68f8      	ldr	r0, [r7, #12]
 800cbd6:	f000 fa37 	bl	800d048 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d008      	beq.n	800cbf4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	681a      	ldr	r2, [r3, #0]
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f042 020e 	orr.w	r2, r2, #14
 800cbf0:	601a      	str	r2, [r3, #0]
 800cbf2:	e00f      	b.n	800cc14 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	681a      	ldr	r2, [r3, #0]
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f022 0204 	bic.w	r2, r2, #4
 800cc02:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	681a      	ldr	r2, [r3, #0]
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	f042 020a 	orr.w	r2, r2, #10
 800cc12:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d007      	beq.n	800cc32 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc26:	681a      	ldr	r2, [r3, #0]
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cc30:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d007      	beq.n	800cc4a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc3e:	681a      	ldr	r2, [r3, #0]
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cc48:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	681a      	ldr	r2, [r3, #0]
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	f042 0201 	orr.w	r2, r2, #1
 800cc58:	601a      	str	r2, [r3, #0]
 800cc5a:	e005      	b.n	800cc68 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800cc64:	2302      	movs	r3, #2
 800cc66:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800cc68:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3718      	adds	r7, #24
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}

0800cc72 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800cc72:	b480      	push	{r7}
 800cc74:	b085      	sub	sp, #20
 800cc76:	af00      	add	r7, sp, #0
 800cc78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800cc84:	b2db      	uxtb	r3, r3
 800cc86:	2b02      	cmp	r3, #2
 800cc88:	d008      	beq.n	800cc9c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2204      	movs	r2, #4
 800cc8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2200      	movs	r2, #0
 800cc94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800cc98:	2301      	movs	r3, #1
 800cc9a:	e040      	b.n	800cd1e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	681a      	ldr	r2, [r3, #0]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f022 020e 	bic.w	r2, r2, #14
 800ccaa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccb0:	681a      	ldr	r2, [r3, #0]
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ccba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	681a      	ldr	r2, [r3, #0]
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f022 0201 	bic.w	r2, r2, #1
 800ccca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccd0:	f003 021c 	and.w	r2, r3, #28
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ccd8:	2101      	movs	r1, #1
 800ccda:	fa01 f202 	lsl.w	r2, r1, r2
 800ccde:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cce4:	687a      	ldr	r2, [r7, #4]
 800cce6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800cce8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d00c      	beq.n	800cd0c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ccf6:	681a      	ldr	r2, [r3, #0]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ccfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cd00:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd06:	687a      	ldr	r2, [r7, #4]
 800cd08:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800cd0a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2201      	movs	r2, #1
 800cd10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2200      	movs	r2, #0
 800cd18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800cd1c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3714      	adds	r7, #20
 800cd22:	46bd      	mov	sp, r7
 800cd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd28:	4770      	bx	lr

0800cd2a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800cd2a:	b580      	push	{r7, lr}
 800cd2c:	b084      	sub	sp, #16
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cd32:	2300      	movs	r3, #0
 800cd34:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800cd3c:	b2db      	uxtb	r3, r3
 800cd3e:	2b02      	cmp	r3, #2
 800cd40:	d005      	beq.n	800cd4e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2204      	movs	r2, #4
 800cd46:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 800cd48:	2301      	movs	r3, #1
 800cd4a:	73fb      	strb	r3, [r7, #15]
 800cd4c:	e047      	b.n	800cdde <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	681a      	ldr	r2, [r3, #0]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	f022 020e 	bic.w	r2, r2, #14
 800cd5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	681a      	ldr	r2, [r3, #0]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f022 0201 	bic.w	r2, r2, #1
 800cd6c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd72:	681a      	ldr	r2, [r3, #0]
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cd7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd82:	f003 021c 	and.w	r2, r3, #28
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd8a:	2101      	movs	r1, #1
 800cd8c:	fa01 f202 	lsl.w	r2, r1, r2
 800cd90:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd96:	687a      	ldr	r2, [r7, #4]
 800cd98:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800cd9a:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d00c      	beq.n	800cdbe <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cda8:	681a      	ldr	r2, [r3, #0]
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cdae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cdb2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cdb8:	687a      	ldr	r2, [r7, #4]
 800cdba:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800cdbc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2201      	movs	r2, #1
 800cdc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d003      	beq.n	800cdde <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	4798      	blx	r3
    }
  }
  return status;
 800cdde:	7bfb      	ldrb	r3, [r7, #15]
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3710      	adds	r7, #16
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}

0800cde8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b084      	sub	sp, #16
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce04:	f003 031c 	and.w	r3, r3, #28
 800ce08:	2204      	movs	r2, #4
 800ce0a:	409a      	lsls	r2, r3
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	4013      	ands	r3, r2
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d053      	beq.n	800cebc <HAL_DMA_IRQHandler+0xd4>
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	f003 0304 	and.w	r3, r3, #4
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d04e      	beq.n	800cebc <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d024      	beq.n	800ce76 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce30:	f003 021c 	and.w	r2, r3, #28
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce38:	2104      	movs	r1, #4
 800ce3a:	fa01 f202 	lsl.w	r2, r1, r2
 800ce3e:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d109      	bne.n	800ce62 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	f000 80c0 	beq.w	800cfd8 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800ce60:	e0ba      	b.n	800cfd8 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	f000 80b6 	beq.w	800cfd8 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800ce74:	e0b0      	b.n	800cfd8 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f003 0320 	and.w	r3, r3, #32
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d107      	bne.n	800ce94 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	681a      	ldr	r2, [r3, #0]
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	f022 0204 	bic.w	r2, r2, #4
 800ce92:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce98:	f003 021c 	and.w	r2, r3, #28
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cea0:	2104      	movs	r1, #4
 800cea2:	fa01 f202 	lsl.w	r2, r1, r2
 800cea6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	f000 8093 	beq.w	800cfd8 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800ceba:	e08d      	b.n	800cfd8 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cec0:	f003 031c 	and.w	r3, r3, #28
 800cec4:	2202      	movs	r2, #2
 800cec6:	409a      	lsls	r2, r3
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	4013      	ands	r3, r2
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d04e      	beq.n	800cf6e <HAL_DMA_IRQHandler+0x186>
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	f003 0302 	and.w	r3, r3, #2
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d049      	beq.n	800cf6e <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d018      	beq.n	800cf1a <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d108      	bne.n	800cf08 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d06e      	beq.n	800cfdc <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800cf06:	e069      	b.n	800cfdc <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d065      	beq.n	800cfdc <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800cf18:	e060      	b.n	800cfdc <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f003 0320 	and.w	r3, r3, #32
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d10b      	bne.n	800cf40 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	681a      	ldr	r2, [r3, #0]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	f022 020a 	bic.w	r2, r2, #10
 800cf36:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf44:	f003 021c 	and.w	r2, r3, #28
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf4c:	2102      	movs	r1, #2
 800cf4e:	fa01 f202 	lsl.w	r2, r1, r2
 800cf52:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2200      	movs	r2, #0
 800cf58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d03b      	beq.n	800cfdc <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800cf6c:	e036      	b.n	800cfdc <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf72:	f003 031c 	and.w	r3, r3, #28
 800cf76:	2208      	movs	r2, #8
 800cf78:	409a      	lsls	r2, r3
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	4013      	ands	r3, r2
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d02e      	beq.n	800cfe0 <HAL_DMA_IRQHandler+0x1f8>
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	f003 0308 	and.w	r3, r3, #8
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d029      	beq.n	800cfe0 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	681a      	ldr	r2, [r3, #0]
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f022 020e 	bic.w	r2, r2, #14
 800cf9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfa0:	f003 021c 	and.w	r2, r3, #28
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfa8:	2101      	movs	r1, #1
 800cfaa:	fa01 f202 	lsl.w	r2, r1, r2
 800cfae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d008      	beq.n	800cfe0 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800cfd6:	e002      	b.n	800cfde <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800cfd8:	bf00      	nop
 800cfda:	e000      	b.n	800cfde <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800cfdc:	bf00      	nop
  return;
 800cfde:	bf00      	nop
 800cfe0:	bf00      	nop
}
 800cfe2:	3710      	adds	r7, #16
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}

0800cfe8 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 800cfe8:	b480      	push	{r7}
 800cfea:	b085      	sub	sp, #20
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cff2:	2300      	movs	r3, #0
 800cff4:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d103      	bne.n	800d004 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 800cffc:	2301      	movs	r3, #1
 800cffe:	72fb      	strb	r3, [r7, #11]
    return status;
 800d000:	7afb      	ldrb	r3, [r7, #11]
 800d002:	e01b      	b.n	800d03c <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	f003 0310 	and.w	r3, r3, #16
 800d012:	2b00      	cmp	r3, #0
 800d014:	d00d      	beq.n	800d032 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d004      	beq.n	800d02a <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d026:	60fb      	str	r3, [r7, #12]
 800d028:	e003      	b.n	800d032 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d030:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	68fa      	ldr	r2, [r7, #12]
 800d038:	601a      	str	r2, [r3, #0]

  return status;
 800d03a:	7afb      	ldrb	r3, [r7, #11]
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3714      	adds	r7, #20
 800d040:	46bd      	mov	sp, r7
 800d042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d046:	4770      	bx	lr

0800d048 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d048:	b480      	push	{r7}
 800d04a:	b085      	sub	sp, #20
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	60f8      	str	r0, [r7, #12]
 800d050:	60b9      	str	r1, [r7, #8]
 800d052:	607a      	str	r2, [r7, #4]
 800d054:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d05a:	68fa      	ldr	r2, [r7, #12]
 800d05c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d05e:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d064:	2b00      	cmp	r3, #0
 800d066:	d004      	beq.n	800d072 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d06c:	68fa      	ldr	r2, [r7, #12]
 800d06e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800d070:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d076:	f003 021c 	and.w	r2, r3, #28
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d07e:	2101      	movs	r1, #1
 800d080:	fa01 f202 	lsl.w	r2, r1, r2
 800d084:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	683a      	ldr	r2, [r7, #0]
 800d08c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	689b      	ldr	r3, [r3, #8]
 800d092:	2b10      	cmp	r3, #16
 800d094:	d108      	bne.n	800d0a8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	687a      	ldr	r2, [r7, #4]
 800d09c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	68ba      	ldr	r2, [r7, #8]
 800d0a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 800d0a6:	e007      	b.n	800d0b8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	68ba      	ldr	r2, [r7, #8]
 800d0ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	60da      	str	r2, [r3, #12]
}
 800d0b8:	bf00      	nop
 800d0ba:	3714      	adds	r7, #20
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c2:	4770      	bx	lr

0800d0c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	b085      	sub	sp, #20
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	461a      	mov	r2, r3
 800d0d2:	4b17      	ldr	r3, [pc, #92]	; (800d130 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800d0d4:	429a      	cmp	r2, r3
 800d0d6:	d80a      	bhi.n	800d0ee <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0dc:	089b      	lsrs	r3, r3, #2
 800d0de:	009b      	lsls	r3, r3, #2
 800d0e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d0e4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	6513      	str	r3, [r2, #80]	; 0x50
 800d0ec:	e007      	b.n	800d0fe <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0f2:	089b      	lsrs	r3, r3, #2
 800d0f4:	009a      	lsls	r2, r3, #2
 800d0f6:	4b0f      	ldr	r3, [pc, #60]	; (800d134 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800d0f8:	4413      	add	r3, r2
 800d0fa:	687a      	ldr	r2, [r7, #4]
 800d0fc:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	b2db      	uxtb	r3, r3
 800d104:	3b08      	subs	r3, #8
 800d106:	4a0c      	ldr	r2, [pc, #48]	; (800d138 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800d108:	fba2 2303 	umull	r2, r3, r2, r3
 800d10c:	091b      	lsrs	r3, r3, #4
 800d10e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	4a0a      	ldr	r2, [pc, #40]	; (800d13c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800d114:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	f003 031f 	and.w	r3, r3, #31
 800d11c:	2201      	movs	r2, #1
 800d11e:	409a      	lsls	r2, r3
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	659a      	str	r2, [r3, #88]	; 0x58
}
 800d124:	bf00      	nop
 800d126:	3714      	adds	r7, #20
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr
 800d130:	40020407 	.word	0x40020407
 800d134:	40020820 	.word	0x40020820
 800d138:	cccccccd 	.word	0xcccccccd
 800d13c:	40020880 	.word	0x40020880

0800d140 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800d140:	b480      	push	{r7}
 800d142:	b085      	sub	sp, #20
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	b2db      	uxtb	r3, r3
 800d14e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800d150:	68fa      	ldr	r2, [r7, #12]
 800d152:	4b0b      	ldr	r3, [pc, #44]	; (800d180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800d154:	4413      	add	r3, r2
 800d156:	009b      	lsls	r3, r3, #2
 800d158:	461a      	mov	r2, r3
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	4a08      	ldr	r2, [pc, #32]	; (800d184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800d162:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	3b01      	subs	r3, #1
 800d168:	f003 0303 	and.w	r3, r3, #3
 800d16c:	2201      	movs	r2, #1
 800d16e:	409a      	lsls	r2, r3
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	665a      	str	r2, [r3, #100]	; 0x64
}
 800d174:	bf00      	nop
 800d176:	3714      	adds	r7, #20
 800d178:	46bd      	mov	sp, r7
 800d17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17e:	4770      	bx	lr
 800d180:	1000823f 	.word	0x1000823f
 800d184:	40020940 	.word	0x40020940

0800d188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d188:	b480      	push	{r7}
 800d18a:	b087      	sub	sp, #28
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
 800d190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800d192:	2300      	movs	r3, #0
 800d194:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800d196:	e158      	b.n	800d44a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	681a      	ldr	r2, [r3, #0]
 800d19c:	2101      	movs	r1, #1
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	fa01 f303 	lsl.w	r3, r1, r3
 800d1a4:	4013      	ands	r3, r2
 800d1a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	f000 814a 	beq.w	800d444 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	685b      	ldr	r3, [r3, #4]
 800d1b4:	f003 0303 	and.w	r3, r3, #3
 800d1b8:	2b01      	cmp	r3, #1
 800d1ba:	d005      	beq.n	800d1c8 <HAL_GPIO_Init+0x40>
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	685b      	ldr	r3, [r3, #4]
 800d1c0:	f003 0303 	and.w	r3, r3, #3
 800d1c4:	2b02      	cmp	r3, #2
 800d1c6:	d130      	bne.n	800d22a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	689b      	ldr	r3, [r3, #8]
 800d1cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	005b      	lsls	r3, r3, #1
 800d1d2:	2203      	movs	r2, #3
 800d1d4:	fa02 f303 	lsl.w	r3, r2, r3
 800d1d8:	43db      	mvns	r3, r3
 800d1da:	693a      	ldr	r2, [r7, #16]
 800d1dc:	4013      	ands	r3, r2
 800d1de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	68da      	ldr	r2, [r3, #12]
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	005b      	lsls	r3, r3, #1
 800d1e8:	fa02 f303 	lsl.w	r3, r2, r3
 800d1ec:	693a      	ldr	r2, [r7, #16]
 800d1ee:	4313      	orrs	r3, r2
 800d1f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	693a      	ldr	r2, [r7, #16]
 800d1f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	685b      	ldr	r3, [r3, #4]
 800d1fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d1fe:	2201      	movs	r2, #1
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	fa02 f303 	lsl.w	r3, r2, r3
 800d206:	43db      	mvns	r3, r3
 800d208:	693a      	ldr	r2, [r7, #16]
 800d20a:	4013      	ands	r3, r2
 800d20c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	685b      	ldr	r3, [r3, #4]
 800d212:	091b      	lsrs	r3, r3, #4
 800d214:	f003 0201 	and.w	r2, r3, #1
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	fa02 f303 	lsl.w	r3, r2, r3
 800d21e:	693a      	ldr	r2, [r7, #16]
 800d220:	4313      	orrs	r3, r2
 800d222:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	693a      	ldr	r2, [r7, #16]
 800d228:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	685b      	ldr	r3, [r3, #4]
 800d22e:	f003 0303 	and.w	r3, r3, #3
 800d232:	2b03      	cmp	r3, #3
 800d234:	d017      	beq.n	800d266 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	68db      	ldr	r3, [r3, #12]
 800d23a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	005b      	lsls	r3, r3, #1
 800d240:	2203      	movs	r2, #3
 800d242:	fa02 f303 	lsl.w	r3, r2, r3
 800d246:	43db      	mvns	r3, r3
 800d248:	693a      	ldr	r2, [r7, #16]
 800d24a:	4013      	ands	r3, r2
 800d24c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	689a      	ldr	r2, [r3, #8]
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	005b      	lsls	r3, r3, #1
 800d256:	fa02 f303 	lsl.w	r3, r2, r3
 800d25a:	693a      	ldr	r2, [r7, #16]
 800d25c:	4313      	orrs	r3, r2
 800d25e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	693a      	ldr	r2, [r7, #16]
 800d264:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	685b      	ldr	r3, [r3, #4]
 800d26a:	f003 0303 	and.w	r3, r3, #3
 800d26e:	2b02      	cmp	r3, #2
 800d270:	d123      	bne.n	800d2ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	08da      	lsrs	r2, r3, #3
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	3208      	adds	r2, #8
 800d27a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d27e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	f003 0307 	and.w	r3, r3, #7
 800d286:	009b      	lsls	r3, r3, #2
 800d288:	220f      	movs	r2, #15
 800d28a:	fa02 f303 	lsl.w	r3, r2, r3
 800d28e:	43db      	mvns	r3, r3
 800d290:	693a      	ldr	r2, [r7, #16]
 800d292:	4013      	ands	r3, r2
 800d294:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	691a      	ldr	r2, [r3, #16]
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	f003 0307 	and.w	r3, r3, #7
 800d2a0:	009b      	lsls	r3, r3, #2
 800d2a2:	fa02 f303 	lsl.w	r3, r2, r3
 800d2a6:	693a      	ldr	r2, [r7, #16]
 800d2a8:	4313      	orrs	r3, r2
 800d2aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	08da      	lsrs	r2, r3, #3
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	3208      	adds	r2, #8
 800d2b4:	6939      	ldr	r1, [r7, #16]
 800d2b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	005b      	lsls	r3, r3, #1
 800d2c4:	2203      	movs	r2, #3
 800d2c6:	fa02 f303 	lsl.w	r3, r2, r3
 800d2ca:	43db      	mvns	r3, r3
 800d2cc:	693a      	ldr	r2, [r7, #16]
 800d2ce:	4013      	ands	r3, r2
 800d2d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	685b      	ldr	r3, [r3, #4]
 800d2d6:	f003 0203 	and.w	r2, r3, #3
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	005b      	lsls	r3, r3, #1
 800d2de:	fa02 f303 	lsl.w	r3, r2, r3
 800d2e2:	693a      	ldr	r2, [r7, #16]
 800d2e4:	4313      	orrs	r3, r2
 800d2e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	693a      	ldr	r2, [r7, #16]
 800d2ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	f000 80a4 	beq.w	800d444 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 800d2fc:	4a5a      	ldr	r2, [pc, #360]	; (800d468 <HAL_GPIO_Init+0x2e0>)
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	089b      	lsrs	r3, r3, #2
 800d302:	3318      	adds	r3, #24
 800d304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d308:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	f003 0303 	and.w	r3, r3, #3
 800d310:	00db      	lsls	r3, r3, #3
 800d312:	220f      	movs	r2, #15
 800d314:	fa02 f303 	lsl.w	r3, r2, r3
 800d318:	43db      	mvns	r3, r3
 800d31a:	693a      	ldr	r2, [r7, #16]
 800d31c:	4013      	ands	r3, r2
 800d31e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	4a52      	ldr	r2, [pc, #328]	; (800d46c <HAL_GPIO_Init+0x2e4>)
 800d324:	4293      	cmp	r3, r2
 800d326:	d025      	beq.n	800d374 <HAL_GPIO_Init+0x1ec>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	4a51      	ldr	r2, [pc, #324]	; (800d470 <HAL_GPIO_Init+0x2e8>)
 800d32c:	4293      	cmp	r3, r2
 800d32e:	d01f      	beq.n	800d370 <HAL_GPIO_Init+0x1e8>
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	4a50      	ldr	r2, [pc, #320]	; (800d474 <HAL_GPIO_Init+0x2ec>)
 800d334:	4293      	cmp	r3, r2
 800d336:	d019      	beq.n	800d36c <HAL_GPIO_Init+0x1e4>
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	4a4f      	ldr	r2, [pc, #316]	; (800d478 <HAL_GPIO_Init+0x2f0>)
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d013      	beq.n	800d368 <HAL_GPIO_Init+0x1e0>
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	4a4e      	ldr	r2, [pc, #312]	; (800d47c <HAL_GPIO_Init+0x2f4>)
 800d344:	4293      	cmp	r3, r2
 800d346:	d00d      	beq.n	800d364 <HAL_GPIO_Init+0x1dc>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	4a4d      	ldr	r2, [pc, #308]	; (800d480 <HAL_GPIO_Init+0x2f8>)
 800d34c:	4293      	cmp	r3, r2
 800d34e:	d007      	beq.n	800d360 <HAL_GPIO_Init+0x1d8>
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	4a4c      	ldr	r2, [pc, #304]	; (800d484 <HAL_GPIO_Init+0x2fc>)
 800d354:	4293      	cmp	r3, r2
 800d356:	d101      	bne.n	800d35c <HAL_GPIO_Init+0x1d4>
 800d358:	2306      	movs	r3, #6
 800d35a:	e00c      	b.n	800d376 <HAL_GPIO_Init+0x1ee>
 800d35c:	2307      	movs	r3, #7
 800d35e:	e00a      	b.n	800d376 <HAL_GPIO_Init+0x1ee>
 800d360:	2305      	movs	r3, #5
 800d362:	e008      	b.n	800d376 <HAL_GPIO_Init+0x1ee>
 800d364:	2304      	movs	r3, #4
 800d366:	e006      	b.n	800d376 <HAL_GPIO_Init+0x1ee>
 800d368:	2303      	movs	r3, #3
 800d36a:	e004      	b.n	800d376 <HAL_GPIO_Init+0x1ee>
 800d36c:	2302      	movs	r3, #2
 800d36e:	e002      	b.n	800d376 <HAL_GPIO_Init+0x1ee>
 800d370:	2301      	movs	r3, #1
 800d372:	e000      	b.n	800d376 <HAL_GPIO_Init+0x1ee>
 800d374:	2300      	movs	r3, #0
 800d376:	697a      	ldr	r2, [r7, #20]
 800d378:	f002 0203 	and.w	r2, r2, #3
 800d37c:	00d2      	lsls	r2, r2, #3
 800d37e:	4093      	lsls	r3, r2
 800d380:	693a      	ldr	r2, [r7, #16]
 800d382:	4313      	orrs	r3, r2
 800d384:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800d386:	4938      	ldr	r1, [pc, #224]	; (800d468 <HAL_GPIO_Init+0x2e0>)
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	089b      	lsrs	r3, r3, #2
 800d38c:	3318      	adds	r3, #24
 800d38e:	693a      	ldr	r2, [r7, #16]
 800d390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800d394:	4b34      	ldr	r3, [pc, #208]	; (800d468 <HAL_GPIO_Init+0x2e0>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	43db      	mvns	r3, r3
 800d39e:	693a      	ldr	r2, [r7, #16]
 800d3a0:	4013      	ands	r3, r2
 800d3a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	685b      	ldr	r3, [r3, #4]
 800d3a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d003      	beq.n	800d3b8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800d3b0:	693a      	ldr	r2, [r7, #16]
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	4313      	orrs	r3, r2
 800d3b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800d3b8:	4a2b      	ldr	r2, [pc, #172]	; (800d468 <HAL_GPIO_Init+0x2e0>)
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800d3be:	4b2a      	ldr	r3, [pc, #168]	; (800d468 <HAL_GPIO_Init+0x2e0>)
 800d3c0:	685b      	ldr	r3, [r3, #4]
 800d3c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	43db      	mvns	r3, r3
 800d3c8:	693a      	ldr	r2, [r7, #16]
 800d3ca:	4013      	ands	r3, r2
 800d3cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	685b      	ldr	r3, [r3, #4]
 800d3d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d003      	beq.n	800d3e2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800d3da:	693a      	ldr	r2, [r7, #16]
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	4313      	orrs	r3, r2
 800d3e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800d3e2:	4a21      	ldr	r2, [pc, #132]	; (800d468 <HAL_GPIO_Init+0x2e0>)
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800d3e8:	4b1f      	ldr	r3, [pc, #124]	; (800d468 <HAL_GPIO_Init+0x2e0>)
 800d3ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	43db      	mvns	r3, r3
 800d3f4:	693a      	ldr	r2, [r7, #16]
 800d3f6:	4013      	ands	r3, r2
 800d3f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d402:	2b00      	cmp	r3, #0
 800d404:	d003      	beq.n	800d40e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800d406:	693a      	ldr	r2, [r7, #16]
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	4313      	orrs	r3, r2
 800d40c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800d40e:	4a16      	ldr	r2, [pc, #88]	; (800d468 <HAL_GPIO_Init+0x2e0>)
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 800d416:	4b14      	ldr	r3, [pc, #80]	; (800d468 <HAL_GPIO_Init+0x2e0>)
 800d418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d41c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	43db      	mvns	r3, r3
 800d422:	693a      	ldr	r2, [r7, #16]
 800d424:	4013      	ands	r3, r2
 800d426:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	685b      	ldr	r3, [r3, #4]
 800d42c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d430:	2b00      	cmp	r3, #0
 800d432:	d003      	beq.n	800d43c <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 800d434:	693a      	ldr	r2, [r7, #16]
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	4313      	orrs	r3, r2
 800d43a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800d43c:	4a0a      	ldr	r2, [pc, #40]	; (800d468 <HAL_GPIO_Init+0x2e0>)
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	3301      	adds	r3, #1
 800d448:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	681a      	ldr	r2, [r3, #0]
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	fa22 f303 	lsr.w	r3, r2, r3
 800d454:	2b00      	cmp	r3, #0
 800d456:	f47f ae9f 	bne.w	800d198 <HAL_GPIO_Init+0x10>
  }
}
 800d45a:	bf00      	nop
 800d45c:	bf00      	nop
 800d45e:	371c      	adds	r7, #28
 800d460:	46bd      	mov	sp, r7
 800d462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d466:	4770      	bx	lr
 800d468:	4002f400 	.word	0x4002f400
 800d46c:	42020000 	.word	0x42020000
 800d470:	42020400 	.word	0x42020400
 800d474:	42020800 	.word	0x42020800
 800d478:	42020c00 	.word	0x42020c00
 800d47c:	42021000 	.word	0x42021000
 800d480:	42021400 	.word	0x42021400
 800d484:	42021800 	.word	0x42021800

0800d488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d488:	b480      	push	{r7}
 800d48a:	b083      	sub	sp, #12
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	460b      	mov	r3, r1
 800d492:	807b      	strh	r3, [r7, #2]
 800d494:	4613      	mov	r3, r2
 800d496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d498:	787b      	ldrb	r3, [r7, #1]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d003      	beq.n	800d4a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800d49e:	887a      	ldrh	r2, [r7, #2]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800d4a4:	e002      	b.n	800d4ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800d4a6:	887a      	ldrh	r2, [r7, #2]
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 800d4ac:	bf00      	nop
 800d4ae:	370c      	adds	r7, #12
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b6:	4770      	bx	lr

0800d4b8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d4b8:	b480      	push	{r7}
 800d4ba:	b085      	sub	sp, #20
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
 800d4c0:	460b      	mov	r3, r1
 800d4c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	695b      	ldr	r3, [r3, #20]
 800d4c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800d4ca:	887a      	ldrh	r2, [r7, #2]
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	4013      	ands	r3, r2
 800d4d0:	041a      	lsls	r2, r3, #16
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	43d9      	mvns	r1, r3
 800d4d6:	887b      	ldrh	r3, [r7, #2]
 800d4d8:	400b      	ands	r3, r1
 800d4da:	431a      	orrs	r2, r3
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	619a      	str	r2, [r3, #24]
}
 800d4e0:	bf00      	nop
 800d4e2:	3714      	adds	r7, #20
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ea:	4770      	bx	lr

0800d4ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b082      	sub	sp, #8
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d101      	bne.n	800d4fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	e081      	b.n	800d602 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d504:	b2db      	uxtb	r3, r3
 800d506:	2b00      	cmp	r3, #0
 800d508:	d106      	bne.n	800d518 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2200      	movs	r2, #0
 800d50e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f7fc fe7a 	bl	800a20c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2224      	movs	r2, #36	; 0x24
 800d51c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	681a      	ldr	r2, [r3, #0]
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f022 0201 	bic.w	r2, r2, #1
 800d52e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	685a      	ldr	r2, [r3, #4]
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800d53c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	689a      	ldr	r2, [r3, #8]
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d54c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	68db      	ldr	r3, [r3, #12]
 800d552:	2b01      	cmp	r3, #1
 800d554:	d107      	bne.n	800d566 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	689a      	ldr	r2, [r3, #8]
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d562:	609a      	str	r2, [r3, #8]
 800d564:	e006      	b.n	800d574 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	689a      	ldr	r2, [r3, #8]
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800d572:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	68db      	ldr	r3, [r3, #12]
 800d578:	2b02      	cmp	r3, #2
 800d57a:	d104      	bne.n	800d586 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d584:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	685b      	ldr	r3, [r3, #4]
 800d58c:	687a      	ldr	r2, [r7, #4]
 800d58e:	6812      	ldr	r2, [r2, #0]
 800d590:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d598:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	68da      	ldr	r2, [r3, #12]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d5a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	691a      	ldr	r2, [r3, #16]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	695b      	ldr	r3, [r3, #20]
 800d5b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	699b      	ldr	r3, [r3, #24]
 800d5ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	430a      	orrs	r2, r1
 800d5c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	69d9      	ldr	r1, [r3, #28]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6a1a      	ldr	r2, [r3, #32]
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	430a      	orrs	r2, r1
 800d5d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	681a      	ldr	r2, [r3, #0]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f042 0201 	orr.w	r2, r2, #1
 800d5e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2220      	movs	r2, #32
 800d5ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800d600:	2300      	movs	r3, #0
}
 800d602:	4618      	mov	r0, r3
 800d604:	3708      	adds	r7, #8
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}
	...

0800d60c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b088      	sub	sp, #32
 800d610:	af02      	add	r7, sp, #8
 800d612:	60f8      	str	r0, [r7, #12]
 800d614:	607a      	str	r2, [r7, #4]
 800d616:	461a      	mov	r2, r3
 800d618:	460b      	mov	r3, r1
 800d61a:	817b      	strh	r3, [r7, #10]
 800d61c:	4613      	mov	r3, r2
 800d61e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d626:	b2db      	uxtb	r3, r3
 800d628:	2b20      	cmp	r3, #32
 800d62a:	f040 80da 	bne.w	800d7e2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d634:	2b01      	cmp	r3, #1
 800d636:	d101      	bne.n	800d63c <HAL_I2C_Master_Transmit+0x30>
 800d638:	2302      	movs	r3, #2
 800d63a:	e0d3      	b.n	800d7e4 <HAL_I2C_Master_Transmit+0x1d8>
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	2201      	movs	r2, #1
 800d640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d644:	f7fd fcc4 	bl	800afd0 <HAL_GetTick>
 800d648:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	9300      	str	r3, [sp, #0]
 800d64e:	2319      	movs	r3, #25
 800d650:	2201      	movs	r2, #1
 800d652:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d656:	68f8      	ldr	r0, [r7, #12]
 800d658:	f000 f9e6 	bl	800da28 <I2C_WaitOnFlagUntilTimeout>
 800d65c:	4603      	mov	r3, r0
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d001      	beq.n	800d666 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800d662:	2301      	movs	r3, #1
 800d664:	e0be      	b.n	800d7e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	2221      	movs	r2, #33	; 0x21
 800d66a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	2210      	movs	r2, #16
 800d672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	2200      	movs	r2, #0
 800d67a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	687a      	ldr	r2, [r7, #4]
 800d680:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	893a      	ldrh	r2, [r7, #8]
 800d686:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	2200      	movs	r2, #0
 800d68c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d692:	b29b      	uxth	r3, r3
 800d694:	2bff      	cmp	r3, #255	; 0xff
 800d696:	d90e      	bls.n	800d6b6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	22ff      	movs	r2, #255	; 0xff
 800d69c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6a2:	b2da      	uxtb	r2, r3
 800d6a4:	8979      	ldrh	r1, [r7, #10]
 800d6a6:	4b51      	ldr	r3, [pc, #324]	; (800d7ec <HAL_I2C_Master_Transmit+0x1e0>)
 800d6a8:	9300      	str	r3, [sp, #0]
 800d6aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d6ae:	68f8      	ldr	r0, [r7, #12]
 800d6b0:	f000 fbf6 	bl	800dea0 <I2C_TransferConfig>
 800d6b4:	e06c      	b.n	800d790 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6ba:	b29a      	uxth	r2, r3
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6c4:	b2da      	uxtb	r2, r3
 800d6c6:	8979      	ldrh	r1, [r7, #10]
 800d6c8:	4b48      	ldr	r3, [pc, #288]	; (800d7ec <HAL_I2C_Master_Transmit+0x1e0>)
 800d6ca:	9300      	str	r3, [sp, #0]
 800d6cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d6d0:	68f8      	ldr	r0, [r7, #12]
 800d6d2:	f000 fbe5 	bl	800dea0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800d6d6:	e05b      	b.n	800d790 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d6d8:	697a      	ldr	r2, [r7, #20]
 800d6da:	6a39      	ldr	r1, [r7, #32]
 800d6dc:	68f8      	ldr	r0, [r7, #12]
 800d6de:	f000 f9f2 	bl	800dac6 <I2C_WaitOnTXISFlagUntilTimeout>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d001      	beq.n	800d6ec <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800d6e8:	2301      	movs	r3, #1
 800d6ea:	e07b      	b.n	800d7e4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6f0:	781a      	ldrb	r2, [r3, #0]
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6fc:	1c5a      	adds	r2, r3, #1
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d706:	b29b      	uxth	r3, r3
 800d708:	3b01      	subs	r3, #1
 800d70a:	b29a      	uxth	r2, r3
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d714:	3b01      	subs	r3, #1
 800d716:	b29a      	uxth	r2, r3
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d720:	b29b      	uxth	r3, r3
 800d722:	2b00      	cmp	r3, #0
 800d724:	d034      	beq.n	800d790 <HAL_I2C_Master_Transmit+0x184>
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d130      	bne.n	800d790 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	9300      	str	r3, [sp, #0]
 800d732:	6a3b      	ldr	r3, [r7, #32]
 800d734:	2200      	movs	r2, #0
 800d736:	2180      	movs	r1, #128	; 0x80
 800d738:	68f8      	ldr	r0, [r7, #12]
 800d73a:	f000 f975 	bl	800da28 <I2C_WaitOnFlagUntilTimeout>
 800d73e:	4603      	mov	r3, r0
 800d740:	2b00      	cmp	r3, #0
 800d742:	d001      	beq.n	800d748 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800d744:	2301      	movs	r3, #1
 800d746:	e04d      	b.n	800d7e4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d74c:	b29b      	uxth	r3, r3
 800d74e:	2bff      	cmp	r3, #255	; 0xff
 800d750:	d90e      	bls.n	800d770 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	22ff      	movs	r2, #255	; 0xff
 800d756:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d75c:	b2da      	uxtb	r2, r3
 800d75e:	8979      	ldrh	r1, [r7, #10]
 800d760:	2300      	movs	r3, #0
 800d762:	9300      	str	r3, [sp, #0]
 800d764:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d768:	68f8      	ldr	r0, [r7, #12]
 800d76a:	f000 fb99 	bl	800dea0 <I2C_TransferConfig>
 800d76e:	e00f      	b.n	800d790 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d774:	b29a      	uxth	r2, r3
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d77e:	b2da      	uxtb	r2, r3
 800d780:	8979      	ldrh	r1, [r7, #10]
 800d782:	2300      	movs	r3, #0
 800d784:	9300      	str	r3, [sp, #0]
 800d786:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d78a:	68f8      	ldr	r0, [r7, #12]
 800d78c:	f000 fb88 	bl	800dea0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d794:	b29b      	uxth	r3, r3
 800d796:	2b00      	cmp	r3, #0
 800d798:	d19e      	bne.n	800d6d8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d79a:	697a      	ldr	r2, [r7, #20]
 800d79c:	6a39      	ldr	r1, [r7, #32]
 800d79e:	68f8      	ldr	r0, [r7, #12]
 800d7a0:	f000 f9d8 	bl	800db54 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d001      	beq.n	800d7ae <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	e01a      	b.n	800d7e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	2220      	movs	r2, #32
 800d7b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	6859      	ldr	r1, [r3, #4]
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	681a      	ldr	r2, [r3, #0]
 800d7c0:	4b0b      	ldr	r3, [pc, #44]	; (800d7f0 <HAL_I2C_Master_Transmit+0x1e4>)
 800d7c2:	400b      	ands	r3, r1
 800d7c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	2220      	movs	r2, #32
 800d7ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	2200      	movs	r2, #0
 800d7da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	e000      	b.n	800d7e4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800d7e2:	2302      	movs	r3, #2
  }
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3718      	adds	r7, #24
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}
 800d7ec:	80002000 	.word	0x80002000
 800d7f0:	fe00e800 	.word	0xfe00e800

0800d7f4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b088      	sub	sp, #32
 800d7f8:	af02      	add	r7, sp, #8
 800d7fa:	60f8      	str	r0, [r7, #12]
 800d7fc:	607a      	str	r2, [r7, #4]
 800d7fe:	461a      	mov	r2, r3
 800d800:	460b      	mov	r3, r1
 800d802:	817b      	strh	r3, [r7, #10]
 800d804:	4613      	mov	r3, r2
 800d806:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d80e:	b2db      	uxtb	r3, r3
 800d810:	2b20      	cmp	r3, #32
 800d812:	f040 80db 	bne.w	800d9cc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d81c:	2b01      	cmp	r3, #1
 800d81e:	d101      	bne.n	800d824 <HAL_I2C_Master_Receive+0x30>
 800d820:	2302      	movs	r3, #2
 800d822:	e0d4      	b.n	800d9ce <HAL_I2C_Master_Receive+0x1da>
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	2201      	movs	r2, #1
 800d828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d82c:	f7fd fbd0 	bl	800afd0 <HAL_GetTick>
 800d830:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	9300      	str	r3, [sp, #0]
 800d836:	2319      	movs	r3, #25
 800d838:	2201      	movs	r2, #1
 800d83a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d83e:	68f8      	ldr	r0, [r7, #12]
 800d840:	f000 f8f2 	bl	800da28 <I2C_WaitOnFlagUntilTimeout>
 800d844:	4603      	mov	r3, r0
 800d846:	2b00      	cmp	r3, #0
 800d848:	d001      	beq.n	800d84e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800d84a:	2301      	movs	r3, #1
 800d84c:	e0bf      	b.n	800d9ce <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	2222      	movs	r2, #34	; 0x22
 800d852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	2210      	movs	r2, #16
 800d85a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	2200      	movs	r2, #0
 800d862:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	687a      	ldr	r2, [r7, #4]
 800d868:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	893a      	ldrh	r2, [r7, #8]
 800d86e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	2200      	movs	r2, #0
 800d874:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d87a:	b29b      	uxth	r3, r3
 800d87c:	2bff      	cmp	r3, #255	; 0xff
 800d87e:	d90e      	bls.n	800d89e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	22ff      	movs	r2, #255	; 0xff
 800d884:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d88a:	b2da      	uxtb	r2, r3
 800d88c:	8979      	ldrh	r1, [r7, #10]
 800d88e:	4b52      	ldr	r3, [pc, #328]	; (800d9d8 <HAL_I2C_Master_Receive+0x1e4>)
 800d890:	9300      	str	r3, [sp, #0]
 800d892:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d896:	68f8      	ldr	r0, [r7, #12]
 800d898:	f000 fb02 	bl	800dea0 <I2C_TransferConfig>
 800d89c:	e06d      	b.n	800d97a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d8a2:	b29a      	uxth	r2, r3
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8ac:	b2da      	uxtb	r2, r3
 800d8ae:	8979      	ldrh	r1, [r7, #10]
 800d8b0:	4b49      	ldr	r3, [pc, #292]	; (800d9d8 <HAL_I2C_Master_Receive+0x1e4>)
 800d8b2:	9300      	str	r3, [sp, #0]
 800d8b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d8b8:	68f8      	ldr	r0, [r7, #12]
 800d8ba:	f000 faf1 	bl	800dea0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800d8be:	e05c      	b.n	800d97a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d8c0:	697a      	ldr	r2, [r7, #20]
 800d8c2:	6a39      	ldr	r1, [r7, #32]
 800d8c4:	68f8      	ldr	r0, [r7, #12]
 800d8c6:	f000 f989 	bl	800dbdc <I2C_WaitOnRXNEFlagUntilTimeout>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d001      	beq.n	800d8d4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	e07c      	b.n	800d9ce <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8de:	b2d2      	uxtb	r2, r2
 800d8e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8e6:	1c5a      	adds	r2, r3, #1
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8f0:	3b01      	subs	r3, #1
 800d8f2:	b29a      	uxth	r2, r3
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d8fc:	b29b      	uxth	r3, r3
 800d8fe:	3b01      	subs	r3, #1
 800d900:	b29a      	uxth	r2, r3
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d90a:	b29b      	uxth	r3, r3
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d034      	beq.n	800d97a <HAL_I2C_Master_Receive+0x186>
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d914:	2b00      	cmp	r3, #0
 800d916:	d130      	bne.n	800d97a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	9300      	str	r3, [sp, #0]
 800d91c:	6a3b      	ldr	r3, [r7, #32]
 800d91e:	2200      	movs	r2, #0
 800d920:	2180      	movs	r1, #128	; 0x80
 800d922:	68f8      	ldr	r0, [r7, #12]
 800d924:	f000 f880 	bl	800da28 <I2C_WaitOnFlagUntilTimeout>
 800d928:	4603      	mov	r3, r0
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d001      	beq.n	800d932 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800d92e:	2301      	movs	r3, #1
 800d930:	e04d      	b.n	800d9ce <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d936:	b29b      	uxth	r3, r3
 800d938:	2bff      	cmp	r3, #255	; 0xff
 800d93a:	d90e      	bls.n	800d95a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	22ff      	movs	r2, #255	; 0xff
 800d940:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d946:	b2da      	uxtb	r2, r3
 800d948:	8979      	ldrh	r1, [r7, #10]
 800d94a:	2300      	movs	r3, #0
 800d94c:	9300      	str	r3, [sp, #0]
 800d94e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d952:	68f8      	ldr	r0, [r7, #12]
 800d954:	f000 faa4 	bl	800dea0 <I2C_TransferConfig>
 800d958:	e00f      	b.n	800d97a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d95e:	b29a      	uxth	r2, r3
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d968:	b2da      	uxtb	r2, r3
 800d96a:	8979      	ldrh	r1, [r7, #10]
 800d96c:	2300      	movs	r3, #0
 800d96e:	9300      	str	r3, [sp, #0]
 800d970:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d974:	68f8      	ldr	r0, [r7, #12]
 800d976:	f000 fa93 	bl	800dea0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d97e:	b29b      	uxth	r3, r3
 800d980:	2b00      	cmp	r3, #0
 800d982:	d19d      	bne.n	800d8c0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d984:	697a      	ldr	r2, [r7, #20]
 800d986:	6a39      	ldr	r1, [r7, #32]
 800d988:	68f8      	ldr	r0, [r7, #12]
 800d98a:	f000 f8e3 	bl	800db54 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d98e:	4603      	mov	r3, r0
 800d990:	2b00      	cmp	r3, #0
 800d992:	d001      	beq.n	800d998 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800d994:	2301      	movs	r3, #1
 800d996:	e01a      	b.n	800d9ce <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	2220      	movs	r2, #32
 800d99e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	6859      	ldr	r1, [r3, #4]
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	681a      	ldr	r2, [r3, #0]
 800d9aa:	4b0c      	ldr	r3, [pc, #48]	; (800d9dc <HAL_I2C_Master_Receive+0x1e8>)
 800d9ac:	400b      	ands	r3, r1
 800d9ae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	2220      	movs	r2, #32
 800d9b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	e000      	b.n	800d9ce <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800d9cc:	2302      	movs	r3, #2
  }
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3718      	adds	r7, #24
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}
 800d9d6:	bf00      	nop
 800d9d8:	80002400 	.word	0x80002400
 800d9dc:	fe00e800 	.word	0xfe00e800

0800d9e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b083      	sub	sp, #12
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	699b      	ldr	r3, [r3, #24]
 800d9ee:	f003 0302 	and.w	r3, r3, #2
 800d9f2:	2b02      	cmp	r3, #2
 800d9f4:	d103      	bne.n	800d9fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	699b      	ldr	r3, [r3, #24]
 800da04:	f003 0301 	and.w	r3, r3, #1
 800da08:	2b01      	cmp	r3, #1
 800da0a:	d007      	beq.n	800da1c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	699a      	ldr	r2, [r3, #24]
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	f042 0201 	orr.w	r2, r2, #1
 800da1a:	619a      	str	r2, [r3, #24]
  }
}
 800da1c:	bf00      	nop
 800da1e:	370c      	adds	r7, #12
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr

0800da28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b084      	sub	sp, #16
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	60f8      	str	r0, [r7, #12]
 800da30:	60b9      	str	r1, [r7, #8]
 800da32:	603b      	str	r3, [r7, #0]
 800da34:	4613      	mov	r3, r2
 800da36:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800da38:	e031      	b.n	800da9e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da40:	d02d      	beq.n	800da9e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800da42:	f7fd fac5 	bl	800afd0 <HAL_GetTick>
 800da46:	4602      	mov	r2, r0
 800da48:	69bb      	ldr	r3, [r7, #24]
 800da4a:	1ad3      	subs	r3, r2, r3
 800da4c:	683a      	ldr	r2, [r7, #0]
 800da4e:	429a      	cmp	r2, r3
 800da50:	d302      	bcc.n	800da58 <I2C_WaitOnFlagUntilTimeout+0x30>
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d122      	bne.n	800da9e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	699a      	ldr	r2, [r3, #24]
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	4013      	ands	r3, r2
 800da62:	68ba      	ldr	r2, [r7, #8]
 800da64:	429a      	cmp	r2, r3
 800da66:	bf0c      	ite	eq
 800da68:	2301      	moveq	r3, #1
 800da6a:	2300      	movne	r3, #0
 800da6c:	b2db      	uxtb	r3, r3
 800da6e:	461a      	mov	r2, r3
 800da70:	79fb      	ldrb	r3, [r7, #7]
 800da72:	429a      	cmp	r2, r3
 800da74:	d113      	bne.n	800da9e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da7a:	f043 0220 	orr.w	r2, r3, #32
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	2220      	movs	r2, #32
 800da86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	2200      	movs	r2, #0
 800da8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	2200      	movs	r2, #0
 800da96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800da9a:	2301      	movs	r3, #1
 800da9c:	e00f      	b.n	800dabe <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	699a      	ldr	r2, [r3, #24]
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	4013      	ands	r3, r2
 800daa8:	68ba      	ldr	r2, [r7, #8]
 800daaa:	429a      	cmp	r2, r3
 800daac:	bf0c      	ite	eq
 800daae:	2301      	moveq	r3, #1
 800dab0:	2300      	movne	r3, #0
 800dab2:	b2db      	uxtb	r3, r3
 800dab4:	461a      	mov	r2, r3
 800dab6:	79fb      	ldrb	r3, [r7, #7]
 800dab8:	429a      	cmp	r2, r3
 800daba:	d0be      	beq.n	800da3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dabc:	2300      	movs	r3, #0
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3710      	adds	r7, #16
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}

0800dac6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800dac6:	b580      	push	{r7, lr}
 800dac8:	b084      	sub	sp, #16
 800daca:	af00      	add	r7, sp, #0
 800dacc:	60f8      	str	r0, [r7, #12]
 800dace:	60b9      	str	r1, [r7, #8]
 800dad0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800dad2:	e033      	b.n	800db3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800dad4:	687a      	ldr	r2, [r7, #4]
 800dad6:	68b9      	ldr	r1, [r7, #8]
 800dad8:	68f8      	ldr	r0, [r7, #12]
 800dada:	f000 f901 	bl	800dce0 <I2C_IsErrorOccurred>
 800dade:	4603      	mov	r3, r0
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d001      	beq.n	800dae8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800dae4:	2301      	movs	r3, #1
 800dae6:	e031      	b.n	800db4c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daee:	d025      	beq.n	800db3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800daf0:	f7fd fa6e 	bl	800afd0 <HAL_GetTick>
 800daf4:	4602      	mov	r2, r0
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	1ad3      	subs	r3, r2, r3
 800dafa:	68ba      	ldr	r2, [r7, #8]
 800dafc:	429a      	cmp	r2, r3
 800dafe:	d302      	bcc.n	800db06 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d11a      	bne.n	800db3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	699b      	ldr	r3, [r3, #24]
 800db0c:	f003 0302 	and.w	r3, r3, #2
 800db10:	2b02      	cmp	r3, #2
 800db12:	d013      	beq.n	800db3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db18:	f043 0220 	orr.w	r2, r3, #32
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	2220      	movs	r2, #32
 800db24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	2200      	movs	r2, #0
 800db2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	2200      	movs	r2, #0
 800db34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800db38:	2301      	movs	r3, #1
 800db3a:	e007      	b.n	800db4c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	699b      	ldr	r3, [r3, #24]
 800db42:	f003 0302 	and.w	r3, r3, #2
 800db46:	2b02      	cmp	r3, #2
 800db48:	d1c4      	bne.n	800dad4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800db4a:	2300      	movs	r3, #0
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	3710      	adds	r7, #16
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}

0800db54 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b084      	sub	sp, #16
 800db58:	af00      	add	r7, sp, #0
 800db5a:	60f8      	str	r0, [r7, #12]
 800db5c:	60b9      	str	r1, [r7, #8]
 800db5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800db60:	e02f      	b.n	800dbc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800db62:	687a      	ldr	r2, [r7, #4]
 800db64:	68b9      	ldr	r1, [r7, #8]
 800db66:	68f8      	ldr	r0, [r7, #12]
 800db68:	f000 f8ba 	bl	800dce0 <I2C_IsErrorOccurred>
 800db6c:	4603      	mov	r3, r0
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d001      	beq.n	800db76 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800db72:	2301      	movs	r3, #1
 800db74:	e02d      	b.n	800dbd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800db76:	f7fd fa2b 	bl	800afd0 <HAL_GetTick>
 800db7a:	4602      	mov	r2, r0
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	1ad3      	subs	r3, r2, r3
 800db80:	68ba      	ldr	r2, [r7, #8]
 800db82:	429a      	cmp	r2, r3
 800db84:	d302      	bcc.n	800db8c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d11a      	bne.n	800dbc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	699b      	ldr	r3, [r3, #24]
 800db92:	f003 0320 	and.w	r3, r3, #32
 800db96:	2b20      	cmp	r3, #32
 800db98:	d013      	beq.n	800dbc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db9e:	f043 0220 	orr.w	r2, r3, #32
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	2220      	movs	r2, #32
 800dbaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	e007      	b.n	800dbd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	699b      	ldr	r3, [r3, #24]
 800dbc8:	f003 0320 	and.w	r3, r3, #32
 800dbcc:	2b20      	cmp	r3, #32
 800dbce:	d1c8      	bne.n	800db62 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800dbd0:	2300      	movs	r3, #0
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3710      	adds	r7, #16
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
	...

0800dbdc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	60f8      	str	r0, [r7, #12]
 800dbe4:	60b9      	str	r1, [r7, #8]
 800dbe6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800dbe8:	e06b      	b.n	800dcc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800dbea:	687a      	ldr	r2, [r7, #4]
 800dbec:	68b9      	ldr	r1, [r7, #8]
 800dbee:	68f8      	ldr	r0, [r7, #12]
 800dbf0:	f000 f876 	bl	800dce0 <I2C_IsErrorOccurred>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d001      	beq.n	800dbfe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	e069      	b.n	800dcd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	699b      	ldr	r3, [r3, #24]
 800dc04:	f003 0320 	and.w	r3, r3, #32
 800dc08:	2b20      	cmp	r3, #32
 800dc0a:	d138      	bne.n	800dc7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	699b      	ldr	r3, [r3, #24]
 800dc12:	f003 0304 	and.w	r3, r3, #4
 800dc16:	2b04      	cmp	r3, #4
 800dc18:	d105      	bne.n	800dc26 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d001      	beq.n	800dc26 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800dc22:	2300      	movs	r3, #0
 800dc24:	e055      	b.n	800dcd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	699b      	ldr	r3, [r3, #24]
 800dc2c:	f003 0310 	and.w	r3, r3, #16
 800dc30:	2b10      	cmp	r3, #16
 800dc32:	d107      	bne.n	800dc44 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	2210      	movs	r2, #16
 800dc3a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	2204      	movs	r2, #4
 800dc40:	645a      	str	r2, [r3, #68]	; 0x44
 800dc42:	e002      	b.n	800dc4a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	2200      	movs	r2, #0
 800dc48:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	2220      	movs	r2, #32
 800dc50:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	6859      	ldr	r1, [r3, #4]
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	681a      	ldr	r2, [r3, #0]
 800dc5c:	4b1f      	ldr	r3, [pc, #124]	; (800dcdc <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800dc5e:	400b      	ands	r3, r1
 800dc60:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	2220      	movs	r2, #32
 800dc66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	2200      	movs	r2, #0
 800dc76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800dc7a:	2301      	movs	r3, #1
 800dc7c:	e029      	b.n	800dcd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc7e:	f7fd f9a7 	bl	800afd0 <HAL_GetTick>
 800dc82:	4602      	mov	r2, r0
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	1ad3      	subs	r3, r2, r3
 800dc88:	68ba      	ldr	r2, [r7, #8]
 800dc8a:	429a      	cmp	r2, r3
 800dc8c:	d302      	bcc.n	800dc94 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800dc8e:	68bb      	ldr	r3, [r7, #8]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d116      	bne.n	800dcc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	699b      	ldr	r3, [r3, #24]
 800dc9a:	f003 0304 	and.w	r3, r3, #4
 800dc9e:	2b04      	cmp	r3, #4
 800dca0:	d00f      	beq.n	800dcc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dca6:	f043 0220 	orr.w	r2, r3, #32
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	2220      	movs	r2, #32
 800dcb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	e007      	b.n	800dcd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	699b      	ldr	r3, [r3, #24]
 800dcc8:	f003 0304 	and.w	r3, r3, #4
 800dccc:	2b04      	cmp	r3, #4
 800dcce:	d18c      	bne.n	800dbea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800dcd0:	2300      	movs	r3, #0
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3710      	adds	r7, #16
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}
 800dcda:	bf00      	nop
 800dcdc:	fe00e800 	.word	0xfe00e800

0800dce0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b08a      	sub	sp, #40	; 0x28
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	60f8      	str	r0, [r7, #12]
 800dce8:	60b9      	str	r1, [r7, #8]
 800dcea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dcec:	2300      	movs	r3, #0
 800dcee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	699b      	ldr	r3, [r3, #24]
 800dcf8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800dd02:	69bb      	ldr	r3, [r7, #24]
 800dd04:	f003 0310 	and.w	r3, r3, #16
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d068      	beq.n	800ddde <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	2210      	movs	r2, #16
 800dd12:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800dd14:	e049      	b.n	800ddaa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd1c:	d045      	beq.n	800ddaa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800dd1e:	f7fd f957 	bl	800afd0 <HAL_GetTick>
 800dd22:	4602      	mov	r2, r0
 800dd24:	69fb      	ldr	r3, [r7, #28]
 800dd26:	1ad3      	subs	r3, r2, r3
 800dd28:	68ba      	ldr	r2, [r7, #8]
 800dd2a:	429a      	cmp	r2, r3
 800dd2c:	d302      	bcc.n	800dd34 <I2C_IsErrorOccurred+0x54>
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d13a      	bne.n	800ddaa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	685b      	ldr	r3, [r3, #4]
 800dd3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dd3e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dd46:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	699b      	ldr	r3, [r3, #24]
 800dd4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd56:	d121      	bne.n	800dd9c <I2C_IsErrorOccurred+0xbc>
 800dd58:	697b      	ldr	r3, [r7, #20]
 800dd5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dd5e:	d01d      	beq.n	800dd9c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800dd60:	7cfb      	ldrb	r3, [r7, #19]
 800dd62:	2b20      	cmp	r3, #32
 800dd64:	d01a      	beq.n	800dd9c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	685a      	ldr	r2, [r3, #4]
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dd74:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800dd76:	f7fd f92b 	bl	800afd0 <HAL_GetTick>
 800dd7a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800dd7c:	e00e      	b.n	800dd9c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800dd7e:	f7fd f927 	bl	800afd0 <HAL_GetTick>
 800dd82:	4602      	mov	r2, r0
 800dd84:	69fb      	ldr	r3, [r7, #28]
 800dd86:	1ad3      	subs	r3, r2, r3
 800dd88:	2b19      	cmp	r3, #25
 800dd8a:	d907      	bls.n	800dd9c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800dd8c:	6a3b      	ldr	r3, [r7, #32]
 800dd8e:	f043 0320 	orr.w	r3, r3, #32
 800dd92:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800dd94:	2301      	movs	r3, #1
 800dd96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800dd9a:	e006      	b.n	800ddaa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	699b      	ldr	r3, [r3, #24]
 800dda2:	f003 0320 	and.w	r3, r3, #32
 800dda6:	2b20      	cmp	r3, #32
 800dda8:	d1e9      	bne.n	800dd7e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	699b      	ldr	r3, [r3, #24]
 800ddb0:	f003 0320 	and.w	r3, r3, #32
 800ddb4:	2b20      	cmp	r3, #32
 800ddb6:	d003      	beq.n	800ddc0 <I2C_IsErrorOccurred+0xe0>
 800ddb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d0aa      	beq.n	800dd16 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800ddc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d103      	bne.n	800ddd0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	2220      	movs	r2, #32
 800ddce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800ddd0:	6a3b      	ldr	r3, [r7, #32]
 800ddd2:	f043 0304 	orr.w	r3, r3, #4
 800ddd6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800ddd8:	2301      	movs	r3, #1
 800ddda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	699b      	ldr	r3, [r3, #24]
 800dde4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800dde6:	69bb      	ldr	r3, [r7, #24]
 800dde8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d00b      	beq.n	800de08 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800ddf0:	6a3b      	ldr	r3, [r7, #32]
 800ddf2:	f043 0301 	orr.w	r3, r3, #1
 800ddf6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800de00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800de02:	2301      	movs	r3, #1
 800de04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800de08:	69bb      	ldr	r3, [r7, #24]
 800de0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d00b      	beq.n	800de2a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800de12:	6a3b      	ldr	r3, [r7, #32]
 800de14:	f043 0308 	orr.w	r3, r3, #8
 800de18:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800de22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800de24:	2301      	movs	r3, #1
 800de26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800de2a:	69bb      	ldr	r3, [r7, #24]
 800de2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800de30:	2b00      	cmp	r3, #0
 800de32:	d00b      	beq.n	800de4c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800de34:	6a3b      	ldr	r3, [r7, #32]
 800de36:	f043 0302 	orr.w	r3, r3, #2
 800de3a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800de46:	2301      	movs	r3, #1
 800de48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800de4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de50:	2b00      	cmp	r3, #0
 800de52:	d01c      	beq.n	800de8e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800de54:	68f8      	ldr	r0, [r7, #12]
 800de56:	f7ff fdc3 	bl	800d9e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	6859      	ldr	r1, [r3, #4]
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681a      	ldr	r2, [r3, #0]
 800de64:	4b0d      	ldr	r3, [pc, #52]	; (800de9c <I2C_IsErrorOccurred+0x1bc>)
 800de66:	400b      	ands	r3, r1
 800de68:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de6e:	6a3b      	ldr	r3, [r7, #32]
 800de70:	431a      	orrs	r2, r3
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	2220      	movs	r2, #32
 800de7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	2200      	movs	r2, #0
 800de82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	2200      	movs	r2, #0
 800de8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800de8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800de92:	4618      	mov	r0, r3
 800de94:	3728      	adds	r7, #40	; 0x28
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}
 800de9a:	bf00      	nop
 800de9c:	fe00e800 	.word	0xfe00e800

0800dea0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800dea0:	b480      	push	{r7}
 800dea2:	b087      	sub	sp, #28
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	60f8      	str	r0, [r7, #12]
 800dea8:	607b      	str	r3, [r7, #4]
 800deaa:	460b      	mov	r3, r1
 800deac:	817b      	strh	r3, [r7, #10]
 800deae:	4613      	mov	r3, r2
 800deb0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800deb2:	897b      	ldrh	r3, [r7, #10]
 800deb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800deb8:	7a7b      	ldrb	r3, [r7, #9]
 800deba:	041b      	lsls	r3, r3, #16
 800debc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800dec0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800dec6:	6a3b      	ldr	r3, [r7, #32]
 800dec8:	4313      	orrs	r3, r2
 800deca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dece:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	685a      	ldr	r2, [r3, #4]
 800ded6:	6a3b      	ldr	r3, [r7, #32]
 800ded8:	0d5b      	lsrs	r3, r3, #21
 800deda:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800dede:	4b08      	ldr	r3, [pc, #32]	; (800df00 <I2C_TransferConfig+0x60>)
 800dee0:	430b      	orrs	r3, r1
 800dee2:	43db      	mvns	r3, r3
 800dee4:	ea02 0103 	and.w	r1, r2, r3
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	697a      	ldr	r2, [r7, #20]
 800deee:	430a      	orrs	r2, r1
 800def0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800def2:	bf00      	nop
 800def4:	371c      	adds	r7, #28
 800def6:	46bd      	mov	sp, r7
 800def8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defc:	4770      	bx	lr
 800defe:	bf00      	nop
 800df00:	03ff63ff 	.word	0x03ff63ff

0800df04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800df04:	b480      	push	{r7}
 800df06:	b083      	sub	sp, #12
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
 800df0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800df14:	b2db      	uxtb	r3, r3
 800df16:	2b20      	cmp	r3, #32
 800df18:	d138      	bne.n	800df8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800df20:	2b01      	cmp	r3, #1
 800df22:	d101      	bne.n	800df28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800df24:	2302      	movs	r3, #2
 800df26:	e032      	b.n	800df8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2201      	movs	r2, #1
 800df2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2224      	movs	r2, #36	; 0x24
 800df34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	681a      	ldr	r2, [r3, #0]
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	f022 0201 	bic.w	r2, r2, #1
 800df46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	681a      	ldr	r2, [r3, #0]
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800df56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	6819      	ldr	r1, [r3, #0]
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	683a      	ldr	r2, [r7, #0]
 800df64:	430a      	orrs	r2, r1
 800df66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	681a      	ldr	r2, [r3, #0]
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	f042 0201 	orr.w	r2, r2, #1
 800df76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2220      	movs	r2, #32
 800df7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2200      	movs	r2, #0
 800df84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800df88:	2300      	movs	r3, #0
 800df8a:	e000      	b.n	800df8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800df8c:	2302      	movs	r3, #2
  }
}
 800df8e:	4618      	mov	r0, r3
 800df90:	370c      	adds	r7, #12
 800df92:	46bd      	mov	sp, r7
 800df94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df98:	4770      	bx	lr

0800df9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800df9a:	b480      	push	{r7}
 800df9c:	b085      	sub	sp, #20
 800df9e:	af00      	add	r7, sp, #0
 800dfa0:	6078      	str	r0, [r7, #4]
 800dfa2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dfaa:	b2db      	uxtb	r3, r3
 800dfac:	2b20      	cmp	r3, #32
 800dfae:	d139      	bne.n	800e024 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dfb6:	2b01      	cmp	r3, #1
 800dfb8:	d101      	bne.n	800dfbe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800dfba:	2302      	movs	r3, #2
 800dfbc:	e033      	b.n	800e026 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2201      	movs	r2, #1
 800dfc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2224      	movs	r2, #36	; 0x24
 800dfca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	681a      	ldr	r2, [r3, #0]
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	f022 0201 	bic.w	r2, r2, #1
 800dfdc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800dfec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	021b      	lsls	r3, r3, #8
 800dff2:	68fa      	ldr	r2, [r7, #12]
 800dff4:	4313      	orrs	r3, r2
 800dff6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	68fa      	ldr	r2, [r7, #12]
 800dffe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	681a      	ldr	r2, [r3, #0]
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	f042 0201 	orr.w	r2, r2, #1
 800e00e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2220      	movs	r2, #32
 800e014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2200      	movs	r2, #0
 800e01c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e020:	2300      	movs	r3, #0
 800e022:	e000      	b.n	800e026 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800e024:	2302      	movs	r3, #2
  }
}
 800e026:	4618      	mov	r0, r3
 800e028:	3714      	adds	r7, #20
 800e02a:	46bd      	mov	sp, r7
 800e02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e030:	4770      	bx	lr
	...

0800e034 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800e034:	b480      	push	{r7}
 800e036:	b085      	sub	sp, #20
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e03c:	2300      	movs	r3, #0
 800e03e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800e040:	4b0b      	ldr	r3, [pc, #44]	; (800e070 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f003 0301 	and.w	r3, r3, #1
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d002      	beq.n	800e052 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800e04c:	2301      	movs	r3, #1
 800e04e:	73fb      	strb	r3, [r7, #15]
 800e050:	e007      	b.n	800e062 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800e052:	4b07      	ldr	r3, [pc, #28]	; (800e070 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	f023 0204 	bic.w	r2, r3, #4
 800e05a:	4905      	ldr	r1, [pc, #20]	; (800e070 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	4313      	orrs	r3, r2
 800e060:	600b      	str	r3, [r1, #0]
  }

  return status;
 800e062:	7bfb      	ldrb	r3, [r7, #15]
}
 800e064:	4618      	mov	r0, r3
 800e066:	3714      	adds	r7, #20
 800e068:	46bd      	mov	sp, r7
 800e06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06e:	4770      	bx	lr
 800e070:	40030400 	.word	0x40030400

0800e074 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800e074:	b480      	push	{r7}
 800e076:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800e078:	4b05      	ldr	r3, [pc, #20]	; (800e090 <HAL_ICACHE_Enable+0x1c>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	4a04      	ldr	r2, [pc, #16]	; (800e090 <HAL_ICACHE_Enable+0x1c>)
 800e07e:	f043 0301 	orr.w	r3, r3, #1
 800e082:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800e084:	2300      	movs	r3, #0
}
 800e086:	4618      	mov	r0, r3
 800e088:	46bd      	mov	sp, r7
 800e08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08e:	4770      	bx	lr
 800e090:	40030400 	.word	0x40030400

0800e094 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800e094:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e096:	b08b      	sub	sp, #44	; 0x2c
 800e098:	af06      	add	r7, sp, #24
 800e09a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d101      	bne.n	800e0a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	e0cb      	b.n	800e23e <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800e0ac:	b2db      	uxtb	r3, r3
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d106      	bne.n	800e0c0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f7fc fc80 	bl	800a9c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2203      	movs	r2, #3
 800e0c4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f007 f9c7 	bl	8015460 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	73fb      	strb	r3, [r7, #15]
 800e0d6:	e040      	b.n	800e15a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800e0d8:	7bfb      	ldrb	r3, [r7, #15]
 800e0da:	6879      	ldr	r1, [r7, #4]
 800e0dc:	1c5a      	adds	r2, r3, #1
 800e0de:	4613      	mov	r3, r2
 800e0e0:	009b      	lsls	r3, r3, #2
 800e0e2:	4413      	add	r3, r2
 800e0e4:	00db      	lsls	r3, r3, #3
 800e0e6:	440b      	add	r3, r1
 800e0e8:	3301      	adds	r3, #1
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800e0ee:	7bfb      	ldrb	r3, [r7, #15]
 800e0f0:	6879      	ldr	r1, [r7, #4]
 800e0f2:	1c5a      	adds	r2, r3, #1
 800e0f4:	4613      	mov	r3, r2
 800e0f6:	009b      	lsls	r3, r3, #2
 800e0f8:	4413      	add	r3, r2
 800e0fa:	00db      	lsls	r3, r3, #3
 800e0fc:	440b      	add	r3, r1
 800e0fe:	7bfa      	ldrb	r2, [r7, #15]
 800e100:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800e102:	7bfb      	ldrb	r3, [r7, #15]
 800e104:	6879      	ldr	r1, [r7, #4]
 800e106:	1c5a      	adds	r2, r3, #1
 800e108:	4613      	mov	r3, r2
 800e10a:	009b      	lsls	r3, r3, #2
 800e10c:	4413      	add	r3, r2
 800e10e:	00db      	lsls	r3, r3, #3
 800e110:	440b      	add	r3, r1
 800e112:	3303      	adds	r3, #3
 800e114:	2200      	movs	r2, #0
 800e116:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800e118:	7bfa      	ldrb	r2, [r7, #15]
 800e11a:	6879      	ldr	r1, [r7, #4]
 800e11c:	4613      	mov	r3, r2
 800e11e:	009b      	lsls	r3, r3, #2
 800e120:	4413      	add	r3, r2
 800e122:	00db      	lsls	r3, r3, #3
 800e124:	440b      	add	r3, r1
 800e126:	3338      	adds	r3, #56	; 0x38
 800e128:	2200      	movs	r2, #0
 800e12a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800e12c:	7bfa      	ldrb	r2, [r7, #15]
 800e12e:	6879      	ldr	r1, [r7, #4]
 800e130:	4613      	mov	r3, r2
 800e132:	009b      	lsls	r3, r3, #2
 800e134:	4413      	add	r3, r2
 800e136:	00db      	lsls	r3, r3, #3
 800e138:	440b      	add	r3, r1
 800e13a:	333c      	adds	r3, #60	; 0x3c
 800e13c:	2200      	movs	r2, #0
 800e13e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800e140:	7bfa      	ldrb	r2, [r7, #15]
 800e142:	6879      	ldr	r1, [r7, #4]
 800e144:	4613      	mov	r3, r2
 800e146:	009b      	lsls	r3, r3, #2
 800e148:	4413      	add	r3, r2
 800e14a:	00db      	lsls	r3, r3, #3
 800e14c:	440b      	add	r3, r1
 800e14e:	3340      	adds	r3, #64	; 0x40
 800e150:	2200      	movs	r2, #0
 800e152:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e154:	7bfb      	ldrb	r3, [r7, #15]
 800e156:	3301      	adds	r3, #1
 800e158:	73fb      	strb	r3, [r7, #15]
 800e15a:	7bfa      	ldrb	r2, [r7, #15]
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	685b      	ldr	r3, [r3, #4]
 800e160:	429a      	cmp	r2, r3
 800e162:	d3b9      	bcc.n	800e0d8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e164:	2300      	movs	r3, #0
 800e166:	73fb      	strb	r3, [r7, #15]
 800e168:	e044      	b.n	800e1f4 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800e16a:	7bfa      	ldrb	r2, [r7, #15]
 800e16c:	6879      	ldr	r1, [r7, #4]
 800e16e:	4613      	mov	r3, r2
 800e170:	009b      	lsls	r3, r3, #2
 800e172:	4413      	add	r3, r2
 800e174:	00db      	lsls	r3, r3, #3
 800e176:	440b      	add	r3, r1
 800e178:	f203 1369 	addw	r3, r3, #361	; 0x169
 800e17c:	2200      	movs	r2, #0
 800e17e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800e180:	7bfa      	ldrb	r2, [r7, #15]
 800e182:	6879      	ldr	r1, [r7, #4]
 800e184:	4613      	mov	r3, r2
 800e186:	009b      	lsls	r3, r3, #2
 800e188:	4413      	add	r3, r2
 800e18a:	00db      	lsls	r3, r3, #3
 800e18c:	440b      	add	r3, r1
 800e18e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800e192:	7bfa      	ldrb	r2, [r7, #15]
 800e194:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800e196:	7bfa      	ldrb	r2, [r7, #15]
 800e198:	6879      	ldr	r1, [r7, #4]
 800e19a:	4613      	mov	r3, r2
 800e19c:	009b      	lsls	r3, r3, #2
 800e19e:	4413      	add	r3, r2
 800e1a0:	00db      	lsls	r3, r3, #3
 800e1a2:	440b      	add	r3, r1
 800e1a4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800e1ac:	7bfa      	ldrb	r2, [r7, #15]
 800e1ae:	6879      	ldr	r1, [r7, #4]
 800e1b0:	4613      	mov	r3, r2
 800e1b2:	009b      	lsls	r3, r3, #2
 800e1b4:	4413      	add	r3, r2
 800e1b6:	00db      	lsls	r3, r3, #3
 800e1b8:	440b      	add	r3, r1
 800e1ba:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800e1be:	2200      	movs	r2, #0
 800e1c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800e1c2:	7bfa      	ldrb	r2, [r7, #15]
 800e1c4:	6879      	ldr	r1, [r7, #4]
 800e1c6:	4613      	mov	r3, r2
 800e1c8:	009b      	lsls	r3, r3, #2
 800e1ca:	4413      	add	r3, r2
 800e1cc:	00db      	lsls	r3, r3, #3
 800e1ce:	440b      	add	r3, r1
 800e1d0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800e1d8:	7bfa      	ldrb	r2, [r7, #15]
 800e1da:	6879      	ldr	r1, [r7, #4]
 800e1dc:	4613      	mov	r3, r2
 800e1de:	009b      	lsls	r3, r3, #2
 800e1e0:	4413      	add	r3, r2
 800e1e2:	00db      	lsls	r3, r3, #3
 800e1e4:	440b      	add	r3, r1
 800e1e6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e1ee:	7bfb      	ldrb	r3, [r7, #15]
 800e1f0:	3301      	adds	r3, #1
 800e1f2:	73fb      	strb	r3, [r7, #15]
 800e1f4:	7bfa      	ldrb	r2, [r7, #15]
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	685b      	ldr	r3, [r3, #4]
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	d3b5      	bcc.n	800e16a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	603b      	str	r3, [r7, #0]
 800e204:	687e      	ldr	r6, [r7, #4]
 800e206:	466d      	mov	r5, sp
 800e208:	f106 0410 	add.w	r4, r6, #16
 800e20c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e20e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e210:	6823      	ldr	r3, [r4, #0]
 800e212:	602b      	str	r3, [r5, #0]
 800e214:	1d33      	adds	r3, r6, #4
 800e216:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e218:	6838      	ldr	r0, [r7, #0]
 800e21a:	f007 f93c 	bl	8015496 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2200      	movs	r2, #0
 800e222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2201      	movs	r2, #1
 800e22a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	69db      	ldr	r3, [r3, #28]
 800e232:	2b01      	cmp	r3, #1
 800e234:	d102      	bne.n	800e23c <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f000 f805 	bl	800e246 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800e23c:	2300      	movs	r3, #0
}
 800e23e:	4618      	mov	r0, r3
 800e240:	3714      	adds	r7, #20
 800e242:	46bd      	mov	sp, r7
 800e244:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e246 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800e246:	b480      	push	{r7}
 800e248:	b085      	sub	sp, #20
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2201      	movs	r2, #1
 800e258:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2200      	movs	r2, #0
 800e260:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800e26a:	b29b      	uxth	r3, r3
 800e26c:	f043 0301 	orr.w	r3, r3, #1
 800e270:	b29a      	uxth	r2, r3
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800e27e:	b29b      	uxth	r3, r3
 800e280:	f043 0302 	orr.w	r3, r3, #2
 800e284:	b29a      	uxth	r2, r3
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800e28c:	2300      	movs	r3, #0
}
 800e28e:	4618      	mov	r0, r3
 800e290:	3714      	adds	r7, #20
 800e292:	46bd      	mov	sp, r7
 800e294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e298:	4770      	bx	lr
	...

0800e29c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800e29c:	b480      	push	{r7}
 800e29e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e2a0:	4b05      	ldr	r3, [pc, #20]	; (800e2b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	4a04      	ldr	r2, [pc, #16]	; (800e2b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800e2a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e2aa:	6013      	str	r3, [r2, #0]
}
 800e2ac:	bf00      	nop
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b4:	4770      	bx	lr
 800e2b6:	bf00      	nop
 800e2b8:	40007000 	.word	0x40007000

0800e2bc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800e2bc:	b480      	push	{r7}
 800e2be:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800e2c0:	4b04      	ldr	r3, [pc, #16]	; (800e2d4 <HAL_PWREx_GetVoltageRange+0x18>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d0:	4770      	bx	lr
 800e2d2:	bf00      	nop
 800e2d4:	40007000 	.word	0x40007000

0800e2d8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b084      	sub	sp, #16
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 800e2e0:	4b27      	ldr	r3, [pc, #156]	; (800e380 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e2e8:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800e2ea:	f000 f861 	bl	800e3b0 <HAL_PWREx_SMPS_GetEffectiveMode>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e2f4:	d101      	bne.n	800e2fa <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	e03e      	b.n	800e378 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 800e2fa:	4b21      	ldr	r3, [pc, #132]	; (800e380 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800e2fc:	68db      	ldr	r3, [r3, #12]
 800e2fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e302:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e306:	d101      	bne.n	800e30c <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 800e308:	2301      	movs	r3, #1
 800e30a:	e035      	b.n	800e378 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800e30c:	68ba      	ldr	r2, [r7, #8]
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	429a      	cmp	r2, r3
 800e312:	d101      	bne.n	800e318 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 800e314:	2300      	movs	r3, #0
 800e316:	e02f      	b.n	800e378 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800e318:	4b19      	ldr	r3, [pc, #100]	; (800e380 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e320:	4917      	ldr	r1, [pc, #92]	; (800e380 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	4313      	orrs	r3, r2
 800e326:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 800e328:	4b16      	ldr	r3, [pc, #88]	; (800e384 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	095b      	lsrs	r3, r3, #5
 800e32e:	4a16      	ldr	r2, [pc, #88]	; (800e388 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800e330:	fba2 2303 	umull	r2, r3, r2, r3
 800e334:	09db      	lsrs	r3, r3, #7
 800e336:	2232      	movs	r2, #50	; 0x32
 800e338:	fb02 f303 	mul.w	r3, r2, r3
 800e33c:	4a13      	ldr	r2, [pc, #76]	; (800e38c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800e33e:	fba2 2303 	umull	r2, r3, r2, r3
 800e342:	08db      	lsrs	r3, r3, #3
 800e344:	3301      	adds	r3, #1
 800e346:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800e348:	e002      	b.n	800e350 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	3b01      	subs	r3, #1
 800e34e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800e350:	4b0b      	ldr	r3, [pc, #44]	; (800e380 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800e352:	695b      	ldr	r3, [r3, #20]
 800e354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e35c:	d102      	bne.n	800e364 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d1f2      	bne.n	800e34a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800e364:	4b06      	ldr	r3, [pc, #24]	; (800e380 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800e366:	695b      	ldr	r3, [r3, #20]
 800e368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e36c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e370:	d101      	bne.n	800e376 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800e372:	2303      	movs	r3, #3
 800e374:	e000      	b.n	800e378 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 800e376:	2300      	movs	r3, #0
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3710      	adds	r7, #16
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}
 800e380:	40007000 	.word	0x40007000
 800e384:	20000090 	.word	0x20000090
 800e388:	0a7c5ac5 	.word	0x0a7c5ac5
 800e38c:	cccccccd 	.word	0xcccccccd

0800e390 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800e390:	b480      	push	{r7}
 800e392:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800e394:	4b05      	ldr	r3, [pc, #20]	; (800e3ac <HAL_PWREx_EnableVddIO2+0x1c>)
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	4a04      	ldr	r2, [pc, #16]	; (800e3ac <HAL_PWREx_EnableVddIO2+0x1c>)
 800e39a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e39e:	6053      	str	r3, [r2, #4]
}
 800e3a0:	bf00      	nop
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a8:	4770      	bx	lr
 800e3aa:	bf00      	nop
 800e3ac:	40007000 	.word	0x40007000

0800e3b0 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	b083      	sub	sp, #12
 800e3b4:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800e3b6:	4b0f      	ldr	r3, [pc, #60]	; (800e3f4 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 800e3b8:	691b      	ldr	r3, [r3, #16]
 800e3ba:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d003      	beq.n	800e3ce <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800e3c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e3ca:	607b      	str	r3, [r7, #4]
 800e3cc:	e00a      	b.n	800e3e4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d103      	bne.n	800e3e0 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 800e3d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e3dc:	607b      	str	r3, [r7, #4]
 800e3de:	e001      	b.n	800e3e4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	607b      	str	r3, [r7, #4]
  }

  return mode;
 800e3e4:	687b      	ldr	r3, [r7, #4]
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	370c      	adds	r7, #12
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f0:	4770      	bx	lr
 800e3f2:	bf00      	nop
 800e3f4:	40007000 	.word	0x40007000

0800e3f8 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b088      	sub	sp, #32
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d102      	bne.n	800e40c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800e406:	2301      	movs	r3, #1
 800e408:	f000 bcc2 	b.w	800ed90 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e40c:	4b99      	ldr	r3, [pc, #612]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e40e:	689b      	ldr	r3, [r3, #8]
 800e410:	f003 030c 	and.w	r3, r3, #12
 800e414:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e416:	4b97      	ldr	r3, [pc, #604]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e418:	68db      	ldr	r3, [r3, #12]
 800e41a:	f003 0303 	and.w	r3, r3, #3
 800e41e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	f003 0310 	and.w	r3, r3, #16
 800e428:	2b00      	cmp	r3, #0
 800e42a:	f000 80e9 	beq.w	800e600 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800e42e:	69bb      	ldr	r3, [r7, #24]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d006      	beq.n	800e442 <HAL_RCC_OscConfig+0x4a>
 800e434:	69bb      	ldr	r3, [r7, #24]
 800e436:	2b0c      	cmp	r3, #12
 800e438:	f040 8083 	bne.w	800e542 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800e43c:	697b      	ldr	r3, [r7, #20]
 800e43e:	2b01      	cmp	r3, #1
 800e440:	d17f      	bne.n	800e542 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800e442:	4b8c      	ldr	r3, [pc, #560]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	f003 0302 	and.w	r3, r3, #2
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d006      	beq.n	800e45c <HAL_RCC_OscConfig+0x64>
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	69db      	ldr	r3, [r3, #28]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d102      	bne.n	800e45c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800e456:	2301      	movs	r3, #1
 800e458:	f000 bc9a 	b.w	800ed90 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e460:	4b84      	ldr	r3, [pc, #528]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	f003 0308 	and.w	r3, r3, #8
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d004      	beq.n	800e476 <HAL_RCC_OscConfig+0x7e>
 800e46c:	4b81      	ldr	r3, [pc, #516]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e474:	e005      	b.n	800e482 <HAL_RCC_OscConfig+0x8a>
 800e476:	4b7f      	ldr	r3, [pc, #508]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e47c:	091b      	lsrs	r3, r3, #4
 800e47e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e482:	4293      	cmp	r3, r2
 800e484:	d224      	bcs.n	800e4d0 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e48a:	4618      	mov	r0, r3
 800e48c:	f000 fece 	bl	800f22c <RCC_SetFlashLatencyFromMSIRange>
 800e490:	4603      	mov	r3, r0
 800e492:	2b00      	cmp	r3, #0
 800e494:	d002      	beq.n	800e49c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 800e496:	2301      	movs	r3, #1
 800e498:	f000 bc7a 	b.w	800ed90 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e49c:	4b75      	ldr	r3, [pc, #468]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	4a74      	ldr	r2, [pc, #464]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e4a2:	f043 0308 	orr.w	r3, r3, #8
 800e4a6:	6013      	str	r3, [r2, #0]
 800e4a8:	4b72      	ldr	r3, [pc, #456]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4b4:	496f      	ldr	r1, [pc, #444]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e4b6:	4313      	orrs	r3, r2
 800e4b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e4ba:	4b6e      	ldr	r3, [pc, #440]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e4bc:	685b      	ldr	r3, [r3, #4]
 800e4be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6a1b      	ldr	r3, [r3, #32]
 800e4c6:	021b      	lsls	r3, r3, #8
 800e4c8:	496a      	ldr	r1, [pc, #424]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e4ca:	4313      	orrs	r3, r2
 800e4cc:	604b      	str	r3, [r1, #4]
 800e4ce:	e026      	b.n	800e51e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e4d0:	4b68      	ldr	r3, [pc, #416]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	4a67      	ldr	r2, [pc, #412]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e4d6:	f043 0308 	orr.w	r3, r3, #8
 800e4da:	6013      	str	r3, [r2, #0]
 800e4dc:	4b65      	ldr	r3, [pc, #404]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4e8:	4962      	ldr	r1, [pc, #392]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e4ea:	4313      	orrs	r3, r2
 800e4ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e4ee:	4b61      	ldr	r3, [pc, #388]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e4f0:	685b      	ldr	r3, [r3, #4]
 800e4f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6a1b      	ldr	r3, [r3, #32]
 800e4fa:	021b      	lsls	r3, r3, #8
 800e4fc:	495d      	ldr	r1, [pc, #372]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e4fe:	4313      	orrs	r3, r2
 800e500:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800e502:	69bb      	ldr	r3, [r7, #24]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d10a      	bne.n	800e51e <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e50c:	4618      	mov	r0, r3
 800e50e:	f000 fe8d 	bl	800f22c <RCC_SetFlashLatencyFromMSIRange>
 800e512:	4603      	mov	r3, r0
 800e514:	2b00      	cmp	r3, #0
 800e516:	d002      	beq.n	800e51e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800e518:	2301      	movs	r3, #1
 800e51a:	f000 bc39 	b.w	800ed90 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800e51e:	f000 fe17 	bl	800f150 <HAL_RCC_GetHCLKFreq>
 800e522:	4603      	mov	r3, r0
 800e524:	4a54      	ldr	r2, [pc, #336]	; (800e678 <HAL_RCC_OscConfig+0x280>)
 800e526:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800e528:	4b54      	ldr	r3, [pc, #336]	; (800e67c <HAL_RCC_OscConfig+0x284>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	4618      	mov	r0, r3
 800e52e:	f7fc faa7 	bl	800aa80 <HAL_InitTick>
 800e532:	4603      	mov	r3, r0
 800e534:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800e536:	7bfb      	ldrb	r3, [r7, #15]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d060      	beq.n	800e5fe <HAL_RCC_OscConfig+0x206>
        {
          return status;
 800e53c:	7bfb      	ldrb	r3, [r7, #15]
 800e53e:	f000 bc27 	b.w	800ed90 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	69db      	ldr	r3, [r3, #28]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d039      	beq.n	800e5be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800e54a:	4b4a      	ldr	r3, [pc, #296]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	4a49      	ldr	r2, [pc, #292]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e550:	f043 0301 	orr.w	r3, r3, #1
 800e554:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800e556:	f7fc fd3b 	bl	800afd0 <HAL_GetTick>
 800e55a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800e55c:	e00f      	b.n	800e57e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e55e:	f7fc fd37 	bl	800afd0 <HAL_GetTick>
 800e562:	4602      	mov	r2, r0
 800e564:	693b      	ldr	r3, [r7, #16]
 800e566:	1ad3      	subs	r3, r2, r3
 800e568:	2b02      	cmp	r3, #2
 800e56a:	d908      	bls.n	800e57e <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800e56c:	4b41      	ldr	r3, [pc, #260]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	f003 0302 	and.w	r3, r3, #2
 800e574:	2b00      	cmp	r3, #0
 800e576:	d102      	bne.n	800e57e <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 800e578:	2303      	movs	r3, #3
 800e57a:	f000 bc09 	b.w	800ed90 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800e57e:	4b3d      	ldr	r3, [pc, #244]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	f003 0302 	and.w	r3, r3, #2
 800e586:	2b00      	cmp	r3, #0
 800e588:	d0e9      	beq.n	800e55e <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e58a:	4b3a      	ldr	r3, [pc, #232]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	4a39      	ldr	r2, [pc, #228]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e590:	f043 0308 	orr.w	r3, r3, #8
 800e594:	6013      	str	r3, [r2, #0]
 800e596:	4b37      	ldr	r3, [pc, #220]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5a2:	4934      	ldr	r1, [pc, #208]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e5a4:	4313      	orrs	r3, r2
 800e5a6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e5a8:	4b32      	ldr	r3, [pc, #200]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e5aa:	685b      	ldr	r3, [r3, #4]
 800e5ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	6a1b      	ldr	r3, [r3, #32]
 800e5b4:	021b      	lsls	r3, r3, #8
 800e5b6:	492f      	ldr	r1, [pc, #188]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e5b8:	4313      	orrs	r3, r2
 800e5ba:	604b      	str	r3, [r1, #4]
 800e5bc:	e020      	b.n	800e600 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800e5be:	4b2d      	ldr	r3, [pc, #180]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	4a2c      	ldr	r2, [pc, #176]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e5c4:	f023 0301 	bic.w	r3, r3, #1
 800e5c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800e5ca:	f7fc fd01 	bl	800afd0 <HAL_GetTick>
 800e5ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800e5d0:	e00e      	b.n	800e5f0 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e5d2:	f7fc fcfd 	bl	800afd0 <HAL_GetTick>
 800e5d6:	4602      	mov	r2, r0
 800e5d8:	693b      	ldr	r3, [r7, #16]
 800e5da:	1ad3      	subs	r3, r2, r3
 800e5dc:	2b02      	cmp	r3, #2
 800e5de:	d907      	bls.n	800e5f0 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800e5e0:	4b24      	ldr	r3, [pc, #144]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	f003 0302 	and.w	r3, r3, #2
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d001      	beq.n	800e5f0 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 800e5ec:	2303      	movs	r3, #3
 800e5ee:	e3cf      	b.n	800ed90 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800e5f0:	4b20      	ldr	r3, [pc, #128]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	f003 0302 	and.w	r3, r3, #2
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d1ea      	bne.n	800e5d2 <HAL_RCC_OscConfig+0x1da>
 800e5fc:	e000      	b.n	800e600 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800e5fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	f003 0301 	and.w	r3, r3, #1
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d07e      	beq.n	800e70a <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800e60c:	69bb      	ldr	r3, [r7, #24]
 800e60e:	2b08      	cmp	r3, #8
 800e610:	d005      	beq.n	800e61e <HAL_RCC_OscConfig+0x226>
 800e612:	69bb      	ldr	r3, [r7, #24]
 800e614:	2b0c      	cmp	r3, #12
 800e616:	d10e      	bne.n	800e636 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	2b03      	cmp	r3, #3
 800e61c:	d10b      	bne.n	800e636 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e61e:	4b15      	ldr	r3, [pc, #84]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e626:	2b00      	cmp	r3, #0
 800e628:	d06e      	beq.n	800e708 <HAL_RCC_OscConfig+0x310>
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	685b      	ldr	r3, [r3, #4]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d16a      	bne.n	800e708 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800e632:	2301      	movs	r3, #1
 800e634:	e3ac      	b.n	800ed90 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	685b      	ldr	r3, [r3, #4]
 800e63a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e63e:	d106      	bne.n	800e64e <HAL_RCC_OscConfig+0x256>
 800e640:	4b0c      	ldr	r3, [pc, #48]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	4a0b      	ldr	r2, [pc, #44]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e64a:	6013      	str	r3, [r2, #0]
 800e64c:	e024      	b.n	800e698 <HAL_RCC_OscConfig+0x2a0>
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	685b      	ldr	r3, [r3, #4]
 800e652:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e656:	d113      	bne.n	800e680 <HAL_RCC_OscConfig+0x288>
 800e658:	4b06      	ldr	r3, [pc, #24]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	4a05      	ldr	r2, [pc, #20]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e65e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e662:	6013      	str	r3, [r2, #0]
 800e664:	4b03      	ldr	r3, [pc, #12]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	4a02      	ldr	r2, [pc, #8]	; (800e674 <HAL_RCC_OscConfig+0x27c>)
 800e66a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e66e:	6013      	str	r3, [r2, #0]
 800e670:	e012      	b.n	800e698 <HAL_RCC_OscConfig+0x2a0>
 800e672:	bf00      	nop
 800e674:	40021000 	.word	0x40021000
 800e678:	20000090 	.word	0x20000090
 800e67c:	20000094 	.word	0x20000094
 800e680:	4b8b      	ldr	r3, [pc, #556]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	4a8a      	ldr	r2, [pc, #552]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e68a:	6013      	str	r3, [r2, #0]
 800e68c:	4b88      	ldr	r3, [pc, #544]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	4a87      	ldr	r2, [pc, #540]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	685b      	ldr	r3, [r3, #4]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d019      	beq.n	800e6d4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e6a0:	f7fc fc96 	bl	800afd0 <HAL_GetTick>
 800e6a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800e6a6:	e00e      	b.n	800e6c6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e6a8:	f7fc fc92 	bl	800afd0 <HAL_GetTick>
 800e6ac:	4602      	mov	r2, r0
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	1ad3      	subs	r3, r2, r3
 800e6b2:	2b64      	cmp	r3, #100	; 0x64
 800e6b4:	d907      	bls.n	800e6c6 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800e6b6:	4b7e      	ldr	r3, [pc, #504]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d101      	bne.n	800e6c6 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800e6c2:	2303      	movs	r3, #3
 800e6c4:	e364      	b.n	800ed90 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800e6c6:	4b7a      	ldr	r3, [pc, #488]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d0ea      	beq.n	800e6a8 <HAL_RCC_OscConfig+0x2b0>
 800e6d2:	e01a      	b.n	800e70a <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e6d4:	f7fc fc7c 	bl	800afd0 <HAL_GetTick>
 800e6d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800e6da:	e00e      	b.n	800e6fa <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e6dc:	f7fc fc78 	bl	800afd0 <HAL_GetTick>
 800e6e0:	4602      	mov	r2, r0
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	1ad3      	subs	r3, r2, r3
 800e6e6:	2b64      	cmp	r3, #100	; 0x64
 800e6e8:	d907      	bls.n	800e6fa <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800e6ea:	4b71      	ldr	r3, [pc, #452]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d001      	beq.n	800e6fa <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800e6f6:	2303      	movs	r3, #3
 800e6f8:	e34a      	b.n	800ed90 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800e6fa:	4b6d      	ldr	r3, [pc, #436]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e702:	2b00      	cmp	r3, #0
 800e704:	d1ea      	bne.n	800e6dc <HAL_RCC_OscConfig+0x2e4>
 800e706:	e000      	b.n	800e70a <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	f003 0302 	and.w	r3, r3, #2
 800e712:	2b00      	cmp	r3, #0
 800e714:	d06c      	beq.n	800e7f0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800e716:	69bb      	ldr	r3, [r7, #24]
 800e718:	2b04      	cmp	r3, #4
 800e71a:	d005      	beq.n	800e728 <HAL_RCC_OscConfig+0x330>
 800e71c:	69bb      	ldr	r3, [r7, #24]
 800e71e:	2b0c      	cmp	r3, #12
 800e720:	d119      	bne.n	800e756 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	2b02      	cmp	r3, #2
 800e726:	d116      	bne.n	800e756 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e728:	4b61      	ldr	r3, [pc, #388]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e730:	2b00      	cmp	r3, #0
 800e732:	d005      	beq.n	800e740 <HAL_RCC_OscConfig+0x348>
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	68db      	ldr	r3, [r3, #12]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d101      	bne.n	800e740 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 800e73c:	2301      	movs	r3, #1
 800e73e:	e327      	b.n	800ed90 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e740:	4b5b      	ldr	r3, [pc, #364]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e742:	685b      	ldr	r3, [r3, #4]
 800e744:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	691b      	ldr	r3, [r3, #16]
 800e74c:	061b      	lsls	r3, r3, #24
 800e74e:	4958      	ldr	r1, [pc, #352]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e750:	4313      	orrs	r3, r2
 800e752:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e754:	e04c      	b.n	800e7f0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	68db      	ldr	r3, [r3, #12]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d029      	beq.n	800e7b2 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e75e:	4b54      	ldr	r3, [pc, #336]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	4a53      	ldr	r2, [pc, #332]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e76a:	f7fc fc31 	bl	800afd0 <HAL_GetTick>
 800e76e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e770:	e00e      	b.n	800e790 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e772:	f7fc fc2d 	bl	800afd0 <HAL_GetTick>
 800e776:	4602      	mov	r2, r0
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	1ad3      	subs	r3, r2, r3
 800e77c:	2b02      	cmp	r3, #2
 800e77e:	d907      	bls.n	800e790 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e780:	4b4b      	ldr	r3, [pc, #300]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d101      	bne.n	800e790 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 800e78c:	2303      	movs	r3, #3
 800e78e:	e2ff      	b.n	800ed90 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e790:	4b47      	ldr	r3, [pc, #284]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d0ea      	beq.n	800e772 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e79c:	4b44      	ldr	r3, [pc, #272]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	691b      	ldr	r3, [r3, #16]
 800e7a8:	061b      	lsls	r3, r3, #24
 800e7aa:	4941      	ldr	r1, [pc, #260]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e7ac:	4313      	orrs	r3, r2
 800e7ae:	604b      	str	r3, [r1, #4]
 800e7b0:	e01e      	b.n	800e7f0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e7b2:	4b3f      	ldr	r3, [pc, #252]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	4a3e      	ldr	r2, [pc, #248]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e7b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e7bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e7be:	f7fc fc07 	bl	800afd0 <HAL_GetTick>
 800e7c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800e7c4:	e00e      	b.n	800e7e4 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e7c6:	f7fc fc03 	bl	800afd0 <HAL_GetTick>
 800e7ca:	4602      	mov	r2, r0
 800e7cc:	693b      	ldr	r3, [r7, #16]
 800e7ce:	1ad3      	subs	r3, r2, r3
 800e7d0:	2b02      	cmp	r3, #2
 800e7d2:	d907      	bls.n	800e7e4 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800e7d4:	4b36      	ldr	r3, [pc, #216]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d001      	beq.n	800e7e4 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 800e7e0:	2303      	movs	r3, #3
 800e7e2:	e2d5      	b.n	800ed90 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800e7e4:	4b32      	ldr	r3, [pc, #200]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d1ea      	bne.n	800e7c6 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	f003 0308 	and.w	r3, r3, #8
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d062      	beq.n	800e8c2 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	695b      	ldr	r3, [r3, #20]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d038      	beq.n	800e876 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	699b      	ldr	r3, [r3, #24]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d108      	bne.n	800e81e <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800e80c:	4b28      	ldr	r3, [pc, #160]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e80e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e812:	4a27      	ldr	r2, [pc, #156]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e814:	f023 0310 	bic.w	r3, r3, #16
 800e818:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800e81c:	e007      	b.n	800e82e <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800e81e:	4b24      	ldr	r3, [pc, #144]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e820:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e824:	4a22      	ldr	r2, [pc, #136]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e826:	f043 0310 	orr.w	r3, r3, #16
 800e82a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e82e:	4b20      	ldr	r3, [pc, #128]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e830:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e834:	4a1e      	ldr	r2, [pc, #120]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e836:	f043 0301 	orr.w	r3, r3, #1
 800e83a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e83e:	f7fc fbc7 	bl	800afd0 <HAL_GetTick>
 800e842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800e844:	e00f      	b.n	800e866 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e846:	f7fc fbc3 	bl	800afd0 <HAL_GetTick>
 800e84a:	4602      	mov	r2, r0
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	1ad3      	subs	r3, r2, r3
 800e850:	2b07      	cmp	r3, #7
 800e852:	d908      	bls.n	800e866 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800e854:	4b16      	ldr	r3, [pc, #88]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e85a:	f003 0302 	and.w	r3, r3, #2
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d101      	bne.n	800e866 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800e862:	2303      	movs	r3, #3
 800e864:	e294      	b.n	800ed90 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800e866:	4b12      	ldr	r3, [pc, #72]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e868:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e86c:	f003 0302 	and.w	r3, r3, #2
 800e870:	2b00      	cmp	r3, #0
 800e872:	d0e8      	beq.n	800e846 <HAL_RCC_OscConfig+0x44e>
 800e874:	e025      	b.n	800e8c2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e876:	4b0e      	ldr	r3, [pc, #56]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e87c:	4a0c      	ldr	r2, [pc, #48]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e87e:	f023 0301 	bic.w	r3, r3, #1
 800e882:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e886:	f7fc fba3 	bl	800afd0 <HAL_GetTick>
 800e88a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800e88c:	e012      	b.n	800e8b4 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e88e:	f7fc fb9f 	bl	800afd0 <HAL_GetTick>
 800e892:	4602      	mov	r2, r0
 800e894:	693b      	ldr	r3, [r7, #16]
 800e896:	1ad3      	subs	r3, r2, r3
 800e898:	2b07      	cmp	r3, #7
 800e89a:	d90b      	bls.n	800e8b4 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800e89c:	4b04      	ldr	r3, [pc, #16]	; (800e8b0 <HAL_RCC_OscConfig+0x4b8>)
 800e89e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e8a2:	f003 0302 	and.w	r3, r3, #2
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d004      	beq.n	800e8b4 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800e8aa:	2303      	movs	r3, #3
 800e8ac:	e270      	b.n	800ed90 <HAL_RCC_OscConfig+0x998>
 800e8ae:	bf00      	nop
 800e8b0:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800e8b4:	4ba8      	ldr	r3, [pc, #672]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800e8b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e8ba:	f003 0302 	and.w	r3, r3, #2
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d1e5      	bne.n	800e88e <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	f003 0304 	and.w	r3, r3, #4
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	f000 812d 	beq.w	800eb2a <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800e8d4:	4ba0      	ldr	r3, [pc, #640]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800e8d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d10d      	bne.n	800e8fc <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e8e0:	4b9d      	ldr	r3, [pc, #628]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800e8e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8e4:	4a9c      	ldr	r2, [pc, #624]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800e8e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e8ea:	6593      	str	r3, [r2, #88]	; 0x58
 800e8ec:	4b9a      	ldr	r3, [pc, #616]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800e8ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e8f4:	60bb      	str	r3, [r7, #8]
 800e8f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e8fc:	4b97      	ldr	r3, [pc, #604]	; (800eb5c <HAL_RCC_OscConfig+0x764>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e904:	2b00      	cmp	r3, #0
 800e906:	d11e      	bne.n	800e946 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e908:	4b94      	ldr	r3, [pc, #592]	; (800eb5c <HAL_RCC_OscConfig+0x764>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	4a93      	ldr	r2, [pc, #588]	; (800eb5c <HAL_RCC_OscConfig+0x764>)
 800e90e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e912:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e914:	f7fc fb5c 	bl	800afd0 <HAL_GetTick>
 800e918:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e91a:	e00e      	b.n	800e93a <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e91c:	f7fc fb58 	bl	800afd0 <HAL_GetTick>
 800e920:	4602      	mov	r2, r0
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	1ad3      	subs	r3, r2, r3
 800e926:	2b02      	cmp	r3, #2
 800e928:	d907      	bls.n	800e93a <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e92a:	4b8c      	ldr	r3, [pc, #560]	; (800eb5c <HAL_RCC_OscConfig+0x764>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e932:	2b00      	cmp	r3, #0
 800e934:	d101      	bne.n	800e93a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800e936:	2303      	movs	r3, #3
 800e938:	e22a      	b.n	800ed90 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e93a:	4b88      	ldr	r3, [pc, #544]	; (800eb5c <HAL_RCC_OscConfig+0x764>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e942:	2b00      	cmp	r3, #0
 800e944:	d0ea      	beq.n	800e91c <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	689b      	ldr	r3, [r3, #8]
 800e94a:	f003 0301 	and.w	r3, r3, #1
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d01f      	beq.n	800e992 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	689b      	ldr	r3, [r3, #8]
 800e956:	f003 0304 	and.w	r3, r3, #4
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d010      	beq.n	800e980 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800e95e:	4b7e      	ldr	r3, [pc, #504]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800e960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e964:	4a7c      	ldr	r2, [pc, #496]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800e966:	f043 0304 	orr.w	r3, r3, #4
 800e96a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800e96e:	4b7a      	ldr	r3, [pc, #488]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800e970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e974:	4a78      	ldr	r2, [pc, #480]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800e976:	f043 0301 	orr.w	r3, r3, #1
 800e97a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800e97e:	e018      	b.n	800e9b2 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800e980:	4b75      	ldr	r3, [pc, #468]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800e982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e986:	4a74      	ldr	r2, [pc, #464]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800e988:	f043 0301 	orr.w	r3, r3, #1
 800e98c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800e990:	e00f      	b.n	800e9b2 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800e992:	4b71      	ldr	r3, [pc, #452]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800e994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e998:	4a6f      	ldr	r2, [pc, #444]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800e99a:	f023 0301 	bic.w	r3, r3, #1
 800e99e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800e9a2:	4b6d      	ldr	r3, [pc, #436]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800e9a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e9a8:	4a6b      	ldr	r2, [pc, #428]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800e9aa:	f023 0304 	bic.w	r3, r3, #4
 800e9ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	689b      	ldr	r3, [r3, #8]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d068      	beq.n	800ea8c <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e9ba:	f7fc fb09 	bl	800afd0 <HAL_GetTick>
 800e9be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e9c0:	e011      	b.n	800e9e6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e9c2:	f7fc fb05 	bl	800afd0 <HAL_GetTick>
 800e9c6:	4602      	mov	r2, r0
 800e9c8:	693b      	ldr	r3, [r7, #16]
 800e9ca:	1ad3      	subs	r3, r2, r3
 800e9cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e9d0:	4293      	cmp	r3, r2
 800e9d2:	d908      	bls.n	800e9e6 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e9d4:	4b60      	ldr	r3, [pc, #384]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800e9d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e9da:	f003 0302 	and.w	r3, r3, #2
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d101      	bne.n	800e9e6 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 800e9e2:	2303      	movs	r3, #3
 800e9e4:	e1d4      	b.n	800ed90 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e9e6:	4b5c      	ldr	r3, [pc, #368]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800e9e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e9ec:	f003 0302 	and.w	r3, r3, #2
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d0e6      	beq.n	800e9c2 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	689b      	ldr	r3, [r3, #8]
 800e9f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d022      	beq.n	800ea46 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800ea00:	4b55      	ldr	r3, [pc, #340]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800ea02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ea06:	4a54      	ldr	r2, [pc, #336]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800ea08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800ea10:	e011      	b.n	800ea36 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ea12:	f7fc fadd 	bl	800afd0 <HAL_GetTick>
 800ea16:	4602      	mov	r2, r0
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	1ad3      	subs	r3, r2, r3
 800ea1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea20:	4293      	cmp	r3, r2
 800ea22:	d908      	bls.n	800ea36 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800ea24:	4b4c      	ldr	r3, [pc, #304]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800ea26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ea2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d101      	bne.n	800ea36 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 800ea32:	2303      	movs	r3, #3
 800ea34:	e1ac      	b.n	800ed90 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800ea36:	4b48      	ldr	r3, [pc, #288]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800ea38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ea3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d0e6      	beq.n	800ea12 <HAL_RCC_OscConfig+0x61a>
 800ea44:	e068      	b.n	800eb18 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800ea46:	4b44      	ldr	r3, [pc, #272]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800ea48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ea4c:	4a42      	ldr	r2, [pc, #264]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800ea4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ea52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800ea56:	e011      	b.n	800ea7c <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ea58:	f7fc faba 	bl	800afd0 <HAL_GetTick>
 800ea5c:	4602      	mov	r2, r0
 800ea5e:	693b      	ldr	r3, [r7, #16]
 800ea60:	1ad3      	subs	r3, r2, r3
 800ea62:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea66:	4293      	cmp	r3, r2
 800ea68:	d908      	bls.n	800ea7c <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800ea6a:	4b3b      	ldr	r3, [pc, #236]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800ea6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ea70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d001      	beq.n	800ea7c <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 800ea78:	2303      	movs	r3, #3
 800ea7a:	e189      	b.n	800ed90 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800ea7c:	4b36      	ldr	r3, [pc, #216]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800ea7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ea82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d1e6      	bne.n	800ea58 <HAL_RCC_OscConfig+0x660>
 800ea8a:	e045      	b.n	800eb18 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ea8c:	f7fc faa0 	bl	800afd0 <HAL_GetTick>
 800ea90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ea92:	e011      	b.n	800eab8 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ea94:	f7fc fa9c 	bl	800afd0 <HAL_GetTick>
 800ea98:	4602      	mov	r2, r0
 800ea9a:	693b      	ldr	r3, [r7, #16]
 800ea9c:	1ad3      	subs	r3, r2, r3
 800ea9e:	f241 3288 	movw	r2, #5000	; 0x1388
 800eaa2:	4293      	cmp	r3, r2
 800eaa4:	d908      	bls.n	800eab8 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800eaa6:	4b2c      	ldr	r3, [pc, #176]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800eaa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eaac:	f003 0302 	and.w	r3, r3, #2
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d001      	beq.n	800eab8 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 800eab4:	2303      	movs	r3, #3
 800eab6:	e16b      	b.n	800ed90 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800eab8:	4b27      	ldr	r3, [pc, #156]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800eaba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eabe:	f003 0302 	and.w	r3, r3, #2
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d1e6      	bne.n	800ea94 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800eac6:	4b24      	ldr	r3, [pc, #144]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800eac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eacc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d021      	beq.n	800eb18 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800ead4:	4b20      	ldr	r3, [pc, #128]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800ead6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eada:	4a1f      	ldr	r2, [pc, #124]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800eadc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800eae4:	e011      	b.n	800eb0a <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eae6:	f7fc fa73 	bl	800afd0 <HAL_GetTick>
 800eaea:	4602      	mov	r2, r0
 800eaec:	693b      	ldr	r3, [r7, #16]
 800eaee:	1ad3      	subs	r3, r2, r3
 800eaf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800eaf4:	4293      	cmp	r3, r2
 800eaf6:	d908      	bls.n	800eb0a <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800eaf8:	4b17      	ldr	r3, [pc, #92]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800eafa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eafe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d001      	beq.n	800eb0a <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800eb06:	2303      	movs	r3, #3
 800eb08:	e142      	b.n	800ed90 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800eb0a:	4b13      	ldr	r3, [pc, #76]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800eb0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d1e6      	bne.n	800eae6 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800eb18:	7ffb      	ldrb	r3, [r7, #31]
 800eb1a:	2b01      	cmp	r3, #1
 800eb1c:	d105      	bne.n	800eb2a <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800eb1e:	4b0e      	ldr	r3, [pc, #56]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800eb20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb22:	4a0d      	ldr	r2, [pc, #52]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800eb24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800eb28:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	f003 0320 	and.w	r3, r3, #32
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d04f      	beq.n	800ebd6 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d028      	beq.n	800eb90 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800eb3e:	4b06      	ldr	r3, [pc, #24]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800eb40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800eb44:	4a04      	ldr	r2, [pc, #16]	; (800eb58 <HAL_RCC_OscConfig+0x760>)
 800eb46:	f043 0301 	orr.w	r3, r3, #1
 800eb4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eb4e:	f7fc fa3f 	bl	800afd0 <HAL_GetTick>
 800eb52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800eb54:	e014      	b.n	800eb80 <HAL_RCC_OscConfig+0x788>
 800eb56:	bf00      	nop
 800eb58:	40021000 	.word	0x40021000
 800eb5c:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800eb60:	f7fc fa36 	bl	800afd0 <HAL_GetTick>
 800eb64:	4602      	mov	r2, r0
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	1ad3      	subs	r3, r2, r3
 800eb6a:	2b02      	cmp	r3, #2
 800eb6c:	d908      	bls.n	800eb80 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800eb6e:	4b8a      	ldr	r3, [pc, #552]	; (800ed98 <HAL_RCC_OscConfig+0x9a0>)
 800eb70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800eb74:	f003 0302 	and.w	r3, r3, #2
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d101      	bne.n	800eb80 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800eb7c:	2303      	movs	r3, #3
 800eb7e:	e107      	b.n	800ed90 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800eb80:	4b85      	ldr	r3, [pc, #532]	; (800ed98 <HAL_RCC_OscConfig+0x9a0>)
 800eb82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800eb86:	f003 0302 	and.w	r3, r3, #2
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d0e8      	beq.n	800eb60 <HAL_RCC_OscConfig+0x768>
 800eb8e:	e022      	b.n	800ebd6 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800eb90:	4b81      	ldr	r3, [pc, #516]	; (800ed98 <HAL_RCC_OscConfig+0x9a0>)
 800eb92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800eb96:	4a80      	ldr	r2, [pc, #512]	; (800ed98 <HAL_RCC_OscConfig+0x9a0>)
 800eb98:	f023 0301 	bic.w	r3, r3, #1
 800eb9c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eba0:	f7fc fa16 	bl	800afd0 <HAL_GetTick>
 800eba4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800eba6:	e00f      	b.n	800ebc8 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800eba8:	f7fc fa12 	bl	800afd0 <HAL_GetTick>
 800ebac:	4602      	mov	r2, r0
 800ebae:	693b      	ldr	r3, [r7, #16]
 800ebb0:	1ad3      	subs	r3, r2, r3
 800ebb2:	2b02      	cmp	r3, #2
 800ebb4:	d908      	bls.n	800ebc8 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ebb6:	4b78      	ldr	r3, [pc, #480]	; (800ed98 <HAL_RCC_OscConfig+0x9a0>)
 800ebb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ebbc:	f003 0302 	and.w	r3, r3, #2
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d001      	beq.n	800ebc8 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 800ebc4:	2303      	movs	r3, #3
 800ebc6:	e0e3      	b.n	800ed90 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ebc8:	4b73      	ldr	r3, [pc, #460]	; (800ed98 <HAL_RCC_OscConfig+0x9a0>)
 800ebca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ebce:	f003 0302 	and.w	r3, r3, #2
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d1e8      	bne.n	800eba8 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	f000 80d7 	beq.w	800ed8e <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ebe0:	4b6d      	ldr	r3, [pc, #436]	; (800ed98 <HAL_RCC_OscConfig+0x9a0>)
 800ebe2:	689b      	ldr	r3, [r3, #8]
 800ebe4:	f003 030c 	and.w	r3, r3, #12
 800ebe8:	2b0c      	cmp	r3, #12
 800ebea:	f000 8091 	beq.w	800ed10 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebf2:	2b02      	cmp	r3, #2
 800ebf4:	d166      	bne.n	800ecc4 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ebf6:	4b68      	ldr	r3, [pc, #416]	; (800ed98 <HAL_RCC_OscConfig+0x9a0>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	4a67      	ldr	r2, [pc, #412]	; (800ed98 <HAL_RCC_OscConfig+0x9a0>)
 800ebfc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ec00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec02:	f7fc f9e5 	bl	800afd0 <HAL_GetTick>
 800ec06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ec08:	e00e      	b.n	800ec28 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ec0a:	f7fc f9e1 	bl	800afd0 <HAL_GetTick>
 800ec0e:	4602      	mov	r2, r0
 800ec10:	693b      	ldr	r3, [r7, #16]
 800ec12:	1ad3      	subs	r3, r2, r3
 800ec14:	2b02      	cmp	r3, #2
 800ec16:	d907      	bls.n	800ec28 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ec18:	4b5f      	ldr	r3, [pc, #380]	; (800ed98 <HAL_RCC_OscConfig+0x9a0>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d001      	beq.n	800ec28 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 800ec24:	2303      	movs	r3, #3
 800ec26:	e0b3      	b.n	800ed90 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ec28:	4b5b      	ldr	r3, [pc, #364]	; (800ed98 <HAL_RCC_OscConfig+0x9a0>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d1ea      	bne.n	800ec0a <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ec34:	4b58      	ldr	r3, [pc, #352]	; (800ed98 <HAL_RCC_OscConfig+0x9a0>)
 800ec36:	68da      	ldr	r2, [r3, #12]
 800ec38:	4b58      	ldr	r3, [pc, #352]	; (800ed9c <HAL_RCC_OscConfig+0x9a4>)
 800ec3a:	4013      	ands	r3, r2
 800ec3c:	687a      	ldr	r2, [r7, #4]
 800ec3e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800ec40:	687a      	ldr	r2, [r7, #4]
 800ec42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ec44:	3a01      	subs	r2, #1
 800ec46:	0112      	lsls	r2, r2, #4
 800ec48:	4311      	orrs	r1, r2
 800ec4a:	687a      	ldr	r2, [r7, #4]
 800ec4c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ec4e:	0212      	lsls	r2, r2, #8
 800ec50:	4311      	orrs	r1, r2
 800ec52:	687a      	ldr	r2, [r7, #4]
 800ec54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ec56:	0852      	lsrs	r2, r2, #1
 800ec58:	3a01      	subs	r2, #1
 800ec5a:	0552      	lsls	r2, r2, #21
 800ec5c:	4311      	orrs	r1, r2
 800ec5e:	687a      	ldr	r2, [r7, #4]
 800ec60:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800ec62:	0852      	lsrs	r2, r2, #1
 800ec64:	3a01      	subs	r2, #1
 800ec66:	0652      	lsls	r2, r2, #25
 800ec68:	4311      	orrs	r1, r2
 800ec6a:	687a      	ldr	r2, [r7, #4]
 800ec6c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ec6e:	06d2      	lsls	r2, r2, #27
 800ec70:	430a      	orrs	r2, r1
 800ec72:	4949      	ldr	r1, [pc, #292]	; (800ed98 <HAL_RCC_OscConfig+0x9a0>)
 800ec74:	4313      	orrs	r3, r2
 800ec76:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ec78:	4b47      	ldr	r3, [pc, #284]	; (800ed98 <HAL_RCC_OscConfig+0x9a0>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	4a46      	ldr	r2, [pc, #280]	; (800ed98 <HAL_RCC_OscConfig+0x9a0>)
 800ec7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ec82:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ec84:	4b44      	ldr	r3, [pc, #272]	; (800ed98 <HAL_RCC_OscConfig+0x9a0>)
 800ec86:	68db      	ldr	r3, [r3, #12]
 800ec88:	4a43      	ldr	r2, [pc, #268]	; (800ed98 <HAL_RCC_OscConfig+0x9a0>)
 800ec8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ec8e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec90:	f7fc f99e 	bl	800afd0 <HAL_GetTick>
 800ec94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ec96:	e00e      	b.n	800ecb6 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ec98:	f7fc f99a 	bl	800afd0 <HAL_GetTick>
 800ec9c:	4602      	mov	r2, r0
 800ec9e:	693b      	ldr	r3, [r7, #16]
 800eca0:	1ad3      	subs	r3, r2, r3
 800eca2:	2b02      	cmp	r3, #2
 800eca4:	d907      	bls.n	800ecb6 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800eca6:	4b3c      	ldr	r3, [pc, #240]	; (800ed98 <HAL_RCC_OscConfig+0x9a0>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d101      	bne.n	800ecb6 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 800ecb2:	2303      	movs	r3, #3
 800ecb4:	e06c      	b.n	800ed90 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ecb6:	4b38      	ldr	r3, [pc, #224]	; (800ed98 <HAL_RCC_OscConfig+0x9a0>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d0ea      	beq.n	800ec98 <HAL_RCC_OscConfig+0x8a0>
 800ecc2:	e064      	b.n	800ed8e <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ecc4:	4b34      	ldr	r3, [pc, #208]	; (800ed98 <HAL_RCC_OscConfig+0x9a0>)
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	4a33      	ldr	r2, [pc, #204]	; (800ed98 <HAL_RCC_OscConfig+0x9a0>)
 800ecca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ecce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ecd0:	f7fc f97e 	bl	800afd0 <HAL_GetTick>
 800ecd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ecd6:	e00e      	b.n	800ecf6 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ecd8:	f7fc f97a 	bl	800afd0 <HAL_GetTick>
 800ecdc:	4602      	mov	r2, r0
 800ecde:	693b      	ldr	r3, [r7, #16]
 800ece0:	1ad3      	subs	r3, r2, r3
 800ece2:	2b02      	cmp	r3, #2
 800ece4:	d907      	bls.n	800ecf6 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ece6:	4b2c      	ldr	r3, [pc, #176]	; (800ed98 <HAL_RCC_OscConfig+0x9a0>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d001      	beq.n	800ecf6 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 800ecf2:	2303      	movs	r3, #3
 800ecf4:	e04c      	b.n	800ed90 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ecf6:	4b28      	ldr	r3, [pc, #160]	; (800ed98 <HAL_RCC_OscConfig+0x9a0>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d1ea      	bne.n	800ecd8 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800ed02:	4b25      	ldr	r3, [pc, #148]	; (800ed98 <HAL_RCC_OscConfig+0x9a0>)
 800ed04:	68da      	ldr	r2, [r3, #12]
 800ed06:	4924      	ldr	r1, [pc, #144]	; (800ed98 <HAL_RCC_OscConfig+0x9a0>)
 800ed08:	4b25      	ldr	r3, [pc, #148]	; (800eda0 <HAL_RCC_OscConfig+0x9a8>)
 800ed0a:	4013      	ands	r3, r2
 800ed0c:	60cb      	str	r3, [r1, #12]
 800ed0e:	e03e      	b.n	800ed8e <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed14:	2b01      	cmp	r3, #1
 800ed16:	d101      	bne.n	800ed1c <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 800ed18:	2301      	movs	r3, #1
 800ed1a:	e039      	b.n	800ed90 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800ed1c:	4b1e      	ldr	r3, [pc, #120]	; (800ed98 <HAL_RCC_OscConfig+0x9a0>)
 800ed1e:	68db      	ldr	r3, [r3, #12]
 800ed20:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	f003 0203 	and.w	r2, r3, #3
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	d12c      	bne.n	800ed8a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ed30:	697b      	ldr	r3, [r7, #20]
 800ed32:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed3a:	3b01      	subs	r3, #1
 800ed3c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ed3e:	429a      	cmp	r2, r3
 800ed40:	d123      	bne.n	800ed8a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed4c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d11b      	bne.n	800ed8a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed5c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ed5e:	429a      	cmp	r2, r3
 800ed60:	d113      	bne.n	800ed8a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed6c:	085b      	lsrs	r3, r3, #1
 800ed6e:	3b01      	subs	r3, #1
 800ed70:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d109      	bne.n	800ed8a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed80:	085b      	lsrs	r3, r3, #1
 800ed82:	3b01      	subs	r3, #1
 800ed84:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ed86:	429a      	cmp	r2, r3
 800ed88:	d001      	beq.n	800ed8e <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	e000      	b.n	800ed90 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 800ed8e:	2300      	movs	r3, #0
}
 800ed90:	4618      	mov	r0, r3
 800ed92:	3720      	adds	r7, #32
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}
 800ed98:	40021000 	.word	0x40021000
 800ed9c:	019f800c 	.word	0x019f800c
 800eda0:	feeefffc 	.word	0xfeeefffc

0800eda4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b086      	sub	sp, #24
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
 800edac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800edae:	2300      	movs	r3, #0
 800edb0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d101      	bne.n	800edbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800edb8:	2301      	movs	r3, #1
 800edba:	e11c      	b.n	800eff6 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800edbc:	4b90      	ldr	r3, [pc, #576]	; (800f000 <HAL_RCC_ClockConfig+0x25c>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	f003 030f 	and.w	r3, r3, #15
 800edc4:	683a      	ldr	r2, [r7, #0]
 800edc6:	429a      	cmp	r2, r3
 800edc8:	d910      	bls.n	800edec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800edca:	4b8d      	ldr	r3, [pc, #564]	; (800f000 <HAL_RCC_ClockConfig+0x25c>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	f023 020f 	bic.w	r2, r3, #15
 800edd2:	498b      	ldr	r1, [pc, #556]	; (800f000 <HAL_RCC_ClockConfig+0x25c>)
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	4313      	orrs	r3, r2
 800edd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800edda:	4b89      	ldr	r3, [pc, #548]	; (800f000 <HAL_RCC_ClockConfig+0x25c>)
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	f003 030f 	and.w	r3, r3, #15
 800ede2:	683a      	ldr	r2, [r7, #0]
 800ede4:	429a      	cmp	r2, r3
 800ede6:	d001      	beq.n	800edec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ede8:	2301      	movs	r3, #1
 800edea:	e104      	b.n	800eff6 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	f003 0302 	and.w	r3, r3, #2
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d010      	beq.n	800ee1a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	689a      	ldr	r2, [r3, #8]
 800edfc:	4b81      	ldr	r3, [pc, #516]	; (800f004 <HAL_RCC_ClockConfig+0x260>)
 800edfe:	689b      	ldr	r3, [r3, #8]
 800ee00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ee04:	429a      	cmp	r2, r3
 800ee06:	d908      	bls.n	800ee1a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ee08:	4b7e      	ldr	r3, [pc, #504]	; (800f004 <HAL_RCC_ClockConfig+0x260>)
 800ee0a:	689b      	ldr	r3, [r3, #8]
 800ee0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	689b      	ldr	r3, [r3, #8]
 800ee14:	497b      	ldr	r1, [pc, #492]	; (800f004 <HAL_RCC_ClockConfig+0x260>)
 800ee16:	4313      	orrs	r3, r2
 800ee18:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	f003 0301 	and.w	r3, r3, #1
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	f000 8085 	beq.w	800ef32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	685b      	ldr	r3, [r3, #4]
 800ee2c:	2b03      	cmp	r3, #3
 800ee2e:	d11f      	bne.n	800ee70 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ee30:	4b74      	ldr	r3, [pc, #464]	; (800f004 <HAL_RCC_ClockConfig+0x260>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d101      	bne.n	800ee40 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 800ee3c:	2301      	movs	r3, #1
 800ee3e:	e0da      	b.n	800eff6 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800ee40:	f000 fa58 	bl	800f2f4 <RCC_GetSysClockFreqFromPLLSource>
 800ee44:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800ee46:	693b      	ldr	r3, [r7, #16]
 800ee48:	4a6f      	ldr	r2, [pc, #444]	; (800f008 <HAL_RCC_ClockConfig+0x264>)
 800ee4a:	4293      	cmp	r3, r2
 800ee4c:	d947      	bls.n	800eede <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800ee4e:	4b6d      	ldr	r3, [pc, #436]	; (800f004 <HAL_RCC_ClockConfig+0x260>)
 800ee50:	689b      	ldr	r3, [r3, #8]
 800ee52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d141      	bne.n	800eede <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ee5a:	4b6a      	ldr	r3, [pc, #424]	; (800f004 <HAL_RCC_ClockConfig+0x260>)
 800ee5c:	689b      	ldr	r3, [r3, #8]
 800ee5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ee62:	4a68      	ldr	r2, [pc, #416]	; (800f004 <HAL_RCC_ClockConfig+0x260>)
 800ee64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee68:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800ee6a:	2380      	movs	r3, #128	; 0x80
 800ee6c:	617b      	str	r3, [r7, #20]
 800ee6e:	e036      	b.n	800eede <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	685b      	ldr	r3, [r3, #4]
 800ee74:	2b02      	cmp	r3, #2
 800ee76:	d107      	bne.n	800ee88 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ee78:	4b62      	ldr	r3, [pc, #392]	; (800f004 <HAL_RCC_ClockConfig+0x260>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d115      	bne.n	800eeb0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800ee84:	2301      	movs	r3, #1
 800ee86:	e0b6      	b.n	800eff6 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	685b      	ldr	r3, [r3, #4]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d107      	bne.n	800eea0 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ee90:	4b5c      	ldr	r3, [pc, #368]	; (800f004 <HAL_RCC_ClockConfig+0x260>)
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	f003 0302 	and.w	r3, r3, #2
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d109      	bne.n	800eeb0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	e0aa      	b.n	800eff6 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800eea0:	4b58      	ldr	r3, [pc, #352]	; (800f004 <HAL_RCC_ClockConfig+0x260>)
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d101      	bne.n	800eeb0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800eeac:	2301      	movs	r3, #1
 800eeae:	e0a2      	b.n	800eff6 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800eeb0:	f000 f8b0 	bl	800f014 <HAL_RCC_GetSysClockFreq>
 800eeb4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800eeb6:	693b      	ldr	r3, [r7, #16]
 800eeb8:	4a53      	ldr	r2, [pc, #332]	; (800f008 <HAL_RCC_ClockConfig+0x264>)
 800eeba:	4293      	cmp	r3, r2
 800eebc:	d90f      	bls.n	800eede <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800eebe:	4b51      	ldr	r3, [pc, #324]	; (800f004 <HAL_RCC_ClockConfig+0x260>)
 800eec0:	689b      	ldr	r3, [r3, #8]
 800eec2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d109      	bne.n	800eede <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800eeca:	4b4e      	ldr	r3, [pc, #312]	; (800f004 <HAL_RCC_ClockConfig+0x260>)
 800eecc:	689b      	ldr	r3, [r3, #8]
 800eece:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800eed2:	4a4c      	ldr	r2, [pc, #304]	; (800f004 <HAL_RCC_ClockConfig+0x260>)
 800eed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eed8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800eeda:	2380      	movs	r3, #128	; 0x80
 800eedc:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800eede:	4b49      	ldr	r3, [pc, #292]	; (800f004 <HAL_RCC_ClockConfig+0x260>)
 800eee0:	689b      	ldr	r3, [r3, #8]
 800eee2:	f023 0203 	bic.w	r2, r3, #3
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	685b      	ldr	r3, [r3, #4]
 800eeea:	4946      	ldr	r1, [pc, #280]	; (800f004 <HAL_RCC_ClockConfig+0x260>)
 800eeec:	4313      	orrs	r3, r2
 800eeee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eef0:	f7fc f86e 	bl	800afd0 <HAL_GetTick>
 800eef4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800eef6:	e013      	b.n	800ef20 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800eef8:	f7fc f86a 	bl	800afd0 <HAL_GetTick>
 800eefc:	4602      	mov	r2, r0
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	1ad3      	subs	r3, r2, r3
 800ef02:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef06:	4293      	cmp	r3, r2
 800ef08:	d90a      	bls.n	800ef20 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ef0a:	4b3e      	ldr	r3, [pc, #248]	; (800f004 <HAL_RCC_ClockConfig+0x260>)
 800ef0c:	689b      	ldr	r3, [r3, #8]
 800ef0e:	f003 020c 	and.w	r2, r3, #12
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	685b      	ldr	r3, [r3, #4]
 800ef16:	009b      	lsls	r3, r3, #2
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	d001      	beq.n	800ef20 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 800ef1c:	2303      	movs	r3, #3
 800ef1e:	e06a      	b.n	800eff6 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ef20:	4b38      	ldr	r3, [pc, #224]	; (800f004 <HAL_RCC_ClockConfig+0x260>)
 800ef22:	689b      	ldr	r3, [r3, #8]
 800ef24:	f003 020c 	and.w	r2, r3, #12
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	685b      	ldr	r3, [r3, #4]
 800ef2c:	009b      	lsls	r3, r3, #2
 800ef2e:	429a      	cmp	r2, r3
 800ef30:	d1e2      	bne.n	800eef8 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	2b80      	cmp	r3, #128	; 0x80
 800ef36:	d105      	bne.n	800ef44 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800ef38:	4b32      	ldr	r3, [pc, #200]	; (800f004 <HAL_RCC_ClockConfig+0x260>)
 800ef3a:	689b      	ldr	r3, [r3, #8]
 800ef3c:	4a31      	ldr	r2, [pc, #196]	; (800f004 <HAL_RCC_ClockConfig+0x260>)
 800ef3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ef42:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	f003 0302 	and.w	r3, r3, #2
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d010      	beq.n	800ef72 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	689a      	ldr	r2, [r3, #8]
 800ef54:	4b2b      	ldr	r3, [pc, #172]	; (800f004 <HAL_RCC_ClockConfig+0x260>)
 800ef56:	689b      	ldr	r3, [r3, #8]
 800ef58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d208      	bcs.n	800ef72 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ef60:	4b28      	ldr	r3, [pc, #160]	; (800f004 <HAL_RCC_ClockConfig+0x260>)
 800ef62:	689b      	ldr	r3, [r3, #8]
 800ef64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	689b      	ldr	r3, [r3, #8]
 800ef6c:	4925      	ldr	r1, [pc, #148]	; (800f004 <HAL_RCC_ClockConfig+0x260>)
 800ef6e:	4313      	orrs	r3, r2
 800ef70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ef72:	4b23      	ldr	r3, [pc, #140]	; (800f000 <HAL_RCC_ClockConfig+0x25c>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	f003 030f 	and.w	r3, r3, #15
 800ef7a:	683a      	ldr	r2, [r7, #0]
 800ef7c:	429a      	cmp	r2, r3
 800ef7e:	d210      	bcs.n	800efa2 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ef80:	4b1f      	ldr	r3, [pc, #124]	; (800f000 <HAL_RCC_ClockConfig+0x25c>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f023 020f 	bic.w	r2, r3, #15
 800ef88:	491d      	ldr	r1, [pc, #116]	; (800f000 <HAL_RCC_ClockConfig+0x25c>)
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	4313      	orrs	r3, r2
 800ef8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ef90:	4b1b      	ldr	r3, [pc, #108]	; (800f000 <HAL_RCC_ClockConfig+0x25c>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	f003 030f 	and.w	r3, r3, #15
 800ef98:	683a      	ldr	r2, [r7, #0]
 800ef9a:	429a      	cmp	r2, r3
 800ef9c:	d001      	beq.n	800efa2 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 800ef9e:	2301      	movs	r3, #1
 800efa0:	e029      	b.n	800eff6 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	f003 0304 	and.w	r3, r3, #4
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d008      	beq.n	800efc0 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800efae:	4b15      	ldr	r3, [pc, #84]	; (800f004 <HAL_RCC_ClockConfig+0x260>)
 800efb0:	689b      	ldr	r3, [r3, #8]
 800efb2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	68db      	ldr	r3, [r3, #12]
 800efba:	4912      	ldr	r1, [pc, #72]	; (800f004 <HAL_RCC_ClockConfig+0x260>)
 800efbc:	4313      	orrs	r3, r2
 800efbe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	f003 0308 	and.w	r3, r3, #8
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d009      	beq.n	800efe0 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800efcc:	4b0d      	ldr	r3, [pc, #52]	; (800f004 <HAL_RCC_ClockConfig+0x260>)
 800efce:	689b      	ldr	r3, [r3, #8]
 800efd0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	691b      	ldr	r3, [r3, #16]
 800efd8:	00db      	lsls	r3, r3, #3
 800efda:	490a      	ldr	r1, [pc, #40]	; (800f004 <HAL_RCC_ClockConfig+0x260>)
 800efdc:	4313      	orrs	r3, r2
 800efde:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800efe0:	f000 f8b6 	bl	800f150 <HAL_RCC_GetHCLKFreq>
 800efe4:	4603      	mov	r3, r0
 800efe6:	4a09      	ldr	r2, [pc, #36]	; (800f00c <HAL_RCC_ClockConfig+0x268>)
 800efe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800efea:	4b09      	ldr	r3, [pc, #36]	; (800f010 <HAL_RCC_ClockConfig+0x26c>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	4618      	mov	r0, r3
 800eff0:	f7fb fd46 	bl	800aa80 <HAL_InitTick>
 800eff4:	4603      	mov	r3, r0
}
 800eff6:	4618      	mov	r0, r3
 800eff8:	3718      	adds	r7, #24
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}
 800effe:	bf00      	nop
 800f000:	40022000 	.word	0x40022000
 800f004:	40021000 	.word	0x40021000
 800f008:	04c4b400 	.word	0x04c4b400
 800f00c:	20000090 	.word	0x20000090
 800f010:	20000094 	.word	0x20000094

0800f014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f014:	b480      	push	{r7}
 800f016:	b089      	sub	sp, #36	; 0x24
 800f018:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800f01a:	2300      	movs	r3, #0
 800f01c:	61fb      	str	r3, [r7, #28]
 800f01e:	2300      	movs	r3, #0
 800f020:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f022:	4b47      	ldr	r3, [pc, #284]	; (800f140 <HAL_RCC_GetSysClockFreq+0x12c>)
 800f024:	689b      	ldr	r3, [r3, #8]
 800f026:	f003 030c 	and.w	r3, r3, #12
 800f02a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f02c:	4b44      	ldr	r3, [pc, #272]	; (800f140 <HAL_RCC_GetSysClockFreq+0x12c>)
 800f02e:	68db      	ldr	r3, [r3, #12]
 800f030:	f003 0303 	and.w	r3, r3, #3
 800f034:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800f036:	693b      	ldr	r3, [r7, #16]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d005      	beq.n	800f048 <HAL_RCC_GetSysClockFreq+0x34>
 800f03c:	693b      	ldr	r3, [r7, #16]
 800f03e:	2b0c      	cmp	r3, #12
 800f040:	d121      	bne.n	800f086 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	2b01      	cmp	r3, #1
 800f046:	d11e      	bne.n	800f086 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800f048:	4b3d      	ldr	r3, [pc, #244]	; (800f140 <HAL_RCC_GetSysClockFreq+0x12c>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	f003 0308 	and.w	r3, r3, #8
 800f050:	2b00      	cmp	r3, #0
 800f052:	d107      	bne.n	800f064 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800f054:	4b3a      	ldr	r3, [pc, #232]	; (800f140 <HAL_RCC_GetSysClockFreq+0x12c>)
 800f056:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f05a:	0a1b      	lsrs	r3, r3, #8
 800f05c:	f003 030f 	and.w	r3, r3, #15
 800f060:	61fb      	str	r3, [r7, #28]
 800f062:	e005      	b.n	800f070 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800f064:	4b36      	ldr	r3, [pc, #216]	; (800f140 <HAL_RCC_GetSysClockFreq+0x12c>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	091b      	lsrs	r3, r3, #4
 800f06a:	f003 030f 	and.w	r3, r3, #15
 800f06e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 800f070:	4a34      	ldr	r2, [pc, #208]	; (800f144 <HAL_RCC_GetSysClockFreq+0x130>)
 800f072:	69fb      	ldr	r3, [r7, #28]
 800f074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f078:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800f07a:	693b      	ldr	r3, [r7, #16]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d10d      	bne.n	800f09c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800f080:	69fb      	ldr	r3, [r7, #28]
 800f082:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800f084:	e00a      	b.n	800f09c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800f086:	693b      	ldr	r3, [r7, #16]
 800f088:	2b04      	cmp	r3, #4
 800f08a:	d102      	bne.n	800f092 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800f08c:	4b2e      	ldr	r3, [pc, #184]	; (800f148 <HAL_RCC_GetSysClockFreq+0x134>)
 800f08e:	61bb      	str	r3, [r7, #24]
 800f090:	e004      	b.n	800f09c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800f092:	693b      	ldr	r3, [r7, #16]
 800f094:	2b08      	cmp	r3, #8
 800f096:	d101      	bne.n	800f09c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800f098:	4b2c      	ldr	r3, [pc, #176]	; (800f14c <HAL_RCC_GetSysClockFreq+0x138>)
 800f09a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f09c:	693b      	ldr	r3, [r7, #16]
 800f09e:	2b0c      	cmp	r3, #12
 800f0a0:	d146      	bne.n	800f130 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800f0a2:	4b27      	ldr	r3, [pc, #156]	; (800f140 <HAL_RCC_GetSysClockFreq+0x12c>)
 800f0a4:	68db      	ldr	r3, [r3, #12]
 800f0a6:	f003 0303 	and.w	r3, r3, #3
 800f0aa:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800f0ac:	4b24      	ldr	r3, [pc, #144]	; (800f140 <HAL_RCC_GetSysClockFreq+0x12c>)
 800f0ae:	68db      	ldr	r3, [r3, #12]
 800f0b0:	091b      	lsrs	r3, r3, #4
 800f0b2:	f003 030f 	and.w	r3, r3, #15
 800f0b6:	3301      	adds	r3, #1
 800f0b8:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 800f0ba:	68bb      	ldr	r3, [r7, #8]
 800f0bc:	2b02      	cmp	r3, #2
 800f0be:	d003      	beq.n	800f0c8 <HAL_RCC_GetSysClockFreq+0xb4>
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	2b03      	cmp	r3, #3
 800f0c4:	d00d      	beq.n	800f0e2 <HAL_RCC_GetSysClockFreq+0xce>
 800f0c6:	e019      	b.n	800f0fc <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800f0c8:	4a1f      	ldr	r2, [pc, #124]	; (800f148 <HAL_RCC_GetSysClockFreq+0x134>)
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0d0:	4a1b      	ldr	r2, [pc, #108]	; (800f140 <HAL_RCC_GetSysClockFreq+0x12c>)
 800f0d2:	68d2      	ldr	r2, [r2, #12]
 800f0d4:	0a12      	lsrs	r2, r2, #8
 800f0d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f0da:	fb02 f303 	mul.w	r3, r2, r3
 800f0de:	617b      	str	r3, [r7, #20]
        break;
 800f0e0:	e019      	b.n	800f116 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800f0e2:	4a1a      	ldr	r2, [pc, #104]	; (800f14c <HAL_RCC_GetSysClockFreq+0x138>)
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0ea:	4a15      	ldr	r2, [pc, #84]	; (800f140 <HAL_RCC_GetSysClockFreq+0x12c>)
 800f0ec:	68d2      	ldr	r2, [r2, #12]
 800f0ee:	0a12      	lsrs	r2, r2, #8
 800f0f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f0f4:	fb02 f303 	mul.w	r3, r2, r3
 800f0f8:	617b      	str	r3, [r7, #20]
        break;
 800f0fa:	e00c      	b.n	800f116 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800f0fc:	69fa      	ldr	r2, [r7, #28]
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	fbb2 f3f3 	udiv	r3, r2, r3
 800f104:	4a0e      	ldr	r2, [pc, #56]	; (800f140 <HAL_RCC_GetSysClockFreq+0x12c>)
 800f106:	68d2      	ldr	r2, [r2, #12]
 800f108:	0a12      	lsrs	r2, r2, #8
 800f10a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f10e:	fb02 f303 	mul.w	r3, r2, r3
 800f112:	617b      	str	r3, [r7, #20]
        break;
 800f114:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800f116:	4b0a      	ldr	r3, [pc, #40]	; (800f140 <HAL_RCC_GetSysClockFreq+0x12c>)
 800f118:	68db      	ldr	r3, [r3, #12]
 800f11a:	0e5b      	lsrs	r3, r3, #25
 800f11c:	f003 0303 	and.w	r3, r3, #3
 800f120:	3301      	adds	r3, #1
 800f122:	005b      	lsls	r3, r3, #1
 800f124:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800f126:	697a      	ldr	r2, [r7, #20]
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f12e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800f130:	69bb      	ldr	r3, [r7, #24]
}
 800f132:	4618      	mov	r0, r3
 800f134:	3724      	adds	r7, #36	; 0x24
 800f136:	46bd      	mov	sp, r7
 800f138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13c:	4770      	bx	lr
 800f13e:	bf00      	nop
 800f140:	40021000 	.word	0x40021000
 800f144:	0801aaac 	.word	0x0801aaac
 800f148:	00f42400 	.word	0x00f42400
 800f14c:	007a1200 	.word	0x007a1200

0800f150 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f150:	b580      	push	{r7, lr}
 800f152:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 800f154:	f7ff ff5e 	bl	800f014 <HAL_RCC_GetSysClockFreq>
 800f158:	4602      	mov	r2, r0
 800f15a:	4b05      	ldr	r3, [pc, #20]	; (800f170 <HAL_RCC_GetHCLKFreq+0x20>)
 800f15c:	689b      	ldr	r3, [r3, #8]
 800f15e:	091b      	lsrs	r3, r3, #4
 800f160:	f003 030f 	and.w	r3, r3, #15
 800f164:	4903      	ldr	r1, [pc, #12]	; (800f174 <HAL_RCC_GetHCLKFreq+0x24>)
 800f166:	5ccb      	ldrb	r3, [r1, r3]
 800f168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f16c:	4618      	mov	r0, r3
 800f16e:	bd80      	pop	{r7, pc}
 800f170:	40021000 	.word	0x40021000
 800f174:	0801aa94 	.word	0x0801aa94

0800f178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f17c:	f7ff ffe8 	bl	800f150 <HAL_RCC_GetHCLKFreq>
 800f180:	4602      	mov	r2, r0
 800f182:	4b05      	ldr	r3, [pc, #20]	; (800f198 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f184:	689b      	ldr	r3, [r3, #8]
 800f186:	0a1b      	lsrs	r3, r3, #8
 800f188:	f003 0307 	and.w	r3, r3, #7
 800f18c:	4903      	ldr	r1, [pc, #12]	; (800f19c <HAL_RCC_GetPCLK1Freq+0x24>)
 800f18e:	5ccb      	ldrb	r3, [r1, r3]
 800f190:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f194:	4618      	mov	r0, r3
 800f196:	bd80      	pop	{r7, pc}
 800f198:	40021000 	.word	0x40021000
 800f19c:	0801aaa4 	.word	0x0801aaa4

0800f1a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800f1a4:	f7ff ffd4 	bl	800f150 <HAL_RCC_GetHCLKFreq>
 800f1a8:	4602      	mov	r2, r0
 800f1aa:	4b05      	ldr	r3, [pc, #20]	; (800f1c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f1ac:	689b      	ldr	r3, [r3, #8]
 800f1ae:	0adb      	lsrs	r3, r3, #11
 800f1b0:	f003 0307 	and.w	r3, r3, #7
 800f1b4:	4903      	ldr	r1, [pc, #12]	; (800f1c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f1b6:	5ccb      	ldrb	r3, [r1, r3]
 800f1b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f1bc:	4618      	mov	r0, r3
 800f1be:	bd80      	pop	{r7, pc}
 800f1c0:	40021000 	.word	0x40021000
 800f1c4:	0801aaa4 	.word	0x0801aaa4

0800f1c8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800f1c8:	b480      	push	{r7}
 800f1ca:	b083      	sub	sp, #12
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
 800f1d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	220f      	movs	r2, #15
 800f1d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800f1d8:	4b12      	ldr	r3, [pc, #72]	; (800f224 <HAL_RCC_GetClockConfig+0x5c>)
 800f1da:	689b      	ldr	r3, [r3, #8]
 800f1dc:	f003 0203 	and.w	r2, r3, #3
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800f1e4:	4b0f      	ldr	r3, [pc, #60]	; (800f224 <HAL_RCC_GetClockConfig+0x5c>)
 800f1e6:	689b      	ldr	r3, [r3, #8]
 800f1e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800f1f0:	4b0c      	ldr	r3, [pc, #48]	; (800f224 <HAL_RCC_GetClockConfig+0x5c>)
 800f1f2:	689b      	ldr	r3, [r3, #8]
 800f1f4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800f1fc:	4b09      	ldr	r3, [pc, #36]	; (800f224 <HAL_RCC_GetClockConfig+0x5c>)
 800f1fe:	689b      	ldr	r3, [r3, #8]
 800f200:	08db      	lsrs	r3, r3, #3
 800f202:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800f20a:	4b07      	ldr	r3, [pc, #28]	; (800f228 <HAL_RCC_GetClockConfig+0x60>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	f003 020f 	and.w	r2, r3, #15
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	601a      	str	r2, [r3, #0]
}
 800f216:	bf00      	nop
 800f218:	370c      	adds	r7, #12
 800f21a:	46bd      	mov	sp, r7
 800f21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f220:	4770      	bx	lr
 800f222:	bf00      	nop
 800f224:	40021000 	.word	0x40021000
 800f228:	40022000 	.word	0x40022000

0800f22c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b086      	sub	sp, #24
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800f234:	2300      	movs	r3, #0
 800f236:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800f238:	4b2c      	ldr	r3, [pc, #176]	; (800f2ec <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800f23a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f23c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f240:	2b00      	cmp	r3, #0
 800f242:	d003      	beq.n	800f24c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800f244:	f7ff f83a 	bl	800e2bc <HAL_PWREx_GetVoltageRange>
 800f248:	6138      	str	r0, [r7, #16]
 800f24a:	e014      	b.n	800f276 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800f24c:	4b27      	ldr	r3, [pc, #156]	; (800f2ec <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800f24e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f250:	4a26      	ldr	r2, [pc, #152]	; (800f2ec <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800f252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f256:	6593      	str	r3, [r2, #88]	; 0x58
 800f258:	4b24      	ldr	r3, [pc, #144]	; (800f2ec <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800f25a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f25c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f260:	60fb      	str	r3, [r7, #12]
 800f262:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800f264:	f7ff f82a 	bl	800e2bc <HAL_PWREx_GetVoltageRange>
 800f268:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 800f26a:	4b20      	ldr	r3, [pc, #128]	; (800f2ec <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800f26c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f26e:	4a1f      	ldr	r2, [pc, #124]	; (800f2ec <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800f270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f274:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800f276:	693b      	ldr	r3, [r7, #16]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d003      	beq.n	800f284 <RCC_SetFlashLatencyFromMSIRange+0x58>
 800f27c:	693b      	ldr	r3, [r7, #16]
 800f27e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f282:	d10b      	bne.n	800f29c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2b80      	cmp	r3, #128	; 0x80
 800f288:	d919      	bls.n	800f2be <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	2ba0      	cmp	r3, #160	; 0xa0
 800f28e:	d902      	bls.n	800f296 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800f290:	2302      	movs	r3, #2
 800f292:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800f294:	e013      	b.n	800f2be <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800f296:	2301      	movs	r3, #1
 800f298:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800f29a:	e010      	b.n	800f2be <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	2b80      	cmp	r3, #128	; 0x80
 800f2a0:	d902      	bls.n	800f2a8 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800f2a2:	2303      	movs	r3, #3
 800f2a4:	617b      	str	r3, [r7, #20]
 800f2a6:	e00a      	b.n	800f2be <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2b80      	cmp	r3, #128	; 0x80
 800f2ac:	d102      	bne.n	800f2b4 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800f2ae:	2302      	movs	r3, #2
 800f2b0:	617b      	str	r3, [r7, #20]
 800f2b2:	e004      	b.n	800f2be <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2b70      	cmp	r3, #112	; 0x70
 800f2b8:	d101      	bne.n	800f2be <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800f2ba:	2301      	movs	r3, #1
 800f2bc:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800f2be:	4b0c      	ldr	r3, [pc, #48]	; (800f2f0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	f023 020f 	bic.w	r2, r3, #15
 800f2c6:	490a      	ldr	r1, [pc, #40]	; (800f2f0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800f2c8:	697b      	ldr	r3, [r7, #20]
 800f2ca:	4313      	orrs	r3, r2
 800f2cc:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800f2ce:	4b08      	ldr	r3, [pc, #32]	; (800f2f0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	f003 030f 	and.w	r3, r3, #15
 800f2d6:	697a      	ldr	r2, [r7, #20]
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d001      	beq.n	800f2e0 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 800f2dc:	2301      	movs	r3, #1
 800f2de:	e000      	b.n	800f2e2 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 800f2e0:	2300      	movs	r3, #0
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	3718      	adds	r7, #24
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}
 800f2ea:	bf00      	nop
 800f2ec:	40021000 	.word	0x40021000
 800f2f0:	40022000 	.word	0x40022000

0800f2f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	b087      	sub	sp, #28
 800f2f8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800f2fa:	4b31      	ldr	r3, [pc, #196]	; (800f3c0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800f2fc:	68db      	ldr	r3, [r3, #12]
 800f2fe:	f003 0303 	and.w	r3, r3, #3
 800f302:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800f304:	4b2e      	ldr	r3, [pc, #184]	; (800f3c0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800f306:	68db      	ldr	r3, [r3, #12]
 800f308:	091b      	lsrs	r3, r3, #4
 800f30a:	f003 030f 	and.w	r3, r3, #15
 800f30e:	3301      	adds	r3, #1
 800f310:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	2b03      	cmp	r3, #3
 800f316:	d015      	beq.n	800f344 <RCC_GetSysClockFreqFromPLLSource+0x50>
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	2b03      	cmp	r3, #3
 800f31c:	d839      	bhi.n	800f392 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	2b01      	cmp	r3, #1
 800f322:	d01c      	beq.n	800f35e <RCC_GetSysClockFreqFromPLLSource+0x6a>
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	2b02      	cmp	r3, #2
 800f328:	d133      	bne.n	800f392 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800f32a:	4a26      	ldr	r2, [pc, #152]	; (800f3c4 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f332:	4a23      	ldr	r2, [pc, #140]	; (800f3c0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800f334:	68d2      	ldr	r2, [r2, #12]
 800f336:	0a12      	lsrs	r2, r2, #8
 800f338:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f33c:	fb02 f303 	mul.w	r3, r2, r3
 800f340:	613b      	str	r3, [r7, #16]
      break;
 800f342:	e029      	b.n	800f398 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800f344:	4a20      	ldr	r2, [pc, #128]	; (800f3c8 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	fbb2 f3f3 	udiv	r3, r2, r3
 800f34c:	4a1c      	ldr	r2, [pc, #112]	; (800f3c0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800f34e:	68d2      	ldr	r2, [r2, #12]
 800f350:	0a12      	lsrs	r2, r2, #8
 800f352:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f356:	fb02 f303 	mul.w	r3, r2, r3
 800f35a:	613b      	str	r3, [r7, #16]
      break;
 800f35c:	e01c      	b.n	800f398 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800f35e:	4b18      	ldr	r3, [pc, #96]	; (800f3c0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	f003 0308 	and.w	r3, r3, #8
 800f366:	2b00      	cmp	r3, #0
 800f368:	d107      	bne.n	800f37a <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800f36a:	4b15      	ldr	r3, [pc, #84]	; (800f3c0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800f36c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f370:	0a1b      	lsrs	r3, r3, #8
 800f372:	f003 030f 	and.w	r3, r3, #15
 800f376:	617b      	str	r3, [r7, #20]
 800f378:	e005      	b.n	800f386 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800f37a:	4b11      	ldr	r3, [pc, #68]	; (800f3c0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	091b      	lsrs	r3, r3, #4
 800f380:	f003 030f 	and.w	r3, r3, #15
 800f384:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 800f386:	4a11      	ldr	r2, [pc, #68]	; (800f3cc <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 800f388:	697b      	ldr	r3, [r7, #20]
 800f38a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f38e:	613b      	str	r3, [r7, #16]
        break;
 800f390:	e002      	b.n	800f398 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 800f392:	2300      	movs	r3, #0
 800f394:	613b      	str	r3, [r7, #16]
      break;
 800f396:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800f398:	4b09      	ldr	r3, [pc, #36]	; (800f3c0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800f39a:	68db      	ldr	r3, [r3, #12]
 800f39c:	0e5b      	lsrs	r3, r3, #25
 800f39e:	f003 0303 	and.w	r3, r3, #3
 800f3a2:	3301      	adds	r3, #1
 800f3a4:	005b      	lsls	r3, r3, #1
 800f3a6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800f3a8:	693a      	ldr	r2, [r7, #16]
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3b0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800f3b2:	683b      	ldr	r3, [r7, #0]
}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	371c      	adds	r7, #28
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3be:	4770      	bx	lr
 800f3c0:	40021000 	.word	0x40021000
 800f3c4:	00f42400 	.word	0x00f42400
 800f3c8:	007a1200 	.word	0x007a1200
 800f3cc:	0801aaac 	.word	0x0801aaac

0800f3d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b088      	sub	sp, #32
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800f3d8:	2300      	movs	r3, #0
 800f3da:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800f3dc:	2300      	movs	r3, #0
 800f3de:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d040      	beq.n	800f46e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3f0:	2b80      	cmp	r3, #128	; 0x80
 800f3f2:	d02a      	beq.n	800f44a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800f3f4:	2b80      	cmp	r3, #128	; 0x80
 800f3f6:	d825      	bhi.n	800f444 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800f3f8:	2b60      	cmp	r3, #96	; 0x60
 800f3fa:	d026      	beq.n	800f44a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800f3fc:	2b60      	cmp	r3, #96	; 0x60
 800f3fe:	d821      	bhi.n	800f444 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800f400:	2b40      	cmp	r3, #64	; 0x40
 800f402:	d006      	beq.n	800f412 <HAL_RCCEx_PeriphCLKConfig+0x42>
 800f404:	2b40      	cmp	r3, #64	; 0x40
 800f406:	d81d      	bhi.n	800f444 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d009      	beq.n	800f420 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800f40c:	2b20      	cmp	r3, #32
 800f40e:	d010      	beq.n	800f432 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800f410:	e018      	b.n	800f444 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800f412:	4b8f      	ldr	r3, [pc, #572]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800f414:	68db      	ldr	r3, [r3, #12]
 800f416:	4a8e      	ldr	r2, [pc, #568]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800f418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f41c:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800f41e:	e015      	b.n	800f44c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	3304      	adds	r3, #4
 800f424:	2100      	movs	r1, #0
 800f426:	4618      	mov	r0, r3
 800f428:	f000 fb56 	bl	800fad8 <RCCEx_PLLSAI1_Config>
 800f42c:	4603      	mov	r3, r0
 800f42e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800f430:	e00c      	b.n	800f44c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	3320      	adds	r3, #32
 800f436:	2100      	movs	r1, #0
 800f438:	4618      	mov	r0, r3
 800f43a:	f000 fc33 	bl	800fca4 <RCCEx_PLLSAI2_Config>
 800f43e:	4603      	mov	r3, r0
 800f440:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800f442:	e003      	b.n	800f44c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f444:	2301      	movs	r3, #1
 800f446:	77fb      	strb	r3, [r7, #31]
        break;
 800f448:	e000      	b.n	800f44c <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 800f44a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f44c:	7ffb      	ldrb	r3, [r7, #31]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d10b      	bne.n	800f46a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f452:	4b7f      	ldr	r3, [pc, #508]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800f454:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f458:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f460:	497b      	ldr	r1, [pc, #492]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800f462:	4313      	orrs	r3, r2
 800f464:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800f468:	e001      	b.n	800f46e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f46a:	7ffb      	ldrb	r3, [r7, #31]
 800f46c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f476:	2b00      	cmp	r3, #0
 800f478:	d047      	beq.n	800f50a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f47e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f482:	d030      	beq.n	800f4e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800f484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f488:	d82a      	bhi.n	800f4e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800f48a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f48e:	d02a      	beq.n	800f4e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800f490:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f494:	d824      	bhi.n	800f4e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800f496:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f49a:	d008      	beq.n	800f4ae <HAL_RCCEx_PeriphCLKConfig+0xde>
 800f49c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f4a0:	d81e      	bhi.n	800f4e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d00a      	beq.n	800f4bc <HAL_RCCEx_PeriphCLKConfig+0xec>
 800f4a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f4aa:	d010      	beq.n	800f4ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800f4ac:	e018      	b.n	800f4e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800f4ae:	4b68      	ldr	r3, [pc, #416]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800f4b0:	68db      	ldr	r3, [r3, #12]
 800f4b2:	4a67      	ldr	r2, [pc, #412]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800f4b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f4b8:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800f4ba:	e015      	b.n	800f4e8 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	3304      	adds	r3, #4
 800f4c0:	2100      	movs	r1, #0
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f000 fb08 	bl	800fad8 <RCCEx_PLLSAI1_Config>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800f4cc:	e00c      	b.n	800f4e8 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	3320      	adds	r3, #32
 800f4d2:	2100      	movs	r1, #0
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f000 fbe5 	bl	800fca4 <RCCEx_PLLSAI2_Config>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800f4de:	e003      	b.n	800f4e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f4e0:	2301      	movs	r3, #1
 800f4e2:	77fb      	strb	r3, [r7, #31]
        break;
 800f4e4:	e000      	b.n	800f4e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 800f4e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f4e8:	7ffb      	ldrb	r3, [r7, #31]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d10b      	bne.n	800f506 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800f4ee:	4b58      	ldr	r3, [pc, #352]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800f4f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f4f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4fc:	4954      	ldr	r1, [pc, #336]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800f4fe:	4313      	orrs	r3, r2
 800f500:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800f504:	e001      	b.n	800f50a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f506:	7ffb      	ldrb	r3, [r7, #31]
 800f508:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f512:	2b00      	cmp	r3, #0
 800f514:	f000 80ab 	beq.w	800f66e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f518:	2300      	movs	r3, #0
 800f51a:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f51c:	4b4c      	ldr	r3, [pc, #304]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800f51e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f524:	2b00      	cmp	r3, #0
 800f526:	d10d      	bne.n	800f544 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f528:	4b49      	ldr	r3, [pc, #292]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800f52a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f52c:	4a48      	ldr	r2, [pc, #288]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800f52e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f532:	6593      	str	r3, [r2, #88]	; 0x58
 800f534:	4b46      	ldr	r3, [pc, #280]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800f536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f53c:	60fb      	str	r3, [r7, #12]
 800f53e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800f540:	2301      	movs	r3, #1
 800f542:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f544:	4b43      	ldr	r3, [pc, #268]	; (800f654 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	4a42      	ldr	r2, [pc, #264]	; (800f654 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800f54a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f54e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f550:	f7fb fd3e 	bl	800afd0 <HAL_GetTick>
 800f554:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f556:	e00f      	b.n	800f578 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f558:	f7fb fd3a 	bl	800afd0 <HAL_GetTick>
 800f55c:	4602      	mov	r2, r0
 800f55e:	693b      	ldr	r3, [r7, #16]
 800f560:	1ad3      	subs	r3, r2, r3
 800f562:	2b02      	cmp	r3, #2
 800f564:	d908      	bls.n	800f578 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f566:	4b3b      	ldr	r3, [pc, #236]	; (800f654 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d109      	bne.n	800f586 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 800f572:	2303      	movs	r3, #3
 800f574:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800f576:	e006      	b.n	800f586 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f578:	4b36      	ldr	r3, [pc, #216]	; (800f654 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f580:	2b00      	cmp	r3, #0
 800f582:	d0e9      	beq.n	800f558 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800f584:	e000      	b.n	800f588 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800f586:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 800f588:	7ffb      	ldrb	r3, [r7, #31]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d164      	bne.n	800f658 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800f58e:	4b30      	ldr	r3, [pc, #192]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800f590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f594:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f598:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800f59a:	69bb      	ldr	r3, [r7, #24]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d01f      	beq.n	800f5e0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f5a6:	69ba      	ldr	r2, [r7, #24]
 800f5a8:	429a      	cmp	r2, r3
 800f5aa:	d019      	beq.n	800f5e0 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800f5ac:	4b28      	ldr	r3, [pc, #160]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800f5ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f5b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f5b6:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f5b8:	4b25      	ldr	r3, [pc, #148]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800f5ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f5be:	4a24      	ldr	r2, [pc, #144]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800f5c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f5c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f5c8:	4b21      	ldr	r3, [pc, #132]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800f5ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f5ce:	4a20      	ldr	r2, [pc, #128]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800f5d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f5d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800f5d8:	4a1d      	ldr	r2, [pc, #116]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800f5da:	69bb      	ldr	r3, [r7, #24]
 800f5dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800f5e0:	69bb      	ldr	r3, [r7, #24]
 800f5e2:	f003 0301 	and.w	r3, r3, #1
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d01f      	beq.n	800f62a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f5ea:	f7fb fcf1 	bl	800afd0 <HAL_GetTick>
 800f5ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f5f0:	e012      	b.n	800f618 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f5f2:	f7fb fced 	bl	800afd0 <HAL_GetTick>
 800f5f6:	4602      	mov	r2, r0
 800f5f8:	693b      	ldr	r3, [r7, #16]
 800f5fa:	1ad3      	subs	r3, r2, r3
 800f5fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800f600:	4293      	cmp	r3, r2
 800f602:	d909      	bls.n	800f618 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f604:	4b12      	ldr	r3, [pc, #72]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800f606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f60a:	f003 0302 	and.w	r3, r3, #2
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d10a      	bne.n	800f628 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 800f612:	2303      	movs	r3, #3
 800f614:	77fb      	strb	r3, [r7, #31]
            }
            break;
 800f616:	e007      	b.n	800f628 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f618:	4b0d      	ldr	r3, [pc, #52]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800f61a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f61e:	f003 0302 	and.w	r3, r3, #2
 800f622:	2b00      	cmp	r3, #0
 800f624:	d0e5      	beq.n	800f5f2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800f626:	e000      	b.n	800f62a <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 800f628:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 800f62a:	7ffb      	ldrb	r3, [r7, #31]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d10c      	bne.n	800f64a <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f630:	4b07      	ldr	r3, [pc, #28]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800f632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f636:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f640:	4903      	ldr	r1, [pc, #12]	; (800f650 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800f642:	4313      	orrs	r3, r2
 800f644:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800f648:	e008      	b.n	800f65c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f64a:	7ffb      	ldrb	r3, [r7, #31]
 800f64c:	77bb      	strb	r3, [r7, #30]
 800f64e:	e005      	b.n	800f65c <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800f650:	40021000 	.word	0x40021000
 800f654:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f658:	7ffb      	ldrb	r3, [r7, #31]
 800f65a:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800f65c:	7dfb      	ldrb	r3, [r7, #23]
 800f65e:	2b01      	cmp	r3, #1
 800f660:	d105      	bne.n	800f66e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f662:	4b9c      	ldr	r3, [pc, #624]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f666:	4a9b      	ldr	r2, [pc, #620]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f66c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	f003 0301 	and.w	r3, r3, #1
 800f676:	2b00      	cmp	r3, #0
 800f678:	d00a      	beq.n	800f690 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f67a:	4b96      	ldr	r3, [pc, #600]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f67c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f680:	f023 0203 	bic.w	r2, r3, #3
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f688:	4992      	ldr	r1, [pc, #584]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f68a:	4313      	orrs	r3, r2
 800f68c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	f003 0302 	and.w	r3, r3, #2
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d00a      	beq.n	800f6b2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800f69c:	4b8d      	ldr	r3, [pc, #564]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f69e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f6a2:	f023 020c 	bic.w	r2, r3, #12
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6aa:	498a      	ldr	r1, [pc, #552]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f6ac:	4313      	orrs	r3, r2
 800f6ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	f003 0304 	and.w	r3, r3, #4
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d00a      	beq.n	800f6d4 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800f6be:	4b85      	ldr	r3, [pc, #532]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f6c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f6c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6cc:	4981      	ldr	r1, [pc, #516]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f6ce:	4313      	orrs	r3, r2
 800f6d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	f003 0308 	and.w	r3, r3, #8
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d00a      	beq.n	800f6f6 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800f6e0:	4b7c      	ldr	r3, [pc, #496]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f6e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f6e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6ee:	4979      	ldr	r1, [pc, #484]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f6f0:	4313      	orrs	r3, r2
 800f6f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	f003 0310 	and.w	r3, r3, #16
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d00a      	beq.n	800f718 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800f702:	4b74      	ldr	r3, [pc, #464]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f708:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f710:	4970      	ldr	r1, [pc, #448]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f712:	4313      	orrs	r3, r2
 800f714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	f003 0320 	and.w	r3, r3, #32
 800f720:	2b00      	cmp	r3, #0
 800f722:	d00a      	beq.n	800f73a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f724:	4b6b      	ldr	r3, [pc, #428]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f72a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f732:	4968      	ldr	r1, [pc, #416]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f734:	4313      	orrs	r3, r2
 800f736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f742:	2b00      	cmp	r3, #0
 800f744:	d00a      	beq.n	800f75c <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f746:	4b63      	ldr	r3, [pc, #396]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f74c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f754:	495f      	ldr	r1, [pc, #380]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f756:	4313      	orrs	r3, r2
 800f758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f764:	2b00      	cmp	r3, #0
 800f766:	d00a      	beq.n	800f77e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f768:	4b5a      	ldr	r3, [pc, #360]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f76a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f76e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f776:	4957      	ldr	r1, [pc, #348]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f778:	4313      	orrs	r3, r2
 800f77a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f786:	2b00      	cmp	r3, #0
 800f788:	d00a      	beq.n	800f7a0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800f78a:	4b52      	ldr	r3, [pc, #328]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f78c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f790:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f798:	494e      	ldr	r1, [pc, #312]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f79a:	4313      	orrs	r3, r2
 800f79c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d031      	beq.n	800f810 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f7b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f7b4:	d00e      	beq.n	800f7d4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800f7b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f7ba:	d814      	bhi.n	800f7e6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d015      	beq.n	800f7ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800f7c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f7c4:	d10f      	bne.n	800f7e6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f7c6:	4b43      	ldr	r3, [pc, #268]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f7c8:	68db      	ldr	r3, [r3, #12]
 800f7ca:	4a42      	ldr	r2, [pc, #264]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f7cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f7d0:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800f7d2:	e00c      	b.n	800f7ee <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	3304      	adds	r3, #4
 800f7d8:	2100      	movs	r1, #0
 800f7da:	4618      	mov	r0, r3
 800f7dc:	f000 f97c 	bl	800fad8 <RCCEx_PLLSAI1_Config>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800f7e4:	e003      	b.n	800f7ee <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 800f7e6:	2301      	movs	r3, #1
 800f7e8:	77fb      	strb	r3, [r7, #31]
        break;
 800f7ea:	e000      	b.n	800f7ee <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 800f7ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f7ee:	7ffb      	ldrb	r3, [r7, #31]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d10b      	bne.n	800f80c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f7f4:	4b37      	ldr	r3, [pc, #220]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f7f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f7fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f802:	4934      	ldr	r1, [pc, #208]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f804:	4313      	orrs	r3, r2
 800f806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800f80a:	e001      	b.n	800f810 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f80c:	7ffb      	ldrb	r3, [r7, #31]
 800f80e:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d00a      	beq.n	800f832 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f81c:	4b2d      	ldr	r3, [pc, #180]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f81e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f822:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f82a:	492a      	ldr	r1, [pc, #168]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f82c:	4313      	orrs	r3, r2
 800f82e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d00a      	beq.n	800f854 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800f83e:	4b25      	ldr	r3, [pc, #148]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f844:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f84c:	4921      	ldr	r1, [pc, #132]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f84e:	4313      	orrs	r3, r2
 800f850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d00a      	beq.n	800f876 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f860:	4b1c      	ldr	r3, [pc, #112]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f866:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f86e:	4919      	ldr	r1, [pc, #100]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f870:	4313      	orrs	r3, r2
 800f872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d00a      	beq.n	800f898 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f882:	4b14      	ldr	r3, [pc, #80]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f884:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f888:	f023 0203 	bic.w	r2, r3, #3
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f890:	4910      	ldr	r1, [pc, #64]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f892:	4313      	orrs	r3, r2
 800f894:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d02b      	beq.n	800f8fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f8a4:	4b0b      	ldr	r3, [pc, #44]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f8a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f8aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f8b2:	4908      	ldr	r1, [pc, #32]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f8b4:	4313      	orrs	r3, r2
 800f8b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f8be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f8c2:	d109      	bne.n	800f8d8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f8c4:	4b03      	ldr	r3, [pc, #12]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f8c6:	68db      	ldr	r3, [r3, #12]
 800f8c8:	4a02      	ldr	r2, [pc, #8]	; (800f8d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800f8ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f8ce:	60d3      	str	r3, [r2, #12]
 800f8d0:	e014      	b.n	800f8fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800f8d2:	bf00      	nop
 800f8d4:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f8dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f8e0:	d10c      	bne.n	800f8fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	3304      	adds	r3, #4
 800f8e6:	2101      	movs	r1, #1
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f000 f8f5 	bl	800fad8 <RCCEx_PLLSAI1_Config>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 800f8f2:	7ffb      	ldrb	r3, [r7, #31]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d001      	beq.n	800f8fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 800f8f8:	7ffb      	ldrb	r3, [r7, #31]
 800f8fa:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f904:	2b00      	cmp	r3, #0
 800f906:	d04a      	beq.n	800f99e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f90c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f910:	d108      	bne.n	800f924 <HAL_RCCEx_PeriphCLKConfig+0x554>
 800f912:	4b70      	ldr	r3, [pc, #448]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800f914:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f918:	4a6e      	ldr	r2, [pc, #440]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800f91a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f91e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800f922:	e012      	b.n	800f94a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800f924:	4b6b      	ldr	r3, [pc, #428]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800f926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f92a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f932:	4968      	ldr	r1, [pc, #416]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800f934:	4313      	orrs	r3, r2
 800f936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800f93a:	4b66      	ldr	r3, [pc, #408]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800f93c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f940:	4a64      	ldr	r2, [pc, #400]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800f942:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f946:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f94e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f952:	d10d      	bne.n	800f970 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	3304      	adds	r3, #4
 800f958:	2101      	movs	r1, #1
 800f95a:	4618      	mov	r0, r3
 800f95c:	f000 f8bc 	bl	800fad8 <RCCEx_PLLSAI1_Config>
 800f960:	4603      	mov	r3, r0
 800f962:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800f964:	7ffb      	ldrb	r3, [r7, #31]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d019      	beq.n	800f99e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 800f96a:	7ffb      	ldrb	r3, [r7, #31]
 800f96c:	77bb      	strb	r3, [r7, #30]
 800f96e:	e016      	b.n	800f99e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f974:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f978:	d106      	bne.n	800f988 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f97a:	4b56      	ldr	r3, [pc, #344]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800f97c:	68db      	ldr	r3, [r3, #12]
 800f97e:	4a55      	ldr	r2, [pc, #340]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800f980:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f984:	60d3      	str	r3, [r2, #12]
 800f986:	e00a      	b.n	800f99e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f98c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f990:	d105      	bne.n	800f99e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800f992:	4b50      	ldr	r3, [pc, #320]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800f994:	68db      	ldr	r3, [r3, #12]
 800f996:	4a4f      	ldr	r2, [pc, #316]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800f998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f99c:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d028      	beq.n	800f9fc <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f9aa:	4b4a      	ldr	r3, [pc, #296]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800f9ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f9b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9b8:	4946      	ldr	r1, [pc, #280]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800f9ba:	4313      	orrs	r3, r2
 800f9bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f9c8:	d106      	bne.n	800f9d8 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f9ca:	4b42      	ldr	r3, [pc, #264]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800f9cc:	68db      	ldr	r3, [r3, #12]
 800f9ce:	4a41      	ldr	r2, [pc, #260]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800f9d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f9d4:	60d3      	str	r3, [r2, #12]
 800f9d6:	e011      	b.n	800f9fc <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f9e0:	d10c      	bne.n	800f9fc <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	3304      	adds	r3, #4
 800f9e6:	2101      	movs	r1, #1
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f000 f875 	bl	800fad8 <RCCEx_PLLSAI1_Config>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800f9f2:	7ffb      	ldrb	r3, [r7, #31]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d001      	beq.n	800f9fc <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 800f9f8:	7ffb      	ldrb	r3, [r7, #31]
 800f9fa:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d01e      	beq.n	800fa46 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800fa08:	4b32      	ldr	r3, [pc, #200]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800fa0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa18:	492e      	ldr	r1, [pc, #184]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800fa1a:	4313      	orrs	r3, r2
 800fa1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fa2a:	d10c      	bne.n	800fa46 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	3304      	adds	r3, #4
 800fa30:	2102      	movs	r1, #2
 800fa32:	4618      	mov	r0, r3
 800fa34:	f000 f850 	bl	800fad8 <RCCEx_PLLSAI1_Config>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800fa3c:	7ffb      	ldrb	r3, [r7, #31]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d001      	beq.n	800fa46 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 800fa42:	7ffb      	ldrb	r3, [r7, #31]
 800fa44:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d00b      	beq.n	800fa6a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800fa52:	4b20      	ldr	r3, [pc, #128]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800fa54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fa58:	f023 0204 	bic.w	r2, r3, #4
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa62:	491c      	ldr	r1, [pc, #112]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800fa64:	4313      	orrs	r3, r2
 800fa66:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d00b      	beq.n	800fa8e <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800fa76:	4b17      	ldr	r3, [pc, #92]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800fa78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fa7c:	f023 0218 	bic.w	r2, r3, #24
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa86:	4913      	ldr	r1, [pc, #76]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800fa88:	4313      	orrs	r3, r2
 800fa8a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d017      	beq.n	800faca <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800fa9a:	4b0e      	ldr	r3, [pc, #56]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800fa9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800faa0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800faaa:	490a      	ldr	r1, [pc, #40]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800faac:	4313      	orrs	r3, r2
 800faae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fab8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fabc:	d105      	bne.n	800faca <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800fabe:	4b05      	ldr	r3, [pc, #20]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800fac0:	68db      	ldr	r3, [r3, #12]
 800fac2:	4a04      	ldr	r2, [pc, #16]	; (800fad4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800fac4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fac8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800faca:	7fbb      	ldrb	r3, [r7, #30]
}
 800facc:	4618      	mov	r0, r3
 800face:	3720      	adds	r7, #32
 800fad0:	46bd      	mov	sp, r7
 800fad2:	bd80      	pop	{r7, pc}
 800fad4:	40021000 	.word	0x40021000

0800fad8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b084      	sub	sp, #16
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
 800fae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fae2:	2300      	movs	r3, #0
 800fae4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	2b03      	cmp	r3, #3
 800faec:	d018      	beq.n	800fb20 <RCCEx_PLLSAI1_Config+0x48>
 800faee:	2b03      	cmp	r3, #3
 800faf0:	d81f      	bhi.n	800fb32 <RCCEx_PLLSAI1_Config+0x5a>
 800faf2:	2b01      	cmp	r3, #1
 800faf4:	d002      	beq.n	800fafc <RCCEx_PLLSAI1_Config+0x24>
 800faf6:	2b02      	cmp	r3, #2
 800faf8:	d009      	beq.n	800fb0e <RCCEx_PLLSAI1_Config+0x36>
 800fafa:	e01a      	b.n	800fb32 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800fafc:	4b65      	ldr	r3, [pc, #404]	; (800fc94 <RCCEx_PLLSAI1_Config+0x1bc>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	f003 0302 	and.w	r3, r3, #2
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d117      	bne.n	800fb38 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 800fb08:	2301      	movs	r3, #1
 800fb0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fb0c:	e014      	b.n	800fb38 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800fb0e:	4b61      	ldr	r3, [pc, #388]	; (800fc94 <RCCEx_PLLSAI1_Config+0x1bc>)
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d110      	bne.n	800fb3c <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 800fb1a:	2301      	movs	r3, #1
 800fb1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fb1e:	e00d      	b.n	800fb3c <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 800fb20:	4b5c      	ldr	r3, [pc, #368]	; (800fc94 <RCCEx_PLLSAI1_Config+0x1bc>)
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d109      	bne.n	800fb40 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 800fb2c:	2301      	movs	r3, #1
 800fb2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fb30:	e006      	b.n	800fb40 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 800fb32:	2301      	movs	r3, #1
 800fb34:	73fb      	strb	r3, [r7, #15]
      break;
 800fb36:	e004      	b.n	800fb42 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800fb38:	bf00      	nop
 800fb3a:	e002      	b.n	800fb42 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800fb3c:	bf00      	nop
 800fb3e:	e000      	b.n	800fb42 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800fb40:	bf00      	nop
  }

  if (status == HAL_OK)
 800fb42:	7bfb      	ldrb	r3, [r7, #15]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	f040 809f 	bne.w	800fc88 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800fb4a:	4b52      	ldr	r3, [pc, #328]	; (800fc94 <RCCEx_PLLSAI1_Config+0x1bc>)
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	4a51      	ldr	r2, [pc, #324]	; (800fc94 <RCCEx_PLLSAI1_Config+0x1bc>)
 800fb50:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fb54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fb56:	f7fb fa3b 	bl	800afd0 <HAL_GetTick>
 800fb5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800fb5c:	e00f      	b.n	800fb7e <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fb5e:	f7fb fa37 	bl	800afd0 <HAL_GetTick>
 800fb62:	4602      	mov	r2, r0
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	1ad3      	subs	r3, r2, r3
 800fb68:	2b02      	cmp	r3, #2
 800fb6a:	d908      	bls.n	800fb7e <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800fb6c:	4b49      	ldr	r3, [pc, #292]	; (800fc94 <RCCEx_PLLSAI1_Config+0x1bc>)
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d009      	beq.n	800fb8c <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 800fb78:	2303      	movs	r3, #3
 800fb7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800fb7c:	e006      	b.n	800fb8c <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800fb7e:	4b45      	ldr	r3, [pc, #276]	; (800fc94 <RCCEx_PLLSAI1_Config+0x1bc>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d1e9      	bne.n	800fb5e <RCCEx_PLLSAI1_Config+0x86>
 800fb8a:	e000      	b.n	800fb8e <RCCEx_PLLSAI1_Config+0xb6>
        break;
 800fb8c:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800fb8e:	7bfb      	ldrb	r3, [r7, #15]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d179      	bne.n	800fc88 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800fb94:	683b      	ldr	r3, [r7, #0]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d116      	bne.n	800fbc8 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800fb9a:	4b3e      	ldr	r3, [pc, #248]	; (800fc94 <RCCEx_PLLSAI1_Config+0x1bc>)
 800fb9c:	691a      	ldr	r2, [r3, #16]
 800fb9e:	4b3e      	ldr	r3, [pc, #248]	; (800fc98 <RCCEx_PLLSAI1_Config+0x1c0>)
 800fba0:	4013      	ands	r3, r2
 800fba2:	687a      	ldr	r2, [r7, #4]
 800fba4:	6892      	ldr	r2, [r2, #8]
 800fba6:	0211      	lsls	r1, r2, #8
 800fba8:	687a      	ldr	r2, [r7, #4]
 800fbaa:	68d2      	ldr	r2, [r2, #12]
 800fbac:	06d2      	lsls	r2, r2, #27
 800fbae:	4311      	orrs	r1, r2
 800fbb0:	687a      	ldr	r2, [r7, #4]
 800fbb2:	6852      	ldr	r2, [r2, #4]
 800fbb4:	3a01      	subs	r2, #1
 800fbb6:	0112      	lsls	r2, r2, #4
 800fbb8:	4311      	orrs	r1, r2
 800fbba:	687a      	ldr	r2, [r7, #4]
 800fbbc:	6812      	ldr	r2, [r2, #0]
 800fbbe:	430a      	orrs	r2, r1
 800fbc0:	4934      	ldr	r1, [pc, #208]	; (800fc94 <RCCEx_PLLSAI1_Config+0x1bc>)
 800fbc2:	4313      	orrs	r3, r2
 800fbc4:	610b      	str	r3, [r1, #16]
 800fbc6:	e033      	b.n	800fc30 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	2b01      	cmp	r3, #1
 800fbcc:	d118      	bne.n	800fc00 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800fbce:	4b31      	ldr	r3, [pc, #196]	; (800fc94 <RCCEx_PLLSAI1_Config+0x1bc>)
 800fbd0:	691a      	ldr	r2, [r3, #16]
 800fbd2:	4b32      	ldr	r3, [pc, #200]	; (800fc9c <RCCEx_PLLSAI1_Config+0x1c4>)
 800fbd4:	4013      	ands	r3, r2
 800fbd6:	687a      	ldr	r2, [r7, #4]
 800fbd8:	6892      	ldr	r2, [r2, #8]
 800fbda:	0211      	lsls	r1, r2, #8
 800fbdc:	687a      	ldr	r2, [r7, #4]
 800fbde:	6912      	ldr	r2, [r2, #16]
 800fbe0:	0852      	lsrs	r2, r2, #1
 800fbe2:	3a01      	subs	r2, #1
 800fbe4:	0552      	lsls	r2, r2, #21
 800fbe6:	4311      	orrs	r1, r2
 800fbe8:	687a      	ldr	r2, [r7, #4]
 800fbea:	6852      	ldr	r2, [r2, #4]
 800fbec:	3a01      	subs	r2, #1
 800fbee:	0112      	lsls	r2, r2, #4
 800fbf0:	4311      	orrs	r1, r2
 800fbf2:	687a      	ldr	r2, [r7, #4]
 800fbf4:	6812      	ldr	r2, [r2, #0]
 800fbf6:	430a      	orrs	r2, r1
 800fbf8:	4926      	ldr	r1, [pc, #152]	; (800fc94 <RCCEx_PLLSAI1_Config+0x1bc>)
 800fbfa:	4313      	orrs	r3, r2
 800fbfc:	610b      	str	r3, [r1, #16]
 800fbfe:	e017      	b.n	800fc30 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800fc00:	4b24      	ldr	r3, [pc, #144]	; (800fc94 <RCCEx_PLLSAI1_Config+0x1bc>)
 800fc02:	691a      	ldr	r2, [r3, #16]
 800fc04:	4b26      	ldr	r3, [pc, #152]	; (800fca0 <RCCEx_PLLSAI1_Config+0x1c8>)
 800fc06:	4013      	ands	r3, r2
 800fc08:	687a      	ldr	r2, [r7, #4]
 800fc0a:	6892      	ldr	r2, [r2, #8]
 800fc0c:	0211      	lsls	r1, r2, #8
 800fc0e:	687a      	ldr	r2, [r7, #4]
 800fc10:	6952      	ldr	r2, [r2, #20]
 800fc12:	0852      	lsrs	r2, r2, #1
 800fc14:	3a01      	subs	r2, #1
 800fc16:	0652      	lsls	r2, r2, #25
 800fc18:	4311      	orrs	r1, r2
 800fc1a:	687a      	ldr	r2, [r7, #4]
 800fc1c:	6852      	ldr	r2, [r2, #4]
 800fc1e:	3a01      	subs	r2, #1
 800fc20:	0112      	lsls	r2, r2, #4
 800fc22:	4311      	orrs	r1, r2
 800fc24:	687a      	ldr	r2, [r7, #4]
 800fc26:	6812      	ldr	r2, [r2, #0]
 800fc28:	430a      	orrs	r2, r1
 800fc2a:	491a      	ldr	r1, [pc, #104]	; (800fc94 <RCCEx_PLLSAI1_Config+0x1bc>)
 800fc2c:	4313      	orrs	r3, r2
 800fc2e:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800fc30:	4b18      	ldr	r3, [pc, #96]	; (800fc94 <RCCEx_PLLSAI1_Config+0x1bc>)
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	4a17      	ldr	r2, [pc, #92]	; (800fc94 <RCCEx_PLLSAI1_Config+0x1bc>)
 800fc36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fc3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fc3c:	f7fb f9c8 	bl	800afd0 <HAL_GetTick>
 800fc40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800fc42:	e00f      	b.n	800fc64 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fc44:	f7fb f9c4 	bl	800afd0 <HAL_GetTick>
 800fc48:	4602      	mov	r2, r0
 800fc4a:	68bb      	ldr	r3, [r7, #8]
 800fc4c:	1ad3      	subs	r3, r2, r3
 800fc4e:	2b02      	cmp	r3, #2
 800fc50:	d908      	bls.n	800fc64 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800fc52:	4b10      	ldr	r3, [pc, #64]	; (800fc94 <RCCEx_PLLSAI1_Config+0x1bc>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d109      	bne.n	800fc72 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 800fc5e:	2303      	movs	r3, #3
 800fc60:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800fc62:	e006      	b.n	800fc72 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800fc64:	4b0b      	ldr	r3, [pc, #44]	; (800fc94 <RCCEx_PLLSAI1_Config+0x1bc>)
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d0e9      	beq.n	800fc44 <RCCEx_PLLSAI1_Config+0x16c>
 800fc70:	e000      	b.n	800fc74 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 800fc72:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800fc74:	7bfb      	ldrb	r3, [r7, #15]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d106      	bne.n	800fc88 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800fc7a:	4b06      	ldr	r3, [pc, #24]	; (800fc94 <RCCEx_PLLSAI1_Config+0x1bc>)
 800fc7c:	691a      	ldr	r2, [r3, #16]
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	699b      	ldr	r3, [r3, #24]
 800fc82:	4904      	ldr	r1, [pc, #16]	; (800fc94 <RCCEx_PLLSAI1_Config+0x1bc>)
 800fc84:	4313      	orrs	r3, r2
 800fc86:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800fc88:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	3710      	adds	r7, #16
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}
 800fc92:	bf00      	nop
 800fc94:	40021000 	.word	0x40021000
 800fc98:	07ff800c 	.word	0x07ff800c
 800fc9c:	ff9f800c 	.word	0xff9f800c
 800fca0:	f9ff800c 	.word	0xf9ff800c

0800fca4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b084      	sub	sp, #16
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
 800fcac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	2b03      	cmp	r3, #3
 800fcb8:	d018      	beq.n	800fcec <RCCEx_PLLSAI2_Config+0x48>
 800fcba:	2b03      	cmp	r3, #3
 800fcbc:	d81f      	bhi.n	800fcfe <RCCEx_PLLSAI2_Config+0x5a>
 800fcbe:	2b01      	cmp	r3, #1
 800fcc0:	d002      	beq.n	800fcc8 <RCCEx_PLLSAI2_Config+0x24>
 800fcc2:	2b02      	cmp	r3, #2
 800fcc4:	d009      	beq.n	800fcda <RCCEx_PLLSAI2_Config+0x36>
 800fcc6:	e01a      	b.n	800fcfe <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800fcc8:	4b4a      	ldr	r3, [pc, #296]	; (800fdf4 <RCCEx_PLLSAI2_Config+0x150>)
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	f003 0302 	and.w	r3, r3, #2
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d117      	bne.n	800fd04 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 800fcd4:	2301      	movs	r3, #1
 800fcd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fcd8:	e014      	b.n	800fd04 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800fcda:	4b46      	ldr	r3, [pc, #280]	; (800fdf4 <RCCEx_PLLSAI2_Config+0x150>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d110      	bne.n	800fd08 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800fce6:	2301      	movs	r3, #1
 800fce8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fcea:	e00d      	b.n	800fd08 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 800fcec:	4b41      	ldr	r3, [pc, #260]	; (800fdf4 <RCCEx_PLLSAI2_Config+0x150>)
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d109      	bne.n	800fd0c <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 800fcf8:	2301      	movs	r3, #1
 800fcfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fcfc:	e006      	b.n	800fd0c <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 800fcfe:	2301      	movs	r3, #1
 800fd00:	73fb      	strb	r3, [r7, #15]
      break;
 800fd02:	e004      	b.n	800fd0e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800fd04:	bf00      	nop
 800fd06:	e002      	b.n	800fd0e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800fd08:	bf00      	nop
 800fd0a:	e000      	b.n	800fd0e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800fd0c:	bf00      	nop
  }

  if (status == HAL_OK)
 800fd0e:	7bfb      	ldrb	r3, [r7, #15]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d169      	bne.n	800fde8 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800fd14:	4b37      	ldr	r3, [pc, #220]	; (800fdf4 <RCCEx_PLLSAI2_Config+0x150>)
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	4a36      	ldr	r2, [pc, #216]	; (800fdf4 <RCCEx_PLLSAI2_Config+0x150>)
 800fd1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fd1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fd20:	f7fb f956 	bl	800afd0 <HAL_GetTick>
 800fd24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800fd26:	e00f      	b.n	800fd48 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800fd28:	f7fb f952 	bl	800afd0 <HAL_GetTick>
 800fd2c:	4602      	mov	r2, r0
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	1ad3      	subs	r3, r2, r3
 800fd32:	2b02      	cmp	r3, #2
 800fd34:	d908      	bls.n	800fd48 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800fd36:	4b2f      	ldr	r3, [pc, #188]	; (800fdf4 <RCCEx_PLLSAI2_Config+0x150>)
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d009      	beq.n	800fd56 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 800fd42:	2303      	movs	r3, #3
 800fd44:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800fd46:	e006      	b.n	800fd56 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800fd48:	4b2a      	ldr	r3, [pc, #168]	; (800fdf4 <RCCEx_PLLSAI2_Config+0x150>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d1e9      	bne.n	800fd28 <RCCEx_PLLSAI2_Config+0x84>
 800fd54:	e000      	b.n	800fd58 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 800fd56:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800fd58:	7bfb      	ldrb	r3, [r7, #15]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d144      	bne.n	800fde8 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d115      	bne.n	800fd90 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800fd64:	4b23      	ldr	r3, [pc, #140]	; (800fdf4 <RCCEx_PLLSAI2_Config+0x150>)
 800fd66:	695a      	ldr	r2, [r3, #20]
 800fd68:	4b23      	ldr	r3, [pc, #140]	; (800fdf8 <RCCEx_PLLSAI2_Config+0x154>)
 800fd6a:	4013      	ands	r3, r2
 800fd6c:	687a      	ldr	r2, [r7, #4]
 800fd6e:	6892      	ldr	r2, [r2, #8]
 800fd70:	0211      	lsls	r1, r2, #8
 800fd72:	687a      	ldr	r2, [r7, #4]
 800fd74:	68d2      	ldr	r2, [r2, #12]
 800fd76:	06d2      	lsls	r2, r2, #27
 800fd78:	4311      	orrs	r1, r2
 800fd7a:	687a      	ldr	r2, [r7, #4]
 800fd7c:	6852      	ldr	r2, [r2, #4]
 800fd7e:	3a01      	subs	r2, #1
 800fd80:	0112      	lsls	r2, r2, #4
 800fd82:	4311      	orrs	r1, r2
 800fd84:	687a      	ldr	r2, [r7, #4]
 800fd86:	6812      	ldr	r2, [r2, #0]
 800fd88:	430a      	orrs	r2, r1
 800fd8a:	491a      	ldr	r1, [pc, #104]	; (800fdf4 <RCCEx_PLLSAI2_Config+0x150>)
 800fd8c:	4313      	orrs	r3, r2
 800fd8e:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800fd90:	4b18      	ldr	r3, [pc, #96]	; (800fdf4 <RCCEx_PLLSAI2_Config+0x150>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	4a17      	ldr	r2, [pc, #92]	; (800fdf4 <RCCEx_PLLSAI2_Config+0x150>)
 800fd96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fd9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fd9c:	f7fb f918 	bl	800afd0 <HAL_GetTick>
 800fda0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800fda2:	e00f      	b.n	800fdc4 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800fda4:	f7fb f914 	bl	800afd0 <HAL_GetTick>
 800fda8:	4602      	mov	r2, r0
 800fdaa:	68bb      	ldr	r3, [r7, #8]
 800fdac:	1ad3      	subs	r3, r2, r3
 800fdae:	2b02      	cmp	r3, #2
 800fdb0:	d908      	bls.n	800fdc4 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800fdb2:	4b10      	ldr	r3, [pc, #64]	; (800fdf4 <RCCEx_PLLSAI2_Config+0x150>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d109      	bne.n	800fdd2 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 800fdbe:	2303      	movs	r3, #3
 800fdc0:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800fdc2:	e006      	b.n	800fdd2 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800fdc4:	4b0b      	ldr	r3, [pc, #44]	; (800fdf4 <RCCEx_PLLSAI2_Config+0x150>)
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d0e9      	beq.n	800fda4 <RCCEx_PLLSAI2_Config+0x100>
 800fdd0:	e000      	b.n	800fdd4 <RCCEx_PLLSAI2_Config+0x130>
          break;
 800fdd2:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800fdd4:	7bfb      	ldrb	r3, [r7, #15]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d106      	bne.n	800fde8 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 800fdda:	4b06      	ldr	r3, [pc, #24]	; (800fdf4 <RCCEx_PLLSAI2_Config+0x150>)
 800fddc:	695a      	ldr	r2, [r3, #20]
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	691b      	ldr	r3, [r3, #16]
 800fde2:	4904      	ldr	r1, [pc, #16]	; (800fdf4 <RCCEx_PLLSAI2_Config+0x150>)
 800fde4:	4313      	orrs	r3, r2
 800fde6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800fde8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdea:	4618      	mov	r0, r3
 800fdec:	3710      	adds	r7, #16
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bd80      	pop	{r7, pc}
 800fdf2:	bf00      	nop
 800fdf4:	40021000 	.word	0x40021000
 800fdf8:	07ff800c 	.word	0x07ff800c

0800fdfc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b084      	sub	sp, #16
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800fe04:	2301      	movs	r3, #1
 800fe06:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d066      	beq.n	800fedc <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800fe14:	b2db      	uxtb	r3, r3
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d106      	bne.n	800fe28 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f7fa fb42 	bl	800a4ac <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2202      	movs	r2, #2
 800fe2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	68db      	ldr	r3, [r3, #12]
 800fe36:	f003 0310 	and.w	r3, r3, #16
 800fe3a:	2b10      	cmp	r3, #16
 800fe3c:	d045      	beq.n	800feca <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fe3e:	4b2a      	ldr	r3, [pc, #168]	; (800fee8 <HAL_RTC_Init+0xec>)
 800fe40:	22ca      	movs	r2, #202	; 0xca
 800fe42:	625a      	str	r2, [r3, #36]	; 0x24
 800fe44:	4b28      	ldr	r3, [pc, #160]	; (800fee8 <HAL_RTC_Init+0xec>)
 800fe46:	2253      	movs	r2, #83	; 0x53
 800fe48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f000 f872 	bl	800ff34 <RTC_EnterInitMode>
 800fe50:	4603      	mov	r3, r0
 800fe52:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800fe54:	7bfb      	ldrb	r3, [r7, #15]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d121      	bne.n	800fe9e <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800fe5a:	4b23      	ldr	r3, [pc, #140]	; (800fee8 <HAL_RTC_Init+0xec>)
 800fe5c:	699b      	ldr	r3, [r3, #24]
 800fe5e:	4a22      	ldr	r2, [pc, #136]	; (800fee8 <HAL_RTC_Init+0xec>)
 800fe60:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800fe64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe68:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800fe6a:	4b1f      	ldr	r3, [pc, #124]	; (800fee8 <HAL_RTC_Init+0xec>)
 800fe6c:	699a      	ldr	r2, [r3, #24]
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	6859      	ldr	r1, [r3, #4]
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	691b      	ldr	r3, [r3, #16]
 800fe76:	4319      	orrs	r1, r3
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	699b      	ldr	r3, [r3, #24]
 800fe7c:	430b      	orrs	r3, r1
 800fe7e:	491a      	ldr	r1, [pc, #104]	; (800fee8 <HAL_RTC_Init+0xec>)
 800fe80:	4313      	orrs	r3, r2
 800fe82:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	68da      	ldr	r2, [r3, #12]
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	689b      	ldr	r3, [r3, #8]
 800fe8c:	041b      	lsls	r3, r3, #16
 800fe8e:	4916      	ldr	r1, [pc, #88]	; (800fee8 <HAL_RTC_Init+0xec>)
 800fe90:	4313      	orrs	r3, r2
 800fe92:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800fe94:	6878      	ldr	r0, [r7, #4]
 800fe96:	f000 f881 	bl	800ff9c <RTC_ExitInitMode>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800fe9e:	7bfb      	ldrb	r3, [r7, #15]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d10e      	bne.n	800fec2 <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 800fea4:	4b10      	ldr	r3, [pc, #64]	; (800fee8 <HAL_RTC_Init+0xec>)
 800fea6:	699b      	ldr	r3, [r3, #24]
 800fea8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	6a19      	ldr	r1, [r3, #32]
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	69db      	ldr	r3, [r3, #28]
 800feb4:	4319      	orrs	r1, r3
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	695b      	ldr	r3, [r3, #20]
 800feba:	430b      	orrs	r3, r1
 800febc:	490a      	ldr	r1, [pc, #40]	; (800fee8 <HAL_RTC_Init+0xec>)
 800febe:	4313      	orrs	r3, r2
 800fec0:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fec2:	4b09      	ldr	r3, [pc, #36]	; (800fee8 <HAL_RTC_Init+0xec>)
 800fec4:	22ff      	movs	r2, #255	; 0xff
 800fec6:	625a      	str	r2, [r3, #36]	; 0x24
 800fec8:	e001      	b.n	800fece <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800feca:	2300      	movs	r3, #0
 800fecc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800fece:	7bfb      	ldrb	r3, [r7, #15]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d103      	bne.n	800fedc <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2201      	movs	r2, #1
 800fed8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 800fedc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fede:	4618      	mov	r0, r3
 800fee0:	3710      	adds	r7, #16
 800fee2:	46bd      	mov	sp, r7
 800fee4:	bd80      	pop	{r7, pc}
 800fee6:	bf00      	nop
 800fee8:	40002800 	.word	0x40002800

0800feec <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b084      	sub	sp, #16
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 800fef4:	4b0d      	ldr	r3, [pc, #52]	; (800ff2c <HAL_RTC_WaitForSynchro+0x40>)
 800fef6:	4a0e      	ldr	r2, [pc, #56]	; (800ff30 <HAL_RTC_WaitForSynchro+0x44>)
 800fef8:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800fefa:	f7fb f869 	bl	800afd0 <HAL_GetTick>
 800fefe:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800ff00:	e009      	b.n	800ff16 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ff02:	f7fb f865 	bl	800afd0 <HAL_GetTick>
 800ff06:	4602      	mov	r2, r0
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	1ad3      	subs	r3, r2, r3
 800ff0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ff10:	d901      	bls.n	800ff16 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 800ff12:	2303      	movs	r3, #3
 800ff14:	e006      	b.n	800ff24 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800ff16:	4b05      	ldr	r3, [pc, #20]	; (800ff2c <HAL_RTC_WaitForSynchro+0x40>)
 800ff18:	68db      	ldr	r3, [r3, #12]
 800ff1a:	f003 0320 	and.w	r3, r3, #32
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d0ef      	beq.n	800ff02 <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 800ff22:	2300      	movs	r3, #0
}
 800ff24:	4618      	mov	r0, r3
 800ff26:	3710      	adds	r7, #16
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd80      	pop	{r7, pc}
 800ff2c:	40002800 	.word	0x40002800
 800ff30:	0001005c 	.word	0x0001005c

0800ff34 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b084      	sub	sp, #16
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800ff40:	4b15      	ldr	r3, [pc, #84]	; (800ff98 <RTC_EnterInitMode+0x64>)
 800ff42:	68db      	ldr	r3, [r3, #12]
 800ff44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d120      	bne.n	800ff8e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800ff4c:	4b12      	ldr	r3, [pc, #72]	; (800ff98 <RTC_EnterInitMode+0x64>)
 800ff4e:	68db      	ldr	r3, [r3, #12]
 800ff50:	4a11      	ldr	r2, [pc, #68]	; (800ff98 <RTC_EnterInitMode+0x64>)
 800ff52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff56:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800ff58:	f7fb f83a 	bl	800afd0 <HAL_GetTick>
 800ff5c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ff5e:	e00d      	b.n	800ff7c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ff60:	f7fb f836 	bl	800afd0 <HAL_GetTick>
 800ff64:	4602      	mov	r2, r0
 800ff66:	68bb      	ldr	r3, [r7, #8]
 800ff68:	1ad3      	subs	r3, r2, r3
 800ff6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ff6e:	d905      	bls.n	800ff7c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800ff70:	2303      	movs	r3, #3
 800ff72:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	2203      	movs	r2, #3
 800ff78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ff7c:	4b06      	ldr	r3, [pc, #24]	; (800ff98 <RTC_EnterInitMode+0x64>)
 800ff7e:	68db      	ldr	r3, [r3, #12]
 800ff80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d102      	bne.n	800ff8e <RTC_EnterInitMode+0x5a>
 800ff88:	7bfb      	ldrb	r3, [r7, #15]
 800ff8a:	2b03      	cmp	r3, #3
 800ff8c:	d1e8      	bne.n	800ff60 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800ff8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff90:	4618      	mov	r0, r3
 800ff92:	3710      	adds	r7, #16
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}
 800ff98:	40002800 	.word	0x40002800

0800ff9c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b084      	sub	sp, #16
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800ffa8:	4b1a      	ldr	r3, [pc, #104]	; (8010014 <RTC_ExitInitMode+0x78>)
 800ffaa:	68db      	ldr	r3, [r3, #12]
 800ffac:	4a19      	ldr	r2, [pc, #100]	; (8010014 <RTC_ExitInitMode+0x78>)
 800ffae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ffb2:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800ffb4:	4b17      	ldr	r3, [pc, #92]	; (8010014 <RTC_ExitInitMode+0x78>)
 800ffb6:	699b      	ldr	r3, [r3, #24]
 800ffb8:	f003 0320 	and.w	r3, r3, #32
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d10c      	bne.n	800ffda <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ffc0:	6878      	ldr	r0, [r7, #4]
 800ffc2:	f7ff ff93 	bl	800feec <HAL_RTC_WaitForSynchro>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d01e      	beq.n	801000a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2203      	movs	r2, #3
 800ffd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800ffd4:	2303      	movs	r3, #3
 800ffd6:	73fb      	strb	r3, [r7, #15]
 800ffd8:	e017      	b.n	801000a <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ffda:	4b0e      	ldr	r3, [pc, #56]	; (8010014 <RTC_ExitInitMode+0x78>)
 800ffdc:	699b      	ldr	r3, [r3, #24]
 800ffde:	4a0d      	ldr	r2, [pc, #52]	; (8010014 <RTC_ExitInitMode+0x78>)
 800ffe0:	f023 0320 	bic.w	r3, r3, #32
 800ffe4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ffe6:	6878      	ldr	r0, [r7, #4]
 800ffe8:	f7ff ff80 	bl	800feec <HAL_RTC_WaitForSynchro>
 800ffec:	4603      	mov	r3, r0
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d005      	beq.n	800fffe <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	2203      	movs	r2, #3
 800fff6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800fffa:	2303      	movs	r3, #3
 800fffc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800fffe:	4b05      	ldr	r3, [pc, #20]	; (8010014 <RTC_ExitInitMode+0x78>)
 8010000:	699b      	ldr	r3, [r3, #24]
 8010002:	4a04      	ldr	r2, [pc, #16]	; (8010014 <RTC_ExitInitMode+0x78>)
 8010004:	f043 0320 	orr.w	r3, r3, #32
 8010008:	6193      	str	r3, [r2, #24]
  }

  return status;
 801000a:	7bfb      	ldrb	r3, [r7, #15]
}
 801000c:	4618      	mov	r0, r3
 801000e:	3710      	adds	r7, #16
 8010010:	46bd      	mov	sp, r7
 8010012:	bd80      	pop	{r7, pc}
 8010014:	40002800 	.word	0x40002800

08010018 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8010018:	b480      	push	{r7}
 801001a:	b083      	sub	sp, #12
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
 8010020:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8010022:	683b      	ldr	r3, [r7, #0]
 8010024:	681a      	ldr	r2, [r3, #0]
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	685b      	ldr	r3, [r3, #4]
 801002a:	490f      	ldr	r1, [pc, #60]	; (8010068 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 801002c:	4313      	orrs	r3, r2
 801002e:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	689a      	ldr	r2, [r3, #8]
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	68db      	ldr	r3, [r3, #12]
 8010038:	490c      	ldr	r1, [pc, #48]	; (801006c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 801003a:	4313      	orrs	r3, r2
 801003c:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 801003e:	4b0b      	ldr	r3, [pc, #44]	; (801006c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8010040:	6a1b      	ldr	r3, [r3, #32]
 8010042:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8010046:	683b      	ldr	r3, [r7, #0]
 8010048:	6919      	ldr	r1, [r3, #16]
 801004a:	683b      	ldr	r3, [r7, #0]
 801004c:	695b      	ldr	r3, [r3, #20]
 801004e:	041b      	lsls	r3, r3, #16
 8010050:	430b      	orrs	r3, r1
 8010052:	4906      	ldr	r1, [pc, #24]	; (801006c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8010054:	4313      	orrs	r3, r2
 8010056:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8010058:	2300      	movs	r3, #0
}
 801005a:	4618      	mov	r0, r3
 801005c:	370c      	adds	r7, #12
 801005e:	46bd      	mov	sp, r7
 8010060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010064:	4770      	bx	lr
 8010066:	bf00      	nop
 8010068:	40002800 	.word	0x40002800
 801006c:	40003400 	.word	0x40003400

08010070 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b084      	sub	sp, #16
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d101      	bne.n	8010082 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801007e:	2301      	movs	r3, #1
 8010080:	e095      	b.n	80101ae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010086:	2b00      	cmp	r3, #0
 8010088:	d108      	bne.n	801009c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	685b      	ldr	r3, [r3, #4]
 801008e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010092:	d009      	beq.n	80100a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2200      	movs	r2, #0
 8010098:	61da      	str	r2, [r3, #28]
 801009a:	e005      	b.n	80100a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2200      	movs	r2, #0
 80100a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	2200      	movs	r2, #0
 80100a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	2200      	movs	r2, #0
 80100ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80100b4:	b2db      	uxtb	r3, r3
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d106      	bne.n	80100c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	2200      	movs	r2, #0
 80100be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80100c2:	6878      	ldr	r0, [r7, #4]
 80100c4:	f7fa fa30 	bl	800a528 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	2202      	movs	r2, #2
 80100cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	681a      	ldr	r2, [r3, #0]
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80100de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	68db      	ldr	r3, [r3, #12]
 80100e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80100e8:	d902      	bls.n	80100f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80100ea:	2300      	movs	r3, #0
 80100ec:	60fb      	str	r3, [r7, #12]
 80100ee:	e002      	b.n	80100f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80100f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80100f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	68db      	ldr	r3, [r3, #12]
 80100fa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80100fe:	d007      	beq.n	8010110 <HAL_SPI_Init+0xa0>
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	68db      	ldr	r3, [r3, #12]
 8010104:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8010108:	d002      	beq.n	8010110 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	2200      	movs	r2, #0
 801010e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	685b      	ldr	r3, [r3, #4]
 8010114:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	689b      	ldr	r3, [r3, #8]
 801011c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8010120:	431a      	orrs	r2, r3
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	691b      	ldr	r3, [r3, #16]
 8010126:	f003 0302 	and.w	r3, r3, #2
 801012a:	431a      	orrs	r2, r3
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	695b      	ldr	r3, [r3, #20]
 8010130:	f003 0301 	and.w	r3, r3, #1
 8010134:	431a      	orrs	r2, r3
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	699b      	ldr	r3, [r3, #24]
 801013a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801013e:	431a      	orrs	r2, r3
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	69db      	ldr	r3, [r3, #28]
 8010144:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010148:	431a      	orrs	r2, r3
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	6a1b      	ldr	r3, [r3, #32]
 801014e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010152:	ea42 0103 	orr.w	r1, r2, r3
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801015a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	430a      	orrs	r2, r1
 8010164:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	699b      	ldr	r3, [r3, #24]
 801016a:	0c1b      	lsrs	r3, r3, #16
 801016c:	f003 0204 	and.w	r2, r3, #4
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010174:	f003 0310 	and.w	r3, r3, #16
 8010178:	431a      	orrs	r2, r3
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801017e:	f003 0308 	and.w	r3, r3, #8
 8010182:	431a      	orrs	r2, r3
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	68db      	ldr	r3, [r3, #12]
 8010188:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801018c:	ea42 0103 	orr.w	r1, r2, r3
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	430a      	orrs	r2, r1
 801019c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	2200      	movs	r2, #0
 80101a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2201      	movs	r2, #1
 80101a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80101ac:	2300      	movs	r3, #0
}
 80101ae:	4618      	mov	r0, r3
 80101b0:	3710      	adds	r7, #16
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bd80      	pop	{r7, pc}

080101b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80101b6:	b580      	push	{r7, lr}
 80101b8:	b088      	sub	sp, #32
 80101ba:	af00      	add	r7, sp, #0
 80101bc:	60f8      	str	r0, [r7, #12]
 80101be:	60b9      	str	r1, [r7, #8]
 80101c0:	603b      	str	r3, [r7, #0]
 80101c2:	4613      	mov	r3, r2
 80101c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80101c6:	2300      	movs	r3, #0
 80101c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80101d0:	2b01      	cmp	r3, #1
 80101d2:	d101      	bne.n	80101d8 <HAL_SPI_Transmit+0x22>
 80101d4:	2302      	movs	r3, #2
 80101d6:	e158      	b.n	801048a <HAL_SPI_Transmit+0x2d4>
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	2201      	movs	r2, #1
 80101dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80101e0:	f7fa fef6 	bl	800afd0 <HAL_GetTick>
 80101e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80101e6:	88fb      	ldrh	r3, [r7, #6]
 80101e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80101f0:	b2db      	uxtb	r3, r3
 80101f2:	2b01      	cmp	r3, #1
 80101f4:	d002      	beq.n	80101fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80101f6:	2302      	movs	r3, #2
 80101f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80101fa:	e13d      	b.n	8010478 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80101fc:	68bb      	ldr	r3, [r7, #8]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d002      	beq.n	8010208 <HAL_SPI_Transmit+0x52>
 8010202:	88fb      	ldrh	r3, [r7, #6]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d102      	bne.n	801020e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8010208:	2301      	movs	r3, #1
 801020a:	77fb      	strb	r3, [r7, #31]
    goto error;
 801020c:	e134      	b.n	8010478 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	2203      	movs	r2, #3
 8010212:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	2200      	movs	r2, #0
 801021a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	68ba      	ldr	r2, [r7, #8]
 8010220:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	88fa      	ldrh	r2, [r7, #6]
 8010226:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	88fa      	ldrh	r2, [r7, #6]
 801022c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	2200      	movs	r2, #0
 8010232:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	2200      	movs	r2, #0
 8010238:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	2200      	movs	r2, #0
 8010240:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	2200      	movs	r2, #0
 8010248:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	2200      	movs	r2, #0
 801024e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	689b      	ldr	r3, [r3, #8]
 8010254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010258:	d10f      	bne.n	801027a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	681a      	ldr	r2, [r3, #0]
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010268:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	681a      	ldr	r2, [r3, #0]
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010278:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010284:	2b40      	cmp	r3, #64	; 0x40
 8010286:	d007      	beq.n	8010298 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	681a      	ldr	r2, [r3, #0]
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010296:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	68db      	ldr	r3, [r3, #12]
 801029c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80102a0:	d94b      	bls.n	801033a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	685b      	ldr	r3, [r3, #4]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d002      	beq.n	80102b0 <HAL_SPI_Transmit+0xfa>
 80102aa:	8afb      	ldrh	r3, [r7, #22]
 80102ac:	2b01      	cmp	r3, #1
 80102ae:	d13e      	bne.n	801032e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102b4:	881a      	ldrh	r2, [r3, #0]
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102c0:	1c9a      	adds	r2, r3, #2
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80102ca:	b29b      	uxth	r3, r3
 80102cc:	3b01      	subs	r3, #1
 80102ce:	b29a      	uxth	r2, r3
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80102d4:	e02b      	b.n	801032e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	689b      	ldr	r3, [r3, #8]
 80102dc:	f003 0302 	and.w	r3, r3, #2
 80102e0:	2b02      	cmp	r3, #2
 80102e2:	d112      	bne.n	801030a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102e8:	881a      	ldrh	r2, [r3, #0]
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102f4:	1c9a      	adds	r2, r3, #2
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80102fe:	b29b      	uxth	r3, r3
 8010300:	3b01      	subs	r3, #1
 8010302:	b29a      	uxth	r2, r3
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010308:	e011      	b.n	801032e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801030a:	f7fa fe61 	bl	800afd0 <HAL_GetTick>
 801030e:	4602      	mov	r2, r0
 8010310:	69bb      	ldr	r3, [r7, #24]
 8010312:	1ad3      	subs	r3, r2, r3
 8010314:	683a      	ldr	r2, [r7, #0]
 8010316:	429a      	cmp	r2, r3
 8010318:	d803      	bhi.n	8010322 <HAL_SPI_Transmit+0x16c>
 801031a:	683b      	ldr	r3, [r7, #0]
 801031c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010320:	d102      	bne.n	8010328 <HAL_SPI_Transmit+0x172>
 8010322:	683b      	ldr	r3, [r7, #0]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d102      	bne.n	801032e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8010328:	2303      	movs	r3, #3
 801032a:	77fb      	strb	r3, [r7, #31]
          goto error;
 801032c:	e0a4      	b.n	8010478 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010332:	b29b      	uxth	r3, r3
 8010334:	2b00      	cmp	r3, #0
 8010336:	d1ce      	bne.n	80102d6 <HAL_SPI_Transmit+0x120>
 8010338:	e07c      	b.n	8010434 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	685b      	ldr	r3, [r3, #4]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d002      	beq.n	8010348 <HAL_SPI_Transmit+0x192>
 8010342:	8afb      	ldrh	r3, [r7, #22]
 8010344:	2b01      	cmp	r3, #1
 8010346:	d170      	bne.n	801042a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801034c:	b29b      	uxth	r3, r3
 801034e:	2b01      	cmp	r3, #1
 8010350:	d912      	bls.n	8010378 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010356:	881a      	ldrh	r2, [r3, #0]
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010362:	1c9a      	adds	r2, r3, #2
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801036c:	b29b      	uxth	r3, r3
 801036e:	3b02      	subs	r3, #2
 8010370:	b29a      	uxth	r2, r3
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010376:	e058      	b.n	801042a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	330c      	adds	r3, #12
 8010382:	7812      	ldrb	r2, [r2, #0]
 8010384:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801038a:	1c5a      	adds	r2, r3, #1
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010394:	b29b      	uxth	r3, r3
 8010396:	3b01      	subs	r3, #1
 8010398:	b29a      	uxth	r2, r3
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801039e:	e044      	b.n	801042a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	689b      	ldr	r3, [r3, #8]
 80103a6:	f003 0302 	and.w	r3, r3, #2
 80103aa:	2b02      	cmp	r3, #2
 80103ac:	d12b      	bne.n	8010406 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80103b2:	b29b      	uxth	r3, r3
 80103b4:	2b01      	cmp	r3, #1
 80103b6:	d912      	bls.n	80103de <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103bc:	881a      	ldrh	r2, [r3, #0]
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103c8:	1c9a      	adds	r2, r3, #2
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80103d2:	b29b      	uxth	r3, r3
 80103d4:	3b02      	subs	r3, #2
 80103d6:	b29a      	uxth	r2, r3
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80103dc:	e025      	b.n	801042a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	330c      	adds	r3, #12
 80103e8:	7812      	ldrb	r2, [r2, #0]
 80103ea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103f0:	1c5a      	adds	r2, r3, #1
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80103fa:	b29b      	uxth	r3, r3
 80103fc:	3b01      	subs	r3, #1
 80103fe:	b29a      	uxth	r2, r3
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010404:	e011      	b.n	801042a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010406:	f7fa fde3 	bl	800afd0 <HAL_GetTick>
 801040a:	4602      	mov	r2, r0
 801040c:	69bb      	ldr	r3, [r7, #24]
 801040e:	1ad3      	subs	r3, r2, r3
 8010410:	683a      	ldr	r2, [r7, #0]
 8010412:	429a      	cmp	r2, r3
 8010414:	d803      	bhi.n	801041e <HAL_SPI_Transmit+0x268>
 8010416:	683b      	ldr	r3, [r7, #0]
 8010418:	f1b3 3fff 	cmp.w	r3, #4294967295
 801041c:	d102      	bne.n	8010424 <HAL_SPI_Transmit+0x26e>
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d102      	bne.n	801042a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8010424:	2303      	movs	r3, #3
 8010426:	77fb      	strb	r3, [r7, #31]
          goto error;
 8010428:	e026      	b.n	8010478 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801042e:	b29b      	uxth	r3, r3
 8010430:	2b00      	cmp	r3, #0
 8010432:	d1b5      	bne.n	80103a0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010434:	69ba      	ldr	r2, [r7, #24]
 8010436:	6839      	ldr	r1, [r7, #0]
 8010438:	68f8      	ldr	r0, [r7, #12]
 801043a:	f000 fce3 	bl	8010e04 <SPI_EndRxTxTransaction>
 801043e:	4603      	mov	r3, r0
 8010440:	2b00      	cmp	r3, #0
 8010442:	d002      	beq.n	801044a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	2220      	movs	r2, #32
 8010448:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	689b      	ldr	r3, [r3, #8]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d10a      	bne.n	8010468 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010452:	2300      	movs	r3, #0
 8010454:	613b      	str	r3, [r7, #16]
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	68db      	ldr	r3, [r3, #12]
 801045c:	613b      	str	r3, [r7, #16]
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	689b      	ldr	r3, [r3, #8]
 8010464:	613b      	str	r3, [r7, #16]
 8010466:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801046c:	2b00      	cmp	r3, #0
 801046e:	d002      	beq.n	8010476 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8010470:	2301      	movs	r3, #1
 8010472:	77fb      	strb	r3, [r7, #31]
 8010474:	e000      	b.n	8010478 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8010476:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	2201      	movs	r2, #1
 801047c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	2200      	movs	r2, #0
 8010484:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8010488:	7ffb      	ldrb	r3, [r7, #31]
}
 801048a:	4618      	mov	r0, r3
 801048c:	3720      	adds	r7, #32
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}

08010492 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010492:	b580      	push	{r7, lr}
 8010494:	b088      	sub	sp, #32
 8010496:	af02      	add	r7, sp, #8
 8010498:	60f8      	str	r0, [r7, #12]
 801049a:	60b9      	str	r1, [r7, #8]
 801049c:	603b      	str	r3, [r7, #0]
 801049e:	4613      	mov	r3, r2
 80104a0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80104a2:	2300      	movs	r3, #0
 80104a4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	685b      	ldr	r3, [r3, #4]
 80104aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80104ae:	d112      	bne.n	80104d6 <HAL_SPI_Receive+0x44>
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	689b      	ldr	r3, [r3, #8]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d10e      	bne.n	80104d6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	2204      	movs	r2, #4
 80104bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80104c0:	88fa      	ldrh	r2, [r7, #6]
 80104c2:	683b      	ldr	r3, [r7, #0]
 80104c4:	9300      	str	r3, [sp, #0]
 80104c6:	4613      	mov	r3, r2
 80104c8:	68ba      	ldr	r2, [r7, #8]
 80104ca:	68b9      	ldr	r1, [r7, #8]
 80104cc:	68f8      	ldr	r0, [r7, #12]
 80104ce:	f000 f910 	bl	80106f2 <HAL_SPI_TransmitReceive>
 80104d2:	4603      	mov	r3, r0
 80104d4:	e109      	b.n	80106ea <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80104dc:	2b01      	cmp	r3, #1
 80104de:	d101      	bne.n	80104e4 <HAL_SPI_Receive+0x52>
 80104e0:	2302      	movs	r3, #2
 80104e2:	e102      	b.n	80106ea <HAL_SPI_Receive+0x258>
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	2201      	movs	r2, #1
 80104e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80104ec:	f7fa fd70 	bl	800afd0 <HAL_GetTick>
 80104f0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80104f8:	b2db      	uxtb	r3, r3
 80104fa:	2b01      	cmp	r3, #1
 80104fc:	d002      	beq.n	8010504 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80104fe:	2302      	movs	r3, #2
 8010500:	75fb      	strb	r3, [r7, #23]
    goto error;
 8010502:	e0e9      	b.n	80106d8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8010504:	68bb      	ldr	r3, [r7, #8]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d002      	beq.n	8010510 <HAL_SPI_Receive+0x7e>
 801050a:	88fb      	ldrh	r3, [r7, #6]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d102      	bne.n	8010516 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8010510:	2301      	movs	r3, #1
 8010512:	75fb      	strb	r3, [r7, #23]
    goto error;
 8010514:	e0e0      	b.n	80106d8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	2204      	movs	r2, #4
 801051a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	2200      	movs	r2, #0
 8010522:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	68ba      	ldr	r2, [r7, #8]
 8010528:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	88fa      	ldrh	r2, [r7, #6]
 801052e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	88fa      	ldrh	r2, [r7, #6]
 8010536:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	2200      	movs	r2, #0
 801053e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	2200      	movs	r2, #0
 8010544:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	2200      	movs	r2, #0
 801054a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	2200      	movs	r2, #0
 8010550:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	2200      	movs	r2, #0
 8010556:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	68db      	ldr	r3, [r3, #12]
 801055c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8010560:	d908      	bls.n	8010574 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	685a      	ldr	r2, [r3, #4]
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010570:	605a      	str	r2, [r3, #4]
 8010572:	e007      	b.n	8010584 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	685a      	ldr	r2, [r3, #4]
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010582:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	689b      	ldr	r3, [r3, #8]
 8010588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801058c:	d10f      	bne.n	80105ae <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	681a      	ldr	r2, [r3, #0]
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801059c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	681a      	ldr	r2, [r3, #0]
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80105ac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105b8:	2b40      	cmp	r3, #64	; 0x40
 80105ba:	d007      	beq.n	80105cc <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	681a      	ldr	r2, [r3, #0]
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80105ca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	68db      	ldr	r3, [r3, #12]
 80105d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80105d4:	d867      	bhi.n	80106a6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80105d6:	e030      	b.n	801063a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	689b      	ldr	r3, [r3, #8]
 80105de:	f003 0301 	and.w	r3, r3, #1
 80105e2:	2b01      	cmp	r3, #1
 80105e4:	d117      	bne.n	8010616 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	f103 020c 	add.w	r2, r3, #12
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105f2:	7812      	ldrb	r2, [r2, #0]
 80105f4:	b2d2      	uxtb	r2, r2
 80105f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105fc:	1c5a      	adds	r2, r3, #1
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010608:	b29b      	uxth	r3, r3
 801060a:	3b01      	subs	r3, #1
 801060c:	b29a      	uxth	r2, r3
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8010614:	e011      	b.n	801063a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010616:	f7fa fcdb 	bl	800afd0 <HAL_GetTick>
 801061a:	4602      	mov	r2, r0
 801061c:	693b      	ldr	r3, [r7, #16]
 801061e:	1ad3      	subs	r3, r2, r3
 8010620:	683a      	ldr	r2, [r7, #0]
 8010622:	429a      	cmp	r2, r3
 8010624:	d803      	bhi.n	801062e <HAL_SPI_Receive+0x19c>
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	f1b3 3fff 	cmp.w	r3, #4294967295
 801062c:	d102      	bne.n	8010634 <HAL_SPI_Receive+0x1a2>
 801062e:	683b      	ldr	r3, [r7, #0]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d102      	bne.n	801063a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8010634:	2303      	movs	r3, #3
 8010636:	75fb      	strb	r3, [r7, #23]
          goto error;
 8010638:	e04e      	b.n	80106d8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010640:	b29b      	uxth	r3, r3
 8010642:	2b00      	cmp	r3, #0
 8010644:	d1c8      	bne.n	80105d8 <HAL_SPI_Receive+0x146>
 8010646:	e034      	b.n	80106b2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	689b      	ldr	r3, [r3, #8]
 801064e:	f003 0301 	and.w	r3, r3, #1
 8010652:	2b01      	cmp	r3, #1
 8010654:	d115      	bne.n	8010682 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	68da      	ldr	r2, [r3, #12]
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010660:	b292      	uxth	r2, r2
 8010662:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010668:	1c9a      	adds	r2, r3, #2
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010674:	b29b      	uxth	r3, r3
 8010676:	3b01      	subs	r3, #1
 8010678:	b29a      	uxth	r2, r3
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8010680:	e011      	b.n	80106a6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010682:	f7fa fca5 	bl	800afd0 <HAL_GetTick>
 8010686:	4602      	mov	r2, r0
 8010688:	693b      	ldr	r3, [r7, #16]
 801068a:	1ad3      	subs	r3, r2, r3
 801068c:	683a      	ldr	r2, [r7, #0]
 801068e:	429a      	cmp	r2, r3
 8010690:	d803      	bhi.n	801069a <HAL_SPI_Receive+0x208>
 8010692:	683b      	ldr	r3, [r7, #0]
 8010694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010698:	d102      	bne.n	80106a0 <HAL_SPI_Receive+0x20e>
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d102      	bne.n	80106a6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80106a0:	2303      	movs	r3, #3
 80106a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80106a4:	e018      	b.n	80106d8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80106ac:	b29b      	uxth	r3, r3
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d1ca      	bne.n	8010648 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80106b2:	693a      	ldr	r2, [r7, #16]
 80106b4:	6839      	ldr	r1, [r7, #0]
 80106b6:	68f8      	ldr	r0, [r7, #12]
 80106b8:	f000 fb4c 	bl	8010d54 <SPI_EndRxTransaction>
 80106bc:	4603      	mov	r3, r0
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d002      	beq.n	80106c8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	2220      	movs	r2, #32
 80106c6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d002      	beq.n	80106d6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80106d0:	2301      	movs	r3, #1
 80106d2:	75fb      	strb	r3, [r7, #23]
 80106d4:	e000      	b.n	80106d8 <HAL_SPI_Receive+0x246>
  }

error :
 80106d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	2201      	movs	r2, #1
 80106dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	2200      	movs	r2, #0
 80106e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80106e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80106ea:	4618      	mov	r0, r3
 80106ec:	3718      	adds	r7, #24
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bd80      	pop	{r7, pc}

080106f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80106f2:	b580      	push	{r7, lr}
 80106f4:	b08a      	sub	sp, #40	; 0x28
 80106f6:	af00      	add	r7, sp, #0
 80106f8:	60f8      	str	r0, [r7, #12]
 80106fa:	60b9      	str	r1, [r7, #8]
 80106fc:	607a      	str	r2, [r7, #4]
 80106fe:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8010700:	2301      	movs	r3, #1
 8010702:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8010704:	2300      	movs	r3, #0
 8010706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8010710:	2b01      	cmp	r3, #1
 8010712:	d101      	bne.n	8010718 <HAL_SPI_TransmitReceive+0x26>
 8010714:	2302      	movs	r3, #2
 8010716:	e1fb      	b.n	8010b10 <HAL_SPI_TransmitReceive+0x41e>
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	2201      	movs	r2, #1
 801071c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010720:	f7fa fc56 	bl	800afd0 <HAL_GetTick>
 8010724:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801072c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	685b      	ldr	r3, [r3, #4]
 8010732:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8010734:	887b      	ldrh	r3, [r7, #2]
 8010736:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8010738:	887b      	ldrh	r3, [r7, #2]
 801073a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801073c:	7efb      	ldrb	r3, [r7, #27]
 801073e:	2b01      	cmp	r3, #1
 8010740:	d00e      	beq.n	8010760 <HAL_SPI_TransmitReceive+0x6e>
 8010742:	697b      	ldr	r3, [r7, #20]
 8010744:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010748:	d106      	bne.n	8010758 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	689b      	ldr	r3, [r3, #8]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d102      	bne.n	8010758 <HAL_SPI_TransmitReceive+0x66>
 8010752:	7efb      	ldrb	r3, [r7, #27]
 8010754:	2b04      	cmp	r3, #4
 8010756:	d003      	beq.n	8010760 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8010758:	2302      	movs	r3, #2
 801075a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801075e:	e1cd      	b.n	8010afc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d005      	beq.n	8010772 <HAL_SPI_TransmitReceive+0x80>
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d002      	beq.n	8010772 <HAL_SPI_TransmitReceive+0x80>
 801076c:	887b      	ldrh	r3, [r7, #2]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d103      	bne.n	801077a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8010772:	2301      	movs	r3, #1
 8010774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8010778:	e1c0      	b.n	8010afc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8010780:	b2db      	uxtb	r3, r3
 8010782:	2b04      	cmp	r3, #4
 8010784:	d003      	beq.n	801078e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	2205      	movs	r2, #5
 801078a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	2200      	movs	r2, #0
 8010792:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	687a      	ldr	r2, [r7, #4]
 8010798:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	887a      	ldrh	r2, [r7, #2]
 801079e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	887a      	ldrh	r2, [r7, #2]
 80107a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	68ba      	ldr	r2, [r7, #8]
 80107ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	887a      	ldrh	r2, [r7, #2]
 80107b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	887a      	ldrh	r2, [r7, #2]
 80107ba:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	2200      	movs	r2, #0
 80107c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	2200      	movs	r2, #0
 80107c6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	68db      	ldr	r3, [r3, #12]
 80107cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80107d0:	d802      	bhi.n	80107d8 <HAL_SPI_TransmitReceive+0xe6>
 80107d2:	8a3b      	ldrh	r3, [r7, #16]
 80107d4:	2b01      	cmp	r3, #1
 80107d6:	d908      	bls.n	80107ea <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	685a      	ldr	r2, [r3, #4]
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80107e6:	605a      	str	r2, [r3, #4]
 80107e8:	e007      	b.n	80107fa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	685a      	ldr	r2, [r3, #4]
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80107f8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010804:	2b40      	cmp	r3, #64	; 0x40
 8010806:	d007      	beq.n	8010818 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	681a      	ldr	r2, [r3, #0]
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010816:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	68db      	ldr	r3, [r3, #12]
 801081c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8010820:	d97c      	bls.n	801091c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	685b      	ldr	r3, [r3, #4]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d002      	beq.n	8010830 <HAL_SPI_TransmitReceive+0x13e>
 801082a:	8a7b      	ldrh	r3, [r7, #18]
 801082c:	2b01      	cmp	r3, #1
 801082e:	d169      	bne.n	8010904 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010834:	881a      	ldrh	r2, [r3, #0]
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010840:	1c9a      	adds	r2, r3, #2
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801084a:	b29b      	uxth	r3, r3
 801084c:	3b01      	subs	r3, #1
 801084e:	b29a      	uxth	r2, r3
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010854:	e056      	b.n	8010904 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	689b      	ldr	r3, [r3, #8]
 801085c:	f003 0302 	and.w	r3, r3, #2
 8010860:	2b02      	cmp	r3, #2
 8010862:	d11b      	bne.n	801089c <HAL_SPI_TransmitReceive+0x1aa>
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010868:	b29b      	uxth	r3, r3
 801086a:	2b00      	cmp	r3, #0
 801086c:	d016      	beq.n	801089c <HAL_SPI_TransmitReceive+0x1aa>
 801086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010870:	2b01      	cmp	r3, #1
 8010872:	d113      	bne.n	801089c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010878:	881a      	ldrh	r2, [r3, #0]
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010884:	1c9a      	adds	r2, r3, #2
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801088e:	b29b      	uxth	r3, r3
 8010890:	3b01      	subs	r3, #1
 8010892:	b29a      	uxth	r2, r3
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010898:	2300      	movs	r3, #0
 801089a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	689b      	ldr	r3, [r3, #8]
 80108a2:	f003 0301 	and.w	r3, r3, #1
 80108a6:	2b01      	cmp	r3, #1
 80108a8:	d11c      	bne.n	80108e4 <HAL_SPI_TransmitReceive+0x1f2>
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80108b0:	b29b      	uxth	r3, r3
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d016      	beq.n	80108e4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	68da      	ldr	r2, [r3, #12]
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108c0:	b292      	uxth	r2, r2
 80108c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108c8:	1c9a      	adds	r2, r3, #2
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80108d4:	b29b      	uxth	r3, r3
 80108d6:	3b01      	subs	r3, #1
 80108d8:	b29a      	uxth	r2, r3
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80108e0:	2301      	movs	r3, #1
 80108e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80108e4:	f7fa fb74 	bl	800afd0 <HAL_GetTick>
 80108e8:	4602      	mov	r2, r0
 80108ea:	69fb      	ldr	r3, [r7, #28]
 80108ec:	1ad3      	subs	r3, r2, r3
 80108ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108f0:	429a      	cmp	r2, r3
 80108f2:	d807      	bhi.n	8010904 <HAL_SPI_TransmitReceive+0x212>
 80108f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108fa:	d003      	beq.n	8010904 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80108fc:	2303      	movs	r3, #3
 80108fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8010902:	e0fb      	b.n	8010afc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010908:	b29b      	uxth	r3, r3
 801090a:	2b00      	cmp	r3, #0
 801090c:	d1a3      	bne.n	8010856 <HAL_SPI_TransmitReceive+0x164>
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010914:	b29b      	uxth	r3, r3
 8010916:	2b00      	cmp	r3, #0
 8010918:	d19d      	bne.n	8010856 <HAL_SPI_TransmitReceive+0x164>
 801091a:	e0df      	b.n	8010adc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	685b      	ldr	r3, [r3, #4]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d003      	beq.n	801092c <HAL_SPI_TransmitReceive+0x23a>
 8010924:	8a7b      	ldrh	r3, [r7, #18]
 8010926:	2b01      	cmp	r3, #1
 8010928:	f040 80cb 	bne.w	8010ac2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010930:	b29b      	uxth	r3, r3
 8010932:	2b01      	cmp	r3, #1
 8010934:	d912      	bls.n	801095c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801093a:	881a      	ldrh	r2, [r3, #0]
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010946:	1c9a      	adds	r2, r3, #2
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010950:	b29b      	uxth	r3, r3
 8010952:	3b02      	subs	r3, #2
 8010954:	b29a      	uxth	r2, r3
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	87da      	strh	r2, [r3, #62]	; 0x3e
 801095a:	e0b2      	b.n	8010ac2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	330c      	adds	r3, #12
 8010966:	7812      	ldrb	r2, [r2, #0]
 8010968:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801096e:	1c5a      	adds	r2, r3, #1
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010978:	b29b      	uxth	r3, r3
 801097a:	3b01      	subs	r3, #1
 801097c:	b29a      	uxth	r2, r3
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010982:	e09e      	b.n	8010ac2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	689b      	ldr	r3, [r3, #8]
 801098a:	f003 0302 	and.w	r3, r3, #2
 801098e:	2b02      	cmp	r3, #2
 8010990:	d134      	bne.n	80109fc <HAL_SPI_TransmitReceive+0x30a>
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010996:	b29b      	uxth	r3, r3
 8010998:	2b00      	cmp	r3, #0
 801099a:	d02f      	beq.n	80109fc <HAL_SPI_TransmitReceive+0x30a>
 801099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801099e:	2b01      	cmp	r3, #1
 80109a0:	d12c      	bne.n	80109fc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80109a6:	b29b      	uxth	r3, r3
 80109a8:	2b01      	cmp	r3, #1
 80109aa:	d912      	bls.n	80109d2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109b0:	881a      	ldrh	r2, [r3, #0]
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109bc:	1c9a      	adds	r2, r3, #2
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80109c6:	b29b      	uxth	r3, r3
 80109c8:	3b02      	subs	r3, #2
 80109ca:	b29a      	uxth	r2, r3
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80109d0:	e012      	b.n	80109f8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	330c      	adds	r3, #12
 80109dc:	7812      	ldrb	r2, [r2, #0]
 80109de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109e4:	1c5a      	adds	r2, r3, #1
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80109ee:	b29b      	uxth	r3, r3
 80109f0:	3b01      	subs	r3, #1
 80109f2:	b29a      	uxth	r2, r3
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80109f8:	2300      	movs	r3, #0
 80109fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	689b      	ldr	r3, [r3, #8]
 8010a02:	f003 0301 	and.w	r3, r3, #1
 8010a06:	2b01      	cmp	r3, #1
 8010a08:	d148      	bne.n	8010a9c <HAL_SPI_TransmitReceive+0x3aa>
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010a10:	b29b      	uxth	r3, r3
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d042      	beq.n	8010a9c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010a1c:	b29b      	uxth	r3, r3
 8010a1e:	2b01      	cmp	r3, #1
 8010a20:	d923      	bls.n	8010a6a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	68da      	ldr	r2, [r3, #12]
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a2c:	b292      	uxth	r2, r2
 8010a2e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a34:	1c9a      	adds	r2, r3, #2
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010a40:	b29b      	uxth	r3, r3
 8010a42:	3b02      	subs	r3, #2
 8010a44:	b29a      	uxth	r2, r3
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010a52:	b29b      	uxth	r3, r3
 8010a54:	2b01      	cmp	r3, #1
 8010a56:	d81f      	bhi.n	8010a98 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	685a      	ldr	r2, [r3, #4]
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010a66:	605a      	str	r2, [r3, #4]
 8010a68:	e016      	b.n	8010a98 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	f103 020c 	add.w	r2, r3, #12
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a76:	7812      	ldrb	r2, [r2, #0]
 8010a78:	b2d2      	uxtb	r2, r2
 8010a7a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a80:	1c5a      	adds	r2, r3, #1
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010a8c:	b29b      	uxth	r3, r3
 8010a8e:	3b01      	subs	r3, #1
 8010a90:	b29a      	uxth	r2, r3
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010a98:	2301      	movs	r3, #1
 8010a9a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8010a9c:	f7fa fa98 	bl	800afd0 <HAL_GetTick>
 8010aa0:	4602      	mov	r2, r0
 8010aa2:	69fb      	ldr	r3, [r7, #28]
 8010aa4:	1ad3      	subs	r3, r2, r3
 8010aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010aa8:	429a      	cmp	r2, r3
 8010aaa:	d803      	bhi.n	8010ab4 <HAL_SPI_TransmitReceive+0x3c2>
 8010aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ab2:	d102      	bne.n	8010aba <HAL_SPI_TransmitReceive+0x3c8>
 8010ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d103      	bne.n	8010ac2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8010aba:	2303      	movs	r3, #3
 8010abc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8010ac0:	e01c      	b.n	8010afc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010ac6:	b29b      	uxth	r3, r3
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	f47f af5b 	bne.w	8010984 <HAL_SPI_TransmitReceive+0x292>
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010ad4:	b29b      	uxth	r3, r3
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	f47f af54 	bne.w	8010984 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010adc:	69fa      	ldr	r2, [r7, #28]
 8010ade:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010ae0:	68f8      	ldr	r0, [r7, #12]
 8010ae2:	f000 f98f 	bl	8010e04 <SPI_EndRxTxTransaction>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d006      	beq.n	8010afa <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8010aec:	2301      	movs	r3, #1
 8010aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	2220      	movs	r2, #32
 8010af6:	661a      	str	r2, [r3, #96]	; 0x60
 8010af8:	e000      	b.n	8010afc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8010afa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	2201      	movs	r2, #1
 8010b00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	2200      	movs	r2, #0
 8010b08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8010b0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8010b10:	4618      	mov	r0, r3
 8010b12:	3728      	adds	r7, #40	; 0x28
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}

08010b18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b088      	sub	sp, #32
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	60f8      	str	r0, [r7, #12]
 8010b20:	60b9      	str	r1, [r7, #8]
 8010b22:	603b      	str	r3, [r7, #0]
 8010b24:	4613      	mov	r3, r2
 8010b26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8010b28:	f7fa fa52 	bl	800afd0 <HAL_GetTick>
 8010b2c:	4602      	mov	r2, r0
 8010b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b30:	1a9b      	subs	r3, r3, r2
 8010b32:	683a      	ldr	r2, [r7, #0]
 8010b34:	4413      	add	r3, r2
 8010b36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8010b38:	f7fa fa4a 	bl	800afd0 <HAL_GetTick>
 8010b3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8010b3e:	4b39      	ldr	r3, [pc, #228]	; (8010c24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	015b      	lsls	r3, r3, #5
 8010b44:	0d1b      	lsrs	r3, r3, #20
 8010b46:	69fa      	ldr	r2, [r7, #28]
 8010b48:	fb02 f303 	mul.w	r3, r2, r3
 8010b4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010b4e:	e054      	b.n	8010bfa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b56:	d050      	beq.n	8010bfa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8010b58:	f7fa fa3a 	bl	800afd0 <HAL_GetTick>
 8010b5c:	4602      	mov	r2, r0
 8010b5e:	69bb      	ldr	r3, [r7, #24]
 8010b60:	1ad3      	subs	r3, r2, r3
 8010b62:	69fa      	ldr	r2, [r7, #28]
 8010b64:	429a      	cmp	r2, r3
 8010b66:	d902      	bls.n	8010b6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8010b68:	69fb      	ldr	r3, [r7, #28]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d13d      	bne.n	8010bea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	685a      	ldr	r2, [r3, #4]
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010b7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	685b      	ldr	r3, [r3, #4]
 8010b82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010b86:	d111      	bne.n	8010bac <SPI_WaitFlagStateUntilTimeout+0x94>
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	689b      	ldr	r3, [r3, #8]
 8010b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010b90:	d004      	beq.n	8010b9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	689b      	ldr	r3, [r3, #8]
 8010b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010b9a:	d107      	bne.n	8010bac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	681a      	ldr	r2, [r3, #0]
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010baa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010bb4:	d10f      	bne.n	8010bd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	681a      	ldr	r2, [r3, #0]
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010bc4:	601a      	str	r2, [r3, #0]
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	681a      	ldr	r2, [r3, #0]
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010bd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	2201      	movs	r2, #1
 8010bda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	2200      	movs	r2, #0
 8010be2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8010be6:	2303      	movs	r3, #3
 8010be8:	e017      	b.n	8010c1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8010bea:	697b      	ldr	r3, [r7, #20]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d101      	bne.n	8010bf4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8010bf4:	697b      	ldr	r3, [r7, #20]
 8010bf6:	3b01      	subs	r3, #1
 8010bf8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	689a      	ldr	r2, [r3, #8]
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	4013      	ands	r3, r2
 8010c04:	68ba      	ldr	r2, [r7, #8]
 8010c06:	429a      	cmp	r2, r3
 8010c08:	bf0c      	ite	eq
 8010c0a:	2301      	moveq	r3, #1
 8010c0c:	2300      	movne	r3, #0
 8010c0e:	b2db      	uxtb	r3, r3
 8010c10:	461a      	mov	r2, r3
 8010c12:	79fb      	ldrb	r3, [r7, #7]
 8010c14:	429a      	cmp	r2, r3
 8010c16:	d19b      	bne.n	8010b50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8010c18:	2300      	movs	r3, #0
}
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	3720      	adds	r7, #32
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}
 8010c22:	bf00      	nop
 8010c24:	20000090 	.word	0x20000090

08010c28 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b08a      	sub	sp, #40	; 0x28
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	60f8      	str	r0, [r7, #12]
 8010c30:	60b9      	str	r1, [r7, #8]
 8010c32:	607a      	str	r2, [r7, #4]
 8010c34:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8010c36:	2300      	movs	r3, #0
 8010c38:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8010c3a:	f7fa f9c9 	bl	800afd0 <HAL_GetTick>
 8010c3e:	4602      	mov	r2, r0
 8010c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c42:	1a9b      	subs	r3, r3, r2
 8010c44:	683a      	ldr	r2, [r7, #0]
 8010c46:	4413      	add	r3, r2
 8010c48:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8010c4a:	f7fa f9c1 	bl	800afd0 <HAL_GetTick>
 8010c4e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	330c      	adds	r3, #12
 8010c56:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8010c58:	4b3d      	ldr	r3, [pc, #244]	; (8010d50 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8010c5a:	681a      	ldr	r2, [r3, #0]
 8010c5c:	4613      	mov	r3, r2
 8010c5e:	009b      	lsls	r3, r3, #2
 8010c60:	4413      	add	r3, r2
 8010c62:	00da      	lsls	r2, r3, #3
 8010c64:	1ad3      	subs	r3, r2, r3
 8010c66:	0d1b      	lsrs	r3, r3, #20
 8010c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c6a:	fb02 f303 	mul.w	r3, r2, r3
 8010c6e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8010c70:	e060      	b.n	8010d34 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8010c72:	68bb      	ldr	r3, [r7, #8]
 8010c74:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010c78:	d107      	bne.n	8010c8a <SPI_WaitFifoStateUntilTimeout+0x62>
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d104      	bne.n	8010c8a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8010c80:	69fb      	ldr	r3, [r7, #28]
 8010c82:	781b      	ldrb	r3, [r3, #0]
 8010c84:	b2db      	uxtb	r3, r3
 8010c86:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8010c88:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8010c8a:	683b      	ldr	r3, [r7, #0]
 8010c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c90:	d050      	beq.n	8010d34 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8010c92:	f7fa f99d 	bl	800afd0 <HAL_GetTick>
 8010c96:	4602      	mov	r2, r0
 8010c98:	6a3b      	ldr	r3, [r7, #32]
 8010c9a:	1ad3      	subs	r3, r2, r3
 8010c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c9e:	429a      	cmp	r2, r3
 8010ca0:	d902      	bls.n	8010ca8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8010ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d13d      	bne.n	8010d24 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	685a      	ldr	r2, [r3, #4]
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010cb6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	685b      	ldr	r3, [r3, #4]
 8010cbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010cc0:	d111      	bne.n	8010ce6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	689b      	ldr	r3, [r3, #8]
 8010cc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010cca:	d004      	beq.n	8010cd6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	689b      	ldr	r3, [r3, #8]
 8010cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010cd4:	d107      	bne.n	8010ce6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	681a      	ldr	r2, [r3, #0]
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010ce4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010cee:	d10f      	bne.n	8010d10 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	681a      	ldr	r2, [r3, #0]
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010cfe:	601a      	str	r2, [r3, #0]
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	681a      	ldr	r2, [r3, #0]
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010d0e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	2201      	movs	r2, #1
 8010d14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8010d20:	2303      	movs	r3, #3
 8010d22:	e010      	b.n	8010d46 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8010d24:	69bb      	ldr	r3, [r7, #24]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d101      	bne.n	8010d2e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8010d2e:	69bb      	ldr	r3, [r7, #24]
 8010d30:	3b01      	subs	r3, #1
 8010d32:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	689a      	ldr	r2, [r3, #8]
 8010d3a:	68bb      	ldr	r3, [r7, #8]
 8010d3c:	4013      	ands	r3, r2
 8010d3e:	687a      	ldr	r2, [r7, #4]
 8010d40:	429a      	cmp	r2, r3
 8010d42:	d196      	bne.n	8010c72 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8010d44:	2300      	movs	r3, #0
}
 8010d46:	4618      	mov	r0, r3
 8010d48:	3728      	adds	r7, #40	; 0x28
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	bd80      	pop	{r7, pc}
 8010d4e:	bf00      	nop
 8010d50:	20000090 	.word	0x20000090

08010d54 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b086      	sub	sp, #24
 8010d58:	af02      	add	r7, sp, #8
 8010d5a:	60f8      	str	r0, [r7, #12]
 8010d5c:	60b9      	str	r1, [r7, #8]
 8010d5e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	685b      	ldr	r3, [r3, #4]
 8010d64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010d68:	d111      	bne.n	8010d8e <SPI_EndRxTransaction+0x3a>
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	689b      	ldr	r3, [r3, #8]
 8010d6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010d72:	d004      	beq.n	8010d7e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	689b      	ldr	r3, [r3, #8]
 8010d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010d7c:	d107      	bne.n	8010d8e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	681a      	ldr	r2, [r3, #0]
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010d8c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	9300      	str	r3, [sp, #0]
 8010d92:	68bb      	ldr	r3, [r7, #8]
 8010d94:	2200      	movs	r2, #0
 8010d96:	2180      	movs	r1, #128	; 0x80
 8010d98:	68f8      	ldr	r0, [r7, #12]
 8010d9a:	f7ff febd 	bl	8010b18 <SPI_WaitFlagStateUntilTimeout>
 8010d9e:	4603      	mov	r3, r0
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d007      	beq.n	8010db4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010da8:	f043 0220 	orr.w	r2, r3, #32
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8010db0:	2303      	movs	r3, #3
 8010db2:	e023      	b.n	8010dfc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	685b      	ldr	r3, [r3, #4]
 8010db8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010dbc:	d11d      	bne.n	8010dfa <SPI_EndRxTransaction+0xa6>
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	689b      	ldr	r3, [r3, #8]
 8010dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010dc6:	d004      	beq.n	8010dd2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	689b      	ldr	r3, [r3, #8]
 8010dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010dd0:	d113      	bne.n	8010dfa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	9300      	str	r3, [sp, #0]
 8010dd6:	68bb      	ldr	r3, [r7, #8]
 8010dd8:	2200      	movs	r2, #0
 8010dda:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8010dde:	68f8      	ldr	r0, [r7, #12]
 8010de0:	f7ff ff22 	bl	8010c28 <SPI_WaitFifoStateUntilTimeout>
 8010de4:	4603      	mov	r3, r0
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d007      	beq.n	8010dfa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010dee:	f043 0220 	orr.w	r2, r3, #32
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8010df6:	2303      	movs	r3, #3
 8010df8:	e000      	b.n	8010dfc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8010dfa:	2300      	movs	r3, #0
}
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	3710      	adds	r7, #16
 8010e00:	46bd      	mov	sp, r7
 8010e02:	bd80      	pop	{r7, pc}

08010e04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b086      	sub	sp, #24
 8010e08:	af02      	add	r7, sp, #8
 8010e0a:	60f8      	str	r0, [r7, #12]
 8010e0c:	60b9      	str	r1, [r7, #8]
 8010e0e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	9300      	str	r3, [sp, #0]
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	2200      	movs	r2, #0
 8010e18:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8010e1c:	68f8      	ldr	r0, [r7, #12]
 8010e1e:	f7ff ff03 	bl	8010c28 <SPI_WaitFifoStateUntilTimeout>
 8010e22:	4603      	mov	r3, r0
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d007      	beq.n	8010e38 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010e2c:	f043 0220 	orr.w	r2, r3, #32
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8010e34:	2303      	movs	r3, #3
 8010e36:	e027      	b.n	8010e88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	9300      	str	r3, [sp, #0]
 8010e3c:	68bb      	ldr	r3, [r7, #8]
 8010e3e:	2200      	movs	r2, #0
 8010e40:	2180      	movs	r1, #128	; 0x80
 8010e42:	68f8      	ldr	r0, [r7, #12]
 8010e44:	f7ff fe68 	bl	8010b18 <SPI_WaitFlagStateUntilTimeout>
 8010e48:	4603      	mov	r3, r0
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d007      	beq.n	8010e5e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010e52:	f043 0220 	orr.w	r2, r3, #32
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8010e5a:	2303      	movs	r3, #3
 8010e5c:	e014      	b.n	8010e88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	9300      	str	r3, [sp, #0]
 8010e62:	68bb      	ldr	r3, [r7, #8]
 8010e64:	2200      	movs	r2, #0
 8010e66:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8010e6a:	68f8      	ldr	r0, [r7, #12]
 8010e6c:	f7ff fedc 	bl	8010c28 <SPI_WaitFifoStateUntilTimeout>
 8010e70:	4603      	mov	r3, r0
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d007      	beq.n	8010e86 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010e7a:	f043 0220 	orr.w	r2, r3, #32
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8010e82:	2303      	movs	r3, #3
 8010e84:	e000      	b.n	8010e88 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8010e86:	2300      	movs	r3, #0
}
 8010e88:	4618      	mov	r0, r3
 8010e8a:	3710      	adds	r7, #16
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	bd80      	pop	{r7, pc}

08010e90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b082      	sub	sp, #8
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d101      	bne.n	8010ea2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010e9e:	2301      	movs	r3, #1
 8010ea0:	e049      	b.n	8010f36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010ea8:	b2db      	uxtb	r3, r3
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d106      	bne.n	8010ebc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010eb6:	6878      	ldr	r0, [r7, #4]
 8010eb8:	f7f9 fc1c 	bl	800a6f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	2202      	movs	r2, #2
 8010ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681a      	ldr	r2, [r3, #0]
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	3304      	adds	r3, #4
 8010ecc:	4619      	mov	r1, r3
 8010ece:	4610      	mov	r0, r2
 8010ed0:	f001 f948 	bl	8012164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	2201      	movs	r2, #1
 8010ed8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	2201      	movs	r2, #1
 8010ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	2201      	movs	r2, #1
 8010ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	2201      	movs	r2, #1
 8010ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2201      	movs	r2, #1
 8010ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2201      	movs	r2, #1
 8010f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	2201      	movs	r2, #1
 8010f08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	2201      	movs	r2, #1
 8010f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	2201      	movs	r2, #1
 8010f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	2201      	movs	r2, #1
 8010f20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	2201      	movs	r2, #1
 8010f28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2201      	movs	r2, #1
 8010f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010f34:	2300      	movs	r3, #0
}
 8010f36:	4618      	mov	r0, r3
 8010f38:	3708      	adds	r7, #8
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	bd80      	pop	{r7, pc}
	...

08010f40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8010f40:	b480      	push	{r7}
 8010f42:	b085      	sub	sp, #20
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010f4e:	b2db      	uxtb	r3, r3
 8010f50:	2b01      	cmp	r3, #1
 8010f52:	d001      	beq.n	8010f58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8010f54:	2301      	movs	r3, #1
 8010f56:	e047      	b.n	8010fe8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2202      	movs	r2, #2
 8010f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	4a23      	ldr	r2, [pc, #140]	; (8010ff4 <HAL_TIM_Base_Start+0xb4>)
 8010f66:	4293      	cmp	r3, r2
 8010f68:	d01d      	beq.n	8010fa6 <HAL_TIM_Base_Start+0x66>
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010f72:	d018      	beq.n	8010fa6 <HAL_TIM_Base_Start+0x66>
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	4a1f      	ldr	r2, [pc, #124]	; (8010ff8 <HAL_TIM_Base_Start+0xb8>)
 8010f7a:	4293      	cmp	r3, r2
 8010f7c:	d013      	beq.n	8010fa6 <HAL_TIM_Base_Start+0x66>
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	4a1e      	ldr	r2, [pc, #120]	; (8010ffc <HAL_TIM_Base_Start+0xbc>)
 8010f84:	4293      	cmp	r3, r2
 8010f86:	d00e      	beq.n	8010fa6 <HAL_TIM_Base_Start+0x66>
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	4a1c      	ldr	r2, [pc, #112]	; (8011000 <HAL_TIM_Base_Start+0xc0>)
 8010f8e:	4293      	cmp	r3, r2
 8010f90:	d009      	beq.n	8010fa6 <HAL_TIM_Base_Start+0x66>
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	4a1b      	ldr	r2, [pc, #108]	; (8011004 <HAL_TIM_Base_Start+0xc4>)
 8010f98:	4293      	cmp	r3, r2
 8010f9a:	d004      	beq.n	8010fa6 <HAL_TIM_Base_Start+0x66>
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	4a19      	ldr	r2, [pc, #100]	; (8011008 <HAL_TIM_Base_Start+0xc8>)
 8010fa2:	4293      	cmp	r3, r2
 8010fa4:	d115      	bne.n	8010fd2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	689a      	ldr	r2, [r3, #8]
 8010fac:	4b17      	ldr	r3, [pc, #92]	; (801100c <HAL_TIM_Base_Start+0xcc>)
 8010fae:	4013      	ands	r3, r2
 8010fb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	2b06      	cmp	r3, #6
 8010fb6:	d015      	beq.n	8010fe4 <HAL_TIM_Base_Start+0xa4>
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010fbe:	d011      	beq.n	8010fe4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	681a      	ldr	r2, [r3, #0]
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	f042 0201 	orr.w	r2, r2, #1
 8010fce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010fd0:	e008      	b.n	8010fe4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	681a      	ldr	r2, [r3, #0]
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	f042 0201 	orr.w	r2, r2, #1
 8010fe0:	601a      	str	r2, [r3, #0]
 8010fe2:	e000      	b.n	8010fe6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010fe4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010fe6:	2300      	movs	r3, #0
}
 8010fe8:	4618      	mov	r0, r3
 8010fea:	3714      	adds	r7, #20
 8010fec:	46bd      	mov	sp, r7
 8010fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff2:	4770      	bx	lr
 8010ff4:	40012c00 	.word	0x40012c00
 8010ff8:	40000400 	.word	0x40000400
 8010ffc:	40000800 	.word	0x40000800
 8011000:	40000c00 	.word	0x40000c00
 8011004:	40013400 	.word	0x40013400
 8011008:	40014000 	.word	0x40014000
 801100c:	00010007 	.word	0x00010007

08011010 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011010:	b480      	push	{r7}
 8011012:	b085      	sub	sp, #20
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801101e:	b2db      	uxtb	r3, r3
 8011020:	2b01      	cmp	r3, #1
 8011022:	d001      	beq.n	8011028 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8011024:	2301      	movs	r3, #1
 8011026:	e04f      	b.n	80110c8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	2202      	movs	r2, #2
 801102c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	68da      	ldr	r2, [r3, #12]
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	f042 0201 	orr.w	r2, r2, #1
 801103e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	4a23      	ldr	r2, [pc, #140]	; (80110d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8011046:	4293      	cmp	r3, r2
 8011048:	d01d      	beq.n	8011086 <HAL_TIM_Base_Start_IT+0x76>
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011052:	d018      	beq.n	8011086 <HAL_TIM_Base_Start_IT+0x76>
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	4a1f      	ldr	r2, [pc, #124]	; (80110d8 <HAL_TIM_Base_Start_IT+0xc8>)
 801105a:	4293      	cmp	r3, r2
 801105c:	d013      	beq.n	8011086 <HAL_TIM_Base_Start_IT+0x76>
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	4a1e      	ldr	r2, [pc, #120]	; (80110dc <HAL_TIM_Base_Start_IT+0xcc>)
 8011064:	4293      	cmp	r3, r2
 8011066:	d00e      	beq.n	8011086 <HAL_TIM_Base_Start_IT+0x76>
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	4a1c      	ldr	r2, [pc, #112]	; (80110e0 <HAL_TIM_Base_Start_IT+0xd0>)
 801106e:	4293      	cmp	r3, r2
 8011070:	d009      	beq.n	8011086 <HAL_TIM_Base_Start_IT+0x76>
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	4a1b      	ldr	r2, [pc, #108]	; (80110e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8011078:	4293      	cmp	r3, r2
 801107a:	d004      	beq.n	8011086 <HAL_TIM_Base_Start_IT+0x76>
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	4a19      	ldr	r2, [pc, #100]	; (80110e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8011082:	4293      	cmp	r3, r2
 8011084:	d115      	bne.n	80110b2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	689a      	ldr	r2, [r3, #8]
 801108c:	4b17      	ldr	r3, [pc, #92]	; (80110ec <HAL_TIM_Base_Start_IT+0xdc>)
 801108e:	4013      	ands	r3, r2
 8011090:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	2b06      	cmp	r3, #6
 8011096:	d015      	beq.n	80110c4 <HAL_TIM_Base_Start_IT+0xb4>
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801109e:	d011      	beq.n	80110c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	681a      	ldr	r2, [r3, #0]
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	f042 0201 	orr.w	r2, r2, #1
 80110ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80110b0:	e008      	b.n	80110c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	681a      	ldr	r2, [r3, #0]
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	f042 0201 	orr.w	r2, r2, #1
 80110c0:	601a      	str	r2, [r3, #0]
 80110c2:	e000      	b.n	80110c6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80110c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80110c6:	2300      	movs	r3, #0
}
 80110c8:	4618      	mov	r0, r3
 80110ca:	3714      	adds	r7, #20
 80110cc:	46bd      	mov	sp, r7
 80110ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d2:	4770      	bx	lr
 80110d4:	40012c00 	.word	0x40012c00
 80110d8:	40000400 	.word	0x40000400
 80110dc:	40000800 	.word	0x40000800
 80110e0:	40000c00 	.word	0x40000c00
 80110e4:	40013400 	.word	0x40013400
 80110e8:	40014000 	.word	0x40014000
 80110ec:	00010007 	.word	0x00010007

080110f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b082      	sub	sp, #8
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d101      	bne.n	8011102 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80110fe:	2301      	movs	r3, #1
 8011100:	e049      	b.n	8011196 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011108:	b2db      	uxtb	r3, r3
 801110a:	2b00      	cmp	r3, #0
 801110c:	d106      	bne.n	801111c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	2200      	movs	r2, #0
 8011112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011116:	6878      	ldr	r0, [r7, #4]
 8011118:	f7f9 fbd4 	bl	800a8c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	2202      	movs	r2, #2
 8011120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	681a      	ldr	r2, [r3, #0]
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	3304      	adds	r3, #4
 801112c:	4619      	mov	r1, r3
 801112e:	4610      	mov	r0, r2
 8011130:	f001 f818 	bl	8012164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	2201      	movs	r2, #1
 8011138:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	2201      	movs	r2, #1
 8011140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	2201      	movs	r2, #1
 8011148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	2201      	movs	r2, #1
 8011150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2201      	movs	r2, #1
 8011158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	2201      	movs	r2, #1
 8011160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	2201      	movs	r2, #1
 8011168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	2201      	movs	r2, #1
 8011170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	2201      	movs	r2, #1
 8011178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2201      	movs	r2, #1
 8011180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	2201      	movs	r2, #1
 8011188:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	2201      	movs	r2, #1
 8011190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011194:	2300      	movs	r3, #0
}
 8011196:	4618      	mov	r0, r3
 8011198:	3708      	adds	r7, #8
 801119a:	46bd      	mov	sp, r7
 801119c:	bd80      	pop	{r7, pc}
	...

080111a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b084      	sub	sp, #16
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
 80111a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d109      	bne.n	80111c4 <HAL_TIM_PWM_Start+0x24>
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80111b6:	b2db      	uxtb	r3, r3
 80111b8:	2b01      	cmp	r3, #1
 80111ba:	bf14      	ite	ne
 80111bc:	2301      	movne	r3, #1
 80111be:	2300      	moveq	r3, #0
 80111c0:	b2db      	uxtb	r3, r3
 80111c2:	e03c      	b.n	801123e <HAL_TIM_PWM_Start+0x9e>
 80111c4:	683b      	ldr	r3, [r7, #0]
 80111c6:	2b04      	cmp	r3, #4
 80111c8:	d109      	bne.n	80111de <HAL_TIM_PWM_Start+0x3e>
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80111d0:	b2db      	uxtb	r3, r3
 80111d2:	2b01      	cmp	r3, #1
 80111d4:	bf14      	ite	ne
 80111d6:	2301      	movne	r3, #1
 80111d8:	2300      	moveq	r3, #0
 80111da:	b2db      	uxtb	r3, r3
 80111dc:	e02f      	b.n	801123e <HAL_TIM_PWM_Start+0x9e>
 80111de:	683b      	ldr	r3, [r7, #0]
 80111e0:	2b08      	cmp	r3, #8
 80111e2:	d109      	bne.n	80111f8 <HAL_TIM_PWM_Start+0x58>
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80111ea:	b2db      	uxtb	r3, r3
 80111ec:	2b01      	cmp	r3, #1
 80111ee:	bf14      	ite	ne
 80111f0:	2301      	movne	r3, #1
 80111f2:	2300      	moveq	r3, #0
 80111f4:	b2db      	uxtb	r3, r3
 80111f6:	e022      	b.n	801123e <HAL_TIM_PWM_Start+0x9e>
 80111f8:	683b      	ldr	r3, [r7, #0]
 80111fa:	2b0c      	cmp	r3, #12
 80111fc:	d109      	bne.n	8011212 <HAL_TIM_PWM_Start+0x72>
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011204:	b2db      	uxtb	r3, r3
 8011206:	2b01      	cmp	r3, #1
 8011208:	bf14      	ite	ne
 801120a:	2301      	movne	r3, #1
 801120c:	2300      	moveq	r3, #0
 801120e:	b2db      	uxtb	r3, r3
 8011210:	e015      	b.n	801123e <HAL_TIM_PWM_Start+0x9e>
 8011212:	683b      	ldr	r3, [r7, #0]
 8011214:	2b10      	cmp	r3, #16
 8011216:	d109      	bne.n	801122c <HAL_TIM_PWM_Start+0x8c>
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801121e:	b2db      	uxtb	r3, r3
 8011220:	2b01      	cmp	r3, #1
 8011222:	bf14      	ite	ne
 8011224:	2301      	movne	r3, #1
 8011226:	2300      	moveq	r3, #0
 8011228:	b2db      	uxtb	r3, r3
 801122a:	e008      	b.n	801123e <HAL_TIM_PWM_Start+0x9e>
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011232:	b2db      	uxtb	r3, r3
 8011234:	2b01      	cmp	r3, #1
 8011236:	bf14      	ite	ne
 8011238:	2301      	movne	r3, #1
 801123a:	2300      	moveq	r3, #0
 801123c:	b2db      	uxtb	r3, r3
 801123e:	2b00      	cmp	r3, #0
 8011240:	d001      	beq.n	8011246 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8011242:	2301      	movs	r3, #1
 8011244:	e09c      	b.n	8011380 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011246:	683b      	ldr	r3, [r7, #0]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d104      	bne.n	8011256 <HAL_TIM_PWM_Start+0xb6>
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	2202      	movs	r2, #2
 8011250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011254:	e023      	b.n	801129e <HAL_TIM_PWM_Start+0xfe>
 8011256:	683b      	ldr	r3, [r7, #0]
 8011258:	2b04      	cmp	r3, #4
 801125a:	d104      	bne.n	8011266 <HAL_TIM_PWM_Start+0xc6>
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	2202      	movs	r2, #2
 8011260:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011264:	e01b      	b.n	801129e <HAL_TIM_PWM_Start+0xfe>
 8011266:	683b      	ldr	r3, [r7, #0]
 8011268:	2b08      	cmp	r3, #8
 801126a:	d104      	bne.n	8011276 <HAL_TIM_PWM_Start+0xd6>
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2202      	movs	r2, #2
 8011270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011274:	e013      	b.n	801129e <HAL_TIM_PWM_Start+0xfe>
 8011276:	683b      	ldr	r3, [r7, #0]
 8011278:	2b0c      	cmp	r3, #12
 801127a:	d104      	bne.n	8011286 <HAL_TIM_PWM_Start+0xe6>
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	2202      	movs	r2, #2
 8011280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011284:	e00b      	b.n	801129e <HAL_TIM_PWM_Start+0xfe>
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	2b10      	cmp	r3, #16
 801128a:	d104      	bne.n	8011296 <HAL_TIM_PWM_Start+0xf6>
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	2202      	movs	r2, #2
 8011290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011294:	e003      	b.n	801129e <HAL_TIM_PWM_Start+0xfe>
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	2202      	movs	r2, #2
 801129a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	2201      	movs	r2, #1
 80112a4:	6839      	ldr	r1, [r7, #0]
 80112a6:	4618      	mov	r0, r3
 80112a8:	f001 fc8c 	bl	8012bc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	4a35      	ldr	r2, [pc, #212]	; (8011388 <HAL_TIM_PWM_Start+0x1e8>)
 80112b2:	4293      	cmp	r3, r2
 80112b4:	d013      	beq.n	80112de <HAL_TIM_PWM_Start+0x13e>
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	4a34      	ldr	r2, [pc, #208]	; (801138c <HAL_TIM_PWM_Start+0x1ec>)
 80112bc:	4293      	cmp	r3, r2
 80112be:	d00e      	beq.n	80112de <HAL_TIM_PWM_Start+0x13e>
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	4a32      	ldr	r2, [pc, #200]	; (8011390 <HAL_TIM_PWM_Start+0x1f0>)
 80112c6:	4293      	cmp	r3, r2
 80112c8:	d009      	beq.n	80112de <HAL_TIM_PWM_Start+0x13e>
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	4a31      	ldr	r2, [pc, #196]	; (8011394 <HAL_TIM_PWM_Start+0x1f4>)
 80112d0:	4293      	cmp	r3, r2
 80112d2:	d004      	beq.n	80112de <HAL_TIM_PWM_Start+0x13e>
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	4a2f      	ldr	r2, [pc, #188]	; (8011398 <HAL_TIM_PWM_Start+0x1f8>)
 80112da:	4293      	cmp	r3, r2
 80112dc:	d101      	bne.n	80112e2 <HAL_TIM_PWM_Start+0x142>
 80112de:	2301      	movs	r3, #1
 80112e0:	e000      	b.n	80112e4 <HAL_TIM_PWM_Start+0x144>
 80112e2:	2300      	movs	r3, #0
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d007      	beq.n	80112f8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80112f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	4a22      	ldr	r2, [pc, #136]	; (8011388 <HAL_TIM_PWM_Start+0x1e8>)
 80112fe:	4293      	cmp	r3, r2
 8011300:	d01d      	beq.n	801133e <HAL_TIM_PWM_Start+0x19e>
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801130a:	d018      	beq.n	801133e <HAL_TIM_PWM_Start+0x19e>
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	4a22      	ldr	r2, [pc, #136]	; (801139c <HAL_TIM_PWM_Start+0x1fc>)
 8011312:	4293      	cmp	r3, r2
 8011314:	d013      	beq.n	801133e <HAL_TIM_PWM_Start+0x19e>
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	4a21      	ldr	r2, [pc, #132]	; (80113a0 <HAL_TIM_PWM_Start+0x200>)
 801131c:	4293      	cmp	r3, r2
 801131e:	d00e      	beq.n	801133e <HAL_TIM_PWM_Start+0x19e>
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	4a1f      	ldr	r2, [pc, #124]	; (80113a4 <HAL_TIM_PWM_Start+0x204>)
 8011326:	4293      	cmp	r3, r2
 8011328:	d009      	beq.n	801133e <HAL_TIM_PWM_Start+0x19e>
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	4a17      	ldr	r2, [pc, #92]	; (801138c <HAL_TIM_PWM_Start+0x1ec>)
 8011330:	4293      	cmp	r3, r2
 8011332:	d004      	beq.n	801133e <HAL_TIM_PWM_Start+0x19e>
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	4a15      	ldr	r2, [pc, #84]	; (8011390 <HAL_TIM_PWM_Start+0x1f0>)
 801133a:	4293      	cmp	r3, r2
 801133c:	d115      	bne.n	801136a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	689a      	ldr	r2, [r3, #8]
 8011344:	4b18      	ldr	r3, [pc, #96]	; (80113a8 <HAL_TIM_PWM_Start+0x208>)
 8011346:	4013      	ands	r3, r2
 8011348:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	2b06      	cmp	r3, #6
 801134e:	d015      	beq.n	801137c <HAL_TIM_PWM_Start+0x1dc>
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011356:	d011      	beq.n	801137c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	681a      	ldr	r2, [r3, #0]
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	f042 0201 	orr.w	r2, r2, #1
 8011366:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011368:	e008      	b.n	801137c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	681a      	ldr	r2, [r3, #0]
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	f042 0201 	orr.w	r2, r2, #1
 8011378:	601a      	str	r2, [r3, #0]
 801137a:	e000      	b.n	801137e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801137c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801137e:	2300      	movs	r3, #0
}
 8011380:	4618      	mov	r0, r3
 8011382:	3710      	adds	r7, #16
 8011384:	46bd      	mov	sp, r7
 8011386:	bd80      	pop	{r7, pc}
 8011388:	40012c00 	.word	0x40012c00
 801138c:	40013400 	.word	0x40013400
 8011390:	40014000 	.word	0x40014000
 8011394:	40014400 	.word	0x40014400
 8011398:	40014800 	.word	0x40014800
 801139c:	40000400 	.word	0x40000400
 80113a0:	40000800 	.word	0x40000800
 80113a4:	40000c00 	.word	0x40000c00
 80113a8:	00010007 	.word	0x00010007

080113ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b082      	sub	sp, #8
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d101      	bne.n	80113be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80113ba:	2301      	movs	r3, #1
 80113bc:	e049      	b.n	8011452 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80113c4:	b2db      	uxtb	r3, r3
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d106      	bne.n	80113d8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	2200      	movs	r2, #0
 80113ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80113d2:	6878      	ldr	r0, [r7, #4]
 80113d4:	f000 f841 	bl	801145a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	2202      	movs	r2, #2
 80113dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	681a      	ldr	r2, [r3, #0]
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	3304      	adds	r3, #4
 80113e8:	4619      	mov	r1, r3
 80113ea:	4610      	mov	r0, r2
 80113ec:	f000 feba 	bl	8012164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	2201      	movs	r2, #1
 80113f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2201      	movs	r2, #1
 80113fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	2201      	movs	r2, #1
 8011404:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	2201      	movs	r2, #1
 801140c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	2201      	movs	r2, #1
 8011414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	2201      	movs	r2, #1
 801141c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	2201      	movs	r2, #1
 8011424:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	2201      	movs	r2, #1
 801142c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	2201      	movs	r2, #1
 8011434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	2201      	movs	r2, #1
 801143c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	2201      	movs	r2, #1
 8011444:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	2201      	movs	r2, #1
 801144c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011450:	2300      	movs	r3, #0
}
 8011452:	4618      	mov	r0, r3
 8011454:	3708      	adds	r7, #8
 8011456:	46bd      	mov	sp, r7
 8011458:	bd80      	pop	{r7, pc}

0801145a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 801145a:	b480      	push	{r7}
 801145c:	b083      	sub	sp, #12
 801145e:	af00      	add	r7, sp, #0
 8011460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8011462:	bf00      	nop
 8011464:	370c      	adds	r7, #12
 8011466:	46bd      	mov	sp, r7
 8011468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146c:	4770      	bx	lr
	...

08011470 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b084      	sub	sp, #16
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
 8011478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801147a:	2300      	movs	r3, #0
 801147c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801147e:	683b      	ldr	r3, [r7, #0]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d104      	bne.n	801148e <HAL_TIM_IC_Start_IT+0x1e>
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801148a:	b2db      	uxtb	r3, r3
 801148c:	e023      	b.n	80114d6 <HAL_TIM_IC_Start_IT+0x66>
 801148e:	683b      	ldr	r3, [r7, #0]
 8011490:	2b04      	cmp	r3, #4
 8011492:	d104      	bne.n	801149e <HAL_TIM_IC_Start_IT+0x2e>
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801149a:	b2db      	uxtb	r3, r3
 801149c:	e01b      	b.n	80114d6 <HAL_TIM_IC_Start_IT+0x66>
 801149e:	683b      	ldr	r3, [r7, #0]
 80114a0:	2b08      	cmp	r3, #8
 80114a2:	d104      	bne.n	80114ae <HAL_TIM_IC_Start_IT+0x3e>
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80114aa:	b2db      	uxtb	r3, r3
 80114ac:	e013      	b.n	80114d6 <HAL_TIM_IC_Start_IT+0x66>
 80114ae:	683b      	ldr	r3, [r7, #0]
 80114b0:	2b0c      	cmp	r3, #12
 80114b2:	d104      	bne.n	80114be <HAL_TIM_IC_Start_IT+0x4e>
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80114ba:	b2db      	uxtb	r3, r3
 80114bc:	e00b      	b.n	80114d6 <HAL_TIM_IC_Start_IT+0x66>
 80114be:	683b      	ldr	r3, [r7, #0]
 80114c0:	2b10      	cmp	r3, #16
 80114c2:	d104      	bne.n	80114ce <HAL_TIM_IC_Start_IT+0x5e>
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80114ca:	b2db      	uxtb	r3, r3
 80114cc:	e003      	b.n	80114d6 <HAL_TIM_IC_Start_IT+0x66>
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80114d4:	b2db      	uxtb	r3, r3
 80114d6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80114d8:	683b      	ldr	r3, [r7, #0]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d104      	bne.n	80114e8 <HAL_TIM_IC_Start_IT+0x78>
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80114e4:	b2db      	uxtb	r3, r3
 80114e6:	e013      	b.n	8011510 <HAL_TIM_IC_Start_IT+0xa0>
 80114e8:	683b      	ldr	r3, [r7, #0]
 80114ea:	2b04      	cmp	r3, #4
 80114ec:	d104      	bne.n	80114f8 <HAL_TIM_IC_Start_IT+0x88>
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80114f4:	b2db      	uxtb	r3, r3
 80114f6:	e00b      	b.n	8011510 <HAL_TIM_IC_Start_IT+0xa0>
 80114f8:	683b      	ldr	r3, [r7, #0]
 80114fa:	2b08      	cmp	r3, #8
 80114fc:	d104      	bne.n	8011508 <HAL_TIM_IC_Start_IT+0x98>
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8011504:	b2db      	uxtb	r3, r3
 8011506:	e003      	b.n	8011510 <HAL_TIM_IC_Start_IT+0xa0>
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801150e:	b2db      	uxtb	r3, r3
 8011510:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8011512:	7bbb      	ldrb	r3, [r7, #14]
 8011514:	2b01      	cmp	r3, #1
 8011516:	d102      	bne.n	801151e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8011518:	7b7b      	ldrb	r3, [r7, #13]
 801151a:	2b01      	cmp	r3, #1
 801151c:	d001      	beq.n	8011522 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 801151e:	2301      	movs	r3, #1
 8011520:	e0dd      	b.n	80116de <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011522:	683b      	ldr	r3, [r7, #0]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d104      	bne.n	8011532 <HAL_TIM_IC_Start_IT+0xc2>
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	2202      	movs	r2, #2
 801152c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011530:	e023      	b.n	801157a <HAL_TIM_IC_Start_IT+0x10a>
 8011532:	683b      	ldr	r3, [r7, #0]
 8011534:	2b04      	cmp	r3, #4
 8011536:	d104      	bne.n	8011542 <HAL_TIM_IC_Start_IT+0xd2>
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	2202      	movs	r2, #2
 801153c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011540:	e01b      	b.n	801157a <HAL_TIM_IC_Start_IT+0x10a>
 8011542:	683b      	ldr	r3, [r7, #0]
 8011544:	2b08      	cmp	r3, #8
 8011546:	d104      	bne.n	8011552 <HAL_TIM_IC_Start_IT+0xe2>
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	2202      	movs	r2, #2
 801154c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011550:	e013      	b.n	801157a <HAL_TIM_IC_Start_IT+0x10a>
 8011552:	683b      	ldr	r3, [r7, #0]
 8011554:	2b0c      	cmp	r3, #12
 8011556:	d104      	bne.n	8011562 <HAL_TIM_IC_Start_IT+0xf2>
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	2202      	movs	r2, #2
 801155c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011560:	e00b      	b.n	801157a <HAL_TIM_IC_Start_IT+0x10a>
 8011562:	683b      	ldr	r3, [r7, #0]
 8011564:	2b10      	cmp	r3, #16
 8011566:	d104      	bne.n	8011572 <HAL_TIM_IC_Start_IT+0x102>
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	2202      	movs	r2, #2
 801156c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011570:	e003      	b.n	801157a <HAL_TIM_IC_Start_IT+0x10a>
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	2202      	movs	r2, #2
 8011576:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d104      	bne.n	801158a <HAL_TIM_IC_Start_IT+0x11a>
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	2202      	movs	r2, #2
 8011584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011588:	e013      	b.n	80115b2 <HAL_TIM_IC_Start_IT+0x142>
 801158a:	683b      	ldr	r3, [r7, #0]
 801158c:	2b04      	cmp	r3, #4
 801158e:	d104      	bne.n	801159a <HAL_TIM_IC_Start_IT+0x12a>
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2202      	movs	r2, #2
 8011594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011598:	e00b      	b.n	80115b2 <HAL_TIM_IC_Start_IT+0x142>
 801159a:	683b      	ldr	r3, [r7, #0]
 801159c:	2b08      	cmp	r3, #8
 801159e:	d104      	bne.n	80115aa <HAL_TIM_IC_Start_IT+0x13a>
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	2202      	movs	r2, #2
 80115a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80115a8:	e003      	b.n	80115b2 <HAL_TIM_IC_Start_IT+0x142>
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	2202      	movs	r2, #2
 80115ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80115b2:	683b      	ldr	r3, [r7, #0]
 80115b4:	2b0c      	cmp	r3, #12
 80115b6:	d841      	bhi.n	801163c <HAL_TIM_IC_Start_IT+0x1cc>
 80115b8:	a201      	add	r2, pc, #4	; (adr r2, 80115c0 <HAL_TIM_IC_Start_IT+0x150>)
 80115ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115be:	bf00      	nop
 80115c0:	080115f5 	.word	0x080115f5
 80115c4:	0801163d 	.word	0x0801163d
 80115c8:	0801163d 	.word	0x0801163d
 80115cc:	0801163d 	.word	0x0801163d
 80115d0:	08011607 	.word	0x08011607
 80115d4:	0801163d 	.word	0x0801163d
 80115d8:	0801163d 	.word	0x0801163d
 80115dc:	0801163d 	.word	0x0801163d
 80115e0:	08011619 	.word	0x08011619
 80115e4:	0801163d 	.word	0x0801163d
 80115e8:	0801163d 	.word	0x0801163d
 80115ec:	0801163d 	.word	0x0801163d
 80115f0:	0801162b 	.word	0x0801162b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	68da      	ldr	r2, [r3, #12]
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	f042 0202 	orr.w	r2, r2, #2
 8011602:	60da      	str	r2, [r3, #12]
      break;
 8011604:	e01d      	b.n	8011642 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	68da      	ldr	r2, [r3, #12]
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	f042 0204 	orr.w	r2, r2, #4
 8011614:	60da      	str	r2, [r3, #12]
      break;
 8011616:	e014      	b.n	8011642 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	68da      	ldr	r2, [r3, #12]
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	f042 0208 	orr.w	r2, r2, #8
 8011626:	60da      	str	r2, [r3, #12]
      break;
 8011628:	e00b      	b.n	8011642 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	68da      	ldr	r2, [r3, #12]
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	f042 0210 	orr.w	r2, r2, #16
 8011638:	60da      	str	r2, [r3, #12]
      break;
 801163a:	e002      	b.n	8011642 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 801163c:	2301      	movs	r3, #1
 801163e:	73fb      	strb	r3, [r7, #15]
      break;
 8011640:	bf00      	nop
  }

  if (status == HAL_OK)
 8011642:	7bfb      	ldrb	r3, [r7, #15]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d149      	bne.n	80116dc <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	2201      	movs	r2, #1
 801164e:	6839      	ldr	r1, [r7, #0]
 8011650:	4618      	mov	r0, r3
 8011652:	f001 fab7 	bl	8012bc4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	4a23      	ldr	r2, [pc, #140]	; (80116e8 <HAL_TIM_IC_Start_IT+0x278>)
 801165c:	4293      	cmp	r3, r2
 801165e:	d01d      	beq.n	801169c <HAL_TIM_IC_Start_IT+0x22c>
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011668:	d018      	beq.n	801169c <HAL_TIM_IC_Start_IT+0x22c>
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	4a1f      	ldr	r2, [pc, #124]	; (80116ec <HAL_TIM_IC_Start_IT+0x27c>)
 8011670:	4293      	cmp	r3, r2
 8011672:	d013      	beq.n	801169c <HAL_TIM_IC_Start_IT+0x22c>
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	4a1d      	ldr	r2, [pc, #116]	; (80116f0 <HAL_TIM_IC_Start_IT+0x280>)
 801167a:	4293      	cmp	r3, r2
 801167c:	d00e      	beq.n	801169c <HAL_TIM_IC_Start_IT+0x22c>
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	4a1c      	ldr	r2, [pc, #112]	; (80116f4 <HAL_TIM_IC_Start_IT+0x284>)
 8011684:	4293      	cmp	r3, r2
 8011686:	d009      	beq.n	801169c <HAL_TIM_IC_Start_IT+0x22c>
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	4a1a      	ldr	r2, [pc, #104]	; (80116f8 <HAL_TIM_IC_Start_IT+0x288>)
 801168e:	4293      	cmp	r3, r2
 8011690:	d004      	beq.n	801169c <HAL_TIM_IC_Start_IT+0x22c>
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	4a19      	ldr	r2, [pc, #100]	; (80116fc <HAL_TIM_IC_Start_IT+0x28c>)
 8011698:	4293      	cmp	r3, r2
 801169a:	d115      	bne.n	80116c8 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	689a      	ldr	r2, [r3, #8]
 80116a2:	4b17      	ldr	r3, [pc, #92]	; (8011700 <HAL_TIM_IC_Start_IT+0x290>)
 80116a4:	4013      	ands	r3, r2
 80116a6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80116a8:	68bb      	ldr	r3, [r7, #8]
 80116aa:	2b06      	cmp	r3, #6
 80116ac:	d015      	beq.n	80116da <HAL_TIM_IC_Start_IT+0x26a>
 80116ae:	68bb      	ldr	r3, [r7, #8]
 80116b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80116b4:	d011      	beq.n	80116da <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	681a      	ldr	r2, [r3, #0]
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	f042 0201 	orr.w	r2, r2, #1
 80116c4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80116c6:	e008      	b.n	80116da <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	681a      	ldr	r2, [r3, #0]
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	f042 0201 	orr.w	r2, r2, #1
 80116d6:	601a      	str	r2, [r3, #0]
 80116d8:	e000      	b.n	80116dc <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80116da:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80116dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80116de:	4618      	mov	r0, r3
 80116e0:	3710      	adds	r7, #16
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}
 80116e6:	bf00      	nop
 80116e8:	40012c00 	.word	0x40012c00
 80116ec:	40000400 	.word	0x40000400
 80116f0:	40000800 	.word	0x40000800
 80116f4:	40000c00 	.word	0x40000c00
 80116f8:	40013400 	.word	0x40013400
 80116fc:	40014000 	.word	0x40014000
 8011700:	00010007 	.word	0x00010007

08011704 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8011704:	b580      	push	{r7, lr}
 8011706:	b086      	sub	sp, #24
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
 801170c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d101      	bne.n	8011718 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8011714:	2301      	movs	r3, #1
 8011716:	e097      	b.n	8011848 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801171e:	b2db      	uxtb	r3, r3
 8011720:	2b00      	cmp	r3, #0
 8011722:	d106      	bne.n	8011732 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	2200      	movs	r2, #0
 8011728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 801172c:	6878      	ldr	r0, [r7, #4]
 801172e:	f7f9 f87d 	bl	800a82c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	2202      	movs	r2, #2
 8011736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	689b      	ldr	r3, [r3, #8]
 8011740:	687a      	ldr	r2, [r7, #4]
 8011742:	6812      	ldr	r2, [r2, #0]
 8011744:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8011748:	f023 0307 	bic.w	r3, r3, #7
 801174c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	681a      	ldr	r2, [r3, #0]
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	3304      	adds	r3, #4
 8011756:	4619      	mov	r1, r3
 8011758:	4610      	mov	r0, r2
 801175a:	f000 fd03 	bl	8012164 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	689b      	ldr	r3, [r3, #8]
 8011764:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	699b      	ldr	r3, [r3, #24]
 801176c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	6a1b      	ldr	r3, [r3, #32]
 8011774:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8011776:	683b      	ldr	r3, [r7, #0]
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	697a      	ldr	r2, [r7, #20]
 801177c:	4313      	orrs	r3, r2
 801177e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8011780:	693b      	ldr	r3, [r7, #16]
 8011782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011786:	f023 0303 	bic.w	r3, r3, #3
 801178a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 801178c:	683b      	ldr	r3, [r7, #0]
 801178e:	689a      	ldr	r2, [r3, #8]
 8011790:	683b      	ldr	r3, [r7, #0]
 8011792:	699b      	ldr	r3, [r3, #24]
 8011794:	021b      	lsls	r3, r3, #8
 8011796:	4313      	orrs	r3, r2
 8011798:	693a      	ldr	r2, [r7, #16]
 801179a:	4313      	orrs	r3, r2
 801179c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 801179e:	693b      	ldr	r3, [r7, #16]
 80117a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80117a4:	f023 030c 	bic.w	r3, r3, #12
 80117a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80117aa:	693b      	ldr	r3, [r7, #16]
 80117ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80117b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80117b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80117b6:	683b      	ldr	r3, [r7, #0]
 80117b8:	68da      	ldr	r2, [r3, #12]
 80117ba:	683b      	ldr	r3, [r7, #0]
 80117bc:	69db      	ldr	r3, [r3, #28]
 80117be:	021b      	lsls	r3, r3, #8
 80117c0:	4313      	orrs	r3, r2
 80117c2:	693a      	ldr	r2, [r7, #16]
 80117c4:	4313      	orrs	r3, r2
 80117c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80117c8:	683b      	ldr	r3, [r7, #0]
 80117ca:	691b      	ldr	r3, [r3, #16]
 80117cc:	011a      	lsls	r2, r3, #4
 80117ce:	683b      	ldr	r3, [r7, #0]
 80117d0:	6a1b      	ldr	r3, [r3, #32]
 80117d2:	031b      	lsls	r3, r3, #12
 80117d4:	4313      	orrs	r3, r2
 80117d6:	693a      	ldr	r2, [r7, #16]
 80117d8:	4313      	orrs	r3, r2
 80117da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80117e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80117ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80117ec:	683b      	ldr	r3, [r7, #0]
 80117ee:	685a      	ldr	r2, [r3, #4]
 80117f0:	683b      	ldr	r3, [r7, #0]
 80117f2:	695b      	ldr	r3, [r3, #20]
 80117f4:	011b      	lsls	r3, r3, #4
 80117f6:	4313      	orrs	r3, r2
 80117f8:	68fa      	ldr	r2, [r7, #12]
 80117fa:	4313      	orrs	r3, r2
 80117fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	697a      	ldr	r2, [r7, #20]
 8011804:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	693a      	ldr	r2, [r7, #16]
 801180c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	68fa      	ldr	r2, [r7, #12]
 8011814:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	2201      	movs	r2, #1
 801181a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	2201      	movs	r2, #1
 8011822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	2201      	movs	r2, #1
 801182a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	2201      	movs	r2, #1
 8011832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	2201      	movs	r2, #1
 801183a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	2201      	movs	r2, #1
 8011842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011846:	2300      	movs	r3, #0
}
 8011848:	4618      	mov	r0, r3
 801184a:	3718      	adds	r7, #24
 801184c:	46bd      	mov	sp, r7
 801184e:	bd80      	pop	{r7, pc}

08011850 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011850:	b580      	push	{r7, lr}
 8011852:	b084      	sub	sp, #16
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
 8011858:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011860:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8011868:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011870:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011878:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 801187a:	683b      	ldr	r3, [r7, #0]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d110      	bne.n	80118a2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8011880:	7bfb      	ldrb	r3, [r7, #15]
 8011882:	2b01      	cmp	r3, #1
 8011884:	d102      	bne.n	801188c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8011886:	7b7b      	ldrb	r3, [r7, #13]
 8011888:	2b01      	cmp	r3, #1
 801188a:	d001      	beq.n	8011890 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 801188c:	2301      	movs	r3, #1
 801188e:	e069      	b.n	8011964 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	2202      	movs	r2, #2
 8011894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	2202      	movs	r2, #2
 801189c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80118a0:	e031      	b.n	8011906 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80118a2:	683b      	ldr	r3, [r7, #0]
 80118a4:	2b04      	cmp	r3, #4
 80118a6:	d110      	bne.n	80118ca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80118a8:	7bbb      	ldrb	r3, [r7, #14]
 80118aa:	2b01      	cmp	r3, #1
 80118ac:	d102      	bne.n	80118b4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80118ae:	7b3b      	ldrb	r3, [r7, #12]
 80118b0:	2b01      	cmp	r3, #1
 80118b2:	d001      	beq.n	80118b8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80118b4:	2301      	movs	r3, #1
 80118b6:	e055      	b.n	8011964 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	2202      	movs	r2, #2
 80118bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	2202      	movs	r2, #2
 80118c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80118c8:	e01d      	b.n	8011906 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80118ca:	7bfb      	ldrb	r3, [r7, #15]
 80118cc:	2b01      	cmp	r3, #1
 80118ce:	d108      	bne.n	80118e2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80118d0:	7bbb      	ldrb	r3, [r7, #14]
 80118d2:	2b01      	cmp	r3, #1
 80118d4:	d105      	bne.n	80118e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80118d6:	7b7b      	ldrb	r3, [r7, #13]
 80118d8:	2b01      	cmp	r3, #1
 80118da:	d102      	bne.n	80118e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80118dc:	7b3b      	ldrb	r3, [r7, #12]
 80118de:	2b01      	cmp	r3, #1
 80118e0:	d001      	beq.n	80118e6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80118e2:	2301      	movs	r3, #1
 80118e4:	e03e      	b.n	8011964 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	2202      	movs	r2, #2
 80118ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	2202      	movs	r2, #2
 80118f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	2202      	movs	r2, #2
 80118fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	2202      	movs	r2, #2
 8011902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8011906:	683b      	ldr	r3, [r7, #0]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d003      	beq.n	8011914 <HAL_TIM_Encoder_Start+0xc4>
 801190c:	683b      	ldr	r3, [r7, #0]
 801190e:	2b04      	cmp	r3, #4
 8011910:	d008      	beq.n	8011924 <HAL_TIM_Encoder_Start+0xd4>
 8011912:	e00f      	b.n	8011934 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	2201      	movs	r2, #1
 801191a:	2100      	movs	r1, #0
 801191c:	4618      	mov	r0, r3
 801191e:	f001 f951 	bl	8012bc4 <TIM_CCxChannelCmd>
      break;
 8011922:	e016      	b.n	8011952 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	2201      	movs	r2, #1
 801192a:	2104      	movs	r1, #4
 801192c:	4618      	mov	r0, r3
 801192e:	f001 f949 	bl	8012bc4 <TIM_CCxChannelCmd>
      break;
 8011932:	e00e      	b.n	8011952 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	2201      	movs	r2, #1
 801193a:	2100      	movs	r1, #0
 801193c:	4618      	mov	r0, r3
 801193e:	f001 f941 	bl	8012bc4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	2201      	movs	r2, #1
 8011948:	2104      	movs	r1, #4
 801194a:	4618      	mov	r0, r3
 801194c:	f001 f93a 	bl	8012bc4 <TIM_CCxChannelCmd>
      break;
 8011950:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	681a      	ldr	r2, [r3, #0]
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	f042 0201 	orr.w	r2, r2, #1
 8011960:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8011962:	2300      	movs	r3, #0
}
 8011964:	4618      	mov	r0, r3
 8011966:	3710      	adds	r7, #16
 8011968:	46bd      	mov	sp, r7
 801196a:	bd80      	pop	{r7, pc}

0801196c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801196c:	b580      	push	{r7, lr}
 801196e:	b082      	sub	sp, #8
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	691b      	ldr	r3, [r3, #16]
 801197a:	f003 0302 	and.w	r3, r3, #2
 801197e:	2b02      	cmp	r3, #2
 8011980:	d122      	bne.n	80119c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	68db      	ldr	r3, [r3, #12]
 8011988:	f003 0302 	and.w	r3, r3, #2
 801198c:	2b02      	cmp	r3, #2
 801198e:	d11b      	bne.n	80119c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	f06f 0202 	mvn.w	r2, #2
 8011998:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	2201      	movs	r2, #1
 801199e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	699b      	ldr	r3, [r3, #24]
 80119a6:	f003 0303 	and.w	r3, r3, #3
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d003      	beq.n	80119b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80119ae:	6878      	ldr	r0, [r7, #4]
 80119b0:	f7f1 fcbe 	bl	8003330 <HAL_TIM_IC_CaptureCallback>
 80119b4:	e005      	b.n	80119c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80119b6:	6878      	ldr	r0, [r7, #4]
 80119b8:	f000 fbb6 	bl	8012128 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80119bc:	6878      	ldr	r0, [r7, #4]
 80119be:	f000 fbbd 	bl	801213c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	2200      	movs	r2, #0
 80119c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	691b      	ldr	r3, [r3, #16]
 80119ce:	f003 0304 	and.w	r3, r3, #4
 80119d2:	2b04      	cmp	r3, #4
 80119d4:	d122      	bne.n	8011a1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	68db      	ldr	r3, [r3, #12]
 80119dc:	f003 0304 	and.w	r3, r3, #4
 80119e0:	2b04      	cmp	r3, #4
 80119e2:	d11b      	bne.n	8011a1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	f06f 0204 	mvn.w	r2, #4
 80119ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	2202      	movs	r2, #2
 80119f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	699b      	ldr	r3, [r3, #24]
 80119fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d003      	beq.n	8011a0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011a02:	6878      	ldr	r0, [r7, #4]
 8011a04:	f7f1 fc94 	bl	8003330 <HAL_TIM_IC_CaptureCallback>
 8011a08:	e005      	b.n	8011a16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011a0a:	6878      	ldr	r0, [r7, #4]
 8011a0c:	f000 fb8c 	bl	8012128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011a10:	6878      	ldr	r0, [r7, #4]
 8011a12:	f000 fb93 	bl	801213c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	2200      	movs	r2, #0
 8011a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	691b      	ldr	r3, [r3, #16]
 8011a22:	f003 0308 	and.w	r3, r3, #8
 8011a26:	2b08      	cmp	r3, #8
 8011a28:	d122      	bne.n	8011a70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	68db      	ldr	r3, [r3, #12]
 8011a30:	f003 0308 	and.w	r3, r3, #8
 8011a34:	2b08      	cmp	r3, #8
 8011a36:	d11b      	bne.n	8011a70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	f06f 0208 	mvn.w	r2, #8
 8011a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	2204      	movs	r2, #4
 8011a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	69db      	ldr	r3, [r3, #28]
 8011a4e:	f003 0303 	and.w	r3, r3, #3
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d003      	beq.n	8011a5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011a56:	6878      	ldr	r0, [r7, #4]
 8011a58:	f7f1 fc6a 	bl	8003330 <HAL_TIM_IC_CaptureCallback>
 8011a5c:	e005      	b.n	8011a6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011a5e:	6878      	ldr	r0, [r7, #4]
 8011a60:	f000 fb62 	bl	8012128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011a64:	6878      	ldr	r0, [r7, #4]
 8011a66:	f000 fb69 	bl	801213c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	691b      	ldr	r3, [r3, #16]
 8011a76:	f003 0310 	and.w	r3, r3, #16
 8011a7a:	2b10      	cmp	r3, #16
 8011a7c:	d122      	bne.n	8011ac4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	68db      	ldr	r3, [r3, #12]
 8011a84:	f003 0310 	and.w	r3, r3, #16
 8011a88:	2b10      	cmp	r3, #16
 8011a8a:	d11b      	bne.n	8011ac4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	f06f 0210 	mvn.w	r2, #16
 8011a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	2208      	movs	r2, #8
 8011a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	69db      	ldr	r3, [r3, #28]
 8011aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d003      	beq.n	8011ab2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011aaa:	6878      	ldr	r0, [r7, #4]
 8011aac:	f7f1 fc40 	bl	8003330 <HAL_TIM_IC_CaptureCallback>
 8011ab0:	e005      	b.n	8011abe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011ab2:	6878      	ldr	r0, [r7, #4]
 8011ab4:	f000 fb38 	bl	8012128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011ab8:	6878      	ldr	r0, [r7, #4]
 8011aba:	f000 fb3f 	bl	801213c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	691b      	ldr	r3, [r3, #16]
 8011aca:	f003 0301 	and.w	r3, r3, #1
 8011ace:	2b01      	cmp	r3, #1
 8011ad0:	d10e      	bne.n	8011af0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	68db      	ldr	r3, [r3, #12]
 8011ad8:	f003 0301 	and.w	r3, r3, #1
 8011adc:	2b01      	cmp	r3, #1
 8011ade:	d107      	bne.n	8011af0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	f06f 0201 	mvn.w	r2, #1
 8011ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011aea:	6878      	ldr	r0, [r7, #4]
 8011aec:	f7f8 faa8 	bl	800a040 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	691b      	ldr	r3, [r3, #16]
 8011af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011afa:	2b80      	cmp	r3, #128	; 0x80
 8011afc:	d10e      	bne.n	8011b1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	68db      	ldr	r3, [r3, #12]
 8011b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b08:	2b80      	cmp	r3, #128	; 0x80
 8011b0a:	d107      	bne.n	8011b1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8011b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8011b16:	6878      	ldr	r0, [r7, #4]
 8011b18:	f001 f9ac 	bl	8012e74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	691b      	ldr	r3, [r3, #16]
 8011b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011b2a:	d10e      	bne.n	8011b4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	68db      	ldr	r3, [r3, #12]
 8011b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b36:	2b80      	cmp	r3, #128	; 0x80
 8011b38:	d107      	bne.n	8011b4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8011b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	f001 f99f 	bl	8012e88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	691b      	ldr	r3, [r3, #16]
 8011b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b54:	2b40      	cmp	r3, #64	; 0x40
 8011b56:	d10e      	bne.n	8011b76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	68db      	ldr	r3, [r3, #12]
 8011b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b62:	2b40      	cmp	r3, #64	; 0x40
 8011b64:	d107      	bne.n	8011b76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8011b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011b70:	6878      	ldr	r0, [r7, #4]
 8011b72:	f000 faed 	bl	8012150 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	691b      	ldr	r3, [r3, #16]
 8011b7c:	f003 0320 	and.w	r3, r3, #32
 8011b80:	2b20      	cmp	r3, #32
 8011b82:	d10e      	bne.n	8011ba2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	68db      	ldr	r3, [r3, #12]
 8011b8a:	f003 0320 	and.w	r3, r3, #32
 8011b8e:	2b20      	cmp	r3, #32
 8011b90:	d107      	bne.n	8011ba2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	f06f 0220 	mvn.w	r2, #32
 8011b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011b9c:	6878      	ldr	r0, [r7, #4]
 8011b9e:	f001 f95f 	bl	8012e60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011ba2:	bf00      	nop
 8011ba4:	3708      	adds	r7, #8
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	bd80      	pop	{r7, pc}

08011baa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8011baa:	b580      	push	{r7, lr}
 8011bac:	b086      	sub	sp, #24
 8011bae:	af00      	add	r7, sp, #0
 8011bb0:	60f8      	str	r0, [r7, #12]
 8011bb2:	60b9      	str	r1, [r7, #8]
 8011bb4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011bc0:	2b01      	cmp	r3, #1
 8011bc2:	d101      	bne.n	8011bc8 <HAL_TIM_IC_ConfigChannel+0x1e>
 8011bc4:	2302      	movs	r3, #2
 8011bc6:	e088      	b.n	8011cda <HAL_TIM_IC_ConfigChannel+0x130>
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	2201      	movs	r2, #1
 8011bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d11b      	bne.n	8011c0e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8011bda:	68bb      	ldr	r3, [r7, #8]
 8011bdc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8011bde:	68bb      	ldr	r3, [r7, #8]
 8011be0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8011be2:	68bb      	ldr	r3, [r7, #8]
 8011be4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8011be6:	f000 fe2d 	bl	8012844 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	699a      	ldr	r2, [r3, #24]
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	f022 020c 	bic.w	r2, r2, #12
 8011bf8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	6999      	ldr	r1, [r3, #24]
 8011c00:	68bb      	ldr	r3, [r7, #8]
 8011c02:	689a      	ldr	r2, [r3, #8]
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	430a      	orrs	r2, r1
 8011c0a:	619a      	str	r2, [r3, #24]
 8011c0c:	e060      	b.n	8011cd0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	2b04      	cmp	r3, #4
 8011c12:	d11c      	bne.n	8011c4e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8011c18:	68bb      	ldr	r3, [r7, #8]
 8011c1a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8011c1c:	68bb      	ldr	r3, [r7, #8]
 8011c1e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8011c20:	68bb      	ldr	r3, [r7, #8]
 8011c22:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8011c24:	f000 feab 	bl	801297e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	699a      	ldr	r2, [r3, #24]
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8011c36:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	6999      	ldr	r1, [r3, #24]
 8011c3e:	68bb      	ldr	r3, [r7, #8]
 8011c40:	689b      	ldr	r3, [r3, #8]
 8011c42:	021a      	lsls	r2, r3, #8
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	430a      	orrs	r2, r1
 8011c4a:	619a      	str	r2, [r3, #24]
 8011c4c:	e040      	b.n	8011cd0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	2b08      	cmp	r3, #8
 8011c52:	d11b      	bne.n	8011c8c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8011c58:	68bb      	ldr	r3, [r7, #8]
 8011c5a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8011c5c:	68bb      	ldr	r3, [r7, #8]
 8011c5e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8011c60:	68bb      	ldr	r3, [r7, #8]
 8011c62:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8011c64:	f000 fef8 	bl	8012a58 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	69da      	ldr	r2, [r3, #28]
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	f022 020c 	bic.w	r2, r2, #12
 8011c76:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	69d9      	ldr	r1, [r3, #28]
 8011c7e:	68bb      	ldr	r3, [r7, #8]
 8011c80:	689a      	ldr	r2, [r3, #8]
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	430a      	orrs	r2, r1
 8011c88:	61da      	str	r2, [r3, #28]
 8011c8a:	e021      	b.n	8011cd0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	2b0c      	cmp	r3, #12
 8011c90:	d11c      	bne.n	8011ccc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8011c9a:	68bb      	ldr	r3, [r7, #8]
 8011c9c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8011c9e:	68bb      	ldr	r3, [r7, #8]
 8011ca0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8011ca2:	f000 ff15 	bl	8012ad0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	69da      	ldr	r2, [r3, #28]
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8011cb4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	69d9      	ldr	r1, [r3, #28]
 8011cbc:	68bb      	ldr	r3, [r7, #8]
 8011cbe:	689b      	ldr	r3, [r3, #8]
 8011cc0:	021a      	lsls	r2, r3, #8
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	430a      	orrs	r2, r1
 8011cc8:	61da      	str	r2, [r3, #28]
 8011cca:	e001      	b.n	8011cd0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8011ccc:	2301      	movs	r3, #1
 8011cce:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8011cda:	4618      	mov	r0, r3
 8011cdc:	3718      	adds	r7, #24
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	bd80      	pop	{r7, pc}
	...

08011ce4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b086      	sub	sp, #24
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	60f8      	str	r0, [r7, #12]
 8011cec:	60b9      	str	r1, [r7, #8]
 8011cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011cfa:	2b01      	cmp	r3, #1
 8011cfc:	d101      	bne.n	8011d02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8011cfe:	2302      	movs	r3, #2
 8011d00:	e0ff      	b.n	8011f02 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	2201      	movs	r2, #1
 8011d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	2b14      	cmp	r3, #20
 8011d0e:	f200 80f0 	bhi.w	8011ef2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8011d12:	a201      	add	r2, pc, #4	; (adr r2, 8011d18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d18:	08011d6d 	.word	0x08011d6d
 8011d1c:	08011ef3 	.word	0x08011ef3
 8011d20:	08011ef3 	.word	0x08011ef3
 8011d24:	08011ef3 	.word	0x08011ef3
 8011d28:	08011dad 	.word	0x08011dad
 8011d2c:	08011ef3 	.word	0x08011ef3
 8011d30:	08011ef3 	.word	0x08011ef3
 8011d34:	08011ef3 	.word	0x08011ef3
 8011d38:	08011def 	.word	0x08011def
 8011d3c:	08011ef3 	.word	0x08011ef3
 8011d40:	08011ef3 	.word	0x08011ef3
 8011d44:	08011ef3 	.word	0x08011ef3
 8011d48:	08011e2f 	.word	0x08011e2f
 8011d4c:	08011ef3 	.word	0x08011ef3
 8011d50:	08011ef3 	.word	0x08011ef3
 8011d54:	08011ef3 	.word	0x08011ef3
 8011d58:	08011e71 	.word	0x08011e71
 8011d5c:	08011ef3 	.word	0x08011ef3
 8011d60:	08011ef3 	.word	0x08011ef3
 8011d64:	08011ef3 	.word	0x08011ef3
 8011d68:	08011eb1 	.word	0x08011eb1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	68b9      	ldr	r1, [r7, #8]
 8011d72:	4618      	mov	r0, r3
 8011d74:	f000 fa90 	bl	8012298 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	699a      	ldr	r2, [r3, #24]
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	f042 0208 	orr.w	r2, r2, #8
 8011d86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	699a      	ldr	r2, [r3, #24]
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	f022 0204 	bic.w	r2, r2, #4
 8011d96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	6999      	ldr	r1, [r3, #24]
 8011d9e:	68bb      	ldr	r3, [r7, #8]
 8011da0:	691a      	ldr	r2, [r3, #16]
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	430a      	orrs	r2, r1
 8011da8:	619a      	str	r2, [r3, #24]
      break;
 8011daa:	e0a5      	b.n	8011ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	68b9      	ldr	r1, [r7, #8]
 8011db2:	4618      	mov	r0, r3
 8011db4:	f000 fb00 	bl	80123b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	699a      	ldr	r2, [r3, #24]
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	699a      	ldr	r2, [r3, #24]
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	6999      	ldr	r1, [r3, #24]
 8011dde:	68bb      	ldr	r3, [r7, #8]
 8011de0:	691b      	ldr	r3, [r3, #16]
 8011de2:	021a      	lsls	r2, r3, #8
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	430a      	orrs	r2, r1
 8011dea:	619a      	str	r2, [r3, #24]
      break;
 8011dec:	e084      	b.n	8011ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	68b9      	ldr	r1, [r7, #8]
 8011df4:	4618      	mov	r0, r3
 8011df6:	f000 fb69 	bl	80124cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	69da      	ldr	r2, [r3, #28]
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	f042 0208 	orr.w	r2, r2, #8
 8011e08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	69da      	ldr	r2, [r3, #28]
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	f022 0204 	bic.w	r2, r2, #4
 8011e18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	69d9      	ldr	r1, [r3, #28]
 8011e20:	68bb      	ldr	r3, [r7, #8]
 8011e22:	691a      	ldr	r2, [r3, #16]
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	430a      	orrs	r2, r1
 8011e2a:	61da      	str	r2, [r3, #28]
      break;
 8011e2c:	e064      	b.n	8011ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	68b9      	ldr	r1, [r7, #8]
 8011e34:	4618      	mov	r0, r3
 8011e36:	f000 fbd1 	bl	80125dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	69da      	ldr	r2, [r3, #28]
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011e48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	69da      	ldr	r2, [r3, #28]
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011e58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	69d9      	ldr	r1, [r3, #28]
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	691b      	ldr	r3, [r3, #16]
 8011e64:	021a      	lsls	r2, r3, #8
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	430a      	orrs	r2, r1
 8011e6c:	61da      	str	r2, [r3, #28]
      break;
 8011e6e:	e043      	b.n	8011ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	68b9      	ldr	r1, [r7, #8]
 8011e76:	4618      	mov	r0, r3
 8011e78:	f000 fc1a 	bl	80126b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	f042 0208 	orr.w	r2, r2, #8
 8011e8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	f022 0204 	bic.w	r2, r2, #4
 8011e9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011ea2:	68bb      	ldr	r3, [r7, #8]
 8011ea4:	691a      	ldr	r2, [r3, #16]
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	430a      	orrs	r2, r1
 8011eac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8011eae:	e023      	b.n	8011ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	68b9      	ldr	r1, [r7, #8]
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	f000 fc5e 	bl	8012778 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011eca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011eda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011ee2:	68bb      	ldr	r3, [r7, #8]
 8011ee4:	691b      	ldr	r3, [r3, #16]
 8011ee6:	021a      	lsls	r2, r3, #8
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	430a      	orrs	r2, r1
 8011eee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8011ef0:	e002      	b.n	8011ef8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8011ef2:	2301      	movs	r3, #1
 8011ef4:	75fb      	strb	r3, [r7, #23]
      break;
 8011ef6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	2200      	movs	r2, #0
 8011efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f02:	4618      	mov	r0, r3
 8011f04:	3718      	adds	r7, #24
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bd80      	pop	{r7, pc}
 8011f0a:	bf00      	nop

08011f0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b084      	sub	sp, #16
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
 8011f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011f16:	2300      	movs	r3, #0
 8011f18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011f20:	2b01      	cmp	r3, #1
 8011f22:	d101      	bne.n	8011f28 <HAL_TIM_ConfigClockSource+0x1c>
 8011f24:	2302      	movs	r3, #2
 8011f26:	e0b6      	b.n	8012096 <HAL_TIM_ConfigClockSource+0x18a>
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	2201      	movs	r2, #1
 8011f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	2202      	movs	r2, #2
 8011f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	689b      	ldr	r3, [r3, #8]
 8011f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011f40:	68bb      	ldr	r3, [r7, #8]
 8011f42:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8011f46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8011f4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011f4c:	68bb      	ldr	r3, [r7, #8]
 8011f4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011f52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	68ba      	ldr	r2, [r7, #8]
 8011f5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011f5c:	683b      	ldr	r3, [r7, #0]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011f64:	d03e      	beq.n	8011fe4 <HAL_TIM_ConfigClockSource+0xd8>
 8011f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011f6a:	f200 8087 	bhi.w	801207c <HAL_TIM_ConfigClockSource+0x170>
 8011f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011f72:	f000 8086 	beq.w	8012082 <HAL_TIM_ConfigClockSource+0x176>
 8011f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011f7a:	d87f      	bhi.n	801207c <HAL_TIM_ConfigClockSource+0x170>
 8011f7c:	2b70      	cmp	r3, #112	; 0x70
 8011f7e:	d01a      	beq.n	8011fb6 <HAL_TIM_ConfigClockSource+0xaa>
 8011f80:	2b70      	cmp	r3, #112	; 0x70
 8011f82:	d87b      	bhi.n	801207c <HAL_TIM_ConfigClockSource+0x170>
 8011f84:	2b60      	cmp	r3, #96	; 0x60
 8011f86:	d050      	beq.n	801202a <HAL_TIM_ConfigClockSource+0x11e>
 8011f88:	2b60      	cmp	r3, #96	; 0x60
 8011f8a:	d877      	bhi.n	801207c <HAL_TIM_ConfigClockSource+0x170>
 8011f8c:	2b50      	cmp	r3, #80	; 0x50
 8011f8e:	d03c      	beq.n	801200a <HAL_TIM_ConfigClockSource+0xfe>
 8011f90:	2b50      	cmp	r3, #80	; 0x50
 8011f92:	d873      	bhi.n	801207c <HAL_TIM_ConfigClockSource+0x170>
 8011f94:	2b40      	cmp	r3, #64	; 0x40
 8011f96:	d058      	beq.n	801204a <HAL_TIM_ConfigClockSource+0x13e>
 8011f98:	2b40      	cmp	r3, #64	; 0x40
 8011f9a:	d86f      	bhi.n	801207c <HAL_TIM_ConfigClockSource+0x170>
 8011f9c:	2b30      	cmp	r3, #48	; 0x30
 8011f9e:	d064      	beq.n	801206a <HAL_TIM_ConfigClockSource+0x15e>
 8011fa0:	2b30      	cmp	r3, #48	; 0x30
 8011fa2:	d86b      	bhi.n	801207c <HAL_TIM_ConfigClockSource+0x170>
 8011fa4:	2b20      	cmp	r3, #32
 8011fa6:	d060      	beq.n	801206a <HAL_TIM_ConfigClockSource+0x15e>
 8011fa8:	2b20      	cmp	r3, #32
 8011faa:	d867      	bhi.n	801207c <HAL_TIM_ConfigClockSource+0x170>
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d05c      	beq.n	801206a <HAL_TIM_ConfigClockSource+0x15e>
 8011fb0:	2b10      	cmp	r3, #16
 8011fb2:	d05a      	beq.n	801206a <HAL_TIM_ConfigClockSource+0x15e>
 8011fb4:	e062      	b.n	801207c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8011fba:	683b      	ldr	r3, [r7, #0]
 8011fbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8011fbe:	683b      	ldr	r3, [r7, #0]
 8011fc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011fc2:	683b      	ldr	r3, [r7, #0]
 8011fc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011fc6:	f000 fddd 	bl	8012b84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	689b      	ldr	r3, [r3, #8]
 8011fd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011fd2:	68bb      	ldr	r3, [r7, #8]
 8011fd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8011fd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	68ba      	ldr	r2, [r7, #8]
 8011fe0:	609a      	str	r2, [r3, #8]
      break;
 8011fe2:	e04f      	b.n	8012084 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8011fe8:	683b      	ldr	r3, [r7, #0]
 8011fea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8011fec:	683b      	ldr	r3, [r7, #0]
 8011fee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011ff0:	683b      	ldr	r3, [r7, #0]
 8011ff2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011ff4:	f000 fdc6 	bl	8012b84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	689a      	ldr	r2, [r3, #8]
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012006:	609a      	str	r2, [r3, #8]
      break;
 8012008:	e03c      	b.n	8012084 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801200e:	683b      	ldr	r3, [r7, #0]
 8012010:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012012:	683b      	ldr	r3, [r7, #0]
 8012014:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012016:	461a      	mov	r2, r3
 8012018:	f000 fc82 	bl	8012920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	2150      	movs	r1, #80	; 0x50
 8012022:	4618      	mov	r0, r3
 8012024:	f000 fd91 	bl	8012b4a <TIM_ITRx_SetConfig>
      break;
 8012028:	e02c      	b.n	8012084 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801202e:	683b      	ldr	r3, [r7, #0]
 8012030:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012032:	683b      	ldr	r3, [r7, #0]
 8012034:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8012036:	461a      	mov	r2, r3
 8012038:	f000 fcde 	bl	80129f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	2160      	movs	r1, #96	; 0x60
 8012042:	4618      	mov	r0, r3
 8012044:	f000 fd81 	bl	8012b4a <TIM_ITRx_SetConfig>
      break;
 8012048:	e01c      	b.n	8012084 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801204e:	683b      	ldr	r3, [r7, #0]
 8012050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012052:	683b      	ldr	r3, [r7, #0]
 8012054:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012056:	461a      	mov	r2, r3
 8012058:	f000 fc62 	bl	8012920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	2140      	movs	r1, #64	; 0x40
 8012062:	4618      	mov	r0, r3
 8012064:	f000 fd71 	bl	8012b4a <TIM_ITRx_SetConfig>
      break;
 8012068:	e00c      	b.n	8012084 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	681a      	ldr	r2, [r3, #0]
 801206e:	683b      	ldr	r3, [r7, #0]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	4619      	mov	r1, r3
 8012074:	4610      	mov	r0, r2
 8012076:	f000 fd68 	bl	8012b4a <TIM_ITRx_SetConfig>
      break;
 801207a:	e003      	b.n	8012084 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 801207c:	2301      	movs	r3, #1
 801207e:	73fb      	strb	r3, [r7, #15]
      break;
 8012080:	e000      	b.n	8012084 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8012082:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	2201      	movs	r2, #1
 8012088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	2200      	movs	r2, #0
 8012090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8012094:	7bfb      	ldrb	r3, [r7, #15]
}
 8012096:	4618      	mov	r0, r3
 8012098:	3710      	adds	r7, #16
 801209a:	46bd      	mov	sp, r7
 801209c:	bd80      	pop	{r7, pc}
	...

080120a0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80120a0:	b480      	push	{r7}
 80120a2:	b085      	sub	sp, #20
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
 80120a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80120aa:	2300      	movs	r3, #0
 80120ac:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80120ae:	683b      	ldr	r3, [r7, #0]
 80120b0:	2b0c      	cmp	r3, #12
 80120b2:	d831      	bhi.n	8012118 <HAL_TIM_ReadCapturedValue+0x78>
 80120b4:	a201      	add	r2, pc, #4	; (adr r2, 80120bc <HAL_TIM_ReadCapturedValue+0x1c>)
 80120b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120ba:	bf00      	nop
 80120bc:	080120f1 	.word	0x080120f1
 80120c0:	08012119 	.word	0x08012119
 80120c4:	08012119 	.word	0x08012119
 80120c8:	08012119 	.word	0x08012119
 80120cc:	080120fb 	.word	0x080120fb
 80120d0:	08012119 	.word	0x08012119
 80120d4:	08012119 	.word	0x08012119
 80120d8:	08012119 	.word	0x08012119
 80120dc:	08012105 	.word	0x08012105
 80120e0:	08012119 	.word	0x08012119
 80120e4:	08012119 	.word	0x08012119
 80120e8:	08012119 	.word	0x08012119
 80120ec:	0801210f 	.word	0x0801210f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80120f6:	60fb      	str	r3, [r7, #12]

      break;
 80120f8:	e00f      	b.n	801211a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012100:	60fb      	str	r3, [r7, #12]

      break;
 8012102:	e00a      	b.n	801211a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801210a:	60fb      	str	r3, [r7, #12]

      break;
 801210c:	e005      	b.n	801211a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012114:	60fb      	str	r3, [r7, #12]

      break;
 8012116:	e000      	b.n	801211a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8012118:	bf00      	nop
  }

  return tmpreg;
 801211a:	68fb      	ldr	r3, [r7, #12]
}
 801211c:	4618      	mov	r0, r3
 801211e:	3714      	adds	r7, #20
 8012120:	46bd      	mov	sp, r7
 8012122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012126:	4770      	bx	lr

08012128 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012128:	b480      	push	{r7}
 801212a:	b083      	sub	sp, #12
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8012130:	bf00      	nop
 8012132:	370c      	adds	r7, #12
 8012134:	46bd      	mov	sp, r7
 8012136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801213a:	4770      	bx	lr

0801213c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801213c:	b480      	push	{r7}
 801213e:	b083      	sub	sp, #12
 8012140:	af00      	add	r7, sp, #0
 8012142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8012144:	bf00      	nop
 8012146:	370c      	adds	r7, #12
 8012148:	46bd      	mov	sp, r7
 801214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214e:	4770      	bx	lr

08012150 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8012150:	b480      	push	{r7}
 8012152:	b083      	sub	sp, #12
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8012158:	bf00      	nop
 801215a:	370c      	adds	r7, #12
 801215c:	46bd      	mov	sp, r7
 801215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012162:	4770      	bx	lr

08012164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8012164:	b480      	push	{r7}
 8012166:	b085      	sub	sp, #20
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
 801216c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	4a40      	ldr	r2, [pc, #256]	; (8012278 <TIM_Base_SetConfig+0x114>)
 8012178:	4293      	cmp	r3, r2
 801217a:	d013      	beq.n	80121a4 <TIM_Base_SetConfig+0x40>
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012182:	d00f      	beq.n	80121a4 <TIM_Base_SetConfig+0x40>
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	4a3d      	ldr	r2, [pc, #244]	; (801227c <TIM_Base_SetConfig+0x118>)
 8012188:	4293      	cmp	r3, r2
 801218a:	d00b      	beq.n	80121a4 <TIM_Base_SetConfig+0x40>
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	4a3c      	ldr	r2, [pc, #240]	; (8012280 <TIM_Base_SetConfig+0x11c>)
 8012190:	4293      	cmp	r3, r2
 8012192:	d007      	beq.n	80121a4 <TIM_Base_SetConfig+0x40>
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	4a3b      	ldr	r2, [pc, #236]	; (8012284 <TIM_Base_SetConfig+0x120>)
 8012198:	4293      	cmp	r3, r2
 801219a:	d003      	beq.n	80121a4 <TIM_Base_SetConfig+0x40>
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	4a3a      	ldr	r2, [pc, #232]	; (8012288 <TIM_Base_SetConfig+0x124>)
 80121a0:	4293      	cmp	r3, r2
 80121a2:	d108      	bne.n	80121b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80121aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80121ac:	683b      	ldr	r3, [r7, #0]
 80121ae:	685b      	ldr	r3, [r3, #4]
 80121b0:	68fa      	ldr	r2, [r7, #12]
 80121b2:	4313      	orrs	r3, r2
 80121b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	4a2f      	ldr	r2, [pc, #188]	; (8012278 <TIM_Base_SetConfig+0x114>)
 80121ba:	4293      	cmp	r3, r2
 80121bc:	d01f      	beq.n	80121fe <TIM_Base_SetConfig+0x9a>
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80121c4:	d01b      	beq.n	80121fe <TIM_Base_SetConfig+0x9a>
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	4a2c      	ldr	r2, [pc, #176]	; (801227c <TIM_Base_SetConfig+0x118>)
 80121ca:	4293      	cmp	r3, r2
 80121cc:	d017      	beq.n	80121fe <TIM_Base_SetConfig+0x9a>
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	4a2b      	ldr	r2, [pc, #172]	; (8012280 <TIM_Base_SetConfig+0x11c>)
 80121d2:	4293      	cmp	r3, r2
 80121d4:	d013      	beq.n	80121fe <TIM_Base_SetConfig+0x9a>
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	4a2a      	ldr	r2, [pc, #168]	; (8012284 <TIM_Base_SetConfig+0x120>)
 80121da:	4293      	cmp	r3, r2
 80121dc:	d00f      	beq.n	80121fe <TIM_Base_SetConfig+0x9a>
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	4a29      	ldr	r2, [pc, #164]	; (8012288 <TIM_Base_SetConfig+0x124>)
 80121e2:	4293      	cmp	r3, r2
 80121e4:	d00b      	beq.n	80121fe <TIM_Base_SetConfig+0x9a>
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	4a28      	ldr	r2, [pc, #160]	; (801228c <TIM_Base_SetConfig+0x128>)
 80121ea:	4293      	cmp	r3, r2
 80121ec:	d007      	beq.n	80121fe <TIM_Base_SetConfig+0x9a>
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	4a27      	ldr	r2, [pc, #156]	; (8012290 <TIM_Base_SetConfig+0x12c>)
 80121f2:	4293      	cmp	r3, r2
 80121f4:	d003      	beq.n	80121fe <TIM_Base_SetConfig+0x9a>
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	4a26      	ldr	r2, [pc, #152]	; (8012294 <TIM_Base_SetConfig+0x130>)
 80121fa:	4293      	cmp	r3, r2
 80121fc:	d108      	bne.n	8012210 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012206:	683b      	ldr	r3, [r7, #0]
 8012208:	68db      	ldr	r3, [r3, #12]
 801220a:	68fa      	ldr	r2, [r7, #12]
 801220c:	4313      	orrs	r3, r2
 801220e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012216:	683b      	ldr	r3, [r7, #0]
 8012218:	695b      	ldr	r3, [r3, #20]
 801221a:	4313      	orrs	r3, r2
 801221c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	68fa      	ldr	r2, [r7, #12]
 8012222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012224:	683b      	ldr	r3, [r7, #0]
 8012226:	689a      	ldr	r2, [r3, #8]
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801222c:	683b      	ldr	r3, [r7, #0]
 801222e:	681a      	ldr	r2, [r3, #0]
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	4a10      	ldr	r2, [pc, #64]	; (8012278 <TIM_Base_SetConfig+0x114>)
 8012238:	4293      	cmp	r3, r2
 801223a:	d00f      	beq.n	801225c <TIM_Base_SetConfig+0xf8>
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	4a12      	ldr	r2, [pc, #72]	; (8012288 <TIM_Base_SetConfig+0x124>)
 8012240:	4293      	cmp	r3, r2
 8012242:	d00b      	beq.n	801225c <TIM_Base_SetConfig+0xf8>
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	4a11      	ldr	r2, [pc, #68]	; (801228c <TIM_Base_SetConfig+0x128>)
 8012248:	4293      	cmp	r3, r2
 801224a:	d007      	beq.n	801225c <TIM_Base_SetConfig+0xf8>
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	4a10      	ldr	r2, [pc, #64]	; (8012290 <TIM_Base_SetConfig+0x12c>)
 8012250:	4293      	cmp	r3, r2
 8012252:	d003      	beq.n	801225c <TIM_Base_SetConfig+0xf8>
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	4a0f      	ldr	r2, [pc, #60]	; (8012294 <TIM_Base_SetConfig+0x130>)
 8012258:	4293      	cmp	r3, r2
 801225a:	d103      	bne.n	8012264 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801225c:	683b      	ldr	r3, [r7, #0]
 801225e:	691a      	ldr	r2, [r3, #16]
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	2201      	movs	r2, #1
 8012268:	615a      	str	r2, [r3, #20]
}
 801226a:	bf00      	nop
 801226c:	3714      	adds	r7, #20
 801226e:	46bd      	mov	sp, r7
 8012270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012274:	4770      	bx	lr
 8012276:	bf00      	nop
 8012278:	40012c00 	.word	0x40012c00
 801227c:	40000400 	.word	0x40000400
 8012280:	40000800 	.word	0x40000800
 8012284:	40000c00 	.word	0x40000c00
 8012288:	40013400 	.word	0x40013400
 801228c:	40014000 	.word	0x40014000
 8012290:	40014400 	.word	0x40014400
 8012294:	40014800 	.word	0x40014800

08012298 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012298:	b480      	push	{r7}
 801229a:	b087      	sub	sp, #28
 801229c:	af00      	add	r7, sp, #0
 801229e:	6078      	str	r0, [r7, #4]
 80122a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	6a1b      	ldr	r3, [r3, #32]
 80122a6:	f023 0201 	bic.w	r2, r3, #1
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	6a1b      	ldr	r3, [r3, #32]
 80122b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	685b      	ldr	r3, [r3, #4]
 80122b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	699b      	ldr	r3, [r3, #24]
 80122be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80122c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80122ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	f023 0303 	bic.w	r3, r3, #3
 80122d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80122d4:	683b      	ldr	r3, [r7, #0]
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	68fa      	ldr	r2, [r7, #12]
 80122da:	4313      	orrs	r3, r2
 80122dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80122de:	697b      	ldr	r3, [r7, #20]
 80122e0:	f023 0302 	bic.w	r3, r3, #2
 80122e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80122e6:	683b      	ldr	r3, [r7, #0]
 80122e8:	689b      	ldr	r3, [r3, #8]
 80122ea:	697a      	ldr	r2, [r7, #20]
 80122ec:	4313      	orrs	r3, r2
 80122ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	4a2c      	ldr	r2, [pc, #176]	; (80123a4 <TIM_OC1_SetConfig+0x10c>)
 80122f4:	4293      	cmp	r3, r2
 80122f6:	d00f      	beq.n	8012318 <TIM_OC1_SetConfig+0x80>
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	4a2b      	ldr	r2, [pc, #172]	; (80123a8 <TIM_OC1_SetConfig+0x110>)
 80122fc:	4293      	cmp	r3, r2
 80122fe:	d00b      	beq.n	8012318 <TIM_OC1_SetConfig+0x80>
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	4a2a      	ldr	r2, [pc, #168]	; (80123ac <TIM_OC1_SetConfig+0x114>)
 8012304:	4293      	cmp	r3, r2
 8012306:	d007      	beq.n	8012318 <TIM_OC1_SetConfig+0x80>
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	4a29      	ldr	r2, [pc, #164]	; (80123b0 <TIM_OC1_SetConfig+0x118>)
 801230c:	4293      	cmp	r3, r2
 801230e:	d003      	beq.n	8012318 <TIM_OC1_SetConfig+0x80>
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	4a28      	ldr	r2, [pc, #160]	; (80123b4 <TIM_OC1_SetConfig+0x11c>)
 8012314:	4293      	cmp	r3, r2
 8012316:	d10c      	bne.n	8012332 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012318:	697b      	ldr	r3, [r7, #20]
 801231a:	f023 0308 	bic.w	r3, r3, #8
 801231e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012320:	683b      	ldr	r3, [r7, #0]
 8012322:	68db      	ldr	r3, [r3, #12]
 8012324:	697a      	ldr	r2, [r7, #20]
 8012326:	4313      	orrs	r3, r2
 8012328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801232a:	697b      	ldr	r3, [r7, #20]
 801232c:	f023 0304 	bic.w	r3, r3, #4
 8012330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	4a1b      	ldr	r2, [pc, #108]	; (80123a4 <TIM_OC1_SetConfig+0x10c>)
 8012336:	4293      	cmp	r3, r2
 8012338:	d00f      	beq.n	801235a <TIM_OC1_SetConfig+0xc2>
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	4a1a      	ldr	r2, [pc, #104]	; (80123a8 <TIM_OC1_SetConfig+0x110>)
 801233e:	4293      	cmp	r3, r2
 8012340:	d00b      	beq.n	801235a <TIM_OC1_SetConfig+0xc2>
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	4a19      	ldr	r2, [pc, #100]	; (80123ac <TIM_OC1_SetConfig+0x114>)
 8012346:	4293      	cmp	r3, r2
 8012348:	d007      	beq.n	801235a <TIM_OC1_SetConfig+0xc2>
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	4a18      	ldr	r2, [pc, #96]	; (80123b0 <TIM_OC1_SetConfig+0x118>)
 801234e:	4293      	cmp	r3, r2
 8012350:	d003      	beq.n	801235a <TIM_OC1_SetConfig+0xc2>
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	4a17      	ldr	r2, [pc, #92]	; (80123b4 <TIM_OC1_SetConfig+0x11c>)
 8012356:	4293      	cmp	r3, r2
 8012358:	d111      	bne.n	801237e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801235a:	693b      	ldr	r3, [r7, #16]
 801235c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8012362:	693b      	ldr	r3, [r7, #16]
 8012364:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801236a:	683b      	ldr	r3, [r7, #0]
 801236c:	695b      	ldr	r3, [r3, #20]
 801236e:	693a      	ldr	r2, [r7, #16]
 8012370:	4313      	orrs	r3, r2
 8012372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8012374:	683b      	ldr	r3, [r7, #0]
 8012376:	699b      	ldr	r3, [r3, #24]
 8012378:	693a      	ldr	r2, [r7, #16]
 801237a:	4313      	orrs	r3, r2
 801237c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	693a      	ldr	r2, [r7, #16]
 8012382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	68fa      	ldr	r2, [r7, #12]
 8012388:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801238a:	683b      	ldr	r3, [r7, #0]
 801238c:	685a      	ldr	r2, [r3, #4]
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	697a      	ldr	r2, [r7, #20]
 8012396:	621a      	str	r2, [r3, #32]
}
 8012398:	bf00      	nop
 801239a:	371c      	adds	r7, #28
 801239c:	46bd      	mov	sp, r7
 801239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a2:	4770      	bx	lr
 80123a4:	40012c00 	.word	0x40012c00
 80123a8:	40013400 	.word	0x40013400
 80123ac:	40014000 	.word	0x40014000
 80123b0:	40014400 	.word	0x40014400
 80123b4:	40014800 	.word	0x40014800

080123b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80123b8:	b480      	push	{r7}
 80123ba:	b087      	sub	sp, #28
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
 80123c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	6a1b      	ldr	r3, [r3, #32]
 80123c6:	f023 0210 	bic.w	r2, r3, #16
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	6a1b      	ldr	r3, [r3, #32]
 80123d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	685b      	ldr	r3, [r3, #4]
 80123d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	699b      	ldr	r3, [r3, #24]
 80123de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80123e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80123ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80123f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80123f4:	683b      	ldr	r3, [r7, #0]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	021b      	lsls	r3, r3, #8
 80123fa:	68fa      	ldr	r2, [r7, #12]
 80123fc:	4313      	orrs	r3, r2
 80123fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012400:	697b      	ldr	r3, [r7, #20]
 8012402:	f023 0320 	bic.w	r3, r3, #32
 8012406:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012408:	683b      	ldr	r3, [r7, #0]
 801240a:	689b      	ldr	r3, [r3, #8]
 801240c:	011b      	lsls	r3, r3, #4
 801240e:	697a      	ldr	r2, [r7, #20]
 8012410:	4313      	orrs	r3, r2
 8012412:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	4a28      	ldr	r2, [pc, #160]	; (80124b8 <TIM_OC2_SetConfig+0x100>)
 8012418:	4293      	cmp	r3, r2
 801241a:	d003      	beq.n	8012424 <TIM_OC2_SetConfig+0x6c>
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	4a27      	ldr	r2, [pc, #156]	; (80124bc <TIM_OC2_SetConfig+0x104>)
 8012420:	4293      	cmp	r3, r2
 8012422:	d10d      	bne.n	8012440 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012424:	697b      	ldr	r3, [r7, #20]
 8012426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801242a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801242c:	683b      	ldr	r3, [r7, #0]
 801242e:	68db      	ldr	r3, [r3, #12]
 8012430:	011b      	lsls	r3, r3, #4
 8012432:	697a      	ldr	r2, [r7, #20]
 8012434:	4313      	orrs	r3, r2
 8012436:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012438:	697b      	ldr	r3, [r7, #20]
 801243a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801243e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	4a1d      	ldr	r2, [pc, #116]	; (80124b8 <TIM_OC2_SetConfig+0x100>)
 8012444:	4293      	cmp	r3, r2
 8012446:	d00f      	beq.n	8012468 <TIM_OC2_SetConfig+0xb0>
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	4a1c      	ldr	r2, [pc, #112]	; (80124bc <TIM_OC2_SetConfig+0x104>)
 801244c:	4293      	cmp	r3, r2
 801244e:	d00b      	beq.n	8012468 <TIM_OC2_SetConfig+0xb0>
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	4a1b      	ldr	r2, [pc, #108]	; (80124c0 <TIM_OC2_SetConfig+0x108>)
 8012454:	4293      	cmp	r3, r2
 8012456:	d007      	beq.n	8012468 <TIM_OC2_SetConfig+0xb0>
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	4a1a      	ldr	r2, [pc, #104]	; (80124c4 <TIM_OC2_SetConfig+0x10c>)
 801245c:	4293      	cmp	r3, r2
 801245e:	d003      	beq.n	8012468 <TIM_OC2_SetConfig+0xb0>
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	4a19      	ldr	r2, [pc, #100]	; (80124c8 <TIM_OC2_SetConfig+0x110>)
 8012464:	4293      	cmp	r3, r2
 8012466:	d113      	bne.n	8012490 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8012468:	693b      	ldr	r3, [r7, #16]
 801246a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801246e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012470:	693b      	ldr	r3, [r7, #16]
 8012472:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012476:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8012478:	683b      	ldr	r3, [r7, #0]
 801247a:	695b      	ldr	r3, [r3, #20]
 801247c:	009b      	lsls	r3, r3, #2
 801247e:	693a      	ldr	r2, [r7, #16]
 8012480:	4313      	orrs	r3, r2
 8012482:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8012484:	683b      	ldr	r3, [r7, #0]
 8012486:	699b      	ldr	r3, [r3, #24]
 8012488:	009b      	lsls	r3, r3, #2
 801248a:	693a      	ldr	r2, [r7, #16]
 801248c:	4313      	orrs	r3, r2
 801248e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	693a      	ldr	r2, [r7, #16]
 8012494:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	68fa      	ldr	r2, [r7, #12]
 801249a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801249c:	683b      	ldr	r3, [r7, #0]
 801249e:	685a      	ldr	r2, [r3, #4]
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	697a      	ldr	r2, [r7, #20]
 80124a8:	621a      	str	r2, [r3, #32]
}
 80124aa:	bf00      	nop
 80124ac:	371c      	adds	r7, #28
 80124ae:	46bd      	mov	sp, r7
 80124b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b4:	4770      	bx	lr
 80124b6:	bf00      	nop
 80124b8:	40012c00 	.word	0x40012c00
 80124bc:	40013400 	.word	0x40013400
 80124c0:	40014000 	.word	0x40014000
 80124c4:	40014400 	.word	0x40014400
 80124c8:	40014800 	.word	0x40014800

080124cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80124cc:	b480      	push	{r7}
 80124ce:	b087      	sub	sp, #28
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
 80124d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	6a1b      	ldr	r3, [r3, #32]
 80124da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	6a1b      	ldr	r3, [r3, #32]
 80124e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	685b      	ldr	r3, [r3, #4]
 80124ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	69db      	ldr	r3, [r3, #28]
 80124f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80124fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80124fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	f023 0303 	bic.w	r3, r3, #3
 8012506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012508:	683b      	ldr	r3, [r7, #0]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	68fa      	ldr	r2, [r7, #12]
 801250e:	4313      	orrs	r3, r2
 8012510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012512:	697b      	ldr	r3, [r7, #20]
 8012514:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012518:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801251a:	683b      	ldr	r3, [r7, #0]
 801251c:	689b      	ldr	r3, [r3, #8]
 801251e:	021b      	lsls	r3, r3, #8
 8012520:	697a      	ldr	r2, [r7, #20]
 8012522:	4313      	orrs	r3, r2
 8012524:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	4a27      	ldr	r2, [pc, #156]	; (80125c8 <TIM_OC3_SetConfig+0xfc>)
 801252a:	4293      	cmp	r3, r2
 801252c:	d003      	beq.n	8012536 <TIM_OC3_SetConfig+0x6a>
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	4a26      	ldr	r2, [pc, #152]	; (80125cc <TIM_OC3_SetConfig+0x100>)
 8012532:	4293      	cmp	r3, r2
 8012534:	d10d      	bne.n	8012552 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8012536:	697b      	ldr	r3, [r7, #20]
 8012538:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801253c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801253e:	683b      	ldr	r3, [r7, #0]
 8012540:	68db      	ldr	r3, [r3, #12]
 8012542:	021b      	lsls	r3, r3, #8
 8012544:	697a      	ldr	r2, [r7, #20]
 8012546:	4313      	orrs	r3, r2
 8012548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801254a:	697b      	ldr	r3, [r7, #20]
 801254c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	4a1c      	ldr	r2, [pc, #112]	; (80125c8 <TIM_OC3_SetConfig+0xfc>)
 8012556:	4293      	cmp	r3, r2
 8012558:	d00f      	beq.n	801257a <TIM_OC3_SetConfig+0xae>
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	4a1b      	ldr	r2, [pc, #108]	; (80125cc <TIM_OC3_SetConfig+0x100>)
 801255e:	4293      	cmp	r3, r2
 8012560:	d00b      	beq.n	801257a <TIM_OC3_SetConfig+0xae>
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	4a1a      	ldr	r2, [pc, #104]	; (80125d0 <TIM_OC3_SetConfig+0x104>)
 8012566:	4293      	cmp	r3, r2
 8012568:	d007      	beq.n	801257a <TIM_OC3_SetConfig+0xae>
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	4a19      	ldr	r2, [pc, #100]	; (80125d4 <TIM_OC3_SetConfig+0x108>)
 801256e:	4293      	cmp	r3, r2
 8012570:	d003      	beq.n	801257a <TIM_OC3_SetConfig+0xae>
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	4a18      	ldr	r2, [pc, #96]	; (80125d8 <TIM_OC3_SetConfig+0x10c>)
 8012576:	4293      	cmp	r3, r2
 8012578:	d113      	bne.n	80125a2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801257a:	693b      	ldr	r3, [r7, #16]
 801257c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8012582:	693b      	ldr	r3, [r7, #16]
 8012584:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801258a:	683b      	ldr	r3, [r7, #0]
 801258c:	695b      	ldr	r3, [r3, #20]
 801258e:	011b      	lsls	r3, r3, #4
 8012590:	693a      	ldr	r2, [r7, #16]
 8012592:	4313      	orrs	r3, r2
 8012594:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8012596:	683b      	ldr	r3, [r7, #0]
 8012598:	699b      	ldr	r3, [r3, #24]
 801259a:	011b      	lsls	r3, r3, #4
 801259c:	693a      	ldr	r2, [r7, #16]
 801259e:	4313      	orrs	r3, r2
 80125a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	693a      	ldr	r2, [r7, #16]
 80125a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	68fa      	ldr	r2, [r7, #12]
 80125ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80125ae:	683b      	ldr	r3, [r7, #0]
 80125b0:	685a      	ldr	r2, [r3, #4]
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	697a      	ldr	r2, [r7, #20]
 80125ba:	621a      	str	r2, [r3, #32]
}
 80125bc:	bf00      	nop
 80125be:	371c      	adds	r7, #28
 80125c0:	46bd      	mov	sp, r7
 80125c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c6:	4770      	bx	lr
 80125c8:	40012c00 	.word	0x40012c00
 80125cc:	40013400 	.word	0x40013400
 80125d0:	40014000 	.word	0x40014000
 80125d4:	40014400 	.word	0x40014400
 80125d8:	40014800 	.word	0x40014800

080125dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80125dc:	b480      	push	{r7}
 80125de:	b087      	sub	sp, #28
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]
 80125e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	6a1b      	ldr	r3, [r3, #32]
 80125ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	6a1b      	ldr	r3, [r3, #32]
 80125f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	685b      	ldr	r3, [r3, #4]
 80125fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	69db      	ldr	r3, [r3, #28]
 8012602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801260a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801260e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012618:	683b      	ldr	r3, [r7, #0]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	021b      	lsls	r3, r3, #8
 801261e:	68fa      	ldr	r2, [r7, #12]
 8012620:	4313      	orrs	r3, r2
 8012622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012624:	693b      	ldr	r3, [r7, #16]
 8012626:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801262a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801262c:	683b      	ldr	r3, [r7, #0]
 801262e:	689b      	ldr	r3, [r3, #8]
 8012630:	031b      	lsls	r3, r3, #12
 8012632:	693a      	ldr	r2, [r7, #16]
 8012634:	4313      	orrs	r3, r2
 8012636:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	4a18      	ldr	r2, [pc, #96]	; (801269c <TIM_OC4_SetConfig+0xc0>)
 801263c:	4293      	cmp	r3, r2
 801263e:	d00f      	beq.n	8012660 <TIM_OC4_SetConfig+0x84>
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	4a17      	ldr	r2, [pc, #92]	; (80126a0 <TIM_OC4_SetConfig+0xc4>)
 8012644:	4293      	cmp	r3, r2
 8012646:	d00b      	beq.n	8012660 <TIM_OC4_SetConfig+0x84>
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	4a16      	ldr	r2, [pc, #88]	; (80126a4 <TIM_OC4_SetConfig+0xc8>)
 801264c:	4293      	cmp	r3, r2
 801264e:	d007      	beq.n	8012660 <TIM_OC4_SetConfig+0x84>
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	4a15      	ldr	r2, [pc, #84]	; (80126a8 <TIM_OC4_SetConfig+0xcc>)
 8012654:	4293      	cmp	r3, r2
 8012656:	d003      	beq.n	8012660 <TIM_OC4_SetConfig+0x84>
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	4a14      	ldr	r2, [pc, #80]	; (80126ac <TIM_OC4_SetConfig+0xd0>)
 801265c:	4293      	cmp	r3, r2
 801265e:	d109      	bne.n	8012674 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012660:	697b      	ldr	r3, [r7, #20]
 8012662:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012666:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012668:	683b      	ldr	r3, [r7, #0]
 801266a:	695b      	ldr	r3, [r3, #20]
 801266c:	019b      	lsls	r3, r3, #6
 801266e:	697a      	ldr	r2, [r7, #20]
 8012670:	4313      	orrs	r3, r2
 8012672:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	697a      	ldr	r2, [r7, #20]
 8012678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	68fa      	ldr	r2, [r7, #12]
 801267e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012680:	683b      	ldr	r3, [r7, #0]
 8012682:	685a      	ldr	r2, [r3, #4]
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	693a      	ldr	r2, [r7, #16]
 801268c:	621a      	str	r2, [r3, #32]
}
 801268e:	bf00      	nop
 8012690:	371c      	adds	r7, #28
 8012692:	46bd      	mov	sp, r7
 8012694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012698:	4770      	bx	lr
 801269a:	bf00      	nop
 801269c:	40012c00 	.word	0x40012c00
 80126a0:	40013400 	.word	0x40013400
 80126a4:	40014000 	.word	0x40014000
 80126a8:	40014400 	.word	0x40014400
 80126ac:	40014800 	.word	0x40014800

080126b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80126b0:	b480      	push	{r7}
 80126b2:	b087      	sub	sp, #28
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
 80126b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	6a1b      	ldr	r3, [r3, #32]
 80126be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	6a1b      	ldr	r3, [r3, #32]
 80126ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	685b      	ldr	r3, [r3, #4]
 80126d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80126d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80126de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80126e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80126e4:	683b      	ldr	r3, [r7, #0]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	68fa      	ldr	r2, [r7, #12]
 80126ea:	4313      	orrs	r3, r2
 80126ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80126ee:	693b      	ldr	r3, [r7, #16]
 80126f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80126f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80126f6:	683b      	ldr	r3, [r7, #0]
 80126f8:	689b      	ldr	r3, [r3, #8]
 80126fa:	041b      	lsls	r3, r3, #16
 80126fc:	693a      	ldr	r2, [r7, #16]
 80126fe:	4313      	orrs	r3, r2
 8012700:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	4a17      	ldr	r2, [pc, #92]	; (8012764 <TIM_OC5_SetConfig+0xb4>)
 8012706:	4293      	cmp	r3, r2
 8012708:	d00f      	beq.n	801272a <TIM_OC5_SetConfig+0x7a>
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	4a16      	ldr	r2, [pc, #88]	; (8012768 <TIM_OC5_SetConfig+0xb8>)
 801270e:	4293      	cmp	r3, r2
 8012710:	d00b      	beq.n	801272a <TIM_OC5_SetConfig+0x7a>
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	4a15      	ldr	r2, [pc, #84]	; (801276c <TIM_OC5_SetConfig+0xbc>)
 8012716:	4293      	cmp	r3, r2
 8012718:	d007      	beq.n	801272a <TIM_OC5_SetConfig+0x7a>
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	4a14      	ldr	r2, [pc, #80]	; (8012770 <TIM_OC5_SetConfig+0xc0>)
 801271e:	4293      	cmp	r3, r2
 8012720:	d003      	beq.n	801272a <TIM_OC5_SetConfig+0x7a>
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	4a13      	ldr	r2, [pc, #76]	; (8012774 <TIM_OC5_SetConfig+0xc4>)
 8012726:	4293      	cmp	r3, r2
 8012728:	d109      	bne.n	801273e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801272a:	697b      	ldr	r3, [r7, #20]
 801272c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012730:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8012732:	683b      	ldr	r3, [r7, #0]
 8012734:	695b      	ldr	r3, [r3, #20]
 8012736:	021b      	lsls	r3, r3, #8
 8012738:	697a      	ldr	r2, [r7, #20]
 801273a:	4313      	orrs	r3, r2
 801273c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	697a      	ldr	r2, [r7, #20]
 8012742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	68fa      	ldr	r2, [r7, #12]
 8012748:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801274a:	683b      	ldr	r3, [r7, #0]
 801274c:	685a      	ldr	r2, [r3, #4]
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	693a      	ldr	r2, [r7, #16]
 8012756:	621a      	str	r2, [r3, #32]
}
 8012758:	bf00      	nop
 801275a:	371c      	adds	r7, #28
 801275c:	46bd      	mov	sp, r7
 801275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012762:	4770      	bx	lr
 8012764:	40012c00 	.word	0x40012c00
 8012768:	40013400 	.word	0x40013400
 801276c:	40014000 	.word	0x40014000
 8012770:	40014400 	.word	0x40014400
 8012774:	40014800 	.word	0x40014800

08012778 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8012778:	b480      	push	{r7}
 801277a:	b087      	sub	sp, #28
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
 8012780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	6a1b      	ldr	r3, [r3, #32]
 8012786:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	6a1b      	ldr	r3, [r3, #32]
 8012792:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	685b      	ldr	r3, [r3, #4]
 8012798:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801279e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80127a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80127aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80127ac:	683b      	ldr	r3, [r7, #0]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	021b      	lsls	r3, r3, #8
 80127b2:	68fa      	ldr	r2, [r7, #12]
 80127b4:	4313      	orrs	r3, r2
 80127b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80127b8:	693b      	ldr	r3, [r7, #16]
 80127ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80127be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	689b      	ldr	r3, [r3, #8]
 80127c4:	051b      	lsls	r3, r3, #20
 80127c6:	693a      	ldr	r2, [r7, #16]
 80127c8:	4313      	orrs	r3, r2
 80127ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	4a18      	ldr	r2, [pc, #96]	; (8012830 <TIM_OC6_SetConfig+0xb8>)
 80127d0:	4293      	cmp	r3, r2
 80127d2:	d00f      	beq.n	80127f4 <TIM_OC6_SetConfig+0x7c>
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	4a17      	ldr	r2, [pc, #92]	; (8012834 <TIM_OC6_SetConfig+0xbc>)
 80127d8:	4293      	cmp	r3, r2
 80127da:	d00b      	beq.n	80127f4 <TIM_OC6_SetConfig+0x7c>
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	4a16      	ldr	r2, [pc, #88]	; (8012838 <TIM_OC6_SetConfig+0xc0>)
 80127e0:	4293      	cmp	r3, r2
 80127e2:	d007      	beq.n	80127f4 <TIM_OC6_SetConfig+0x7c>
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	4a15      	ldr	r2, [pc, #84]	; (801283c <TIM_OC6_SetConfig+0xc4>)
 80127e8:	4293      	cmp	r3, r2
 80127ea:	d003      	beq.n	80127f4 <TIM_OC6_SetConfig+0x7c>
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	4a14      	ldr	r2, [pc, #80]	; (8012840 <TIM_OC6_SetConfig+0xc8>)
 80127f0:	4293      	cmp	r3, r2
 80127f2:	d109      	bne.n	8012808 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80127f4:	697b      	ldr	r3, [r7, #20]
 80127f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80127fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80127fc:	683b      	ldr	r3, [r7, #0]
 80127fe:	695b      	ldr	r3, [r3, #20]
 8012800:	029b      	lsls	r3, r3, #10
 8012802:	697a      	ldr	r2, [r7, #20]
 8012804:	4313      	orrs	r3, r2
 8012806:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	697a      	ldr	r2, [r7, #20]
 801280c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	68fa      	ldr	r2, [r7, #12]
 8012812:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8012814:	683b      	ldr	r3, [r7, #0]
 8012816:	685a      	ldr	r2, [r3, #4]
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	693a      	ldr	r2, [r7, #16]
 8012820:	621a      	str	r2, [r3, #32]
}
 8012822:	bf00      	nop
 8012824:	371c      	adds	r7, #28
 8012826:	46bd      	mov	sp, r7
 8012828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801282c:	4770      	bx	lr
 801282e:	bf00      	nop
 8012830:	40012c00 	.word	0x40012c00
 8012834:	40013400 	.word	0x40013400
 8012838:	40014000 	.word	0x40014000
 801283c:	40014400 	.word	0x40014400
 8012840:	40014800 	.word	0x40014800

08012844 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8012844:	b480      	push	{r7}
 8012846:	b087      	sub	sp, #28
 8012848:	af00      	add	r7, sp, #0
 801284a:	60f8      	str	r0, [r7, #12]
 801284c:	60b9      	str	r1, [r7, #8]
 801284e:	607a      	str	r2, [r7, #4]
 8012850:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	6a1b      	ldr	r3, [r3, #32]
 8012856:	f023 0201 	bic.w	r2, r3, #1
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	699b      	ldr	r3, [r3, #24]
 8012862:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	6a1b      	ldr	r3, [r3, #32]
 8012868:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	4a26      	ldr	r2, [pc, #152]	; (8012908 <TIM_TI1_SetConfig+0xc4>)
 801286e:	4293      	cmp	r3, r2
 8012870:	d017      	beq.n	80128a2 <TIM_TI1_SetConfig+0x5e>
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012878:	d013      	beq.n	80128a2 <TIM_TI1_SetConfig+0x5e>
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	4a23      	ldr	r2, [pc, #140]	; (801290c <TIM_TI1_SetConfig+0xc8>)
 801287e:	4293      	cmp	r3, r2
 8012880:	d00f      	beq.n	80128a2 <TIM_TI1_SetConfig+0x5e>
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	4a22      	ldr	r2, [pc, #136]	; (8012910 <TIM_TI1_SetConfig+0xcc>)
 8012886:	4293      	cmp	r3, r2
 8012888:	d00b      	beq.n	80128a2 <TIM_TI1_SetConfig+0x5e>
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	4a21      	ldr	r2, [pc, #132]	; (8012914 <TIM_TI1_SetConfig+0xd0>)
 801288e:	4293      	cmp	r3, r2
 8012890:	d007      	beq.n	80128a2 <TIM_TI1_SetConfig+0x5e>
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	4a20      	ldr	r2, [pc, #128]	; (8012918 <TIM_TI1_SetConfig+0xd4>)
 8012896:	4293      	cmp	r3, r2
 8012898:	d003      	beq.n	80128a2 <TIM_TI1_SetConfig+0x5e>
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	4a1f      	ldr	r2, [pc, #124]	; (801291c <TIM_TI1_SetConfig+0xd8>)
 801289e:	4293      	cmp	r3, r2
 80128a0:	d101      	bne.n	80128a6 <TIM_TI1_SetConfig+0x62>
 80128a2:	2301      	movs	r3, #1
 80128a4:	e000      	b.n	80128a8 <TIM_TI1_SetConfig+0x64>
 80128a6:	2300      	movs	r3, #0
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d008      	beq.n	80128be <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80128ac:	697b      	ldr	r3, [r7, #20]
 80128ae:	f023 0303 	bic.w	r3, r3, #3
 80128b2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80128b4:	697a      	ldr	r2, [r7, #20]
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	4313      	orrs	r3, r2
 80128ba:	617b      	str	r3, [r7, #20]
 80128bc:	e003      	b.n	80128c6 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80128be:	697b      	ldr	r3, [r7, #20]
 80128c0:	f043 0301 	orr.w	r3, r3, #1
 80128c4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80128c6:	697b      	ldr	r3, [r7, #20]
 80128c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80128cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80128ce:	683b      	ldr	r3, [r7, #0]
 80128d0:	011b      	lsls	r3, r3, #4
 80128d2:	b2db      	uxtb	r3, r3
 80128d4:	697a      	ldr	r2, [r7, #20]
 80128d6:	4313      	orrs	r3, r2
 80128d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80128da:	693b      	ldr	r3, [r7, #16]
 80128dc:	f023 030a 	bic.w	r3, r3, #10
 80128e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80128e2:	68bb      	ldr	r3, [r7, #8]
 80128e4:	f003 030a 	and.w	r3, r3, #10
 80128e8:	693a      	ldr	r2, [r7, #16]
 80128ea:	4313      	orrs	r3, r2
 80128ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	697a      	ldr	r2, [r7, #20]
 80128f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	693a      	ldr	r2, [r7, #16]
 80128f8:	621a      	str	r2, [r3, #32]
}
 80128fa:	bf00      	nop
 80128fc:	371c      	adds	r7, #28
 80128fe:	46bd      	mov	sp, r7
 8012900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012904:	4770      	bx	lr
 8012906:	bf00      	nop
 8012908:	40012c00 	.word	0x40012c00
 801290c:	40000400 	.word	0x40000400
 8012910:	40000800 	.word	0x40000800
 8012914:	40000c00 	.word	0x40000c00
 8012918:	40013400 	.word	0x40013400
 801291c:	40014000 	.word	0x40014000

08012920 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012920:	b480      	push	{r7}
 8012922:	b087      	sub	sp, #28
 8012924:	af00      	add	r7, sp, #0
 8012926:	60f8      	str	r0, [r7, #12]
 8012928:	60b9      	str	r1, [r7, #8]
 801292a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	6a1b      	ldr	r3, [r3, #32]
 8012930:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	6a1b      	ldr	r3, [r3, #32]
 8012936:	f023 0201 	bic.w	r2, r3, #1
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	699b      	ldr	r3, [r3, #24]
 8012942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012944:	693b      	ldr	r3, [r7, #16]
 8012946:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801294a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	011b      	lsls	r3, r3, #4
 8012950:	693a      	ldr	r2, [r7, #16]
 8012952:	4313      	orrs	r3, r2
 8012954:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012956:	697b      	ldr	r3, [r7, #20]
 8012958:	f023 030a 	bic.w	r3, r3, #10
 801295c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801295e:	697a      	ldr	r2, [r7, #20]
 8012960:	68bb      	ldr	r3, [r7, #8]
 8012962:	4313      	orrs	r3, r2
 8012964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	693a      	ldr	r2, [r7, #16]
 801296a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	697a      	ldr	r2, [r7, #20]
 8012970:	621a      	str	r2, [r3, #32]
}
 8012972:	bf00      	nop
 8012974:	371c      	adds	r7, #28
 8012976:	46bd      	mov	sp, r7
 8012978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297c:	4770      	bx	lr

0801297e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801297e:	b480      	push	{r7}
 8012980:	b087      	sub	sp, #28
 8012982:	af00      	add	r7, sp, #0
 8012984:	60f8      	str	r0, [r7, #12]
 8012986:	60b9      	str	r1, [r7, #8]
 8012988:	607a      	str	r2, [r7, #4]
 801298a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	6a1b      	ldr	r3, [r3, #32]
 8012990:	f023 0210 	bic.w	r2, r3, #16
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	699b      	ldr	r3, [r3, #24]
 801299c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	6a1b      	ldr	r3, [r3, #32]
 80129a2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80129a4:	697b      	ldr	r3, [r7, #20]
 80129a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80129aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	021b      	lsls	r3, r3, #8
 80129b0:	697a      	ldr	r2, [r7, #20]
 80129b2:	4313      	orrs	r3, r2
 80129b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80129b6:	697b      	ldr	r3, [r7, #20]
 80129b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80129bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80129be:	683b      	ldr	r3, [r7, #0]
 80129c0:	031b      	lsls	r3, r3, #12
 80129c2:	b29b      	uxth	r3, r3
 80129c4:	697a      	ldr	r2, [r7, #20]
 80129c6:	4313      	orrs	r3, r2
 80129c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80129ca:	693b      	ldr	r3, [r7, #16]
 80129cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80129d0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80129d2:	68bb      	ldr	r3, [r7, #8]
 80129d4:	011b      	lsls	r3, r3, #4
 80129d6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80129da:	693a      	ldr	r2, [r7, #16]
 80129dc:	4313      	orrs	r3, r2
 80129de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	697a      	ldr	r2, [r7, #20]
 80129e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	693a      	ldr	r2, [r7, #16]
 80129ea:	621a      	str	r2, [r3, #32]
}
 80129ec:	bf00      	nop
 80129ee:	371c      	adds	r7, #28
 80129f0:	46bd      	mov	sp, r7
 80129f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f6:	4770      	bx	lr

080129f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80129f8:	b480      	push	{r7}
 80129fa:	b087      	sub	sp, #28
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	60f8      	str	r0, [r7, #12]
 8012a00:	60b9      	str	r1, [r7, #8]
 8012a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	6a1b      	ldr	r3, [r3, #32]
 8012a08:	f023 0210 	bic.w	r2, r3, #16
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	699b      	ldr	r3, [r3, #24]
 8012a14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	6a1b      	ldr	r3, [r3, #32]
 8012a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012a1c:	697b      	ldr	r3, [r7, #20]
 8012a1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012a22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	031b      	lsls	r3, r3, #12
 8012a28:	697a      	ldr	r2, [r7, #20]
 8012a2a:	4313      	orrs	r3, r2
 8012a2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012a2e:	693b      	ldr	r3, [r7, #16]
 8012a30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8012a34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8012a36:	68bb      	ldr	r3, [r7, #8]
 8012a38:	011b      	lsls	r3, r3, #4
 8012a3a:	693a      	ldr	r2, [r7, #16]
 8012a3c:	4313      	orrs	r3, r2
 8012a3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	697a      	ldr	r2, [r7, #20]
 8012a44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	693a      	ldr	r2, [r7, #16]
 8012a4a:	621a      	str	r2, [r3, #32]
}
 8012a4c:	bf00      	nop
 8012a4e:	371c      	adds	r7, #28
 8012a50:	46bd      	mov	sp, r7
 8012a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a56:	4770      	bx	lr

08012a58 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8012a58:	b480      	push	{r7}
 8012a5a:	b087      	sub	sp, #28
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	60f8      	str	r0, [r7, #12]
 8012a60:	60b9      	str	r1, [r7, #8]
 8012a62:	607a      	str	r2, [r7, #4]
 8012a64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	6a1b      	ldr	r3, [r3, #32]
 8012a6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	69db      	ldr	r3, [r3, #28]
 8012a76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	6a1b      	ldr	r3, [r3, #32]
 8012a7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8012a7e:	697b      	ldr	r3, [r7, #20]
 8012a80:	f023 0303 	bic.w	r3, r3, #3
 8012a84:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8012a86:	697a      	ldr	r2, [r7, #20]
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	4313      	orrs	r3, r2
 8012a8c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8012a8e:	697b      	ldr	r3, [r7, #20]
 8012a90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012a94:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8012a96:	683b      	ldr	r3, [r7, #0]
 8012a98:	011b      	lsls	r3, r3, #4
 8012a9a:	b2db      	uxtb	r3, r3
 8012a9c:	697a      	ldr	r2, [r7, #20]
 8012a9e:	4313      	orrs	r3, r2
 8012aa0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8012aa2:	693b      	ldr	r3, [r7, #16]
 8012aa4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8012aa8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8012aaa:	68bb      	ldr	r3, [r7, #8]
 8012aac:	021b      	lsls	r3, r3, #8
 8012aae:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8012ab2:	693a      	ldr	r2, [r7, #16]
 8012ab4:	4313      	orrs	r3, r2
 8012ab6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	697a      	ldr	r2, [r7, #20]
 8012abc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	693a      	ldr	r2, [r7, #16]
 8012ac2:	621a      	str	r2, [r3, #32]
}
 8012ac4:	bf00      	nop
 8012ac6:	371c      	adds	r7, #28
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ace:	4770      	bx	lr

08012ad0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8012ad0:	b480      	push	{r7}
 8012ad2:	b087      	sub	sp, #28
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	60f8      	str	r0, [r7, #12]
 8012ad8:	60b9      	str	r1, [r7, #8]
 8012ada:	607a      	str	r2, [r7, #4]
 8012adc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	6a1b      	ldr	r3, [r3, #32]
 8012ae2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	69db      	ldr	r3, [r3, #28]
 8012aee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	6a1b      	ldr	r3, [r3, #32]
 8012af4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8012af6:	697b      	ldr	r3, [r7, #20]
 8012af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012afc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	021b      	lsls	r3, r3, #8
 8012b02:	697a      	ldr	r2, [r7, #20]
 8012b04:	4313      	orrs	r3, r2
 8012b06:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8012b08:	697b      	ldr	r3, [r7, #20]
 8012b0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012b0e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8012b10:	683b      	ldr	r3, [r7, #0]
 8012b12:	031b      	lsls	r3, r3, #12
 8012b14:	b29b      	uxth	r3, r3
 8012b16:	697a      	ldr	r2, [r7, #20]
 8012b18:	4313      	orrs	r3, r2
 8012b1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8012b1c:	693b      	ldr	r3, [r7, #16]
 8012b1e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8012b22:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8012b24:	68bb      	ldr	r3, [r7, #8]
 8012b26:	031b      	lsls	r3, r3, #12
 8012b28:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8012b2c:	693a      	ldr	r2, [r7, #16]
 8012b2e:	4313      	orrs	r3, r2
 8012b30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	697a      	ldr	r2, [r7, #20]
 8012b36:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	693a      	ldr	r2, [r7, #16]
 8012b3c:	621a      	str	r2, [r3, #32]
}
 8012b3e:	bf00      	nop
 8012b40:	371c      	adds	r7, #28
 8012b42:	46bd      	mov	sp, r7
 8012b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b48:	4770      	bx	lr

08012b4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8012b4a:	b480      	push	{r7}
 8012b4c:	b085      	sub	sp, #20
 8012b4e:	af00      	add	r7, sp, #0
 8012b50:	6078      	str	r0, [r7, #4]
 8012b52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	689b      	ldr	r3, [r3, #8]
 8012b58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8012b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012b64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012b66:	683a      	ldr	r2, [r7, #0]
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	4313      	orrs	r3, r2
 8012b6c:	f043 0307 	orr.w	r3, r3, #7
 8012b70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	68fa      	ldr	r2, [r7, #12]
 8012b76:	609a      	str	r2, [r3, #8]
}
 8012b78:	bf00      	nop
 8012b7a:	3714      	adds	r7, #20
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b82:	4770      	bx	lr

08012b84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8012b84:	b480      	push	{r7}
 8012b86:	b087      	sub	sp, #28
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	60f8      	str	r0, [r7, #12]
 8012b8c:	60b9      	str	r1, [r7, #8]
 8012b8e:	607a      	str	r2, [r7, #4]
 8012b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	689b      	ldr	r3, [r3, #8]
 8012b96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012b98:	697b      	ldr	r3, [r7, #20]
 8012b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012b9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012ba0:	683b      	ldr	r3, [r7, #0]
 8012ba2:	021a      	lsls	r2, r3, #8
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	431a      	orrs	r2, r3
 8012ba8:	68bb      	ldr	r3, [r7, #8]
 8012baa:	4313      	orrs	r3, r2
 8012bac:	697a      	ldr	r2, [r7, #20]
 8012bae:	4313      	orrs	r3, r2
 8012bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	697a      	ldr	r2, [r7, #20]
 8012bb6:	609a      	str	r2, [r3, #8]
}
 8012bb8:	bf00      	nop
 8012bba:	371c      	adds	r7, #28
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc2:	4770      	bx	lr

08012bc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8012bc4:	b480      	push	{r7}
 8012bc6:	b087      	sub	sp, #28
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	60f8      	str	r0, [r7, #12]
 8012bcc:	60b9      	str	r1, [r7, #8]
 8012bce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8012bd0:	68bb      	ldr	r3, [r7, #8]
 8012bd2:	f003 031f 	and.w	r3, r3, #31
 8012bd6:	2201      	movs	r2, #1
 8012bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8012bdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	6a1a      	ldr	r2, [r3, #32]
 8012be2:	697b      	ldr	r3, [r7, #20]
 8012be4:	43db      	mvns	r3, r3
 8012be6:	401a      	ands	r2, r3
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	6a1a      	ldr	r2, [r3, #32]
 8012bf0:	68bb      	ldr	r3, [r7, #8]
 8012bf2:	f003 031f 	and.w	r3, r3, #31
 8012bf6:	6879      	ldr	r1, [r7, #4]
 8012bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8012bfc:	431a      	orrs	r2, r3
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	621a      	str	r2, [r3, #32]
}
 8012c02:	bf00      	nop
 8012c04:	371c      	adds	r7, #28
 8012c06:	46bd      	mov	sp, r7
 8012c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0c:	4770      	bx	lr
	...

08012c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012c10:	b480      	push	{r7}
 8012c12:	b085      	sub	sp, #20
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
 8012c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012c20:	2b01      	cmp	r3, #1
 8012c22:	d101      	bne.n	8012c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012c24:	2302      	movs	r3, #2
 8012c26:	e068      	b.n	8012cfa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	2201      	movs	r2, #1
 8012c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	2202      	movs	r2, #2
 8012c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	685b      	ldr	r3, [r3, #4]
 8012c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	689b      	ldr	r3, [r3, #8]
 8012c46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	4a2e      	ldr	r2, [pc, #184]	; (8012d08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8012c4e:	4293      	cmp	r3, r2
 8012c50:	d004      	beq.n	8012c5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	4a2d      	ldr	r2, [pc, #180]	; (8012d0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8012c58:	4293      	cmp	r3, r2
 8012c5a:	d108      	bne.n	8012c6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8012c62:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012c64:	683b      	ldr	r3, [r7, #0]
 8012c66:	685b      	ldr	r3, [r3, #4]
 8012c68:	68fa      	ldr	r2, [r7, #12]
 8012c6a:	4313      	orrs	r3, r2
 8012c6c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012c74:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012c76:	683b      	ldr	r3, [r7, #0]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	68fa      	ldr	r2, [r7, #12]
 8012c7c:	4313      	orrs	r3, r2
 8012c7e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	68fa      	ldr	r2, [r7, #12]
 8012c86:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	4a1e      	ldr	r2, [pc, #120]	; (8012d08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8012c8e:	4293      	cmp	r3, r2
 8012c90:	d01d      	beq.n	8012cce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012c9a:	d018      	beq.n	8012cce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	4a1b      	ldr	r2, [pc, #108]	; (8012d10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8012ca2:	4293      	cmp	r3, r2
 8012ca4:	d013      	beq.n	8012cce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	4a1a      	ldr	r2, [pc, #104]	; (8012d14 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8012cac:	4293      	cmp	r3, r2
 8012cae:	d00e      	beq.n	8012cce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	4a18      	ldr	r2, [pc, #96]	; (8012d18 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8012cb6:	4293      	cmp	r3, r2
 8012cb8:	d009      	beq.n	8012cce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	4a13      	ldr	r2, [pc, #76]	; (8012d0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8012cc0:	4293      	cmp	r3, r2
 8012cc2:	d004      	beq.n	8012cce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	4a14      	ldr	r2, [pc, #80]	; (8012d1c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8012cca:	4293      	cmp	r3, r2
 8012ccc:	d10c      	bne.n	8012ce8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012cce:	68bb      	ldr	r3, [r7, #8]
 8012cd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012cd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012cd6:	683b      	ldr	r3, [r7, #0]
 8012cd8:	689b      	ldr	r3, [r3, #8]
 8012cda:	68ba      	ldr	r2, [r7, #8]
 8012cdc:	4313      	orrs	r3, r2
 8012cde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	68ba      	ldr	r2, [r7, #8]
 8012ce6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	2201      	movs	r2, #1
 8012cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012cf8:	2300      	movs	r3, #0
}
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	3714      	adds	r7, #20
 8012cfe:	46bd      	mov	sp, r7
 8012d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d04:	4770      	bx	lr
 8012d06:	bf00      	nop
 8012d08:	40012c00 	.word	0x40012c00
 8012d0c:	40013400 	.word	0x40013400
 8012d10:	40000400 	.word	0x40000400
 8012d14:	40000800 	.word	0x40000800
 8012d18:	40000c00 	.word	0x40000c00
 8012d1c:	40014000 	.word	0x40014000

08012d20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8012d20:	b480      	push	{r7}
 8012d22:	b085      	sub	sp, #20
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
 8012d28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012d34:	2b01      	cmp	r3, #1
 8012d36:	d101      	bne.n	8012d3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8012d38:	2302      	movs	r3, #2
 8012d3a:	e087      	b.n	8012e4c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	2201      	movs	r2, #1
 8012d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012d4a:	683b      	ldr	r3, [r7, #0]
 8012d4c:	68db      	ldr	r3, [r3, #12]
 8012d4e:	4313      	orrs	r3, r2
 8012d50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012d58:	683b      	ldr	r3, [r7, #0]
 8012d5a:	689b      	ldr	r3, [r3, #8]
 8012d5c:	4313      	orrs	r3, r2
 8012d5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8012d66:	683b      	ldr	r3, [r7, #0]
 8012d68:	685b      	ldr	r3, [r3, #4]
 8012d6a:	4313      	orrs	r3, r2
 8012d6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8012d74:	683b      	ldr	r3, [r7, #0]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	4313      	orrs	r3, r2
 8012d7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012d82:	683b      	ldr	r3, [r7, #0]
 8012d84:	691b      	ldr	r3, [r3, #16]
 8012d86:	4313      	orrs	r3, r2
 8012d88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8012d90:	683b      	ldr	r3, [r7, #0]
 8012d92:	695b      	ldr	r3, [r3, #20]
 8012d94:	4313      	orrs	r3, r2
 8012d96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8012d9e:	683b      	ldr	r3, [r7, #0]
 8012da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012da2:	4313      	orrs	r3, r2
 8012da4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8012dac:	683b      	ldr	r3, [r7, #0]
 8012dae:	699b      	ldr	r3, [r3, #24]
 8012db0:	041b      	lsls	r3, r3, #16
 8012db2:	4313      	orrs	r3, r2
 8012db4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	4a27      	ldr	r2, [pc, #156]	; (8012e58 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8012dbc:	4293      	cmp	r3, r2
 8012dbe:	d004      	beq.n	8012dca <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	4a25      	ldr	r2, [pc, #148]	; (8012e5c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8012dc6:	4293      	cmp	r3, r2
 8012dc8:	d106      	bne.n	8012dd8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8012dd0:	683b      	ldr	r3, [r7, #0]
 8012dd2:	69db      	ldr	r3, [r3, #28]
 8012dd4:	4313      	orrs	r3, r2
 8012dd6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	4a1e      	ldr	r2, [pc, #120]	; (8012e58 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8012dde:	4293      	cmp	r3, r2
 8012de0:	d004      	beq.n	8012dec <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	4a1d      	ldr	r2, [pc, #116]	; (8012e5c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8012de8:	4293      	cmp	r3, r2
 8012dea:	d126      	bne.n	8012e3a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8012df2:	683b      	ldr	r3, [r7, #0]
 8012df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012df6:	051b      	lsls	r3, r3, #20
 8012df8:	4313      	orrs	r3, r2
 8012dfa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8012e02:	683b      	ldr	r3, [r7, #0]
 8012e04:	6a1b      	ldr	r3, [r3, #32]
 8012e06:	4313      	orrs	r3, r2
 8012e08:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8012e10:	683b      	ldr	r3, [r7, #0]
 8012e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e14:	4313      	orrs	r3, r2
 8012e16:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	4a0e      	ldr	r2, [pc, #56]	; (8012e58 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8012e1e:	4293      	cmp	r3, r2
 8012e20:	d004      	beq.n	8012e2c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	4a0d      	ldr	r2, [pc, #52]	; (8012e5c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8012e28:	4293      	cmp	r3, r2
 8012e2a:	d106      	bne.n	8012e3a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8012e32:	683b      	ldr	r3, [r7, #0]
 8012e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e36:	4313      	orrs	r3, r2
 8012e38:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	68fa      	ldr	r2, [r7, #12]
 8012e40:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	2200      	movs	r2, #0
 8012e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012e4a:	2300      	movs	r3, #0
}
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	3714      	adds	r7, #20
 8012e50:	46bd      	mov	sp, r7
 8012e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e56:	4770      	bx	lr
 8012e58:	40012c00 	.word	0x40012c00
 8012e5c:	40013400 	.word	0x40013400

08012e60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012e60:	b480      	push	{r7}
 8012e62:	b083      	sub	sp, #12
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012e68:	bf00      	nop
 8012e6a:	370c      	adds	r7, #12
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e72:	4770      	bx	lr

08012e74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012e74:	b480      	push	{r7}
 8012e76:	b083      	sub	sp, #12
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012e7c:	bf00      	nop
 8012e7e:	370c      	adds	r7, #12
 8012e80:	46bd      	mov	sp, r7
 8012e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e86:	4770      	bx	lr

08012e88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012e88:	b480      	push	{r7}
 8012e8a:	b083      	sub	sp, #12
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012e90:	bf00      	nop
 8012e92:	370c      	adds	r7, #12
 8012e94:	46bd      	mov	sp, r7
 8012e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9a:	4770      	bx	lr

08012e9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012e9c:	b580      	push	{r7, lr}
 8012e9e:	b082      	sub	sp, #8
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d101      	bne.n	8012eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012eaa:	2301      	movs	r3, #1
 8012eac:	e042      	b.n	8012f34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d106      	bne.n	8012ec6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	2200      	movs	r2, #0
 8012ebc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012ec0:	6878      	ldr	r0, [r7, #4]
 8012ec2:	f7f7 fa01 	bl	800a2c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	2224      	movs	r2, #36	; 0x24
 8012eca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	681a      	ldr	r2, [r3, #0]
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	f022 0201 	bic.w	r2, r2, #1
 8012edc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012ede:	6878      	ldr	r0, [r7, #4]
 8012ee0:	f000 fc4a 	bl	8013778 <UART_SetConfig>
 8012ee4:	4603      	mov	r3, r0
 8012ee6:	2b01      	cmp	r3, #1
 8012ee8:	d101      	bne.n	8012eee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8012eea:	2301      	movs	r3, #1
 8012eec:	e022      	b.n	8012f34 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d002      	beq.n	8012efc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8012ef6:	6878      	ldr	r0, [r7, #4]
 8012ef8:	f000 ff3e 	bl	8013d78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	685a      	ldr	r2, [r3, #4]
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012f0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	689a      	ldr	r2, [r3, #8]
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012f1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	681a      	ldr	r2, [r3, #0]
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	f042 0201 	orr.w	r2, r2, #1
 8012f2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012f2c:	6878      	ldr	r0, [r7, #4]
 8012f2e:	f000 ffc5 	bl	8013ebc <UART_CheckIdleState>
 8012f32:	4603      	mov	r3, r0
}
 8012f34:	4618      	mov	r0, r3
 8012f36:	3708      	adds	r7, #8
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	bd80      	pop	{r7, pc}

08012f3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	b08a      	sub	sp, #40	; 0x28
 8012f40:	af02      	add	r7, sp, #8
 8012f42:	60f8      	str	r0, [r7, #12]
 8012f44:	60b9      	str	r1, [r7, #8]
 8012f46:	603b      	str	r3, [r7, #0]
 8012f48:	4613      	mov	r3, r2
 8012f4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012f52:	2b20      	cmp	r3, #32
 8012f54:	d17b      	bne.n	801304e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8012f56:	68bb      	ldr	r3, [r7, #8]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d002      	beq.n	8012f62 <HAL_UART_Transmit+0x26>
 8012f5c:	88fb      	ldrh	r3, [r7, #6]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d101      	bne.n	8012f66 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8012f62:	2301      	movs	r3, #1
 8012f64:	e074      	b.n	8013050 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	2200      	movs	r2, #0
 8012f6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	2221      	movs	r2, #33	; 0x21
 8012f72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012f76:	f7f8 f82b 	bl	800afd0 <HAL_GetTick>
 8012f7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	88fa      	ldrh	r2, [r7, #6]
 8012f80:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	88fa      	ldrh	r2, [r7, #6]
 8012f88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	689b      	ldr	r3, [r3, #8]
 8012f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012f94:	d108      	bne.n	8012fa8 <HAL_UART_Transmit+0x6c>
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	691b      	ldr	r3, [r3, #16]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d104      	bne.n	8012fa8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8012fa2:	68bb      	ldr	r3, [r7, #8]
 8012fa4:	61bb      	str	r3, [r7, #24]
 8012fa6:	e003      	b.n	8012fb0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8012fa8:	68bb      	ldr	r3, [r7, #8]
 8012faa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012fac:	2300      	movs	r3, #0
 8012fae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8012fb0:	e030      	b.n	8013014 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012fb2:	683b      	ldr	r3, [r7, #0]
 8012fb4:	9300      	str	r3, [sp, #0]
 8012fb6:	697b      	ldr	r3, [r7, #20]
 8012fb8:	2200      	movs	r2, #0
 8012fba:	2180      	movs	r1, #128	; 0x80
 8012fbc:	68f8      	ldr	r0, [r7, #12]
 8012fbe:	f001 f827 	bl	8014010 <UART_WaitOnFlagUntilTimeout>
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d005      	beq.n	8012fd4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	2220      	movs	r2, #32
 8012fcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8012fd0:	2303      	movs	r3, #3
 8012fd2:	e03d      	b.n	8013050 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8012fd4:	69fb      	ldr	r3, [r7, #28]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d10b      	bne.n	8012ff2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012fda:	69bb      	ldr	r3, [r7, #24]
 8012fdc:	881b      	ldrh	r3, [r3, #0]
 8012fde:	461a      	mov	r2, r3
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012fe8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8012fea:	69bb      	ldr	r3, [r7, #24]
 8012fec:	3302      	adds	r3, #2
 8012fee:	61bb      	str	r3, [r7, #24]
 8012ff0:	e007      	b.n	8013002 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012ff2:	69fb      	ldr	r3, [r7, #28]
 8012ff4:	781a      	ldrb	r2, [r3, #0]
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8012ffc:	69fb      	ldr	r3, [r7, #28]
 8012ffe:	3301      	adds	r3, #1
 8013000:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013008:	b29b      	uxth	r3, r3
 801300a:	3b01      	subs	r3, #1
 801300c:	b29a      	uxth	r2, r3
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801301a:	b29b      	uxth	r3, r3
 801301c:	2b00      	cmp	r3, #0
 801301e:	d1c8      	bne.n	8012fb2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013020:	683b      	ldr	r3, [r7, #0]
 8013022:	9300      	str	r3, [sp, #0]
 8013024:	697b      	ldr	r3, [r7, #20]
 8013026:	2200      	movs	r2, #0
 8013028:	2140      	movs	r1, #64	; 0x40
 801302a:	68f8      	ldr	r0, [r7, #12]
 801302c:	f000 fff0 	bl	8014010 <UART_WaitOnFlagUntilTimeout>
 8013030:	4603      	mov	r3, r0
 8013032:	2b00      	cmp	r3, #0
 8013034:	d005      	beq.n	8013042 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	2220      	movs	r2, #32
 801303a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801303e:	2303      	movs	r3, #3
 8013040:	e006      	b.n	8013050 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	2220      	movs	r2, #32
 8013046:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801304a:	2300      	movs	r3, #0
 801304c:	e000      	b.n	8013050 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801304e:	2302      	movs	r3, #2
  }
}
 8013050:	4618      	mov	r0, r3
 8013052:	3720      	adds	r7, #32
 8013054:	46bd      	mov	sp, r7
 8013056:	bd80      	pop	{r7, pc}

08013058 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013058:	b580      	push	{r7, lr}
 801305a:	b08a      	sub	sp, #40	; 0x28
 801305c:	af00      	add	r7, sp, #0
 801305e:	60f8      	str	r0, [r7, #12]
 8013060:	60b9      	str	r1, [r7, #8]
 8013062:	4613      	mov	r3, r2
 8013064:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801306c:	2b20      	cmp	r3, #32
 801306e:	d137      	bne.n	80130e0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8013070:	68bb      	ldr	r3, [r7, #8]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d002      	beq.n	801307c <HAL_UART_Receive_IT+0x24>
 8013076:	88fb      	ldrh	r3, [r7, #6]
 8013078:	2b00      	cmp	r3, #0
 801307a:	d101      	bne.n	8013080 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801307c:	2301      	movs	r3, #1
 801307e:	e030      	b.n	80130e2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	2200      	movs	r2, #0
 8013084:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	4a18      	ldr	r2, [pc, #96]	; (80130ec <HAL_UART_Receive_IT+0x94>)
 801308c:	4293      	cmp	r3, r2
 801308e:	d01f      	beq.n	80130d0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	685b      	ldr	r3, [r3, #4]
 8013096:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801309a:	2b00      	cmp	r3, #0
 801309c:	d018      	beq.n	80130d0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80130a4:	697b      	ldr	r3, [r7, #20]
 80130a6:	e853 3f00 	ldrex	r3, [r3]
 80130aa:	613b      	str	r3, [r7, #16]
   return(result);
 80130ac:	693b      	ldr	r3, [r7, #16]
 80130ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80130b2:	627b      	str	r3, [r7, #36]	; 0x24
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	461a      	mov	r2, r3
 80130ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130bc:	623b      	str	r3, [r7, #32]
 80130be:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80130c0:	69f9      	ldr	r1, [r7, #28]
 80130c2:	6a3a      	ldr	r2, [r7, #32]
 80130c4:	e841 2300 	strex	r3, r2, [r1]
 80130c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80130ca:	69bb      	ldr	r3, [r7, #24]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d1e6      	bne.n	801309e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80130d0:	88fb      	ldrh	r3, [r7, #6]
 80130d2:	461a      	mov	r2, r3
 80130d4:	68b9      	ldr	r1, [r7, #8]
 80130d6:	68f8      	ldr	r0, [r7, #12]
 80130d8:	f001 f802 	bl	80140e0 <UART_Start_Receive_IT>
 80130dc:	4603      	mov	r3, r0
 80130de:	e000      	b.n	80130e2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80130e0:	2302      	movs	r3, #2
  }
}
 80130e2:	4618      	mov	r0, r3
 80130e4:	3728      	adds	r7, #40	; 0x28
 80130e6:	46bd      	mov	sp, r7
 80130e8:	bd80      	pop	{r7, pc}
 80130ea:	bf00      	nop
 80130ec:	40008000 	.word	0x40008000

080130f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b0ba      	sub	sp, #232	; 0xe8
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	69db      	ldr	r3, [r3, #28]
 80130fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	689b      	ldr	r3, [r3, #8]
 8013112:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8013116:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801311a:	f640 030f 	movw	r3, #2063	; 0x80f
 801311e:	4013      	ands	r3, r2
 8013120:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8013124:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013128:	2b00      	cmp	r3, #0
 801312a:	d11b      	bne.n	8013164 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801312c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013130:	f003 0320 	and.w	r3, r3, #32
 8013134:	2b00      	cmp	r3, #0
 8013136:	d015      	beq.n	8013164 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8013138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801313c:	f003 0320 	and.w	r3, r3, #32
 8013140:	2b00      	cmp	r3, #0
 8013142:	d105      	bne.n	8013150 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8013144:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801314c:	2b00      	cmp	r3, #0
 801314e:	d009      	beq.n	8013164 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013154:	2b00      	cmp	r3, #0
 8013156:	f000 82e3 	beq.w	8013720 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801315e:	6878      	ldr	r0, [r7, #4]
 8013160:	4798      	blx	r3
      }
      return;
 8013162:	e2dd      	b.n	8013720 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8013164:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013168:	2b00      	cmp	r3, #0
 801316a:	f000 8123 	beq.w	80133b4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801316e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8013172:	4b8d      	ldr	r3, [pc, #564]	; (80133a8 <HAL_UART_IRQHandler+0x2b8>)
 8013174:	4013      	ands	r3, r2
 8013176:	2b00      	cmp	r3, #0
 8013178:	d106      	bne.n	8013188 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801317a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801317e:	4b8b      	ldr	r3, [pc, #556]	; (80133ac <HAL_UART_IRQHandler+0x2bc>)
 8013180:	4013      	ands	r3, r2
 8013182:	2b00      	cmp	r3, #0
 8013184:	f000 8116 	beq.w	80133b4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801318c:	f003 0301 	and.w	r3, r3, #1
 8013190:	2b00      	cmp	r3, #0
 8013192:	d011      	beq.n	80131b8 <HAL_UART_IRQHandler+0xc8>
 8013194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801319c:	2b00      	cmp	r3, #0
 801319e:	d00b      	beq.n	80131b8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	2201      	movs	r2, #1
 80131a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80131ae:	f043 0201 	orr.w	r2, r3, #1
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80131b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80131bc:	f003 0302 	and.w	r3, r3, #2
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d011      	beq.n	80131e8 <HAL_UART_IRQHandler+0xf8>
 80131c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80131c8:	f003 0301 	and.w	r3, r3, #1
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d00b      	beq.n	80131e8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	2202      	movs	r2, #2
 80131d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80131de:	f043 0204 	orr.w	r2, r3, #4
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80131e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80131ec:	f003 0304 	and.w	r3, r3, #4
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d011      	beq.n	8013218 <HAL_UART_IRQHandler+0x128>
 80131f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80131f8:	f003 0301 	and.w	r3, r3, #1
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d00b      	beq.n	8013218 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	2204      	movs	r2, #4
 8013206:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801320e:	f043 0202 	orr.w	r2, r3, #2
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8013218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801321c:	f003 0308 	and.w	r3, r3, #8
 8013220:	2b00      	cmp	r3, #0
 8013222:	d017      	beq.n	8013254 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013228:	f003 0320 	and.w	r3, r3, #32
 801322c:	2b00      	cmp	r3, #0
 801322e:	d105      	bne.n	801323c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8013230:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8013234:	4b5c      	ldr	r3, [pc, #368]	; (80133a8 <HAL_UART_IRQHandler+0x2b8>)
 8013236:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013238:	2b00      	cmp	r3, #0
 801323a:	d00b      	beq.n	8013254 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	2208      	movs	r2, #8
 8013242:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801324a:	f043 0208 	orr.w	r2, r3, #8
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8013254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801325c:	2b00      	cmp	r3, #0
 801325e:	d012      	beq.n	8013286 <HAL_UART_IRQHandler+0x196>
 8013260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013264:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013268:	2b00      	cmp	r3, #0
 801326a:	d00c      	beq.n	8013286 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013274:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801327c:	f043 0220 	orr.w	r2, r3, #32
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801328c:	2b00      	cmp	r3, #0
 801328e:	f000 8249 	beq.w	8013724 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8013292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013296:	f003 0320 	and.w	r3, r3, #32
 801329a:	2b00      	cmp	r3, #0
 801329c:	d013      	beq.n	80132c6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801329e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80132a2:	f003 0320 	and.w	r3, r3, #32
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d105      	bne.n	80132b6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80132aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80132ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d007      	beq.n	80132c6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d003      	beq.n	80132c6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80132c2:	6878      	ldr	r0, [r7, #4]
 80132c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80132cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	689b      	ldr	r3, [r3, #8]
 80132d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80132da:	2b40      	cmp	r3, #64	; 0x40
 80132dc:	d005      	beq.n	80132ea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80132de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80132e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d054      	beq.n	8013394 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80132ea:	6878      	ldr	r0, [r7, #4]
 80132ec:	f001 f81a 	bl	8014324 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	689b      	ldr	r3, [r3, #8]
 80132f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80132fa:	2b40      	cmp	r3, #64	; 0x40
 80132fc:	d146      	bne.n	801338c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	3308      	adds	r3, #8
 8013304:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013308:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801330c:	e853 3f00 	ldrex	r3, [r3]
 8013310:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8013314:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801331c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	3308      	adds	r3, #8
 8013326:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801332a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801332e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013332:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8013336:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801333a:	e841 2300 	strex	r3, r2, [r1]
 801333e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8013342:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013346:	2b00      	cmp	r3, #0
 8013348:	d1d9      	bne.n	80132fe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013350:	2b00      	cmp	r3, #0
 8013352:	d017      	beq.n	8013384 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801335a:	4a15      	ldr	r2, [pc, #84]	; (80133b0 <HAL_UART_IRQHandler+0x2c0>)
 801335c:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013364:	4618      	mov	r0, r3
 8013366:	f7f9 fce0 	bl	800cd2a <HAL_DMA_Abort_IT>
 801336a:	4603      	mov	r3, r0
 801336c:	2b00      	cmp	r3, #0
 801336e:	d019      	beq.n	80133a4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013378:	687a      	ldr	r2, [r7, #4]
 801337a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801337e:	4610      	mov	r0, r2
 8013380:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013382:	e00f      	b.n	80133a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8013384:	6878      	ldr	r0, [r7, #4]
 8013386:	f000 f9e1 	bl	801374c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801338a:	e00b      	b.n	80133a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801338c:	6878      	ldr	r0, [r7, #4]
 801338e:	f000 f9dd 	bl	801374c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013392:	e007      	b.n	80133a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8013394:	6878      	ldr	r0, [r7, #4]
 8013396:	f000 f9d9 	bl	801374c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	2200      	movs	r2, #0
 801339e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80133a2:	e1bf      	b.n	8013724 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80133a4:	bf00      	nop
    return;
 80133a6:	e1bd      	b.n	8013724 <HAL_UART_IRQHandler+0x634>
 80133a8:	10000001 	.word	0x10000001
 80133ac:	04000120 	.word	0x04000120
 80133b0:	080143f1 	.word	0x080143f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133b8:	2b01      	cmp	r3, #1
 80133ba:	f040 8153 	bne.w	8013664 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80133be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80133c2:	f003 0310 	and.w	r3, r3, #16
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	f000 814c 	beq.w	8013664 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80133cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80133d0:	f003 0310 	and.w	r3, r3, #16
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	f000 8145 	beq.w	8013664 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	2210      	movs	r2, #16
 80133e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	689b      	ldr	r3, [r3, #8]
 80133e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80133ec:	2b40      	cmp	r3, #64	; 0x40
 80133ee:	f040 80bb 	bne.w	8013568 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	685b      	ldr	r3, [r3, #4]
 80133fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8013400:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8013404:	2b00      	cmp	r3, #0
 8013406:	f000 818f 	beq.w	8013728 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013410:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8013414:	429a      	cmp	r2, r3
 8013416:	f080 8187 	bcs.w	8013728 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8013420:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	f003 0320 	and.w	r3, r3, #32
 8013432:	2b00      	cmp	r3, #0
 8013434:	f040 8087 	bne.w	8013546 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013440:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013444:	e853 3f00 	ldrex	r3, [r3]
 8013448:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801344c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013454:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	461a      	mov	r2, r3
 801345e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013462:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8013466:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801346a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801346e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8013472:	e841 2300 	strex	r3, r2, [r1]
 8013476:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801347a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801347e:	2b00      	cmp	r3, #0
 8013480:	d1da      	bne.n	8013438 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	3308      	adds	r3, #8
 8013488:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801348a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801348c:	e853 3f00 	ldrex	r3, [r3]
 8013490:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8013492:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013494:	f023 0301 	bic.w	r3, r3, #1
 8013498:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	3308      	adds	r3, #8
 80134a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80134a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80134aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80134ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80134ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80134b2:	e841 2300 	strex	r3, r2, [r1]
 80134b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80134b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d1e1      	bne.n	8013482 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	3308      	adds	r3, #8
 80134c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80134c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80134c8:	e853 3f00 	ldrex	r3, [r3]
 80134cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80134ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80134d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80134d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	3308      	adds	r3, #8
 80134de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80134e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80134e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80134e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80134e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80134ea:	e841 2300 	strex	r3, r2, [r1]
 80134ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80134f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d1e3      	bne.n	80134be <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	2220      	movs	r2, #32
 80134fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	2200      	movs	r2, #0
 8013502:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801350a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801350c:	e853 3f00 	ldrex	r3, [r3]
 8013510:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8013512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013514:	f023 0310 	bic.w	r3, r3, #16
 8013518:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	461a      	mov	r2, r3
 8013522:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013526:	65bb      	str	r3, [r7, #88]	; 0x58
 8013528:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801352a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801352c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801352e:	e841 2300 	strex	r3, r2, [r1]
 8013532:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8013534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013536:	2b00      	cmp	r3, #0
 8013538:	d1e4      	bne.n	8013504 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013540:	4618      	mov	r0, r3
 8013542:	f7f9 fb96 	bl	800cc72 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	2202      	movs	r2, #2
 801354a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013558:	b29b      	uxth	r3, r3
 801355a:	1ad3      	subs	r3, r2, r3
 801355c:	b29b      	uxth	r3, r3
 801355e:	4619      	mov	r1, r3
 8013560:	6878      	ldr	r0, [r7, #4]
 8013562:	f000 f8fd 	bl	8013760 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013566:	e0df      	b.n	8013728 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013574:	b29b      	uxth	r3, r3
 8013576:	1ad3      	subs	r3, r2, r3
 8013578:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013582:	b29b      	uxth	r3, r3
 8013584:	2b00      	cmp	r3, #0
 8013586:	f000 80d1 	beq.w	801372c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 801358a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801358e:	2b00      	cmp	r3, #0
 8013590:	f000 80cc 	beq.w	801372c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801359a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801359c:	e853 3f00 	ldrex	r3, [r3]
 80135a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80135a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80135a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	461a      	mov	r2, r3
 80135b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80135b6:	647b      	str	r3, [r7, #68]	; 0x44
 80135b8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80135ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80135bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80135be:	e841 2300 	strex	r3, r2, [r1]
 80135c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80135c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d1e4      	bne.n	8013594 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	3308      	adds	r3, #8
 80135d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80135d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135d4:	e853 3f00 	ldrex	r3, [r3]
 80135d8:	623b      	str	r3, [r7, #32]
   return(result);
 80135da:	6a3b      	ldr	r3, [r7, #32]
 80135dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80135e0:	f023 0301 	bic.w	r3, r3, #1
 80135e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	3308      	adds	r3, #8
 80135ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80135f2:	633a      	str	r2, [r7, #48]	; 0x30
 80135f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80135f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80135f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80135fa:	e841 2300 	strex	r3, r2, [r1]
 80135fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013602:	2b00      	cmp	r3, #0
 8013604:	d1e1      	bne.n	80135ca <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	2220      	movs	r2, #32
 801360a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	2200      	movs	r2, #0
 8013612:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	2200      	movs	r2, #0
 8013618:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013620:	693b      	ldr	r3, [r7, #16]
 8013622:	e853 3f00 	ldrex	r3, [r3]
 8013626:	60fb      	str	r3, [r7, #12]
   return(result);
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	f023 0310 	bic.w	r3, r3, #16
 801362e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	461a      	mov	r2, r3
 8013638:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801363c:	61fb      	str	r3, [r7, #28]
 801363e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013640:	69b9      	ldr	r1, [r7, #24]
 8013642:	69fa      	ldr	r2, [r7, #28]
 8013644:	e841 2300 	strex	r3, r2, [r1]
 8013648:	617b      	str	r3, [r7, #20]
   return(result);
 801364a:	697b      	ldr	r3, [r7, #20]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d1e4      	bne.n	801361a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	2202      	movs	r2, #2
 8013654:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8013656:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801365a:	4619      	mov	r1, r3
 801365c:	6878      	ldr	r0, [r7, #4]
 801365e:	f000 f87f 	bl	8013760 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013662:	e063      	b.n	801372c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8013664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013668:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801366c:	2b00      	cmp	r3, #0
 801366e:	d00e      	beq.n	801368e <HAL_UART_IRQHandler+0x59e>
 8013670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013674:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013678:	2b00      	cmp	r3, #0
 801367a:	d008      	beq.n	801368e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8013684:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8013686:	6878      	ldr	r0, [r7, #4]
 8013688:	f001 fc10 	bl	8014eac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801368c:	e051      	b.n	8013732 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801368e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013696:	2b00      	cmp	r3, #0
 8013698:	d014      	beq.n	80136c4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801369a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801369e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d105      	bne.n	80136b2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80136a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80136aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d008      	beq.n	80136c4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d03a      	beq.n	8013730 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80136be:	6878      	ldr	r0, [r7, #4]
 80136c0:	4798      	blx	r3
    }
    return;
 80136c2:	e035      	b.n	8013730 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80136c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80136c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d009      	beq.n	80136e4 <HAL_UART_IRQHandler+0x5f4>
 80136d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80136d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d003      	beq.n	80136e4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80136dc:	6878      	ldr	r0, [r7, #4]
 80136de:	f000 fe9d 	bl	801441c <UART_EndTransmit_IT>
    return;
 80136e2:	e026      	b.n	8013732 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80136e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80136e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d009      	beq.n	8013704 <HAL_UART_IRQHandler+0x614>
 80136f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80136f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d003      	beq.n	8013704 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80136fc:	6878      	ldr	r0, [r7, #4]
 80136fe:	f001 fbe9 	bl	8014ed4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013702:	e016      	b.n	8013732 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8013704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801370c:	2b00      	cmp	r3, #0
 801370e:	d010      	beq.n	8013732 <HAL_UART_IRQHandler+0x642>
 8013710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013714:	2b00      	cmp	r3, #0
 8013716:	da0c      	bge.n	8013732 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8013718:	6878      	ldr	r0, [r7, #4]
 801371a:	f001 fbd1 	bl	8014ec0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801371e:	e008      	b.n	8013732 <HAL_UART_IRQHandler+0x642>
      return;
 8013720:	bf00      	nop
 8013722:	e006      	b.n	8013732 <HAL_UART_IRQHandler+0x642>
    return;
 8013724:	bf00      	nop
 8013726:	e004      	b.n	8013732 <HAL_UART_IRQHandler+0x642>
      return;
 8013728:	bf00      	nop
 801372a:	e002      	b.n	8013732 <HAL_UART_IRQHandler+0x642>
      return;
 801372c:	bf00      	nop
 801372e:	e000      	b.n	8013732 <HAL_UART_IRQHandler+0x642>
    return;
 8013730:	bf00      	nop
  }
}
 8013732:	37e8      	adds	r7, #232	; 0xe8
 8013734:	46bd      	mov	sp, r7
 8013736:	bd80      	pop	{r7, pc}

08013738 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8013738:	b480      	push	{r7}
 801373a:	b083      	sub	sp, #12
 801373c:	af00      	add	r7, sp, #0
 801373e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8013740:	bf00      	nop
 8013742:	370c      	adds	r7, #12
 8013744:	46bd      	mov	sp, r7
 8013746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801374a:	4770      	bx	lr

0801374c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801374c:	b480      	push	{r7}
 801374e:	b083      	sub	sp, #12
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8013754:	bf00      	nop
 8013756:	370c      	adds	r7, #12
 8013758:	46bd      	mov	sp, r7
 801375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801375e:	4770      	bx	lr

08013760 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8013760:	b480      	push	{r7}
 8013762:	b083      	sub	sp, #12
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
 8013768:	460b      	mov	r3, r1
 801376a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801376c:	bf00      	nop
 801376e:	370c      	adds	r7, #12
 8013770:	46bd      	mov	sp, r7
 8013772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013776:	4770      	bx	lr

08013778 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801377c:	b08c      	sub	sp, #48	; 0x30
 801377e:	af00      	add	r7, sp, #0
 8013780:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8013782:	2300      	movs	r3, #0
 8013784:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013788:	697b      	ldr	r3, [r7, #20]
 801378a:	689a      	ldr	r2, [r3, #8]
 801378c:	697b      	ldr	r3, [r7, #20]
 801378e:	691b      	ldr	r3, [r3, #16]
 8013790:	431a      	orrs	r2, r3
 8013792:	697b      	ldr	r3, [r7, #20]
 8013794:	695b      	ldr	r3, [r3, #20]
 8013796:	431a      	orrs	r2, r3
 8013798:	697b      	ldr	r3, [r7, #20]
 801379a:	69db      	ldr	r3, [r3, #28]
 801379c:	4313      	orrs	r3, r2
 801379e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80137a0:	697b      	ldr	r3, [r7, #20]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	681a      	ldr	r2, [r3, #0]
 80137a6:	4baa      	ldr	r3, [pc, #680]	; (8013a50 <UART_SetConfig+0x2d8>)
 80137a8:	4013      	ands	r3, r2
 80137aa:	697a      	ldr	r2, [r7, #20]
 80137ac:	6812      	ldr	r2, [r2, #0]
 80137ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80137b0:	430b      	orrs	r3, r1
 80137b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80137b4:	697b      	ldr	r3, [r7, #20]
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	685b      	ldr	r3, [r3, #4]
 80137ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80137be:	697b      	ldr	r3, [r7, #20]
 80137c0:	68da      	ldr	r2, [r3, #12]
 80137c2:	697b      	ldr	r3, [r7, #20]
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	430a      	orrs	r2, r1
 80137c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80137ca:	697b      	ldr	r3, [r7, #20]
 80137cc:	699b      	ldr	r3, [r3, #24]
 80137ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80137d0:	697b      	ldr	r3, [r7, #20]
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	4a9f      	ldr	r2, [pc, #636]	; (8013a54 <UART_SetConfig+0x2dc>)
 80137d6:	4293      	cmp	r3, r2
 80137d8:	d004      	beq.n	80137e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80137da:	697b      	ldr	r3, [r7, #20]
 80137dc:	6a1b      	ldr	r3, [r3, #32]
 80137de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80137e0:	4313      	orrs	r3, r2
 80137e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80137e4:	697b      	ldr	r3, [r7, #20]
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	689b      	ldr	r3, [r3, #8]
 80137ea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80137ee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80137f2:	697a      	ldr	r2, [r7, #20]
 80137f4:	6812      	ldr	r2, [r2, #0]
 80137f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80137f8:	430b      	orrs	r3, r1
 80137fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80137fc:	697b      	ldr	r3, [r7, #20]
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013802:	f023 010f 	bic.w	r1, r3, #15
 8013806:	697b      	ldr	r3, [r7, #20]
 8013808:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801380a:	697b      	ldr	r3, [r7, #20]
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	430a      	orrs	r2, r1
 8013810:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013812:	697b      	ldr	r3, [r7, #20]
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	4a90      	ldr	r2, [pc, #576]	; (8013a58 <UART_SetConfig+0x2e0>)
 8013818:	4293      	cmp	r3, r2
 801381a:	d125      	bne.n	8013868 <UART_SetConfig+0xf0>
 801381c:	4b8f      	ldr	r3, [pc, #572]	; (8013a5c <UART_SetConfig+0x2e4>)
 801381e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013822:	f003 0303 	and.w	r3, r3, #3
 8013826:	2b03      	cmp	r3, #3
 8013828:	d81a      	bhi.n	8013860 <UART_SetConfig+0xe8>
 801382a:	a201      	add	r2, pc, #4	; (adr r2, 8013830 <UART_SetConfig+0xb8>)
 801382c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013830:	08013841 	.word	0x08013841
 8013834:	08013851 	.word	0x08013851
 8013838:	08013849 	.word	0x08013849
 801383c:	08013859 	.word	0x08013859
 8013840:	2301      	movs	r3, #1
 8013842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8013846:	e116      	b.n	8013a76 <UART_SetConfig+0x2fe>
 8013848:	2302      	movs	r3, #2
 801384a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801384e:	e112      	b.n	8013a76 <UART_SetConfig+0x2fe>
 8013850:	2304      	movs	r3, #4
 8013852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8013856:	e10e      	b.n	8013a76 <UART_SetConfig+0x2fe>
 8013858:	2308      	movs	r3, #8
 801385a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801385e:	e10a      	b.n	8013a76 <UART_SetConfig+0x2fe>
 8013860:	2310      	movs	r3, #16
 8013862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8013866:	e106      	b.n	8013a76 <UART_SetConfig+0x2fe>
 8013868:	697b      	ldr	r3, [r7, #20]
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	4a7c      	ldr	r2, [pc, #496]	; (8013a60 <UART_SetConfig+0x2e8>)
 801386e:	4293      	cmp	r3, r2
 8013870:	d138      	bne.n	80138e4 <UART_SetConfig+0x16c>
 8013872:	4b7a      	ldr	r3, [pc, #488]	; (8013a5c <UART_SetConfig+0x2e4>)
 8013874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013878:	f003 030c 	and.w	r3, r3, #12
 801387c:	2b0c      	cmp	r3, #12
 801387e:	d82d      	bhi.n	80138dc <UART_SetConfig+0x164>
 8013880:	a201      	add	r2, pc, #4	; (adr r2, 8013888 <UART_SetConfig+0x110>)
 8013882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013886:	bf00      	nop
 8013888:	080138bd 	.word	0x080138bd
 801388c:	080138dd 	.word	0x080138dd
 8013890:	080138dd 	.word	0x080138dd
 8013894:	080138dd 	.word	0x080138dd
 8013898:	080138cd 	.word	0x080138cd
 801389c:	080138dd 	.word	0x080138dd
 80138a0:	080138dd 	.word	0x080138dd
 80138a4:	080138dd 	.word	0x080138dd
 80138a8:	080138c5 	.word	0x080138c5
 80138ac:	080138dd 	.word	0x080138dd
 80138b0:	080138dd 	.word	0x080138dd
 80138b4:	080138dd 	.word	0x080138dd
 80138b8:	080138d5 	.word	0x080138d5
 80138bc:	2300      	movs	r3, #0
 80138be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80138c2:	e0d8      	b.n	8013a76 <UART_SetConfig+0x2fe>
 80138c4:	2302      	movs	r3, #2
 80138c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80138ca:	e0d4      	b.n	8013a76 <UART_SetConfig+0x2fe>
 80138cc:	2304      	movs	r3, #4
 80138ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80138d2:	e0d0      	b.n	8013a76 <UART_SetConfig+0x2fe>
 80138d4:	2308      	movs	r3, #8
 80138d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80138da:	e0cc      	b.n	8013a76 <UART_SetConfig+0x2fe>
 80138dc:	2310      	movs	r3, #16
 80138de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80138e2:	e0c8      	b.n	8013a76 <UART_SetConfig+0x2fe>
 80138e4:	697b      	ldr	r3, [r7, #20]
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	4a5e      	ldr	r2, [pc, #376]	; (8013a64 <UART_SetConfig+0x2ec>)
 80138ea:	4293      	cmp	r3, r2
 80138ec:	d125      	bne.n	801393a <UART_SetConfig+0x1c2>
 80138ee:	4b5b      	ldr	r3, [pc, #364]	; (8013a5c <UART_SetConfig+0x2e4>)
 80138f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80138f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80138f8:	2b30      	cmp	r3, #48	; 0x30
 80138fa:	d016      	beq.n	801392a <UART_SetConfig+0x1b2>
 80138fc:	2b30      	cmp	r3, #48	; 0x30
 80138fe:	d818      	bhi.n	8013932 <UART_SetConfig+0x1ba>
 8013900:	2b20      	cmp	r3, #32
 8013902:	d00a      	beq.n	801391a <UART_SetConfig+0x1a2>
 8013904:	2b20      	cmp	r3, #32
 8013906:	d814      	bhi.n	8013932 <UART_SetConfig+0x1ba>
 8013908:	2b00      	cmp	r3, #0
 801390a:	d002      	beq.n	8013912 <UART_SetConfig+0x19a>
 801390c:	2b10      	cmp	r3, #16
 801390e:	d008      	beq.n	8013922 <UART_SetConfig+0x1aa>
 8013910:	e00f      	b.n	8013932 <UART_SetConfig+0x1ba>
 8013912:	2300      	movs	r3, #0
 8013914:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8013918:	e0ad      	b.n	8013a76 <UART_SetConfig+0x2fe>
 801391a:	2302      	movs	r3, #2
 801391c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8013920:	e0a9      	b.n	8013a76 <UART_SetConfig+0x2fe>
 8013922:	2304      	movs	r3, #4
 8013924:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8013928:	e0a5      	b.n	8013a76 <UART_SetConfig+0x2fe>
 801392a:	2308      	movs	r3, #8
 801392c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8013930:	e0a1      	b.n	8013a76 <UART_SetConfig+0x2fe>
 8013932:	2310      	movs	r3, #16
 8013934:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8013938:	e09d      	b.n	8013a76 <UART_SetConfig+0x2fe>
 801393a:	697b      	ldr	r3, [r7, #20]
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	4a4a      	ldr	r2, [pc, #296]	; (8013a68 <UART_SetConfig+0x2f0>)
 8013940:	4293      	cmp	r3, r2
 8013942:	d125      	bne.n	8013990 <UART_SetConfig+0x218>
 8013944:	4b45      	ldr	r3, [pc, #276]	; (8013a5c <UART_SetConfig+0x2e4>)
 8013946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801394a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801394e:	2bc0      	cmp	r3, #192	; 0xc0
 8013950:	d016      	beq.n	8013980 <UART_SetConfig+0x208>
 8013952:	2bc0      	cmp	r3, #192	; 0xc0
 8013954:	d818      	bhi.n	8013988 <UART_SetConfig+0x210>
 8013956:	2b80      	cmp	r3, #128	; 0x80
 8013958:	d00a      	beq.n	8013970 <UART_SetConfig+0x1f8>
 801395a:	2b80      	cmp	r3, #128	; 0x80
 801395c:	d814      	bhi.n	8013988 <UART_SetConfig+0x210>
 801395e:	2b00      	cmp	r3, #0
 8013960:	d002      	beq.n	8013968 <UART_SetConfig+0x1f0>
 8013962:	2b40      	cmp	r3, #64	; 0x40
 8013964:	d008      	beq.n	8013978 <UART_SetConfig+0x200>
 8013966:	e00f      	b.n	8013988 <UART_SetConfig+0x210>
 8013968:	2300      	movs	r3, #0
 801396a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801396e:	e082      	b.n	8013a76 <UART_SetConfig+0x2fe>
 8013970:	2302      	movs	r3, #2
 8013972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8013976:	e07e      	b.n	8013a76 <UART_SetConfig+0x2fe>
 8013978:	2304      	movs	r3, #4
 801397a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801397e:	e07a      	b.n	8013a76 <UART_SetConfig+0x2fe>
 8013980:	2308      	movs	r3, #8
 8013982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8013986:	e076      	b.n	8013a76 <UART_SetConfig+0x2fe>
 8013988:	2310      	movs	r3, #16
 801398a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801398e:	e072      	b.n	8013a76 <UART_SetConfig+0x2fe>
 8013990:	697b      	ldr	r3, [r7, #20]
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	4a35      	ldr	r2, [pc, #212]	; (8013a6c <UART_SetConfig+0x2f4>)
 8013996:	4293      	cmp	r3, r2
 8013998:	d12a      	bne.n	80139f0 <UART_SetConfig+0x278>
 801399a:	4b30      	ldr	r3, [pc, #192]	; (8013a5c <UART_SetConfig+0x2e4>)
 801399c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80139a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80139a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80139a8:	d01a      	beq.n	80139e0 <UART_SetConfig+0x268>
 80139aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80139ae:	d81b      	bhi.n	80139e8 <UART_SetConfig+0x270>
 80139b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80139b4:	d00c      	beq.n	80139d0 <UART_SetConfig+0x258>
 80139b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80139ba:	d815      	bhi.n	80139e8 <UART_SetConfig+0x270>
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d003      	beq.n	80139c8 <UART_SetConfig+0x250>
 80139c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80139c4:	d008      	beq.n	80139d8 <UART_SetConfig+0x260>
 80139c6:	e00f      	b.n	80139e8 <UART_SetConfig+0x270>
 80139c8:	2300      	movs	r3, #0
 80139ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80139ce:	e052      	b.n	8013a76 <UART_SetConfig+0x2fe>
 80139d0:	2302      	movs	r3, #2
 80139d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80139d6:	e04e      	b.n	8013a76 <UART_SetConfig+0x2fe>
 80139d8:	2304      	movs	r3, #4
 80139da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80139de:	e04a      	b.n	8013a76 <UART_SetConfig+0x2fe>
 80139e0:	2308      	movs	r3, #8
 80139e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80139e6:	e046      	b.n	8013a76 <UART_SetConfig+0x2fe>
 80139e8:	2310      	movs	r3, #16
 80139ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80139ee:	e042      	b.n	8013a76 <UART_SetConfig+0x2fe>
 80139f0:	697b      	ldr	r3, [r7, #20]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	4a17      	ldr	r2, [pc, #92]	; (8013a54 <UART_SetConfig+0x2dc>)
 80139f6:	4293      	cmp	r3, r2
 80139f8:	d13a      	bne.n	8013a70 <UART_SetConfig+0x2f8>
 80139fa:	4b18      	ldr	r3, [pc, #96]	; (8013a5c <UART_SetConfig+0x2e4>)
 80139fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013a00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8013a04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8013a08:	d01a      	beq.n	8013a40 <UART_SetConfig+0x2c8>
 8013a0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8013a0e:	d81b      	bhi.n	8013a48 <UART_SetConfig+0x2d0>
 8013a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013a14:	d00c      	beq.n	8013a30 <UART_SetConfig+0x2b8>
 8013a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013a1a:	d815      	bhi.n	8013a48 <UART_SetConfig+0x2d0>
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d003      	beq.n	8013a28 <UART_SetConfig+0x2b0>
 8013a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013a24:	d008      	beq.n	8013a38 <UART_SetConfig+0x2c0>
 8013a26:	e00f      	b.n	8013a48 <UART_SetConfig+0x2d0>
 8013a28:	2300      	movs	r3, #0
 8013a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8013a2e:	e022      	b.n	8013a76 <UART_SetConfig+0x2fe>
 8013a30:	2302      	movs	r3, #2
 8013a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8013a36:	e01e      	b.n	8013a76 <UART_SetConfig+0x2fe>
 8013a38:	2304      	movs	r3, #4
 8013a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8013a3e:	e01a      	b.n	8013a76 <UART_SetConfig+0x2fe>
 8013a40:	2308      	movs	r3, #8
 8013a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8013a46:	e016      	b.n	8013a76 <UART_SetConfig+0x2fe>
 8013a48:	2310      	movs	r3, #16
 8013a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8013a4e:	e012      	b.n	8013a76 <UART_SetConfig+0x2fe>
 8013a50:	cfff69f3 	.word	0xcfff69f3
 8013a54:	40008000 	.word	0x40008000
 8013a58:	40013800 	.word	0x40013800
 8013a5c:	40021000 	.word	0x40021000
 8013a60:	40004400 	.word	0x40004400
 8013a64:	40004800 	.word	0x40004800
 8013a68:	40004c00 	.word	0x40004c00
 8013a6c:	40005000 	.word	0x40005000
 8013a70:	2310      	movs	r3, #16
 8013a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8013a76:	697b      	ldr	r3, [r7, #20]
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	4ab0      	ldr	r2, [pc, #704]	; (8013d3c <UART_SetConfig+0x5c4>)
 8013a7c:	4293      	cmp	r3, r2
 8013a7e:	f040 809b 	bne.w	8013bb8 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8013a82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013a86:	2b08      	cmp	r3, #8
 8013a88:	d827      	bhi.n	8013ada <UART_SetConfig+0x362>
 8013a8a:	a201      	add	r2, pc, #4	; (adr r2, 8013a90 <UART_SetConfig+0x318>)
 8013a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a90:	08013ab5 	.word	0x08013ab5
 8013a94:	08013abd 	.word	0x08013abd
 8013a98:	08013ac5 	.word	0x08013ac5
 8013a9c:	08013adb 	.word	0x08013adb
 8013aa0:	08013acb 	.word	0x08013acb
 8013aa4:	08013adb 	.word	0x08013adb
 8013aa8:	08013adb 	.word	0x08013adb
 8013aac:	08013adb 	.word	0x08013adb
 8013ab0:	08013ad3 	.word	0x08013ad3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013ab4:	f7fb fb60 	bl	800f178 <HAL_RCC_GetPCLK1Freq>
 8013ab8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8013aba:	e014      	b.n	8013ae6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013abc:	f7fb fb70 	bl	800f1a0 <HAL_RCC_GetPCLK2Freq>
 8013ac0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8013ac2:	e010      	b.n	8013ae6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013ac4:	4b9e      	ldr	r3, [pc, #632]	; (8013d40 <UART_SetConfig+0x5c8>)
 8013ac6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013ac8:	e00d      	b.n	8013ae6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013aca:	f7fb faa3 	bl	800f014 <HAL_RCC_GetSysClockFreq>
 8013ace:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8013ad0:	e009      	b.n	8013ae6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013ad6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013ad8:	e005      	b.n	8013ae6 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8013ada:	2300      	movs	r3, #0
 8013adc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8013ade:	2301      	movs	r3, #1
 8013ae0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8013ae4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8013ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	f000 8130 	beq.w	8013d4e <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8013aee:	697b      	ldr	r3, [r7, #20]
 8013af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013af2:	4a94      	ldr	r2, [pc, #592]	; (8013d44 <UART_SetConfig+0x5cc>)
 8013af4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013af8:	461a      	mov	r2, r3
 8013afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013afc:	fbb3 f3f2 	udiv	r3, r3, r2
 8013b00:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013b02:	697b      	ldr	r3, [r7, #20]
 8013b04:	685a      	ldr	r2, [r3, #4]
 8013b06:	4613      	mov	r3, r2
 8013b08:	005b      	lsls	r3, r3, #1
 8013b0a:	4413      	add	r3, r2
 8013b0c:	69ba      	ldr	r2, [r7, #24]
 8013b0e:	429a      	cmp	r2, r3
 8013b10:	d305      	bcc.n	8013b1e <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8013b12:	697b      	ldr	r3, [r7, #20]
 8013b14:	685b      	ldr	r3, [r3, #4]
 8013b16:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013b18:	69ba      	ldr	r2, [r7, #24]
 8013b1a:	429a      	cmp	r2, r3
 8013b1c:	d903      	bls.n	8013b26 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8013b1e:	2301      	movs	r3, #1
 8013b20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8013b24:	e113      	b.n	8013d4e <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b28:	2200      	movs	r2, #0
 8013b2a:	60bb      	str	r3, [r7, #8]
 8013b2c:	60fa      	str	r2, [r7, #12]
 8013b2e:	697b      	ldr	r3, [r7, #20]
 8013b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b32:	4a84      	ldr	r2, [pc, #528]	; (8013d44 <UART_SetConfig+0x5cc>)
 8013b34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013b38:	b29b      	uxth	r3, r3
 8013b3a:	2200      	movs	r2, #0
 8013b3c:	603b      	str	r3, [r7, #0]
 8013b3e:	607a      	str	r2, [r7, #4]
 8013b40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013b44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013b48:	f7ed f85e 	bl	8000c08 <__aeabi_uldivmod>
 8013b4c:	4602      	mov	r2, r0
 8013b4e:	460b      	mov	r3, r1
 8013b50:	4610      	mov	r0, r2
 8013b52:	4619      	mov	r1, r3
 8013b54:	f04f 0200 	mov.w	r2, #0
 8013b58:	f04f 0300 	mov.w	r3, #0
 8013b5c:	020b      	lsls	r3, r1, #8
 8013b5e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8013b62:	0202      	lsls	r2, r0, #8
 8013b64:	6979      	ldr	r1, [r7, #20]
 8013b66:	6849      	ldr	r1, [r1, #4]
 8013b68:	0849      	lsrs	r1, r1, #1
 8013b6a:	2000      	movs	r0, #0
 8013b6c:	460c      	mov	r4, r1
 8013b6e:	4605      	mov	r5, r0
 8013b70:	eb12 0804 	adds.w	r8, r2, r4
 8013b74:	eb43 0905 	adc.w	r9, r3, r5
 8013b78:	697b      	ldr	r3, [r7, #20]
 8013b7a:	685b      	ldr	r3, [r3, #4]
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	469a      	mov	sl, r3
 8013b80:	4693      	mov	fp, r2
 8013b82:	4652      	mov	r2, sl
 8013b84:	465b      	mov	r3, fp
 8013b86:	4640      	mov	r0, r8
 8013b88:	4649      	mov	r1, r9
 8013b8a:	f7ed f83d 	bl	8000c08 <__aeabi_uldivmod>
 8013b8e:	4602      	mov	r2, r0
 8013b90:	460b      	mov	r3, r1
 8013b92:	4613      	mov	r3, r2
 8013b94:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013b96:	6a3b      	ldr	r3, [r7, #32]
 8013b98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013b9c:	d308      	bcc.n	8013bb0 <UART_SetConfig+0x438>
 8013b9e:	6a3b      	ldr	r3, [r7, #32]
 8013ba0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013ba4:	d204      	bcs.n	8013bb0 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8013ba6:	697b      	ldr	r3, [r7, #20]
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	6a3a      	ldr	r2, [r7, #32]
 8013bac:	60da      	str	r2, [r3, #12]
 8013bae:	e0ce      	b.n	8013d4e <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8013bb0:	2301      	movs	r3, #1
 8013bb2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8013bb6:	e0ca      	b.n	8013d4e <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013bb8:	697b      	ldr	r3, [r7, #20]
 8013bba:	69db      	ldr	r3, [r3, #28]
 8013bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013bc0:	d166      	bne.n	8013c90 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8013bc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013bc6:	2b08      	cmp	r3, #8
 8013bc8:	d827      	bhi.n	8013c1a <UART_SetConfig+0x4a2>
 8013bca:	a201      	add	r2, pc, #4	; (adr r2, 8013bd0 <UART_SetConfig+0x458>)
 8013bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bd0:	08013bf5 	.word	0x08013bf5
 8013bd4:	08013bfd 	.word	0x08013bfd
 8013bd8:	08013c05 	.word	0x08013c05
 8013bdc:	08013c1b 	.word	0x08013c1b
 8013be0:	08013c0b 	.word	0x08013c0b
 8013be4:	08013c1b 	.word	0x08013c1b
 8013be8:	08013c1b 	.word	0x08013c1b
 8013bec:	08013c1b 	.word	0x08013c1b
 8013bf0:	08013c13 	.word	0x08013c13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013bf4:	f7fb fac0 	bl	800f178 <HAL_RCC_GetPCLK1Freq>
 8013bf8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8013bfa:	e014      	b.n	8013c26 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013bfc:	f7fb fad0 	bl	800f1a0 <HAL_RCC_GetPCLK2Freq>
 8013c00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8013c02:	e010      	b.n	8013c26 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013c04:	4b4e      	ldr	r3, [pc, #312]	; (8013d40 <UART_SetConfig+0x5c8>)
 8013c06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013c08:	e00d      	b.n	8013c26 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013c0a:	f7fb fa03 	bl	800f014 <HAL_RCC_GetSysClockFreq>
 8013c0e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8013c10:	e009      	b.n	8013c26 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013c16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013c18:	e005      	b.n	8013c26 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8013c1a:	2300      	movs	r3, #0
 8013c1c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8013c1e:	2301      	movs	r3, #1
 8013c20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8013c24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8013c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	f000 8090 	beq.w	8013d4e <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013c2e:	697b      	ldr	r3, [r7, #20]
 8013c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c32:	4a44      	ldr	r2, [pc, #272]	; (8013d44 <UART_SetConfig+0x5cc>)
 8013c34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013c38:	461a      	mov	r2, r3
 8013c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013c40:	005a      	lsls	r2, r3, #1
 8013c42:	697b      	ldr	r3, [r7, #20]
 8013c44:	685b      	ldr	r3, [r3, #4]
 8013c46:	085b      	lsrs	r3, r3, #1
 8013c48:	441a      	add	r2, r3
 8013c4a:	697b      	ldr	r3, [r7, #20]
 8013c4c:	685b      	ldr	r3, [r3, #4]
 8013c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013c52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013c54:	6a3b      	ldr	r3, [r7, #32]
 8013c56:	2b0f      	cmp	r3, #15
 8013c58:	d916      	bls.n	8013c88 <UART_SetConfig+0x510>
 8013c5a:	6a3b      	ldr	r3, [r7, #32]
 8013c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013c60:	d212      	bcs.n	8013c88 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013c62:	6a3b      	ldr	r3, [r7, #32]
 8013c64:	b29b      	uxth	r3, r3
 8013c66:	f023 030f 	bic.w	r3, r3, #15
 8013c6a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013c6c:	6a3b      	ldr	r3, [r7, #32]
 8013c6e:	085b      	lsrs	r3, r3, #1
 8013c70:	b29b      	uxth	r3, r3
 8013c72:	f003 0307 	and.w	r3, r3, #7
 8013c76:	b29a      	uxth	r2, r3
 8013c78:	8bfb      	ldrh	r3, [r7, #30]
 8013c7a:	4313      	orrs	r3, r2
 8013c7c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8013c7e:	697b      	ldr	r3, [r7, #20]
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	8bfa      	ldrh	r2, [r7, #30]
 8013c84:	60da      	str	r2, [r3, #12]
 8013c86:	e062      	b.n	8013d4e <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8013c88:	2301      	movs	r3, #1
 8013c8a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8013c8e:	e05e      	b.n	8013d4e <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8013c90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013c94:	2b08      	cmp	r3, #8
 8013c96:	d828      	bhi.n	8013cea <UART_SetConfig+0x572>
 8013c98:	a201      	add	r2, pc, #4	; (adr r2, 8013ca0 <UART_SetConfig+0x528>)
 8013c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c9e:	bf00      	nop
 8013ca0:	08013cc5 	.word	0x08013cc5
 8013ca4:	08013ccd 	.word	0x08013ccd
 8013ca8:	08013cd5 	.word	0x08013cd5
 8013cac:	08013ceb 	.word	0x08013ceb
 8013cb0:	08013cdb 	.word	0x08013cdb
 8013cb4:	08013ceb 	.word	0x08013ceb
 8013cb8:	08013ceb 	.word	0x08013ceb
 8013cbc:	08013ceb 	.word	0x08013ceb
 8013cc0:	08013ce3 	.word	0x08013ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013cc4:	f7fb fa58 	bl	800f178 <HAL_RCC_GetPCLK1Freq>
 8013cc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8013cca:	e014      	b.n	8013cf6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013ccc:	f7fb fa68 	bl	800f1a0 <HAL_RCC_GetPCLK2Freq>
 8013cd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8013cd2:	e010      	b.n	8013cf6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013cd4:	4b1a      	ldr	r3, [pc, #104]	; (8013d40 <UART_SetConfig+0x5c8>)
 8013cd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013cd8:	e00d      	b.n	8013cf6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013cda:	f7fb f99b 	bl	800f014 <HAL_RCC_GetSysClockFreq>
 8013cde:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8013ce0:	e009      	b.n	8013cf6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013ce6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013ce8:	e005      	b.n	8013cf6 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8013cea:	2300      	movs	r3, #0
 8013cec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8013cee:	2301      	movs	r3, #1
 8013cf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8013cf4:	bf00      	nop
    }

    if (pclk != 0U)
 8013cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d028      	beq.n	8013d4e <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013cfc:	697b      	ldr	r3, [r7, #20]
 8013cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d00:	4a10      	ldr	r2, [pc, #64]	; (8013d44 <UART_SetConfig+0x5cc>)
 8013d02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013d06:	461a      	mov	r2, r3
 8013d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8013d0e:	697b      	ldr	r3, [r7, #20]
 8013d10:	685b      	ldr	r3, [r3, #4]
 8013d12:	085b      	lsrs	r3, r3, #1
 8013d14:	441a      	add	r2, r3
 8013d16:	697b      	ldr	r3, [r7, #20]
 8013d18:	685b      	ldr	r3, [r3, #4]
 8013d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8013d1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013d20:	6a3b      	ldr	r3, [r7, #32]
 8013d22:	2b0f      	cmp	r3, #15
 8013d24:	d910      	bls.n	8013d48 <UART_SetConfig+0x5d0>
 8013d26:	6a3b      	ldr	r3, [r7, #32]
 8013d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013d2c:	d20c      	bcs.n	8013d48 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013d2e:	6a3b      	ldr	r3, [r7, #32]
 8013d30:	b29a      	uxth	r2, r3
 8013d32:	697b      	ldr	r3, [r7, #20]
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	60da      	str	r2, [r3, #12]
 8013d38:	e009      	b.n	8013d4e <UART_SetConfig+0x5d6>
 8013d3a:	bf00      	nop
 8013d3c:	40008000 	.word	0x40008000
 8013d40:	00f42400 	.word	0x00f42400
 8013d44:	0801aaec 	.word	0x0801aaec
      }
      else
      {
        ret = HAL_ERROR;
 8013d48:	2301      	movs	r3, #1
 8013d4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013d4e:	697b      	ldr	r3, [r7, #20]
 8013d50:	2201      	movs	r2, #1
 8013d52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8013d56:	697b      	ldr	r3, [r7, #20]
 8013d58:	2201      	movs	r2, #1
 8013d5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013d5e:	697b      	ldr	r3, [r7, #20]
 8013d60:	2200      	movs	r2, #0
 8013d62:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8013d64:	697b      	ldr	r3, [r7, #20]
 8013d66:	2200      	movs	r2, #0
 8013d68:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8013d6a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8013d6e:	4618      	mov	r0, r3
 8013d70:	3730      	adds	r7, #48	; 0x30
 8013d72:	46bd      	mov	sp, r7
 8013d74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08013d78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013d78:	b480      	push	{r7}
 8013d7a:	b083      	sub	sp, #12
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d84:	f003 0301 	and.w	r3, r3, #1
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d00a      	beq.n	8013da2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	685b      	ldr	r3, [r3, #4]
 8013d92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	430a      	orrs	r2, r1
 8013da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013da6:	f003 0302 	and.w	r3, r3, #2
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d00a      	beq.n	8013dc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	685b      	ldr	r3, [r3, #4]
 8013db4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	430a      	orrs	r2, r1
 8013dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013dc8:	f003 0304 	and.w	r3, r3, #4
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d00a      	beq.n	8013de6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	685b      	ldr	r3, [r3, #4]
 8013dd6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	430a      	orrs	r2, r1
 8013de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013dea:	f003 0308 	and.w	r3, r3, #8
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d00a      	beq.n	8013e08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	685b      	ldr	r3, [r3, #4]
 8013df8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	430a      	orrs	r2, r1
 8013e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e0c:	f003 0310 	and.w	r3, r3, #16
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d00a      	beq.n	8013e2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	689b      	ldr	r3, [r3, #8]
 8013e1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	430a      	orrs	r2, r1
 8013e28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e2e:	f003 0320 	and.w	r3, r3, #32
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d00a      	beq.n	8013e4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	689b      	ldr	r3, [r3, #8]
 8013e3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	430a      	orrs	r2, r1
 8013e4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d01a      	beq.n	8013e8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	685b      	ldr	r3, [r3, #4]
 8013e5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	430a      	orrs	r2, r1
 8013e6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013e72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013e76:	d10a      	bne.n	8013e8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	685b      	ldr	r3, [r3, #4]
 8013e7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	430a      	orrs	r2, r1
 8013e8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d00a      	beq.n	8013eb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	685b      	ldr	r3, [r3, #4]
 8013ea0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	430a      	orrs	r2, r1
 8013eae:	605a      	str	r2, [r3, #4]
  }
}
 8013eb0:	bf00      	nop
 8013eb2:	370c      	adds	r7, #12
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eba:	4770      	bx	lr

08013ebc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	b098      	sub	sp, #96	; 0x60
 8013ec0:	af02      	add	r7, sp, #8
 8013ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	2200      	movs	r2, #0
 8013ec8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013ecc:	f7f7 f880 	bl	800afd0 <HAL_GetTick>
 8013ed0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	f003 0308 	and.w	r3, r3, #8
 8013edc:	2b08      	cmp	r3, #8
 8013ede:	d12f      	bne.n	8013f40 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013ee0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013ee4:	9300      	str	r3, [sp, #0]
 8013ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013ee8:	2200      	movs	r2, #0
 8013eea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8013eee:	6878      	ldr	r0, [r7, #4]
 8013ef0:	f000 f88e 	bl	8014010 <UART_WaitOnFlagUntilTimeout>
 8013ef4:	4603      	mov	r3, r0
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d022      	beq.n	8013f40 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f02:	e853 3f00 	ldrex	r3, [r3]
 8013f06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013f0e:	653b      	str	r3, [r7, #80]	; 0x50
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	461a      	mov	r2, r3
 8013f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f18:	647b      	str	r3, [r7, #68]	; 0x44
 8013f1a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013f1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013f20:	e841 2300 	strex	r3, r2, [r1]
 8013f24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d1e6      	bne.n	8013efa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	2220      	movs	r2, #32
 8013f30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	2200      	movs	r2, #0
 8013f38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013f3c:	2303      	movs	r3, #3
 8013f3e:	e063      	b.n	8014008 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	f003 0304 	and.w	r3, r3, #4
 8013f4a:	2b04      	cmp	r3, #4
 8013f4c:	d149      	bne.n	8013fe2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013f4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013f52:	9300      	str	r3, [sp, #0]
 8013f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013f56:	2200      	movs	r2, #0
 8013f58:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8013f5c:	6878      	ldr	r0, [r7, #4]
 8013f5e:	f000 f857 	bl	8014010 <UART_WaitOnFlagUntilTimeout>
 8013f62:	4603      	mov	r3, r0
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d03c      	beq.n	8013fe2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f70:	e853 3f00 	ldrex	r3, [r3]
 8013f74:	623b      	str	r3, [r7, #32]
   return(result);
 8013f76:	6a3b      	ldr	r3, [r7, #32]
 8013f78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	461a      	mov	r2, r3
 8013f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f86:	633b      	str	r3, [r7, #48]	; 0x30
 8013f88:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f8e:	e841 2300 	strex	r3, r2, [r1]
 8013f92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d1e6      	bne.n	8013f68 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	3308      	adds	r3, #8
 8013fa0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013fa2:	693b      	ldr	r3, [r7, #16]
 8013fa4:	e853 3f00 	ldrex	r3, [r3]
 8013fa8:	60fb      	str	r3, [r7, #12]
   return(result);
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	f023 0301 	bic.w	r3, r3, #1
 8013fb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	3308      	adds	r3, #8
 8013fb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013fba:	61fa      	str	r2, [r7, #28]
 8013fbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013fbe:	69b9      	ldr	r1, [r7, #24]
 8013fc0:	69fa      	ldr	r2, [r7, #28]
 8013fc2:	e841 2300 	strex	r3, r2, [r1]
 8013fc6:	617b      	str	r3, [r7, #20]
   return(result);
 8013fc8:	697b      	ldr	r3, [r7, #20]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d1e5      	bne.n	8013f9a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	2220      	movs	r2, #32
 8013fd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	2200      	movs	r2, #0
 8013fda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013fde:	2303      	movs	r3, #3
 8013fe0:	e012      	b.n	8014008 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	2220      	movs	r2, #32
 8013fe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	2220      	movs	r2, #32
 8013fee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	2200      	movs	r2, #0
 8013ff6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	2200      	movs	r2, #0
 8014002:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014006:	2300      	movs	r3, #0
}
 8014008:	4618      	mov	r0, r3
 801400a:	3758      	adds	r7, #88	; 0x58
 801400c:	46bd      	mov	sp, r7
 801400e:	bd80      	pop	{r7, pc}

08014010 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8014010:	b580      	push	{r7, lr}
 8014012:	b084      	sub	sp, #16
 8014014:	af00      	add	r7, sp, #0
 8014016:	60f8      	str	r0, [r7, #12]
 8014018:	60b9      	str	r1, [r7, #8]
 801401a:	603b      	str	r3, [r7, #0]
 801401c:	4613      	mov	r3, r2
 801401e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014020:	e049      	b.n	80140b6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014022:	69bb      	ldr	r3, [r7, #24]
 8014024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014028:	d045      	beq.n	80140b6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801402a:	f7f6 ffd1 	bl	800afd0 <HAL_GetTick>
 801402e:	4602      	mov	r2, r0
 8014030:	683b      	ldr	r3, [r7, #0]
 8014032:	1ad3      	subs	r3, r2, r3
 8014034:	69ba      	ldr	r2, [r7, #24]
 8014036:	429a      	cmp	r2, r3
 8014038:	d302      	bcc.n	8014040 <UART_WaitOnFlagUntilTimeout+0x30>
 801403a:	69bb      	ldr	r3, [r7, #24]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d101      	bne.n	8014044 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8014040:	2303      	movs	r3, #3
 8014042:	e048      	b.n	80140d6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	f003 0304 	and.w	r3, r3, #4
 801404e:	2b00      	cmp	r3, #0
 8014050:	d031      	beq.n	80140b6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	69db      	ldr	r3, [r3, #28]
 8014058:	f003 0308 	and.w	r3, r3, #8
 801405c:	2b08      	cmp	r3, #8
 801405e:	d110      	bne.n	8014082 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	2208      	movs	r2, #8
 8014066:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8014068:	68f8      	ldr	r0, [r7, #12]
 801406a:	f000 f95b 	bl	8014324 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	2208      	movs	r2, #8
 8014072:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	2200      	movs	r2, #0
 801407a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 801407e:	2301      	movs	r3, #1
 8014080:	e029      	b.n	80140d6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	69db      	ldr	r3, [r3, #28]
 8014088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801408c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014090:	d111      	bne.n	80140b6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801409a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801409c:	68f8      	ldr	r0, [r7, #12]
 801409e:	f000 f941 	bl	8014324 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	2220      	movs	r2, #32
 80140a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	2200      	movs	r2, #0
 80140ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80140b2:	2303      	movs	r3, #3
 80140b4:	e00f      	b.n	80140d6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	69da      	ldr	r2, [r3, #28]
 80140bc:	68bb      	ldr	r3, [r7, #8]
 80140be:	4013      	ands	r3, r2
 80140c0:	68ba      	ldr	r2, [r7, #8]
 80140c2:	429a      	cmp	r2, r3
 80140c4:	bf0c      	ite	eq
 80140c6:	2301      	moveq	r3, #1
 80140c8:	2300      	movne	r3, #0
 80140ca:	b2db      	uxtb	r3, r3
 80140cc:	461a      	mov	r2, r3
 80140ce:	79fb      	ldrb	r3, [r7, #7]
 80140d0:	429a      	cmp	r2, r3
 80140d2:	d0a6      	beq.n	8014022 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80140d4:	2300      	movs	r3, #0
}
 80140d6:	4618      	mov	r0, r3
 80140d8:	3710      	adds	r7, #16
 80140da:	46bd      	mov	sp, r7
 80140dc:	bd80      	pop	{r7, pc}
	...

080140e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80140e0:	b480      	push	{r7}
 80140e2:	b0a3      	sub	sp, #140	; 0x8c
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	60f8      	str	r0, [r7, #12]
 80140e8:	60b9      	str	r1, [r7, #8]
 80140ea:	4613      	mov	r3, r2
 80140ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	68ba      	ldr	r2, [r7, #8]
 80140f2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	88fa      	ldrh	r2, [r7, #6]
 80140f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	88fa      	ldrh	r2, [r7, #6]
 8014100:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	2200      	movs	r2, #0
 8014108:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	689b      	ldr	r3, [r3, #8]
 801410e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014112:	d10e      	bne.n	8014132 <UART_Start_Receive_IT+0x52>
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	691b      	ldr	r3, [r3, #16]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d105      	bne.n	8014128 <UART_Start_Receive_IT+0x48>
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8014122:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014126:	e02d      	b.n	8014184 <UART_Start_Receive_IT+0xa4>
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	22ff      	movs	r2, #255	; 0xff
 801412c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014130:	e028      	b.n	8014184 <UART_Start_Receive_IT+0xa4>
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	689b      	ldr	r3, [r3, #8]
 8014136:	2b00      	cmp	r3, #0
 8014138:	d10d      	bne.n	8014156 <UART_Start_Receive_IT+0x76>
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	691b      	ldr	r3, [r3, #16]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d104      	bne.n	801414c <UART_Start_Receive_IT+0x6c>
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	22ff      	movs	r2, #255	; 0xff
 8014146:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801414a:	e01b      	b.n	8014184 <UART_Start_Receive_IT+0xa4>
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	227f      	movs	r2, #127	; 0x7f
 8014150:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014154:	e016      	b.n	8014184 <UART_Start_Receive_IT+0xa4>
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	689b      	ldr	r3, [r3, #8]
 801415a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801415e:	d10d      	bne.n	801417c <UART_Start_Receive_IT+0x9c>
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	691b      	ldr	r3, [r3, #16]
 8014164:	2b00      	cmp	r3, #0
 8014166:	d104      	bne.n	8014172 <UART_Start_Receive_IT+0x92>
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	227f      	movs	r2, #127	; 0x7f
 801416c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014170:	e008      	b.n	8014184 <UART_Start_Receive_IT+0xa4>
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	223f      	movs	r2, #63	; 0x3f
 8014176:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801417a:	e003      	b.n	8014184 <UART_Start_Receive_IT+0xa4>
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	2200      	movs	r2, #0
 8014180:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	2200      	movs	r2, #0
 8014188:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	2222      	movs	r2, #34	; 0x22
 8014190:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	3308      	adds	r3, #8
 801419a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801419c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801419e:	e853 3f00 	ldrex	r3, [r3]
 80141a2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80141a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80141a6:	f043 0301 	orr.w	r3, r3, #1
 80141aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	3308      	adds	r3, #8
 80141b4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80141b8:	673a      	str	r2, [r7, #112]	; 0x70
 80141ba:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141bc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80141be:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80141c0:	e841 2300 	strex	r3, r2, [r1]
 80141c4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80141c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d1e3      	bne.n	8014194 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80141d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80141d4:	d14f      	bne.n	8014276 <UART_Start_Receive_IT+0x196>
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80141dc:	88fa      	ldrh	r2, [r7, #6]
 80141de:	429a      	cmp	r2, r3
 80141e0:	d349      	bcc.n	8014276 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	689b      	ldr	r3, [r3, #8]
 80141e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80141ea:	d107      	bne.n	80141fc <UART_Start_Receive_IT+0x11c>
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	691b      	ldr	r3, [r3, #16]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d103      	bne.n	80141fc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	4a47      	ldr	r2, [pc, #284]	; (8014314 <UART_Start_Receive_IT+0x234>)
 80141f8:	675a      	str	r2, [r3, #116]	; 0x74
 80141fa:	e002      	b.n	8014202 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	4a46      	ldr	r2, [pc, #280]	; (8014318 <UART_Start_Receive_IT+0x238>)
 8014200:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	691b      	ldr	r3, [r3, #16]
 8014206:	2b00      	cmp	r3, #0
 8014208:	d01a      	beq.n	8014240 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014212:	e853 3f00 	ldrex	r3, [r3]
 8014216:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801421a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801421e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	461a      	mov	r2, r3
 8014228:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801422c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801422e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014230:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014232:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014234:	e841 2300 	strex	r3, r2, [r1]
 8014238:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801423a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801423c:	2b00      	cmp	r3, #0
 801423e:	d1e4      	bne.n	801420a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	3308      	adds	r3, #8
 8014246:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801424a:	e853 3f00 	ldrex	r3, [r3]
 801424e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014256:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	3308      	adds	r3, #8
 801425e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014260:	64ba      	str	r2, [r7, #72]	; 0x48
 8014262:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014264:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014266:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014268:	e841 2300 	strex	r3, r2, [r1]
 801426c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801426e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014270:	2b00      	cmp	r3, #0
 8014272:	d1e5      	bne.n	8014240 <UART_Start_Receive_IT+0x160>
 8014274:	e046      	b.n	8014304 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	689b      	ldr	r3, [r3, #8]
 801427a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801427e:	d107      	bne.n	8014290 <UART_Start_Receive_IT+0x1b0>
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	691b      	ldr	r3, [r3, #16]
 8014284:	2b00      	cmp	r3, #0
 8014286:	d103      	bne.n	8014290 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	4a24      	ldr	r2, [pc, #144]	; (801431c <UART_Start_Receive_IT+0x23c>)
 801428c:	675a      	str	r2, [r3, #116]	; 0x74
 801428e:	e002      	b.n	8014296 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	4a23      	ldr	r2, [pc, #140]	; (8014320 <UART_Start_Receive_IT+0x240>)
 8014294:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	691b      	ldr	r3, [r3, #16]
 801429a:	2b00      	cmp	r3, #0
 801429c:	d019      	beq.n	80142d2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142a6:	e853 3f00 	ldrex	r3, [r3]
 80142aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80142ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ae:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80142b2:	677b      	str	r3, [r7, #116]	; 0x74
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	461a      	mov	r2, r3
 80142ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80142bc:	637b      	str	r3, [r7, #52]	; 0x34
 80142be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80142c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80142c4:	e841 2300 	strex	r3, r2, [r1]
 80142c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80142ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d1e6      	bne.n	801429e <UART_Start_Receive_IT+0x1be>
 80142d0:	e018      	b.n	8014304 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142d8:	697b      	ldr	r3, [r7, #20]
 80142da:	e853 3f00 	ldrex	r3, [r3]
 80142de:	613b      	str	r3, [r7, #16]
   return(result);
 80142e0:	693b      	ldr	r3, [r7, #16]
 80142e2:	f043 0320 	orr.w	r3, r3, #32
 80142e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	461a      	mov	r2, r3
 80142ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80142f0:	623b      	str	r3, [r7, #32]
 80142f2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142f4:	69f9      	ldr	r1, [r7, #28]
 80142f6:	6a3a      	ldr	r2, [r7, #32]
 80142f8:	e841 2300 	strex	r3, r2, [r1]
 80142fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80142fe:	69bb      	ldr	r3, [r7, #24]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d1e6      	bne.n	80142d2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8014304:	2300      	movs	r3, #0
}
 8014306:	4618      	mov	r0, r3
 8014308:	378c      	adds	r7, #140	; 0x8c
 801430a:	46bd      	mov	sp, r7
 801430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014310:	4770      	bx	lr
 8014312:	bf00      	nop
 8014314:	08014b45 	.word	0x08014b45
 8014318:	080147e5 	.word	0x080147e5
 801431c:	0801462d 	.word	0x0801462d
 8014320:	08014475 	.word	0x08014475

08014324 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8014324:	b480      	push	{r7}
 8014326:	b095      	sub	sp, #84	; 0x54
 8014328:	af00      	add	r7, sp, #0
 801432a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014334:	e853 3f00 	ldrex	r3, [r3]
 8014338:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801433c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014340:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	461a      	mov	r2, r3
 8014348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801434a:	643b      	str	r3, [r7, #64]	; 0x40
 801434c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801434e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014350:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014352:	e841 2300 	strex	r3, r2, [r1]
 8014356:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801435a:	2b00      	cmp	r3, #0
 801435c:	d1e6      	bne.n	801432c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	3308      	adds	r3, #8
 8014364:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014366:	6a3b      	ldr	r3, [r7, #32]
 8014368:	e853 3f00 	ldrex	r3, [r3]
 801436c:	61fb      	str	r3, [r7, #28]
   return(result);
 801436e:	69fb      	ldr	r3, [r7, #28]
 8014370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014374:	f023 0301 	bic.w	r3, r3, #1
 8014378:	64bb      	str	r3, [r7, #72]	; 0x48
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	681b      	ldr	r3, [r3, #0]
 801437e:	3308      	adds	r3, #8
 8014380:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014382:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014384:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014386:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801438a:	e841 2300 	strex	r3, r2, [r1]
 801438e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014392:	2b00      	cmp	r3, #0
 8014394:	d1e3      	bne.n	801435e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801439a:	2b01      	cmp	r3, #1
 801439c:	d118      	bne.n	80143d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	e853 3f00 	ldrex	r3, [r3]
 80143aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80143ac:	68bb      	ldr	r3, [r7, #8]
 80143ae:	f023 0310 	bic.w	r3, r3, #16
 80143b2:	647b      	str	r3, [r7, #68]	; 0x44
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	461a      	mov	r2, r3
 80143ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80143bc:	61bb      	str	r3, [r7, #24]
 80143be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143c0:	6979      	ldr	r1, [r7, #20]
 80143c2:	69ba      	ldr	r2, [r7, #24]
 80143c4:	e841 2300 	strex	r3, r2, [r1]
 80143c8:	613b      	str	r3, [r7, #16]
   return(result);
 80143ca:	693b      	ldr	r3, [r7, #16]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d1e6      	bne.n	801439e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	2220      	movs	r2, #32
 80143d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	2200      	movs	r2, #0
 80143dc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	2200      	movs	r2, #0
 80143e2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80143e4:	bf00      	nop
 80143e6:	3754      	adds	r7, #84	; 0x54
 80143e8:	46bd      	mov	sp, r7
 80143ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ee:	4770      	bx	lr

080143f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80143f0:	b580      	push	{r7, lr}
 80143f2:	b084      	sub	sp, #16
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	2200      	movs	r2, #0
 8014402:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	2200      	movs	r2, #0
 801440a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801440e:	68f8      	ldr	r0, [r7, #12]
 8014410:	f7ff f99c 	bl	801374c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014414:	bf00      	nop
 8014416:	3710      	adds	r7, #16
 8014418:	46bd      	mov	sp, r7
 801441a:	bd80      	pop	{r7, pc}

0801441c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801441c:	b580      	push	{r7, lr}
 801441e:	b088      	sub	sp, #32
 8014420:	af00      	add	r7, sp, #0
 8014422:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	e853 3f00 	ldrex	r3, [r3]
 8014430:	60bb      	str	r3, [r7, #8]
   return(result);
 8014432:	68bb      	ldr	r3, [r7, #8]
 8014434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014438:	61fb      	str	r3, [r7, #28]
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	461a      	mov	r2, r3
 8014440:	69fb      	ldr	r3, [r7, #28]
 8014442:	61bb      	str	r3, [r7, #24]
 8014444:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014446:	6979      	ldr	r1, [r7, #20]
 8014448:	69ba      	ldr	r2, [r7, #24]
 801444a:	e841 2300 	strex	r3, r2, [r1]
 801444e:	613b      	str	r3, [r7, #16]
   return(result);
 8014450:	693b      	ldr	r3, [r7, #16]
 8014452:	2b00      	cmp	r3, #0
 8014454:	d1e6      	bne.n	8014424 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	2220      	movs	r2, #32
 801445a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	2200      	movs	r2, #0
 8014462:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8014464:	6878      	ldr	r0, [r7, #4]
 8014466:	f7ff f967 	bl	8013738 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801446a:	bf00      	nop
 801446c:	3720      	adds	r7, #32
 801446e:	46bd      	mov	sp, r7
 8014470:	bd80      	pop	{r7, pc}
	...

08014474 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8014474:	b580      	push	{r7, lr}
 8014476:	b09c      	sub	sp, #112	; 0x70
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014482:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801448c:	2b22      	cmp	r3, #34	; 0x22
 801448e:	f040 80be 	bne.w	801460e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014498:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801449c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80144a0:	b2d9      	uxtb	r1, r3
 80144a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80144a6:	b2da      	uxtb	r2, r3
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80144ac:	400a      	ands	r2, r1
 80144ae:	b2d2      	uxtb	r2, r2
 80144b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80144b6:	1c5a      	adds	r2, r3, #1
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80144c2:	b29b      	uxth	r3, r3
 80144c4:	3b01      	subs	r3, #1
 80144c6:	b29a      	uxth	r2, r3
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80144d4:	b29b      	uxth	r3, r3
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	f040 80a1 	bne.w	801461e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80144e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80144e4:	e853 3f00 	ldrex	r3, [r3]
 80144e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80144ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80144ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80144f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	461a      	mov	r2, r3
 80144f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80144fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80144fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80144fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014500:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014502:	e841 2300 	strex	r3, r2, [r1]
 8014506:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8014508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801450a:	2b00      	cmp	r3, #0
 801450c:	d1e6      	bne.n	80144dc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	3308      	adds	r3, #8
 8014514:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014518:	e853 3f00 	ldrex	r3, [r3]
 801451c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801451e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014520:	f023 0301 	bic.w	r3, r3, #1
 8014524:	667b      	str	r3, [r7, #100]	; 0x64
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	3308      	adds	r3, #8
 801452c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801452e:	647a      	str	r2, [r7, #68]	; 0x44
 8014530:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014532:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014534:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014536:	e841 2300 	strex	r3, r2, [r1]
 801453a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801453c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801453e:	2b00      	cmp	r3, #0
 8014540:	d1e5      	bne.n	801450e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	2220      	movs	r2, #32
 8014546:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	2200      	movs	r2, #0
 801454e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	2200      	movs	r2, #0
 8014554:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	4a33      	ldr	r2, [pc, #204]	; (8014628 <UART_RxISR_8BIT+0x1b4>)
 801455c:	4293      	cmp	r3, r2
 801455e:	d01f      	beq.n	80145a0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	685b      	ldr	r3, [r3, #4]
 8014566:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801456a:	2b00      	cmp	r3, #0
 801456c:	d018      	beq.n	80145a0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014576:	e853 3f00 	ldrex	r3, [r3]
 801457a:	623b      	str	r3, [r7, #32]
   return(result);
 801457c:	6a3b      	ldr	r3, [r7, #32]
 801457e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8014582:	663b      	str	r3, [r7, #96]	; 0x60
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	461a      	mov	r2, r3
 801458a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801458c:	633b      	str	r3, [r7, #48]	; 0x30
 801458e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014590:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014594:	e841 2300 	strex	r3, r2, [r1]
 8014598:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801459a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801459c:	2b00      	cmp	r3, #0
 801459e:	d1e6      	bne.n	801456e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80145a4:	2b01      	cmp	r3, #1
 80145a6:	d12e      	bne.n	8014606 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	2200      	movs	r2, #0
 80145ac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145b4:	693b      	ldr	r3, [r7, #16]
 80145b6:	e853 3f00 	ldrex	r3, [r3]
 80145ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	f023 0310 	bic.w	r3, r3, #16
 80145c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	461a      	mov	r2, r3
 80145ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80145cc:	61fb      	str	r3, [r7, #28]
 80145ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80145d0:	69b9      	ldr	r1, [r7, #24]
 80145d2:	69fa      	ldr	r2, [r7, #28]
 80145d4:	e841 2300 	strex	r3, r2, [r1]
 80145d8:	617b      	str	r3, [r7, #20]
   return(result);
 80145da:	697b      	ldr	r3, [r7, #20]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d1e6      	bne.n	80145ae <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	69db      	ldr	r3, [r3, #28]
 80145e6:	f003 0310 	and.w	r3, r3, #16
 80145ea:	2b10      	cmp	r3, #16
 80145ec:	d103      	bne.n	80145f6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	2210      	movs	r2, #16
 80145f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80145fc:	4619      	mov	r1, r3
 80145fe:	6878      	ldr	r0, [r7, #4]
 8014600:	f7ff f8ae 	bl	8013760 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014604:	e00b      	b.n	801461e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8014606:	6878      	ldr	r0, [r7, #4]
 8014608:	f7ee fe1a 	bl	8003240 <HAL_UART_RxCpltCallback>
}
 801460c:	e007      	b.n	801461e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	699a      	ldr	r2, [r3, #24]
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	f042 0208 	orr.w	r2, r2, #8
 801461c:	619a      	str	r2, [r3, #24]
}
 801461e:	bf00      	nop
 8014620:	3770      	adds	r7, #112	; 0x70
 8014622:	46bd      	mov	sp, r7
 8014624:	bd80      	pop	{r7, pc}
 8014626:	bf00      	nop
 8014628:	40008000 	.word	0x40008000

0801462c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801462c:	b580      	push	{r7, lr}
 801462e:	b09c      	sub	sp, #112	; 0x70
 8014630:	af00      	add	r7, sp, #0
 8014632:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801463a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014644:	2b22      	cmp	r3, #34	; 0x22
 8014646:	f040 80be 	bne.w	80147c6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014650:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014658:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801465a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 801465e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8014662:	4013      	ands	r3, r2
 8014664:	b29a      	uxth	r2, r3
 8014666:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014668:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801466e:	1c9a      	adds	r2, r3, #2
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801467a:	b29b      	uxth	r3, r3
 801467c:	3b01      	subs	r3, #1
 801467e:	b29a      	uxth	r2, r3
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801468c:	b29b      	uxth	r3, r3
 801468e:	2b00      	cmp	r3, #0
 8014690:	f040 80a1 	bne.w	80147d6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801469a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801469c:	e853 3f00 	ldrex	r3, [r3]
 80146a0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80146a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80146a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80146a8:	667b      	str	r3, [r7, #100]	; 0x64
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	461a      	mov	r2, r3
 80146b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80146b2:	657b      	str	r3, [r7, #84]	; 0x54
 80146b4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80146b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80146b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80146ba:	e841 2300 	strex	r3, r2, [r1]
 80146be:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80146c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d1e6      	bne.n	8014694 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	3308      	adds	r3, #8
 80146cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80146ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146d0:	e853 3f00 	ldrex	r3, [r3]
 80146d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80146d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146d8:	f023 0301 	bic.w	r3, r3, #1
 80146dc:	663b      	str	r3, [r7, #96]	; 0x60
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	3308      	adds	r3, #8
 80146e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80146e6:	643a      	str	r2, [r7, #64]	; 0x40
 80146e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80146ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80146ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80146ee:	e841 2300 	strex	r3, r2, [r1]
 80146f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80146f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d1e5      	bne.n	80146c6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	2220      	movs	r2, #32
 80146fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	2200      	movs	r2, #0
 8014706:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	2200      	movs	r2, #0
 801470c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	4a33      	ldr	r2, [pc, #204]	; (80147e0 <UART_RxISR_16BIT+0x1b4>)
 8014714:	4293      	cmp	r3, r2
 8014716:	d01f      	beq.n	8014758 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	685b      	ldr	r3, [r3, #4]
 801471e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014722:	2b00      	cmp	r3, #0
 8014724:	d018      	beq.n	8014758 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801472c:	6a3b      	ldr	r3, [r7, #32]
 801472e:	e853 3f00 	ldrex	r3, [r3]
 8014732:	61fb      	str	r3, [r7, #28]
   return(result);
 8014734:	69fb      	ldr	r3, [r7, #28]
 8014736:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801473a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	461a      	mov	r2, r3
 8014742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014744:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014746:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014748:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801474a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801474c:	e841 2300 	strex	r3, r2, [r1]
 8014750:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014754:	2b00      	cmp	r3, #0
 8014756:	d1e6      	bne.n	8014726 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801475c:	2b01      	cmp	r3, #1
 801475e:	d12e      	bne.n	80147be <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	2200      	movs	r2, #0
 8014764:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	e853 3f00 	ldrex	r3, [r3]
 8014772:	60bb      	str	r3, [r7, #8]
   return(result);
 8014774:	68bb      	ldr	r3, [r7, #8]
 8014776:	f023 0310 	bic.w	r3, r3, #16
 801477a:	65bb      	str	r3, [r7, #88]	; 0x58
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	461a      	mov	r2, r3
 8014782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014784:	61bb      	str	r3, [r7, #24]
 8014786:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014788:	6979      	ldr	r1, [r7, #20]
 801478a:	69ba      	ldr	r2, [r7, #24]
 801478c:	e841 2300 	strex	r3, r2, [r1]
 8014790:	613b      	str	r3, [r7, #16]
   return(result);
 8014792:	693b      	ldr	r3, [r7, #16]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d1e6      	bne.n	8014766 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	69db      	ldr	r3, [r3, #28]
 801479e:	f003 0310 	and.w	r3, r3, #16
 80147a2:	2b10      	cmp	r3, #16
 80147a4:	d103      	bne.n	80147ae <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	2210      	movs	r2, #16
 80147ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80147b4:	4619      	mov	r1, r3
 80147b6:	6878      	ldr	r0, [r7, #4]
 80147b8:	f7fe ffd2 	bl	8013760 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80147bc:	e00b      	b.n	80147d6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80147be:	6878      	ldr	r0, [r7, #4]
 80147c0:	f7ee fd3e 	bl	8003240 <HAL_UART_RxCpltCallback>
}
 80147c4:	e007      	b.n	80147d6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	699a      	ldr	r2, [r3, #24]
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	f042 0208 	orr.w	r2, r2, #8
 80147d4:	619a      	str	r2, [r3, #24]
}
 80147d6:	bf00      	nop
 80147d8:	3770      	adds	r7, #112	; 0x70
 80147da:	46bd      	mov	sp, r7
 80147dc:	bd80      	pop	{r7, pc}
 80147de:	bf00      	nop
 80147e0:	40008000 	.word	0x40008000

080147e4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b0ac      	sub	sp, #176	; 0xb0
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80147f2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	69db      	ldr	r3, [r3, #28]
 80147fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	689b      	ldr	r3, [r3, #8]
 8014810:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801481a:	2b22      	cmp	r3, #34	; 0x22
 801481c:	f040 8182 	bne.w	8014b24 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014826:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801482a:	e125      	b.n	8014a78 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014832:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8014836:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801483a:	b2d9      	uxtb	r1, r3
 801483c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8014840:	b2da      	uxtb	r2, r3
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014846:	400a      	ands	r2, r1
 8014848:	b2d2      	uxtb	r2, r2
 801484a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014850:	1c5a      	adds	r2, r3, #1
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801485c:	b29b      	uxth	r3, r3
 801485e:	3b01      	subs	r3, #1
 8014860:	b29a      	uxth	r2, r3
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	69db      	ldr	r3, [r3, #28]
 801486e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8014872:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014876:	f003 0307 	and.w	r3, r3, #7
 801487a:	2b00      	cmp	r3, #0
 801487c:	d053      	beq.n	8014926 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801487e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014882:	f003 0301 	and.w	r3, r3, #1
 8014886:	2b00      	cmp	r3, #0
 8014888:	d011      	beq.n	80148ae <UART_RxISR_8BIT_FIFOEN+0xca>
 801488a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801488e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014892:	2b00      	cmp	r3, #0
 8014894:	d00b      	beq.n	80148ae <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	2201      	movs	r2, #1
 801489c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80148a4:	f043 0201 	orr.w	r2, r3, #1
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80148ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80148b2:	f003 0302 	and.w	r3, r3, #2
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d011      	beq.n	80148de <UART_RxISR_8BIT_FIFOEN+0xfa>
 80148ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80148be:	f003 0301 	and.w	r3, r3, #1
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d00b      	beq.n	80148de <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	2202      	movs	r2, #2
 80148cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80148d4:	f043 0204 	orr.w	r2, r3, #4
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80148de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80148e2:	f003 0304 	and.w	r3, r3, #4
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d011      	beq.n	801490e <UART_RxISR_8BIT_FIFOEN+0x12a>
 80148ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80148ee:	f003 0301 	and.w	r3, r3, #1
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d00b      	beq.n	801490e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	2204      	movs	r2, #4
 80148fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014904:	f043 0202 	orr.w	r2, r3, #2
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014914:	2b00      	cmp	r3, #0
 8014916:	d006      	beq.n	8014926 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014918:	6878      	ldr	r0, [r7, #4]
 801491a:	f7fe ff17 	bl	801374c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	2200      	movs	r2, #0
 8014922:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801492c:	b29b      	uxth	r3, r3
 801492e:	2b00      	cmp	r3, #0
 8014930:	f040 80a2 	bne.w	8014a78 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801493a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801493c:	e853 3f00 	ldrex	r3, [r3]
 8014940:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8014942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014948:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	461a      	mov	r2, r3
 8014952:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014956:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014958:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801495a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801495c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801495e:	e841 2300 	strex	r3, r2, [r1]
 8014962:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8014964:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014966:	2b00      	cmp	r3, #0
 8014968:	d1e4      	bne.n	8014934 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	3308      	adds	r3, #8
 8014970:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014974:	e853 3f00 	ldrex	r3, [r3]
 8014978:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801497a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801497c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014980:	f023 0301 	bic.w	r3, r3, #1
 8014984:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	3308      	adds	r3, #8
 801498e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014992:	66ba      	str	r2, [r7, #104]	; 0x68
 8014994:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014996:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8014998:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801499a:	e841 2300 	strex	r3, r2, [r1]
 801499e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80149a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d1e1      	bne.n	801496a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	2220      	movs	r2, #32
 80149aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	2200      	movs	r2, #0
 80149b2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	2200      	movs	r2, #0
 80149b8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	4a5f      	ldr	r2, [pc, #380]	; (8014b3c <UART_RxISR_8BIT_FIFOEN+0x358>)
 80149c0:	4293      	cmp	r3, r2
 80149c2:	d021      	beq.n	8014a08 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	685b      	ldr	r3, [r3, #4]
 80149ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d01a      	beq.n	8014a08 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80149d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80149da:	e853 3f00 	ldrex	r3, [r3]
 80149de:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80149e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80149e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80149e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	461a      	mov	r2, r3
 80149f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80149f4:	657b      	str	r3, [r7, #84]	; 0x54
 80149f6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80149f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80149fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80149fc:	e841 2300 	strex	r3, r2, [r1]
 8014a00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d1e4      	bne.n	80149d2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a0c:	2b01      	cmp	r3, #1
 8014a0e:	d130      	bne.n	8014a72 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	2200      	movs	r2, #0
 8014a14:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a1e:	e853 3f00 	ldrex	r3, [r3]
 8014a22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8014a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a26:	f023 0310 	bic.w	r3, r3, #16
 8014a2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	461a      	mov	r2, r3
 8014a34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014a38:	643b      	str	r3, [r7, #64]	; 0x40
 8014a3a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014a3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014a40:	e841 2300 	strex	r3, r2, [r1]
 8014a44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d1e4      	bne.n	8014a16 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	69db      	ldr	r3, [r3, #28]
 8014a52:	f003 0310 	and.w	r3, r3, #16
 8014a56:	2b10      	cmp	r3, #16
 8014a58:	d103      	bne.n	8014a62 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	2210      	movs	r2, #16
 8014a60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014a68:	4619      	mov	r1, r3
 8014a6a:	6878      	ldr	r0, [r7, #4]
 8014a6c:	f7fe fe78 	bl	8013760 <HAL_UARTEx_RxEventCallback>
 8014a70:	e002      	b.n	8014a78 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8014a72:	6878      	ldr	r0, [r7, #4]
 8014a74:	f7ee fbe4 	bl	8003240 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8014a78:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d006      	beq.n	8014a8e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8014a80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014a84:	f003 0320 	and.w	r3, r3, #32
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	f47f aecf 	bne.w	801482c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014a94:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8014a98:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d049      	beq.n	8014b34 <UART_RxISR_8BIT_FIFOEN+0x350>
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014aa6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8014aaa:	429a      	cmp	r2, r3
 8014aac:	d242      	bcs.n	8014b34 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	3308      	adds	r3, #8
 8014ab4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014ab6:	6a3b      	ldr	r3, [r7, #32]
 8014ab8:	e853 3f00 	ldrex	r3, [r3]
 8014abc:	61fb      	str	r3, [r7, #28]
   return(result);
 8014abe:	69fb      	ldr	r3, [r7, #28]
 8014ac0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014ac4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	3308      	adds	r3, #8
 8014ace:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8014ad2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014ad4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ad6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014ad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014ada:	e841 2300 	strex	r3, r2, [r1]
 8014ade:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d1e3      	bne.n	8014aae <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	4a15      	ldr	r2, [pc, #84]	; (8014b40 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8014aea:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	e853 3f00 	ldrex	r3, [r3]
 8014af8:	60bb      	str	r3, [r7, #8]
   return(result);
 8014afa:	68bb      	ldr	r3, [r7, #8]
 8014afc:	f043 0320 	orr.w	r3, r3, #32
 8014b00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	461a      	mov	r2, r3
 8014b0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014b0e:	61bb      	str	r3, [r7, #24]
 8014b10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b12:	6979      	ldr	r1, [r7, #20]
 8014b14:	69ba      	ldr	r2, [r7, #24]
 8014b16:	e841 2300 	strex	r3, r2, [r1]
 8014b1a:	613b      	str	r3, [r7, #16]
   return(result);
 8014b1c:	693b      	ldr	r3, [r7, #16]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d1e4      	bne.n	8014aec <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014b22:	e007      	b.n	8014b34 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	699a      	ldr	r2, [r3, #24]
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	f042 0208 	orr.w	r2, r2, #8
 8014b32:	619a      	str	r2, [r3, #24]
}
 8014b34:	bf00      	nop
 8014b36:	37b0      	adds	r7, #176	; 0xb0
 8014b38:	46bd      	mov	sp, r7
 8014b3a:	bd80      	pop	{r7, pc}
 8014b3c:	40008000 	.word	0x40008000
 8014b40:	08014475 	.word	0x08014475

08014b44 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8014b44:	b580      	push	{r7, lr}
 8014b46:	b0ae      	sub	sp, #184	; 0xb8
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014b52:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	69db      	ldr	r3, [r3, #28]
 8014b5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	689b      	ldr	r3, [r3, #8]
 8014b70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014b7a:	2b22      	cmp	r3, #34	; 0x22
 8014b7c:	f040 8186 	bne.w	8014e8c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014b86:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8014b8a:	e129      	b.n	8014de0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b92:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8014b9e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8014ba2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8014ba6:	4013      	ands	r3, r2
 8014ba8:	b29a      	uxth	r2, r3
 8014baa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014bae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014bb4:	1c9a      	adds	r2, r3, #2
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014bc0:	b29b      	uxth	r3, r3
 8014bc2:	3b01      	subs	r3, #1
 8014bc4:	b29a      	uxth	r2, r3
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	69db      	ldr	r3, [r3, #28]
 8014bd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8014bd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014bda:	f003 0307 	and.w	r3, r3, #7
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d053      	beq.n	8014c8a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8014be2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014be6:	f003 0301 	and.w	r3, r3, #1
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d011      	beq.n	8014c12 <UART_RxISR_16BIT_FIFOEN+0xce>
 8014bee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d00b      	beq.n	8014c12 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	2201      	movs	r2, #1
 8014c00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014c08:	f043 0201 	orr.w	r2, r3, #1
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014c12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014c16:	f003 0302 	and.w	r3, r3, #2
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d011      	beq.n	8014c42 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8014c1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014c22:	f003 0301 	and.w	r3, r3, #1
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d00b      	beq.n	8014c42 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	2202      	movs	r2, #2
 8014c30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014c38:	f043 0204 	orr.w	r2, r3, #4
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014c42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014c46:	f003 0304 	and.w	r3, r3, #4
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d011      	beq.n	8014c72 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8014c4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014c52:	f003 0301 	and.w	r3, r3, #1
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d00b      	beq.n	8014c72 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	2204      	movs	r2, #4
 8014c60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014c68:	f043 0202 	orr.w	r2, r3, #2
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d006      	beq.n	8014c8a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014c7c:	6878      	ldr	r0, [r7, #4]
 8014c7e:	f7fe fd65 	bl	801374c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	2200      	movs	r2, #0
 8014c86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014c90:	b29b      	uxth	r3, r3
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	f040 80a4 	bne.w	8014de0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014ca0:	e853 3f00 	ldrex	r3, [r3]
 8014ca4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8014ca6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014cac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	461a      	mov	r2, r3
 8014cb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014cba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014cbe:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014cc0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8014cc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014cc6:	e841 2300 	strex	r3, r2, [r1]
 8014cca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8014ccc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d1e2      	bne.n	8014c98 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	3308      	adds	r3, #8
 8014cd8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014cda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014cdc:	e853 3f00 	ldrex	r3, [r3]
 8014ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8014ce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014ce8:	f023 0301 	bic.w	r3, r3, #1
 8014cec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	3308      	adds	r3, #8
 8014cf6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8014cfa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8014cfc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014cfe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8014d00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014d02:	e841 2300 	strex	r3, r2, [r1]
 8014d06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8014d08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d1e1      	bne.n	8014cd2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	2220      	movs	r2, #32
 8014d12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	2200      	movs	r2, #0
 8014d1a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	2200      	movs	r2, #0
 8014d20:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	4a5f      	ldr	r2, [pc, #380]	; (8014ea4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8014d28:	4293      	cmp	r3, r2
 8014d2a:	d021      	beq.n	8014d70 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	685b      	ldr	r3, [r3, #4]
 8014d32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d01a      	beq.n	8014d70 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d42:	e853 3f00 	ldrex	r3, [r3]
 8014d46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8014d48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014d4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8014d4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	461a      	mov	r2, r3
 8014d58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014d5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8014d5e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014d62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014d64:	e841 2300 	strex	r3, r2, [r1]
 8014d68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8014d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d1e4      	bne.n	8014d3a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d74:	2b01      	cmp	r3, #1
 8014d76:	d130      	bne.n	8014dda <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	2200      	movs	r2, #0
 8014d7c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d86:	e853 3f00 	ldrex	r3, [r3]
 8014d8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8014d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d8e:	f023 0310 	bic.w	r3, r3, #16
 8014d92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	461a      	mov	r2, r3
 8014d9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014da0:	647b      	str	r3, [r7, #68]	; 0x44
 8014da2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014da4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014da6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014da8:	e841 2300 	strex	r3, r2, [r1]
 8014dac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8014dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d1e4      	bne.n	8014d7e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	69db      	ldr	r3, [r3, #28]
 8014dba:	f003 0310 	and.w	r3, r3, #16
 8014dbe:	2b10      	cmp	r3, #16
 8014dc0:	d103      	bne.n	8014dca <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	2210      	movs	r2, #16
 8014dc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014dd0:	4619      	mov	r1, r3
 8014dd2:	6878      	ldr	r0, [r7, #4]
 8014dd4:	f7fe fcc4 	bl	8013760 <HAL_UARTEx_RxEventCallback>
 8014dd8:	e002      	b.n	8014de0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8014dda:	6878      	ldr	r0, [r7, #4]
 8014ddc:	f7ee fa30 	bl	8003240 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8014de0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d006      	beq.n	8014df6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8014de8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014dec:	f003 0320 	and.w	r3, r3, #32
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	f47f aecb 	bne.w	8014b8c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014dfc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8014e00:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d049      	beq.n	8014e9c <UART_RxISR_16BIT_FIFOEN+0x358>
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014e0e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8014e12:	429a      	cmp	r2, r3
 8014e14:	d242      	bcs.n	8014e9c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	3308      	adds	r3, #8
 8014e1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e20:	e853 3f00 	ldrex	r3, [r3]
 8014e24:	623b      	str	r3, [r7, #32]
   return(result);
 8014e26:	6a3b      	ldr	r3, [r7, #32]
 8014e28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014e2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	3308      	adds	r3, #8
 8014e36:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8014e3a:	633a      	str	r2, [r7, #48]	; 0x30
 8014e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014e42:	e841 2300 	strex	r3, r2, [r1]
 8014e46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d1e3      	bne.n	8014e16 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	4a15      	ldr	r2, [pc, #84]	; (8014ea8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8014e52:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e5a:	693b      	ldr	r3, [r7, #16]
 8014e5c:	e853 3f00 	ldrex	r3, [r3]
 8014e60:	60fb      	str	r3, [r7, #12]
   return(result);
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	f043 0320 	orr.w	r3, r3, #32
 8014e68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	461a      	mov	r2, r3
 8014e72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014e76:	61fb      	str	r3, [r7, #28]
 8014e78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e7a:	69b9      	ldr	r1, [r7, #24]
 8014e7c:	69fa      	ldr	r2, [r7, #28]
 8014e7e:	e841 2300 	strex	r3, r2, [r1]
 8014e82:	617b      	str	r3, [r7, #20]
   return(result);
 8014e84:	697b      	ldr	r3, [r7, #20]
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d1e4      	bne.n	8014e54 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014e8a:	e007      	b.n	8014e9c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	699a      	ldr	r2, [r3, #24]
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	f042 0208 	orr.w	r2, r2, #8
 8014e9a:	619a      	str	r2, [r3, #24]
}
 8014e9c:	bf00      	nop
 8014e9e:	37b8      	adds	r7, #184	; 0xb8
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	bd80      	pop	{r7, pc}
 8014ea4:	40008000 	.word	0x40008000
 8014ea8:	0801462d 	.word	0x0801462d

08014eac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8014eac:	b480      	push	{r7}
 8014eae:	b083      	sub	sp, #12
 8014eb0:	af00      	add	r7, sp, #0
 8014eb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8014eb4:	bf00      	nop
 8014eb6:	370c      	adds	r7, #12
 8014eb8:	46bd      	mov	sp, r7
 8014eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ebe:	4770      	bx	lr

08014ec0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8014ec0:	b480      	push	{r7}
 8014ec2:	b083      	sub	sp, #12
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8014ec8:	bf00      	nop
 8014eca:	370c      	adds	r7, #12
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ed2:	4770      	bx	lr

08014ed4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8014ed4:	b480      	push	{r7}
 8014ed6:	b083      	sub	sp, #12
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8014edc:	bf00      	nop
 8014ede:	370c      	adds	r7, #12
 8014ee0:	46bd      	mov	sp, r7
 8014ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee6:	4770      	bx	lr

08014ee8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8014ee8:	b480      	push	{r7}
 8014eea:	b085      	sub	sp, #20
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8014ef6:	2b01      	cmp	r3, #1
 8014ef8:	d101      	bne.n	8014efe <HAL_UARTEx_DisableFifoMode+0x16>
 8014efa:	2302      	movs	r3, #2
 8014efc:	e027      	b.n	8014f4e <HAL_UARTEx_DisableFifoMode+0x66>
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	2201      	movs	r2, #1
 8014f02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	2224      	movs	r2, #36	; 0x24
 8014f0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	681a      	ldr	r2, [r3, #0]
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	f022 0201 	bic.w	r2, r2, #1
 8014f24:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8014f2c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	2200      	movs	r2, #0
 8014f32:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	68fa      	ldr	r2, [r7, #12]
 8014f3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	2220      	movs	r2, #32
 8014f40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	2200      	movs	r2, #0
 8014f48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014f4c:	2300      	movs	r3, #0
}
 8014f4e:	4618      	mov	r0, r3
 8014f50:	3714      	adds	r7, #20
 8014f52:	46bd      	mov	sp, r7
 8014f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f58:	4770      	bx	lr

08014f5a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014f5a:	b580      	push	{r7, lr}
 8014f5c:	b084      	sub	sp, #16
 8014f5e:	af00      	add	r7, sp, #0
 8014f60:	6078      	str	r0, [r7, #4]
 8014f62:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8014f6a:	2b01      	cmp	r3, #1
 8014f6c:	d101      	bne.n	8014f72 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8014f6e:	2302      	movs	r3, #2
 8014f70:	e02d      	b.n	8014fce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	2201      	movs	r2, #1
 8014f76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	2224      	movs	r2, #36	; 0x24
 8014f7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	681a      	ldr	r2, [r3, #0]
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	f022 0201 	bic.w	r2, r2, #1
 8014f98:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	689b      	ldr	r3, [r3, #8]
 8014fa0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	683a      	ldr	r2, [r7, #0]
 8014faa:	430a      	orrs	r2, r1
 8014fac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014fae:	6878      	ldr	r0, [r7, #4]
 8014fb0:	f000 f850 	bl	8015054 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	68fa      	ldr	r2, [r7, #12]
 8014fba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	2220      	movs	r2, #32
 8014fc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	2200      	movs	r2, #0
 8014fc8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014fcc:	2300      	movs	r3, #0
}
 8014fce:	4618      	mov	r0, r3
 8014fd0:	3710      	adds	r7, #16
 8014fd2:	46bd      	mov	sp, r7
 8014fd4:	bd80      	pop	{r7, pc}

08014fd6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014fd6:	b580      	push	{r7, lr}
 8014fd8:	b084      	sub	sp, #16
 8014fda:	af00      	add	r7, sp, #0
 8014fdc:	6078      	str	r0, [r7, #4]
 8014fde:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8014fe6:	2b01      	cmp	r3, #1
 8014fe8:	d101      	bne.n	8014fee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8014fea:	2302      	movs	r3, #2
 8014fec:	e02d      	b.n	801504a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	2201      	movs	r2, #1
 8014ff2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	2224      	movs	r2, #36	; 0x24
 8014ffa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	681a      	ldr	r2, [r3, #0]
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	f022 0201 	bic.w	r2, r2, #1
 8015014:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	689b      	ldr	r3, [r3, #8]
 801501c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	683a      	ldr	r2, [r7, #0]
 8015026:	430a      	orrs	r2, r1
 8015028:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801502a:	6878      	ldr	r0, [r7, #4]
 801502c:	f000 f812 	bl	8015054 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	68fa      	ldr	r2, [r7, #12]
 8015036:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	2220      	movs	r2, #32
 801503c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	2200      	movs	r2, #0
 8015044:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8015048:	2300      	movs	r3, #0
}
 801504a:	4618      	mov	r0, r3
 801504c:	3710      	adds	r7, #16
 801504e:	46bd      	mov	sp, r7
 8015050:	bd80      	pop	{r7, pc}
	...

08015054 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8015054:	b480      	push	{r7}
 8015056:	b085      	sub	sp, #20
 8015058:	af00      	add	r7, sp, #0
 801505a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015060:	2b00      	cmp	r3, #0
 8015062:	d108      	bne.n	8015076 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	2201      	movs	r2, #1
 8015068:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	2201      	movs	r2, #1
 8015070:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8015074:	e031      	b.n	80150da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8015076:	2308      	movs	r3, #8
 8015078:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801507a:	2308      	movs	r3, #8
 801507c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	689b      	ldr	r3, [r3, #8]
 8015084:	0e5b      	lsrs	r3, r3, #25
 8015086:	b2db      	uxtb	r3, r3
 8015088:	f003 0307 	and.w	r3, r3, #7
 801508c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	689b      	ldr	r3, [r3, #8]
 8015094:	0f5b      	lsrs	r3, r3, #29
 8015096:	b2db      	uxtb	r3, r3
 8015098:	f003 0307 	and.w	r3, r3, #7
 801509c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801509e:	7bbb      	ldrb	r3, [r7, #14]
 80150a0:	7b3a      	ldrb	r2, [r7, #12]
 80150a2:	4911      	ldr	r1, [pc, #68]	; (80150e8 <UARTEx_SetNbDataToProcess+0x94>)
 80150a4:	5c8a      	ldrb	r2, [r1, r2]
 80150a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80150aa:	7b3a      	ldrb	r2, [r7, #12]
 80150ac:	490f      	ldr	r1, [pc, #60]	; (80150ec <UARTEx_SetNbDataToProcess+0x98>)
 80150ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80150b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80150b4:	b29a      	uxth	r2, r3
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80150bc:	7bfb      	ldrb	r3, [r7, #15]
 80150be:	7b7a      	ldrb	r2, [r7, #13]
 80150c0:	4909      	ldr	r1, [pc, #36]	; (80150e8 <UARTEx_SetNbDataToProcess+0x94>)
 80150c2:	5c8a      	ldrb	r2, [r1, r2]
 80150c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80150c8:	7b7a      	ldrb	r2, [r7, #13]
 80150ca:	4908      	ldr	r1, [pc, #32]	; (80150ec <UARTEx_SetNbDataToProcess+0x98>)
 80150cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80150ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80150d2:	b29a      	uxth	r2, r3
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80150da:	bf00      	nop
 80150dc:	3714      	adds	r7, #20
 80150de:	46bd      	mov	sp, r7
 80150e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150e4:	4770      	bx	lr
 80150e6:	bf00      	nop
 80150e8:	0801ab04 	.word	0x0801ab04
 80150ec:	0801ab0c 	.word	0x0801ab0c

080150f0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80150f0:	b480      	push	{r7}
 80150f2:	b08b      	sub	sp, #44	; 0x2c
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	60f8      	str	r0, [r7, #12]
 80150f8:	60b9      	str	r1, [r7, #8]
 80150fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	681a      	ldr	r2, [r3, #0]
 8015100:	68bb      	ldr	r3, [r7, #8]
 8015102:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015104:	697b      	ldr	r3, [r7, #20]
 8015106:	fa93 f3a3 	rbit	r3, r3
 801510a:	613b      	str	r3, [r7, #16]
  return result;
 801510c:	693b      	ldr	r3, [r7, #16]
 801510e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8015110:	69bb      	ldr	r3, [r7, #24]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d101      	bne.n	801511a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8015116:	2320      	movs	r3, #32
 8015118:	e003      	b.n	8015122 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 801511a:	69bb      	ldr	r3, [r7, #24]
 801511c:	fab3 f383 	clz	r3, r3
 8015120:	b2db      	uxtb	r3, r3
 8015122:	005b      	lsls	r3, r3, #1
 8015124:	2103      	movs	r1, #3
 8015126:	fa01 f303 	lsl.w	r3, r1, r3
 801512a:	43db      	mvns	r3, r3
 801512c:	401a      	ands	r2, r3
 801512e:	68bb      	ldr	r3, [r7, #8]
 8015130:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015132:	6a3b      	ldr	r3, [r7, #32]
 8015134:	fa93 f3a3 	rbit	r3, r3
 8015138:	61fb      	str	r3, [r7, #28]
  return result;
 801513a:	69fb      	ldr	r3, [r7, #28]
 801513c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015140:	2b00      	cmp	r3, #0
 8015142:	d101      	bne.n	8015148 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8015144:	2320      	movs	r3, #32
 8015146:	e003      	b.n	8015150 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8015148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801514a:	fab3 f383 	clz	r3, r3
 801514e:	b2db      	uxtb	r3, r3
 8015150:	005b      	lsls	r3, r3, #1
 8015152:	6879      	ldr	r1, [r7, #4]
 8015154:	fa01 f303 	lsl.w	r3, r1, r3
 8015158:	431a      	orrs	r2, r3
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	601a      	str	r2, [r3, #0]
}
 801515e:	bf00      	nop
 8015160:	372c      	adds	r7, #44	; 0x2c
 8015162:	46bd      	mov	sp, r7
 8015164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015168:	4770      	bx	lr

0801516a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 801516a:	b480      	push	{r7}
 801516c:	b085      	sub	sp, #20
 801516e:	af00      	add	r7, sp, #0
 8015170:	60f8      	str	r0, [r7, #12]
 8015172:	60b9      	str	r1, [r7, #8]
 8015174:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	685a      	ldr	r2, [r3, #4]
 801517a:	68bb      	ldr	r3, [r7, #8]
 801517c:	43db      	mvns	r3, r3
 801517e:	401a      	ands	r2, r3
 8015180:	68bb      	ldr	r3, [r7, #8]
 8015182:	6879      	ldr	r1, [r7, #4]
 8015184:	fb01 f303 	mul.w	r3, r1, r3
 8015188:	431a      	orrs	r2, r3
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	605a      	str	r2, [r3, #4]
}
 801518e:	bf00      	nop
 8015190:	3714      	adds	r7, #20
 8015192:	46bd      	mov	sp, r7
 8015194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015198:	4770      	bx	lr

0801519a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 801519a:	b480      	push	{r7}
 801519c:	b08b      	sub	sp, #44	; 0x2c
 801519e:	af00      	add	r7, sp, #0
 80151a0:	60f8      	str	r0, [r7, #12]
 80151a2:	60b9      	str	r1, [r7, #8]
 80151a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	689a      	ldr	r2, [r3, #8]
 80151aa:	68bb      	ldr	r3, [r7, #8]
 80151ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80151ae:	697b      	ldr	r3, [r7, #20]
 80151b0:	fa93 f3a3 	rbit	r3, r3
 80151b4:	613b      	str	r3, [r7, #16]
  return result;
 80151b6:	693b      	ldr	r3, [r7, #16]
 80151b8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80151ba:	69bb      	ldr	r3, [r7, #24]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d101      	bne.n	80151c4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80151c0:	2320      	movs	r3, #32
 80151c2:	e003      	b.n	80151cc <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80151c4:	69bb      	ldr	r3, [r7, #24]
 80151c6:	fab3 f383 	clz	r3, r3
 80151ca:	b2db      	uxtb	r3, r3
 80151cc:	005b      	lsls	r3, r3, #1
 80151ce:	2103      	movs	r1, #3
 80151d0:	fa01 f303 	lsl.w	r3, r1, r3
 80151d4:	43db      	mvns	r3, r3
 80151d6:	401a      	ands	r2, r3
 80151d8:	68bb      	ldr	r3, [r7, #8]
 80151da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80151dc:	6a3b      	ldr	r3, [r7, #32]
 80151de:	fa93 f3a3 	rbit	r3, r3
 80151e2:	61fb      	str	r3, [r7, #28]
  return result;
 80151e4:	69fb      	ldr	r3, [r7, #28]
 80151e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80151e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d101      	bne.n	80151f2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80151ee:	2320      	movs	r3, #32
 80151f0:	e003      	b.n	80151fa <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80151f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151f4:	fab3 f383 	clz	r3, r3
 80151f8:	b2db      	uxtb	r3, r3
 80151fa:	005b      	lsls	r3, r3, #1
 80151fc:	6879      	ldr	r1, [r7, #4]
 80151fe:	fa01 f303 	lsl.w	r3, r1, r3
 8015202:	431a      	orrs	r2, r3
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8015208:	bf00      	nop
 801520a:	372c      	adds	r7, #44	; 0x2c
 801520c:	46bd      	mov	sp, r7
 801520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015212:	4770      	bx	lr

08015214 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8015214:	b480      	push	{r7}
 8015216:	b08b      	sub	sp, #44	; 0x2c
 8015218:	af00      	add	r7, sp, #0
 801521a:	60f8      	str	r0, [r7, #12]
 801521c:	60b9      	str	r1, [r7, #8]
 801521e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	68da      	ldr	r2, [r3, #12]
 8015224:	68bb      	ldr	r3, [r7, #8]
 8015226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015228:	697b      	ldr	r3, [r7, #20]
 801522a:	fa93 f3a3 	rbit	r3, r3
 801522e:	613b      	str	r3, [r7, #16]
  return result;
 8015230:	693b      	ldr	r3, [r7, #16]
 8015232:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8015234:	69bb      	ldr	r3, [r7, #24]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d101      	bne.n	801523e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 801523a:	2320      	movs	r3, #32
 801523c:	e003      	b.n	8015246 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 801523e:	69bb      	ldr	r3, [r7, #24]
 8015240:	fab3 f383 	clz	r3, r3
 8015244:	b2db      	uxtb	r3, r3
 8015246:	005b      	lsls	r3, r3, #1
 8015248:	2103      	movs	r1, #3
 801524a:	fa01 f303 	lsl.w	r3, r1, r3
 801524e:	43db      	mvns	r3, r3
 8015250:	401a      	ands	r2, r3
 8015252:	68bb      	ldr	r3, [r7, #8]
 8015254:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015256:	6a3b      	ldr	r3, [r7, #32]
 8015258:	fa93 f3a3 	rbit	r3, r3
 801525c:	61fb      	str	r3, [r7, #28]
  return result;
 801525e:	69fb      	ldr	r3, [r7, #28]
 8015260:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8015262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015264:	2b00      	cmp	r3, #0
 8015266:	d101      	bne.n	801526c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8015268:	2320      	movs	r3, #32
 801526a:	e003      	b.n	8015274 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 801526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801526e:	fab3 f383 	clz	r3, r3
 8015272:	b2db      	uxtb	r3, r3
 8015274:	005b      	lsls	r3, r3, #1
 8015276:	6879      	ldr	r1, [r7, #4]
 8015278:	fa01 f303 	lsl.w	r3, r1, r3
 801527c:	431a      	orrs	r2, r3
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	60da      	str	r2, [r3, #12]
}
 8015282:	bf00      	nop
 8015284:	372c      	adds	r7, #44	; 0x2c
 8015286:	46bd      	mov	sp, r7
 8015288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801528c:	4770      	bx	lr

0801528e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 801528e:	b480      	push	{r7}
 8015290:	b08b      	sub	sp, #44	; 0x2c
 8015292:	af00      	add	r7, sp, #0
 8015294:	60f8      	str	r0, [r7, #12]
 8015296:	60b9      	str	r1, [r7, #8]
 8015298:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	6a1a      	ldr	r2, [r3, #32]
 801529e:	68bb      	ldr	r3, [r7, #8]
 80152a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80152a2:	697b      	ldr	r3, [r7, #20]
 80152a4:	fa93 f3a3 	rbit	r3, r3
 80152a8:	613b      	str	r3, [r7, #16]
  return result;
 80152aa:	693b      	ldr	r3, [r7, #16]
 80152ac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80152ae:	69bb      	ldr	r3, [r7, #24]
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d101      	bne.n	80152b8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80152b4:	2320      	movs	r3, #32
 80152b6:	e003      	b.n	80152c0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80152b8:	69bb      	ldr	r3, [r7, #24]
 80152ba:	fab3 f383 	clz	r3, r3
 80152be:	b2db      	uxtb	r3, r3
 80152c0:	009b      	lsls	r3, r3, #2
 80152c2:	210f      	movs	r1, #15
 80152c4:	fa01 f303 	lsl.w	r3, r1, r3
 80152c8:	43db      	mvns	r3, r3
 80152ca:	401a      	ands	r2, r3
 80152cc:	68bb      	ldr	r3, [r7, #8]
 80152ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80152d0:	6a3b      	ldr	r3, [r7, #32]
 80152d2:	fa93 f3a3 	rbit	r3, r3
 80152d6:	61fb      	str	r3, [r7, #28]
  return result;
 80152d8:	69fb      	ldr	r3, [r7, #28]
 80152da:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80152dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d101      	bne.n	80152e6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80152e2:	2320      	movs	r3, #32
 80152e4:	e003      	b.n	80152ee <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80152e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152e8:	fab3 f383 	clz	r3, r3
 80152ec:	b2db      	uxtb	r3, r3
 80152ee:	009b      	lsls	r3, r3, #2
 80152f0:	6879      	ldr	r1, [r7, #4]
 80152f2:	fa01 f303 	lsl.w	r3, r1, r3
 80152f6:	431a      	orrs	r2, r3
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80152fc:	bf00      	nop
 80152fe:	372c      	adds	r7, #44	; 0x2c
 8015300:	46bd      	mov	sp, r7
 8015302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015306:	4770      	bx	lr

08015308 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8015308:	b480      	push	{r7}
 801530a:	b08b      	sub	sp, #44	; 0x2c
 801530c:	af00      	add	r7, sp, #0
 801530e:	60f8      	str	r0, [r7, #12]
 8015310:	60b9      	str	r1, [r7, #8]
 8015312:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015318:	68bb      	ldr	r3, [r7, #8]
 801531a:	0a1b      	lsrs	r3, r3, #8
 801531c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801531e:	697b      	ldr	r3, [r7, #20]
 8015320:	fa93 f3a3 	rbit	r3, r3
 8015324:	613b      	str	r3, [r7, #16]
  return result;
 8015326:	693b      	ldr	r3, [r7, #16]
 8015328:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801532a:	69bb      	ldr	r3, [r7, #24]
 801532c:	2b00      	cmp	r3, #0
 801532e:	d101      	bne.n	8015334 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8015330:	2320      	movs	r3, #32
 8015332:	e003      	b.n	801533c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8015334:	69bb      	ldr	r3, [r7, #24]
 8015336:	fab3 f383 	clz	r3, r3
 801533a:	b2db      	uxtb	r3, r3
 801533c:	009b      	lsls	r3, r3, #2
 801533e:	210f      	movs	r1, #15
 8015340:	fa01 f303 	lsl.w	r3, r1, r3
 8015344:	43db      	mvns	r3, r3
 8015346:	401a      	ands	r2, r3
 8015348:	68bb      	ldr	r3, [r7, #8]
 801534a:	0a1b      	lsrs	r3, r3, #8
 801534c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801534e:	6a3b      	ldr	r3, [r7, #32]
 8015350:	fa93 f3a3 	rbit	r3, r3
 8015354:	61fb      	str	r3, [r7, #28]
  return result;
 8015356:	69fb      	ldr	r3, [r7, #28]
 8015358:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801535c:	2b00      	cmp	r3, #0
 801535e:	d101      	bne.n	8015364 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8015360:	2320      	movs	r3, #32
 8015362:	e003      	b.n	801536c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8015364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015366:	fab3 f383 	clz	r3, r3
 801536a:	b2db      	uxtb	r3, r3
 801536c:	009b      	lsls	r3, r3, #2
 801536e:	6879      	ldr	r1, [r7, #4]
 8015370:	fa01 f303 	lsl.w	r3, r1, r3
 8015374:	431a      	orrs	r2, r3
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 801537a:	bf00      	nop
 801537c:	372c      	adds	r7, #44	; 0x2c
 801537e:	46bd      	mov	sp, r7
 8015380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015384:	4770      	bx	lr

08015386 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8015386:	b580      	push	{r7, lr}
 8015388:	b088      	sub	sp, #32
 801538a:	af00      	add	r7, sp, #0
 801538c:	6078      	str	r0, [r7, #4]
 801538e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8015390:	683b      	ldr	r3, [r7, #0]
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015396:	693b      	ldr	r3, [r7, #16]
 8015398:	fa93 f3a3 	rbit	r3, r3
 801539c:	60fb      	str	r3, [r7, #12]
  return result;
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80153a2:	697b      	ldr	r3, [r7, #20]
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d101      	bne.n	80153ac <LL_GPIO_Init+0x26>
    return 32U;
 80153a8:	2320      	movs	r3, #32
 80153aa:	e003      	b.n	80153b4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80153ac:	697b      	ldr	r3, [r7, #20]
 80153ae:	fab3 f383 	clz	r3, r3
 80153b2:	b2db      	uxtb	r3, r3
 80153b4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80153b6:	e047      	b.n	8015448 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 80153b8:	683b      	ldr	r3, [r7, #0]
 80153ba:	681a      	ldr	r2, [r3, #0]
 80153bc:	2101      	movs	r1, #1
 80153be:	69fb      	ldr	r3, [r7, #28]
 80153c0:	fa01 f303 	lsl.w	r3, r1, r3
 80153c4:	4013      	ands	r3, r2
 80153c6:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 80153c8:	69bb      	ldr	r3, [r7, #24]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d039      	beq.n	8015442 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80153ce:	683b      	ldr	r3, [r7, #0]
 80153d0:	685b      	ldr	r3, [r3, #4]
 80153d2:	2b01      	cmp	r3, #1
 80153d4:	d003      	beq.n	80153de <LL_GPIO_Init+0x58>
 80153d6:	683b      	ldr	r3, [r7, #0]
 80153d8:	685b      	ldr	r3, [r3, #4]
 80153da:	2b02      	cmp	r3, #2
 80153dc:	d10d      	bne.n	80153fa <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80153de:	683b      	ldr	r3, [r7, #0]
 80153e0:	689b      	ldr	r3, [r3, #8]
 80153e2:	461a      	mov	r2, r3
 80153e4:	69b9      	ldr	r1, [r7, #24]
 80153e6:	6878      	ldr	r0, [r7, #4]
 80153e8:	f7ff fed7 	bl	801519a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80153ec:	683b      	ldr	r3, [r7, #0]
 80153ee:	68db      	ldr	r3, [r3, #12]
 80153f0:	461a      	mov	r2, r3
 80153f2:	69b9      	ldr	r1, [r7, #24]
 80153f4:	6878      	ldr	r0, [r7, #4]
 80153f6:	f7ff feb8 	bl	801516a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80153fa:	683b      	ldr	r3, [r7, #0]
 80153fc:	691b      	ldr	r3, [r3, #16]
 80153fe:	461a      	mov	r2, r3
 8015400:	69b9      	ldr	r1, [r7, #24]
 8015402:	6878      	ldr	r0, [r7, #4]
 8015404:	f7ff ff06 	bl	8015214 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8015408:	683b      	ldr	r3, [r7, #0]
 801540a:	685b      	ldr	r3, [r3, #4]
 801540c:	2b02      	cmp	r3, #2
 801540e:	d111      	bne.n	8015434 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8015410:	69bb      	ldr	r3, [r7, #24]
 8015412:	2bff      	cmp	r3, #255	; 0xff
 8015414:	d807      	bhi.n	8015426 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8015416:	683b      	ldr	r3, [r7, #0]
 8015418:	695b      	ldr	r3, [r3, #20]
 801541a:	461a      	mov	r2, r3
 801541c:	69b9      	ldr	r1, [r7, #24]
 801541e:	6878      	ldr	r0, [r7, #4]
 8015420:	f7ff ff35 	bl	801528e <LL_GPIO_SetAFPin_0_7>
 8015424:	e006      	b.n	8015434 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8015426:	683b      	ldr	r3, [r7, #0]
 8015428:	695b      	ldr	r3, [r3, #20]
 801542a:	461a      	mov	r2, r3
 801542c:	69b9      	ldr	r1, [r7, #24]
 801542e:	6878      	ldr	r0, [r7, #4]
 8015430:	f7ff ff6a 	bl	8015308 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8015434:	683b      	ldr	r3, [r7, #0]
 8015436:	685b      	ldr	r3, [r3, #4]
 8015438:	461a      	mov	r2, r3
 801543a:	69b9      	ldr	r1, [r7, #24]
 801543c:	6878      	ldr	r0, [r7, #4]
 801543e:	f7ff fe57 	bl	80150f0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8015442:	69fb      	ldr	r3, [r7, #28]
 8015444:	3301      	adds	r3, #1
 8015446:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8015448:	683b      	ldr	r3, [r7, #0]
 801544a:	681a      	ldr	r2, [r3, #0]
 801544c:	69fb      	ldr	r3, [r7, #28]
 801544e:	fa22 f303 	lsr.w	r3, r2, r3
 8015452:	2b00      	cmp	r3, #0
 8015454:	d1b0      	bne.n	80153b8 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8015456:	2300      	movs	r3, #0
}
 8015458:	4618      	mov	r0, r3
 801545a:	3720      	adds	r7, #32
 801545c:	46bd      	mov	sp, r7
 801545e:	bd80      	pop	{r7, pc}

08015460 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8015460:	b480      	push	{r7}
 8015462:	b085      	sub	sp, #20
 8015464:	af00      	add	r7, sp, #0
 8015466:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8015468:	f64b 7380 	movw	r3, #49024	; 0xbf80
 801546c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8015474:	b29a      	uxth	r2, r3
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	b29b      	uxth	r3, r3
 801547a:	43db      	mvns	r3, r3
 801547c:	b29b      	uxth	r3, r3
 801547e:	4013      	ands	r3, r2
 8015480:	b29a      	uxth	r2, r3
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8015488:	2300      	movs	r3, #0
}
 801548a:	4618      	mov	r0, r3
 801548c:	3714      	adds	r7, #20
 801548e:	46bd      	mov	sp, r7
 8015490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015494:	4770      	bx	lr

08015496 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8015496:	b084      	sub	sp, #16
 8015498:	b480      	push	{r7}
 801549a:	b083      	sub	sp, #12
 801549c:	af00      	add	r7, sp, #0
 801549e:	6078      	str	r0, [r7, #4]
 80154a0:	f107 0014 	add.w	r0, r7, #20
 80154a4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	2201      	movs	r2, #1
 80154ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	2200      	movs	r2, #0
 80154b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	2200      	movs	r2, #0
 80154bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	2200      	movs	r2, #0
 80154c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80154c8:	2300      	movs	r3, #0
}
 80154ca:	4618      	mov	r0, r3
 80154cc:	370c      	adds	r7, #12
 80154ce:	46bd      	mov	sp, r7
 80154d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d4:	b004      	add	sp, #16
 80154d6:	4770      	bx	lr

080154d8 <__NVIC_SetPriority>:
{
 80154d8:	b480      	push	{r7}
 80154da:	b083      	sub	sp, #12
 80154dc:	af00      	add	r7, sp, #0
 80154de:	4603      	mov	r3, r0
 80154e0:	6039      	str	r1, [r7, #0]
 80154e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80154e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	db0a      	blt.n	8015502 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80154ec:	683b      	ldr	r3, [r7, #0]
 80154ee:	b2da      	uxtb	r2, r3
 80154f0:	490c      	ldr	r1, [pc, #48]	; (8015524 <__NVIC_SetPriority+0x4c>)
 80154f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80154f6:	0152      	lsls	r2, r2, #5
 80154f8:	b2d2      	uxtb	r2, r2
 80154fa:	440b      	add	r3, r1
 80154fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015500:	e00a      	b.n	8015518 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015502:	683b      	ldr	r3, [r7, #0]
 8015504:	b2da      	uxtb	r2, r3
 8015506:	4908      	ldr	r1, [pc, #32]	; (8015528 <__NVIC_SetPriority+0x50>)
 8015508:	79fb      	ldrb	r3, [r7, #7]
 801550a:	f003 030f 	and.w	r3, r3, #15
 801550e:	3b04      	subs	r3, #4
 8015510:	0152      	lsls	r2, r2, #5
 8015512:	b2d2      	uxtb	r2, r2
 8015514:	440b      	add	r3, r1
 8015516:	761a      	strb	r2, [r3, #24]
}
 8015518:	bf00      	nop
 801551a:	370c      	adds	r7, #12
 801551c:	46bd      	mov	sp, r7
 801551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015522:	4770      	bx	lr
 8015524:	e000e100 	.word	0xe000e100
 8015528:	e000ed00 	.word	0xe000ed00

0801552c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801552c:	b580      	push	{r7, lr}
 801552e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8015530:	4b05      	ldr	r3, [pc, #20]	; (8015548 <SysTick_Handler+0x1c>)
 8015532:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8015534:	f001 fbe0 	bl	8016cf8 <xTaskGetSchedulerState>
 8015538:	4603      	mov	r3, r0
 801553a:	2b01      	cmp	r3, #1
 801553c:	d001      	beq.n	8015542 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801553e:	f002 f835 	bl	80175ac <xPortSysTickHandler>
  }
}
 8015542:	bf00      	nop
 8015544:	bd80      	pop	{r7, pc}
 8015546:	bf00      	nop
 8015548:	e000e010 	.word	0xe000e010

0801554c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801554c:	b580      	push	{r7, lr}
 801554e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8015550:	2100      	movs	r1, #0
 8015552:	f06f 0004 	mvn.w	r0, #4
 8015556:	f7ff ffbf 	bl	80154d8 <__NVIC_SetPriority>
#endif
}
 801555a:	bf00      	nop
 801555c:	bd80      	pop	{r7, pc}
	...

08015560 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8015560:	b480      	push	{r7}
 8015562:	b083      	sub	sp, #12
 8015564:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015566:	f3ef 8305 	mrs	r3, IPSR
 801556a:	603b      	str	r3, [r7, #0]
  return(result);
 801556c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801556e:	2b00      	cmp	r3, #0
 8015570:	d003      	beq.n	801557a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8015572:	f06f 0305 	mvn.w	r3, #5
 8015576:	607b      	str	r3, [r7, #4]
 8015578:	e00c      	b.n	8015594 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801557a:	4b0a      	ldr	r3, [pc, #40]	; (80155a4 <osKernelInitialize+0x44>)
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	2b00      	cmp	r3, #0
 8015580:	d105      	bne.n	801558e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8015582:	4b08      	ldr	r3, [pc, #32]	; (80155a4 <osKernelInitialize+0x44>)
 8015584:	2201      	movs	r2, #1
 8015586:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8015588:	2300      	movs	r3, #0
 801558a:	607b      	str	r3, [r7, #4]
 801558c:	e002      	b.n	8015594 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801558e:	f04f 33ff 	mov.w	r3, #4294967295
 8015592:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015594:	687b      	ldr	r3, [r7, #4]
}
 8015596:	4618      	mov	r0, r3
 8015598:	370c      	adds	r7, #12
 801559a:	46bd      	mov	sp, r7
 801559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a0:	4770      	bx	lr
 80155a2:	bf00      	nop
 80155a4:	20001010 	.word	0x20001010

080155a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80155a8:	b580      	push	{r7, lr}
 80155aa:	b082      	sub	sp, #8
 80155ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80155ae:	f3ef 8305 	mrs	r3, IPSR
 80155b2:	603b      	str	r3, [r7, #0]
  return(result);
 80155b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d003      	beq.n	80155c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80155ba:	f06f 0305 	mvn.w	r3, #5
 80155be:	607b      	str	r3, [r7, #4]
 80155c0:	e010      	b.n	80155e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80155c2:	4b0b      	ldr	r3, [pc, #44]	; (80155f0 <osKernelStart+0x48>)
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	2b01      	cmp	r3, #1
 80155c8:	d109      	bne.n	80155de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80155ca:	f7ff ffbf 	bl	801554c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80155ce:	4b08      	ldr	r3, [pc, #32]	; (80155f0 <osKernelStart+0x48>)
 80155d0:	2202      	movs	r2, #2
 80155d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80155d4:	f000 ffb2 	bl	801653c <vTaskStartScheduler>
      stat = osOK;
 80155d8:	2300      	movs	r3, #0
 80155da:	607b      	str	r3, [r7, #4]
 80155dc:	e002      	b.n	80155e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80155de:	f04f 33ff 	mov.w	r3, #4294967295
 80155e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80155e4:	687b      	ldr	r3, [r7, #4]
}
 80155e6:	4618      	mov	r0, r3
 80155e8:	3708      	adds	r7, #8
 80155ea:	46bd      	mov	sp, r7
 80155ec:	bd80      	pop	{r7, pc}
 80155ee:	bf00      	nop
 80155f0:	20001010 	.word	0x20001010

080155f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80155f4:	b580      	push	{r7, lr}
 80155f6:	b08e      	sub	sp, #56	; 0x38
 80155f8:	af04      	add	r7, sp, #16
 80155fa:	60f8      	str	r0, [r7, #12]
 80155fc:	60b9      	str	r1, [r7, #8]
 80155fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8015600:	2300      	movs	r3, #0
 8015602:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015604:	f3ef 8305 	mrs	r3, IPSR
 8015608:	617b      	str	r3, [r7, #20]
  return(result);
 801560a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801560c:	2b00      	cmp	r3, #0
 801560e:	d17e      	bne.n	801570e <osThreadNew+0x11a>
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	2b00      	cmp	r3, #0
 8015614:	d07b      	beq.n	801570e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8015616:	2380      	movs	r3, #128	; 0x80
 8015618:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801561a:	2318      	movs	r3, #24
 801561c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801561e:	2300      	movs	r3, #0
 8015620:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8015622:	f04f 33ff 	mov.w	r3, #4294967295
 8015626:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	2b00      	cmp	r3, #0
 801562c:	d045      	beq.n	80156ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	2b00      	cmp	r3, #0
 8015634:	d002      	beq.n	801563c <osThreadNew+0x48>
        name = attr->name;
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	699b      	ldr	r3, [r3, #24]
 8015640:	2b00      	cmp	r3, #0
 8015642:	d002      	beq.n	801564a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	699b      	ldr	r3, [r3, #24]
 8015648:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801564a:	69fb      	ldr	r3, [r7, #28]
 801564c:	2b00      	cmp	r3, #0
 801564e:	d008      	beq.n	8015662 <osThreadNew+0x6e>
 8015650:	69fb      	ldr	r3, [r7, #28]
 8015652:	2b38      	cmp	r3, #56	; 0x38
 8015654:	d805      	bhi.n	8015662 <osThreadNew+0x6e>
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	685b      	ldr	r3, [r3, #4]
 801565a:	f003 0301 	and.w	r3, r3, #1
 801565e:	2b00      	cmp	r3, #0
 8015660:	d001      	beq.n	8015666 <osThreadNew+0x72>
        return (NULL);
 8015662:	2300      	movs	r3, #0
 8015664:	e054      	b.n	8015710 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	695b      	ldr	r3, [r3, #20]
 801566a:	2b00      	cmp	r3, #0
 801566c:	d003      	beq.n	8015676 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	695b      	ldr	r3, [r3, #20]
 8015672:	089b      	lsrs	r3, r3, #2
 8015674:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	689b      	ldr	r3, [r3, #8]
 801567a:	2b00      	cmp	r3, #0
 801567c:	d00e      	beq.n	801569c <osThreadNew+0xa8>
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	68db      	ldr	r3, [r3, #12]
 8015682:	2b5b      	cmp	r3, #91	; 0x5b
 8015684:	d90a      	bls.n	801569c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801568a:	2b00      	cmp	r3, #0
 801568c:	d006      	beq.n	801569c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	695b      	ldr	r3, [r3, #20]
 8015692:	2b00      	cmp	r3, #0
 8015694:	d002      	beq.n	801569c <osThreadNew+0xa8>
        mem = 1;
 8015696:	2301      	movs	r3, #1
 8015698:	61bb      	str	r3, [r7, #24]
 801569a:	e010      	b.n	80156be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	689b      	ldr	r3, [r3, #8]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d10c      	bne.n	80156be <osThreadNew+0xca>
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	68db      	ldr	r3, [r3, #12]
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d108      	bne.n	80156be <osThreadNew+0xca>
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	691b      	ldr	r3, [r3, #16]
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d104      	bne.n	80156be <osThreadNew+0xca>
          mem = 0;
 80156b4:	2300      	movs	r3, #0
 80156b6:	61bb      	str	r3, [r7, #24]
 80156b8:	e001      	b.n	80156be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80156ba:	2300      	movs	r3, #0
 80156bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80156be:	69bb      	ldr	r3, [r7, #24]
 80156c0:	2b01      	cmp	r3, #1
 80156c2:	d110      	bne.n	80156e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80156c8:	687a      	ldr	r2, [r7, #4]
 80156ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80156cc:	9202      	str	r2, [sp, #8]
 80156ce:	9301      	str	r3, [sp, #4]
 80156d0:	69fb      	ldr	r3, [r7, #28]
 80156d2:	9300      	str	r3, [sp, #0]
 80156d4:	68bb      	ldr	r3, [r7, #8]
 80156d6:	6a3a      	ldr	r2, [r7, #32]
 80156d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80156da:	68f8      	ldr	r0, [r7, #12]
 80156dc:	f000 fd30 	bl	8016140 <xTaskCreateStatic>
 80156e0:	4603      	mov	r3, r0
 80156e2:	613b      	str	r3, [r7, #16]
 80156e4:	e013      	b.n	801570e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80156e6:	69bb      	ldr	r3, [r7, #24]
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d110      	bne.n	801570e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80156ec:	6a3b      	ldr	r3, [r7, #32]
 80156ee:	b29a      	uxth	r2, r3
 80156f0:	f107 0310 	add.w	r3, r7, #16
 80156f4:	9301      	str	r3, [sp, #4]
 80156f6:	69fb      	ldr	r3, [r7, #28]
 80156f8:	9300      	str	r3, [sp, #0]
 80156fa:	68bb      	ldr	r3, [r7, #8]
 80156fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80156fe:	68f8      	ldr	r0, [r7, #12]
 8015700:	f000 fd63 	bl	80161ca <xTaskCreate>
 8015704:	4603      	mov	r3, r0
 8015706:	2b01      	cmp	r3, #1
 8015708:	d001      	beq.n	801570e <osThreadNew+0x11a>
            hTask = NULL;
 801570a:	2300      	movs	r3, #0
 801570c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801570e:	693b      	ldr	r3, [r7, #16]
}
 8015710:	4618      	mov	r0, r3
 8015712:	3728      	adds	r7, #40	; 0x28
 8015714:	46bd      	mov	sp, r7
 8015716:	bd80      	pop	{r7, pc}

08015718 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8015718:	b480      	push	{r7}
 801571a:	b085      	sub	sp, #20
 801571c:	af00      	add	r7, sp, #0
 801571e:	60f8      	str	r0, [r7, #12]
 8015720:	60b9      	str	r1, [r7, #8]
 8015722:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	4a07      	ldr	r2, [pc, #28]	; (8015744 <vApplicationGetIdleTaskMemory+0x2c>)
 8015728:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801572a:	68bb      	ldr	r3, [r7, #8]
 801572c:	4a06      	ldr	r2, [pc, #24]	; (8015748 <vApplicationGetIdleTaskMemory+0x30>)
 801572e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	2280      	movs	r2, #128	; 0x80
 8015734:	601a      	str	r2, [r3, #0]
}
 8015736:	bf00      	nop
 8015738:	3714      	adds	r7, #20
 801573a:	46bd      	mov	sp, r7
 801573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015740:	4770      	bx	lr
 8015742:	bf00      	nop
 8015744:	20001014 	.word	0x20001014
 8015748:	20001070 	.word	0x20001070

0801574c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801574c:	b480      	push	{r7}
 801574e:	b085      	sub	sp, #20
 8015750:	af00      	add	r7, sp, #0
 8015752:	60f8      	str	r0, [r7, #12]
 8015754:	60b9      	str	r1, [r7, #8]
 8015756:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	4a07      	ldr	r2, [pc, #28]	; (8015778 <vApplicationGetTimerTaskMemory+0x2c>)
 801575c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801575e:	68bb      	ldr	r3, [r7, #8]
 8015760:	4a06      	ldr	r2, [pc, #24]	; (801577c <vApplicationGetTimerTaskMemory+0x30>)
 8015762:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	f44f 7280 	mov.w	r2, #256	; 0x100
 801576a:	601a      	str	r2, [r3, #0]
}
 801576c:	bf00      	nop
 801576e:	3714      	adds	r7, #20
 8015770:	46bd      	mov	sp, r7
 8015772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015776:	4770      	bx	lr
 8015778:	20001270 	.word	0x20001270
 801577c:	200012cc 	.word	0x200012cc

08015780 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015780:	b480      	push	{r7}
 8015782:	b083      	sub	sp, #12
 8015784:	af00      	add	r7, sp, #0
 8015786:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	f103 0208 	add.w	r2, r3, #8
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	f04f 32ff 	mov.w	r2, #4294967295
 8015798:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	f103 0208 	add.w	r2, r3, #8
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	f103 0208 	add.w	r2, r3, #8
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	2200      	movs	r2, #0
 80157b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80157b4:	bf00      	nop
 80157b6:	370c      	adds	r7, #12
 80157b8:	46bd      	mov	sp, r7
 80157ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157be:	4770      	bx	lr

080157c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80157c0:	b480      	push	{r7}
 80157c2:	b083      	sub	sp, #12
 80157c4:	af00      	add	r7, sp, #0
 80157c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	2200      	movs	r2, #0
 80157cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80157ce:	bf00      	nop
 80157d0:	370c      	adds	r7, #12
 80157d2:	46bd      	mov	sp, r7
 80157d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d8:	4770      	bx	lr

080157da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80157da:	b480      	push	{r7}
 80157dc:	b085      	sub	sp, #20
 80157de:	af00      	add	r7, sp, #0
 80157e0:	6078      	str	r0, [r7, #4]
 80157e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	685b      	ldr	r3, [r3, #4]
 80157e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80157ea:	683b      	ldr	r3, [r7, #0]
 80157ec:	68fa      	ldr	r2, [r7, #12]
 80157ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	689a      	ldr	r2, [r3, #8]
 80157f4:	683b      	ldr	r3, [r7, #0]
 80157f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	689b      	ldr	r3, [r3, #8]
 80157fc:	683a      	ldr	r2, [r7, #0]
 80157fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	683a      	ldr	r2, [r7, #0]
 8015804:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015806:	683b      	ldr	r3, [r7, #0]
 8015808:	687a      	ldr	r2, [r7, #4]
 801580a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	1c5a      	adds	r2, r3, #1
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	601a      	str	r2, [r3, #0]
}
 8015816:	bf00      	nop
 8015818:	3714      	adds	r7, #20
 801581a:	46bd      	mov	sp, r7
 801581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015820:	4770      	bx	lr

08015822 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015822:	b480      	push	{r7}
 8015824:	b085      	sub	sp, #20
 8015826:	af00      	add	r7, sp, #0
 8015828:	6078      	str	r0, [r7, #4]
 801582a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801582c:	683b      	ldr	r3, [r7, #0]
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8015832:	68bb      	ldr	r3, [r7, #8]
 8015834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015838:	d103      	bne.n	8015842 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	691b      	ldr	r3, [r3, #16]
 801583e:	60fb      	str	r3, [r7, #12]
 8015840:	e00c      	b.n	801585c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	3308      	adds	r3, #8
 8015846:	60fb      	str	r3, [r7, #12]
 8015848:	e002      	b.n	8015850 <vListInsert+0x2e>
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	685b      	ldr	r3, [r3, #4]
 801584e:	60fb      	str	r3, [r7, #12]
 8015850:	68fb      	ldr	r3, [r7, #12]
 8015852:	685b      	ldr	r3, [r3, #4]
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	68ba      	ldr	r2, [r7, #8]
 8015858:	429a      	cmp	r2, r3
 801585a:	d2f6      	bcs.n	801584a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	685a      	ldr	r2, [r3, #4]
 8015860:	683b      	ldr	r3, [r7, #0]
 8015862:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015864:	683b      	ldr	r3, [r7, #0]
 8015866:	685b      	ldr	r3, [r3, #4]
 8015868:	683a      	ldr	r2, [r7, #0]
 801586a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801586c:	683b      	ldr	r3, [r7, #0]
 801586e:	68fa      	ldr	r2, [r7, #12]
 8015870:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	683a      	ldr	r2, [r7, #0]
 8015876:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015878:	683b      	ldr	r3, [r7, #0]
 801587a:	687a      	ldr	r2, [r7, #4]
 801587c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	681b      	ldr	r3, [r3, #0]
 8015882:	1c5a      	adds	r2, r3, #1
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	601a      	str	r2, [r3, #0]
}
 8015888:	bf00      	nop
 801588a:	3714      	adds	r7, #20
 801588c:	46bd      	mov	sp, r7
 801588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015892:	4770      	bx	lr

08015894 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8015894:	b480      	push	{r7}
 8015896:	b085      	sub	sp, #20
 8015898:	af00      	add	r7, sp, #0
 801589a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	691b      	ldr	r3, [r3, #16]
 80158a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	685b      	ldr	r3, [r3, #4]
 80158a6:	687a      	ldr	r2, [r7, #4]
 80158a8:	6892      	ldr	r2, [r2, #8]
 80158aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	689b      	ldr	r3, [r3, #8]
 80158b0:	687a      	ldr	r2, [r7, #4]
 80158b2:	6852      	ldr	r2, [r2, #4]
 80158b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	685b      	ldr	r3, [r3, #4]
 80158ba:	687a      	ldr	r2, [r7, #4]
 80158bc:	429a      	cmp	r2, r3
 80158be:	d103      	bne.n	80158c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	689a      	ldr	r2, [r3, #8]
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	2200      	movs	r2, #0
 80158cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	1e5a      	subs	r2, r3, #1
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	681b      	ldr	r3, [r3, #0]
}
 80158dc:	4618      	mov	r0, r3
 80158de:	3714      	adds	r7, #20
 80158e0:	46bd      	mov	sp, r7
 80158e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e6:	4770      	bx	lr

080158e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80158e8:	b580      	push	{r7, lr}
 80158ea:	b084      	sub	sp, #16
 80158ec:	af00      	add	r7, sp, #0
 80158ee:	6078      	str	r0, [r7, #4]
 80158f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d102      	bne.n	8015902 <xQueueGenericReset+0x1a>
 80158fc:	f001 ff5c 	bl	80177b8 <ulSetInterruptMask>
 8015900:	e7fe      	b.n	8015900 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 8015902:	f001 fe27 	bl	8017554 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	681a      	ldr	r2, [r3, #0]
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801590e:	68f9      	ldr	r1, [r7, #12]
 8015910:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015912:	fb01 f303 	mul.w	r3, r1, r3
 8015916:	441a      	add	r2, r3
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	2200      	movs	r2, #0
 8015920:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	681a      	ldr	r2, [r3, #0]
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	681a      	ldr	r2, [r3, #0]
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015932:	3b01      	subs	r3, #1
 8015934:	68f9      	ldr	r1, [r7, #12]
 8015936:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015938:	fb01 f303 	mul.w	r3, r1, r3
 801593c:	441a      	add	r2, r3
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	22ff      	movs	r2, #255	; 0xff
 8015946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801594a:	68fb      	ldr	r3, [r7, #12]
 801594c:	22ff      	movs	r2, #255	; 0xff
 801594e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8015952:	683b      	ldr	r3, [r7, #0]
 8015954:	2b00      	cmp	r3, #0
 8015956:	d10e      	bne.n	8015976 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	691b      	ldr	r3, [r3, #16]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d014      	beq.n	801598a <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	3310      	adds	r3, #16
 8015964:	4618      	mov	r0, r3
 8015966:	f001 f831 	bl	80169cc <xTaskRemoveFromEventList>
 801596a:	4603      	mov	r3, r0
 801596c:	2b00      	cmp	r3, #0
 801596e:	d00c      	beq.n	801598a <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015970:	f001 fdde 	bl	8017530 <vPortYield>
 8015974:	e009      	b.n	801598a <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	3310      	adds	r3, #16
 801597a:	4618      	mov	r0, r3
 801597c:	f7ff ff00 	bl	8015780 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	3324      	adds	r3, #36	; 0x24
 8015984:	4618      	mov	r0, r3
 8015986:	f7ff fefb 	bl	8015780 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801598a:	f001 fdf5 	bl	8017578 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801598e:	2301      	movs	r3, #1
}
 8015990:	4618      	mov	r0, r3
 8015992:	3710      	adds	r7, #16
 8015994:	46bd      	mov	sp, r7
 8015996:	bd80      	pop	{r7, pc}

08015998 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015998:	b580      	push	{r7, lr}
 801599a:	b088      	sub	sp, #32
 801599c:	af02      	add	r7, sp, #8
 801599e:	60f8      	str	r0, [r7, #12]
 80159a0:	60b9      	str	r1, [r7, #8]
 80159a2:	607a      	str	r2, [r7, #4]
 80159a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d102      	bne.n	80159b2 <xQueueGenericCreateStatic+0x1a>
 80159ac:	f001 ff04 	bl	80177b8 <ulSetInterruptMask>
 80159b0:	e7fe      	b.n	80159b0 <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80159b2:	683b      	ldr	r3, [r7, #0]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d102      	bne.n	80159be <xQueueGenericCreateStatic+0x26>
 80159b8:	f001 fefe 	bl	80177b8 <ulSetInterruptMask>
 80159bc:	e7fe      	b.n	80159bc <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d002      	beq.n	80159ca <xQueueGenericCreateStatic+0x32>
 80159c4:	68bb      	ldr	r3, [r7, #8]
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d001      	beq.n	80159ce <xQueueGenericCreateStatic+0x36>
 80159ca:	2301      	movs	r3, #1
 80159cc:	e000      	b.n	80159d0 <xQueueGenericCreateStatic+0x38>
 80159ce:	2300      	movs	r3, #0
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d102      	bne.n	80159da <xQueueGenericCreateStatic+0x42>
 80159d4:	f001 fef0 	bl	80177b8 <ulSetInterruptMask>
 80159d8:	e7fe      	b.n	80159d8 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d102      	bne.n	80159e6 <xQueueGenericCreateStatic+0x4e>
 80159e0:	68bb      	ldr	r3, [r7, #8]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d101      	bne.n	80159ea <xQueueGenericCreateStatic+0x52>
 80159e6:	2301      	movs	r3, #1
 80159e8:	e000      	b.n	80159ec <xQueueGenericCreateStatic+0x54>
 80159ea:	2300      	movs	r3, #0
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d102      	bne.n	80159f6 <xQueueGenericCreateStatic+0x5e>
 80159f0:	f001 fee2 	bl	80177b8 <ulSetInterruptMask>
 80159f4:	e7fe      	b.n	80159f4 <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80159f6:	2350      	movs	r3, #80	; 0x50
 80159f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80159fa:	693b      	ldr	r3, [r7, #16]
 80159fc:	2b50      	cmp	r3, #80	; 0x50
 80159fe:	d002      	beq.n	8015a06 <xQueueGenericCreateStatic+0x6e>
 8015a00:	f001 feda 	bl	80177b8 <ulSetInterruptMask>
 8015a04:	e7fe      	b.n	8015a04 <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015a06:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015a08:	683b      	ldr	r3, [r7, #0]
 8015a0a:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8015a0c:	697b      	ldr	r3, [r7, #20]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d00d      	beq.n	8015a2e <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015a12:	697b      	ldr	r3, [r7, #20]
 8015a14:	2201      	movs	r2, #1
 8015a16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015a1a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8015a1e:	697b      	ldr	r3, [r7, #20]
 8015a20:	9300      	str	r3, [sp, #0]
 8015a22:	4613      	mov	r3, r2
 8015a24:	687a      	ldr	r2, [r7, #4]
 8015a26:	68b9      	ldr	r1, [r7, #8]
 8015a28:	68f8      	ldr	r0, [r7, #12]
 8015a2a:	f000 f805 	bl	8015a38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015a2e:	697b      	ldr	r3, [r7, #20]
	}
 8015a30:	4618      	mov	r0, r3
 8015a32:	3718      	adds	r7, #24
 8015a34:	46bd      	mov	sp, r7
 8015a36:	bd80      	pop	{r7, pc}

08015a38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015a38:	b580      	push	{r7, lr}
 8015a3a:	b084      	sub	sp, #16
 8015a3c:	af00      	add	r7, sp, #0
 8015a3e:	60f8      	str	r0, [r7, #12]
 8015a40:	60b9      	str	r1, [r7, #8]
 8015a42:	607a      	str	r2, [r7, #4]
 8015a44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015a46:	68bb      	ldr	r3, [r7, #8]
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d103      	bne.n	8015a54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015a4c:	69bb      	ldr	r3, [r7, #24]
 8015a4e:	69ba      	ldr	r2, [r7, #24]
 8015a50:	601a      	str	r2, [r3, #0]
 8015a52:	e002      	b.n	8015a5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015a54:	69bb      	ldr	r3, [r7, #24]
 8015a56:	687a      	ldr	r2, [r7, #4]
 8015a58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015a5a:	69bb      	ldr	r3, [r7, #24]
 8015a5c:	68fa      	ldr	r2, [r7, #12]
 8015a5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015a60:	69bb      	ldr	r3, [r7, #24]
 8015a62:	68ba      	ldr	r2, [r7, #8]
 8015a64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015a66:	2101      	movs	r1, #1
 8015a68:	69b8      	ldr	r0, [r7, #24]
 8015a6a:	f7ff ff3d 	bl	80158e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8015a6e:	69bb      	ldr	r3, [r7, #24]
 8015a70:	78fa      	ldrb	r2, [r7, #3]
 8015a72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8015a76:	bf00      	nop
 8015a78:	3710      	adds	r7, #16
 8015a7a:	46bd      	mov	sp, r7
 8015a7c:	bd80      	pop	{r7, pc}

08015a7e <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015a7e:	b580      	push	{r7, lr}
 8015a80:	b08a      	sub	sp, #40	; 0x28
 8015a82:	af00      	add	r7, sp, #0
 8015a84:	60f8      	str	r0, [r7, #12]
 8015a86:	60b9      	str	r1, [r7, #8]
 8015a88:	607a      	str	r2, [r7, #4]
 8015a8a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8015a94:	6a3b      	ldr	r3, [r7, #32]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d102      	bne.n	8015aa0 <xQueueGenericSend+0x22>
 8015a9a:	f001 fe8d 	bl	80177b8 <ulSetInterruptMask>
 8015a9e:	e7fe      	b.n	8015a9e <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015aa0:	68bb      	ldr	r3, [r7, #8]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d103      	bne.n	8015aae <xQueueGenericSend+0x30>
 8015aa6:	6a3b      	ldr	r3, [r7, #32]
 8015aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d101      	bne.n	8015ab2 <xQueueGenericSend+0x34>
 8015aae:	2301      	movs	r3, #1
 8015ab0:	e000      	b.n	8015ab4 <xQueueGenericSend+0x36>
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d102      	bne.n	8015abe <xQueueGenericSend+0x40>
 8015ab8:	f001 fe7e 	bl	80177b8 <ulSetInterruptMask>
 8015abc:	e7fe      	b.n	8015abc <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015abe:	683b      	ldr	r3, [r7, #0]
 8015ac0:	2b02      	cmp	r3, #2
 8015ac2:	d103      	bne.n	8015acc <xQueueGenericSend+0x4e>
 8015ac4:	6a3b      	ldr	r3, [r7, #32]
 8015ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ac8:	2b01      	cmp	r3, #1
 8015aca:	d101      	bne.n	8015ad0 <xQueueGenericSend+0x52>
 8015acc:	2301      	movs	r3, #1
 8015ace:	e000      	b.n	8015ad2 <xQueueGenericSend+0x54>
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d102      	bne.n	8015adc <xQueueGenericSend+0x5e>
 8015ad6:	f001 fe6f 	bl	80177b8 <ulSetInterruptMask>
 8015ada:	e7fe      	b.n	8015ada <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015adc:	f001 f90c 	bl	8016cf8 <xTaskGetSchedulerState>
 8015ae0:	4603      	mov	r3, r0
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d102      	bne.n	8015aec <xQueueGenericSend+0x6e>
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d101      	bne.n	8015af0 <xQueueGenericSend+0x72>
 8015aec:	2301      	movs	r3, #1
 8015aee:	e000      	b.n	8015af2 <xQueueGenericSend+0x74>
 8015af0:	2300      	movs	r3, #0
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d102      	bne.n	8015afc <xQueueGenericSend+0x7e>
 8015af6:	f001 fe5f 	bl	80177b8 <ulSetInterruptMask>
 8015afa:	e7fe      	b.n	8015afa <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015afc:	f001 fd2a 	bl	8017554 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015b00:	6a3b      	ldr	r3, [r7, #32]
 8015b02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015b04:	6a3b      	ldr	r3, [r7, #32]
 8015b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015b08:	429a      	cmp	r2, r3
 8015b0a:	d302      	bcc.n	8015b12 <xQueueGenericSend+0x94>
 8015b0c:	683b      	ldr	r3, [r7, #0]
 8015b0e:	2b02      	cmp	r3, #2
 8015b10:	d11d      	bne.n	8015b4e <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015b12:	683a      	ldr	r2, [r7, #0]
 8015b14:	68b9      	ldr	r1, [r7, #8]
 8015b16:	6a38      	ldr	r0, [r7, #32]
 8015b18:	f000 f9a4 	bl	8015e64 <prvCopyDataToQueue>
 8015b1c:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015b1e:	6a3b      	ldr	r3, [r7, #32]
 8015b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d00a      	beq.n	8015b3c <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015b26:	6a3b      	ldr	r3, [r7, #32]
 8015b28:	3324      	adds	r3, #36	; 0x24
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	f000 ff4e 	bl	80169cc <xTaskRemoveFromEventList>
 8015b30:	4603      	mov	r3, r0
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d007      	beq.n	8015b46 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015b36:	f001 fcfb 	bl	8017530 <vPortYield>
 8015b3a:	e004      	b.n	8015b46 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015b3c:	69fb      	ldr	r3, [r7, #28]
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d001      	beq.n	8015b46 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015b42:	f001 fcf5 	bl	8017530 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015b46:	f001 fd17 	bl	8017578 <vPortExitCritical>
				return pdPASS;
 8015b4a:	2301      	movs	r3, #1
 8015b4c:	e05c      	b.n	8015c08 <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d103      	bne.n	8015b5c <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015b54:	f001 fd10 	bl	8017578 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015b58:	2300      	movs	r3, #0
 8015b5a:	e055      	b.n	8015c08 <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d106      	bne.n	8015b70 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015b62:	f107 0314 	add.w	r3, r7, #20
 8015b66:	4618      	mov	r0, r3
 8015b68:	f000 ff8c 	bl	8016a84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015b6c:	2301      	movs	r3, #1
 8015b6e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015b70:	f001 fd02 	bl	8017578 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015b74:	f000 fd38 	bl	80165e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015b78:	f001 fcec 	bl	8017554 <vPortEnterCritical>
 8015b7c:	6a3b      	ldr	r3, [r7, #32]
 8015b7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015b82:	b25b      	sxtb	r3, r3
 8015b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b88:	d103      	bne.n	8015b92 <xQueueGenericSend+0x114>
 8015b8a:	6a3b      	ldr	r3, [r7, #32]
 8015b8c:	2200      	movs	r2, #0
 8015b8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015b92:	6a3b      	ldr	r3, [r7, #32]
 8015b94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015b98:	b25b      	sxtb	r3, r3
 8015b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b9e:	d103      	bne.n	8015ba8 <xQueueGenericSend+0x12a>
 8015ba0:	6a3b      	ldr	r3, [r7, #32]
 8015ba2:	2200      	movs	r2, #0
 8015ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015ba8:	f001 fce6 	bl	8017578 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015bac:	1d3a      	adds	r2, r7, #4
 8015bae:	f107 0314 	add.w	r3, r7, #20
 8015bb2:	4611      	mov	r1, r2
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	f000 ff7b 	bl	8016ab0 <xTaskCheckForTimeOut>
 8015bba:	4603      	mov	r3, r0
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d11d      	bne.n	8015bfc <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015bc0:	6a38      	ldr	r0, [r7, #32]
 8015bc2:	f000 fa47 	bl	8016054 <prvIsQueueFull>
 8015bc6:	4603      	mov	r3, r0
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d011      	beq.n	8015bf0 <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015bcc:	6a3b      	ldr	r3, [r7, #32]
 8015bce:	3310      	adds	r3, #16
 8015bd0:	687a      	ldr	r2, [r7, #4]
 8015bd2:	4611      	mov	r1, r2
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	f000 feb9 	bl	801694c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015bda:	6a38      	ldr	r0, [r7, #32]
 8015bdc:	f000 f9d2 	bl	8015f84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015be0:	f000 fd10 	bl	8016604 <xTaskResumeAll>
 8015be4:	4603      	mov	r3, r0
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d188      	bne.n	8015afc <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 8015bea:	f001 fca1 	bl	8017530 <vPortYield>
 8015bee:	e785      	b.n	8015afc <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015bf0:	6a38      	ldr	r0, [r7, #32]
 8015bf2:	f000 f9c7 	bl	8015f84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015bf6:	f000 fd05 	bl	8016604 <xTaskResumeAll>
 8015bfa:	e77f      	b.n	8015afc <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015bfc:	6a38      	ldr	r0, [r7, #32]
 8015bfe:	f000 f9c1 	bl	8015f84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015c02:	f000 fcff 	bl	8016604 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015c06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015c08:	4618      	mov	r0, r3
 8015c0a:	3728      	adds	r7, #40	; 0x28
 8015c0c:	46bd      	mov	sp, r7
 8015c0e:	bd80      	pop	{r7, pc}

08015c10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015c10:	b580      	push	{r7, lr}
 8015c12:	b08a      	sub	sp, #40	; 0x28
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	60f8      	str	r0, [r7, #12]
 8015c18:	60b9      	str	r1, [r7, #8]
 8015c1a:	607a      	str	r2, [r7, #4]
 8015c1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8015c22:	6a3b      	ldr	r3, [r7, #32]
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d102      	bne.n	8015c2e <xQueueGenericSendFromISR+0x1e>
 8015c28:	f001 fdc6 	bl	80177b8 <ulSetInterruptMask>
 8015c2c:	e7fe      	b.n	8015c2c <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015c2e:	68bb      	ldr	r3, [r7, #8]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d103      	bne.n	8015c3c <xQueueGenericSendFromISR+0x2c>
 8015c34:	6a3b      	ldr	r3, [r7, #32]
 8015c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d101      	bne.n	8015c40 <xQueueGenericSendFromISR+0x30>
 8015c3c:	2301      	movs	r3, #1
 8015c3e:	e000      	b.n	8015c42 <xQueueGenericSendFromISR+0x32>
 8015c40:	2300      	movs	r3, #0
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d102      	bne.n	8015c4c <xQueueGenericSendFromISR+0x3c>
 8015c46:	f001 fdb7 	bl	80177b8 <ulSetInterruptMask>
 8015c4a:	e7fe      	b.n	8015c4a <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015c4c:	683b      	ldr	r3, [r7, #0]
 8015c4e:	2b02      	cmp	r3, #2
 8015c50:	d103      	bne.n	8015c5a <xQueueGenericSendFromISR+0x4a>
 8015c52:	6a3b      	ldr	r3, [r7, #32]
 8015c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015c56:	2b01      	cmp	r3, #1
 8015c58:	d101      	bne.n	8015c5e <xQueueGenericSendFromISR+0x4e>
 8015c5a:	2301      	movs	r3, #1
 8015c5c:	e000      	b.n	8015c60 <xQueueGenericSendFromISR+0x50>
 8015c5e:	2300      	movs	r3, #0
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d102      	bne.n	8015c6a <xQueueGenericSendFromISR+0x5a>
 8015c64:	f001 fda8 	bl	80177b8 <ulSetInterruptMask>
 8015c68:	e7fe      	b.n	8015c68 <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015c6a:	f001 fda5 	bl	80177b8 <ulSetInterruptMask>
 8015c6e:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015c70:	6a3b      	ldr	r3, [r7, #32]
 8015c72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015c74:	6a3b      	ldr	r3, [r7, #32]
 8015c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015c78:	429a      	cmp	r2, r3
 8015c7a:	d302      	bcc.n	8015c82 <xQueueGenericSendFromISR+0x72>
 8015c7c:	683b      	ldr	r3, [r7, #0]
 8015c7e:	2b02      	cmp	r3, #2
 8015c80:	d12d      	bne.n	8015cde <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015c82:	6a3b      	ldr	r3, [r7, #32]
 8015c84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015c88:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015c8a:	6a3b      	ldr	r3, [r7, #32]
 8015c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c8e:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015c90:	683a      	ldr	r2, [r7, #0]
 8015c92:	68b9      	ldr	r1, [r7, #8]
 8015c94:	6a38      	ldr	r0, [r7, #32]
 8015c96:	f000 f8e5 	bl	8015e64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015c9a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ca2:	d112      	bne.n	8015cca <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015ca4:	6a3b      	ldr	r3, [r7, #32]
 8015ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d015      	beq.n	8015cd8 <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015cac:	6a3b      	ldr	r3, [r7, #32]
 8015cae:	3324      	adds	r3, #36	; 0x24
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	f000 fe8b 	bl	80169cc <xTaskRemoveFromEventList>
 8015cb6:	4603      	mov	r3, r0
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d00d      	beq.n	8015cd8 <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d00a      	beq.n	8015cd8 <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	2201      	movs	r2, #1
 8015cc6:	601a      	str	r2, [r3, #0]
 8015cc8:	e006      	b.n	8015cd8 <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015cca:	7efb      	ldrb	r3, [r7, #27]
 8015ccc:	3301      	adds	r3, #1
 8015cce:	b2db      	uxtb	r3, r3
 8015cd0:	b25a      	sxtb	r2, r3
 8015cd2:	6a3b      	ldr	r3, [r7, #32]
 8015cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015cd8:	2301      	movs	r3, #1
 8015cda:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8015cdc:	e001      	b.n	8015ce2 <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015cde:	2300      	movs	r3, #0
 8015ce0:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8015ce2:	69f8      	ldr	r0, [r7, #28]
 8015ce4:	f001 fd75 	bl	80177d2 <vClearInterruptMask>

	return xReturn;
 8015ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015cea:	4618      	mov	r0, r3
 8015cec:	3728      	adds	r7, #40	; 0x28
 8015cee:	46bd      	mov	sp, r7
 8015cf0:	bd80      	pop	{r7, pc}

08015cf2 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015cf2:	b580      	push	{r7, lr}
 8015cf4:	b08a      	sub	sp, #40	; 0x28
 8015cf6:	af00      	add	r7, sp, #0
 8015cf8:	60f8      	str	r0, [r7, #12]
 8015cfa:	60b9      	str	r1, [r7, #8]
 8015cfc:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015cfe:	2300      	movs	r3, #0
 8015d00:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015d06:	6a3b      	ldr	r3, [r7, #32]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d102      	bne.n	8015d12 <xQueueReceive+0x20>
 8015d0c:	f001 fd54 	bl	80177b8 <ulSetInterruptMask>
 8015d10:	e7fe      	b.n	8015d10 <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015d12:	68bb      	ldr	r3, [r7, #8]
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d103      	bne.n	8015d20 <xQueueReceive+0x2e>
 8015d18:	6a3b      	ldr	r3, [r7, #32]
 8015d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d101      	bne.n	8015d24 <xQueueReceive+0x32>
 8015d20:	2301      	movs	r3, #1
 8015d22:	e000      	b.n	8015d26 <xQueueReceive+0x34>
 8015d24:	2300      	movs	r3, #0
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d102      	bne.n	8015d30 <xQueueReceive+0x3e>
 8015d2a:	f001 fd45 	bl	80177b8 <ulSetInterruptMask>
 8015d2e:	e7fe      	b.n	8015d2e <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015d30:	f000 ffe2 	bl	8016cf8 <xTaskGetSchedulerState>
 8015d34:	4603      	mov	r3, r0
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d102      	bne.n	8015d40 <xQueueReceive+0x4e>
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d101      	bne.n	8015d44 <xQueueReceive+0x52>
 8015d40:	2301      	movs	r3, #1
 8015d42:	e000      	b.n	8015d46 <xQueueReceive+0x54>
 8015d44:	2300      	movs	r3, #0
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d102      	bne.n	8015d50 <xQueueReceive+0x5e>
 8015d4a:	f001 fd35 	bl	80177b8 <ulSetInterruptMask>
 8015d4e:	e7fe      	b.n	8015d4e <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015d50:	f001 fc00 	bl	8017554 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015d54:	6a3b      	ldr	r3, [r7, #32]
 8015d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d58:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015d5a:	69fb      	ldr	r3, [r7, #28]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d019      	beq.n	8015d94 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015d60:	68b9      	ldr	r1, [r7, #8]
 8015d62:	6a38      	ldr	r0, [r7, #32]
 8015d64:	f000 f8e8 	bl	8015f38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015d68:	69fb      	ldr	r3, [r7, #28]
 8015d6a:	1e5a      	subs	r2, r3, #1
 8015d6c:	6a3b      	ldr	r3, [r7, #32]
 8015d6e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015d70:	6a3b      	ldr	r3, [r7, #32]
 8015d72:	691b      	ldr	r3, [r3, #16]
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d009      	beq.n	8015d8c <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015d78:	6a3b      	ldr	r3, [r7, #32]
 8015d7a:	3310      	adds	r3, #16
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	f000 fe25 	bl	80169cc <xTaskRemoveFromEventList>
 8015d82:	4603      	mov	r3, r0
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d001      	beq.n	8015d8c <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015d88:	f001 fbd2 	bl	8017530 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015d8c:	f001 fbf4 	bl	8017578 <vPortExitCritical>
				return pdPASS;
 8015d90:	2301      	movs	r3, #1
 8015d92:	e063      	b.n	8015e5c <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d103      	bne.n	8015da2 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015d9a:	f001 fbed 	bl	8017578 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015d9e:	2300      	movs	r3, #0
 8015da0:	e05c      	b.n	8015e5c <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d106      	bne.n	8015db6 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015da8:	f107 0314 	add.w	r3, r7, #20
 8015dac:	4618      	mov	r0, r3
 8015dae:	f000 fe69 	bl	8016a84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015db2:	2301      	movs	r3, #1
 8015db4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015db6:	f001 fbdf 	bl	8017578 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015dba:	f000 fc15 	bl	80165e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015dbe:	f001 fbc9 	bl	8017554 <vPortEnterCritical>
 8015dc2:	6a3b      	ldr	r3, [r7, #32]
 8015dc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015dc8:	b25b      	sxtb	r3, r3
 8015dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015dce:	d103      	bne.n	8015dd8 <xQueueReceive+0xe6>
 8015dd0:	6a3b      	ldr	r3, [r7, #32]
 8015dd2:	2200      	movs	r2, #0
 8015dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015dd8:	6a3b      	ldr	r3, [r7, #32]
 8015dda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015dde:	b25b      	sxtb	r3, r3
 8015de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015de4:	d103      	bne.n	8015dee <xQueueReceive+0xfc>
 8015de6:	6a3b      	ldr	r3, [r7, #32]
 8015de8:	2200      	movs	r2, #0
 8015dea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015dee:	f001 fbc3 	bl	8017578 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015df2:	1d3a      	adds	r2, r7, #4
 8015df4:	f107 0314 	add.w	r3, r7, #20
 8015df8:	4611      	mov	r1, r2
 8015dfa:	4618      	mov	r0, r3
 8015dfc:	f000 fe58 	bl	8016ab0 <xTaskCheckForTimeOut>
 8015e00:	4603      	mov	r3, r0
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d11d      	bne.n	8015e42 <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015e06:	6a38      	ldr	r0, [r7, #32]
 8015e08:	f000 f90e 	bl	8016028 <prvIsQueueEmpty>
 8015e0c:	4603      	mov	r3, r0
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d011      	beq.n	8015e36 <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015e12:	6a3b      	ldr	r3, [r7, #32]
 8015e14:	3324      	adds	r3, #36	; 0x24
 8015e16:	687a      	ldr	r2, [r7, #4]
 8015e18:	4611      	mov	r1, r2
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	f000 fd96 	bl	801694c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015e20:	6a38      	ldr	r0, [r7, #32]
 8015e22:	f000 f8af 	bl	8015f84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015e26:	f000 fbed 	bl	8016604 <xTaskResumeAll>
 8015e2a:	4603      	mov	r3, r0
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d18f      	bne.n	8015d50 <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 8015e30:	f001 fb7e 	bl	8017530 <vPortYield>
 8015e34:	e78c      	b.n	8015d50 <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8015e36:	6a38      	ldr	r0, [r7, #32]
 8015e38:	f000 f8a4 	bl	8015f84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015e3c:	f000 fbe2 	bl	8016604 <xTaskResumeAll>
 8015e40:	e786      	b.n	8015d50 <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8015e42:	6a38      	ldr	r0, [r7, #32]
 8015e44:	f000 f89e 	bl	8015f84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015e48:	f000 fbdc 	bl	8016604 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015e4c:	6a38      	ldr	r0, [r7, #32]
 8015e4e:	f000 f8eb 	bl	8016028 <prvIsQueueEmpty>
 8015e52:	4603      	mov	r3, r0
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	f43f af7b 	beq.w	8015d50 <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015e5a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	3728      	adds	r7, #40	; 0x28
 8015e60:	46bd      	mov	sp, r7
 8015e62:	bd80      	pop	{r7, pc}

08015e64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015e64:	b580      	push	{r7, lr}
 8015e66:	b086      	sub	sp, #24
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	60f8      	str	r0, [r7, #12]
 8015e6c:	60b9      	str	r1, [r7, #8]
 8015e6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015e70:	2300      	movs	r3, #0
 8015e72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015e7a:	68fb      	ldr	r3, [r7, #12]
 8015e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d10d      	bne.n	8015e9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d14d      	bne.n	8015f26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	689b      	ldr	r3, [r3, #8]
 8015e8e:	4618      	mov	r0, r3
 8015e90:	f000 ff50 	bl	8016d34 <xTaskPriorityDisinherit>
 8015e94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	2200      	movs	r2, #0
 8015e9a:	609a      	str	r2, [r3, #8]
 8015e9c:	e043      	b.n	8015f26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d119      	bne.n	8015ed8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	6858      	ldr	r0, [r3, #4]
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015eac:	461a      	mov	r2, r3
 8015eae:	68b9      	ldr	r1, [r7, #8]
 8015eb0:	f003 fb01 	bl	80194b6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	685a      	ldr	r2, [r3, #4]
 8015eb8:	68fb      	ldr	r3, [r7, #12]
 8015eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ebc:	441a      	add	r2, r3
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	685a      	ldr	r2, [r3, #4]
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	689b      	ldr	r3, [r3, #8]
 8015eca:	429a      	cmp	r2, r3
 8015ecc:	d32b      	bcc.n	8015f26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	681a      	ldr	r2, [r3, #0]
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	605a      	str	r2, [r3, #4]
 8015ed6:	e026      	b.n	8015f26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	68d8      	ldr	r0, [r3, #12]
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ee0:	461a      	mov	r2, r3
 8015ee2:	68b9      	ldr	r1, [r7, #8]
 8015ee4:	f003 fae7 	bl	80194b6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	68da      	ldr	r2, [r3, #12]
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ef0:	425b      	negs	r3, r3
 8015ef2:	441a      	add	r2, r3
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	68da      	ldr	r2, [r3, #12]
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	429a      	cmp	r2, r3
 8015f02:	d207      	bcs.n	8015f14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	689a      	ldr	r2, [r3, #8]
 8015f08:	68fb      	ldr	r3, [r7, #12]
 8015f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f0c:	425b      	negs	r3, r3
 8015f0e:	441a      	add	r2, r3
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	2b02      	cmp	r3, #2
 8015f18:	d105      	bne.n	8015f26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015f1a:	693b      	ldr	r3, [r7, #16]
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d002      	beq.n	8015f26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015f20:	693b      	ldr	r3, [r7, #16]
 8015f22:	3b01      	subs	r3, #1
 8015f24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015f26:	693b      	ldr	r3, [r7, #16]
 8015f28:	1c5a      	adds	r2, r3, #1
 8015f2a:	68fb      	ldr	r3, [r7, #12]
 8015f2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8015f2e:	697b      	ldr	r3, [r7, #20]
}
 8015f30:	4618      	mov	r0, r3
 8015f32:	3718      	adds	r7, #24
 8015f34:	46bd      	mov	sp, r7
 8015f36:	bd80      	pop	{r7, pc}

08015f38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015f38:	b580      	push	{r7, lr}
 8015f3a:	b082      	sub	sp, #8
 8015f3c:	af00      	add	r7, sp, #0
 8015f3e:	6078      	str	r0, [r7, #4]
 8015f40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d018      	beq.n	8015f7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	68da      	ldr	r2, [r3, #12]
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f52:	441a      	add	r2, r3
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	68da      	ldr	r2, [r3, #12]
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	689b      	ldr	r3, [r3, #8]
 8015f60:	429a      	cmp	r2, r3
 8015f62:	d303      	bcc.n	8015f6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	681a      	ldr	r2, [r3, #0]
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	68d9      	ldr	r1, [r3, #12]
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f74:	461a      	mov	r2, r3
 8015f76:	6838      	ldr	r0, [r7, #0]
 8015f78:	f003 fa9d 	bl	80194b6 <memcpy>
	}
}
 8015f7c:	bf00      	nop
 8015f7e:	3708      	adds	r7, #8
 8015f80:	46bd      	mov	sp, r7
 8015f82:	bd80      	pop	{r7, pc}

08015f84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015f84:	b580      	push	{r7, lr}
 8015f86:	b084      	sub	sp, #16
 8015f88:	af00      	add	r7, sp, #0
 8015f8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015f8c:	f001 fae2 	bl	8017554 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015f96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015f98:	e011      	b.n	8015fbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d012      	beq.n	8015fc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	3324      	adds	r3, #36	; 0x24
 8015fa6:	4618      	mov	r0, r3
 8015fa8:	f000 fd10 	bl	80169cc <xTaskRemoveFromEventList>
 8015fac:	4603      	mov	r3, r0
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d001      	beq.n	8015fb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015fb2:	f000 fdcf 	bl	8016b54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015fb6:	7bfb      	ldrb	r3, [r7, #15]
 8015fb8:	3b01      	subs	r3, #1
 8015fba:	b2db      	uxtb	r3, r3
 8015fbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	dce9      	bgt.n	8015f9a <prvUnlockQueue+0x16>
 8015fc6:	e000      	b.n	8015fca <prvUnlockQueue+0x46>
					break;
 8015fc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	22ff      	movs	r2, #255	; 0xff
 8015fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8015fd2:	f001 fad1 	bl	8017578 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015fd6:	f001 fabd 	bl	8017554 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015fe0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015fe2:	e011      	b.n	8016008 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	691b      	ldr	r3, [r3, #16]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d012      	beq.n	8016012 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	3310      	adds	r3, #16
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	f000 fceb 	bl	80169cc <xTaskRemoveFromEventList>
 8015ff6:	4603      	mov	r3, r0
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d001      	beq.n	8016000 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015ffc:	f000 fdaa 	bl	8016b54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8016000:	7bbb      	ldrb	r3, [r7, #14]
 8016002:	3b01      	subs	r3, #1
 8016004:	b2db      	uxtb	r3, r3
 8016006:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016008:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801600c:	2b00      	cmp	r3, #0
 801600e:	dce9      	bgt.n	8015fe4 <prvUnlockQueue+0x60>
 8016010:	e000      	b.n	8016014 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8016012:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	22ff      	movs	r2, #255	; 0xff
 8016018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801601c:	f001 faac 	bl	8017578 <vPortExitCritical>
}
 8016020:	bf00      	nop
 8016022:	3710      	adds	r7, #16
 8016024:	46bd      	mov	sp, r7
 8016026:	bd80      	pop	{r7, pc}

08016028 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016028:	b580      	push	{r7, lr}
 801602a:	b084      	sub	sp, #16
 801602c:	af00      	add	r7, sp, #0
 801602e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016030:	f001 fa90 	bl	8017554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016038:	2b00      	cmp	r3, #0
 801603a:	d102      	bne.n	8016042 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801603c:	2301      	movs	r3, #1
 801603e:	60fb      	str	r3, [r7, #12]
 8016040:	e001      	b.n	8016046 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8016042:	2300      	movs	r3, #0
 8016044:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016046:	f001 fa97 	bl	8017578 <vPortExitCritical>

	return xReturn;
 801604a:	68fb      	ldr	r3, [r7, #12]
}
 801604c:	4618      	mov	r0, r3
 801604e:	3710      	adds	r7, #16
 8016050:	46bd      	mov	sp, r7
 8016052:	bd80      	pop	{r7, pc}

08016054 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8016054:	b580      	push	{r7, lr}
 8016056:	b084      	sub	sp, #16
 8016058:	af00      	add	r7, sp, #0
 801605a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801605c:	f001 fa7a 	bl	8017554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016068:	429a      	cmp	r2, r3
 801606a:	d102      	bne.n	8016072 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801606c:	2301      	movs	r3, #1
 801606e:	60fb      	str	r3, [r7, #12]
 8016070:	e001      	b.n	8016076 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8016072:	2300      	movs	r3, #0
 8016074:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016076:	f001 fa7f 	bl	8017578 <vPortExitCritical>

	return xReturn;
 801607a:	68fb      	ldr	r3, [r7, #12]
}
 801607c:	4618      	mov	r0, r3
 801607e:	3710      	adds	r7, #16
 8016080:	46bd      	mov	sp, r7
 8016082:	bd80      	pop	{r7, pc}

08016084 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016084:	b480      	push	{r7}
 8016086:	b085      	sub	sp, #20
 8016088:	af00      	add	r7, sp, #0
 801608a:	6078      	str	r0, [r7, #4]
 801608c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801608e:	2300      	movs	r3, #0
 8016090:	60fb      	str	r3, [r7, #12]
 8016092:	e014      	b.n	80160be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8016094:	4a0f      	ldr	r2, [pc, #60]	; (80160d4 <vQueueAddToRegistry+0x50>)
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801609c:	2b00      	cmp	r3, #0
 801609e:	d10b      	bne.n	80160b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80160a0:	490c      	ldr	r1, [pc, #48]	; (80160d4 <vQueueAddToRegistry+0x50>)
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	683a      	ldr	r2, [r7, #0]
 80160a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80160aa:	4a0a      	ldr	r2, [pc, #40]	; (80160d4 <vQueueAddToRegistry+0x50>)
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	00db      	lsls	r3, r3, #3
 80160b0:	4413      	add	r3, r2
 80160b2:	687a      	ldr	r2, [r7, #4]
 80160b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80160b6:	e006      	b.n	80160c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	3301      	adds	r3, #1
 80160bc:	60fb      	str	r3, [r7, #12]
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	2b07      	cmp	r3, #7
 80160c2:	d9e7      	bls.n	8016094 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80160c4:	bf00      	nop
 80160c6:	bf00      	nop
 80160c8:	3714      	adds	r7, #20
 80160ca:	46bd      	mov	sp, r7
 80160cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160d0:	4770      	bx	lr
 80160d2:	bf00      	nop
 80160d4:	200016cc 	.word	0x200016cc

080160d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80160d8:	b580      	push	{r7, lr}
 80160da:	b086      	sub	sp, #24
 80160dc:	af00      	add	r7, sp, #0
 80160de:	60f8      	str	r0, [r7, #12]
 80160e0:	60b9      	str	r1, [r7, #8]
 80160e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80160e8:	f001 fa34 	bl	8017554 <vPortEnterCritical>
 80160ec:	697b      	ldr	r3, [r7, #20]
 80160ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80160f2:	b25b      	sxtb	r3, r3
 80160f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160f8:	d103      	bne.n	8016102 <vQueueWaitForMessageRestricted+0x2a>
 80160fa:	697b      	ldr	r3, [r7, #20]
 80160fc:	2200      	movs	r2, #0
 80160fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016102:	697b      	ldr	r3, [r7, #20]
 8016104:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016108:	b25b      	sxtb	r3, r3
 801610a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801610e:	d103      	bne.n	8016118 <vQueueWaitForMessageRestricted+0x40>
 8016110:	697b      	ldr	r3, [r7, #20]
 8016112:	2200      	movs	r2, #0
 8016114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016118:	f001 fa2e 	bl	8017578 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801611c:	697b      	ldr	r3, [r7, #20]
 801611e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016120:	2b00      	cmp	r3, #0
 8016122:	d106      	bne.n	8016132 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016124:	697b      	ldr	r3, [r7, #20]
 8016126:	3324      	adds	r3, #36	; 0x24
 8016128:	687a      	ldr	r2, [r7, #4]
 801612a:	68b9      	ldr	r1, [r7, #8]
 801612c:	4618      	mov	r0, r3
 801612e:	f000 fc29 	bl	8016984 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8016132:	6978      	ldr	r0, [r7, #20]
 8016134:	f7ff ff26 	bl	8015f84 <prvUnlockQueue>
	}
 8016138:	bf00      	nop
 801613a:	3718      	adds	r7, #24
 801613c:	46bd      	mov	sp, r7
 801613e:	bd80      	pop	{r7, pc}

08016140 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016140:	b580      	push	{r7, lr}
 8016142:	b08c      	sub	sp, #48	; 0x30
 8016144:	af04      	add	r7, sp, #16
 8016146:	60f8      	str	r0, [r7, #12]
 8016148:	60b9      	str	r1, [r7, #8]
 801614a:	607a      	str	r2, [r7, #4]
 801614c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801614e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016150:	2b00      	cmp	r3, #0
 8016152:	d102      	bne.n	801615a <xTaskCreateStatic+0x1a>
 8016154:	f001 fb30 	bl	80177b8 <ulSetInterruptMask>
 8016158:	e7fe      	b.n	8016158 <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 801615a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801615c:	2b00      	cmp	r3, #0
 801615e:	d102      	bne.n	8016166 <xTaskCreateStatic+0x26>
 8016160:	f001 fb2a 	bl	80177b8 <ulSetInterruptMask>
 8016164:	e7fe      	b.n	8016164 <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8016166:	235c      	movs	r3, #92	; 0x5c
 8016168:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 801616a:	697b      	ldr	r3, [r7, #20]
 801616c:	2b5c      	cmp	r3, #92	; 0x5c
 801616e:	d002      	beq.n	8016176 <xTaskCreateStatic+0x36>
 8016170:	f001 fb22 	bl	80177b8 <ulSetInterruptMask>
 8016174:	e7fe      	b.n	8016174 <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8016176:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801617a:	2b00      	cmp	r3, #0
 801617c:	d01e      	beq.n	80161bc <xTaskCreateStatic+0x7c>
 801617e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016180:	2b00      	cmp	r3, #0
 8016182:	d01b      	beq.n	80161bc <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016186:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016188:	69fb      	ldr	r3, [r7, #28]
 801618a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801618c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801618e:	69fb      	ldr	r3, [r7, #28]
 8016190:	2202      	movs	r2, #2
 8016192:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016196:	2300      	movs	r3, #0
 8016198:	9303      	str	r3, [sp, #12]
 801619a:	69fb      	ldr	r3, [r7, #28]
 801619c:	9302      	str	r3, [sp, #8]
 801619e:	f107 0318 	add.w	r3, r7, #24
 80161a2:	9301      	str	r3, [sp, #4]
 80161a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161a6:	9300      	str	r3, [sp, #0]
 80161a8:	683b      	ldr	r3, [r7, #0]
 80161aa:	687a      	ldr	r2, [r7, #4]
 80161ac:	68b9      	ldr	r1, [r7, #8]
 80161ae:	68f8      	ldr	r0, [r7, #12]
 80161b0:	f000 f850 	bl	8016254 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80161b4:	69f8      	ldr	r0, [r7, #28]
 80161b6:	f000 f8d7 	bl	8016368 <prvAddNewTaskToReadyList>
 80161ba:	e001      	b.n	80161c0 <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 80161bc:	2300      	movs	r3, #0
 80161be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80161c0:	69bb      	ldr	r3, [r7, #24]
	}
 80161c2:	4618      	mov	r0, r3
 80161c4:	3720      	adds	r7, #32
 80161c6:	46bd      	mov	sp, r7
 80161c8:	bd80      	pop	{r7, pc}

080161ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80161ca:	b580      	push	{r7, lr}
 80161cc:	b08c      	sub	sp, #48	; 0x30
 80161ce:	af04      	add	r7, sp, #16
 80161d0:	60f8      	str	r0, [r7, #12]
 80161d2:	60b9      	str	r1, [r7, #8]
 80161d4:	603b      	str	r3, [r7, #0]
 80161d6:	4613      	mov	r3, r2
 80161d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80161da:	88fb      	ldrh	r3, [r7, #6]
 80161dc:	009b      	lsls	r3, r3, #2
 80161de:	4618      	mov	r0, r3
 80161e0:	f001 fb4a 	bl	8017878 <pvPortMalloc>
 80161e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80161e6:	697b      	ldr	r3, [r7, #20]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d00e      	beq.n	801620a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80161ec:	205c      	movs	r0, #92	; 0x5c
 80161ee:	f001 fb43 	bl	8017878 <pvPortMalloc>
 80161f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80161f4:	69fb      	ldr	r3, [r7, #28]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d003      	beq.n	8016202 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80161fa:	69fb      	ldr	r3, [r7, #28]
 80161fc:	697a      	ldr	r2, [r7, #20]
 80161fe:	631a      	str	r2, [r3, #48]	; 0x30
 8016200:	e005      	b.n	801620e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016202:	6978      	ldr	r0, [r7, #20]
 8016204:	f001 fbec 	bl	80179e0 <vPortFree>
 8016208:	e001      	b.n	801620e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801620a:	2300      	movs	r3, #0
 801620c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801620e:	69fb      	ldr	r3, [r7, #28]
 8016210:	2b00      	cmp	r3, #0
 8016212:	d017      	beq.n	8016244 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016214:	69fb      	ldr	r3, [r7, #28]
 8016216:	2200      	movs	r2, #0
 8016218:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801621c:	88fa      	ldrh	r2, [r7, #6]
 801621e:	2300      	movs	r3, #0
 8016220:	9303      	str	r3, [sp, #12]
 8016222:	69fb      	ldr	r3, [r7, #28]
 8016224:	9302      	str	r3, [sp, #8]
 8016226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016228:	9301      	str	r3, [sp, #4]
 801622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801622c:	9300      	str	r3, [sp, #0]
 801622e:	683b      	ldr	r3, [r7, #0]
 8016230:	68b9      	ldr	r1, [r7, #8]
 8016232:	68f8      	ldr	r0, [r7, #12]
 8016234:	f000 f80e 	bl	8016254 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016238:	69f8      	ldr	r0, [r7, #28]
 801623a:	f000 f895 	bl	8016368 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801623e:	2301      	movs	r3, #1
 8016240:	61bb      	str	r3, [r7, #24]
 8016242:	e002      	b.n	801624a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016244:	f04f 33ff 	mov.w	r3, #4294967295
 8016248:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801624a:	69bb      	ldr	r3, [r7, #24]
	}
 801624c:	4618      	mov	r0, r3
 801624e:	3720      	adds	r7, #32
 8016250:	46bd      	mov	sp, r7
 8016252:	bd80      	pop	{r7, pc}

08016254 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8016254:	b580      	push	{r7, lr}
 8016256:	b086      	sub	sp, #24
 8016258:	af00      	add	r7, sp, #0
 801625a:	60f8      	str	r0, [r7, #12]
 801625c:	60b9      	str	r1, [r7, #8]
 801625e:	607a      	str	r2, [r7, #4]
 8016260:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8016262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016264:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	009b      	lsls	r3, r3, #2
 801626a:	461a      	mov	r2, r3
 801626c:	21a5      	movs	r1, #165	; 0xa5
 801626e:	f003 f852 	bl	8019316 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801627c:	3b01      	subs	r3, #1
 801627e:	009b      	lsls	r3, r3, #2
 8016280:	4413      	add	r3, r2
 8016282:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8016284:	693b      	ldr	r3, [r7, #16]
 8016286:	f023 0307 	bic.w	r3, r3, #7
 801628a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801628c:	693b      	ldr	r3, [r7, #16]
 801628e:	f003 0307 	and.w	r3, r3, #7
 8016292:	2b00      	cmp	r3, #0
 8016294:	d002      	beq.n	801629c <prvInitialiseNewTask+0x48>
 8016296:	f001 fa8f 	bl	80177b8 <ulSetInterruptMask>
 801629a:	e7fe      	b.n	801629a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801629c:	68bb      	ldr	r3, [r7, #8]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d01f      	beq.n	80162e2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80162a2:	2300      	movs	r3, #0
 80162a4:	617b      	str	r3, [r7, #20]
 80162a6:	e012      	b.n	80162ce <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80162a8:	68ba      	ldr	r2, [r7, #8]
 80162aa:	697b      	ldr	r3, [r7, #20]
 80162ac:	4413      	add	r3, r2
 80162ae:	7819      	ldrb	r1, [r3, #0]
 80162b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80162b2:	697b      	ldr	r3, [r7, #20]
 80162b4:	4413      	add	r3, r2
 80162b6:	3334      	adds	r3, #52	; 0x34
 80162b8:	460a      	mov	r2, r1
 80162ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80162bc:	68ba      	ldr	r2, [r7, #8]
 80162be:	697b      	ldr	r3, [r7, #20]
 80162c0:	4413      	add	r3, r2
 80162c2:	781b      	ldrb	r3, [r3, #0]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d006      	beq.n	80162d6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80162c8:	697b      	ldr	r3, [r7, #20]
 80162ca:	3301      	adds	r3, #1
 80162cc:	617b      	str	r3, [r7, #20]
 80162ce:	697b      	ldr	r3, [r7, #20]
 80162d0:	2b0f      	cmp	r3, #15
 80162d2:	d9e9      	bls.n	80162a8 <prvInitialiseNewTask+0x54>
 80162d4:	e000      	b.n	80162d8 <prvInitialiseNewTask+0x84>
			{
				break;
 80162d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80162d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162da:	2200      	movs	r2, #0
 80162dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80162e0:	e003      	b.n	80162ea <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80162e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162e4:	2200      	movs	r2, #0
 80162e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80162ea:	6a3b      	ldr	r3, [r7, #32]
 80162ec:	2b37      	cmp	r3, #55	; 0x37
 80162ee:	d901      	bls.n	80162f4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80162f0:	2337      	movs	r3, #55	; 0x37
 80162f2:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80162f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162f6:	6a3a      	ldr	r2, [r7, #32]
 80162f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80162fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162fc:	6a3a      	ldr	r2, [r7, #32]
 80162fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8016300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016302:	2200      	movs	r2, #0
 8016304:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016308:	3304      	adds	r3, #4
 801630a:	4618      	mov	r0, r3
 801630c:	f7ff fa58 	bl	80157c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016312:	3318      	adds	r3, #24
 8016314:	4618      	mov	r0, r3
 8016316:	f7ff fa53 	bl	80157c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801631a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801631c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801631e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016320:	6a3b      	ldr	r3, [r7, #32]
 8016322:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016328:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801632a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801632c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801632e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016332:	2200      	movs	r2, #0
 8016334:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016338:	2200      	movs	r2, #0
 801633a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 801633e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016340:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8016342:	683b      	ldr	r3, [r7, #0]
 8016344:	68fa      	ldr	r2, [r7, #12]
 8016346:	6938      	ldr	r0, [r7, #16]
 8016348:	f001 f960 	bl	801760c <pxPortInitialiseStack>
 801634c:	4602      	mov	r2, r0
 801634e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016350:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8016352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016354:	2b00      	cmp	r3, #0
 8016356:	d002      	beq.n	801635e <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801635a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801635c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801635e:	bf00      	nop
 8016360:	3718      	adds	r7, #24
 8016362:	46bd      	mov	sp, r7
 8016364:	bd80      	pop	{r7, pc}
	...

08016368 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016368:	b580      	push	{r7, lr}
 801636a:	b082      	sub	sp, #8
 801636c:	af00      	add	r7, sp, #0
 801636e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016370:	f001 f8f0 	bl	8017554 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016374:	4b2a      	ldr	r3, [pc, #168]	; (8016420 <prvAddNewTaskToReadyList+0xb8>)
 8016376:	681b      	ldr	r3, [r3, #0]
 8016378:	3301      	adds	r3, #1
 801637a:	4a29      	ldr	r2, [pc, #164]	; (8016420 <prvAddNewTaskToReadyList+0xb8>)
 801637c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801637e:	4b29      	ldr	r3, [pc, #164]	; (8016424 <prvAddNewTaskToReadyList+0xbc>)
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	2b00      	cmp	r3, #0
 8016384:	d109      	bne.n	801639a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016386:	4a27      	ldr	r2, [pc, #156]	; (8016424 <prvAddNewTaskToReadyList+0xbc>)
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801638c:	4b24      	ldr	r3, [pc, #144]	; (8016420 <prvAddNewTaskToReadyList+0xb8>)
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	2b01      	cmp	r3, #1
 8016392:	d110      	bne.n	80163b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016394:	f000 fbfa 	bl	8016b8c <prvInitialiseTaskLists>
 8016398:	e00d      	b.n	80163b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801639a:	4b23      	ldr	r3, [pc, #140]	; (8016428 <prvAddNewTaskToReadyList+0xc0>)
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d109      	bne.n	80163b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80163a2:	4b20      	ldr	r3, [pc, #128]	; (8016424 <prvAddNewTaskToReadyList+0xbc>)
 80163a4:	681b      	ldr	r3, [r3, #0]
 80163a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163ac:	429a      	cmp	r2, r3
 80163ae:	d802      	bhi.n	80163b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80163b0:	4a1c      	ldr	r2, [pc, #112]	; (8016424 <prvAddNewTaskToReadyList+0xbc>)
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80163b6:	4b1d      	ldr	r3, [pc, #116]	; (801642c <prvAddNewTaskToReadyList+0xc4>)
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	3301      	adds	r3, #1
 80163bc:	4a1b      	ldr	r2, [pc, #108]	; (801642c <prvAddNewTaskToReadyList+0xc4>)
 80163be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80163c0:	4b1a      	ldr	r3, [pc, #104]	; (801642c <prvAddNewTaskToReadyList+0xc4>)
 80163c2:	681a      	ldr	r2, [r3, #0]
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80163cc:	4b18      	ldr	r3, [pc, #96]	; (8016430 <prvAddNewTaskToReadyList+0xc8>)
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	429a      	cmp	r2, r3
 80163d2:	d903      	bls.n	80163dc <prvAddNewTaskToReadyList+0x74>
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163d8:	4a15      	ldr	r2, [pc, #84]	; (8016430 <prvAddNewTaskToReadyList+0xc8>)
 80163da:	6013      	str	r3, [r2, #0]
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80163e0:	4613      	mov	r3, r2
 80163e2:	009b      	lsls	r3, r3, #2
 80163e4:	4413      	add	r3, r2
 80163e6:	009b      	lsls	r3, r3, #2
 80163e8:	4a12      	ldr	r2, [pc, #72]	; (8016434 <prvAddNewTaskToReadyList+0xcc>)
 80163ea:	441a      	add	r2, r3
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	3304      	adds	r3, #4
 80163f0:	4619      	mov	r1, r3
 80163f2:	4610      	mov	r0, r2
 80163f4:	f7ff f9f1 	bl	80157da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80163f8:	f001 f8be 	bl	8017578 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80163fc:	4b0a      	ldr	r3, [pc, #40]	; (8016428 <prvAddNewTaskToReadyList+0xc0>)
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	2b00      	cmp	r3, #0
 8016402:	d008      	beq.n	8016416 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016404:	4b07      	ldr	r3, [pc, #28]	; (8016424 <prvAddNewTaskToReadyList+0xbc>)
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801640e:	429a      	cmp	r2, r3
 8016410:	d201      	bcs.n	8016416 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016412:	f001 f88d 	bl	8017530 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016416:	bf00      	nop
 8016418:	3708      	adds	r7, #8
 801641a:	46bd      	mov	sp, r7
 801641c:	bd80      	pop	{r7, pc}
 801641e:	bf00      	nop
 8016420:	20001be0 	.word	0x20001be0
 8016424:	2000170c 	.word	0x2000170c
 8016428:	20001bec 	.word	0x20001bec
 801642c:	20001bfc 	.word	0x20001bfc
 8016430:	20001be8 	.word	0x20001be8
 8016434:	20001710 	.word	0x20001710

08016438 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8016438:	b580      	push	{r7, lr}
 801643a:	b086      	sub	sp, #24
 801643c:	af00      	add	r7, sp, #0
 801643e:	6078      	str	r0, [r7, #4]
 8016440:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8016442:	2300      	movs	r3, #0
 8016444:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	2b00      	cmp	r3, #0
 801644a:	d102      	bne.n	8016452 <vTaskDelayUntil+0x1a>
 801644c:	f001 f9b4 	bl	80177b8 <ulSetInterruptMask>
 8016450:	e7fe      	b.n	8016450 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
 8016452:	683b      	ldr	r3, [r7, #0]
 8016454:	2b00      	cmp	r3, #0
 8016456:	d102      	bne.n	801645e <vTaskDelayUntil+0x26>
 8016458:	f001 f9ae 	bl	80177b8 <ulSetInterruptMask>
 801645c:	e7fe      	b.n	801645c <vTaskDelayUntil+0x24>
		configASSERT( uxSchedulerSuspended == 0 );
 801645e:	4b23      	ldr	r3, [pc, #140]	; (80164ec <vTaskDelayUntil+0xb4>)
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	2b00      	cmp	r3, #0
 8016464:	d002      	beq.n	801646c <vTaskDelayUntil+0x34>
 8016466:	f001 f9a7 	bl	80177b8 <ulSetInterruptMask>
 801646a:	e7fe      	b.n	801646a <vTaskDelayUntil+0x32>

		vTaskSuspendAll();
 801646c:	f000 f8bc 	bl	80165e8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8016470:	4b1f      	ldr	r3, [pc, #124]	; (80164f0 <vTaskDelayUntil+0xb8>)
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	683a      	ldr	r2, [r7, #0]
 801647c:	4413      	add	r3, r2
 801647e:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	693a      	ldr	r2, [r7, #16]
 8016486:	429a      	cmp	r2, r3
 8016488:	d20b      	bcs.n	80164a2 <vTaskDelayUntil+0x6a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	68fa      	ldr	r2, [r7, #12]
 8016490:	429a      	cmp	r2, r3
 8016492:	d211      	bcs.n	80164b8 <vTaskDelayUntil+0x80>
 8016494:	68fa      	ldr	r2, [r7, #12]
 8016496:	693b      	ldr	r3, [r7, #16]
 8016498:	429a      	cmp	r2, r3
 801649a:	d90d      	bls.n	80164b8 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
 801649c:	2301      	movs	r3, #1
 801649e:	617b      	str	r3, [r7, #20]
 80164a0:	e00a      	b.n	80164b8 <vTaskDelayUntil+0x80>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	68fa      	ldr	r2, [r7, #12]
 80164a8:	429a      	cmp	r2, r3
 80164aa:	d303      	bcc.n	80164b4 <vTaskDelayUntil+0x7c>
 80164ac:	68fa      	ldr	r2, [r7, #12]
 80164ae:	693b      	ldr	r3, [r7, #16]
 80164b0:	429a      	cmp	r2, r3
 80164b2:	d901      	bls.n	80164b8 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
 80164b4:	2301      	movs	r3, #1
 80164b6:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	68fa      	ldr	r2, [r7, #12]
 80164bc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80164be:	697b      	ldr	r3, [r7, #20]
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d006      	beq.n	80164d2 <vTaskDelayUntil+0x9a>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80164c4:	68fa      	ldr	r2, [r7, #12]
 80164c6:	693b      	ldr	r3, [r7, #16]
 80164c8:	1ad3      	subs	r3, r2, r3
 80164ca:	2100      	movs	r1, #0
 80164cc:	4618      	mov	r0, r3
 80164ce:	f000 fc8f 	bl	8016df0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80164d2:	f000 f897 	bl	8016604 <xTaskResumeAll>
 80164d6:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80164d8:	68bb      	ldr	r3, [r7, #8]
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d101      	bne.n	80164e2 <vTaskDelayUntil+0xaa>
		{
			portYIELD_WITHIN_API();
 80164de:	f001 f827 	bl	8017530 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80164e2:	bf00      	nop
 80164e4:	3718      	adds	r7, #24
 80164e6:	46bd      	mov	sp, r7
 80164e8:	bd80      	pop	{r7, pc}
 80164ea:	bf00      	nop
 80164ec:	20001c08 	.word	0x20001c08
 80164f0:	20001be4 	.word	0x20001be4

080164f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80164f4:	b580      	push	{r7, lr}
 80164f6:	b084      	sub	sp, #16
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80164fc:	2300      	movs	r3, #0
 80164fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	2b00      	cmp	r3, #0
 8016504:	d00f      	beq.n	8016526 <vTaskDelay+0x32>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8016506:	4b0c      	ldr	r3, [pc, #48]	; (8016538 <vTaskDelay+0x44>)
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	2b00      	cmp	r3, #0
 801650c:	d002      	beq.n	8016514 <vTaskDelay+0x20>
 801650e:	f001 f953 	bl	80177b8 <ulSetInterruptMask>
 8016512:	e7fe      	b.n	8016512 <vTaskDelay+0x1e>
			vTaskSuspendAll();
 8016514:	f000 f868 	bl	80165e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8016518:	2100      	movs	r1, #0
 801651a:	6878      	ldr	r0, [r7, #4]
 801651c:	f000 fc68 	bl	8016df0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016520:	f000 f870 	bl	8016604 <xTaskResumeAll>
 8016524:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	2b00      	cmp	r3, #0
 801652a:	d101      	bne.n	8016530 <vTaskDelay+0x3c>
		{
			portYIELD_WITHIN_API();
 801652c:	f001 f800 	bl	8017530 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016530:	bf00      	nop
 8016532:	3710      	adds	r7, #16
 8016534:	46bd      	mov	sp, r7
 8016536:	bd80      	pop	{r7, pc}
 8016538:	20001c08 	.word	0x20001c08

0801653c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801653c:	b580      	push	{r7, lr}
 801653e:	b088      	sub	sp, #32
 8016540:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016542:	2300      	movs	r3, #0
 8016544:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016546:	2300      	movs	r3, #0
 8016548:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801654a:	463a      	mov	r2, r7
 801654c:	1d39      	adds	r1, r7, #4
 801654e:	f107 0308 	add.w	r3, r7, #8
 8016552:	4618      	mov	r0, r3
 8016554:	f7ff f8e0 	bl	8015718 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016558:	6839      	ldr	r1, [r7, #0]
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	68ba      	ldr	r2, [r7, #8]
 801655e:	9202      	str	r2, [sp, #8]
 8016560:	9301      	str	r3, [sp, #4]
 8016562:	2300      	movs	r3, #0
 8016564:	9300      	str	r3, [sp, #0]
 8016566:	2300      	movs	r3, #0
 8016568:	460a      	mov	r2, r1
 801656a:	4919      	ldr	r1, [pc, #100]	; (80165d0 <vTaskStartScheduler+0x94>)
 801656c:	4819      	ldr	r0, [pc, #100]	; (80165d4 <vTaskStartScheduler+0x98>)
 801656e:	f7ff fde7 	bl	8016140 <xTaskCreateStatic>
 8016572:	4603      	mov	r3, r0
 8016574:	4a18      	ldr	r2, [pc, #96]	; (80165d8 <vTaskStartScheduler+0x9c>)
 8016576:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016578:	4b17      	ldr	r3, [pc, #92]	; (80165d8 <vTaskStartScheduler+0x9c>)
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	2b00      	cmp	r3, #0
 801657e:	d002      	beq.n	8016586 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016580:	2301      	movs	r3, #1
 8016582:	60fb      	str	r3, [r7, #12]
 8016584:	e001      	b.n	801658a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8016586:	2300      	movs	r3, #0
 8016588:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	2b01      	cmp	r3, #1
 801658e:	d102      	bne.n	8016596 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8016590:	f000 fc82 	bl	8016e98 <xTimerCreateTimerTask>
 8016594:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8016596:	68fb      	ldr	r3, [r7, #12]
 8016598:	2b01      	cmp	r3, #1
 801659a:	d10e      	bne.n	80165ba <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 801659c:	f001 f90c 	bl	80177b8 <ulSetInterruptMask>
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80165a0:	4b0e      	ldr	r3, [pc, #56]	; (80165dc <vTaskStartScheduler+0xa0>)
 80165a2:	f04f 32ff 	mov.w	r2, #4294967295
 80165a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80165a8:	4b0d      	ldr	r3, [pc, #52]	; (80165e0 <vTaskStartScheduler+0xa4>)
 80165aa:	2201      	movs	r2, #1
 80165ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80165ae:	4b0d      	ldr	r3, [pc, #52]	; (80165e4 <vTaskStartScheduler+0xa8>)
 80165b0:	2200      	movs	r2, #0
 80165b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80165b4:	f001 f8b4 	bl	8017720 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80165b8:	e006      	b.n	80165c8 <vTaskStartScheduler+0x8c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80165c0:	d102      	bne.n	80165c8 <vTaskStartScheduler+0x8c>
 80165c2:	f001 f8f9 	bl	80177b8 <ulSetInterruptMask>
 80165c6:	e7fe      	b.n	80165c6 <vTaskStartScheduler+0x8a>
}
 80165c8:	bf00      	nop
 80165ca:	3710      	adds	r7, #16
 80165cc:	46bd      	mov	sp, r7
 80165ce:	bd80      	pop	{r7, pc}
 80165d0:	0801a8b0 	.word	0x0801a8b0
 80165d4:	08016b6d 	.word	0x08016b6d
 80165d8:	20001c04 	.word	0x20001c04
 80165dc:	20001c00 	.word	0x20001c00
 80165e0:	20001bec 	.word	0x20001bec
 80165e4:	20001be4 	.word	0x20001be4

080165e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80165e8:	b480      	push	{r7}
 80165ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80165ec:	4b04      	ldr	r3, [pc, #16]	; (8016600 <vTaskSuspendAll+0x18>)
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	3301      	adds	r3, #1
 80165f2:	4a03      	ldr	r2, [pc, #12]	; (8016600 <vTaskSuspendAll+0x18>)
 80165f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80165f6:	bf00      	nop
 80165f8:	46bd      	mov	sp, r7
 80165fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165fe:	4770      	bx	lr
 8016600:	20001c08 	.word	0x20001c08

08016604 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016604:	b580      	push	{r7, lr}
 8016606:	b084      	sub	sp, #16
 8016608:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801660a:	2300      	movs	r3, #0
 801660c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801660e:	2300      	movs	r3, #0
 8016610:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016612:	4b3b      	ldr	r3, [pc, #236]	; (8016700 <xTaskResumeAll+0xfc>)
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d102      	bne.n	8016620 <xTaskResumeAll+0x1c>
 801661a:	f001 f8cd 	bl	80177b8 <ulSetInterruptMask>
 801661e:	e7fe      	b.n	801661e <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016620:	f000 ff98 	bl	8017554 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016624:	4b36      	ldr	r3, [pc, #216]	; (8016700 <xTaskResumeAll+0xfc>)
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	3b01      	subs	r3, #1
 801662a:	4a35      	ldr	r2, [pc, #212]	; (8016700 <xTaskResumeAll+0xfc>)
 801662c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801662e:	4b34      	ldr	r3, [pc, #208]	; (8016700 <xTaskResumeAll+0xfc>)
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	2b00      	cmp	r3, #0
 8016634:	d15c      	bne.n	80166f0 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016636:	4b33      	ldr	r3, [pc, #204]	; (8016704 <xTaskResumeAll+0x100>)
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	2b00      	cmp	r3, #0
 801663c:	d058      	beq.n	80166f0 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801663e:	e02f      	b.n	80166a0 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016640:	4b31      	ldr	r3, [pc, #196]	; (8016708 <xTaskResumeAll+0x104>)
 8016642:	68db      	ldr	r3, [r3, #12]
 8016644:	68db      	ldr	r3, [r3, #12]
 8016646:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	3318      	adds	r3, #24
 801664c:	4618      	mov	r0, r3
 801664e:	f7ff f921 	bl	8015894 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016652:	68fb      	ldr	r3, [r7, #12]
 8016654:	3304      	adds	r3, #4
 8016656:	4618      	mov	r0, r3
 8016658:	f7ff f91c 	bl	8015894 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016660:	4b2a      	ldr	r3, [pc, #168]	; (801670c <xTaskResumeAll+0x108>)
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	429a      	cmp	r2, r3
 8016666:	d903      	bls.n	8016670 <xTaskResumeAll+0x6c>
 8016668:	68fb      	ldr	r3, [r7, #12]
 801666a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801666c:	4a27      	ldr	r2, [pc, #156]	; (801670c <xTaskResumeAll+0x108>)
 801666e:	6013      	str	r3, [r2, #0]
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016674:	4613      	mov	r3, r2
 8016676:	009b      	lsls	r3, r3, #2
 8016678:	4413      	add	r3, r2
 801667a:	009b      	lsls	r3, r3, #2
 801667c:	4a24      	ldr	r2, [pc, #144]	; (8016710 <xTaskResumeAll+0x10c>)
 801667e:	441a      	add	r2, r3
 8016680:	68fb      	ldr	r3, [r7, #12]
 8016682:	3304      	adds	r3, #4
 8016684:	4619      	mov	r1, r3
 8016686:	4610      	mov	r0, r2
 8016688:	f7ff f8a7 	bl	80157da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801668c:	68fb      	ldr	r3, [r7, #12]
 801668e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016690:	4b20      	ldr	r3, [pc, #128]	; (8016714 <xTaskResumeAll+0x110>)
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016696:	429a      	cmp	r2, r3
 8016698:	d302      	bcc.n	80166a0 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 801669a:	4b1f      	ldr	r3, [pc, #124]	; (8016718 <xTaskResumeAll+0x114>)
 801669c:	2201      	movs	r2, #1
 801669e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80166a0:	4b19      	ldr	r3, [pc, #100]	; (8016708 <xTaskResumeAll+0x104>)
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d1cb      	bne.n	8016640 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80166a8:	68fb      	ldr	r3, [r7, #12]
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d001      	beq.n	80166b2 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80166ae:	f000 fb03 	bl	8016cb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80166b2:	4b1a      	ldr	r3, [pc, #104]	; (801671c <xTaskResumeAll+0x118>)
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d010      	beq.n	80166e0 <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80166be:	f000 f83f 	bl	8016740 <xTaskIncrementTick>
 80166c2:	4603      	mov	r3, r0
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d002      	beq.n	80166ce <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 80166c8:	4b13      	ldr	r3, [pc, #76]	; (8016718 <xTaskResumeAll+0x114>)
 80166ca:	2201      	movs	r2, #1
 80166cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	3b01      	subs	r3, #1
 80166d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d1f1      	bne.n	80166be <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 80166da:	4b10      	ldr	r3, [pc, #64]	; (801671c <xTaskResumeAll+0x118>)
 80166dc:	2200      	movs	r2, #0
 80166de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80166e0:	4b0d      	ldr	r3, [pc, #52]	; (8016718 <xTaskResumeAll+0x114>)
 80166e2:	681b      	ldr	r3, [r3, #0]
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d003      	beq.n	80166f0 <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80166e8:	2301      	movs	r3, #1
 80166ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80166ec:	f000 ff20 	bl	8017530 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80166f0:	f000 ff42 	bl	8017578 <vPortExitCritical>

	return xAlreadyYielded;
 80166f4:	68bb      	ldr	r3, [r7, #8]
}
 80166f6:	4618      	mov	r0, r3
 80166f8:	3710      	adds	r7, #16
 80166fa:	46bd      	mov	sp, r7
 80166fc:	bd80      	pop	{r7, pc}
 80166fe:	bf00      	nop
 8016700:	20001c08 	.word	0x20001c08
 8016704:	20001be0 	.word	0x20001be0
 8016708:	20001ba0 	.word	0x20001ba0
 801670c:	20001be8 	.word	0x20001be8
 8016710:	20001710 	.word	0x20001710
 8016714:	2000170c 	.word	0x2000170c
 8016718:	20001bf4 	.word	0x20001bf4
 801671c:	20001bf0 	.word	0x20001bf0

08016720 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016720:	b480      	push	{r7}
 8016722:	b083      	sub	sp, #12
 8016724:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016726:	4b05      	ldr	r3, [pc, #20]	; (801673c <xTaskGetTickCount+0x1c>)
 8016728:	681b      	ldr	r3, [r3, #0]
 801672a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801672c:	687b      	ldr	r3, [r7, #4]
}
 801672e:	4618      	mov	r0, r3
 8016730:	370c      	adds	r7, #12
 8016732:	46bd      	mov	sp, r7
 8016734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016738:	4770      	bx	lr
 801673a:	bf00      	nop
 801673c:	20001be4 	.word	0x20001be4

08016740 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016740:	b580      	push	{r7, lr}
 8016742:	b086      	sub	sp, #24
 8016744:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016746:	2300      	movs	r3, #0
 8016748:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801674a:	4b4b      	ldr	r3, [pc, #300]	; (8016878 <xTaskIncrementTick+0x138>)
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	2b00      	cmp	r3, #0
 8016750:	f040 8087 	bne.w	8016862 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016754:	4b49      	ldr	r3, [pc, #292]	; (801687c <xTaskIncrementTick+0x13c>)
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	3301      	adds	r3, #1
 801675a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801675c:	4a47      	ldr	r2, [pc, #284]	; (801687c <xTaskIncrementTick+0x13c>)
 801675e:	693b      	ldr	r3, [r7, #16]
 8016760:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016762:	693b      	ldr	r3, [r7, #16]
 8016764:	2b00      	cmp	r3, #0
 8016766:	d118      	bne.n	801679a <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8016768:	4b45      	ldr	r3, [pc, #276]	; (8016880 <xTaskIncrementTick+0x140>)
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	681b      	ldr	r3, [r3, #0]
 801676e:	2b00      	cmp	r3, #0
 8016770:	d002      	beq.n	8016778 <xTaskIncrementTick+0x38>
 8016772:	f001 f821 	bl	80177b8 <ulSetInterruptMask>
 8016776:	e7fe      	b.n	8016776 <xTaskIncrementTick+0x36>
 8016778:	4b41      	ldr	r3, [pc, #260]	; (8016880 <xTaskIncrementTick+0x140>)
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	60fb      	str	r3, [r7, #12]
 801677e:	4b41      	ldr	r3, [pc, #260]	; (8016884 <xTaskIncrementTick+0x144>)
 8016780:	681b      	ldr	r3, [r3, #0]
 8016782:	4a3f      	ldr	r2, [pc, #252]	; (8016880 <xTaskIncrementTick+0x140>)
 8016784:	6013      	str	r3, [r2, #0]
 8016786:	4a3f      	ldr	r2, [pc, #252]	; (8016884 <xTaskIncrementTick+0x144>)
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	6013      	str	r3, [r2, #0]
 801678c:	4b3e      	ldr	r3, [pc, #248]	; (8016888 <xTaskIncrementTick+0x148>)
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	3301      	adds	r3, #1
 8016792:	4a3d      	ldr	r2, [pc, #244]	; (8016888 <xTaskIncrementTick+0x148>)
 8016794:	6013      	str	r3, [r2, #0]
 8016796:	f000 fa8f 	bl	8016cb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801679a:	4b3c      	ldr	r3, [pc, #240]	; (801688c <xTaskIncrementTick+0x14c>)
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	693a      	ldr	r2, [r7, #16]
 80167a0:	429a      	cmp	r2, r3
 80167a2:	d349      	bcc.n	8016838 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80167a4:	4b36      	ldr	r3, [pc, #216]	; (8016880 <xTaskIncrementTick+0x140>)
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d104      	bne.n	80167b8 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80167ae:	4b37      	ldr	r3, [pc, #220]	; (801688c <xTaskIncrementTick+0x14c>)
 80167b0:	f04f 32ff 	mov.w	r2, #4294967295
 80167b4:	601a      	str	r2, [r3, #0]
					break;
 80167b6:	e03f      	b.n	8016838 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80167b8:	4b31      	ldr	r3, [pc, #196]	; (8016880 <xTaskIncrementTick+0x140>)
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	68db      	ldr	r3, [r3, #12]
 80167be:	68db      	ldr	r3, [r3, #12]
 80167c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80167c2:	68bb      	ldr	r3, [r7, #8]
 80167c4:	685b      	ldr	r3, [r3, #4]
 80167c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80167c8:	693a      	ldr	r2, [r7, #16]
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	429a      	cmp	r2, r3
 80167ce:	d203      	bcs.n	80167d8 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80167d0:	4a2e      	ldr	r2, [pc, #184]	; (801688c <xTaskIncrementTick+0x14c>)
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80167d6:	e02f      	b.n	8016838 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80167d8:	68bb      	ldr	r3, [r7, #8]
 80167da:	3304      	adds	r3, #4
 80167dc:	4618      	mov	r0, r3
 80167de:	f7ff f859 	bl	8015894 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80167e2:	68bb      	ldr	r3, [r7, #8]
 80167e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d004      	beq.n	80167f4 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80167ea:	68bb      	ldr	r3, [r7, #8]
 80167ec:	3318      	adds	r3, #24
 80167ee:	4618      	mov	r0, r3
 80167f0:	f7ff f850 	bl	8015894 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80167f4:	68bb      	ldr	r3, [r7, #8]
 80167f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80167f8:	4b25      	ldr	r3, [pc, #148]	; (8016890 <xTaskIncrementTick+0x150>)
 80167fa:	681b      	ldr	r3, [r3, #0]
 80167fc:	429a      	cmp	r2, r3
 80167fe:	d903      	bls.n	8016808 <xTaskIncrementTick+0xc8>
 8016800:	68bb      	ldr	r3, [r7, #8]
 8016802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016804:	4a22      	ldr	r2, [pc, #136]	; (8016890 <xTaskIncrementTick+0x150>)
 8016806:	6013      	str	r3, [r2, #0]
 8016808:	68bb      	ldr	r3, [r7, #8]
 801680a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801680c:	4613      	mov	r3, r2
 801680e:	009b      	lsls	r3, r3, #2
 8016810:	4413      	add	r3, r2
 8016812:	009b      	lsls	r3, r3, #2
 8016814:	4a1f      	ldr	r2, [pc, #124]	; (8016894 <xTaskIncrementTick+0x154>)
 8016816:	441a      	add	r2, r3
 8016818:	68bb      	ldr	r3, [r7, #8]
 801681a:	3304      	adds	r3, #4
 801681c:	4619      	mov	r1, r3
 801681e:	4610      	mov	r0, r2
 8016820:	f7fe ffdb 	bl	80157da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016824:	68bb      	ldr	r3, [r7, #8]
 8016826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016828:	4b1b      	ldr	r3, [pc, #108]	; (8016898 <xTaskIncrementTick+0x158>)
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801682e:	429a      	cmp	r2, r3
 8016830:	d3b8      	bcc.n	80167a4 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8016832:	2301      	movs	r3, #1
 8016834:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016836:	e7b5      	b.n	80167a4 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016838:	4b17      	ldr	r3, [pc, #92]	; (8016898 <xTaskIncrementTick+0x158>)
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801683e:	4915      	ldr	r1, [pc, #84]	; (8016894 <xTaskIncrementTick+0x154>)
 8016840:	4613      	mov	r3, r2
 8016842:	009b      	lsls	r3, r3, #2
 8016844:	4413      	add	r3, r2
 8016846:	009b      	lsls	r3, r3, #2
 8016848:	440b      	add	r3, r1
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	2b01      	cmp	r3, #1
 801684e:	d901      	bls.n	8016854 <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 8016850:	2301      	movs	r3, #1
 8016852:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8016854:	4b11      	ldr	r3, [pc, #68]	; (801689c <xTaskIncrementTick+0x15c>)
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	2b00      	cmp	r3, #0
 801685a:	d007      	beq.n	801686c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 801685c:	2301      	movs	r3, #1
 801685e:	617b      	str	r3, [r7, #20]
 8016860:	e004      	b.n	801686c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8016862:	4b0f      	ldr	r3, [pc, #60]	; (80168a0 <xTaskIncrementTick+0x160>)
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	3301      	adds	r3, #1
 8016868:	4a0d      	ldr	r2, [pc, #52]	; (80168a0 <xTaskIncrementTick+0x160>)
 801686a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801686c:	697b      	ldr	r3, [r7, #20]
}
 801686e:	4618      	mov	r0, r3
 8016870:	3718      	adds	r7, #24
 8016872:	46bd      	mov	sp, r7
 8016874:	bd80      	pop	{r7, pc}
 8016876:	bf00      	nop
 8016878:	20001c08 	.word	0x20001c08
 801687c:	20001be4 	.word	0x20001be4
 8016880:	20001b98 	.word	0x20001b98
 8016884:	20001b9c 	.word	0x20001b9c
 8016888:	20001bf8 	.word	0x20001bf8
 801688c:	20001c00 	.word	0x20001c00
 8016890:	20001be8 	.word	0x20001be8
 8016894:	20001710 	.word	0x20001710
 8016898:	2000170c 	.word	0x2000170c
 801689c:	20001bf4 	.word	0x20001bf4
 80168a0:	20001bf0 	.word	0x20001bf0

080168a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80168a4:	b580      	push	{r7, lr}
 80168a6:	b082      	sub	sp, #8
 80168a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80168aa:	4b23      	ldr	r3, [pc, #140]	; (8016938 <vTaskSwitchContext+0x94>)
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d003      	beq.n	80168ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80168b2:	4b22      	ldr	r3, [pc, #136]	; (801693c <vTaskSwitchContext+0x98>)
 80168b4:	2201      	movs	r2, #1
 80168b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80168b8:	e039      	b.n	801692e <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 80168ba:	4b20      	ldr	r3, [pc, #128]	; (801693c <vTaskSwitchContext+0x98>)
 80168bc:	2200      	movs	r2, #0
 80168be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80168c0:	4b1f      	ldr	r3, [pc, #124]	; (8016940 <vTaskSwitchContext+0x9c>)
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	607b      	str	r3, [r7, #4]
 80168c6:	e008      	b.n	80168da <vTaskSwitchContext+0x36>
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d102      	bne.n	80168d4 <vTaskSwitchContext+0x30>
 80168ce:	f000 ff73 	bl	80177b8 <ulSetInterruptMask>
 80168d2:	e7fe      	b.n	80168d2 <vTaskSwitchContext+0x2e>
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	3b01      	subs	r3, #1
 80168d8:	607b      	str	r3, [r7, #4]
 80168da:	491a      	ldr	r1, [pc, #104]	; (8016944 <vTaskSwitchContext+0xa0>)
 80168dc:	687a      	ldr	r2, [r7, #4]
 80168de:	4613      	mov	r3, r2
 80168e0:	009b      	lsls	r3, r3, #2
 80168e2:	4413      	add	r3, r2
 80168e4:	009b      	lsls	r3, r3, #2
 80168e6:	440b      	add	r3, r1
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d0ec      	beq.n	80168c8 <vTaskSwitchContext+0x24>
 80168ee:	687a      	ldr	r2, [r7, #4]
 80168f0:	4613      	mov	r3, r2
 80168f2:	009b      	lsls	r3, r3, #2
 80168f4:	4413      	add	r3, r2
 80168f6:	009b      	lsls	r3, r3, #2
 80168f8:	4a12      	ldr	r2, [pc, #72]	; (8016944 <vTaskSwitchContext+0xa0>)
 80168fa:	4413      	add	r3, r2
 80168fc:	603b      	str	r3, [r7, #0]
 80168fe:	683b      	ldr	r3, [r7, #0]
 8016900:	685b      	ldr	r3, [r3, #4]
 8016902:	685a      	ldr	r2, [r3, #4]
 8016904:	683b      	ldr	r3, [r7, #0]
 8016906:	605a      	str	r2, [r3, #4]
 8016908:	683b      	ldr	r3, [r7, #0]
 801690a:	685a      	ldr	r2, [r3, #4]
 801690c:	683b      	ldr	r3, [r7, #0]
 801690e:	3308      	adds	r3, #8
 8016910:	429a      	cmp	r2, r3
 8016912:	d104      	bne.n	801691e <vTaskSwitchContext+0x7a>
 8016914:	683b      	ldr	r3, [r7, #0]
 8016916:	685b      	ldr	r3, [r3, #4]
 8016918:	685a      	ldr	r2, [r3, #4]
 801691a:	683b      	ldr	r3, [r7, #0]
 801691c:	605a      	str	r2, [r3, #4]
 801691e:	683b      	ldr	r3, [r7, #0]
 8016920:	685b      	ldr	r3, [r3, #4]
 8016922:	68db      	ldr	r3, [r3, #12]
 8016924:	4a08      	ldr	r2, [pc, #32]	; (8016948 <vTaskSwitchContext+0xa4>)
 8016926:	6013      	str	r3, [r2, #0]
 8016928:	4a05      	ldr	r2, [pc, #20]	; (8016940 <vTaskSwitchContext+0x9c>)
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	6013      	str	r3, [r2, #0]
}
 801692e:	bf00      	nop
 8016930:	3708      	adds	r7, #8
 8016932:	46bd      	mov	sp, r7
 8016934:	bd80      	pop	{r7, pc}
 8016936:	bf00      	nop
 8016938:	20001c08 	.word	0x20001c08
 801693c:	20001bf4 	.word	0x20001bf4
 8016940:	20001be8 	.word	0x20001be8
 8016944:	20001710 	.word	0x20001710
 8016948:	2000170c 	.word	0x2000170c

0801694c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801694c:	b580      	push	{r7, lr}
 801694e:	b082      	sub	sp, #8
 8016950:	af00      	add	r7, sp, #0
 8016952:	6078      	str	r0, [r7, #4]
 8016954:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	2b00      	cmp	r3, #0
 801695a:	d102      	bne.n	8016962 <vTaskPlaceOnEventList+0x16>
 801695c:	f000 ff2c 	bl	80177b8 <ulSetInterruptMask>
 8016960:	e7fe      	b.n	8016960 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016962:	4b07      	ldr	r3, [pc, #28]	; (8016980 <vTaskPlaceOnEventList+0x34>)
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	3318      	adds	r3, #24
 8016968:	4619      	mov	r1, r3
 801696a:	6878      	ldr	r0, [r7, #4]
 801696c:	f7fe ff59 	bl	8015822 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016970:	2101      	movs	r1, #1
 8016972:	6838      	ldr	r0, [r7, #0]
 8016974:	f000 fa3c 	bl	8016df0 <prvAddCurrentTaskToDelayedList>
}
 8016978:	bf00      	nop
 801697a:	3708      	adds	r7, #8
 801697c:	46bd      	mov	sp, r7
 801697e:	bd80      	pop	{r7, pc}
 8016980:	2000170c 	.word	0x2000170c

08016984 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016984:	b580      	push	{r7, lr}
 8016986:	b084      	sub	sp, #16
 8016988:	af00      	add	r7, sp, #0
 801698a:	60f8      	str	r0, [r7, #12]
 801698c:	60b9      	str	r1, [r7, #8]
 801698e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8016990:	68fb      	ldr	r3, [r7, #12]
 8016992:	2b00      	cmp	r3, #0
 8016994:	d102      	bne.n	801699c <vTaskPlaceOnEventListRestricted+0x18>
 8016996:	f000 ff0f 	bl	80177b8 <ulSetInterruptMask>
 801699a:	e7fe      	b.n	801699a <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801699c:	4b0a      	ldr	r3, [pc, #40]	; (80169c8 <vTaskPlaceOnEventListRestricted+0x44>)
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	3318      	adds	r3, #24
 80169a2:	4619      	mov	r1, r3
 80169a4:	68f8      	ldr	r0, [r7, #12]
 80169a6:	f7fe ff18 	bl	80157da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d002      	beq.n	80169b6 <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 80169b0:	f04f 33ff 	mov.w	r3, #4294967295
 80169b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80169b6:	6879      	ldr	r1, [r7, #4]
 80169b8:	68b8      	ldr	r0, [r7, #8]
 80169ba:	f000 fa19 	bl	8016df0 <prvAddCurrentTaskToDelayedList>
	}
 80169be:	bf00      	nop
 80169c0:	3710      	adds	r7, #16
 80169c2:	46bd      	mov	sp, r7
 80169c4:	bd80      	pop	{r7, pc}
 80169c6:	bf00      	nop
 80169c8:	2000170c 	.word	0x2000170c

080169cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80169cc:	b580      	push	{r7, lr}
 80169ce:	b084      	sub	sp, #16
 80169d0:	af00      	add	r7, sp, #0
 80169d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	68db      	ldr	r3, [r3, #12]
 80169d8:	68db      	ldr	r3, [r3, #12]
 80169da:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80169dc:	68bb      	ldr	r3, [r7, #8]
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d102      	bne.n	80169e8 <xTaskRemoveFromEventList+0x1c>
 80169e2:	f000 fee9 	bl	80177b8 <ulSetInterruptMask>
 80169e6:	e7fe      	b.n	80169e6 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80169e8:	68bb      	ldr	r3, [r7, #8]
 80169ea:	3318      	adds	r3, #24
 80169ec:	4618      	mov	r0, r3
 80169ee:	f7fe ff51 	bl	8015894 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80169f2:	4b1e      	ldr	r3, [pc, #120]	; (8016a6c <xTaskRemoveFromEventList+0xa0>)
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d11d      	bne.n	8016a36 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80169fa:	68bb      	ldr	r3, [r7, #8]
 80169fc:	3304      	adds	r3, #4
 80169fe:	4618      	mov	r0, r3
 8016a00:	f7fe ff48 	bl	8015894 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016a04:	68bb      	ldr	r3, [r7, #8]
 8016a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016a08:	4b19      	ldr	r3, [pc, #100]	; (8016a70 <xTaskRemoveFromEventList+0xa4>)
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	429a      	cmp	r2, r3
 8016a0e:	d903      	bls.n	8016a18 <xTaskRemoveFromEventList+0x4c>
 8016a10:	68bb      	ldr	r3, [r7, #8]
 8016a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a14:	4a16      	ldr	r2, [pc, #88]	; (8016a70 <xTaskRemoveFromEventList+0xa4>)
 8016a16:	6013      	str	r3, [r2, #0]
 8016a18:	68bb      	ldr	r3, [r7, #8]
 8016a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016a1c:	4613      	mov	r3, r2
 8016a1e:	009b      	lsls	r3, r3, #2
 8016a20:	4413      	add	r3, r2
 8016a22:	009b      	lsls	r3, r3, #2
 8016a24:	4a13      	ldr	r2, [pc, #76]	; (8016a74 <xTaskRemoveFromEventList+0xa8>)
 8016a26:	441a      	add	r2, r3
 8016a28:	68bb      	ldr	r3, [r7, #8]
 8016a2a:	3304      	adds	r3, #4
 8016a2c:	4619      	mov	r1, r3
 8016a2e:	4610      	mov	r0, r2
 8016a30:	f7fe fed3 	bl	80157da <vListInsertEnd>
 8016a34:	e005      	b.n	8016a42 <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016a36:	68bb      	ldr	r3, [r7, #8]
 8016a38:	3318      	adds	r3, #24
 8016a3a:	4619      	mov	r1, r3
 8016a3c:	480e      	ldr	r0, [pc, #56]	; (8016a78 <xTaskRemoveFromEventList+0xac>)
 8016a3e:	f7fe fecc 	bl	80157da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016a42:	68bb      	ldr	r3, [r7, #8]
 8016a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016a46:	4b0d      	ldr	r3, [pc, #52]	; (8016a7c <xTaskRemoveFromEventList+0xb0>)
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a4c:	429a      	cmp	r2, r3
 8016a4e:	d905      	bls.n	8016a5c <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016a50:	2301      	movs	r3, #1
 8016a52:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016a54:	4b0a      	ldr	r3, [pc, #40]	; (8016a80 <xTaskRemoveFromEventList+0xb4>)
 8016a56:	2201      	movs	r2, #1
 8016a58:	601a      	str	r2, [r3, #0]
 8016a5a:	e001      	b.n	8016a60 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 8016a5c:	2300      	movs	r3, #0
 8016a5e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8016a60:	68fb      	ldr	r3, [r7, #12]
}
 8016a62:	4618      	mov	r0, r3
 8016a64:	3710      	adds	r7, #16
 8016a66:	46bd      	mov	sp, r7
 8016a68:	bd80      	pop	{r7, pc}
 8016a6a:	bf00      	nop
 8016a6c:	20001c08 	.word	0x20001c08
 8016a70:	20001be8 	.word	0x20001be8
 8016a74:	20001710 	.word	0x20001710
 8016a78:	20001ba0 	.word	0x20001ba0
 8016a7c:	2000170c 	.word	0x2000170c
 8016a80:	20001bf4 	.word	0x20001bf4

08016a84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016a84:	b480      	push	{r7}
 8016a86:	b083      	sub	sp, #12
 8016a88:	af00      	add	r7, sp, #0
 8016a8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016a8c:	4b06      	ldr	r3, [pc, #24]	; (8016aa8 <vTaskInternalSetTimeOutState+0x24>)
 8016a8e:	681a      	ldr	r2, [r3, #0]
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016a94:	4b05      	ldr	r3, [pc, #20]	; (8016aac <vTaskInternalSetTimeOutState+0x28>)
 8016a96:	681a      	ldr	r2, [r3, #0]
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	605a      	str	r2, [r3, #4]
}
 8016a9c:	bf00      	nop
 8016a9e:	370c      	adds	r7, #12
 8016aa0:	46bd      	mov	sp, r7
 8016aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aa6:	4770      	bx	lr
 8016aa8:	20001bf8 	.word	0x20001bf8
 8016aac:	20001be4 	.word	0x20001be4

08016ab0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016ab0:	b580      	push	{r7, lr}
 8016ab2:	b086      	sub	sp, #24
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	6078      	str	r0, [r7, #4]
 8016ab8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d102      	bne.n	8016ac6 <xTaskCheckForTimeOut+0x16>
 8016ac0:	f000 fe7a 	bl	80177b8 <ulSetInterruptMask>
 8016ac4:	e7fe      	b.n	8016ac4 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 8016ac6:	683b      	ldr	r3, [r7, #0]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d102      	bne.n	8016ad2 <xTaskCheckForTimeOut+0x22>
 8016acc:	f000 fe74 	bl	80177b8 <ulSetInterruptMask>
 8016ad0:	e7fe      	b.n	8016ad0 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 8016ad2:	f000 fd3f 	bl	8017554 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016ad6:	4b1d      	ldr	r3, [pc, #116]	; (8016b4c <xTaskCheckForTimeOut+0x9c>)
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	685b      	ldr	r3, [r3, #4]
 8016ae0:	693a      	ldr	r2, [r7, #16]
 8016ae2:	1ad3      	subs	r3, r2, r3
 8016ae4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8016ae6:	683b      	ldr	r3, [r7, #0]
 8016ae8:	681b      	ldr	r3, [r3, #0]
 8016aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016aee:	d102      	bne.n	8016af6 <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016af0:	2300      	movs	r3, #0
 8016af2:	617b      	str	r3, [r7, #20]
 8016af4:	e023      	b.n	8016b3e <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	681a      	ldr	r2, [r3, #0]
 8016afa:	4b15      	ldr	r3, [pc, #84]	; (8016b50 <xTaskCheckForTimeOut+0xa0>)
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	429a      	cmp	r2, r3
 8016b00:	d007      	beq.n	8016b12 <xTaskCheckForTimeOut+0x62>
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	685b      	ldr	r3, [r3, #4]
 8016b06:	693a      	ldr	r2, [r7, #16]
 8016b08:	429a      	cmp	r2, r3
 8016b0a:	d302      	bcc.n	8016b12 <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016b0c:	2301      	movs	r3, #1
 8016b0e:	617b      	str	r3, [r7, #20]
 8016b10:	e015      	b.n	8016b3e <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016b12:	683b      	ldr	r3, [r7, #0]
 8016b14:	681b      	ldr	r3, [r3, #0]
 8016b16:	68fa      	ldr	r2, [r7, #12]
 8016b18:	429a      	cmp	r2, r3
 8016b1a:	d20b      	bcs.n	8016b34 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016b1c:	683b      	ldr	r3, [r7, #0]
 8016b1e:	681a      	ldr	r2, [r3, #0]
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	1ad2      	subs	r2, r2, r3
 8016b24:	683b      	ldr	r3, [r7, #0]
 8016b26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016b28:	6878      	ldr	r0, [r7, #4]
 8016b2a:	f7ff ffab 	bl	8016a84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8016b2e:	2300      	movs	r3, #0
 8016b30:	617b      	str	r3, [r7, #20]
 8016b32:	e004      	b.n	8016b3e <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 8016b34:	683b      	ldr	r3, [r7, #0]
 8016b36:	2200      	movs	r2, #0
 8016b38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016b3a:	2301      	movs	r3, #1
 8016b3c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8016b3e:	f000 fd1b 	bl	8017578 <vPortExitCritical>

	return xReturn;
 8016b42:	697b      	ldr	r3, [r7, #20]
}
 8016b44:	4618      	mov	r0, r3
 8016b46:	3718      	adds	r7, #24
 8016b48:	46bd      	mov	sp, r7
 8016b4a:	bd80      	pop	{r7, pc}
 8016b4c:	20001be4 	.word	0x20001be4
 8016b50:	20001bf8 	.word	0x20001bf8

08016b54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016b54:	b480      	push	{r7}
 8016b56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016b58:	4b03      	ldr	r3, [pc, #12]	; (8016b68 <vTaskMissedYield+0x14>)
 8016b5a:	2201      	movs	r2, #1
 8016b5c:	601a      	str	r2, [r3, #0]
}
 8016b5e:	bf00      	nop
 8016b60:	46bd      	mov	sp, r7
 8016b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b66:	4770      	bx	lr
 8016b68:	20001bf4 	.word	0x20001bf4

08016b6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016b6c:	b580      	push	{r7, lr}
 8016b6e:	b082      	sub	sp, #8
 8016b70:	af00      	add	r7, sp, #0
 8016b72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016b74:	f000 f84a 	bl	8016c0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016b78:	4b03      	ldr	r3, [pc, #12]	; (8016b88 <prvIdleTask+0x1c>)
 8016b7a:	681b      	ldr	r3, [r3, #0]
 8016b7c:	2b01      	cmp	r3, #1
 8016b7e:	d9f9      	bls.n	8016b74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8016b80:	f000 fcd6 	bl	8017530 <vPortYield>
		prvCheckTasksWaitingTermination();
 8016b84:	e7f6      	b.n	8016b74 <prvIdleTask+0x8>
 8016b86:	bf00      	nop
 8016b88:	20001710 	.word	0x20001710

08016b8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016b8c:	b580      	push	{r7, lr}
 8016b8e:	b082      	sub	sp, #8
 8016b90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016b92:	2300      	movs	r3, #0
 8016b94:	607b      	str	r3, [r7, #4]
 8016b96:	e00c      	b.n	8016bb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016b98:	687a      	ldr	r2, [r7, #4]
 8016b9a:	4613      	mov	r3, r2
 8016b9c:	009b      	lsls	r3, r3, #2
 8016b9e:	4413      	add	r3, r2
 8016ba0:	009b      	lsls	r3, r3, #2
 8016ba2:	4a12      	ldr	r2, [pc, #72]	; (8016bec <prvInitialiseTaskLists+0x60>)
 8016ba4:	4413      	add	r3, r2
 8016ba6:	4618      	mov	r0, r3
 8016ba8:	f7fe fdea 	bl	8015780 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	3301      	adds	r3, #1
 8016bb0:	607b      	str	r3, [r7, #4]
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	2b37      	cmp	r3, #55	; 0x37
 8016bb6:	d9ef      	bls.n	8016b98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016bb8:	480d      	ldr	r0, [pc, #52]	; (8016bf0 <prvInitialiseTaskLists+0x64>)
 8016bba:	f7fe fde1 	bl	8015780 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016bbe:	480d      	ldr	r0, [pc, #52]	; (8016bf4 <prvInitialiseTaskLists+0x68>)
 8016bc0:	f7fe fdde 	bl	8015780 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016bc4:	480c      	ldr	r0, [pc, #48]	; (8016bf8 <prvInitialiseTaskLists+0x6c>)
 8016bc6:	f7fe fddb 	bl	8015780 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016bca:	480c      	ldr	r0, [pc, #48]	; (8016bfc <prvInitialiseTaskLists+0x70>)
 8016bcc:	f7fe fdd8 	bl	8015780 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016bd0:	480b      	ldr	r0, [pc, #44]	; (8016c00 <prvInitialiseTaskLists+0x74>)
 8016bd2:	f7fe fdd5 	bl	8015780 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016bd6:	4b0b      	ldr	r3, [pc, #44]	; (8016c04 <prvInitialiseTaskLists+0x78>)
 8016bd8:	4a05      	ldr	r2, [pc, #20]	; (8016bf0 <prvInitialiseTaskLists+0x64>)
 8016bda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016bdc:	4b0a      	ldr	r3, [pc, #40]	; (8016c08 <prvInitialiseTaskLists+0x7c>)
 8016bde:	4a05      	ldr	r2, [pc, #20]	; (8016bf4 <prvInitialiseTaskLists+0x68>)
 8016be0:	601a      	str	r2, [r3, #0]
}
 8016be2:	bf00      	nop
 8016be4:	3708      	adds	r7, #8
 8016be6:	46bd      	mov	sp, r7
 8016be8:	bd80      	pop	{r7, pc}
 8016bea:	bf00      	nop
 8016bec:	20001710 	.word	0x20001710
 8016bf0:	20001b70 	.word	0x20001b70
 8016bf4:	20001b84 	.word	0x20001b84
 8016bf8:	20001ba0 	.word	0x20001ba0
 8016bfc:	20001bb4 	.word	0x20001bb4
 8016c00:	20001bcc 	.word	0x20001bcc
 8016c04:	20001b98 	.word	0x20001b98
 8016c08:	20001b9c 	.word	0x20001b9c

08016c0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016c0c:	b580      	push	{r7, lr}
 8016c0e:	b082      	sub	sp, #8
 8016c10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016c12:	e019      	b.n	8016c48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016c14:	f000 fc9e 	bl	8017554 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016c18:	4b10      	ldr	r3, [pc, #64]	; (8016c5c <prvCheckTasksWaitingTermination+0x50>)
 8016c1a:	68db      	ldr	r3, [r3, #12]
 8016c1c:	68db      	ldr	r3, [r3, #12]
 8016c1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	3304      	adds	r3, #4
 8016c24:	4618      	mov	r0, r3
 8016c26:	f7fe fe35 	bl	8015894 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016c2a:	4b0d      	ldr	r3, [pc, #52]	; (8016c60 <prvCheckTasksWaitingTermination+0x54>)
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	3b01      	subs	r3, #1
 8016c30:	4a0b      	ldr	r2, [pc, #44]	; (8016c60 <prvCheckTasksWaitingTermination+0x54>)
 8016c32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016c34:	4b0b      	ldr	r3, [pc, #44]	; (8016c64 <prvCheckTasksWaitingTermination+0x58>)
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	3b01      	subs	r3, #1
 8016c3a:	4a0a      	ldr	r2, [pc, #40]	; (8016c64 <prvCheckTasksWaitingTermination+0x58>)
 8016c3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8016c3e:	f000 fc9b 	bl	8017578 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016c42:	6878      	ldr	r0, [r7, #4]
 8016c44:	f000 f810 	bl	8016c68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016c48:	4b06      	ldr	r3, [pc, #24]	; (8016c64 <prvCheckTasksWaitingTermination+0x58>)
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d1e1      	bne.n	8016c14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016c50:	bf00      	nop
 8016c52:	bf00      	nop
 8016c54:	3708      	adds	r7, #8
 8016c56:	46bd      	mov	sp, r7
 8016c58:	bd80      	pop	{r7, pc}
 8016c5a:	bf00      	nop
 8016c5c:	20001bb4 	.word	0x20001bb4
 8016c60:	20001be0 	.word	0x20001be0
 8016c64:	20001bc8 	.word	0x20001bc8

08016c68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016c68:	b580      	push	{r7, lr}
 8016c6a:	b082      	sub	sp, #8
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d108      	bne.n	8016c8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016c7e:	4618      	mov	r0, r3
 8016c80:	f000 feae 	bl	80179e0 <vPortFree>
				vPortFree( pxTCB );
 8016c84:	6878      	ldr	r0, [r7, #4]
 8016c86:	f000 feab 	bl	80179e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016c8a:	e010      	b.n	8016cae <prvDeleteTCB+0x46>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8016c92:	2b01      	cmp	r3, #1
 8016c94:	d103      	bne.n	8016c9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8016c96:	6878      	ldr	r0, [r7, #4]
 8016c98:	f000 fea2 	bl	80179e0 <vPortFree>
	}
 8016c9c:	e007      	b.n	8016cae <prvDeleteTCB+0x46>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8016ca4:	2b02      	cmp	r3, #2
 8016ca6:	d002      	beq.n	8016cae <prvDeleteTCB+0x46>
 8016ca8:	f000 fd86 	bl	80177b8 <ulSetInterruptMask>
 8016cac:	e7fe      	b.n	8016cac <prvDeleteTCB+0x44>
	}
 8016cae:	bf00      	nop
 8016cb0:	3708      	adds	r7, #8
 8016cb2:	46bd      	mov	sp, r7
 8016cb4:	bd80      	pop	{r7, pc}
	...

08016cb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016cb8:	b480      	push	{r7}
 8016cba:	b083      	sub	sp, #12
 8016cbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016cbe:	4b0c      	ldr	r3, [pc, #48]	; (8016cf0 <prvResetNextTaskUnblockTime+0x38>)
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d104      	bne.n	8016cd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016cc8:	4b0a      	ldr	r3, [pc, #40]	; (8016cf4 <prvResetNextTaskUnblockTime+0x3c>)
 8016cca:	f04f 32ff 	mov.w	r2, #4294967295
 8016cce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016cd0:	e008      	b.n	8016ce4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016cd2:	4b07      	ldr	r3, [pc, #28]	; (8016cf0 <prvResetNextTaskUnblockTime+0x38>)
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	68db      	ldr	r3, [r3, #12]
 8016cd8:	68db      	ldr	r3, [r3, #12]
 8016cda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	685b      	ldr	r3, [r3, #4]
 8016ce0:	4a04      	ldr	r2, [pc, #16]	; (8016cf4 <prvResetNextTaskUnblockTime+0x3c>)
 8016ce2:	6013      	str	r3, [r2, #0]
}
 8016ce4:	bf00      	nop
 8016ce6:	370c      	adds	r7, #12
 8016ce8:	46bd      	mov	sp, r7
 8016cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cee:	4770      	bx	lr
 8016cf0:	20001b98 	.word	0x20001b98
 8016cf4:	20001c00 	.word	0x20001c00

08016cf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016cf8:	b480      	push	{r7}
 8016cfa:	b083      	sub	sp, #12
 8016cfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016cfe:	4b0b      	ldr	r3, [pc, #44]	; (8016d2c <xTaskGetSchedulerState+0x34>)
 8016d00:	681b      	ldr	r3, [r3, #0]
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d102      	bne.n	8016d0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016d06:	2301      	movs	r3, #1
 8016d08:	607b      	str	r3, [r7, #4]
 8016d0a:	e008      	b.n	8016d1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016d0c:	4b08      	ldr	r3, [pc, #32]	; (8016d30 <xTaskGetSchedulerState+0x38>)
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d102      	bne.n	8016d1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016d14:	2302      	movs	r3, #2
 8016d16:	607b      	str	r3, [r7, #4]
 8016d18:	e001      	b.n	8016d1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016d1a:	2300      	movs	r3, #0
 8016d1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016d1e:	687b      	ldr	r3, [r7, #4]
	}
 8016d20:	4618      	mov	r0, r3
 8016d22:	370c      	adds	r7, #12
 8016d24:	46bd      	mov	sp, r7
 8016d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d2a:	4770      	bx	lr
 8016d2c:	20001bec 	.word	0x20001bec
 8016d30:	20001c08 	.word	0x20001c08

08016d34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016d34:	b580      	push	{r7, lr}
 8016d36:	b084      	sub	sp, #16
 8016d38:	af00      	add	r7, sp, #0
 8016d3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8016d40:	2300      	movs	r3, #0
 8016d42:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d046      	beq.n	8016dd8 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016d4a:	4b26      	ldr	r3, [pc, #152]	; (8016de4 <xTaskPriorityDisinherit+0xb0>)
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	68ba      	ldr	r2, [r7, #8]
 8016d50:	429a      	cmp	r2, r3
 8016d52:	d002      	beq.n	8016d5a <xTaskPriorityDisinherit+0x26>
 8016d54:	f000 fd30 	bl	80177b8 <ulSetInterruptMask>
 8016d58:	e7fe      	b.n	8016d58 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8016d5a:	68bb      	ldr	r3, [r7, #8]
 8016d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d102      	bne.n	8016d68 <xTaskPriorityDisinherit+0x34>
 8016d62:	f000 fd29 	bl	80177b8 <ulSetInterruptMask>
 8016d66:	e7fe      	b.n	8016d66 <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 8016d68:	68bb      	ldr	r3, [r7, #8]
 8016d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016d6c:	1e5a      	subs	r2, r3, #1
 8016d6e:	68bb      	ldr	r3, [r7, #8]
 8016d70:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016d72:	68bb      	ldr	r3, [r7, #8]
 8016d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d76:	68bb      	ldr	r3, [r7, #8]
 8016d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016d7a:	429a      	cmp	r2, r3
 8016d7c:	d02c      	beq.n	8016dd8 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016d7e:	68bb      	ldr	r3, [r7, #8]
 8016d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d128      	bne.n	8016dd8 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016d86:	68bb      	ldr	r3, [r7, #8]
 8016d88:	3304      	adds	r3, #4
 8016d8a:	4618      	mov	r0, r3
 8016d8c:	f7fe fd82 	bl	8015894 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016d90:	68bb      	ldr	r3, [r7, #8]
 8016d92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016d94:	68bb      	ldr	r3, [r7, #8]
 8016d96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016d98:	68bb      	ldr	r3, [r7, #8]
 8016d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d9c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016da0:	68bb      	ldr	r3, [r7, #8]
 8016da2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016da4:	68bb      	ldr	r3, [r7, #8]
 8016da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016da8:	4b0f      	ldr	r3, [pc, #60]	; (8016de8 <xTaskPriorityDisinherit+0xb4>)
 8016daa:	681b      	ldr	r3, [r3, #0]
 8016dac:	429a      	cmp	r2, r3
 8016dae:	d903      	bls.n	8016db8 <xTaskPriorityDisinherit+0x84>
 8016db0:	68bb      	ldr	r3, [r7, #8]
 8016db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016db4:	4a0c      	ldr	r2, [pc, #48]	; (8016de8 <xTaskPriorityDisinherit+0xb4>)
 8016db6:	6013      	str	r3, [r2, #0]
 8016db8:	68bb      	ldr	r3, [r7, #8]
 8016dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016dbc:	4613      	mov	r3, r2
 8016dbe:	009b      	lsls	r3, r3, #2
 8016dc0:	4413      	add	r3, r2
 8016dc2:	009b      	lsls	r3, r3, #2
 8016dc4:	4a09      	ldr	r2, [pc, #36]	; (8016dec <xTaskPriorityDisinherit+0xb8>)
 8016dc6:	441a      	add	r2, r3
 8016dc8:	68bb      	ldr	r3, [r7, #8]
 8016dca:	3304      	adds	r3, #4
 8016dcc:	4619      	mov	r1, r3
 8016dce:	4610      	mov	r0, r2
 8016dd0:	f7fe fd03 	bl	80157da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016dd4:	2301      	movs	r3, #1
 8016dd6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016dd8:	68fb      	ldr	r3, [r7, #12]
	}
 8016dda:	4618      	mov	r0, r3
 8016ddc:	3710      	adds	r7, #16
 8016dde:	46bd      	mov	sp, r7
 8016de0:	bd80      	pop	{r7, pc}
 8016de2:	bf00      	nop
 8016de4:	2000170c 	.word	0x2000170c
 8016de8:	20001be8 	.word	0x20001be8
 8016dec:	20001710 	.word	0x20001710

08016df0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016df0:	b580      	push	{r7, lr}
 8016df2:	b084      	sub	sp, #16
 8016df4:	af00      	add	r7, sp, #0
 8016df6:	6078      	str	r0, [r7, #4]
 8016df8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016dfa:	4b21      	ldr	r3, [pc, #132]	; (8016e80 <prvAddCurrentTaskToDelayedList+0x90>)
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016e00:	4b20      	ldr	r3, [pc, #128]	; (8016e84 <prvAddCurrentTaskToDelayedList+0x94>)
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	3304      	adds	r3, #4
 8016e06:	4618      	mov	r0, r3
 8016e08:	f7fe fd44 	bl	8015894 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e12:	d10a      	bne.n	8016e2a <prvAddCurrentTaskToDelayedList+0x3a>
 8016e14:	683b      	ldr	r3, [r7, #0]
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d007      	beq.n	8016e2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016e1a:	4b1a      	ldr	r3, [pc, #104]	; (8016e84 <prvAddCurrentTaskToDelayedList+0x94>)
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	3304      	adds	r3, #4
 8016e20:	4619      	mov	r1, r3
 8016e22:	4819      	ldr	r0, [pc, #100]	; (8016e88 <prvAddCurrentTaskToDelayedList+0x98>)
 8016e24:	f7fe fcd9 	bl	80157da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016e28:	e026      	b.n	8016e78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016e2a:	68fa      	ldr	r2, [r7, #12]
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	4413      	add	r3, r2
 8016e30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016e32:	4b14      	ldr	r3, [pc, #80]	; (8016e84 <prvAddCurrentTaskToDelayedList+0x94>)
 8016e34:	681b      	ldr	r3, [r3, #0]
 8016e36:	68ba      	ldr	r2, [r7, #8]
 8016e38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016e3a:	68ba      	ldr	r2, [r7, #8]
 8016e3c:	68fb      	ldr	r3, [r7, #12]
 8016e3e:	429a      	cmp	r2, r3
 8016e40:	d209      	bcs.n	8016e56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016e42:	4b12      	ldr	r3, [pc, #72]	; (8016e8c <prvAddCurrentTaskToDelayedList+0x9c>)
 8016e44:	681a      	ldr	r2, [r3, #0]
 8016e46:	4b0f      	ldr	r3, [pc, #60]	; (8016e84 <prvAddCurrentTaskToDelayedList+0x94>)
 8016e48:	681b      	ldr	r3, [r3, #0]
 8016e4a:	3304      	adds	r3, #4
 8016e4c:	4619      	mov	r1, r3
 8016e4e:	4610      	mov	r0, r2
 8016e50:	f7fe fce7 	bl	8015822 <vListInsert>
}
 8016e54:	e010      	b.n	8016e78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016e56:	4b0e      	ldr	r3, [pc, #56]	; (8016e90 <prvAddCurrentTaskToDelayedList+0xa0>)
 8016e58:	681a      	ldr	r2, [r3, #0]
 8016e5a:	4b0a      	ldr	r3, [pc, #40]	; (8016e84 <prvAddCurrentTaskToDelayedList+0x94>)
 8016e5c:	681b      	ldr	r3, [r3, #0]
 8016e5e:	3304      	adds	r3, #4
 8016e60:	4619      	mov	r1, r3
 8016e62:	4610      	mov	r0, r2
 8016e64:	f7fe fcdd 	bl	8015822 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016e68:	4b0a      	ldr	r3, [pc, #40]	; (8016e94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	68ba      	ldr	r2, [r7, #8]
 8016e6e:	429a      	cmp	r2, r3
 8016e70:	d202      	bcs.n	8016e78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8016e72:	4a08      	ldr	r2, [pc, #32]	; (8016e94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8016e74:	68bb      	ldr	r3, [r7, #8]
 8016e76:	6013      	str	r3, [r2, #0]
}
 8016e78:	bf00      	nop
 8016e7a:	3710      	adds	r7, #16
 8016e7c:	46bd      	mov	sp, r7
 8016e7e:	bd80      	pop	{r7, pc}
 8016e80:	20001be4 	.word	0x20001be4
 8016e84:	2000170c 	.word	0x2000170c
 8016e88:	20001bcc 	.word	0x20001bcc
 8016e8c:	20001b9c 	.word	0x20001b9c
 8016e90:	20001b98 	.word	0x20001b98
 8016e94:	20001c00 	.word	0x20001c00

08016e98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8016e98:	b580      	push	{r7, lr}
 8016e9a:	b088      	sub	sp, #32
 8016e9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8016ea2:	f000 fac7 	bl	8017434 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8016ea6:	4b18      	ldr	r3, [pc, #96]	; (8016f08 <xTimerCreateTimerTask+0x70>)
 8016ea8:	681b      	ldr	r3, [r3, #0]
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d020      	beq.n	8016ef0 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8016eae:	2300      	movs	r3, #0
 8016eb0:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8016eb2:	2300      	movs	r3, #0
 8016eb4:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8016eb6:	463a      	mov	r2, r7
 8016eb8:	1d39      	adds	r1, r7, #4
 8016eba:	f107 0308 	add.w	r3, r7, #8
 8016ebe:	4618      	mov	r0, r3
 8016ec0:	f7fe fc44 	bl	801574c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8016ec4:	6839      	ldr	r1, [r7, #0]
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	68ba      	ldr	r2, [r7, #8]
 8016eca:	9202      	str	r2, [sp, #8]
 8016ecc:	9301      	str	r3, [sp, #4]
 8016ece:	2302      	movs	r3, #2
 8016ed0:	9300      	str	r3, [sp, #0]
 8016ed2:	2300      	movs	r3, #0
 8016ed4:	460a      	mov	r2, r1
 8016ed6:	490d      	ldr	r1, [pc, #52]	; (8016f0c <xTimerCreateTimerTask+0x74>)
 8016ed8:	480d      	ldr	r0, [pc, #52]	; (8016f10 <xTimerCreateTimerTask+0x78>)
 8016eda:	f7ff f931 	bl	8016140 <xTaskCreateStatic>
 8016ede:	4603      	mov	r3, r0
 8016ee0:	4a0c      	ldr	r2, [pc, #48]	; (8016f14 <xTimerCreateTimerTask+0x7c>)
 8016ee2:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8016ee4:	4b0b      	ldr	r3, [pc, #44]	; (8016f14 <xTimerCreateTimerTask+0x7c>)
 8016ee6:	681b      	ldr	r3, [r3, #0]
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d001      	beq.n	8016ef0 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8016eec:	2301      	movs	r3, #1
 8016eee:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8016ef0:	68fb      	ldr	r3, [r7, #12]
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d102      	bne.n	8016efc <xTimerCreateTimerTask+0x64>
 8016ef6:	f000 fc5f 	bl	80177b8 <ulSetInterruptMask>
 8016efa:	e7fe      	b.n	8016efa <xTimerCreateTimerTask+0x62>
	return xReturn;
 8016efc:	68fb      	ldr	r3, [r7, #12]
}
 8016efe:	4618      	mov	r0, r3
 8016f00:	3710      	adds	r7, #16
 8016f02:	46bd      	mov	sp, r7
 8016f04:	bd80      	pop	{r7, pc}
 8016f06:	bf00      	nop
 8016f08:	20001c3c 	.word	0x20001c3c
 8016f0c:	0801a8b8 	.word	0x0801a8b8
 8016f10:	0801702d 	.word	0x0801702d
 8016f14:	20001c40 	.word	0x20001c40

08016f18 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8016f18:	b580      	push	{r7, lr}
 8016f1a:	b08a      	sub	sp, #40	; 0x28
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	60f8      	str	r0, [r7, #12]
 8016f20:	60b9      	str	r1, [r7, #8]
 8016f22:	607a      	str	r2, [r7, #4]
 8016f24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8016f26:	2300      	movs	r3, #0
 8016f28:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8016f2a:	68fb      	ldr	r3, [r7, #12]
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d102      	bne.n	8016f36 <xTimerGenericCommand+0x1e>
 8016f30:	f000 fc42 	bl	80177b8 <ulSetInterruptMask>
 8016f34:	e7fe      	b.n	8016f34 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8016f36:	4b1a      	ldr	r3, [pc, #104]	; (8016fa0 <xTimerGenericCommand+0x88>)
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d02a      	beq.n	8016f94 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8016f3e:	68bb      	ldr	r3, [r7, #8]
 8016f40:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8016f46:	68fb      	ldr	r3, [r7, #12]
 8016f48:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8016f4a:	68bb      	ldr	r3, [r7, #8]
 8016f4c:	2b05      	cmp	r3, #5
 8016f4e:	dc18      	bgt.n	8016f82 <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8016f50:	f7ff fed2 	bl	8016cf8 <xTaskGetSchedulerState>
 8016f54:	4603      	mov	r3, r0
 8016f56:	2b02      	cmp	r3, #2
 8016f58:	d109      	bne.n	8016f6e <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8016f5a:	4b11      	ldr	r3, [pc, #68]	; (8016fa0 <xTimerGenericCommand+0x88>)
 8016f5c:	6818      	ldr	r0, [r3, #0]
 8016f5e:	f107 0114 	add.w	r1, r7, #20
 8016f62:	2300      	movs	r3, #0
 8016f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016f66:	f7fe fd8a 	bl	8015a7e <xQueueGenericSend>
 8016f6a:	6278      	str	r0, [r7, #36]	; 0x24
 8016f6c:	e012      	b.n	8016f94 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8016f6e:	4b0c      	ldr	r3, [pc, #48]	; (8016fa0 <xTimerGenericCommand+0x88>)
 8016f70:	6818      	ldr	r0, [r3, #0]
 8016f72:	f107 0114 	add.w	r1, r7, #20
 8016f76:	2300      	movs	r3, #0
 8016f78:	2200      	movs	r2, #0
 8016f7a:	f7fe fd80 	bl	8015a7e <xQueueGenericSend>
 8016f7e:	6278      	str	r0, [r7, #36]	; 0x24
 8016f80:	e008      	b.n	8016f94 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8016f82:	4b07      	ldr	r3, [pc, #28]	; (8016fa0 <xTimerGenericCommand+0x88>)
 8016f84:	6818      	ldr	r0, [r3, #0]
 8016f86:	f107 0114 	add.w	r1, r7, #20
 8016f8a:	2300      	movs	r3, #0
 8016f8c:	683a      	ldr	r2, [r7, #0]
 8016f8e:	f7fe fe3f 	bl	8015c10 <xQueueGenericSendFromISR>
 8016f92:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8016f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016f96:	4618      	mov	r0, r3
 8016f98:	3728      	adds	r7, #40	; 0x28
 8016f9a:	46bd      	mov	sp, r7
 8016f9c:	bd80      	pop	{r7, pc}
 8016f9e:	bf00      	nop
 8016fa0:	20001c3c 	.word	0x20001c3c

08016fa4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8016fa4:	b580      	push	{r7, lr}
 8016fa6:	b086      	sub	sp, #24
 8016fa8:	af02      	add	r7, sp, #8
 8016faa:	6078      	str	r0, [r7, #4]
 8016fac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016fae:	4b1e      	ldr	r3, [pc, #120]	; (8017028 <prvProcessExpiredTimer+0x84>)
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	68db      	ldr	r3, [r3, #12]
 8016fb4:	68db      	ldr	r3, [r3, #12]
 8016fb6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	3304      	adds	r3, #4
 8016fbc:	4618      	mov	r0, r3
 8016fbe:	f7fe fc69 	bl	8015894 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016fc8:	f003 0304 	and.w	r3, r3, #4
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	d01a      	beq.n	8017006 <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8016fd0:	68fb      	ldr	r3, [r7, #12]
 8016fd2:	699a      	ldr	r2, [r3, #24]
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	18d1      	adds	r1, r2, r3
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	683a      	ldr	r2, [r7, #0]
 8016fdc:	68f8      	ldr	r0, [r7, #12]
 8016fde:	f000 f8c1 	bl	8017164 <prvInsertTimerInActiveList>
 8016fe2:	4603      	mov	r3, r0
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d017      	beq.n	8017018 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016fe8:	2300      	movs	r3, #0
 8016fea:	9300      	str	r3, [sp, #0]
 8016fec:	2300      	movs	r3, #0
 8016fee:	687a      	ldr	r2, [r7, #4]
 8016ff0:	2100      	movs	r1, #0
 8016ff2:	68f8      	ldr	r0, [r7, #12]
 8016ff4:	f7ff ff90 	bl	8016f18 <xTimerGenericCommand>
 8016ff8:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8016ffa:	68bb      	ldr	r3, [r7, #8]
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d10b      	bne.n	8017018 <prvProcessExpiredTimer+0x74>
 8017000:	f000 fbda 	bl	80177b8 <ulSetInterruptMask>
 8017004:	e7fe      	b.n	8017004 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017006:	68fb      	ldr	r3, [r7, #12]
 8017008:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801700c:	f023 0301 	bic.w	r3, r3, #1
 8017010:	b2da      	uxtb	r2, r3
 8017012:	68fb      	ldr	r3, [r7, #12]
 8017014:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017018:	68fb      	ldr	r3, [r7, #12]
 801701a:	6a1b      	ldr	r3, [r3, #32]
 801701c:	68f8      	ldr	r0, [r7, #12]
 801701e:	4798      	blx	r3
}
 8017020:	bf00      	nop
 8017022:	3710      	adds	r7, #16
 8017024:	46bd      	mov	sp, r7
 8017026:	bd80      	pop	{r7, pc}
 8017028:	20001c34 	.word	0x20001c34

0801702c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801702c:	b580      	push	{r7, lr}
 801702e:	b084      	sub	sp, #16
 8017030:	af00      	add	r7, sp, #0
 8017032:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017034:	f107 0308 	add.w	r3, r7, #8
 8017038:	4618      	mov	r0, r3
 801703a:	f000 f84f 	bl	80170dc <prvGetNextExpireTime>
 801703e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8017040:	68bb      	ldr	r3, [r7, #8]
 8017042:	4619      	mov	r1, r3
 8017044:	68f8      	ldr	r0, [r7, #12]
 8017046:	f000 f803 	bl	8017050 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801704a:	f000 f8cd 	bl	80171e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801704e:	e7f1      	b.n	8017034 <prvTimerTask+0x8>

08017050 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8017050:	b580      	push	{r7, lr}
 8017052:	b084      	sub	sp, #16
 8017054:	af00      	add	r7, sp, #0
 8017056:	6078      	str	r0, [r7, #4]
 8017058:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801705a:	f7ff fac5 	bl	80165e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801705e:	f107 0308 	add.w	r3, r7, #8
 8017062:	4618      	mov	r0, r3
 8017064:	f000 f85e 	bl	8017124 <prvSampleTimeNow>
 8017068:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801706a:	68bb      	ldr	r3, [r7, #8]
 801706c:	2b00      	cmp	r3, #0
 801706e:	d12a      	bne.n	80170c6 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8017070:	683b      	ldr	r3, [r7, #0]
 8017072:	2b00      	cmp	r3, #0
 8017074:	d10a      	bne.n	801708c <prvProcessTimerOrBlockTask+0x3c>
 8017076:	687a      	ldr	r2, [r7, #4]
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	429a      	cmp	r2, r3
 801707c:	d806      	bhi.n	801708c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801707e:	f7ff fac1 	bl	8016604 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8017082:	68f9      	ldr	r1, [r7, #12]
 8017084:	6878      	ldr	r0, [r7, #4]
 8017086:	f7ff ff8d 	bl	8016fa4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801708a:	e01e      	b.n	80170ca <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 801708c:	683b      	ldr	r3, [r7, #0]
 801708e:	2b00      	cmp	r3, #0
 8017090:	d008      	beq.n	80170a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8017092:	4b10      	ldr	r3, [pc, #64]	; (80170d4 <prvProcessTimerOrBlockTask+0x84>)
 8017094:	681b      	ldr	r3, [r3, #0]
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	2b00      	cmp	r3, #0
 801709a:	d101      	bne.n	80170a0 <prvProcessTimerOrBlockTask+0x50>
 801709c:	2301      	movs	r3, #1
 801709e:	e000      	b.n	80170a2 <prvProcessTimerOrBlockTask+0x52>
 80170a0:	2300      	movs	r3, #0
 80170a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80170a4:	4b0c      	ldr	r3, [pc, #48]	; (80170d8 <prvProcessTimerOrBlockTask+0x88>)
 80170a6:	6818      	ldr	r0, [r3, #0]
 80170a8:	687a      	ldr	r2, [r7, #4]
 80170aa:	68fb      	ldr	r3, [r7, #12]
 80170ac:	1ad3      	subs	r3, r2, r3
 80170ae:	683a      	ldr	r2, [r7, #0]
 80170b0:	4619      	mov	r1, r3
 80170b2:	f7ff f811 	bl	80160d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80170b6:	f7ff faa5 	bl	8016604 <xTaskResumeAll>
 80170ba:	4603      	mov	r3, r0
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d104      	bne.n	80170ca <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 80170c0:	f000 fa36 	bl	8017530 <vPortYield>
}
 80170c4:	e001      	b.n	80170ca <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 80170c6:	f7ff fa9d 	bl	8016604 <xTaskResumeAll>
}
 80170ca:	bf00      	nop
 80170cc:	3710      	adds	r7, #16
 80170ce:	46bd      	mov	sp, r7
 80170d0:	bd80      	pop	{r7, pc}
 80170d2:	bf00      	nop
 80170d4:	20001c38 	.word	0x20001c38
 80170d8:	20001c3c 	.word	0x20001c3c

080170dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80170dc:	b480      	push	{r7}
 80170de:	b085      	sub	sp, #20
 80170e0:	af00      	add	r7, sp, #0
 80170e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80170e4:	4b0e      	ldr	r3, [pc, #56]	; (8017120 <prvGetNextExpireTime+0x44>)
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d101      	bne.n	80170f2 <prvGetNextExpireTime+0x16>
 80170ee:	2201      	movs	r2, #1
 80170f0:	e000      	b.n	80170f4 <prvGetNextExpireTime+0x18>
 80170f2:	2200      	movs	r2, #0
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d105      	bne.n	801710c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017100:	4b07      	ldr	r3, [pc, #28]	; (8017120 <prvGetNextExpireTime+0x44>)
 8017102:	681b      	ldr	r3, [r3, #0]
 8017104:	68db      	ldr	r3, [r3, #12]
 8017106:	681b      	ldr	r3, [r3, #0]
 8017108:	60fb      	str	r3, [r7, #12]
 801710a:	e001      	b.n	8017110 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801710c:	2300      	movs	r3, #0
 801710e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8017110:	68fb      	ldr	r3, [r7, #12]
}
 8017112:	4618      	mov	r0, r3
 8017114:	3714      	adds	r7, #20
 8017116:	46bd      	mov	sp, r7
 8017118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801711c:	4770      	bx	lr
 801711e:	bf00      	nop
 8017120:	20001c34 	.word	0x20001c34

08017124 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8017124:	b580      	push	{r7, lr}
 8017126:	b084      	sub	sp, #16
 8017128:	af00      	add	r7, sp, #0
 801712a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801712c:	f7ff faf8 	bl	8016720 <xTaskGetTickCount>
 8017130:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8017132:	4b0b      	ldr	r3, [pc, #44]	; (8017160 <prvSampleTimeNow+0x3c>)
 8017134:	681b      	ldr	r3, [r3, #0]
 8017136:	68fa      	ldr	r2, [r7, #12]
 8017138:	429a      	cmp	r2, r3
 801713a:	d205      	bcs.n	8017148 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801713c:	f000 f91e 	bl	801737c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	2201      	movs	r2, #1
 8017144:	601a      	str	r2, [r3, #0]
 8017146:	e002      	b.n	801714e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	2200      	movs	r2, #0
 801714c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801714e:	4a04      	ldr	r2, [pc, #16]	; (8017160 <prvSampleTimeNow+0x3c>)
 8017150:	68fb      	ldr	r3, [r7, #12]
 8017152:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8017154:	68fb      	ldr	r3, [r7, #12]
}
 8017156:	4618      	mov	r0, r3
 8017158:	3710      	adds	r7, #16
 801715a:	46bd      	mov	sp, r7
 801715c:	bd80      	pop	{r7, pc}
 801715e:	bf00      	nop
 8017160:	20001c44 	.word	0x20001c44

08017164 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8017164:	b580      	push	{r7, lr}
 8017166:	b086      	sub	sp, #24
 8017168:	af00      	add	r7, sp, #0
 801716a:	60f8      	str	r0, [r7, #12]
 801716c:	60b9      	str	r1, [r7, #8]
 801716e:	607a      	str	r2, [r7, #4]
 8017170:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8017172:	2300      	movs	r3, #0
 8017174:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8017176:	68fb      	ldr	r3, [r7, #12]
 8017178:	68ba      	ldr	r2, [r7, #8]
 801717a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	68fa      	ldr	r2, [r7, #12]
 8017180:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8017182:	68ba      	ldr	r2, [r7, #8]
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	429a      	cmp	r2, r3
 8017188:	d812      	bhi.n	80171b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801718a:	687a      	ldr	r2, [r7, #4]
 801718c:	683b      	ldr	r3, [r7, #0]
 801718e:	1ad2      	subs	r2, r2, r3
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	699b      	ldr	r3, [r3, #24]
 8017194:	429a      	cmp	r2, r3
 8017196:	d302      	bcc.n	801719e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8017198:	2301      	movs	r3, #1
 801719a:	617b      	str	r3, [r7, #20]
 801719c:	e01b      	b.n	80171d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801719e:	4b10      	ldr	r3, [pc, #64]	; (80171e0 <prvInsertTimerInActiveList+0x7c>)
 80171a0:	681a      	ldr	r2, [r3, #0]
 80171a2:	68fb      	ldr	r3, [r7, #12]
 80171a4:	3304      	adds	r3, #4
 80171a6:	4619      	mov	r1, r3
 80171a8:	4610      	mov	r0, r2
 80171aa:	f7fe fb3a 	bl	8015822 <vListInsert>
 80171ae:	e012      	b.n	80171d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80171b0:	687a      	ldr	r2, [r7, #4]
 80171b2:	683b      	ldr	r3, [r7, #0]
 80171b4:	429a      	cmp	r2, r3
 80171b6:	d206      	bcs.n	80171c6 <prvInsertTimerInActiveList+0x62>
 80171b8:	68ba      	ldr	r2, [r7, #8]
 80171ba:	683b      	ldr	r3, [r7, #0]
 80171bc:	429a      	cmp	r2, r3
 80171be:	d302      	bcc.n	80171c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80171c0:	2301      	movs	r3, #1
 80171c2:	617b      	str	r3, [r7, #20]
 80171c4:	e007      	b.n	80171d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80171c6:	4b07      	ldr	r3, [pc, #28]	; (80171e4 <prvInsertTimerInActiveList+0x80>)
 80171c8:	681a      	ldr	r2, [r3, #0]
 80171ca:	68fb      	ldr	r3, [r7, #12]
 80171cc:	3304      	adds	r3, #4
 80171ce:	4619      	mov	r1, r3
 80171d0:	4610      	mov	r0, r2
 80171d2:	f7fe fb26 	bl	8015822 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80171d6:	697b      	ldr	r3, [r7, #20]
}
 80171d8:	4618      	mov	r0, r3
 80171da:	3718      	adds	r7, #24
 80171dc:	46bd      	mov	sp, r7
 80171de:	bd80      	pop	{r7, pc}
 80171e0:	20001c38 	.word	0x20001c38
 80171e4:	20001c34 	.word	0x20001c34

080171e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80171e8:	b580      	push	{r7, lr}
 80171ea:	b08c      	sub	sp, #48	; 0x30
 80171ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80171ee:	e0b2      	b.n	8017356 <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80171f0:	68bb      	ldr	r3, [r7, #8]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	da11      	bge.n	801721a <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80171f6:	f107 0308 	add.w	r3, r7, #8
 80171fa:	3304      	adds	r3, #4
 80171fc:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80171fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017200:	2b00      	cmp	r3, #0
 8017202:	d102      	bne.n	801720a <prvProcessReceivedCommands+0x22>
 8017204:	f000 fad8 	bl	80177b8 <ulSetInterruptMask>
 8017208:	e7fe      	b.n	8017208 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801720c:	681b      	ldr	r3, [r3, #0]
 801720e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017210:	6850      	ldr	r0, [r2, #4]
 8017212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017214:	6892      	ldr	r2, [r2, #8]
 8017216:	4611      	mov	r1, r2
 8017218:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801721a:	68bb      	ldr	r3, [r7, #8]
 801721c:	2b00      	cmp	r3, #0
 801721e:	f2c0 809a 	blt.w	8017356 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8017222:	693b      	ldr	r3, [r7, #16]
 8017224:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8017226:	6a3b      	ldr	r3, [r7, #32]
 8017228:	695b      	ldr	r3, [r3, #20]
 801722a:	2b00      	cmp	r3, #0
 801722c:	d004      	beq.n	8017238 <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801722e:	6a3b      	ldr	r3, [r7, #32]
 8017230:	3304      	adds	r3, #4
 8017232:	4618      	mov	r0, r3
 8017234:	f7fe fb2e 	bl	8015894 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017238:	1d3b      	adds	r3, r7, #4
 801723a:	4618      	mov	r0, r3
 801723c:	f7ff ff72 	bl	8017124 <prvSampleTimeNow>
 8017240:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8017242:	68bb      	ldr	r3, [r7, #8]
 8017244:	2b09      	cmp	r3, #9
 8017246:	f200 8085 	bhi.w	8017354 <prvProcessReceivedCommands+0x16c>
 801724a:	a201      	add	r2, pc, #4	; (adr r2, 8017250 <prvProcessReceivedCommands+0x68>)
 801724c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017250:	08017279 	.word	0x08017279
 8017254:	08017279 	.word	0x08017279
 8017258:	08017279 	.word	0x08017279
 801725c:	080172dd 	.word	0x080172dd
 8017260:	080172f1 	.word	0x080172f1
 8017264:	0801732b 	.word	0x0801732b
 8017268:	08017279 	.word	0x08017279
 801726c:	08017279 	.word	0x08017279
 8017270:	080172dd 	.word	0x080172dd
 8017274:	080172f1 	.word	0x080172f1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017278:	6a3b      	ldr	r3, [r7, #32]
 801727a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801727e:	f043 0301 	orr.w	r3, r3, #1
 8017282:	b2da      	uxtb	r2, r3
 8017284:	6a3b      	ldr	r3, [r7, #32]
 8017286:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801728a:	68fa      	ldr	r2, [r7, #12]
 801728c:	6a3b      	ldr	r3, [r7, #32]
 801728e:	699b      	ldr	r3, [r3, #24]
 8017290:	18d1      	adds	r1, r2, r3
 8017292:	68fb      	ldr	r3, [r7, #12]
 8017294:	69fa      	ldr	r2, [r7, #28]
 8017296:	6a38      	ldr	r0, [r7, #32]
 8017298:	f7ff ff64 	bl	8017164 <prvInsertTimerInActiveList>
 801729c:	4603      	mov	r3, r0
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d059      	beq.n	8017356 <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80172a2:	6a3b      	ldr	r3, [r7, #32]
 80172a4:	6a1b      	ldr	r3, [r3, #32]
 80172a6:	6a38      	ldr	r0, [r7, #32]
 80172a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80172aa:	6a3b      	ldr	r3, [r7, #32]
 80172ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80172b0:	f003 0304 	and.w	r3, r3, #4
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d04e      	beq.n	8017356 <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80172b8:	68fa      	ldr	r2, [r7, #12]
 80172ba:	6a3b      	ldr	r3, [r7, #32]
 80172bc:	699b      	ldr	r3, [r3, #24]
 80172be:	441a      	add	r2, r3
 80172c0:	2300      	movs	r3, #0
 80172c2:	9300      	str	r3, [sp, #0]
 80172c4:	2300      	movs	r3, #0
 80172c6:	2100      	movs	r1, #0
 80172c8:	6a38      	ldr	r0, [r7, #32]
 80172ca:	f7ff fe25 	bl	8016f18 <xTimerGenericCommand>
 80172ce:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 80172d0:	69bb      	ldr	r3, [r7, #24]
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d13f      	bne.n	8017356 <prvProcessReceivedCommands+0x16e>
 80172d6:	f000 fa6f 	bl	80177b8 <ulSetInterruptMask>
 80172da:	e7fe      	b.n	80172da <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80172dc:	6a3b      	ldr	r3, [r7, #32]
 80172de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80172e2:	f023 0301 	bic.w	r3, r3, #1
 80172e6:	b2da      	uxtb	r2, r3
 80172e8:	6a3b      	ldr	r3, [r7, #32]
 80172ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80172ee:	e032      	b.n	8017356 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80172f0:	6a3b      	ldr	r3, [r7, #32]
 80172f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80172f6:	f043 0301 	orr.w	r3, r3, #1
 80172fa:	b2da      	uxtb	r2, r3
 80172fc:	6a3b      	ldr	r3, [r7, #32]
 80172fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8017302:	68fa      	ldr	r2, [r7, #12]
 8017304:	6a3b      	ldr	r3, [r7, #32]
 8017306:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8017308:	6a3b      	ldr	r3, [r7, #32]
 801730a:	699b      	ldr	r3, [r3, #24]
 801730c:	2b00      	cmp	r3, #0
 801730e:	d102      	bne.n	8017316 <prvProcessReceivedCommands+0x12e>
 8017310:	f000 fa52 	bl	80177b8 <ulSetInterruptMask>
 8017314:	e7fe      	b.n	8017314 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8017316:	6a3b      	ldr	r3, [r7, #32]
 8017318:	699a      	ldr	r2, [r3, #24]
 801731a:	69fb      	ldr	r3, [r7, #28]
 801731c:	18d1      	adds	r1, r2, r3
 801731e:	69fb      	ldr	r3, [r7, #28]
 8017320:	69fa      	ldr	r2, [r7, #28]
 8017322:	6a38      	ldr	r0, [r7, #32]
 8017324:	f7ff ff1e 	bl	8017164 <prvInsertTimerInActiveList>
					break;
 8017328:	e015      	b.n	8017356 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801732a:	6a3b      	ldr	r3, [r7, #32]
 801732c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017330:	f003 0302 	and.w	r3, r3, #2
 8017334:	2b00      	cmp	r3, #0
 8017336:	d103      	bne.n	8017340 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 8017338:	6a38      	ldr	r0, [r7, #32]
 801733a:	f000 fb51 	bl	80179e0 <vPortFree>
 801733e:	e00a      	b.n	8017356 <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017340:	6a3b      	ldr	r3, [r7, #32]
 8017342:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017346:	f023 0301 	bic.w	r3, r3, #1
 801734a:	b2da      	uxtb	r2, r3
 801734c:	6a3b      	ldr	r3, [r7, #32]
 801734e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8017352:	e000      	b.n	8017356 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8017354:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017356:	4b08      	ldr	r3, [pc, #32]	; (8017378 <prvProcessReceivedCommands+0x190>)
 8017358:	681b      	ldr	r3, [r3, #0]
 801735a:	f107 0108 	add.w	r1, r7, #8
 801735e:	2200      	movs	r2, #0
 8017360:	4618      	mov	r0, r3
 8017362:	f7fe fcc6 	bl	8015cf2 <xQueueReceive>
 8017366:	4603      	mov	r3, r0
 8017368:	2b00      	cmp	r3, #0
 801736a:	f47f af41 	bne.w	80171f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801736e:	bf00      	nop
 8017370:	bf00      	nop
 8017372:	3728      	adds	r7, #40	; 0x28
 8017374:	46bd      	mov	sp, r7
 8017376:	bd80      	pop	{r7, pc}
 8017378:	20001c3c 	.word	0x20001c3c

0801737c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801737c:	b580      	push	{r7, lr}
 801737e:	b088      	sub	sp, #32
 8017380:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017382:	e040      	b.n	8017406 <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017384:	4b29      	ldr	r3, [pc, #164]	; (801742c <prvSwitchTimerLists+0xb0>)
 8017386:	681b      	ldr	r3, [r3, #0]
 8017388:	68db      	ldr	r3, [r3, #12]
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801738e:	4b27      	ldr	r3, [pc, #156]	; (801742c <prvSwitchTimerLists+0xb0>)
 8017390:	681b      	ldr	r3, [r3, #0]
 8017392:	68db      	ldr	r3, [r3, #12]
 8017394:	68db      	ldr	r3, [r3, #12]
 8017396:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	3304      	adds	r3, #4
 801739c:	4618      	mov	r0, r3
 801739e:	f7fe fa79 	bl	8015894 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80173a2:	68fb      	ldr	r3, [r7, #12]
 80173a4:	6a1b      	ldr	r3, [r3, #32]
 80173a6:	68f8      	ldr	r0, [r7, #12]
 80173a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80173b0:	f003 0304 	and.w	r3, r3, #4
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d026      	beq.n	8017406 <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80173b8:	68fb      	ldr	r3, [r7, #12]
 80173ba:	699b      	ldr	r3, [r3, #24]
 80173bc:	693a      	ldr	r2, [r7, #16]
 80173be:	4413      	add	r3, r2
 80173c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80173c2:	68ba      	ldr	r2, [r7, #8]
 80173c4:	693b      	ldr	r3, [r7, #16]
 80173c6:	429a      	cmp	r2, r3
 80173c8:	d90e      	bls.n	80173e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	68ba      	ldr	r2, [r7, #8]
 80173ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	68fa      	ldr	r2, [r7, #12]
 80173d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80173d6:	4b15      	ldr	r3, [pc, #84]	; (801742c <prvSwitchTimerLists+0xb0>)
 80173d8:	681a      	ldr	r2, [r3, #0]
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	3304      	adds	r3, #4
 80173de:	4619      	mov	r1, r3
 80173e0:	4610      	mov	r0, r2
 80173e2:	f7fe fa1e 	bl	8015822 <vListInsert>
 80173e6:	e00e      	b.n	8017406 <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80173e8:	2300      	movs	r3, #0
 80173ea:	9300      	str	r3, [sp, #0]
 80173ec:	2300      	movs	r3, #0
 80173ee:	693a      	ldr	r2, [r7, #16]
 80173f0:	2100      	movs	r1, #0
 80173f2:	68f8      	ldr	r0, [r7, #12]
 80173f4:	f7ff fd90 	bl	8016f18 <xTimerGenericCommand>
 80173f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d102      	bne.n	8017406 <prvSwitchTimerLists+0x8a>
 8017400:	f000 f9da 	bl	80177b8 <ulSetInterruptMask>
 8017404:	e7fe      	b.n	8017404 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017406:	4b09      	ldr	r3, [pc, #36]	; (801742c <prvSwitchTimerLists+0xb0>)
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	681b      	ldr	r3, [r3, #0]
 801740c:	2b00      	cmp	r3, #0
 801740e:	d1b9      	bne.n	8017384 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8017410:	4b06      	ldr	r3, [pc, #24]	; (801742c <prvSwitchTimerLists+0xb0>)
 8017412:	681b      	ldr	r3, [r3, #0]
 8017414:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8017416:	4b06      	ldr	r3, [pc, #24]	; (8017430 <prvSwitchTimerLists+0xb4>)
 8017418:	681b      	ldr	r3, [r3, #0]
 801741a:	4a04      	ldr	r2, [pc, #16]	; (801742c <prvSwitchTimerLists+0xb0>)
 801741c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801741e:	4a04      	ldr	r2, [pc, #16]	; (8017430 <prvSwitchTimerLists+0xb4>)
 8017420:	697b      	ldr	r3, [r7, #20]
 8017422:	6013      	str	r3, [r2, #0]
}
 8017424:	bf00      	nop
 8017426:	3718      	adds	r7, #24
 8017428:	46bd      	mov	sp, r7
 801742a:	bd80      	pop	{r7, pc}
 801742c:	20001c34 	.word	0x20001c34
 8017430:	20001c38 	.word	0x20001c38

08017434 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8017434:	b580      	push	{r7, lr}
 8017436:	b082      	sub	sp, #8
 8017438:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801743a:	f000 f88b 	bl	8017554 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801743e:	4b15      	ldr	r3, [pc, #84]	; (8017494 <prvCheckForValidListAndQueue+0x60>)
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	2b00      	cmp	r3, #0
 8017444:	d120      	bne.n	8017488 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8017446:	4814      	ldr	r0, [pc, #80]	; (8017498 <prvCheckForValidListAndQueue+0x64>)
 8017448:	f7fe f99a 	bl	8015780 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801744c:	4813      	ldr	r0, [pc, #76]	; (801749c <prvCheckForValidListAndQueue+0x68>)
 801744e:	f7fe f997 	bl	8015780 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8017452:	4b13      	ldr	r3, [pc, #76]	; (80174a0 <prvCheckForValidListAndQueue+0x6c>)
 8017454:	4a10      	ldr	r2, [pc, #64]	; (8017498 <prvCheckForValidListAndQueue+0x64>)
 8017456:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8017458:	4b12      	ldr	r3, [pc, #72]	; (80174a4 <prvCheckForValidListAndQueue+0x70>)
 801745a:	4a10      	ldr	r2, [pc, #64]	; (801749c <prvCheckForValidListAndQueue+0x68>)
 801745c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801745e:	2300      	movs	r3, #0
 8017460:	9300      	str	r3, [sp, #0]
 8017462:	4b11      	ldr	r3, [pc, #68]	; (80174a8 <prvCheckForValidListAndQueue+0x74>)
 8017464:	4a11      	ldr	r2, [pc, #68]	; (80174ac <prvCheckForValidListAndQueue+0x78>)
 8017466:	2110      	movs	r1, #16
 8017468:	200a      	movs	r0, #10
 801746a:	f7fe fa95 	bl	8015998 <xQueueGenericCreateStatic>
 801746e:	4603      	mov	r3, r0
 8017470:	4a08      	ldr	r2, [pc, #32]	; (8017494 <prvCheckForValidListAndQueue+0x60>)
 8017472:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8017474:	4b07      	ldr	r3, [pc, #28]	; (8017494 <prvCheckForValidListAndQueue+0x60>)
 8017476:	681b      	ldr	r3, [r3, #0]
 8017478:	2b00      	cmp	r3, #0
 801747a:	d005      	beq.n	8017488 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801747c:	4b05      	ldr	r3, [pc, #20]	; (8017494 <prvCheckForValidListAndQueue+0x60>)
 801747e:	681b      	ldr	r3, [r3, #0]
 8017480:	490b      	ldr	r1, [pc, #44]	; (80174b0 <prvCheckForValidListAndQueue+0x7c>)
 8017482:	4618      	mov	r0, r3
 8017484:	f7fe fdfe 	bl	8016084 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017488:	f000 f876 	bl	8017578 <vPortExitCritical>
}
 801748c:	bf00      	nop
 801748e:	46bd      	mov	sp, r7
 8017490:	bd80      	pop	{r7, pc}
 8017492:	bf00      	nop
 8017494:	20001c3c 	.word	0x20001c3c
 8017498:	20001c0c 	.word	0x20001c0c
 801749c:	20001c20 	.word	0x20001c20
 80174a0:	20001c34 	.word	0x20001c34
 80174a4:	20001c38 	.word	0x20001c38
 80174a8:	20001ce8 	.word	0x20001ce8
 80174ac:	20001c48 	.word	0x20001c48
 80174b0:	0801a8c0 	.word	0x0801a8c0

080174b4 <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 80174b4:	b480      	push	{r7}
 80174b6:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80174b8:	4b0b      	ldr	r3, [pc, #44]	; (80174e8 <vPortSetupTimerInterrupt+0x34>)
 80174ba:	2200      	movs	r2, #0
 80174bc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80174be:	4b0b      	ldr	r3, [pc, #44]	; (80174ec <vPortSetupTimerInterrupt+0x38>)
 80174c0:	2200      	movs	r2, #0
 80174c2:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80174c4:	4b0a      	ldr	r3, [pc, #40]	; (80174f0 <vPortSetupTimerInterrupt+0x3c>)
 80174c6:	681b      	ldr	r3, [r3, #0]
 80174c8:	4a0a      	ldr	r2, [pc, #40]	; (80174f4 <vPortSetupTimerInterrupt+0x40>)
 80174ca:	fba2 2303 	umull	r2, r3, r2, r3
 80174ce:	099b      	lsrs	r3, r3, #6
 80174d0:	4a09      	ldr	r2, [pc, #36]	; (80174f8 <vPortSetupTimerInterrupt+0x44>)
 80174d2:	3b01      	subs	r3, #1
 80174d4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80174d6:	4b04      	ldr	r3, [pc, #16]	; (80174e8 <vPortSetupTimerInterrupt+0x34>)
 80174d8:	2207      	movs	r2, #7
 80174da:	601a      	str	r2, [r3, #0]
}
 80174dc:	bf00      	nop
 80174de:	46bd      	mov	sp, r7
 80174e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174e4:	4770      	bx	lr
 80174e6:	bf00      	nop
 80174e8:	e000e010 	.word	0xe000e010
 80174ec:	e000e018 	.word	0xe000e018
 80174f0:	20000090 	.word	0x20000090
 80174f4:	10624dd3 	.word	0x10624dd3
 80174f8:	e000e014 	.word	0xe000e014

080174fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80174fc:	b580      	push	{r7, lr}
 80174fe:	b082      	sub	sp, #8
 8017500:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8017502:	2300      	movs	r3, #0
 8017504:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 8017506:	4b09      	ldr	r3, [pc, #36]	; (801752c <prvTaskExitError+0x30>)
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801750e:	d002      	beq.n	8017516 <prvTaskExitError+0x1a>
 8017510:	f000 f952 	bl	80177b8 <ulSetInterruptMask>
 8017514:	e7fe      	b.n	8017514 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 8017516:	f000 f94f 	bl	80177b8 <ulSetInterruptMask>

	while( ulDummy == 0 )
 801751a:	bf00      	nop
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	2b00      	cmp	r3, #0
 8017520:	d0fc      	beq.n	801751c <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 8017522:	bf00      	nop
 8017524:	bf00      	nop
 8017526:	3708      	adds	r7, #8
 8017528:	46bd      	mov	sp, r7
 801752a:	bd80      	pop	{r7, pc}
 801752c:	2000009c 	.word	0x2000009c

08017530 <vPortYield>:
	}
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 8017530:	b480      	push	{r7}
 8017532:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8017534:	4b06      	ldr	r3, [pc, #24]	; (8017550 <vPortYield+0x20>)
 8017536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801753a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 801753c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8017540:	f3bf 8f6f 	isb	sy
}
 8017544:	bf00      	nop
 8017546:	46bd      	mov	sp, r7
 8017548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801754c:	4770      	bx	lr
 801754e:	bf00      	nop
 8017550:	e000ed04 	.word	0xe000ed04

08017554 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8017554:	b580      	push	{r7, lr}
 8017556:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8017558:	f000 f92e 	bl	80177b8 <ulSetInterruptMask>
	ulCriticalNesting++;
 801755c:	4b05      	ldr	r3, [pc, #20]	; (8017574 <vPortEnterCritical+0x20>)
 801755e:	681b      	ldr	r3, [r3, #0]
 8017560:	3301      	adds	r3, #1
 8017562:	4a04      	ldr	r2, [pc, #16]	; (8017574 <vPortEnterCritical+0x20>)
 8017564:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8017566:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801756a:	f3bf 8f6f 	isb	sy
}
 801756e:	bf00      	nop
 8017570:	bd80      	pop	{r7, pc}
 8017572:	bf00      	nop
 8017574:	2000009c 	.word	0x2000009c

08017578 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8017578:	b580      	push	{r7, lr}
 801757a:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 801757c:	4b0a      	ldr	r3, [pc, #40]	; (80175a8 <vPortExitCritical+0x30>)
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	2b00      	cmp	r3, #0
 8017582:	d102      	bne.n	801758a <vPortExitCritical+0x12>
 8017584:	f000 f918 	bl	80177b8 <ulSetInterruptMask>
 8017588:	e7fe      	b.n	8017588 <vPortExitCritical+0x10>
	ulCriticalNesting--;
 801758a:	4b07      	ldr	r3, [pc, #28]	; (80175a8 <vPortExitCritical+0x30>)
 801758c:	681b      	ldr	r3, [r3, #0]
 801758e:	3b01      	subs	r3, #1
 8017590:	4a05      	ldr	r2, [pc, #20]	; (80175a8 <vPortExitCritical+0x30>)
 8017592:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 8017594:	4b04      	ldr	r3, [pc, #16]	; (80175a8 <vPortExitCritical+0x30>)
 8017596:	681b      	ldr	r3, [r3, #0]
 8017598:	2b00      	cmp	r3, #0
 801759a:	d102      	bne.n	80175a2 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 801759c:	2000      	movs	r0, #0
 801759e:	f000 f918 	bl	80177d2 <vClearInterruptMask>
	}
}
 80175a2:	bf00      	nop
 80175a4:	bd80      	pop	{r7, pc}
 80175a6:	bf00      	nop
 80175a8:	2000009c 	.word	0x2000009c

080175ac <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 80175ac:	b580      	push	{r7, lr}
 80175ae:	b082      	sub	sp, #8
 80175b0:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80175b2:	f000 f901 	bl	80177b8 <ulSetInterruptMask>
 80175b6:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80175b8:	f7ff f8c2 	bl	8016740 <xTaskIncrementTick>
 80175bc:	4603      	mov	r3, r0
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d003      	beq.n	80175ca <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80175c2:	4b05      	ldr	r3, [pc, #20]	; (80175d8 <xPortSysTickHandler+0x2c>)
 80175c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80175c8:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80175ca:	6878      	ldr	r0, [r7, #4]
 80175cc:	f000 f901 	bl	80177d2 <vClearInterruptMask>
}
 80175d0:	bf00      	nop
 80175d2:	3708      	adds	r7, #8
 80175d4:	46bd      	mov	sp, r7
 80175d6:	bd80      	pop	{r7, pc}
 80175d8:	e000ed04 	.word	0xe000ed04

080175dc <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 80175dc:	b580      	push	{r7, lr}
 80175de:	b084      	sub	sp, #16
 80175e0:	af00      	add	r7, sp, #0
 80175e2:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	699b      	ldr	r3, [r3, #24]
 80175e8:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 80175ea:	68fb      	ldr	r3, [r7, #12]
 80175ec:	3b02      	subs	r3, #2
 80175ee:	781b      	ldrb	r3, [r3, #0]
 80175f0:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 80175f2:	7afb      	ldrb	r3, [r7, #11]
 80175f4:	2b02      	cmp	r3, #2
 80175f6:	d102      	bne.n	80175fe <vPortSVCHandler_C+0x22>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 80175f8:	f000 f8b2 	bl	8017760 <vRestoreContextOfFirstTask>
		}
		break;
 80175fc:	e002      	b.n	8017604 <vPortSVCHandler_C+0x28>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 80175fe:	f000 f8db 	bl	80177b8 <ulSetInterruptMask>
 8017602:	e7fe      	b.n	8017602 <vPortSVCHandler_C+0x26>
		}
	}
}
 8017604:	bf00      	nop
 8017606:	3710      	adds	r7, #16
 8017608:	46bd      	mov	sp, r7
 801760a:	bd80      	pop	{r7, pc}

0801760c <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 801760c:	b480      	push	{r7}
 801760e:	b085      	sub	sp, #20
 8017610:	af00      	add	r7, sp, #0
 8017612:	60f8      	str	r0, [r7, #12]
 8017614:	60b9      	str	r1, [r7, #8]
 8017616:	607a      	str	r2, [r7, #4]
 8017618:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 801761a:	68fb      	ldr	r3, [r7, #12]
 801761c:	3b04      	subs	r3, #4
 801761e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8017626:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	3b04      	subs	r3, #4
 801762c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 801762e:	687a      	ldr	r2, [r7, #4]
 8017630:	68fb      	ldr	r3, [r7, #12]
 8017632:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8017634:	68fb      	ldr	r3, [r7, #12]
 8017636:	3b04      	subs	r3, #4
 8017638:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801763a:	4a38      	ldr	r2, [pc, #224]	; (801771c <pxPortInitialiseStack+0x110>)
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8017640:	68fb      	ldr	r3, [r7, #12]
 8017642:	3b04      	subs	r3, #4
 8017644:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 8017646:	68fb      	ldr	r3, [r7, #12]
 8017648:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 801764c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801764e:	68fb      	ldr	r3, [r7, #12]
 8017650:	3b04      	subs	r3, #4
 8017652:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 801765a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	3b04      	subs	r3, #4
 8017660:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8017668:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801766a:	68fb      	ldr	r3, [r7, #12]
 801766c:	3b04      	subs	r3, #4
 801766e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 8017670:	68fb      	ldr	r3, [r7, #12]
 8017672:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8017676:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	3b04      	subs	r3, #4
 801767c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 801767e:	683a      	ldr	r2, [r7, #0]
 8017680:	68fb      	ldr	r3, [r7, #12]
 8017682:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8017684:	68fb      	ldr	r3, [r7, #12]
 8017686:	3b04      	subs	r3, #4
 8017688:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 801768a:	68fb      	ldr	r3, [r7, #12]
 801768c:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8017690:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8017692:	68fb      	ldr	r3, [r7, #12]
 8017694:	3b04      	subs	r3, #4
 8017696:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 8017698:	68fb      	ldr	r3, [r7, #12]
 801769a:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 801769e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80176a0:	68fb      	ldr	r3, [r7, #12]
 80176a2:	3b04      	subs	r3, #4
 80176a4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 80176a6:	68fb      	ldr	r3, [r7, #12]
 80176a8:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 80176ac:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80176ae:	68fb      	ldr	r3, [r7, #12]
 80176b0:	3b04      	subs	r3, #4
 80176b2:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 80176b4:	68fb      	ldr	r3, [r7, #12]
 80176b6:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 80176ba:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	3b04      	subs	r3, #4
 80176c0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 80176c2:	68fb      	ldr	r3, [r7, #12]
 80176c4:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 80176c8:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	3b04      	subs	r3, #4
 80176ce:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 80176d0:	68fb      	ldr	r3, [r7, #12]
 80176d2:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 80176d6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80176d8:	68fb      	ldr	r3, [r7, #12]
 80176da:	3b04      	subs	r3, #4
 80176dc:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 80176de:	68fb      	ldr	r3, [r7, #12]
 80176e0:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 80176e4:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80176e6:	68fb      	ldr	r3, [r7, #12]
 80176e8:	3b04      	subs	r3, #4
 80176ea:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 80176f2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	3b04      	subs	r3, #4
 80176f8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	f06f 0243 	mvn.w	r2, #67	; 0x43
 8017700:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	3b04      	subs	r3, #4
 8017706:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 8017708:	68ba      	ldr	r2, [r7, #8]
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 801770e:	68fb      	ldr	r3, [r7, #12]
}
 8017710:	4618      	mov	r0, r3
 8017712:	3714      	adds	r7, #20
 8017714:	46bd      	mov	sp, r7
 8017716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801771a:	4770      	bx	lr
 801771c:	080174fd 	.word	0x080174fd

08017720 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 8017720:	b580      	push	{r7, lr}
 8017722:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8017724:	4b0c      	ldr	r3, [pc, #48]	; (8017758 <xPortStartScheduler+0x38>)
 8017726:	681b      	ldr	r3, [r3, #0]
 8017728:	4a0b      	ldr	r2, [pc, #44]	; (8017758 <xPortStartScheduler+0x38>)
 801772a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801772e:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8017730:	4b09      	ldr	r3, [pc, #36]	; (8017758 <xPortStartScheduler+0x38>)
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	4a08      	ldr	r2, [pc, #32]	; (8017758 <xPortStartScheduler+0x38>)
 8017736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801773a:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 801773c:	f7ff feba 	bl	80174b4 <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 8017740:	4b06      	ldr	r3, [pc, #24]	; (801775c <xPortStartScheduler+0x3c>)
 8017742:	2200      	movs	r2, #0
 8017744:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 8017746:	f000 f823 	bl	8017790 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 801774a:	f7ff f8ab 	bl	80168a4 <vTaskSwitchContext>
	prvTaskExitError();
 801774e:	f7ff fed5 	bl	80174fc <prvTaskExitError>

	/* Should not get here. */
	return 0;
 8017752:	2300      	movs	r3, #0
}
 8017754:	4618      	mov	r0, r3
 8017756:	bd80      	pop	{r7, pc}
 8017758:	e000ed20 	.word	0xe000ed20
 801775c:	2000009c 	.word	0x2000009c

08017760 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8017760:	4a07      	ldr	r2, [pc, #28]	; (8017780 <pxCurrentTCBConst2>)
 8017762:	6811      	ldr	r1, [r2, #0]
 8017764:	6808      	ldr	r0, [r1, #0]
 8017766:	c806      	ldmia	r0!, {r1, r2}
 8017768:	f381 880b 	msr	PSPLIM, r1
 801776c:	2102      	movs	r1, #2
 801776e:	f381 8814 	msr	CONTROL, r1
 8017772:	3020      	adds	r0, #32
 8017774:	f380 8809 	msr	PSP, r0
 8017778:	f3bf 8f6f 	isb	sy
 801777c:	4710      	bx	r2
 801777e:	bf00      	nop

08017780 <pxCurrentTCBConst2>:
 8017780:	2000170c 	.word	0x2000170c
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 8017784:	bf00      	nop
 8017786:	bf00      	nop
	...

08017790 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8017790:	4807      	ldr	r0, [pc, #28]	; (80177b0 <xVTORConst>)
 8017792:	6800      	ldr	r0, [r0, #0]
 8017794:	6800      	ldr	r0, [r0, #0]
 8017796:	f380 8808 	msr	MSP, r0
 801779a:	b662      	cpsie	i
 801779c:	b661      	cpsie	f
 801779e:	f3bf 8f4f 	dsb	sy
 80177a2:	f3bf 8f6f 	isb	sy
 80177a6:	df02      	svc	2
 80177a8:	bf00      	nop
 80177aa:	bf00      	nop
 80177ac:	f3af 8000 	nop.w

080177b0 <xVTORConst>:
 80177b0:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 80177b4:	bf00      	nop
 80177b6:	bf00      	nop

080177b8 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80177b8:	f3ef 8011 	mrs	r0, BASEPRI
 80177bc:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 80177c0:	f381 8811 	msr	BASEPRI, r1
 80177c4:	f3bf 8f4f 	dsb	sy
 80177c8:	f3bf 8f6f 	isb	sy
 80177cc:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80177ce:	bf00      	nop
 80177d0:	4618      	mov	r0, r3

080177d2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80177d2:	f380 8811 	msr	BASEPRI, r0
 80177d6:	f3bf 8f4f 	dsb	sy
 80177da:	f3bf 8f6f 	isb	sy
 80177de:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 80177e0:	bf00      	nop
	...

080177f0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80177f0:	f3ef 8009 	mrs	r0, PSP
 80177f4:	f3ef 820b 	mrs	r2, PSPLIM
 80177f8:	4673      	mov	r3, lr
 80177fa:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80177fe:	4a10      	ldr	r2, [pc, #64]	; (8017840 <pxCurrentTCBConst>)
 8017800:	6811      	ldr	r1, [r2, #0]
 8017802:	6008      	str	r0, [r1, #0]
 8017804:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 8017808:	f380 8811 	msr	BASEPRI, r0
 801780c:	f3bf 8f4f 	dsb	sy
 8017810:	f3bf 8f6f 	isb	sy
 8017814:	f7ff f846 	bl	80168a4 <vTaskSwitchContext>
 8017818:	f04f 0000 	mov.w	r0, #0
 801781c:	f380 8811 	msr	BASEPRI, r0
 8017820:	4a07      	ldr	r2, [pc, #28]	; (8017840 <pxCurrentTCBConst>)
 8017822:	6811      	ldr	r1, [r2, #0]
 8017824:	6808      	ldr	r0, [r1, #0]
 8017826:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 801782a:	f382 880b 	msr	PSPLIM, r2
 801782e:	f380 8809 	msr	PSP, r0
 8017832:	4718      	bx	r3
 8017834:	f3af 8000 	nop.w
 8017838:	f3af 8000 	nop.w
 801783c:	f3af 8000 	nop.w

08017840 <pxCurrentTCBConst>:
 8017840:	2000170c 	.word	0x2000170c
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 8017844:	bf00      	nop
 8017846:	bf00      	nop
	...

08017850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8017850:	f01e 0f04 	tst.w	lr, #4
 8017854:	bf0c      	ite	eq
 8017856:	f3ef 8008 	mrseq	r0, MSP
 801785a:	f3ef 8009 	mrsne	r0, PSP
 801785e:	4904      	ldr	r1, [pc, #16]	; (8017870 <svchandler_address_const>)
 8017860:	4708      	bx	r1
 8017862:	bf00      	nop
 8017864:	f3af 8000 	nop.w
 8017868:	f3af 8000 	nop.w
 801786c:	f3af 8000 	nop.w

08017870 <svchandler_address_const>:
 8017870:	080175dd 	.word	0x080175dd
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 8017874:	bf00      	nop
 8017876:	bf00      	nop

08017878 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8017878:	b580      	push	{r7, lr}
 801787a:	b086      	sub	sp, #24
 801787c:	af00      	add	r7, sp, #0
 801787e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8017880:	2300      	movs	r3, #0
 8017882:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8017884:	f7fe feb0 	bl	80165e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8017888:	4b4f      	ldr	r3, [pc, #316]	; (80179c8 <pvPortMalloc+0x150>)
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	2b00      	cmp	r3, #0
 801788e:	d101      	bne.n	8017894 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8017890:	f000 f8f8 	bl	8017a84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017894:	4b4d      	ldr	r3, [pc, #308]	; (80179cc <pvPortMalloc+0x154>)
 8017896:	681a      	ldr	r2, [r3, #0]
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	4013      	ands	r3, r2
 801789c:	2b00      	cmp	r3, #0
 801789e:	f040 8083 	bne.w	80179a8 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d015      	beq.n	80178d4 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 80178a8:	2208      	movs	r2, #8
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	4413      	add	r3, r2
 80178ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	f003 0307 	and.w	r3, r3, #7
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d00c      	beq.n	80178d4 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	f023 0307 	bic.w	r3, r3, #7
 80178c0:	3308      	adds	r3, #8
 80178c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	f003 0307 	and.w	r3, r3, #7
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d002      	beq.n	80178d4 <pvPortMalloc+0x5c>
 80178ce:	f7ff ff73 	bl	80177b8 <ulSetInterruptMask>
 80178d2:	e7fe      	b.n	80178d2 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d066      	beq.n	80179a8 <pvPortMalloc+0x130>
 80178da:	4b3d      	ldr	r3, [pc, #244]	; (80179d0 <pvPortMalloc+0x158>)
 80178dc:	681b      	ldr	r3, [r3, #0]
 80178de:	687a      	ldr	r2, [r7, #4]
 80178e0:	429a      	cmp	r2, r3
 80178e2:	d861      	bhi.n	80179a8 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80178e4:	4b3b      	ldr	r3, [pc, #236]	; (80179d4 <pvPortMalloc+0x15c>)
 80178e6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80178e8:	4b3a      	ldr	r3, [pc, #232]	; (80179d4 <pvPortMalloc+0x15c>)
 80178ea:	681b      	ldr	r3, [r3, #0]
 80178ec:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80178ee:	e004      	b.n	80178fa <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 80178f0:	697b      	ldr	r3, [r7, #20]
 80178f2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80178f4:	697b      	ldr	r3, [r7, #20]
 80178f6:	681b      	ldr	r3, [r3, #0]
 80178f8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80178fa:	697b      	ldr	r3, [r7, #20]
 80178fc:	685b      	ldr	r3, [r3, #4]
 80178fe:	687a      	ldr	r2, [r7, #4]
 8017900:	429a      	cmp	r2, r3
 8017902:	d903      	bls.n	801790c <pvPortMalloc+0x94>
 8017904:	697b      	ldr	r3, [r7, #20]
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	2b00      	cmp	r3, #0
 801790a:	d1f1      	bne.n	80178f0 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801790c:	4b2e      	ldr	r3, [pc, #184]	; (80179c8 <pvPortMalloc+0x150>)
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	697a      	ldr	r2, [r7, #20]
 8017912:	429a      	cmp	r2, r3
 8017914:	d048      	beq.n	80179a8 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8017916:	693b      	ldr	r3, [r7, #16]
 8017918:	681b      	ldr	r3, [r3, #0]
 801791a:	2208      	movs	r2, #8
 801791c:	4413      	add	r3, r2
 801791e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017920:	697b      	ldr	r3, [r7, #20]
 8017922:	681a      	ldr	r2, [r3, #0]
 8017924:	693b      	ldr	r3, [r7, #16]
 8017926:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8017928:	697b      	ldr	r3, [r7, #20]
 801792a:	685a      	ldr	r2, [r3, #4]
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	1ad2      	subs	r2, r2, r3
 8017930:	2308      	movs	r3, #8
 8017932:	005b      	lsls	r3, r3, #1
 8017934:	429a      	cmp	r2, r3
 8017936:	d917      	bls.n	8017968 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8017938:	697a      	ldr	r2, [r7, #20]
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	4413      	add	r3, r2
 801793e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017940:	68bb      	ldr	r3, [r7, #8]
 8017942:	f003 0307 	and.w	r3, r3, #7
 8017946:	2b00      	cmp	r3, #0
 8017948:	d002      	beq.n	8017950 <pvPortMalloc+0xd8>
 801794a:	f7ff ff35 	bl	80177b8 <ulSetInterruptMask>
 801794e:	e7fe      	b.n	801794e <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017950:	697b      	ldr	r3, [r7, #20]
 8017952:	685a      	ldr	r2, [r3, #4]
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	1ad2      	subs	r2, r2, r3
 8017958:	68bb      	ldr	r3, [r7, #8]
 801795a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801795c:	697b      	ldr	r3, [r7, #20]
 801795e:	687a      	ldr	r2, [r7, #4]
 8017960:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8017962:	68b8      	ldr	r0, [r7, #8]
 8017964:	f000 f8f0 	bl	8017b48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017968:	4b19      	ldr	r3, [pc, #100]	; (80179d0 <pvPortMalloc+0x158>)
 801796a:	681a      	ldr	r2, [r3, #0]
 801796c:	697b      	ldr	r3, [r7, #20]
 801796e:	685b      	ldr	r3, [r3, #4]
 8017970:	1ad3      	subs	r3, r2, r3
 8017972:	4a17      	ldr	r2, [pc, #92]	; (80179d0 <pvPortMalloc+0x158>)
 8017974:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017976:	4b16      	ldr	r3, [pc, #88]	; (80179d0 <pvPortMalloc+0x158>)
 8017978:	681a      	ldr	r2, [r3, #0]
 801797a:	4b17      	ldr	r3, [pc, #92]	; (80179d8 <pvPortMalloc+0x160>)
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	429a      	cmp	r2, r3
 8017980:	d203      	bcs.n	801798a <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8017982:	4b13      	ldr	r3, [pc, #76]	; (80179d0 <pvPortMalloc+0x158>)
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	4a14      	ldr	r2, [pc, #80]	; (80179d8 <pvPortMalloc+0x160>)
 8017988:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801798a:	697b      	ldr	r3, [r7, #20]
 801798c:	685a      	ldr	r2, [r3, #4]
 801798e:	4b0f      	ldr	r3, [pc, #60]	; (80179cc <pvPortMalloc+0x154>)
 8017990:	681b      	ldr	r3, [r3, #0]
 8017992:	431a      	orrs	r2, r3
 8017994:	697b      	ldr	r3, [r7, #20]
 8017996:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8017998:	697b      	ldr	r3, [r7, #20]
 801799a:	2200      	movs	r2, #0
 801799c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801799e:	4b0f      	ldr	r3, [pc, #60]	; (80179dc <pvPortMalloc+0x164>)
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	3301      	adds	r3, #1
 80179a4:	4a0d      	ldr	r2, [pc, #52]	; (80179dc <pvPortMalloc+0x164>)
 80179a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80179a8:	f7fe fe2c 	bl	8016604 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80179ac:	68fb      	ldr	r3, [r7, #12]
 80179ae:	f003 0307 	and.w	r3, r3, #7
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d002      	beq.n	80179bc <pvPortMalloc+0x144>
 80179b6:	f7ff feff 	bl	80177b8 <ulSetInterruptMask>
 80179ba:	e7fe      	b.n	80179ba <pvPortMalloc+0x142>
	return pvReturn;
 80179bc:	68fb      	ldr	r3, [r7, #12]
}
 80179be:	4618      	mov	r0, r3
 80179c0:	3718      	adds	r7, #24
 80179c2:	46bd      	mov	sp, r7
 80179c4:	bd80      	pop	{r7, pc}
 80179c6:	bf00      	nop
 80179c8:	20009d40 	.word	0x20009d40
 80179cc:	20009d54 	.word	0x20009d54
 80179d0:	20009d44 	.word	0x20009d44
 80179d4:	20009d38 	.word	0x20009d38
 80179d8:	20009d48 	.word	0x20009d48
 80179dc:	20009d4c 	.word	0x20009d4c

080179e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80179e0:	b580      	push	{r7, lr}
 80179e2:	b084      	sub	sp, #16
 80179e4:	af00      	add	r7, sp, #0
 80179e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d03d      	beq.n	8017a6e <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80179f2:	2308      	movs	r3, #8
 80179f4:	425b      	negs	r3, r3
 80179f6:	68fa      	ldr	r2, [r7, #12]
 80179f8:	4413      	add	r3, r2
 80179fa:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80179fc:	68fb      	ldr	r3, [r7, #12]
 80179fe:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017a00:	68bb      	ldr	r3, [r7, #8]
 8017a02:	685a      	ldr	r2, [r3, #4]
 8017a04:	4b1c      	ldr	r3, [pc, #112]	; (8017a78 <vPortFree+0x98>)
 8017a06:	681b      	ldr	r3, [r3, #0]
 8017a08:	4013      	ands	r3, r2
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	d102      	bne.n	8017a14 <vPortFree+0x34>
 8017a0e:	f7ff fed3 	bl	80177b8 <ulSetInterruptMask>
 8017a12:	e7fe      	b.n	8017a12 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8017a14:	68bb      	ldr	r3, [r7, #8]
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d002      	beq.n	8017a22 <vPortFree+0x42>
 8017a1c:	f7ff fecc 	bl	80177b8 <ulSetInterruptMask>
 8017a20:	e7fe      	b.n	8017a20 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8017a22:	68bb      	ldr	r3, [r7, #8]
 8017a24:	685a      	ldr	r2, [r3, #4]
 8017a26:	4b14      	ldr	r3, [pc, #80]	; (8017a78 <vPortFree+0x98>)
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	4013      	ands	r3, r2
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d01e      	beq.n	8017a6e <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8017a30:	68bb      	ldr	r3, [r7, #8]
 8017a32:	681b      	ldr	r3, [r3, #0]
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d11a      	bne.n	8017a6e <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017a38:	68bb      	ldr	r3, [r7, #8]
 8017a3a:	685a      	ldr	r2, [r3, #4]
 8017a3c:	4b0e      	ldr	r3, [pc, #56]	; (8017a78 <vPortFree+0x98>)
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	43db      	mvns	r3, r3
 8017a42:	401a      	ands	r2, r3
 8017a44:	68bb      	ldr	r3, [r7, #8]
 8017a46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017a48:	f7fe fdce 	bl	80165e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017a4c:	68bb      	ldr	r3, [r7, #8]
 8017a4e:	685a      	ldr	r2, [r3, #4]
 8017a50:	4b0a      	ldr	r3, [pc, #40]	; (8017a7c <vPortFree+0x9c>)
 8017a52:	681b      	ldr	r3, [r3, #0]
 8017a54:	4413      	add	r3, r2
 8017a56:	4a09      	ldr	r2, [pc, #36]	; (8017a7c <vPortFree+0x9c>)
 8017a58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017a5a:	68b8      	ldr	r0, [r7, #8]
 8017a5c:	f000 f874 	bl	8017b48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8017a60:	4b07      	ldr	r3, [pc, #28]	; (8017a80 <vPortFree+0xa0>)
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	3301      	adds	r3, #1
 8017a66:	4a06      	ldr	r2, [pc, #24]	; (8017a80 <vPortFree+0xa0>)
 8017a68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8017a6a:	f7fe fdcb 	bl	8016604 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8017a6e:	bf00      	nop
 8017a70:	3710      	adds	r7, #16
 8017a72:	46bd      	mov	sp, r7
 8017a74:	bd80      	pop	{r7, pc}
 8017a76:	bf00      	nop
 8017a78:	20009d54 	.word	0x20009d54
 8017a7c:	20009d44 	.word	0x20009d44
 8017a80:	20009d50 	.word	0x20009d50

08017a84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8017a84:	b480      	push	{r7}
 8017a86:	b085      	sub	sp, #20
 8017a88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017a8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8017a90:	4b27      	ldr	r3, [pc, #156]	; (8017b30 <prvHeapInit+0xac>)
 8017a92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	f003 0307 	and.w	r3, r3, #7
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d00c      	beq.n	8017ab8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	3307      	adds	r3, #7
 8017aa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017aa4:	68fb      	ldr	r3, [r7, #12]
 8017aa6:	f023 0307 	bic.w	r3, r3, #7
 8017aaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8017aac:	68ba      	ldr	r2, [r7, #8]
 8017aae:	68fb      	ldr	r3, [r7, #12]
 8017ab0:	1ad3      	subs	r3, r2, r3
 8017ab2:	4a1f      	ldr	r2, [pc, #124]	; (8017b30 <prvHeapInit+0xac>)
 8017ab4:	4413      	add	r3, r2
 8017ab6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017abc:	4a1d      	ldr	r2, [pc, #116]	; (8017b34 <prvHeapInit+0xb0>)
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8017ac2:	4b1c      	ldr	r3, [pc, #112]	; (8017b34 <prvHeapInit+0xb0>)
 8017ac4:	2200      	movs	r2, #0
 8017ac6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	68ba      	ldr	r2, [r7, #8]
 8017acc:	4413      	add	r3, r2
 8017ace:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8017ad0:	2208      	movs	r2, #8
 8017ad2:	68fb      	ldr	r3, [r7, #12]
 8017ad4:	1a9b      	subs	r3, r3, r2
 8017ad6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017ad8:	68fb      	ldr	r3, [r7, #12]
 8017ada:	f023 0307 	bic.w	r3, r3, #7
 8017ade:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8017ae0:	68fb      	ldr	r3, [r7, #12]
 8017ae2:	4a15      	ldr	r2, [pc, #84]	; (8017b38 <prvHeapInit+0xb4>)
 8017ae4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8017ae6:	4b14      	ldr	r3, [pc, #80]	; (8017b38 <prvHeapInit+0xb4>)
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	2200      	movs	r2, #0
 8017aec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8017aee:	4b12      	ldr	r3, [pc, #72]	; (8017b38 <prvHeapInit+0xb4>)
 8017af0:	681b      	ldr	r3, [r3, #0]
 8017af2:	2200      	movs	r2, #0
 8017af4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017afa:	683b      	ldr	r3, [r7, #0]
 8017afc:	68fa      	ldr	r2, [r7, #12]
 8017afe:	1ad2      	subs	r2, r2, r3
 8017b00:	683b      	ldr	r3, [r7, #0]
 8017b02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8017b04:	4b0c      	ldr	r3, [pc, #48]	; (8017b38 <prvHeapInit+0xb4>)
 8017b06:	681a      	ldr	r2, [r3, #0]
 8017b08:	683b      	ldr	r3, [r7, #0]
 8017b0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017b0c:	683b      	ldr	r3, [r7, #0]
 8017b0e:	685b      	ldr	r3, [r3, #4]
 8017b10:	4a0a      	ldr	r2, [pc, #40]	; (8017b3c <prvHeapInit+0xb8>)
 8017b12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017b14:	683b      	ldr	r3, [r7, #0]
 8017b16:	685b      	ldr	r3, [r3, #4]
 8017b18:	4a09      	ldr	r2, [pc, #36]	; (8017b40 <prvHeapInit+0xbc>)
 8017b1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017b1c:	4b09      	ldr	r3, [pc, #36]	; (8017b44 <prvHeapInit+0xc0>)
 8017b1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8017b22:	601a      	str	r2, [r3, #0]
}
 8017b24:	bf00      	nop
 8017b26:	3714      	adds	r7, #20
 8017b28:	46bd      	mov	sp, r7
 8017b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b2e:	4770      	bx	lr
 8017b30:	20001d38 	.word	0x20001d38
 8017b34:	20009d38 	.word	0x20009d38
 8017b38:	20009d40 	.word	0x20009d40
 8017b3c:	20009d48 	.word	0x20009d48
 8017b40:	20009d44 	.word	0x20009d44
 8017b44:	20009d54 	.word	0x20009d54

08017b48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017b48:	b480      	push	{r7}
 8017b4a:	b085      	sub	sp, #20
 8017b4c:	af00      	add	r7, sp, #0
 8017b4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017b50:	4b28      	ldr	r3, [pc, #160]	; (8017bf4 <prvInsertBlockIntoFreeList+0xac>)
 8017b52:	60fb      	str	r3, [r7, #12]
 8017b54:	e002      	b.n	8017b5c <prvInsertBlockIntoFreeList+0x14>
 8017b56:	68fb      	ldr	r3, [r7, #12]
 8017b58:	681b      	ldr	r3, [r3, #0]
 8017b5a:	60fb      	str	r3, [r7, #12]
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	681b      	ldr	r3, [r3, #0]
 8017b60:	687a      	ldr	r2, [r7, #4]
 8017b62:	429a      	cmp	r2, r3
 8017b64:	d8f7      	bhi.n	8017b56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8017b66:	68fb      	ldr	r3, [r7, #12]
 8017b68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017b6a:	68fb      	ldr	r3, [r7, #12]
 8017b6c:	685b      	ldr	r3, [r3, #4]
 8017b6e:	68ba      	ldr	r2, [r7, #8]
 8017b70:	4413      	add	r3, r2
 8017b72:	687a      	ldr	r2, [r7, #4]
 8017b74:	429a      	cmp	r2, r3
 8017b76:	d108      	bne.n	8017b8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017b78:	68fb      	ldr	r3, [r7, #12]
 8017b7a:	685a      	ldr	r2, [r3, #4]
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	685b      	ldr	r3, [r3, #4]
 8017b80:	441a      	add	r2, r3
 8017b82:	68fb      	ldr	r3, [r7, #12]
 8017b84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017b86:	68fb      	ldr	r3, [r7, #12]
 8017b88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	685b      	ldr	r3, [r3, #4]
 8017b92:	68ba      	ldr	r2, [r7, #8]
 8017b94:	441a      	add	r2, r3
 8017b96:	68fb      	ldr	r3, [r7, #12]
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	429a      	cmp	r2, r3
 8017b9c:	d118      	bne.n	8017bd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8017b9e:	68fb      	ldr	r3, [r7, #12]
 8017ba0:	681a      	ldr	r2, [r3, #0]
 8017ba2:	4b15      	ldr	r3, [pc, #84]	; (8017bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8017ba4:	681b      	ldr	r3, [r3, #0]
 8017ba6:	429a      	cmp	r2, r3
 8017ba8:	d00d      	beq.n	8017bc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	685a      	ldr	r2, [r3, #4]
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	681b      	ldr	r3, [r3, #0]
 8017bb2:	685b      	ldr	r3, [r3, #4]
 8017bb4:	441a      	add	r2, r3
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	681b      	ldr	r3, [r3, #0]
 8017bbe:	681a      	ldr	r2, [r3, #0]
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	601a      	str	r2, [r3, #0]
 8017bc4:	e008      	b.n	8017bd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8017bc6:	4b0c      	ldr	r3, [pc, #48]	; (8017bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8017bc8:	681a      	ldr	r2, [r3, #0]
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	601a      	str	r2, [r3, #0]
 8017bce:	e003      	b.n	8017bd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017bd0:	68fb      	ldr	r3, [r7, #12]
 8017bd2:	681a      	ldr	r2, [r3, #0]
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017bd8:	68fa      	ldr	r2, [r7, #12]
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	429a      	cmp	r2, r3
 8017bde:	d002      	beq.n	8017be6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017be0:	68fb      	ldr	r3, [r7, #12]
 8017be2:	687a      	ldr	r2, [r7, #4]
 8017be4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017be6:	bf00      	nop
 8017be8:	3714      	adds	r7, #20
 8017bea:	46bd      	mov	sp, r7
 8017bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bf0:	4770      	bx	lr
 8017bf2:	bf00      	nop
 8017bf4:	20009d38 	.word	0x20009d38
 8017bf8:	20009d40 	.word	0x20009d40

08017bfc <_ZdlPvj>:
 8017bfc:	f000 b81a 	b.w	8017c34 <_ZdlPv>

08017c00 <_Znwj>:
 8017c00:	2801      	cmp	r0, #1
 8017c02:	bf38      	it	cc
 8017c04:	2001      	movcc	r0, #1
 8017c06:	b510      	push	{r4, lr}
 8017c08:	4604      	mov	r4, r0
 8017c0a:	4620      	mov	r0, r4
 8017c0c:	f001 f93c 	bl	8018e88 <malloc>
 8017c10:	b100      	cbz	r0, 8017c14 <_Znwj+0x14>
 8017c12:	bd10      	pop	{r4, pc}
 8017c14:	f000 f810 	bl	8017c38 <_ZSt15get_new_handlerv>
 8017c18:	b908      	cbnz	r0, 8017c1e <_Znwj+0x1e>
 8017c1a:	f001 f92e 	bl	8018e7a <abort>
 8017c1e:	4780      	blx	r0
 8017c20:	e7f3      	b.n	8017c0a <_Znwj+0xa>

08017c22 <_ZSt17__throw_bad_allocv>:
 8017c22:	b508      	push	{r3, lr}
 8017c24:	f001 f929 	bl	8018e7a <abort>

08017c28 <_ZSt28__throw_bad_array_new_lengthv>:
 8017c28:	b508      	push	{r3, lr}
 8017c2a:	f001 f926 	bl	8018e7a <abort>

08017c2e <_ZSt20__throw_length_errorPKc>:
 8017c2e:	b508      	push	{r3, lr}
 8017c30:	f001 f923 	bl	8018e7a <abort>

08017c34 <_ZdlPv>:
 8017c34:	f001 b930 	b.w	8018e98 <free>

08017c38 <_ZSt15get_new_handlerv>:
 8017c38:	4b01      	ldr	r3, [pc, #4]	; (8017c40 <_ZSt15get_new_handlerv+0x8>)
 8017c3a:	e8d3 0faf 	lda	r0, [r3]
 8017c3e:	4770      	bx	lr
 8017c40:	20009d58 	.word	0x20009d58

08017c44 <fmod>:
 8017c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c46:	ec57 6b10 	vmov	r6, r7, d0
 8017c4a:	ec55 4b11 	vmov	r4, r5, d1
 8017c4e:	ed2d 8b02 	vpush	{d8}
 8017c52:	f000 f8bb 	bl	8017dcc <__ieee754_fmod>
 8017c56:	4622      	mov	r2, r4
 8017c58:	462b      	mov	r3, r5
 8017c5a:	4630      	mov	r0, r6
 8017c5c:	4639      	mov	r1, r7
 8017c5e:	eeb0 8a40 	vmov.f32	s16, s0
 8017c62:	eef0 8a60 	vmov.f32	s17, s1
 8017c66:	f7e8 ff49 	bl	8000afc <__aeabi_dcmpun>
 8017c6a:	b990      	cbnz	r0, 8017c92 <fmod+0x4e>
 8017c6c:	2200      	movs	r2, #0
 8017c6e:	2300      	movs	r3, #0
 8017c70:	4620      	mov	r0, r4
 8017c72:	4629      	mov	r1, r5
 8017c74:	f7e8 ff10 	bl	8000a98 <__aeabi_dcmpeq>
 8017c78:	b158      	cbz	r0, 8017c92 <fmod+0x4e>
 8017c7a:	f001 fbef 	bl	801945c <__errno>
 8017c7e:	2321      	movs	r3, #33	; 0x21
 8017c80:	2200      	movs	r2, #0
 8017c82:	6003      	str	r3, [r0, #0]
 8017c84:	2300      	movs	r3, #0
 8017c86:	4610      	mov	r0, r2
 8017c88:	4619      	mov	r1, r3
 8017c8a:	f7e8 fdc7 	bl	800081c <__aeabi_ddiv>
 8017c8e:	ec41 0b18 	vmov	d8, r0, r1
 8017c92:	eeb0 0a48 	vmov.f32	s0, s16
 8017c96:	eef0 0a68 	vmov.f32	s1, s17
 8017c9a:	ecbd 8b02 	vpop	{d8}
 8017c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017ca0 <atan2f>:
 8017ca0:	f000 ba48 	b.w	8018134 <__ieee754_atan2f>

08017ca4 <cosf>:
 8017ca4:	ee10 3a10 	vmov	r3, s0
 8017ca8:	b507      	push	{r0, r1, r2, lr}
 8017caa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017cae:	4a1d      	ldr	r2, [pc, #116]	; (8017d24 <cosf+0x80>)
 8017cb0:	4293      	cmp	r3, r2
 8017cb2:	dc06      	bgt.n	8017cc2 <cosf+0x1e>
 8017cb4:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8017d28 <cosf+0x84>
 8017cb8:	b003      	add	sp, #12
 8017cba:	f85d eb04 	ldr.w	lr, [sp], #4
 8017cbe:	f000 b993 	b.w	8017fe8 <__kernel_cosf>
 8017cc2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017cc6:	db04      	blt.n	8017cd2 <cosf+0x2e>
 8017cc8:	ee30 0a40 	vsub.f32	s0, s0, s0
 8017ccc:	b003      	add	sp, #12
 8017cce:	f85d fb04 	ldr.w	pc, [sp], #4
 8017cd2:	4668      	mov	r0, sp
 8017cd4:	f000 facc 	bl	8018270 <__ieee754_rem_pio2f>
 8017cd8:	f000 0003 	and.w	r0, r0, #3
 8017cdc:	2801      	cmp	r0, #1
 8017cde:	d009      	beq.n	8017cf4 <cosf+0x50>
 8017ce0:	2802      	cmp	r0, #2
 8017ce2:	d010      	beq.n	8017d06 <cosf+0x62>
 8017ce4:	b9b0      	cbnz	r0, 8017d14 <cosf+0x70>
 8017ce6:	eddd 0a01 	vldr	s1, [sp, #4]
 8017cea:	ed9d 0a00 	vldr	s0, [sp]
 8017cee:	f000 f97b 	bl	8017fe8 <__kernel_cosf>
 8017cf2:	e7eb      	b.n	8017ccc <cosf+0x28>
 8017cf4:	eddd 0a01 	vldr	s1, [sp, #4]
 8017cf8:	ed9d 0a00 	vldr	s0, [sp]
 8017cfc:	f000 f9d2 	bl	80180a4 <__kernel_sinf>
 8017d00:	eeb1 0a40 	vneg.f32	s0, s0
 8017d04:	e7e2      	b.n	8017ccc <cosf+0x28>
 8017d06:	eddd 0a01 	vldr	s1, [sp, #4]
 8017d0a:	ed9d 0a00 	vldr	s0, [sp]
 8017d0e:	f000 f96b 	bl	8017fe8 <__kernel_cosf>
 8017d12:	e7f5      	b.n	8017d00 <cosf+0x5c>
 8017d14:	2001      	movs	r0, #1
 8017d16:	eddd 0a01 	vldr	s1, [sp, #4]
 8017d1a:	ed9d 0a00 	vldr	s0, [sp]
 8017d1e:	f000 f9c1 	bl	80180a4 <__kernel_sinf>
 8017d22:	e7d3      	b.n	8017ccc <cosf+0x28>
 8017d24:	3f490fd8 	.word	0x3f490fd8
 8017d28:	00000000 	.word	0x00000000

08017d2c <sinf>:
 8017d2c:	ee10 3a10 	vmov	r3, s0
 8017d30:	b507      	push	{r0, r1, r2, lr}
 8017d32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017d36:	4a1e      	ldr	r2, [pc, #120]	; (8017db0 <sinf+0x84>)
 8017d38:	4293      	cmp	r3, r2
 8017d3a:	dc07      	bgt.n	8017d4c <sinf+0x20>
 8017d3c:	2000      	movs	r0, #0
 8017d3e:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8017db4 <sinf+0x88>
 8017d42:	b003      	add	sp, #12
 8017d44:	f85d eb04 	ldr.w	lr, [sp], #4
 8017d48:	f000 b9ac 	b.w	80180a4 <__kernel_sinf>
 8017d4c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017d50:	db04      	blt.n	8017d5c <sinf+0x30>
 8017d52:	ee30 0a40 	vsub.f32	s0, s0, s0
 8017d56:	b003      	add	sp, #12
 8017d58:	f85d fb04 	ldr.w	pc, [sp], #4
 8017d5c:	4668      	mov	r0, sp
 8017d5e:	f000 fa87 	bl	8018270 <__ieee754_rem_pio2f>
 8017d62:	f000 0003 	and.w	r0, r0, #3
 8017d66:	2801      	cmp	r0, #1
 8017d68:	d00a      	beq.n	8017d80 <sinf+0x54>
 8017d6a:	2802      	cmp	r0, #2
 8017d6c:	d00f      	beq.n	8017d8e <sinf+0x62>
 8017d6e:	b9c0      	cbnz	r0, 8017da2 <sinf+0x76>
 8017d70:	2001      	movs	r0, #1
 8017d72:	eddd 0a01 	vldr	s1, [sp, #4]
 8017d76:	ed9d 0a00 	vldr	s0, [sp]
 8017d7a:	f000 f993 	bl	80180a4 <__kernel_sinf>
 8017d7e:	e7ea      	b.n	8017d56 <sinf+0x2a>
 8017d80:	eddd 0a01 	vldr	s1, [sp, #4]
 8017d84:	ed9d 0a00 	vldr	s0, [sp]
 8017d88:	f000 f92e 	bl	8017fe8 <__kernel_cosf>
 8017d8c:	e7e3      	b.n	8017d56 <sinf+0x2a>
 8017d8e:	2001      	movs	r0, #1
 8017d90:	eddd 0a01 	vldr	s1, [sp, #4]
 8017d94:	ed9d 0a00 	vldr	s0, [sp]
 8017d98:	f000 f984 	bl	80180a4 <__kernel_sinf>
 8017d9c:	eeb1 0a40 	vneg.f32	s0, s0
 8017da0:	e7d9      	b.n	8017d56 <sinf+0x2a>
 8017da2:	eddd 0a01 	vldr	s1, [sp, #4]
 8017da6:	ed9d 0a00 	vldr	s0, [sp]
 8017daa:	f000 f91d 	bl	8017fe8 <__kernel_cosf>
 8017dae:	e7f5      	b.n	8017d9c <sinf+0x70>
 8017db0:	3f490fd8 	.word	0x3f490fd8
 8017db4:	00000000 	.word	0x00000000

08017db8 <log2f>:
 8017db8:	b508      	push	{r3, lr}
 8017dba:	f000 fb83 	bl	80184c4 <logf>
 8017dbe:	eddf 7a02 	vldr	s15, [pc, #8]	; 8017dc8 <log2f+0x10>
 8017dc2:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8017dc6:	bd08      	pop	{r3, pc}
 8017dc8:	3f317218 	.word	0x3f317218

08017dcc <__ieee754_fmod>:
 8017dcc:	ec53 2b11 	vmov	r2, r3, d1
 8017dd0:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8017dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017dd8:	ea5c 0402 	orrs.w	r4, ip, r2
 8017ddc:	461e      	mov	r6, r3
 8017dde:	ee11 7a10 	vmov	r7, s2
 8017de2:	ee11 ea10 	vmov	lr, s2
 8017de6:	ec51 0b10 	vmov	r0, r1, d0
 8017dea:	d00c      	beq.n	8017e06 <__ieee754_fmod+0x3a>
 8017dec:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8017df0:	4c77      	ldr	r4, [pc, #476]	; (8017fd0 <__ieee754_fmod+0x204>)
 8017df2:	4689      	mov	r9, r1
 8017df4:	45a0      	cmp	r8, r4
 8017df6:	dc06      	bgt.n	8017e06 <__ieee754_fmod+0x3a>
 8017df8:	4254      	negs	r4, r2
 8017dfa:	4d76      	ldr	r5, [pc, #472]	; (8017fd4 <__ieee754_fmod+0x208>)
 8017dfc:	4314      	orrs	r4, r2
 8017dfe:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8017e02:	42ac      	cmp	r4, r5
 8017e04:	d909      	bls.n	8017e1a <__ieee754_fmod+0x4e>
 8017e06:	f7e8 fbdf 	bl	80005c8 <__aeabi_dmul>
 8017e0a:	4602      	mov	r2, r0
 8017e0c:	460b      	mov	r3, r1
 8017e0e:	f7e8 fd05 	bl	800081c <__aeabi_ddiv>
 8017e12:	ec41 0b10 	vmov	d0, r0, r1
 8017e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e1a:	45e0      	cmp	r8, ip
 8017e1c:	ee10 aa10 	vmov	sl, s0
 8017e20:	ee10 4a10 	vmov	r4, s0
 8017e24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8017e28:	dc09      	bgt.n	8017e3e <__ieee754_fmod+0x72>
 8017e2a:	dbf2      	blt.n	8017e12 <__ieee754_fmod+0x46>
 8017e2c:	4290      	cmp	r0, r2
 8017e2e:	d3f0      	bcc.n	8017e12 <__ieee754_fmod+0x46>
 8017e30:	d105      	bne.n	8017e3e <__ieee754_fmod+0x72>
 8017e32:	4b69      	ldr	r3, [pc, #420]	; (8017fd8 <__ieee754_fmod+0x20c>)
 8017e34:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8017e38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017e3c:	e7e9      	b.n	8017e12 <__ieee754_fmod+0x46>
 8017e3e:	4a65      	ldr	r2, [pc, #404]	; (8017fd4 <__ieee754_fmod+0x208>)
 8017e40:	ea19 0f02 	tst.w	r9, r2
 8017e44:	d148      	bne.n	8017ed8 <__ieee754_fmod+0x10c>
 8017e46:	f1b8 0f00 	cmp.w	r8, #0
 8017e4a:	d13d      	bne.n	8017ec8 <__ieee754_fmod+0xfc>
 8017e4c:	4653      	mov	r3, sl
 8017e4e:	4963      	ldr	r1, [pc, #396]	; (8017fdc <__ieee754_fmod+0x210>)
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	dc36      	bgt.n	8017ec2 <__ieee754_fmod+0xf6>
 8017e54:	4216      	tst	r6, r2
 8017e56:	d14f      	bne.n	8017ef8 <__ieee754_fmod+0x12c>
 8017e58:	f1bc 0f00 	cmp.w	ip, #0
 8017e5c:	d144      	bne.n	8017ee8 <__ieee754_fmod+0x11c>
 8017e5e:	463b      	mov	r3, r7
 8017e60:	4a5e      	ldr	r2, [pc, #376]	; (8017fdc <__ieee754_fmod+0x210>)
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	dc3d      	bgt.n	8017ee2 <__ieee754_fmod+0x116>
 8017e66:	485e      	ldr	r0, [pc, #376]	; (8017fe0 <__ieee754_fmod+0x214>)
 8017e68:	4281      	cmp	r1, r0
 8017e6a:	db4a      	blt.n	8017f02 <__ieee754_fmod+0x136>
 8017e6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017e70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017e74:	485a      	ldr	r0, [pc, #360]	; (8017fe0 <__ieee754_fmod+0x214>)
 8017e76:	4282      	cmp	r2, r0
 8017e78:	db57      	blt.n	8017f2a <__ieee754_fmod+0x15e>
 8017e7a:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8017e7e:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8017e82:	1a89      	subs	r1, r1, r2
 8017e84:	1b98      	subs	r0, r3, r6
 8017e86:	eba4 070e 	sub.w	r7, r4, lr
 8017e8a:	2900      	cmp	r1, #0
 8017e8c:	d162      	bne.n	8017f54 <__ieee754_fmod+0x188>
 8017e8e:	4574      	cmp	r4, lr
 8017e90:	bf38      	it	cc
 8017e92:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8017e96:	2800      	cmp	r0, #0
 8017e98:	bfa4      	itt	ge
 8017e9a:	463c      	movge	r4, r7
 8017e9c:	4603      	movge	r3, r0
 8017e9e:	ea53 0104 	orrs.w	r1, r3, r4
 8017ea2:	d0c6      	beq.n	8017e32 <__ieee754_fmod+0x66>
 8017ea4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8017ea8:	db69      	blt.n	8017f7e <__ieee754_fmod+0x1b2>
 8017eaa:	494d      	ldr	r1, [pc, #308]	; (8017fe0 <__ieee754_fmod+0x214>)
 8017eac:	428a      	cmp	r2, r1
 8017eae:	db6c      	blt.n	8017f8a <__ieee754_fmod+0x1be>
 8017eb0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017eb4:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8017eb8:	4620      	mov	r0, r4
 8017eba:	432b      	orrs	r3, r5
 8017ebc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8017ec0:	e7a7      	b.n	8017e12 <__ieee754_fmod+0x46>
 8017ec2:	3901      	subs	r1, #1
 8017ec4:	005b      	lsls	r3, r3, #1
 8017ec6:	e7c3      	b.n	8017e50 <__ieee754_fmod+0x84>
 8017ec8:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8017ecc:	4944      	ldr	r1, [pc, #272]	; (8017fe0 <__ieee754_fmod+0x214>)
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	ddc0      	ble.n	8017e54 <__ieee754_fmod+0x88>
 8017ed2:	3901      	subs	r1, #1
 8017ed4:	005b      	lsls	r3, r3, #1
 8017ed6:	e7fa      	b.n	8017ece <__ieee754_fmod+0x102>
 8017ed8:	ea4f 5128 	mov.w	r1, r8, asr #20
 8017edc:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8017ee0:	e7b8      	b.n	8017e54 <__ieee754_fmod+0x88>
 8017ee2:	3a01      	subs	r2, #1
 8017ee4:	005b      	lsls	r3, r3, #1
 8017ee6:	e7bc      	b.n	8017e62 <__ieee754_fmod+0x96>
 8017ee8:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8017eec:	4a3c      	ldr	r2, [pc, #240]	; (8017fe0 <__ieee754_fmod+0x214>)
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	ddb9      	ble.n	8017e66 <__ieee754_fmod+0x9a>
 8017ef2:	3a01      	subs	r2, #1
 8017ef4:	005b      	lsls	r3, r3, #1
 8017ef6:	e7fa      	b.n	8017eee <__ieee754_fmod+0x122>
 8017ef8:	ea4f 522c 	mov.w	r2, ip, asr #20
 8017efc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8017f00:	e7b1      	b.n	8017e66 <__ieee754_fmod+0x9a>
 8017f02:	1a40      	subs	r0, r0, r1
 8017f04:	281f      	cmp	r0, #31
 8017f06:	dc0a      	bgt.n	8017f1e <__ieee754_fmod+0x152>
 8017f08:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8017f0c:	fa08 f800 	lsl.w	r8, r8, r0
 8017f10:	fa0a f400 	lsl.w	r4, sl, r0
 8017f14:	fa2a f303 	lsr.w	r3, sl, r3
 8017f18:	ea43 0308 	orr.w	r3, r3, r8
 8017f1c:	e7aa      	b.n	8017e74 <__ieee754_fmod+0xa8>
 8017f1e:	4b31      	ldr	r3, [pc, #196]	; (8017fe4 <__ieee754_fmod+0x218>)
 8017f20:	2400      	movs	r4, #0
 8017f22:	1a5b      	subs	r3, r3, r1
 8017f24:	fa0a f303 	lsl.w	r3, sl, r3
 8017f28:	e7a4      	b.n	8017e74 <__ieee754_fmod+0xa8>
 8017f2a:	1a80      	subs	r0, r0, r2
 8017f2c:	281f      	cmp	r0, #31
 8017f2e:	dc0a      	bgt.n	8017f46 <__ieee754_fmod+0x17a>
 8017f30:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8017f34:	fa0c fc00 	lsl.w	ip, ip, r0
 8017f38:	fa07 fe00 	lsl.w	lr, r7, r0
 8017f3c:	fa27 f606 	lsr.w	r6, r7, r6
 8017f40:	ea46 060c 	orr.w	r6, r6, ip
 8017f44:	e79d      	b.n	8017e82 <__ieee754_fmod+0xb6>
 8017f46:	4e27      	ldr	r6, [pc, #156]	; (8017fe4 <__ieee754_fmod+0x218>)
 8017f48:	f04f 0e00 	mov.w	lr, #0
 8017f4c:	1ab6      	subs	r6, r6, r2
 8017f4e:	fa07 f606 	lsl.w	r6, r7, r6
 8017f52:	e796      	b.n	8017e82 <__ieee754_fmod+0xb6>
 8017f54:	4574      	cmp	r4, lr
 8017f56:	bf38      	it	cc
 8017f58:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8017f5c:	2800      	cmp	r0, #0
 8017f5e:	da05      	bge.n	8017f6c <__ieee754_fmod+0x1a0>
 8017f60:	0fe0      	lsrs	r0, r4, #31
 8017f62:	0064      	lsls	r4, r4, #1
 8017f64:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8017f68:	3901      	subs	r1, #1
 8017f6a:	e78b      	b.n	8017e84 <__ieee754_fmod+0xb8>
 8017f6c:	ea50 0307 	orrs.w	r3, r0, r7
 8017f70:	f43f af5f 	beq.w	8017e32 <__ieee754_fmod+0x66>
 8017f74:	0ffb      	lsrs	r3, r7, #31
 8017f76:	007c      	lsls	r4, r7, #1
 8017f78:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8017f7c:	e7f4      	b.n	8017f68 <__ieee754_fmod+0x19c>
 8017f7e:	0fe1      	lsrs	r1, r4, #31
 8017f80:	3a01      	subs	r2, #1
 8017f82:	0064      	lsls	r4, r4, #1
 8017f84:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8017f88:	e78c      	b.n	8017ea4 <__ieee754_fmod+0xd8>
 8017f8a:	1a89      	subs	r1, r1, r2
 8017f8c:	2914      	cmp	r1, #20
 8017f8e:	dc0a      	bgt.n	8017fa6 <__ieee754_fmod+0x1da>
 8017f90:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8017f94:	40cc      	lsrs	r4, r1
 8017f96:	fa03 f202 	lsl.w	r2, r3, r2
 8017f9a:	410b      	asrs	r3, r1
 8017f9c:	4322      	orrs	r2, r4
 8017f9e:	ea43 0105 	orr.w	r1, r3, r5
 8017fa2:	4610      	mov	r0, r2
 8017fa4:	e735      	b.n	8017e12 <__ieee754_fmod+0x46>
 8017fa6:	291f      	cmp	r1, #31
 8017fa8:	dc07      	bgt.n	8017fba <__ieee754_fmod+0x1ee>
 8017faa:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8017fae:	40cc      	lsrs	r4, r1
 8017fb0:	fa03 f202 	lsl.w	r2, r3, r2
 8017fb4:	4322      	orrs	r2, r4
 8017fb6:	462b      	mov	r3, r5
 8017fb8:	e7f1      	b.n	8017f9e <__ieee754_fmod+0x1d2>
 8017fba:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8017fbe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8017fc2:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8017fc6:	32e2      	adds	r2, #226	; 0xe2
 8017fc8:	fa43 f202 	asr.w	r2, r3, r2
 8017fcc:	e7f3      	b.n	8017fb6 <__ieee754_fmod+0x1ea>
 8017fce:	bf00      	nop
 8017fd0:	7fefffff 	.word	0x7fefffff
 8017fd4:	7ff00000 	.word	0x7ff00000
 8017fd8:	0801ab18 	.word	0x0801ab18
 8017fdc:	fffffbed 	.word	0xfffffbed
 8017fe0:	fffffc02 	.word	0xfffffc02
 8017fe4:	fffffbe2 	.word	0xfffffbe2

08017fe8 <__kernel_cosf>:
 8017fe8:	ee10 3a10 	vmov	r3, s0
 8017fec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017ff0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017ff4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8017ff8:	da05      	bge.n	8018006 <__kernel_cosf+0x1e>
 8017ffa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8017ffe:	ee17 2a90 	vmov	r2, s15
 8018002:	2a00      	cmp	r2, #0
 8018004:	d03b      	beq.n	801807e <__kernel_cosf+0x96>
 8018006:	ee20 7a00 	vmul.f32	s14, s0, s0
 801800a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8018084 <__kernel_cosf+0x9c>
 801800e:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8018088 <__kernel_cosf+0xa0>
 8018012:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8018016:	4a1d      	ldr	r2, [pc, #116]	; (801808c <__kernel_cosf+0xa4>)
 8018018:	eea7 6a27 	vfma.f32	s12, s14, s15
 801801c:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8018090 <__kernel_cosf+0xa8>
 8018020:	4293      	cmp	r3, r2
 8018022:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018026:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8018094 <__kernel_cosf+0xac>
 801802a:	eea7 6a87 	vfma.f32	s12, s15, s14
 801802e:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8018098 <__kernel_cosf+0xb0>
 8018032:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018036:	ed9f 6a19 	vldr	s12, [pc, #100]	; 801809c <__kernel_cosf+0xb4>
 801803a:	eea7 6a87 	vfma.f32	s12, s15, s14
 801803e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018046:	ee26 6a07 	vmul.f32	s12, s12, s14
 801804a:	eee7 0a06 	vfma.f32	s1, s14, s12
 801804e:	dc04      	bgt.n	801805a <__kernel_cosf+0x72>
 8018050:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8018054:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8018058:	4770      	bx	lr
 801805a:	4a11      	ldr	r2, [pc, #68]	; (80180a0 <__kernel_cosf+0xb8>)
 801805c:	4293      	cmp	r3, r2
 801805e:	bfd6      	itet	le
 8018060:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8018064:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8018068:	ee07 3a10 	vmovle	s14, r3
 801806c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018070:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8018074:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8018078:	ee30 0a67 	vsub.f32	s0, s0, s15
 801807c:	4770      	bx	lr
 801807e:	eeb0 0a66 	vmov.f32	s0, s13
 8018082:	4770      	bx	lr
 8018084:	ad47d74e 	.word	0xad47d74e
 8018088:	310f74f6 	.word	0x310f74f6
 801808c:	3e999999 	.word	0x3e999999
 8018090:	b493f27c 	.word	0xb493f27c
 8018094:	37d00d01 	.word	0x37d00d01
 8018098:	bab60b61 	.word	0xbab60b61
 801809c:	3d2aaaab 	.word	0x3d2aaaab
 80180a0:	3f480000 	.word	0x3f480000

080180a4 <__kernel_sinf>:
 80180a4:	ee10 3a10 	vmov	r3, s0
 80180a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80180ac:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80180b0:	da04      	bge.n	80180bc <__kernel_sinf+0x18>
 80180b2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80180b6:	ee17 3a90 	vmov	r3, s15
 80180ba:	b35b      	cbz	r3, 8018114 <__kernel_sinf+0x70>
 80180bc:	ee20 7a00 	vmul.f32	s14, s0, s0
 80180c0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8018118 <__kernel_sinf+0x74>
 80180c4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801811c <__kernel_sinf+0x78>
 80180c8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80180cc:	eddf 7a14 	vldr	s15, [pc, #80]	; 8018120 <__kernel_sinf+0x7c>
 80180d0:	ee60 6a07 	vmul.f32	s13, s0, s14
 80180d4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80180d8:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8018124 <__kernel_sinf+0x80>
 80180dc:	eea7 6a87 	vfma.f32	s12, s15, s14
 80180e0:	eddf 7a11 	vldr	s15, [pc, #68]	; 8018128 <__kernel_sinf+0x84>
 80180e4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80180e8:	b930      	cbnz	r0, 80180f8 <__kernel_sinf+0x54>
 80180ea:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801812c <__kernel_sinf+0x88>
 80180ee:	eea7 6a27 	vfma.f32	s12, s14, s15
 80180f2:	eea6 0a26 	vfma.f32	s0, s12, s13
 80180f6:	4770      	bx	lr
 80180f8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80180fc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8018100:	eee0 7a86 	vfma.f32	s15, s1, s12
 8018104:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8018108:	eddf 7a09 	vldr	s15, [pc, #36]	; 8018130 <__kernel_sinf+0x8c>
 801810c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8018110:	ee30 0a60 	vsub.f32	s0, s0, s1
 8018114:	4770      	bx	lr
 8018116:	bf00      	nop
 8018118:	2f2ec9d3 	.word	0x2f2ec9d3
 801811c:	b2d72f34 	.word	0xb2d72f34
 8018120:	3638ef1b 	.word	0x3638ef1b
 8018124:	b9500d01 	.word	0xb9500d01
 8018128:	3c088889 	.word	0x3c088889
 801812c:	be2aaaab 	.word	0xbe2aaaab
 8018130:	3e2aaaab 	.word	0x3e2aaaab

08018134 <__ieee754_atan2f>:
 8018134:	ee10 2a90 	vmov	r2, s1
 8018138:	eef0 7a40 	vmov.f32	s15, s0
 801813c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8018140:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8018144:	b510      	push	{r4, lr}
 8018146:	dc06      	bgt.n	8018156 <__ieee754_atan2f+0x22>
 8018148:	ee10 0a10 	vmov	r0, s0
 801814c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8018150:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018154:	dd04      	ble.n	8018160 <__ieee754_atan2f+0x2c>
 8018156:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801815a:	eeb0 0a67 	vmov.f32	s0, s15
 801815e:	bd10      	pop	{r4, pc}
 8018160:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8018164:	d103      	bne.n	801816e <__ieee754_atan2f+0x3a>
 8018166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801816a:	f000 b9d9 	b.w	8018520 <atanf>
 801816e:	1794      	asrs	r4, r2, #30
 8018170:	f004 0402 	and.w	r4, r4, #2
 8018174:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8018178:	b93b      	cbnz	r3, 801818a <__ieee754_atan2f+0x56>
 801817a:	2c02      	cmp	r4, #2
 801817c:	d05c      	beq.n	8018238 <__ieee754_atan2f+0x104>
 801817e:	2c03      	cmp	r4, #3
 8018180:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801824c <__ieee754_atan2f+0x118>
 8018184:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8018188:	e7e7      	b.n	801815a <__ieee754_atan2f+0x26>
 801818a:	b939      	cbnz	r1, 801819c <__ieee754_atan2f+0x68>
 801818c:	2800      	cmp	r0, #0
 801818e:	eddf 7a30 	vldr	s15, [pc, #192]	; 8018250 <__ieee754_atan2f+0x11c>
 8018192:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8018254 <__ieee754_atan2f+0x120>
 8018196:	fe67 7a87 	vselge.f32	s15, s15, s14
 801819a:	e7de      	b.n	801815a <__ieee754_atan2f+0x26>
 801819c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80181a0:	d110      	bne.n	80181c4 <__ieee754_atan2f+0x90>
 80181a2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80181a6:	f104 34ff 	add.w	r4, r4, #4294967295
 80181aa:	d107      	bne.n	80181bc <__ieee754_atan2f+0x88>
 80181ac:	2c02      	cmp	r4, #2
 80181ae:	d846      	bhi.n	801823e <__ieee754_atan2f+0x10a>
 80181b0:	4b29      	ldr	r3, [pc, #164]	; (8018258 <__ieee754_atan2f+0x124>)
 80181b2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80181b6:	edd3 7a00 	vldr	s15, [r3]
 80181ba:	e7ce      	b.n	801815a <__ieee754_atan2f+0x26>
 80181bc:	2c02      	cmp	r4, #2
 80181be:	d841      	bhi.n	8018244 <__ieee754_atan2f+0x110>
 80181c0:	4b26      	ldr	r3, [pc, #152]	; (801825c <__ieee754_atan2f+0x128>)
 80181c2:	e7f6      	b.n	80181b2 <__ieee754_atan2f+0x7e>
 80181c4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80181c8:	d0e0      	beq.n	801818c <__ieee754_atan2f+0x58>
 80181ca:	1a5b      	subs	r3, r3, r1
 80181cc:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80181d0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80181d4:	da1a      	bge.n	801820c <__ieee754_atan2f+0xd8>
 80181d6:	2a00      	cmp	r2, #0
 80181d8:	da01      	bge.n	80181de <__ieee754_atan2f+0xaa>
 80181da:	313c      	adds	r1, #60	; 0x3c
 80181dc:	db19      	blt.n	8018212 <__ieee754_atan2f+0xde>
 80181de:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80181e2:	f000 fa71 	bl	80186c8 <fabsf>
 80181e6:	f000 f99b 	bl	8018520 <atanf>
 80181ea:	eef0 7a40 	vmov.f32	s15, s0
 80181ee:	2c01      	cmp	r4, #1
 80181f0:	d012      	beq.n	8018218 <__ieee754_atan2f+0xe4>
 80181f2:	2c02      	cmp	r4, #2
 80181f4:	d017      	beq.n	8018226 <__ieee754_atan2f+0xf2>
 80181f6:	2c00      	cmp	r4, #0
 80181f8:	d0af      	beq.n	801815a <__ieee754_atan2f+0x26>
 80181fa:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8018260 <__ieee754_atan2f+0x12c>
 80181fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018202:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8018264 <__ieee754_atan2f+0x130>
 8018206:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801820a:	e7a6      	b.n	801815a <__ieee754_atan2f+0x26>
 801820c:	eddf 7a10 	vldr	s15, [pc, #64]	; 8018250 <__ieee754_atan2f+0x11c>
 8018210:	e7ed      	b.n	80181ee <__ieee754_atan2f+0xba>
 8018212:	eddf 7a15 	vldr	s15, [pc, #84]	; 8018268 <__ieee754_atan2f+0x134>
 8018216:	e7ea      	b.n	80181ee <__ieee754_atan2f+0xba>
 8018218:	ee17 3a90 	vmov	r3, s15
 801821c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018220:	ee07 3a90 	vmov	s15, r3
 8018224:	e799      	b.n	801815a <__ieee754_atan2f+0x26>
 8018226:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8018260 <__ieee754_atan2f+0x12c>
 801822a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801822e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8018264 <__ieee754_atan2f+0x130>
 8018232:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018236:	e790      	b.n	801815a <__ieee754_atan2f+0x26>
 8018238:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8018264 <__ieee754_atan2f+0x130>
 801823c:	e78d      	b.n	801815a <__ieee754_atan2f+0x26>
 801823e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801826c <__ieee754_atan2f+0x138>
 8018242:	e78a      	b.n	801815a <__ieee754_atan2f+0x26>
 8018244:	eddf 7a08 	vldr	s15, [pc, #32]	; 8018268 <__ieee754_atan2f+0x134>
 8018248:	e787      	b.n	801815a <__ieee754_atan2f+0x26>
 801824a:	bf00      	nop
 801824c:	c0490fdb 	.word	0xc0490fdb
 8018250:	3fc90fdb 	.word	0x3fc90fdb
 8018254:	bfc90fdb 	.word	0xbfc90fdb
 8018258:	0801ab28 	.word	0x0801ab28
 801825c:	0801ab34 	.word	0x0801ab34
 8018260:	33bbbd2e 	.word	0x33bbbd2e
 8018264:	40490fdb 	.word	0x40490fdb
 8018268:	00000000 	.word	0x00000000
 801826c:	3f490fdb 	.word	0x3f490fdb

08018270 <__ieee754_rem_pio2f>:
 8018270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018272:	ee10 6a10 	vmov	r6, s0
 8018276:	4b85      	ldr	r3, [pc, #532]	; (801848c <__ieee754_rem_pio2f+0x21c>)
 8018278:	b087      	sub	sp, #28
 801827a:	4604      	mov	r4, r0
 801827c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8018280:	429d      	cmp	r5, r3
 8018282:	dc05      	bgt.n	8018290 <__ieee754_rem_pio2f+0x20>
 8018284:	2300      	movs	r3, #0
 8018286:	ed80 0a00 	vstr	s0, [r0]
 801828a:	6043      	str	r3, [r0, #4]
 801828c:	2000      	movs	r0, #0
 801828e:	e020      	b.n	80182d2 <__ieee754_rem_pio2f+0x62>
 8018290:	4b7f      	ldr	r3, [pc, #508]	; (8018490 <__ieee754_rem_pio2f+0x220>)
 8018292:	429d      	cmp	r5, r3
 8018294:	dc38      	bgt.n	8018308 <__ieee754_rem_pio2f+0x98>
 8018296:	2e00      	cmp	r6, #0
 8018298:	f025 050f 	bic.w	r5, r5, #15
 801829c:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8018494 <__ieee754_rem_pio2f+0x224>
 80182a0:	4b7d      	ldr	r3, [pc, #500]	; (8018498 <__ieee754_rem_pio2f+0x228>)
 80182a2:	dd18      	ble.n	80182d6 <__ieee754_rem_pio2f+0x66>
 80182a4:	429d      	cmp	r5, r3
 80182a6:	ee70 7a47 	vsub.f32	s15, s0, s14
 80182aa:	bf09      	itett	eq
 80182ac:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 801849c <__ieee754_rem_pio2f+0x22c>
 80182b0:	ed9f 7a7b 	vldrne	s14, [pc, #492]	; 80184a0 <__ieee754_rem_pio2f+0x230>
 80182b4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80182b8:	ed9f 7a7a 	vldreq	s14, [pc, #488]	; 80184a4 <__ieee754_rem_pio2f+0x234>
 80182bc:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80182c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80182c4:	edc0 6a00 	vstr	s13, [r0]
 80182c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80182cc:	edc0 7a01 	vstr	s15, [r0, #4]
 80182d0:	2001      	movs	r0, #1
 80182d2:	b007      	add	sp, #28
 80182d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80182d6:	429d      	cmp	r5, r3
 80182d8:	ee70 7a07 	vadd.f32	s15, s0, s14
 80182dc:	bf09      	itett	eq
 80182de:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 801849c <__ieee754_rem_pio2f+0x22c>
 80182e2:	ed9f 7a6f 	vldrne	s14, [pc, #444]	; 80184a0 <__ieee754_rem_pio2f+0x230>
 80182e6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80182ea:	ed9f 7a6e 	vldreq	s14, [pc, #440]	; 80184a4 <__ieee754_rem_pio2f+0x234>
 80182ee:	ee77 6a87 	vadd.f32	s13, s15, s14
 80182f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80182f6:	edc0 6a00 	vstr	s13, [r0]
 80182fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80182fe:	edc0 7a01 	vstr	s15, [r0, #4]
 8018302:	f04f 30ff 	mov.w	r0, #4294967295
 8018306:	e7e4      	b.n	80182d2 <__ieee754_rem_pio2f+0x62>
 8018308:	4b67      	ldr	r3, [pc, #412]	; (80184a8 <__ieee754_rem_pio2f+0x238>)
 801830a:	429d      	cmp	r5, r3
 801830c:	dc70      	bgt.n	80183f0 <__ieee754_rem_pio2f+0x180>
 801830e:	f000 f9db 	bl	80186c8 <fabsf>
 8018312:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018316:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80184ac <__ieee754_rem_pio2f+0x23c>
 801831a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801831e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018322:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018326:	ee17 0a90 	vmov	r0, s15
 801832a:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8018494 <__ieee754_rem_pio2f+0x224>
 801832e:	281f      	cmp	r0, #31
 8018330:	eea7 0a67 	vfms.f32	s0, s14, s15
 8018334:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80184a0 <__ieee754_rem_pio2f+0x230>
 8018338:	eeb1 6a47 	vneg.f32	s12, s14
 801833c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018340:	ee70 6a67 	vsub.f32	s13, s0, s15
 8018344:	ee16 2a90 	vmov	r2, s13
 8018348:	dc1c      	bgt.n	8018384 <__ieee754_rem_pio2f+0x114>
 801834a:	1e47      	subs	r7, r0, #1
 801834c:	4958      	ldr	r1, [pc, #352]	; (80184b0 <__ieee754_rem_pio2f+0x240>)
 801834e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8018352:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8018356:	428b      	cmp	r3, r1
 8018358:	d014      	beq.n	8018384 <__ieee754_rem_pio2f+0x114>
 801835a:	6022      	str	r2, [r4, #0]
 801835c:	ed94 7a00 	vldr	s14, [r4]
 8018360:	2e00      	cmp	r6, #0
 8018362:	ee30 0a47 	vsub.f32	s0, s0, s14
 8018366:	ee30 0a67 	vsub.f32	s0, s0, s15
 801836a:	ed84 0a01 	vstr	s0, [r4, #4]
 801836e:	dab0      	bge.n	80182d2 <__ieee754_rem_pio2f+0x62>
 8018370:	eeb1 7a47 	vneg.f32	s14, s14
 8018374:	eeb1 0a40 	vneg.f32	s0, s0
 8018378:	ed84 7a00 	vstr	s14, [r4]
 801837c:	ed84 0a01 	vstr	s0, [r4, #4]
 8018380:	4240      	negs	r0, r0
 8018382:	e7a6      	b.n	80182d2 <__ieee754_rem_pio2f+0x62>
 8018384:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8018388:	15eb      	asrs	r3, r5, #23
 801838a:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 801838e:	2908      	cmp	r1, #8
 8018390:	dde3      	ble.n	801835a <__ieee754_rem_pio2f+0xea>
 8018392:	eef0 6a40 	vmov.f32	s13, s0
 8018396:	eddf 5a41 	vldr	s11, [pc, #260]	; 801849c <__ieee754_rem_pio2f+0x22c>
 801839a:	eee6 6a25 	vfma.f32	s13, s12, s11
 801839e:	ee70 7a66 	vsub.f32	s15, s0, s13
 80183a2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80183a6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80184a4 <__ieee754_rem_pio2f+0x234>
 80183aa:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80183ae:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80183b2:	ee15 2a90 	vmov	r2, s11
 80183b6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80183ba:	1a5b      	subs	r3, r3, r1
 80183bc:	2b19      	cmp	r3, #25
 80183be:	dc04      	bgt.n	80183ca <__ieee754_rem_pio2f+0x15a>
 80183c0:	eeb0 0a66 	vmov.f32	s0, s13
 80183c4:	edc4 5a00 	vstr	s11, [r4]
 80183c8:	e7c8      	b.n	801835c <__ieee754_rem_pio2f+0xec>
 80183ca:	eeb0 0a66 	vmov.f32	s0, s13
 80183ce:	eddf 5a39 	vldr	s11, [pc, #228]	; 80184b4 <__ieee754_rem_pio2f+0x244>
 80183d2:	eea6 0a25 	vfma.f32	s0, s12, s11
 80183d6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80183da:	eddf 6a37 	vldr	s13, [pc, #220]	; 80184b8 <__ieee754_rem_pio2f+0x248>
 80183de:	eee6 7a25 	vfma.f32	s15, s12, s11
 80183e2:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80183e6:	ee30 7a67 	vsub.f32	s14, s0, s15
 80183ea:	ed84 7a00 	vstr	s14, [r4]
 80183ee:	e7b5      	b.n	801835c <__ieee754_rem_pio2f+0xec>
 80183f0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80183f4:	db06      	blt.n	8018404 <__ieee754_rem_pio2f+0x194>
 80183f6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80183fa:	edc0 7a01 	vstr	s15, [r0, #4]
 80183fe:	edc0 7a00 	vstr	s15, [r0]
 8018402:	e743      	b.n	801828c <__ieee754_rem_pio2f+0x1c>
 8018404:	15ea      	asrs	r2, r5, #23
 8018406:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80184bc <__ieee754_rem_pio2f+0x24c>
 801840a:	3a86      	subs	r2, #134	; 0x86
 801840c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8018410:	ee07 3a90 	vmov	s15, r3
 8018414:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8018418:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801841c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018420:	ed8d 7a03 	vstr	s14, [sp, #12]
 8018424:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018428:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801842c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018430:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018434:	ed8d 7a04 	vstr	s14, [sp, #16]
 8018438:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801843c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018440:	edcd 7a05 	vstr	s15, [sp, #20]
 8018444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018448:	d11e      	bne.n	8018488 <__ieee754_rem_pio2f+0x218>
 801844a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801844e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018452:	bf14      	ite	ne
 8018454:	2302      	movne	r3, #2
 8018456:	2301      	moveq	r3, #1
 8018458:	4919      	ldr	r1, [pc, #100]	; (80184c0 <__ieee754_rem_pio2f+0x250>)
 801845a:	a803      	add	r0, sp, #12
 801845c:	9101      	str	r1, [sp, #4]
 801845e:	2102      	movs	r1, #2
 8018460:	9100      	str	r1, [sp, #0]
 8018462:	4621      	mov	r1, r4
 8018464:	f000 f93e 	bl	80186e4 <__kernel_rem_pio2f>
 8018468:	2e00      	cmp	r6, #0
 801846a:	f6bf af32 	bge.w	80182d2 <__ieee754_rem_pio2f+0x62>
 801846e:	edd4 7a00 	vldr	s15, [r4]
 8018472:	eef1 7a67 	vneg.f32	s15, s15
 8018476:	edc4 7a00 	vstr	s15, [r4]
 801847a:	edd4 7a01 	vldr	s15, [r4, #4]
 801847e:	eef1 7a67 	vneg.f32	s15, s15
 8018482:	edc4 7a01 	vstr	s15, [r4, #4]
 8018486:	e77b      	b.n	8018380 <__ieee754_rem_pio2f+0x110>
 8018488:	2303      	movs	r3, #3
 801848a:	e7e5      	b.n	8018458 <__ieee754_rem_pio2f+0x1e8>
 801848c:	3f490fd8 	.word	0x3f490fd8
 8018490:	4016cbe3 	.word	0x4016cbe3
 8018494:	3fc90f80 	.word	0x3fc90f80
 8018498:	3fc90fd0 	.word	0x3fc90fd0
 801849c:	37354400 	.word	0x37354400
 80184a0:	37354443 	.word	0x37354443
 80184a4:	2e85a308 	.word	0x2e85a308
 80184a8:	43490f80 	.word	0x43490f80
 80184ac:	3f22f984 	.word	0x3f22f984
 80184b0:	0801ab40 	.word	0x0801ab40
 80184b4:	2e85a300 	.word	0x2e85a300
 80184b8:	248d3132 	.word	0x248d3132
 80184bc:	43800000 	.word	0x43800000
 80184c0:	0801abc0 	.word	0x0801abc0

080184c4 <logf>:
 80184c4:	b508      	push	{r3, lr}
 80184c6:	ed2d 8b02 	vpush	{d8}
 80184ca:	eeb0 8a40 	vmov.f32	s16, s0
 80184ce:	f000 fb7d 	bl	8018bcc <__ieee754_logf>
 80184d2:	eeb4 8a48 	vcmp.f32	s16, s16
 80184d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184da:	d60f      	bvs.n	80184fc <logf+0x38>
 80184dc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80184e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184e4:	dc0a      	bgt.n	80184fc <logf+0x38>
 80184e6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80184ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184ee:	d108      	bne.n	8018502 <logf+0x3e>
 80184f0:	f000 ffb4 	bl	801945c <__errno>
 80184f4:	2322      	movs	r3, #34	; 0x22
 80184f6:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8018518 <logf+0x54>
 80184fa:	6003      	str	r3, [r0, #0]
 80184fc:	ecbd 8b02 	vpop	{d8}
 8018500:	bd08      	pop	{r3, pc}
 8018502:	f000 ffab 	bl	801945c <__errno>
 8018506:	2321      	movs	r3, #33	; 0x21
 8018508:	ecbd 8b02 	vpop	{d8}
 801850c:	6003      	str	r3, [r0, #0]
 801850e:	4803      	ldr	r0, [pc, #12]	; (801851c <logf+0x58>)
 8018510:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018514:	f000 b8e0 	b.w	80186d8 <nanf>
 8018518:	ff800000 	.word	0xff800000
 801851c:	0801afda 	.word	0x0801afda

08018520 <atanf>:
 8018520:	b538      	push	{r3, r4, r5, lr}
 8018522:	ee10 5a10 	vmov	r5, s0
 8018526:	eef0 7a40 	vmov.f32	s15, s0
 801852a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801852e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8018532:	db0f      	blt.n	8018554 <atanf+0x34>
 8018534:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8018538:	dd04      	ble.n	8018544 <atanf+0x24>
 801853a:	ee70 7a00 	vadd.f32	s15, s0, s0
 801853e:	eeb0 0a67 	vmov.f32	s0, s15
 8018542:	bd38      	pop	{r3, r4, r5, pc}
 8018544:	2d00      	cmp	r5, #0
 8018546:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801867c <atanf+0x15c>
 801854a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8018680 <atanf+0x160>
 801854e:	fe77 7a87 	vselgt.f32	s15, s15, s14
 8018552:	e7f4      	b.n	801853e <atanf+0x1e>
 8018554:	4b4b      	ldr	r3, [pc, #300]	; (8018684 <atanf+0x164>)
 8018556:	429c      	cmp	r4, r3
 8018558:	dc10      	bgt.n	801857c <atanf+0x5c>
 801855a:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801855e:	da0a      	bge.n	8018576 <atanf+0x56>
 8018560:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8018688 <atanf+0x168>
 8018564:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018568:	ee30 7a07 	vadd.f32	s14, s0, s14
 801856c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8018570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018574:	dce3      	bgt.n	801853e <atanf+0x1e>
 8018576:	f04f 33ff 	mov.w	r3, #4294967295
 801857a:	e013      	b.n	80185a4 <atanf+0x84>
 801857c:	f000 f8a4 	bl	80186c8 <fabsf>
 8018580:	4b42      	ldr	r3, [pc, #264]	; (801868c <atanf+0x16c>)
 8018582:	429c      	cmp	r4, r3
 8018584:	dc4f      	bgt.n	8018626 <atanf+0x106>
 8018586:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801858a:	429c      	cmp	r4, r3
 801858c:	dc41      	bgt.n	8018612 <atanf+0xf2>
 801858e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8018592:	2300      	movs	r3, #0
 8018594:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8018598:	eea0 7a27 	vfma.f32	s14, s0, s15
 801859c:	ee30 0a27 	vadd.f32	s0, s0, s15
 80185a0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80185a4:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8018690 <atanf+0x170>
 80185a8:	1c5a      	adds	r2, r3, #1
 80185aa:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8018694 <atanf+0x174>
 80185ae:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8018698 <atanf+0x178>
 80185b2:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80185b6:	ee66 6a06 	vmul.f32	s13, s12, s12
 80185ba:	eee6 5a87 	vfma.f32	s11, s13, s14
 80185be:	ed9f 7a37 	vldr	s14, [pc, #220]	; 801869c <atanf+0x17c>
 80185c2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80185c6:	eddf 5a36 	vldr	s11, [pc, #216]	; 80186a0 <atanf+0x180>
 80185ca:	eee7 5a26 	vfma.f32	s11, s14, s13
 80185ce:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80186a4 <atanf+0x184>
 80185d2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80185d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80186a8 <atanf+0x188>
 80185da:	eee7 5a26 	vfma.f32	s11, s14, s13
 80185de:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80186ac <atanf+0x18c>
 80185e2:	eea6 5a87 	vfma.f32	s10, s13, s14
 80185e6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80186b0 <atanf+0x190>
 80185ea:	eea5 7a26 	vfma.f32	s14, s10, s13
 80185ee:	ed9f 5a31 	vldr	s10, [pc, #196]	; 80186b4 <atanf+0x194>
 80185f2:	eea7 5a26 	vfma.f32	s10, s14, s13
 80185f6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80186b8 <atanf+0x198>
 80185fa:	eea5 7a26 	vfma.f32	s14, s10, s13
 80185fe:	ee27 7a26 	vmul.f32	s14, s14, s13
 8018602:	eea5 7a86 	vfma.f32	s14, s11, s12
 8018606:	ee27 7a87 	vmul.f32	s14, s15, s14
 801860a:	d121      	bne.n	8018650 <atanf+0x130>
 801860c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018610:	e795      	b.n	801853e <atanf+0x1e>
 8018612:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018616:	2301      	movs	r3, #1
 8018618:	ee30 7a67 	vsub.f32	s14, s0, s15
 801861c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8018620:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018624:	e7be      	b.n	80185a4 <atanf+0x84>
 8018626:	4b25      	ldr	r3, [pc, #148]	; (80186bc <atanf+0x19c>)
 8018628:	429c      	cmp	r4, r3
 801862a:	dc0b      	bgt.n	8018644 <atanf+0x124>
 801862c:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8018630:	2302      	movs	r3, #2
 8018632:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018636:	ee70 6a67 	vsub.f32	s13, s0, s15
 801863a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801863e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018642:	e7af      	b.n	80185a4 <atanf+0x84>
 8018644:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8018648:	2303      	movs	r3, #3
 801864a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801864e:	e7a9      	b.n	80185a4 <atanf+0x84>
 8018650:	4a1b      	ldr	r2, [pc, #108]	; (80186c0 <atanf+0x1a0>)
 8018652:	2d00      	cmp	r5, #0
 8018654:	491b      	ldr	r1, [pc, #108]	; (80186c4 <atanf+0x1a4>)
 8018656:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801865a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801865e:	edd3 6a00 	vldr	s13, [r3]
 8018662:	ee37 7a66 	vsub.f32	s14, s14, s13
 8018666:	ee37 7a67 	vsub.f32	s14, s14, s15
 801866a:	edd2 7a00 	vldr	s15, [r2]
 801866e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018672:	bfb8      	it	lt
 8018674:	eef1 7a67 	vneglt.f32	s15, s15
 8018678:	e761      	b.n	801853e <atanf+0x1e>
 801867a:	bf00      	nop
 801867c:	3fc90fdb 	.word	0x3fc90fdb
 8018680:	bfc90fdb 	.word	0xbfc90fdb
 8018684:	3edfffff 	.word	0x3edfffff
 8018688:	7149f2ca 	.word	0x7149f2ca
 801868c:	3f97ffff 	.word	0x3f97ffff
 8018690:	3c8569d7 	.word	0x3c8569d7
 8018694:	3d4bda59 	.word	0x3d4bda59
 8018698:	bd6ef16b 	.word	0xbd6ef16b
 801869c:	3d886b35 	.word	0x3d886b35
 80186a0:	3dba2e6e 	.word	0x3dba2e6e
 80186a4:	3e124925 	.word	0x3e124925
 80186a8:	3eaaaaab 	.word	0x3eaaaaab
 80186ac:	bd15a221 	.word	0xbd15a221
 80186b0:	bd9d8795 	.word	0xbd9d8795
 80186b4:	bde38e38 	.word	0xbde38e38
 80186b8:	be4ccccd 	.word	0xbe4ccccd
 80186bc:	401bffff 	.word	0x401bffff
 80186c0:	0801aed8 	.word	0x0801aed8
 80186c4:	0801aee8 	.word	0x0801aee8

080186c8 <fabsf>:
 80186c8:	ee10 3a10 	vmov	r3, s0
 80186cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80186d0:	ee00 3a10 	vmov	s0, r3
 80186d4:	4770      	bx	lr
	...

080186d8 <nanf>:
 80186d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80186e0 <nanf+0x8>
 80186dc:	4770      	bx	lr
 80186de:	bf00      	nop
 80186e0:	7fc00000 	.word	0x7fc00000

080186e4 <__kernel_rem_pio2f>:
 80186e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186e8:	ed2d 8b04 	vpush	{d8-d9}
 80186ec:	b0d9      	sub	sp, #356	; 0x164
 80186ee:	4688      	mov	r8, r1
 80186f0:	49b9      	ldr	r1, [pc, #740]	; (80189d8 <__kernel_rem_pio2f+0x2f4>)
 80186f2:	9002      	str	r0, [sp, #8]
 80186f4:	9866      	ldr	r0, [sp, #408]	; 0x198
 80186f6:	9301      	str	r3, [sp, #4]
 80186f8:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80186fc:	9901      	ldr	r1, [sp, #4]
 80186fe:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8018700:	f101 3bff 	add.w	fp, r1, #4294967295
 8018704:	1d11      	adds	r1, r2, #4
 8018706:	db25      	blt.n	8018754 <__kernel_rem_pio2f+0x70>
 8018708:	1ed0      	subs	r0, r2, #3
 801870a:	bf48      	it	mi
 801870c:	1d10      	addmi	r0, r2, #4
 801870e:	10c0      	asrs	r0, r0, #3
 8018710:	1c45      	adds	r5, r0, #1
 8018712:	eba0 070b 	sub.w	r7, r0, fp
 8018716:	eb0a 0c0b 	add.w	ip, sl, fp
 801871a:	ae1c      	add	r6, sp, #112	; 0x70
 801871c:	00e9      	lsls	r1, r5, #3
 801871e:	2400      	movs	r4, #0
 8018720:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8018724:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 80189e8 <__kernel_rem_pio2f+0x304>
 8018728:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 801872c:	9103      	str	r1, [sp, #12]
 801872e:	4564      	cmp	r4, ip
 8018730:	dd12      	ble.n	8018758 <__kernel_rem_pio2f+0x74>
 8018732:	ac1c      	add	r4, sp, #112	; 0x70
 8018734:	9901      	ldr	r1, [sp, #4]
 8018736:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801873a:	f04f 0c00 	mov.w	ip, #0
 801873e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8018742:	45d4      	cmp	ip, sl
 8018744:	dc29      	bgt.n	801879a <__kernel_rem_pio2f+0xb6>
 8018746:	f8dd e008 	ldr.w	lr, [sp, #8]
 801874a:	4627      	mov	r7, r4
 801874c:	eddf 7aa6 	vldr	s15, [pc, #664]	; 80189e8 <__kernel_rem_pio2f+0x304>
 8018750:	2600      	movs	r6, #0
 8018752:	e018      	b.n	8018786 <__kernel_rem_pio2f+0xa2>
 8018754:	2000      	movs	r0, #0
 8018756:	e7db      	b.n	8018710 <__kernel_rem_pio2f+0x2c>
 8018758:	42e7      	cmn	r7, r4
 801875a:	bf54      	ite	pl
 801875c:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8018760:	eef0 7a47 	vmovmi.f32	s15, s14
 8018764:	f104 0401 	add.w	r4, r4, #1
 8018768:	bf5c      	itt	pl
 801876a:	ee07 1a90 	vmovpl	s15, r1
 801876e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8018772:	ece6 7a01 	vstmia	r6!, {s15}
 8018776:	e7da      	b.n	801872e <__kernel_rem_pio2f+0x4a>
 8018778:	ecfe 6a01 	vldmia	lr!, {s13}
 801877c:	3601      	adds	r6, #1
 801877e:	ed97 7a00 	vldr	s14, [r7]
 8018782:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018786:	455e      	cmp	r6, fp
 8018788:	f1a7 0704 	sub.w	r7, r7, #4
 801878c:	ddf4      	ble.n	8018778 <__kernel_rem_pio2f+0x94>
 801878e:	f10c 0c01 	add.w	ip, ip, #1
 8018792:	3404      	adds	r4, #4
 8018794:	ece9 7a01 	vstmia	r9!, {s15}
 8018798:	e7d3      	b.n	8018742 <__kernel_rem_pio2f+0x5e>
 801879a:	a908      	add	r1, sp, #32
 801879c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80187a0:	4656      	mov	r6, sl
 80187a2:	eddf 8a90 	vldr	s17, [pc, #576]	; 80189e4 <__kernel_rem_pio2f+0x300>
 80187a6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80187aa:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 80189e0 <__kernel_rem_pio2f+0x2fc>
 80187ae:	9304      	str	r3, [sp, #16]
 80187b0:	9105      	str	r1, [sp, #20]
 80187b2:	00b3      	lsls	r3, r6, #2
 80187b4:	ac08      	add	r4, sp, #32
 80187b6:	4637      	mov	r7, r6
 80187b8:	9306      	str	r3, [sp, #24]
 80187ba:	ab58      	add	r3, sp, #352	; 0x160
 80187bc:	46a4      	mov	ip, r4
 80187be:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80187c2:	ab44      	add	r3, sp, #272	; 0x110
 80187c4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80187c8:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80187cc:	2f00      	cmp	r7, #0
 80187ce:	f1a0 0004 	sub.w	r0, r0, #4
 80187d2:	dc4a      	bgt.n	801886a <__kernel_rem_pio2f+0x186>
 80187d4:	4628      	mov	r0, r5
 80187d6:	9207      	str	r2, [sp, #28]
 80187d8:	f000 fae8 	bl	8018dac <scalbnf>
 80187dc:	eeb0 8a40 	vmov.f32	s16, s0
 80187e0:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80187e4:	ee28 0a00 	vmul.f32	s0, s16, s0
 80187e8:	f000 fb44 	bl	8018e74 <floorf>
 80187ec:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80187f0:	2d00      	cmp	r5, #0
 80187f2:	9a07      	ldr	r2, [sp, #28]
 80187f4:	eea0 8a67 	vfms.f32	s16, s0, s15
 80187f8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80187fc:	ee17 9a90 	vmov	r9, s15
 8018800:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018804:	ee38 8a67 	vsub.f32	s16, s16, s15
 8018808:	dd41      	ble.n	801888e <__kernel_rem_pio2f+0x1aa>
 801880a:	f106 3cff 	add.w	ip, r6, #4294967295
 801880e:	ab08      	add	r3, sp, #32
 8018810:	f1c5 0e08 	rsb	lr, r5, #8
 8018814:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8018818:	fa47 f00e 	asr.w	r0, r7, lr
 801881c:	4481      	add	r9, r0
 801881e:	fa00 f00e 	lsl.w	r0, r0, lr
 8018822:	1a3f      	subs	r7, r7, r0
 8018824:	f1c5 0007 	rsb	r0, r5, #7
 8018828:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801882c:	4107      	asrs	r7, r0
 801882e:	2f00      	cmp	r7, #0
 8018830:	dd3c      	ble.n	80188ac <__kernel_rem_pio2f+0x1c8>
 8018832:	f04f 0e00 	mov.w	lr, #0
 8018836:	f109 0901 	add.w	r9, r9, #1
 801883a:	4671      	mov	r1, lr
 801883c:	4576      	cmp	r6, lr
 801883e:	dc67      	bgt.n	8018910 <__kernel_rem_pio2f+0x22c>
 8018840:	2d00      	cmp	r5, #0
 8018842:	dd03      	ble.n	801884c <__kernel_rem_pio2f+0x168>
 8018844:	2d01      	cmp	r5, #1
 8018846:	d074      	beq.n	8018932 <__kernel_rem_pio2f+0x24e>
 8018848:	2d02      	cmp	r5, #2
 801884a:	d07b      	beq.n	8018944 <__kernel_rem_pio2f+0x260>
 801884c:	2f02      	cmp	r7, #2
 801884e:	d12d      	bne.n	80188ac <__kernel_rem_pio2f+0x1c8>
 8018850:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8018854:	ee30 8a48 	vsub.f32	s16, s0, s16
 8018858:	b341      	cbz	r1, 80188ac <__kernel_rem_pio2f+0x1c8>
 801885a:	4628      	mov	r0, r5
 801885c:	9207      	str	r2, [sp, #28]
 801885e:	f000 faa5 	bl	8018dac <scalbnf>
 8018862:	9a07      	ldr	r2, [sp, #28]
 8018864:	ee38 8a40 	vsub.f32	s16, s16, s0
 8018868:	e020      	b.n	80188ac <__kernel_rem_pio2f+0x1c8>
 801886a:	ee60 7a28 	vmul.f32	s15, s0, s17
 801886e:	3f01      	subs	r7, #1
 8018870:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018878:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801887c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8018880:	ecac 0a01 	vstmia	ip!, {s0}
 8018884:	ed90 0a00 	vldr	s0, [r0]
 8018888:	ee37 0a80 	vadd.f32	s0, s15, s0
 801888c:	e79e      	b.n	80187cc <__kernel_rem_pio2f+0xe8>
 801888e:	d105      	bne.n	801889c <__kernel_rem_pio2f+0x1b8>
 8018890:	1e70      	subs	r0, r6, #1
 8018892:	ab08      	add	r3, sp, #32
 8018894:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8018898:	11ff      	asrs	r7, r7, #7
 801889a:	e7c8      	b.n	801882e <__kernel_rem_pio2f+0x14a>
 801889c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80188a0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80188a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188a8:	da30      	bge.n	801890c <__kernel_rem_pio2f+0x228>
 80188aa:	2700      	movs	r7, #0
 80188ac:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80188b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188b4:	f040 809a 	bne.w	80189ec <__kernel_rem_pio2f+0x308>
 80188b8:	1e74      	subs	r4, r6, #1
 80188ba:	2100      	movs	r1, #0
 80188bc:	46a4      	mov	ip, r4
 80188be:	45d4      	cmp	ip, sl
 80188c0:	da47      	bge.n	8018952 <__kernel_rem_pio2f+0x26e>
 80188c2:	2900      	cmp	r1, #0
 80188c4:	d063      	beq.n	801898e <__kernel_rem_pio2f+0x2aa>
 80188c6:	ab08      	add	r3, sp, #32
 80188c8:	3d08      	subs	r5, #8
 80188ca:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d07f      	beq.n	80189d2 <__kernel_rem_pio2f+0x2ee>
 80188d2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80188d6:	4628      	mov	r0, r5
 80188d8:	f000 fa68 	bl	8018dac <scalbnf>
 80188dc:	1c63      	adds	r3, r4, #1
 80188de:	aa44      	add	r2, sp, #272	; 0x110
 80188e0:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80189e4 <__kernel_rem_pio2f+0x300>
 80188e4:	0099      	lsls	r1, r3, #2
 80188e6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80188ea:	4623      	mov	r3, r4
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	f280 80ad 	bge.w	8018a4c <__kernel_rem_pio2f+0x368>
 80188f2:	4623      	mov	r3, r4
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	f2c0 80cb 	blt.w	8018a90 <__kernel_rem_pio2f+0x3ac>
 80188fa:	aa44      	add	r2, sp, #272	; 0x110
 80188fc:	4e37      	ldr	r6, [pc, #220]	; (80189dc <__kernel_rem_pio2f+0x2f8>)
 80188fe:	eddf 7a3a 	vldr	s15, [pc, #232]	; 80189e8 <__kernel_rem_pio2f+0x304>
 8018902:	2000      	movs	r0, #0
 8018904:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8018908:	1ae2      	subs	r2, r4, r3
 801890a:	e0b6      	b.n	8018a7a <__kernel_rem_pio2f+0x396>
 801890c:	2702      	movs	r7, #2
 801890e:	e790      	b.n	8018832 <__kernel_rem_pio2f+0x14e>
 8018910:	6820      	ldr	r0, [r4, #0]
 8018912:	b949      	cbnz	r1, 8018928 <__kernel_rem_pio2f+0x244>
 8018914:	b118      	cbz	r0, 801891e <__kernel_rem_pio2f+0x23a>
 8018916:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801891a:	6020      	str	r0, [r4, #0]
 801891c:	2001      	movs	r0, #1
 801891e:	f10e 0e01 	add.w	lr, lr, #1
 8018922:	3404      	adds	r4, #4
 8018924:	4601      	mov	r1, r0
 8018926:	e789      	b.n	801883c <__kernel_rem_pio2f+0x158>
 8018928:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801892c:	6020      	str	r0, [r4, #0]
 801892e:	4608      	mov	r0, r1
 8018930:	e7f5      	b.n	801891e <__kernel_rem_pio2f+0x23a>
 8018932:	1e74      	subs	r4, r6, #1
 8018934:	ab08      	add	r3, sp, #32
 8018936:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801893a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801893e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8018942:	e783      	b.n	801884c <__kernel_rem_pio2f+0x168>
 8018944:	1e74      	subs	r4, r6, #1
 8018946:	ab08      	add	r3, sp, #32
 8018948:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801894c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8018950:	e7f5      	b.n	801893e <__kernel_rem_pio2f+0x25a>
 8018952:	ab08      	add	r3, sp, #32
 8018954:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8018958:	f10c 3cff 	add.w	ip, ip, #4294967295
 801895c:	4301      	orrs	r1, r0
 801895e:	e7ae      	b.n	80188be <__kernel_rem_pio2f+0x1da>
 8018960:	3001      	adds	r0, #1
 8018962:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8018966:	2f00      	cmp	r7, #0
 8018968:	d0fa      	beq.n	8018960 <__kernel_rem_pio2f+0x27c>
 801896a:	9b06      	ldr	r3, [sp, #24]
 801896c:	f106 0c01 	add.w	ip, r6, #1
 8018970:	4430      	add	r0, r6
 8018972:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8018976:	eb0d 0403 	add.w	r4, sp, r3
 801897a:	9b01      	ldr	r3, [sp, #4]
 801897c:	18f7      	adds	r7, r6, r3
 801897e:	ab1c      	add	r3, sp, #112	; 0x70
 8018980:	3c4c      	subs	r4, #76	; 0x4c
 8018982:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018986:	4560      	cmp	r0, ip
 8018988:	da04      	bge.n	8018994 <__kernel_rem_pio2f+0x2b0>
 801898a:	4606      	mov	r6, r0
 801898c:	e711      	b.n	80187b2 <__kernel_rem_pio2f+0xce>
 801898e:	9c05      	ldr	r4, [sp, #20]
 8018990:	2001      	movs	r0, #1
 8018992:	e7e6      	b.n	8018962 <__kernel_rem_pio2f+0x27e>
 8018994:	9b04      	ldr	r3, [sp, #16]
 8018996:	2600      	movs	r6, #0
 8018998:	f8dd e008 	ldr.w	lr, [sp, #8]
 801899c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80189a0:	ee07 3a90 	vmov	s15, r3
 80189a4:	9306      	str	r3, [sp, #24]
 80189a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80189aa:	ece7 7a01 	vstmia	r7!, {s15}
 80189ae:	46b9      	mov	r9, r7
 80189b0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80189e8 <__kernel_rem_pio2f+0x304>
 80189b4:	455e      	cmp	r6, fp
 80189b6:	dd04      	ble.n	80189c2 <__kernel_rem_pio2f+0x2de>
 80189b8:	f10c 0c01 	add.w	ip, ip, #1
 80189bc:	ece4 7a01 	vstmia	r4!, {s15}
 80189c0:	e7e1      	b.n	8018986 <__kernel_rem_pio2f+0x2a2>
 80189c2:	ecfe 6a01 	vldmia	lr!, {s13}
 80189c6:	3601      	adds	r6, #1
 80189c8:	ed39 7a01 	vldmdb	r9!, {s14}
 80189cc:	eee6 7a87 	vfma.f32	s15, s13, s14
 80189d0:	e7f0      	b.n	80189b4 <__kernel_rem_pio2f+0x2d0>
 80189d2:	3c01      	subs	r4, #1
 80189d4:	e777      	b.n	80188c6 <__kernel_rem_pio2f+0x1e2>
 80189d6:	bf00      	nop
 80189d8:	0801af24 	.word	0x0801af24
 80189dc:	0801aef8 	.word	0x0801aef8
 80189e0:	43800000 	.word	0x43800000
 80189e4:	3b800000 	.word	0x3b800000
 80189e8:	00000000 	.word	0x00000000
 80189ec:	9b03      	ldr	r3, [sp, #12]
 80189ee:	eeb0 0a48 	vmov.f32	s0, s16
 80189f2:	1a98      	subs	r0, r3, r2
 80189f4:	f000 f9da 	bl	8018dac <scalbnf>
 80189f8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80189e0 <__kernel_rem_pio2f+0x2fc>
 80189fc:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8018a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a04:	db19      	blt.n	8018a3a <__kernel_rem_pio2f+0x356>
 8018a06:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80189e4 <__kernel_rem_pio2f+0x300>
 8018a0a:	aa08      	add	r2, sp, #32
 8018a0c:	1c74      	adds	r4, r6, #1
 8018a0e:	3508      	adds	r5, #8
 8018a10:	ee60 7a27 	vmul.f32	s15, s0, s15
 8018a14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018a18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018a1c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8018a20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018a24:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8018a28:	ee10 3a10 	vmov	r3, s0
 8018a2c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8018a30:	ee17 3a90 	vmov	r3, s15
 8018a34:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8018a38:	e74b      	b.n	80188d2 <__kernel_rem_pio2f+0x1ee>
 8018a3a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8018a3e:	aa08      	add	r2, sp, #32
 8018a40:	4634      	mov	r4, r6
 8018a42:	ee10 3a10 	vmov	r3, s0
 8018a46:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8018a4a:	e742      	b.n	80188d2 <__kernel_rem_pio2f+0x1ee>
 8018a4c:	a808      	add	r0, sp, #32
 8018a4e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8018a52:	3b01      	subs	r3, #1
 8018a54:	ee07 0a90 	vmov	s15, r0
 8018a58:	9001      	str	r0, [sp, #4]
 8018a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018a5e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8018a62:	ee20 0a07 	vmul.f32	s0, s0, s14
 8018a66:	ed62 7a01 	vstmdb	r2!, {s15}
 8018a6a:	e73f      	b.n	80188ec <__kernel_rem_pio2f+0x208>
 8018a6c:	ecf6 6a01 	vldmia	r6!, {s13}
 8018a70:	3001      	adds	r0, #1
 8018a72:	ecb5 7a01 	vldmia	r5!, {s14}
 8018a76:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018a7a:	4550      	cmp	r0, sl
 8018a7c:	dc01      	bgt.n	8018a82 <__kernel_rem_pio2f+0x39e>
 8018a7e:	4290      	cmp	r0, r2
 8018a80:	ddf4      	ble.n	8018a6c <__kernel_rem_pio2f+0x388>
 8018a82:	a858      	add	r0, sp, #352	; 0x160
 8018a84:	3b01      	subs	r3, #1
 8018a86:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8018a8a:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8018a8e:	e731      	b.n	80188f4 <__kernel_rem_pio2f+0x210>
 8018a90:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8018a92:	2b02      	cmp	r3, #2
 8018a94:	dc09      	bgt.n	8018aaa <__kernel_rem_pio2f+0x3c6>
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	dc2b      	bgt.n	8018af2 <__kernel_rem_pio2f+0x40e>
 8018a9a:	d044      	beq.n	8018b26 <__kernel_rem_pio2f+0x442>
 8018a9c:	f009 0007 	and.w	r0, r9, #7
 8018aa0:	b059      	add	sp, #356	; 0x164
 8018aa2:	ecbd 8b04 	vpop	{d8-d9}
 8018aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018aaa:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8018aac:	2b03      	cmp	r3, #3
 8018aae:	d1f5      	bne.n	8018a9c <__kernel_rem_pio2f+0x3b8>
 8018ab0:	aa30      	add	r2, sp, #192	; 0xc0
 8018ab2:	1f0b      	subs	r3, r1, #4
 8018ab4:	4620      	mov	r0, r4
 8018ab6:	4413      	add	r3, r2
 8018ab8:	461a      	mov	r2, r3
 8018aba:	2800      	cmp	r0, #0
 8018abc:	f1a2 0204 	sub.w	r2, r2, #4
 8018ac0:	dc52      	bgt.n	8018b68 <__kernel_rem_pio2f+0x484>
 8018ac2:	4622      	mov	r2, r4
 8018ac4:	2a01      	cmp	r2, #1
 8018ac6:	f1a3 0304 	sub.w	r3, r3, #4
 8018aca:	dc5d      	bgt.n	8018b88 <__kernel_rem_pio2f+0x4a4>
 8018acc:	ab30      	add	r3, sp, #192	; 0xc0
 8018ace:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80189e8 <__kernel_rem_pio2f+0x304>
 8018ad2:	440b      	add	r3, r1
 8018ad4:	2c01      	cmp	r4, #1
 8018ad6:	dc67      	bgt.n	8018ba8 <__kernel_rem_pio2f+0x4c4>
 8018ad8:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8018adc:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8018ae0:	2f00      	cmp	r7, #0
 8018ae2:	d167      	bne.n	8018bb4 <__kernel_rem_pio2f+0x4d0>
 8018ae4:	edc8 6a00 	vstr	s13, [r8]
 8018ae8:	ed88 7a01 	vstr	s14, [r8, #4]
 8018aec:	edc8 7a02 	vstr	s15, [r8, #8]
 8018af0:	e7d4      	b.n	8018a9c <__kernel_rem_pio2f+0x3b8>
 8018af2:	ab30      	add	r3, sp, #192	; 0xc0
 8018af4:	4622      	mov	r2, r4
 8018af6:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 80189e8 <__kernel_rem_pio2f+0x304>
 8018afa:	440b      	add	r3, r1
 8018afc:	2a00      	cmp	r2, #0
 8018afe:	da24      	bge.n	8018b4a <__kernel_rem_pio2f+0x466>
 8018b00:	b34f      	cbz	r7, 8018b56 <__kernel_rem_pio2f+0x472>
 8018b02:	eef1 7a47 	vneg.f32	s15, s14
 8018b06:	edc8 7a00 	vstr	s15, [r8]
 8018b0a:	aa31      	add	r2, sp, #196	; 0xc4
 8018b0c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8018b10:	2301      	movs	r3, #1
 8018b12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018b16:	429c      	cmp	r4, r3
 8018b18:	da20      	bge.n	8018b5c <__kernel_rem_pio2f+0x478>
 8018b1a:	b10f      	cbz	r7, 8018b20 <__kernel_rem_pio2f+0x43c>
 8018b1c:	eef1 7a67 	vneg.f32	s15, s15
 8018b20:	edc8 7a01 	vstr	s15, [r8, #4]
 8018b24:	e7ba      	b.n	8018a9c <__kernel_rem_pio2f+0x3b8>
 8018b26:	ab30      	add	r3, sp, #192	; 0xc0
 8018b28:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 80189e8 <__kernel_rem_pio2f+0x304>
 8018b2c:	440b      	add	r3, r1
 8018b2e:	2c00      	cmp	r4, #0
 8018b30:	da05      	bge.n	8018b3e <__kernel_rem_pio2f+0x45a>
 8018b32:	b10f      	cbz	r7, 8018b38 <__kernel_rem_pio2f+0x454>
 8018b34:	eef1 7a67 	vneg.f32	s15, s15
 8018b38:	edc8 7a00 	vstr	s15, [r8]
 8018b3c:	e7ae      	b.n	8018a9c <__kernel_rem_pio2f+0x3b8>
 8018b3e:	ed33 7a01 	vldmdb	r3!, {s14}
 8018b42:	3c01      	subs	r4, #1
 8018b44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018b48:	e7f1      	b.n	8018b2e <__kernel_rem_pio2f+0x44a>
 8018b4a:	ed73 7a01 	vldmdb	r3!, {s15}
 8018b4e:	3a01      	subs	r2, #1
 8018b50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018b54:	e7d2      	b.n	8018afc <__kernel_rem_pio2f+0x418>
 8018b56:	eef0 7a47 	vmov.f32	s15, s14
 8018b5a:	e7d4      	b.n	8018b06 <__kernel_rem_pio2f+0x422>
 8018b5c:	ecb2 7a01 	vldmia	r2!, {s14}
 8018b60:	3301      	adds	r3, #1
 8018b62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018b66:	e7d6      	b.n	8018b16 <__kernel_rem_pio2f+0x432>
 8018b68:	edd2 7a00 	vldr	s15, [r2]
 8018b6c:	3801      	subs	r0, #1
 8018b6e:	edd2 6a01 	vldr	s13, [r2, #4]
 8018b72:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8018b76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018b7a:	ed82 7a00 	vstr	s14, [r2]
 8018b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018b82:	edc2 7a01 	vstr	s15, [r2, #4]
 8018b86:	e798      	b.n	8018aba <__kernel_rem_pio2f+0x3d6>
 8018b88:	edd3 7a00 	vldr	s15, [r3]
 8018b8c:	3a01      	subs	r2, #1
 8018b8e:	edd3 6a01 	vldr	s13, [r3, #4]
 8018b92:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8018b96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018b9a:	ed83 7a00 	vstr	s14, [r3]
 8018b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018ba2:	edc3 7a01 	vstr	s15, [r3, #4]
 8018ba6:	e78d      	b.n	8018ac4 <__kernel_rem_pio2f+0x3e0>
 8018ba8:	ed33 7a01 	vldmdb	r3!, {s14}
 8018bac:	3c01      	subs	r4, #1
 8018bae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018bb2:	e78f      	b.n	8018ad4 <__kernel_rem_pio2f+0x3f0>
 8018bb4:	eef1 6a66 	vneg.f32	s13, s13
 8018bb8:	eeb1 7a47 	vneg.f32	s14, s14
 8018bbc:	eef1 7a67 	vneg.f32	s15, s15
 8018bc0:	edc8 6a00 	vstr	s13, [r8]
 8018bc4:	ed88 7a01 	vstr	s14, [r8, #4]
 8018bc8:	e790      	b.n	8018aec <__kernel_rem_pio2f+0x408>
 8018bca:	bf00      	nop

08018bcc <__ieee754_logf>:
 8018bcc:	ee10 3a10 	vmov	r3, s0
 8018bd0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8018bd4:	d106      	bne.n	8018be4 <__ieee754_logf+0x18>
 8018bd6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8018d6c <__ieee754_logf+0x1a0>
 8018bda:	eddf 7a65 	vldr	s15, [pc, #404]	; 8018d70 <__ieee754_logf+0x1a4>
 8018bde:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8018be2:	4770      	bx	lr
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	da02      	bge.n	8018bee <__ieee754_logf+0x22>
 8018be8:	ee30 7a40 	vsub.f32	s14, s0, s0
 8018bec:	e7f5      	b.n	8018bda <__ieee754_logf+0xe>
 8018bee:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018bf2:	db02      	blt.n	8018bfa <__ieee754_logf+0x2e>
 8018bf4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018bf8:	4770      	bx	lr
 8018bfa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8018bfe:	485d      	ldr	r0, [pc, #372]	; (8018d74 <__ieee754_logf+0x1a8>)
 8018c00:	bfbb      	ittet	lt
 8018c02:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 8018d78 <__ieee754_logf+0x1ac>
 8018c06:	f06f 0118 	mvnlt.w	r1, #24
 8018c0a:	2100      	movge	r1, #0
 8018c0c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8018c10:	bfb8      	it	lt
 8018c12:	ee17 3a90 	vmovlt	r3, s15
 8018c16:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018c1a:	15da      	asrs	r2, r3, #23
 8018c1c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8018c20:	3a7f      	subs	r2, #127	; 0x7f
 8018c22:	4418      	add	r0, r3
 8018c24:	440a      	add	r2, r1
 8018c26:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8018c2a:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8018c2e:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8018c32:	f103 000f 	add.w	r0, r3, #15
 8018c36:	4319      	orrs	r1, r3
 8018c38:	ee00 1a10 	vmov	s0, r1
 8018c3c:	494f      	ldr	r1, [pc, #316]	; (8018d7c <__ieee754_logf+0x1b0>)
 8018c3e:	4001      	ands	r1, r0
 8018c40:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018c44:	bb89      	cbnz	r1, 8018caa <__ieee754_logf+0xde>
 8018c46:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8018c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c4e:	d10f      	bne.n	8018c70 <__ieee754_logf+0xa4>
 8018c50:	2a00      	cmp	r2, #0
 8018c52:	f000 8087 	beq.w	8018d64 <__ieee754_logf+0x198>
 8018c56:	ee07 2a90 	vmov	s15, r2
 8018c5a:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8018d80 <__ieee754_logf+0x1b4>
 8018c5e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8018d84 <__ieee754_logf+0x1b8>
 8018c62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018c66:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018c6a:	eea7 0a87 	vfma.f32	s0, s15, s14
 8018c6e:	4770      	bx	lr
 8018c70:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018c74:	eddf 6a44 	vldr	s13, [pc, #272]	; 8018d88 <__ieee754_logf+0x1bc>
 8018c78:	ee20 7a00 	vmul.f32	s14, s0, s0
 8018c7c:	eee0 7a66 	vfms.f32	s15, s0, s13
 8018c80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018c84:	b912      	cbnz	r2, 8018c8c <__ieee754_logf+0xc0>
 8018c86:	ee30 0a47 	vsub.f32	s0, s0, s14
 8018c8a:	4770      	bx	lr
 8018c8c:	ee07 2a90 	vmov	s15, r2
 8018c90:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8018d80 <__ieee754_logf+0x1b4>
 8018c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018c98:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8018c9c:	ee37 0a40 	vsub.f32	s0, s14, s0
 8018ca0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8018d84 <__ieee754_logf+0x1b8>
 8018ca4:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8018ca8:	4770      	bx	lr
 8018caa:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8018cae:	eddf 5a37 	vldr	s11, [pc, #220]	; 8018d8c <__ieee754_logf+0x1c0>
 8018cb2:	eddf 4a37 	vldr	s9, [pc, #220]	; 8018d90 <__ieee754_logf+0x1c4>
 8018cb6:	4937      	ldr	r1, [pc, #220]	; (8018d94 <__ieee754_logf+0x1c8>)
 8018cb8:	ee70 7a27 	vadd.f32	s15, s0, s15
 8018cbc:	4419      	add	r1, r3
 8018cbe:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8018cc2:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8018cc6:	ee07 2a90 	vmov	s15, r2
 8018cca:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8018cce:	430b      	orrs	r3, r1
 8018cd0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8018cd4:	eddf 7a30 	vldr	s15, [pc, #192]	; 8018d98 <__ieee754_logf+0x1cc>
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	ee26 5a06 	vmul.f32	s10, s12, s12
 8018cde:	ee25 7a05 	vmul.f32	s14, s10, s10
 8018ce2:	eee7 7a25 	vfma.f32	s15, s14, s11
 8018ce6:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8018d9c <__ieee754_logf+0x1d0>
 8018cea:	eee7 5a87 	vfma.f32	s11, s15, s14
 8018cee:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8018da0 <__ieee754_logf+0x1d4>
 8018cf2:	eee7 7a24 	vfma.f32	s15, s14, s9
 8018cf6:	eddf 4a2b 	vldr	s9, [pc, #172]	; 8018da4 <__ieee754_logf+0x1d8>
 8018cfa:	eee7 4a87 	vfma.f32	s9, s15, s14
 8018cfe:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8018da8 <__ieee754_logf+0x1dc>
 8018d02:	eee4 7a87 	vfma.f32	s15, s9, s14
 8018d06:	ee67 7a85 	vmul.f32	s15, s15, s10
 8018d0a:	eee5 7a87 	vfma.f32	s15, s11, s14
 8018d0e:	dd1a      	ble.n	8018d46 <__ieee754_logf+0x17a>
 8018d10:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8018d14:	ee20 7a07 	vmul.f32	s14, s0, s14
 8018d18:	ee27 7a00 	vmul.f32	s14, s14, s0
 8018d1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018d20:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018d24:	b912      	cbnz	r2, 8018d2c <__ieee754_logf+0x160>
 8018d26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018d2a:	e7ac      	b.n	8018c86 <__ieee754_logf+0xba>
 8018d2c:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8018d80 <__ieee754_logf+0x1b4>
 8018d30:	eee6 7a86 	vfma.f32	s15, s13, s12
 8018d34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018d38:	ee37 0a40 	vsub.f32	s0, s14, s0
 8018d3c:	eddf 7a11 	vldr	s15, [pc, #68]	; 8018d84 <__ieee754_logf+0x1b8>
 8018d40:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8018d44:	4770      	bx	lr
 8018d46:	ee70 7a67 	vsub.f32	s15, s0, s15
 8018d4a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018d4e:	b912      	cbnz	r2, 8018d56 <__ieee754_logf+0x18a>
 8018d50:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018d54:	4770      	bx	lr
 8018d56:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8018d80 <__ieee754_logf+0x1b4>
 8018d5a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8018d5e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8018d62:	e7eb      	b.n	8018d3c <__ieee754_logf+0x170>
 8018d64:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8018d70 <__ieee754_logf+0x1a4>
 8018d68:	4770      	bx	lr
 8018d6a:	bf00      	nop
 8018d6c:	cc000000 	.word	0xcc000000
 8018d70:	00000000 	.word	0x00000000
 8018d74:	004afb20 	.word	0x004afb20
 8018d78:	4c000000 	.word	0x4c000000
 8018d7c:	007ffff0 	.word	0x007ffff0
 8018d80:	3717f7d1 	.word	0x3717f7d1
 8018d84:	3f317180 	.word	0x3f317180
 8018d88:	3eaaaaab 	.word	0x3eaaaaab
 8018d8c:	3e1cd04f 	.word	0x3e1cd04f
 8018d90:	3e178897 	.word	0x3e178897
 8018d94:	ffcf5c30 	.word	0xffcf5c30
 8018d98:	3e638e29 	.word	0x3e638e29
 8018d9c:	3ecccccd 	.word	0x3ecccccd
 8018da0:	3e3a3325 	.word	0x3e3a3325
 8018da4:	3e924925 	.word	0x3e924925
 8018da8:	3f2aaaab 	.word	0x3f2aaaab

08018dac <scalbnf>:
 8018dac:	ee10 3a10 	vmov	r3, s0
 8018db0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8018db4:	d02a      	beq.n	8018e0c <scalbnf+0x60>
 8018db6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8018dba:	d302      	bcc.n	8018dc2 <scalbnf+0x16>
 8018dbc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018dc0:	4770      	bx	lr
 8018dc2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8018dc6:	d122      	bne.n	8018e0e <scalbnf+0x62>
 8018dc8:	4b23      	ldr	r3, [pc, #140]	; (8018e58 <scalbnf+0xac>)
 8018dca:	eddf 7a24 	vldr	s15, [pc, #144]	; 8018e5c <scalbnf+0xb0>
 8018dce:	4298      	cmp	r0, r3
 8018dd0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018dd4:	db16      	blt.n	8018e04 <scalbnf+0x58>
 8018dd6:	ee10 3a10 	vmov	r3, s0
 8018dda:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8018dde:	3a19      	subs	r2, #25
 8018de0:	f24c 3150 	movw	r1, #50000	; 0xc350
 8018de4:	4288      	cmp	r0, r1
 8018de6:	dd14      	ble.n	8018e12 <scalbnf+0x66>
 8018de8:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8018e60 <scalbnf+0xb4>
 8018dec:	ee10 3a10 	vmov	r3, s0
 8018df0:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8018e64 <scalbnf+0xb8>
 8018df4:	eeb0 7a67 	vmov.f32	s14, s15
 8018df8:	2b00      	cmp	r3, #0
 8018dfa:	fe67 7aa6 	vselge.f32	s15, s15, s13
 8018dfe:	ee27 0a87 	vmul.f32	s0, s15, s14
 8018e02:	4770      	bx	lr
 8018e04:	eddf 7a18 	vldr	s15, [pc, #96]	; 8018e68 <scalbnf+0xbc>
 8018e08:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018e0c:	4770      	bx	lr
 8018e0e:	0dd2      	lsrs	r2, r2, #23
 8018e10:	e7e6      	b.n	8018de0 <scalbnf+0x34>
 8018e12:	4410      	add	r0, r2
 8018e14:	28fe      	cmp	r0, #254	; 0xfe
 8018e16:	dce7      	bgt.n	8018de8 <scalbnf+0x3c>
 8018e18:	2800      	cmp	r0, #0
 8018e1a:	dd06      	ble.n	8018e2a <scalbnf+0x7e>
 8018e1c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018e20:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8018e24:	ee00 3a10 	vmov	s0, r3
 8018e28:	4770      	bx	lr
 8018e2a:	f110 0f16 	cmn.w	r0, #22
 8018e2e:	da09      	bge.n	8018e44 <scalbnf+0x98>
 8018e30:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8018e68 <scalbnf+0xbc>
 8018e34:	ee10 3a10 	vmov	r3, s0
 8018e38:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8018e6c <scalbnf+0xc0>
 8018e3c:	eeb0 7a67 	vmov.f32	s14, s15
 8018e40:	2b00      	cmp	r3, #0
 8018e42:	e7da      	b.n	8018dfa <scalbnf+0x4e>
 8018e44:	3019      	adds	r0, #25
 8018e46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018e4a:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8018e70 <scalbnf+0xc4>
 8018e4e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8018e52:	ee07 3a90 	vmov	s15, r3
 8018e56:	e7d7      	b.n	8018e08 <scalbnf+0x5c>
 8018e58:	ffff3cb0 	.word	0xffff3cb0
 8018e5c:	4c000000 	.word	0x4c000000
 8018e60:	7149f2ca 	.word	0x7149f2ca
 8018e64:	f149f2ca 	.word	0xf149f2ca
 8018e68:	0da24260 	.word	0x0da24260
 8018e6c:	8da24260 	.word	0x8da24260
 8018e70:	33000000 	.word	0x33000000

08018e74 <floorf>:
 8018e74:	febb 0a40 	vrintm.f32	s0, s0
 8018e78:	4770      	bx	lr

08018e7a <abort>:
 8018e7a:	2006      	movs	r0, #6
 8018e7c:	b508      	push	{r3, lr}
 8018e7e:	f000 fa7b 	bl	8019378 <raise>
 8018e82:	2001      	movs	r0, #1
 8018e84:	f7f1 fede 	bl	800ac44 <_exit>

08018e88 <malloc>:
 8018e88:	4b02      	ldr	r3, [pc, #8]	; (8018e94 <malloc+0xc>)
 8018e8a:	4601      	mov	r1, r0
 8018e8c:	6818      	ldr	r0, [r3, #0]
 8018e8e:	f000 b82b 	b.w	8018ee8 <_malloc_r>
 8018e92:	bf00      	nop
 8018e94:	200000f8 	.word	0x200000f8

08018e98 <free>:
 8018e98:	4b02      	ldr	r3, [pc, #8]	; (8018ea4 <free+0xc>)
 8018e9a:	4601      	mov	r1, r0
 8018e9c:	6818      	ldr	r0, [r3, #0]
 8018e9e:	f000 bb35 	b.w	801950c <_free_r>
 8018ea2:	bf00      	nop
 8018ea4:	200000f8 	.word	0x200000f8

08018ea8 <sbrk_aligned>:
 8018ea8:	b570      	push	{r4, r5, r6, lr}
 8018eaa:	4e0e      	ldr	r6, [pc, #56]	; (8018ee4 <sbrk_aligned+0x3c>)
 8018eac:	460c      	mov	r4, r1
 8018eae:	4605      	mov	r5, r0
 8018eb0:	6831      	ldr	r1, [r6, #0]
 8018eb2:	b911      	cbnz	r1, 8018eba <sbrk_aligned+0x12>
 8018eb4:	f000 fab0 	bl	8019418 <_sbrk_r>
 8018eb8:	6030      	str	r0, [r6, #0]
 8018eba:	4621      	mov	r1, r4
 8018ebc:	4628      	mov	r0, r5
 8018ebe:	f000 faab 	bl	8019418 <_sbrk_r>
 8018ec2:	1c43      	adds	r3, r0, #1
 8018ec4:	d00a      	beq.n	8018edc <sbrk_aligned+0x34>
 8018ec6:	1cc4      	adds	r4, r0, #3
 8018ec8:	f024 0403 	bic.w	r4, r4, #3
 8018ecc:	42a0      	cmp	r0, r4
 8018ece:	d007      	beq.n	8018ee0 <sbrk_aligned+0x38>
 8018ed0:	1a21      	subs	r1, r4, r0
 8018ed2:	4628      	mov	r0, r5
 8018ed4:	f000 faa0 	bl	8019418 <_sbrk_r>
 8018ed8:	3001      	adds	r0, #1
 8018eda:	d101      	bne.n	8018ee0 <sbrk_aligned+0x38>
 8018edc:	f04f 34ff 	mov.w	r4, #4294967295
 8018ee0:	4620      	mov	r0, r4
 8018ee2:	bd70      	pop	{r4, r5, r6, pc}
 8018ee4:	20009d60 	.word	0x20009d60

08018ee8 <_malloc_r>:
 8018ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018eec:	1ccd      	adds	r5, r1, #3
 8018eee:	4607      	mov	r7, r0
 8018ef0:	f025 0503 	bic.w	r5, r5, #3
 8018ef4:	3508      	adds	r5, #8
 8018ef6:	2d0c      	cmp	r5, #12
 8018ef8:	bf38      	it	cc
 8018efa:	250c      	movcc	r5, #12
 8018efc:	2d00      	cmp	r5, #0
 8018efe:	db01      	blt.n	8018f04 <_malloc_r+0x1c>
 8018f00:	42a9      	cmp	r1, r5
 8018f02:	d905      	bls.n	8018f10 <_malloc_r+0x28>
 8018f04:	230c      	movs	r3, #12
 8018f06:	2600      	movs	r6, #0
 8018f08:	603b      	str	r3, [r7, #0]
 8018f0a:	4630      	mov	r0, r6
 8018f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8018fe4 <_malloc_r+0xfc>
 8018f14:	f000 f868 	bl	8018fe8 <__malloc_lock>
 8018f18:	f8d8 3000 	ldr.w	r3, [r8]
 8018f1c:	461c      	mov	r4, r3
 8018f1e:	bb5c      	cbnz	r4, 8018f78 <_malloc_r+0x90>
 8018f20:	4629      	mov	r1, r5
 8018f22:	4638      	mov	r0, r7
 8018f24:	f7ff ffc0 	bl	8018ea8 <sbrk_aligned>
 8018f28:	1c43      	adds	r3, r0, #1
 8018f2a:	4604      	mov	r4, r0
 8018f2c:	d155      	bne.n	8018fda <_malloc_r+0xf2>
 8018f2e:	f8d8 4000 	ldr.w	r4, [r8]
 8018f32:	4626      	mov	r6, r4
 8018f34:	2e00      	cmp	r6, #0
 8018f36:	d145      	bne.n	8018fc4 <_malloc_r+0xdc>
 8018f38:	2c00      	cmp	r4, #0
 8018f3a:	d048      	beq.n	8018fce <_malloc_r+0xe6>
 8018f3c:	6823      	ldr	r3, [r4, #0]
 8018f3e:	4631      	mov	r1, r6
 8018f40:	4638      	mov	r0, r7
 8018f42:	eb04 0903 	add.w	r9, r4, r3
 8018f46:	f000 fa67 	bl	8019418 <_sbrk_r>
 8018f4a:	4581      	cmp	r9, r0
 8018f4c:	d13f      	bne.n	8018fce <_malloc_r+0xe6>
 8018f4e:	6821      	ldr	r1, [r4, #0]
 8018f50:	4638      	mov	r0, r7
 8018f52:	1a6d      	subs	r5, r5, r1
 8018f54:	4629      	mov	r1, r5
 8018f56:	f7ff ffa7 	bl	8018ea8 <sbrk_aligned>
 8018f5a:	3001      	adds	r0, #1
 8018f5c:	d037      	beq.n	8018fce <_malloc_r+0xe6>
 8018f5e:	6823      	ldr	r3, [r4, #0]
 8018f60:	442b      	add	r3, r5
 8018f62:	6023      	str	r3, [r4, #0]
 8018f64:	f8d8 3000 	ldr.w	r3, [r8]
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d038      	beq.n	8018fde <_malloc_r+0xf6>
 8018f6c:	685a      	ldr	r2, [r3, #4]
 8018f6e:	42a2      	cmp	r2, r4
 8018f70:	d12b      	bne.n	8018fca <_malloc_r+0xe2>
 8018f72:	2200      	movs	r2, #0
 8018f74:	605a      	str	r2, [r3, #4]
 8018f76:	e00f      	b.n	8018f98 <_malloc_r+0xb0>
 8018f78:	6822      	ldr	r2, [r4, #0]
 8018f7a:	1b52      	subs	r2, r2, r5
 8018f7c:	d41f      	bmi.n	8018fbe <_malloc_r+0xd6>
 8018f7e:	2a0b      	cmp	r2, #11
 8018f80:	d917      	bls.n	8018fb2 <_malloc_r+0xca>
 8018f82:	1961      	adds	r1, r4, r5
 8018f84:	42a3      	cmp	r3, r4
 8018f86:	6025      	str	r5, [r4, #0]
 8018f88:	bf18      	it	ne
 8018f8a:	6059      	strne	r1, [r3, #4]
 8018f8c:	6863      	ldr	r3, [r4, #4]
 8018f8e:	bf08      	it	eq
 8018f90:	f8c8 1000 	streq.w	r1, [r8]
 8018f94:	5162      	str	r2, [r4, r5]
 8018f96:	604b      	str	r3, [r1, #4]
 8018f98:	f104 060b 	add.w	r6, r4, #11
 8018f9c:	4638      	mov	r0, r7
 8018f9e:	f000 f829 	bl	8018ff4 <__malloc_unlock>
 8018fa2:	1d23      	adds	r3, r4, #4
 8018fa4:	f026 0607 	bic.w	r6, r6, #7
 8018fa8:	1af2      	subs	r2, r6, r3
 8018faa:	d0ae      	beq.n	8018f0a <_malloc_r+0x22>
 8018fac:	1b9b      	subs	r3, r3, r6
 8018fae:	50a3      	str	r3, [r4, r2]
 8018fb0:	e7ab      	b.n	8018f0a <_malloc_r+0x22>
 8018fb2:	42a3      	cmp	r3, r4
 8018fb4:	6862      	ldr	r2, [r4, #4]
 8018fb6:	d1dd      	bne.n	8018f74 <_malloc_r+0x8c>
 8018fb8:	f8c8 2000 	str.w	r2, [r8]
 8018fbc:	e7ec      	b.n	8018f98 <_malloc_r+0xb0>
 8018fbe:	4623      	mov	r3, r4
 8018fc0:	6864      	ldr	r4, [r4, #4]
 8018fc2:	e7ac      	b.n	8018f1e <_malloc_r+0x36>
 8018fc4:	4634      	mov	r4, r6
 8018fc6:	6876      	ldr	r6, [r6, #4]
 8018fc8:	e7b4      	b.n	8018f34 <_malloc_r+0x4c>
 8018fca:	4613      	mov	r3, r2
 8018fcc:	e7cc      	b.n	8018f68 <_malloc_r+0x80>
 8018fce:	230c      	movs	r3, #12
 8018fd0:	4638      	mov	r0, r7
 8018fd2:	603b      	str	r3, [r7, #0]
 8018fd4:	f000 f80e 	bl	8018ff4 <__malloc_unlock>
 8018fd8:	e797      	b.n	8018f0a <_malloc_r+0x22>
 8018fda:	6025      	str	r5, [r4, #0]
 8018fdc:	e7dc      	b.n	8018f98 <_malloc_r+0xb0>
 8018fde:	605b      	str	r3, [r3, #4]
 8018fe0:	deff      	udf	#255	; 0xff
 8018fe2:	bf00      	nop
 8018fe4:	20009d5c 	.word	0x20009d5c

08018fe8 <__malloc_lock>:
 8018fe8:	4801      	ldr	r0, [pc, #4]	; (8018ff0 <__malloc_lock+0x8>)
 8018fea:	f000 ba62 	b.w	80194b2 <__retarget_lock_acquire_recursive>
 8018fee:	bf00      	nop
 8018ff0:	20009ea4 	.word	0x20009ea4

08018ff4 <__malloc_unlock>:
 8018ff4:	4801      	ldr	r0, [pc, #4]	; (8018ffc <__malloc_unlock+0x8>)
 8018ff6:	f000 ba5d 	b.w	80194b4 <__retarget_lock_release_recursive>
 8018ffa:	bf00      	nop
 8018ffc:	20009ea4 	.word	0x20009ea4

08019000 <rand>:
 8019000:	4b16      	ldr	r3, [pc, #88]	; (801905c <rand+0x5c>)
 8019002:	b510      	push	{r4, lr}
 8019004:	681c      	ldr	r4, [r3, #0]
 8019006:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019008:	b9b3      	cbnz	r3, 8019038 <rand+0x38>
 801900a:	2018      	movs	r0, #24
 801900c:	f7ff ff3c 	bl	8018e88 <malloc>
 8019010:	4602      	mov	r2, r0
 8019012:	6320      	str	r0, [r4, #48]	; 0x30
 8019014:	b920      	cbnz	r0, 8019020 <rand+0x20>
 8019016:	4b12      	ldr	r3, [pc, #72]	; (8019060 <rand+0x60>)
 8019018:	2152      	movs	r1, #82	; 0x52
 801901a:	4812      	ldr	r0, [pc, #72]	; (8019064 <rand+0x64>)
 801901c:	f000 fa58 	bl	80194d0 <__assert_func>
 8019020:	4911      	ldr	r1, [pc, #68]	; (8019068 <rand+0x68>)
 8019022:	4b12      	ldr	r3, [pc, #72]	; (801906c <rand+0x6c>)
 8019024:	e9c0 1300 	strd	r1, r3, [r0]
 8019028:	4b11      	ldr	r3, [pc, #68]	; (8019070 <rand+0x70>)
 801902a:	2100      	movs	r1, #0
 801902c:	6083      	str	r3, [r0, #8]
 801902e:	230b      	movs	r3, #11
 8019030:	8183      	strh	r3, [r0, #12]
 8019032:	2001      	movs	r0, #1
 8019034:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019038:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801903a:	480e      	ldr	r0, [pc, #56]	; (8019074 <rand+0x74>)
 801903c:	690b      	ldr	r3, [r1, #16]
 801903e:	694c      	ldr	r4, [r1, #20]
 8019040:	4a0d      	ldr	r2, [pc, #52]	; (8019078 <rand+0x78>)
 8019042:	4358      	muls	r0, r3
 8019044:	fb02 0004 	mla	r0, r2, r4, r0
 8019048:	fba3 3202 	umull	r3, r2, r3, r2
 801904c:	3301      	adds	r3, #1
 801904e:	eb40 0002 	adc.w	r0, r0, r2
 8019052:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8019056:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801905a:	bd10      	pop	{r4, pc}
 801905c:	200000f8 	.word	0x200000f8
 8019060:	0801af30 	.word	0x0801af30
 8019064:	0801af47 	.word	0x0801af47
 8019068:	abcd330e 	.word	0xabcd330e
 801906c:	e66d1234 	.word	0xe66d1234
 8019070:	0005deec 	.word	0x0005deec
 8019074:	5851f42d 	.word	0x5851f42d
 8019078:	4c957f2d 	.word	0x4c957f2d

0801907c <std>:
 801907c:	2300      	movs	r3, #0
 801907e:	b510      	push	{r4, lr}
 8019080:	4604      	mov	r4, r0
 8019082:	6083      	str	r3, [r0, #8]
 8019084:	8181      	strh	r1, [r0, #12]
 8019086:	4619      	mov	r1, r3
 8019088:	6643      	str	r3, [r0, #100]	; 0x64
 801908a:	81c2      	strh	r2, [r0, #14]
 801908c:	2208      	movs	r2, #8
 801908e:	6183      	str	r3, [r0, #24]
 8019090:	e9c0 3300 	strd	r3, r3, [r0]
 8019094:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019098:	305c      	adds	r0, #92	; 0x5c
 801909a:	f000 f93c 	bl	8019316 <memset>
 801909e:	4b0d      	ldr	r3, [pc, #52]	; (80190d4 <std+0x58>)
 80190a0:	6224      	str	r4, [r4, #32]
 80190a2:	6263      	str	r3, [r4, #36]	; 0x24
 80190a4:	4b0c      	ldr	r3, [pc, #48]	; (80190d8 <std+0x5c>)
 80190a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80190a8:	4b0c      	ldr	r3, [pc, #48]	; (80190dc <std+0x60>)
 80190aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80190ac:	4b0c      	ldr	r3, [pc, #48]	; (80190e0 <std+0x64>)
 80190ae:	6323      	str	r3, [r4, #48]	; 0x30
 80190b0:	4b0c      	ldr	r3, [pc, #48]	; (80190e4 <std+0x68>)
 80190b2:	429c      	cmp	r4, r3
 80190b4:	d006      	beq.n	80190c4 <std+0x48>
 80190b6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80190ba:	4294      	cmp	r4, r2
 80190bc:	d002      	beq.n	80190c4 <std+0x48>
 80190be:	33d0      	adds	r3, #208	; 0xd0
 80190c0:	429c      	cmp	r4, r3
 80190c2:	d105      	bne.n	80190d0 <std+0x54>
 80190c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80190c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80190cc:	f000 b9f0 	b.w	80194b0 <__retarget_lock_init_recursive>
 80190d0:	bd10      	pop	{r4, pc}
 80190d2:	bf00      	nop
 80190d4:	08019259 	.word	0x08019259
 80190d8:	0801927f 	.word	0x0801927f
 80190dc:	080192b7 	.word	0x080192b7
 80190e0:	080192db 	.word	0x080192db
 80190e4:	20009d64 	.word	0x20009d64

080190e8 <stdio_exit_handler>:
 80190e8:	4a02      	ldr	r2, [pc, #8]	; (80190f4 <stdio_exit_handler+0xc>)
 80190ea:	4903      	ldr	r1, [pc, #12]	; (80190f8 <stdio_exit_handler+0x10>)
 80190ec:	4803      	ldr	r0, [pc, #12]	; (80190fc <stdio_exit_handler+0x14>)
 80190ee:	f000 b869 	b.w	80191c4 <_fwalk_sglue>
 80190f2:	bf00      	nop
 80190f4:	200000a0 	.word	0x200000a0
 80190f8:	08019ce9 	.word	0x08019ce9
 80190fc:	200000ac 	.word	0x200000ac

08019100 <cleanup_stdio>:
 8019100:	6841      	ldr	r1, [r0, #4]
 8019102:	4b0c      	ldr	r3, [pc, #48]	; (8019134 <cleanup_stdio+0x34>)
 8019104:	4299      	cmp	r1, r3
 8019106:	b510      	push	{r4, lr}
 8019108:	4604      	mov	r4, r0
 801910a:	d001      	beq.n	8019110 <cleanup_stdio+0x10>
 801910c:	f000 fdec 	bl	8019ce8 <_fflush_r>
 8019110:	68a1      	ldr	r1, [r4, #8]
 8019112:	4b09      	ldr	r3, [pc, #36]	; (8019138 <cleanup_stdio+0x38>)
 8019114:	4299      	cmp	r1, r3
 8019116:	d002      	beq.n	801911e <cleanup_stdio+0x1e>
 8019118:	4620      	mov	r0, r4
 801911a:	f000 fde5 	bl	8019ce8 <_fflush_r>
 801911e:	68e1      	ldr	r1, [r4, #12]
 8019120:	4b06      	ldr	r3, [pc, #24]	; (801913c <cleanup_stdio+0x3c>)
 8019122:	4299      	cmp	r1, r3
 8019124:	d004      	beq.n	8019130 <cleanup_stdio+0x30>
 8019126:	4620      	mov	r0, r4
 8019128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801912c:	f000 bddc 	b.w	8019ce8 <_fflush_r>
 8019130:	bd10      	pop	{r4, pc}
 8019132:	bf00      	nop
 8019134:	20009d64 	.word	0x20009d64
 8019138:	20009dcc 	.word	0x20009dcc
 801913c:	20009e34 	.word	0x20009e34

08019140 <global_stdio_init.part.0>:
 8019140:	b510      	push	{r4, lr}
 8019142:	4b0b      	ldr	r3, [pc, #44]	; (8019170 <global_stdio_init.part.0+0x30>)
 8019144:	2104      	movs	r1, #4
 8019146:	4c0b      	ldr	r4, [pc, #44]	; (8019174 <global_stdio_init.part.0+0x34>)
 8019148:	4a0b      	ldr	r2, [pc, #44]	; (8019178 <global_stdio_init.part.0+0x38>)
 801914a:	4620      	mov	r0, r4
 801914c:	601a      	str	r2, [r3, #0]
 801914e:	2200      	movs	r2, #0
 8019150:	f7ff ff94 	bl	801907c <std>
 8019154:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8019158:	2201      	movs	r2, #1
 801915a:	2109      	movs	r1, #9
 801915c:	f7ff ff8e 	bl	801907c <std>
 8019160:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8019164:	2202      	movs	r2, #2
 8019166:	2112      	movs	r1, #18
 8019168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801916c:	f7ff bf86 	b.w	801907c <std>
 8019170:	20009e9c 	.word	0x20009e9c
 8019174:	20009d64 	.word	0x20009d64
 8019178:	080190e9 	.word	0x080190e9

0801917c <__sfp_lock_acquire>:
 801917c:	4801      	ldr	r0, [pc, #4]	; (8019184 <__sfp_lock_acquire+0x8>)
 801917e:	f000 b998 	b.w	80194b2 <__retarget_lock_acquire_recursive>
 8019182:	bf00      	nop
 8019184:	20009ea5 	.word	0x20009ea5

08019188 <__sfp_lock_release>:
 8019188:	4801      	ldr	r0, [pc, #4]	; (8019190 <__sfp_lock_release+0x8>)
 801918a:	f000 b993 	b.w	80194b4 <__retarget_lock_release_recursive>
 801918e:	bf00      	nop
 8019190:	20009ea5 	.word	0x20009ea5

08019194 <__sinit>:
 8019194:	b510      	push	{r4, lr}
 8019196:	4604      	mov	r4, r0
 8019198:	f7ff fff0 	bl	801917c <__sfp_lock_acquire>
 801919c:	6a23      	ldr	r3, [r4, #32]
 801919e:	b11b      	cbz	r3, 80191a8 <__sinit+0x14>
 80191a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80191a4:	f7ff bff0 	b.w	8019188 <__sfp_lock_release>
 80191a8:	4b04      	ldr	r3, [pc, #16]	; (80191bc <__sinit+0x28>)
 80191aa:	6223      	str	r3, [r4, #32]
 80191ac:	4b04      	ldr	r3, [pc, #16]	; (80191c0 <__sinit+0x2c>)
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	d1f5      	bne.n	80191a0 <__sinit+0xc>
 80191b4:	f7ff ffc4 	bl	8019140 <global_stdio_init.part.0>
 80191b8:	e7f2      	b.n	80191a0 <__sinit+0xc>
 80191ba:	bf00      	nop
 80191bc:	08019101 	.word	0x08019101
 80191c0:	20009e9c 	.word	0x20009e9c

080191c4 <_fwalk_sglue>:
 80191c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80191c8:	4607      	mov	r7, r0
 80191ca:	4688      	mov	r8, r1
 80191cc:	4614      	mov	r4, r2
 80191ce:	2600      	movs	r6, #0
 80191d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80191d4:	f1b9 0901 	subs.w	r9, r9, #1
 80191d8:	d505      	bpl.n	80191e6 <_fwalk_sglue+0x22>
 80191da:	6824      	ldr	r4, [r4, #0]
 80191dc:	2c00      	cmp	r4, #0
 80191de:	d1f7      	bne.n	80191d0 <_fwalk_sglue+0xc>
 80191e0:	4630      	mov	r0, r6
 80191e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80191e6:	89ab      	ldrh	r3, [r5, #12]
 80191e8:	2b01      	cmp	r3, #1
 80191ea:	d907      	bls.n	80191fc <_fwalk_sglue+0x38>
 80191ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80191f0:	3301      	adds	r3, #1
 80191f2:	d003      	beq.n	80191fc <_fwalk_sglue+0x38>
 80191f4:	4629      	mov	r1, r5
 80191f6:	4638      	mov	r0, r7
 80191f8:	47c0      	blx	r8
 80191fa:	4306      	orrs	r6, r0
 80191fc:	3568      	adds	r5, #104	; 0x68
 80191fe:	e7e9      	b.n	80191d4 <_fwalk_sglue+0x10>

08019200 <siscanf>:
 8019200:	b40e      	push	{r1, r2, r3}
 8019202:	b510      	push	{r4, lr}
 8019204:	b09f      	sub	sp, #124	; 0x7c
 8019206:	f44f 7101 	mov.w	r1, #516	; 0x204
 801920a:	ac21      	add	r4, sp, #132	; 0x84
 801920c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8019210:	9004      	str	r0, [sp, #16]
 8019212:	f854 2b04 	ldr.w	r2, [r4], #4
 8019216:	9008      	str	r0, [sp, #32]
 8019218:	9201      	str	r2, [sp, #4]
 801921a:	f7e7 f811 	bl	8000240 <strlen>
 801921e:	4b0c      	ldr	r3, [pc, #48]	; (8019250 <siscanf+0x50>)
 8019220:	a904      	add	r1, sp, #16
 8019222:	9005      	str	r0, [sp, #20]
 8019224:	930d      	str	r3, [sp, #52]	; 0x34
 8019226:	2300      	movs	r3, #0
 8019228:	9009      	str	r0, [sp, #36]	; 0x24
 801922a:	9311      	str	r3, [sp, #68]	; 0x44
 801922c:	9316      	str	r3, [sp, #88]	; 0x58
 801922e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019232:	4808      	ldr	r0, [pc, #32]	; (8019254 <siscanf+0x54>)
 8019234:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019238:	4623      	mov	r3, r4
 801923a:	9a01      	ldr	r2, [sp, #4]
 801923c:	6800      	ldr	r0, [r0, #0]
 801923e:	9403      	str	r4, [sp, #12]
 8019240:	f000 fa0a 	bl	8019658 <__ssvfiscanf_r>
 8019244:	b01f      	add	sp, #124	; 0x7c
 8019246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801924a:	b003      	add	sp, #12
 801924c:	4770      	bx	lr
 801924e:	bf00      	nop
 8019250:	0801927b 	.word	0x0801927b
 8019254:	200000f8 	.word	0x200000f8

08019258 <__sread>:
 8019258:	b510      	push	{r4, lr}
 801925a:	460c      	mov	r4, r1
 801925c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019260:	f000 f8b4 	bl	80193cc <_read_r>
 8019264:	2800      	cmp	r0, #0
 8019266:	bfab      	itete	ge
 8019268:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801926a:	89a3      	ldrhlt	r3, [r4, #12]
 801926c:	181b      	addge	r3, r3, r0
 801926e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019272:	bfac      	ite	ge
 8019274:	6563      	strge	r3, [r4, #84]	; 0x54
 8019276:	81a3      	strhlt	r3, [r4, #12]
 8019278:	bd10      	pop	{r4, pc}

0801927a <__seofread>:
 801927a:	2000      	movs	r0, #0
 801927c:	4770      	bx	lr

0801927e <__swrite>:
 801927e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019282:	461f      	mov	r7, r3
 8019284:	898b      	ldrh	r3, [r1, #12]
 8019286:	4605      	mov	r5, r0
 8019288:	460c      	mov	r4, r1
 801928a:	05db      	lsls	r3, r3, #23
 801928c:	4616      	mov	r6, r2
 801928e:	d505      	bpl.n	801929c <__swrite+0x1e>
 8019290:	2302      	movs	r3, #2
 8019292:	2200      	movs	r2, #0
 8019294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019298:	f000 f886 	bl	80193a8 <_lseek_r>
 801929c:	89a3      	ldrh	r3, [r4, #12]
 801929e:	4632      	mov	r2, r6
 80192a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80192a4:	4628      	mov	r0, r5
 80192a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80192aa:	81a3      	strh	r3, [r4, #12]
 80192ac:	463b      	mov	r3, r7
 80192ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80192b2:	f000 b8c1 	b.w	8019438 <_write_r>

080192b6 <__sseek>:
 80192b6:	b510      	push	{r4, lr}
 80192b8:	460c      	mov	r4, r1
 80192ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80192be:	f000 f873 	bl	80193a8 <_lseek_r>
 80192c2:	1c43      	adds	r3, r0, #1
 80192c4:	89a3      	ldrh	r3, [r4, #12]
 80192c6:	bf15      	itete	ne
 80192c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80192ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80192ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80192d2:	81a3      	strheq	r3, [r4, #12]
 80192d4:	bf18      	it	ne
 80192d6:	81a3      	strhne	r3, [r4, #12]
 80192d8:	bd10      	pop	{r4, pc}

080192da <__sclose>:
 80192da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80192de:	f000 b853 	b.w	8019388 <_close_r>

080192e2 <memmove>:
 80192e2:	4288      	cmp	r0, r1
 80192e4:	b510      	push	{r4, lr}
 80192e6:	eb01 0402 	add.w	r4, r1, r2
 80192ea:	d902      	bls.n	80192f2 <memmove+0x10>
 80192ec:	4284      	cmp	r4, r0
 80192ee:	4623      	mov	r3, r4
 80192f0:	d807      	bhi.n	8019302 <memmove+0x20>
 80192f2:	1e43      	subs	r3, r0, #1
 80192f4:	42a1      	cmp	r1, r4
 80192f6:	d008      	beq.n	801930a <memmove+0x28>
 80192f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80192fc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019300:	e7f8      	b.n	80192f4 <memmove+0x12>
 8019302:	4402      	add	r2, r0
 8019304:	4601      	mov	r1, r0
 8019306:	428a      	cmp	r2, r1
 8019308:	d100      	bne.n	801930c <memmove+0x2a>
 801930a:	bd10      	pop	{r4, pc}
 801930c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019310:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019314:	e7f7      	b.n	8019306 <memmove+0x24>

08019316 <memset>:
 8019316:	4402      	add	r2, r0
 8019318:	4603      	mov	r3, r0
 801931a:	4293      	cmp	r3, r2
 801931c:	d100      	bne.n	8019320 <memset+0xa>
 801931e:	4770      	bx	lr
 8019320:	f803 1b01 	strb.w	r1, [r3], #1
 8019324:	e7f9      	b.n	801931a <memset+0x4>

08019326 <_raise_r>:
 8019326:	291f      	cmp	r1, #31
 8019328:	b538      	push	{r3, r4, r5, lr}
 801932a:	4604      	mov	r4, r0
 801932c:	460d      	mov	r5, r1
 801932e:	d904      	bls.n	801933a <_raise_r+0x14>
 8019330:	2316      	movs	r3, #22
 8019332:	6003      	str	r3, [r0, #0]
 8019334:	f04f 30ff 	mov.w	r0, #4294967295
 8019338:	bd38      	pop	{r3, r4, r5, pc}
 801933a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801933c:	b112      	cbz	r2, 8019344 <_raise_r+0x1e>
 801933e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019342:	b94b      	cbnz	r3, 8019358 <_raise_r+0x32>
 8019344:	4620      	mov	r0, r4
 8019346:	f000 f865 	bl	8019414 <_getpid_r>
 801934a:	462a      	mov	r2, r5
 801934c:	4601      	mov	r1, r0
 801934e:	4620      	mov	r0, r4
 8019350:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019354:	f000 b84c 	b.w	80193f0 <_kill_r>
 8019358:	2b01      	cmp	r3, #1
 801935a:	d00a      	beq.n	8019372 <_raise_r+0x4c>
 801935c:	1c59      	adds	r1, r3, #1
 801935e:	d103      	bne.n	8019368 <_raise_r+0x42>
 8019360:	2316      	movs	r3, #22
 8019362:	6003      	str	r3, [r0, #0]
 8019364:	2001      	movs	r0, #1
 8019366:	e7e7      	b.n	8019338 <_raise_r+0x12>
 8019368:	2400      	movs	r4, #0
 801936a:	4628      	mov	r0, r5
 801936c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019370:	4798      	blx	r3
 8019372:	2000      	movs	r0, #0
 8019374:	e7e0      	b.n	8019338 <_raise_r+0x12>
	...

08019378 <raise>:
 8019378:	4b02      	ldr	r3, [pc, #8]	; (8019384 <raise+0xc>)
 801937a:	4601      	mov	r1, r0
 801937c:	6818      	ldr	r0, [r3, #0]
 801937e:	f7ff bfd2 	b.w	8019326 <_raise_r>
 8019382:	bf00      	nop
 8019384:	200000f8 	.word	0x200000f8

08019388 <_close_r>:
 8019388:	b538      	push	{r3, r4, r5, lr}
 801938a:	2300      	movs	r3, #0
 801938c:	4d05      	ldr	r5, [pc, #20]	; (80193a4 <_close_r+0x1c>)
 801938e:	4604      	mov	r4, r0
 8019390:	4608      	mov	r0, r1
 8019392:	602b      	str	r3, [r5, #0]
 8019394:	f7f1 fc99 	bl	800acca <_close>
 8019398:	1c43      	adds	r3, r0, #1
 801939a:	d102      	bne.n	80193a2 <_close_r+0x1a>
 801939c:	682b      	ldr	r3, [r5, #0]
 801939e:	b103      	cbz	r3, 80193a2 <_close_r+0x1a>
 80193a0:	6023      	str	r3, [r4, #0]
 80193a2:	bd38      	pop	{r3, r4, r5, pc}
 80193a4:	20009ea0 	.word	0x20009ea0

080193a8 <_lseek_r>:
 80193a8:	b538      	push	{r3, r4, r5, lr}
 80193aa:	4604      	mov	r4, r0
 80193ac:	4d06      	ldr	r5, [pc, #24]	; (80193c8 <_lseek_r+0x20>)
 80193ae:	4608      	mov	r0, r1
 80193b0:	4611      	mov	r1, r2
 80193b2:	2200      	movs	r2, #0
 80193b4:	602a      	str	r2, [r5, #0]
 80193b6:	461a      	mov	r2, r3
 80193b8:	f7f1 fcae 	bl	800ad18 <_lseek>
 80193bc:	1c43      	adds	r3, r0, #1
 80193be:	d102      	bne.n	80193c6 <_lseek_r+0x1e>
 80193c0:	682b      	ldr	r3, [r5, #0]
 80193c2:	b103      	cbz	r3, 80193c6 <_lseek_r+0x1e>
 80193c4:	6023      	str	r3, [r4, #0]
 80193c6:	bd38      	pop	{r3, r4, r5, pc}
 80193c8:	20009ea0 	.word	0x20009ea0

080193cc <_read_r>:
 80193cc:	b538      	push	{r3, r4, r5, lr}
 80193ce:	4604      	mov	r4, r0
 80193d0:	4d06      	ldr	r5, [pc, #24]	; (80193ec <_read_r+0x20>)
 80193d2:	4608      	mov	r0, r1
 80193d4:	4611      	mov	r1, r2
 80193d6:	2200      	movs	r2, #0
 80193d8:	602a      	str	r2, [r5, #0]
 80193da:	461a      	mov	r2, r3
 80193dc:	f7f1 fc3c 	bl	800ac58 <_read>
 80193e0:	1c43      	adds	r3, r0, #1
 80193e2:	d102      	bne.n	80193ea <_read_r+0x1e>
 80193e4:	682b      	ldr	r3, [r5, #0]
 80193e6:	b103      	cbz	r3, 80193ea <_read_r+0x1e>
 80193e8:	6023      	str	r3, [r4, #0]
 80193ea:	bd38      	pop	{r3, r4, r5, pc}
 80193ec:	20009ea0 	.word	0x20009ea0

080193f0 <_kill_r>:
 80193f0:	b538      	push	{r3, r4, r5, lr}
 80193f2:	2300      	movs	r3, #0
 80193f4:	4d06      	ldr	r5, [pc, #24]	; (8019410 <_kill_r+0x20>)
 80193f6:	4604      	mov	r4, r0
 80193f8:	4608      	mov	r0, r1
 80193fa:	4611      	mov	r1, r2
 80193fc:	602b      	str	r3, [r5, #0]
 80193fe:	f7f1 fc11 	bl	800ac24 <_kill>
 8019402:	1c43      	adds	r3, r0, #1
 8019404:	d102      	bne.n	801940c <_kill_r+0x1c>
 8019406:	682b      	ldr	r3, [r5, #0]
 8019408:	b103      	cbz	r3, 801940c <_kill_r+0x1c>
 801940a:	6023      	str	r3, [r4, #0]
 801940c:	bd38      	pop	{r3, r4, r5, pc}
 801940e:	bf00      	nop
 8019410:	20009ea0 	.word	0x20009ea0

08019414 <_getpid_r>:
 8019414:	f7f1 bbfe 	b.w	800ac14 <_getpid>

08019418 <_sbrk_r>:
 8019418:	b538      	push	{r3, r4, r5, lr}
 801941a:	2300      	movs	r3, #0
 801941c:	4d05      	ldr	r5, [pc, #20]	; (8019434 <_sbrk_r+0x1c>)
 801941e:	4604      	mov	r4, r0
 8019420:	4608      	mov	r0, r1
 8019422:	602b      	str	r3, [r5, #0]
 8019424:	f7f1 fc86 	bl	800ad34 <_sbrk>
 8019428:	1c43      	adds	r3, r0, #1
 801942a:	d102      	bne.n	8019432 <_sbrk_r+0x1a>
 801942c:	682b      	ldr	r3, [r5, #0]
 801942e:	b103      	cbz	r3, 8019432 <_sbrk_r+0x1a>
 8019430:	6023      	str	r3, [r4, #0]
 8019432:	bd38      	pop	{r3, r4, r5, pc}
 8019434:	20009ea0 	.word	0x20009ea0

08019438 <_write_r>:
 8019438:	b538      	push	{r3, r4, r5, lr}
 801943a:	4604      	mov	r4, r0
 801943c:	4d06      	ldr	r5, [pc, #24]	; (8019458 <_write_r+0x20>)
 801943e:	4608      	mov	r0, r1
 8019440:	4611      	mov	r1, r2
 8019442:	2200      	movs	r2, #0
 8019444:	602a      	str	r2, [r5, #0]
 8019446:	461a      	mov	r2, r3
 8019448:	f7f1 fc23 	bl	800ac92 <_write>
 801944c:	1c43      	adds	r3, r0, #1
 801944e:	d102      	bne.n	8019456 <_write_r+0x1e>
 8019450:	682b      	ldr	r3, [r5, #0]
 8019452:	b103      	cbz	r3, 8019456 <_write_r+0x1e>
 8019454:	6023      	str	r3, [r4, #0]
 8019456:	bd38      	pop	{r3, r4, r5, pc}
 8019458:	20009ea0 	.word	0x20009ea0

0801945c <__errno>:
 801945c:	4b01      	ldr	r3, [pc, #4]	; (8019464 <__errno+0x8>)
 801945e:	6818      	ldr	r0, [r3, #0]
 8019460:	4770      	bx	lr
 8019462:	bf00      	nop
 8019464:	200000f8 	.word	0x200000f8

08019468 <__libc_init_array>:
 8019468:	b570      	push	{r4, r5, r6, lr}
 801946a:	4d0d      	ldr	r5, [pc, #52]	; (80194a0 <__libc_init_array+0x38>)
 801946c:	2600      	movs	r6, #0
 801946e:	4c0d      	ldr	r4, [pc, #52]	; (80194a4 <__libc_init_array+0x3c>)
 8019470:	1b64      	subs	r4, r4, r5
 8019472:	10a4      	asrs	r4, r4, #2
 8019474:	42a6      	cmp	r6, r4
 8019476:	d109      	bne.n	801948c <__libc_init_array+0x24>
 8019478:	4d0b      	ldr	r5, [pc, #44]	; (80194a8 <__libc_init_array+0x40>)
 801947a:	2600      	movs	r6, #0
 801947c:	4c0b      	ldr	r4, [pc, #44]	; (80194ac <__libc_init_array+0x44>)
 801947e:	f001 fa0b 	bl	801a898 <_init>
 8019482:	1b64      	subs	r4, r4, r5
 8019484:	10a4      	asrs	r4, r4, #2
 8019486:	42a6      	cmp	r6, r4
 8019488:	d105      	bne.n	8019496 <__libc_init_array+0x2e>
 801948a:	bd70      	pop	{r4, r5, r6, pc}
 801948c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019490:	3601      	adds	r6, #1
 8019492:	4798      	blx	r3
 8019494:	e7ee      	b.n	8019474 <__libc_init_array+0xc>
 8019496:	f855 3b04 	ldr.w	r3, [r5], #4
 801949a:	3601      	adds	r6, #1
 801949c:	4798      	blx	r3
 801949e:	e7f2      	b.n	8019486 <__libc_init_array+0x1e>
 80194a0:	0801b134 	.word	0x0801b134
 80194a4:	0801b134 	.word	0x0801b134
 80194a8:	0801b134 	.word	0x0801b134
 80194ac:	0801b144 	.word	0x0801b144

080194b0 <__retarget_lock_init_recursive>:
 80194b0:	4770      	bx	lr

080194b2 <__retarget_lock_acquire_recursive>:
 80194b2:	4770      	bx	lr

080194b4 <__retarget_lock_release_recursive>:
 80194b4:	4770      	bx	lr

080194b6 <memcpy>:
 80194b6:	440a      	add	r2, r1
 80194b8:	1e43      	subs	r3, r0, #1
 80194ba:	4291      	cmp	r1, r2
 80194bc:	d100      	bne.n	80194c0 <memcpy+0xa>
 80194be:	4770      	bx	lr
 80194c0:	b510      	push	{r4, lr}
 80194c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80194c6:	4291      	cmp	r1, r2
 80194c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80194cc:	d1f9      	bne.n	80194c2 <memcpy+0xc>
 80194ce:	bd10      	pop	{r4, pc}

080194d0 <__assert_func>:
 80194d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80194d2:	4614      	mov	r4, r2
 80194d4:	461a      	mov	r2, r3
 80194d6:	4b09      	ldr	r3, [pc, #36]	; (80194fc <__assert_func+0x2c>)
 80194d8:	4605      	mov	r5, r0
 80194da:	681b      	ldr	r3, [r3, #0]
 80194dc:	68d8      	ldr	r0, [r3, #12]
 80194de:	b14c      	cbz	r4, 80194f4 <__assert_func+0x24>
 80194e0:	4b07      	ldr	r3, [pc, #28]	; (8019500 <__assert_func+0x30>)
 80194e2:	9100      	str	r1, [sp, #0]
 80194e4:	4907      	ldr	r1, [pc, #28]	; (8019504 <__assert_func+0x34>)
 80194e6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80194ea:	462b      	mov	r3, r5
 80194ec:	f000 fc24 	bl	8019d38 <fiprintf>
 80194f0:	f7ff fcc3 	bl	8018e7a <abort>
 80194f4:	4b04      	ldr	r3, [pc, #16]	; (8019508 <__assert_func+0x38>)
 80194f6:	461c      	mov	r4, r3
 80194f8:	e7f3      	b.n	80194e2 <__assert_func+0x12>
 80194fa:	bf00      	nop
 80194fc:	200000f8 	.word	0x200000f8
 8019500:	0801af9f 	.word	0x0801af9f
 8019504:	0801afac 	.word	0x0801afac
 8019508:	0801afda 	.word	0x0801afda

0801950c <_free_r>:
 801950c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801950e:	2900      	cmp	r1, #0
 8019510:	d043      	beq.n	801959a <_free_r+0x8e>
 8019512:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019516:	1f0c      	subs	r4, r1, #4
 8019518:	9001      	str	r0, [sp, #4]
 801951a:	2b00      	cmp	r3, #0
 801951c:	bfb8      	it	lt
 801951e:	18e4      	addlt	r4, r4, r3
 8019520:	f7ff fd62 	bl	8018fe8 <__malloc_lock>
 8019524:	4a1e      	ldr	r2, [pc, #120]	; (80195a0 <_free_r+0x94>)
 8019526:	9801      	ldr	r0, [sp, #4]
 8019528:	6813      	ldr	r3, [r2, #0]
 801952a:	b933      	cbnz	r3, 801953a <_free_r+0x2e>
 801952c:	6063      	str	r3, [r4, #4]
 801952e:	6014      	str	r4, [r2, #0]
 8019530:	b003      	add	sp, #12
 8019532:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019536:	f7ff bd5d 	b.w	8018ff4 <__malloc_unlock>
 801953a:	42a3      	cmp	r3, r4
 801953c:	d908      	bls.n	8019550 <_free_r+0x44>
 801953e:	6825      	ldr	r5, [r4, #0]
 8019540:	1961      	adds	r1, r4, r5
 8019542:	428b      	cmp	r3, r1
 8019544:	bf01      	itttt	eq
 8019546:	6819      	ldreq	r1, [r3, #0]
 8019548:	685b      	ldreq	r3, [r3, #4]
 801954a:	1949      	addeq	r1, r1, r5
 801954c:	6021      	streq	r1, [r4, #0]
 801954e:	e7ed      	b.n	801952c <_free_r+0x20>
 8019550:	461a      	mov	r2, r3
 8019552:	685b      	ldr	r3, [r3, #4]
 8019554:	b10b      	cbz	r3, 801955a <_free_r+0x4e>
 8019556:	42a3      	cmp	r3, r4
 8019558:	d9fa      	bls.n	8019550 <_free_r+0x44>
 801955a:	6811      	ldr	r1, [r2, #0]
 801955c:	1855      	adds	r5, r2, r1
 801955e:	42a5      	cmp	r5, r4
 8019560:	d10b      	bne.n	801957a <_free_r+0x6e>
 8019562:	6824      	ldr	r4, [r4, #0]
 8019564:	4421      	add	r1, r4
 8019566:	1854      	adds	r4, r2, r1
 8019568:	6011      	str	r1, [r2, #0]
 801956a:	42a3      	cmp	r3, r4
 801956c:	d1e0      	bne.n	8019530 <_free_r+0x24>
 801956e:	681c      	ldr	r4, [r3, #0]
 8019570:	685b      	ldr	r3, [r3, #4]
 8019572:	440c      	add	r4, r1
 8019574:	6053      	str	r3, [r2, #4]
 8019576:	6014      	str	r4, [r2, #0]
 8019578:	e7da      	b.n	8019530 <_free_r+0x24>
 801957a:	d902      	bls.n	8019582 <_free_r+0x76>
 801957c:	230c      	movs	r3, #12
 801957e:	6003      	str	r3, [r0, #0]
 8019580:	e7d6      	b.n	8019530 <_free_r+0x24>
 8019582:	6825      	ldr	r5, [r4, #0]
 8019584:	1961      	adds	r1, r4, r5
 8019586:	428b      	cmp	r3, r1
 8019588:	bf02      	ittt	eq
 801958a:	6819      	ldreq	r1, [r3, #0]
 801958c:	685b      	ldreq	r3, [r3, #4]
 801958e:	1949      	addeq	r1, r1, r5
 8019590:	6063      	str	r3, [r4, #4]
 8019592:	bf08      	it	eq
 8019594:	6021      	streq	r1, [r4, #0]
 8019596:	6054      	str	r4, [r2, #4]
 8019598:	e7ca      	b.n	8019530 <_free_r+0x24>
 801959a:	b003      	add	sp, #12
 801959c:	bd30      	pop	{r4, r5, pc}
 801959e:	bf00      	nop
 80195a0:	20009d5c 	.word	0x20009d5c

080195a4 <_sungetc_r>:
 80195a4:	b538      	push	{r3, r4, r5, lr}
 80195a6:	1c4b      	adds	r3, r1, #1
 80195a8:	4614      	mov	r4, r2
 80195aa:	d103      	bne.n	80195b4 <_sungetc_r+0x10>
 80195ac:	f04f 35ff 	mov.w	r5, #4294967295
 80195b0:	4628      	mov	r0, r5
 80195b2:	bd38      	pop	{r3, r4, r5, pc}
 80195b4:	8993      	ldrh	r3, [r2, #12]
 80195b6:	b2cd      	uxtb	r5, r1
 80195b8:	f023 0320 	bic.w	r3, r3, #32
 80195bc:	8193      	strh	r3, [r2, #12]
 80195be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80195c0:	6852      	ldr	r2, [r2, #4]
 80195c2:	b18b      	cbz	r3, 80195e8 <_sungetc_r+0x44>
 80195c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80195c6:	4293      	cmp	r3, r2
 80195c8:	dd08      	ble.n	80195dc <_sungetc_r+0x38>
 80195ca:	6823      	ldr	r3, [r4, #0]
 80195cc:	1e5a      	subs	r2, r3, #1
 80195ce:	6022      	str	r2, [r4, #0]
 80195d0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80195d4:	6863      	ldr	r3, [r4, #4]
 80195d6:	3301      	adds	r3, #1
 80195d8:	6063      	str	r3, [r4, #4]
 80195da:	e7e9      	b.n	80195b0 <_sungetc_r+0xc>
 80195dc:	4621      	mov	r1, r4
 80195de:	f000 fbf6 	bl	8019dce <__submore>
 80195e2:	2800      	cmp	r0, #0
 80195e4:	d0f1      	beq.n	80195ca <_sungetc_r+0x26>
 80195e6:	e7e1      	b.n	80195ac <_sungetc_r+0x8>
 80195e8:	6921      	ldr	r1, [r4, #16]
 80195ea:	6823      	ldr	r3, [r4, #0]
 80195ec:	b151      	cbz	r1, 8019604 <_sungetc_r+0x60>
 80195ee:	4299      	cmp	r1, r3
 80195f0:	d208      	bcs.n	8019604 <_sungetc_r+0x60>
 80195f2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80195f6:	42a9      	cmp	r1, r5
 80195f8:	d104      	bne.n	8019604 <_sungetc_r+0x60>
 80195fa:	3b01      	subs	r3, #1
 80195fc:	3201      	adds	r2, #1
 80195fe:	6023      	str	r3, [r4, #0]
 8019600:	6062      	str	r2, [r4, #4]
 8019602:	e7d5      	b.n	80195b0 <_sungetc_r+0xc>
 8019604:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8019608:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801960c:	6363      	str	r3, [r4, #52]	; 0x34
 801960e:	2303      	movs	r3, #3
 8019610:	63a3      	str	r3, [r4, #56]	; 0x38
 8019612:	4623      	mov	r3, r4
 8019614:	f803 5f46 	strb.w	r5, [r3, #70]!
 8019618:	6023      	str	r3, [r4, #0]
 801961a:	2301      	movs	r3, #1
 801961c:	e7dc      	b.n	80195d8 <_sungetc_r+0x34>

0801961e <__ssrefill_r>:
 801961e:	b510      	push	{r4, lr}
 8019620:	460c      	mov	r4, r1
 8019622:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019624:	b169      	cbz	r1, 8019642 <__ssrefill_r+0x24>
 8019626:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801962a:	4299      	cmp	r1, r3
 801962c:	d001      	beq.n	8019632 <__ssrefill_r+0x14>
 801962e:	f7ff ff6d 	bl	801950c <_free_r>
 8019632:	2000      	movs	r0, #0
 8019634:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019636:	6360      	str	r0, [r4, #52]	; 0x34
 8019638:	6063      	str	r3, [r4, #4]
 801963a:	b113      	cbz	r3, 8019642 <__ssrefill_r+0x24>
 801963c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801963e:	6023      	str	r3, [r4, #0]
 8019640:	bd10      	pop	{r4, pc}
 8019642:	6923      	ldr	r3, [r4, #16]
 8019644:	f04f 30ff 	mov.w	r0, #4294967295
 8019648:	6023      	str	r3, [r4, #0]
 801964a:	2300      	movs	r3, #0
 801964c:	6063      	str	r3, [r4, #4]
 801964e:	89a3      	ldrh	r3, [r4, #12]
 8019650:	f043 0320 	orr.w	r3, r3, #32
 8019654:	81a3      	strh	r3, [r4, #12]
 8019656:	e7f3      	b.n	8019640 <__ssrefill_r+0x22>

08019658 <__ssvfiscanf_r>:
 8019658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801965c:	460c      	mov	r4, r1
 801965e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8019662:	2100      	movs	r1, #0
 8019664:	4606      	mov	r6, r0
 8019666:	f10d 0804 	add.w	r8, sp, #4
 801966a:	4fa6      	ldr	r7, [pc, #664]	; (8019904 <__ssvfiscanf_r+0x2ac>)
 801966c:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 8019910 <__ssvfiscanf_r+0x2b8>
 8019670:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8019674:	9300      	str	r3, [sp, #0]
 8019676:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801967a:	49a3      	ldr	r1, [pc, #652]	; (8019908 <__ssvfiscanf_r+0x2b0>)
 801967c:	91a0      	str	r1, [sp, #640]	; 0x280
 801967e:	49a3      	ldr	r1, [pc, #652]	; (801990c <__ssvfiscanf_r+0x2b4>)
 8019680:	91a1      	str	r1, [sp, #644]	; 0x284
 8019682:	7813      	ldrb	r3, [r2, #0]
 8019684:	2b00      	cmp	r3, #0
 8019686:	f000 815a 	beq.w	801993e <__ssvfiscanf_r+0x2e6>
 801968a:	5cf9      	ldrb	r1, [r7, r3]
 801968c:	1c55      	adds	r5, r2, #1
 801968e:	f011 0108 	ands.w	r1, r1, #8
 8019692:	d019      	beq.n	80196c8 <__ssvfiscanf_r+0x70>
 8019694:	6863      	ldr	r3, [r4, #4]
 8019696:	2b00      	cmp	r3, #0
 8019698:	dd0f      	ble.n	80196ba <__ssvfiscanf_r+0x62>
 801969a:	6823      	ldr	r3, [r4, #0]
 801969c:	781a      	ldrb	r2, [r3, #0]
 801969e:	5cba      	ldrb	r2, [r7, r2]
 80196a0:	0712      	lsls	r2, r2, #28
 80196a2:	d401      	bmi.n	80196a8 <__ssvfiscanf_r+0x50>
 80196a4:	462a      	mov	r2, r5
 80196a6:	e7ec      	b.n	8019682 <__ssvfiscanf_r+0x2a>
 80196a8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80196aa:	3301      	adds	r3, #1
 80196ac:	3201      	adds	r2, #1
 80196ae:	6023      	str	r3, [r4, #0]
 80196b0:	9245      	str	r2, [sp, #276]	; 0x114
 80196b2:	6862      	ldr	r2, [r4, #4]
 80196b4:	3a01      	subs	r2, #1
 80196b6:	6062      	str	r2, [r4, #4]
 80196b8:	e7ec      	b.n	8019694 <__ssvfiscanf_r+0x3c>
 80196ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80196bc:	4621      	mov	r1, r4
 80196be:	4630      	mov	r0, r6
 80196c0:	4798      	blx	r3
 80196c2:	2800      	cmp	r0, #0
 80196c4:	d0e9      	beq.n	801969a <__ssvfiscanf_r+0x42>
 80196c6:	e7ed      	b.n	80196a4 <__ssvfiscanf_r+0x4c>
 80196c8:	2b25      	cmp	r3, #37	; 0x25
 80196ca:	d012      	beq.n	80196f2 <__ssvfiscanf_r+0x9a>
 80196cc:	469a      	mov	sl, r3
 80196ce:	6863      	ldr	r3, [r4, #4]
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	f340 8092 	ble.w	80197fa <__ssvfiscanf_r+0x1a2>
 80196d6:	6822      	ldr	r2, [r4, #0]
 80196d8:	7813      	ldrb	r3, [r2, #0]
 80196da:	4553      	cmp	r3, sl
 80196dc:	f040 812f 	bne.w	801993e <__ssvfiscanf_r+0x2e6>
 80196e0:	6863      	ldr	r3, [r4, #4]
 80196e2:	3201      	adds	r2, #1
 80196e4:	3b01      	subs	r3, #1
 80196e6:	6022      	str	r2, [r4, #0]
 80196e8:	6063      	str	r3, [r4, #4]
 80196ea:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80196ec:	3301      	adds	r3, #1
 80196ee:	9345      	str	r3, [sp, #276]	; 0x114
 80196f0:	e7d8      	b.n	80196a4 <__ssvfiscanf_r+0x4c>
 80196f2:	9141      	str	r1, [sp, #260]	; 0x104
 80196f4:	9143      	str	r1, [sp, #268]	; 0x10c
 80196f6:	7853      	ldrb	r3, [r2, #1]
 80196f8:	2b2a      	cmp	r3, #42	; 0x2a
 80196fa:	bf04      	itt	eq
 80196fc:	2310      	moveq	r3, #16
 80196fe:	1c95      	addeq	r5, r2, #2
 8019700:	f04f 020a 	mov.w	r2, #10
 8019704:	bf08      	it	eq
 8019706:	9341      	streq	r3, [sp, #260]	; 0x104
 8019708:	46aa      	mov	sl, r5
 801970a:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801970e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8019712:	2b09      	cmp	r3, #9
 8019714:	d91c      	bls.n	8019750 <__ssvfiscanf_r+0xf8>
 8019716:	2203      	movs	r2, #3
 8019718:	487d      	ldr	r0, [pc, #500]	; (8019910 <__ssvfiscanf_r+0x2b8>)
 801971a:	f000 fb8f 	bl	8019e3c <memchr>
 801971e:	b138      	cbz	r0, 8019730 <__ssvfiscanf_r+0xd8>
 8019720:	eba0 0009 	sub.w	r0, r0, r9
 8019724:	2301      	movs	r3, #1
 8019726:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019728:	4655      	mov	r5, sl
 801972a:	4083      	lsls	r3, r0
 801972c:	4313      	orrs	r3, r2
 801972e:	9341      	str	r3, [sp, #260]	; 0x104
 8019730:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019734:	2b78      	cmp	r3, #120	; 0x78
 8019736:	d806      	bhi.n	8019746 <__ssvfiscanf_r+0xee>
 8019738:	2b57      	cmp	r3, #87	; 0x57
 801973a:	d810      	bhi.n	801975e <__ssvfiscanf_r+0x106>
 801973c:	2b25      	cmp	r3, #37	; 0x25
 801973e:	d0c5      	beq.n	80196cc <__ssvfiscanf_r+0x74>
 8019740:	d856      	bhi.n	80197f0 <__ssvfiscanf_r+0x198>
 8019742:	2b00      	cmp	r3, #0
 8019744:	d064      	beq.n	8019810 <__ssvfiscanf_r+0x1b8>
 8019746:	2303      	movs	r3, #3
 8019748:	9347      	str	r3, [sp, #284]	; 0x11c
 801974a:	230a      	movs	r3, #10
 801974c:	9342      	str	r3, [sp, #264]	; 0x108
 801974e:	e075      	b.n	801983c <__ssvfiscanf_r+0x1e4>
 8019750:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8019752:	4655      	mov	r5, sl
 8019754:	fb02 1103 	mla	r1, r2, r3, r1
 8019758:	3930      	subs	r1, #48	; 0x30
 801975a:	9143      	str	r1, [sp, #268]	; 0x10c
 801975c:	e7d4      	b.n	8019708 <__ssvfiscanf_r+0xb0>
 801975e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8019762:	2a20      	cmp	r2, #32
 8019764:	d8ef      	bhi.n	8019746 <__ssvfiscanf_r+0xee>
 8019766:	a101      	add	r1, pc, #4	; (adr r1, 801976c <__ssvfiscanf_r+0x114>)
 8019768:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801976c:	0801981f 	.word	0x0801981f
 8019770:	08019747 	.word	0x08019747
 8019774:	08019747 	.word	0x08019747
 8019778:	0801987d 	.word	0x0801987d
 801977c:	08019747 	.word	0x08019747
 8019780:	08019747 	.word	0x08019747
 8019784:	08019747 	.word	0x08019747
 8019788:	08019747 	.word	0x08019747
 801978c:	08019747 	.word	0x08019747
 8019790:	08019747 	.word	0x08019747
 8019794:	08019747 	.word	0x08019747
 8019798:	08019893 	.word	0x08019893
 801979c:	08019879 	.word	0x08019879
 80197a0:	080197f7 	.word	0x080197f7
 80197a4:	080197f7 	.word	0x080197f7
 80197a8:	080197f7 	.word	0x080197f7
 80197ac:	08019747 	.word	0x08019747
 80197b0:	08019835 	.word	0x08019835
 80197b4:	08019747 	.word	0x08019747
 80197b8:	08019747 	.word	0x08019747
 80197bc:	08019747 	.word	0x08019747
 80197c0:	08019747 	.word	0x08019747
 80197c4:	080198a3 	.word	0x080198a3
 80197c8:	08019871 	.word	0x08019871
 80197cc:	08019817 	.word	0x08019817
 80197d0:	08019747 	.word	0x08019747
 80197d4:	08019747 	.word	0x08019747
 80197d8:	0801989f 	.word	0x0801989f
 80197dc:	08019747 	.word	0x08019747
 80197e0:	08019879 	.word	0x08019879
 80197e4:	08019747 	.word	0x08019747
 80197e8:	08019747 	.word	0x08019747
 80197ec:	0801981f 	.word	0x0801981f
 80197f0:	3b45      	subs	r3, #69	; 0x45
 80197f2:	2b02      	cmp	r3, #2
 80197f4:	d8a7      	bhi.n	8019746 <__ssvfiscanf_r+0xee>
 80197f6:	2305      	movs	r3, #5
 80197f8:	e01f      	b.n	801983a <__ssvfiscanf_r+0x1e2>
 80197fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80197fc:	4621      	mov	r1, r4
 80197fe:	4630      	mov	r0, r6
 8019800:	4798      	blx	r3
 8019802:	2800      	cmp	r0, #0
 8019804:	f43f af67 	beq.w	80196d6 <__ssvfiscanf_r+0x7e>
 8019808:	9844      	ldr	r0, [sp, #272]	; 0x110
 801980a:	2800      	cmp	r0, #0
 801980c:	f040 808d 	bne.w	801992a <__ssvfiscanf_r+0x2d2>
 8019810:	f04f 30ff 	mov.w	r0, #4294967295
 8019814:	e08f      	b.n	8019936 <__ssvfiscanf_r+0x2de>
 8019816:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019818:	f042 0220 	orr.w	r2, r2, #32
 801981c:	9241      	str	r2, [sp, #260]	; 0x104
 801981e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019820:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019824:	9241      	str	r2, [sp, #260]	; 0x104
 8019826:	2210      	movs	r2, #16
 8019828:	2b6f      	cmp	r3, #111	; 0x6f
 801982a:	9242      	str	r2, [sp, #264]	; 0x108
 801982c:	bf34      	ite	cc
 801982e:	2303      	movcc	r3, #3
 8019830:	2304      	movcs	r3, #4
 8019832:	e002      	b.n	801983a <__ssvfiscanf_r+0x1e2>
 8019834:	2300      	movs	r3, #0
 8019836:	9342      	str	r3, [sp, #264]	; 0x108
 8019838:	2303      	movs	r3, #3
 801983a:	9347      	str	r3, [sp, #284]	; 0x11c
 801983c:	6863      	ldr	r3, [r4, #4]
 801983e:	2b00      	cmp	r3, #0
 8019840:	dd3e      	ble.n	80198c0 <__ssvfiscanf_r+0x268>
 8019842:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019844:	0659      	lsls	r1, r3, #25
 8019846:	d404      	bmi.n	8019852 <__ssvfiscanf_r+0x1fa>
 8019848:	6823      	ldr	r3, [r4, #0]
 801984a:	781a      	ldrb	r2, [r3, #0]
 801984c:	5cba      	ldrb	r2, [r7, r2]
 801984e:	0712      	lsls	r2, r2, #28
 8019850:	d43d      	bmi.n	80198ce <__ssvfiscanf_r+0x276>
 8019852:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8019854:	2b02      	cmp	r3, #2
 8019856:	dc4c      	bgt.n	80198f2 <__ssvfiscanf_r+0x29a>
 8019858:	466b      	mov	r3, sp
 801985a:	4622      	mov	r2, r4
 801985c:	a941      	add	r1, sp, #260	; 0x104
 801985e:	4630      	mov	r0, r6
 8019860:	f000 f872 	bl	8019948 <_scanf_chars>
 8019864:	2801      	cmp	r0, #1
 8019866:	d06a      	beq.n	801993e <__ssvfiscanf_r+0x2e6>
 8019868:	2802      	cmp	r0, #2
 801986a:	f47f af1b 	bne.w	80196a4 <__ssvfiscanf_r+0x4c>
 801986e:	e7cb      	b.n	8019808 <__ssvfiscanf_r+0x1b0>
 8019870:	2308      	movs	r3, #8
 8019872:	9342      	str	r3, [sp, #264]	; 0x108
 8019874:	2304      	movs	r3, #4
 8019876:	e7e0      	b.n	801983a <__ssvfiscanf_r+0x1e2>
 8019878:	220a      	movs	r2, #10
 801987a:	e7d5      	b.n	8019828 <__ssvfiscanf_r+0x1d0>
 801987c:	4629      	mov	r1, r5
 801987e:	4640      	mov	r0, r8
 8019880:	f000 fa6c 	bl	8019d5c <__sccl>
 8019884:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019886:	4605      	mov	r5, r0
 8019888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801988c:	9341      	str	r3, [sp, #260]	; 0x104
 801988e:	2301      	movs	r3, #1
 8019890:	e7d3      	b.n	801983a <__ssvfiscanf_r+0x1e2>
 8019892:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019898:	9341      	str	r3, [sp, #260]	; 0x104
 801989a:	2300      	movs	r3, #0
 801989c:	e7cd      	b.n	801983a <__ssvfiscanf_r+0x1e2>
 801989e:	2302      	movs	r3, #2
 80198a0:	e7cb      	b.n	801983a <__ssvfiscanf_r+0x1e2>
 80198a2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80198a4:	06c3      	lsls	r3, r0, #27
 80198a6:	f53f aefd 	bmi.w	80196a4 <__ssvfiscanf_r+0x4c>
 80198aa:	9b00      	ldr	r3, [sp, #0]
 80198ac:	07c0      	lsls	r0, r0, #31
 80198ae:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80198b0:	f103 0104 	add.w	r1, r3, #4
 80198b4:	9100      	str	r1, [sp, #0]
 80198b6:	681b      	ldr	r3, [r3, #0]
 80198b8:	bf4c      	ite	mi
 80198ba:	801a      	strhmi	r2, [r3, #0]
 80198bc:	601a      	strpl	r2, [r3, #0]
 80198be:	e6f1      	b.n	80196a4 <__ssvfiscanf_r+0x4c>
 80198c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80198c2:	4621      	mov	r1, r4
 80198c4:	4630      	mov	r0, r6
 80198c6:	4798      	blx	r3
 80198c8:	2800      	cmp	r0, #0
 80198ca:	d0ba      	beq.n	8019842 <__ssvfiscanf_r+0x1ea>
 80198cc:	e79c      	b.n	8019808 <__ssvfiscanf_r+0x1b0>
 80198ce:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80198d0:	3201      	adds	r2, #1
 80198d2:	9245      	str	r2, [sp, #276]	; 0x114
 80198d4:	6862      	ldr	r2, [r4, #4]
 80198d6:	3a01      	subs	r2, #1
 80198d8:	2a00      	cmp	r2, #0
 80198da:	6062      	str	r2, [r4, #4]
 80198dc:	dd02      	ble.n	80198e4 <__ssvfiscanf_r+0x28c>
 80198de:	3301      	adds	r3, #1
 80198e0:	6023      	str	r3, [r4, #0]
 80198e2:	e7b1      	b.n	8019848 <__ssvfiscanf_r+0x1f0>
 80198e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80198e6:	4621      	mov	r1, r4
 80198e8:	4630      	mov	r0, r6
 80198ea:	4798      	blx	r3
 80198ec:	2800      	cmp	r0, #0
 80198ee:	d0ab      	beq.n	8019848 <__ssvfiscanf_r+0x1f0>
 80198f0:	e78a      	b.n	8019808 <__ssvfiscanf_r+0x1b0>
 80198f2:	2b04      	cmp	r3, #4
 80198f4:	dc0e      	bgt.n	8019914 <__ssvfiscanf_r+0x2bc>
 80198f6:	466b      	mov	r3, sp
 80198f8:	4622      	mov	r2, r4
 80198fa:	a941      	add	r1, sp, #260	; 0x104
 80198fc:	4630      	mov	r0, r6
 80198fe:	f000 f87d 	bl	80199fc <_scanf_i>
 8019902:	e7af      	b.n	8019864 <__ssvfiscanf_r+0x20c>
 8019904:	0801affb 	.word	0x0801affb
 8019908:	080195a5 	.word	0x080195a5
 801990c:	0801961f 	.word	0x0801961f
 8019910:	0801afdb 	.word	0x0801afdb
 8019914:	4b0b      	ldr	r3, [pc, #44]	; (8019944 <__ssvfiscanf_r+0x2ec>)
 8019916:	2b00      	cmp	r3, #0
 8019918:	f43f aec4 	beq.w	80196a4 <__ssvfiscanf_r+0x4c>
 801991c:	466b      	mov	r3, sp
 801991e:	4622      	mov	r2, r4
 8019920:	a941      	add	r1, sp, #260	; 0x104
 8019922:	4630      	mov	r0, r6
 8019924:	f3af 8000 	nop.w
 8019928:	e79c      	b.n	8019864 <__ssvfiscanf_r+0x20c>
 801992a:	89a3      	ldrh	r3, [r4, #12]
 801992c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019930:	bf18      	it	ne
 8019932:	f04f 30ff 	movne.w	r0, #4294967295
 8019936:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801993a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801993e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019940:	e7f9      	b.n	8019936 <__ssvfiscanf_r+0x2de>
 8019942:	bf00      	nop
 8019944:	00000000 	.word	0x00000000

08019948 <_scanf_chars>:
 8019948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801994c:	4615      	mov	r5, r2
 801994e:	688a      	ldr	r2, [r1, #8]
 8019950:	4680      	mov	r8, r0
 8019952:	460c      	mov	r4, r1
 8019954:	b932      	cbnz	r2, 8019964 <_scanf_chars+0x1c>
 8019956:	698a      	ldr	r2, [r1, #24]
 8019958:	2a00      	cmp	r2, #0
 801995a:	bf0c      	ite	eq
 801995c:	2201      	moveq	r2, #1
 801995e:	f04f 32ff 	movne.w	r2, #4294967295
 8019962:	608a      	str	r2, [r1, #8]
 8019964:	6822      	ldr	r2, [r4, #0]
 8019966:	2700      	movs	r7, #0
 8019968:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80199f8 <_scanf_chars+0xb0>
 801996c:	06d1      	lsls	r1, r2, #27
 801996e:	bf5f      	itttt	pl
 8019970:	681a      	ldrpl	r2, [r3, #0]
 8019972:	1d11      	addpl	r1, r2, #4
 8019974:	6019      	strpl	r1, [r3, #0]
 8019976:	6816      	ldrpl	r6, [r2, #0]
 8019978:	69a0      	ldr	r0, [r4, #24]
 801997a:	b188      	cbz	r0, 80199a0 <_scanf_chars+0x58>
 801997c:	2801      	cmp	r0, #1
 801997e:	d107      	bne.n	8019990 <_scanf_chars+0x48>
 8019980:	682a      	ldr	r2, [r5, #0]
 8019982:	7811      	ldrb	r1, [r2, #0]
 8019984:	6962      	ldr	r2, [r4, #20]
 8019986:	5c52      	ldrb	r2, [r2, r1]
 8019988:	b952      	cbnz	r2, 80199a0 <_scanf_chars+0x58>
 801998a:	2f00      	cmp	r7, #0
 801998c:	d031      	beq.n	80199f2 <_scanf_chars+0xaa>
 801998e:	e022      	b.n	80199d6 <_scanf_chars+0x8e>
 8019990:	2802      	cmp	r0, #2
 8019992:	d120      	bne.n	80199d6 <_scanf_chars+0x8e>
 8019994:	682b      	ldr	r3, [r5, #0]
 8019996:	781b      	ldrb	r3, [r3, #0]
 8019998:	f819 3003 	ldrb.w	r3, [r9, r3]
 801999c:	071b      	lsls	r3, r3, #28
 801999e:	d41a      	bmi.n	80199d6 <_scanf_chars+0x8e>
 80199a0:	6823      	ldr	r3, [r4, #0]
 80199a2:	3701      	adds	r7, #1
 80199a4:	06da      	lsls	r2, r3, #27
 80199a6:	bf5e      	ittt	pl
 80199a8:	682b      	ldrpl	r3, [r5, #0]
 80199aa:	781b      	ldrbpl	r3, [r3, #0]
 80199ac:	f806 3b01 	strbpl.w	r3, [r6], #1
 80199b0:	682a      	ldr	r2, [r5, #0]
 80199b2:	686b      	ldr	r3, [r5, #4]
 80199b4:	3201      	adds	r2, #1
 80199b6:	3b01      	subs	r3, #1
 80199b8:	602a      	str	r2, [r5, #0]
 80199ba:	68a2      	ldr	r2, [r4, #8]
 80199bc:	606b      	str	r3, [r5, #4]
 80199be:	3a01      	subs	r2, #1
 80199c0:	60a2      	str	r2, [r4, #8]
 80199c2:	b142      	cbz	r2, 80199d6 <_scanf_chars+0x8e>
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	dcd7      	bgt.n	8019978 <_scanf_chars+0x30>
 80199c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80199cc:	4629      	mov	r1, r5
 80199ce:	4640      	mov	r0, r8
 80199d0:	4798      	blx	r3
 80199d2:	2800      	cmp	r0, #0
 80199d4:	d0d0      	beq.n	8019978 <_scanf_chars+0x30>
 80199d6:	6823      	ldr	r3, [r4, #0]
 80199d8:	f013 0310 	ands.w	r3, r3, #16
 80199dc:	d105      	bne.n	80199ea <_scanf_chars+0xa2>
 80199de:	68e2      	ldr	r2, [r4, #12]
 80199e0:	3201      	adds	r2, #1
 80199e2:	60e2      	str	r2, [r4, #12]
 80199e4:	69a2      	ldr	r2, [r4, #24]
 80199e6:	b102      	cbz	r2, 80199ea <_scanf_chars+0xa2>
 80199e8:	7033      	strb	r3, [r6, #0]
 80199ea:	6923      	ldr	r3, [r4, #16]
 80199ec:	2000      	movs	r0, #0
 80199ee:	443b      	add	r3, r7
 80199f0:	6123      	str	r3, [r4, #16]
 80199f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80199f6:	bf00      	nop
 80199f8:	0801affb 	.word	0x0801affb

080199fc <_scanf_i>:
 80199fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a00:	4698      	mov	r8, r3
 8019a02:	b087      	sub	sp, #28
 8019a04:	4b72      	ldr	r3, [pc, #456]	; (8019bd0 <_scanf_i+0x1d4>)
 8019a06:	460c      	mov	r4, r1
 8019a08:	4682      	mov	sl, r0
 8019a0a:	4616      	mov	r6, r2
 8019a0c:	4627      	mov	r7, r4
 8019a0e:	f04f 0b00 	mov.w	fp, #0
 8019a12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019a16:	ab03      	add	r3, sp, #12
 8019a18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019a1c:	4b6d      	ldr	r3, [pc, #436]	; (8019bd4 <_scanf_i+0x1d8>)
 8019a1e:	69a1      	ldr	r1, [r4, #24]
 8019a20:	4a6d      	ldr	r2, [pc, #436]	; (8019bd8 <_scanf_i+0x1dc>)
 8019a22:	2903      	cmp	r1, #3
 8019a24:	bf18      	it	ne
 8019a26:	461a      	movne	r2, r3
 8019a28:	68a3      	ldr	r3, [r4, #8]
 8019a2a:	9201      	str	r2, [sp, #4]
 8019a2c:	1e5a      	subs	r2, r3, #1
 8019a2e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8019a32:	bf89      	itett	hi
 8019a34:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019a38:	f04f 0900 	movls.w	r9, #0
 8019a3c:	eb03 0905 	addhi.w	r9, r3, r5
 8019a40:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019a44:	bf88      	it	hi
 8019a46:	60a3      	strhi	r3, [r4, #8]
 8019a48:	f857 3b1c 	ldr.w	r3, [r7], #28
 8019a4c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8019a50:	463d      	mov	r5, r7
 8019a52:	6023      	str	r3, [r4, #0]
 8019a54:	6831      	ldr	r1, [r6, #0]
 8019a56:	ab03      	add	r3, sp, #12
 8019a58:	2202      	movs	r2, #2
 8019a5a:	7809      	ldrb	r1, [r1, #0]
 8019a5c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8019a60:	f000 f9ec 	bl	8019e3c <memchr>
 8019a64:	b328      	cbz	r0, 8019ab2 <_scanf_i+0xb6>
 8019a66:	f1bb 0f01 	cmp.w	fp, #1
 8019a6a:	d159      	bne.n	8019b20 <_scanf_i+0x124>
 8019a6c:	6862      	ldr	r2, [r4, #4]
 8019a6e:	b92a      	cbnz	r2, 8019a7c <_scanf_i+0x80>
 8019a70:	6822      	ldr	r2, [r4, #0]
 8019a72:	2308      	movs	r3, #8
 8019a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019a78:	6063      	str	r3, [r4, #4]
 8019a7a:	6022      	str	r2, [r4, #0]
 8019a7c:	6822      	ldr	r2, [r4, #0]
 8019a7e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019a82:	6022      	str	r2, [r4, #0]
 8019a84:	68a2      	ldr	r2, [r4, #8]
 8019a86:	1e51      	subs	r1, r2, #1
 8019a88:	60a1      	str	r1, [r4, #8]
 8019a8a:	b192      	cbz	r2, 8019ab2 <_scanf_i+0xb6>
 8019a8c:	6832      	ldr	r2, [r6, #0]
 8019a8e:	1c51      	adds	r1, r2, #1
 8019a90:	6031      	str	r1, [r6, #0]
 8019a92:	7812      	ldrb	r2, [r2, #0]
 8019a94:	f805 2b01 	strb.w	r2, [r5], #1
 8019a98:	6872      	ldr	r2, [r6, #4]
 8019a9a:	3a01      	subs	r2, #1
 8019a9c:	2a00      	cmp	r2, #0
 8019a9e:	6072      	str	r2, [r6, #4]
 8019aa0:	dc07      	bgt.n	8019ab2 <_scanf_i+0xb6>
 8019aa2:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8019aa6:	4631      	mov	r1, r6
 8019aa8:	4650      	mov	r0, sl
 8019aaa:	4790      	blx	r2
 8019aac:	2800      	cmp	r0, #0
 8019aae:	f040 8085 	bne.w	8019bbc <_scanf_i+0x1c0>
 8019ab2:	f10b 0b01 	add.w	fp, fp, #1
 8019ab6:	f1bb 0f03 	cmp.w	fp, #3
 8019aba:	d1cb      	bne.n	8019a54 <_scanf_i+0x58>
 8019abc:	6863      	ldr	r3, [r4, #4]
 8019abe:	b90b      	cbnz	r3, 8019ac4 <_scanf_i+0xc8>
 8019ac0:	230a      	movs	r3, #10
 8019ac2:	6063      	str	r3, [r4, #4]
 8019ac4:	6863      	ldr	r3, [r4, #4]
 8019ac6:	f04f 0b00 	mov.w	fp, #0
 8019aca:	4944      	ldr	r1, [pc, #272]	; (8019bdc <_scanf_i+0x1e0>)
 8019acc:	6960      	ldr	r0, [r4, #20]
 8019ace:	1ac9      	subs	r1, r1, r3
 8019ad0:	f000 f944 	bl	8019d5c <__sccl>
 8019ad4:	68a3      	ldr	r3, [r4, #8]
 8019ad6:	6822      	ldr	r2, [r4, #0]
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	d03d      	beq.n	8019b58 <_scanf_i+0x15c>
 8019adc:	6831      	ldr	r1, [r6, #0]
 8019ade:	6960      	ldr	r0, [r4, #20]
 8019ae0:	f891 c000 	ldrb.w	ip, [r1]
 8019ae4:	f810 000c 	ldrb.w	r0, [r0, ip]
 8019ae8:	2800      	cmp	r0, #0
 8019aea:	d035      	beq.n	8019b58 <_scanf_i+0x15c>
 8019aec:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8019af0:	d124      	bne.n	8019b3c <_scanf_i+0x140>
 8019af2:	0510      	lsls	r0, r2, #20
 8019af4:	d522      	bpl.n	8019b3c <_scanf_i+0x140>
 8019af6:	f10b 0b01 	add.w	fp, fp, #1
 8019afa:	f1b9 0f00 	cmp.w	r9, #0
 8019afe:	d003      	beq.n	8019b08 <_scanf_i+0x10c>
 8019b00:	3301      	adds	r3, #1
 8019b02:	f109 39ff 	add.w	r9, r9, #4294967295
 8019b06:	60a3      	str	r3, [r4, #8]
 8019b08:	6873      	ldr	r3, [r6, #4]
 8019b0a:	3b01      	subs	r3, #1
 8019b0c:	2b00      	cmp	r3, #0
 8019b0e:	6073      	str	r3, [r6, #4]
 8019b10:	dd1b      	ble.n	8019b4a <_scanf_i+0x14e>
 8019b12:	6833      	ldr	r3, [r6, #0]
 8019b14:	3301      	adds	r3, #1
 8019b16:	6033      	str	r3, [r6, #0]
 8019b18:	68a3      	ldr	r3, [r4, #8]
 8019b1a:	3b01      	subs	r3, #1
 8019b1c:	60a3      	str	r3, [r4, #8]
 8019b1e:	e7d9      	b.n	8019ad4 <_scanf_i+0xd8>
 8019b20:	f1bb 0f02 	cmp.w	fp, #2
 8019b24:	d1ae      	bne.n	8019a84 <_scanf_i+0x88>
 8019b26:	6822      	ldr	r2, [r4, #0]
 8019b28:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019b2c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019b30:	d1bf      	bne.n	8019ab2 <_scanf_i+0xb6>
 8019b32:	2310      	movs	r3, #16
 8019b34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019b38:	6063      	str	r3, [r4, #4]
 8019b3a:	e7a2      	b.n	8019a82 <_scanf_i+0x86>
 8019b3c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019b40:	6022      	str	r2, [r4, #0]
 8019b42:	780b      	ldrb	r3, [r1, #0]
 8019b44:	f805 3b01 	strb.w	r3, [r5], #1
 8019b48:	e7de      	b.n	8019b08 <_scanf_i+0x10c>
 8019b4a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019b4e:	4631      	mov	r1, r6
 8019b50:	4650      	mov	r0, sl
 8019b52:	4798      	blx	r3
 8019b54:	2800      	cmp	r0, #0
 8019b56:	d0df      	beq.n	8019b18 <_scanf_i+0x11c>
 8019b58:	6823      	ldr	r3, [r4, #0]
 8019b5a:	05d9      	lsls	r1, r3, #23
 8019b5c:	d50d      	bpl.n	8019b7a <_scanf_i+0x17e>
 8019b5e:	42bd      	cmp	r5, r7
 8019b60:	d909      	bls.n	8019b76 <_scanf_i+0x17a>
 8019b62:	f105 39ff 	add.w	r9, r5, #4294967295
 8019b66:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8019b6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019b6e:	4632      	mov	r2, r6
 8019b70:	464d      	mov	r5, r9
 8019b72:	4650      	mov	r0, sl
 8019b74:	4798      	blx	r3
 8019b76:	42bd      	cmp	r5, r7
 8019b78:	d028      	beq.n	8019bcc <_scanf_i+0x1d0>
 8019b7a:	6822      	ldr	r2, [r4, #0]
 8019b7c:	f012 0210 	ands.w	r2, r2, #16
 8019b80:	d113      	bne.n	8019baa <_scanf_i+0x1ae>
 8019b82:	702a      	strb	r2, [r5, #0]
 8019b84:	4639      	mov	r1, r7
 8019b86:	6863      	ldr	r3, [r4, #4]
 8019b88:	4650      	mov	r0, sl
 8019b8a:	9e01      	ldr	r6, [sp, #4]
 8019b8c:	47b0      	blx	r6
 8019b8e:	f8d8 3000 	ldr.w	r3, [r8]
 8019b92:	6821      	ldr	r1, [r4, #0]
 8019b94:	1d1a      	adds	r2, r3, #4
 8019b96:	f011 0f20 	tst.w	r1, #32
 8019b9a:	f8c8 2000 	str.w	r2, [r8]
 8019b9e:	681b      	ldr	r3, [r3, #0]
 8019ba0:	d00f      	beq.n	8019bc2 <_scanf_i+0x1c6>
 8019ba2:	6018      	str	r0, [r3, #0]
 8019ba4:	68e3      	ldr	r3, [r4, #12]
 8019ba6:	3301      	adds	r3, #1
 8019ba8:	60e3      	str	r3, [r4, #12]
 8019baa:	1bed      	subs	r5, r5, r7
 8019bac:	6923      	ldr	r3, [r4, #16]
 8019bae:	2000      	movs	r0, #0
 8019bb0:	445d      	add	r5, fp
 8019bb2:	442b      	add	r3, r5
 8019bb4:	6123      	str	r3, [r4, #16]
 8019bb6:	b007      	add	sp, #28
 8019bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bbc:	f04f 0b00 	mov.w	fp, #0
 8019bc0:	e7ca      	b.n	8019b58 <_scanf_i+0x15c>
 8019bc2:	07ca      	lsls	r2, r1, #31
 8019bc4:	bf4c      	ite	mi
 8019bc6:	8018      	strhmi	r0, [r3, #0]
 8019bc8:	6018      	strpl	r0, [r3, #0]
 8019bca:	e7eb      	b.n	8019ba4 <_scanf_i+0x1a8>
 8019bcc:	2001      	movs	r0, #1
 8019bce:	e7f2      	b.n	8019bb6 <_scanf_i+0x1ba>
 8019bd0:	0801a8c8 	.word	0x0801a8c8
 8019bd4:	0801a0a5 	.word	0x0801a0a5
 8019bd8:	08019fbd 	.word	0x08019fbd
 8019bdc:	0801afef 	.word	0x0801afef

08019be0 <__sflush_r>:
 8019be0:	898a      	ldrh	r2, [r1, #12]
 8019be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019be6:	4605      	mov	r5, r0
 8019be8:	0710      	lsls	r0, r2, #28
 8019bea:	460c      	mov	r4, r1
 8019bec:	d458      	bmi.n	8019ca0 <__sflush_r+0xc0>
 8019bee:	684b      	ldr	r3, [r1, #4]
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	dc05      	bgt.n	8019c00 <__sflush_r+0x20>
 8019bf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	dc02      	bgt.n	8019c00 <__sflush_r+0x20>
 8019bfa:	2000      	movs	r0, #0
 8019bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019c02:	2e00      	cmp	r6, #0
 8019c04:	d0f9      	beq.n	8019bfa <__sflush_r+0x1a>
 8019c06:	2300      	movs	r3, #0
 8019c08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019c0c:	682f      	ldr	r7, [r5, #0]
 8019c0e:	6a21      	ldr	r1, [r4, #32]
 8019c10:	602b      	str	r3, [r5, #0]
 8019c12:	d032      	beq.n	8019c7a <__sflush_r+0x9a>
 8019c14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019c16:	89a3      	ldrh	r3, [r4, #12]
 8019c18:	075a      	lsls	r2, r3, #29
 8019c1a:	d505      	bpl.n	8019c28 <__sflush_r+0x48>
 8019c1c:	6863      	ldr	r3, [r4, #4]
 8019c1e:	1ac0      	subs	r0, r0, r3
 8019c20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019c22:	b10b      	cbz	r3, 8019c28 <__sflush_r+0x48>
 8019c24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019c26:	1ac0      	subs	r0, r0, r3
 8019c28:	2300      	movs	r3, #0
 8019c2a:	4602      	mov	r2, r0
 8019c2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019c2e:	4628      	mov	r0, r5
 8019c30:	6a21      	ldr	r1, [r4, #32]
 8019c32:	47b0      	blx	r6
 8019c34:	1c43      	adds	r3, r0, #1
 8019c36:	89a3      	ldrh	r3, [r4, #12]
 8019c38:	d106      	bne.n	8019c48 <__sflush_r+0x68>
 8019c3a:	6829      	ldr	r1, [r5, #0]
 8019c3c:	291d      	cmp	r1, #29
 8019c3e:	d82b      	bhi.n	8019c98 <__sflush_r+0xb8>
 8019c40:	4a28      	ldr	r2, [pc, #160]	; (8019ce4 <__sflush_r+0x104>)
 8019c42:	410a      	asrs	r2, r1
 8019c44:	07d6      	lsls	r6, r2, #31
 8019c46:	d427      	bmi.n	8019c98 <__sflush_r+0xb8>
 8019c48:	2200      	movs	r2, #0
 8019c4a:	04d9      	lsls	r1, r3, #19
 8019c4c:	6062      	str	r2, [r4, #4]
 8019c4e:	6922      	ldr	r2, [r4, #16]
 8019c50:	6022      	str	r2, [r4, #0]
 8019c52:	d504      	bpl.n	8019c5e <__sflush_r+0x7e>
 8019c54:	1c42      	adds	r2, r0, #1
 8019c56:	d101      	bne.n	8019c5c <__sflush_r+0x7c>
 8019c58:	682b      	ldr	r3, [r5, #0]
 8019c5a:	b903      	cbnz	r3, 8019c5e <__sflush_r+0x7e>
 8019c5c:	6560      	str	r0, [r4, #84]	; 0x54
 8019c5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019c60:	602f      	str	r7, [r5, #0]
 8019c62:	2900      	cmp	r1, #0
 8019c64:	d0c9      	beq.n	8019bfa <__sflush_r+0x1a>
 8019c66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019c6a:	4299      	cmp	r1, r3
 8019c6c:	d002      	beq.n	8019c74 <__sflush_r+0x94>
 8019c6e:	4628      	mov	r0, r5
 8019c70:	f7ff fc4c 	bl	801950c <_free_r>
 8019c74:	2000      	movs	r0, #0
 8019c76:	6360      	str	r0, [r4, #52]	; 0x34
 8019c78:	e7c0      	b.n	8019bfc <__sflush_r+0x1c>
 8019c7a:	2301      	movs	r3, #1
 8019c7c:	4628      	mov	r0, r5
 8019c7e:	47b0      	blx	r6
 8019c80:	1c41      	adds	r1, r0, #1
 8019c82:	d1c8      	bne.n	8019c16 <__sflush_r+0x36>
 8019c84:	682b      	ldr	r3, [r5, #0]
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	d0c5      	beq.n	8019c16 <__sflush_r+0x36>
 8019c8a:	2b1d      	cmp	r3, #29
 8019c8c:	d001      	beq.n	8019c92 <__sflush_r+0xb2>
 8019c8e:	2b16      	cmp	r3, #22
 8019c90:	d101      	bne.n	8019c96 <__sflush_r+0xb6>
 8019c92:	602f      	str	r7, [r5, #0]
 8019c94:	e7b1      	b.n	8019bfa <__sflush_r+0x1a>
 8019c96:	89a3      	ldrh	r3, [r4, #12]
 8019c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019c9c:	81a3      	strh	r3, [r4, #12]
 8019c9e:	e7ad      	b.n	8019bfc <__sflush_r+0x1c>
 8019ca0:	690f      	ldr	r7, [r1, #16]
 8019ca2:	2f00      	cmp	r7, #0
 8019ca4:	d0a9      	beq.n	8019bfa <__sflush_r+0x1a>
 8019ca6:	0793      	lsls	r3, r2, #30
 8019ca8:	680e      	ldr	r6, [r1, #0]
 8019caa:	600f      	str	r7, [r1, #0]
 8019cac:	bf0c      	ite	eq
 8019cae:	694b      	ldreq	r3, [r1, #20]
 8019cb0:	2300      	movne	r3, #0
 8019cb2:	eba6 0807 	sub.w	r8, r6, r7
 8019cb6:	608b      	str	r3, [r1, #8]
 8019cb8:	f1b8 0f00 	cmp.w	r8, #0
 8019cbc:	dd9d      	ble.n	8019bfa <__sflush_r+0x1a>
 8019cbe:	4643      	mov	r3, r8
 8019cc0:	463a      	mov	r2, r7
 8019cc2:	6a21      	ldr	r1, [r4, #32]
 8019cc4:	4628      	mov	r0, r5
 8019cc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019cc8:	47b0      	blx	r6
 8019cca:	2800      	cmp	r0, #0
 8019ccc:	dc06      	bgt.n	8019cdc <__sflush_r+0xfc>
 8019cce:	89a3      	ldrh	r3, [r4, #12]
 8019cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8019cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019cd8:	81a3      	strh	r3, [r4, #12]
 8019cda:	e78f      	b.n	8019bfc <__sflush_r+0x1c>
 8019cdc:	4407      	add	r7, r0
 8019cde:	eba8 0800 	sub.w	r8, r8, r0
 8019ce2:	e7e9      	b.n	8019cb8 <__sflush_r+0xd8>
 8019ce4:	dfbffffe 	.word	0xdfbffffe

08019ce8 <_fflush_r>:
 8019ce8:	b538      	push	{r3, r4, r5, lr}
 8019cea:	690b      	ldr	r3, [r1, #16]
 8019cec:	4605      	mov	r5, r0
 8019cee:	460c      	mov	r4, r1
 8019cf0:	b913      	cbnz	r3, 8019cf8 <_fflush_r+0x10>
 8019cf2:	2500      	movs	r5, #0
 8019cf4:	4628      	mov	r0, r5
 8019cf6:	bd38      	pop	{r3, r4, r5, pc}
 8019cf8:	b118      	cbz	r0, 8019d02 <_fflush_r+0x1a>
 8019cfa:	6a03      	ldr	r3, [r0, #32]
 8019cfc:	b90b      	cbnz	r3, 8019d02 <_fflush_r+0x1a>
 8019cfe:	f7ff fa49 	bl	8019194 <__sinit>
 8019d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d0f3      	beq.n	8019cf2 <_fflush_r+0xa>
 8019d0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019d0c:	07d0      	lsls	r0, r2, #31
 8019d0e:	d404      	bmi.n	8019d1a <_fflush_r+0x32>
 8019d10:	0599      	lsls	r1, r3, #22
 8019d12:	d402      	bmi.n	8019d1a <_fflush_r+0x32>
 8019d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019d16:	f7ff fbcc 	bl	80194b2 <__retarget_lock_acquire_recursive>
 8019d1a:	4628      	mov	r0, r5
 8019d1c:	4621      	mov	r1, r4
 8019d1e:	f7ff ff5f 	bl	8019be0 <__sflush_r>
 8019d22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019d24:	4605      	mov	r5, r0
 8019d26:	07da      	lsls	r2, r3, #31
 8019d28:	d4e4      	bmi.n	8019cf4 <_fflush_r+0xc>
 8019d2a:	89a3      	ldrh	r3, [r4, #12]
 8019d2c:	059b      	lsls	r3, r3, #22
 8019d2e:	d4e1      	bmi.n	8019cf4 <_fflush_r+0xc>
 8019d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019d32:	f7ff fbbf 	bl	80194b4 <__retarget_lock_release_recursive>
 8019d36:	e7dd      	b.n	8019cf4 <_fflush_r+0xc>

08019d38 <fiprintf>:
 8019d38:	b40e      	push	{r1, r2, r3}
 8019d3a:	b503      	push	{r0, r1, lr}
 8019d3c:	ab03      	add	r3, sp, #12
 8019d3e:	4601      	mov	r1, r0
 8019d40:	4805      	ldr	r0, [pc, #20]	; (8019d58 <fiprintf+0x20>)
 8019d42:	f853 2b04 	ldr.w	r2, [r3], #4
 8019d46:	6800      	ldr	r0, [r0, #0]
 8019d48:	9301      	str	r3, [sp, #4]
 8019d4a:	f000 f9d7 	bl	801a0fc <_vfiprintf_r>
 8019d4e:	b002      	add	sp, #8
 8019d50:	f85d eb04 	ldr.w	lr, [sp], #4
 8019d54:	b003      	add	sp, #12
 8019d56:	4770      	bx	lr
 8019d58:	200000f8 	.word	0x200000f8

08019d5c <__sccl>:
 8019d5c:	b570      	push	{r4, r5, r6, lr}
 8019d5e:	780b      	ldrb	r3, [r1, #0]
 8019d60:	4604      	mov	r4, r0
 8019d62:	3801      	subs	r0, #1
 8019d64:	2b5e      	cmp	r3, #94	; 0x5e
 8019d66:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8019d6a:	bf13      	iteet	ne
 8019d6c:	1c4a      	addne	r2, r1, #1
 8019d6e:	1c8a      	addeq	r2, r1, #2
 8019d70:	784b      	ldrbeq	r3, [r1, #1]
 8019d72:	2100      	movne	r1, #0
 8019d74:	bf08      	it	eq
 8019d76:	2101      	moveq	r1, #1
 8019d78:	f800 1f01 	strb.w	r1, [r0, #1]!
 8019d7c:	42a8      	cmp	r0, r5
 8019d7e:	d1fb      	bne.n	8019d78 <__sccl+0x1c>
 8019d80:	b90b      	cbnz	r3, 8019d86 <__sccl+0x2a>
 8019d82:	1e50      	subs	r0, r2, #1
 8019d84:	bd70      	pop	{r4, r5, r6, pc}
 8019d86:	f081 0101 	eor.w	r1, r1, #1
 8019d8a:	4610      	mov	r0, r2
 8019d8c:	54e1      	strb	r1, [r4, r3]
 8019d8e:	4602      	mov	r2, r0
 8019d90:	f812 5b01 	ldrb.w	r5, [r2], #1
 8019d94:	2d2d      	cmp	r5, #45	; 0x2d
 8019d96:	d005      	beq.n	8019da4 <__sccl+0x48>
 8019d98:	2d5d      	cmp	r5, #93	; 0x5d
 8019d9a:	d016      	beq.n	8019dca <__sccl+0x6e>
 8019d9c:	2d00      	cmp	r5, #0
 8019d9e:	d0f1      	beq.n	8019d84 <__sccl+0x28>
 8019da0:	462b      	mov	r3, r5
 8019da2:	e7f2      	b.n	8019d8a <__sccl+0x2e>
 8019da4:	7846      	ldrb	r6, [r0, #1]
 8019da6:	2e5d      	cmp	r6, #93	; 0x5d
 8019da8:	d0fa      	beq.n	8019da0 <__sccl+0x44>
 8019daa:	42b3      	cmp	r3, r6
 8019dac:	dcf8      	bgt.n	8019da0 <__sccl+0x44>
 8019dae:	3002      	adds	r0, #2
 8019db0:	461a      	mov	r2, r3
 8019db2:	3201      	adds	r2, #1
 8019db4:	4296      	cmp	r6, r2
 8019db6:	54a1      	strb	r1, [r4, r2]
 8019db8:	dcfb      	bgt.n	8019db2 <__sccl+0x56>
 8019dba:	1af2      	subs	r2, r6, r3
 8019dbc:	1c5d      	adds	r5, r3, #1
 8019dbe:	3a01      	subs	r2, #1
 8019dc0:	42b3      	cmp	r3, r6
 8019dc2:	bfa8      	it	ge
 8019dc4:	2200      	movge	r2, #0
 8019dc6:	18ab      	adds	r3, r5, r2
 8019dc8:	e7e1      	b.n	8019d8e <__sccl+0x32>
 8019dca:	4610      	mov	r0, r2
 8019dcc:	e7da      	b.n	8019d84 <__sccl+0x28>

08019dce <__submore>:
 8019dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019dd2:	460c      	mov	r4, r1
 8019dd4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019dd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019dda:	4299      	cmp	r1, r3
 8019ddc:	d11a      	bne.n	8019e14 <__submore+0x46>
 8019dde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019de2:	f7ff f881 	bl	8018ee8 <_malloc_r>
 8019de6:	b918      	cbnz	r0, 8019df0 <__submore+0x22>
 8019de8:	f04f 30ff 	mov.w	r0, #4294967295
 8019dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019df4:	6360      	str	r0, [r4, #52]	; 0x34
 8019df6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019dfa:	63a3      	str	r3, [r4, #56]	; 0x38
 8019dfc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019e00:	7083      	strb	r3, [r0, #2]
 8019e02:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019e06:	7043      	strb	r3, [r0, #1]
 8019e08:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019e0c:	7003      	strb	r3, [r0, #0]
 8019e0e:	6020      	str	r0, [r4, #0]
 8019e10:	2000      	movs	r0, #0
 8019e12:	e7eb      	b.n	8019dec <__submore+0x1e>
 8019e14:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8019e16:	0077      	lsls	r7, r6, #1
 8019e18:	463a      	mov	r2, r7
 8019e1a:	f000 f81d 	bl	8019e58 <_realloc_r>
 8019e1e:	4605      	mov	r5, r0
 8019e20:	2800      	cmp	r0, #0
 8019e22:	d0e1      	beq.n	8019de8 <__submore+0x1a>
 8019e24:	eb00 0806 	add.w	r8, r0, r6
 8019e28:	4601      	mov	r1, r0
 8019e2a:	4632      	mov	r2, r6
 8019e2c:	4640      	mov	r0, r8
 8019e2e:	f7ff fb42 	bl	80194b6 <memcpy>
 8019e32:	f8c4 8000 	str.w	r8, [r4]
 8019e36:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019e3a:	e7e9      	b.n	8019e10 <__submore+0x42>

08019e3c <memchr>:
 8019e3c:	b2c9      	uxtb	r1, r1
 8019e3e:	4402      	add	r2, r0
 8019e40:	b510      	push	{r4, lr}
 8019e42:	4290      	cmp	r0, r2
 8019e44:	4603      	mov	r3, r0
 8019e46:	d101      	bne.n	8019e4c <memchr+0x10>
 8019e48:	2300      	movs	r3, #0
 8019e4a:	e003      	b.n	8019e54 <memchr+0x18>
 8019e4c:	781c      	ldrb	r4, [r3, #0]
 8019e4e:	3001      	adds	r0, #1
 8019e50:	428c      	cmp	r4, r1
 8019e52:	d1f6      	bne.n	8019e42 <memchr+0x6>
 8019e54:	4618      	mov	r0, r3
 8019e56:	bd10      	pop	{r4, pc}

08019e58 <_realloc_r>:
 8019e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e5c:	4680      	mov	r8, r0
 8019e5e:	4614      	mov	r4, r2
 8019e60:	460e      	mov	r6, r1
 8019e62:	b921      	cbnz	r1, 8019e6e <_realloc_r+0x16>
 8019e64:	4611      	mov	r1, r2
 8019e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019e6a:	f7ff b83d 	b.w	8018ee8 <_malloc_r>
 8019e6e:	b92a      	cbnz	r2, 8019e7c <_realloc_r+0x24>
 8019e70:	4625      	mov	r5, r4
 8019e72:	f7ff fb4b 	bl	801950c <_free_r>
 8019e76:	4628      	mov	r0, r5
 8019e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e7c:	f000 fc80 	bl	801a780 <_malloc_usable_size_r>
 8019e80:	4284      	cmp	r4, r0
 8019e82:	4607      	mov	r7, r0
 8019e84:	d802      	bhi.n	8019e8c <_realloc_r+0x34>
 8019e86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019e8a:	d812      	bhi.n	8019eb2 <_realloc_r+0x5a>
 8019e8c:	4621      	mov	r1, r4
 8019e8e:	4640      	mov	r0, r8
 8019e90:	f7ff f82a 	bl	8018ee8 <_malloc_r>
 8019e94:	4605      	mov	r5, r0
 8019e96:	2800      	cmp	r0, #0
 8019e98:	d0ed      	beq.n	8019e76 <_realloc_r+0x1e>
 8019e9a:	42bc      	cmp	r4, r7
 8019e9c:	4622      	mov	r2, r4
 8019e9e:	4631      	mov	r1, r6
 8019ea0:	bf28      	it	cs
 8019ea2:	463a      	movcs	r2, r7
 8019ea4:	f7ff fb07 	bl	80194b6 <memcpy>
 8019ea8:	4631      	mov	r1, r6
 8019eaa:	4640      	mov	r0, r8
 8019eac:	f7ff fb2e 	bl	801950c <_free_r>
 8019eb0:	e7e1      	b.n	8019e76 <_realloc_r+0x1e>
 8019eb2:	4635      	mov	r5, r6
 8019eb4:	e7df      	b.n	8019e76 <_realloc_r+0x1e>
	...

08019eb8 <_strtol_l.constprop.0>:
 8019eb8:	2b01      	cmp	r3, #1
 8019eba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ebe:	d001      	beq.n	8019ec4 <_strtol_l.constprop.0+0xc>
 8019ec0:	2b24      	cmp	r3, #36	; 0x24
 8019ec2:	d906      	bls.n	8019ed2 <_strtol_l.constprop.0+0x1a>
 8019ec4:	f7ff faca 	bl	801945c <__errno>
 8019ec8:	2316      	movs	r3, #22
 8019eca:	6003      	str	r3, [r0, #0]
 8019ecc:	2000      	movs	r0, #0
 8019ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ed2:	460d      	mov	r5, r1
 8019ed4:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8019fb8 <_strtol_l.constprop.0+0x100>
 8019ed8:	462e      	mov	r6, r5
 8019eda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019ede:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8019ee2:	f017 0708 	ands.w	r7, r7, #8
 8019ee6:	d1f7      	bne.n	8019ed8 <_strtol_l.constprop.0+0x20>
 8019ee8:	2c2d      	cmp	r4, #45	; 0x2d
 8019eea:	d132      	bne.n	8019f52 <_strtol_l.constprop.0+0x9a>
 8019eec:	782c      	ldrb	r4, [r5, #0]
 8019eee:	2701      	movs	r7, #1
 8019ef0:	1cb5      	adds	r5, r6, #2
 8019ef2:	2b00      	cmp	r3, #0
 8019ef4:	d05b      	beq.n	8019fae <_strtol_l.constprop.0+0xf6>
 8019ef6:	2b10      	cmp	r3, #16
 8019ef8:	d109      	bne.n	8019f0e <_strtol_l.constprop.0+0x56>
 8019efa:	2c30      	cmp	r4, #48	; 0x30
 8019efc:	d107      	bne.n	8019f0e <_strtol_l.constprop.0+0x56>
 8019efe:	782c      	ldrb	r4, [r5, #0]
 8019f00:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8019f04:	2c58      	cmp	r4, #88	; 0x58
 8019f06:	d14d      	bne.n	8019fa4 <_strtol_l.constprop.0+0xec>
 8019f08:	786c      	ldrb	r4, [r5, #1]
 8019f0a:	2310      	movs	r3, #16
 8019f0c:	3502      	adds	r5, #2
 8019f0e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8019f12:	f04f 0e00 	mov.w	lr, #0
 8019f16:	f108 38ff 	add.w	r8, r8, #4294967295
 8019f1a:	4676      	mov	r6, lr
 8019f1c:	fbb8 f9f3 	udiv	r9, r8, r3
 8019f20:	fb03 8a19 	mls	sl, r3, r9, r8
 8019f24:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8019f28:	f1bc 0f09 	cmp.w	ip, #9
 8019f2c:	d816      	bhi.n	8019f5c <_strtol_l.constprop.0+0xa4>
 8019f2e:	4664      	mov	r4, ip
 8019f30:	42a3      	cmp	r3, r4
 8019f32:	dd24      	ble.n	8019f7e <_strtol_l.constprop.0+0xc6>
 8019f34:	f1be 3fff 	cmp.w	lr, #4294967295
 8019f38:	d008      	beq.n	8019f4c <_strtol_l.constprop.0+0x94>
 8019f3a:	45b1      	cmp	r9, r6
 8019f3c:	d31c      	bcc.n	8019f78 <_strtol_l.constprop.0+0xc0>
 8019f3e:	d101      	bne.n	8019f44 <_strtol_l.constprop.0+0x8c>
 8019f40:	45a2      	cmp	sl, r4
 8019f42:	db19      	blt.n	8019f78 <_strtol_l.constprop.0+0xc0>
 8019f44:	fb06 4603 	mla	r6, r6, r3, r4
 8019f48:	f04f 0e01 	mov.w	lr, #1
 8019f4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019f50:	e7e8      	b.n	8019f24 <_strtol_l.constprop.0+0x6c>
 8019f52:	2c2b      	cmp	r4, #43	; 0x2b
 8019f54:	bf04      	itt	eq
 8019f56:	782c      	ldrbeq	r4, [r5, #0]
 8019f58:	1cb5      	addeq	r5, r6, #2
 8019f5a:	e7ca      	b.n	8019ef2 <_strtol_l.constprop.0+0x3a>
 8019f5c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8019f60:	f1bc 0f19 	cmp.w	ip, #25
 8019f64:	d801      	bhi.n	8019f6a <_strtol_l.constprop.0+0xb2>
 8019f66:	3c37      	subs	r4, #55	; 0x37
 8019f68:	e7e2      	b.n	8019f30 <_strtol_l.constprop.0+0x78>
 8019f6a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8019f6e:	f1bc 0f19 	cmp.w	ip, #25
 8019f72:	d804      	bhi.n	8019f7e <_strtol_l.constprop.0+0xc6>
 8019f74:	3c57      	subs	r4, #87	; 0x57
 8019f76:	e7db      	b.n	8019f30 <_strtol_l.constprop.0+0x78>
 8019f78:	f04f 3eff 	mov.w	lr, #4294967295
 8019f7c:	e7e6      	b.n	8019f4c <_strtol_l.constprop.0+0x94>
 8019f7e:	f1be 3fff 	cmp.w	lr, #4294967295
 8019f82:	d105      	bne.n	8019f90 <_strtol_l.constprop.0+0xd8>
 8019f84:	2322      	movs	r3, #34	; 0x22
 8019f86:	4646      	mov	r6, r8
 8019f88:	6003      	str	r3, [r0, #0]
 8019f8a:	b942      	cbnz	r2, 8019f9e <_strtol_l.constprop.0+0xe6>
 8019f8c:	4630      	mov	r0, r6
 8019f8e:	e79e      	b.n	8019ece <_strtol_l.constprop.0+0x16>
 8019f90:	b107      	cbz	r7, 8019f94 <_strtol_l.constprop.0+0xdc>
 8019f92:	4276      	negs	r6, r6
 8019f94:	2a00      	cmp	r2, #0
 8019f96:	d0f9      	beq.n	8019f8c <_strtol_l.constprop.0+0xd4>
 8019f98:	f1be 0f00 	cmp.w	lr, #0
 8019f9c:	d000      	beq.n	8019fa0 <_strtol_l.constprop.0+0xe8>
 8019f9e:	1e69      	subs	r1, r5, #1
 8019fa0:	6011      	str	r1, [r2, #0]
 8019fa2:	e7f3      	b.n	8019f8c <_strtol_l.constprop.0+0xd4>
 8019fa4:	2430      	movs	r4, #48	; 0x30
 8019fa6:	2b00      	cmp	r3, #0
 8019fa8:	d1b1      	bne.n	8019f0e <_strtol_l.constprop.0+0x56>
 8019faa:	2308      	movs	r3, #8
 8019fac:	e7af      	b.n	8019f0e <_strtol_l.constprop.0+0x56>
 8019fae:	2c30      	cmp	r4, #48	; 0x30
 8019fb0:	d0a5      	beq.n	8019efe <_strtol_l.constprop.0+0x46>
 8019fb2:	230a      	movs	r3, #10
 8019fb4:	e7ab      	b.n	8019f0e <_strtol_l.constprop.0+0x56>
 8019fb6:	bf00      	nop
 8019fb8:	0801affb 	.word	0x0801affb

08019fbc <_strtol_r>:
 8019fbc:	f7ff bf7c 	b.w	8019eb8 <_strtol_l.constprop.0>

08019fc0 <_strtoul_l.constprop.0>:
 8019fc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019fc4:	4686      	mov	lr, r0
 8019fc6:	460d      	mov	r5, r1
 8019fc8:	4f35      	ldr	r7, [pc, #212]	; (801a0a0 <_strtoul_l.constprop.0+0xe0>)
 8019fca:	4628      	mov	r0, r5
 8019fcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019fd0:	5d3e      	ldrb	r6, [r7, r4]
 8019fd2:	f016 0608 	ands.w	r6, r6, #8
 8019fd6:	d1f8      	bne.n	8019fca <_strtoul_l.constprop.0+0xa>
 8019fd8:	2c2d      	cmp	r4, #45	; 0x2d
 8019fda:	d130      	bne.n	801a03e <_strtoul_l.constprop.0+0x7e>
 8019fdc:	782c      	ldrb	r4, [r5, #0]
 8019fde:	2601      	movs	r6, #1
 8019fe0:	1c85      	adds	r5, r0, #2
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d057      	beq.n	801a096 <_strtoul_l.constprop.0+0xd6>
 8019fe6:	2b10      	cmp	r3, #16
 8019fe8:	d109      	bne.n	8019ffe <_strtoul_l.constprop.0+0x3e>
 8019fea:	2c30      	cmp	r4, #48	; 0x30
 8019fec:	d107      	bne.n	8019ffe <_strtoul_l.constprop.0+0x3e>
 8019fee:	7828      	ldrb	r0, [r5, #0]
 8019ff0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8019ff4:	2858      	cmp	r0, #88	; 0x58
 8019ff6:	d149      	bne.n	801a08c <_strtoul_l.constprop.0+0xcc>
 8019ff8:	786c      	ldrb	r4, [r5, #1]
 8019ffa:	2310      	movs	r3, #16
 8019ffc:	3502      	adds	r5, #2
 8019ffe:	f04f 38ff 	mov.w	r8, #4294967295
 801a002:	2700      	movs	r7, #0
 801a004:	fbb8 f8f3 	udiv	r8, r8, r3
 801a008:	fb03 f908 	mul.w	r9, r3, r8
 801a00c:	4638      	mov	r0, r7
 801a00e:	ea6f 0909 	mvn.w	r9, r9
 801a012:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801a016:	f1bc 0f09 	cmp.w	ip, #9
 801a01a:	d815      	bhi.n	801a048 <_strtoul_l.constprop.0+0x88>
 801a01c:	4664      	mov	r4, ip
 801a01e:	42a3      	cmp	r3, r4
 801a020:	dd23      	ble.n	801a06a <_strtoul_l.constprop.0+0xaa>
 801a022:	f1b7 3fff 	cmp.w	r7, #4294967295
 801a026:	d007      	beq.n	801a038 <_strtoul_l.constprop.0+0x78>
 801a028:	4580      	cmp	r8, r0
 801a02a:	d31b      	bcc.n	801a064 <_strtoul_l.constprop.0+0xa4>
 801a02c:	d101      	bne.n	801a032 <_strtoul_l.constprop.0+0x72>
 801a02e:	45a1      	cmp	r9, r4
 801a030:	db18      	blt.n	801a064 <_strtoul_l.constprop.0+0xa4>
 801a032:	fb00 4003 	mla	r0, r0, r3, r4
 801a036:	2701      	movs	r7, #1
 801a038:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a03c:	e7e9      	b.n	801a012 <_strtoul_l.constprop.0+0x52>
 801a03e:	2c2b      	cmp	r4, #43	; 0x2b
 801a040:	bf04      	itt	eq
 801a042:	782c      	ldrbeq	r4, [r5, #0]
 801a044:	1c85      	addeq	r5, r0, #2
 801a046:	e7cc      	b.n	8019fe2 <_strtoul_l.constprop.0+0x22>
 801a048:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801a04c:	f1bc 0f19 	cmp.w	ip, #25
 801a050:	d801      	bhi.n	801a056 <_strtoul_l.constprop.0+0x96>
 801a052:	3c37      	subs	r4, #55	; 0x37
 801a054:	e7e3      	b.n	801a01e <_strtoul_l.constprop.0+0x5e>
 801a056:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801a05a:	f1bc 0f19 	cmp.w	ip, #25
 801a05e:	d804      	bhi.n	801a06a <_strtoul_l.constprop.0+0xaa>
 801a060:	3c57      	subs	r4, #87	; 0x57
 801a062:	e7dc      	b.n	801a01e <_strtoul_l.constprop.0+0x5e>
 801a064:	f04f 37ff 	mov.w	r7, #4294967295
 801a068:	e7e6      	b.n	801a038 <_strtoul_l.constprop.0+0x78>
 801a06a:	1c7b      	adds	r3, r7, #1
 801a06c:	d106      	bne.n	801a07c <_strtoul_l.constprop.0+0xbc>
 801a06e:	2322      	movs	r3, #34	; 0x22
 801a070:	4638      	mov	r0, r7
 801a072:	f8ce 3000 	str.w	r3, [lr]
 801a076:	b932      	cbnz	r2, 801a086 <_strtoul_l.constprop.0+0xc6>
 801a078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a07c:	b106      	cbz	r6, 801a080 <_strtoul_l.constprop.0+0xc0>
 801a07e:	4240      	negs	r0, r0
 801a080:	2a00      	cmp	r2, #0
 801a082:	d0f9      	beq.n	801a078 <_strtoul_l.constprop.0+0xb8>
 801a084:	b107      	cbz	r7, 801a088 <_strtoul_l.constprop.0+0xc8>
 801a086:	1e69      	subs	r1, r5, #1
 801a088:	6011      	str	r1, [r2, #0]
 801a08a:	e7f5      	b.n	801a078 <_strtoul_l.constprop.0+0xb8>
 801a08c:	2430      	movs	r4, #48	; 0x30
 801a08e:	2b00      	cmp	r3, #0
 801a090:	d1b5      	bne.n	8019ffe <_strtoul_l.constprop.0+0x3e>
 801a092:	2308      	movs	r3, #8
 801a094:	e7b3      	b.n	8019ffe <_strtoul_l.constprop.0+0x3e>
 801a096:	2c30      	cmp	r4, #48	; 0x30
 801a098:	d0a9      	beq.n	8019fee <_strtoul_l.constprop.0+0x2e>
 801a09a:	230a      	movs	r3, #10
 801a09c:	e7af      	b.n	8019ffe <_strtoul_l.constprop.0+0x3e>
 801a09e:	bf00      	nop
 801a0a0:	0801affb 	.word	0x0801affb

0801a0a4 <_strtoul_r>:
 801a0a4:	f7ff bf8c 	b.w	8019fc0 <_strtoul_l.constprop.0>

0801a0a8 <__sfputc_r>:
 801a0a8:	6893      	ldr	r3, [r2, #8]
 801a0aa:	3b01      	subs	r3, #1
 801a0ac:	2b00      	cmp	r3, #0
 801a0ae:	6093      	str	r3, [r2, #8]
 801a0b0:	b410      	push	{r4}
 801a0b2:	da08      	bge.n	801a0c6 <__sfputc_r+0x1e>
 801a0b4:	6994      	ldr	r4, [r2, #24]
 801a0b6:	42a3      	cmp	r3, r4
 801a0b8:	db01      	blt.n	801a0be <__sfputc_r+0x16>
 801a0ba:	290a      	cmp	r1, #10
 801a0bc:	d103      	bne.n	801a0c6 <__sfputc_r+0x1e>
 801a0be:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a0c2:	f000 bac7 	b.w	801a654 <__swbuf_r>
 801a0c6:	6813      	ldr	r3, [r2, #0]
 801a0c8:	1c58      	adds	r0, r3, #1
 801a0ca:	6010      	str	r0, [r2, #0]
 801a0cc:	4608      	mov	r0, r1
 801a0ce:	7019      	strb	r1, [r3, #0]
 801a0d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a0d4:	4770      	bx	lr

0801a0d6 <__sfputs_r>:
 801a0d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0d8:	4606      	mov	r6, r0
 801a0da:	460f      	mov	r7, r1
 801a0dc:	4614      	mov	r4, r2
 801a0de:	18d5      	adds	r5, r2, r3
 801a0e0:	42ac      	cmp	r4, r5
 801a0e2:	d101      	bne.n	801a0e8 <__sfputs_r+0x12>
 801a0e4:	2000      	movs	r0, #0
 801a0e6:	e007      	b.n	801a0f8 <__sfputs_r+0x22>
 801a0e8:	463a      	mov	r2, r7
 801a0ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a0ee:	4630      	mov	r0, r6
 801a0f0:	f7ff ffda 	bl	801a0a8 <__sfputc_r>
 801a0f4:	1c43      	adds	r3, r0, #1
 801a0f6:	d1f3      	bne.n	801a0e0 <__sfputs_r+0xa>
 801a0f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a0fc <_vfiprintf_r>:
 801a0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a100:	460d      	mov	r5, r1
 801a102:	b09d      	sub	sp, #116	; 0x74
 801a104:	4614      	mov	r4, r2
 801a106:	4698      	mov	r8, r3
 801a108:	4606      	mov	r6, r0
 801a10a:	b118      	cbz	r0, 801a114 <_vfiprintf_r+0x18>
 801a10c:	6a03      	ldr	r3, [r0, #32]
 801a10e:	b90b      	cbnz	r3, 801a114 <_vfiprintf_r+0x18>
 801a110:	f7ff f840 	bl	8019194 <__sinit>
 801a114:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a116:	07d9      	lsls	r1, r3, #31
 801a118:	d405      	bmi.n	801a126 <_vfiprintf_r+0x2a>
 801a11a:	89ab      	ldrh	r3, [r5, #12]
 801a11c:	059a      	lsls	r2, r3, #22
 801a11e:	d402      	bmi.n	801a126 <_vfiprintf_r+0x2a>
 801a120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a122:	f7ff f9c6 	bl	80194b2 <__retarget_lock_acquire_recursive>
 801a126:	89ab      	ldrh	r3, [r5, #12]
 801a128:	071b      	lsls	r3, r3, #28
 801a12a:	d501      	bpl.n	801a130 <_vfiprintf_r+0x34>
 801a12c:	692b      	ldr	r3, [r5, #16]
 801a12e:	b99b      	cbnz	r3, 801a158 <_vfiprintf_r+0x5c>
 801a130:	4629      	mov	r1, r5
 801a132:	4630      	mov	r0, r6
 801a134:	f000 facc 	bl	801a6d0 <__swsetup_r>
 801a138:	b170      	cbz	r0, 801a158 <_vfiprintf_r+0x5c>
 801a13a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a13c:	07dc      	lsls	r4, r3, #31
 801a13e:	d504      	bpl.n	801a14a <_vfiprintf_r+0x4e>
 801a140:	f04f 30ff 	mov.w	r0, #4294967295
 801a144:	b01d      	add	sp, #116	; 0x74
 801a146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a14a:	89ab      	ldrh	r3, [r5, #12]
 801a14c:	0598      	lsls	r0, r3, #22
 801a14e:	d4f7      	bmi.n	801a140 <_vfiprintf_r+0x44>
 801a150:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a152:	f7ff f9af 	bl	80194b4 <__retarget_lock_release_recursive>
 801a156:	e7f3      	b.n	801a140 <_vfiprintf_r+0x44>
 801a158:	2300      	movs	r3, #0
 801a15a:	f8cd 800c 	str.w	r8, [sp, #12]
 801a15e:	f04f 0901 	mov.w	r9, #1
 801a162:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 801a31c <_vfiprintf_r+0x220>
 801a166:	9309      	str	r3, [sp, #36]	; 0x24
 801a168:	2320      	movs	r3, #32
 801a16a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a16e:	2330      	movs	r3, #48	; 0x30
 801a170:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a174:	4623      	mov	r3, r4
 801a176:	469a      	mov	sl, r3
 801a178:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a17c:	b10a      	cbz	r2, 801a182 <_vfiprintf_r+0x86>
 801a17e:	2a25      	cmp	r2, #37	; 0x25
 801a180:	d1f9      	bne.n	801a176 <_vfiprintf_r+0x7a>
 801a182:	ebba 0b04 	subs.w	fp, sl, r4
 801a186:	d00b      	beq.n	801a1a0 <_vfiprintf_r+0xa4>
 801a188:	465b      	mov	r3, fp
 801a18a:	4622      	mov	r2, r4
 801a18c:	4629      	mov	r1, r5
 801a18e:	4630      	mov	r0, r6
 801a190:	f7ff ffa1 	bl	801a0d6 <__sfputs_r>
 801a194:	3001      	adds	r0, #1
 801a196:	f000 80a9 	beq.w	801a2ec <_vfiprintf_r+0x1f0>
 801a19a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a19c:	445a      	add	r2, fp
 801a19e:	9209      	str	r2, [sp, #36]	; 0x24
 801a1a0:	f89a 3000 	ldrb.w	r3, [sl]
 801a1a4:	2b00      	cmp	r3, #0
 801a1a6:	f000 80a1 	beq.w	801a2ec <_vfiprintf_r+0x1f0>
 801a1aa:	2300      	movs	r3, #0
 801a1ac:	f04f 32ff 	mov.w	r2, #4294967295
 801a1b0:	f10a 0a01 	add.w	sl, sl, #1
 801a1b4:	9304      	str	r3, [sp, #16]
 801a1b6:	9307      	str	r3, [sp, #28]
 801a1b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a1bc:	931a      	str	r3, [sp, #104]	; 0x68
 801a1be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a1c2:	4654      	mov	r4, sl
 801a1c4:	2205      	movs	r2, #5
 801a1c6:	4855      	ldr	r0, [pc, #340]	; (801a31c <_vfiprintf_r+0x220>)
 801a1c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a1cc:	f7ff fe36 	bl	8019e3c <memchr>
 801a1d0:	9a04      	ldr	r2, [sp, #16]
 801a1d2:	b9d8      	cbnz	r0, 801a20c <_vfiprintf_r+0x110>
 801a1d4:	06d1      	lsls	r1, r2, #27
 801a1d6:	bf44      	itt	mi
 801a1d8:	2320      	movmi	r3, #32
 801a1da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a1de:	0713      	lsls	r3, r2, #28
 801a1e0:	bf44      	itt	mi
 801a1e2:	232b      	movmi	r3, #43	; 0x2b
 801a1e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a1e8:	f89a 3000 	ldrb.w	r3, [sl]
 801a1ec:	2b2a      	cmp	r3, #42	; 0x2a
 801a1ee:	d015      	beq.n	801a21c <_vfiprintf_r+0x120>
 801a1f0:	9a07      	ldr	r2, [sp, #28]
 801a1f2:	4654      	mov	r4, sl
 801a1f4:	2000      	movs	r0, #0
 801a1f6:	f04f 0c0a 	mov.w	ip, #10
 801a1fa:	4621      	mov	r1, r4
 801a1fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a200:	3b30      	subs	r3, #48	; 0x30
 801a202:	2b09      	cmp	r3, #9
 801a204:	d94d      	bls.n	801a2a2 <_vfiprintf_r+0x1a6>
 801a206:	b1b0      	cbz	r0, 801a236 <_vfiprintf_r+0x13a>
 801a208:	9207      	str	r2, [sp, #28]
 801a20a:	e014      	b.n	801a236 <_vfiprintf_r+0x13a>
 801a20c:	eba0 0308 	sub.w	r3, r0, r8
 801a210:	46a2      	mov	sl, r4
 801a212:	fa09 f303 	lsl.w	r3, r9, r3
 801a216:	4313      	orrs	r3, r2
 801a218:	9304      	str	r3, [sp, #16]
 801a21a:	e7d2      	b.n	801a1c2 <_vfiprintf_r+0xc6>
 801a21c:	9b03      	ldr	r3, [sp, #12]
 801a21e:	1d19      	adds	r1, r3, #4
 801a220:	681b      	ldr	r3, [r3, #0]
 801a222:	2b00      	cmp	r3, #0
 801a224:	9103      	str	r1, [sp, #12]
 801a226:	bfbb      	ittet	lt
 801a228:	425b      	neglt	r3, r3
 801a22a:	f042 0202 	orrlt.w	r2, r2, #2
 801a22e:	9307      	strge	r3, [sp, #28]
 801a230:	9307      	strlt	r3, [sp, #28]
 801a232:	bfb8      	it	lt
 801a234:	9204      	strlt	r2, [sp, #16]
 801a236:	7823      	ldrb	r3, [r4, #0]
 801a238:	2b2e      	cmp	r3, #46	; 0x2e
 801a23a:	d10c      	bne.n	801a256 <_vfiprintf_r+0x15a>
 801a23c:	7863      	ldrb	r3, [r4, #1]
 801a23e:	2b2a      	cmp	r3, #42	; 0x2a
 801a240:	d134      	bne.n	801a2ac <_vfiprintf_r+0x1b0>
 801a242:	9b03      	ldr	r3, [sp, #12]
 801a244:	3402      	adds	r4, #2
 801a246:	1d1a      	adds	r2, r3, #4
 801a248:	681b      	ldr	r3, [r3, #0]
 801a24a:	2b00      	cmp	r3, #0
 801a24c:	9203      	str	r2, [sp, #12]
 801a24e:	bfb8      	it	lt
 801a250:	f04f 33ff 	movlt.w	r3, #4294967295
 801a254:	9305      	str	r3, [sp, #20]
 801a256:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801a32c <_vfiprintf_r+0x230>
 801a25a:	2203      	movs	r2, #3
 801a25c:	7821      	ldrb	r1, [r4, #0]
 801a25e:	4650      	mov	r0, sl
 801a260:	f7ff fdec 	bl	8019e3c <memchr>
 801a264:	b138      	cbz	r0, 801a276 <_vfiprintf_r+0x17a>
 801a266:	eba0 000a 	sub.w	r0, r0, sl
 801a26a:	2240      	movs	r2, #64	; 0x40
 801a26c:	9b04      	ldr	r3, [sp, #16]
 801a26e:	3401      	adds	r4, #1
 801a270:	4082      	lsls	r2, r0
 801a272:	4313      	orrs	r3, r2
 801a274:	9304      	str	r3, [sp, #16]
 801a276:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a27a:	2206      	movs	r2, #6
 801a27c:	4828      	ldr	r0, [pc, #160]	; (801a320 <_vfiprintf_r+0x224>)
 801a27e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a282:	f7ff fddb 	bl	8019e3c <memchr>
 801a286:	2800      	cmp	r0, #0
 801a288:	d03f      	beq.n	801a30a <_vfiprintf_r+0x20e>
 801a28a:	4b26      	ldr	r3, [pc, #152]	; (801a324 <_vfiprintf_r+0x228>)
 801a28c:	bb1b      	cbnz	r3, 801a2d6 <_vfiprintf_r+0x1da>
 801a28e:	9b03      	ldr	r3, [sp, #12]
 801a290:	3307      	adds	r3, #7
 801a292:	f023 0307 	bic.w	r3, r3, #7
 801a296:	3308      	adds	r3, #8
 801a298:	9303      	str	r3, [sp, #12]
 801a29a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a29c:	443b      	add	r3, r7
 801a29e:	9309      	str	r3, [sp, #36]	; 0x24
 801a2a0:	e768      	b.n	801a174 <_vfiprintf_r+0x78>
 801a2a2:	fb0c 3202 	mla	r2, ip, r2, r3
 801a2a6:	460c      	mov	r4, r1
 801a2a8:	2001      	movs	r0, #1
 801a2aa:	e7a6      	b.n	801a1fa <_vfiprintf_r+0xfe>
 801a2ac:	2300      	movs	r3, #0
 801a2ae:	3401      	adds	r4, #1
 801a2b0:	f04f 0c0a 	mov.w	ip, #10
 801a2b4:	4619      	mov	r1, r3
 801a2b6:	9305      	str	r3, [sp, #20]
 801a2b8:	4620      	mov	r0, r4
 801a2ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a2be:	3a30      	subs	r2, #48	; 0x30
 801a2c0:	2a09      	cmp	r2, #9
 801a2c2:	d903      	bls.n	801a2cc <_vfiprintf_r+0x1d0>
 801a2c4:	2b00      	cmp	r3, #0
 801a2c6:	d0c6      	beq.n	801a256 <_vfiprintf_r+0x15a>
 801a2c8:	9105      	str	r1, [sp, #20]
 801a2ca:	e7c4      	b.n	801a256 <_vfiprintf_r+0x15a>
 801a2cc:	fb0c 2101 	mla	r1, ip, r1, r2
 801a2d0:	4604      	mov	r4, r0
 801a2d2:	2301      	movs	r3, #1
 801a2d4:	e7f0      	b.n	801a2b8 <_vfiprintf_r+0x1bc>
 801a2d6:	ab03      	add	r3, sp, #12
 801a2d8:	462a      	mov	r2, r5
 801a2da:	a904      	add	r1, sp, #16
 801a2dc:	4630      	mov	r0, r6
 801a2de:	9300      	str	r3, [sp, #0]
 801a2e0:	4b11      	ldr	r3, [pc, #68]	; (801a328 <_vfiprintf_r+0x22c>)
 801a2e2:	f3af 8000 	nop.w
 801a2e6:	4607      	mov	r7, r0
 801a2e8:	1c78      	adds	r0, r7, #1
 801a2ea:	d1d6      	bne.n	801a29a <_vfiprintf_r+0x19e>
 801a2ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a2ee:	07d9      	lsls	r1, r3, #31
 801a2f0:	d405      	bmi.n	801a2fe <_vfiprintf_r+0x202>
 801a2f2:	89ab      	ldrh	r3, [r5, #12]
 801a2f4:	059a      	lsls	r2, r3, #22
 801a2f6:	d402      	bmi.n	801a2fe <_vfiprintf_r+0x202>
 801a2f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a2fa:	f7ff f8db 	bl	80194b4 <__retarget_lock_release_recursive>
 801a2fe:	89ab      	ldrh	r3, [r5, #12]
 801a300:	065b      	lsls	r3, r3, #25
 801a302:	f53f af1d 	bmi.w	801a140 <_vfiprintf_r+0x44>
 801a306:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a308:	e71c      	b.n	801a144 <_vfiprintf_r+0x48>
 801a30a:	ab03      	add	r3, sp, #12
 801a30c:	462a      	mov	r2, r5
 801a30e:	a904      	add	r1, sp, #16
 801a310:	4630      	mov	r0, r6
 801a312:	9300      	str	r3, [sp, #0]
 801a314:	4b04      	ldr	r3, [pc, #16]	; (801a328 <_vfiprintf_r+0x22c>)
 801a316:	f000 f87d 	bl	801a414 <_printf_i>
 801a31a:	e7e4      	b.n	801a2e6 <_vfiprintf_r+0x1ea>
 801a31c:	0801b0fb 	.word	0x0801b0fb
 801a320:	0801b101 	.word	0x0801b101
 801a324:	00000000 	.word	0x00000000
 801a328:	0801a0d7 	.word	0x0801a0d7
 801a32c:	0801afdb 	.word	0x0801afdb

0801a330 <_printf_common>:
 801a330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a334:	4616      	mov	r6, r2
 801a336:	4699      	mov	r9, r3
 801a338:	688a      	ldr	r2, [r1, #8]
 801a33a:	4607      	mov	r7, r0
 801a33c:	690b      	ldr	r3, [r1, #16]
 801a33e:	460c      	mov	r4, r1
 801a340:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a344:	4293      	cmp	r3, r2
 801a346:	bfb8      	it	lt
 801a348:	4613      	movlt	r3, r2
 801a34a:	6033      	str	r3, [r6, #0]
 801a34c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a350:	b10a      	cbz	r2, 801a356 <_printf_common+0x26>
 801a352:	3301      	adds	r3, #1
 801a354:	6033      	str	r3, [r6, #0]
 801a356:	6823      	ldr	r3, [r4, #0]
 801a358:	0699      	lsls	r1, r3, #26
 801a35a:	bf42      	ittt	mi
 801a35c:	6833      	ldrmi	r3, [r6, #0]
 801a35e:	3302      	addmi	r3, #2
 801a360:	6033      	strmi	r3, [r6, #0]
 801a362:	6825      	ldr	r5, [r4, #0]
 801a364:	f015 0506 	ands.w	r5, r5, #6
 801a368:	d106      	bne.n	801a378 <_printf_common+0x48>
 801a36a:	f104 0a19 	add.w	sl, r4, #25
 801a36e:	68e3      	ldr	r3, [r4, #12]
 801a370:	6832      	ldr	r2, [r6, #0]
 801a372:	1a9b      	subs	r3, r3, r2
 801a374:	42ab      	cmp	r3, r5
 801a376:	dc2b      	bgt.n	801a3d0 <_printf_common+0xa0>
 801a378:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a37c:	1e13      	subs	r3, r2, #0
 801a37e:	6822      	ldr	r2, [r4, #0]
 801a380:	bf18      	it	ne
 801a382:	2301      	movne	r3, #1
 801a384:	0692      	lsls	r2, r2, #26
 801a386:	d430      	bmi.n	801a3ea <_printf_common+0xba>
 801a388:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a38c:	4649      	mov	r1, r9
 801a38e:	4638      	mov	r0, r7
 801a390:	47c0      	blx	r8
 801a392:	3001      	adds	r0, #1
 801a394:	d023      	beq.n	801a3de <_printf_common+0xae>
 801a396:	6823      	ldr	r3, [r4, #0]
 801a398:	341a      	adds	r4, #26
 801a39a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 801a39e:	f003 0306 	and.w	r3, r3, #6
 801a3a2:	2b04      	cmp	r3, #4
 801a3a4:	bf0a      	itet	eq
 801a3a6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 801a3aa:	2500      	movne	r5, #0
 801a3ac:	6833      	ldreq	r3, [r6, #0]
 801a3ae:	f04f 0600 	mov.w	r6, #0
 801a3b2:	bf08      	it	eq
 801a3b4:	1aed      	subeq	r5, r5, r3
 801a3b6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801a3ba:	bf08      	it	eq
 801a3bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a3c0:	4293      	cmp	r3, r2
 801a3c2:	bfc4      	itt	gt
 801a3c4:	1a9b      	subgt	r3, r3, r2
 801a3c6:	18ed      	addgt	r5, r5, r3
 801a3c8:	42b5      	cmp	r5, r6
 801a3ca:	d11a      	bne.n	801a402 <_printf_common+0xd2>
 801a3cc:	2000      	movs	r0, #0
 801a3ce:	e008      	b.n	801a3e2 <_printf_common+0xb2>
 801a3d0:	2301      	movs	r3, #1
 801a3d2:	4652      	mov	r2, sl
 801a3d4:	4649      	mov	r1, r9
 801a3d6:	4638      	mov	r0, r7
 801a3d8:	47c0      	blx	r8
 801a3da:	3001      	adds	r0, #1
 801a3dc:	d103      	bne.n	801a3e6 <_printf_common+0xb6>
 801a3de:	f04f 30ff 	mov.w	r0, #4294967295
 801a3e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3e6:	3501      	adds	r5, #1
 801a3e8:	e7c1      	b.n	801a36e <_printf_common+0x3e>
 801a3ea:	18e1      	adds	r1, r4, r3
 801a3ec:	1c5a      	adds	r2, r3, #1
 801a3ee:	2030      	movs	r0, #48	; 0x30
 801a3f0:	3302      	adds	r3, #2
 801a3f2:	4422      	add	r2, r4
 801a3f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a3f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a3fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a400:	e7c2      	b.n	801a388 <_printf_common+0x58>
 801a402:	2301      	movs	r3, #1
 801a404:	4622      	mov	r2, r4
 801a406:	4649      	mov	r1, r9
 801a408:	4638      	mov	r0, r7
 801a40a:	47c0      	blx	r8
 801a40c:	3001      	adds	r0, #1
 801a40e:	d0e6      	beq.n	801a3de <_printf_common+0xae>
 801a410:	3601      	adds	r6, #1
 801a412:	e7d9      	b.n	801a3c8 <_printf_common+0x98>

0801a414 <_printf_i>:
 801a414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a418:	7e0f      	ldrb	r7, [r1, #24]
 801a41a:	4691      	mov	r9, r2
 801a41c:	4680      	mov	r8, r0
 801a41e:	460c      	mov	r4, r1
 801a420:	2f78      	cmp	r7, #120	; 0x78
 801a422:	469a      	mov	sl, r3
 801a424:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a426:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a42a:	d807      	bhi.n	801a43c <_printf_i+0x28>
 801a42c:	2f62      	cmp	r7, #98	; 0x62
 801a42e:	d80a      	bhi.n	801a446 <_printf_i+0x32>
 801a430:	2f00      	cmp	r7, #0
 801a432:	f000 80d3 	beq.w	801a5dc <_printf_i+0x1c8>
 801a436:	2f58      	cmp	r7, #88	; 0x58
 801a438:	f000 80bf 	beq.w	801a5ba <_printf_i+0x1a6>
 801a43c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a440:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a444:	e03a      	b.n	801a4bc <_printf_i+0xa8>
 801a446:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a44a:	2b15      	cmp	r3, #21
 801a44c:	d8f6      	bhi.n	801a43c <_printf_i+0x28>
 801a44e:	a101      	add	r1, pc, #4	; (adr r1, 801a454 <_printf_i+0x40>)
 801a450:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a454:	0801a4ad 	.word	0x0801a4ad
 801a458:	0801a4c1 	.word	0x0801a4c1
 801a45c:	0801a43d 	.word	0x0801a43d
 801a460:	0801a43d 	.word	0x0801a43d
 801a464:	0801a43d 	.word	0x0801a43d
 801a468:	0801a43d 	.word	0x0801a43d
 801a46c:	0801a4c1 	.word	0x0801a4c1
 801a470:	0801a43d 	.word	0x0801a43d
 801a474:	0801a43d 	.word	0x0801a43d
 801a478:	0801a43d 	.word	0x0801a43d
 801a47c:	0801a43d 	.word	0x0801a43d
 801a480:	0801a5c3 	.word	0x0801a5c3
 801a484:	0801a4ed 	.word	0x0801a4ed
 801a488:	0801a57f 	.word	0x0801a57f
 801a48c:	0801a43d 	.word	0x0801a43d
 801a490:	0801a43d 	.word	0x0801a43d
 801a494:	0801a5e5 	.word	0x0801a5e5
 801a498:	0801a43d 	.word	0x0801a43d
 801a49c:	0801a4ed 	.word	0x0801a4ed
 801a4a0:	0801a43d 	.word	0x0801a43d
 801a4a4:	0801a43d 	.word	0x0801a43d
 801a4a8:	0801a587 	.word	0x0801a587
 801a4ac:	682b      	ldr	r3, [r5, #0]
 801a4ae:	1d1a      	adds	r2, r3, #4
 801a4b0:	681b      	ldr	r3, [r3, #0]
 801a4b2:	602a      	str	r2, [r5, #0]
 801a4b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a4b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a4bc:	2301      	movs	r3, #1
 801a4be:	e09e      	b.n	801a5fe <_printf_i+0x1ea>
 801a4c0:	6820      	ldr	r0, [r4, #0]
 801a4c2:	682b      	ldr	r3, [r5, #0]
 801a4c4:	0607      	lsls	r7, r0, #24
 801a4c6:	f103 0104 	add.w	r1, r3, #4
 801a4ca:	6029      	str	r1, [r5, #0]
 801a4cc:	d501      	bpl.n	801a4d2 <_printf_i+0xbe>
 801a4ce:	681e      	ldr	r6, [r3, #0]
 801a4d0:	e003      	b.n	801a4da <_printf_i+0xc6>
 801a4d2:	0646      	lsls	r6, r0, #25
 801a4d4:	d5fb      	bpl.n	801a4ce <_printf_i+0xba>
 801a4d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a4da:	2e00      	cmp	r6, #0
 801a4dc:	da03      	bge.n	801a4e6 <_printf_i+0xd2>
 801a4de:	232d      	movs	r3, #45	; 0x2d
 801a4e0:	4276      	negs	r6, r6
 801a4e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a4e6:	4859      	ldr	r0, [pc, #356]	; (801a64c <_printf_i+0x238>)
 801a4e8:	230a      	movs	r3, #10
 801a4ea:	e012      	b.n	801a512 <_printf_i+0xfe>
 801a4ec:	682b      	ldr	r3, [r5, #0]
 801a4ee:	6820      	ldr	r0, [r4, #0]
 801a4f0:	1d19      	adds	r1, r3, #4
 801a4f2:	6029      	str	r1, [r5, #0]
 801a4f4:	0605      	lsls	r5, r0, #24
 801a4f6:	d501      	bpl.n	801a4fc <_printf_i+0xe8>
 801a4f8:	681e      	ldr	r6, [r3, #0]
 801a4fa:	e002      	b.n	801a502 <_printf_i+0xee>
 801a4fc:	0641      	lsls	r1, r0, #25
 801a4fe:	d5fb      	bpl.n	801a4f8 <_printf_i+0xe4>
 801a500:	881e      	ldrh	r6, [r3, #0]
 801a502:	2f6f      	cmp	r7, #111	; 0x6f
 801a504:	4851      	ldr	r0, [pc, #324]	; (801a64c <_printf_i+0x238>)
 801a506:	bf0c      	ite	eq
 801a508:	2308      	moveq	r3, #8
 801a50a:	230a      	movne	r3, #10
 801a50c:	2100      	movs	r1, #0
 801a50e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a512:	6865      	ldr	r5, [r4, #4]
 801a514:	2d00      	cmp	r5, #0
 801a516:	60a5      	str	r5, [r4, #8]
 801a518:	bfa2      	ittt	ge
 801a51a:	6821      	ldrge	r1, [r4, #0]
 801a51c:	f021 0104 	bicge.w	r1, r1, #4
 801a520:	6021      	strge	r1, [r4, #0]
 801a522:	b90e      	cbnz	r6, 801a528 <_printf_i+0x114>
 801a524:	2d00      	cmp	r5, #0
 801a526:	d04a      	beq.n	801a5be <_printf_i+0x1aa>
 801a528:	4615      	mov	r5, r2
 801a52a:	fbb6 f1f3 	udiv	r1, r6, r3
 801a52e:	fb03 6711 	mls	r7, r3, r1, r6
 801a532:	5dc7      	ldrb	r7, [r0, r7]
 801a534:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a538:	4637      	mov	r7, r6
 801a53a:	460e      	mov	r6, r1
 801a53c:	42bb      	cmp	r3, r7
 801a53e:	d9f4      	bls.n	801a52a <_printf_i+0x116>
 801a540:	2b08      	cmp	r3, #8
 801a542:	d10b      	bne.n	801a55c <_printf_i+0x148>
 801a544:	6823      	ldr	r3, [r4, #0]
 801a546:	07de      	lsls	r6, r3, #31
 801a548:	d508      	bpl.n	801a55c <_printf_i+0x148>
 801a54a:	6923      	ldr	r3, [r4, #16]
 801a54c:	6861      	ldr	r1, [r4, #4]
 801a54e:	4299      	cmp	r1, r3
 801a550:	bfde      	ittt	le
 801a552:	2330      	movle	r3, #48	; 0x30
 801a554:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a558:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a55c:	1b52      	subs	r2, r2, r5
 801a55e:	6122      	str	r2, [r4, #16]
 801a560:	464b      	mov	r3, r9
 801a562:	aa03      	add	r2, sp, #12
 801a564:	4621      	mov	r1, r4
 801a566:	4640      	mov	r0, r8
 801a568:	f8cd a000 	str.w	sl, [sp]
 801a56c:	f7ff fee0 	bl	801a330 <_printf_common>
 801a570:	3001      	adds	r0, #1
 801a572:	d149      	bne.n	801a608 <_printf_i+0x1f4>
 801a574:	f04f 30ff 	mov.w	r0, #4294967295
 801a578:	b004      	add	sp, #16
 801a57a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a57e:	6823      	ldr	r3, [r4, #0]
 801a580:	f043 0320 	orr.w	r3, r3, #32
 801a584:	6023      	str	r3, [r4, #0]
 801a586:	2778      	movs	r7, #120	; 0x78
 801a588:	4831      	ldr	r0, [pc, #196]	; (801a650 <_printf_i+0x23c>)
 801a58a:	6823      	ldr	r3, [r4, #0]
 801a58c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a590:	061f      	lsls	r7, r3, #24
 801a592:	6829      	ldr	r1, [r5, #0]
 801a594:	f851 6b04 	ldr.w	r6, [r1], #4
 801a598:	d402      	bmi.n	801a5a0 <_printf_i+0x18c>
 801a59a:	065f      	lsls	r7, r3, #25
 801a59c:	bf48      	it	mi
 801a59e:	b2b6      	uxthmi	r6, r6
 801a5a0:	07df      	lsls	r7, r3, #31
 801a5a2:	6029      	str	r1, [r5, #0]
 801a5a4:	bf44      	itt	mi
 801a5a6:	f043 0320 	orrmi.w	r3, r3, #32
 801a5aa:	6023      	strmi	r3, [r4, #0]
 801a5ac:	b91e      	cbnz	r6, 801a5b6 <_printf_i+0x1a2>
 801a5ae:	6823      	ldr	r3, [r4, #0]
 801a5b0:	f023 0320 	bic.w	r3, r3, #32
 801a5b4:	6023      	str	r3, [r4, #0]
 801a5b6:	2310      	movs	r3, #16
 801a5b8:	e7a8      	b.n	801a50c <_printf_i+0xf8>
 801a5ba:	4824      	ldr	r0, [pc, #144]	; (801a64c <_printf_i+0x238>)
 801a5bc:	e7e5      	b.n	801a58a <_printf_i+0x176>
 801a5be:	4615      	mov	r5, r2
 801a5c0:	e7be      	b.n	801a540 <_printf_i+0x12c>
 801a5c2:	682b      	ldr	r3, [r5, #0]
 801a5c4:	6826      	ldr	r6, [r4, #0]
 801a5c6:	1d18      	adds	r0, r3, #4
 801a5c8:	6961      	ldr	r1, [r4, #20]
 801a5ca:	6028      	str	r0, [r5, #0]
 801a5cc:	0635      	lsls	r5, r6, #24
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	d501      	bpl.n	801a5d6 <_printf_i+0x1c2>
 801a5d2:	6019      	str	r1, [r3, #0]
 801a5d4:	e002      	b.n	801a5dc <_printf_i+0x1c8>
 801a5d6:	0670      	lsls	r0, r6, #25
 801a5d8:	d5fb      	bpl.n	801a5d2 <_printf_i+0x1be>
 801a5da:	8019      	strh	r1, [r3, #0]
 801a5dc:	2300      	movs	r3, #0
 801a5de:	4615      	mov	r5, r2
 801a5e0:	6123      	str	r3, [r4, #16]
 801a5e2:	e7bd      	b.n	801a560 <_printf_i+0x14c>
 801a5e4:	682b      	ldr	r3, [r5, #0]
 801a5e6:	2100      	movs	r1, #0
 801a5e8:	1d1a      	adds	r2, r3, #4
 801a5ea:	602a      	str	r2, [r5, #0]
 801a5ec:	681d      	ldr	r5, [r3, #0]
 801a5ee:	6862      	ldr	r2, [r4, #4]
 801a5f0:	4628      	mov	r0, r5
 801a5f2:	f7ff fc23 	bl	8019e3c <memchr>
 801a5f6:	b108      	cbz	r0, 801a5fc <_printf_i+0x1e8>
 801a5f8:	1b40      	subs	r0, r0, r5
 801a5fa:	6060      	str	r0, [r4, #4]
 801a5fc:	6863      	ldr	r3, [r4, #4]
 801a5fe:	6123      	str	r3, [r4, #16]
 801a600:	2300      	movs	r3, #0
 801a602:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a606:	e7ab      	b.n	801a560 <_printf_i+0x14c>
 801a608:	6923      	ldr	r3, [r4, #16]
 801a60a:	462a      	mov	r2, r5
 801a60c:	4649      	mov	r1, r9
 801a60e:	4640      	mov	r0, r8
 801a610:	47d0      	blx	sl
 801a612:	3001      	adds	r0, #1
 801a614:	d0ae      	beq.n	801a574 <_printf_i+0x160>
 801a616:	6823      	ldr	r3, [r4, #0]
 801a618:	079b      	lsls	r3, r3, #30
 801a61a:	d413      	bmi.n	801a644 <_printf_i+0x230>
 801a61c:	68e0      	ldr	r0, [r4, #12]
 801a61e:	9b03      	ldr	r3, [sp, #12]
 801a620:	4298      	cmp	r0, r3
 801a622:	bfb8      	it	lt
 801a624:	4618      	movlt	r0, r3
 801a626:	e7a7      	b.n	801a578 <_printf_i+0x164>
 801a628:	2301      	movs	r3, #1
 801a62a:	4632      	mov	r2, r6
 801a62c:	4649      	mov	r1, r9
 801a62e:	4640      	mov	r0, r8
 801a630:	47d0      	blx	sl
 801a632:	3001      	adds	r0, #1
 801a634:	d09e      	beq.n	801a574 <_printf_i+0x160>
 801a636:	3501      	adds	r5, #1
 801a638:	68e3      	ldr	r3, [r4, #12]
 801a63a:	9903      	ldr	r1, [sp, #12]
 801a63c:	1a5b      	subs	r3, r3, r1
 801a63e:	42ab      	cmp	r3, r5
 801a640:	dcf2      	bgt.n	801a628 <_printf_i+0x214>
 801a642:	e7eb      	b.n	801a61c <_printf_i+0x208>
 801a644:	2500      	movs	r5, #0
 801a646:	f104 0619 	add.w	r6, r4, #25
 801a64a:	e7f5      	b.n	801a638 <_printf_i+0x224>
 801a64c:	0801b108 	.word	0x0801b108
 801a650:	0801b119 	.word	0x0801b119

0801a654 <__swbuf_r>:
 801a654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a656:	460e      	mov	r6, r1
 801a658:	4614      	mov	r4, r2
 801a65a:	4605      	mov	r5, r0
 801a65c:	b118      	cbz	r0, 801a666 <__swbuf_r+0x12>
 801a65e:	6a03      	ldr	r3, [r0, #32]
 801a660:	b90b      	cbnz	r3, 801a666 <__swbuf_r+0x12>
 801a662:	f7fe fd97 	bl	8019194 <__sinit>
 801a666:	69a3      	ldr	r3, [r4, #24]
 801a668:	60a3      	str	r3, [r4, #8]
 801a66a:	89a3      	ldrh	r3, [r4, #12]
 801a66c:	071a      	lsls	r2, r3, #28
 801a66e:	d525      	bpl.n	801a6bc <__swbuf_r+0x68>
 801a670:	6923      	ldr	r3, [r4, #16]
 801a672:	b31b      	cbz	r3, 801a6bc <__swbuf_r+0x68>
 801a674:	6823      	ldr	r3, [r4, #0]
 801a676:	b2f6      	uxtb	r6, r6
 801a678:	6922      	ldr	r2, [r4, #16]
 801a67a:	4637      	mov	r7, r6
 801a67c:	1a98      	subs	r0, r3, r2
 801a67e:	6963      	ldr	r3, [r4, #20]
 801a680:	4283      	cmp	r3, r0
 801a682:	dc04      	bgt.n	801a68e <__swbuf_r+0x3a>
 801a684:	4621      	mov	r1, r4
 801a686:	4628      	mov	r0, r5
 801a688:	f7ff fb2e 	bl	8019ce8 <_fflush_r>
 801a68c:	b9e0      	cbnz	r0, 801a6c8 <__swbuf_r+0x74>
 801a68e:	68a3      	ldr	r3, [r4, #8]
 801a690:	3b01      	subs	r3, #1
 801a692:	60a3      	str	r3, [r4, #8]
 801a694:	6823      	ldr	r3, [r4, #0]
 801a696:	1c5a      	adds	r2, r3, #1
 801a698:	6022      	str	r2, [r4, #0]
 801a69a:	701e      	strb	r6, [r3, #0]
 801a69c:	1c43      	adds	r3, r0, #1
 801a69e:	6962      	ldr	r2, [r4, #20]
 801a6a0:	429a      	cmp	r2, r3
 801a6a2:	d004      	beq.n	801a6ae <__swbuf_r+0x5a>
 801a6a4:	89a3      	ldrh	r3, [r4, #12]
 801a6a6:	07db      	lsls	r3, r3, #31
 801a6a8:	d506      	bpl.n	801a6b8 <__swbuf_r+0x64>
 801a6aa:	2e0a      	cmp	r6, #10
 801a6ac:	d104      	bne.n	801a6b8 <__swbuf_r+0x64>
 801a6ae:	4621      	mov	r1, r4
 801a6b0:	4628      	mov	r0, r5
 801a6b2:	f7ff fb19 	bl	8019ce8 <_fflush_r>
 801a6b6:	b938      	cbnz	r0, 801a6c8 <__swbuf_r+0x74>
 801a6b8:	4638      	mov	r0, r7
 801a6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a6bc:	4621      	mov	r1, r4
 801a6be:	4628      	mov	r0, r5
 801a6c0:	f000 f806 	bl	801a6d0 <__swsetup_r>
 801a6c4:	2800      	cmp	r0, #0
 801a6c6:	d0d5      	beq.n	801a674 <__swbuf_r+0x20>
 801a6c8:	f04f 37ff 	mov.w	r7, #4294967295
 801a6cc:	e7f4      	b.n	801a6b8 <__swbuf_r+0x64>
	...

0801a6d0 <__swsetup_r>:
 801a6d0:	b538      	push	{r3, r4, r5, lr}
 801a6d2:	4b2a      	ldr	r3, [pc, #168]	; (801a77c <__swsetup_r+0xac>)
 801a6d4:	4605      	mov	r5, r0
 801a6d6:	460c      	mov	r4, r1
 801a6d8:	6818      	ldr	r0, [r3, #0]
 801a6da:	b118      	cbz	r0, 801a6e4 <__swsetup_r+0x14>
 801a6dc:	6a03      	ldr	r3, [r0, #32]
 801a6de:	b90b      	cbnz	r3, 801a6e4 <__swsetup_r+0x14>
 801a6e0:	f7fe fd58 	bl	8019194 <__sinit>
 801a6e4:	89a3      	ldrh	r3, [r4, #12]
 801a6e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a6ea:	0718      	lsls	r0, r3, #28
 801a6ec:	d422      	bmi.n	801a734 <__swsetup_r+0x64>
 801a6ee:	06d9      	lsls	r1, r3, #27
 801a6f0:	d407      	bmi.n	801a702 <__swsetup_r+0x32>
 801a6f2:	2309      	movs	r3, #9
 801a6f4:	602b      	str	r3, [r5, #0]
 801a6f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a6fa:	f04f 30ff 	mov.w	r0, #4294967295
 801a6fe:	81a3      	strh	r3, [r4, #12]
 801a700:	e034      	b.n	801a76c <__swsetup_r+0x9c>
 801a702:	0758      	lsls	r0, r3, #29
 801a704:	d512      	bpl.n	801a72c <__swsetup_r+0x5c>
 801a706:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a708:	b141      	cbz	r1, 801a71c <__swsetup_r+0x4c>
 801a70a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a70e:	4299      	cmp	r1, r3
 801a710:	d002      	beq.n	801a718 <__swsetup_r+0x48>
 801a712:	4628      	mov	r0, r5
 801a714:	f7fe fefa 	bl	801950c <_free_r>
 801a718:	2300      	movs	r3, #0
 801a71a:	6363      	str	r3, [r4, #52]	; 0x34
 801a71c:	89a3      	ldrh	r3, [r4, #12]
 801a71e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a722:	81a3      	strh	r3, [r4, #12]
 801a724:	2300      	movs	r3, #0
 801a726:	6063      	str	r3, [r4, #4]
 801a728:	6923      	ldr	r3, [r4, #16]
 801a72a:	6023      	str	r3, [r4, #0]
 801a72c:	89a3      	ldrh	r3, [r4, #12]
 801a72e:	f043 0308 	orr.w	r3, r3, #8
 801a732:	81a3      	strh	r3, [r4, #12]
 801a734:	6923      	ldr	r3, [r4, #16]
 801a736:	b94b      	cbnz	r3, 801a74c <__swsetup_r+0x7c>
 801a738:	89a3      	ldrh	r3, [r4, #12]
 801a73a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a73e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a742:	d003      	beq.n	801a74c <__swsetup_r+0x7c>
 801a744:	4621      	mov	r1, r4
 801a746:	4628      	mov	r0, r5
 801a748:	f000 f847 	bl	801a7da <__smakebuf_r>
 801a74c:	89a0      	ldrh	r0, [r4, #12]
 801a74e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a752:	f010 0301 	ands.w	r3, r0, #1
 801a756:	d00a      	beq.n	801a76e <__swsetup_r+0x9e>
 801a758:	2300      	movs	r3, #0
 801a75a:	60a3      	str	r3, [r4, #8]
 801a75c:	6963      	ldr	r3, [r4, #20]
 801a75e:	425b      	negs	r3, r3
 801a760:	61a3      	str	r3, [r4, #24]
 801a762:	6923      	ldr	r3, [r4, #16]
 801a764:	b943      	cbnz	r3, 801a778 <__swsetup_r+0xa8>
 801a766:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a76a:	d1c4      	bne.n	801a6f6 <__swsetup_r+0x26>
 801a76c:	bd38      	pop	{r3, r4, r5, pc}
 801a76e:	0781      	lsls	r1, r0, #30
 801a770:	bf58      	it	pl
 801a772:	6963      	ldrpl	r3, [r4, #20]
 801a774:	60a3      	str	r3, [r4, #8]
 801a776:	e7f4      	b.n	801a762 <__swsetup_r+0x92>
 801a778:	2000      	movs	r0, #0
 801a77a:	e7f7      	b.n	801a76c <__swsetup_r+0x9c>
 801a77c:	200000f8 	.word	0x200000f8

0801a780 <_malloc_usable_size_r>:
 801a780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a784:	1f18      	subs	r0, r3, #4
 801a786:	2b00      	cmp	r3, #0
 801a788:	bfbc      	itt	lt
 801a78a:	580b      	ldrlt	r3, [r1, r0]
 801a78c:	18c0      	addlt	r0, r0, r3
 801a78e:	4770      	bx	lr

0801a790 <__swhatbuf_r>:
 801a790:	b570      	push	{r4, r5, r6, lr}
 801a792:	460c      	mov	r4, r1
 801a794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a798:	b096      	sub	sp, #88	; 0x58
 801a79a:	4615      	mov	r5, r2
 801a79c:	2900      	cmp	r1, #0
 801a79e:	461e      	mov	r6, r3
 801a7a0:	da0c      	bge.n	801a7bc <__swhatbuf_r+0x2c>
 801a7a2:	89a3      	ldrh	r3, [r4, #12]
 801a7a4:	2100      	movs	r1, #0
 801a7a6:	f013 0f80 	tst.w	r3, #128	; 0x80
 801a7aa:	bf0c      	ite	eq
 801a7ac:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801a7b0:	2340      	movne	r3, #64	; 0x40
 801a7b2:	2000      	movs	r0, #0
 801a7b4:	6031      	str	r1, [r6, #0]
 801a7b6:	602b      	str	r3, [r5, #0]
 801a7b8:	b016      	add	sp, #88	; 0x58
 801a7ba:	bd70      	pop	{r4, r5, r6, pc}
 801a7bc:	466a      	mov	r2, sp
 801a7be:	f000 f849 	bl	801a854 <_fstat_r>
 801a7c2:	2800      	cmp	r0, #0
 801a7c4:	dbed      	blt.n	801a7a2 <__swhatbuf_r+0x12>
 801a7c6:	9901      	ldr	r1, [sp, #4]
 801a7c8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801a7cc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801a7d0:	4259      	negs	r1, r3
 801a7d2:	4159      	adcs	r1, r3
 801a7d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a7d8:	e7eb      	b.n	801a7b2 <__swhatbuf_r+0x22>

0801a7da <__smakebuf_r>:
 801a7da:	898b      	ldrh	r3, [r1, #12]
 801a7dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a7de:	079d      	lsls	r5, r3, #30
 801a7e0:	4606      	mov	r6, r0
 801a7e2:	460c      	mov	r4, r1
 801a7e4:	d507      	bpl.n	801a7f6 <__smakebuf_r+0x1c>
 801a7e6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a7ea:	6023      	str	r3, [r4, #0]
 801a7ec:	6123      	str	r3, [r4, #16]
 801a7ee:	2301      	movs	r3, #1
 801a7f0:	6163      	str	r3, [r4, #20]
 801a7f2:	b002      	add	sp, #8
 801a7f4:	bd70      	pop	{r4, r5, r6, pc}
 801a7f6:	ab01      	add	r3, sp, #4
 801a7f8:	466a      	mov	r2, sp
 801a7fa:	f7ff ffc9 	bl	801a790 <__swhatbuf_r>
 801a7fe:	9900      	ldr	r1, [sp, #0]
 801a800:	4605      	mov	r5, r0
 801a802:	4630      	mov	r0, r6
 801a804:	f7fe fb70 	bl	8018ee8 <_malloc_r>
 801a808:	b948      	cbnz	r0, 801a81e <__smakebuf_r+0x44>
 801a80a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a80e:	059a      	lsls	r2, r3, #22
 801a810:	d4ef      	bmi.n	801a7f2 <__smakebuf_r+0x18>
 801a812:	f023 0303 	bic.w	r3, r3, #3
 801a816:	f043 0302 	orr.w	r3, r3, #2
 801a81a:	81a3      	strh	r3, [r4, #12]
 801a81c:	e7e3      	b.n	801a7e6 <__smakebuf_r+0xc>
 801a81e:	89a3      	ldrh	r3, [r4, #12]
 801a820:	6020      	str	r0, [r4, #0]
 801a822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a826:	6120      	str	r0, [r4, #16]
 801a828:	81a3      	strh	r3, [r4, #12]
 801a82a:	9b00      	ldr	r3, [sp, #0]
 801a82c:	6163      	str	r3, [r4, #20]
 801a82e:	9b01      	ldr	r3, [sp, #4]
 801a830:	b15b      	cbz	r3, 801a84a <__smakebuf_r+0x70>
 801a832:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a836:	4630      	mov	r0, r6
 801a838:	f000 f81e 	bl	801a878 <_isatty_r>
 801a83c:	b128      	cbz	r0, 801a84a <__smakebuf_r+0x70>
 801a83e:	89a3      	ldrh	r3, [r4, #12]
 801a840:	f023 0303 	bic.w	r3, r3, #3
 801a844:	f043 0301 	orr.w	r3, r3, #1
 801a848:	81a3      	strh	r3, [r4, #12]
 801a84a:	89a3      	ldrh	r3, [r4, #12]
 801a84c:	431d      	orrs	r5, r3
 801a84e:	81a5      	strh	r5, [r4, #12]
 801a850:	e7cf      	b.n	801a7f2 <__smakebuf_r+0x18>
	...

0801a854 <_fstat_r>:
 801a854:	b538      	push	{r3, r4, r5, lr}
 801a856:	2300      	movs	r3, #0
 801a858:	4d06      	ldr	r5, [pc, #24]	; (801a874 <_fstat_r+0x20>)
 801a85a:	4604      	mov	r4, r0
 801a85c:	4608      	mov	r0, r1
 801a85e:	4611      	mov	r1, r2
 801a860:	602b      	str	r3, [r5, #0]
 801a862:	f7f0 fa3e 	bl	800ace2 <_fstat>
 801a866:	1c43      	adds	r3, r0, #1
 801a868:	d102      	bne.n	801a870 <_fstat_r+0x1c>
 801a86a:	682b      	ldr	r3, [r5, #0]
 801a86c:	b103      	cbz	r3, 801a870 <_fstat_r+0x1c>
 801a86e:	6023      	str	r3, [r4, #0]
 801a870:	bd38      	pop	{r3, r4, r5, pc}
 801a872:	bf00      	nop
 801a874:	20009ea0 	.word	0x20009ea0

0801a878 <_isatty_r>:
 801a878:	b538      	push	{r3, r4, r5, lr}
 801a87a:	2300      	movs	r3, #0
 801a87c:	4d05      	ldr	r5, [pc, #20]	; (801a894 <_isatty_r+0x1c>)
 801a87e:	4604      	mov	r4, r0
 801a880:	4608      	mov	r0, r1
 801a882:	602b      	str	r3, [r5, #0]
 801a884:	f7f0 fa3d 	bl	800ad02 <_isatty>
 801a888:	1c43      	adds	r3, r0, #1
 801a88a:	d102      	bne.n	801a892 <_isatty_r+0x1a>
 801a88c:	682b      	ldr	r3, [r5, #0]
 801a88e:	b103      	cbz	r3, 801a892 <_isatty_r+0x1a>
 801a890:	6023      	str	r3, [r4, #0]
 801a892:	bd38      	pop	{r3, r4, r5, pc}
 801a894:	20009ea0 	.word	0x20009ea0

0801a898 <_init>:
 801a898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a89a:	bf00      	nop
 801a89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a89e:	bc08      	pop	{r3}
 801a8a0:	469e      	mov	lr, r3
 801a8a2:	4770      	bx	lr

0801a8a4 <_fini>:
 801a8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8a6:	bf00      	nop
 801a8a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a8aa:	bc08      	pop	{r3}
 801a8ac:	469e      	mov	lr, r3
 801a8ae:	4770      	bx	lr
